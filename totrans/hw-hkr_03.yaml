- en: 2. inside three very different factories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s hard to understand how a computer works without opening it and looking
    around inside. Likewise, it’s hard to understand how products are made without
    going into a factory and touring the line. Although we often think of manufacturing
    as the necessary but boring step after innovation, in reality, the two are tightly
    coupled. An inventor thinks about a product once; a factory thinks about the same
    product day in and day out, sometimes for years on end.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of factories as an innovation node is only growing in today’s
    connected global economy. The reality is that there is no “Apple factory” or “Nike
    factory.” Rather, there is a series of facilities that are domain experts in processes
    (such as PCB fabrication or zipper manufacturing) that are curated by the familiar
    brands. Thus, it’s not uncommon to see two competitors’ products running side
    by side down similar lines in a single facility. This concentration of domain-specific
    expertise means that the best place to learn how to make an aspect of your product
    better is often the same place that makes a similar aspect in everybody else’s
    products.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the greatest insights I’ve had into improving a product have come from
    observing technicians at work on a line and seeing the clever optimization tricks
    they’ve developed after doing the same thing over and over for so long.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter takes you on a tour of three factories that make everyday things:
    PCBs (in particular, the ones used in the Arduino), USB memory sticks, and zippers.
    By peeling back the curtain, you’ll get some insight into the design trade-offs
    behind the products, and how they can be made better. In the PCB factory, I discovered
    the secret of how they print a high-resolution map of Italy on the back of every
    Arduino; in the USB memory stick factory, I witnessed a strange marriage of high-
    and low-tech manufacturing techniques; and in the zipper factory, I found out
    how even the humblest of products can bear valuable lessons for product designers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHERE ARDUINOS ARE BORN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It was July 2012, and it had been about six months since my previous startup,
    Chumby, ceased operations. I had decided to take a year off to figure things out
    and cross a few items off the bucket list, one of which was a trip to Italy. My
    girlfriend had the bright idea of reaching out to the Arduino team to see if I
    could visit their factory in Scarmagno (this was years before the Arduino/Genuino
    split) as part of our itinerary. Members of Officine Arduino (particularly managing
    director Davide Gomba) kindly took time out of their busy schedules to show me
    around their factory. They patiently waited as I expressed my inner shutterbug
    and general love for all things hardware, and I definitely came away with a lot
    of great photos.
  prefs: []
  type: TYPE_NORMAL
- en: A small town in northern Italy, Scarmagno is about an hour and a half west of
    Milan by car, near the Olivetti factories on the outskirts of Torino. The town
    handles all the circuit board fabrication, board stuffing, and distribution for
    officially branded Arduinos. I was really excited to see the factories, and the
    highlight of my tour was seeing System Elettronica, the PCB factory that made
    the Arduino PCBs.
  prefs: []
  type: TYPE_NORMAL
- en: One charming aspect of System Elettronica is that the owner painted the factory
    green, white, and red to match the colors of the Italian flag. On the factory
    floor, I saw some of that spirit in the red and green posts that ran the length
    of the facility.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0045-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A wide view of the factory floor at System Electtronica in August 2012*'
  prefs: []
  type: TYPE_NORMAL
- en: But I soon stopped paying much attention to the décor, as that factory floor
    was also where I got to follow a fresh batch of Arduino Leonardos through the
    entire manufacturing process. Here’s how those boards were made.
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting with a Sheet of Copper**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arduino Leonardo boards start as huge sheets of virgin copper-clad FR-4, a material
    made of fiberglass and epoxy that most PCBs use for a substrate, an insulating
    and structural layer between the copper layers. The sheets were 1.6mm thick (the
    most common thickness for a PCB, which corresponds to 1/16 inch), probably a meter
    wide, and about a meter and a half long.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0046-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A stack of copper sheets waiting to become Arduino boards*'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in processing PCBs is to drill all the holes— pads, vias (the
    small holes that connect different layers of the PCB), mounting holes, plated
    slots, and so forth. When a PCB is manufactured, the holes are drilled before
    *patterning*, the stage where a masking chemical is photographically defined on
    the sheet everywhere the final boards need to have copper, including locations
    of traces, solder pads, and so on. Some of the drilled holes are used to align
    the masks that pattern the traces later in the process. Drilling is also a dirty
    and messy process that could damage circuit patterns if they were in place beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0047-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The CNC drilling head used to drill the Arduino boards*'
  prefs: []
  type: TYPE_NORMAL
- en: The blank copper panels were stacked three high, and a CNC drill took a single
    pass for all three, allowing it to drill three substrates at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0047-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The drill rack used by the CNC drilling machine. If you’ve ever had to create
    NC-drill files, this is that "drill rack"*'
  prefs: []
  type: TYPE_NORMAL
- en: Every hole in the Arduino board was mechanically drilled, including vias. The
    same is true of any PCB with through-holes, which is why the via count is such
    an important parameter in calculating the cost of a PCB.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the particular drill I saw at System Elettronica was relatively small.
    I’ve seen massive drill decks in China that gang (mechanically attach) four or
    six drill heads together in a truck-size machine, processing dozens of panels
    at the same time as opposed to the three panels this drill could handle. The reasoning
    behind this approach is that the precise, robotic positioning assembly is the
    expensive part of a drilling machine. The drill itself is cheap—just a spinning
    motor to drive the bit. So, one way to increase throughput is to gang several
    drills together on one large assembly and move them in concert. Each individual
    drill still goes through its own stack of panels, but for the price of one X-Y
    positioner, you get four to six times the throughput as the drill I saw on my
    trip to Italy. Those bigger machines drill so fast and hard that the ground shakes
    with every via drilled, even from several meters away.
  prefs: []
  type: TYPE_NORMAL
- en: Once the panels are drilled, cleaned, and deburred, they are ready for the next
    step in the manufacturing process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0048-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A stack of finished, drilled panels of Arduino Leonardo boards*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Applying the PCB Pattern to the Copper**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next step is to apply a *photoresist*, a light-sensitive chemical, to the
    panel and expose a pattern. At System Elettronica, this process used a light box
    and a high-contrast film. I’ve also seen direct laser imaging—in the form of a
    raster-scanning laser—used to apply a pattern to a PCB. Direct laser scanners
    are more common in quick-turn prototype houses, and film imaging is more common
    in mass-production houses.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0049-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Before and after: the right panel shows photoresist prior to exposure, and
    the left panel after.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0049-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A PCB being mounted into a light box that will expose its unprocessed backside
    film*'
  prefs: []
  type: TYPE_NORMAL
- en: After the pattern is applied, each panel of boards is sent into a machine to
    be developed. In this case, the same machine is used to develop both the photoresist
    and the soldermask.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0050-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The machine that develops the photoresist*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0050-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*This photo of a panel with developed photoresist is one of my favorite photos
    from the System Elettronica factory. Also, something about “Codice: Leonardo”
    just sounds cool.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Etching the PCBs**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After photo processing and development, the panels go through a series of chemical
    baths that etch and plate the copper.
  prefs: []
  type: TYPE_NORMAL
- en: The panels are swished gently back and forth in a chemical bath to expedite
    the etching process. The movement also circulates used etchant away from the panels,
    ensuring a more uniform etch rate regardless of the amount of copper to be removed.
    Moving the panels through these chemical baths was fully automated at Scarmagno.
    Automation is necessary because the panels must be treated with a series of caustic
    chemical baths with minimal exposure to oxygen. Oxygen can spoil a panel in a
    matter of seconds, so the transfer between the baths needs to be fast, and the
    amount of time a panel spends in a bath must be consistent. The baths also contain
    chemicals harmful to humans, so it’s much safer for a robot to do this work.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0051-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A machine that moves panels around in etchant*'
  prefs: []
  type: TYPE_NORMAL
- en: Once the panels are processed in this series of solutions, a dull, white plating
    (which I’m guessing is nickel or tin) develops on all the surfaces of the panel
    not treated with photoresist, including the previously unplated through-hole vias
    and pads.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0052-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Panels of Arduino Leonardo boards after going through a series of chemical
    baths*'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the resist and unplated copper are stripped off, leaving just
    the raw FR-4 and the plated copper. The final step of processing produces a bright
    copper finish.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0052-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A panel etched of unwanted copper*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0053-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*PCB panels with bright, shiny copper. This photo doesn’t show an Arduino panel,
    as those weren’t going through the machine when I photographed it.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Applying Soldermask and Silkscreen**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once the copper is polished, the panels are ready for the *soldermask* (a protective,
    lacquer-like layer that insulates the copper traces below and prevents solder
    bridging above) and *silkscreen* (the ink used to label components, draw logos,
    and so on). These are applied in a process very similar to that of the trace patterns,
    using a photomask and developer/stripper machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0053-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A panel of Arduino boards with both soldermask and silkscreen developed*'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Arduinos, the silkscreen is actually a second layer of soldermask.
    A very specific formulation of dry-film white soldermask was procured for the
    Arduino team to create a sharp, good-looking layer that resolved the intricate
    artwork you see on Arduino boards—particularly the map of Italy on the backside.
    Other techniques I’ve seen for producing silkscreen layers include high-resolution
    inkjet printing, which is better suited for quick-turn board houses, and of course,
    the namesake squeegee-and-paint silkscreen process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing and Finishing the Boards**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After all that chemical processing, the panels receive a protective plating
    of solder from a hot-air solder leveling machine.
  prefs: []
  type: TYPE_NORMAL
- en: With the solder plating in place, every board is 100 percent tested. Every trace
    has its continuity and resistance measured with a pair of flying probes. The process
    I saw is called *flying head testing* (also referred to as *flying probe testing*),
    and in that sort of setup, several pairs of arms with needlelike probes test continuity
    between pairs of traces in a swift tapping motion. Considering all the traces
    on an Arduino Leonardo, that’s a lot of probing! Fortunately the robot’s arms
    move like a blur, as it can probe hundreds of points per minute.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*An alternative to flying head testing is clamshell testing, where a set of
    pogo pins is put into a fixture that can test the entire board with a single mechanical
    operation. However, clamshell fixtures are very labor-intensive to assemble and
    maintain, and require physical rewiring every time the Gerber files describing
    the PCB images are updated. So, in lower volumes, flying probe testing is more
    cost-effective and flexible than clamshell testing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0055-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A stack of near-finished PCB panels, ready for a final step of routing out
    the individual boards*'
  prefs: []
  type: TYPE_NORMAL
- en: This particular facility only created the panels; a different factory actually
    populated the components. In situations like that, before the panels can be sent
    to the next factory, the individual PCBs need to be routed so they’ll fit inside
    *surface mount technology (SMT)* machines to have the components placed. The panels
    are once again stacked up and batch-processed through a machine that uses a router
    bit to cut and release the boards. After that, the boards are finally ready to
    ship to the SMT facility.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0055-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Several Arduino panels, stacked for routing*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0056-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Smaller 2×6 panels make SMT processing more efficient.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0056-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A veritable stack of about 25,000 bare Arduino PCBs, ready to leave the PCB
    factory. From there, they were stuffed, shipped, and sold to makers around the
    world!*'
  prefs: []
  type: TYPE_NORMAL
- en: I’m glad I made the side trip to visit the Arduino PCB factory. I’ve visited
    several PCB factories, and every one has a different character and its own set
    of tricks to improve yield, as well as unique limitations that designers need
    to compensate for. It was also interesting to see the little trick about using
    an extra layer of soldermask instead of silkscreen for achieving high cosmetic
    quality. While the resolution of a silkscreen is limited by the mesh of the silk
    barrier to hold the paint, soldermask is limited by the quality of the optics
    and chemical developing, giving over an order of magnitude improvement in resolution
    and ultimately a higher perceived quality. Normally the lower quality of silkscreen
    is acceptable because end users don’t see the circuit boards inside computers,
    but for Arduino, the end product *is* the circuit board.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHERE USB MEMORY STICKS ARE BORN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several months after my tour of the Arduino factory, I had the good fortune
    of being a keynote speaker at Linux Conference Australia (LCA) 2013\. In my talk,
    “Linux in the Flesh: Adventures Embedding Linux in Hardware,” I discussed how
    Linux is in all kinds of devices we see every day. This story isn’t about Linux,
    but it does connect me and, tangentially, LCA to a factory.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the tchotchkes I received from the LCA organizers was a little USB memory
    stick with Tux the penguin, the Linux mascot, on the outside. When I saw the device,
    I thought it was a neat coincidence that about a week before the conference, I
    had been in a factory that manufactured USB memory sticks exactly like it. I saw
    the USB stick board assembly process from start to finish, and it surprisingly
    involved a lot less automation than the Arduino manufacturing process did.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Beginning of a USB Stick**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: USB sticks start life as bare flash memory chips. Prior to being mounted on
    PCBs, these chips are screened for memory capacity and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0058-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A workstation where flash memory chips are screened.'
  prefs: []
  type: TYPE_NORMAL
- en: The metal rectangle on the left with the circular cutaway is the probe card.*
  prefs: []
  type: TYPE_NORMAL
- en: At a workstation in this factory, stacks of bare-die flash chips awaited testing
    and binning with a *probe card*, which has tiny, very accurately positioned pins
    used to touch down on pads only a little bit wider than a human hair on a silicon
    wafer’s surface. (I love how the worker at this particular station used rubber
    bands to hold an analog current meter to the probe card.)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0058-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The probe card, up close*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0059-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Looking through the microscope on the microprobing station. Notice the needles
    touching the square pads at the edge of the flash chip’s surface. Each pad is
    perhaps 100 microns on a side—a human hair is about 70 microns in diameter.*'
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the chips I saw were absolutely not tested in a clean-room environment.
    Workers handled chips with tweezers and hand suction vises and mounted the probe
    cards into their jigs by hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hand-Placing Chips on a PCB**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once the chips were screened for functionality, they were placed *by hand* onto
    the USB stick PCBs. This is not an unusual practice; every value-oriented wire-bonding
    facility I’ve visited relies on the manual placement of bare die.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0060-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A controller IC being placed on a panel of USB-stick PCBs. The tiny bare dies
    are on the right, sitting in a waffle pack.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0060-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A zoomed-out view of the die-placing workstation*'
  prefs: []
  type: TYPE_NORMAL
- en: The lady I watched placing the bare die was using a chopstick-like tool made
    of hand-cut bamboo. I still haven’t figured out exactly how the process works,
    but my best guess is that the bamboo sticks have just the right surface energy
    to adhere to the silicon die, such that silicon sticks to the tip of the bamboo
    rod. A dot of glue is preapplied to the bare boards, so when the operator touches
    the die down onto the glue, the surface tension of the glue pulls the die off
    of the bamboo stick.
  prefs: []
  type: TYPE_NORMAL
- en: It’s trippy to think that the chips inside my USB stick were handled using modified
    chopsticks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonding the Chips to the PCB**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once the chips were placed on the PCB, they were *wire bonded* to the board
    with an automated bonding machine, which uses computer-assisted image recognition
    to find the location of the bond pads (this is part of the reason the factories
    can get away with manual die placement). Wire bonding is the process that connects
    an integrated circuit to its packaging, and the automated bonding machine connected
    wires to the IC at an insane speed, rotating the circuit board all the while.
    As I watched this process, the operator had to pull off and replace a misbonded
    wire by hand and then refeed the wire into the machine. Given that these wires
    are thinner than a strand of hair and that the bonding pads on the packaging and
    the IC are microscopic, that was no mean feat of manual dexterity.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Close Look at the USB Stick Boards**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just as the Arduino factory used panels containing multiple Leonardo boards,
    the USB memory stick factory used panels of eight USB sticks each. Each stick
    in the panel consisted of a flash memory chip and a controller IC that handled
    the bridging between USB and raw flash, a nontrivial task that includes managing
    bad block maps and error correction, among other things. The controller was probably
    an 8051-class CPU running at a few dozen MHz.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0062-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The partially bonded but fully die-mounted PCB that the factory owner gave
    me as a memento from my visit. Some of the wire bonds were crushed in transit.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0063-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Interestingly, the entire USB stick assembly is flexible prior to encapsulation.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0063-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The die marking from the flash chip. Apparently, it’s made by Intel.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0064-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A die shot of the controller chip that went inside the USB sticks*'
  prefs: []
  type: TYPE_NORMAL
- en: Once the panels were bonded and tested, they were over-molded with epoxy and
    then cut into individual pieces, ready for sale.
  prefs: []
  type: TYPE_NORMAL
- en: But that’s enough about electronics manufacturing; next, I want to show you
    a different kind of factory floor.
  prefs: []
  type: TYPE_NORMAL
- en: '**A TALE OF TWO ZIPPERS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'My friend Chris “Akiba” Wang has a similar background to mine, except in his
    younger years he was way hipper: he was a dancer for acts like LL Cool J and Run
    DMC in the ’90s. After going through a phase working for big semiconductor companies,
    he eventually quit and followed his passion to design and manufacture his own
    hardware projects. An expert in short-range, low-power wireless networking (he’s
    co-authored a book on Bluetooth low energy and sells an Arduino + 802.15.4 variant
    called the “Freakduino”), he now consults for organizations like the United Nations
    and Keio University, runs FreakLabs, and collaborates with various dance acts,
    such as the Wrecking Crew, to provide unique and compelling lighting solutions
    for stage shows.'
  prefs: []
  type: TYPE_NORMAL
- en: I had the good fortune of introducing Akiba to the greater Shenzhen area on
    a trip with MIT Media Lab students in 2013—the same trip where we toured the USB
    memory stick factory. Since then, he’s been exploring deeper and deeper into the
    area. As his work spans the disciplines of performance art, wearables, and electronics,
    his network of factories is quite different from mine, so I always relish the
    opportunity to learn more about his world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In January 2015, Akiba took me to visit his friend’s zipper factory. I was
    very excited for the tour: no matter how humble the product, I always learn something
    new by visiting its factory. This factory was very different from both the Arduino
    and the USB stick facilities. There were far fewer employees, and it was a highly
    automated, vertically integrated manufacturer. To give you an idea of what that
    means, this facility turned metal ingots, sawdust, and rice into zipper parts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0065-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Approximately 1 ton of ingots, composed of 93 percent zinc and 7 percent aluminum
    alloy*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0066-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Compressed sawdust pellets, used to fuel the ingot smelter*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0066-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Rice, used to feed the workers*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0067-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Finished zipper puller and slider assemblies*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at one side of how that process actually works.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Fully Automated Process**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Between the three input materials and the output product was a fully automated
    die-casting line to create the zipper pullers and sliders, a set of tumblers and
    vibrating pots (or, as I like to call them, “vibrapots”) to release and polish
    the zippers, and a set of machines to deburr and join each puller to its slider.
    I think I counted fewer than a dozen employees in the facility, and I’m guessing
    their capacity well exceeds a million zippers a month.
  prefs: []
  type: TYPE_NORMAL
- en: 'I was mesmerized by the vibrapots[*](footnote.xhtml#fn4) that put the zippers
    together. There were two vibrapots: one with pullers and one with sliders. Both
    sliders and pullers were deposited onto a moving rail, and as I watched these
    miracles at work, it looked as if the sliders and pullers were lining themselves
    up in the right orientation by magic. Each fell into its rail, and at the end
    of the line, they were pressed together into a familiar zipper form, all in a
    single, fully automated machine.'
  prefs: []
  type: TYPE_NORMAL
- en: When I put my hand in the pot, I found there was no stirrer to cause the motion;
    I just felt a strong vibration. I relaxed my hand, and found it started to move
    along with all the other items in the pot. The entire pot was vibrating in a biased
    fashion, such that the items inside tended to move in a circular motion. This
    pushed the pullers and sliders onto the set of rails, which were shaped to take
    advantage of asymmetries in the objects to allow only the pieces that jumped on
    the rail in the correct orientation to continue to the next stage.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Semiautomated Process**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Despite the high level of automation in this factory, many of the workers I
    saw were performing one operation. They fed the pullers for a different kind of
    zipper into a device connected to another vibrapot containing sliders, while the
    device put the sliders and pullers together.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, I asked, “Why do some zippers have fully automated assembly processes,
    whereas others are semiautomatic?”
  prefs: []
  type: TYPE_NORMAL
- en: The answer, it turns out, is very subtle, and it boils down to shape.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0068-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Note the difference in these two pullers, indicated by the arrows.*'
  prefs: []
  type: TYPE_NORMAL
- en: One tiny tab, barely visible, was the difference between full automation and
    needing a human to join millions of sliders and pullers together. To understand
    why, let’s review one critical step in the vibrapot operation. A worker kindly
    paused the vibrapot responsible for sorting the pullers into the correct orientation
    for the fully automatic process so I could take a photo of the key step.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0069-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Pullers coming through the vibrapot*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the pullers came around the rail, their orientation was random: some faced
    right, some left. But the joining operation must only insert the slider into the
    smaller of the two holes. That tiny tab allowed gravity to cause all the pullers
    to hang in the same direction as they fell into a rail toward the left.'
  prefs: []
  type: TYPE_NORMAL
- en: The semiautomated zipper design doesn’t have this tab; as a result, the design
    is too symmetric for a vibrapot to align the puller. I asked the factory owner
    if adding the tiny tab would save this labor, and he said absolutely.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it seemed blindingly obvious to me that all zippers should have
    this tiny tab, but the zipper’s designer wouldn’t have it. Even though such a
    tab is very small, consumers can feel the subtle bumps, and some perceive it as
    a defect in the design. As a result, the designer insisted upon a perfectly smooth
    tab, which accordingly had no feature to easily and reliably allow for automatic
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Irony of Scarcity and Demand**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I’d like to imagine that most people, after watching a person join pullers
    to sliders for a couple of minutes, would be quite content to suffer a tiny bump
    on the tip of their zipper to save another human the fate of manually aligning
    pullers into sliders for eight hours a day. Alternatively, I suppose an engineer
    could spend countless hours trying to design a more complex method for aligning
    the pullers and sliders, but there are two problems with that:'
  prefs: []
  type: TYPE_NORMAL
- en: • The zipper’s customer probably wouldn’t pay for that effort.
  prefs: []
  type: TYPE_NORMAL
- en: • It’s probably net cheaper to pay unskilled labor to manually perform the sorting.
  prefs: []
  type: TYPE_NORMAL
- en: This zipper factory owner had already automated everything else in the facility,
    so I figure they’ve thought long and hard about this problem, too. My guess is
    that robots are expensive to build and maintain; people are self-replicating and
    largely self-maintaining. Remember that third input to the factory—rice? Any robot’s
    spare parts have to be cheaper than rice for the robot to earn a place on this
    factory’s floor.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, however, it’s too much effort to explain this concept to end customers;
    in fact, quite the opposite happens in the market. Putting the smooth zippers
    together involves extra labor, so the zippers cost more; therefore, they tend
    to end up in high-end products. This further enforces the notion that really smooth
    zippers with no tiny tab on them must be the result of quality control and attention
    to detail.
  prefs: []
  type: TYPE_NORMAL
- en: My world is full of small frustrations like this. For example, most customers
    perceive plastics with a mirror finish to be of a higher quality than those with
    a satin finish. There is no functional difference between the two plastics’ structural
    performance, but making something with a mirror finish takes a lot more effort.
    The injection-molding tools must be painstakingly and meticulously polished, and
    at every step in the factory, workers must wear white gloves. Mountains of plastic
    are scrapped for hairline defects, and extra films of plastic are placed over
    mirror surfaces to protect them during shipping.
  prefs: []
  type: TYPE_NORMAL
- en: For all that effort, for all that waste, what’s the first thing users do? They
    put their dirty fingerprints all over the mirror finish. Within a minute of a
    product coming out of the box, all that effort is undone. Or worse yet, the user
    leaves the protective film on, resulting in a net worse cosmetic effect than a
    satin finish.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this to satin-finished plastic. Satin finishes don’t require protective
    films, are easier for workers and users to handle, last longer, and have much
    better yields. In the user’s hands, they hide small scratches, fingerprints, and
    bits of dust. Arguably, the satin finish offers a better long-term customer experience
    than the mirror finish.
  prefs: []
  type: TYPE_NORMAL
- en: But that mirror finish sure does look pretty in photographs and showroom displays!
  prefs: []
  type: TYPE_NORMAL
