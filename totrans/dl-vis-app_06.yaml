- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Curves and Surfaces
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线和表面
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: In machine learning, we frequently work with various kinds of curves and surfaces.
    Two of the most important properties of these objects are called the *derivative*
    and the *gradient*. They describe the shape of a curve or surface, and thus which
    directions to move in order to climb uphill or slide downhill. These ideas are
    at the heart of how deep systems learn. Knowing about the derivative and gradient
    is key to understanding backpropagation (the topic of Chapter 14), and thus knowing
    how to build and train successful networks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，我们经常处理各种类型的曲线和表面。这些对象的两个最重要的性质分别被称为*导数*和*梯度*。它们描述了曲线或表面的形状，从而决定了我们应该朝哪个方向移动，以便向上爬升或向下滑动。这些思想是深度学习系统如何工作的核心。了解导数和梯度对于理解反向传播（第14章的主题）至关重要，因此了解如何构建和训练成功的网络。
- en: As usual, we’ll skip the equations, and instead focus on building intuition
    for what these two terms describe. You can find mathematical depth and rigor on
    everything we touch on here in most books on modern multivariable calculus and
    in more approachable form on many online websites (Apostol 1991; Berkey 1992;
    3Blue 2020).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，我们将跳过方程式，转而专注于构建对这两个术语描述的直观理解。关于我们在这里讨论的内容，您可以在大多数现代多变量微积分书籍中找到数学深度和严谨性，并且许多在线网站也有更加易懂的形式（Apostol
    1991；Berkey 1992；3Blue 2020）。
- en: The Nature of Functions
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数的性质
- en: As just mentioned, in machine learning, we often deal with various kinds of
    curves. Most often, these are plots of mathematical *functions*. We usually think
    of functions in terms of an inputand an output. When we’re dealing with a curve
    in two dimensions (2D), the input is expressed by selecting a location on the
    horizontal axis of a graph. The output is the value of the curve directly above
    that point. In this scenario, we provide one number as input, and get back one
    number as output.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在机器学习中，我们经常处理各种类型的曲线。最常见的这些是数学*函数*的图形。我们通常从输入和输出的角度来看待函数。当我们处理二维（2D）曲线时，输入通过选择图表中的一个位置来表示。输出是该点正上方曲线的值。在这种情况下，我们提供一个数字作为输入，并得到一个数字作为输出。
- en: When we have two inputs, we move into the world of three dimensions. Here, our
    function is a surface, like a sheet fluttering in the wind. Our input is a point
    on the ground below the sheet, and the output is the height of the sheet directly
    above that point. In this situation, we provide two numbers as input (to identify
    a point on the ground) and again get back a single output.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有两个输入时，我们进入了三维世界。在这里，我们的函数是一个表面，像在风中飘动的薄纸。我们的输入是位于薄纸下方地面上的一个点，输出是该点正上方的薄纸的高度。在这种情况下，我们提供两个数字作为输入（用于标识地面上的一个点），并再次得到一个单一的输出。
- en: 'These ideas can be generalized, so functions can accept any number of input
    values, also called *arguments*, and can provide multiple output values, sometimes
    called *returned values*, or simply *returns*. We can think of a function as a
    machine that converts inputs to outputs: one or more numbers go in, and one or
    more numbers come out. As long as we don’t deliberately introduce randomness,
    the system is *deterministic*: every time we give a particular function the same
    inputs, we get back the same outputs.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些思想可以被推广，使得函数能够接受任意数量的输入值，这些值也叫做*参数*，并且可以提供多个输出值，有时称为*返回值*，或者简称*返回*。我们可以把函数看作一个将输入转换为输出的机器：一个或多个数字进入，且一个或多个数字出来。只要我们没有故意引入随机性，系统就是*确定性的*：每次我们给一个特定的函数相同的输入时，都会得到相同的输出。
- en: In this book we’re going to use curves and surfaces in a few ways. One of the
    most important ways, and the focus of this chapter, is to determine how to move
    along them in order to get back larger or smaller outputs. The technique we use
    for that process requires that our functions satisfy a few conditions. We’ll illustrate
    those conditions with curves, but the ideas extend to surfaces and more complex
    shapes as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将通过几种方式使用曲线和表面。其中最重要的一种，也是本章的重点，是确定如何沿着它们移动以得到更大或更小的输出。我们用于这一过程的技术要求我们的函数满足一些条件。我们将通过曲线来说明这些条件，但这些思想同样适用于表面和更复杂的形状。
- en: We want our curves to be *continuous*, meaning that we can draw them with a
    single stroke of a pen or pencil, without ever lifting it from the page. We also
    want our curves to be *smooth*, so that they have no sharp corners (called *cusps*).
    [Figure 5-1](#figure5-1) shows a curve that has both of these forbidden features.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![f05001](Images/f05001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-1: The circle encloses a cusp, and the dashed arrow shows a discontinuity,
    or jump.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: We also want our curves to be *single-valued*. In 2D, this means that for each
    horizontal position on the page, if we draw a vertical line at that point, the
    line crosses the curve only once, so only a single value corresponds to that horizontal
    position. In other words, if we follow the curve with our eyes from left to right
    (or right to left), it never reverses direction on itself. A curve that violates
    this condition is shown in [Figure 5-2](#figure5-2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![f05002](Images/f05002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-2: Inside the purple zones, the curve has multiple values in the vertical
    direction.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: From now on, let’s assume that all of our curves meet these rules (that is,
    they’re smooth, continuous, and single-valued). This is a safe assumption because
    we’re usually going to deliberately choose curves that have these properties.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The Derivative
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most important aspects of a curve is called its *derivative*. The
    derivative tells us a lot about the shape of a curve at any point along it. In
    this section, we look at some core ideas that lead us to the derivative.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Maximums and Minimums
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A vital part of training in deep learning involves minimizing the system’s error.
    We usually do this by imagining the error as a curve and then searching for the
    smallest value of that curve.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The more general problem is finding the smallest or largest value of a curve
    anywherealong its entire length, as illustrated in [Figure 5-3](#figure5-3). If
    these are the largest and smallest values for the whole curve (and not just the
    part we happen to be looking at), we call these points the *global minimum* and
    *global maximum*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![f05003](Images/f05003.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-3: The global maximum (brown circle), and the global minimum(orange
    square) of a curve'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we want only these largest and smallest values, but other times we
    want to know *where* on the curve these points are located. Sometimes finding
    these values can be difficult. For example, if the curve goes on forever in both
    directions, how can we be sure we found the very smallest or largest values? Or
    if the curve repeats, as it does in [Figure 5-4](#figure5-4), which of the high
    (or low) points should we pick as the location of *the* global maximum or minimum?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![f05004](Images/f05004.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-4: When a curve repeats forever, we can have infinitely many points
    that we could use as the location of the maximum (brown circles) or minimum (orange
    squares).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'To get around these problems, let’s think of maximum and minimum values in
    the *neighborhood* of a given point. To describe this, consider the following
    little thought experiment. Starting from some point on the curve, let’s travel
    to the left until the curve changes direction. If the values start increasing
    as we move left, we continue as long as they increase, but as soon as they start
    to decrease, we stop. We follow the same logic if the values are decreasing as
    we move to the left, stopping when they start to increase. We do the same thought
    experiment again, starting at the same point, but this time, we move to the right.
    This gives us three interesting points: our starting point, and the two points
    where we stopped when moving left and right.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，让我们考虑给定点附近的最大值和最小值。为了描述这一点，我们可以进行以下的小小思维实验。从曲线上的某个点开始，向左移动，直到曲线改变方向。如果值随着我们向左移动而增加，我们就继续移动，直到它们开始减少为止。若值在向左移动时开始减少，我们也继续移动，直到它们开始增加为止。我们再次进行同样的思维实验，这次从同一个点出发，但我们向右移动。这会给我们带来三个有趣的点：我们的起始点，以及向左和向右移动时停下来的两个点。
- en: The smallest value out of these three points is the *local minimum* for our
    starting point, and the largest value of the three points is the *local maximum*
    for our starting point. [Figure 5-5](#figure5-5) shows the idea.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这三点中的最小值是我们起始点的*局部最小值*，而这三点中的最大值是我们起始点的*局部最大值*。[图 5-5](#figure5-5)展示了这一概念。
- en: '![f05005](Images/f05005.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![f05005](Images/f05005.png)'
- en: 'Figure 5-5: For the point in black, the brown circle and orange box respectively
    show that point’s local maximum and minimum.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-5：对于黑色的点，棕色圆圈和橙色方框分别表示该点的局部最大值和最小值。
- en: In [Figure 5-5](#figure5-5) we moved left until we got the point we then marked
    with a circle, and we moved right until we reached the point we marked with a
    square. The local maximum is given by the largest value of these three points,
    which, in this case, is the center of the brown circle. The local minimum is given
    by the smallest value of these three points, which, in this case, is the center
    of the orange square.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 5-5](#figure5-5)中，我们向左移动直到得到一个点，并用圆圈标记它，然后向右移动直到到达一个用方框标记的点。局部最大值是这三点中的最大值，在这种情况下是棕色圆圈的中心。局部最小值是这三点中的最小值，在这种情况下是橙色方框的中心。
- en: If the curve zooms off to positive or negative infinity, things get more complicated.
    In this book, we always assume that we can find a local minimum and maximum for
    any point on any curve we want.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果曲线无限逼近正无穷或负无穷，情况就会变得更复杂。在本书中，我们总是假设我们可以为任何曲线上的任意点找到局部最小值和最大值。
- en: Note that there is only one global maximum and only one global minimum for any
    given curve, but there can be many local maximums and minimums (sometimes called
    *maxima* and *minima*) for any given curve or surface, since they depend on the
    point we’re considering. [Figure 5-6](#figure5-6) shows this idea visually.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于任何给定的曲线，只有一个全局最大值和一个全局最小值，但对于任何给定的曲线或表面，可能会有多个局部最大值和最小值（有时称为*最大值*和*最小值*），因为它们取决于我们所考虑的点。[图
    5-6](#figure5-6)直观地展示了这一概念。
- en: '![f05006](Images/f05006.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![f05006](Images/f05006.png)'
- en: 'Figure 5-6: The influences of these local maximums and minimums are shown by
    their corresponding colored region.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-6：这些局部最大值和最小值的影响通过其对应的彩色区域来展示。
- en: Tangent Lines
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切线
- en: The next step in our road to the derivative involves an idea called a *tangent
    line*. To illustrate the idea, we’ve marked up a two-dimensional curve in [Figure
    5-7](#figure5-7).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通向导数的下一步涉及一个叫做*切线*的概念。为了说明这个概念，我们在[图 5-7](#figure5-7)中标出了一个二维曲线。
- en: '![f05007](Images/f05007.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![f05007](Images/f05007.png)'
- en: 'Figure 5-7: Some points on this curve are marked with dots. The tangent line
    at each of those points is drawn in black.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-7：曲线上的一些点被标记为点。每个这些点的切线以黑色画出。
- en: At each point on the curve, we can draw a line whose slope is given by the shape
    of the curve at that point. This is the tangent line. We can think of this as
    a line that just grazes the curve at that point. If we imagine ourselves traveling
    along the curve, the tangent line tells us where we’re looking (as well as where
    we’d be looking if we had eyes in the back of our heads). Tangent lines are useful
    to us because they are horizontal at every local maximum and local minimum. One
    way to find a curve’s maximum and minimum values is to find points on the curve
    where the tangent is horizontal (as [Figure 5-7](#figure5-7) shows, the tangent
    is also horizontal where the curve is horizontally flat, but we’ll ignore that
    for now).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在曲线的每个点上，我们可以画一条线，其斜率由该点的曲线形状决定。这就是切线。我们可以把它想象成一条在该点仅仅与曲线接触的线。如果我们想象自己沿着曲线移动，切线就能告诉我们我们正在朝哪里看（就像如果我们有后脑眼睛一样，它也能告诉我们该朝哪里看）。切线对我们很有用，因为它在每个局部最大值和局部最小值处都是水平的。找到曲线的最大值和最小值的一种方法是找到曲线上切线水平的点（如[图5-7](#figure5-7)所示，切线在曲线水平平坦处也是水平的，但我们暂时忽略这一点）。
- en: Here’s one way to find the tangent line. Let’s pick a point, which we’ll call
    the *target point*. We can move an equal distance along the curve to the left
    and right of the target point, draw dots there, and draw a line connecting those
    two dots, as in [Figure 5-8](#figure5-8).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是找到切线的一种方法。让我们选择一个点，称之为*目标点*。我们可以沿着曲线向目标点的左侧和右侧各移动相等的距离，在那里画出两个点，并画一条连接这两个点的直线，如[图5-8](#figure5-8)所示。
- en: '![f05008](Images/f05008.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![f05008](Images/f05008.png)'
- en: 'Figure 5-8: To find the tangent line at a given point, we can look at a pair
    of points at equal distances along the curve around that point and draw a line
    between them.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-8：为了找到给定点的切线，我们可以在曲线上选取距离该点相等的两个点，并画一条连接这两个点的直线。
- en: Now let’s pull the two dots in toward the target point at the same speed, keeping
    each on the curve. At the very last instant before they merge, the line that passes
    through them is the tangent line. We say that this line is *tangent to the curve*,
    meaning that it just touches it. It’s the best straight line that describes the
    curve at that point. The ancient Greeks called the tangent line the *kissing line.*
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们以相同的速度将这两点拉向目标点，确保它们始终位于曲线上。在它们合并的最后一刻，穿过它们的直线就是切线。我们说这条线是*切线*，意思是它只是轻轻地接触了曲线。它是描述曲线在该点的最佳直线。古希腊人称切线为*吻线*。
- en: We can measure the *slope* of the tangent line we constructed in [Figure 5-8](#figure5-8).
    The slope is just a single number that tells us the angle that the line forms
    with respect to a horizontal line. A horizontal line has a slope of 0\. If we
    rotate the line counterclockwise, the value takes on increasingly positive values.
    If we rotate the line counterclockwise, the slope takes on increasingly negative
    values. When a line becomes exactly vertical, its slope is said to be infinite.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测量在[图5-8](#figure5-8)中构造的切线的*斜率*。斜率就是一个数字，它告诉我们这条线与水平线之间的夹角。水平线的斜率为0。若我们逆时针旋转这条线，斜率会变得越来越大。如果我们顺时针旋转这条线，斜率则会变得越来越小。当一条线变得完全垂直时，它的斜率被认为是无穷大。
- en: And now we’ve come to the derivative! It’s just another name for the slope.
    Every point on a curve has its own derivative, because every point’s tangent line
    has its own slope.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了导数！它只是斜率的另一种叫法。曲线上的每个点都有自己的导数，因为每个点的切线都有自己的斜率。
- en: '[Figure 5-9](#figure5-9) shows why we created the rules before that said our
    curves need to be continuous, smooth, and single-valued. Those rules guarantee
    that we can always find a tangent line, and thus a derivative, for every point
    on the curve.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[图5-9](#figure5-9)显示了为什么我们之前制定了要求曲线连续、光滑和单值的规则。这些规则确保了我们始终能够找到切线，从而找到每个点的导数。'
- en: '![f05009](Images/f05009.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![f05009](Images/f05009.png)'
- en: 'Figure 5-9: Top row: Curves with issues. Bottom row: Problems finding the derivative,
    shown in blue.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-9：上排：有问题的曲线。下排：求导时的问题，以蓝色显示。
- en: In [Figure 5-9](#figure5-9)(a), the curve isn’t continuous, so the two different
    curve ends have different derivatives above our chosen point (marked with a square).
    The problem is that we don’t know which derivative to pick, so we avoid the question
    by not allowing discontinuities in the first place. In [Figure 5-9](#figure5-9)(b),
    the curve isn’t smooth, so the slopes are different as we arrive at the cusp from
    the left and right. Again, we don’t know which one to pick, so we won’t work with
    curves that have cusps. In [Figure 5-9](#figure5-9)(c), the curve isn’t single-valued.
    We have more than one point on the curve to choose from, each with its own derivative,
    and once again we don’t know which one to pick. [Figure 5-9](#figure5-9)(d) shows
    that if a curve ever becomes perfectly vertical, that also violates our single-value
    rule. Worse, the tangent line is perfectly vertical, which means it has an infinite
    slope. Handling infinite values can make simple algorithms messy and complicated.
    So, we sidestep this problem, just like the others, and say that we won’t use
    curves that can become vertical, and thus we never need to worry about infinite
    derivatives. By requiring our curves to be continuous, smooth, and single-valued,
    we can be sure that they can never create one of these situations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 5-9](#figure5-9)(a)中，曲线是不连续的，因此两个不同的曲线端点在我们选择的点（用方框标出）上有不同的导数。问题在于我们不知道该选择哪个导数，因此我们通过不允许存在不连续性来避免这个问题。在[图
    5-9](#figure5-9)(b)中，曲线不光滑，因此当我们从左侧和右侧到达拐点时，坡度是不同的。同样，我们不知道该选择哪个坡度，所以我们不会处理有拐点的曲线。在[图
    5-9](#figure5-9)(c)中，曲线不是单值的。曲线上有多个点可以选择，每个点都有自己的导数，再次，我们不知道该选择哪一个。[图 5-9](#figure5-9)(d)显示了如果曲线变得完全垂直，这也违反了我们的单值规则。更糟糕的是，切线是完全垂直的，这意味着它的坡度是无限的。处理无限值会让简单的算法变得复杂和混乱。因此，我们回避了这个问题，就像回避其他问题一样，我们声明不会使用可能变得垂直的曲线，从而我们永远不需要担心无限导数。通过要求我们的曲线是连续的、光滑的和单值的，我们可以确保它们永远不会产生这种情况。
- en: 'We said before that a curve is a graphical version of a function: we provide
    an input value, conventionally along the horizontal X axis, and then look up (or
    down) to find the y value of the curve at that x. That y value is the output of
    the function, as shown in [Figure 5-10](#figure5-10).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前说过，曲线是函数的图形表示：我们提供一个输入值，通常沿着水平的X轴，然后向上（或向下）查找，以找到该x值对应的曲线上的y值。这个y值就是函数的输出，如[图
    5-10](#figure5-10)所示。
- en: '![f05010](Images/f05010.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![f05010](Images/f05010.png)'
- en: 'Figure 5-10: A curve in two dimensions. Values of x increase as we move right,
    and values of y increase as we move up.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-10：二维曲线。随着我们向右移动，x值增大，y值随着我们向上移动而增大。
- en: As we move to the right from some point (that is, as x increases), we can ask
    if the curve is giving us values of y that are increasing, decreasing, or not
    changing at all. We say that if y increases as x increases, the tangent line has
    a *positive slope*. If y decreases with an increasing x, we say the tangent line
    has a *negative slope*. The more extreme the slope (that is, the closer it gets
    to vertical), the more positive or negative it becomes. This is just another way
    to state the relationship of the angle of the slope relative to a horizontal line.
    [Figure 5-11](#figure5-11) shows the idea.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从某一点向右移动（也就是x增大时），我们可以问曲线是否给出了增大的y值、减小的y值，还是y值没有变化。如果随着x增大y增大，我们说切线有*正坡度*。如果随着x增大y减小，我们说切线有*负坡度*。坡度越极端（也就是越接近垂直），它就越正或越负。这只是以另一种方式说明坡度角度相对于水平线的关系。[图
    5-11](#figure5-11)展示了这个概念。
- en: '![f05011](Images/f05011.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f05011](Images/f05011.png)'
- en: 'Figure 5-11: Marking the tangent lines from [Figure 5-7](#figure5-7) by whether
    they have a positive slope (+), negative slope (–), or are flat (0)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-11：标记[图 5-7](#figure5-7)中切线的坡度，是否为正坡度（+）、负坡度（–）或平坦（0）
- en: Notice that there are points in [Figure 5-11](#figure5-11) that aren’t hills
    and valleys but still have a slope of 0\. We only find slopes of 0 at the tops
    of hills, the bottoms of valleys, and plateaus like these.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到在[图 5-11](#figure5-11)中有些点并不是山丘或山谷，但它们的坡度仍然是0。我们只会在山丘的顶部、山谷的底部和像这样的高原上找到坡度为0的点。
- en: Finding Minimums and Maximums with Derivatives
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用导数寻找最小值和最大值
- en: Let’s see how to use the derivative to drive an algorithm that finds a local
    minimum or maximum at a point.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用导数来驱动一个算法，找出某一点的局部最小值或最大值。
- en: Given a point on a curve, we first find its derivative. If we want to move along
    the curve so that the y values increase, we move in the direction of the *sign*
    of the derivative. That is, if the derivative is positive, then moving in the
    positive direction along the X axis, or to the right, takes us to larger values.
    In the same way, if the derivative is negative, then to find smaller values of
    y, we move left. [Figure 5-12](#figure5-12) shows the idea.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 给定曲线上的一个点，我们首先找到它的导数。如果我们想沿着曲线移动，以使 y 值增大，我们就沿着导数符号的方向移动。也就是说，如果导数是正的，那么沿 X
    轴正方向（即向右移动）会带我们到更大的值。同样，如果导数是负的，那么为了找到更小的 y 值，我们就向左移动。[图 5-12](#figure5-12)展示了这个概念。
- en: '![f05012](Images/f05012.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![f05012](Images/f05012.png)'
- en: 'Figure 5-12: The derivative at a point tells us which way to move to find larger
    or smaller values of the curve.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-12：某一点的导数告诉我们该朝哪个方向移动，以找到曲线的更大或更小值。
- en: We can gather up both cases and say that to find the local maximum near some
    point, we find the derivative at that point and take a small step along the X
    axis in the direction of the sign of the derivative. Then we find the derivative
    there and take another small step. We repeat this process over and over until
    we reach a point where the derivative is 0\. [Figure 5-13](#figure5-13) shows
    this in action, starting from the rightmost point.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把两种情况归纳起来，说为了找到某一点附近的局部最大值，我们首先找到该点的导数，然后沿 X 轴朝着导数符号的方向迈出小步。接着我们在该点找到导数并再迈出一步。我们重复这一过程，直到达到导数为
    0 的点。[图 5-13](#figure5-13)展示了从最右边的点开始的这一过程。
- en: '![f05013](Images/f05013.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![f05013](Images/f05013.png)'
- en: 'Figure 5-13: Using the derivative to find the local maximum at a point'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-13：使用导数找到某一点的局部最大值
- en: At our starting point, the rightmost, we get a somewhat large, negative derivative,
    so we take a big step to the left. The second derivative is a bit smaller (that
    is, the slope is still negative, but a little less so), so we take a smaller step
    to the left. A third, smaller step takes us to the local maximum, where the tangent
    line is horizontal, so the derivative is 0\. To make this algorithm practical,
    we’d have to address some details, such as the size of the steps we take and how
    to avoid overshooting the maximum, but right now we’re just after the conceptual
    picture.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的起始点，即最右边，我们得到一个相对较大的负导数，因此我们向左走大一步。第二次导数稍小（也就是说，斜率依然为负，但小了一些），因此我们向左走较小的一步。第三步，较小的一步，把我们带到了局部最大值处，在这里切线是水平的，因此导数为
    0。为了使这个算法更实际，我们需要解决一些细节问题，例如步长的大小和如何避免超过最大值，但现在我们只关注概念上的理解。
- en: To find a local minimum, we do the same thing, but we move along X in the direction
    given by the *opposite* of the derivative’s sign, as in [Figure 5-14](#figure5-14).
    Here we start at the leftmost point and find it has a negative derivative, so
    we keep moving right until we find a derivative of 0.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到局部最小值，我们做相同的操作，但我们沿着 X 轴朝着导数符号的*相反*方向移动，如[图 5-14](#figure5-14)所示。在这里，我们从最左边的点开始，发现它的导数为负值，因此我们继续向右移动，直到找到导数为
    0 的点。
- en: '![f05014](Images/f05014.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f05014](Images/f05014.png)'
- en: 'Figure 5-14: Using the derivative to find the local minimum at a point'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-14：使用导数找到某一点的局部最小值
- en: Finding local maximums and minimums is a core numerical technique used throughout
    machine learning, and it relies on our being able to find the derivative at every
    point on the curve we’re following. Our three curve conditions of smoothness,
    continuity, and being single-valued were chosen specifically so that we can always
    find a single, finite derivative at every point on our curve, which means that
    we can rely on this curve-following technique to find local minimums and maximums.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找局部最大值和最小值是机器学习中常用的核心数值技术，它依赖于我们能够在我们跟踪的每个曲线点上找到导数。我们选择平滑性、连续性和单值性这三个曲线条件，特别是为了确保我们在曲线上的每个点都能找到一个唯一的有限导数，这意味着我们可以依赖这种跟踪曲线的技术来找到局部最小值和最大值。
- en: In machine learning, most of our curves obey these rules most of the time. If
    we happen to be using a curve that doesn’t, and we can’t compute the tangent or
    derivative at some point, there are mathematical techniques that usually (though
    not always) automatically finesse the problem so we can carry on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，我们的大多数曲线在大多数时候遵循这些规则。如果我们碰巧使用的曲线不遵循这些规则，并且无法计算某一点的切线或导数，通常（虽然不总是）有数学技术可以自动解决这个问题，使我们能够继续进行。
- en: We mentioned earlier that the derivative is also 0 where the curve itself flattens
    out. This can trick our algorithm into thinking it’s found a maximum or minimum.
    In Chapter 15, we’ll see a technique called *momentum* that can help us avoid
    getting fooled in this way and continue on our search for a real maximum or minimum.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到，当曲线平坦时，导数也为0。这可能会让我们的算法误认为找到了一个极大值或极小值。在第15章中，我们将看到一种叫做*动量*的技巧，可以帮助我们避免这种误判，继续寻找真正的极大值或极小值。
- en: The Gradient
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 梯度
- en: The *gradient* is the generalization of the derivative into three dimensions,
    or four dimensions, or *any* number of dimensions beyond that. With the gradient,
    we can find the minimums and maximums for surfaces in these higher dimensional
    spaces. Let’s see how this works.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*梯度*是导数在三维、四维或*任意*维度空间中的推广。通过梯度，我们可以在这些更高维的空间中找到表面的最小值和最大值。让我们来看一下它是如何工作的。'
- en: Water, Gravity, and the Gradient
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 水、重力与梯度
- en: Imagine that we’re in a big room, and above us is a billowing sheet of fabric
    that rises and falls without any creases or tears, as in [Figure 5-15](#figure5-15).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 想象我们身处一个大房间中，房顶上方悬挂着一张波动的织物，它上下起伏，没有任何褶皱或撕裂，如[图5-15](#figure5-15)所示。
- en: '![f05015](Images/f05015.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![f05015](Images/f05015.png)'
- en: 'Figure 5-15: A sheet of smooth fabric without creases or tears'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-15：没有褶皱或撕裂的光滑织物
- en: 'The surface of this fabric naturally satisfies the rules we required of our
    curves before: it’s both smoothand continuousbecause it’s a single piece of fabric,
    and it’s single-valuedbecause the fabric never curls over on itself (like a crashing
    wave). In other words, from any point on the floor below it, there is just one
    piece of the surface above it, and we can measure its height above the floor.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这块织物的表面自然满足我们之前对曲线的要求：它是平滑且连续的，因为它是单一的织物片，且它是单值的，因为织物不会像海浪那样翻卷自己。换句话说，从下面的任何一个点来看，织物上方只有一片表面，我们可以测量它相对于地面的高度。
- en: Now let’s imagine that we can freeze the fabric at a particular moment. If we
    climb up onto the fabric and walk around on it, it will feel like we’re hiking
    on a landscapeof mountains, plateaus, and valleys.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们能在某一时刻将织物冻结。如果我们爬到织物上并在上面走动，感觉就像是在一片山脉、平台和山谷的地形中徒步。
- en: Suppose that the fabric is dense enough that water can’t pass through it. As
    we stand in one spot, let’s pour some water onto the fabric at our feet. The water,
    naturally, flows downhill. In fact, the water follows the path that takes it downhill
    in the fastest possible way, because it’s being pulled downward by gravity. At
    every point, it effectively searches the local neighborhood and moves in the direction
    that takes it downhill the fastest, as shown in [Figure 5-16](#figure5-16).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设织物足够密实，水无法通过它。当我们站在某个位置时，往我们的脚下倾倒一些水。水自然会流向低处。事实上，水会沿着最快速的方式向下流动，因为它受到重力的拉力。在每一个点上，它实际上会搜索周围的邻域，并沿着最能让它快速向下流动的方向前进，如[图5-16](#figure5-16)所示。
- en: '![f05016](Images/f05016.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![f05016](Images/f05016.png)'
- en: 'Figure 5-16: Left: Dripping water onto the surface. Right: A drop of water
    exploring multiple points in its local neighborhood (yellow) to find the one that
    is the most downhill.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-16：左图：水滴落在表面。右图：一滴水在它的局部邻域（黄色）中探索多个点，以找到最下坡的那个点。
- en: Out of all the ways to move, the water always follows the steepest route downhill.
    The direction followed by the water is called the direction of *maximum descent*.
    The opposite direction, in which we climb upward as fast as possible, is the direction
    of *maximum ascent*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有的移动方式中，水总是沿着最陡峭的路线流向低处。水流所遵循的方向称为*最大下降方向*。相反的方向，即我们尽可能快地向上爬升的方向，称为*最大上升方向*。
- en: The direction of maximum ascent is the same as the gradient. If we want to descend,
    we follow the *negative of the gradient*, or just the *negative gradient*. A hiker
    trying to reach the highest mountaintop as quickly as possible follows the gradient.
    A stream of flowing water flowing downhill as quickly as possible follows the
    negative gradient.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最大上升方向与梯度相同。如果我们想要下降，就沿着*梯度的负方向*，或称为*负梯度*。一位试图尽可能快速到达最高山顶的登山者会沿着梯度行进。而一股尽可能快速流下的溪水则沿着负梯度流动。
- en: Now that we know the direction of maximum ascent, we can also find its *magnitude*,
    or strength, or size. That’s simply how quickly we’re going uphill. If we’re going
    up a gentle slope, the magnitude of our ascent is a small number. If we’re climbing
    up a steep grade, it’s a bigger number.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了最大上升方向，我们也可以找到它的*大小*，或者说强度、大小。那就是我们上坡的速度。如果我们在一个平缓的坡度上，升高的速度是一个小数字。如果我们在爬陡坡，它就是一个更大的数字。
- en: Finding Maximums and Minimums with Gradients
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用梯度寻找最大值和最小值
- en: We can use the gradient to find the local maximum in three dimensions (3D),
    just as we used the derivative in two dimensions (2D). In other words, if we’re
    on a landscape and we want to climb to the highest peak around, we need only follow
    the gradient by always moving in the direction of the gradient associated with
    the point under our feet as we climb.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用梯度在三维空间（3D）中找到局部最大值，就像我们在二维空间（2D）中使用导数一样。换句话说，如果我们处在一个地形上，想要爬到周围的最高峰，我们只需要跟随梯度，始终朝着与我们脚下的点相关的梯度方向前进。
- en: If we instead want to descend to the lowest point around, we can follow the
    negative gradient and always walk in the direction exactly oppositethe gradient
    associated with each point under our feet as we descend. Essentially, we’re acting
    like a drop of water, moving downhill in the fastest way possible. [Figure 5-17](#figure5-17)
    shows this step-by-step process in action.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要下降到周围的最低点，我们可以沿着负梯度前进，始终朝着与每个脚下点的梯度方向完全相反的方向走。基本上，我们就像一滴水，沿着最快的路径向下流。[图5-17](#figure5-17)展示了这个一步步的过程。
- en: '![f05017](Images/f05017.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![f05017](Images/f05017.png)'
- en: 'Figure 5-17: To get downhill, we can repeatedly find the negative gradient
    and take a small step in that direction.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-17：为了下坡，我们可以反复找到负梯度，并朝着那个方向迈出小步。
- en: Suppose that we’re at the very top of a hill, as in [Figure 5-18](#figure5-18).
    This is a local maximum (and maybe the global maximum). Here, there is no uphill
    direction to go in. If we were to zoom in on the very top of the hill, we’d find
    the nearby surface is flat. Because there’s no way to go up, our maximum rate
    of ascent is 0, and the magnitude of the gradient is 0\. There’s no gradient at
    all! We sometimes say the gradient has *vanished*, or that we have a *zero gradient*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们站在一座山的顶部，就像[图5-18](#figure5-18)中所示。这是一个局部最大值（也许是全局最大值）。在这里，没有上坡的方向。如果我们放大看山顶，发现附近的表面是平的。因为没有上升的空间，我们的最大上升速度是0，梯度的大小也是0。根本没有梯度！我们有时说梯度已经*消失*，或者我们有一个*零梯度*。
- en: '![f05018](Images/f05018.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![f05018](Images/f05018.png)'
- en: 'Figure 5-18: At the very top of a hill, there is no uphill. Left: The hill.
    Right: Our location at the very top of the hill.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-18：在山顶的最顶部，没有上坡。左：山丘。右：我们位于山顶的地方。
- en: When the gradient vanishes, as at the top of a hill, the negative gradient goes
    away, too.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当梯度消失时，就像在山顶一样，负梯度也会消失。
- en: What if we’re at the bottom of a bowl-shaped valley, as in [Figure 5-19](#figure5-19)?
    This is a local minimum (and maybe the global minimum).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处于一个碗形的山谷底部，就像[图5-19](#figure5-19)所示，这就是局部最小值（也许是全局最小值）。
- en: '![f05019](Images/f05019.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![f05019](Images/f05019.png)'
- en: 'Figure 5-19: At the very bottom of a bowl, every move we make is uphill. Left:
    A bowl. Right: A point at the bottom of the bowl.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-19：在碗的最底部，我们的每一步都是上坡。左：一个碗。右：碗底的一个点。
- en: At the very bottom of the bowl, every direction seems to go up. But if we zoom
    way in, we’d see that the bottom of the bowl is flat. Again, the gradient has
    vanished.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在碗的最底部，每个方向似乎都是上坡。但如果我们放大看，会发现碗底是平的。再次，梯度已经消失。
- en: What if we’re not on a hilltop or in a valley or on the side of a slope but
    just on a flat plain, or *plateau*, as in [Figure 5-20](#figure5-20)?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不在山顶或山谷里，或者不在坡面上，而是处于一个平坦的平原或*高原*上，就像[图5-20](#figure5-20)所示，情况会怎样呢？
- en: '![f05020](Images/f05020.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![f05020](Images/f05020.png)'
- en: 'Figure 5-20: A flat surface, plain, or plateau. Left: The plateau. Right: The
    point on the plain is mainly on the plane. This point has no gradient.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-20：一个平坦的表面、平原或高原。左：高原。右：平原上的一个点，基本上位于平面上。这个点没有梯度。
- en: Just like being on the hilltop, there’s nowhere to go up or down. When we’re
    on a plateau, we again have no gradient at all.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在山顶一样，没有地方可以上坡或下坡。当我们在高原上时，我们再次没有任何梯度。
- en: Saddle Points
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 马鞍点
- en: So far, we’ve seen local minimums, maximums, and flat regions, just as we saw
    in 2D. But in 3D, there’s a completely new type of feature. In one direction,
    we’re in the bottom of a valley, while in the other direction, we’re at the top
    of a hill. In the local neighborhood of such a point, the surface looks like the
    saddle that horse riders use. Naturally enough, this kind of shape is called a
    *saddle*. An example saddle is shown in [Figure 5-21](#figure5-21).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到了局部的最小值、最大值和平台区域，就像我们在二维中看到的那样。但在三维空间中，出现了一种全新的特征。在一个方向上，我们处于山谷的底部，而在另一个方向上，我们则处于山顶。在这个点的局部邻域中，表面看起来像是马术骑手使用的鞍形。显然，这种形状被称为*鞍形*。一个示例鞍形如[图
    5-21](#figure5-21)所示。
- en: '![f05021](Images/f05021.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![f05021](Images/f05021.png)'
- en: 'Figure 5-21: A saddle goes upward in one direction and downward in another.
    Left: A saddle. Right: A point on the saddle.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-21：鞍形在一个方向上向上，另一个方向上向下。左：一个鞍形。右：鞍形上的一个点。
- en: If we’re in the middle of the saddle, as in [Figure 5-21](#figure5-21), then
    it’s like being at a hilltop and valley at the same time. And just like those
    places, the local neighborhood looks like a plateau, so there’s no gradient. But
    if we move just a little bit in one direction or another, we’ll find a little
    bit of curvature, and then the gradient reemerges to show us the direction of
    maximum ascent from that spot.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处在鞍形的中间，如[图 5-21](#figure5-21)所示，那就像是同时处于山顶和山谷。就像那些地方一样，当地的邻域看起来像一个平台，因此没有梯度。但如果我们在某个方向上稍微移动一下，就会发现有一点曲率，然后梯度重新出现，告诉我们从这个点开始的最大上升方向。
- en: When we train a deep learning algorithm, we usually want to find the least amount
    of error. Thinking of the error as a surface, the best scenario is when we can
    find the bottom of a bowl. But if we find ourselves at the top of a hill, or on
    a saddle, or on a plateau, we say that we’ve become *stuck* at these places. We
    know we’re not at a minimum, but the gradient has vanished, so we have no idea
    which way to go in order to move downward.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们训练一个深度学习算法时，我们通常希望找到最小的误差。把误差看作一个表面时，最理想的情况是我们能够找到一个碗底。但如果我们发现自己处在山顶、鞍形点或者平台上时，我们就说我们*被卡住*了。我们知道自己没有在最小值处，但梯度消失了，所以我们不知道该往哪个方向走才能下坡。
- en: Happily, modern algorithms offer a variety of automatic techniques to get us
    unstuck. But sometimes they fail, and unless we can introduce a major change,
    such as providing additional training data, our algorithm stays stuck, unable
    to move to a lower value of the surface. In practical terms, this means that the
    algorithm simply stops learning, and its output stops improving.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现代算法提供了多种自动化技术来帮助我们脱困。但有时它们会失败，除非我们能做出重大改变，比如提供额外的训练数据，否则我们的算法会停滞不前，无法移动到表面更低的值。从实际角度来看，这意味着算法会停止学习，输出不再改进。
- en: We’ll see later that we can watch our learning progress by measuring its error.
    If the error stops improving before our results are acceptable, we can change
    the algorithm just a little so that it takes a different path when learning, and
    sidesteps that particular spot of zero gradient.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到，我们可以通过测量误差来观察学习进度。如果误差在我们的结果尚不可接受之前停止改善，我们可以稍微改变算法，使它在学习时走一条不同的路径，避开那个零梯度的特定位置。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at some ways to find the minimums and maximums of
    curves. When we train a deep learning system, we adjust it to minimize the system’s
    overall error. If we think of the error as a surface in a many-dimensional space,
    we’re looking for a minimum on that surface. To find that minimum error, we find
    the steepest downhill direction, given by the negative gradient. We then change
    the network so that the error moves in that direction. In essence, the gradient
    tells us how to change the network so that the overall error of the system is
    reduced.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了一些寻找曲线最小值和最大值的方法。当我们训练一个深度学习系统时，我们会调整它以最小化系统的整体误差。如果我们把误差看作是一个多维空间中的表面，那么我们就是在寻找这个表面上的最小值。为了找到这个最小误差，我们找到最陡峭的下坡方向，这个方向由负梯度给出。然后我们会改变网络，使得误差朝着这个方向移动。从本质上讲，梯度告诉我们如何改变网络，以便减少系统的整体误差。
- en: In later chapters, we’ll see how we actually use this idea in practice to teach
    our deep learning systems to get better and better at their jobs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续的章节中，我们将看到如何在实际中运用这个想法，来教我们的深度学习系统在工作中变得越来越优秀。
- en: For now, let’s turn to a little bit of information theory, which will help us
    better understand the nature of errors and how to interpret them.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向一些信息论的内容，这将帮助我们更好地理解错误的本质以及如何解读它们。
