- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Editing Paths
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In a typical vector drawing, an overwhelming majority of objects are paths.
    That's why being familiar with paths is so important—otherwise, you cannot really
    say you know how to work in a vector editor. Inkscape provides a rich selection
    of tools, commands, and effects that work on paths.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: I'll start with the basics of SVG paths and the traditional path tools whose
    analogs you may have already seen in other software. Then, in the second half
    of this chapter and in the next, I'll describe the advanced Inkscape techniques
    for path editing that are often more efficient—and almost always more fun to use.
    You may find, for example, that the Tweak tool ([12.6](#section12.6)) is so natural
    that you will rarely need to resort to the more technical and low-level Node tool
    ([12.5](#section12.5)). Still, it is important that you know what a path consists
    of and are able, when necessary, to manipulate path nodes directly, as this is
    one of the cornerstones of vector graphics of any kind.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 The Anatomy of a Path
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A path is a sequence of *nodes* (points) connected by straight or curved*segments*
    ([Figure 12-1](#fig12-1)). Each node may have either one neighboring segment (if
    it's an end node) or two (if it's a middle node); SVG does not support branching
    paths with more than two segments joined at the same node.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-nodes.svg.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-1: Path = nodes + segments'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The length of a path is not limited; it may have anywhere from two to many thousands
    of nodes. It is also legal to have a path with one or even zero nodes, but such
    a path is invisible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: With a path, you can at least approximate (and in many cases, reproduce exactly)
    any conceivable shape, form, or figure. Depending on the shape you need and the
    required precision, in the worst case you'll just have to use many densely positioned
    nodes ([Figure 12-2](#fig12-2)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-approx.svg.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-2: You can approximate the same figure roughly with a few nodes or
    reproduce it more precisely with more nodes.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.1 Subpaths
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a path, a pair of nodes that are adjacent in sequence may not be connected
    by a segment. This produces a gap in the path, and each such gap divides the path
    into disconnected parts called *subpaths*, as shown in [Figure 12-3](#fig12-3).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-subpaths.svg.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-3: Subpaths are groups of connected nodes within a path.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: A path without any gaps is said to consist of a single subpath. Any subpath,
    just like a piece of rope, can be *open* (with two loose ends, called *end nodes*)
    or *closed* (tied into a loop, so that its end nodes are one and the same node).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: In many respects, subpaths look and behave just like separate paths. You can
    always convert the subpaths of a path into independent path objects by using the
    Break Apart command in the Path menu. The opposite command, Combine, converts
    several selected paths into subpaths of a single path.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'When combining paths with different styles, you will lose the styles of all
    but the topmost (in z-order) selected path—because a single path, with no matter
    how many subpaths, can only have a single style. However, path data is never lost
    or added: if you combine and then break apart any number of paths, no nodes are
    changed in any way.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Every subpath has a *direction*—that is, its nodes are always ordered from start
    to end. In a closed subpath, the start node and end node are the same node; in
    an open subpath, the start and end nodes are different. Usually, the direction
    of a subpath does not matter; situations where it matters include using the start
    and end markers ([9.5](c09.xhtml#section9.5)) and text on a path ([15.2.4](c15.xhtml#section15.2.4)).
    The direction may also affect the fill of the path via the fill rule ([12.1.2](#section12.1.2)).
    You can visualize path direction in the Node tool if you enable path outline ([Figure 12-17](#fig12-17))
    and, in the tool's Preferences, turn on the Show path direction on outlines checkbox.
    Use **Path ▶ Reverse** (Shift-R) to flip the direction of the selected paths (or,
    when in the Node tool, of the subpaths with selected nodes).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.2 Filling Paths
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No matter what you use to fill your path—solid color, gradient, mesh, or pattern
    ([8.2](c08.xhtml#section8.2))—there are several important things to be aware of.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Fill always stops at the path itself—that is, at the centerline of the path's
    stroke, if it has any. Closed subpaths that do not intersect themselves or other
    subpaths are simply filled on the inside. Open subpaths are filled as if there
    were a straight line segment between the end nodes of the subpath, as shown in
    [Figure 12-4](#fig12-4).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-fill.svg.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-4: Filling open and closed subpaths'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: This straight line is not part of the path—it is not stroked, and you cannot,
    for example, bend it with the Node tool. If, when editing an open nonstroked path,
    you run into a straight line segment that refuses to be edited as you expect it
    to, most likely it's not really a segment but simply an edge of the fill. Close
    the subpath ([12.5.4](#section12.5.4)) to edit it without limitations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'When a path intersects itself or when one subpath is completely inside another,
    the decision on whether to fill some area depends on two factors: the *directions*
    of the subpaths surrounding the area and the *fill rule* of the path. The fill
    rule is a style property that can take one of two values, `nonzero` or`evenodd`,
    as set by one of the two toggle buttons in the Fill and Stroke dialog ([Figure 8-3](c08.xhtml#fig8-3)):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: When the fill rule is `evenodd`, holes and loops are always left unfilled, except
    when you have a hole within a hole—then the inner hole becomes an island of fill.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the fill rule is `nonzero`, a loop or hole is filled only if its boundary
    is *counterdirected* relative to the outer path; it is empty if they go in the
    same direction.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the fill rule of `nonzero`, those loops and holes that are filled are invisible
    unless the path is stroked. Usually they are not a problem, but sometimes you
    may want to get rid of them. The easiest way to do this is to select that one
    path and use the Path ▶ Union command (Ctrl-+). Unioning a path with itself removes
    all subpaths that do not affect its fill.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`nonzero`的填充规则时，填充的环形和孔洞是不可见的，除非路径有描边。通常这些不会构成问题，但有时你可能想要去除它们。最简单的做法是选择该路径并使用路径 ▶ 联合命令（Ctrl-+）。将路径与自身合并可以移除所有不影响填充的子路径。
- en: To reverse a path, use **Path ▶ Reverse** (Shift-R); if you want to reverse
    the direction of a subpath inside a path, use the Node tool to select one or more
    nodes in that subpath and then press Shift-R, which will apply only to the subpaths
    with selected nodes (if no nodes are selected, all subpaths are reversed).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要反转路径，请使用**路径 ▶ 反向**（Shift-R）；如果你想反转路径内某个子路径的方向，请使用节点工具选择该子路径中的一个或多个节点，然后按Shift-R，这将只作用于选中的子路径（如果没有选中节点，所有子路径都会被反转）。
- en: 12.1.3 Stroking Paths
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.1.3 描边路径
- en: The *stroke* of a path is a strip of paint that goes along the path itself,
    so that the path marks the *centerline* of the stroke. The stroke is normally
    painted on top of the fill, if there is any, but you can change that ([9.6](c09.xhtml#section9.6)).
    The many style properties that affect the look of a stroke are covered in detail
    in[Chapter 9](c09.xhtml#ch9).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 路径的*描边*是沿着路径本身绘制的涂料带，因此路径标记了*中心线*的位置。描边通常绘制在填充物之上（如果有的话），但你可以更改这一点（[9.6](c09.xhtml#section9.6)）。影响描边外观的许多样式属性在[第9章](c09.xhtml#ch9)中有详细介绍。
- en: The Path ▶ Stroke to Path command (Ctrl-Alt-C) converts the stroke of the selected
    path(s) to fill, as shown in [Figure 12-5](#fig12-5). In other words, it replaces
    a stroked path with a new path whose *fill* looks the same as the original path's
    *stroke*, honoring all the join, cap, miter, and dash properties of that stroke.
    The stroke paint of the original becomes the fill paint of the new path, and the
    original path's fill is discarded. If the original path had markers ([9.5](c09.xhtml#section9.5)),
    the result will be a group where the stroke converted to path is grouped with
    markers that are now separate objects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 路径 ▶ 描边转路径命令（Ctrl-Alt-C）将选定路径的描边转换为填充，如[图12-5](#fig12-5)所示。换句话说，它用一个新路径替换了描边路径，新路径的*填充*看起来与原路径的*描边*相同，并且保持了该描边的所有连接、端点、斜接和虚线属性。原路径的描边填充将变为新路径的填充，而原路径的填充则被丢弃。如果原路径有标记（[9.5](c09.xhtml#section9.5)），结果将是一个组合，其中描边转为路径的部分与标记一起作为单独的对象。
- en: '![](13/pa-stroketopath.svg.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-stroketopath.svg.png)'
- en: 'Figure 12-5: Converting stroke to path'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-5：将描边转换为路径
- en: 12.1.4 Bézier Curves
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.1.4 贝塞尔曲线
- en: As already mentioned, segments—parts of a path between the nodes—can be either
    straight or curved. Let's have a closer look at those curved segments—called *Bézier
    curves* after Pierre Bézier (1910-1999), a French engineer who was the first to
    use them in design.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，路径的各个段落——即路径中节点之间的部分——可以是直线或曲线。让我们更仔细地看一下那些曲线段——它们被称为*贝塞尔曲线*，以法国工程师皮埃尔·贝塞尔（1910-1999）的名字命名，他是第一个在设计中使用这些曲线的人。
- en: A Bézier curve is completely determined by the position of four points, two
    of which are the *nodes* and two others are the *handles*, or controls. The curve
    itself is always completely inside the quadrilateral of these four points. In
    the Node tool ([12.5](#section12.5)), each handle is connected to its node by
    a straight line. These *handle lines* are always tangential to the curve at the
    corresponding node, as shown in [Figure 12-6](#fig12-6).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 贝塞尔曲线完全由四个点的位置决定，其中两个是*节点*，另外两个是*控制点*，即*手柄*。曲线本身总是完全位于这四个点组成的四边形内部。在节点工具中（[12.5](#section12.5)），每个手柄通过一条直线与其节点相连。这些*手柄线*始终与曲线在相应节点处切线，如[图12-6](#fig12-6)所示。
- en: '![](13/pa-bezier.svg.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-bezier.svg.png)'
- en: 'Figure 12-6: Bézier curves'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-6：贝塞尔曲线
- en: If a path node is between two Bézier curve segments, it will have two handles
    connected to it, one for each adjacent segment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径节点位于两个贝塞尔曲线段之间，它将有两个与之相连的手柄，每个手柄分别对应一个相邻的曲线段。
- en: The way a Bézier curve reacts to moving its handles is hard to describe, but
    you will quickly get a feel for it once you try. A Bézier curve may be indistinguishably
    close to a circular arc, but it may also have sharp bends, almost cusps; it may
    self-intersect or be perfectly straight when the handles are on the line between
    the nodes (or fully retracted).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Of course, for all its versatility, not many shapes are possible with a *single*
    Bézier curve. When building a path to approximate something (for example, when
    manually tracing over a bitmap, [18.5.2](c18.xhtml#section18.5.2)), experience
    will tell you how far you can reach with the current Bézier segment and where
    the best place for the next node is. Forcing a path to more closely approximate
    some real-life shape usually involves subdividing its Béziers by adding nodes
    and adjusting their handles. In contrast, simplifying a path, either manually
    or with theSimplify command ([12.3](#section12.3)), usually reduces the number
    of nodes and results in longer Béziers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Boolean Operations
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: British mathematician George Boole (1815–1864) didn't specialize in geometry.
    He invented his *Boolean algebra* for dealing with the logical values of "true"
    and "false." Later, however, it was discovered that the same concepts make perfect
    sense for various other mathematical objects, such as sets or arbitrary geometric
    shapes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape supports a number of Boolean operations on paths. They are accessed
    from the Path menu or by keyboard shortcuts derived from the symbols of the corresponding
    mathematical operations. Some of them require exactly two objects to be selected;
    others will work on any number of selected shapes. All of them will accept not
    only paths but also text objects and shapes (except 3D boxes), automatically converting
    them to paths. If a Boolean operation fails (for example, due to a wrong number
    or type of selected operands), it will explain the reason in the status bar.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 12.2.1 Union
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *union* of two or more paths (Ctrl-+) creates a path that covers, with its
    fill, every point that any of the original paths covered. It thus joins any number
    of paths into a single path, giving it the style of the bottommost selected object,
    as shown in [Figure 12-7](#fig12-7).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-union.svg.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-7: Unioning paths'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: If the paths do not overlap, the result will be exactly the same as forPath ▶ Combine
    ([12.1.1](#section12.1.1)). However, if the paths do overlap, this command, unlikeCombine,
    will never create any holes; it will create new nodes where the paths intersect
    and remove any parts of the path that would end up inside the fill of the resulting
    path.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a small circle is completely inside a bigger circle, a Union
    of those two circles will simply remove the smaller inner circle. If you want
    the smaller circle to become a hole in the larger one, use Difference (Combine
    will also work unless the resulting path has the fill rule of `nonzero` and the
    two circles happen to be counterdirected, [12.1.2](#section12.1.2)). Still, the
    Union command makes sense even for a single selected path, as it allows you to
    quickly clean up the path of any inner parts that do not affect the fill.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 12.2.2 Difference
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *difference* of two paths (Ctrl-–) creates a path whose fill covers all
    points that were covered by the bottom (in z-order) path but not the top one—in
    other words, it *subtracts* the top from the bottom. The result has the style
    of the bottom object, as shown in [Figure 12-8](#fig12-8).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-difference.svg.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-8: Subtracting a path from another path'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: If the paths do not overlap, Path ▶ Difference simply deletes the top path;
    if the top path completely overlays the bottom path, the result will be blank
    (both objects are deleted and nothing is selected). This command is the primary
    tool for creating holes and erasing the parts of paths you don't need.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The Calligraphic pen ([14.2](c14.xhtml#section14.2)) *unions* the new path it
    creates with the selected one when you draw with Shift and *subtracts* from it
    when you draw with Alt. In the Eraser tool ([14.4](c14.xhtml#section14.4)), one
    of the modes also subtracts what you draw from the selected paths or shapes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 12.2.3 Intersection
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *intersection* of two or more paths (Ctrl-*) creates a path whose fill covers
    only those points that were covered by *all* original paths. It uses the style
    of the bottommost selected object for the result, as shown in [Figure 12-9](#fig12-9).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-intersection.svg.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-9: Intersecting paths'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: If at least two of the selected paths do not overlap (that is, their intersection
    is empty), Path ▶ Intersection deletes all paths without creating anything. This
    command is similar to clipping one path with another ([18.3](c18.xhtml#section18.3)),
    except that a clipping path is nondestructive and works on any object, not just
    on paths; on the other hand, Intersection can intersect any number of paths at
    once.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 12.2.4 Exclusion
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The exclusion of two overlapping paths (Ctrl-^) creates a path whose fill covers
    the points that were covered by *only one* of the original paths. It uses the
    style of the bottom object for its resulting path, as [Figure 12-10](#fig12-10)
    demonstrates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-exclusion.svg.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-10: Excluding a path from another path'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'When the two paths do not overlap, the result of Path ▶ Exclusion is exactly
    the same as that of Path ▶ Combine. When they do overlap, the result*looks* exactly
    like a Combine, but the actual path is different: it has new nodes in the points
    where the outlines of the original paths intersect, whereas Combine creates no
    new nodes.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 12.2.5 Division
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *division* of two paths (Ctrl-/) cuts the bottom path into pieces by the top
    path, deleting the top path, as shown in [Figure 12-11](#fig12-11).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 两条路径的*分割*（Ctrl-/）通过上方路径将下方路径切割成若干段，删除上方路径，如[图 12-11](#fig12-11)所示。
- en: '![](13/pa-division.svg.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-division.svg.png)'
- en: 'Figure 12-11: Dividing a path by another path'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-11：通过另一条路径分割路径
- en: 12.2.6 Cut Path
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.2.6 剪切路径
- en: The Cut Path operation (Ctrl-Alt-/) is similar toDivision. The main difference
    is that Cut Path does not create any new nodes or segments along the cut line,
    thus leaving the resulting paths unclosed. It also removes any fill of the path
    being cut. It is natural to use Division for slicing filled paths and Cut Path
    for cutting stroked paths without fill, as shown in [Figure 12-12](#fig12-12).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 剪切路径操作（Ctrl-Alt-/）类似于分割路径。主要的区别在于，剪切路径不会沿着切割线创建任何新的节点或段落，从而使得结果路径不封闭。它还会移除被切割路径的填充部分。对于切割填充路径，使用分割路径更为自然，而对于切割没有填充的描边路径，则使用剪切路径，如[图
    12-12](#fig12-12)所示。
- en: '![](13/pa-cutpath.svg.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-cutpath.svg.png)'
- en: 'Figure 12-12: Cut Path is similar to Division.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-12：剪切路径类似于分割路径。
- en: 12.3 Simplifying
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3 简化
- en: An important operation on paths is *simplifying*. When you simplify a path (Path ▶ Simplify
    or Ctrl-L), Inkscape attempts to redraw that path using fewer nodes, ironing out
    smaller details but preserving the large-scale features of the path. If this description
    sounds a bit vague, it's because the operation itself is not entirely deterministic;
    usually, it is difficult to predict the result of simplifying accurately before
    you try it. Even the reduction of the number of nodes is not guaranteed (although
    common).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 路径上的一个重要操作是*简化*。当你简化路径时（路径 ▶ 简化 或 Ctrl-L），Inkscape 会尝试用更少的节点重新绘制该路径，去除小细节但保留路径的大致特征。如果这个描述听起来有点模糊，那是因为该操作本身并非完全确定的；通常，在尝试简化之前，很难准确预测简化的结果。即使是节点数量的减少也不能保证（虽然这是常见的情况）。
- en: Despite that, simplifying is a very common operation and a true lifesaver for
    certain styles of artistic drawing. In technical drawing, on the other hand, it
    is rarely useful—if only because it considers any sharp corners in a path as "defects"
    to be smoothed out.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，简化是非常常见的操作，对于某些艺术绘图风格来说，简化是一项真正的救命稻草。另一方面，在技术绘图中，这种操作很少有用——如果说有用的话，那也是因为它将路径中的任何尖角视为需要“平滑”的“缺陷”。
- en: One effect you can almost always count on is that if your path has nodes that
    can be deleted without *any* change in the shape of the path, they*will* be deleted
    by simplifying. This includes any nodes you added with the Node tool ([12.5.3](#section12.5.3))
    or with the Add Nodes extension ([13.4.2.1](c13.xhtml#section13.4.2.1)) but never
    moved from their initial positions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以确定的一个效果是，如果路径中有可以删除的节点，而不会对路径形状造成*任何*变化，它们*将*在简化时被删除。这包括你通过节点工具（[12.5.3](#section12.5.3)）或添加节点扩展（[13.4.2.1](c13.xhtml#section13.4.2.1)）添加的节点，但这些节点从未从它们的初始位置移动。
- en: Path simplification is similar to gradient simplification in the Gradient tool,
    also invoked by Ctrl-L ([10.5.1](c10.xhtml#section10.5.1)). Gradient simplification
    also removes any gradient stops that you added but didn't yet move from their
    initial positions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 路径简化类似于渐变工具中的渐变简化操作，也可以通过 Ctrl-L 来触发（[10.5.1](c10.xhtml#section10.5.1)）。渐变简化也会移除你添加的但尚未移动的渐变停靠点。
- en: Every simplification operation uses a certain *force*. Weak simplification changes
    the path just a little, removing only the most obviously redundant nodes. Stronger
    simplification changes the path more and smooths out larger bumps on it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个简化操作都使用一定的*强度*。弱简化仅会稍微改变路径，只移除最明显冗余的节点。强简化则会改变路径更多，并平滑掉较大的起伏。
- en: The default force used when you press Ctrl-L *once* can be set as the Simplification
    threshold value on the Behavior page of the Preferences dialog. The default is
    0.002; anything greater than 0.01 is probably too strong for most cases. If you
    change it at all, consider lowering this value, because it is actually the *minimum*
    simplification force; you can always temporarily strengthen your Simplify command,
    raising this value without going into thePreferences dialog.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下 Ctrl-L *一次* 时使用的默认强度可以在偏好设置对话框的行为页面上设置为简化阈值。默认值是 0.002；大于 0.01 的值对大多数情况来说可能太强。如果你做任何更改，考虑降低此值，因为它实际上是*最小*的简化强度；你可以随时临时增强你的简化命令，通过提高该值而无需进入偏好设置对话框。
- en: How do you make Simplify stronger? Just press Ctrl-L several times in quick
    succession (in [Figure 12-13](#fig12-13)). Each invocation of the command increases
    the force a little, provided it happened less than half a second after the previous
    invocation. With such *accelerated simplification*, you can apply just the amount
    of simplification you need for each path. If the first keystroke didn't smooth
    the path enough, just keep pressing Ctrl-L, and it will gradually pick up. If
    you wait more than half a second, though, the simplification force is reset back
    to the default value as set in Preferences.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如何让简化效果更强大？只需快速连续按 Ctrl-L 几次（参见[图 12-13](#fig12-13)）。每次调用该命令都会略微增加效果，前提是它发生在上次调用后的不到半秒钟内。通过这种*加速简化*，你可以对每条路径应用恰到好处的简化效果。如果第一次按键没有足够地平滑路径，只需继续按
    Ctrl-L，它会逐渐加大。如果等待超过半秒钟，简化力度会重置为在偏好设置中定义的默认值。
- en: '![](13/pa-simplify.svg.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-simplify.svg.png)'
- en: 'Figure 12-13: Simplifying paths'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-13：简化路径
- en: '[Figure 12-13](#fig12-13) shows some examples of how simplification affects
    paths (see also [Figure 12-2](#fig12-2), which was produced by gradual simplification
    of the most node-rich rose silhouette). As you can see, apart from reducing the
    number of nodes and ironing out small details, this operation melts sharp corners
    and curves straight lines, producing a natural—and often artistically engaging—kind
    of distortion.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-13](#fig12-13)展示了简化如何影响路径的一些示例（参见[图 12-2](#fig12-2)，它是通过逐渐简化节点较多的玫瑰轮廓产生的）。如你所见，除了减少节点数量并抚平细节外，这个操作还会消融尖锐的角落并使直线弯曲，产生一种自然且常常具有艺术感的扭曲。'
- en: 12.4 Offsetting
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4 偏移
- en: '*Offsetting* a path means expanding or contracting it in such a way that each
    point moves perpendicular to the path in that point. Offsetting inward is called*insetting*,
    and offsetting outward is *outsetting*. Imagine that your path is an island; outsetting
    would enlarge it by moving every point of the shoreline the same number of steps
    seaward, and insetting would make it smaller by allowing the sea to encroach inland
    by the same number of steps everywhere, as shown in [Figure 12-14](#fig12-14).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*偏移*路径意味着以一种方式扩展或收缩路径，使得每个点相对于路径在该点处沿垂直方向移动。向内偏移叫做*内插*，而向外偏移叫做*外插*。想象你的路径是一个岛屿；外插会通过将海岸线的每个点都移动相同的步数向海洋扩展，从而使其变大，而内插则通过让海洋按相同的步数向内侵蚀，使岛屿变小，如[图
    12-14](#fig12-14)所示。'
- en: '![](13/pa-offset.svg.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-offset.svg.png)'
- en: 'Figure 12-14: Offsetting paths'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-14：偏移路径
- en: To inset the selected path or paths, press Ctrl-( (inset by 2 px), or Alt-(
    (inset by 1 screen pixel at the current zoom), or Shift-Alt-( (inset by 10 screen
    pixels). To outset a path, use the ) key with the same modifiers. On most keyboards,
    the 9 and 0 are on the same keys as ( and ), so the digits will work the same
    as the parentheses.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要内插所选路径，按 Ctrl-(（向内偏移 2 像素），或 Alt-(（在当前缩放下向内偏移 1 屏幕像素），或 Shift-Alt-(（向内偏移 10
    屏幕像素）。要外插路径，使用相同的修饰键加上 ) 键。在大多数键盘上，9 和 0 键与 ( 和 ) 键在同一个键上，因此数字也会像括号一样工作。
- en: Offsetting is used in situations where you want to make a path "bolder" or "thinner"
    without changing its overall shape. This is useful for shadows, outlines, halos,
    bevels, and the like. (Sometimes, instead of outsetting you can simply set a wide
    enough stroke on the path, colored the same as its fill.)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移用于那些希望在不改变整体形状的情况下让路径变得“更粗”或“更细”的情况。这对于阴影、轮廓、光晕、斜面等非常有用。（有时，除了外偏移，你也可以简单地为路径设置一个足够宽的笔画，颜色与填充色相同。）
- en: If you outset and inset a path several times, it becomes distorted in a characteristic
    way, similar but different from the distortion of simplification ([12.3](#section12.3)).
    Such distortion welds together parts of a path—rounding corners, smoothing the
    intersections, and fusing together close subpaths within a path. For example,
    union all brush strokes in a Calligraphic pen drawing, and do a few inset/outset
    cycles on it to make it appear more natural and worn-down ([Figure 12-15](#fig12-15)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你多次对一条路径进行外插和内插，它会以一种独特的方式发生扭曲，这种扭曲与简化的扭曲类似但有所不同（参见[12.3](#section12.3)）。这种扭曲将路径的各个部分焊接在一起——圆滑的角落、平滑的交点，并将路径中的相近子路径融合在一起。例如，将书法笔绘图中的所有笔画合并，然后对其进行几次内插/外插循环，使其看起来更加自然和磨损（参见[图
    12-15](#fig12-15)）。
- en: '![](13/pa-offset-distort.svg.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](13/pa-offset-distort.svg.png)'
- en: 'Figure 12-15: Melting complex paths with repeated offsetting'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-15：通过重复偏移来融化复杂路径
- en: 'Offsetting, just like simplification, is a destructive operation: you cannot
    restore the exact original path except by undoing it. (For one thing, offsetting
    an open path always closes it.) However, Inkscape also has two dynamic object
    types,*linked offset* and *dynamic offset*, which store the exact original path
    and let you adjust the amount of offsetting without accumulating distortion ([13.3.11](c13.xhtml#section13.3.11)).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: The Inset and Outset commands, as well as the linked and dynamic offsets, apply
    the same offset distance to the entire path. It is possible, however, to inset
    or outset just a part of a path (for example, one end of a calligraphic brush
    stroke) using the Tweak tool's Grow and Shrink modes ([12.6.4](#section12.6.4)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 12.5 The Node Tool
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like everything else in Inkscape, the Node tool—the second button from the top
    in the main toolbar, accessible by pressing N or F2—strives to make simple things
    easy and hard things possible. This may be the most complex of all Inkscape tools—at
    least, the number of keyboard and mouse shortcuts in the Node tool is greater
    than in any other tool. You don't need to know all of its tricks in order to use
    Inkscape efficiently, but you should know the basics.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.1 Path Display
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you switch to the Node tool, any selected path displays its *nodes* as
    little gray squares, diamonds, or circles (depending on the type of each node,
    [12.5.5](#section12.5.5)). As a bonus, shapes ([Chapter 11](c11.xhtml#ch11)),
    gradients, meshes, and patterns ([Chapter 10](c10.xhtml#ch10)), as well as many
    of the path effects ([Chapter 13](c13.xhtml#ch13)), also display their editing
    handles in the Node tool.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: You can *select* some or all of the path nodes; a selected node becomes blue
    and slightly larger.*Handles* of Bézier curves ([12.1.4](#section12.1.4)) are
    visible only for selected nodes and their neighbors. Even then, you can suppress
    these handles, if they get in the way, using a button on the controls bar, as
    shown in [Figure 12-16](#fig12-16).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-handles.svg.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-16: Nodes and Bézier handles in the Node tool'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The selected paths are not, by default, visualized in the Node tool other than
    by showing their nodes. Normally, you would watch the path's stroke and/or fill
    update live in response to editing the nodes. Sometimes, however, your path may
    be too transparent or blurred, or may have some path effect ([Chapter 13](c13.xhtml#ch13))
    applied; in that case, you can ask Inkscape to highlight the actual path with
    a red line by toggling another button on the controls bar ([Figure 12-17](#fig12-17)).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-highlight.svg.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-17: Path highlighting in the Node tool'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the path itself, the Node tool allows you to edit some other paths
    associated with an object—they are invisible but affect the way the path looks:
    the clipping path (shown as light green, [18.3](c18.xhtml#section18.3)), the mask
    path (shown as blue, [18.3](c18.xhtml#section18.3)), and the linked path parameters
    of a path effect (shown as dark green, [13.2.1](c13.xhtml#section13.2.1)). These
    correspond to the three buttons on the control bar; the clipping path and mask
    buttons are on/off toggles, but theShow next editable path effect parameter button
    switches to the *next* linked path parameter (as there may be more than one, depending
    on the effect used).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as already mentioned, the Node tool displays all kinds of editing handles
    that objects (not necessarily paths) have. For example, in this tool you can edit
    your shapes ([Chapter 11](c11.xhtml#ch11)), adjust gradients, meshes, and patterns
    ([Chapter 10](c10.xhtml#ch10)), or change the dimensions of a flowed text object
    ([15.2.2](c15.xhtml#section15.2.2)).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.2 Selecting Nodes
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like so many other things in Inkscape, a path's nodes can be *selected* when
    in the Node tool. Not surprisingly, node selection methods are quite similar to
    those for object selection ([Chapter 5](c05.xhtml#ch5)).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with selecting nodes in paths, the tool can also select objects (remember
    that object selection is common to all tools and commands in Inkscape). In the
    Node tool, you can use some of the shortcuts you know from the Selector tool:
    clicking selects an object (ignoring grouping), Shift-clicking adds to selection
    or removes from selection, and Alt-clicking selects under ([5.9](c05.xhtml#section5.9)).
    The Node tool can edit nodes in multiple selected paths simultaneously (in many
    ways, it treats them as subpaths of a single path, [12.1.1](#section12.1.1)).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: This is similar with nodes. To select a single node in a selected path, just
    click it; the node becomes blue and slightly larger than a gray unselected node.
    Shift-click *adds* a node to the node selection; selected nodes need not be adjacent
    or even on the same path. Rubberband selection (dragging a rectangle around nodes,
    compare [5.7](c05.xhtml#section5.7)) also works; dragging with Shift adds nodes
    inside the rubberband to the selection.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: If you click a path segment between two nodes, both nodes will be selected.
    Clicking an empty space (away from selected paths), just as pressing Escape, deselects
    any selected nodes—or, if there are no selected nodes, deselects any selected
    objects.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The Tab and Shift-Tab keys, which in the Selector tool go to the next or previous
    object, in the Node tool select the next or previous node on the selected path
    or paths. When the last node is reached, pressing Tab jumps to the first node;
    when the first node is reached, pressing Shift-Tab jumps to the last node. By
    the way, pressing Tab a couple times is a quick way to figure out the *direction*
    ([12.1.1](#section12.1.1)) of a (sub)path without changing the document in any
    way.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Also like in the Selector tool, Ctrl-A selects all nodes in all selected paths.
    However, if you already have some nodes selected, Ctrl-A selects only the nodes*in
    those paths and subpaths* that have selected nodes (this is similar to the way
    Selector's Ctrl-A selects objects only within the current layer). To always select
    all nodes in all paths, use Ctrl-Alt-A. The ! key *inverts* selection by selecting
    what was not selected and vice versa within the (sub)paths that already have some
    nodes selected.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Yet another method of selecting nodes is unique to the Node tool. As you hover
    your mouse over a node (which is then highlighted red), you can *expand* or *contract*
    node selection by rotating your mouse wheel or pressing the Page Up and Page Down
    keys. Rotating the wheel *up* one notch or pressing Page Up adds the *closest*
    unselected node to the selection; rotating the wheel *down* one notch or pressing
    Page Down deselects the *farthest* selected node.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: To determine the "closest" and "farthest" nodes, Inkscape measures the direct
    Euclidean distance from each node to the mouse pointer. However, if you hold Ctrl
    while rotating the wheel or pressing Page Up or Page Down, the distance will be
    calculated *along the path* and the selection will be limited to the (sub)path
    over whose node you are hovering.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.3 Deleting and Creating Nodes
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Deleting any number of selected nodes is as easy as pressing Delete or Backspace
    or clicking the "minus" button on the controls bar.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an end node of a subpath makes the subpath shorter, but you cannot
    open a closed subpath by deleting nodes—you'll need to *break* it as described
    in [12.5.4](#section12.5.4).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: When deleting mid nodes (those between other nodes), Inkscape replaces each
    group of adjacent nodes being deleted with a single Bézier curve segment. In most
    cases, this introduces some distortion, but Inkscape tries to minimize it—it adjusts
    the handles on the remaining nodes so that the new Bézier segment runs as close
    as possible to the path fragment it replaces. In other words, deleting nodes on
    a path may work like a local Simplify command ([12.3](#section12.3)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, however, you don't need a new Bézier to bulge out all the way to
    ghost the nodes you're deleting, as you're trying to avoid changes to the handles
    of the remaining nodes. In that case, simply press Ctrl-Delete or Ctrl-Backspace,
    as shown in [Figure 12-18](#fig12-18).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-delete.svg.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-18: Deleting nodes'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Unlike deletion, *inserting* new nodes is always possible in any point of a
    path without changing its shape. Simply double-click or Ctrl-Alt-click on the
    path (that is, on the center line of the stroke or the edge of the fill) where
    you want the new node to be. A new node is inserted, and the handles of its neighbor
    nodes are automatically adjusted so that the shape of the path remains unchanged
    ([Figure 12-19](#fig12-19)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-create.svg.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-19: Creating a node by clicking'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: There is another node creation method that does not require clicking. Select
    two or more adjacent nodes and press Insert or Shift-I (or click the Insert node
    button on the controls bar) to insert a new node in the *middle* of each path
    segment ([Figure 9-11](c09.xhtml#fig9-11)). Since the new nodes are then added
    to the selection, this is a quick way to multiply the number of nodes on a path—for
    example, if you start with two nodes and press Insert eight times, your path will
    have 257 nodes (2⁸ + 1). This is similar to creating new gradient stops by pressing
    Insert ([10.5.1](c10.xhtml#section10.5.1)).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1]'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: The Insert node button on the controls bar has a drop-down submenu of commands
    that insert new nodes at the *extremities* of the path or its selected part—but
    only if that extremity doesn't already have a node. For example, if you select
    two nodes with a curve between them that reaches lower (that is, further down
    on the Y axis) than either of the two nodes, you can use the Insert node at max
    Y command to insert a node at the lowest point of this segment ([Figure 12-20](#fig12-20)).
    All nodes in extremities will be smooth nodes ([12.5.5](#section12.5.5)) with
    strictly horizontal (for min/max Y) or strictly vertical (for min/max X) handles.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-extremities.svg.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-20: Inserting nodes at the extremities of a path'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Yet another approach is *duplicating* nodes. With any number of nodes selected,
    press Shift-D. This "divides" each selected node into two, each inheriting one
    of the two handles of the original node. [Figure 12-21](#fig12-21) shows how it
    looks if you duplicate all nodes in a path and move away the new nodes (originally
    in the same locations as the old) by pressing →.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-duplicate.svg.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-21: Duplicating nodes'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'The Shift-D method is especially useful for continuing an open (sub)path by
    duplicating and moving away its end node. For example, if you select an end node
    of a straight line segment (that is, an end node without a Bézier handle), you
    can easily "draw" with line segments: just keep pressing Shift-D followed by arrow
    keys.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.3.1 Copying, Cutting, and Pasting Nodes [1.1]
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The traditional Copy, Cut, and Paste commands and shortcuts work on nodes in
    the Node tool, although with limitations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Copying a single node does nothing useful. Copying two or more selected nodes
    creates a path out of those nodes and places it on the clipboard. From there,
    if you're in the Selector or in any other tool, you can paste it back as a new
    path object created out of the copied subset of nodes. If you copy less than a
    complete closed subpath, the pasted path will be open.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: If you paste a node selection copied from the Node tool in the same tool with
    a single path selected, you create a new subpath ([12.1.1](#section12.1.1)) in
    the selected path. It doesn't matter if any nodes are selected when you do the
    paste, because pasting doesn't insert the copied nodes between the existing nodes.
    It always creates a separate subpath, and depending on the fill rule ([12.1.2](#section12.1.2)),
    this action may produce holes in the fill. While that may be useful, incorporating
    the nodes into the path and not having a separate subpath sometimes makes more
    sense. To do that, exit the Node tool, paste the copied nodes as a path of their
    own, position that path as needed, and union it with your target path.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.4 Joining and Breaking
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To *join* two end nodes, first select them. These can be the end nodes of the
    same open subpath, in which case joining them will close that subpath. Or they
    can belong to different subpaths, in which case you will join these subpaths into
    a single subpath. They can also belong to different path objects, in which case
    these objects become one path (and take the style of the path that was selected
    first).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to join, corresponding to the two join buttons on the Node
    controls bar. The first method—the Join nodes button or Shift-J—actually moves
    and joins the two end nodes into a single node. The second method—the Join with
    segment button—leaves the end nodes where they are but adds a new path segment
    between them. If you use the first method but don't want one of the end nodes
    to move, hover your mouse over it to lock its position while pressing Shift-J
    ([Figure 12-22](#fig12-22)).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-join.svg.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-22: Joining nodes and inserting segments'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, there are two ways to *break* a path. For the first method, select
    one or more non-end nodes and click the **Break nodes** button or press Shift-B.
    This will duplicate each selected node but without connecting it to the original
    node, so the path will be broken into subpaths at each selected node point. For
    the second method, select two adjacent nonend nodes, and click the **Delete segment**
    button to delete the segment between them, as shown in [Figure 12-23](#fig12-23).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-break.svg.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-23: Breaking nodes and deleting segments'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Cutting an open path with any of these methods produces new subpaths within
    a path ([12.1.1](#section12.1.1)). If you want to break a path into independent
    objects, first break it into subpaths and then use **Path ▶ Break Apart** to separate
    each subpath into a path object of its own.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.5 Node Types
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A mid node may have one or two handles attached to it, one for each side. In
    Inkscape, a node can belong to one of several *node types* that behave differently
    when you drag one of these handles or the node itself ([Figure 12-24](#fig12-24)).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-types.svg.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-24: Node types: cusp, smooth, half-smooth, symmetric, and auto-smooth'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: If a node has no handles (they are both *retracted*), or if one handle is noncollinear
    (not on the same straight line) with the opposite handle or segment, or if one
    handle remains unmoved when you drag the other one, such a node is called *cusp*—because
    when its two controls are at an angle, the node represents a sharp turn (cusp)
    in the path. Cusp nodes are shown as diamond shapes.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the other handle rotates so as to always be collinear with the handle you're
    moving, such a node is called *smooth* because it keeps the path flowing smoothly.
    Smooth nodes are shown as squares.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The node may have only one handle, with a Bézier curve on one side but a straight
    line segment on the other, and the only handle of the node may be *locked* to
    be always collinear with the line segment—so that, when you drag the node, its
    handle automatically rotates to remain collinear. Such a node is called *half-smooth*;
    it is also shown as a square, but unlike other node types, it doesn't have its
    own button or shortcut. To make a node half-smooth, convert a segment between
    two smooth nodes to a straight line with the **Make selected segments lines**
    button ([12.5.6.1](#section12.5.6.1)) or simply retract the inner handles on the
    segment's nodes (their outer handles will line up with the segment and the nodes
    will become half-smooth). You can also convert a cusp node with one handle, adjacent
    to a straight line, to smooth (Shift-S) *once* to make it half-smooth; another
    smoothing will make it fully smooth with two handles.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other handle of a smooth node may rotate and scale so as to always be both
    collinear and have the same length as the control you're moving. Such a node is
    called *symmetric* because its handles are always symmetric around it. Symmetric
    nodes are also shown as squares.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An auto-smooth node, shown as a circle, is a smooth node that adjusts its handles
    automatically when you move it around. You should not manually edit the handles
    of an auto node; if you do, the node will downgrade itself from auto-smooth to
    smooth. It is best, if you use auto nodes, to hide the handles altogether using
    the controls bar button ([Figure 12-16](#fig12-16)) so they don't get in the way.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An auto-smooth node adjusts the angle and length of its handles so as to make
    the adjacent path segments as smooth as possible. If the adjacent nodes are also
    auto-smooth, their handles will adjust, too. For example, when you move an auto-smooth
    node A closer to its neighboring auto-smooth node B, both nodes will make their
    handles progressively shorter and rotate them toward each other so as to keep
    the curvature of the segment between them, as well as of the adjacent segments
    on both sides, at a minimum. This behavior is reminiscent of the Spiro spline
    path effect ([13.3.7.2](c13.xhtml#section13.3.7.2)).
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To change the type of node in a cycle (cusp to smooth to symmetric to auto-smooth
    and back to cusp), Ctrl-click it. To change the type of several selected nodes,
    click one of the node type buttons on the controls bar or use the keyboard shortcuts:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Press Shift-C to make the selected nodes cusp. The first Shift-C just changes
    the node type but does not move the handles; a second Shift-C retracts all handles
    of selected nodes.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press Shift-S to make the selected nodes smooth. If the previously cusp node
    had non-retracted handles, they will be rotated to be collinear; if its handles
    were retracted, they will be pulled out and made collinear at an angle that minimizes
    the curvature.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a node has a straight line segment ([12.5.6.1](#section12.5.6.1)) on one
    side but a handle on the other, the first Shift-S will make it half-smooth, locking
    the single handle to the direction of the line segment. Another Shift-S will extend
    the second handle, making the node fully smooth.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press Shift-Y to make the selected nodes symmetric.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press Shift-A to make the selected nodes auto-smooth.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching all nodes of a path from cusp to smooth or auto-smooth distorts the
    path in a characteristic way, removing straight lines and sharp corners, as [Figure 12-25](#fig12-25)
    demonstrates.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-types-mass.svg.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-25: Converting node types in an entire path'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.6 Moving Handles
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Perhaps the easiest way to edit a Bézier path segment is by dragging not a node
    or handle but the curve itself. This does not require any nodes to be selected
    nor does it move any nodes. Inkscape simply adjusts the Bézier handles of the
    two adjacent nodes so that the curve follows your mouse, as shown in [Figure 12-26](#fig12-26).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-curvedrag.svg.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-26: Curve dragging'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: If a node is smooth or symmetric, dragging the curve on one side of that node
    will also change the curve on its other side, because the movement of one of the
    node's handles will be mirrored by its other handle. Curve dragging next to an
    auto-smooth node converts the node to smooth.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can also drag the Bézier handles of any selected node (if you
    don't see the handles, check that you have the Show handles button pressed on
    the controls bar, [Figure 12-16](#fig12-16)). Although they are shown only for
    selected nodes and their neighbors on the path, handles themselves (unlike nodes)
    are not selectable. As you drag a handle, Inkscape's status bar reports the total
    displacement as well as the current angle and length of the handle.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: With Ctrl pressed, the handle you're rotating snaps to 15-degree increments.
    With Shift pressed, the other handle of the same node rotates by the same amount,
    preserving the angle between handles (as is always the case for smooth nodes;
    with Shift, however, this works for cusp nodes too). With Alt, you lock the length
    of the handle, so that only its angle changes. These modifiers work in any combination.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to move node handles using keyboard shortcuts. In [12.5.7.3](#section12.5.7.3),
    you'll see that the < and > keys scale and that [ and ] rotate several selected
    nodes as if they were an object. Logically, when you have a *single* node selected,
    these same keys rotate and scale (that is, change the length of) the Bézier handles
    of that node without moving the node itself, as shown in [Figure 12-27](#fig12-27).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-handlekeys.svg.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-27: Adjusting node handles with keyboard shortcuts'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: With Alt, you can even scale and rotate each of a node's handles separately.
    Just use the *left* one out of the two Alt keys on your keyboard to scale (with
    < and >) or rotate (with [ and ]) the *left* handle of the single selected node—that
    is, the handle whose end is farther to the left than the other one. The right
    Alt will similarly affect the right handle.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.6.1 Segment Types
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What if you want to flatten a Bézier curve by converting it to a straight line
    segment? Actually, a straight line is just a Bézier curve with both its handles*retracted*—that
    is, coinciding with the corresponding nodes. To retract a handle, Ctrl-click it;
    to pull a retracted handle out of a node, Shift-drag it away from that node.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Another way to convert Bézier curves to lines—and back—is by using the segment
    type buttons on the controls bar. These buttons require that at least two adjacent
    nodes are selected, but they will work on any number of segments between selected
    nodes. The Make segment line button (or Shift-L) retracts any pulled-out handles;
    the Make segment curve button (or Shift-U) does not actually make the segment
    curvilinear, but it pulls out the handles and puts them along the segment, so
    you can move them manually, as shown in [Figure 12-28](#fig12-28).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-segmenttype.svg.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-28: Changing the types of segments'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.7 Moving Nodes
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reshaping a path is as easy as selecting some of its nodes and dragging them
    around. The Bézier handles belonging to those nodes move parallel with them (except
    for half-smooth and auto-smooth nodes, which may rotate their handles as you drag
    them).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: As in the Selector, simple click-and-drag works as expected for moving a single*unselected*
    node; if you drag a selected node, you're dragging *all* selected nodes with it.
    With Ctrl pressed, mouse dragging is restricted to moving horizontally and vertically.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrow keys move selected nodes in the same way and by the same distance as
    in the Selector tool ([6.5.1](c06.xhtml#section6.5.1)): by 2 px (default value)
    without modifiers, by 10 times that distance with Shift, by 1 screen pixel with
    Alt, and by 10 screen pixels with Shift-Alt.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: If you drag a node while pressing Ctrl-Alt, movement is restricted to the directions
    of the dragged node's Bézier handles and their perpendiculars. If a node has a
    straight line segment on one side, then the direction of that segment is taken
    instead of a handle. So, if the node's two handles or adjacent segments are collinear,
    you can Ctrl-Alt-drag it in one of four directions; otherwise, you can drag it
    in one of eight directions ([Figure 12-29](#fig12-29)).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-ctrlalt.svg.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-29: Directions of dragging a node with Ctrl-Alt'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: You can Ctrl-Alt-drag more than one selected node, but the movement will be
    restricted to the handles/segments of the node you actually drag with your mouse.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: The nodes you drag with the mouse may snap ([7.3.1.2](c07.xhtml#section7.3.1.2))
    to guides, grids, and other objects or nodes. By default, snapping to guides and
    grid is enabled, but snapping to objects is not. You can temporarily disable snapping
    if you drag with Shift.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.7.1 Moving Nodes Numerically
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The coordinates of a single selected node are displayed in the X andY fields
    in the Node tool's controls bar ([Figure 12-30](#fig12-30)); editing those values
    moves the selected node to the new coordinates.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-xy.svg.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-30: Using the X and Y editable fields to position nodes'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: If you have more than one node selected, these fields show their *average* coordinates—or,
    to put it another way, the coordinates of the geometric center of the selected
    nodes. In this case, typing a value in one of these fields moves the selected
    nodes as a whole so that their center takes the new coordinate value.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also line up selected nodes using a tool you have already seen used
    for objects: the Align and Distribute dialog ([7.4](c07.xhtml#section7.4)). When
    you are in the Node tool, this dialog displays the Nodes section whose four buttons
    allow you to:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Align the selected nodes horizontally.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Align the selected nodes vertically.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distribute the selected nodes equispaced on X.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distribute the selected nodes equispaced on Y.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For aligning nodes, the Relative to drop-down list lets you choose the reference
    point of the alignment. For example, if you're aligning selected nodes vertically—in
    a column—you can choose whether that column will be in the Middle of selection
    (the default), at the Min value (at the left edge), at the Max value (at the right
    edge), or at the location of the First selected or Last selected node.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.7.2 Node Sculpting
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Simple dragging moves all selected nodes by the same distance, which often is
    what you need. For example, in a schematic face profile ([Figure 12-31](#fig12-31),
    left), you can easily make the nose longer by selecting two nodes and pulling
    them to the right—the result is acceptable for this style of drawing. However,
    what if you have a more complex and realistic drawing with lots of nodes ([Figure 12-31](#fig12-31),
    right)? No matter how many nodes you select, dragging them will introduce discontinuities
    and damage the natural silhouette of the face.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-noses.svg.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-31: Pulling two noses'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: In such cases, it would be nice to be able to move different nodes by different
    distances so that the tip of the nose moves the farthest and the other nodes move
    less and less as you go along the path away from the tip. That is exactly what
    Inkscape does when you select all the nose's nodes and drag the tip node with
    Alt. This technique is called *node sculpting*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: In the simplest case, when all selected nodes are on the same straight line,
    Alt-dragging the middle selected node bends the path into a smooth bell-like curve.
    Farthest selected nodes stay put; the dragged node moves all the way; and all
    other selected nodes move by some intermediate distance. Now, if your selected
    nodes formed a wiggly line, text converted to path, or a realistic nose, Alt-dragging
    will smoothly bend them while preserving their features ([Figure 12-32](#fig12-32)).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-sculpt.svg.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-32: Sculpting nodes with Alt'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: When determining what nodes to move by what distances while Alt-dragging, the
    distance from the node being dragged is calculated along a straight line (spatially),
    not along the path.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have enough nodes on the part of a path you want to sculpt, just
    select the nodes you have and press Insert a few times to populate that part of
    the path with nodes. When sculpting complex shapes with many densely packed nodes,
    such as bitmap tracings ([18.5](c18.xhtml#section18.5)), hide their Bézier handles
    (by unpressing the button on the controls bar) so they don't get in the way, and
    select nodes by expanding selection from a node ([12.5.2](#section12.5.2)).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Node sculpting is reminiscent of the Tweak tool ([12.6](#section12.6)) in that
    it makes path editing more natural and lets you develop complex shapes out of
    simple ones. However, unlike Tweak, this technique does not create or delete nodes—and
    it's more deterministic overall. Repeated Tweaking of a complex sprawling path
    will eventually simplify and degrade all of it, melting away small details even
    where you don't touch them with the tool. With node sculpting, on the other hand,
    only selected nodes are affected, and no degradation occurs no matter how many
    times you Alt-drag the selected nodes back and forth.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 12.5.7.3 Transforming Nodes
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What does *transforming nodes* mean? You already know many ways to move nodes
    around and even sculpt them. How is this different?
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Remember that with the Selector tool, *transforming* includes not only moving
    but also scaling and rotating ([Chapter 6](c06.xhtml#ch6)). These kinds of transformations
    make perfect sense for a group of nodes on a path as well—if you think of that
    group as an "object."
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1]'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'The Show transformation handles button on the controls bar does just that:
    displays the eight scaling handles—exactly the same as in the Selector—around
    the selected nodes on the path ([Figure 12-33](#fig12-33)). Also like in the Selector,
    if you click any of the selected nodes, the scaling handles switch to rotation/skewing
    handles and back (compare [6.3](c06.xhtml#section6.3)). Most of the modifiers
    from the Selector tool also work: Ctrl-scaling to preserve ratio, Shift-scaling
    to scale around the center, and Ctrl-rotating to snap angle to 15-degree increments.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-node-transform.svg.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-33: Transforming selected noses'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Transforming nodes is also available via keyboard shortcuts. Just as in the
    Selector, the < and > keys scale the selected nodes, and the [ and ] keys rotate
    them as a whole. Without modifiers, rotation is by 15-degree increments and scaling
    is by 2 px; the same keys with Alt pressed rotate and scale by 1 screen pixel
    at the current zoom. The H and V keys for flipping (reflecting) horizontally and
    vertically also work.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: By default, keyboard scaling, rotation, and flipping are performed around the
    geometric center of the selected nodes. However, if you hover your mouse cursor
    over one of the nodes, it will remain fixed while other selected nodes scale or
    rotate around it as a center. For example, you can select all nodes of an object
    by pressing Ctrl-A and then hover on a node and rotate the entire object around
    that node with [ and ].
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 12.6 Path Tweaking
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've already seen in [8.9](c08.xhtml#section8.9) how the Tweak tool (W, Shift-F2)
    can be used to paint and jitter colors in objects, and in [6.10](c06.xhtml#section6.10),
    how it can be used to move and transform objects. This versatile tool’s remaining
    modes—*Push*, *Shrink/Grow*, *Attract/Repel*, and *Roughen*—are for editing paths.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: The Tweak tool's approach to editing paths is fundamentally different from that
    of the Node tool. The Node tool, true to its name, enables you to edit nodes,
    and you need to have a working knowledge of how nodes define the shape of the
    path. With the Tweak tool, you can forget everything you ever knew about nodes;
    just interact with your path as a pliable body, like a lump of modeling clay,
    bending and sculpting it at any point in any direction. While hardly useful for
    technical drawing, tweaking paths is perfect for creating artistic images such
    as cartoons.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: The Tweak tool works on any number of selected objects. For example, you can
    select all (Ctrl-A) and "smear" your entire drawing in Push mode. The tool will
    even go into groups and act on individual paths inside groups. If you're trying
    to use it without selecting something, it will remind you to select some objects
    first with a status bar message.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 12.6.1 Width and Force
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In any of the Tweak tool's modes, what you work with is a circular*brush* (the
    orange-edged circle centered on the cursor) with which you "paint" over selected
    objects to change them. The Width parameter controls the brush size, and the amount
    of action it applies depends on theForce parameter as well as on pen pressure
    if you have a pressure-sensitive tablet. See [6.10](c06.xhtml#section6.10) for
    more details on those parameters.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: It takes practice to apply just the right amount of drag at the right place,
    with the proper force (including pen pressure), and with the correct brush size
    to get the result you want. However, this skill is very rewarding—what used to
    be awkward and time-consuming with the Node tool is often much quicker and more
    natural with the Tweak tool.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 12.6.2 Fidelity
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any tweaking of a path slightly distorts—or rather *simplifies*, just like the
    Simplify command—the entire path, including even those parts you didn't touch
    with the brush.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: The Fidelity value allows you to control the amount of this parasitic simplification.
    The tradeoff here is the number of nodes in the resulting path. With low fidelity,
    the resulting path will be node-poor but probably distorted more than you would
    find acceptable. High fidelity minimizes distortions, but the path may end up
    having a lot of nodes—which inflates the SVG size and slows down Inkscape.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The best value for fidelity depends on the nature of your artwork. If you're
    sculpting amorphous blobs, you can get away with a low fidelity of about 20\.
    If, however, you are pushing or growing a text string converted to path and want
    the letters outside the distorted area to remain as clean and legible as possible,
    you will need to raise the fidelity to 80 or more.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, the Tweak tool recasts the path into an "approximating polygon"
    with thousands of tiny straight line sides, tweaks the vertices of that polygon,
    and then recasts it back into a path with Bézier segments. The fidelity level
    controls the precision of this transformation and thus the number of nodes in
    the result, but no fidelity setting will give you the exact nodes of the original—some
    of the nodes will always end up displaced and changed, just like they do after
    a Simplify.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 12.6.3 Push Mode
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Push is the Tweak tool's default mode. To switch to Push mode from any other
    mode, press Shift-P, or click its button on the controls bar.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Push is a general-purpose sculpting mode. When you drag in this mode, the parts
    of the selected paths covered by the brush are shifted in the direction of your
    drag, for as long as the mouse button or pen is held down, as shown in [Figure 12-34](#fig12-34).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-tweak-push.svg.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-34: The Tweak tool''s Push mode'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Varying brush width as necessary, you can transmogrify by pushing any path into
    almost any other—but you can also use it for small tweaks, such as flattening
    a bump, bending an appendage, or curving an engraving grid. Thanks to the brush's
    bell-like profile, the paths you're pushing respond by curving softly and smoothly,
    as [Figure 12-35](#fig12-35) demonstrates.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-tweak-push1.svg.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-35: Sculpting paths in Push mode'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 12.6.4 Shrink/Grow Mode
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Shrink/Grow mode (Shift-S) moves each point of a path in a direction perpendicular
    to the path's edge in that point, either inward (shrink, plain drag) or outward
    (grow, drag with Shift). To quickly access this mode from any other mode of the
    tool, Ctrl-drag to shrink and Shift-Ctrl-drag to grow.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: The Shrink/Grow mode is very similar to the Inset and Outset commands ([12.4](#section12.4)),
    except that the Tweak tool, as always, acts softly on a part of a path instead
    of the whole path. You can use this mode to lighten or darken parts of drawings
    with of many details—such as engravings, freehand scribbles, or even text (converted
    to paths), as shown in [Figure 12-36](#fig12-36).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-tweak-growshrink.svg.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-36: The Shrink/Grow mode of the Tweak tool'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'The Shrink/Grow mode allows you to easily Shift-drag to chase the moving edge
    of the path: this way, using a small-sized brush, you can grow appendages and
    branches of any length out of a path. (You can also do this in Push mode, but
    Grow is somewhat easier for this task.) Also, Shrink mode can act as a quick eraser—cutting
    through paths, evaporating small crumbs and bits, and trimming long brush strokes
    is easy and natural, as [Figure 12-37](#fig12-37) demonstrates.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-tweak-growshrink2.svg.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-37: Using Shrink mode as an eraser'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 12.6.5 Attract/Repel Mode
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Attract/Repel mode (Shift-A) works by moving each affected point on a path
    toward (attract, plain drag) or from (repel, drag with Shift) the cursor point,
    pinching and exploding whatever paths fall under the brush. Sometimes, this may
    look similar to Shrink/Grow, but the difference is that Attract/Repel doesn't
    care about the direction of the path being tweaked; this mode moves everything
    symmetrically around the center of the brush ([Figure 12-38](#fig12-38)).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-tweak-attractrepel.svg.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-38: The Tweak tool''s Attract/Repel mode'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 12.6.6 Roughen Mode
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Roughen mode (Shift-R) randomly distorts the edge of the path where you
    apply your brush, without changing the path's overall shape, as shown in [Figure 12-39](#fig12-39).
    Slight roughening simply makes the edge crooked and uneven, while strong roughening
    tears and explodes the edge into random blobs and splotches.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '![](13/pa-tweak-roughen.svg.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-39: The Tweak tool''s Roughen mode'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: This operation, especially with high fidelity, adds *a lot* of nodes. Such a
    roughened path may become hard to edit—it's awkward to handle with the Node tool
    and may be painfully slow with the Tweak tool. I recommend finalizing the overall
    shape of a path using pushing, growing, and shrinking as needed—and roughen it,
    if necessary, only as the final step.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
