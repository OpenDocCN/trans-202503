["```\n$ **cat simple.rb**\nputs 2+2\n$ **rbx simple.rb**\n4\n```", "```\n    $ **rbx compile simple.rb -B**\n    ============= :__script__ ==============\n    Arguments:   0 required, 0 post, 0 total\n    Arity:       0\n    Locals:      0\n    Stack size:  3\n    Literals:    2: :+, :puts\n    Lines to IP: 1: 0..12\n\n    0000:  push_self\n    0001:  meta_push_2\n    0002:  meta_push_2\n 0003:  send_stack                 :+, 1\n    0006:  allow_private\n 0007:  send_stack                 :puts, 1\n    0010:  pop\n    0011:  push_true\n    0012:  ret\n    ----------------------------------------\n```", "```\nstr = \"The quick brown fox...\"\nputs str[4]\n => q\n```", "```\n10.times do |n|\n  puts n\n  raise \"Stop Here\"\nend\n```", "```\n$ **ruby iterate.rb**\n0\niterate.rb:3:in 'block in <main>': Stop Here (RuntimeError)\n    from iterate.rb:1:in 'times'\n    from iterate.rb:1:in '<main>'\n```", "```\n$ **rbx iterate.rb**\n0\nAn exception occurred running iterate.rb\n    Stop Here (RuntimeError)\n\nBacktrace:\n          { } in Object#__script__ at iterate.rb:3\n             Integer(Fixnum)#times at kernel/common/integer.rb:83\n                 Object#__script__ at iterate.rb:1\n  Rubinius::CodeLoader#load_script at kernel/delta/codeloader.rb:68\n  Rubinius::CodeLoader.load_script at kernel/delta/codeloader.rb:119\n           Rubinius::Loader#script at kernel/loader.rb:645\n             Rubinius::Loader#main at kernel/loader.rb:844\n```", "```\n def times\n   return to_enum(:times) unless block_given?\n\n   i = 0\n   while i < self\n     yield i\n        i += 1\n      end\n   self\n    end\n```", "```\np 10.times\n => #<Enumerable::Enumerator:0x120 @generator=nil @args=[] @lookahead=[]     @object=10 @iter=:times>\n```", "```\nfibonacci_sequence = [1, 1, 2, 3, 5, 8]\n```", "```\n    #define RARRAY_EMBED_LEN_MAX 3struct RArray {\n      struct RBasic basic;\n   union {\n        struct {\n       long len;\n          union {\n         long capa;\n         VALUE shared;\n          } aux;\n       VALUE *ptr;\n        } heap;\n     VALUE ary[RARRAY_EMBED_LEN_MAX];\n      } as;\n    };\n```", "```\n    fibonacci_sequence = [1, 1, 2, 3, 5, 8]\n    p fibonacci_sequence.shift\n  => 1\n    p fibonacci_sequence\n  => [1, 2, 3, 5, 8]\n```", "```\np Array.instance_method(:shift).source_location\n => [\"kernel/common/array.rb\", 848]\n```", "```\n def shift(n=undefined)\n      Rubinius.check_frozen\n\n   if undefined.equal?(n)\n        return nil if @total == 0\n     obj = @tuple.at @start\n        @tuple.put @start, nil\n        @start += 1\n        @total -= 1\n\n        obj\n   else\n        n = Rubinius::Type.coerce_to(n, Fixnum, :to_int)\n        raise ArgumentError, \"negative array size\" if n < 0\n\n        Array.new slice!(0, n)\n      end\n    end\n```", "```\n    if undefined.equal?(n)\n      return nil if @total == 0\n\n   fibonacci_array = (self == [1, 1, 2, 3, 5, 8])\n   puts \"Start: #{@start} Total: #@total} Tuple: #{@tuple.inspect}\" if  fibonacci_array\n\n      obj = @tuple.at @start\n      @tuple.put @start, nil\n      @start += 1\n      @total -= 1\n\n   puts \"Start: #{@start} Total: #{@total} Tuple: #{@tuple.inspect}\" if  fibonacci_array\n\n      obj\n    end\n```", "```\n    $ **rake install**\n\n    --*snip*--\n\n    RBC kernel/common/hash.rb\n    RBC kernel/common/hash19.rb\n    RBC kernel/common/hash_hamt.rb\n RBC kernel/common/array.rb\n    RBC kernel/common/array19.rb\n    RBC kernel/common/kernel.rb\n\n    --*snip*--\n```", "```\n    fibonacci_sequence = [1, 1, 2, 3, 5, 8]\n    p fibonacci_sequence.shift\n Start: 0 Total: 6 Tuple: #<Rubinius::Tuple: 1, 1, 2, 3, 5, 8>\n Start: 1 Total: 5 Tuple: #<Rubinius::Tuple: nil, 1, 2, 3, 5, 8> => 1\n    p fibonacci_sequence\n     => [1, 2, 3, 5, 8]\n```"]