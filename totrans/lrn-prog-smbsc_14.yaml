- en: '**14**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**CREATING CONDITIONAL WHILE LOOPS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 13](ch13.html#ch13), we showed you how to use the `For` loop to
    repeat code a certain number of times. `For` loops are ideal to use when you know
    exactly how many times you want to repeat code. `While` is another Small Basic
    keyword that lets you create loops. It’s useful when you don’t know how many times
    you want to repeat a loop in advance, because `While` loops keep running code
    as long as a condition is true.
  prefs: []
  type: TYPE_NORMAL
- en: A `While` loop condition is similar to how your parents keep telling you to
    clean your room until it’s spotless or how you keep eating Thanksgiving turkey
    until you’re stuffed! When the loop’s condition becomes false, the loop ends,
    and the program moves on.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to write `While` loops and use them to verify
    user input and make games. `While` loops are a powerful programming concept; once
    you master them, you’ll be able to make all kinds of cool applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**When to Use While Loops**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s say you want to make a number-guessing game that selects a random number
    between 1 and 100 and prompts a player to guess it. If the player’s guess is wrong,
    the game tells them whether their guess was higher or lower than the secret number,
    and then it asks them to guess again. The game keeps asking the player to guess
    the number until they get it right.
  prefs: []
  type: TYPE_NORMAL
- en: A `For` loop isn’t the best choice to use here, because you don’t know how many
    times it will take a player to guess the secret number. Maybe the player will
    get it right on the first try, or it might take 100 tries! `While` loops are perfect
    in cases like this one.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn the `While` loop’s syntax and use it to create
    your own number-guessing game.
  prefs: []
  type: TYPE_NORMAL
- en: '**Writing a While Loop**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try out the code in [Listing 14-1](ch14.html#ch14ex1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-1: Number-guessing game*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The program randomly selects a number from 1 to 100 and assigns it to `num`
    (line 2). Then a variable called `ans`, which will hold the player’s guess, is
    created and set to 0 (line 3). We set this initial value to 0 because we need
    it to be different from the correct answer. Let’s take a closer look at the first
    line of the `While` loop (line 4):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code simply says, “As long as `ans` is not equal to `num`, run
    the statement(s) between the `While` and the `EndWhile` keywords.”
  prefs: []
  type: TYPE_NORMAL
- en: First, the test condition (`ans <> num`) is evaluated. If it’s true, the program
    runs the statements in the loop’s body and keeps repeating until the condition
    becomes false. When the test condition becomes false, the loop ends, and the program
    moves to the next statement after the `EndWhile` keyword. The flowchart in [Figure
    14-1](ch14.html#ch14fig1) illustrates how the `While` loop works.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f14-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-1: Flowchart of the* `While` *loop*'
  prefs: []
  type: TYPE_NORMAL
- en: In the number-guessing game, when the program runs line 4 for the first time,
    the condition (`ans <> num`) is true (because we know that `num` can’t be 0),
    and the loop runs the statements in its body (lines 5–13). During each iteration
    of the loop, the player is prompted to enter a guess (line 5), which is saved
    into the variable `ans` (line 6). The code then compares the player’s guess with
    the secret number. If the player guessed correctly (line 7), the code displays
    `Good Job! You get sprinkles!` and moves to the statement after `EndIf`. In this
    example, it finds `EndWhile`, which takes your program back to check the condition
    of the `While` loop. Because `ans` is now equal to `num`, the test condition is
    false and the `While` loop terminates, ending the program (because there are no
    statements after `EndWhile`).
  prefs: []
  type: TYPE_NORMAL
- en: If the player’s guess was incorrect, the code checks whether the guess was higher
    than the secret number (line 9). If it’s higher, the program displays `Too High.
    Lower your standards.` Then the loop goes for another round. If the player’s guess
    is lower than the secret number (the `Else` statement on line 11), the program
    displays `Too Low. Aim for the stars!` (line 12) and starts another round.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a rather lucky user playing the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Play this game several times to see how it works!
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Although it’s not required by Small Basic, we’ll make programs easier to read
    by using parentheses around the* `While` *loop’s condition and indenting the body
    of a* `While` *loop.*'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll show you how to use a `While` loop to check data
    entered by a user.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 14-1**'
  prefs: []
  type: TYPE_NORMAL
- en: How much wood could a woodchuck chuck if a woodchuck could chuck wood? Open
    the *Woodchuck.sb* file from this chapter’s folder, and run it to answer this
    age-old question. Then figure out some ways to improve the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**Validating Your Inputs**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you write a program that reads data from a user, you should always check
    the input data before continuing with your program. This is called *validation*.
    In this section, we’ll show you how to use `While` loops to ensure that your user
    enters the correct input to your program.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you need the user to enter a number between 1 and 5 (including 1 or
    5). If they enter a number less than 1 or greater than 5, you need to prompt them
    to re-enter a number. [Listing 14-2](ch14.html#ch14ex2) shows you how to use a
    `While` loop to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-2: Using a* `While` *loop to check the input number*'
  prefs: []
  type: TYPE_NORMAL
- en: Line 2 sets the variable `num` (which will hold the number entered by the user)
    to –1\. This makes the condition of the `While` loop (line 4) true, so the loop’s
    body runs at least once. Although the loop in this example runs fine without the
    initialization statement on line 2 (because the variable `num` will be seen as
    0), we recommend that you always initialize your variables and not rely on their
    default values. This will help you prevent future mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: The program prompts the user for a number and assigns their input to the `num`
    variable (lines 5–6). Then the loop runs again. If `num` is less than 1 or greater
    than 5 (the user entered an invalid number), the loop’s body runs again, prompting
    the user to re-enter the number. If `num` is between 1 and 5 (inclusive), the
    loop ends, and the program moves to line 8 to display the number.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Make sure you initialize any variable before you use it in a* `While` *loop’s
    test condition. If you don’t, your program might skip over the loop entirely!*'
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to verify user input using a `While` loop.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 14-2**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that asks a user whether they think SpongeBob could become Santa,
    and then prompt them to enter `Y` (for yes) or `N` (for no). They can also enter
    `y` or `n`. Write a `While` loop that only accepts `Y`, `y`, `N`, or `n` as valid
    inputs. Then tell the user what they did wrong each time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Infinite Loops**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a `While` loop’s condition doesn’t become false, the loop runs forever, creating
    an *infinite loop*. Sometimes this can cause a problem, but sometimes infinite
    loops are useful, such as when you want to make a game run forever.
  prefs: []
  type: TYPE_NORMAL
- en: 'But how do you create an infinite loop in Small Basic? There are a few ways
    to do this, but here is a common shortcut that many Small Basic programmers use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this code, the loop’s condition is always true; the loop never stops, and
    it displays `Loop forever!` forever. To see this in action, you’ll program a simple
    game that quizzes kids on their addition skills. The complete code is shown in
    [Listing 14-3](ch14.html#ch14ex3). Run this program to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-3: A program that quizzes a user with addition problems*'
  prefs: []
  type: TYPE_NORMAL
- en: In lines 3 and 4, `num1` and `num2` are set to random numbers between 1 and
    10\. Line 5 adds them together to set the correct answer. Line 6 asks the user
    for the correct answer. Line 7 gets the user’s answer. Line 8 checks whether the
    answer is true, and if it is, line 9 tells them they’re right. Otherwise, line
    11 tells them the correct answer. The game runs forever. When the user wants to
    quit, they can close the application by clicking the X icon in the upper-right
    corner of the application’s window.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can use a* `Goto` *statement inside a* `While` *loop to jump to a label
    outside the loop in order to break out of the loop.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to put what you’ve learned in this chapter to work by designing
    a complete game. Head to the fridge to get plenty of brain food before reading
    on!
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 14-3**'
  prefs: []
  type: TYPE_NORMAL
- en: Change the *AddTutor.sb* program so it won’t give the correct answer to the
    player when they get it wrong. Instead, have the program tell the player that
    their answer is incorrect and let them try again.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a Rock-Paper-Scissors Game**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll create a rock-paper-scissors game in which a user plays
    against the computer. [Figure 14-2](ch14.html#ch14fig2) shows the user interface
    for this game. The three buttons represent rock, paper, and scissors. The player
    chooses one by clicking it. Then the computer randomly picks an action. The rules
    that determine the winner are paper beats rock, rock beats scissors, and scissors
    beats paper.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f14-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-2: The user interface for the rock-paper-scissors game*'
  prefs: []
  type: TYPE_NORMAL
- en: Images *P1*, *P2*, and *P3* show the player’s selection, and images *C1*, *C2*,
    and *C3* show the computer’s choice. Images *W0*, *W1*, *W2*, and *W3* show the
    result of each round of the game. Everything else you see in [Figure 14-2](ch14.html#ch14fig2)
    is part of the background image, including the rock, paper, and scissors images
    that represent the three buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 1: Open the Startup File***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open the file *RockPaper_Incomplete.sb* from this chapter’s folder and follow
    along. The folder includes all the images you need for this game. The startup
    file, shown in [Listing 14-4](ch14.html#ch14ex4), contains the main part of the
    game. It also contains empty placeholders for all the subroutines you need to
    add.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-4: Setting up the window and choice*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the program now, all you’ll see is the background image because
    you haven’t created any of the subroutines yet. You’ll get there, but first let’s
    check out the setup and main loop of the game. First, the size of the graphics
    window is set, and the background image is drawn (lines 2–8). The variable `choice1`
    holds the player’s choice: `0` means unknown, `1` means rock, `2` means paper,
    and `3` means scissors. To start, we set `choice1` to `0`, because the player
    hasn’t made a choice yet (line 9). Then we register a handler for the `MouseDown`
    event to be able to find out when the player clicks one of the three buttons (line
    10). Then the game’s main loop starts (lines 12–22).'
  prefs: []
  type: TYPE_NORMAL
- en: The loop continuously checks the value of `choice1`. As you’ll see in a moment,
    this variable is changed by the `OnMouseDown()` subroutine when the player makes
    a choice. If `choice1` is 0, the loop waits for 10 milliseconds (line 21) and
    checks again. Using a loop makes the program wait for `choice1` to become a value
    other than 0 (this is called *polling*; it’s similar to asking “Are we there yet?”
    during a long trip). When `choice1` becomes a value other than 0 (line 13), the
    body of the `If` block is executed (lines 14–19). We draw image `W3` to show a
    blank result (lines 14–15). Next, we set the computer’s choice, `choice2`, to
    a random value between 1 and 3 (line 16). Then we call `SwitchImages()` to show
    the images that correspond to `choice1` and `choice2` (line 17). Then we call
    `ShowWinner()` to show the result of this round of the game (line 18). Finally,
    we set `choice1` back to `0` to tell the `OnMouseDown()` subroutine that the main
    loop is ready for another round of the game (line 19).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll add each subroutine one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2: Add the MouseDown Handler***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s handle the `MouseDown` event to figure out the player’s choice. Add
    the `OnMouseDown()` subroutine in [Listing 14-5](ch14.html#ch14ex5) to the bottom
    of the program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-5: Checking the choice the user clicked*'
  prefs: []
  type: TYPE_NORMAL
- en: Small Basic calls this subroutine when the player clicks anywhere in the graphics
    window. First, the subroutine checks the value of `choice1` (line 2). If `choice1`
    is `0`, the subroutine checks where the player clicked to see whether they clicked
    one of the three buttons. If `choice1` is not 0, that means the main loop is still
    processing the player’s last choice, so the subroutine just ignores the mouse
    click. This way your game won’t get confused if the player clicks all over the
    place.
  prefs: []
  type: TYPE_NORMAL
- en: To see whether the player clicks one of the three image buttons, the subroutine
    checks the vertical position of the click (line 4). If it’s within the range of
    the images, the subroutine checks the horizontal position (line 6). The `If/ElseIf`
    ladder then compares the horizontal position with the left and right edges of
    each image and sets `choice1` accordingly (lines 6–12).
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you want to find out the exact positions of the three image buttons, add
    this code to your program:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Move the mouse over the background image to see the coordinates displayed
    in the text window. Don’t forget to delete this code before you share your game
    with your friends!*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 3: Switch the Images***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the player makes a choice, you need to show the computer’s pick so they
    know the computer isn’t cheating. To create some excitement, you’ll animate the
    images before showing the final choices. Add the `SwitchImages()` subroutine in
    [Listing 14-6](ch14.html#ch14ex6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-6: Switching images for a visual effect*'
  prefs: []
  type: TYPE_NORMAL
- en: '`SwitchImages()` starts by switching the images for the player and the computer
    10 times very quickly for a fun visual effect (lines 2–9). Then the code shows
    the images that correspond to `choice1` and `choice2` by appending a number to
    the letters `P` and `C`, which represent the names of the images.'
  prefs: []
  type: TYPE_NORMAL
- en: Run the code to test it. When you click any of the three image buttons, the
    player and the computer selections will change 10 times before landing on the
    images that correspond to the actual choices. (Don’t flip images too quickly,
    or you’ll get a headache!)
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 4: Announce the Winner***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The last part of the game, the `ShowWinner()` subroutine, checks the result
    and displays the winner. Add the `ShowWinner()` subroutine in [Listing 14-7](ch14.html#ch14ex7).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 14-7: Checking who won to display the right image*'
  prefs: []
  type: TYPE_NORMAL
- en: This subroutine compares the values of `choice1` and `choice2` using an `If/ElseIf`
    ladder and decides which image (`img`) to display (lines 3–17). Remember that
    choice `1` means rock, `2` means paper, and `3` means scissors. Then, line 19
    draws the selected image.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 14-4**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can turn the rock-paper-scissors game into a two-player game!
  prefs: []
  type: TYPE_NORMAL
- en: '**Programming Challenges**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  prefs: []
  type: TYPE_NORMAL
- en: Open the file *Race_Incomplete.sb* from this chapter’s folder. This application
    simulates a race between two players. When you run the program, you’ll see the
    following interface. Follow the comments provided in the application’s source
    code to write the missing code and complete the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0205-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the file *SimpleSlot.sb* from this chapter’s folder. This program simulates
    a simple slot machine, as shown in the following figure. When you click the mouse,
    the game displays three objects at random. If all three objects are alike, you
    win $20\. If two are alike, you win $5; otherwise, you lose $1\. After playing
    the game, study the code and explain how the program works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0205-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the file *Space.sb* from this chapter’s folder. In this game, you shoot
    at a UFO flying across the top of the screen (see the following figure). Use the
    left and right arrow keys to move, and press the spacebar to shoot. You have only
    100 shots, and the game tracks your score. Think of some ways to improve the game
    and add them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0205-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
