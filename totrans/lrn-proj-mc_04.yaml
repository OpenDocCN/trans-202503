- en: '**4**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4**'
- en: '**CHATTING WITH STRINGS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用字符串聊天**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: In [Chapters 2](ch02.html#ch02) and [3](ch03.html#ch03), you worked with integers
    and floats, which are both number types. In this chapter, you’ll use another data
    type called *strings*. You can use strings to work with letters and symbols as
    well as numbers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html#ch02)和[第3章](ch03.html#ch03)中，你已经学习了整数和浮点数，它们都是数字类型。在本章中，你将使用另一种数据类型，叫做*字符串*。你可以使用字符串来处理字母、符号以及数字。
- en: Strings help you display data to people using your programs—an important part
    of programming. Using strings, you can to tell Python to *output* data to the
    screen, which displays and communicates information to the user.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串帮助你向使用你程序的人显示数据——这是编程中的一个重要部分。通过使用字符串，你可以告诉Python将数据*输出*到屏幕上，进而向用户显示和传达信息。
- en: With Minecraft you can use strings in various places, such as posting messages
    to the chat, which is a way of communicating with other players when you are in
    multiplayer mode. Although posting messages is a standard feature in other versions
    of Minecraft, it is a hidden feature in the Raspberry Pi version. But you can
    access this feature through the power of programming. You’ll be able to share
    secret information with your friends and brag about your treasures!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minecraft中，你可以在多个地方使用字符串，例如发布信息到聊天框，这是在多人游戏模式下与其他玩家交流的一种方式。虽然在其他版本的Minecraft中，发布信息是一个标准功能，但在Raspberry
    Pi版本中它是一个隐藏功能。不过你可以通过编程的力量访问这个功能。你将能够与朋友分享秘密信息，并炫耀你的宝藏！
- en: You’ll also learn about functions in this chapter. If you are eagle-eyed, you’ll
    notice that you’ve seen some functions already. `setPos()`, `setTilePos()`, `setBlock()`,
    `setBlocks()`, `getPos()`, and `getTilePos()` are all *functions*—reusable blocks
    of code that make it easier for you to complete tasks. Pretty cool, huh?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你还将学习关于函数的内容。如果你足够敏锐，你会注意到你已经见过一些函数了。`setPos()`、`setTilePos()`、`setBlock()`、`setBlocks()`、`getPos()`和`getTilePos()`都是*函数*——可重用的代码块，使得你能够更轻松地完成任务。挺酷的，对吧？
- en: In this chapter’s missions, you’ll build on the knowledge you’ve learned so
    far. You’ll print messages to the Minecraft chat using strings and practice inputting
    data to create objects in your Minecraft world.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的任务中，你将基于目前学到的知识进行进一步的学习。你将使用字符串向Minecraft聊天框打印信息，并练习输入数据以在Minecraft世界中创建对象。
- en: '**WHAT ARE STRINGS?**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是字符串？**'
- en: A *string* data type includes any amount of text, from a single letter or symbol—like
    `"a"` or `"&"`—to a large block of text. Each letter, number, or symbol in a string
    is called a *character*. When you want to include letters, symbols, words, sentences,
    or a combination of these things in your program, you use strings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*数据类型包括任意数量的文本，从单个字母或符号——如`"a"`或`"&"`——到一大段文本。字符串中的每个字母、数字或符号都叫做*字符*。当你想在程序中包含字母、符号、单词、句子或它们的组合时，你会使用字符串。'
- en: 'With the string data type, you can store letters, numbers, and symbols. All
    strings are enclosed in quotation marks. For example, this is a string:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串数据类型，你可以存储字母、数字和符号。所有字符串都被包含在引号中。例如，这是一个字符串：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is also a string:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下也是一个字符串：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Did you catch the slight difference in the way these examples are written?
    When writing a string, you can use either single or double quotation marks: `''`
    or `"`. Be careful not to mix quotation marks! If you start a string with a single
    quote, you must end it with a single quote. If you start with a double quote,
    end with a double quote. There is a good reason for including both of these options
    in the Python programming language; for example, if you want to use an apostrophe
    in your string, you can safely include it if you enclose your string in double
    quotes.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到这些例子写法的微小差异了吗？在写字符串时，你可以使用单引号或双引号：`'` 或 `"`. 要小心不要混用引号！如果你使用单引号开始一个字符串，你必须用单引号结束它。如果你用双引号开始，就要用双引号结束。Python编程语言提供这两种选项是有原因的；例如，如果你想在字符串中使用撇号，你可以安全地在双引号中包含它。
- en: '**THE PRINT() FUNCTION**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**PRINT()函数**'
- en: Displaying text and other information to the user is important for user interaction;
    otherwise, the user won’t know what’s going on in your programs. The information
    you display to the user is called *output*. To output data to the user’s screen,
    you use the `print()` function.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 向用户显示文本和其他信息对于用户交互至关重要；否则，用户将无法知道你的程序在做什么。你显示给用户的信息被称为*输出*。要将数据输出到用户的屏幕，你可以使用`print()`函数。
- en: 'To output a message, pass a string to the `print()` function as an argument:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要输出消息，将一个字符串作为参数传递给 `print()` 函数：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This tells Python that you want to display the word `String` to the user. So
    to print `chocolate` to the Python shell, you write:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 Python 你想将单词 `String` 显示给用户。所以，要将 `chocolate` 打印到 Python shell 中，你写：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And that output would be:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出将会是：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also use `print()` to print the values of variables. For example, if
    you have a variable called `name` that stores a name as a string, and you want
    to display it to the screen, you can do this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `print()` 打印变量的值。例如，如果你有一个名为 `name` 的变量，它存储了一个名字字符串，并且你想将其显示到屏幕上，你可以这样做：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After you store the string `"Steve the Miner"` in `name`, you can simply write
    `print(name)` to display this output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将字符串 `"Steve the Miner"` 存储在 `name` 中后，你可以简单地写 `print(name)` 来显示以下输出：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that you know the basics of strings, complete the mission to say hello to
    your Minecraft world!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了字符串的基础知识，完成任务，向你的 Minecraft 世界问个好吧！
- en: '**MISSION #11: HELLO, MINECRAFT WORLD**'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #11：你好，Minecraft 世界**'
- en: If you want to chat with other players in Minecraft Pi, the Minecraft Python
    API lets you send messages to the chat using the `postToChat()` function. The
    `postToChat()` function takes a string as an argument and posts that string to
    the Minecraft chat window. For example, [Listing 4-1](ch04.html#ch4ex1) posts
    `"Hello, Minecraft World"` to the chat.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想与 Minecraft Pi 中的其他玩家聊天，Minecraft Python API 允许你使用 `postToChat()` 函数将消息发送到聊天框中。`postToChat()`
    函数接受一个字符串作为参数，并将该字符串发布到 Minecraft 聊天窗口中。例如，[Listing 4-1](ch04.html#ch4ex1) 将 `"Hello,
    Minecraft World"` 发布到聊天框。
- en: '*message.py*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*message.py*'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 4-1: Use Python to send a greeting over Minecraft chat.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 4-1: 使用 Python 通过 Minecraft 聊天发送问候。*'
- en: Recall that an argument is information that you pass to a function when you
    call the function. The function needs this information in order to do its job.
    For example, in the previous chapter, we needed to pass numbers to our functions
    to define what we wanted them to do. In this case, `postToChat()` needs a string,
    such as `"Hello, Minecraft World"`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，参数是你在调用函数时传递给它的信息。函数需要这些信息才能完成它的任务。例如，在上一章中，我们需要将数字传递给函数，以定义我们希望它们执行的操作。在这个例子中，`postToChat()`
    需要一个字符串，比如 `"Hello, Minecraft World"`。
- en: The `postToChat()` function is similar to the `print()` function. Both can show
    strings on the screen, and both can take a variable that stores a string as an
    argument. The difference is that the `print()` function outputs strings to the
    Python shell while `postToChat()` displays the output in the Minecraft chat.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`postToChat()` 函数类似于 `print()` 函数。它们都可以在屏幕上显示字符串，并且都可以接受一个存储字符串的变量作为参数。不同之处在于，`print()`
    函数将字符串输出到 Python shell，而 `postToChat()` 函数则将输出显示在 Minecraft 聊天框中。'
- en: Copy the code from [Listing 4-1](ch04.html#ch4ex1) and save it as *message.py*
    in a new folder called *strings*. When you run the program, you should see the
    message posted to chat, as shown in [Figure 4-1](ch04.html#ch4fig1).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [Listing 4-1](ch04.html#ch4ex1) 复制代码，并将其保存在名为 *strings* 的新文件夹中，文件名为 *message.py*。当你运行程序时，你应该能看到消息被发布到聊天框中，如
    [Figure 4-1](ch04.html#ch4fig1) 所示。
- en: '![image](graphics/f04-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-01.jpg)'
- en: '*Figure 4-1: My message was posted in the chat.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 4-1: 我的消息已发布到聊天框中。*'
- en: Try passing a different string to `postToChat()` to make it display a different
    chat message.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将不同的字符串传递给 `postToChat()`，使其显示不同的聊天消息。
- en: '**BONUS OBJECTIVE: WHERE ARE YOU?**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：你在哪里？**'
- en: You can post all sorts of information to the chat using the `mc.postToChat()`
    function. Try displaying the player’s current x position or the block type they’re
    standing on. Recall that the `mc.player.getTilePos()` function gets the player’s
    current position and the `mc.getBlock()` function tells you the block type at
    certain coordinates.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `mc.postToChat()` 函数将各种信息发布到聊天框。试着显示玩家当前的 x 坐标或者他们站立的方块类型。回想一下，`mc.player.getTilePos()`
    函数可以获取玩家当前的位置，而 `mc.getBlock()` 函数则可以告诉你某个坐标点的方块类型。
- en: '**THE INPUT() FUNCTION**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**INPUT() 函数**'
- en: So far, all of your variables have been set in your programs, or *hardcoded*.
    To change the value of a variable, you’d have to edit the program. It would be
    handy to be able to change these variables while the program is running or accept
    *user input* from the player.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有的变量都在你的程序中设置，或者是 *硬编码* 的。要改变一个变量的值，你需要编辑程序。能够在程序运行时改变这些变量的值，或者接受 *用户输入*，会更方便。
- en: 'One way of adding this kind of interactivity to your program is by using the
    `input()` function. It prints a string to the console (to tell the user what kind
    of information they should enter) and then waits for the user to type a response.
    Try entering this code into the Python shell to see what happens:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的程序添加这种互动性的一种方法是使用`input()`函数。它会将一条字符串打印到控制台（告诉用户应该输入什么样的信息），然后等待用户输入响应。尝试将以下代码输入到Python
    Shell中，看看会发生什么：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You’ll see the string that you passed to `input()`, and you’ll be able to type
    in a response.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到你传递给`input()`的字符串，并且你可以输入一个响应。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you enter a response, you should see something like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入一个响应时，你应该看到类似这样的内容：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Neat! But if you want to use this input somewhere in your program, you’ll have
    to save it to a variable. Unlike the Python shell, programs created in the text
    editor do not automatically output the results of statements. For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！但是，如果你想在程序的其他地方使用这个输入，你必须将其保存到一个变量中。与Python Shell不同，在文本编辑器中创建的程序不会自动输出语句的结果。例如：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice how this time after you type in your name and press ENTER, the program
    doesn’t automatically display your input. To see the saved input, just pass the
    variable `name` as an argument to the `print()` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次在你输入名字并按下ENTER键后，程序不会自动显示你的输入。要查看已保存的输入，只需将变量`name`作为参数传递给`print()`函数：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Awesome! Now you’ve stored your input in a variable and printed the variable’s
    value. This is very handy because it lets you get input from the user to use anywhere
    in your program. Let’s use this technique to write chat messages to the Minecraft
    chat!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你已经把输入存储在一个变量中并打印了变量的值。这非常方便，因为它允许你从用户那里获取输入，并在程序的任何地方使用它。让我们使用这种技巧来将聊天消息写入Minecraft的聊天中！
- en: '**MISSION #12: WRITE YOUR OWN CHAT MESSAGE**'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #12：编写你自己的聊天消息**'
- en: 'Let’s make the chat more interactive! You can use the Python shell to write
    a message in Minecraft chat, as you did in [Mission #11](ch04.html#ch04lev2sec01).
    In this mission, we’ll write a slightly different program that saves the string
    you want to post to the chat in a variable named `message`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们让聊天变得更具互动性！你可以像在[任务 #11](ch04.html#ch04lev2sec01)中一样，使用Python Shell在Minecraft聊天中写一条消息。在这个任务中，我们将编写一个稍微不同的程序，将你想发布到聊天的字符串保存在一个名为`message`的变量中。'
- en: '[Listing 4-2](ch04.html#ch4ex2) will get you started. Copy it into a new file
    in IDLE and save it as *messageInput.py* in your *strings* folder.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 4-2](ch04.html#ch4ex2)会帮你入门。将它复制到IDLE中的新文件，并将文件保存为*messageInput.py*，保存在你的*strings*文件夹中。'
- en: '*messageInput.py*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*messageInput.py*'
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 4-2: How to output strings to Minecraft’s chat*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 4-2：如何将字符串输出到Minecraft的聊天中*'
- en: The program stores the message you want to output to chat in the variable `message`
    ➊. In this case, the variable is a string that says `"This is the default message."`
    Then the program passes `message` to the `postToChat()` function ➋, which outputs
    the string to the Minecraft chat.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将你想输出到聊天的消息存储在变量`message` ➊中。在这种情况下，变量是一个字符串，内容是`"This is the default message."`。然后，程序将`message`传递给`postToChat()`函数
    ➋，该函数将该字符串输出到Minecraft聊天。
- en: In this program, the string is hardcoded, meaning it will be the same every
    time the program runs. But with a single change, you can make it print whatever
    the user writes! In other words, you can write your own custom messages every
    time you run the program. You’ll create your very own chat program.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，字符串是硬编码的，这意味着每次运行程序时它都是相同的。但通过一个简单的修改，你可以让它打印用户输入的任何内容！换句话说，你每次运行程序时都可以编写自己的自定义消息。你将创建属于你自己的聊天程序。
- en: 'To make the program accept input, replace the string `"This is the default
    message."` ➊ with the `input()` function. Give the `input()` function an argument,
    such as `"Enter your message: "`. Remember to put this string inside the `input()`
    function’s parentheses! After you’ve made the changes to the program, run it.
    You should see a prompt in the Python shell displaying `"Enter your message: "`.
    Enter your message and press ENTER. The message displays in the shell and in the
    Minecraft chat, as shown in [Figure 4-2](ch04.html#ch4fig2).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '为了让程序接受输入，将字符串`"This is the default message."` ➊替换为`input()`函数。给`input()`函数一个参数，比如`"Enter
    your message: "`。记得把这个字符串放在`input()`函数的括号内！在你做完这些修改后，运行程序。你应该会看到Python Shell中出现一个提示符，显示`"Enter
    your message: "`。输入你的消息并按ENTER键。消息会显示在shell中，并且会出现在Minecraft的聊天中，如[图 4-2](ch04.html#ch4fig2)所示。'
- en: '![image](graphics/f04-02.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-02.jpg)'
- en: '*Figure 4-2: When I enter a message in the IDLE shell, it’s posted to Minecraft’s
    chat.*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-2：当我在IDLE shell中输入消息时，它会被发布到Minecraft的聊天中。*'
- en: Now your program lets you write a message to display to chat, instead of you
    having to write the message in your program. See how much easier it is to chat
    using input?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的程序允许你写一条消息来显示在聊天框中，而不是你需要在程序中编写消息。看看使用输入功能聊天是不是更轻松了？
- en: '**BONUS OBJECTIVE: MORE MESSAGES**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：更多消息**'
- en: The program asks for one message, but can you figure out how to make it ask
    for one message, wait a few seconds (using the `sleep()` function), and then ask
    for a second message?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序会要求输入一条消息，但你能否想出如何让它先要求输入一条消息，等待几秒钟（使用 `sleep()` 函数），然后再要求输入第二条消息呢？
- en: '**JOINING STRINGS**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**连接字符串**'
- en: Often, you’ll need to print a combination of strings. This is called joining,
    or *concatenating*, strings, and Python makes it easy.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要打印字符串的组合。这叫做字符串的拼接，或者 *连接*，Python 让它变得非常简单。
- en: 'In [Chapter 3](ch03.html#ch03) we used the addition operator (`+`) to add numbers,
    but you can also use it to concatenate strings. For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第3章](ch03.html#ch03)中，我们使用加法运算符（`+`）来加法运算数字，但你也可以用它来连接字符串。例如：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of `print()` will be `"CharlesChristopher"`. If you want a space
    character between the values, you can add a space by using the addition operator
    like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()` 的输出将是 `"CharlesChristopher"`。如果你希望在值之间加一个空格，可以使用加法运算符来添加空格，像这样：'
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Python often provides multiple ways to achieve the same result. In this case,
    you could use a comma to create the space instead:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python 经常提供多种方法来实现相同的结果。在这种情况下，你也可以使用逗号来创建空格：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Both of these statements will output `"Charles Christopher"`. You can concatenate
    hardcoded strings with variables that happen to be strings too. Just write the
    value like you would write any other string:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条语句都会输出 `"Charles Christopher"`。你还可以将硬编码的字符串与变量连接在一起，即使这些变量本身就是字符串。只需像写任何其他字符串一样写出值：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will output `"His name is Charles Christopher"`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出 `"His name is Charles Christopher"`。
- en: Putting together blocks of text is useful, but sometimes you’ll want to join
    strings to another data type, like an integer. Python will not let you concatenate
    a string with an integer; in this case, you need to tell Python to first convert
    the integer to a string. Let’s try it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本块拼接起来很有用，但有时候你可能需要将字符串与其他数据类型（如整数）连接在一起。Python 不允许你将字符串与整数拼接；在这种情况下，你需要告诉
    Python 首先将整数转换为字符串。我们来试试看。
- en: '**CONVERTING NUMBERS TO STRINGS**'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将数字转换为字符串**'
- en: 'Converting one variable type to another is handy. For example, imagine you
    store the number of golden apples you have, which is an integer, in a variable
    called `myGoldenApples`. You want to brag to your friends about how many golden
    apples you have, because they’re rare and you like to brag. You could print a
    message like `"My not-so-secret golden apple stash: "`, followed by the value
    stored in `myGoldenApples`. But before you can include the value of `myGoldenApples`
    in the printed message, you have to tell Python to change the integer in `myGoldenApples`
    to a string.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '将一种变量类型转换为另一种变量类型是很有用的。例如，假设你将拥有的金苹果数量存储在名为 `myGoldenApples` 的变量中，它是一个整数。你想向朋友们炫耀你有多少个金苹果，因为它们很稀有，而你又喜欢炫耀。你可以打印一条类似
    `"My not-so-secret golden apple stash: "` 的消息，后面跟上 `myGoldenApples` 中存储的值。但在将
    `myGoldenApples` 的值包含到打印消息中之前，你必须告诉 Python 将 `myGoldenApples` 中的整数转换为字符串。'
- en: The `str()` function converts non-string data types, like integers and floats,
    into strings. To convert to a string, put the value you want to convert inside
    the parentheses of the `str()` function.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`str()` 函数将非字符串数据类型（如整数和浮点数）转换为字符串。要进行转换，只需将你想转换的值放入 `str()` 函数的括号内。'
- en: 'Let’s go back to your golden apple stash. Say you’ve set `myGoldenApples` to
    2, and you want Python to treat that 2 as a string instead of an integer. Here’s
    how you’d print your message:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到你的金苹果储藏问题。假设你已经将 `myGoldenApples` 设置为 2，并且你希望 Python 将这个 2 作为字符串而不是整数处理。你可以这样打印你的消息：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This statement outputs the string `"My not-so-secret golden apple stash: 2"`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '这条语句会输出字符串 `"My not-so-secret golden apple stash: 2"`。'
- en: You can convert floats to strings as well. Say you ate half a golden apple,
    and now `myGoldenApples` stores 1.5 apples. `str(myGoldenApples)` works the same
    on the 1.5 as it did on the 2\. It converts 1.5 to a string so you can include
    it in your message.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将浮点数转换为字符串。比如说你吃了一半的金苹果，现在 `myGoldenApples` 存储了 1.5 个苹果。`str(myGoldenApples)`
    对 1.5 的处理方式与对 2 的处理方式相同。它将 1.5 转换为字符串，以便你可以将其包含在消息中。
- en: After you’ve converted numbers to strings, you can concatenate them however
    you like. Let’s have some fun turning numbers into strings and concatenating them!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将数字转换为字符串后，可以按你喜欢的方式进行连接。让我们来玩转数字与字符串的转换，并将它们连接起来吧！
- en: '**CONCATENATING INTEGERS AND FLOATS**'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接整数和浮点数**'
- en: If you want to concatenate two pieces of data, they must be strings. But the
    plus sign is used for both addition and concatenation, so if you’re concatenating
    integers, floats, and other numbers, Python will try to add them instead. You
    must change number values to strings in order to join them using concatenation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想连接两块数据，它们必须是字符串。但加号既用于加法也用于连接，因此，如果你在连接整数、浮点数和其他数字时，Python会尝试将它们相加。你必须将数字值转换为字符串，才能通过连接将它们连接在一起。
- en: 'To join two numbers instead of adding them, just use the `str()` method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接两个数字，而不是相加，只需使用`str()`方法：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Because you told Python to treat the numbers 19 and 84 as strings and concatenate
    them, this statement outputs `1984` instead of `103`, the sum of 19 and 84.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你告诉Python将数字19和84视为字符串并连接它们，这条语句输出了`1984`，而不是19和84的和`103`。
- en: 'You can use concatenation as many times as you want within a statement. For
    example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在语句中多次使用连接。例如：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This line of code outputs `The year is 1984`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码输出`The year is 1984`。
- en: Now that you have a bit of practice using concatenation, let’s put your new
    skills to the test in the next mission!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一些使用连接的练习，让我们在下一个任务中考验一下你的新技能！
- en: '**MISSION #13: ADD USERNAMES TO CHAT**'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #13: 向聊天添加用户名**'
- en: 'When you’re playing a game with more than two people, it can be confusing to
    figure out who is writing a message in Minecraft chat. The obvious solution is
    to include the user’s name at the start of their message. In this mission, you’ll
    modify the program from [Mission #12](ch04.html#ch04lev2sec02) to include a username
    for all messages sent to chat.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你和两个人以上一起玩游戏时，可能会很难搞清楚谁在Minecraft聊天中写消息。显而易见的解决方法是，在他们的消息开头包含用户名。在这个任务中，你将修改[任务#12](ch04.html#ch04lev2sec02)中的程序，以便为所有发送到聊天的消息添加用户名。
- en: 'Open *messageInput.py* in IDLE and save it as a new file called *userChat.py*
    in the *strings* folder. Then add code to take in the user’s name as input before
    taking in their message. The message posted to chat should be in the following
    format: `"Anna: I need TNT."` You’ll need to use concatenation to accomplish this
    mission.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '在IDLE中打开*messageInput.py*并将其另存为名为*userChat.py*的新文件，保存在*strings*文件夹中。然后，添加代码在接收消息之前获取用户的姓名作为输入。发送到聊天的消息应该按以下格式显示：`"Anna:
    I need TNT."` 你需要使用连接来完成这个任务。'
- en: 'In the program, find this line of code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中，找到这一行代码：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'On the line above it, you need to add another variable called `username` and
    set its value to `input("Please enter a username: ")`. After you’ve added the
    `username` variable, find this line:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面那行代码中，你需要添加另一个变量，命名为`username`，并将其值设置为`input("请输入用户名: ")`。在添加了`username`变量后，找到这一行：'
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using concatenation, join the `username` and `message` strings inside the `postToChat()`
    function. Add `": "` between the two strings so the output has a colon and a space
    between the `username` variable and the `message` variable. [Figure 4-3](ch04.html#ch4fig3)
    shows what the output of the finished program should look like.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '使用连接，将`username`和`message`字符串在`postToChat()`函数内连接起来。在这两个字符串之间添加`": "`，使输出在`username`变量和`message`变量之间有一个冒号和一个空格。[图4-3](ch04.html#ch4fig3)展示了完成程序后应该显示的输出。'
- en: '![image](graphics/f04-03.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-03.jpg)'
- en: '*Figure 4-3: Now when I post to chat using my program, it displays my username.*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-3：现在，当我通过我的程序发布聊天消息时，它会显示我的用户名。*'
- en: Save your updated program and run it. In the Python shell you will be asked
    to enter a username. Type your name and press ENTER. Then you’ll be prompted to
    write a message, so do that as well. Your username and message should be displayed
    in Minecraft chat.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的更新程序并运行它。在Python shell中，你将被要求输入用户名。输入你的名字并按下ENTER。然后，你将被提示写一条消息，完成后，用户名和消息应显示在Minecraft聊天中。
- en: '**BONUS OBJECTIVE: A USER WITHOUT A NAME**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：没有名字的用户**'
- en: What happens if you leave the username blank and press ENTER? Why do you think
    this is?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你留空用户名并按下ENTER，会发生什么？你认为这是为什么？
- en: '**CONVERTING STRINGS TO INTEGERS WITH INT()**'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用INT()将字符串转换为整数**'
- en: Like the `str()` function, which converts non-string data types into strings,
    the `int()` function converts non-integer data types into integers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与将非字符串数据类型转换为字符串的`str()`函数类似，`int()`函数将非整数数据类型转换为整数。
- en: The `int()` function is useful when used with the `input()` function. The `input()`
    function returns the user input as a string, but you’ll often want to use this
    input in math operations. To do that, you’ll first have to convert the input to
    an integer type using `int()`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`int()`函数在与`input()`函数一起使用时非常有用。`input()`函数将用户输入返回为字符串，但你通常希望在数学运算中使用这个输入。为此，你首先需要使用`int()`将输入转换为整数类型。'
- en: 'Here’s how it works. Suppose we have already assigned an integer value to a
    variable called `cansOfTunaPerCat`, and we want a program that tells us how much
    tuna gets eaten, depending on the number of cats the user has. Here’s an example
    of a program we could write:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理。假设我们已经为一个名为`cansOfTunaPerCat`的变量分配了一个整数值，我们需要一个程序来告诉我们根据用户拥有的猫的数量，吃掉了多少金枪鱼。下面是我们可以编写的程序示例：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can do the same thing in a single line by putting one function inside the
    other:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将一个函数嵌套在另一个函数里，在一行代码中完成相同的操作：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now that you know how to convert input into an integer, you can use it to input
    block types into Minecraft programs.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何将输入转换为整数，你可以使用它在Minecraft程序中输入方块类型。
- en: '**MISSION #14: CREATE A BLOCK WITH INPUT**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务#14：使用输入创建一个方块**'
- en: There are tons of block types in Minecraft. Although you can choose lots of
    blocks in creative mode, many others cannot be used. However, the Python API for
    Minecraft gives you access to all of the block types and lets you set them using
    the `setBlocks()` function.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Minecraft》中有大量的方块类型。虽然在创意模式下你可以选择很多方块，但许多方块是无法使用的。然而，Minecraft的Python API允许你访问所有方块类型，并使用`setBlocks()`函数来设置它们。
- en: You’ve used the `setBlocks()` function before, but you had to hardcode the block
    type into your program. This means you couldn’t change it while your program was
    running. Now you can use the `input()` function. By writing a program that accepts
    input, every time you run the program you can choose the type of block you want
    to create. You could create a wool block the first time you run the program, then
    create iron ore the second time.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前使用过`setBlocks()`函数，但你必须将方块类型硬编码到程序中。这意味着你无法在程序运行时更改它。现在，你可以使用`input()`函数。通过编写一个接受输入的程序，每次运行程序时，你都可以选择想要创建的方块类型。你可以在第一次运行程序时创建一个羊毛方块，第二次运行时创建铁矿石。
- en: In this mission, you’ll write a program that lets your user decide which kind
    of block they want to set. Copy [Listing 4-3](ch04.html#ch4ex3) into a new file
    and save it as *blockInput.py* in your *strings* folder.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你将编写一个程序，让用户决定他们想设置哪种方块。将[清单4-3](ch04.html#ch4ex3)复制到一个新文件中，并将其保存为*blockInput.py*，放在你的*strings*文件夹中。
- en: '*blockInput.py*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*blockInput.py*'
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*Listing 4-3: Code to set a block at the player’s position*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单4-3：在玩家位置设置方块的代码*'
- en: This program sets a block at the player’s current position. Change it so the
    `blockType` variable is set using the `input()` function ➊. I suggest including
    a question or other text prompt so the user knows to type a block number, not
    some other kind of input. If you don’t include a prompt, IDLE will just wait on
    a blank line until the user enters something, and you want to make it clear that
    the program needs a number from the user.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序会在玩家当前的位置设置一个方块。请将其修改为使用`input()`函数来设置`blockType`变量➊。我建议包括一个问题或其他文本提示，以便用户知道应该输入方块编号，而不是其他类型的输入。如果没有提示，IDLE会一直等待空白行，直到用户输入内容，你需要让用户清楚程序需要一个数字输入。
- en: 'Recall that `input()` returns your input as a string, and in order for it to
    input the value as an integer, you need to use the `int()` function. The expression
    to collect input for the block type should look like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，`input()`将你的输入作为字符串返回，为了将其作为整数输入，你需要使用`int()`函数。获取方块类型输入的表达式应该像这样：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save your modified program, run it, and enter any block number you like. [Figure
    4-4](ch04.html#ch4fig4) shows the result of the program.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 保存修改后的程序，运行它，并输入你喜欢的任意方块编号。[图4-4](ch04.html#ch4fig4)展示了程序的结果。
- en: '![image](graphics/f04-04.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-04.jpg)'
- en: '*Figure 4-4: I can now create whichever block I want!*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-4：我现在可以创建我想要的任何方块了！*'
- en: '**BONUS OBJECTIVE: MORE INTERACTIVE GAMES**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：更多互动游戏**'
- en: You can use as many inputs in the program as you want. At the moment, the program
    creates the block at the player’s current position. Work out how you’d set the
    `x`, `y`, and `z` variables using input. If you’re feeling really adventurous,
    try teleporting the player to specific coordinates using input.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在程序中使用任意数量的输入。目前，程序会在玩家的当前位置创建一个方块。想一想如何通过输入设置`x`、`y`和`z`变量。如果你感觉非常冒险，可以尝试通过输入将玩家传送到特定坐标。
- en: '**BOUNCE BACK FROM ERRORS**'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从错误中恢复**'
- en: Python uses *exception handling* to make sure your program can recover from
    errors and continue running when they occur. For example, exception handling is
    one way to manage incorrect user input.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Python使用*异常处理*确保你的程序在发生错误时能够恢复并继续运行。例如，异常处理是管理不正确用户输入的一种方式。
- en: Say your program requested an integer, but the user entered a string. Normally,
    the program would display an error message, which is also called *throwing an
    exception*, and then stop running.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的程序要求输入一个整数，但用户输入了一个字符串。通常，程序会显示一个错误信息，这也叫做*抛出异常*，然后停止运行。
- en: 'With exception handling, you can manage that error yourself: you can keep the
    program running smoothly, display a useful error message to the user—such as `"Please
    enter a number instead"`—and give them a chance to fix their problem without restarting
    the program.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过异常处理，你可以自己管理这个错误：你可以保持程序平稳运行，向用户显示有用的错误信息——比如`"Please enter a number instead"`——并给他们一个修复问题的机会，而无需重新启动程序。
- en: A `try-except` statement is one tool you can use to handle errors. It is particularly
    good for providing useful feedback to the user when they enter incorrect input,
    and it can prevent your program from stopping when an error occurs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`try-except`语句是你可以用来处理错误的一种工具。它特别适用于在用户输入错误时向用户提供有用的反馈，并且能够防止程序在发生错误时停止运行。'
- en: 'The statement is made up of two parts: the `try` and the `except`. The first
    part, `try`, is the code you want to run if no errors occur. This code might take
    input or print a string. The `except` part of the statement will run only if an
    error occurs in the `try` part.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句由两部分组成：`try`和`except`。第一部分`try`是你希望在没有发生错误时运行的代码。这段代码可能会获取输入或打印字符串。如果`try`部分发生错误，`except`部分的代码才会执行。
- en: 'Imagine a bit of code that asks you how many pairs of sunglasses you own (I
    own three pairs):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一段代码问你有多少副太阳镜（我有三副）：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This program requires a number. If you enter letters or symbols, it will print
    `"Invalid input: please enter a number"`. The error occurs because the `int()`
    function can only convert strings that contain only integers ➊. If you enter a
    number, the code will work, but if you enter something that isn’t a number, like
    `many sunglasses`, this input will cause an error in the `int()` function.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '这个程序需要一个数字。如果你输入字母或符号，它会打印`"Invalid input: please enter a number"`。发生错误的原因是`int()`函数只能转换仅包含整数的字符串➊。如果你输入一个数字，代码会正常工作，但如果你输入不是数字的内容，比如`many
    sunglasses`，这种输入会导致`int()`函数出错。'
- en: By the way, did you notice anything different about this bit of code? It is
    our first time using a statement that calls for *indentation*, which is when you
    type several spaces *before* typing any text. I’ll discuss indentation more when
    I cover `if` statements in [Chapter 6](ch06.html#ch06) and `for` loops in [Chapters
    7](ch07.html#ch07) and [9](ch09.html#ch09). For now, just make sure you type your
    code exactly as it appears in this book.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便问一下，你有没有注意到这段代码有什么不同？这是我们第一次使用需要*缩进*的语句，缩进就是在输入任何文本之前输入若干个空格。当我在[第6章](ch06.html#ch06)讲解`if`语句和在[第7章](ch07.html#ch07)与[第9章](ch09.html#ch09)讲解`for`循环时，我会详细讨论缩进。现在，只要确保你按照本书中的样例输入代码。
- en: 'Usually when an error occurs, Python shows a message that is difficult to understand
    and doesn’t clearly tell the user how to fix the problem. But with `try-except`,
    you can stop Python’s error messages from being displayed to the user when they
    enter the wrong type of data; instead, you can give the user simple, helpful instructions
    on what to do. Sometimes the user will just press ENTER instead of entering input.
    Normally, this creates an error, but with the code inside the `try-except` statement
    ➊, the string `"Invalid input: please enter a number"` will be printed instead
    ➋.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，当发生错误时，Python会显示一个难以理解的消息，并且不会清楚地告诉用户如何修复问题。但使用`try-except`语句，你可以阻止Python错误消息在用户输入错误类型的数据时显示，而是给用户提供简单、易懂的指引。
    有时用户可能会直接按下ENTER键，而不是输入内容。通常这会导致错误，但通过`try-except`语句中的代码➊，程序会改为在聊天框中打印出`"Invalid
    input: please enter a number"` ➋。'
- en: You can put almost any code inside a `try-except` statement, even other `try-except`
    statements. Try it out in the next mission!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将几乎任何代码放入`try-except`语句中，甚至是其他的`try-except`语句。下一任务中试试看！
- en: '**MISSION #15: ONLY NUMBERS ALLOWED**'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #15：仅允许数字**'
- en: 'Remember the program you wrote in [Mission #14](ch04.html#ch04lev2sec06)? When
    you entered an integer value, the program worked exactly as it was supposed to
    and created a block. But if you entered a string, the program would stop working
    and show an error, as shown in [Figure 4-5](ch04.html#ch4fig5).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '记得你在[任务 #14](ch04.html#ch04lev2sec06)中写的程序吗？当你输入一个整数值时，程序按预期工作并创建了一个区块。但如果你输入一个字符串，程序就会停止工作并显示错误，如[图
    4-5](ch04.html#ch4fig5)所示。'
- en: '![image](graphics/f04-05.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-05.jpg)'
- en: '*Figure 4-5:* `cake` *is not a number, so the program did not create a block.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-5:* `cake` *不是一个数字，因此程序没有创建区块。*'
- en: This error message makes sense when you’re used to Python. But what if someone
    who had never used Python before tried to enter a string instead of an integer?
    They’d get an error message they wouldn’t understand. Your mission is to use error
    handling to write a message that’s easy to understand.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误消息对于习惯Python的人来说是有意义的。但如果一个从未使用过Python的人试图输入一个字符串而不是整数呢？他们会看到一个他们无法理解的错误消息。你的任务是使用错误处理编写一个容易理解的消息。
- en: 'Open the program *blockInput.py* that you created in [Mission #14](ch04.html#ch04lev2sec06).
    Save the program as *blockInputFix.py* in the *strings* folder.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '打开你在[任务 #14](ch04.html#ch04lev2sec06)中创建的程序*blockInput.py*。将该程序保存为*blockInputFix.py*，并放入*strings*文件夹中。'
- en: 'You’ll change the program so it uses a `try-except` statement when it asks
    for a block number. Find the last line of code in the program. It should look
    like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你将修改程序，使它在要求输入区块编号时使用`try-except`语句。找到程序中的最后一行代码，它应该像这样：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add a `try` statement on the line above this one and add four spaces at the
    start of the line before the `mc.setBlock()` function. Next, on the line above
    `setBlock()`, add this code to get an input from the user: `blockType = int(input("Enter
    a block type: "))`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '在这一行上方添加一个`try`语句，并在`mc.setBlock()`函数之前的行首加上四个空格。接下来，在`setBlock()`上方的那一行，添加以下代码来获取用户的输入：`blockType
    = int(input("Enter a block type: "))`。'
- en: 'Then, on the line just after the `setBlock()` function, write an `except` statement.
    Inside the `except` statement add a line of code that posts a message to the Minecraft
    chat to say that the block type must be a number; for example, `"You didn''t enter
    a number! Enter a number next time."`. Here’s what the changed code should look
    like (notice the four spaces, or indentation, at the start of lines ➊ and ➋):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`setBlock()`函数后的那一行，写一个`except`语句。在`except`语句内部，添加一行代码，在Minecraft聊天框中发布一条信息，说明区块类型必须是一个数字；例如，`"You
    didn't enter a number! Enter a number next time."`。下面是修改后的代码应该是什么样子（注意行➊和➋开始时的四个空格或缩进）：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `int()` function expects to convert the input entered by the user into an
    integer ➊. Because we’ve added the `try-except` statement to the program, if the
    user enters input that contains something that isn’t a number (such as letters
    or symbols), an error will occur. Instead of displaying the normal Python error
    message, the program will output a string to the chat asking the user to enter
    only a number ➋. You might want to change the chat message so it’s a bit more
    polite!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`int()`函数期望将用户输入的内容转换为整数➊。由于我们已将`try-except`语句添加到程序中，如果用户输入的内容包含非数字（如字母或符号），将会发生错误。程序不会显示通常的Python错误消息，而是将一条请求用户只输入数字的消息输出到聊天框➋。你可能想把这个聊天消息改得更礼貌一些！'
- en: When you’re finished entering a friendlier error message, save the *blockInputFix.py*
    file, and run it to admire your handiwork. The result should look something like
    [Figure 4-6](ch04.html#ch4fig6).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成输入一个更友好的错误信息后，保存 *blockInputFix.py* 文件，并运行它以欣赏你的成果。结果应该类似于[图 4-6](ch04.html#ch4fig6)。
- en: '![image](graphics/f04-06.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-06.jpg)'
- en: '*Figure 4-6: The error message shown in the chat is much easier to understand.*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-6：聊天中显示的错误信息更加易于理解。*'
- en: '**MISSION #16: SPRINT RECORD**'
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #16：冲刺记录**'
- en: 'This chapter’s final mission combines everything you’ve learned about variables
    ([Chapter 2](ch02.html#ch02)) and math operators ([Chapter 3](ch03.html#ch03))
    with posting messages to the chat. Your task is to create a record keeper: the
    program will work out how far the player travels in 10 seconds and display the
    results in the chat.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最终任务将你在变量（[第 2 章](ch02.html#ch02)）和数学运算符（[第 3 章](ch03.html#ch03)）方面学到的所有知识与向聊天发送消息结合起来。你的任务是创建一个记录保持器：程序将计算玩家在
    10 秒内的行驶距离，并在聊天中显示结果。
- en: 'Remember that you can use the following code to make your programs wait, or
    sleep, a certain number of seconds:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以使用以下代码让程序暂停，或者让程序“睡眠”一段时间（按秒计）：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use this `sleep()` example and type in the following code to get started with
    this new program:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 `sleep()` 示例，输入以下代码来开始这个新程序：
- en: '*sprint.py*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*sprint.py*'
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let’s break down this code. The program gets the player’s starting position
    ➊, waits 10 seconds, and then gets the player’s finishing position at ➋. To finish
    the program, you need to work out the difference between the starting and finishing
    positions. To do this, set the values of the `yDistance` and `zDistance` variables,
    which start at ➌. To help you out, I’ve included the value of the `xDistance`
    variable, which should be `x2 – x1`. The values of the `yDistance` and `zDistance`
    variables should be similar to this, but use different variables instead of `x1`
    and `x2`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解这段代码。程序获取玩家的起始位置 ➊，等待 10 秒，然后获取玩家的结束位置 ➋。要完成程序，你需要计算起始位置和结束位置之间的差距。为此，设置
    `yDistance` 和 `zDistance` 变量的值，它们从 ➌ 开始。为了帮助你，我还提供了 `xDistance` 变量的值，应该是 `x2 –
    x1`。`yDistance` 和 `zDistance` 变量的值应该与此类似，不过请使用不同的变量而不是 `x1` 和 `x2`。
- en: 'On the last line, output the results to the Minecraft chat ➍. The results should
    be in the following format: `"The player has moved x: 10, y: 6, and z: -3"`. Use
    strings, concatenation, and the values of `xDistance`, `yDistance`, and `zDistance`
    variables to do this.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '在最后一行，将结果输出到 Minecraft 聊天中 ➍。结果应该以以下格式显示：`"玩家已移动 x: 10, y: 6, z: -3"`。使用字符串、连接符以及
    `xDistance`、`yDistance` 和 `zDistance` 变量的值来实现这一点。'
- en: Save this program in the *strings* folder as *sprint.py* and run it. [Figure
    4-7](ch04.html#ch4fig7) shows the result of the program.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个程序保存在 *strings* 文件夹中，命名为 *sprint.py* 并运行它。[图 4-7](ch04.html#ch4fig7)显示了程序的运行结果。
- en: '![image](graphics/f04-07.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f04-07.jpg)'
- en: '*Figure 4-7: The distance I traveled is displayed when the program finishes.*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-7：程序完成后，我行驶的距离被显示出来。*'
- en: If you have the program running but you’re finding it difficult to switch between
    the command line and Minecraft fast enough, try adding a three-second countdown
    before step 2\. Post this countdown to the chat.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在运行程序，但发现自己在命令行和 Minecraft 之间切换不够快，可以尝试在步骤 2 前加入一个三秒钟的倒计时。将这个倒计时发送到聊天中。
- en: '**BONUS OBJECTIVE: AS THE CROW FLIES**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：直线飞行**'
- en: 'At this point, the program displays the distance traveled along each axis separately:
    the x direction, the y direction, and the z direction. How would you create and
    display the distance traveled as a single integer, that is, as the crow flies?
    Hint: You’ll need to use trigonometry, specifically the Pythagorean theorem. If
    you’re not sure how to do this now, don’t worry; you’ll see a similar program
    with code to calculate the distance traveled as a single integer in [Mission #40](ch07.html#ch07lev2sec13)
    ([page 141](ch07.html#page_141)).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '此时，程序分别显示了沿各个轴线的行进距离：x 轴、y 轴和 z 轴。你将如何创建并显示总的行驶距离，换句话说，就是“直线飞行”的距离呢？提示：你需要使用三角函数，特别是毕达哥拉斯定理。如果你现在还不确定怎么做，不用担心；你会在[任务
    #40](ch07.html#ch07lev2sec13)（[第 141 页](ch07.html#page_141)）中看到一个类似的程序，其中有计算总行驶距离的代码。'
- en: '**WHAT YOU LEARNED**'
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: Congratulations! You’ve learned a lot in this chapter. You created strings,
    displayed strings using print statements, and joined them using concatenation.
    You wrote programs that accept user input, changed the data types of values, and
    handled exceptions. Along the way, you applied your Python knowledge to make your
    Minecraft chat more lively.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你在本章学到了很多内容。你创建了字符串，使用打印语句显示字符串，并通过连接操作将它们合并。你编写了能够接收用户输入的程序，改变了值的数据类型，并处理了异常。在此过程中，你将你的
    Python 知识应用到使 Minecraft 聊天更加生动。
- en: In [Chapter 5](ch05.html#ch05), you’ll learn how to control the flow of the
    program and tell your programs how to make decisions.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html#ch05)，你将学习如何控制程序的流程，并告诉你的程序如何做出决策。
