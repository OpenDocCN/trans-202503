- en: Chapter 6. Turning the Tables for Proactive Defense
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章：为主动防御翻盘
- en: '![Turning the Tables for Proactive Defense](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![为主动防御翻盘](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
- en: In the previous chapter, you saw how you might need to spend considerable time
    and energy making sure that the services you want to offer will be available even
    when you have strict packet filtering in place. Now, with your working setup in
    place, you’ll soon notice that some services tend to attract a little more unwanted
    attention than others.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你了解了如何确保即使在严格的包过滤规则下，你希望提供的服务仍然可以使用，并且需要花费大量时间和精力来完成。现在，在你的工作设置完成后，你很快就会注意到，一些服务可能比其他服务更容易吸引不必要的注意。
- en: 'Here’s the scenario: You have a network with packet filtering to match your
    site’s needs, including some services that need to be accessible to users from
    elsewhere. Unfortunately, when services are available, there’s a risk that someone
    will want to exploit them for some sort of mischief.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个场景：你有一个网络，配备了与你站点需求相匹配的包过滤，其中包括一些需要向外部用户提供访问的服务。不幸的是，当这些服务可用时，就存在某些人会试图利用它们进行恶作剧的风险。
- en: You’ll almost certainly have remote login via SSH (Secure Shell), as well as
    SMTP email running on your network—both are tempting targets. In this chapter,
    we’ll look at ways to make it harder to gain unauthorized access via SSH, and
    then we’ll turn to some of the more effective ways to deny spammers use of your
    servers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎肯定会通过 SSH（安全外壳协议）进行远程登录，并且你的网络上会运行 SMTP 邮件服务——这两者都是诱人的攻击目标。在本章中，我们将探讨如何通过
    SSH 增加未经授权访问的难度，然后转向一些更有效的方法来阻止垃圾邮件发送者使用你的服务器。
- en: Turning Away the Brutes
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拒绝暴力破解者
- en: The Secure Shell service, commonly referred to as SSH, is a fairly crucial service
    for Unix administrators. It’s frequently the main interface to the machine and
    a favorite target of script kiddie attacks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 安全外壳服务（通常称为 SSH）对于 Unix 系统管理员来说是一个非常重要的服务。它通常是与机器交互的主要接口，也是脚本小子攻击的常见目标。
- en: SSH Brute-Force Attacks
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSH 暴力破解攻击
- en: 'If you run an SSH login service that’s accessible from the Internet, you’ve
    probably seen entries like this in your authentication logs:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行一个可以通过互联网访问的 SSH 登录服务，你可能在身份验证日志中看到了类似这样的条目：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is what a *brute-force attack* looks like. Someone or something is trying
    by brute force to find a username and password combination that lets them get
    into your system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是一个*暴力破解攻击*的样子。某人或某物正试图通过暴力破解找到一个用户名和密码组合，从而让他们进入你的系统。
- en: The simplest response would be to write a *pf.conf* rule that blocks all access,
    but that leads to another class of problems, including how to let people with
    legitimate business on your system access it. Setting up your `sshd` to accept
    only key-based authentication would help but most likely would not stop the kiddies
    from trying. You might consider moving the service to another port, but then again,
    the ones flooding you on port 22 would probably be able to scan their way to port
    22222 for a repeat performance.^([[30](#ftn.ch06fn01)])
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的应对方式是编写一个*pf.conf*规则，阻止所有访问，但这会导致另一类问题，包括如何让合法用户访问系统。将你的`sshd`配置为只接受基于密钥的身份验证有帮助，但很可能无法阻止小白攻击者尝试。你可以考虑将服务移到另一个端口，但这又会带来问题，可能会导致那些在
    22 端口向你发起攻击的攻击者通过扫描轻松找到 22222 端口，再次进行攻击。^([[30](#ftn.ch06fn01)])
- en: Since OpenBSD 3.7 (and equivalents), PF has offered a slightly more elegant
    solution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从 OpenBSD 3.7（及其等效版本）开始，PF 提供了一个稍微更优雅的解决方案。
- en: Setting Up an Adaptive Firewall
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置自适应防火墙
- en: 'To thwart brute-force attacks, you can write your `pass` rules so they maintain
    certain limits on what connecting hosts can do. For good measure, you can banish
    violators to a table of addresses to which you deny some or all access. You can
    even choose to drop all existing connections from machines that overreach your
    limits. To enable this feature, first set up the table by adding the following
    line to your configuration before any filtering rules:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止暴力破解攻击，你可以编写你的`pass`规则，限制连接主机的某些行为。为了更好地防范，你可以将违规者驱逐到一个地址表中，拒绝对这些地址的某些或全部访问。你甚至可以选择断开所有来自超出限制机器的现有连接。要启用此功能，首先通过在任何过滤规则之前将以下行添加到配置中来设置表：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, early in your rule set, `block` brute forcers, as shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在规则集的前面，`block`暴力破解者，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, add your `pass` rule:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加你的`pass`规则：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This rule is very similar to what you’ve seen in earlier examples. The interesting
    part in this context is the contents of the parentheses, called *state-tracking
    options*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则与你之前看到的例子非常相似。此处有趣的部分是括号内的内容，称为*状态跟踪选项*：
- en: '`max-src-conn` is the number of simultaneous connections allowed from one host.
    In this example, it’s set to `100`. You may want a slightly higher or lower value,
    depending on your network’s traffic patterns.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-src-conn`是允许来自单一主机的最大并发连接数。在这个例子中，它被设置为`100`。你可能需要根据网络的流量模式稍微调高或降低这个值。'
- en: '`max-src-conn-rate` is the rate of new connections allowed from any single
    host. Here, it’s set to `15` connections per 5 seconds, denoted as `15/5`. Choose
    a rate that suits your setup.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-src-conn-rate`是允许来自任何单一主机的新连接速率。在此，它被设置为`15`个连接每5秒，表示为`15/5`。选择一个适合你配置的速率。'
- en: '`overload <bruteforce>` means that the address of any host that exceeds the
    preceding limits is added to the table `bruteforce`. Our rule set blocks all traffic
    from addresses in the `bruteforce` table. Once a host exceeds any of these limits
    and is put in the overload table, the rule no longer matches traffic from that
    host. Make sure that overloaders are handled, if only by a default block rule
    or similar.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overload <bruteforce>`意味着任何超出前述限制的主机地址将被加入到`bruteforce`表中。我们的规则集会阻止所有来自`bruteforce`表中地址的流量。一旦主机超过这些限制并被放入溢出表中，规则将不再匹配来自该主机的流量。确保溢出者被处理，即使只是通过默认的阻止规则或类似的方式。'
- en: '`flush global` says that when a host reaches the limit, all states for its
    connections are terminated (flushed). The `global` option means that for good
    measure, `flush` applies to all states created by traffic from that host, no matter
    which rule created a state.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush global`表示当主机达到限制时，它的所有连接状态将被终止（清除）。`global`选项意味着为了保险起见，`flush`适用于该主机所有由流量创建的状态，无论是哪条规则创建了该状态。'
- en: 'As you can imagine, the effect of this tiny addition to the rule set is dramatic.
    After a few tries, brute forcers end up in the `bruteforce` table. That means
    that all their existing connections are terminated (flushed) and any new attempts
    will be blocked, most likely with `Fatal: timeout before authentication` messages
    at their end. You have created an *adaptive firewall* that adjusts automatically
    to conditions in your network and acts on undesirable activity.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '如你所想，这个小小的规则集修改会产生显著效果。在尝试几次后，暴力破解者会进入`bruteforce`表中。这意味着它们所有现有的连接会被终止（清除），任何新的尝试将被阻止，最可能在它们的端显示`Fatal:
    timeout before authentication`消息。你已经创建了一个*自适应防火墙*，它会根据网络中的条件自动调整并对不良活动作出反应。'
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*These adaptive rules are effective only for protection against the traditional,
    rapid-fire type of brute-force attempts. The low-intensity, distributed password-guessing
    attempts that were first identified as such in 2008 and have been recurring ever
    since (known among other names as* The Hail Mary Cloud*^([[31](#ftn.ch06fn02)]))
    don’t produce traffic that will match these rules.*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些自适应规则仅对防御传统的、快速的暴力破解攻击有效。2008年首次被识别并一直以来不断重复的低强度、分布式密码猜测攻击（又名*The Hail Mary
    Cloud*^([[31](#ftn.ch06fn02)]))，不会产生符合这些规则的流量。*'
- en: 'It’s likely that you will want some flexibility in your rule set and want to
    allow a larger number of connections for some services, but you also might like
    to be a little more tight-fisted when it comes to SSH. In that case, you could
    supplement the general-purpose `pass` rule with something like the following one
    early in your rule set:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望在规则集中有一定的灵活性，为某些服务允许更多的连接，但在SSH方面可能想要更加严格。在这种情况下，你可以在规则集的前面补充一个类似下面的通用`pass`规则：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should be able to find the set of parameters that’s just right for your
    situation by reading the relevant man pages and the *PF User Guide* (see [Appendix A](apa.html
    "Appendix A. Resources")).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该通过阅读相关的手册页和*PF用户指南*（见[附录A](apa.html "附录A. 资源")），找到最适合你情况的参数集。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Remember that these sample rules are intended as illustrations and your network’s
    needs may be better served by different rules. Setting the number of simultaneous
    connections or the rate of connections too low may block legitimate traffic. There’s
    a potential risk of self-inflicted denial of service when the configuration includes
    many hosts behind a common NATing gateway and the users on the NATed hosts have
    legitimate business on the other side of a gateway with strict `overload` rules.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，这些示例规则仅作为说明，可能你的网络需求更适合其他规则。将同时连接数或连接速率设置得过低，可能会阻止合法流量。当配置中有许多主机在一个公共NAT网关后面，而NAT的主机上的用户有合法的业务需要穿越一个有严格`overload`规则的网关时，可能会造成自我引发的拒绝服务风险。*'
- en: 'The state-tracking options and the `overload` mechanism don’t need to apply
    exclusively to the SSH service, and blocking all traffic from offenders isn’t
    always desired. You could, for example, use a rule like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 状态跟踪选项和`overload`机制并不需要仅仅应用于SSH服务，而且并不总是希望阻止所有来自违规者的流量。例如，你可以使用如下规则：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `max` specifies the maximum number of states that can be created for each
    rule with no `overload` to protect a mail or Web service from receiving more connections
    than it can handle (keep in mind that the number of rules loaded depends on what
    the `$mail_services` macro expands to). Once the `max` limit is reached, new connections
    will not match this rule until the old ones terminate. Alternatively, you could
    remove the `max` restriction, add an `overload` part to the rule, and assign offenders
    to a queue with a minimal bandwidth allocation (see the discussion of traffic
    shaping in [Chapter 7](ch07.html "Chapter 7. Traffic Shaping with Queues and Priorities")
    for details on setting up queues).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`max`指定了每条规则可以创建的最大状态数，用于防止邮件或Web服务接收超过其处理能力的连接（请记住，加载的规则数取决于`$mail_services`宏的扩展内容）。一旦达到`max`限制，新的连接将不再匹配该规则，直到旧连接终止。或者，你可以移除`max`限制，给规则添加`overload`部分，并将违规者分配到一个带有最小带宽分配的队列中（有关设置队列的详细信息，请参见[第7章](ch07.html
    "第7章. 带队列和优先级的流量整形")中的流量整形讨论）。
- en: Some sites use `overload` to implement a multitiered system, where hosts that
    trip one `overload` rule are transferred to one or more intermediate “probation”
    tables for special treatment. It can be useful in Web contexts not to block traffic
    from hosts in the overload tables outright but rather to redirect all HTTP requests
    from these hosts to specific Web pages (as in the `authpf` example near the end
    of [Chapter 4](ch04.html "Chapter 4. Wireless Networks Made Easy")).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些站点使用`overload`实现多层次系统，其中触发一个`overload`规则的主机会被转移到一个或多个中间的“试用”表中，进行特别处理。在Web上下文中，不直接阻止来自`overload`表中的主机的流量，而是将这些主机的所有HTTP请求重定向到特定的网页，可能会很有用（就像[第4章](ch04.html
    "第4章. 无线网络简化")末尾的`authpf`示例一样）。
- en: Tidying Your Tables with pfctl
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用pfctl整理你的表
- en: 'With the `overload` rules from the previous section in place, you now have
    an adaptive firewall that automatically detects undesirable behavior and adds
    offenders’ IP addresses to tables. Watching the logs and the tables can be fun
    in the short run, but because those rules only add to the tables, we run into
    the next challenge: keeping the content of the tables up-to-date and relevant.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中设置了`overload`规则后，你现在拥有了一个自适应防火墙，可以自动检测不良行为并将违规者的IP地址添加到表中。观察日志和表格在短期内可能很有趣，但由于这些规则只会向表中添加内容，我们面临下一个挑战：保持表格内容的最新和相关性。
- en: When you’ve run a configuration with an adaptive rule set for a while, at some
    point, you’ll discover that an IP address one of your `overload` rules blocked
    last week due to a brute-force attack was actually a dynamically assigned address,
    which is now assigned to a different ISP customer with a legitimate reason to
    communicate with hosts in your network.^([[32](#ftn.ch06fn03)]) If your adaptive
    rules catch a lot of traffic on a busy network, you may also find that the overload
    tables will grow over time to take up an increasing amount of memory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用适应性规则集运行配置一段时间后，你会发现，上周由于暴力破解攻击而被`overload`规则阻止的某个IP地址，实际上是一个动态分配的地址，而这个地址现在被分配给了另一个ISP客户，该客户有合法的理由与你网络中的主机通信。^([[32](#ftn.ch06fn03)])
    如果你的适应性规则捕获了大量网络流量，你还可能发现，随着时间的推移，`overload`表将不断增长，占用越来越多的内存。
- en: 'The solution is to *expire* table entries—to remove entries after a certain
    amount of time. In OpenBSD 4.1, `pfctl` acquired the ability to expire table entries
    based on the time since their statistics were last reset.^([[33](#ftn.ch06fn04)])
    (In almost all instances, this reset time is equal to the time since the table
    entry was added.) The keyword is `expire`, and the table entry’s age is specified
    in seconds. Here’s an example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是 *过期* 表格条目——在一定时间后移除条目。在 OpenBSD 4.1 中，`pfctl` 获得了根据统计信息上次重置的时间来过期表格条目的能力。^([[33](#ftn.ch06fn04)])（在几乎所有情况下，这个重置时间等于表格条目被添加的时间。）关键词是
    `expire`，并且表格条目的年龄以秒为单位指定。以下是一个示例：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command will remove `bruteforce` table entries that had their statistics
    reset more than 86,400 seconds (24 hours) ago.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将移除 `bruteforce` 表格中，统计信息重置时间超过 86,400 秒（24 小时）以上的条目。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: '*The choice of 24 hours as the expiry time is a fairly arbitrary one. You should
    choose a value that you feel is a reasonable amount of time for any problem at
    the other end to be noticed and fixed. If you have adaptive rules in place, it’s
    a good idea to set up `crontab` entries to run table expiry at regular intervals
    with a command much like the preceding one to make sure your tables are kept up-to-date.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*选择 24 小时作为过期时间是一个相当随意的决定。你应该选择一个你认为合理的时间值，以便任何问题在另一端能够被发现并修复。如果你已经设定了自适应规则，建议设置
    `crontab` 条目以定期运行表格过期命令，类似于前述的命令，以确保你的表格保持最新。*'
- en: Giving Spammers a Hard Time with spamd
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给垃圾邮件发送者制造麻烦，使用 spamd
- en: Email is a fairly essential service that needs special attention due to the
    large volume of unwanted messages, or *spam*. The volume of unsolicited commercial
    messages was already a painful problem when malware makers discovered that email-borne
    worms would work and started using email to spread their payload. During the early
    2000s, the combined volume of spam and email-borne malware had increased to the
    point where running an SMTP mail service without some sort of spam countermeasures
    had become almost unthinkable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件是一个相当重要的服务，需要特别关注，因为它每天都会处理大量的垃圾邮件（*spam*）。当恶意软件开发者发现通过电子邮件传播蠕虫有效并开始使用电子邮件传播恶意载荷时，未经请求的商业邮件数量已经成为一个痛苦的问题。在
    2000 年代初，垃圾邮件和通过电子邮件传播的恶意软件的数量已经增加到，若没有某种反垃圾邮件措施，运行一个 SMTP 邮件服务几乎变得不可想象。
- en: Spam-fighting measures are almost as old as the spam problem itself. The early
    efforts focused on analysis of the messages’ contents (known as *content filtering*)
    and to some extent on interpretation of the messages’ rather trivially forgeable
    headers, such as the purported sender address (`From:`) or the store and forward
    paths of intermediate deliveries recorded in the `Received:` headers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 反垃圾邮件措施几乎与垃圾邮件问题本身一样古老。早期的工作主要集中在分析邮件内容（称为 *内容过滤*），并在一定程度上对邮件的可伪造的头部进行解读，例如所谓的发件人地址（`From:`）或在
    `Received:` 头部记录的中间传递的存储与转发路径。
- en: When the OpenBSD team designed its spam-fighting solution `spamd`, first introduced
    with OpenBSD 3.3 in 2003, the developers instead focused on the network level
    and the immediate communication partner in the SMTP conversations along with any
    available information about hosts that tried to deliver messages. The developers
    set out to create a small, simple, and secure program. The early implementation
    was based almost entirely on creative use of PF tables combined with data from
    trusted external sources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当 OpenBSD 团队设计其反垃圾邮件解决方案 `spamd` 时，首次在 2003 年的 OpenBSD 3.3 中引入，开发者专注于网络层面以及
    SMTP 会话中的直接通信伙伴，并结合任何关于尝试发送邮件的主机的可用信息。开发者的目标是创建一个小巧、简单且安全的程序。早期的实现几乎完全依赖于创意使用
    PF 表格，并结合来自可信外部来源的数据。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: '*In addition to the OpenBSD spam-deferral daemon, the content-filtering-based
    antispam package SpamAssassin* ([http://spamassassin.apache.org/](http://spamassassin.apache.org/))
    *features a program called `spamd`. Both programs are designed to help fight spam,
    but they take very different approaches to the underlying problem and don’t interoperate
    directly. However, when both programs are correctly configured and running, they
    complement each other well.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*除了 OpenBSD 的垃圾邮件延迟守护进程，基于内容过滤的反垃圾邮件软件包 SpamAssassin* ([http://spamassassin.apache.org/](http://spamassassin.apache.org/))
    *还包含一个名为 `spamd` 的程序。两个程序都是为了帮助抵抗垃圾邮件，但它们解决基础问题的方法完全不同，并且不会直接互操作。然而，当这两个程序都被正确配置并运行时，它们能够很好地互补。*'
- en: Network-Level Behavior Analysis and Blacklisting
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络层行为分析与黑名单
- en: The original `spamd` design is based on the observation that spammers send a
    lot of mail and the incredibly small likelihood of you being the first person
    to receive a particular message. In addition, spam is sent via a few spammer-friendly
    networks and numerous hijacked machines. Both the individual messages and the
    machines that send them will be reported to blacklist maintainers quickly, and
    the blacklist data consisting of known spam senders’ IP addresses forms the basis
    for `spamd`’s processing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 `spamd` 设计基于以下观察：垃圾邮件发送者发送大量邮件，而你成为第一个接收到某一特定邮件的人的可能性极小。此外，垃圾邮件通过一些垃圾邮件友好的网络和大量被劫持的机器发送。无论是单个邮件还是发送它们的机器都会很快报告给黑名单维护者，而由已知垃圾邮件发送者的
    IP 地址构成的黑名单数据是 `spamd` 处理的基础。
- en: When dealing with blacklisted hosts, `spamd` employs a method called *tarpitting*.
    When the daemon receives an SMTP connection, it presents its banner and immediately
    switches to a mode where it answers SMTP traffic at the rate of 1 byte per second,
    using a tiny selection of SMTP commands designed to make sure that mail is never
    delivered but rather rejected back into the sender’s queue once the message headers
    have been transferred. The intention is to waste as much time as possible on the
    sending end while costing the receiver pretty much nothing. This specific tarpitting
    implementation with 1-byte SMTP replies is often referred to as *stuttering*.
    Blacklist-based tarpitting with stuttering was the default mode for `spamd` up
    to and including OpenBSD 4.0.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理黑名单中的主机时，`spamd` 使用一种叫做 *tarpitting* 的方法。当守护进程接收到一个 SMTP 连接时，它会展示其横幅并立即切换到一个模式，在该模式下，它以每秒
    1 字节的速度响应 SMTP 流量，使用一小部分 SMTP 命令确保邮件永远不会被投递，而是在邮件头被传输后被拒绝并返回到发送方的队列中。目的是尽可能浪费发送端的时间，同时对接收方几乎没有任何成本。这个特定的
    tarpitting 实现，即每秒 1 字节的 SMTP 回复，通常被称为 *stuttering*（颤抖）。基于黑名单的 tarpitting 和 stuttering
    是 `spamd` 在 OpenBSD 4.0 及之前版本的默认模式。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*On FreeBSD and NetBSD, spamd is not part of the base system but is available
    through ports and packages as* mail/spamd*. If you’re running PF on FreeBSD or
    NetBSD, you need to install the port or package before following the instructions
    over the next few pages.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 FreeBSD 和 NetBSD 上，spamd 不是基础系统的一部分，但可以通过 ports 和 packages 以* mail/spamd*
    的形式获取。如果你在 FreeBSD 或 NetBSD 上运行 PF，你需要先安装该 port 或 package，然后再按照接下来的页面中的指示进行操作。*'
- en: Setting Up spamd in Blacklisting Mode
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在黑名单模式下设置 spamd
- en: To set up `spamd` to run in traditional, blacklisting-only mode, you first put
    a special-purpose table and a matching redirection in *pf.conf* and then turn
    your attention to `spamd`’s own *spamd.conf*. `spamd` then hooks into the PF rule
    set via the table and the redirection.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `spamd` 设置为传统的仅黑名单模式，你首先需要在 *pf.conf* 中添加一个专用的表格和相应的重定向，然后再关注 `spamd` 自身的
    *spamd.conf* 文件。之后，`spamd` 通过该表格和重定向接入 PF 规则集。
- en: 'The following are the *pf.conf* lines for this configuration:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此配置的 *pf.conf* 配置行：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And here is the pre–OpenBSD 4.7 syntax:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 OpenBSD 4.7 之前的语法：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The table, `<spamd>`, is there to store the IP addresses you import from trusted
    blacklist sources. The redirection takes care of all SMTP attempts from hosts
    that are already in the blacklist. `spamd` listens on port 8025 and responds s-l-o-w-l-y
    (1 byte per second) to all SMTP connections it receives as a result of the redirection.
    Later on in the rule set, you would have a rule that makes sure legitimate SMTP
    traffic passes to the mail server. *spamd.conf* is where you specify the sources
    of your blacklist data and any exceptions or local overrides you want.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 `<spamd>` 用于存储你从可信的黑名单源导入的 IP 地址。重定向负责处理所有来自黑名单中已存在主机的 SMTP 尝试。`spamd` 监听端口
    8025，并对它接收到的所有 SMTP 连接进行慢速响应（每秒 1 字节），这是重定向导致的。稍后，在规则集的其他部分，你将会有一个规则，确保合法的 SMTP
    流量通过并传送到邮件服务器。*spamd.conf* 是你指定黑名单数据源以及任何例外或本地覆盖设置的地方。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*On OpenBSD 4.0 and earlier (and by extension, ports based on versions prior
    to OpenBSD 4.1),* spamd.conf *was in* /etc*. Beginning with OpenBSD 4.1,* spamd.
    conf *is found in* /etc/mail *instead. The FreeBSD port installs a sample configuration
    in* /usr/local/etc/spamd/spamd.conf.sample*.*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 OpenBSD 4.0 及之前版本（以及基于 OpenBSD 4.1 之前版本的 ports）中，* spamd.conf *位于* /etc*。从
    OpenBSD 4.1 开始，* spamd.conf *位于* /etc/mail*。FreeBSD port 会在* /usr/local/etc/spamd/spamd.conf.sample*
    中安装一个示例配置文件。*'
- en: 'Near the beginning of *spamd.conf*, you’ll notice a line without a `#` comment
    sign that looks like `all:\`. This line specifies the blacklists you’ll use. Here
    is an example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在*spamd.conf*的开头附近，你会看到一行没有`#`注释符号，看起来像是`all:\`。这一行指定了你将使用的黑名单。以下是一个示例：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Add all blacklists that you want to use below the `all:\` line, separating each
    with a colon (**`:`**). To use whitelists to subtract addresses from your blacklist,
    add the name of the whitelist immediately after the name of each blacklist, as
    in `:blacklist:whitelist:`
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将你想使用的所有黑名单添加到`all:\`行下，每个黑名单之间用冒号（**`:`**）分隔。如果要使用白名单从黑名单中减去地址，则在每个黑名单名称后面立即添加白名单的名称，如`：blacklist:whitelist:`。
- en: 'Next is the blacklist definition:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是黑名单定义：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Following the name (`uatraps`), the first data field specifies the list type—in
    this case, `black`. The `msg` field contains the message to be displayed to blacklisted
    senders during the SMTP dialogue. The `method` field specifies how `spamd-setup`
    fetches the list data—in this case, via HTTP. Other possibilities include fetching
    via FTP (`ftp`), from a file in a mounted filesystem (`file`), or via execution
    of an external program (`exec`). Finally, the `file` field specifies the name
    of the file `spamd` expects to receive.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 紧随名称（`uatraps`）之后，第一个数据字段指定了列表类型——在这种情况下是`black`。`msg`字段包含在SMTP对话过程中要显示给黑名单发件人的消息。`method`字段指定了`spamd-setup`如何获取列表数据——在这种情况下是通过HTTP。其他可能的方式包括通过FTP（`ftp`）、从挂载的文件系统中的文件（`file`），或通过执行外部程序（`exec`）获取。最后，`file`字段指定了`spamd`期望接收的文件名。
- en: 'The definition of a whitelist follows much the same pattern but omits the message
    parameter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 白名单的定义遵循相似的模式，但省略了消息参数：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The suggested blacklists in the current default* spamd.conf *are actively
    maintained and have rarely, if ever, contained false positives. However, earlier
    versions of that file also suggested lists that excluded large blocks of the Internet,
    including several address ranges that claim to cover entire countries. If your
    site expects to exchange legitimate mail with any of the countries in question,
    those lists may not be optimal for your setup. Other popular lists have been known
    to list entire `/16` ranges as spam sources, and it’s well worth reviewing the
    details of the list’s maintenance policy before putting a blacklist into production.*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*当前默认的spamd.conf中的建议黑名单是积极维护的，几乎没有出现假阳性。然而，早期版本的该文件也建议使用了一些黑名单，这些黑名单排除了互联网上的大块区域，包括几个声称覆盖整个国家的地址范围。如果你的网站预计会与这些国家交换合法邮件，那么这些黑名单可能不适合你的配置。其他流行的黑名单已知会将整个`/16`地址范围列为垃圾邮件来源，因此，在将黑名单投入生产之前，查看该黑名单的维护政策非常值得。*'
- en: 'Put the lines for `spamd` and the startup parameters you want in your */etc/
    rc.conf.local* on OpenBSD or in */etc/rc.conf* on FreeBSD or NetBSD. Here’s an
    example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将`spamd`的启动行和你希望的启动参数放入OpenBSD中的*/etc/rc.conf.local*，或者在FreeBSD或NetBSD中放入*/etc/rc.conf*。以下是一个示例：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we enable `spamd` and set it to run in blacklisting mode with the `-b`
    flag. In addition, the `-v` flag enables verbose logging, which is useful for
    keeping track of `spamd`’s activity for debugging purposes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们启用`spamd`并设置它以黑名单模式运行，使用`-b`标志。此外，`-v`标志启用详细日志记录，这对于调试`spamd`的活动非常有用。
- en: 'On FreeBSD, the */etc/rc.conf* settings that control `spamd`’s behavior are
    `obspamd_enable`, which should be set to `"YES"` in order to enable `spamd`, and
    `obspamd_flags`, where you fill in any command-line options for `spamd`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在FreeBSD上，控制`spamd`行为的*/etc/rc.conf*设置包括`obspamd_enable`，它应该设置为`"YES"`以启用`spamd`，以及`obspamd_flags`，你可以在这里填入任何`spamd`的命令行选项：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*To have spamd run in pure blacklist mode on OpenBSD 4.1 or newer, you can
    achieve the same effect by setting the spamd_black variable to “YES” and then
    restarting spamd.*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*要使spamd在OpenBSD 4.1或更高版本中以纯黑名单模式运行，你可以通过将spamd_black变量设置为“YES”并重新启动spamd来实现相同的效果。*'
- en: Once you’ve finished editing the setup, start `spamd` with the options you want
    and complete the configuration with `spamd-setup`. Finally, create a `cron` job
    that calls `spamd-setup` to update the blacklist at reasonable intervals. In pure
    blacklist mode, you can view and manipulate the table contents using `pfctl` table
    commands.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成配置编辑后，使用所需的选项启动`spamd`，并使用`spamd-setup`完成配置。最后，创建一个`cron`作业，定期调用`spamd-setup`以更新黑名单。在纯黑名单模式下，你可以使用`pfctl`表命令查看和操作表内容。
- en: spamd Logging
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: spamd日志
- en: 'By default, `spamd` logs to your general system logs. To send the `spamd` log
    messages to a separate log file, add an entry like this to *syslog.conf*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`spamd`记录到您的一般系统日志中。要将`spamd`日志消息发送到单独的日志文件，请向*syslog.conf*添加类似以下条目：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you’re satisfied that `spamd` is running and doing what it’s supposed to
    do, you’ll probably want to add the `spamd` log file to your log rotations, too.
    After you’ve run `spamd-setup` and the tables are filled, you can view the table
    contents using `pfctl`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您确信`spamd`正在运行并且正在执行其预期的操作，您可能希望将`spamd`日志文件添加到您的日志轮换中。在运行`spamd-setup`并填充表之后，您可以使用`pfctl`查看表内容。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*In the sample* pf.conf *fragment at the beginning of this section, the redirection*
    (*rdr-to) rule is also a pass rule. If you opted for a match rule instead (or
    if you’re using an older PF version and chose to write a rdr rule that doesn’t
    include a pass part), be sure to set up a pass rule to let traffic through to
    your redirection. You may also need to set up rules to let legitimate email through.
    However, if you’re already running an email service on your network, you can probably
    go on using your old SMTP pass rules.*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本节开头的* pf.conf *片段示例中，重定向*（rdr-to）*规则也是一个通过规则。如果您选择使用匹配规则（或者如果您使用较旧的PF版本并选择编写不包括通过部分的rdr规则），请确保设置一个通过规则以允许流量通过到您的重定向。您可能还需要设置规则以允许合法的电子邮件通过。但是，如果您已经在网络上运行电子邮件服务，您可能可以继续使用旧的SMTP通过规则。'
- en: Given a set of reliable and well-maintained blacklists, `spamd` in pure blacklisting
    mode does a good job of reducing spam. However, with pure blacklisting, you catch
    traffic only from hosts that have already tried to deliver spam elsewhere, and
    you put your trust in external data sources to determine which hosts deserve to
    be tarpitted. For a setup that provides a more immediate response to network-level
    behavior and offers some real gains in spam prevention, consider *greylisting*,
    which is a crucial part of how the modern `spamd` works.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一组可靠且维护良好的黑名单，`spamd`在纯黑名单模式下可以很好地减少垃圾邮件。然而，使用纯黑名单，您只能捕获那些已经尝试在其他地方投递垃圾邮件的主机的流量，并且您需要信任外部数据源来确定哪些主机应该被陷阱。对于提供对网络级行为更快速响应并在垃圾邮件预防方面提供一些真正收益的设置，请考虑*灰名单*，这是现代`spamd`工作的一个关键部分。
- en: 'Greylisting: My Admin Told Me Not to Talk to Strangers'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 灰名单：我的管理员告诉我不要和陌生人说话
- en: Greylisting consists mainly of interpreting the current SMTP standards and adding
    a little white lie to make life easier.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 灰名单主要包括解释当前SMTP标准并添加一点善意谎言以使生活更轻松。
- en: 'Spammers tend to use other people’s equipment to send their messages, and the
    software they install without the legal owner’s permission needs to be relatively
    lightweight in order to run undetected. Unlike legitimate mail senders, spammers
    typically don’t consider any individual message they send to be important. Taken
    together, this means that typical spam and malware sender software aren’t set
    up to interpret SMTP status codes correctly. This is a fact that we can use to
    our advantage, as Evan Harris proposed in his 2003 paper titled “The Next Step
    in the Spam Control War: Greylisting.” ^([[34](#ftn.ch06fn05)])'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾邮件发送者倾向于使用他人的设备发送他们的消息，他们未经合法所有者许可安装的软件需要相对轻量级才能在不被检测的情况下运行。与合法的邮件发送者不同，垃圾邮件发送者通常不认为他们发送的任何单个消息很重要。综合起来，这意味着典型的垃圾邮件和恶意软件发送者软件没有设置正确解释SMTP状态代码的功能。这是一个我们可以利用的事实，正如埃文·哈里斯在他2003年的论文《垃圾邮件控制战的下一步：灰名单》中提出的那样。
- en: As Harris noted, when a compromised machine is used to send spam, the sender
    application tends to try delivery only once, without checking for any results
    or return codes. Real SMTP implementations interpret SMTP return codes and act
    on them, and real mail servers retry if the initial attempt fails with any kind
    of temporary error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如哈里斯所指出的，当被篡改的机器用于发送垃圾邮件时，发送应用程序往往只尝试一次投递，而不检查任何结果或返回代码。真正的SMTP实现会解释SMTP返回代码并根据其行动，如果初始尝试失败并出现任何临时错误，真正的邮件服务器会重试。
- en: 'In his paper, Harris outlined a practical approach:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的论文中，哈里斯概述了一个实用的方法：
- en: On first SMTP contact from a previously unknown communication partner, *do not*
    receive email on the first delivery attempt, but instead, respond with a status
    code that indicates a temporary local problem, and store the sender IP address
    for future reference.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与先前未知的通信伙伴的第一次SMTP联系中，*不要*在第一次投递尝试时接收电子邮件，而是用指示临时本地问题的状态代码回复，并存储发件人IP地址以供将来参考。
- en: If the sender retries immediately, reply as before with the temporary failure
    status code.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the sender retries after a set minimum amount of time (1 hour, for example)
    but not more than a maximum waiting period (4 hours, for example), accept the
    message for delivery and record the sender IP address in your whitelist.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the essence of greylisting. And fortunately, you can set up and maintain
    a greylisting `spamd` on your PF-equipped gateway.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up spamd in Greylisting Mode
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: OpenBSD’s `spamd` acquired its ability to greylist in OpenBSD 3.5\. Beginning
    with OpenBSD 4.1, `spamd` runs in greylisting mode by default.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'In the default greylisting mode, the `spamd` table used for blacklisting, as
    described in the previous section, becomes superfluous. You can still use blacklists,
    but `spamd` will use a combination of private data structures for blacklist data
    and the `spamdb` database to store greylisting-related data. A typical set of
    rules for `spamd` in default mode looks like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This includes the necessary `pass` rules to let legitimate email flow to the
    intended destinations from your own network. The `<spamd-white>` table is the
    whitelist, maintained by `spamd`. The hosts in the `<spamd-white>` table have
    passed the greylisting hurdle, and mail from these machines is allowed to pass
    to the real mail servers or their content-filtering frontends. In addition, the
    `nospamd` table is there for you to load addresses of hosts that you don’t want
    to expose to `spamd` processing, and the matching `pass` rule makes sure SMTP
    traffic from those hosts passes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: In your network, you may want to tighten those rules to pass SMTP traffic only
    to and from hosts that are allowed to send and receive email via SMTP. We’ll get
    back to the `nospamd` table in [Handling Sites That Do Not Play Well with Greylisting](ch06.html#handling_sites_that_do_not_play_well_wit
    "Handling Sites That Do Not Play Well with Greylisting").
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the equivalent rules in pre–OpenBSD 4.7 syntax:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: On FreeBSD, in order to use `spamd` in greylisting mode, you need a file descriptor
    filesystem (see `man 5 fdescfs`) mounted at */dev/fd/*. To implement this, add
    the following line to */etc/fstab* and make sure the `fdescfs` code is in your
    kernel, either compiled in or by loading the module via the appropriate `kldload`
    command.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To begin configuring `spamd`, place the lines for `spamd` and the startup parameters
    you want in */etc/rc.conf.local*. Here’s an example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On FreeBSD, the equivalent line should go in */etc/rc.conf*:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can fine-tune several of the greylisting-related parameters via `spamd`
    command-line parameters trailing the `-G` option.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Why Greylisting Works
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: A significant amount of design and development effort has been put into making
    essential services, such as SMTP email transmission, fault-tolerant. In practical
    terms, this means that the best effort of a service such as SMTP is as close as
    you can get to having a perfect record for delivering messages. That’s why we
    can rely on greylisting to eventually let us receive email from proper mail servers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'The current standard for Internet email transmission is defined in RFC 5321.^([[35](#ftn.ch06fn05a)])
    The following are several excerpts from Section 4.5.4.1, “Sending Strategy”:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: “In a typical system, the program that composes a message has some method for
    requesting immediate attention for a new piece of outgoing mail, while mail that
    cannot be transmitted immediately MUST be queued and periodically retried by the
    sender. . . .
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “The sender *MUST* delay retrying a particular destination after one attempt
    has failed. In general, the retry interval *SHOULD* be at least 30 minutes; however,
    more sophisticated and variable strategies will be beneficial when the SMTP client
    can determine the reason for non-delivery.
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Retries continue until the message is transmitted or the sender gives up; the
    give-up time generally needs to be at least 4–5 days.”
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Delivering email is a collaborative, best-effort process, and the RFC clearly
    states that if the site you are trying to send mail to reports that it can’t receive
    at the moment, it is your duty (a must requirement) to try again later, giving
    the receiving server a chance to recover from its problem.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The clever wrinkle to greylisting is that it’s a convenient white lie. When
    we claim to have a temporary local problem, that problem is really the equivalent
    of “My admin told me not to talk to strangers.” Well-behaved senders with valid
    messages will call again, but spammers won’t wait around for the chance to retry,
    since doing so increases their cost of delivering messages. This is why greylisting
    still works, and since it’s based on strict adherence to accepted standards,^([[36](#ftn.ch06fn05b)])
    false positives are rare.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'The colon-separated list `2:4:864` represents the values `passtime`, `greyexp`,
    and `whiteexp`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`passtime` denotes the minimum number of minutes `spamd` considers a reasonable
    time before retry. The default is 25 minutes, but here we’ve reduced it to 2 minutes.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`greyexp` is the number of hours an entry stays in the greylisted state before
    it’s removed from the database.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`whiteexp` determines the number of hours a whitelisted entry is kept. The
    default values for `greyexp` and `whiteexp` are 4 hours and 864 hours (just over
    1 month), respectively.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greylisting in Practice
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Users and administrators at sites that implement greylisting tend to agree that
    greylisting gets rid of most of their spam, with a significant drop in the load
    on any content filtering they have in place for their mail. We’ll start by looking
    at what `spamd`’s greylisting looks like according to log files and then return
    with some data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'If you start `spamd` with the `-v` command-line option for verbose logging,
    your logs will include a few more items of information in addition to IP addresses.
    With verbose logging, a typical log excerpt looks like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first line is the beginning of a connection from a machine in the `spews1`
    blacklist. The next six lines show the complete records of two connection attempts
    from another machine, which each time connects as the second active connection.
    This second machine isn’t yet in any blacklist, so it’s grey-listed. Note the
    rather curious delivery address (*[wkitp98zpu.fsf@datadok.no](mailto:wkitp98zpu.fsf@datadok.no)*)
    in the message that the greylisted machine tries to deliver. There’s a useful
    trick that we’ll look at in [Greytrapping](ch06.html#greytrapping "Greytrapping").
    The `(GREY)` and `(BLACK)` before the addresses indicate greylisting or blacklisting
    status. Then there’s more activity from the blacklisted host, and a little later
    we see that after 404 seconds (or 6 minutes and 44 seconds), the blacklisted host
    gives up without completing the delivery.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: The remaining lines show a few very short connections, including one from a
    machine already on a blacklist. This time, though, the machine disconnects too
    quickly to see any `(BLACK)` flag at the beginning of the SMTP dialogue, but we
    see a reference to the list name (`spews1`) at the end.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Roughly 400 seconds is about the amount of time that naive blacklisted spammers
    hang around (according to data from various sites) and about the time it takes
    (at the rate of 1 byte per second) to complete the `EHLO ...` dialogue until `spamd`
    rejects the message. However, while peeking at the logs, you’re likely to find
    some spammers that hang around significantly longer. For example, in the data
    from our office gateway, one log entry stood out:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This particular machine was already on several blacklists when it made 13 attempts
    at delivery from December 9 through December 12\. The last attempt lasted 32 minutes
    and 44 seconds, without completing the delivery. Relatively intelligent spam senders
    drop the connection during the first few seconds, like the ones in the first log
    fragment. Others give up after around 400 seconds. A few hang on for hours. (The
    most extreme case we’ve recorded hung on for 42,673 seconds, which is almost 12
    hours.)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Tracking Your Real Mail Connections: spamlogd'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Behind the scenes, rarely mentioned and barely documented, is one of `spamd`’s
    most important helper programs: the `spamlogd` whitelist updater. As the name
    suggests, `spamlogd` works quietly in the background, logging connections to and
    from your mail servers to keep your whitelist updated. The idea is to make sure
    that valid mail sent between hosts you communicate with regularly goes through
    with a minimum of fuss.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*If you’ve followed the discussion up to this point, `spamlogd` has probably
    been started automatically already. However, if your initial `spamd` configuration
    didn’t include greylisting, `spamlogd` may not have been started, and you may
    experience strange symptoms, like the greylist and whitelist not being updated
    properly. Restarting `spamd` after you’ve enabled greylisting should ensure that
    `spamlogd` is loaded and available, too.*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform its job properly, `spamlogd` needs you to log SMTP connections
    to and from your mail servers, just as we did in the sample rule sets in [Chapter 5](ch05.html
    "Chapter 5. Bigger or Trickier Networks"):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'On OpenBSD 4.1 and higher (and equivalents), you can create several `pflog`
    interfaces and specify where rules should be logged. Here’s how to separate the
    data `spamlogd` needs to read from the rest of your PF logs:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Create a separate `pflog1` interface using `ifconfig pflog1 create`, or create
    a *hostname.pflog1* file with just the line `up`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the rules to the following:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Add `-l pflog1` to `spamlogd`’s startup parameters.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This separates the `spamd`-related logging from the rest. (See [Chapter 9](ch09.html
    "Chapter 9. Logging, Monitoring, and Statistics") for more about logging.)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: With the preceding rules in place, `spamlogd` will add the IP addresses that
    receive email you send to the whitelist. This isn’t an ironclad guarantee that
    the reply will pass immediately, but in most configurations, it helps speed things
    significantly.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Greytrapping
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We know that spam senders rarely use a fully compliant SMTP implementation to
    send their messages, which is why greylisting works. We also know that spammers
    rarely check that the addresses they feed to their hijacked machines are actually
    deliverable. Combine these facts, and you see that if a greylisted machine tries
    to send a message to an invalid address in your domain, there’s a good chance
    that the message is spam or malware.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: This realization led to the next evolutionary step in `spamd` development—a
    technique dubbed *greytrapping*. When a greylisted host tries to deliver mail
    to a known bad address in our domains, the host is added to a locally maintained
    blacklist called `spamd-greytrap`. Members of the `spamd-greytrap` list are treated
    to the same 1-byte-per-second tarpitting as members of other blacklists.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Greytrapping as implemented in `spamd` is simple and elegant. The main thing
    you need as a starting point is `spamd` running in greylisting mode. The other
    crucial component is a list of addresses in domains your servers handle email
    for, but only ones that you’re sure will never receive legitimate email. The number
    of addresses in your list is unimportant, but there must be at least one, and
    the upper limit is mainly defined by how many addresses you wish to add.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Next, you use `spamdb` to feed your list to the greytrapping feature and sit
    back to watch. First, a sender tries to send email to an address on your grey-trap
    list and is simply greylisted, as with any sender you haven’t exchanged email
    with before. If the same machine tries again, either to the same, invalid address
    or another address on your greytrapping list, the greytrap is triggered, and the
    offender is put into `spamd-greytrap` for 24 hours. For the next 24 hours, any
    SMTP traffic from the greytrapped host will be stuttered, with 1-byte-at-a-time
    replies.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: That 24-hour period is short enough not to cause serious disruption of legitimate
    traffic because real SMTP implementations will keep trying to deliver for at least
    a few days. Experience from large-scale implementations of the technique shows
    that it rarely produces false positives. Machines that continue spamming after
    24 hours will make it back to the tarpit soon enough.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up your traplist, use `spamdb`’s `-T` option. In my case, the strange
    address^([[37](#ftn.ch06fn06)]) I mentioned earlier in [Greylisting in Practice](ch06.html#greylisting_in_practice
    "Greylisting in Practice") was a natural candidate for inclusion:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The command I actually entered was `$ sudo spamdb -T -a "<wkitp98zpu.fsf@datadok.no>"`.
    In OpenBSD 4.1 and newer, `spamdb` doesn’t require the angle brackets or quotes,
    but it will accept them.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Add as many addresses as you like. I tend to find new additions for my local
    list of spamtrap addresses by looking in the greylist and mail server logs for
    failed attempts to deliver delivery failure reports to nonexistent addresses in
    my domains (yes, it really is as crazy as it sounds).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Make sure that the addresses you add to your spamtrap lists are invalid and
    will stay invalid. There’s nothing quite like the embarrassment of discovering
    that you made a valid address into a spamtrap, however temporarily.*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: The following log fragment shows how a spam-sending machine is grey-listed at
    first contact and then comes back and clumsily tries to deliver messages to the
    curious address I added to my traplist, only to end up in the `spamd-greytrap`
    blacklist after a few minutes. We know what it will be doing for the next 20-odd
    hours.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As a side note, it looks like even though the spammer moved to send from a different
    machine, both the `From:` and `To:` addresses stayed the same. The fact that he’s
    still trying to send to an address that’s never been deliverable is a strong indicator
    that this spammer doesn’t check his lists frequently.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Managing Lists with spamdb
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There may be times when you need to view or change the contents of blacklists,
    whitelists, and greylists. These records are located in the */var/db/spamdb* database,
    and an administrator’s main interface to managing those lists is `spamdb`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Early versions of `spamdb` simply offered options to add whitelist entries to
    the database or update existing ones (`spamdb -a` *nn*`.`*mm*`.`*nn*`.`*mm*).
    You could delete whitelist entries (`spamdb -d` *nn*`.`*mm*`.`*nn*`.`*mm*) to
    compensate for shortcomings in either the blacklists used or the effects of the
    greylisting algorithms. Recent versions of `spamdb` offer some interesting features
    to support greytrapping.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Updating Lists
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you run `spamdb` without any parameters, it lists the contents of your `spamdb`
    database, and it lets you add or delete both spamtrap addresses and traplist entries.
    You can also add whitelist entries on the fly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to add a host to your whitelist without adding it to your permanent
    *nospamd* file and reloading your rule set or the table, you could do it from
    the command line instead, like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If a spam sender managed to get a message delivered despite your best efforts,
    you could correct the situation by adding the spam sender to the `spamd-greytrap`
    list like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Adding a new trap address is just as simple:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you want to reverse either of these decisions, you would simply substitute
    `-d` for the `-a` option in both these commands.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Keeping spamd Greylists in Sync
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Beginning with OpenBSD 4.1, `spamd` can keep greylisting databases in sync
    across any number of cooperating greylisting gateways. The implementation is via
    a set of `spamd` command-line options:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The `-Y` option specifies a *sync target*—that is, the IP address(es) of other
    `spamd`-running gateways you want to inform of updates to your greylisting information.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the receiving end, the `-y` option specifies a *sync listener*, which is
    the address or interface where this `spamd` instance is prepared to receive greylisting
    updates from other hosts.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, our main `spamd` gateway `mainoffice-gw.example.com` might have
    the following options added to its startup command line to establish a sync target
    and sync listener, respectively:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Conversely, `minorbranch-gw.example.com` at the branch office would have the
    hostnames reversed:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `spamd` daemon also supports shared-secret authentication between the synchronization
    partners. Specifically, if you create the file */etc/mail/ spamd.key* and distribute
    copies of it to all synchronization partners, it’ll be used to calculate the necessary
    checksums for authentication. The *spamd.key* file itself can be any kind of data,
    such as random data harvested from */dev/arandom*, as suggested by the `spamd`
    man page.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*In situations where direct synchronization of `spamd`-related data isn’t practical
    or if you simply want to share your `spamd-greytrap` with others, exporting the
    contents of your list of locally trapped spam senders to a text file may be desirable.
    The list format `spamd-setup` expects is one address per line, optionally with
    comment lines starting with one or more # characters. Exporting your list of currently
    trapped addresses in a usable format can be as simple as putting together a one-liner
    with `spamdb, grep`, and a little imagination.*'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Out-of-Order MX Use
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenBSD 4.1 gave `spamd` the ability to detect out-of-order MX use. Contacting
    a secondary mail exchanger first instead of trying the main one is a fairly well-known
    spammer trick and one that runs contrary to the behavior we expect from ordinary
    email transfer agents. In other words, if someone tries the email exchangers in
    the wrong order, we can be pretty sure that they’re trying to deliver spam.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: For our *example.com* domain with main mail server 192.0.2.225 and backup 192.0.2.224,
    adding `-M 192.0.2.224` to `spamd`’s startup options would mean that any host
    that tries to contact 192.0.2.224 via SMTP before contacting the main mail server
    at 192.0.2.225 will be added to the local `spamdgreytrap` list for the next 24
    hours.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Handling Sites That Do Not Play Well with Greylisting
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, there are situations where you’ll need to compensate for the
    peculiarities of other sites’ email setups.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: The first email message sent from any site that hasn’t contacted you for as
    long as the greylister keeps its data around will be delayed for some random amount
    of time, which depends mainly on the sender’s retry interval. There are times
    when even a minimal delay is undesirable. If, for example, you have some infrequent
    customers who demand your immediate and urgent attention to their business when
    they do contact you, an initial delivery delay of what could be up to several
    hours may not be optimal. In addition, you are bound to encounter misconfigured
    mail servers that either don’t retry at all or retry too quickly, perhaps stopping
    delivery retries after just one attempt.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Also, some sites are large enough to have several outgoing SMTP servers, and
    they don’t play well with greylisting because they’re not guaranteed to retry
    delivery of any given message from the same IP address used with the prior delivery
    attempt. Even though those sites comply with the retry requirements, it’s obvious
    that this is one of the few remaining downsides of greylisting.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to compensate for such situations is to define a table for a local
    whitelist to be fed from a file in case of reboots. To make sure SMTP traffic
    from the addresses in the table is not fed to `spamd`, add a `pass` rule to allow
    the traffic to pass:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In pre–OpenBSD 4.7 syntax, add a `no rdr` rule at the top of your redirection
    block and a matching `pass` rule to let SMTP traffic from the hosts in your `nospamd`
    table through, as shown here:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Once you’ve made these changes to your rule set, enter the addresses you need
    to protect from redirection into the */etc/mail/nospamd* file. Then reload your
    rule set using `pfctl -f /etc/pf.conf`. You can then use all the expected table
    tricks on the `<nospamd>` table, including replacing its content after editing
    the *nospamd* file. In fact, this approach is strongly hinted at in both man pages
    and sample configuration files distributed with recent versions of `spamd`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'At least some sites with many outgoing SMTP servers publish information about
    which hosts are allowed to send email for their domain via Sender Policy Framework
    (SPF) records as part of the domain’s DNS information.^([[38](#ftn.ch06fn07)])
    To retrieve the SPF records for our *example.com* domain, use the `host` command’s
    `-ttxt` option as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This command would produce an answer roughly like the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here, the text in quotes is the *example.com* domain’s SPF record. If you want
    email from *example.com* to arrive quickly and you trust the people there not
    to send or relay spam, choose the address range from the SPF record, add it to
    your *nospamd* file, and reload the `<nospamd>` table contents from the updated
    file.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Spam-Fighting Tips
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When used selectively, blacklists combined with `spamd` are powerful, precise,
    and efficient spam-fighting tools. The load on the `spamd` machine is minimal.
    On the other hand, `spamd` will never perform better than its weakest data source,
    which means you’ll need to monitor your logs and use whitelisting when necessary.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: It’s also feasible to run `spamd` in a pure greylisting mode, with no blacklists.
    In fact, some users report that a purely greylisting `spamd` configuration is
    about as effective a spam-fighting tool as configurations with blacklists and
    sometimes significantly more effective than content filtering. One such report
    posted to *openbsd-misc* claimed that a pure greylisting configuration immediately
    rid the company of approximately 95 percent of its spam load. (This report is
    accessible via *[http://marc.info/](http://marc.info/)*, among other places; search
    for the subject “Followup – spamd greylisting results.”)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: I recommend two very good blacklists. One is Bob Beck’s traplist based on “ghosts
    of usenet postings past.” Generated automatically by computers running `spamd`
    at the University of Alberta, Bob’s setup is a regular `spamd` system that removes
    trapped addresses automatically after 24 hours, which means that you get an extremely
    low number of false positives. The number of hosts varies widely and has been
    as high as 670,000\. While still officially in testing, the list was made public
    in January 2006\. The list is available from *[http://www.openbsd.org/spamd/traplist.gz](http://www.openbsd.org/spamd/traplist.gz)*.
    It’s part of recent sample *spamd.conf* files as the `uatraps` blacklist.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: The other list I recommend is *heise.de*’s `nixspam`, which has a 12-hour automatic
    expiry and extremely good accuracy. It’s also in the sample *spamd.conf* file.
    Detailed information about this list is available from *[http://www.heise.de/ix/nixspam/dnsbl_en/](http://www.heise.de/ix/nixspam/dnsbl_en/)*.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re happy with your setup, try introducing local greytrapping. This
    is likely to catch a few more undesirables, and it’s good, clean fun. Some limited
    experiments—carried out while writing this chapter (chronicled at *[http://bsdly.blogspot.com/](http://bsdly.blogspot.com/)*
    in entries starting with *[http://bsdly.blogspot.com/2007/07/hey-spammer-heres-list-for-you.html](http://bsdly.blogspot.com/2007/07/hey-spammer-heres-list-for-you.html)*)—even
    suggest that harvesting the invalid addresses spammers use from your mail server
    logs, from `spamd` logs, or directly from your greylist to put in your traplist
    is extremely efficient. Publishing the list on a moderately visible Web page appears
    to ensure that the addresses you put there will be recorded over and over again
    by address-harvesting robots and will provide you with even better greytrapping
    material, as they’re then more likely to be kept on the spammers’ list of known
    good addresses.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: ^([[30](#ch06fn01)]) At the time this chapter was first written, this was purely
    theoretical; I hadn’t yet had any credible reports that this was happening. That
    changed during 2012 when reliable sources started reporting the appearance of
    brute-force sequences at odd ports. See *[http://bsdly.blogspot.com/2013/02/theres-no-protection-in-high-ports.html](http://bsdly.blogspot.com/2013/02/theres-no-protection-in-high-ports.html)*
    for more.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: ^([[31](#ch06fn02)]) For an overview of the Hail Mary Cloud sequence of brute-force
    attempts, see the article “The Hail Mary Cloud and the Lessons Learned” at *[http://bsdly.blogspot.com/2013/10/the-hail-mary-cloud-and-lessons-learned.html](http://bsdly.blogspot.com/2013/10/the-hail-mary-cloud-and-lessons-learned.html)*.
    More resources are referenced there and in [Appendix A](apa.html "Appendix A. Resources").
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: ^([[32](#ch06fn03)]) From a longer-term perspective, it’s fairly normal for
    entire networks and larger ranges of IP addresses to be reassigned to new owners
    in response to events in the physical, business-oriented world.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: ^([[33](#ch06fn04)]) Before `pfctl` acquired the ability to expire table entries,
    table expiry was more likely than not handled by the special-purpose utility `expiretable`.
    If your `pfctl` doesn’t have the `expire` option, you should seriously consider
    upgrading to a newer system. If upgrading is for some reason not practical, look
    for `expiretable` in your package system.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: ^([[34](#ch06fn05)]) The original Harris paper and a number of other useful
    articles and resources can be found at *[http://www.greylisting.org/](http://www.greylisting.org/)*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: ^([[35](#ch06fn05a)]) The relevant parts of RFC 5321 are identical to the corresponding
    parts of RFC 2821, which is obsolete. Some of us were more than a little disappointed
    that the IETF didn’t clarify these chunks of the text, now moving forward on the
    standards track. My reaction (actually, it’s quite a rant) is at *[http://bsdly.blogspot.com/2008/10/ietf-failed-to-account-for-greylisting.html](http://bsdly.blogspot.com/2008/10/ietf-failed-to-account-for-greylisting.html)*.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: ^([[36](#ch06fn05b)]) The relevant RFCs are mainly RFC 1123 and RFC 5321, which
    made obsolete the earlier RFC 2821\. Remember that temporary rejection is an SMTP
    fault-tolerance feature.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: ^([[37](#ch06fn06)]) Of course, this address is totally bogus. It looks like
    the kind of message ID the GNUS email and news client generates, and it was probably
    lifted from a news spool or some unfortunate malware victim’s mailbox.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: ^([[38](#ch06fn07)]) SPF records are stored in DNS zones as TXT records. See
    *[http://www.openspf.org/](http://www.openspf.org/)* for details.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
