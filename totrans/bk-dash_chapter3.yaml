- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">3</samp> <samp class="SANS_Dogma_OT_Bold_B_11">A
    CRASH COURSE IN PANDAS</samp>
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">3</samp> <samp class="SANS_Dogma_OT_Bold_B_11">pandas
    快速入门</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Dashboard apps are mainly used to visualize data. But before you can do this,
    you need to preprocess, clean, and analyze the data. To help you accomplish this,
    Python provides a powerful suite of data analysis modules, including the popular
    pandas library. The *pandas library* provides data structures and functionality
    used to represent and manipulate data. Think of it like an advanced spreadsheet
    program in your code with extra functionality, including creating spreadsheets,
    accessing individual rows by name, calculating basic statistics, operating on
    cells that fulfill a certain condition, and much more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板应用程序主要用于可视化数据。但是，在你可以做到这一点之前，你需要对数据进行预处理、清理和分析。为了帮助你完成这些任务，Python 提供了一套强大的数据分析模块，包括流行的
    pandas 库。*pandas 库* 提供了用于表示和操作数据的数据结构和功能。你可以把它想象成一个带有额外功能的高级电子表格程序，包括创建电子表格、按名称访问单独的行、计算基本统计数据、对满足特定条件的单元格进行操作等等。
- en: This chapter provides a quick introduction to the most important pandas features.
    It is loosely based on the official “10 Minutes to pandas” guide, but here we
    compress the content to the most relevant information for this book. An eight-minute
    video tutorial for a pandas crash course can be found at [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pandas<wbr>-quickstart*](https://blog.finxter.com/pandas-quickstart).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了 pandas 的最重要功能。它大致基于官方的“10分钟学习 pandas”指南，但在本书中，我们将内容压缩为最相关的信息。关于 pandas
    快速入门的八分钟视频教程可以在[*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pandas<wbr>-quickstart*](https://blog.finxter.com/pandas-quickstart)找到。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Visual Overview Cheat Sheet</samp>
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">视觉概览备忘单</samp>
- en: '[Figure 3-1](chapter3.xhtml#fig3-1) gives a graphical overview of the topics
    described in this chapter.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-1](chapter3.xhtml#fig3-1)提供了本章所描述主题的图示概览。'
- en: '![](../images/Figure3-1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure3-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-1: A pandas cheat
    sheet</samp>'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-1：pandas 备忘单</samp>
- en: Feel free to revisit this graphic as you read over this chapter. Let’s dive
    into the detailed, step-by-step explanations in the following sections.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章时，随时可以查看这张图。接下来，让我们深入到每个步骤的详细解释。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing pandas</samp>
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">安装 pandas</samp>
- en: 'Install the pandas library in your virtual environment or system using the
    following command in your terminal, command line, or shell:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在你的虚拟环境或系统中安装 pandas 库，命令可以在终端、命令行或 shell 中执行：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
- en: If you already have pandas installed, we recommend updating to the latest version
    with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">pip install -U
    pandas</samp>.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 pandas，我们建议使用命令<samp class="SANS_TheSansMonoCd_W5Regular_11">pip install
    -U pandas</samp>更新到最新版本。
- en: Some editors and IDEs have an integrated terminal that you can use to install
    pandas, including PyCharm, as shown in [Figure 3-2](chapter3.xhtml#fig3-2). If
    you’re using a different IDE, you can use either the terminal it provides or your
    operating system’s terminal. If you have PyCharm installed, you can enter <samp
    class="SANS_TheSansMonoCd_W5Regular_11">import pandas</samp> in the main editor
    and a tool tip should show. When you click the tool tip, it will give you the
    option of installing pandas, as shown in [Figure 3-2](chapter3.xhtml#fig3-2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编辑器和集成开发环境（IDE）具有集成终端，你可以使用它们来安装 pandas，包括 PyCharm，如[图 3-2](chapter3.xhtml#fig3-2)所示。如果你使用的是其他
    IDE，可以使用它提供的终端，或者你操作系统的终端。如果你已经安装了 PyCharm，可以在主编辑器中输入<samp class="SANS_TheSansMonoCd_W5Regular_11">import
    pandas</samp>，一个工具提示应该会显示出来。点击工具提示后，它会给你安装 pandas 的选项，如[图 3-2](chapter3.xhtml#fig3-2)所示。
- en: Both ways to install pandas are displayed in [Figure 3-2](chapter3.xhtml#fig3-2).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 两种安装 pandas 的方式展示在[图 3-2](chapter3.xhtml#fig3-2)中。
- en: '![](../images/Figure3-2.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure3-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-2: Install pandas
    in PyCharm using either the tool tips (1) or the integrated terminal, with the
    command pip install pandas (2).</samp>'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-2：使用工具提示（1）或集成终端中的命令 pip
    install pandas（2）在 PyCharm 中安装 pandas。</samp>
- en: 'To access the pandas library in your Python scripts, you simply import it with
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas</samp> statement.
    It’s common to give pandas the alias <samp class="SANS_TheSansMonoCd_W5Regular_11">pd</samp>
    for ease of access and brevity, so the full line to add to the top of your script
    would be:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 脚本中访问 pandas 库时，只需使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">import
    pandas</samp> 语句导入即可。为了方便访问和简洁起见，通常将 pandas 设为别名 <samp class="SANS_TheSansMonoCd_W5Regular_11">pd</samp>，因此在脚本顶部添加的完整代码行应该是：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: With this, instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">pandas.somefunction()</samp>,
    you can now call <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.somefunction()</samp>.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个别名后，您可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.somefunction()</samp>，而不是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">pandas.somefunction()</samp>。
- en: <samp class="SANS_Dogma_OT_Bold_B_11">TROUBLESHOOTING</samp>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">故障排除</samp>
- en: <samp class="SANS_Futura_Std_Book_11">If, when you try to run code with pandas,
    you find that it still hasn’t installed properly, follow these steps to properly
    install pandas in your PyCharm project:</samp>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">如果在尝试使用 pandas 运行代码时发现它仍然没有正确安装，请按照以下步骤正确安装
    pandas 到您的 PyCharm 项目中：</samp>
- en: <samp class="SANS_Futura_Std_Book_11">1.  Select</samp> <samp class="SANS_Futura_Std_Bold_B_11">File</samp>►<samp
    class="SANS_Futura_Std_Bold_B_11">Settings</samp>►<samp class="SANS_Futura_Std_Bold_B_11">Project</samp>
    <samp class="SANS_Futura_Std_Book_11">from the PyCharm menu.</samp>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">1.  从 PyCharm 菜单中选择</samp> <samp class="SANS_Futura_Std_Bold_B_11">文件</samp>►<samp
    class="SANS_Futura_Std_Bold_B_11">设置</samp>►<samp class="SANS_Futura_Std_Bold_B_11">项目</samp>
    <samp class="SANS_Futura_Std_Book_11">。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">2.  Select your current project.</samp>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">2.  选择当前项目。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">3.  Click the</samp> <samp class="SANS_Futura_Std_Bold_B_11">Python
    Interpreter</samp> <samp class="SANS_Futura_Std_Book_11">tab within your project
    tab.</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">3.  在您的项目标签页中点击</samp> <samp class="SANS_Futura_Std_Bold_B_11">Python
    解释器</samp> <samp class="SANS_Futura_Std_Book_11">标签。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">4.  Click the small plus symbol (</samp>+<samp
    class="SANS_Futura_Std_Book_11">) to add a new library to the project.</samp>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">4.  点击小加号符号（</samp>+<samp class="SANS_Futura_Std_Book_11">）以向项目中添加新的库。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">5.  Enter the name of the library to be
    installed, which here is</samp> <samp class="SANS_Futura_Std_Bold_B_11">pandas</samp><samp
    class="SANS_Futura_Std_Book_11">, and click</samp> <samp class="SANS_Futura_Std_Bold_B_11">Install
    Package</samp><samp class="SANS_Futura_Std_Book_11">.</samp>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">5.  输入要安装的库的名称，这里是</samp> <samp class="SANS_Futura_Std_Bold_B_11">pandas</samp><samp
    class="SANS_Futura_Std_Book_11">，然后点击</samp> <samp class="SANS_Futura_Std_Bold_B_11">安装软件包</samp><samp
    class="SANS_Futura_Std_Book_11">。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">6.  Wait for the installation to terminate,
    and then close all pop-up windows.</samp>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">6.  等待安装完成，然后关闭所有弹出窗口。</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating Objects in pandas</samp>
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">在 pandas 中创建对象</samp>
- en: The two most important data types in pandas are Series and DataFrames. A pandas
    Series is a one-dimensional array of data values, like a column in an Excel sheet.
    A pandas DataFrame is a two-dimensional labeled data structure, much like a full
    spreadsheet. The purpose of the Series and DataFrame structures is to facilitate
    data storage, access, and analysis.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 中最重要的两种数据类型是 Series 和 DataFrame。pandas Series 是一维的数据值数组，类似于 Excel 表格中的一列。pandas
    DataFrame 是一种二维的带标签数据结构，类似于完整的电子表格。Series 和 DataFrame 结构的目的是便于数据存储、访问和分析。
- en: In order to provide easy access to individual rows or columns using indexing,
    pandas automatically adds row and column indices to DataFrame structures when
    you create them. By default, pandas uses zero-based indexing, so it starts at
    index 0 and increments the subsequent index by one until it reaches the end of
    the data structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于通过索引访问单独的行或列，pandas 在创建 DataFrame 结构时会自动添加行和列的索引。默认情况下，pandas 使用从零开始的索引，因此它从索引
    0 开始，并且后续的索引值会递增，直到数据结构的末尾。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Series</samp>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Series</samp>
- en: 'To follow along with the pandas examples in your PyCharm IDE, create a new
    project by selecting **File**►**New Project**, and then create a new empty Python
    file with **File**►**New**►**Python File**. You can assign any name you want to
    both the project and the Python file. In the new project file, copy the following
    code for creating a simple Series object (make sure you’ve installed pandas):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在PyCharm IDE中跟随pandas的示例，你可以通过选择**文件**►**新建项目**来创建一个新项目，然后通过**文件**►**新建**►**Python文件**创建一个新的空Python文件。你可以给项目和Python文件命名任意名称。在新项目文件中，复制以下代码来创建一个简单的Series对象（确保你已经安装了pandas）：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">s = pd.Series([42, 21, 7, 3.5])</samp>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">s = pd.Series([42, 21, 7, 3.5])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(s)</samp>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(s)</samp>
- en: 'Run the code and you should see the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码，你应该能看到以下内容：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0      42.0</samp>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">0      42.0</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1      21.0</samp>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">1      21.0</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2      7.0</samp>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">2      7.0</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">3      3.5</samp>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">3      3.5</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">dtype: float64</samp>'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">dtype: float64</samp>'
- en: You’ve just created a Series with the <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.Series()</samp>
    constructor, passing it a list of values. You can also create a Series from other
    data types by passing, for example, a list of integers, a tuple of Booleans, or
    any other iterable of data values, for that matter, and pandas will automatically
    determine the data type of the whole series and assign it to the Series object,
    as shown in the last line of the output.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚使用了`pd.Series()`构造器创建了一个Series对象，并传入了一个值的列表。你也可以通过传入其他数据类型来创建Series，例如，传入一个整数列表、布尔元组或任何其他可迭代的数据值，pandas会自动确定整个Series的类型并将其分配给Series对象，就像输出的最后一行所示。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">DataFrames</samp>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">DataFrames</samp>
- en: A pandas DataFrame is like a data table in your code, with rows, columns, and
    cells filled with data of a certain type, as depicted in [Figure 3-3](chapter3.xhtml#fig3-3).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: pandas DataFrame就像是你代码中的数据表，具有行、列和存储特定类型数据的单元格，如[图 3-3](chapter3.xhtml#fig3-3)所示。
- en: '![](../images/Figure3-3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure3-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-3: Creating a pandas
    DataFrame object with three columns (excluding the index column) and three rows</samp>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-3：创建一个包含三列（不包括索引列）和三行的pandas
    DataFrame对象</samp>
- en: '[Listing 3-1](chapter3.xhtml#List3-1) shows how to create a simple DataFrame
    object.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 3-1](chapter3.xhtml#List3-1)展示了如何创建一个简单的DataFrame对象。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({''age'': 18,</samp>'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({''age'': 18,</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                   ''name'':
    [''Alice'', ''Bob'', ''Carl''],</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                   ''name'':
    [''Alice'', ''Bob'', ''Carl''],</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                   ''cardio'':
    [60, 70, 80]})</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                   ''cardio'':
    [60, 70, 80]})</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 3-1: The example DataFrame
    named df</samp>'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 3-1：名为df的示例DataFrame</samp>
- en: 'This will give us a DataFrame that looks like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个看起来像这样的DataFrame：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">年龄</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">姓名</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">心脏健康</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
- en: You create the DataFrame with the <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.DataFrame()</samp>
    constructor. When you use a dictionary to initialize a DataFrame, as we did here,
    the dictionary keys are the column names and the dictionary values are the row
    values for that column. You can also provide just one column value, such as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">18</samp>, and assign it to a whole column
    name, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>, so that
    every cell in that column is filled with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.DataFrame()</samp> 构造器创建
    DataFrame。当你使用字典来初始化 DataFrame 时，就像我们在这里做的那样，字典的键是列名，字典的值是该列的行值。你也可以只提供一个列值，例如
    <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>，并将其分配给整个列名，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>，这样该列中的每个单元格都会填充值
    <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Technically, if only a single value is provided for all the rows of a specific
    column, pandas will automatically set the same value to all existing rows in the
    DataFrame, a process known as* broadcasting*.*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*从技术上讲，如果为特定列的所有行仅提供一个值，pandas 会自动将相同的值设置为 DataFrame 中所有现有行的值，这个过程被称为* 广播 *。*'
- en: 'DataFrames can also be constructed by reading data from a CSV file. You use
    the pandas <samp class="SANS_TheSansMonoCd_W5Regular_11">read_csv()</samp> function
    to load the CSV file as a DataFrame, like so:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 也可以通过读取 CSV 文件中的数据来构造。你可以使用 pandas 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">read_csv()</samp>
    函数将 CSV 文件加载为 DataFrame，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">path = "</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">your</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">path</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">to</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">CSV</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">file</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">.csv"</samp>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">路径 = "</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">your</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">path</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">to</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">CSV</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">file</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">.csv"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.read_csv(path)</samp>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.read_csv(path)</samp>
- en: You’ll need to replace the path to the file with your specific filepath; this
    can be an absolute path or a relative path from the location where your script
    resides. For instance, if the CSV file is in the same directory as your Python
    script, you can simply give the filename as a relative path.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要用你特定的文件路径替换文件的路径；这可以是一个绝对路径，也可以是相对于你脚本所在位置的相对路径。例如，如果 CSV 文件和你的 Python 脚本在同一目录下，你可以直接给出文件名作为相对路径。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Selecting Elements in DataFrames</samp>
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">在 DataFrame 中选择元素</samp>
- en: 'Series objects and DataFrames allow for easy access to individual elements.
    Here we’ll see how to store, access, and analyze data from DataFrames in a simple,
    efficient, and readable manner. Series objects can be seen as just one-dimensional
    DataFrames, so understanding DataFrame access will explain Series access too.
    [Figure 3-4](chapter3.xhtml#fig3-4) shows the relevant sections of the cheat sheet
    for your convenience. You can see there are three ways to access data: select
    by column (A), select by index and slice (B), and select by label (C). The following
    subsections provide a brief overview of each. We’ll dive into more detail in subsequent
    chapters.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Series 对象和 DataFrame 允许轻松访问单个元素。在这里，我们将看到如何以简单、高效且易于阅读的方式存储、访问和分析 DataFrame
    中的数据。Series 对象可以看作是单维的 DataFrame，因此理解 DataFrame 访问方式也能解释 Series 的访问方式。[图 3-4](chapter3.xhtml#fig3-4)
    显示了相关部分的备忘单，方便您查阅。您可以看到有三种访问数据的方法：按列选择 (A)、按索引和切片选择 (B)、按标签选择 (C)。以下小节简要概述了每种方法。我们将在后续章节中深入探讨。
- en: '![](../images/Figure3-4.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure3-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-4: Three different
    ways to select elements in a DataFrame</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-4：在 DataFrame 中选择元素的三种不同方式</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Select by Column</samp>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">按列选择</samp>
- en: 'You can access a column with the square bracket notation you already know from
    Python lists and dictionaries. Using the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame from [Listing 3-1](chapter3.xhtml#List3-1), we select all elements in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> column, like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用已经熟悉的 Python 列表和字典中的方括号表示法来访问列。使用 [清单 3-1](chapter3.xhtml#List3-1) 中的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame，我们可以这样选择 <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    列中的所有元素：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df['age'])</samp>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df['age'])</samp>
- en: 'This will print:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0     18</samp>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">0     18</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1     18</samp>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">1     18</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     18</samp>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     18</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: age, dtype: int64</samp>'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: age, dtype: int64</samp>'
- en: You select all values in the column labeled <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    using the name of the DataFrame you’re accessing and the column name in square
    brackets.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用访问的 DataFrame 名称和方括号中的列名来选择标签为 <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    的所有值。
- en: Note that pandas allows the alternative syntax <samp class="SANS_TheSansMonoCd_W5Regular_11">df.age</samp>
    for accessing columns. While you will see this in some pandas code bases, the
    more popular way is to use the square bracket notation <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age']</samp>,
    like for standard Python list, string, and dictionary indexing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，pandas 允许使用另一种语法 <samp class="SANS_TheSansMonoCd_W5Regular_11">df.age</samp>
    来访问列。虽然在一些 pandas 代码库中可以看到这种方式，但更常用的方法是使用方括号表示法 <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age']</samp>，就像在标准的
    Python 列表、字符串和字典索引中一样。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Select by Index and
    Slice</samp>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">按索引和切片选择</samp>
- en: 'To access specific rows in the DataFrame, we use the slicing notation <samp
    class="SANS_TheSansMonoCd_W5Regular_11">df[start:stop]</samp>. As mentioned in
    [Chapter 1](chapter1.xhtml), the row with the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    index is included and the row with the <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp>
    index is excluded from the selection. Be careful when using <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[start:stop]</samp>,
    however: the <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp> index is
    actually *included*, and is a common source of confusion!'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 DataFrame 中的特定行，我们使用切片表示法 <samp class="SANS_TheSansMonoCd_W5Regular_11">df[start:stop]</samp>。正如
    [第 1 章](chapter1.xhtml) 中提到的，具有 <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    索引的行包括在内，而具有 <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp> 索引的行则不包括在内。然而，在使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[start:stop]</samp> 时要小心：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">stop</samp> 索引实际上是*包括*在内的，这也是一个常见的混淆来源！
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*You can find comprehensive tutorials about slicing in Python at* [https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/introduction<wbr>-to<wbr>-slicing<wbr>-in<wbr>-python](https://blog.finxter.com/introduction-to-slicing-in-python)
    *and slicing in NumPy at* [https://blog.finxter.com/numpy-tutorial](https://blog.finxter.com/numpy-tutorial).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在* [https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/introduction<wbr>-to<wbr>-slicing<wbr>-in<wbr>-python](https://blog.finxter.com/introduction-to-slicing-in-python)
    *找到关于 Python 切片的综合教程，并在* [https://blog.finxter.com/numpy-tutorial](https://blog.finxter.com/numpy-tutorial)
    *找到关于 NumPy 切片的教程。*'
- en: 'To access only one row, set the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp> indices accordingly:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问单行，请相应地设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">开始</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">结束</samp> 索引：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df[2:3])</samp>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df[2:3])</samp>
- en: 'This will print the row at index 2 and, by specifying a <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp>
    index of 3, will print no further lines:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印索引为2的行，并通过指定< s><samp class="SANS_TheSansMonoCd_W5Regular_11">停止</samp>
    索引为3，不再打印后续行：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">年龄</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">姓名</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">心血管</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
- en: 'You can also access DataFrame elements using the <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>
    index to access the <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>-th
    row and the <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp>-th column.
    Here we access the third row and the second column in the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame with zero-based indices 2 and 1, respectively:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp> 索引来访问 DataFrame
    元素，以访问 <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> 行和 <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp>
    列。在这里，我们使用零基索引2和1，分别访问 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame 中的第三行和第二列：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.iloc[2, 1])</samp>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.iloc[2, 1])</samp>
- en: The first argument <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> accesses
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>-th row and the second
    argument <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp> accesses the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">j</samp>-th column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>
    index. This will print the data value in the third row (with index 2) and the
    second column (with index 1), which <samp class="SANS_TheSansMonoCd_W5Regular_11">'Carl'</samp>.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数 <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> 访问 <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>
    行，第二个参数 <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp> 访问 <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp>
    列。 这将打印第三行（索引为2）和第二列（索引为1）的数据值，即 <samp class="SANS_TheSansMonoCd_W5Regular_11">'Carl'</samp>。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Boolean Indexing</samp>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">布尔索引</samp>
- en: 'A powerful way to access rows that match a certain condition is with *Boolean
    indexing*. We’ll again use our <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame and access the rows with a value larger than 60 in the <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>
    column (stay with us for a moment; we’ll explain this shortly):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一种强大的方式来访问满足某个条件的行是通过 *布尔索引*。我们将再次使用我们的 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame，并访问在 <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> 列中值大于60的行（请稍等，我们马上会解释这个）：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df[df['cardio']>60])</samp>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df[df['cardio']>60])</samp>
- en: 'This will extract the last two rows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提取最后两行：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">年龄</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">姓名</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">心血管</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">鲍勃</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">卡尔</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
- en: 'While this syntax may appear strange at first, it is actually well designed
    by the pandas creators. The inner condition <samp class="SANS_TheSansMonoCd_W5Regular_11">df[''cardio'']>60</samp>
    results in a Series of Boolean values that are <samp class="SANS_TheSansMonoCd_W5Regular_11">''True''</samp>
    if the <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>-th element of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> column is larger than
    60\. This holds for the last two rows of the DataFrame. Thus, <samp class="SANS_TheSansMonoCd_W5Regular_11">df[''cardio'']>60</samp>
    results in the Series:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种语法刚开始看起来可能有些奇怪，但实际上它是由 pandas 创建者精心设计的。内部条件 <samp class="SANS_TheSansMonoCd_W5Regular_11">df['cardio']>60</samp>
    产生了一个布尔值序列，当 <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> 列的第 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">i</samp> 个元素大于 60 时，值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">'True'</samp>。这对于数据框的最后两行适用。因此，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">df['cardio']>60</samp> 结果为：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0    False</samp>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">0    False</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1     True</samp>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">1     True</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     True</samp>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     True</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: Cardio, dtype: bool</samp>'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: Cardio, dtype: bool</samp>'
- en: These Boolean values are then passed as indices into the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame, which results in a DataFrame with only two rows instead of three.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些布尔值随后作为索引传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> 数据框，这样会得到一个只有两行而不是三行的
    DataFrame。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Select by Label</samp>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">按标签选择</samp>
- en: 'Like in spreadsheets, each row and each column in pandas is labeled. The label
    can be either an integer index number, such as the row indices, or a string name,
    such as the <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> column
    name in the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame.
    To access data by label, we use the indexing mechanism <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[rows,
    columns]</samp>. Here we access all rows of the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在电子表格中一样，pandas 中的每一行和每一列都有标签。标签可以是整数索引号，例如行索引，或者是字符串名称，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>
    列名在 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> 数据框中。要通过标签访问数据，我们使用索引机制
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[rows, columns]</samp>。在这里，我们访问
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> 数据框中 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    列的所有行：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.loc[:, 'name'])</samp>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.loc[:, 'name'])</samp>
- en: 'This gives us:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们得到：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0    Alice</samp>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">0    爱丽丝</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1      Bob</samp>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">1      鲍勃</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     Carl</samp>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     卡尔</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: name, dtype: object</samp>'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: name, dtype: object</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">'''</samp>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">'''</samp>
- en: We use the comma-separated slicing indexing scheme within the square brackets
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[:, 'name']</samp>, where
    the first part, <samp class="SANS_TheSansMonoCd_W5Regular_11">:</samp>, selects
    the rows and the second part, <samp class="SANS_TheSansMonoCd_W5Regular_11">'name'</samp>,
    selects the columns to be retrieved from the DataFrame. The empty slice colon,
    without specified start and stop indices, indicates that you want to access all
    rows without restriction. The string <samp class="SANS_TheSansMonoCd_W5Regular_11">'name'</samp>
    indicates that you want to retrieve only the values from the column <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    and ignore the rest.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用逗号分隔的切片索引方案，写在方括号内<samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[:,
    'name']</samp>，其中第一部分<samp class="SANS_TheSansMonoCd_W5Regular_11">:</samp>选择行，第二部分<samp
    class="SANS_TheSansMonoCd_W5Regular_11">'name'</samp>选择要从数据框中检索的列。没有指定起止索引的空切片冒号，表示你希望无条件访问所有行。字符串<samp
    class="SANS_TheSansMonoCd_W5Regular_11">'name'</samp>表示你只希望检索来自<samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>列的值，忽略其他列。
- en: 'To access all rows from the columns <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>, we’d pass a list
    of column labels, like so:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问来自<code>age</code>和<code>cardio</code>列的所有行，我们可以传递一个列标签的列表，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.loc[:, ['age', 'cardio']])</samp>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.loc[:, ['age', 'cardio']])</samp>
- en: 'And this results in:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致以下结果：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp> |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp> |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp> |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp> |'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Modifying an Existing DataFrame</samp>
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">修改现有数据框</samp>
- en: 'You can modify and even overwrite a part of your DataFrame using the assignment
    operator <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> by selecting the
    data to be replaced on the left and providing the new data on the right. Here
    we overwrite all the integer values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    column to 16:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用赋值运算符<samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>来修改甚至覆盖数据框的一部分，通过在左侧选择需要替换的数据，在右侧提供新的数据。在这里，我们将<samp
    class="SANS_TheSansMonoCd_W5Regular_11">age</samp>列中的所有整数值覆盖为16：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age'] = 16</samp>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age'] = 16</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(s)</samp>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(s)</samp>
- en: 'Here is the result:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
- en: You first select the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    column with <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age']</samp> and
    overwrite the value associated with <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    with the integer value <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>.
    To copy the single integer to all rows in the column, pandas uses broadcasting.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你选择 <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> 列，使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age']</samp>，并将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> 对应的值覆盖为整数值 <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>。为了将这个整数复制到该列的所有行，pandas
    使用广播。
- en: '[Figure 3-5](chapter3.xhtml#fig3-5) shows the relevant part of the pandas cheat
    sheet.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-5](chapter3.xhtml#fig3-5) 显示了 pandas 备忘单的相关部分。'
- en: '![](../images/Figure3-5.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure3-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-5: Modifying rows
    2 and 3 of column age in the DataFrame using slicing and broadcasting</samp>'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-5：使用切片和广播修改 DataFrame 中第
    2 和第 3 行的 age 列</samp>
- en: 'Here’s a more advanced example that uses slicing and the <samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>
    index to overwrite all but the first row of the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    column. First we’ll rebuild the original <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更高级的示例，使用切片和 <samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp> 索引来覆盖
    <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> 列中除第 1 行以外的所有行。首先，我们将重新构建原始的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({''age'': 18,</samp>'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({''age'': 18,</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                  ''name'': [''Alice'',
    ''Bob'', ''Carl''],</samp>'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                  ''name'': [''Alice'',
    ''Bob'', ''Carl''],</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ''cardio'':
    [60, 70, 80]})</samp>'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ''cardio'':
    [60, 70, 80]})</samp>'
- en: 'This gives us:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
- en: 'Now we exclude the first row from the changes by selecting the second and third
    rows using the standard slicing notation:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过使用标准切片符号选择第 2 和第 3 行来排除第 1 行的更改：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[1:,'age'] = 16</samp>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[1:,'age'] = 16</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
- en: 'We can see Alice’s age remains 18:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 Alice 的年龄仍然是 18：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
- en: 'To add variety to our examples, we’ll use a new system, as pandas is very flexible.
    By understanding the different indexing schemes—bracket notation, slicing, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>—you’ll
    be able to overwrite existing data and add new data. Here we add a new column,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>, with the <samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>
    index, slicing, and broadcasting:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了丰富我们的示例，我们将使用一个新的系统，因为 pandas 非常灵活。通过理解不同的索引方案——括号表示法、切片、<samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>——你将能够覆盖现有的数据并添加新数据。这里我们使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp> 索引、切片和广播来添加一个新的列 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[:,'friend'] = 'Alice'</samp>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[:,'friend'] = 'Alice'</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
- en: 'This gives us:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
- en: 'Note that the same can be achieved with the simpler code shown here:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用这里展示的更简化代码也可以实现相同的效果：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df['friend'] = 'Alice'</samp>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df['friend'] = 'Alice'</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
- en: 'And we get the same result:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们得到了相同的结果：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">年龄</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">姓名</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">心脏健康</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">朋友</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: This was a quick crash course on the most relevant features of pandas that we’ll
    use in the book. The pandas library has many more functionalities, including calculating
    statistics, plotting, grouping, and reshaping, to name just a few. We recommend
    exploring pandas at your leisure using the links in this chapter’s Resources section.
    Once you understand the concepts discussed in this chapter, you’ll be able to
    read and understand existing pandas code in many other Dash projects.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于Pandas库的快速入门课程，我们将在本书中使用其最相关的功能。Pandas库还有许多其他功能，包括计算统计数据、绘图、分组和重塑数据等。我们建议您使用本章资源部分的链接，按照自己的节奏探索Pandas。一旦您理解了本章中讨论的概念，您将能够阅读并理解许多其他Dash项目中的现有Pandas代码。
- en: Now, let’s get started with your first dashboard app!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始创建您的第一个仪表盘应用吧！
- en: <samp class="SANS_Futura_Std_Bold_B_11">Resources</samp>
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">资源</samp>
- en: '“10 Minutes to pandas”: [*https://<wbr>pandas<wbr>.pydata<wbr>.org<wbr>/pandas<wbr>-docs<wbr>/stable<wbr>/user<wbr>_guide<wbr>/10min<wbr>.xhtml*](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.xhtml)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “10分钟学Pandas”：[*https://<wbr>pandas<wbr>.pydata<wbr>.org<wbr>/pandas<wbr>-docs<wbr>/stable<wbr>/user<wbr>_guide<wbr>/10min<wbr>.xhtml*](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.xhtml)
- en: '*Coffee Break Pandas*, a free ebook available at this book’s companion website,
    [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Coffee Break Pandas*，这是一本免费的电子书，您可以在本书的配套网站上找到，链接为[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)'
