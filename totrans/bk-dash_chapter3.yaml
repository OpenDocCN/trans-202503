- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">3</samp> <samp class="SANS_Dogma_OT_Bold_B_11">A
    CRASH COURSE IN PANDAS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard apps are mainly used to visualize data. But before you can do this,
    you need to preprocess, clean, and analyze the data. To help you accomplish this,
    Python provides a powerful suite of data analysis modules, including the popular
    pandas library. The *pandas library* provides data structures and functionality
    used to represent and manipulate data. Think of it like an advanced spreadsheet
    program in your code with extra functionality, including creating spreadsheets,
    accessing individual rows by name, calculating basic statistics, operating on
    cells that fulfill a certain condition, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides a quick introduction to the most important pandas features.
    It is loosely based on the official “10 Minutes to pandas” guide, but here we
    compress the content to the most relevant information for this book. An eight-minute
    video tutorial for a pandas crash course can be found at [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pandas<wbr>-quickstart*](https://blog.finxter.com/pandas-quickstart).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Visual Overview Cheat Sheet</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 3-1](chapter3.xhtml#fig3-1) gives a graphical overview of the topics
    described in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure3-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-1: A pandas cheat
    sheet</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to revisit this graphic as you read over this chapter. Let’s dive
    into the detailed, step-by-step explanations in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing pandas</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Install the pandas library in your virtual environment or system using the
    following command in your terminal, command line, or shell:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
  prefs: []
  type: TYPE_NORMAL
- en: If you already have pandas installed, we recommend updating to the latest version
    with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">pip install -U
    pandas</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Some editors and IDEs have an integrated terminal that you can use to install
    pandas, including PyCharm, as shown in [Figure 3-2](chapter3.xhtml#fig3-2). If
    you’re using a different IDE, you can use either the terminal it provides or your
    operating system’s terminal. If you have PyCharm installed, you can enter <samp
    class="SANS_TheSansMonoCd_W5Regular_11">import pandas</samp> in the main editor
    and a tool tip should show. When you click the tool tip, it will give you the
    option of installing pandas, as shown in [Figure 3-2](chapter3.xhtml#fig3-2).
  prefs: []
  type: TYPE_NORMAL
- en: Both ways to install pandas are displayed in [Figure 3-2](chapter3.xhtml#fig3-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure3-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-2: Install pandas
    in PyCharm using either the tool tips (1) or the integrated terminal, with the
    command pip install pandas (2).</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the pandas library in your Python scripts, you simply import it with
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas</samp> statement.
    It’s common to give pandas the alias <samp class="SANS_TheSansMonoCd_W5Regular_11">pd</samp>
    for ease of access and brevity, so the full line to add to the top of your script
    would be:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: With this, instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">pandas.somefunction()</samp>,
    you can now call <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.somefunction()</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">TROUBLESHOOTING</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">If, when you try to run code with pandas,
    you find that it still hasn’t installed properly, follow these steps to properly
    install pandas in your PyCharm project:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">1.  Select</samp> <samp class="SANS_Futura_Std_Bold_B_11">File</samp>►<samp
    class="SANS_Futura_Std_Bold_B_11">Settings</samp>►<samp class="SANS_Futura_Std_Bold_B_11">Project</samp>
    <samp class="SANS_Futura_Std_Book_11">from the PyCharm menu.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">2.  Select your current project.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">3.  Click the</samp> <samp class="SANS_Futura_Std_Bold_B_11">Python
    Interpreter</samp> <samp class="SANS_Futura_Std_Book_11">tab within your project
    tab.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">4.  Click the small plus symbol (</samp>+<samp
    class="SANS_Futura_Std_Book_11">) to add a new library to the project.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">5.  Enter the name of the library to be
    installed, which here is</samp> <samp class="SANS_Futura_Std_Bold_B_11">pandas</samp><samp
    class="SANS_Futura_Std_Book_11">, and click</samp> <samp class="SANS_Futura_Std_Bold_B_11">Install
    Package</samp><samp class="SANS_Futura_Std_Book_11">.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">6.  Wait for the installation to terminate,
    and then close all pop-up windows.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating Objects in pandas</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two most important data types in pandas are Series and DataFrames. A pandas
    Series is a one-dimensional array of data values, like a column in an Excel sheet.
    A pandas DataFrame is a two-dimensional labeled data structure, much like a full
    spreadsheet. The purpose of the Series and DataFrame structures is to facilitate
    data storage, access, and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide easy access to individual rows or columns using indexing,
    pandas automatically adds row and column indices to DataFrame structures when
    you create them. By default, pandas uses zero-based indexing, so it starts at
    index 0 and increments the subsequent index by one until it reaches the end of
    the data structure.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Series</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'To follow along with the pandas examples in your PyCharm IDE, create a new
    project by selecting **File**►**New Project**, and then create a new empty Python
    file with **File**►**New**►**Python File**. You can assign any name you want to
    both the project and the Python file. In the new project file, copy the following
    code for creating a simple Series object (make sure you’ve installed pandas):'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">s = pd.Series([42, 21, 7, 3.5])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(s)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code and you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0      42.0</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1      21.0</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2      7.0</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">3      3.5</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">dtype: float64</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just created a Series with the <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.Series()</samp>
    constructor, passing it a list of values. You can also create a Series from other
    data types by passing, for example, a list of integers, a tuple of Booleans, or
    any other iterable of data values, for that matter, and pandas will automatically
    determine the data type of the whole series and assign it to the Series object,
    as shown in the last line of the output.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">DataFrames</samp>
  prefs: []
  type: TYPE_NORMAL
- en: A pandas DataFrame is like a data table in your code, with rows, columns, and
    cells filled with data of a certain type, as depicted in [Figure 3-3](chapter3.xhtml#fig3-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure3-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-3: Creating a pandas
    DataFrame object with three columns (excluding the index column) and three rows</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 3-1](chapter3.xhtml#List3-1) shows how to create a simple DataFrame
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({''age'': 18,</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                   ''name'':
    [''Alice'', ''Bob'', ''Carl''],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                   ''cardio'':
    [60, 70, 80]})</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 3-1: The example DataFrame
    named df</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will give us a DataFrame that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: You create the DataFrame with the <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.DataFrame()</samp>
    constructor. When you use a dictionary to initialize a DataFrame, as we did here,
    the dictionary keys are the column names and the dictionary values are the row
    values for that column. You can also provide just one column value, such as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">18</samp>, and assign it to a whole column
    name, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>, so that
    every cell in that column is filled with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '*Technically, if only a single value is provided for all the rows of a specific
    column, pandas will automatically set the same value to all existing rows in the
    DataFrame, a process known as* broadcasting*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'DataFrames can also be constructed by reading data from a CSV file. You use
    the pandas <samp class="SANS_TheSansMonoCd_W5Regular_11">read_csv()</samp> function
    to load the CSV file as a DataFrame, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">path = "</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">your</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">path</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">to</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">CSV</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">file</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">.csv"</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.read_csv(path)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to replace the path to the file with your specific filepath; this
    can be an absolute path or a relative path from the location where your script
    resides. For instance, if the CSV file is in the same directory as your Python
    script, you can simply give the filename as a relative path.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Selecting Elements in DataFrames</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Series objects and DataFrames allow for easy access to individual elements.
    Here we’ll see how to store, access, and analyze data from DataFrames in a simple,
    efficient, and readable manner. Series objects can be seen as just one-dimensional
    DataFrames, so understanding DataFrame access will explain Series access too.
    [Figure 3-4](chapter3.xhtml#fig3-4) shows the relevant sections of the cheat sheet
    for your convenience. You can see there are three ways to access data: select
    by column (A), select by index and slice (B), and select by label (C). The following
    subsections provide a brief overview of each. We’ll dive into more detail in subsequent
    chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure3-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-4: Three different
    ways to select elements in a DataFrame</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Select by Column</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access a column with the square bracket notation you already know from
    Python lists and dictionaries. Using the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame from [Listing 3-1](chapter3.xhtml#List3-1), we select all elements in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> column, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df['age'])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'This will print:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0     18</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1     18</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     18</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: age, dtype: int64</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You select all values in the column labeled <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    using the name of the DataFrame you’re accessing and the column name in square
    brackets.
  prefs: []
  type: TYPE_NORMAL
- en: Note that pandas allows the alternative syntax <samp class="SANS_TheSansMonoCd_W5Regular_11">df.age</samp>
    for accessing columns. While you will see this in some pandas code bases, the
    more popular way is to use the square bracket notation <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age']</samp>,
    like for standard Python list, string, and dictionary indexing.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Select by Index and
    Slice</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'To access specific rows in the DataFrame, we use the slicing notation <samp
    class="SANS_TheSansMonoCd_W5Regular_11">df[start:stop]</samp>. As mentioned in
    [Chapter 1](chapter1.xhtml), the row with the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    index is included and the row with the <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp>
    index is excluded from the selection. Be careful when using <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[start:stop]</samp>,
    however: the <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp> index is
    actually *included*, and is a common source of confusion!'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '*You can find comprehensive tutorials about slicing in Python at* [https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/introduction<wbr>-to<wbr>-slicing<wbr>-in<wbr>-python](https://blog.finxter.com/introduction-to-slicing-in-python)
    *and slicing in NumPy at* [https://blog.finxter.com/numpy-tutorial](https://blog.finxter.com/numpy-tutorial).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access only one row, set the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp> indices accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df[2:3])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'This will print the row at index 2 and, by specifying a <samp class="SANS_TheSansMonoCd_W5Regular_11">stop</samp>
    index of 3, will print no further lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'You can also access DataFrame elements using the <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>
    index to access the <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>-th
    row and the <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp>-th column.
    Here we access the third row and the second column in the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame with zero-based indices 2 and 1, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.iloc[2, 1])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: The first argument <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> accesses
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>-th row and the second
    argument <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp> accesses the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">j</samp>-th column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>
    index. This will print the data value in the third row (with index 2) and the
    second column (with index 1), which <samp class="SANS_TheSansMonoCd_W5Regular_11">'Carl'</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Boolean Indexing</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'A powerful way to access rows that match a certain condition is with *Boolean
    indexing*. We’ll again use our <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame and access the rows with a value larger than 60 in the <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>
    column (stay with us for a moment; we’ll explain this shortly):'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df[df['cardio']>60])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'This will extract the last two rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'While this syntax may appear strange at first, it is actually well designed
    by the pandas creators. The inner condition <samp class="SANS_TheSansMonoCd_W5Regular_11">df[''cardio'']>60</samp>
    results in a Series of Boolean values that are <samp class="SANS_TheSansMonoCd_W5Regular_11">''True''</samp>
    if the <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>-th element of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> column is larger than
    60\. This holds for the last two rows of the DataFrame. Thus, <samp class="SANS_TheSansMonoCd_W5Regular_11">df[''cardio'']>60</samp>
    results in the Series:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0    False</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1     True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: Cardio, dtype: bool</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: These Boolean values are then passed as indices into the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame, which results in a DataFrame with only two rows instead of three.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Select by Label</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'Like in spreadsheets, each row and each column in pandas is labeled. The label
    can be either an integer index number, such as the row indices, or a string name,
    such as the <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> column
    name in the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame.
    To access data by label, we use the indexing mechanism <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[rows,
    columns]</samp>. Here we access all rows of the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.loc[:, 'name'])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">0    Alice</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">1      Bob</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">2     Carl</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Name: name, dtype: object</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">'''</samp>
  prefs: []
  type: TYPE_NORMAL
- en: We use the comma-separated slicing indexing scheme within the square brackets
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[:, 'name']</samp>, where
    the first part, <samp class="SANS_TheSansMonoCd_W5Regular_11">:</samp>, selects
    the rows and the second part, <samp class="SANS_TheSansMonoCd_W5Regular_11">'name'</samp>,
    selects the columns to be retrieved from the DataFrame. The empty slice colon,
    without specified start and stop indices, indicates that you want to access all
    rows without restriction. The string <samp class="SANS_TheSansMonoCd_W5Regular_11">'name'</samp>
    indicates that you want to retrieve only the values from the column <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    and ignore the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access all rows from the columns <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>, we’d pass a list
    of column labels, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.loc[:, ['age', 'cardio']])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'And this results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp> |'
  prefs: []
  type: TYPE_TB
- en: <samp class="SANS_Futura_Std_Bold_B_11">Modifying an Existing DataFrame</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can modify and even overwrite a part of your DataFrame using the assignment
    operator <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> by selecting the
    data to be replaced on the left and providing the new data on the right. Here
    we overwrite all the integer values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    column to 16:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age'] = 16</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(s)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: You first select the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    column with <samp class="SANS_TheSansMonoCd_W5Regular_11">df['age']</samp> and
    overwrite the value associated with <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    with the integer value <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>.
    To copy the single integer to all rows in the column, pandas uses broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-5](chapter3.xhtml#fig3-5) shows the relevant part of the pandas cheat
    sheet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure3-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-5: Modifying rows
    2 and 3 of column age in the DataFrame using slicing and broadcasting</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a more advanced example that uses slicing and the <samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>
    index to overwrite all but the first row of the <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    column. First we’ll rebuild the original <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({''age'': 18,</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                  ''name'': [''Alice'',
    ''Bob'', ''Carl''],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ''cardio'':
    [60, 70, 80]})</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'Now we exclude the first row from the changes by selecting the second and third
    rows using the standard slicing notation:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[1:,'age'] = 16</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see Alice’s age remains 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'To add variety to our examples, we’ll use a new system, as pandas is very flexible.
    By understanding the different indexing schemes—bracket notation, slicing, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">iloc</samp>—you’ll
    be able to overwrite existing data and add new data. Here we add a new column,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>, with the <samp class="SANS_TheSansMonoCd_W5Regular_11">loc</samp>
    index, slicing, and broadcasting:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df.loc[:,'friend'] = 'Alice'</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'Note that the same can be achieved with the simpler code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df['friend'] = 'Alice'</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'And we get the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">cardio</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">friend</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">60</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Bob</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alice</samp> |'
  prefs: []
  type: TYPE_TB
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This was a quick crash course on the most relevant features of pandas that we’ll
    use in the book. The pandas library has many more functionalities, including calculating
    statistics, plotting, grouping, and reshaping, to name just a few. We recommend
    exploring pandas at your leisure using the links in this chapter’s Resources section.
    Once you understand the concepts discussed in this chapter, you’ll be able to
    read and understand existing pandas code in many other Dash projects.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get started with your first dashboard app!
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Resources</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '“10 Minutes to pandas”: [*https://<wbr>pandas<wbr>.pydata<wbr>.org<wbr>/pandas<wbr>-docs<wbr>/stable<wbr>/user<wbr>_guide<wbr>/10min<wbr>.xhtml*](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Coffee Break Pandas*, a free ebook available at this book’s companion website,
    [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
