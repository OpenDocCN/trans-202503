- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SETTING
    UP A POWERSHELL TESTING ENVIRONMENT</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">设置
    PowerShell 测试环境</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In this chapter, you’ll configure PowerShell so you can work through the code
    examples presented in the rest of the book. Then, we’ll walk through a very quick
    overview of the PowerShell language, including its types, variables, and expressions.
    We’ll also cover how to execute its commands, how to get help, and how to export
    data for later use.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将配置 PowerShell，以便能够通过本书后续的代码示例。然后，我们将快速概述 PowerShell 语言，包括其类型、变量和表达式。我们还将介绍如何执行命令、如何获取帮助以及如何导出数据以供以后使用。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Choosing a PowerShell Version</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">选择 PowerShell 版本</samp>
- en: The most important tool you’ll need to use this book effectively is PowerShell,
    which has been installed on the Windows operating system by default since Windows
    7\. However, there are many different versions of this tool. The version installed
    by default on currently supported versions of Windows is 5.1, which is suitable
    for our purposes, even though Microsoft no longer fully supports it. More recent
    versions of PowerShell are cross platform and open source but must be installed
    separately on Windows.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效使用本书，最重要的工具就是 PowerShell，它从 Windows 7 开始默认安装在 Windows 操作系统中。然而，这个工具有许多不同的版本。当前受支持版本的
    Windows 默认安装的是 PowerShell 5.1，这对于我们的目的已经足够，尽管微软不再完全支持它。更新版本的 PowerShell 是跨平台和开源的，但需要在
    Windows 上单独安装。
- en: All the code presented in this book will run in both PowerShell 5.1 and the
    latest open source version, so it doesn’t matter which you choose. If you want
    to use the open source PowerShell, visit the project’s GitHub page at *[https://<wbr>github<wbr>.com<wbr>/PowerShell<wbr>/PowerShell](https://github.com/PowerShell/PowerShell)*
    to find installation instructions for your version of Windows.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中展示的所有代码都可以在 PowerShell 5.1 和最新的开源版本中运行，因此你选择哪个版本都无妨。如果你想使用开源 PowerShell，请访问该项目的
    GitHub 页面 *[https://<wbr>github<wbr>.com<wbr>/PowerShell<wbr>/PowerShell](https://github.com/PowerShell/PowerShell)*，在该页面上可以找到适用于你版本
    Windows 的安装说明。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Configuring PowerShell</samp>
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">配置 PowerShell</samp>
- en: 'The first thing we need to do in PowerShell is set the *script execution policy*,
    which determines what types of scripts PowerShell can execute. For Windows clients
    running PowerShell 5.1, the default is <samp class="SANS_TheSansMonoCd_W5Regular_11">Restricted</samp>,
    which blocks all scripts from running unless they are signed with a trusted certificate.
    As the scripts in this book are unsigned, we’ll change the execution policy to
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RemoteSigned</samp>. This execution
    policy allows us to run unsigned PowerShell scripts if they’re created locally
    but will not allow us to execute unsigned scripts downloaded in a web browser
    or attached to emails. Run the following command to set the execution policy:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 中，我们首先需要设置*脚本执行策略*，它决定了 PowerShell 可以执行哪些类型的脚本。对于运行 PowerShell
    5.1 的 Windows 客户端，默认策略是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Restricted</samp>，它会阻止所有脚本的执行，除非这些脚本经过受信任证书签名。由于本书中的脚本没有签名，我们将把执行策略更改为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RemoteSigned</samp>。此执行策略允许我们运行本地创建的未签名
    PowerShell 脚本，但不允许执行通过 Web 浏览器下载或附加在电子邮件中的未签名脚本。运行以下命令以设置执行策略：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The command changes the execution policy for the current user only, not the
    entire system. If you want to change it for all users, you’ll need to start PowerShell
    as an administrator and then rerun the command, removing the <samp class="SANS_TheSansMonoCd_W5Regular_11">Scope</samp>
    parameter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令仅更改当前用户的执行策略，而不会影响整个系统。如果你想更改所有用户的策略，需要以管理员身份启动 PowerShell，然后重新运行该命令，去掉 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Scope</samp> 参数。
- en: If you’re using the open source version of PowerShell or version 5.1 on Windows
    Server, then the default script execution policy is <samp class="SANS_TheSansMonoCd_W5Regular_11">RemoteSigned</samp>
    and you do not need to change anything.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用开源版本的 PowerShell 或在 Windows Server 上使用版本 5.1，则默认的脚本执行策略是 <samp class="SANS_TheSansMonoCd_W5Regular_11">RemoteSigned</samp>，你无需更改任何设置。
- en: Now that we can run unsigned scripts, we can install the PowerShell module we’ll
    be using for this book. A PowerShell *module* is a package of scripts and .NET
    binaries that export PowerShell commands. Every installation of PowerShell comes
    preinstalled with several modules for tasks ranging from configuring your applications
    to setting up Windows Update. You can install a module manually by copying its
    files, but the easiest approach is to use the PowerShell Gallery (*[https://<wbr>www<wbr>.powershellgallery<wbr>.com](https://www.powershellgallery.com)*),
    an online repository of modules.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行未签名的脚本了，接下来可以安装本书中将使用的 PowerShell 模块。PowerShell *模块* 是一组脚本和 .NET 二进制文件，导出
    PowerShell 命令。每个 PowerShell 安装都预装了多个模块，处理从配置应用程序到设置 Windows 更新等任务。你可以通过复制模块文件手动安装模块，但最简单的方法是使用
    PowerShell Gallery（*[https://<wbr>www<wbr>.powershellgallery<wbr>.com](https://www.powershellgallery.com)*），这是一个在线模块库。
- en: 'To install a module from the PowerShell Gallery, we use PowerShell’s <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Install-Module</samp> command. For this
    book, we’ll need to install the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObjectManager</samp>
    module, which we can do using the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 PowerShell Gallery 安装模块，我们使用 PowerShell 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Install-Module</samp>
    命令。对于本书，我们需要安装 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObjectManager</samp>
    模块，使用以下命令可以完成安装：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Make sure to say yes if the installer asks you any questions (after you’ve
    read and understood the question, of course). If you have the module installed
    already, you can ensure that you have the latest version by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Update-Module</samp>
    command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确保如果安装程序问你任何问题时都选择“是”（当然是在你已阅读并理解问题后）。如果你已经安装了模块，可以通过使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Update-Module</samp>
    命令来确保你拥有最新版本：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once it’s installed, you can load the module using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-Module</samp>
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-Module</samp>
    命令加载模块：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you see any errors after importing the module, double-check that you’ve correctly
    set the execution policy; that’s the most common reason for the module not loading
    correctly. As a final test, let’s run a command that comes with the module to
    check that it’s working. Execute the command in [Listing 1-1](chapter1.xhtml#Lis1-1)
    and verify that the output matches what you see in the PowerShell console. We’ll
    explore the purpose of this command in a later chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在导入模块后看到任何错误，仔细检查你是否正确设置了执行策略；这通常是模块加载不正确的最常见原因。作为最后的测试，让我们运行一个随模块附带的命令，检查它是否正常工作。执行
    [列表 1-1](chapter1.xhtml#Lis1-1) 中的命令，并验证输出是否与 PowerShell 控制台中显示的内容匹配。我们将在后续章节中探讨此命令的目的。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 1-1: Testing that the NtObjectManager module is working'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-1：测试 NtObjectManager 模块是否正常工作
- en: If everything is working and you’re comfortable with PowerShell, you can move
    on to the next chapter. If you need a quick refresher on the PowerShell language,
    keep reading.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，并且你对 PowerShell 感到舒适，可以继续阅读下一章。如果你需要快速回顾 PowerShell 语言，可以继续阅读本节。
- en: <samp class="SANS_Futura_Std_Bold_B_11">An Overview of the PowerShell Language</samp>
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">PowerShell 语言概述</samp>
- en: A complete introduction to PowerShell is beyond the scope of this book. However,
    this section touches on various language features you’ll need to be familiar with
    to use the book most effectively.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不打算对 PowerShell 进行全面介绍。然而，本节会涉及你需要熟悉的各种语言特性，以便更有效地使用本书。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Understanding Types,
    Variables, and Expressions</samp>
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">理解类型、变量和表达式</samp>
- en: PowerShell supports many different types, from basic integers and strings to
    complex objects. [Table 1-1](chapter1.xhtml#tab1-1) shows some of the most common
    built-in types, along with the underlying .NET runtime types and some simple examples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 支持许多不同的类型，从基本的整数和字符串到复杂的对象。[表 1-1](chapter1.xhtml#tab1-1) 显示了一些最常见的内建类型，以及它们对应的
    .NET 运行时类型和一些简单的示例。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-1:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Basic PowerShell Types with .NET Types and Examples</samp>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 1-1：</samp> <samp class="SANS_Futura_Std_Book_11">常见的基本
    PowerShell 类型与 .NET 类型及示例</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">.NET
    type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Examples</samp> |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">类型</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">.NET
    类型</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">示例</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Int32</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">142</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x8E</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0216</samp> |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Int32</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">142</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x8E</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0216</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Int64</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">142L</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x8EL</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0216L</samp> |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Int64</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">142L</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x8EL</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0216L</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">string</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.String</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello"</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''World!''</samp> |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">string</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.String</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello"</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''World!''</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Double</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">1.0</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1e10</samp> |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Double</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">1.0</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1e10</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bool</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Boolean</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bool</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Boolean</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">array</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Object[]</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@(1, "ABC", $true)</samp> |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">array</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Object[]</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@(1, "ABC", $true)</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">hashtable</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Collections.Hashtable</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@{A=1; B="ABC"}</samp> |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">hashtable</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Collections.Hashtable</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@{A=1; B="ABC"}</samp> |'
- en: To perform calculations on basic types, we can use well-known operators such
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">−</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>.
    These operators can be overloaded; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    is used for addition as well as for concatenating strings and arrays. [Table 1-2](chapter1.xhtml#tab1-2)
    provides a list of common operators, with simple examples and their results. You
    can test the examples yourself to check the output of each operator.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要对基本类型进行计算，可以使用常见的运算符，如 <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">−</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>。这些运算符可以被重载；例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    除了用于加法外，还用于连接字符串和数组。[表 1-2](chapter1.xhtml#tab1-2) 提供了常见运算符的列表，包括简单的示例及其结果。你可以自己测试这些示例，查看每个运算符的输出。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-2:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Operators</samp>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 1-2:</samp> <samp class="SANS_Futura_Std_Book_11">常见操作符</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Examples</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Results</samp>
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">操作符</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">示例</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">结果</samp>
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> | <samp class="SANS_Futura_Std_Book_11">Addition
    or concatenation</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello"</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"World!"</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"HelloWorld!"</samp> |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> | <samp class="SANS_Futura_Std_Book_11">加法或连接</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello"</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"World!"</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"HelloWorld!"</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">−</samp> | <samp class="SANS_Futura_Std_Book_11">Subtraction</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2 − 1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">−</samp> | <samp class="SANS_Futura_Std_Book_11">减法</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2 − 1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> | <samp class="SANS_Futura_Std_Book_11">Multiplication</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2 * 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8</samp>
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> | <samp class="SANS_Futura_Std_Book_11">乘法</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2 * 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp> | <samp class="SANS_Futura_Std_Book_11">Division</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">8 / 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp> | <samp class="SANS_Futura_Std_Book_11">除法</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">8 / 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp> | <samp class="SANS_Futura_Std_Book_11">Modulus</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">6 % 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp> | <samp class="SANS_Futura_Std_Book_11">取余</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">6 % 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp> | <samp class="SANS_Futura_Std_Book_11">Index</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@(3, 2, 1, 0)[1]</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp> | <samp class="SANS_Futura_Std_Book_11">索引</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@(3, 2, 1, 0)[1]</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-f</samp> | <samp class="SANS_Futura_Std_Book_11">String
    formatter</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"0x{0:X} {1}"
    -f 42, 123</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"0x2A 123"</samp>
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-f</samp> | <samp class="SANS_Futura_Std_Book_11">字符串格式化器</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"0x{0:X} {1}" -f 42, 123</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"0x2A 123"</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-band</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    AND</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x1FF -band 0xFF</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">255</samp> |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-band</samp> | <samp class="SANS_Futura_Std_Book_11">按位与</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x1FF -band 0xFF</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">255</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bor</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    OR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100 -bor 0x20</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">288</samp> |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bor</samp> | <samp class="SANS_Futura_Std_Book_11">按位或</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100 -bor 0x20</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">288</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bxor</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    XOR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xCC -bxor 0xDD</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">17</samp> |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bxor</samp> | <samp class="SANS_Futura_Std_Book_11">按位异或</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xCC -bxor 0xDD</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">17</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bnot</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    NOT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">-bnot 0xEE</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-239</samp> |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bnot</samp> | <samp class="SANS_Futura_Std_Book_11">按位取反</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">-bnot 0xEE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">-239</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-and</samp> | <samp class="SANS_Futura_Std_Book_11">Boolean
    AND</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true -and $false</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-and</samp> | <samp class="SANS_Futura_Std_Book_11">布尔与</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true -and $false</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-or</samp> | <samp class="SANS_Futura_Std_Book_11">Boolean
    OR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true -or $false</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-or</samp> | <samp class="SANS_Futura_Std_Book_11">布尔或</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true -or $false</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-not</samp> | <samp class="SANS_Futura_Std_Book_11">Boolean
    NOT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">-not $true</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-not</samp> | <samp class="SANS_Futura_Std_Book_11">布尔取反</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">-not $true</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-eq</samp> | <samp class="SANS_Futura_Std_Book_11">Equals</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello" -eq "Hello"</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-eq</samp> | <samp class="SANS_Futura_Std_Book_11">等于</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello" -eq "Hello"</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-ne</samp> | <samp class="SANS_Futura_Std_Book_11">Not
    equals</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello" -ne "Hello"</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-ne</samp> | <samp class="SANS_Futura_Std_Book_11">不等于</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello" -ne "Hello"</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-lt</samp> | <samp class="SANS_Futura_Std_Book_11">Less
    than</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4 -lt 10</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-lt</samp> | <samp class="SANS_Futura_Std_Book_11">小于</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4 -lt 10</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-gt</samp> | <samp class="SANS_Futura_Std_Book_11">Greater
    than</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4 -gt 10</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-gt</samp> | <samp class="SANS_Futura_Std_Book_11">大于</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4 -gt 10</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp>
    |'
- en: You can assign values to variables using the assignment operator, <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>.
    A variable has an alphanumeric name prefixed with the <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>
    character. For example, [Listing 1-2](chapter1.xhtml#Lis1-2) shows how you can
    capture an array in a variable and use the indexing operator to look up a value.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用赋值运算符<samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>将值赋给变量。变量有一个字母数字的名称，前面带有<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$</samp>字符。例如，[清单 1-2](chapter1.xhtml#Lis1-2)展示了如何将数组捕获到变量中，并使用索引运算符查找值。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 1-2: Capturing an array in a variable and indexing it via the variable
    name'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-2：将数组捕获到变量中，并通过变量名称进行索引
- en: 'There are also some predefined variables we’ll use in the rest of this book.
    These variables are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分还将使用一些预定义的变量。这些变量包括：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$null  </samp>Represents the NULL
    value, which indicates the absence of a value in comparisons
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$null  </samp>表示 NULL 值，表示在比较中不存在值
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$pwd  </samp>Contains the current
    working directory
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$pwd  </samp>包含当前工作目录
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$pid  </samp>Contains the process
    ID of the shell
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$pid  </samp>包含 Shell 的进程 ID
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$env  </samp>Accesses the process
    environment (for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">$env:WinDir</samp>
    to get the *Windows* directory)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$env  </samp>访问进程环境（例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">$env:WinDir</samp>
    获取*Windows* 目录）
- en: You can enumerate all variables using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Variable</samp>
    command.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Variable</samp> 命令枚举所有变量。
- en: In [Table 1-1](chapter1.xhtml#tab1-1), you might have noticed that there were
    two string examples, one using double quotation marks and one using single quotation
    marks. One difference between the two is that a double-quoted string supports
    *string interpolation*, where you insert a variable name into the string as a
    placeholder and PowerShell includes its value in the result. [Listing 1-3](chapter1.xhtml#Lis1-3)
    shows what happens when you do this in double- and single-quoted strings.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表 1-1](chapter1.xhtml#tab1-1)中，你可能注意到有两个字符串示例，一个使用双引号，另一个使用单引号。它们之间的一个区别是，双引号字符串支持*字符串插值*，你可以在字符串中插入变量名作为占位符，PowerShell
    会将其值包含在结果中。[示例 1-3](chapter1.xhtml#Lis1-3)展示了当你在双引号和单引号字符串中进行操作时的结果。
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 1-3: Examples of string interpolation'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1-3：字符串插值示例
- en: First, we define a variable with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">42</samp>
    to insert into a string. Then we create a double-quoted string with the variable
    name inside it. The result is the string with the variable name replaced by its
    value formatted as a string. (If you want more control over the formatting, you
    can use the string formatter operator defined in [Table 1-2](chapter1.xhtml#tab1-2).)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">42</samp> 的变量，以便插入到字符串中。然后，我们创建一个双引号字符串，其中包含变量名。结果是字符串，其中变量名被其格式化为字符串的值替换。（如果你希望更好地控制格式，可以使用[表
    1-2](chapter1.xhtml#tab1-2)中定义的字符串格式化操作符。）
- en: Next, to demonstrate the different behavior of a single-quoted string, we define
    one of these with the variable name inline. We can observe that in this case the
    variable name is copied verbatim and is not replaced by the value.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了演示单引号字符串的不同表现，我们定义了一个内联包含变量名的单引号字符串。我们可以观察到，在这种情况下，变量名被逐字复制，并没有被值替换。
- en: Another difference is that a double-quoted string can contain character escapes
    that are ignored in single-quoted strings. These escapes use a similar syntax
    to those of the C programming language, but instead of a backslash character (\)
    PowerShell uses the backtick (`). This is because Windows uses the backslash as
    a path separator, and writing out filepaths would be very annoying if you had
    to escape every backslash. [Table 1-3](chapter1.xhtml#tab1-3) gives a list of
    character escapes you can use in PowerShell.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个区别是双引号字符串可以包含在单引号字符串中被忽略的字符转义。这些转义使用类似于 C 语言的语法，但 PowerShell 使用反引号（`）而不是反斜杠字符（\）。这是因为
    Windows 使用反斜杠作为路径分隔符，如果每次都需要转义反斜杠，编写文件路径会非常麻烦。[表 1-3](chapter1.xhtml#tab1-3)列出了你可以在
    PowerShell 中使用的字符转义。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-3:</samp> <samp class="SANS_Futura_Std_Book_11">String
    Character Escapes</samp>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 1-3：</samp> <samp class="SANS_Futura_Std_Book_11">字符串字符转义</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Character escape</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Name</samp> |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">字符转义</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp>
    |'
- en: '| --- | --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`0</samp> | <samp class="SANS_Futura_Std_Book_11">NUL
    character, with a value of zero</samp> |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`0</samp> | <samp class="SANS_Futura_Std_Book_11">NUL
    字符，值为零</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`a</samp> | <samp class="SANS_Futura_Std_Book_11">Bell</samp>
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`a</samp> | <samp class="SANS_Futura_Std_Book_11">铃声</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`b</samp> | <samp class="SANS_Futura_Std_Book_11">Backspace</samp>
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`b</samp> | <samp class="SANS_Futura_Std_Book_11">退格符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`n</samp> | <samp class="SANS_Futura_Std_Book_11">Line
    feed</samp> |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`n</samp> | <samp class="SANS_Futura_Std_Book_11">换行符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`r</samp> | <samp class="SANS_Futura_Std_Book_11">Carriage
    return</samp> |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`r</samp> | <samp class="SANS_Futura_Std_Book_11">回车符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`t</samp> | <samp class="SANS_Futura_Std_Book_11">Horizontal
    tab</samp> |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`t</samp> | <samp class="SANS_Futura_Std_Book_11">水平制表符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`v</samp> | <samp class="SANS_Futura_Std_Book_11">Vertical
    tab</samp> |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`v</samp> | <samp class="SANS_Futura_Std_Book_11">垂直制表符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">``</samp> | <samp class="SANS_Futura_Std_Book_11">Backtick
    character</samp> |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">``</samp> | <samp class="SANS_Futura_Std_Book_11">反引号字符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`"</samp> | <samp class="SANS_Futura_Std_Book_11">Double
    quote character</samp> |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`"</samp> | <samp class="SANS_Futura_Std_Book_11">双引号字符</samp>
    |'
- en: 'If you want to insert a double quote character into a double-quoted string,
    you’ll need to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">`"</samp>
    escape. To insert a single quote into a single- quoted string, you double the
    quote character: for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">''Hello''''There''</samp>
    would convert to <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello''There</samp>.
    Note also the mention of a NUL character in this table. As PowerShell uses the
    .NET string type, it can contain embedded NUL characters. Unlike in the C language,
    adding a NUL will not terminate the string prematurely.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在双引号字符串中插入一个双引号字符，你需要使用<samp class="SANS_TheSansMonoCd_W5Regular_11">`"</samp>转义字符。要在单引号字符串中插入单引号字符，你需要将引号字符加倍：例如，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">'Hello''There'</samp>会转换成<samp class="SANS_TheSansMonoCd_W5Regular_11">Hello'There</samp>。另外请注意表格中提到的NUL字符。由于PowerShell使用的是.NET字符串类型，它可以包含嵌入的NUL字符。与C语言不同，添加NUL字符不会提前终止字符串。
- en: 'Because all values are .NET types, we can invoke methods and access properties
    on an object. For example, the following calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">ToCharArray</samp>
    method on a string to convert it to an array of single characters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因为所有值都是.NET类型，所以我们可以在对象上调用方法并访问属性。例如，下面的代码调用了<samp class="SANS_TheSansMonoCd_W5Regular_11">ToCharArray</samp>方法，将字符串转换为单个字符的数组：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can use PowerShell to construct almost any .NET type. The simplest way to
    do this is to cast a value to that type by specifying the .NET type in square
    brackets. When casting, PowerShell will try to find a suitable constructor for
    the type to invoke. For example, the following command will convert a string to
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Guid</samp> object; PowerShell
    will find a constructor that accepts a string and call it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用PowerShell构造几乎任何.NET类型。最简单的方法是通过在方括号中指定.NET类型来将值转换为该类型。在进行类型转换时，PowerShell会尝试查找适合该类型的构造函数并调用它。例如，下面的命令将字符串转换为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">System.Guid</samp>对象；PowerShell会找到接受字符串的构造函数并调用它：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also call a constructor explicitly by calling the <samp class="SANS_TheSansMonoCd_W5Regular_11">new</samp>
    method on the type. The previous example can be rewritten as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过在类型上调用<samp class="SANS_TheSansMonoCd_W5Regular_11">new</samp>方法显式地调用构造函数。之前的示例可以重写如下：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This syntax can also be used to invoke static methods on the type. For example,
    the following calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">NewGuid</samp>
    static method to create a new random globally unique identifier (GUID):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法也可以用来调用类型上的静态方法。例如，下面的代码调用了<samp class="SANS_TheSansMonoCd_W5Regular_11">NewGuid</samp>静态方法来创建一个新的随机全局唯一标识符（GUID）：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can create new objects too, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-Object</samp>
    command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用<samp class="SANS_TheSansMonoCd_W5Regular_11">New-Object</samp>命令来创建新对象：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example is equivalent to the call to the static <samp class="SANS_TheSansMonoCd_W5Regular_11">new</samp>
    function.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例等同于调用静态的<samp class="SANS_TheSansMonoCd_W5Regular_11">new</samp>函数。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Executing Commands</samp>
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">执行命令</samp>
- en: 'Almost all commands in PowerShell are named using a common pattern: a verb
    and a noun, separated by a dash. For example, consider the command <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">Get</samp> verb implies retrieving
    an existing resource, while <samp class="SANS_TheSansMonoCd_W5Regular_11">Item</samp>
    is the type of resource to return.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有 PowerShell 命令都遵循一种常见的命名模式：一个动词和一个名词，通过连字符分隔。例如，考虑命令 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get</samp> 动词表示获取现有资源，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">Item</samp>
    则是要返回的资源类型。
- en: 'Each command can accept a list of parameters that controls the behavior of
    the command. For example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    command accepts a <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> parameter
    that indicates the existing resource to retrieve, as shown here:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令都可以接受一系列参数，这些参数控制命令的行为。例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    命令接受一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> 参数，该参数指示要检索的现有资源，如下所示：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> parameter is
    a *positional* parameter. This means that you can omit the name of the parameter,
    and PowerShell will do its best to select the best match. So, the previous command
    can also be written as the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> 参数是一个 *位置* 参数。这意味着你可以省略参数的名称，PowerShell
    会尽力选择最合适的匹配项。因此，之前的命令也可以写成如下形式：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If a parameter takes a string value, and the string does not contain any special
    characters or whitespace, then you do not need to use quotes around the string.
    For example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    command would also work with the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个参数接受字符串值，并且字符串不包含任何特殊字符或空格，那么你无需在字符串周围使用引号。例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    命令也可以像下面这样使用：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The output of a single command is zero or more values, which can be basic or
    complex object types. You can pass the output of one command to another as input
    using a *pipeline*, which is represented by a vertical bar character, <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>.
    We’ll see examples of using a pipeline when we discuss filtering, grouping, and
    sorting later in this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 单个命令的输出是零个或多个值，这些值可以是基本类型或复杂对象类型。你可以使用 *管道*（由竖线字符 <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>
    表示）将一个命令的输出作为输入传递给另一个命令。稍后在本章中，我们会通过过滤、分组和排序的例子来演示如何使用管道。
- en: 'You can capture the result of an entire command or pipeline into a variable,
    then interact with the results. For example, the following captures the result
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp> command and
    queries for the <samp class="SANS_TheSansMonoCd_W5Regular_11">FullName</samp>
    property:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将整个命令或管道的结果捕获到一个变量中，然后与结果进行交互。例如，下面的命令捕获了 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    命令的结果，并查询 <samp class="SANS_TheSansMonoCd_W5Regular_11">FullName</samp> 属性：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you don’t want to capture the result in a variable, you can enclose the
    command in parentheses and directly access its properties and methods:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想将结果捕获到变量中，你可以将命令括在圆括号中，直接访问其属性和方法：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The length of a command line is effectively infinite. However, you’ll want to
    try to split up long lines to make the commands more readable. The shell will
    automatically split a line on the pipe character. If you need to split a long
    line with no pipes, you can use the backtick character, then start a new line.
    The backtick must be the last character on the line; otherwise, an error will
    occur when the script is parsed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行的长度实际上是无限的。然而，你应该尝试将长行分开，以使命令更易读。Shell 会在管道字符上自动拆分一行。如果你需要拆分一行且没有管道符，你可以使用反引号字符，然后开始新的一行。反引号必须是行尾的最后一个字符；否则，脚本解析时会发生错误。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Discovering Commands
    and Getting Help</samp>
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">发现命令和获取帮助</samp>
- en: A default installation of PowerShell has hundreds of commands to choose from.
    This means that finding a command to perform a specific task can be difficult,
    and even if you find the command, it might not be clear how to use it. To help,
    you can use two built-in commands, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 默认安装的PowerShell有成百上千的命令可供选择。这意味着找到执行特定任务的命令可能很困难，即使你找到了命令，如何使用它也可能不清晰。为了帮助，你可以使用两个内置命令，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp> command
    can be used to enumerate all the commands available to you. In its simplest form,
    you can execute it without any parameters and it will print all commands from
    all modules. However, it’s probably more useful to filter on a specific word you’re
    interested in. For example, [Listing 1-4](chapter1.xhtml#Lis1-4) will list only
    the commands with the word <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    in their names.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp>命令可用于列举所有可用的命令。在最简单的形式下，你可以在不带任何参数的情况下执行它，它将打印出所有模块中的所有命令。然而，通常更有用的是筛选出你感兴趣的特定词。例如，[Listing
    1-4](chapter1.xhtml#Lis1-4)将仅列出名称中包含<samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>的命令。
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 1-4: Using Get-Command to enumerate commands'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 1-4：使用Get-Command列举命令
- en: This command uses *wildcard syntax* to list only commands whose names include
    the specified word. Wildcard syntax uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>
    character to represent any character or series of characters. Here, we’ve put
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> on both sides of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp> to indicate
    that any text can come before or after it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令使用*通配符语法*来列出仅包含指定单词的命令。通配符语法使用<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>字符来表示任何字符或字符序列。在这里，我们在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>的两侧都加上了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">*</samp>，表示它前后可以有任意文本。
- en: You can also list the commands available in a module. For example, [Listing
    1-5](chapter1.xhtml#Lis1-5) will list only the commands that are exported by the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObjectManager</samp> module and
    begin with the verb <samp class="SANS_TheSansMonoCd_W5Regular_11">Start</samp>.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以列出某个模块中可用的命令。例如，[Listing 1-5](chapter1.xhtml#Lis1-5)将仅列出由<samp class="SANS_TheSansMonoCd_W5Regular_11">NtObjectManager</samp>模块导出的并以动词<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Start</samp>开头的命令。
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 1-5: Using Get-Command to enumerate commands in the NtObjectManager
    module'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 1-5：使用Get-Command列举NtObjectManager模块中的命令
- en: Once you’ve found a command that looks promising, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>
    command to inspect its parameters and get some usage examples. In [Listing 1-6](chapter1.xhtml#Lis1-6),
    we take the <samp class="SANS_TheSansMonoCd_W5Regular_11">Start-NtWait</samp>
    command from [Listing 1-5](chapter1.xhtml#Lis1-5) and pass it to <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你找到了一个看起来有前景的命令，你可以使用<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>命令来检查它的参数并获取一些用法示例。在[Listing
    1-6](chapter1.xhtml#Lis1-6)中，我们从[Listing 1-5](chapter1.xhtml#Lis1-5)中拿出<code>Start-NtWait</code>命令并传递给<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>。
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 1-6: Displaying help for the Start-NtWait command'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 1-6：显示Start-NtWait命令的帮助
- en: 'By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp> outputs
    the name of the command ❶, a short synopsis ❷, the syntax of the command ❸, and
    a more in-depth description ❹. In the command syntax section, you can see its
    multiple possible modes of operation: in this case, either specifying a time in
    hours, minutes, seconds, and/or milliseconds, or specifying <samp class="SANS_TheSansMonoCd_W5Regular_11">Infinite</samp>
    to wait indefinitely.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>输出命令的名称❶，简短的概述❷，命令的语法❸，以及更深入的描述❹。在命令语法部分，你可以看到它的多种可能操作模式：在这种情况下，可以指定小时、分钟、秒和/或毫秒的时间，或者指定<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Infinite</samp>来无限期等待。
- en: When any part of the syntax is shown in brackets, <samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp>,
    that means it’s optional. For example, the only required parameter is <samp class="SANS_TheSansMonoCd_W5Regular_11">Object</samp>,
    which takes an array of <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObject</samp>
    values. Even the name of this parameter is optional, as <samp class="SANS_TheSansMonoCd_W5Regular_11">-Object</samp>
    is in brackets.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当语法的任何部分显示在括号中<samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp>时，表示它是可选的。例如，唯一必需的参数是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Object</samp>，它接受一个<samp class="SANS_TheSansMonoCd_W5Regular_11">NtObject</samp>值的数组。即使该参数的名称也是可选的，因为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">-Object</samp>是括起来的。
- en: You can get more information about a parameter by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Parameter</samp>
    command. [Listing 1-7](chapter1.xhtml#Lis1-7) shows the details for the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Object</samp> parameter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用<samp class="SANS_TheSansMonoCd_W5Regular_11">Parameter</samp>命令获取更多关于参数的信息。[列表
    1-7](chapter1.xhtml#Lis1-7)显示了<Object>参数的详细信息。
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Listing 1-7: Querying the details of the Object parameter with the Parameter
    command'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-7：使用 Parameter 命令查询 Object 参数的详细信息
- en: You can use wildcard syntax to select a group of similar parameter names. For
    example, if you specify <samp class="SANS_TheSansMonoCd_W5Regular_11">Obj*</samp>,
    then you’ll get information about any parameters whose names start with the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Obj</samp> prefix.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用通配符语法来选择一组相似的参数名称。例如，如果你指定<samp class="SANS_TheSansMonoCd_W5Regular_11">Obj*</samp>，那么你将获取所有名称以<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Obj</samp>为前缀的参数的详细信息。
- en: If you want usage examples for a command, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Examples</samp>
    parameter, as demonstrated in [Listing 1-8](chapter1.xhtml#Lis1-8).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看命令的使用示例，请使用<samp class="SANS_TheSansMonoCd_W5Regular_11">Examples</samp>参数，如[列表
    1-8](chapter1.xhtml#Lis1-8)所示。
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Listing 1-8: Showing examples for Start-NtWait'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-8：显示 Start-NtWait 的示例
- en: 'Each example should include a one- or two-line snippet of a PowerShell script
    ❶ and a description of what it does ❷. You can also see the full help output for
    the command by specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Full</samp>
    parameter. To view this output in a separate pop-up window, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">ShowWindow</samp>
    parameter. For example, try running this command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例应包括一行或两行 PowerShell 脚本片段 ❶ 和对其功能的描述 ❷。你还可以通过指定<samp class="SANS_TheSansMonoCd_W5Regular_11">Full</samp>参数查看命令的完整帮助输出。要在单独的弹出窗口中查看该输出，请使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">ShowWindow</samp>参数。例如，可以尝试运行以下命令：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You should see the dialog shown in [Figure 1-1](chapter1.xhtml#fig1-1).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到在[图 1-1](chapter1.xhtml#fig1-1)中显示的对话框。
- en: '![](../images/Figure1-1.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure1-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-1: A dialog showing
    Get-Help information using the ShowWindow parameter</samp>'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 1-1：使用 ShowWindow 参数显示 Get-Help
    信息的对话框</samp>
- en: 'One final topic to mention about commands is that you can set up *aliases*,
    or alternative names for the commands. For example, you can use an alias to make
    commands shorter to type. PowerShell comes with many aliases predefined, and you
    can define your own using the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-Alias</samp>
    command. For example, we can set the <samp class="SANS_TheSansMonoCd_W5Regular_11">Start-NtWait</samp>
    command to have the alias <samp class="SANS_TheSansMonoCd_W5Regular_11">swt</samp>
    by doing the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要提到的一点是关于命令的，你可以设置*别名*，即命令的替代名称。例如，你可以使用别名来使命令的输入更短。PowerShell 提供了许多预定义的别名，你也可以使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">New-Alias</samp>命令定义自己的别名。例如，我们可以将<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Start-NtWait</samp>命令设置为别名<samp class="SANS_TheSansMonoCd_W5Regular_11">swt</samp>，方法如下：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To display a list of all the defined aliases, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Alias</samp>
    command. We’ll avoid using aliases unnecessarily throughout this book, as it can
    make the scripts more confusing if you don’t know what an alias represents.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示所有已定义的别名列表，请使用<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Alias</samp>命令。我们将在本书中尽量避免不必要地使用别名，因为如果你不知道别名代表什么，脚本可能会变得更加混乱。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Defining Functions</samp>
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">定义函数</samp>
- en: As with all programming languages, it pays to reduce complexity in PowerShell.
    One way of reducing complexity is to combine common code into a function. Once
    a function is defined, the PowerShell script can call the function rather than
    needing to repeat the same code in multiple places. The basic function syntax
    in PowerShell is simple; [Listing 1-9](chapter1.xhtml#Lis1-9) shows an example.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 和所有编程语言一样，PowerShell 中减少复杂性是很有必要的。减少复杂性的一种方法是将常用代码组合成一个函数。定义了函数后，PowerShell
    脚本可以调用该函数，而无需在多个地方重复相同的代码。PowerShell 中的基本函数语法很简单；[Listing 1-9](chapter1.xhtml#Lis1-9)展示了一个示例。
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Listing 1-9: Defining a simple PowerShell function called Get-NameValue'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 1-9: 定义一个名为 Get-NameValue 的简单 PowerShell 函数'
- en: The syntax for defining a function starts with the keyword <samp class="SANS_TheSansMonoCd_W5Regular_11">function</samp>
    followed by the name of the function you want to define. While it’s not required
    to use the standard PowerShell command naming convention of a verb followed by
    a noun, it pays to do so, as it makes it clear to the user what your function
    does.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 定义函数的语法以关键字<samp class="SANS_TheSansMonoCd_W5Regular_11">function</samp>开始，后面跟着你想定义的函数名。虽然不要求使用标准的
    PowerShell 命令命名约定（即动词后跟名词），但这样做是有好处的，因为它能清楚地告诉用户你的函数功能是什么。
- en: Next, you define the function’s named parameters. Like variables, parameters
    are defined using a name prefixed with <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>,
    as you can see in [Listing 1-9](chapter1.xhtml#Lis1-9). You can specify a type
    in brackets, but this is optional; in this example, <samp class="SANS_TheSansMonoCd_W5Regular_11">$Name</samp>
    is a string, but the <samp class="SANS_TheSansMonoCd_W5Regular_11">$Value</samp>
    parameter can take any value from the caller. Specifying named parameters is not
    required. If no <samp class="SANS_TheSansMonoCd_W5Regular_11">param</samp> block
    is included, then any passed arguments are placed in the <samp class="SANS_TheSansMonoCd_W5Regular_11">$args</samp>
    array. The first parameter is located at <samp class="SANS_TheSansMonoCd_W5Regular_11">$args[0]</samp>,
    the second at <samp class="SANS_TheSansMonoCd_W5Regular_11">$args[1]</samp>, and
    so on.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义函数的命名参数。像变量一样，参数通过名称前加<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>来定义，如[Listing
    1-9](chapter1.xhtml#Lis1-9)所示。你可以在方括号中指定类型，但这是可选的；在这个例子中，<samp class="SANS_TheSansMonoCd_W5Regular_11">$Name</samp>是一个字符串，而<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$Value</samp>参数可以接受调用方传递的任何值。指定命名参数并不是必须的。如果没有包含<samp
    class="SANS_TheSansMonoCd_W5Regular_11">param</samp>块，则所有传递的参数将放入<samp class="SANS_TheSansMonoCd_W5Regular_11">$args</samp>数组中。第一个参数位于<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$args[0]</samp>，第二个位于<samp class="SANS_TheSansMonoCd_W5Regular_11">$args[1]</samp>，以此类推。
- en: The body of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NameValue</samp>
    function takes the parameters and builds a string using string interpolation.
    The function returns the string using the <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    keyword, which also immediately finishes the function. You can omit the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">return</samp> keyword in this case, as
    PowerShell will return any values uncaptured in variables.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NameValue</samp>函数的主体接受参数，并使用字符串插值构建一个字符串。该函数通过<samp
    class="SANS_TheSansMonoCd_W5Regular_11">return</samp>关键字返回字符串，且同时立即结束函数。在这种情况下，你可以省略<samp
    class="SANS_TheSansMonoCd_W5Regular_11">return</samp>关键字，因为 PowerShell 会返回未被变量捕获的任何值。
- en: After defining the function, we invoke it. You can specify the parameter names
    explicitly. However, if the call is unambiguous, then specifying the parameter
    names is not required. [Listing 1-9](chapter1.xhtml#Lis1-9) shows both approaches.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 定义完函数后，我们调用它。你可以显式指定参数名称。然而，如果调用没有歧义，那么不需要指定参数名称。[Listing 1-9](chapter1.xhtml#Lis1-9)展示了这两种方法。
- en: If you want to run a small block of code without defining a function, you can
    create a script block. A *script block* is one or more statements enclosed in
    braces, <samp class="SANS_TheSansMonoCd_W5Regular_11">{}</samp>. This block can
    be assigned to a variable and executed when needed using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Invoke-Command</samp>
    command or the <samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp> operator,
    as shown in [Listing 1-10](chapter1.xhtml#Lis1-10).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想运行一个小块代码而不定义函数，可以创建一个脚本块。*脚本块*是一个或多个语句，封装在大括号<samp class="SANS_TheSansMonoCd_W5Regular_11">{}</samp>中。这个块可以赋值给一个变量，并在需要时使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Invoke-Command</samp>命令或<samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp>运算符执行，如[Listing
    1-10](chapter1.xhtml#Lis1-10)所示。
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Listing 1-10: Creating a script block and executing it'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Displaying and Manipulating
    Objects</samp>
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you execute a command and do not capture the results in a variable, the results
    are passed to the PowerShell console. The console will use a formatter to display
    the results, in either a table or a list (the format is chosen automatically depending
    on the types of objects contained in the results). It’s also possible to specify
    custom formatters. For example, if you use the built-in <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp>
    command to retrieve the list of running processes, PowerShell uses a custom formatter
    to display the entries as a table, as shown in [Listing 1-11](chapter1.xhtml#Lis1-11).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Listing 1-11: Outputting the process list as a table'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: If you want to reduce the number of columns in the output, you can use the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Select-Object</samp> command to select
    only the properties you need. For example, [Listing 1-12](chapter1.xhtml#Lis1-12)
    selects the <samp class="SANS_TheSansMonoCd_W5Regular_11">Id</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ProcessName</samp> properties.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Listing 1-12: Selecting only the Id and ProcessName properties'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: You can change the default behavior of the output by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-List</samp> command, which
    will force table or list formatting, respectively. For example, [Listing 1-13](chapter1.xhtml#Lis1-13)
    shows how to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-List</samp>
    command to change the output to a list.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Listing 1-13: Using Format-List to show processes in a list view'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: To find the names of the available properties, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Member</samp>
    command on one of the objects that <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp>
    returns. For example, [Listing 1-14](chapter1.xhtml#Lis1-14) lists the properties
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> object.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Listing 1-14: Using the Get-Member command to list properties of the Process
    object'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that there are other properties not included in the output.
    To display them, you need to override the custom formatting. The simplest way
    to access the hidden properties is to use <samp class="SANS_TheSansMonoCd_W5Regular_11">Select-Object</samp>
    to extract the values explicitly, or specify the properties to display to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp> or <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-List</samp>
    command. You can use <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> as
    a wildcard to show all properties, as in [Listing 1-15](chapter1.xhtml#Lis1-15).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Listing 1-15: Showing all the properties of the Process object in a list'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Many objects also have methods you can call to perform some action on the object.
    [Listing 1-16](chapter1.xhtml#Lis1-16) shows how you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Member</samp>
    to query for methods.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Listing 1-16: Displaying the methods on a Process object'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: If the output from a command is too long to fit on the screen, you can *page*
    the output so that only the first part is displayed, and the console will wait
    for you to press a key before displaying more. You can enable paging by piping
    the output to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-Host</samp>
    command and specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Paging</samp>
    parameter, or by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">more</samp>
    command. [Listing 1-17](chapter1.xhtml#Lis1-17) shows an example.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Listing 1-17: Paging output using Out-Host'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'You can write directly to the console window by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-Host</samp>
    command in your own scripts. This allows you to change the colors of the output
    to suit your taste, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ForegroundColor</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">BackgroundColor</samp> parameters.
    It also has the advantage of not inserting objects into the pipeline by default,
    as shown here:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This means that, by default, you can’t redirect the output to a file or into
    a pipeline. However, you can redirect the host output by redirecting its stream
    to the standard output stream using a command like the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'PowerShell also supports a basic GUI to display tables of objects. To access
    it, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-GridView</samp>
    command. Note that the custom formatting will still restrict what columns PowerShell
    displays. If you want to view other columns, use <samp class="SANS_TheSansMonoCd_W5Regular_11">Select-Object</samp>
    in the pipeline to select the properties. The following example displays all properties
    in the Grid View GUI:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Running this command should show a dialog like [Figure 1-2](chapter1.xhtml#fig1-2).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure1-2.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-2: Showing Process
    objects in a grid view</samp>'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: You can filter and manipulate the data in the Grid View GUI. Try playing around
    with the controls. You can also specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">PassThru</samp>
    parameter to <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-GridView</samp>,
    which causes the command to wait for you to click the OK button in the GUI. Any
    rows in the view that are selected when you click OK will be written to the command
    pipeline.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Filtering, Ordering,
    and Grouping Objects</samp>
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A traditional shell passes raw text between commands; PowerShell passes objects.
    Passing objects lets you access individual properties of the objects and trivially
    filter the pipeline. You can even order and group the objects easily.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 shell 在命令之间传递原始文本；而 PowerShell 传递对象。传递对象使你能够访问对象的单个属性并轻松地过滤管道。你甚至可以轻松地对对象进行排序和分组。
- en: You can filter objects using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp>
    command, which has the aliases <samp class="SANS_TheSansMonoCd_W5Regular_11">Where</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">?</samp>. The simplest filter
    is to check for the value of a parameter, as shown in [Listing 1-18](chapter1.xhtml#Lis1-18),
    where we filter the output from the built-in <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp>
    command to find the <samp class="SANS_TheSansMonoCd_W5Regular_11">explorer</samp>
    process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用<sup><samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp></sup>命令来过滤对象，该命令有别名<sup><samp
    class="SANS_TheSansMonoCd_W5Regular_11">Where</samp></sup>和<sup><samp class="SANS_TheSansMonoCd_W5Regular_11">?</samp></sup>。最简单的过滤方法是检查参数的值，如在[清单
    1-18](chapter1.xhtml#Lis1-18)中所示，我们通过内建的<sup><samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp></sup>命令的输出来过滤并查找<sup><samp
    class="SANS_TheSansMonoCd_W5Regular_11">explorer</samp></sup>进程。
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Listing 1-18: Filtering a list of processes using Where-Object'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-18：使用 Where-Object 过滤进程列表
- en: In [Listing 1-18](chapter1.xhtml#Lis1-18), we pass through only <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp>
    objects where the <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName</samp>
    equals (<samp class="SANS_TheSansMonoCd_W5Regular_11">-EQ</samp>) <samp class="SANS_TheSansMonoCd_W5Regular_11">"explorer"</samp>.
    There are numerous operators you can use for filtering, some of which are shown
    in [Table 1-4](chapter1.xhtml#tab1-4).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 1-18](chapter1.xhtml#Lis1-18)中，我们只通过<sup><samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp></sup>对象，其中<sup><samp
    class="SANS_TheSansMonoCd_W5Regular_11">ProcessName</samp></sup>等于(<sup><samp
    class="SANS_TheSansMonoCd_W5Regular_11">-EQ</samp></sup>) <sup><samp class="SANS_TheSansMonoCd_W5Regular_11">"explorer"</samp></sup>。有许多运算符可以用于过滤，其中一些显示在[表
    1-4](chapter1.xhtml#tab1-4)中。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-4:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Operators for</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 1-4：</samp> <samp class="SANS_Futura_Std_Book_11">Where-Object
    常见运算符</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Example</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">运算符</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">示例</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-EQ</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -EQ "explorer"</samp> | <samp class="SANS_Futura_Std_Book_11">Equal to the value</samp>
    |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-EQ</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -EQ "explorer"</samp> | <samp class="SANS_Futura_Std_Book_11">与值相等</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NE "explorer"</samp> | <samp class="SANS_Futura_Std_Book_11">Not equal to the
    value</samp> |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NE "explorer"</samp> | <samp class="SANS_Futura_Std_Book_11">与值不相等</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-Match</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -Match "ex.*"</samp> | <samp class="SANS_Futura_Std_Book_11">Matches a string
    against a regular expression</samp> |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-Match</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -Match "ex.*"</samp> | <samp class="SANS_Futura_Std_Book_11">使用正则表达式匹配字符串</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NotMatch</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NotMatch "ex.*"</samp> | <samp class="SANS_Futura_Std_Book_11">Inverse of the</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-Match</samp> <samp class="SANS_Futura_Std_Book_11">operator</samp>
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NotMatch</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NotMatch "ex.*"</samp> | <samp class="SANS_Futura_Std_Book_11">反向匹配</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">-Match</samp> <samp class="SANS_Futura_Std_Book_11">操作符</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-Like</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -Like "ex*"</samp> | <samp class="SANS_Futura_Std_Book_11">Matches a string against
    a wildcard</samp> |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-Like</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -Like "ex*"</samp> | <samp class="SANS_Futura_Std_Book_11">与通配符匹配的字符串</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NotLike</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NotLike "ex*"</samp> | <samp class="SANS_Futura_Std_Book_11">Inverse of the</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-Like</samp> <samp class="SANS_Futura_Std_Book_11">operator</samp>
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-GT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -GT "ex"</samp> | <samp class="SANS_Futura_Std_Book_11">Greater-than comparison</samp>
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-LT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -LT "ex</samp><samp class="SANS_Futura_Std_Heavy_B_11">"</samp> | <samp class="SANS_Futura_Std_Book_11">Less-than
    comparison</samp> |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: 'You can investigate all of the supported operators by using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp> command.
    If the condition to filter on is more complex than a simple comparison, you can
    use a script block. The script block should return <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    to keep the object in the pipeline or <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    to filter it. For example, you could also write [Listing 1-18](chapter1.xhtml#Lis1-18)
    as the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">$_</samp> variable passed
    to the script block represents the current object in the pipeline. By using a
    script block you can access the entire language in your filtering, including calling
    functions.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: To order objects, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Sort-Object</samp>
    command. If the objects can be ordered, as in the case of strings or numbers,
    then you just need to pipe the objects into the command. Otherwise, you’ll need
    to specify a property to sort on. For example, you can sort the process list by
    its handle count, represented by the <samp class="SANS_TheSansMonoCd_W5Regular_11">Handles</samp>
    property, as shown in [Listing 1-19](chapter1.xhtml#Lis1-19).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Listing 1-19: Sorting processes by the number of handles'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: To sort in descending order instead of ascending order, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Descending</samp>
    parameter, as shown in [Listing 1-20](chapter1.xhtml#Lis1-20).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Listing 1-20: Sorting processes by the number of handles in descending order'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to filter out duplicate entries at this stage by specifying
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Unique</samp> parameter to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Sort-Object</samp>.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can group objects based on a property name using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Group-Object</samp>
    command. [Listing 1-21](chapter1.xhtml#Lis1-21) shows that this command returns
    a list of objects, each with <samp class="SANS_TheSansMonoCd_W5Regular_11">Count</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>
    properties.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Listing 1-21: Grouping Process objects by ProcessName'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use all of these commands together in one pipeline,
    as shown in [Listing 1-22](chapter1.xhtml#Lis1-22).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Listing 1-22: Combining Where-Object, Group-Object, and Sort-Object'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Exporting Data</samp>
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you’ve got the perfect set of objects you want to inspect, you might want
    to persist that information to a file on disk. PowerShell provides numerous options
    for this, a few of which I’ll discuss here. The first option is to output the
    objects to a file as text, using <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-File</samp>.
    This command captures the formatted text output and writes it to a file. You can
    use <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Content</samp> to read the
    file back in again, as shown in [Listing 1-23](chapter1.xhtml#Lis1-23).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Listing 1-23: Writing content to a text file and reading it back in again'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the greater-than operator to send the output to a file, as
    in other shells. For example:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If you want a more structured format, you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">Export-Csv</samp>
    to convert the object to a comma-separated value (CSV) table format. You could
    then import this file into a spreadsheet program to analyze offline. The example
    in [Listing 1-24](chapter1.xhtml#Lis1-24) selects some properties of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> object and exports them
    to the CSV file *processes.csv*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Listing 1-24: Exporting objects to a CSV file'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible to reimport the CSV data using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-Csv</samp>
    command. However, if you expect to export the data and then reimport it later,
    you’ll probably prefer the CLI XML format. This format can include the structure
    and type of the original object, which allows you to reconstruct it when you import
    the data. [Listing 1-25](chapter1.xhtml#Lis1-25) shows how you can use the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Export-CliXml</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-CliXml</samp>
    commands to export objects in this format and then reimport them.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Listing 1-25: Exporting and reimporting CLI XML files'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our discussion of the PowerShell language. If you’re a little
    rusty, I recommend picking up a good book on the topic, such as *PowerShell for
    Sysadmins* by Adam Bertram (No Starch Press, 2020).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wrapping Up</samp>
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter gave a short overview of how to set up your PowerShell environment
    so that you can run the code examples included throughout the book. We discussed
    configuring PowerShell to run scripts and installing the required external PowerShell
    module.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the chapter provided a bit of background on the PowerShell language.
    This included the basics of PowerShell syntax, as well as discovering commands
    using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp>, getting
    help using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>, and
    displaying, filtering, grouping, and exporting PowerShell objects.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: With the basics of PowerShell out of the way, we can start to dive into the
    inner workings of the Windows operating system. In the next chapter, we’ll discuss
    the Windows kernel and how you can interact with it using PowerShell.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
