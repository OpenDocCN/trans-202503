- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SETTING
    UP A POWERSHELL TESTING ENVIRONMENT</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll configure PowerShell so you can work through the code
    examples presented in the rest of the book. Then, we’ll walk through a very quick
    overview of the PowerShell language, including its types, variables, and expressions.
    We’ll also cover how to execute its commands, how to get help, and how to export
    data for later use.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Choosing a PowerShell Version</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most important tool you’ll need to use this book effectively is PowerShell,
    which has been installed on the Windows operating system by default since Windows
    7\. However, there are many different versions of this tool. The version installed
    by default on currently supported versions of Windows is 5.1, which is suitable
    for our purposes, even though Microsoft no longer fully supports it. More recent
    versions of PowerShell are cross platform and open source but must be installed
    separately on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: All the code presented in this book will run in both PowerShell 5.1 and the
    latest open source version, so it doesn’t matter which you choose. If you want
    to use the open source PowerShell, visit the project’s GitHub page at *[https://<wbr>github<wbr>.com<wbr>/PowerShell<wbr>/PowerShell](https://github.com/PowerShell/PowerShell)*
    to find installation instructions for your version of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Configuring PowerShell</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we need to do in PowerShell is set the *script execution policy*,
    which determines what types of scripts PowerShell can execute. For Windows clients
    running PowerShell 5.1, the default is <samp class="SANS_TheSansMonoCd_W5Regular_11">Restricted</samp>,
    which blocks all scripts from running unless they are signed with a trusted certificate.
    As the scripts in this book are unsigned, we’ll change the execution policy to
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RemoteSigned</samp>. This execution
    policy allows us to run unsigned PowerShell scripts if they’re created locally
    but will not allow us to execute unsigned scripts downloaded in a web browser
    or attached to emails. Run the following command to set the execution policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The command changes the execution policy for the current user only, not the
    entire system. If you want to change it for all users, you’ll need to start PowerShell
    as an administrator and then rerun the command, removing the <samp class="SANS_TheSansMonoCd_W5Regular_11">Scope</samp>
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the open source version of PowerShell or version 5.1 on Windows
    Server, then the default script execution policy is <samp class="SANS_TheSansMonoCd_W5Regular_11">RemoteSigned</samp>
    and you do not need to change anything.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can run unsigned scripts, we can install the PowerShell module we’ll
    be using for this book. A PowerShell *module* is a package of scripts and .NET
    binaries that export PowerShell commands. Every installation of PowerShell comes
    preinstalled with several modules for tasks ranging from configuring your applications
    to setting up Windows Update. You can install a module manually by copying its
    files, but the easiest approach is to use the PowerShell Gallery (*[https://<wbr>www<wbr>.powershellgallery<wbr>.com](https://www.powershellgallery.com)*),
    an online repository of modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a module from the PowerShell Gallery, we use PowerShell’s <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Install-Module</samp> command. For this
    book, we’ll need to install the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObjectManager</samp>
    module, which we can do using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure to say yes if the installer asks you any questions (after you’ve
    read and understood the question, of course). If you have the module installed
    already, you can ensure that you have the latest version by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Update-Module</samp>
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it’s installed, you can load the module using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-Module</samp>
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you see any errors after importing the module, double-check that you’ve correctly
    set the execution policy; that’s the most common reason for the module not loading
    correctly. As a final test, let’s run a command that comes with the module to
    check that it’s working. Execute the command in [Listing 1-1](chapter1.xhtml#Lis1-1)
    and verify that the output matches what you see in the PowerShell console. We’ll
    explore the purpose of this command in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-1: Testing that the NtObjectManager module is working'
  prefs: []
  type: TYPE_NORMAL
- en: If everything is working and you’re comfortable with PowerShell, you can move
    on to the next chapter. If you need a quick refresher on the PowerShell language,
    keep reading.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">An Overview of the PowerShell Language</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete introduction to PowerShell is beyond the scope of this book. However,
    this section touches on various language features you’ll need to be familiar with
    to use the book most effectively.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Understanding Types,
    Variables, and Expressions</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: PowerShell supports many different types, from basic integers and strings to
    complex objects. [Table 1-1](chapter1.xhtml#tab1-1) shows some of the most common
    built-in types, along with the underlying .NET runtime types and some simple examples.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-1:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Basic PowerShell Types with .NET Types and Examples</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">.NET
    type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Examples</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Int32</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">142</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x8E</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0216</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Int64</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">142L</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x8EL</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0216L</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">string</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.String</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello"</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''World!''</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Double</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">1.0</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1e10</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bool</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Boolean</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">array</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Object[]</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@(1, "ABC", $true)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">hashtable</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Collections.Hashtable</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@{A=1; B="ABC"}</samp> |'
  prefs: []
  type: TYPE_TB
- en: To perform calculations on basic types, we can use well-known operators such
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">−</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>.
    These operators can be overloaded; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    is used for addition as well as for concatenating strings and arrays. [Table 1-2](chapter1.xhtml#tab1-2)
    provides a list of common operators, with simple examples and their results. You
    can test the examples yourself to check the output of each operator.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-2:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Operators</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Examples</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Results</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> | <samp class="SANS_Futura_Std_Book_11">Addition
    or concatenation</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello"</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"World!"</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"HelloWorld!"</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">−</samp> | <samp class="SANS_Futura_Std_Book_11">Subtraction</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2 − 1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> | <samp class="SANS_Futura_Std_Book_11">Multiplication</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2 * 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp> | <samp class="SANS_Futura_Std_Book_11">Division</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">8 / 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp> | <samp class="SANS_Futura_Std_Book_11">Modulus</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">6 % 4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp> | <samp class="SANS_Futura_Std_Book_11">Index</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">@(3, 2, 1, 0)[1]</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-f</samp> | <samp class="SANS_Futura_Std_Book_11">String
    formatter</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"0x{0:X} {1}"
    -f 42, 123</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"0x2A 123"</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-band</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    AND</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x1FF -band 0xFF</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">255</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bor</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    OR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100 -bor 0x20</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">288</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bxor</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    XOR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xCC -bxor 0xDD</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">17</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-bnot</samp> | <samp class="SANS_Futura_Std_Book_11">Bitwise
    NOT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">-bnot 0xEE</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-239</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-and</samp> | <samp class="SANS_Futura_Std_Book_11">Boolean
    AND</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true -and $false</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-or</samp> | <samp class="SANS_Futura_Std_Book_11">Boolean
    OR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true -or $false</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-not</samp> | <samp class="SANS_Futura_Std_Book_11">Boolean
    NOT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">-not $true</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-eq</samp> | <samp class="SANS_Futura_Std_Book_11">Equals</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello" -eq "Hello"</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-ne</samp> | <samp class="SANS_Futura_Std_Book_11">Not
    equals</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"Hello" -ne "Hello"</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-lt</samp> | <samp class="SANS_Futura_Std_Book_11">Less
    than</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4 -lt 10</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$true</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-gt</samp> | <samp class="SANS_Futura_Std_Book_11">Greater
    than</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4 -gt 10</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$false</samp> |'
  prefs: []
  type: TYPE_TB
- en: You can assign values to variables using the assignment operator, <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>.
    A variable has an alphanumeric name prefixed with the <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>
    character. For example, [Listing 1-2](chapter1.xhtml#Lis1-2) shows how you can
    capture an array in a variable and use the indexing operator to look up a value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-2: Capturing an array in a variable and indexing it via the variable
    name'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also some predefined variables we’ll use in the rest of this book.
    These variables are:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$null  </samp>Represents the NULL
    value, which indicates the absence of a value in comparisons
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$pwd  </samp>Contains the current
    working directory
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$pid  </samp>Contains the process
    ID of the shell
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">$env  </samp>Accesses the process
    environment (for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">$env:WinDir</samp>
    to get the *Windows* directory)
  prefs: []
  type: TYPE_NORMAL
- en: You can enumerate all variables using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Variable</samp>
    command.
  prefs: []
  type: TYPE_NORMAL
- en: In [Table 1-1](chapter1.xhtml#tab1-1), you might have noticed that there were
    two string examples, one using double quotation marks and one using single quotation
    marks. One difference between the two is that a double-quoted string supports
    *string interpolation*, where you insert a variable name into the string as a
    placeholder and PowerShell includes its value in the result. [Listing 1-3](chapter1.xhtml#Lis1-3)
    shows what happens when you do this in double- and single-quoted strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-3: Examples of string interpolation'
  prefs: []
  type: TYPE_NORMAL
- en: First, we define a variable with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">42</samp>
    to insert into a string. Then we create a double-quoted string with the variable
    name inside it. The result is the string with the variable name replaced by its
    value formatted as a string. (If you want more control over the formatting, you
    can use the string formatter operator defined in [Table 1-2](chapter1.xhtml#tab1-2).)
  prefs: []
  type: TYPE_NORMAL
- en: Next, to demonstrate the different behavior of a single-quoted string, we define
    one of these with the variable name inline. We can observe that in this case the
    variable name is copied verbatim and is not replaced by the value.
  prefs: []
  type: TYPE_NORMAL
- en: Another difference is that a double-quoted string can contain character escapes
    that are ignored in single-quoted strings. These escapes use a similar syntax
    to those of the C programming language, but instead of a backslash character (\)
    PowerShell uses the backtick (`). This is because Windows uses the backslash as
    a path separator, and writing out filepaths would be very annoying if you had
    to escape every backslash. [Table 1-3](chapter1.xhtml#tab1-3) gives a list of
    character escapes you can use in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-3:</samp> <samp class="SANS_Futura_Std_Book_11">String
    Character Escapes</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Character escape</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Name</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`0</samp> | <samp class="SANS_Futura_Std_Book_11">NUL
    character, with a value of zero</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`a</samp> | <samp class="SANS_Futura_Std_Book_11">Bell</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`b</samp> | <samp class="SANS_Futura_Std_Book_11">Backspace</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`n</samp> | <samp class="SANS_Futura_Std_Book_11">Line
    feed</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`r</samp> | <samp class="SANS_Futura_Std_Book_11">Carriage
    return</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`t</samp> | <samp class="SANS_Futura_Std_Book_11">Horizontal
    tab</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`v</samp> | <samp class="SANS_Futura_Std_Book_11">Vertical
    tab</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">``</samp> | <samp class="SANS_Futura_Std_Book_11">Backtick
    character</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">`"</samp> | <samp class="SANS_Futura_Std_Book_11">Double
    quote character</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'If you want to insert a double quote character into a double-quoted string,
    you’ll need to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">`"</samp>
    escape. To insert a single quote into a single- quoted string, you double the
    quote character: for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">''Hello''''There''</samp>
    would convert to <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello''There</samp>.
    Note also the mention of a NUL character in this table. As PowerShell uses the
    .NET string type, it can contain embedded NUL characters. Unlike in the C language,
    adding a NUL will not terminate the string prematurely.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because all values are .NET types, we can invoke methods and access properties
    on an object. For example, the following calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">ToCharArray</samp>
    method on a string to convert it to an array of single characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use PowerShell to construct almost any .NET type. The simplest way to
    do this is to cast a value to that type by specifying the .NET type in square
    brackets. When casting, PowerShell will try to find a suitable constructor for
    the type to invoke. For example, the following command will convert a string to
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Guid</samp> object; PowerShell
    will find a constructor that accepts a string and call it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also call a constructor explicitly by calling the <samp class="SANS_TheSansMonoCd_W5Regular_11">new</samp>
    method on the type. The previous example can be rewritten as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This syntax can also be used to invoke static methods on the type. For example,
    the following calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">NewGuid</samp>
    static method to create a new random globally unique identifier (GUID):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create new objects too, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-Object</samp>
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This example is equivalent to the call to the static <samp class="SANS_TheSansMonoCd_W5Regular_11">new</samp>
    function.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Executing Commands</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Almost all commands in PowerShell are named using a common pattern: a verb
    and a noun, separated by a dash. For example, consider the command <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">Get</samp> verb implies retrieving
    an existing resource, while <samp class="SANS_TheSansMonoCd_W5Regular_11">Item</samp>
    is the type of resource to return.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each command can accept a list of parameters that controls the behavior of
    the command. For example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    command accepts a <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> parameter
    that indicates the existing resource to retrieve, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> parameter is
    a *positional* parameter. This means that you can omit the name of the parameter,
    and PowerShell will do its best to select the best match. So, the previous command
    can also be written as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If a parameter takes a string value, and the string does not contain any special
    characters or whitespace, then you do not need to use quotes around the string.
    For example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp>
    command would also work with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The output of a single command is zero or more values, which can be basic or
    complex object types. You can pass the output of one command to another as input
    using a *pipeline*, which is represented by a vertical bar character, <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>.
    We’ll see examples of using a pipeline when we discuss filtering, grouping, and
    sorting later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can capture the result of an entire command or pipeline into a variable,
    then interact with the results. For example, the following captures the result
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Item</samp> command and
    queries for the <samp class="SANS_TheSansMonoCd_W5Regular_11">FullName</samp>
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t want to capture the result in a variable, you can enclose the
    command in parentheses and directly access its properties and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The length of a command line is effectively infinite. However, you’ll want to
    try to split up long lines to make the commands more readable. The shell will
    automatically split a line on the pipe character. If you need to split a long
    line with no pipes, you can use the backtick character, then start a new line.
    The backtick must be the last character on the line; otherwise, an error will
    occur when the script is parsed.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Discovering Commands
    and Getting Help</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A default installation of PowerShell has hundreds of commands to choose from.
    This means that finding a command to perform a specific task can be difficult,
    and even if you find the command, it might not be clear how to use it. To help,
    you can use two built-in commands, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp> command
    can be used to enumerate all the commands available to you. In its simplest form,
    you can execute it without any parameters and it will print all commands from
    all modules. However, it’s probably more useful to filter on a specific word you’re
    interested in. For example, [Listing 1-4](chapter1.xhtml#Lis1-4) will list only
    the commands with the word <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    in their names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-4: Using Get-Command to enumerate commands'
  prefs: []
  type: TYPE_NORMAL
- en: This command uses *wildcard syntax* to list only commands whose names include
    the specified word. Wildcard syntax uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>
    character to represent any character or series of characters. Here, we’ve put
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> on both sides of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp> to indicate
    that any text can come before or after it.
  prefs: []
  type: TYPE_NORMAL
- en: You can also list the commands available in a module. For example, [Listing
    1-5](chapter1.xhtml#Lis1-5) will list only the commands that are exported by the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObjectManager</samp> module and
    begin with the verb <samp class="SANS_TheSansMonoCd_W5Regular_11">Start</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-5: Using Get-Command to enumerate commands in the NtObjectManager
    module'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve found a command that looks promising, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>
    command to inspect its parameters and get some usage examples. In [Listing 1-6](chapter1.xhtml#Lis1-6),
    we take the <samp class="SANS_TheSansMonoCd_W5Regular_11">Start-NtWait</samp>
    command from [Listing 1-5](chapter1.xhtml#Lis1-5) and pass it to <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-6: Displaying help for the Start-NtWait command'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp> outputs
    the name of the command ❶, a short synopsis ❷, the syntax of the command ❸, and
    a more in-depth description ❹. In the command syntax section, you can see its
    multiple possible modes of operation: in this case, either specifying a time in
    hours, minutes, seconds, and/or milliseconds, or specifying <samp class="SANS_TheSansMonoCd_W5Regular_11">Infinite</samp>
    to wait indefinitely.'
  prefs: []
  type: TYPE_NORMAL
- en: When any part of the syntax is shown in brackets, <samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp>,
    that means it’s optional. For example, the only required parameter is <samp class="SANS_TheSansMonoCd_W5Regular_11">Object</samp>,
    which takes an array of <samp class="SANS_TheSansMonoCd_W5Regular_11">NtObject</samp>
    values. Even the name of this parameter is optional, as <samp class="SANS_TheSansMonoCd_W5Regular_11">-Object</samp>
    is in brackets.
  prefs: []
  type: TYPE_NORMAL
- en: You can get more information about a parameter by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Parameter</samp>
    command. [Listing 1-7](chapter1.xhtml#Lis1-7) shows the details for the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Object</samp> parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-7: Querying the details of the Object parameter with the Parameter
    command'
  prefs: []
  type: TYPE_NORMAL
- en: You can use wildcard syntax to select a group of similar parameter names. For
    example, if you specify <samp class="SANS_TheSansMonoCd_W5Regular_11">Obj*</samp>,
    then you’ll get information about any parameters whose names start with the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Obj</samp> prefix.
  prefs: []
  type: TYPE_NORMAL
- en: If you want usage examples for a command, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Examples</samp>
    parameter, as demonstrated in [Listing 1-8](chapter1.xhtml#Lis1-8).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-8: Showing examples for Start-NtWait'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each example should include a one- or two-line snippet of a PowerShell script
    ❶ and a description of what it does ❷. You can also see the full help output for
    the command by specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Full</samp>
    parameter. To view this output in a separate pop-up window, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">ShowWindow</samp>
    parameter. For example, try running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You should see the dialog shown in [Figure 1-1](chapter1.xhtml#fig1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure1-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-1: A dialog showing
    Get-Help information using the ShowWindow parameter</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'One final topic to mention about commands is that you can set up *aliases*,
    or alternative names for the commands. For example, you can use an alias to make
    commands shorter to type. PowerShell comes with many aliases predefined, and you
    can define your own using the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-Alias</samp>
    command. For example, we can set the <samp class="SANS_TheSansMonoCd_W5Regular_11">Start-NtWait</samp>
    command to have the alias <samp class="SANS_TheSansMonoCd_W5Regular_11">swt</samp>
    by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To display a list of all the defined aliases, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Alias</samp>
    command. We’ll avoid using aliases unnecessarily throughout this book, as it can
    make the scripts more confusing if you don’t know what an alias represents.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Defining Functions</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with all programming languages, it pays to reduce complexity in PowerShell.
    One way of reducing complexity is to combine common code into a function. Once
    a function is defined, the PowerShell script can call the function rather than
    needing to repeat the same code in multiple places. The basic function syntax
    in PowerShell is simple; [Listing 1-9](chapter1.xhtml#Lis1-9) shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-9: Defining a simple PowerShell function called Get-NameValue'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for defining a function starts with the keyword <samp class="SANS_TheSansMonoCd_W5Regular_11">function</samp>
    followed by the name of the function you want to define. While it’s not required
    to use the standard PowerShell command naming convention of a verb followed by
    a noun, it pays to do so, as it makes it clear to the user what your function
    does.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you define the function’s named parameters. Like variables, parameters
    are defined using a name prefixed with <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>,
    as you can see in [Listing 1-9](chapter1.xhtml#Lis1-9). You can specify a type
    in brackets, but this is optional; in this example, <samp class="SANS_TheSansMonoCd_W5Regular_11">$Name</samp>
    is a string, but the <samp class="SANS_TheSansMonoCd_W5Regular_11">$Value</samp>
    parameter can take any value from the caller. Specifying named parameters is not
    required. If no <samp class="SANS_TheSansMonoCd_W5Regular_11">param</samp> block
    is included, then any passed arguments are placed in the <samp class="SANS_TheSansMonoCd_W5Regular_11">$args</samp>
    array. The first parameter is located at <samp class="SANS_TheSansMonoCd_W5Regular_11">$args[0]</samp>,
    the second at <samp class="SANS_TheSansMonoCd_W5Regular_11">$args[1]</samp>, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: The body of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NameValue</samp>
    function takes the parameters and builds a string using string interpolation.
    The function returns the string using the <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    keyword, which also immediately finishes the function. You can omit the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">return</samp> keyword in this case, as
    PowerShell will return any values uncaptured in variables.
  prefs: []
  type: TYPE_NORMAL
- en: After defining the function, we invoke it. You can specify the parameter names
    explicitly. However, if the call is unambiguous, then specifying the parameter
    names is not required. [Listing 1-9](chapter1.xhtml#Lis1-9) shows both approaches.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run a small block of code without defining a function, you can
    create a script block. A *script block* is one or more statements enclosed in
    braces, <samp class="SANS_TheSansMonoCd_W5Regular_11">{}</samp>. This block can
    be assigned to a variable and executed when needed using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Invoke-Command</samp>
    command or the <samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp> operator,
    as shown in [Listing 1-10](chapter1.xhtml#Lis1-10).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-10: Creating a script block and executing it'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Displaying and Manipulating
    Objects</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you execute a command and do not capture the results in a variable, the results
    are passed to the PowerShell console. The console will use a formatter to display
    the results, in either a table or a list (the format is chosen automatically depending
    on the types of objects contained in the results). It’s also possible to specify
    custom formatters. For example, if you use the built-in <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp>
    command to retrieve the list of running processes, PowerShell uses a custom formatter
    to display the entries as a table, as shown in [Listing 1-11](chapter1.xhtml#Lis1-11).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-11: Outputting the process list as a table'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to reduce the number of columns in the output, you can use the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Select-Object</samp> command to select
    only the properties you need. For example, [Listing 1-12](chapter1.xhtml#Lis1-12)
    selects the <samp class="SANS_TheSansMonoCd_W5Regular_11">Id</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ProcessName</samp> properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-12: Selecting only the Id and ProcessName properties'
  prefs: []
  type: TYPE_NORMAL
- en: You can change the default behavior of the output by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-List</samp> command, which
    will force table or list formatting, respectively. For example, [Listing 1-13](chapter1.xhtml#Lis1-13)
    shows how to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-List</samp>
    command to change the output to a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-13: Using Format-List to show processes in a list view'
  prefs: []
  type: TYPE_NORMAL
- en: To find the names of the available properties, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Member</samp>
    command on one of the objects that <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp>
    returns. For example, [Listing 1-14](chapter1.xhtml#Lis1-14) lists the properties
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-14: Using the Get-Member command to list properties of the Process
    object'
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that there are other properties not included in the output.
    To display them, you need to override the custom formatting. The simplest way
    to access the hidden properties is to use <samp class="SANS_TheSansMonoCd_W5Regular_11">Select-Object</samp>
    to extract the values explicitly, or specify the properties to display to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp> or <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-List</samp>
    command. You can use <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> as
    a wildcard to show all properties, as in [Listing 1-15](chapter1.xhtml#Lis1-15).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-15: Showing all the properties of the Process object in a list'
  prefs: []
  type: TYPE_NORMAL
- en: Many objects also have methods you can call to perform some action on the object.
    [Listing 1-16](chapter1.xhtml#Lis1-16) shows how you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Member</samp>
    to query for methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-16: Displaying the methods on a Process object'
  prefs: []
  type: TYPE_NORMAL
- en: If the output from a command is too long to fit on the screen, you can *page*
    the output so that only the first part is displayed, and the console will wait
    for you to press a key before displaying more. You can enable paging by piping
    the output to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-Host</samp>
    command and specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Paging</samp>
    parameter, or by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">more</samp>
    command. [Listing 1-17](chapter1.xhtml#Lis1-17) shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-17: Paging output using Out-Host'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can write directly to the console window by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-Host</samp>
    command in your own scripts. This allows you to change the colors of the output
    to suit your taste, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ForegroundColor</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">BackgroundColor</samp> parameters.
    It also has the advantage of not inserting objects into the pipeline by default,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that, by default, you can’t redirect the output to a file or into
    a pipeline. However, you can redirect the host output by redirecting its stream
    to the standard output stream using a command like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'PowerShell also supports a basic GUI to display tables of objects. To access
    it, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-GridView</samp>
    command. Note that the custom formatting will still restrict what columns PowerShell
    displays. If you want to view other columns, use <samp class="SANS_TheSansMonoCd_W5Regular_11">Select-Object</samp>
    in the pipeline to select the properties. The following example displays all properties
    in the Grid View GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Running this command should show a dialog like [Figure 1-2](chapter1.xhtml#fig1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure1-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-2: Showing Process
    objects in a grid view</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You can filter and manipulate the data in the Grid View GUI. Try playing around
    with the controls. You can also specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">PassThru</samp>
    parameter to <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-GridView</samp>,
    which causes the command to wait for you to click the OK button in the GUI. Any
    rows in the view that are selected when you click OK will be written to the command
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Filtering, Ordering,
    and Grouping Objects</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A traditional shell passes raw text between commands; PowerShell passes objects.
    Passing objects lets you access individual properties of the objects and trivially
    filter the pipeline. You can even order and group the objects easily.
  prefs: []
  type: TYPE_NORMAL
- en: You can filter objects using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp>
    command, which has the aliases <samp class="SANS_TheSansMonoCd_W5Regular_11">Where</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">?</samp>. The simplest filter
    is to check for the value of a parameter, as shown in [Listing 1-18](chapter1.xhtml#Lis1-18),
    where we filter the output from the built-in <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Process</samp>
    command to find the <samp class="SANS_TheSansMonoCd_W5Regular_11">explorer</samp>
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-18: Filtering a list of processes using Where-Object'
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 1-18](chapter1.xhtml#Lis1-18), we pass through only <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp>
    objects where the <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName</samp>
    equals (<samp class="SANS_TheSansMonoCd_W5Regular_11">-EQ</samp>) <samp class="SANS_TheSansMonoCd_W5Regular_11">"explorer"</samp>.
    There are numerous operators you can use for filtering, some of which are shown
    in [Table 1-4](chapter1.xhtml#tab1-4).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 1-4:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Operators for</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Example</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-EQ</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -EQ "explorer"</samp> | <samp class="SANS_Futura_Std_Book_11">Equal to the value</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NE "explorer"</samp> | <samp class="SANS_Futura_Std_Book_11">Not equal to the
    value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-Match</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -Match "ex.*"</samp> | <samp class="SANS_Futura_Std_Book_11">Matches a string
    against a regular expression</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NotMatch</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NotMatch "ex.*"</samp> | <samp class="SANS_Futura_Std_Book_11">Inverse of the</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-Match</samp> <samp class="SANS_Futura_Std_Book_11">operator</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-Like</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -Like "ex*"</samp> | <samp class="SANS_Futura_Std_Book_11">Matches a string against
    a wildcard</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-NotLike</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -NotLike "ex*"</samp> | <samp class="SANS_Futura_Std_Book_11">Inverse of the</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-Like</samp> <samp class="SANS_Futura_Std_Book_11">operator</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-GT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -GT "ex"</samp> | <samp class="SANS_Futura_Std_Book_11">Greater-than comparison</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">-LT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessName
    -LT "ex</samp><samp class="SANS_Futura_Std_Heavy_B_11">"</samp> | <samp class="SANS_Futura_Std_Book_11">Less-than
    comparison</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'You can investigate all of the supported operators by using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">Where-Object</samp> command.
    If the condition to filter on is more complex than a simple comparison, you can
    use a script block. The script block should return <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    to keep the object in the pipeline or <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    to filter it. For example, you could also write [Listing 1-18](chapter1.xhtml#Lis1-18)
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">$_</samp> variable passed
    to the script block represents the current object in the pipeline. By using a
    script block you can access the entire language in your filtering, including calling
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: To order objects, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Sort-Object</samp>
    command. If the objects can be ordered, as in the case of strings or numbers,
    then you just need to pipe the objects into the command. Otherwise, you’ll need
    to specify a property to sort on. For example, you can sort the process list by
    its handle count, represented by the <samp class="SANS_TheSansMonoCd_W5Regular_11">Handles</samp>
    property, as shown in [Listing 1-19](chapter1.xhtml#Lis1-19).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-19: Sorting processes by the number of handles'
  prefs: []
  type: TYPE_NORMAL
- en: To sort in descending order instead of ascending order, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Descending</samp>
    parameter, as shown in [Listing 1-20](chapter1.xhtml#Lis1-20).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-20: Sorting processes by the number of handles in descending order'
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to filter out duplicate entries at this stage by specifying
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Unique</samp> parameter to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Sort-Object</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can group objects based on a property name using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Group-Object</samp>
    command. [Listing 1-21](chapter1.xhtml#Lis1-21) shows that this command returns
    a list of objects, each with <samp class="SANS_TheSansMonoCd_W5Regular_11">Count</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-21: Grouping Process objects by ProcessName'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use all of these commands together in one pipeline,
    as shown in [Listing 1-22](chapter1.xhtml#Lis1-22).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-22: Combining Where-Object, Group-Object, and Sort-Object'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Exporting Data</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you’ve got the perfect set of objects you want to inspect, you might want
    to persist that information to a file on disk. PowerShell provides numerous options
    for this, a few of which I’ll discuss here. The first option is to output the
    objects to a file as text, using <samp class="SANS_TheSansMonoCd_W5Regular_11">Out-File</samp>.
    This command captures the formatted text output and writes it to a file. You can
    use <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Content</samp> to read the
    file back in again, as shown in [Listing 1-23](chapter1.xhtml#Lis1-23).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-23: Writing content to a text file and reading it back in again'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the greater-than operator to send the output to a file, as
    in other shells. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If you want a more structured format, you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">Export-Csv</samp>
    to convert the object to a comma-separated value (CSV) table format. You could
    then import this file into a spreadsheet program to analyze offline. The example
    in [Listing 1-24](chapter1.xhtml#Lis1-24) selects some properties of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> object and exports them
    to the CSV file *processes.csv*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-24: Exporting objects to a CSV file'
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible to reimport the CSV data using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-Csv</samp>
    command. However, if you expect to export the data and then reimport it later,
    you’ll probably prefer the CLI XML format. This format can include the structure
    and type of the original object, which allows you to reconstruct it when you import
    the data. [Listing 1-25](chapter1.xhtml#Lis1-25) shows how you can use the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Export-CliXml</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Import-CliXml</samp>
    commands to export objects in this format and then reimport them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-25: Exporting and reimporting CLI XML files'
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our discussion of the PowerShell language. If you’re a little
    rusty, I recommend picking up a good book on the topic, such as *PowerShell for
    Sysadmins* by Adam Bertram (No Starch Press, 2020).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wrapping Up</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter gave a short overview of how to set up your PowerShell environment
    so that you can run the code examples included throughout the book. We discussed
    configuring PowerShell to run scripts and installing the required external PowerShell
    module.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the chapter provided a bit of background on the PowerShell language.
    This included the basics of PowerShell syntax, as well as discovering commands
    using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Command</samp>, getting
    help using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-Help</samp>, and
    displaying, filtering, grouping, and exporting PowerShell objects.
  prefs: []
  type: TYPE_NORMAL
- en: With the basics of PowerShell out of the way, we can start to dive into the
    inner workings of the Windows operating system. In the next chapter, we’ll discuss
    the Windows kernel and how you can interact with it using PowerShell.
  prefs: []
  type: TYPE_NORMAL
