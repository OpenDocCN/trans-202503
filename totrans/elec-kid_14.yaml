- en: '![image](../images/common01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: '11'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '11'
- en: CIRCUITS THAT REMEMBER INFORMATION
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆信息的电路
- en: In [Chapter 9](ch09.xhtml#ch09), you learned how to store bits using switches.
    As long as the switches don’t change, the bits stay the same. But you have to
    manually set the switches, and that’s not very efficient. In [Chapter 10](ch10.xhtml#ch10),
    you learned about logic gates and how you can use them to play with ones and zeroes.
    Now, I’ll show you how to use logic gates to make electronic memory that saves
    bits, even after you change the input. At the end of this chapter, you’ll build
    your own electronic coin tosser!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 9 章](ch09.xhtml#ch09)中，你学习了如何使用开关来存储位。只要开关不改变，位就保持不变。但你必须手动设置开关，这并不是很高效。在[第
    10 章](ch10.xhtml#ch10)中，你学习了逻辑门以及如何利用它们来处理 1 和 0。现在，我将向你展示如何使用逻辑门制作电子存储器，保存位，即使在改变输入后也能保持存储。在本章结束时，你将自己制作一个电子硬币投掷器！
- en: SAVING ONE BIT AT A TIME
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次保存一位
- en: One simple memory circuit is an *SR latch*. You can create an SR latch with
    two NOR gates, and one latch can store one bit of data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的存储电路是*SR 锁存器*。你可以通过两个 NOR 门来创建一个 SR 锁存器，并且一个锁存器可以存储一位数据。
- en: '![image](../images/f0240-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0240-01.jpg)'
- en: 'Q starts at 0, and this circuit won’t update its output until you use R or
    S to tell it to, which is called *latching* the bit. S and R stand for *set* and
    *reset*, respectively: when you set the latch, Q changes to 1\. When you reset
    it, Q changes to 0\. As the SR latch truth table describes, you can set the latch
    by putting a 1 on the S input and a 0 on the R input. To reset it, you’d put a
    1 on the R input and a 0 on the S input. Let’s look at how setting Q to 1 works.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Q 从 0 开始，直到你使用 R 或 S 告诉它更新，电路才会更新其输出，这种方式称为*锁存*位。S 和 R 分别代表*设定*和*重置*：当你设定锁存器时，Q
    会变为 1。当你重置它时，Q 会变为 0。如 SR 锁存器真值表所示，你可以通过将 1 置于 S 输入端，0 置于 R 输入端来设定锁存器。要重置它，你需要将
    1 放到 R 输入端，0 放到 S 输入端。让我们来看一下如何将 Q 设为 1 的过程。
- en: '![image](../images/f0240-02.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0240-02.jpg)'
- en: The output from a NOR gate is 1 when all inputs are 0\. When S (set) is 1, the
    output of the lower NOR gate is 0, no matter what that gate’s other input is.
    The output is connected to an input on the other NOR gate, together with R (reset).
    Because R is 0, you have two 0s into the upper NOR gate, which makes Q output
    1.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有输入为 0 时，NOR 门的输出为 1。当 S（设定）为 1 时，低级 NOR 门的输出为 0，无论该门的其他输入是什么。该输出与另一个 NOR
    门的输入相连，同时与 R（重置）一起使用。由于 R 为 0，进入上级 NOR 门的两个输入均为 0，这使得 Q 输出 1。
- en: A BETTER MEMORY CIRCUIT
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的存储电路
- en: If you add a few more gates to the SR latch, you can create a *D latch*, which
    sets the output Q to whatever the D input is when the C input is 1.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 SR 锁存器中添加几个额外的门，你可以创建一个*D 锁存器*，它会在 C 输入为 1 时，将输出 Q 设置为 D 输入的值。
- en: '![image](../images/f0241-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0241-01.jpg)'
- en: The D latch is an improvement over the SR latch because you can change D, the
    *data input*, as much as you want, and Q won’t change unless you set C, the *control
    input*, to 1\. The lower NOR gate output will always be the opposite of the output
    Q, and that output is labeled ![image](../images/qbar.jpg) to show this.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: D 锁存器相对于 SR 锁存器有所改进，因为你可以随意更改 D（*数据输入*），而 Q 不会改变，除非你将 C（*控制输入*）设置为 1。下级 NOR
    门的输出将始终是输出 Q 的相反值，且该输出标记为 ![image](../images/qbar.jpg) 以显示这一点。
- en: MEMORY THAT CHANGES ONLY AT A CERTAIN TIME
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只有在特定时间改变的记忆
- en: 'The D latch has one weakness: when C is 1, changing D also changes the output
    Q. What if you don’t want the output to change immediately?'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: D 锁存器有一个缺点：当 C 为 1 时，改变 D 也会改变输出 Q。如果你不希望输出立即改变，该怎么办？
- en: 'Computers use a *clock signal* to tell the circuits inside when something should
    happen, like when to store new data from a wire. A clock signal is just a voltage
    that turns on and off continuously—that is, it keeps switching between 1 and 0\.
    This signal is similar to the one you sent to the speaker in “[Project #16: Make
    Your Own Sound with the 555 Timer](ch08.xhtml#ch08lev1sec06)” on [page 167](ch08.xhtml#page_167).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '计算机使用*时钟信号*来告诉电路何时发生某些操作，比如何时存储来自电缆的新数据。时钟信号仅仅是一个连续开关的电压信号——也就是说，它不断在 1 和 0
    之间切换。这个信号类似于你在“[项目 #16：使用 555 定时器制作你自己的声音](ch08.xhtml#ch08lev1sec06)”中发送到扬声器的信号，详见[第
    167 页](ch08.xhtml#page_167)。'
- en: To reduce the chance of errors, actions like calculations or storing data happen
    only when the clock signal switches from off to on or from on to off. This is
    called *edge-triggering*. If a circuit does something when the clock signal changes
    from off to on, then that action happens on the rising edge, and the circuit is
    *positive edge-triggered*. A circuit that triggers an action on the falling edge,
    when the clock changes from on to off, is *negative edge-triggered*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: A *flip-flop* is a latch that updates its output when triggered by the edge
    of a clock signal, and you can create one by combining two D latches and a NOT
    gate. This is called a *D flip-flop*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0242-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: The output voltage Q can change only when the CLK voltage changes from high
    to low, from 1 to 0\. Here’s how that works.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0243-01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'When CLK is 0, Y and Q don’t change ➊. When CLK changes to 1 ➋, Y changes to
    match the D input to D latch #1\. But the NOT gate inverts the 1, setting C on
    D latch #2 to 0 so Q doesn’t change. As CLK goes back to 0 ➌, C on D latch #2
    changes to 1, the value on Y is saved in latch #2, and Q changes to match Y.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '*Q updates when the clock signal changes from high to low voltage, so this
    flip-flop is negative edge-triggered.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the circuit diagram symbol for a positive edge-triggered D flip-flop:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0244-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Instead of writing CLK for the clock input, the D flip-flop symbol has a > marking.
    Notice the bubble on the ![image](../images/qbar.jpg) output. Just like on the
    NOT gate symbol, the bubble means ![image](../images/qbar.jpg) is the inverted
    version of Q.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: AN OUTPUT THAT TOGGLES
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a simple wire, you can turn a D flip-flop into a circuit that toggles another
    circuit on and off. For example, imagine you want to turn a light on and off.
    The D flip-flop stores a value on its input, D, when its clock goes from low to
    high voltage (if positive edge-triggered). If you connect the D flip-flop’s inverted
    output ![image](../images/qbar.jpg) to D, the flip-flop’s input will always be
    the opposite of Q. Every time the clock input triggers, the output will change
    to the opposite value, and the light will toggle.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0245-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Let’s see this concept in action!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT #22: AN ELECTRONIC COIN TOSSER'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this project, you’ll build an electronic coin tosser with a 555 timer, a
    D flip-flop, a push button, and two LEDs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](ch08.xhtml#ch08), you built several 555 timer circuits that switched
    voltages on and off. A circuit that turns a voltage on and off continuously is
    called an *oscillator*, and in this project, you’re going to use an oscillator
    circuit as an input to the toggling D flip-flop. Do you recognize the oscillator
    circuit in this diagram?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0246-01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: The 555 timer oscillator circuit creates a clock signal that goes to the D flip-flop,
    causing the output to switch on and off, or *toggle*, continuously as long as
    you press a push button. The changing output from the D flip-flop turns the LEDs
    on and off.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 555定时器振荡电路创建一个时钟信号，该信号传输到D触发器，导致输出不断地开关，或*切换*，只要按下按钮，输出就会持续变化。来自D触发器的变化输出会控制LED的开关。
- en: 'When you let go of the push button, the clock signal from the 555 timer stops.
    The flip-flop output will stop alternating, and only one of the two LEDs will
    be on: one for heads or the other for tails.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你松开按钮时，555定时器的时钟信号会停止。触发器输出将停止交替，只有两个LED中的一个会亮：一个表示正面，另一个表示反面。
- en: '![image](../images/f0246-02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0246-02.jpg)'
- en: Shopping List
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 购物清单
- en: '![image](../images/f0247-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0247-01.jpg)'
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个面包板**（Jameco #20601, Bitsbox #CN329），至少有30行。'
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236)—you’ll need around 20 for this project.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **面包板跳线**（Jameco #2237044, Bitsbox #CN236）—你将需要大约20根用于这个项目。'
- en: '![image](../images/common-01.jpg) **A 555 timer IC** (Jameco #904085, Bitsbox
    #QU001) to create the input signal to be counted.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个555定时器集成电路**（Jameco #904085, Bitsbox
    #QU001）用于生成输入信号进行计数。'
- en: '![image](../images/common-01.jpg) **An IC with two D flip-flops** (Jameco #48004,
    Bitsbox #QU193)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **一个带有两个D触发器的集成电路**（Jameco #48004, Bitsbox
    #QU193）'
- en: '![image](../images/common-01.jpg) **A standard green LED** (Jameco #34761,
    Bitsbox #OP003)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **一个标准绿色LED**（Jameco #34761, Bitsbox #OP003）'
- en: '![image](../images/common-01.jpg) **A standard red LED** (Jameco #333973, Bitsbox
    #OP002)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **一个标准红色LED**（Jameco #333973, Bitsbox #OP002）'
- en: '![image](../images/common-01.jpg) **Two 220 Ω resistors** (Jameco #690700,
    Bitsbox #CR25220R) for limiting the current to the LEDs.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **两个220 Ω电阻**（Jameco #690700, Bitsbox #CR25220R）用于限制LED的电流。'
- en: '![image](../images/common-01.jpg) **A 100 kΩ resistor** (Jameco #691340, Bitsbox
    #CR25100K) to help set the frequency of the sound.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个100 kΩ的电阻**（Jameco #691340, Bitsbox #CR25100K）用于帮助设置声音的频率。'
- en: '![image](../images/common-01.jpg) **A 10 kΩ resistor** (Jameco #691104, Bitsbox
    #CR2510K) to help set the frequency of the sound.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个10 kΩ电阻**（Jameco #691104, Bitsbox #CR2510K）用于帮助设置声音的频率。'
- en: '![image](../images/common-01.jpg) **A 1 kΩ resistor** (Jameco #690865, Bitsbox
    #CR251K) to use as a pull-down resistor for the start button.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个1 kΩ电阻**（Jameco #690865, Bitsbox #CR251K）用于作为启动按钮的下拉电阻。'
- en: '![image](../images/common-01.jpg) **A 1 µF capacitor** (Jameco #29831, Bitsbox
    #EC1U063) to help set the frequency of the sound.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个1 µF电容**（Jameco #29831, Bitsbox #EC1U063）用于帮助设置声音的频率。'
- en: '![image](../images/common-01.jpg) **A push button** (Jameco #119011, Bitsbox
    #SW087) to “toss the coin.”'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个按钮开关**（Jameco #119011, Bitsbox #SW087）用于“投掷硬币”。'
- en: '![image](../images/common-01.jpg) **A 5 V DC wall adapter** (Jameco #2126125,
    Bitsbox #TF010) to power the circuit.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个5V DC墙壁适配器**（Jameco #2126125, Bitsbox
    #TF010）为电路提供电源。'
- en: '![image](../images/common-01.jpg) **A DC barrel jack adapter** (Jameco #2227209,
    Bitsbox #CN424) to connect the wall adapter to the breadboard.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个DC圆柱形插座适配器**（Jameco #2227209, Bitsbox
    #CN424）用于将墙壁适配器连接到面包板。'
- en: This circuit uses the positive and negative supply columns on both sides of
    the breadboard. When I say to connect a component to the negative or positive
    supply column “on the left,” that means you should use one of the supply columns
    on the left side of the breadboard. On both sides, the positive column is marked
    with a red line to the left, and the negative is marked with a blue line to the
    right.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该电路使用面包板两侧的正负电源列。当我说将组件连接到“左侧”的负或正电源列时，意味着你应该使用面包板左侧的电源列。在两侧，正电源列左侧标有红线，负电源列右侧标有蓝线。
- en: 'Step 1: Build the Oscillator Circuit'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第一步：构建振荡器电路
- en: 'First, let’s wire up the 555 timer:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们接线555定时器：
- en: Plug the 555 timer into the breadboard near the middle.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将555定时器插入面包板中部附近。
- en: Connect R1, the 100 kΩ resistor, from pin 7 of the 555 timer to the positive
    supply column on the right.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将R1，100 kΩ电阻，从555定时器的第7引脚连接到右侧的正电源列。
- en: Connect R2, the 10 kΩ resistor, from pin 6 to pin 7.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将R2，10 kΩ电阻，从第6引脚连接到第7引脚。
- en: Connect C1, the 1 µF capacitor, from pin 6 to the negative supply column on
    the right. If you’re using a polarized capacitor like the one I suggest in the
    Shopping List, make sure you connect the negative leg to the negative supply column.
    The negative leg should be marked with a minus or a zero on the capacitor itself.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a jumper wire from pin 2 to pin 6 of the 555 timer.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0249-01.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Step 2: Add the Start Button'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, connect the push button between pin 4 on the 555 timer and the positive
    supply column as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Place the push button at the very top of the breadboard, across the notch in
    the middle. By connecting it like this, you should have one side of the switch
    on the top row and the other side on row 3.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a wire from pin 4 of the 555 timer to the lower pins of the push button
    (row 3). Connect a wire from the upper pins of the push button (row 1) to the
    positive supply column on the left.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect R5, the 1 kΩ pull-down resistor, from the lower pins of the push button
    to the negative supply column on the right.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0250-01.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The 555 timer also needs to be powered. Connect a jumper wire from pin 1 to
    the negative supply column on the left. Use another jumper wire to connect pin
    8 to the positive supply column on the right.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0250-02.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Build the Toggle Circuit'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Place the IC with the D flip-flops—marked *74LS74*—below the 555 timer so that
    it straddles the notch in the breadboard, with the notch pointing to the top of
    the breadboard. This IC contains two D flip-flops, but you’ll use only the D flip-flop
    on pins 1 to 6.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Run a jumper wire from the inverted output ![image](../images/qbar.jpg) on pin
    6 of the 74LS74 D flip-flop to the D-input at pin 2\. Connect the output from
    pin 3 on the 555 timer to pin 3 on the D flip-flop, which is the clock input.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0251-01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: The D flip-flop needs power, too. Connect pin 14 to the positive supply column
    on the right and connect pin 7 to the negative supply column on the left.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0251-02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: Add the Heads and Tails LEDs'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the previous project, you used a transistor to power an LED from a logic
    gate output because the gate couldn’t provide enough current. This circuit has
    the same challenge because D flip-flops are just a few logic gates in an IC, but
    there’s a little trick you can use to get around that limitation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: The 74LS74 D flip-flop’s datasheet says this IC will allow only about 0.5 mA
    to flow when the output voltage is high, but it allows 8 mA when the output voltage
    is low. (Search online for *74LS74 datasheet* if you’re curious to read the datasheet
    for yourself.) If you connect the LEDs and resistors to the positive supply column
    on one side and to the flip-flop output on the other, the LEDs should get 8 mA
    of current when the output is low, turning them on. It may seem strange to connect
    the LEDs like this, instead of connecting them to the negative supply column,
    but doing so makes the LEDs light when the output from the gate is 0 instead of
    1.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever value Q has, ![image](../images/qbar.jpg) will always be the opposite.
    If you connect an LED to each output, one will light up and the other won’t. Add
    the heads and tails LEDs as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Plug the two LEDs into the bottom of the breadboard, with the red LED on the
    right side of the middle notch and the green LED on the left side. Place the longer
    leads (the anodes) in the bottom row and the shorter leads (the cathodes) a couple
    of rows above.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one jumper wire from pin 5 of the D flip-flop to the short leg of the
    red LED. Then connect another jumper wire from pin 6 of the D flip-flop to the
    short leg of the green LED.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a resistor from each bottom row to the positive supply column on each
    side (R3 and R4 from the circuit diagram).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0253-01.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Step 5: Toss that “Coin”!'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use a jumper wire to connect the left negative supply column to the one on the
    right, and do the same for the two positive supply columns. Then, connect two
    jumper wires to your barrel jack adapter—connect the plus side to one of the positive
    supply columns and connect the minus side to one of the negative supply columns.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Finally, plug the wall adapter into the barrel jack adapter first and then into
    the wall socket. One LED should light up right away. When you push the button,
    the LEDs should alternate quickly between on and off. Release the button, and
    only one should be lit.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can use this circuit to make decisions. For example, say you ask yourself,
    “Should I go out and play football this weekend, or should I play baseball?” Green
    means go out and play football; red means baseball. Or, if you’re arguing with
    one of your friends about who gets the last cookie, then let the coin tosser decide!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0254-01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: 'Step 6: What If the Coin Tosser Doesn’t Work?'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, check that you’re using a 5 V wall adapter. Any other voltages might
    not work.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Then, if one LED is lit but nothing happens when you push the button, check
    that the D flip-flop is connected correctly. If no LEDs are lit, there’s definitely
    something wrong with the D flip-flop and LED parts of the circuit. Carefully compare
    your connections with the circuit diagram at the beginning of this project. If
    your circuit isn’t working after you know the LED and flip-flop circuits are connected
    correctly, then check the 555 timer connections.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果一个LED亮了，但按下按钮时什么也没有发生，检查D触发器是否正确连接。如果没有LED亮起，那肯定是D触发器和LED部分的电路出了问题。仔细对照项目开始时的电路图，检查连接是否正确。如果在确保LED和触发器电路正确连接后电路依然无法工作，那么检查一下555定时器的连接。
- en: 'To help you avoid the same mistakes, I’ll share the problems I had when building
    this for the first time:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你避免相同的错误，我将分享我第一次构建时遇到的问题：
- en: '![image](../images/common-01.jpg) I connected the LEDs to pins 4 and 5 of the
    D flip-flop instead of pins 5 and 6.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 我将LED连接到了D触发器的引脚4和引脚5，而不是引脚5和引脚6。'
- en: '![image](../images/common-01.jpg) I connected the capacitor to pin 5 of the
    555 timer instead of pin 6.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 我将电容连接到了555定时器的引脚5，而不是引脚6。'
- en: '![image](../images/common-01.jpg) I forgot to connect the positive supply column
    on the left to the one on the right.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 我忘记将左侧的正电源列连接到右侧的正电源列。'
- en: '**WHAT’S NEXT?**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**接下来做什么？**'
- en: You’ve built a lot of different circuits in this book! At this point you have
    a solid foundation in electronics, both in theory and practical experience. Now,
    the next step is to focus on what you think is fun. Find a project you really
    want to build—and go make it!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本书中已经构建了许多不同的电路！到目前为止，你在电子学方面，无论是理论还是实践经验，都已经打下了坚实的基础。接下来，下一步是专注于你认为有趣的内容。找一个你真正想要构建的项目——然后开始动手做吧！
- en: The best way to continue learning is to build lots of circuits and read about
    anything you’re curious about. Follow tutorials online and find more books on
    different topics in electronics.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 继续学习的最佳方式是构建大量电路并阅读你感兴趣的任何内容。在线跟随教程，寻找更多关于电子学不同主题的书籍。
- en: 'In [Chapter 12](ch12.xhtml#ch12), the final chapter, I’ll show you how to build
    one last project: a really cool game where you have to test your reaction speed
    by “catching” a light. After that, I hope you’ll continue exploring, playing,
    and having fun with electronics. There are so many great things you can build!'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](ch12.xhtml#ch12)，即最后一章，我将展示如何构建最后一个项目：一个非常酷的游戏，你需要通过“捕捉”光来测试你的反应速度。之后，我希望你继续探索、玩耍并享受电子学的乐趣。你可以构建的东西还有很多！
