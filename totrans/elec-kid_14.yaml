- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '11'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CIRCUITS THAT REMEMBER INFORMATION
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](ch09.xhtml#ch09), you learned how to store bits using switches.
    As long as the switches don’t change, the bits stay the same. But you have to
    manually set the switches, and that’s not very efficient. In [Chapter 10](ch10.xhtml#ch10),
    you learned about logic gates and how you can use them to play with ones and zeroes.
    Now, I’ll show you how to use logic gates to make electronic memory that saves
    bits, even after you change the input. At the end of this chapter, you’ll build
    your own electronic coin tosser!
  prefs: []
  type: TYPE_NORMAL
- en: SAVING ONE BIT AT A TIME
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One simple memory circuit is an *SR latch*. You can create an SR latch with
    two NOR gates, and one latch can store one bit of data.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0240-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Q starts at 0, and this circuit won’t update its output until you use R or
    S to tell it to, which is called *latching* the bit. S and R stand for *set* and
    *reset*, respectively: when you set the latch, Q changes to 1\. When you reset
    it, Q changes to 0\. As the SR latch truth table describes, you can set the latch
    by putting a 1 on the S input and a 0 on the R input. To reset it, you’d put a
    1 on the R input and a 0 on the S input. Let’s look at how setting Q to 1 works.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0240-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The output from a NOR gate is 1 when all inputs are 0\. When S (set) is 1, the
    output of the lower NOR gate is 0, no matter what that gate’s other input is.
    The output is connected to an input on the other NOR gate, together with R (reset).
    Because R is 0, you have two 0s into the upper NOR gate, which makes Q output
    1.
  prefs: []
  type: TYPE_NORMAL
- en: A BETTER MEMORY CIRCUIT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you add a few more gates to the SR latch, you can create a *D latch*, which
    sets the output Q to whatever the D input is when the C input is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0241-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The D latch is an improvement over the SR latch because you can change D, the
    *data input*, as much as you want, and Q won’t change unless you set C, the *control
    input*, to 1\. The lower NOR gate output will always be the opposite of the output
    Q, and that output is labeled ![image](../images/qbar.jpg) to show this.
  prefs: []
  type: TYPE_NORMAL
- en: MEMORY THAT CHANGES ONLY AT A CERTAIN TIME
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The D latch has one weakness: when C is 1, changing D also changes the output
    Q. What if you don’t want the output to change immediately?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Computers use a *clock signal* to tell the circuits inside when something should
    happen, like when to store new data from a wire. A clock signal is just a voltage
    that turns on and off continuously—that is, it keeps switching between 1 and 0\.
    This signal is similar to the one you sent to the speaker in “[Project #16: Make
    Your Own Sound with the 555 Timer](ch08.xhtml#ch08lev1sec06)” on [page 167](ch08.xhtml#page_167).'
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the chance of errors, actions like calculations or storing data happen
    only when the clock signal switches from off to on or from on to off. This is
    called *edge-triggering*. If a circuit does something when the clock signal changes
    from off to on, then that action happens on the rising edge, and the circuit is
    *positive edge-triggered*. A circuit that triggers an action on the falling edge,
    when the clock changes from on to off, is *negative edge-triggered*.
  prefs: []
  type: TYPE_NORMAL
- en: A *flip-flop* is a latch that updates its output when triggered by the edge
    of a clock signal, and you can create one by combining two D latches and a NOT
    gate. This is called a *D flip-flop*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0242-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The output voltage Q can change only when the CLK voltage changes from high
    to low, from 1 to 0\. Here’s how that works.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0243-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When CLK is 0, Y and Q don’t change ➊. When CLK changes to 1 ➋, Y changes to
    match the D input to D latch #1\. But the NOT gate inverts the 1, setting C on
    D latch #2 to 0 so Q doesn’t change. As CLK goes back to 0 ➌, C on D latch #2
    changes to 1, the value on Y is saved in latch #2, and Q changes to match Y.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Q updates when the clock signal changes from high to low voltage, so this
    flip-flop is negative edge-triggered.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the circuit diagram symbol for a positive edge-triggered D flip-flop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0244-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of writing CLK for the clock input, the D flip-flop symbol has a > marking.
    Notice the bubble on the ![image](../images/qbar.jpg) output. Just like on the
    NOT gate symbol, the bubble means ![image](../images/qbar.jpg) is the inverted
    version of Q.
  prefs: []
  type: TYPE_NORMAL
- en: AN OUTPUT THAT TOGGLES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a simple wire, you can turn a D flip-flop into a circuit that toggles another
    circuit on and off. For example, imagine you want to turn a light on and off.
    The D flip-flop stores a value on its input, D, when its clock goes from low to
    high voltage (if positive edge-triggered). If you connect the D flip-flop’s inverted
    output ![image](../images/qbar.jpg) to D, the flip-flop’s input will always be
    the opposite of Q. Every time the clock input triggers, the output will change
    to the opposite value, and the light will toggle.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0245-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let’s see this concept in action!
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT #22: AN ELECTRONIC COIN TOSSER'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this project, you’ll build an electronic coin tosser with a 555 timer, a
    D flip-flop, a push button, and two LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](ch08.xhtml#ch08), you built several 555 timer circuits that switched
    voltages on and off. A circuit that turns a voltage on and off continuously is
    called an *oscillator*, and in this project, you’re going to use an oscillator
    circuit as an input to the toggling D flip-flop. Do you recognize the oscillator
    circuit in this diagram?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0246-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The 555 timer oscillator circuit creates a clock signal that goes to the D flip-flop,
    causing the output to switch on and off, or *toggle*, continuously as long as
    you press a push button. The changing output from the D flip-flop turns the LEDs
    on and off.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you let go of the push button, the clock signal from the 555 timer stops.
    The flip-flop output will stop alternating, and only one of the two LEDs will
    be on: one for heads or the other for tails.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0246-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping List
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![image](../images/f0247-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236)—you’ll need around 20 for this project.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 555 timer IC** (Jameco #904085, Bitsbox
    #QU001) to create the input signal to be counted.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **An IC with two D flip-flops** (Jameco #48004,
    Bitsbox #QU193)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A standard green LED** (Jameco #34761,
    Bitsbox #OP003)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A standard red LED** (Jameco #333973, Bitsbox
    #OP002)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **Two 220 Ω resistors** (Jameco #690700,
    Bitsbox #CR25220R) for limiting the current to the LEDs.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 100 kΩ resistor** (Jameco #691340, Bitsbox
    #CR25100K) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 10 kΩ resistor** (Jameco #691104, Bitsbox
    #CR2510K) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 1 kΩ resistor** (Jameco #690865, Bitsbox
    #CR251K) to use as a pull-down resistor for the start button.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 1 µF capacitor** (Jameco #29831, Bitsbox
    #EC1U063) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A push button** (Jameco #119011, Bitsbox
    #SW087) to “toss the coin.”'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 5 V DC wall adapter** (Jameco #2126125,
    Bitsbox #TF010) to power the circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A DC barrel jack adapter** (Jameco #2227209,
    Bitsbox #CN424) to connect the wall adapter to the breadboard.'
  prefs: []
  type: TYPE_NORMAL
- en: This circuit uses the positive and negative supply columns on both sides of
    the breadboard. When I say to connect a component to the negative or positive
    supply column “on the left,” that means you should use one of the supply columns
    on the left side of the breadboard. On both sides, the positive column is marked
    with a red line to the left, and the negative is marked with a blue line to the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Build the Oscillator Circuit'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, let’s wire up the 555 timer:'
  prefs: []
  type: TYPE_NORMAL
- en: Plug the 555 timer into the breadboard near the middle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect R1, the 100 kΩ resistor, from pin 7 of the 555 timer to the positive
    supply column on the right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect R2, the 10 kΩ resistor, from pin 6 to pin 7.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect C1, the 1 µF capacitor, from pin 6 to the negative supply column on
    the right. If you’re using a polarized capacitor like the one I suggest in the
    Shopping List, make sure you connect the negative leg to the negative supply column.
    The negative leg should be marked with a minus or a zero on the capacitor itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a jumper wire from pin 2 to pin 6 of the 555 timer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0249-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Step 2: Add the Start Button'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, connect the push button between pin 4 on the 555 timer and the positive
    supply column as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the push button at the very top of the breadboard, across the notch in
    the middle. By connecting it like this, you should have one side of the switch
    on the top row and the other side on row 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a wire from pin 4 of the 555 timer to the lower pins of the push button
    (row 3). Connect a wire from the upper pins of the push button (row 1) to the
    positive supply column on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect R5, the 1 kΩ pull-down resistor, from the lower pins of the push button
    to the negative supply column on the right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0250-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The 555 timer also needs to be powered. Connect a jumper wire from pin 1 to
    the negative supply column on the left. Use another jumper wire to connect pin
    8 to the positive supply column on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0250-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Build the Toggle Circuit'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Place the IC with the D flip-flops—marked *74LS74*—below the 555 timer so that
    it straddles the notch in the breadboard, with the notch pointing to the top of
    the breadboard. This IC contains two D flip-flops, but you’ll use only the D flip-flop
    on pins 1 to 6.
  prefs: []
  type: TYPE_NORMAL
- en: Run a jumper wire from the inverted output ![image](../images/qbar.jpg) on pin
    6 of the 74LS74 D flip-flop to the D-input at pin 2\. Connect the output from
    pin 3 on the 555 timer to pin 3 on the D flip-flop, which is the clock input.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0251-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The D flip-flop needs power, too. Connect pin 14 to the positive supply column
    on the right and connect pin 7 to the negative supply column on the left.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0251-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: Add the Heads and Tails LEDs'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the previous project, you used a transistor to power an LED from a logic
    gate output because the gate couldn’t provide enough current. This circuit has
    the same challenge because D flip-flops are just a few logic gates in an IC, but
    there’s a little trick you can use to get around that limitation.
  prefs: []
  type: TYPE_NORMAL
- en: The 74LS74 D flip-flop’s datasheet says this IC will allow only about 0.5 mA
    to flow when the output voltage is high, but it allows 8 mA when the output voltage
    is low. (Search online for *74LS74 datasheet* if you’re curious to read the datasheet
    for yourself.) If you connect the LEDs and resistors to the positive supply column
    on one side and to the flip-flop output on the other, the LEDs should get 8 mA
    of current when the output is low, turning them on. It may seem strange to connect
    the LEDs like this, instead of connecting them to the negative supply column,
    but doing so makes the LEDs light when the output from the gate is 0 instead of
    1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever value Q has, ![image](../images/qbar.jpg) will always be the opposite.
    If you connect an LED to each output, one will light up and the other won’t. Add
    the heads and tails LEDs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Plug the two LEDs into the bottom of the breadboard, with the red LED on the
    right side of the middle notch and the green LED on the left side. Place the longer
    leads (the anodes) in the bottom row and the shorter leads (the cathodes) a couple
    of rows above.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one jumper wire from pin 5 of the D flip-flop to the short leg of the
    red LED. Then connect another jumper wire from pin 6 of the D flip-flop to the
    short leg of the green LED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a resistor from each bottom row to the positive supply column on each
    side (R3 and R4 from the circuit diagram).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0253-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Step 5: Toss that “Coin”!'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use a jumper wire to connect the left negative supply column to the one on the
    right, and do the same for the two positive supply columns. Then, connect two
    jumper wires to your barrel jack adapter—connect the plus side to one of the positive
    supply columns and connect the minus side to one of the negative supply columns.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, plug the wall adapter into the barrel jack adapter first and then into
    the wall socket. One LED should light up right away. When you push the button,
    the LEDs should alternate quickly between on and off. Release the button, and
    only one should be lit.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can use this circuit to make decisions. For example, say you ask yourself,
    “Should I go out and play football this weekend, or should I play baseball?” Green
    means go out and play football; red means baseball. Or, if you’re arguing with
    one of your friends about who gets the last cookie, then let the coin tosser decide!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0254-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 6: What If the Coin Tosser Doesn’t Work?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, check that you’re using a 5 V wall adapter. Any other voltages might
    not work.
  prefs: []
  type: TYPE_NORMAL
- en: Then, if one LED is lit but nothing happens when you push the button, check
    that the D flip-flop is connected correctly. If no LEDs are lit, there’s definitely
    something wrong with the D flip-flop and LED parts of the circuit. Carefully compare
    your connections with the circuit diagram at the beginning of this project. If
    your circuit isn’t working after you know the LED and flip-flop circuits are connected
    correctly, then check the 555 timer connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you avoid the same mistakes, I’ll share the problems I had when building
    this for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) I connected the LEDs to pins 4 and 5 of the
    D flip-flop instead of pins 5 and 6.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) I connected the capacitor to pin 5 of the
    555 timer instead of pin 6.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) I forgot to connect the positive supply column
    on the left to the one on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT’S NEXT?**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve built a lot of different circuits in this book! At this point you have
    a solid foundation in electronics, both in theory and practical experience. Now,
    the next step is to focus on what you think is fun. Find a project you really
    want to build—and go make it!
  prefs: []
  type: TYPE_NORMAL
- en: The best way to continue learning is to build lots of circuits and read about
    anything you’re curious about. Follow tutorials online and find more books on
    different topics in electronics.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 12](ch12.xhtml#ch12), the final chapter, I’ll show you how to build
    one last project: a really cool game where you have to test your reaction speed
    by “catching” a light. After that, I hope you’ll continue exploring, playing,
    and having fun with electronics. There are so many great things you can build!'
  prefs: []
  type: TYPE_NORMAL
