- en: —22—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tries for Paperwork
  prefs: []
  type: TYPE_NORMAL
- en: After two searches through the full set of transfers, Frank still hadn’t found
    anyone suspicious. More precisely, he hadn’t found anyone who had any clear involvement
    in the plot. Frank was at least a little suspicious of everyone.
  prefs: []
  type: TYPE_NORMAL
- en: “Hey, Notation’s in here,” remarked Socks on their second pass through.
  prefs: []
  type: TYPE_NORMAL
- en: Frank sighed. “Of course she’s in there, Socks. She just graduated from the
    academy. This is a ledger of officers from the academy.”
  prefs: []
  type: TYPE_NORMAL
- en: “She did pretty well in school, didn’t she?” asked Socks as he skimmed her transfer
    papers.
  prefs: []
  type: TYPE_NORMAL
- en: “Focus, Socks,” said Frank. “Remember, we’re looking for anything *suspicious*.”
  prefs: []
  type: TYPE_NORMAL
- en: “Three recent graduates transferred to the castle,” offered Socks. “Maybe we
    should look into one of them. Gretchen thinks—”
  prefs: []
  type: TYPE_NORMAL
- en: “No.” Frank cut him off with a shake of his head. He’d already seen those transfers,
    and they were all completely clean. Between the three of them, there wasn’t so
    much as a single citation for non-regulation-length toenails.
  prefs: []
  type: TYPE_NORMAL
- en: “There’s nothing here,” Frank said at last. As Socks began to protest, Frank
    cut him off again. “You should go back to my office. I’ll meet you there after
    I brief the captain, and we can go over whatever leads are left.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank thought he saw a look of relief pass over Socks’s face, but wasn’t sure
    if he was just projecting it. He had known rookies to fake appendicitis to the
    point of actually going though with the surgery just to miss a single weekly briefing.
  prefs: []
  type: TYPE_NORMAL
- en: _____________________
  prefs: []
  type: TYPE_NORMAL
- en: Instead of heading straight up to the captain’s office, Frank returned to the
    record room. The captain had given him the official report, but Frank hadn’t had
    a chance to investigate the scene of the crime himself. Maybe he’d get lucky and
    find a clue.
  prefs: []
  type: TYPE_NORMAL
- en: The record officer was a rookie by the name of John Cache who, after grudgingly
    allowing him into the room, trailed after Frank with a vigilant eye. Perhaps after
    the theft the station had tightened its security, though Cache’s behavior was
    probably just due to rookie eagerness. Every rookie fantasizes about foiling crimes
    and saving the day on at least a weekly basis.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0176-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Under the pretense of looking for information about a lost dragon, Frank scanned
    the shelves of books. As expected for a station of this size, the volume of paperwork
    was enormous. Paperwork seemed to grow quadratically with the size of any government
    organization, and the capital police station had more officers than any other
    two stations combined. Even without the stolen scrolls, the room was packed full.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, the record officers kept the information well organized. As per the
    king’s regulation *The Storage of Paperwork and Other Flat Work Products for Agencies
    of More Than 10 People*, every document was categorized and stored by subject.
    Large portions of shelves were dedicated to such topics as arrest reports, expense
    reports, transfers, guard rotations, and noise complaints.
  prefs: []
  type: TYPE_NORMAL
- en: The room itself was organized like a giant *trie*. Tries, also known as *prefix
    trees*, are data structures that allow efficient searches over sets of strings.
    Conceptually similar to binary search trees, tries start at a root node and branch
    out as they move down. However, tries are optimized for searching strings instead
    of numeric values. At each node, the trie splits the data based on the question
    “What is the *next* letter in the string?” Thus, each node in a trie can have
    many children, one for each letter in the alphabet. This structure lets you efficiently
    search for any string by following a single path down the trie, choosing the next
    node based solely on the next letter in your target string.
  prefs: []
  type: TYPE_NORMAL
- en: Frank had once seen a demonstration of a magic trie at a wizards’ convention.
    The neon orange tree had hung in the air, storing the names of the thousand potion
    ingredients carried by that vendor. For simplicity, the trie showed only the non-empty
    branches. Customers could use the trie to quickly determine which ingredients
    were in stock. For example, they could see the vendor carried *batnip* by taking
    the B, A, T, N, I, then P branches. And they could quickly tell that *baby powder*
    was out of stock because the subtree under BA didn’t have a branch corresponding
    to B.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0178-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The record room took the concept of tries and applied it to shelving. Twenty-six
    massive bookshelves lined the walls, each holding records starting with a single
    letter. They were the trie’s first level of nodes. First was the A shelf, followed
    by the B shelf, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0178-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, each bookshelf contained individual shelves, each of which corresponded
    to the second letter of a subject. These shelves made up the trie’s next layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0178-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Because most two-letter combinations didn’t correspond to existing entries,
    the bookshelves didn’t need 26 individual shelves. Frank had heard stories of
    record officers killing time by inventing new subjects to fill the gaps. Apparently,
    a senior officer had received a long lecture from the captain on the seriousness
    of police work after she had suggested filing the speed limits under “Zoom policies.”
    The Z bookcase still lacked a ZO shelf today.
  prefs: []
  type: TYPE_NORMAL
- en: The shelves were then arranged horizontally with labeled book-ends representing
    the third level of the trie.
  prefs: []
  type: TYPE_NORMAL
- en: As he walked, Frank glanced over at the V shelf. During his time on the force,
    he had successfully lobbied to have the Vinettees occupy an entire subject of
    their own. He had spent many nights poring over the files in bookcase V, shelf
    I, section N.
  prefs: []
  type: TYPE_NORMAL
- en: Frank stopped at the D bookcase and located shelf R, section A. He pulled out
    a book on Dragon Registrations and pretended to skim it, while examining the rest
    of the room.
  prefs: []
  type: TYPE_NORMAL
- en: The captain’s description of the crime had been accurate. Entire shelves of
    records had been swept clean, stripped of all scrolls corresponding to certain
    two-letter prefixes. Other bookcases were completely untouched. From his current
    vantage point, Frank could see empty shelves for the prefixes AS, CE, EX, NO,
    PR, and RO. He made a mental list of these prefixes. Whatever information the
    thief was after had those prefixes. And Frank had another lead.
  prefs: []
  type: TYPE_NORMAL
- en: He replaced the book on Dragon Registrations and announced loudly, “Good news!
    There are only a few Pigeon Eaters registered in the capital, and plenty of pigeons.
    At least the poor thing won’t starve while I find it.”
  prefs: []
  type: TYPE_NORMAL
- en: John Cache gave him a pitying look but said nothing as Frank strode from the
    records office.
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: TRIES**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: Tries are tree-based data structures that allow the user to efficiently search
    for strings based on the string’s prefix. Like binary search trees, tries start
    at a root node and branch out as they progress downward. In tries, each branching
    decision is based on the next element of the string. Thus, a node in a trie can
    have more than two children.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0180-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As with a binary tree, we only need to include nodes that have data. This example
    is constructed from the words *zap*, *zen*, *zone*, and *zoom*. Since we don’t
    include *zonk*, we don’t need to have a subtree under the K branch of ZON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we don’t need to store the actual prefixes in the nodes; they can
    be reconstructed from the path through the tree. However, it can be useful to
    store one additional bit of information in each node: whether that node represents
    the end of a valid word. This allows us to distinguish between inserted words
    and prefixes of inserted words. For example, we could tell whether the word *zoo*
    had been inserted into a tree that also contains the word *zoom*.'
  prefs: []
  type: TYPE_NORMAL
- en: Searching a trie is similar to searching a binary search tree. An algorithm
    starts at the top of the trie and progresses downward. At each node, the algorithm
    selects the branch corresponding to the next letter in the target string. For
    example, if we were searching for *zen*, we would follow the path from Z, through
    the branch for E, and then the branch for N.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0181-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If there is no such element, we know that the value of interest is not in the
    tree. So, if we were searching this tree for *zany*, we would hit a dead end after
    ZA.
  prefs: []
  type: TYPE_NORMAL
- en: One surprisingly common use of tries in policing is to compile a list of possible
    suspects. You’d be surprised by how frequently an informant refuses to provide
    a whole name, yet is comfortable providing the first few letters. In these cases,
    we can search the trie for that prefix and list all names in the corresponding
    subtree. Depending on the number and the rarity of the letters, this may be enough
    information to drastically limit the search.
  prefs: []
  type: TYPE_NORMAL
