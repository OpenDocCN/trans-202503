- en: Chapter 9. Cisco IOS On UNIX and NX-OSv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I’ll discuss strategies for installing and integrating Cisco
    IOU devices with GNS3\. You’ll also learn how to install and run Cisco’s next-generation
    switch operating system (NX-OS) using VirtualBox and NX-OSv.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco IOU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cisco IOU is one of the cooler things to happen to the Cisco education community
    in a long time. IOU functions similarly to Dynamips but uses far fewer resources.
    Like Dynamips, IOU allows you to add routers and switches to your GNS3 projects.
    Unlike Dynamips, IOU images emulate the features of an IOS technology train rather
    than the hardware component of a particular Cisco model. Each IOU image file is
    a self-contained binary application that runs an instance of a device. There are
    images designed for routing, switching, voice over IP (VoIP), and Pagent (for
    generating IP traffic). IOU doesn’t require a hypervisor to emulate Cisco hardware,
    often making IOU devices less memory hungry and CPU intensive than Dynamips devices.
    The obvious advantage here is that you can create larger topologies on a modestly
    configured PC.
  prefs: []
  type: TYPE_NORMAL
- en: In 2010, Cisco integrated IOU into the Cisco Learning Network to provide online
    virtual labs for CCNA and CCNP students. The labs are inexpensive and well designed.
    If you’re interested in Cisco Learning Labs, you should check out the Cisco Learning
    Center (*[http://learningnetwork.cisco.com/](http://learningnetwork.cisco.com/)*).
  prefs: []
  type: TYPE_NORMAL
- en: As the name implies, IOS on Unix runs only on Unix-based systems. Sometimes
    referred to as IOS on Linux (IOL), it was developed on Solaris Unix and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: What IOU Means to GNS3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Cisco announced it was moving away from industry-standard hardware in
    favor of proprietary integrated service router (ISR) hardware, the GNS3 community
    wondered whether the end of Dynamips and GNS3 had arrived. Without access to the
    technical specifications for the new proprietary hardware, it would be impossible
    to create a new hypervisor required to run the latest IOS software. Eventually,
    the old Dynamips devices would stop getting IOS updates and become obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco actually keeps IOS current for the 7200 series routers that GNS3 uses,
    but all other GNS3 routers stop cold at IOS release 12.4(15)T, which imposes limits
    on learning modern technologies such as VoIP. This is why IOU is exciting. It
    breathes new life into GNS3 by allowing you to integrate updated IOS technologies
    into your GNS3 projects—and that’s pretty cool!
  prefs: []
  type: TYPE_NORMAL
- en: Switching, Switching, and More Switching!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the best reasons to integrate IOU into GNS3 is that you can use many
    of Cisco’s advanced switching features, which are missing from the NM-16ESW module
    in Dynamips (refer to [Appendix C](apc.html "Appendix C. NM-16ESW and IOU L2 Limitations")).
    These features allow GNS3 to step up its game and become an all-inclusive training
    tool for more advanced certifications like CCIE.
  prefs: []
  type: TYPE_NORMAL
- en: With IOU, you no longer have to purchase physical switches and create a breakout
    switch or use funny little tricks like ISL bridging to access real switches. Using
    a GNS3 EtherSwitch router, it’s now possible to create a regular 802.1Q trunk
    link from your Dynamips switches to an IOU switch block running on your PC. IOU
    switches are stable, run fast, and, unlike physical switches, are completely portable,
    which means they can travel with you on a laptop as part of your GNS3 projects.
  prefs: []
  type: TYPE_NORMAL
- en: IOU Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IOU images are designed around IOS features, and their filenames often reveal
    what features they include, much like IOS image filenames. For example, let’s
    break down the filename of an IOU switch named *I86BI_LINUXL2-UPK9-M-15.0*.
  prefs: []
  type: TYPE_NORMAL
- en: '****I86BI****. Indicates this is an Intel 32-bit binary image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****LINUX****. Indicates it runs on Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****L2****. Indicates it’s an L2/L3 switch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****UPK9****. Indicates the image contains advanced cryptographic features
    such as 3DES/AES.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****M****. Indicates it’s a mainline IOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****15.0****. Specifies the IOS version the image is based on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this information, you should be able to look at almost any IOU filename
    to quickly determine what features it includes.
  prefs: []
  type: TYPE_NORMAL
- en: Things to Know Before Installing IOU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, a standard GNS3 installation doesn’t allow you to run IOU devices.
    IOU devices are Linux binary files, so they can be run using a Linux operating
    system only. Typically, images are 32-bit binary files, but with the proper library
    files, you can easily run them on 64-bit Linux systems. If you’re running GNS3
    on Windows or OS X, you have to install a virtualization program like VirtualBox
    and run your IOU devices using a Linux virtual machine. Fortunately, GNS3 provides
    an IOU virtual machine that you can download from the GNS3 website. The GNS3 IOU
    virtual machine is ready to run IOU images, provides an easy way for you to upload
    your images, and doesn’t require that you know how to use Linux commands.
  prefs: []
  type: TYPE_NORMAL
- en: The upside to running GNS3 in Linux is that installing and configuring IOU is
    more straightforward, and everything should run seamlessly without extra configuration.
    The downside is that you have to know a little something about Linux, but in my
    opinion, that’s a small price to pay. When you run GNS3 on Windows or OS X, you
    have to configure it to communicate with the Linux virtual machine over TCP/IP,
    which can be a pain to manage. If your workstation or IOU virtual machine’s IP
    addresses change (which often happens), you’ll have to reconfigure GNS3 to use
    the new IP addresses. Also, when you upgrade GNS3, you have to upgrade the GNS3
    server software that runs on the IOU virtual machine. The version numbers must
    be identical, or IOU will not run. These steps are unnecessary when you run both
    GNS3 and IOU on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up IOU on a Linux PC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some distinct advantages to running GNS3 and IOU on a Linux PC. The
    big one is that you don’t need to use an IOU virtual machine because on Linux
    IOU image files run natively. This means you don’t have to give up precious resources,
    such as CPU cycles and memory, that would be taken by the IOU virtual machine.
    Another advantage is that you can use Wireshark to capture and monitor packets
    between two IOU devices, which you can’t do when using the IOU virtual machine.
    This is because the .*pcap* capture file, which is created when you start a Wireshark
    capture, is saved on the IOU virtual machine and not locally, so Wireshark cannot
    access the file.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re running GNS3 on Linux, follow the instructions in this section to
    get IOU up and running. Otherwise, skip ahead to [Using the GNS3 IOU Virtual Machine
    on Windows and OS X](ch09.html#using_the_gns3_iou_virtual_machine_on_wi "Using
    the GNS3 IOU Virtual Machine on Windows and OS X").
  prefs: []
  type: TYPE_NORMAL
- en: Installing IOU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run an IOU image, the image looks for the file *libcrypto.so.4* and
    won’t run without it. Although a libcrypto library file may already be installed
    on your system, you should install *libssl1.0.0* because this version is proven
    to be stable with IOU images. Next, create a symbolic link (sym-link) from *libcrypto.so.1.0.0*
    to *libcrypto.so.4*; a symlink is the Linux equivalent of a Windows shortcut.
    If you’re using a 32-bit version of Ubuntu, install libcrypto using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When running a 64-bit Ubuntu system, you’ll need to install the 32-bit libssl
    package before you can configure libcrypto and run a 32-bit IOU image. If you
    have a 32-bit Ubuntu system, you can disregard the next commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you’re not running Ubuntu, then you may need to do a little research to configure
    libcrypto on your system because not all Linux systems use the same library files
    and versions or even store the files in the same directories as Ubuntu. The key
    is that the libcrypto file must be symlinked to *libcrypto.so.4*.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’ve configured *libcrypto.so.4*, copy one or more IOU image files
    to your Ubuntu system. You have to make the IOU files executable before they’ll
    run; here’s how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, install the dependencies for the GNS3 iouyap application. This program
    is responsible for setting up communication between IOU and other GNS3 devices,
    like Dynamips routers. Begin by installing bison and flex, two packages that are
    needed before iouyap can compile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install and compile the iniparser program using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A ZIP file containing iouyap should have been included in your GNS3 for Linux
    download. Unzip *iouyap-<x>.zip*, replacing *<x>* with the version you have, and
    compile the program using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If necessary, copy the compiled application to the */usr/local/bin* directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that all the applications are installed, you need to do some configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a License File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before running IOU, you have to create a license file that contains the hostname
    of your PC and a valid license key. The license key is generated from your Linux
    hostname, so make sure you’re satisfied with your PC’s hostname. If you change
    your hostname, you’ll need to enter a new license key.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have obtained a license key, use a text editor to create the license
    file. I usually name my file .*iourc*, but any name will do. The following is
    an example of a license file for a PC named Ubuntu using the license key 1234567812345678\.
    The hostname is case sensitive, so take care when entering it in the license file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you’re unsure what your Linux host is named, you can use the `hostname` command
    from your terminal to display the name.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GNS3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, set the path to the iouyap application and your IOU license file in the
    IOS on UNIX preferences. The iouyap application is used to bridge Dynamips, and
    other GNS3 devices, with IOU devices so that all your devices can be seamlessly
    networked together. Select **Edit** ▸ **Preferences** and then select **IOS on
    UNIX** from the left menu, as shown in [Figure 9-1](ch09.html#ios_on_unix_preferencescomma_general_set
    "Figure 9-1. IOS on UNIX preferences, General settings tab").
  prefs: []
  type: TYPE_NORMAL
- en: '![IOS on UNIX preferences, General settings tab](httpatomoreillycomsourcenostarchimages2209111.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1. IOS on UNIX preferences, General settings tab
  prefs: []
  type: TYPE_NORMAL
- en: On the General settings tab, set the path and name of your license file in Path
    to IOURC. This refers to the IOU license file you created earlier. Also, set the
    file path to your *iouyap* file in Path to iouyap, typically */usr/ local/bin/iouyap*.
    Next, go to the Server settings tab, shown in [Figure 9-2](ch09.html#ios_on_unix_preferencescomma_server_sett
    "Figure 9-2. IOS on UNIX preferences, Server settings tab").
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Always use the local server (Linux only)** checkbox so that IOU
    uses the local PC for GNS3 and IOU integration. Then, go to the Advanced settings
    tab, shown in [Figure 9-3](ch09.html#ios_on_unix_preferencescomma_advanced_se
    "Figure 9-3. IOS on UNIX preferences, Advanced settings tab").
  prefs: []
  type: TYPE_NORMAL
- en: Each IOU device is assigned a unique console port number within the defined
    range. Don’t change these values unless the range conflicts with other IP-based
    applications running on your PC; the same is true for the UDP tunneling port range.
    UDP ports are used to set up network communication between IOU and other GNS3
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![IOS on UNIX preferences, Server settings tab](httpatomoreillycomsourcenostarchimages2209113.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2. IOS on UNIX preferences, Server settings tab
  prefs: []
  type: TYPE_NORMAL
- en: '![IOS on UNIX preferences, Advanced settings tab](httpatomoreillycomsourcenostarchimages2209115.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3. IOS on UNIX preferences, Advanced settings tab
  prefs: []
  type: TYPE_NORMAL
- en: Finally, expand **IOS on UNIX** in the left menu of the Preferences window to
    display the IOU devices section, shown in [Figure 9-4](ch09.html#adding_iou_images_to_gns3
    "Figure 9-4. Adding IOU images to GNS3"). From here, you can add one or more IOU
    image files to GNS3.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding IOU images to GNS3](httpatomoreillycomsourcenostarchimages2209117.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-4. Adding IOU images to GNS3
  prefs: []
  type: TYPE_NORMAL
- en: To add an IOU image file to GNS3, click the **New** button to start the New
    IOU device wizard, shown in [Figure 9-5](ch09.html#new_iou_device_wizard "Figure 9-5. New
    IOU device wizard").
  prefs: []
  type: TYPE_NORMAL
- en: '![New IOU device wizard](httpatomoreillycomsourcenostarchimages2209119.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-5. New IOU device wizard
  prefs: []
  type: TYPE_NORMAL
- en: Enter a name for your new device (*IOU_L2* in this example); then click the
    **Browse** button to locate and select your IOU image file. When you’re done,
    click **Finish** to complete the wizard. Once added, your IOU image file should
    be copied to your GNS3 user directory under *GNS3/images/IOU*.
  prefs: []
  type: TYPE_NORMAL
- en: To configure an IOU device, drag an IOU device icon from the Devices toolbar
    to your workspace. Right-click the device and choose **Configure** to open the
    Node configurator (shown in [Figure 9-6](ch09.html#iou_node_configurator "Figure 9-6. IOU
    Node configurator")).
  prefs: []
  type: TYPE_NORMAL
- en: '![IOU Node configurator](httpatomoreillycomsourcenostarchimages2209121.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-6. IOU Node configurator
  prefs: []
  type: TYPE_NORMAL
- en: The options on the General settings tab allow you to rename your device and
    change the IOU image file, console port number, and default RAM and NVRAM values.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number of Ethernet and serial adapters installed by adjusting
    the values on the Network tab. The default is two of each adapter, but they provide
    four interfaces each, giving you a total of eight Ethernet and eight serial interfaces.
    This should be plenty for most projects, but you can easily adjust the quantity
    to meet your needs. The total combined number of adapters (Ethernet and serial)
    can’t exceed 16, for a total of 64 interfaces per IOU device.
  prefs: []
  type: TYPE_NORMAL
- en: An IOU device can be linked to any other GNS3 device, just as you would a standard
    Dynamips router or switch. You can even *hot-link* them to devices, meaning links
    can be formed between the devices after they’re started.
  prefs: []
  type: TYPE_NORMAL
- en: To export an IOU configuration, enter **`copy running-config unix:initial -config.cfg`**
    from the IOU console and then right-click the IOU device in your workspace and
    select **Export config**. You will then be prompted for a filename and location,
    where the file will be saved. You can import a configuration by selecting **Import
    config** instead.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run IOU in Windows or OS X, read the next section. If not, you
    can skip ahead to [NX-OSv](ch09.html#nx-osv "NX-OSv").
  prefs: []
  type: TYPE_NORMAL
- en: Using the GNS3 IOU Virtual Machine on Windows and OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned in [Things to Know Before Installing IOU](ch09.html#things_to_know_before_installing_iou
    "Things to Know Before Installing IOU"), Windows and OS X systems can run IOU
    only using a Linux virtual machine. If you haven’t done so already, download and
    install VirtualBox (*[https://www.virtualbox.org/](https://www.virtualbox.org/)*).
    Accepting the default installation settings should provide everything you need
    for running an IOU virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: After installing VirtualBox, visit the GNS3 website (*[http://www.gns3.com/](http://www.gns3.com/)*)
    and download the OVA file named *GNS3 IOU VM.ova*. This is a Linux virtual machine
    that’s been preconfigured with all the tools you need to run IOU, but it doesn’t
    include any IOU image files. Instead, it provides a web-based utility that allows
    you to easily upload your image files to the appliance, but you’ll need to import
    the appliance into VirtualBox before you can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the GNS3 IOU Virtual Machine into VirtualBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by launching the VirtualBox application. After the application loads,
    select **File** ▸ **Import Appliance**. You should be presented with the Import
    Virtual Appliance dialog, shown in [Figure 9-7](ch09.html#select_the_virtual_appliance
    "Figure 9-7. Select the virtual appliance.").
  prefs: []
  type: TYPE_NORMAL
- en: '![Select the virtual appliance.](httpatomoreillycomsourcenostarchimages2209123.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-7. Select the virtual appliance.
  prefs: []
  type: TYPE_NORMAL
- en: Use the browse icon to locate and select the *GNS3 IOU VM.ova* file. In [Figure 9-7](ch09.html#select_the_virtual_appliance
    "Figure 9-7. Select the virtual appliance."), my virtual machine is located in
    my *Downloads* directory, *C:\Users\jneumann\Downloads*. Once you select the file,
    click **Next** and verify the appliance settings. They should look similar to
    [Figure 9-8](ch09.html#virtual_appliance_settings "Figure 9-8. Virtual Appliance
    settings").
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual Appliance settings](httpatomoreillycomsourcenostarchimages2209125.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-8. Virtual Appliance settings
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to accept the suggested appliance settings. Notice that the
    default RAM setting is 2048MB. I’ve found that the RAM can be reduced to 1024MB
    if you’re using only a couple of IOU devices in your projects. Doing so reduces
    the overall amount of memory used in your PC and may help GNS3 perform better
    if you’re strapped for resources. If you’re unsure, then just accept the defaults
    and click **Import** to complete the import. You can always modify the settings
    later.
  prefs: []
  type: TYPE_NORMAL
- en: After importing the virtual machine, click **Settings** and then click **Network**
    to access the Network pane, shown in [Figure 9-9](ch09.html#bridge_the_network_adapter_to_your_pc
    "Figure 9-9. Bridge the network adapter to your PC.").
  prefs: []
  type: TYPE_NORMAL
- en: '![Bridge the network adapter to your PC.](httpatomoreillycomsourcenostarchimages2209127.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-9. Bridge the network adapter to your PC.
  prefs: []
  type: TYPE_NORMAL
- en: From the Adapter 1 tab, select the **Enable Network Adapter** option. Then,
    choose **Bridged Adapter** next to the Attached to field. When you’re finished,
    click **OK**. This bridges your virtual machine’s Ethernet adapter to your PC
    and allows it to access the Internet so you can install additional packages, if
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading IOU Image Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve imported the GNS3 IOU virtual machine, you should be able to
    run the virtual machine and upload your IOU image files. To power on the virtual
    machine, select **GNS3 IOU VM**, as in [Figure 9-10](ch09.html#select_and_start_your_gns3_iou_virtual_m
    "Figure 9-10. Select and start your GNS3 IOU virtual machine."), and click **Start**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Select and start your GNS3 IOU virtual machine.](httpatomoreillycomsourcenostarchimages2209129.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-10. Select and start your GNS3 IOU virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s normal for the virtual machine to take a minute or two to start because
    it’s booting a fully functional Linux OS. After the virtual machine is up and
    running, a console message similar to the following should be displayed on the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the screen instructs you to use your PC’s web browser to upload
    IOU image files to the appliance. For this to work, your PC and the GNS3 IOU virtual
    machine must each have an IP address assigned from your local network. In this
    example, my virtual machine’s IP address is 172.16.231.204.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Sometimes the IOU virtual machine may not display the IP address. In that
    case, log on to the virtual machine using the username* root *and the password*
    cisco. *Then enter* `ifconfig eth0` *to display the IP address of your virtual
    machine’s Ethernet interface.*'
  prefs: []
  type: TYPE_NORMAL
- en: To upload an IOU image file, open your web browser and browse to the IP address,
    using port 8000 as instructed. After entering the URL (*[http://172.16.231.204:8000/upload](http://172.16.231.204:8000/upload)*
    in this example), you should be presented with a web page like the one in [Figure 9-11](ch09.html#select_and_upload_your_iou_image_filesdo
    "Figure 9-11. Select and upload your IOU image files.").
  prefs: []
  type: TYPE_NORMAL
- en: '![Select and upload your IOU image files.](httpatomoreillycomsourcenostarchimages2209131.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-11. Select and upload your IOU image files.
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Browse...** button to select an IOU image file from your PC. Once
    selected, click **upload** to complete the process. Repeat this step for each
    image you want to use with GNS3 and your IOU license file. Images are stored on
    the IOU virtual machine under */home/gns3/GNS3/images*, and the path is displayed
    on the web page for later reference. You’ll need this information when you configure
    your IOU images in GNS3, so it’s a good idea to highlight and copy the full path
    and filename now. That way, you won’t have to type it later.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GNS3 for IOU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that IOU is ready, you just have to prepare GNS3\. First, create a plaintext
    license file on your PC using the hostname *gns3-iouvm*, as in the following example.
    Replace 1234567812345678 with your license number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A common name that’s often used for the IOU license file is .*iourc*, but you
    can use any name that makes sense to you (for example, you might call it *iou-license.txt*),
    and the license file can be stored anywhere on your system.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve created the license file, you’re ready to configure the GNS3 preferences
    for IOU. Launch GNS3, select **Edit** ▸ **Preferences** on Windows or **GNS3**
    ▸ **Preferences** on OS X, and select **GNS3 server**, as shown in [Figure 9-12](ch09.html#gns3_server_preferencescomma_remote_serv
    "Figure 9-12. GNS3 server preferences, Remote servers tab").
  prefs: []
  type: TYPE_NORMAL
- en: '![GNS3 server preferences, Remote servers tab](httpatomoreillycomsourcenostarchimages2209133.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-12. GNS3 server preferences, Remote servers tab
  prefs: []
  type: TYPE_NORMAL
- en: Select the Remote servers tab. Under Host ➊ enter the IP address of your GNS3
    IOU virtual machine, click **Add**, and then click **Apply**. In this example,
    the IP address of my GNS3 IOU virtual machine is 172.16.231.204.
  prefs: []
  type: TYPE_NORMAL
- en: Next, tell GNS3 where to find the IOU license file. Click **IOS on UNIX** from
    the pane on the left and select the General settings tab, shown in [Figure 9-13](ch09.html#ios_on_unix_preferencescomma_gen-id00019
    "Figure 9-13. IOS on UNIX preferences, General settings tab").
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Browse...** button to the right of the Path to IOURC field to locate
    your license file. Select the file and then click **Add** and **Apply**. In this
    example, the path to my license file is *C:\Users\jneumann\GNS3\iourc_license.txt*.
  prefs: []
  type: TYPE_NORMAL
- en: '![IOS on UNIX preferences, General settings tab](httpatomoreillycomsourcenostarchimages2209135.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-13. IOS on UNIX preferences, General settings tab
  prefs: []
  type: TYPE_NORMAL
- en: Next, expand **IOS on UNIX** in the pane on the left to display IOU devices,
    as shown in [Figure 9-14](ch09.html#iou_devices_preferences "Figure 9-14. IOU
    devices preferences").
  prefs: []
  type: TYPE_NORMAL
- en: The final configuration step is to add the path to an IOU image file. Select
    the **IOS devices** preference and click **New** to start the wizard. Under Server
    type, make sure there’s a check next to **Remote** and click **Next**. A message
    about choosing a path to your image should appear; click **OK**, and you should
    see the New IOU device window, shown in [Figure 9-15](ch09.html#new_iou_device_window
    "Figure 9-15. New IOU device window").
  prefs: []
  type: TYPE_NORMAL
- en: Enter a name for your IOU device (*IOU_L2*, for example) and then enter the
    IOU image path. Because IOU images are installed on the Linux virtual machine,
    you’ll have to enter the “Linux pathname” to your image file. That path is */home/gns3/GNS3/images/<image_name>*.
    In this example I’ve entered */home/gns3/GNS3/images/i86bi-linux-l2-adventerprisek9-15.1a.bin*.
    You can find this information on the IOU web page that you used to upload your
    image files (refer to [Figure 9-11](ch09.html#select_and_upload_your_iou_image_filesdo
    "Figure 9-11. Select and upload your IOU image files.")). Be careful to enter
    the path and filename correctly; otherwise, IOU won’t work. I recommend copying
    and pasting the information directly from the IOU virtual machine web page to
    avoid any confusion.
  prefs: []
  type: TYPE_NORMAL
- en: '![IOU devices preferences](httpatomoreillycomsourcenostarchimages2209137.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-14. IOU devices preferences
  prefs: []
  type: TYPE_NORMAL
- en: '![New IOU device window](httpatomoreillycomsourcenostarchimages2209139.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-15. New IOU device window
  prefs: []
  type: TYPE_NORMAL
- en: When you’re finished, click **Finish** to close the wizard and then click **Apply**
    and **OK** to complete the configuration. Once you’ve added an IOU image, you’re
    ready to start using IOU devices in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you upgrade GNS3 to a new version, you also have to upgrade the server on
    your GNS3 IOU virtual machine to the same version, or it won’t work. To upgrade
    the server, log on to the GNS3 IOU virtual machine and enter the following commands,
    replacing *`version`* with your version of GNS3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: IOU in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s create a simple project that allows an IOU switch to route TCP/IP
    traffic between two VLANs. Start by creating the project shown in [Figure 9-16](ch09.html#vlan_routing_using_an_iou_switch
    "Figure 9-16. VLAN routing using an IOU switch").
  prefs: []
  type: TYPE_NORMAL
- en: '![VLAN routing using an IOU switch](httpatomoreillycomsourcenostarchimages2209141.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-16. VLAN routing using an IOU switch
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you’ll configure an IOU L2 switch with two VLANs (VLAN 10
    and VLAN 20). Then you’ll assign router R1 to VLAN 10 and router R2 to VLAN 20\.
    In this lab, the IOU switch will route packets between the two VLANs so that R1
    and R2 can ping each other. Start by configuring the IOU1 switch as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Enable IP routing ➊ and then create the two VLANs (10 and 20) using the `vlan`
    command ➋. Next, create a switched virtual interface (SVI) ➌ for each VLAN and
    assign each SVI an IP address ➍. Use the `no shutdown` command ➎ to bring up the
    interface. Now go under the physical interfaces ➏ that are connected to R1 and
    R2, make them access ports ➐, and assign them to the appropriate VLAN ➑.
  prefs: []
  type: TYPE_NORMAL
- en: Next, configure an IP address on router R1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After assigning the IP address to F0/0 on R1, set the default gateway address
    to 192.168.1.1 so that the router will use IOU1 for its gateway. Finally, configure
    R2 in a similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After configuring the project, you can test VLAN routing using the `ping` command.
    Router R1 should be able to ping router R2 through the IOU1 switch, as in the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That’s all it takes to get IOU devices up and running with GNS3\. Now let’s
    take a look at Cisco’s newest operating system, NX-OS.
  prefs: []
  type: TYPE_NORMAL
- en: NX-OSv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cisco NX-OS runs on a data-center class of switches known as Nexus. Though similar
    to IOS, NX-OS is not IOS and uses a different set of configuration commands. NX-OSv,
    sometimes called Titanium, is a Linux virtual machine that runs an NX-OS simulator
    using virtualization software, like VirtualBox. NX-OSv is not a complete OS simulation,
    and it’s missing a lot of functionality. It provides just enough features and
    commands to give you a feel for how NX-OS works, and it can be networked to GNS3
    devices. After you’ve acquired an NX-OSv image, make a copy and keep it in a safe
    place in case your working copy gets corrupted in some way.
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory for NX-OSv under your GNS3 directory and copy the NX-OSv
    image file there. You should have a file named *N7K.vmdk*. Your filename may be
    different depending on your version of NX-OSv. With your image file in place,
    it’s time to get NX-OSv wired up in VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: Importing NX-OSv into VirtualBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NX-OSv usually comes ready to run in the form of a single virtual machine hard
    disk file (.*vmdk* file), and you can run it using VMware, VirtualBox, or QEMU.
    VirtualBox is free and runs NX-OSv reliably, even on PCs with older processors
    such as the Core 2 Duo, so I’ll cover VirtualBox here. Configuration consists
    of importing the hard disk image file into a custom Linux virtual machine and
    adjusting a couple of settings. If you don’t have VirtualBox installed on your
    PC, download and install it now.
  prefs: []
  type: TYPE_NORMAL
- en: Launch VirtualBox and click **New** to create a new virtual machine. You should
    be presented with the Create Virtual Machine wizard, shown in [Figure 9-17](ch09.html#create_virtual_machine_wizardcomma_name
    "Figure 9-17. Create Virtual Machine wizard, Name and operating system window").
  prefs: []
  type: TYPE_NORMAL
- en: '![Create Virtual Machine wizard, Name and operating system window](httpatomoreillycomsourcenostarchimages2209143.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-17. Create Virtual Machine wizard, Name and operating system window
  prefs: []
  type: TYPE_NORMAL
- en: Enter a name for the device, set Type to **Linux** and Version to **Other Linux
    (64-bit)**, and then click **Next** to continue. You should be presented with
    the Memory size window, shown in [Figure 9-18](ch09.html#create_virtual_machine_wizardcomma_memor
    "Figure 9-18. Create Virtual Machine wizard, Memory size window").
  prefs: []
  type: TYPE_NORMAL
- en: To adjust the memory size, use the slider or enter the amount in the field provided.
    NX-OSv runs best with 2048MB of RAM. When you’re done, click **Next** to configure
    the hard drive settings, shown in [Figure 9-19](ch09.html#create_virtual_machine_wizardcomma_hard
    "Figure 9-19. Create Virtual Machine wizard, Hard drive window").
  prefs: []
  type: TYPE_NORMAL
- en: '![Create Virtual Machine wizard, Memory size window](httpatomoreillycomsourcenostarchimages2209145.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-18. Create Virtual Machine wizard, Memory size window
  prefs: []
  type: TYPE_NORMAL
- en: '![Create Virtual Machine wizard, Hard drive window](httpatomoreillycomsourcenostarchimages2209147.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-19. Create Virtual Machine wizard, Hard drive window
  prefs: []
  type: TYPE_NORMAL
- en: To attach the NX-OS virtual hard drive to your virtual machine, select **Use
    an existing virtual hard drive file** and click the browse icon to locate your
    NX-OSv .*vmdk* file. Select the file and click **Create** to finish creating the
    virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GNS3 for NX-OSv
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start GNS3 and add the NX-OSv virtual machine to your virtual machine library.
    Select **Edit** ▸ **Preferences** and expand **VirtualBox** to show VirtualBox
    virtual machines, as shown in [Figure 9-20](ch09.html#adding_the_nx-osv_virtualbox_virtual_mac
    "Figure 9-20. Adding the NX-OSv VirtualBox virtual machine to GNS3"). From here
    you can add VirtualBox virtual machines to GNS3, which is the last step before
    you can use NX-OSv.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the NX-OSv VirtualBox virtual machine to GNS3](httpatomoreillycomsourcenostarchimages2209149.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-20. Adding the NX-OSv VirtualBox virtual machine to GNS3
  prefs: []
  type: TYPE_NORMAL
- en: Click **New** to start the VirtualBox wizard, select your NX-OSv virtual machine
    from the virtual machine name drop-down menu, and click **Finish**. Now click
    **Edit** and navigate to the General settings tab. Select the **Enable remote
    console** and **Start VM in headless mode** boxes and click **Apply**. Under the
    Network tab, change the number of interfaces from 1 to 6, and click **Apply**
    to close the window. Then click **Apply** and **OK** to complete the installation.
    To use a NX-OSv virtual machine in your projects, drag your NX-OSv virtual machine
    from the End devices toolbar to your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: NX-OSv in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have the NX-OSv device added to GNS3, let’s use it in a project.
    Create a topology that includes one NX-OSv device and one IOS router, as shown
    in [Figure 9-21](ch09.html#simple_topology_using_nx-osv "Figure 9-21. Simple topology
    using NX-OSv"). This project will advertise all 172.16.0.0 networks from R1 to
    NX-OSv using Cisco EIGRP.
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple topology using NX-OSv](httpatomoreillycomsourcenostarchimages2209151.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-21. Simple topology using NX-OSv
  prefs: []
  type: TYPE_NORMAL
- en: After you create the project, start all your devices and open a console connection
    to NX-OSv. NX-OS running on a PC takes a long time to boot and often hangs for
    a minute at the `SCSI disk detected` message, displayed in [Figure 9-22](ch09.html#booting_nx-osv
    "Figure 9-22. Booting NX-OSv"). This is normal, so be patient while it starts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Booting NX-OSv](httpatomoreillycomsourcenostarchimages2209153.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-22. Booting NX-OSv
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t see the boot messages, you may have misconfigured something. Go
    back and check all your settings in VirtualBox and GNS3\. If you continue to have
    problems, there may be something wrong with your *N7K.vmdk* image file.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the system starts, you should be presented with a login prompt, like
    the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The default login and password should be `admin` and `admin`. Use these credentials
    to log on to NX-OSv. This is a good time to enter a few commands. I would start
    with `show run`, `show version`, and `show interface brief`, but you can try any
    IOS commands you’re familiar with. Some will be the same on NX-OS; others will
    not. You can use the question mark (`?`) to display a complete list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve taken a peek at NX-OSv, you can configure your project. First,
    you’ll configure router R1\. Open a console on router R1 and enter the following
    commands to configure all the IP addresses for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next, enable EIGRP and advertise all the IP networks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now log on to NX-OSv and configure an IP address from the same subnet as R1’s
    interface f0/0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The first thing you should notice is that NX-OS only accepts IP addresses using
    CIDR notation, so here, the subnet mask is entered as `/24` and not `255.255.255.0`
    as commonly used in IOS. Now use the `ping` command to test connectivity from
    NX-OSv to router R1 and exit to configuration mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s configure NX-OSv so that it can exchange EIGRP advertised routes with
    router R1\. Note that NX-OS allows you to run EIGRP only for a grace period of
    120 days, unless you have a feature license. Enter the `license grace-period`
    command to start the grace period.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can verify that routes from R1 are being advertised to NX-OSv using the
    `show ip route` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the previous lines, notice that the output from this command is different
    from IOS, but all the pertinent information is there. In this example, all of
    the 172.16.0.0 routes have been advertised from R1 to NX-OSv via EIGRP, so you
    should be able to ping any of those addresses. Try that now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Finally, save your configuration. The command itself is the same as IOS, but
    it provides different output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now that you’ve created a simple project, you can begin experimenting with NX-OSv
    on your own. Keep in mind that some functions will definitely be missing. In my
    version, for example, none of the L2 switch functionality works, only layer 3
    routing. Another item to be aware of is tab completion; it works only on some
    commands, so don’t assume a command doesn’t work just because NX-OSv doesn’t provide
    tab completion on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In spite of these limitations, I still find it fun to add NX-OS devices to my
    projects, and I’m sure you will too. To learn more about Cisco Nexus and NX-OS,
    visit *[http://www.cisco.com/en/US/products/ps9402/index.html](http://www.cisco.com/en/US/products/ps9402/index.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you explored IOS on Unix and learned how to leverage IOU to
    add nearly full-featured switching capabilities to GNS3 without using physical
    switches. Although not required for CCNA-level certifications, IOU switching is
    highly useful for CCNP and CCIE certifications.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you installed NX-OSv, a virtual machine that simulates a Cisco Nexus switch
    running NX-OS. NX-OSv can be networked to GNS3 devices using protocols such as
    OSPF and EIGRP, and it’s fun to play with, but it lacks much of the functionality
    you’d find using a real Nexus switch.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I’ll show you a few fun things you can do with GNS3, such
    as creating a simulated access server to manage your routers.
  prefs: []
  type: TYPE_NORMAL
