["```\nroot@Lab:~/# **apt install -y nginx**\nroot@Lab:~/# **vi /etc/nginx/conf.d/reverse.conf**\n```", "```\n#/etc/nginx/conf.d/reverse.conf\n\nserver {\n  # basic web server configuration\n  listen 80;\n\n  # normal requests are served from /var/www/html\n  root /var/www/html;\n  index index.html;\n  server_name `www.mydomain.com`;\n\n  # return 404 if no file or directory match\n  location / {\n     try_files $uri $uri/ =404;\n  }\n\n  # /msf URL gets redirected to our backend C2 framework\n  location /msf {\n     proxy_pass https://192.168.1.29:8443;\n     proxy_ssl_verify off;\n     proxy_set_header Host $host;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n  # repeat previous block for other C2 backends\n}\n```", "```\nroot@Lab:~/# **add-apt-repository ppa:certbot/certbot**\nroot@Lab:~/# **apt update && apt install python-certbot-nginx**\nroot@Lab:~/# **certbot --nginx -d** `mydomain.com` **-d** `www.mydomain.com`\n\nCongratulations! Your certificate and chain have been saved at...\n```", "```\nroot@Lab:~/# **pstree -p**\nsystemd(1)─┬─accounts-daemon(777)─┬─{gdbus}(841)\n           │                      └─{gmain}(826)\n           ├─acpid(800)\n           ├─agetty(1121)\n```", "```\nroot@Lab:~/# **curl -fsSL https://download.docker.com/linux/ubuntu/gpg   `| apt-key add -`**\n\nroot@Lab:~/# **add-apt-repository \\**\n   **\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\**\n   **$(lsb_release -cs) \\**\n   **stable\"**\n\nroot@Lab:~/# **apt update**\nroot@Lab:~/# **apt install -y docker-ce**\n```", "```\nroot@Lab:~/# **docker pull phocean/msf**\nroot@Lab:~/# **docker run --rm -it phocean/msf**\n* Starting PostgreSQL 10 database server\n[ OK ]\nroot@46459ecdc0c4:/opt/metasploit-framework#\n```", "```\nroot@46459ecdc0c4:/opt/metasploit-framework# **./msfconsole**\n\n       =[ metasploit v5.0.54-dev                          ]\n+ -- --=[ 1931 exploits - 1078 auxiliary - 332 post       ]\n+ -- --=[ 556 payloads - 45 encoders - 10 nops            ]\n+ -- --=[ 7 evasion                                       ]\n\nmsf5 > **exit**\n```", "```\nroot@Lab:~/# **ip addr**\n3: **docker0**: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 state group default\nlink/ether 03:12:27:8f:b9:42 brd ff:ff:ff:ff:ff:ff\ninet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n`--snip--`\n```", "```\nroot@Lab:~/# **sudo docker run --rm \\**\n**-it -p 8400-8500:8400-8500 \\**\n**-v ~/.msf4:/root/.msf4 \\**\n**-v /tmp/msf:/tmp/data \\**\n**phocean/msf**\n```", "```\n# file: ~/SILENTTRINITY/Dockerfile\n# The base Docker image containing binaries to run Python 3.7\nFROM python:stretch-slim-3.7\n\n# We install the git, make, and gcc tools\nRUN apt-get update && apt-get install -y git make gcc\n\n# We download SILENTTRINITY and change directories\nRUN git clone https://github.com/byt3bl33d3r/SILENTTRINITY/ /root/st/\nWORKDIR /root/st/\n\n# We install the Python requirements\nRUN python3 -m pip install -r requirements.txt\n\n# We inform future Docker users that they need to bind port 5000\nEXPOSE 5000\n\n# ENTRYPOINT is the first command the container runs when it starts\nENTRYPOINT [\"python3\", \"teamserver.py\", \"0.0.0.0\", \"stringpassword\"]\n```", "```\n root@Lab:~/# **docker build -t silent .**\nStep 1/7 : FROM python:3.7-slim-stretch\n ---> fad2b9f06d3b\nStep 2/7 : RUN apt-get update && apt-get install -y git make gcc\n ---> Using cache\n ---> 94f5fc21a5c4\n`--snip--`\nSuccessfully built f5658cf8e13c\nSuccessfully tagged silent:latest\n```", "```\nroot@Lab:~/# **docker run -d \\**\n**-v /opt/st:/root/st/data \\**\n**-p5000:5000 \\**\n**silent**\n\n3adf0cfdaf374f9c049d40a0eb3401629da05abc48c\n\n# Connect to the team server running on the container\nroot@Lab:~st/# **python3.7 st.py \\wss://**`username``:``strongPasswordCantGuess`**@192.168.1.29:5000**\n\n[1] ST >>\n```", "```\nroot@Lab:~/# **docker login**\nUsername: **sparcflow**\nPassword:\n\nLogin Succeeded\n\nroot@Lab:~/# **docker tag silent sparcflow/silent**\nroot@Lab:~/# **docker push sparcflow/silent**\n```", "```\nroot@Lab:~/# **systemd-cgtop**\nControl Group                            Tasks   %CPU   Memory  Input/s\n/                                          188    1.1     1.9G        -\n/docker                                      2      -     2.2M        -\n/docker/08d210aa5c63a81a761130fa6ec76f9      1      -   660.0K        -\n/docker/24ef188842154f0b892506bfff5d6fa      1      -   472.0K        -\n```", "```\nroot@Lab:~/# **docker run -dit \\**\n**-p 9990-9999:9990-9999 \\**\n**-v $HOME/.msf4:/root/.msf4 \\**\n**-v /tmp/msf:/tmp/data phocean/msf**\n```", "```\nroot@Lab:~/# **docker run -d \\**\n**-v /opt/st:/root/st/data \\**\n**-p5000-5050:5000-5050 \\**\n**sparcflow/silent**\n```", "```\n# file: ~/nginx/Dockerfile\n# The base image with scripts to configure Nginx and Let's Encrypt\nFROM staticfloat/nginx-certbot\n\n# Copy a template Nginx configuration\nCOPY *.conf /etc/nginx/conf.d/\n\n# Copy phony HTML web pages\nCOPY --chown=www-data:www-data html/* /var/www/html/\n\n# Small script that replaces __DOMAIN__ with the ENV domain value, same for IP\nCOPY init.sh /scripts/\n\nENV DOMAIN=`\"www.customdomain.com\"`\nENV C2IP=\"192.168.1.29\"\nENV CERTBOT_EMAIL=\"sparc.flow@protonmail.com\"\n\nCMD [\"/bin/bash\", \"/scripts/init.sh\"]\n```", "```\nroot@Lab:~/# **docker run -d \\**\n```", "```\n**-e DOMAIN=**`\"www.customdomain.com\"` **\\**\n```", "```\nroot@Bouncer:~/# **wget\\**\n**https://releases.hashicorp.com/terraform/0.12.12/terraform_0.12.12_linux_amd64.zip**\n\nroot@Bouncer:~/# **unzip terraform_0.12.12_linux_amd64.zip**\nroot@Bouncer:~/# **chmod +x terraform**\n```", "```\nroot@Bouncer:~/# **apt install awscli**\n\nroot@Bouncer:~/# **aws configure**\nAWS Access Key ID [None]: **AKIA44ESW0EAASQDF5A0**\nAWS Secret Access Key [None]: **DEqg5dDxDA4uSQ6xXdhvu7Tzi53**...\nDefault region name [None]: **eu-west-1**\n```", "```\nroot@Bouncer:~/# **mkdir infra && cd infra**\n```", "```\n# provider.tf\nprovider \"aws\" {\n  region  = \"eu-west-1\"\n  version = \"~> 2.28\"\n}\n```", "```\n# main.tf\nresource \"aws_instance\" \"basic_ec2\" {\n  ami           = \"ami-0039c41a10b230acb\"\n  instance_type = \"t2.micro\"\n}\n```", "```\nroot@Bounce:~/infra# **terraform init**\nInitializing the backend...\nInitializing provider plugins...\n- Downloading plugin for provider \"aws\"\n\nTerraform has been successfully initialized!\n```", "```\nroot@Bounce:~/infra# **terraform fmt && terraform plan**\nTerraform will perform the following actions:\n\n  # aws_instance.basic_ec2 will be created\n  + resource \"aws_instance\" \"basic_ec2\" {\n      + ami                          = \"ami-0039c41a10b230acb\"\n      + arn                          = (known after apply)\n      + associate_public_ip_address  = (known after apply)\n      + instance_type                = \"t2.micro\"\n`--snip--`\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n```", "```\n# main.tf launching 10 EC2 servers\nresource \"aws_instance\" \"basic_ec2\" {\n  ami           = \"ami-0039c41a10b230acb\"\n  count         = 10\n  instance_type = \"t2.micro\"\n}\n```", "```\n# main.tf – compatible with Terraform 0.12 only\n\n# We copy-paste our SSH public key\n1 resource \"aws_key_pair\" \"ssh_key\" {\n  key_name   = \"mykey\"\n  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAA...\"\n}\n\n# Empty resource, since the default AWS VPC (network) already exists\nresource \"aws_default_vpc\" \"default\" {\n}\n\n# Firewall rule to allow SSH from our bouncing server IP only\n# All outgoing traffic is allowed\n2 resource \"aws_security_group\" \"SSHAdmin\" {\n  name        = \"SSHAdmin\"\n  description = \"SSH traffic\"\n  vpc_id      = aws_default_vpc.default.id\n  ingress {\n    from_port   = 0\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"123.123.123.123/32\"]\n  }\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# We link the SSH key and security group to our basic_ec2 server\n\nresource \"aws_instance\" \"basic_ec2\" {\n  ami           = \"ami-0039c41a10b230acb\"\n  instance_type = \"t2.micro\"\n\n  vpc_security_group_ids     = aws_security_group.SSHAdmin.id\n3 key_name                   = aws.ssh_key.id\n  associate_public_ip_address= \"true\"\n  root_block_device {\n    volume_size = \"25\"\n  }\n}\n\n# We print the server's public IP\noutput \"public_ip \" {\n  value = aws_instance.basic_ec2.public_ip\n}\n```", "```\nroot@Bounce:~/infra# **terraform fmt && terraform plan**\nTerraform will perform the following actions:\n\n  # aws_instance.basic_ec2 will be created\n  + resource \"aws_key_pair\" \"ssh_key2\" {\n      + id          = (known after apply)\n      + key_name    = \"mykey2\"\n      + public_key  = \"ssh-rsa AAAAB3NzaC1yc2...\"\n    }\n\n  + resource \"aws_security_group\" \"SSHAdmin\" {\n      + arn                    = (known after apply)\n      + description            = \"SSH admin from bouncer\"\n      + id                     = (known after apply)\n--`snip`--\n   }\n\n  + resource \"aws_instance\" \"basic_ec2\" {\n      + ami                          = \"ami-0039c41a10b230acb\"\n      + arn                          = (known after apply)\n      + associate_public_ip_address  = true\n      + id                           = (known after apply)\n      + instance_type                = \"t2.micro\"\n`--snip--`\n\nPlan: 3 to add, 0 to change, 0 to destroy.\n```", "```\nresource \"aws_instance\" \"basic_ec2\" {\n`--snip--`\n1 user_data = <<EOF\n\n#!/bin/bash\nDOMAIN=\"www.linux-update-packets.org\";\nC2IP=\"172.31.31.13\";\n\nsleep 10\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\napt update\napt install -y docker-ce\ndocker run -dti -p80:80 -p443:443 \\\n-e DOMAIN=\"www.customdomain.com\" \\\n-e C2IP=\"$C2IP\" \\\n-v /opt/letsencrypt:/etc/letsencrypt \\\nsparcflow/nginx\n\nEOF\n}\n```", "```\nroot@Bounce:~/infra# **terraform fmt && terraform apply**\n\naws_key_pair.ssh_key: Creation complete after 0s [id=mykey2]\naws_default_vpc.default: Modifications complete after 1s [id=vpc-b95e4bdf]\n--`snip`--\naws_instance.basic_ec2: Creating...\naws_instance.basic_ec2: Creation complete after 32s [id=i-089f2eff84373da3d]\n\nApply complete! Resources: 3 added, 0 changed, 0 destroyed.\nOutputs:\n\npublic_ip = 63.xx.xx.105\n```", "```\nroot@Bounce:~/infra# **ssh -i .ssh/id_rsa ubuntu@63.xx.xx.105**\n\nWelcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-1044-aws x86_64)\n\nubuntu@ip-172-31-30-190:~$ **docker ps**\nCONTAINER ID        IMAGE            COMMAND\n5923186ffda5        sparcflow/ngi...   \"/bin/bash /sc...\"\n```", "```\nroot@Bounce:~# **git clone `your_repo`**\nroot@Bounce:~# **cd infra && terraform init**\n#update a few variables\nroot@Bounce:~# **terraform apply**\n`--snip--`\n\nApply complete! Resources: 7 added, 0 changed, 0 destroyed.\nOutputs:\n\nnginx_ip_address = 63.xx.xx.105\nc2_ip_address = 63.xx.xx.108\n```"]