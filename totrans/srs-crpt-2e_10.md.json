["```\ndef compare_mac(x, y, n):\n    if len(x) != len(y):\n        return False\n    if len(x) != n:\n        return False\n    for i in range(n):\n        if x[i] != y[i]:\n            return False\n    return True\n```", "```\nfrom time import time\n\nMAC1 = 'abcdefghijklmnop'\nMAC2 = 'abXdefghijklmnop'\nTRIALS = 100000\n\ndef compare_mac(x, y, n):\n    if len(x) != len(y):\n        return False\n if len(x) != n:\n        return False\n    for i in range(n):\n        if x[i] != y[i]:\n            return False\n    return True\n\n# Each call to compare_mac() will look at all 16 characters.\nstart = time()\nfor i in range(TRIALS):\n    compare_mac(MAC1, MAC1, len(MAC1))\nend = time()\nprint(\"%0.5f\" % (end-start))\n\n# Each call to compare_mac() will look at three characters.\nstart = time()\nfor i in range(TRIALS):\n    compare_mac(MAC1, MAC2, len(MAC1))\nend = time()\nprint(\"%0.5f\" % (end-start))\n```", "```\nint cmp_const(const void *a, const void *b, const size_t size)\n{\n    const unsigned char *_a = (const unsigned char *) a;\n    const unsigned char *_b = (const unsigned char *) b;\n    unsigned char result = 0;\n    size_t i;\n\n    for (i = 0; i < size; i++) {\n        result |= _a[i] ^ _b[i];\n    }\n\n    return result; /* Returns 0 if *a and *b are equal, nonzero otherwise */\n}\n```"]