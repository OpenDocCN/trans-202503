- en: '**18**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SUMMING UP**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, we reach the end of the book! We covered a lot of material, but you should
    now feel like you are ready to go out in the world and build websites in a safe,
    secure manner.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s finish with a brief recap. This chapter presents 21 commandments of web
    security that will help you remember the key lessons from each chapter. Follow
    these simple steps, and the likelihood of you being hacked will be close to zero.
  prefs: []
  type: TYPE_NORMAL
- en: '**Automate Your Release Process**'
  prefs: []
  type: TYPE_NORMAL
- en: Be able to build your code from a single command line call. Keep your code in
    source control and decide on a branching strategy. Separate configuration from
    code, so it is easy to build testing environments. Use a testing environment to
    validate functionality before each release. Automate the deployment of code to
    each environment. Make sure your release process is reliable, reproducible, and
    revertible. Always know which version of the code is running on each environment,
    and be able to roll back to a prior version in a simple fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '**Do (Thorough) Code Reviews**'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure every code change is reviewed by at least one team member who is not
    the original author before it is approved for release. Ensure that team members
    have time to critically assess code changes, and understand that reviewing code
    is just as important as writing it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Your Code (to the Point of Boredom)**'
  prefs: []
  type: TYPE_NORMAL
- en: Write unit tests to make assertions about critical sections of your codebase,
    and run them as part of your build process. Run your unit tests on a continuous
    integration server with each change. Measure the percentage of your codebase that
    is executed when unit tests are run, and always try to increase this coverage
    number. Write tests to reproduce software bugs *before* fixing the bug. Test until
    fear turns into boredom!
  prefs: []
  type: TYPE_NORMAL
- en: '**Anticipate Malicious Input**'
  prefs: []
  type: TYPE_NORMAL
- en: All parts of the HTTP request will be manipulated by hackers, so be ready. Construct
    queries to databases and the operating system by using parameterized statements
    so you are protected against injection attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Neutralize File Uploads**'
  prefs: []
  type: TYPE_NORMAL
- en: If your users can upload files to your website, make sure those files cannot
    be executed. Ideally, upload files to a content delivery network (CDN). If you
    need more fine-grained permissions for files, host them in a content management
    system (CMS). As a last resort, save uploaded files in a separate disk partition
    and make sure they are not written to disk with executable permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Escape Content While Writing HTML**'
  prefs: []
  type: TYPE_NORMAL
- en: Attackers will attempt to inject malicious JavaScript in your web pages by smuggling
    JavaScript into your database or hiding it in HTTP parameters. Make sure any dynamic
    content written to your web pages is escaped—replace HTML control characters with
    safe entity encodings. This applies on the client side as well as the server side!
    If possible, disable the execution of inline JavaScript altogether by using the
    `Content-Security-Policy` response header.
  prefs: []
  type: TYPE_NORMAL
- en: '**Be Suspicious of HTTP Requests from Other Sites**'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP requests originating from other domains may be malicious—for instance,
    an attacker may have tricked one of your users into clicking a disguised link.
    Make sure `GET` requests to your site are side-effect free: they should be used
    only to retrieve resources. Ensure that other types of requests (such as `POST`
    requests used to initiate login) originate from your site by incorporating anti-forgery
    cookies in your HTML forms and any HTTP requests initiated by JavaScript. Strip
    cookies from requests initiated outside your web domain by adding the `SameSite`
    attribute to your `Set-Cookie` HTTP response header.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hash and Salt Your Passwords**'
  prefs: []
  type: TYPE_NORMAL
- en: If you store passwords in your database, encrypt them with a strong, one-way
    hash function such as `bcrypt` before saving them. Add an element of randomness
    to each hash by adding a salt.
  prefs: []
  type: TYPE_NORMAL
- en: '**Don’t Admit Who Your Users Are**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The only person who should know whether a user has signed up to your site is
    the user themselves. Make sure login forms and password reset pages do not permit
    a hacker to mine your site for a list of users: keep error and information messages
    generic, whether a username exists or not.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Protect Your Cookies**'
  prefs: []
  type: TYPE_NORMAL
- en: If an attacker can steal your cookies, they can hijack your users’ identities.
    Add the `HttpOnly` keyword to your `Set-Cookie` response headers so cookies cannot
    be read by malicious JavaScript. Add the `Secure` keyword so that cookies are
    sent only over HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Protect Sensitive Resources (Even If You Don’t Link to Them)**'
  prefs: []
  type: TYPE_NORMAL
- en: Check that a user has permissions to access any sensitive resource on your site
    before returning it in an HTTP request—even if that resource isn’t listed in search
    pages or linked to from elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: '**Avoid Using Direct File References**'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid passing and evaluating file paths in HTTP requests. Use your web server’s
    built-in URL resolution for evaluating paths to resources, or refer to files by
    opaque identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Don’t Leak Information**'
  prefs: []
  type: TYPE_NORMAL
- en: Minimize the amount of information an attacker can learn about your tech stack.
    Turn off any `Server` header in your HTTP responses and make sure your session
    parameter name is generic in your `Set-Cookie` header. Avoid telltale file suffixes
    in URLs. Make sure to turn off detailed client-side error reporting in your production
    environment. Obfuscate the JavaScript libraries you used during your build process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use Encryption (Correctly)**'
  prefs: []
  type: TYPE_NORMAL
- en: Purchase a security certificate for your domain and install it on your web server
    along with your private encryption key. Divert all traffic to HTTPS, and add the
    `Secure` keyword to your `Set-Cookie` response header to ensure that cookies are
    never sent over unencrypted HTTP. Update your web server regularly to keep on
    top of encryption standards.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Your Dependencies (and Services)**'
  prefs: []
  type: TYPE_NORMAL
- en: Use a package manager to import third-party code during the build process and
    fix each package to a specific version number. Keep on top of security advisories
    for the packages you use and update them regularly. Store your configuration securely—outside
    source control! Use the SafeFrame standard for any advertisements you host.
  prefs: []
  type: TYPE_NORMAL
- en: '**Defuse Your XML Parser**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn off processing of inline document type declarations in your XML parser.
  prefs: []
  type: TYPE_NORMAL
- en: '**Send Email Securely**'
  prefs: []
  type: TYPE_NORMAL
- en: Whitelist which servers are permitted to send email from your domain by using
    a Sender Policy Framework (SPF) record in your domain records. Allow mail recipients
    to verify the `From` address of any email you send and to detect attempts to tamper
    with an email by using DomainKeys Identified Mail (DKIM).
  prefs: []
  type: TYPE_NORMAL
- en: '**Check Your Redirects (If You Have Any)**'
  prefs: []
  type: TYPE_NORMAL
- en: If you redirect to a URL stored in part of the HTTP request—for example, after
    a user logs in—check that the URL is local to your domain rather than an external
    website. Otherwise, these open redirects will be used to disguise malicious links
    in emails.
  prefs: []
  type: TYPE_NORMAL
- en: '**Don’t Allow Your Site to Be Framed**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t allow your website to be enclosed in an `<iframe>` unless you have a
    specific need to do so. Disable framing by adding `Content-Security-Policy: frame-ancestors
    ''none''` to your HTTP responses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lock Down Your Permissions**'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the principle of least privilege—ensure that each process and software
    component runs with the minimum number of permissions required. Think through
    what an attacker might try to do if they compromise any part of your system, and
    mitigate the harm. Ensure that your web server process is not running as a root
    operating system account. Limit the directories on disk that your web server can
    access. Prevent unnecessary network calls from your web server. Have your web
    server connect to your database under an account with limited permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Detect and Be Ready for Surges in Traffic**'
  prefs: []
  type: TYPE_NORMAL
- en: Use real-time monitoring to detect high traffic volumes to your website. Build
    for scale by using a CDN, client-side cookies, caching, and asynchronous processing.
    Be able to easily scale up the number of servers hosting your site. If malicious
    traffic becomes a problem, deploy a firewall or intrusion prevention system, or
    consider signing up for distributed-denial-of-service protection.
  prefs: []
  type: TYPE_NORMAL
