["```\n**https://dl.espressif.com/dl/package_esp32_index.json** \n```", "```\n**Open -a Arduino** \n```", "```\nvoid setup()\n{\n  ❶ pinMode(16, OUTPUT);\n    pinMode(17, OUTPUT);\n    pinMode(18, OUTPUT);\n    pinMode(19, OUTPUT);\n}\n\nvoid blinkLEDs()\n{\n    int i;\n    int d = 250;\n    for (i = 16; i < 20; i++)\n    {\n      ❷ digitalWrite(i, HIGH);\n        delay(d);\n      ❸ digitalWrite(i, LOW);\n    }\n}\n\nvoid loop()\n{\n    blinkLEDs();\n} \n```", "```\n// Project #55 - Digital output control via web page\n\n#include <WiFi.h> ❶\nWiFiServer server(80); // Set web server port to 80\n\n// Store your Wi-Fi network credentials:\nchar* ssid = \"`name`\"; // Insert name of Wi-Fi access point\nchar* password = \"`password`\"; // Insert password\n\nString request; // Stores HTTP request from client (web browser)\nint outputPin = 16; // Using GPIO pin 16 on the ESP32 board\n\nunsigned long currentTime = millis(); ❷\nunsigned long previousTime = 0;\nconst long timeoutTime = 2000; // Allowed client connection time\n\nvoid setup()\n{\n    Serial.begin(115200);\n    // Set up digital pin to control\n    pinMode(outputPin, OUTPUT);\n    digitalWrite(outputPin, LOW);\n\n    // Connect to Wi-Fi network:\n    Serial.print(\"Connecting to \");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    // Show indicator while waiting for connection:\n    {\n        delay(500);\n        Serial.print(\"~\");\n    }\n    Serial.println(); // Display local IP address on Serial Monitor\n    Serial.print(\"Connected, IP address: \");\n    Serial.println(WiFi.localIP());\n    // Start web server\n    server.begin();\n}\n\nvoid loop()\n{\n    // Listen for incoming clients from web browser: ❸\n    WiFiClient client = server.available();\n    if (client) // If a request received\n    {\n        currentTime = millis();\n        previousTime = currentTime;\n        Serial.println(\"New client connected\");\n        String currentLine = \" \";\n        while (client.connected() && currentTime - previousTime <= timeoutTime)\n        {// Stay connected for timeoutTime\n            currentTime = millis();\n            if (client.available())\n            {\n                // Display data from client on Serial Monitor:\n                char c = client.read(); ❹\n                Serial.write(c);\n                request += c;\n if (c == '\\n') // Client request has finished\n                {\n                    if (currentLine.length() == 0)\n                    {\n                        // Send HTTP response to client:\n                        client.println(\"HTTP/1.1 200\"OK\");\n                        client.println(\"Content-type:text/h\"ml\");\n                        client.println(\"Connection: cl\"se\");\n                        client.println();\n                        // Now do things based on the client request:\n                        if (request.indexOf(\"GET /16/on\") >= 0) ❺\n                        {\n                            // If request was IP address/16/on:\n                            Serial.println(\"output on\");\n                            digitalWrite(outputPin, HIGH);\n                        } else if (request.indexOf(\"GET /16/off\") >= 0) ❻\n                        // If request was IP address/16/off:\n                        {\n                            Serial.println(\"output off\");\n                            digitalWrite(outputPin, LOW);\n                        }\n                        // Build web page for display on browser:\n                        client.println(\"<!DOCTYPE html><html>\");\n                        client.print(\"<head><meta name=\\\"viewport\\\");\n                        client.println(\" content=\\\"width=device-width, initial-scale=1\\\">\");\n                        client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\ \">\");\n                        // Build buttons using CSS:\n                        client.print(\"<style>html {font-family: Helvetica; display:\");\n                        client.print(\"inline-block; margin: 0px auto; text-align: center;}\");\n                        client.println();\n                        client.print (\".button {background-color: #ff0000; border: \");\n                        client.println(\"none; color: white; padding: 8px 20px;\");\n                        client.print (\"text-decoration: none; font-size: 20px; margin: \");\n                        client.println(\"2px; cursor: pointer; border-radius: 12px;}\");\n                        client.println(\"</style></head>\");\n                        // Now HTML for layout:\n                        client.println(\"<body><h3>Remote ESP32 Output Control</h3>\");\n                        // Display \"On\" button with matching HTML \"/16/on\":\n                        client.print (\"<p><a href=\\\"/16/on\\\"><button \");\n                        client.println(\"class=\\\"button\\\">On</button></a>\");\n                        // Display \"Off\" button with matching HTML \"/16/off\":\n                        client.print (\"<a href=\\\"/16/off\\\"><button class\");\n                        client.println(\"=\\\"button\\\">Off</button></a></p>\");\n                        client.println(\"</body></html>\");\n                        // End the response to client request:\n                        client.println();\n                        break;\n                    } else\n                    {// If you got a newline, then clear currentLine\n                        currentLine = \" \";\n                    }\n                } else if (c != '\\r')\n                {\n                    currentLine += c;\n }\n            }\n        }\n        request = \" \"; ❼\n        // Close connection to client:\n        client.stop();\n        Serial.println(\"Disconnected.\");\n    }\n}\n```", "```\n<!DOCTYPE html><html>\n<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\n<link rel=\\\"icon\\\" href=\\\"data:,\\\">\n<style>html {font-family: Helvetica; display: inline-block;\n margin: 0px auto; text-align: center;}\n.button {background-color: #ff0000; border: none; color: white; padding: 8px 20px;\ntext-decoration: none; font-size: 20px; margin: 2px; cursor: pointer; border-radius: 12px;} ❶\n</style></head>\n<body><h3>Remote ESP32 Output Control</h3> ❷\n<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">On</button></a> ❸\n<a href=\\\"/16/off\\\"><button class=\\\"button\\\">Off</button></a></p> ❹\n</body></html>\n```", "```\n// Project #56 - Digital output controls via web page with status update\n\n#include <WiFi.h>\nWiFiServer server(80); // Set web server port to 80\n\n// Store your Wi-Fi network credentials:\nchar* ssid = \"`name`\"; // Insert name of Wi-Fi access point\nchar* password = \"`password`\"; // Insert password\n\nString request; // Stores HTTP request from client (web browser)\nString outputPin1State = \"Off\"; ❶\nString outputPin2State = \"Off\";\nString outputPin3State = \"Off\";\nString outputPin4State = \"Off\";\n\nint outputPin1 = 16; // Using GPIO pins 16~19 on the ESP32 board ❷\nint outputPin2 = 17;\nint outputPin3 = 18;\nint outputPin4 = 19;\n\nunsigned long currentTime = millis();\nunsigned long previousTime = 0;\nconst long timeoutTime = 2000; // Allowed client connection time\n\nvoid setup()\n{\n    Serial.begin(115200);\n    // Set up digital pins to control:\n    pinMode(outputPin1, OUTPUT); ❸\n    pinMode(outputPin2, OUTPUT);\n    pinMode(outputPin3, OUTPUT);\n    pinMode(outputPin4, OUTPUT);\n    digitalWrite(outputPin1, LOW);\n    digitalWrite(outputPin2, LOW);\n    digitalWrite(outputPin3, LOW);\n    digitalWrite(outputPin4, LOW);\n    // Connect to Wi-Fi network:\n    Serial.print(\"Connecting to \");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    // Show indicator while waiting for connection:\n    {\n        delay(500);\n        Serial.print(\"~\");\n    }\n    Serial.println(); // Display local IP address on Serial Monitor\n    Serial.print(\"Connected, IP address: \");\n    Serial.println(WiFi.localIP());\n    // Start web server:\n    server.begin();\n}\n\nvoid loop()\n{\n    // Listen for incoming clients from web browser:\n    WiFiClient client = server.available();\n    if (client) // If a request received\n    {\n        currentTime = millis();\n        previousTime = currentTime;\n        Serial.println(\"New client connected\");\n        String currentLine = \" \";\n        while (client.connected() && currentTime—previousTime <= timeoutTime)\n        {// Stay connected for timeoutTime\n            currentTime = millis();\n            if (client.available())\n            {\n                char c = client.read(); // Display data from client on Serial Monitor\n                Serial.write(c);\n                request += c;\n                if (c == '\\n')\n                {\n                    // Client request has finished\n                    if (currentLine.length() == 0)\n                    {\n                        // Send HTTP response back to client\n                        client.println(\"HTTP/1.1 200 OK\");\n                        client.println(\"Content-type:text/html\");\n                        client.println(\"Connection: close\");\n                        client.println();\n                        // Now do things based on the client request:\n                        if (request.indexOf(\"GET /16/on\") >= 0) ❹\n                        {\n                            // If request was IP address/16/on:\n                            Serial.println(\"output 1 on\");\n                            outputPin1State = \"On\"; ❺\n                            digitalWrite(outputPin1, HIGH);\n                        } else if (request.indexOf(\"GET /16/off\") >= 0)\n                        {\n                            // If request was IP address/16/off:\n                            Serial.println(\"output 1 off\");\n                            outputPin1State = \"Off\";\n                            digitalWrite(outputPin1, LOW);\n                        } else if (request.indexOf(\"GET /17/on\") >= 0)\n                        {\n                        // If request was IP address/17/on:\n                            Serial.println(\"output 2 on\");\n                            outputPin2State = \"On\";\n                            digitalWrite(outputPin2, HIGH);\n                        } else if (request.indexOf(\"GET /17/off\") >= 0)\n                        // If request was IP address/17/off:\n                            {\n                            Serial.println(\"output 2 off\");\n                            outputPin2State = \"Off\";\n                            digitalWrite(outputPin2, LOW);\n                                }\n                    else if (request.indexOf(\"GET /18/on\") >= 0)\n {\n                        // If request was IP address/18/on:\n                        Serial.println(\"output 3 on\");\n                        outputPin3State = \"On\";\n                        digitalWrite(outputPin3, HIGH);\n                    } else if (request.indexOf(\"GET /18/off\") >= 0)\n                    // If request was IP address/18/off:\n                    {\n                        Serial.println(\"output 3 off\");\n                        outputPin3State = \"Off\";\n                        digitalWrite(outputPin3, LOW);\n                    }\n                    else if (request.indexOf(\"GET /19/on\") >= 0)\n                    {\n                        // If request was IP address/19/on:\n                        Serial.println(\"output 4 on\");\n                        outputPin4State = \"On\";\n                        digitalWrite(outputPin4, HIGH);\n                    } else if (request.indexOf(\"GET /19/off\") >= 0)\n                    // If request was IP address/19/off:\n                    {\n                        outputPin4State = \"Off\";\n                        Serial.println(\"output 4 off\");\n                        digitalWrite(outputPin4, LOW);\n                    }\n\n                    // Build web page for display on browser:\n                    client.println(\"<!DOCTYPE html><html>\");\n                    client.print(\"<head><meta name=\\\"viewport\\\" content=\\\"width=\");\n                    client.println(\"device-width, initial-scale=1\\\">\");\n                    client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\n                    // Build buttons using CSS:\n                    client.print(\"<style>html {font-family: Helvetica; display: inline-block;\");\n                    client.print(\"margin: 0px auto; text-align: center;} \");\n                    client.print(\".button {background-color: #ff0000; border: none; color: \");\n                    client.print(\"white; padding: 8px 20px; \");\n                    client.print(\"text-decoration: none; font-size: 20px; margin: 2px; \");\n                    client.println(\"cursor: pointer; border-radius: 12px;} \");\n\n                    client.println(\"</style></head>\");\n                    // Now HTML for layout:\n                    client.println(\"<body><h3>Remote ESP32 Output Controls</h3>\");\n                    client.println(\"<p><b>Output 1 is \");\n                    client.println(outputPin1State); ❻\n                    client.print(\" - </b><a href=\\\"/16/on\\\"><button);\n                    client.println(\"class=\\\"button\\\">On</button></a>\");\n                    client.print(\"<a href=\\\"/16/off\\\"><button\");\n                    client.println(\"class=\\\"button\\\">Off</button></a></p>\");\n                    client.println(\"<p><b>Output 2 is \");\n                    client.println(outputPin2State);\n                    client.print(\" - </b><a href=\\\"/17/on\\\"><button \");\n                    client.println(\"class=\\\"button\\\">On</button></a>\");\n                    client.print(\"<a href=\\\"/17/off\\\"><button\");\n                    client.println(\"class=\\\"button\\\">Off</button></a></p>\");\n client.println(\"<p><b>Output 3 is \");\n                    client.println(outputPin3State);\n                    client.print(\" - </b><a href=\\\"/18/on\\\"><button \");\n                    client.println(\"class=\\\"button\\\">On</button></a>\");\n                    client.print (\"<a href=\\\"/18/off\\\"><button \");\n                    client.println(\"class=\\\"button\\\">Off</button></a></p>\");\n                    client.println(\"<p><b>Output 4 is \");\n                    client.println(outputPin4State);\n                    client.print(\" - </b><a href=\\\"/19/on\\\"><button\");\n                    client.println(\"class=\\\"button\\\">On</button></a>\");\n                    client.print (\"<a href=\\\"/19/off\\\"><button\");\n                    client.println(\" class=\\\"button\\\">Off</button></a></p>\");\n                    client.println(\"</body></html>\");\n                    // End the response to client request:\n                    client.println();\n                    break;\n                } else\n                {// If you got a newline, then clear currentLine\n                    currentLine = \" \";\n                }\n              } else if (c != '\\r')\n                {\n                    currentLine += c;\n                }\n            }\n        }\n        request = \" \";\n        // Close connection to client:\n        client.stop();\n        Serial.println(\"Disconnected.\");\n    }\n}\n```", "```\n<!DOCTYPE html><html>\n<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\n<link rel=\\\"icon\\\" href=\\\"data:,\\\">\n<style>html {font-family: Helvetica; display: inline-block;\nmargin: 0px auto; text-align: center;}\n\".button {background-color: #ff0000; border: none; color: white; padding: 8px 20px;\"\n\"text-decoration: none; font-size: 20px; margin: 2px; cursor: pointer; border-radius: 12px;}\"\n</style></head>\n<body><h3>Remote ESP32 Output Controls</h3>\n<p><b>Output 1 is \"\n// Insert outputPin1State:\n\" - </b><a href=\\\"/16/on\\\"><button class=\\\"button\\\">On</button></a>\n<a href=\\\"/16/off\\\"><button class=\\\"button\\\">Off</button></a></p>\n<p><b>Output 2 is \"\n// Insert outputPin2State:\n\" - </b><a href=\\\"/17/on\\\"><button class=\\\"button\\\">On</button></a>\n<a href=\\\"/17/off\\\"><button class=\\\"button\\\">Off</button></a></p>\n<p><b>Output 3 is \"\n// Insert outputPin3State:\n\" - </b><a href=\\\"/18/on\\\"><button class=\\\"button\\\">On</button></a>\"\n\"<a href=\\\"/18/off\\\"><button class=\\\"button\\\">Off</button></a></p>\n<p><b>Output 4 is \");\n// Insert outputPin4State:\n\" - </b><a href=\\\"/19/on\\\"><button class=\\\"button\\\">On</button></a>\n<a href=\\\"/19/off\\\"><button class=\\\"button\\\">Off</button></a></p>\n</body></html>\n```", "```\nledcSetup(`channel`, `frequency`, `resolution`); \n```", "```\nledcAttachPin(`GPIO`, `channel`); \n```", "```\nledcWrite(`channel`, `dutyCycle`); \n```", "```\nledcDetachPin(`GPIO`); \n```", "```\nvoid setup()\n{\n  ❶ ledcSetup(0, 5000, 8); // LED channel, frequency, resolution (8-bit)\n    ledcSetup(1, 5000, 8);\n    ledcSetup(2, 5000, 8);\n    ledcSetup(3, 5000, 8);\n\n  ❷ ledcAttachPin(16, 0); // GPIO, LED channel\n    ledcAttachPin(17, 1);\n    ledcAttachPin(18, 2);\n    ledcAttachPin(19, 3);\n}\n\nvoid loop()\n{\n    int dutyCycle;\n    for (dutyCycle = 0; dutyCycle <= 255; dutyCycle++)\n    {\n      ❸ ledcWrite(0, dutyCycle);\n        ledcWrite(1, dutyCycle);\n        ledcWrite(2, dutyCycle);\n        ledcWrite(3, dutyCycle);\n        delay(10);\n    }\n    for (dutyCycle = 255; dutyCycle > −0; dutyCycle--)\n    {\n      ❹ ledcWrite(0, dutyCycle);\n        ledcWrite(1, dutyCycle);\n        ledcWrite(2, dutyCycle);\n        ledcWrite(3, dutyCycle);\n        delay(10);\n    }\n} \n```", "```\n// Project #57 - ESP32 Remote Control PWM Output\n\n#include <WiFi.h>\nWiFiServer server(80); // Set webserver port to 80\n\n// Store your Wi-Fi network credentials:\nchar* ssid = \"`name`\"; // Insert name of Wi-Fi access point\nchar* password = \"`password`\"; // Insert password\n\nint outputPin1 = 16;\nint dutyCycle = 0; ❶\nString request; // Stores HTTP request from client (web browser)\n\nunsigned long currentTime = millis();\nunsigned long previousTime = 0;\nconst long timeoutTime = 2000; // Allowed client connection time\n\nvoid pinOff()\n{\n    ledcDetachPin(16); // Disconnect from PWM\n    digitalWrite(16, LOW); // Pin off\n}\n\nvoid pinOn()\n{\n    ledcDetachPin(16); // Disconnect from PWM\n    digitalWrite(16, HIGH); // Usual turn pin on\n}\n\nvoid pinPWM(int dc)\n{\n // Set up digital pin for PWM:\n    ledcSetup(0, 5000, 8); // LED channel, frequency, resolution (8-bit)\n    ledcAttachPin(16, 0);  // Attach PWM — GPIO, LED channel\n    ledcWrite(0, dc);      // Set duty cycle\n}\n\nvoid setup()\n{\n    Serial.begin(115200);\n    pinMode(16, OUTPUT);\n    pinOff(); ❷\n\n    // Connect to Wi-Fi network:\n    Serial.print(\"Connecting to \");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    // Show indicator while waiting for connection:\n    {\n        delay(500);\n        Serial.print(\"~\");\n    }\n    Serial.println(); // Display local IP address on Serial Monitor\n    Serial.print(\"Connected, IP address: \");\n    Serial.println(WiFi.localIP());\n    // Start web server:\n    server.begin();\n}\n\nvoid loop()\n{\n    // Listen for incoming clients from web browser:\n    WiFiClient client = server.available();\n    if (client) // If a request received\n    {\n        currentTime = millis();\n        previousTime = currentTime;\n        Serial.println(\"New client connected\");\n        String currentLine = \" \";\n        while (client.connected() && currentTime—previousTime <= timeoutTime)\n        {// Stay connected for timeoutTime\n            currentTime = millis();\n            if (client.available())\n            {\n                char c = client.read(); // Display data from client on Serial Monitor\n                Serial.write(c);\n                request += c;\n                if (c == '\\n') // Client request has finished\n                {\n                    if (currentLine.length() == 0)\n                    {\n                        // Send HTTP response back to client:\n                        client.println(\"HTTP/1.1 200 OK\");\n client.println(\"Content-type:text/html\");\n                        client.println(\"Connection: close\");\n                        client.println();\n\n                        // Now do things based on the client request:\n                        if (request.indexOf(\"GET /off\") >= 0)\n                        {\n                            // If request was IP address/off:\n                            pinOff(); ❸\n                            dutyCycle = 0;\n                        } else if (request.indexOf(\"GET /dcdown\") >= 0)\n                        // If request was reduced duty cycle:\n                        {\n                            if (dutyCycle >= 2) ❹\n                            {\n                                pinPWM(dutyCycle − 1);\n                                dutyCycle−−;\n                            } else if (dutyCycle <= 1)\n                            {\n                                pinOff();\n                                dutyCycle = 0;\n                            }\n\n                        } else if (request.indexOf(\"GET /dcup\") >= 0) ❺\n                        {\n                            // If request was increased duty cycle:\n                            if (dutyCycle > 253)\n                            {\n                                pinOn();\n                                dutyCycle = 255;\n                            }\n                            else if (dutyCycle <= 253)\n                            {\n                                pinPWM(dutyCycle + 1);\n                                dutyCycle++;\n                            }\n\n                        } else if (request.indexOf(\"GET /on\") >= 0) ❻\n                        // If request was IP address/on:\n                        {\n                            pinOn();\n                            dutyCycle = 255;\n                        }\n                        else if (request.indexOf(\"GET /35\") >= 0) ❼\n                        {\n                            // If request was IP address/35:\n                            pinPWM(35);\n                            dutyCycle = 35;\n                        } else if (request.indexOf(\"GET /50\") >= 0)\n                        // If request was IP address/50:\n                        {\n                            pinPWM(50);\n dutyCycle = 50;\n                        }\n                        else if (request.indexOf(\"GET /65\") >= 0)\n                        {\n                            // If request was IP address/65:\n                            pinPWM(65);\n                            dutyCycle = 65;\n                        } else if (request.indexOf(\"GET /75\") >= 0)\n                        // If request was IP address/75:\n                        {\n                            pinPWM(75);\n                            dutyCycle = 75;\n                        }\n\n                        // Build web page for display on browser:\n                        client.println(\"<!DOCTYPE html><html>\");\n                        client.print(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width\");\n                        client.println(\", initial-scale=1\\\">\");\n                        client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\n                        // Build buttons using CSS:\n                        client.print(\"<style>html {font-family: Helvetica; display: inline-block; \");\n                        client.println(\"margin: 0px auto; text-align: center;}\");\n                        client.print(\".button {background-color: #ff0000; border: none; color: \");\n                        client.println(\"white; padding: 8px 20px;\");\n                        client.print(\"text-decoration: none; font-size: 20px; margin: 2px; cursor: \");\n                        client.println(\"pointer; border-radius: 12px;}\");\n                        client.println(\"</style></head>\");\n                        // Now HTML for layout:\n                        client.println(\"<body><h3>Remote ESP32 PWM Control</h3>\");\n                        client.println(\"<p><a href=\\\"/off\\\"><button class=\\\"button\\\">Off</button></a>\");\n                        client.print(\"<a href=\\\"/dcdown\\\"><button class=\\\"button\\\"> \");\n                        client.println(\"DC -</button></a>\");\n                        client.println(\" <a href=\\\"/dcup\\\"><button class=\\\"button\\\">DC +</button></a>\");\n                        client.println(\" <a href=\\\"/on\\\"><button class=\\\"button\\\">On</button></a></p>\");\n                        client.println(\"<p><a href=\\\"/35\\\"><button class=\\\"button\\\">35</button></a>\");\n                        client.println(\" <a href=\\\"/50\\\"><button class=\\\"button\\\">50</button></a>\");\n                        client.println(\" <a href=\\\"/60\\\"><button class=\\\"button\\\">65</button></a>\");\n                        client.println(\" <a href=\\\"/75\\\"><button class=\\\"button\\\">75</button></a></p>\");\n                        client.println(\" Duty cycle is set to \");\n                        client.println(dutyCycle);\n                        client.println(\"/255</p>\");\n client.println(\"</body></html>\");\n                        // End the response to client request\n                        client.println();\n                        break;\n                    } else {// If you got a newline, then clear currentLine\n                    currentLine = \" \";\n                    }\n                } else if (c != '\\r')\n                {\n                    currentLine += c;\n                }\n            }\n        }\n        request = \" \";\n        // Close connection to client:\n        client.stop();\n        Serial.println(\"Disconnected.\");\n    }\n}\n```"]