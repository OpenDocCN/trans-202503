- en: <samp class="SANS_Dogma_OT_Bold_B_11">APPENDIX</samp> <samp class="SANS_Dogma_OT_Bold_B_11">AUXILIARY
    SOURCES</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">附录</samp> <samp class="SANS_Dogma_OT_Bold_B_11">辅助数据源</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Modern EDRs sometimes make use of less popular components not covered in this
    book so far. These auxiliary telemetry sources can provide immense value to the
    EDR, offering access to data that would otherwise be unavailable from other sensors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现代的EDR有时会使用一些本书至今未涉及的较少见的组件。这些辅助遥测源可以为EDR提供巨大的价值，提供来自其他传感器无法获取的数据。
- en: Because these data sources are uncommon, we won’t take a deep dive into their
    inner workings. Instead, this appendix covers some examples of them, how they
    work, and what they can offer an EDR agent. This is by no means an exhaustive
    list, but it shines a light on some of the more niche components you may encounter
    during your research.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些数据源不常见，我们不会深入探讨它们的内部工作原理。相反，本附录涵盖了一些它们的示例、它们的工作原理以及它们能为EDR代理提供的功能。这绝不是一个详尽无遗的列表，但它揭示了一些你在研究过程中可能遇到的较为小众的组件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Alternative Hooking Methods</samp>
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">替代的挂钩方法</samp>
- en: This book has shown the value of intercepting function calls, inspecting the
    parameters passed to them, and observing their return values. The most prevalent
    method of hooking function calls at the time of this writing relies on injecting
    a DLL into the target process and modifying the execution flow of another DLL’s
    exported functions, such as those of *ntdll.dll*, forcing execution to pass through
    the EDR’s DLL. However, this method is trivial to bypass due to weaknesses inherent
    in its implementation (see [Chapter 2](chapter2.xhtml)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书已经展示了拦截函数调用、检查传递给函数的参数以及观察它们的返回值的价值。在本书撰写时，拦截函数调用的最常见方法依赖于将DLL注入目标进程，并修改另一个DLL的导出函数的执行流程，例如*ntdll.dll*，强制执行流程经过EDR的DLL。然而，由于该方法的实现固有的弱点，这种方法很容易被绕过（请参见[第2章](chapter2.xhtml)）。
- en: Other, more robust methods of intercepting function calls exist, such as using
    the Microsoft-Windows-Threat-Intelligence ETW provider to indirectly intercept
    certain syscalls in the kernel, but these have their own limitations. Having multiple
    techniques for achieving the same effect provides advantages for defenders, as
    one method may work better in some contexts than others. For this reason, some
    vendors have leveraged alternative hooking methods in their products to augment
    their ability to monitor calls to suspicious functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他更强大的拦截函数调用的方法，例如使用Microsoft-Windows-Threat-Intelligence ETW提供程序间接拦截内核中的某些系统调用，但这些方法也有自身的局限性。拥有多种实现相同效果的技术为防守方提供了优势，因为某种方法在某些情境下可能比其他方法更有效。因此，一些厂商在其产品中利用了替代的挂钩方法，以增强它们监控可疑函数调用的能力。
- en: 'In a 2015 Recon talk titled “Esoteric Hooks,” Alex Ionescu expounded on some
    of these techniques. A few mainstream EDR vendors have implemented one of the
    methods he outlines: Nirvana hooks. Where garden-variety function hooking works
    by intercepting the function’s caller, this technique intercepts the point at
    which the syscall returns to user mode from the kernel. This allows the agent
    to identify syscalls that didn’t originate from a known location, such as the
    copy of *ntdll.dll* mapped into a process’s address space. Thus, it can detect
    the use of manual syscalls, a technique that has become relatively common in offensive
    tools in recent years.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年的Recon会议上，Alex Ionescu在题为“Esoteric Hooks”的演讲中详细阐述了其中的一些技术。一些主流EDR厂商已经实现了他所描述的某种方法：涅槃挂钩。传统的函数挂钩通过拦截函数的调用者来工作，而这种技术则拦截系统调用从内核返回到用户模式的时刻。这使得代理能够识别那些没有来自已知位置的系统调用，例如映射到进程地址空间中的*ntdll.dll*的副本。因此，它能够检测手动系统调用的使用，这种技术近年来在攻击工具中变得相对常见。
- en: There are a few notable downsides to this hooking method, though. First, it
    relies on an undocumented <samp class="SANS_TheSansMonoCd_W5Regular_11">PROCESS_INFORMATION_CLASS</samp>
    and associated structure being passed to <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationProcess()</samp>
    for each process the product wishes to monitor. Because it isn’t formally supported,
    Microsoft may modify its behavior or disable it entirely at any time. Additionally,
    the developer must identify the source of the call by capturing the return context
    and correlating it to a known good image in order to detect manual syscall invocation.
    Lastly, this hooking method is simple to evade, as adversaries can remove the
    hook from their process by nulling out the callback via a call to <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationProcess()</samp>,
    similarly to how the security process initially placed it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种钩子方法也有一些显著的缺点。首先，它依赖于一个未记录的 <samp class="SANS_TheSansMonoCd_W5Regular_11">PROCESS_INFORMATION_CLASS</samp>
    和相关结构，这些信息会传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationProcess()</samp>，以监控产品希望监控的每个进程。由于它未正式支持，微软可能随时修改其行为或完全禁用它。此外，开发人员必须通过捕获返回上下文并将其与已知的良好镜像关联，来识别调用源，以便检测手动系统调用的调用。最后，这种钩子方法容易规避，因为对手可以通过调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationProcess()</samp>
    将回调置为空，从而从他们的进程中移除钩子，类似于安全进程最初如何设置它。
- en: Even if Nirvana hooks are relatively easy to evade, not every adversary has
    the capability to do so, and the telemetry they provide might still be valuable.
    Vendors can employ multiple techniques to provide the coverage they desire.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 Nirvana 钩子相对容易规避，并非每个对手都有能力做到这一点，而且它们提供的遥测信息仍然可能有价值。供应商可以采用多种技术来提供他们所需的覆盖范围。
- en: <samp class="SANS_Futura_Std_Bold_B_11">RPC Filters</samp>
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">RPC 过滤器</samp>
- en: Recent attacks have rekindled interest in RPC tradecraft. Lee Christensen’s
    PrinterBug and topotam’s PetitPotam exploits, for example, have proven their utility
    in Windows environments. In response, EDR vendors have begun paying attention
    to emerging RPC tradecraft in hopes of detecting and preventing their use.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的攻击重新点燃了对 RPC 技巧的兴趣。例如，Lee Christensen 的 PrinterBug 和 topotam 的 PetitPotam
    漏洞已经证明了它们在 Windows 环境中的有效性。作为回应，EDR 供应商开始关注新兴的 RPC 技巧，希望能够检测并防止其使用。
- en: RPC traffic is notoriously difficult to work with at scale. One way EDRs can
    monitor it is by using *RPC filters*. These are essentially firewall rules based
    on RPC interface identifiers, and they’re simple to create and deploy using built-in
    system utilities. For example, [Listing A-1](#listA-1) demonstrates how to ban
    all inbound DCSync traffic to the current host using *netsh.exe* interactively.
    An EDR could deploy this rule on all domain controllers in an environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: RPC 流量在大规模操作中难以处理。EDR 可以通过使用*RPC 过滤器*来监控它。它们本质上是基于 RPC 接口标识符的防火墙规则，使用内置的系统工具可以轻松创建和部署。例如，[列表
    A-1](#listA-1) 演示了如何使用 *netsh.exe* 以交互方式禁止所有传入的 DCSync 流量到当前主机。EDR 可以在环境中的所有域控制器上部署此规则。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing A-1: Adding and listing RPC filters using <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">netsh</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 A-1：使用 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">netsh</samp>
    添加和列出 RPC 过滤器
- en: These commands add a new RPC filter that specifically blocks any communications
    using the *Directory Replication Service* RPC interface (which has the GUID <samp
    class="SANS_TheSansMonoCd_W5Regular_11">E3514235-4B06-11D1-AB04-00C04FC2DCD2</samp>).
    Once the filter is installed via the <samp class="SANS_TheSansMonoCd_W5Regular_11">add
    filter</samp> command, it is live on the system, prohibiting DCSync.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令添加了一个新的 RPC 过滤器，专门阻止使用*目录复制服务* RPC 接口的任何通信（该接口的 GUID 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">E3514235-4B06-11D1-AB04-00C04FC2DCD2</samp>）。一旦通过
    <samp class="SANS_TheSansMonoCd_W5Regular_11">add filter</samp> 命令安装了该过滤器，它便会在系统上生效，禁止
    DCSync。
- en: Whenever the RPC filter blocks a connection, the Microsoft-Windows-RPC provider
    will emit an ETW similar to the one shown in [Listing A-2](#listA-2).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 RPC 过滤器阻止连接时，Microsoft-Windows-RPC 提供程序将会发出一个 ETW 事件，类似于在 [列表 A-2](#listA-2)
    中显示的事件。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing A-2: An ETW event showing activity blocked by a filter'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 A-2：一个显示被过滤器阻止活动的 ETW 事件
- en: While this event is better than nothing, and defenders could theoretically use
    it to build detections, it lacks much of the context needed for a robust detection.
    For example, the principal that issued the request and the direction of traffic
    (as in, inbound or outbound) are not immediately clear, making it difficult to
    filter events to help tune a detection.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个事件总比没有强，但防御者理论上可以利用它来构建检测，但它缺乏进行强大检测所需的大部分上下文信息。例如，发出请求的主要单位和流量方向（即进站或出站）并不立即明确，这使得过滤事件以帮助调整检测变得困难。
- en: A better option may be to consume a similar event from the Microsoft-Windows-Security-Auditing
    Secure ETW provider. Since this provider is protected, standard applications can’t
    consume from it. It is, however, fed into the Windows Event Log, where it populates
    Event ID 5157 whenever the base filtering engine component of the Windows Filtering
    Platform blocks a request. [Listing A-3](#listA-3) contains an example of Event
    ID 5157\. You can see how much more detailed it is than the one emitted by Microsoft-Windows-RPC.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的选择可能是从 Microsoft-Windows-Security-Auditing Secure ETW 提供程序获取类似的事件。由于该提供程序受到保护，标准应用程序无法直接获取它。不过，它会被传输到
    Windows 事件日志，并在 Windows 筛选平台的基本过滤引擎阻止请求时生成事件 ID 5157。[列表 A-3](#listA-3) 包含了事件
    ID 5157 的示例。你可以看到它比 Microsoft-Windows-RPC 发出的事件详细得多。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing A-3: An event manifest for the Microsoft-Windows-Security-Auditing
    Secure ETW provider'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 A-3：Microsoft-Windows-Security-Auditing Secure ETW 提供程序的事件清单
- en: While this event contains much more data, it also has some limitations. Notably,
    although the source and destination ports are included, the interface ID is missing,
    making it difficult to determine whether the event is related to the filter that
    blocks DCSync attempts or another filter entirely. Additionally, this event operates
    inconsistently across Windows versions, generating correctly in some and completely
    missing in others. Therefore, some defenders might prefer to use the less-enriched
    but more consistent RPC event as their primary data source.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个事件包含了更多数据，但它也有一些局限性。特别是，尽管包括了源端口和目标端口，但缺少了接口 ID，这使得难以判断事件是否与阻止 DCSync 尝试的过滤器相关，还是与其他过滤器完全无关。此外，这个事件在不同版本的
    Windows 中表现不一致，在某些版本中正确生成，而在其他版本中完全缺失。因此，一些防御者可能更倾向于使用那个数据更简洁但更一致的 RPC 事件作为主要数据源。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Hypervisors</samp>
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">虚拟机监控程序</samp>
- en: Hypervisors virtualize one or more guest operating systems, then act as an intermediary
    between the guest and either the hardware or the base operating system, depending
    on the hypervisor’s architecture. This intermediary position provides EDRs with
    a unique opportunity for detection.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控程序通过虚拟化一个或多个客户操作系统，并根据虚拟机监控程序的架构，充当客户操作系统与硬件或基础操作系统之间的中介。这一中介位置为EDR提供了一个独特的检测机会。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">How Hypervisors Work</samp>
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">虚拟机监控程序的工作原理</samp>
- en: The inner workings of a hypervisor are relatively simple once you understand
    a few core concepts. Windows runs code at several *rings*; the code running in
    a higher ring, such as *ring 3* for user mode, is less privileged than code running
    at a lower one, such as *ring 0* for the kernel. Root mode, where the hypervisor
    resides, operates at ring 0, the lowest architecturally supported privilege level,
    and limits the operations that the guest, or non-root mode system, can perform.
    [Figure A-1](#figA-1) shows this process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦理解了一些核心概念，虚拟机监控程序的内部工作原理就相对简单。Windows 在多个 *环* 中运行代码；运行在更高环中的代码，例如 *环 3* 用户模式，比运行在较低环中的代码（如
    *环 0* 内核模式）特权较少。根模式，虚拟机监控程序所在的模式，运行在环 0，即最低支持的架构特权级别，并限制客户机或非根模式系统能够执行的操作。[图 A-1](#figA-1)
    展示了这个过程。
- en: '![](../images/FigureA-1.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-1: The operation of
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VMEXIT</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VMENTER</samp></samp>'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-1：<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VMEXIT</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VMENTER</samp> 的操作</samp>
- en: When a virtualized guest system attempts to execute an instruction or perform
    some action that the hypervisor must handle, a <samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>
    instruction occurs. When this happens, control transitions from the guest to the
    hypervisor. The *Virtual Machine Control Structure (VMCS)* preserves the state
    of the processor for both the guest and the hypervisor so that it can be restored
    later. It also keeps track of the reason for the <samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>.
    One VMCS exists for each logical processor of the system, and you can read more
    about them in volume 3C of the Intel Software Developer’s Manual.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚拟化的来宾系统尝试执行虚拟机监控程序必须处理的指令或操作时，会发生<samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>指令。发生这种情况时，控制权从来宾转移到虚拟机监控程序。*虚拟机控制结构（VMCS）*保存来宾和虚拟机监控程序的处理器状态，以便稍后恢复。它还记录<samp
    class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>的原因。每个逻辑处理器都有一个 VMCS，你可以在英特尔软件开发者手册的第
    3C 卷中了解更多关于它们的信息。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*For the sake of simplicity, this brief exploration covers the operation of
    a hypervisor based on Intel VT-x, as Intel CPUs remain the most popular at the
    time of this writing.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了简化起见，本简短的探讨仅涵盖基于英特尔 VT-x 的虚拟机监控程序操作，因为英特尔的 CPU 在本文撰写时仍然是最受欢迎的。*'
- en: When the hypervisor enters root-mode operation, it may emulate, modify, and
    log the activity based on the reason for the <samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>.
    These exits may occur for many common reasons, including instructions such as
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RDMSR</samp>, for reading model-specific
    registers, and <samp class="SANS_TheSansMonoCd_W5Regular_11">CPUID</samp>, which
    returns information about the processor. After the completion of the root-mode
    operation, execution is transferred back to non-root-mode operation via a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">VMRESUME</samp> instruction, allowing
    the guest to continue.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚拟机监控程序进入根模式操作时，它可以根据<samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>的原因来模拟、修改和记录活动。这些退出可能因许多常见原因而发生，包括诸如<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RDMSR</samp>（用于读取特定型号寄存器）和<samp class="SANS_TheSansMonoCd_W5Regular_11">CPUID</samp>（返回有关处理器的信息）等指令。根模式操作完成后，执行会通过<samp
    class="SANS_TheSansMonoCd_W5Regular_11">VMRESUME</samp>指令转回非根模式操作，允许来宾继续运行。
- en: There are two types of hypervisors. Products such as Microsoft’s Hyper-V and
    VMware’s ESX are what we call *Type 1 hypervisors*. This means the hypervisor
    runs on the bare metal system, as shown in Figure A-2.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的虚拟机监控程序。像微软的 Hyper-V 和 VMware 的 ESX 这样的产品是我们所称的*类型 1 虚拟机监控程序*。这意味着虚拟机监控程序运行在裸机系统上，如图
    A-2 所示。
- en: '![](../images/FigureA-2.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-2: A Type 1 hypervisor
    architecture</samp>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-2：类型 1 虚拟机监控程序架构</samp>
- en: The other kind of hypervisor, *Type 2*, runs in an operating system installed
    on the bare metal system. Examples of these include VMware’s Workstation and Oracle’s
    VirtualBox. The Type 2 architecture is shown in Figure A-3.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的虚拟机监控程序，*类型 2*，运行在安装在裸机系统上的操作系统中。这些包括 VMware 的 Workstation 和 Oracle 的
    VirtualBox。类型 2 架构如图 A-3 所示。
- en: '![](../images/FigureA-3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-3: A Type 2 hypervisor
    architecture</samp>'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-3：类型 2 虚拟机监控程序架构</samp>
- en: Type 2 hypervisors are interesting because they can virtualize a system that
    is already running. Thus, rather than requiring the end user to log in to their
    system, start an application such as VMware Workstation, launch a virtual machine,
    log in to the virtual machine, and then do their work from that virtual machine,
    their host is the virtual machine. This makes the hypervisor layer transparent
    to the user (and resident attackers) while allowing the EDR to collect all the
    telemetry available.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 类型 2 虚拟机监控程序之所以有趣，是因为它们可以虚拟化已经运行的系统。因此，用户无需登录到系统，启动像 VMware Workstation 这样的应用程序，启动虚拟机，登录虚拟机，然后从虚拟机中进行工作，而是直接将主机作为虚拟机。这使得虚拟机监控程序层对用户（以及潜在的攻击者）透明，同时允许
    EDR 收集所有可用的遥测数据。
- en: Most EDRs that implement a hypervisor take the Type 2 approach. Even so, they
    must follow a complicated series of steps to virtualize an existing system. Full
    hypervisor implementation is far beyond the scope of this book. If this topic
    interests you, both Daax Rynd and Sina Karvandi have excellent resources for implementing
    your own.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数实现虚拟机监控器的端点检测与响应（EDR）系统采用 Type 2 方法。然而，它们必须遵循一系列复杂的步骤来虚拟化现有系统。完全的虚拟机监控器实现远超本书的范畴。如果你对此话题感兴趣，Daax
    Rynd 和 Sina Karvandi 都提供了实现自己虚拟机监控器的优秀资源。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Security Use Cases</samp>
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">安全用例</samp>
- en: 'A hypervisor can provide visibility into system operations at a layer deeper
    than nearly any other sensor. Using one, an endpoint security product can detect
    attacks missed by the sensors in other rings, such as the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控器能够提供比几乎任何其他传感器都更深入的系统操作可视化。使用它，端点安全产品可以检测到其他环节的传感器无法察觉的攻击，例如以下几种：
- en: '**Virtual Machine Detection**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟机检测**'
- en: Some malware attempts to detect that it is running in a virtual machine by issuing
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">CPUID</samp> instruction. Since
    this instruction causes a <samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>,
    the hypervisor has the ability to choose what to return to the caller, allowing
    it to trick the malware into thinking it isn’t running in a VM.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件尝试通过发出 <samp class="SANS_TheSansMonoCd_W5Regular_11">CPUID</samp> 指令来检测其是否运行在虚拟机中。由于此指令会引发
    <samp class="SANS_TheSansMonoCd_W5Regular_11">VMEXIT</samp>，虚拟机监控器有能力决定返回给调用者的内容，从而欺骗恶意软件使其认为自己并未运行在虚拟机中。
- en: '**Syscall Interception**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统调用拦截**'
- en: A hypervisor can potentially leverage the Extended Feature Enable Register (EFER)
    function to exit on each syscall and emulate its operation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控器可以利用扩展功能使能寄存器（EFER）功能，在每次系统调用时退出并模拟其操作。
- en: '**Control Register Modification**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制寄存器修改**'
- en: A hypervisor can detect the modification of bits in a control register (such
    as the <samp class="SANS_TheSansMonoCd_W5Regular_11">SMEP</samp> bit in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">CR4</samp> register), which is behavior
    that could be part of an exploit. Additionally, the hypervisor can exit when a
    control register is changed, allowing it to inspect the guest execution context
    to identify things such as token-stealing attacks.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控器（hypervisor）可以检测控制寄存器中的位修改（例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">SMEP</samp>
    位在 <samp class="SANS_TheSansMonoCd_W5Regular_11">CR4</samp> 寄存器中的变化），这种行为可能是攻击的一部分。此外，虚拟机监控器可以在控制寄存器发生变化时退出，从而检查来宾的执行上下文，识别诸如令牌窃取攻击之类的行为。
- en: '**Memory Change Tracing**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存变化追踪**'
- en: A hypervisor can use the page-modification log in conjunction with Extended
    Page Tables (EPT) to track changes to certain regions of memory.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控器可以结合扩展页表（EPT）利用页面修改日志来追踪特定内存区域的变化。
- en: '**Branch Tracing**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**分支追踪**'
- en: A hypervisor can leverage the *last branch record*, a set of registers used
    to trace branches, interrupts, and exceptions, along with EPT to trace the execution
    of the program beyond monitoring its syscalls.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控器可以利用*最后分支记录*（last branch record），这是一组用于追踪分支、中断和异常的寄存器，结合 EPT 进一步追踪程序执行，而不仅仅是监控其系统调用。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Evading the Hypervisor</samp>
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">规避虚拟机监控器</samp>
- en: One of the difficult things about operating against a system onto which a vendor
    has deployed a hypervisor is that, by the time you know you’re in a virtual machine,
    you’ve likely already been detected. Thus, malware developers commonly use virtual-machine-detection
    functions, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">CPUID</samp>
    instructions or sleep acceleration, prior to executing their malware. If the malware
    finds that it is running in a virtual machine, it may opt to terminate or merely
    do something benign.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在与部署了虚拟机监控器的系统作对抗时，一项难题是，当你意识到自己处在虚拟机中时，可能已经被检测到。因此，恶意软件开发人员通常会在执行恶意软件之前，使用虚拟机检测功能，如
    <samp class="SANS_TheSansMonoCd_W5Regular_11">CPUID</samp> 指令或睡眠加速功能。如果恶意软件发现自己运行在虚拟机中，它可能会选择终止或仅仅执行一些无害的操作。
- en: Another option available to attackers is unloading the hypervisor. In the case
    of Type 2 hypervisors, you might be able to interact with the driver via an I/O
    control code, by changing the boot configuration, or by directly stopping the
    controlling service in order to cause the hypervisor to devirtualize the processors
    and unload, preventing its ability to monitor future actions. To date, there are
    no public reports of a real-world adversary employing these techniques.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以选择卸载虚拟机监控器（hypervisor）。对于第二类虚拟机监控器（Type 2 hypervisors），你可能通过 I/O 控制代码与驱动程序进行交互，修改启动配置，或直接停止控制服务，从而使虚拟机监控器去虚拟化处理器并卸载，防止其继续监控未来的操作。至今，尚未有公开报告显示现实世界中的对手使用过这些技术。
