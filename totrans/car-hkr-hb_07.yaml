- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**BUILDING AND USING ECU TEST BENCHES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建和使用ECU测试台**'
- en: '![image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common-01.jpg)'
- en: An ECU test bench, like the one shown in [Figure 7-1](ch07.html#ch7fig1), consists
    of an ECU, a power supply, an optional power switch, and an OBD-II connector.
    You can also add an IC or other CAN-related systems for testing, but just building
    a basic ECU test bench is a great way to learn the CAN bus and how to create custom
    tools. In this chapter, we’ll walk step by step through the process of building
    a test bench for development and testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ECU测试台，如[图7-1](ch07.html#ch7fig1)所示，由ECU、电源、可选的电源开关和OBD-II连接器组成。你还可以添加IC或其他与CAN相关的系统进行测试，但仅构建一个基本的ECU测试台已经是学习CAN总线和如何创建自定义工具的一个很好的方法。在本章中，我们将一步一步地讲解如何为开发和测试构建测试台。
- en: '**The Basic ECU Test Bench**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**基本ECU测试台**'
- en: The most basic test bench is the device that you want to target and a power
    supply. When you give an ECU the proper amount of power, you can start performing
    tests on its inputs and communications. For example, [Figure 7-1](ch07.html#ch7fig1)
    shows a basic test bench containing a PC power supply and an ECU.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的测试台是你想要测试的设备和一个电源。当你为ECU提供适当的电力时，你就可以开始对它的输入和通讯进行测试。例如，[图7-1](ch07.html#ch7fig1)展示了一个基本的测试台，包含了一个PC电源和一个ECU。
- en: '![image](graphics/f07-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-01.jpg)'
- en: '*Figure 7-1: A simple ECU test bench*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：一个简单的ECU测试台*'
- en: However, you’ll often want to at least add some components or ports to make
    the test bench easier to use and operate. To make it easier to turn the device
    on and off, you can add a switch to the power supply. An OBD port allows for specialized
    mechanics tools to communicate with the vehicle’s network. In order for that OBD
    port to fully function, we need to expose the vehicle’s network wires from the
    ECU to the OBD port.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你通常至少会希望添加一些组件或端口，以使测试台更容易使用和操作。为了更方便地开关设备，你可以为电源添加一个开关。OBD端口允许专用的机械工具与车辆的网络进行通信。为了使OBD端口能够完全工作，我们需要将ECU的车辆网络电缆暴露到OBD端口。
- en: '***Finding an ECU***'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***寻找ECU***'
- en: One place to find an ECU is, of course, at the junkyard. You’ll typically find
    the ECU behind a car’s radio in the center console or behind the glove box. If
    you’re having trouble finding it, try using the massive wiring harness to trace
    back to the ECU. When pulling one out yourself (it should cost only about $150),
    be sure to pull it from a vehicle that supports CAN. You can use a reference website
    such as *[http://www.auterraweb.com/aboutcan.html](http://www.auterraweb.com/aboutcan.html)*
    to help you identify a target vehicle. Also, make sure you leave at least a pigtail’s
    worth of wiring when you remove the ECU; this will make it easier to wire up later.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 找到ECU的一个地方当然是在废品场。你通常会在车的中控台的收音机后面或手套箱后面找到ECU。如果你找不到它，可以尝试利用庞大的电缆束追溯到ECU。自己拆卸时（费用大约为$150），务必从支持CAN的车辆中拆下ECU。你可以使用像*【http://www.auterraweb.com/aboutcan.html】(http://www.auterraweb.com/aboutcan.html)*这样的参考网站来帮助你识别目标车辆。另外，当你移除ECU时，确保至少保留一段电缆，这样以后接线会更方便。
- en: If you’re not comfortable pulling devices out of junked cars, you can order
    an ECU online at a site like *[car-part.com](http://car-part.com)*. The cost will
    be a bit higher because you’re paying for someone else to get the part and ship
    it to you. Be sure that the ECU you buy includes the wire bundles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太喜欢从废车中拆卸设备，可以在像*【car-part.com】(http://car-part.com)*这样的网上网站上订购ECU。费用会稍微高一些，因为你需要支付给别人去获取零件并将其寄给你。务必确保你购买的ECU包含了电缆束。
- en: '**NOTE**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*One downside to buying an ECU online is that it may be difficult to acquire
    parts from the same car if you need multiple parts. For instance, you may need
    both the body control module (BCM) and the ECU because you want to include keys
    and the immobilizer is in the BCM. In this case, if you mix and match from two
    different vehicles, the vehicle won’t “start” properly.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*在线购买ECU的一个缺点是，如果你需要多个零件，可能很难从同一辆车上获得它们。例如，你可能需要车身控制模块（BCM）和ECU，因为你希望包括钥匙，而防盗系统在BCM中。在这种情况下，如果你混合搭配来自两辆不同车辆的部件，车辆就无法“正常启动”。*'
- en: Instead of harvesting or buying a used ECU, you could also use a prebuilt simulator,
    like the ECUsim 2000 by ScanTool (see [Figure 7-2](ch07.html#ch7fig2)). A simulator
    like ECUsim will cost around $200 per protocol and will support only OBD/UDS communications.
    Simulators can generate faults and MIL lights, and they include fault knobs for
    changing common vehicle parameters, such as speed. Unless you’re building an application
    that uses only UDS packets, however, a simulator probably isn’t the way to go.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与其收集或购买一个二手的 ECU，你也可以使用一个预构建的模拟器，比如 ScanTool 的 ECUsim 2000（参见[图 7-2](ch07.html#ch7fig2)）。像
    ECUsim 这样的模拟器每个协议的价格大约为 200 美元，并且只支持 OBD/UDS 通信。模拟器可以生成故障和 MIL 灯，并包括用于改变常见车辆参数（如速度）的故障旋钮。然而，除非你正在构建一个仅使用
    UDS 数据包的应用程序，否则模拟器可能不是最佳选择。
- en: '![image](graphics/f07-02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-02.jpg)'
- en: '*Figure 7-2: ECUsim OBD simulator*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：ECUsim OBD 模拟器*'
- en: '***Dissecting the ECU Wiring***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***解剖 ECU 接线***'
- en: Once you have all of the parts, you’ll need to find the ECU’s wiring diagram
    to determine which wires you need to connect in order to get it to work. Visit
    a website such as ALLDATA (*[http://www.alldata.com/](http://www.alldata.com/)*)
    or Mitchell 1 (*[http://mitchell1.com/main/](http://mitchell1.com/main/)*) to
    get a complete wiring diagram. You’ll find that off-the-shelf service manuals
    will sometimes have wiring diagrams, but they’re often incomplete and contain
    only common repair areas.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了所有的零件，你需要找到 ECU 的接线图，以确定需要连接哪些线路来使其工作。访问像 ALLDATA (*[http://www.alldata.com/](http://www.alldata.com/)*)
    或 Mitchell 1 (*[http://mitchell1.com/main/](http://mitchell1.com/main/)*) 这样的网站来获取完整的接线图。你会发现现成的维修手册有时会包含接线图，但它们通常不完整，并且只涵盖常见的维修区域。
- en: Wiring diagrams aren’t always easy to read, mainly because some combine numerous
    small components (see [Figure 7-3](ch07.html#ch7fig3)). Try to mentally break
    down each component to get a better idea of which wires to focus on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接线图并不总是容易阅读，主要是因为有些接线图将许多小组件结合在一起（参见[图 7-3](ch07.html#ch7fig3)）。尝试在脑海中分解每个组件，以便更好地了解需要关注哪些线路。
- en: '![image](graphics/f07-03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-03.jpg)'
- en: '*Figure 7-3: Example of an ECU wiring diagram*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：ECU 接线图示例*'
- en: '**Pinouts**'
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**引脚图**'
- en: You can get pinouts for the ECUs on several different vehicles from *[http://www.innovatemotorsports.com/resources/ecu_pinout.php](http://www.innovatemotorsports.com/resources/ecu_pinout.php)*
    and from commercial resources like ALLDATA and Mitchell 1\. Books like the Chilton
    auto repair manuals include block diagrams, but you’ll find that they typically
    cover only the most common repair components, not the entire ECU.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 *[http://www.innovatemotorsports.com/resources/ecu_pinout.php](http://www.innovatemotorsports.com/resources/ecu_pinout.php)*
    以及像 ALLDATA 和 Mitchell 1 这样的商业资源中获取多个不同车辆的 ECU 引脚图。像 Chilton 这样的汽车维修手册包括块图，但你会发现它们通常只涵盖最常见的维修组件，而不是整个
    ECU。
- en: '**Block Diagrams**'
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**块图**'
- en: Block diagrams are often easier to read than wiring diagrams that show all components
    on the same sheet. Block diagrams usually show the wiring for only one component
    and offer a higher-level overview of the main components, whereas schematics show
    all the circuitry details. Some block diagrams also include a legend showing which
    connector block the diagram refers to and the connectors on that module; you’ll
    typically find these in the corner of the block diagram (see [Table 7-1](ch07.html#ch7tab1)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 块图通常比显示所有组件在同一张图纸上的接线图更易于阅读。块图通常仅显示单个组件的接线，并提供主组件的高级概览，而原理图则显示所有电路细节。一些块图还包括图例，显示该图所指的连接器块及该模块上的连接器；你通常可以在块图的角落找到这些信息（参见[表
    7-1](ch07.html#ch7tab1)）。
- en: '**Table 7-1:** Example Connector Legend'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 7-1：** 示例连接器图例'
- en: '| **CONN ID** | **Pin count** | **Color** |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **连接器 ID** | **引脚数量** | **颜色** |'
- en: '| --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| C1 | 68 | WH |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| C1 | 68 | WH |'
- en: '| C2 | 68 | L-GY |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| C2 | 68 | L-GY |'
- en: '| C3 | 68 | M-GY |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| C3 | 68 | M-GY |'
- en: '| C4 | 12 | BK |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| C4 | 12 | BK |'
- en: The legend should give the connector number, its number pin count, and the color.
    For instance, the line C1 = 68 WH in [Table 7-1](ch07.html#ch7tab1) means that
    the C1 connector has 68 pins and is white. L-GY probably means light gray, and
    so on. A connector number like C2-55 refers to connector 2, pin 55\. The connectors
    usually have a number on the first and last pin in the row.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图例应给出连接器的编号、引脚数量和颜色。例如，[表 7-1](ch07.html#ch7tab1) 中的 C1 = 68 WH 表示 C1 连接器有 68
    个引脚，并且是白色的。L-GY 可能表示浅灰色，以此类推。像 C2-55 这样的连接器编号指的是连接器 2 的引脚 55。连接器通常在行的第一个和最后一个引脚上标有编号。
- en: '***Wiring Things Up***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***接线***'
- en: Once you have information on the connector’s wiring, it’s time to wire it up.
    Wire the CAN to the proper ports on the connector, as discussed in “[OBD-II Connector
    Pinout Maps](ch02.html#ch02lev1sec8)” on [page 31](ch02.html#page_31). When you
    provide power—a power supply from an old PC should suffice—and add a CAN sniffer,
    you should see packets. You can use just a simple OBD-II scan tool that you can
    pick up at any automotive store. If you have everything wired correctly, the scan
    tool should be able to identify the vehicle, assuming that your test bench includes
    the main ECU.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了连接器的接线信息，就可以开始接线了。将 CAN 接到连接器上的正确端口，正如在《[OBD-II 连接器针脚图](ch02.html#ch02lev1sec8)》第
    31 页所讨论的那样。当你提供电源（来自旧 PC 的电源应该足够）并添加一个 CAN 嗅探器时，你应该能够看到数据包。你可以使用任何汽车商店都能买到的简单
    OBD-II 扫描工具。如果一切接线正确，扫描工具应该能识别出车辆，前提是你的测试台包括主 ECU。
- en: '**NOTE**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Your MIL, or engine light, will most likely be reported as* on *by the scan
    tool/ECU.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*你的 MIL（发动机故障灯）很可能会被扫描工具/ECU 报告为*开启*状态。*'
- en: If you’ve wired everything but you still don’t see packets on your CAN bus,
    you may be missing termination. To address this problem, start by adding a 120-ohm
    resistor, as a CAN bus has 120-ohm resistors at each end of the bus. If that doesn’t
    work, add a second resistor. The maximum missing resistance should be 240 ohms.
    If the bus still isn’t working, then recheck your wires and try again.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经接好了所有线，但仍然看不到 CAN 总线上的数据包，可能是缺少终端电阻。为了解决这个问题，首先可以添加一个 120 欧姆的电阻，因为 CAN
    总线的两端都有 120 欧姆的电阻。如果这样不行，再加一个电阻。最大缺失电阻应为 240 欧姆。如果总线依然无法工作，那么请重新检查你的电缆并再试一次。
- en: '**NOTE**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*A lot of components communicate with the ECU in a simple manner, either via
    set digital signals or through analog signals. Analog signals are easy to simulate
    with a potentiometer and you can often tie a 1 kilohm potentiometer to the engine
    temp and fuel lines to control them.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*许多组件通过简单的方式与 ECU 通信，或者通过设定的数字信号，或者通过模拟信号。模拟信号可以通过电位器轻松模拟，通常你可以将一个 1 千欧的电位器连接到发动机温度和燃油线来控制它们。*'
- en: '**Building a More Advanced Test Bench**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建更先进的测试台**'
- en: If you’re ready to take your car hacking research further, consider building
    a more advanced ECU test bench, like the one shown in [Figure 7-4](ch07.html#ch7fig4).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备深入研究汽车黑客技术，考虑构建一个更先进的 ECU 测试台，就像在《[图 7-4](ch07.html#ch7fig4)》中所示的那样。
- en: This unit combines an ECU with a BCM because it also has the original keys to
    start the vehicle. Notice that the optional IC has two 1 kilohm potentiometers,
    or variable resistors, on the lower left side, both of which are tied to the engine
    temperature and fuel lines. We use these potentiometers to generate sensor signals,
    as discussed in the following section. This particular test bench also includes
    a small MCU that allows you to simulate sending crankshaft and camshaft signals
    to the ECU.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该单元将 ECU 与 BCM 集成在一起，因为它还拥有启动车辆所需的原始钥匙。注意，选配的 IC 在左下方有两个 1 千欧的可变电阻（也叫电位器），这两个电位器都连接到发动机温度和燃油线。我们使用这些电位器来生成传感器信号，如下面的章节所述。这个特定的测试台还包括一个小型
    MCU，允许你模拟向 ECU 发送曲轴和凸轮轴信号。
- en: '![image](graphics/f07-04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-04.jpg)'
- en: '*Figure 7-4: More complex test bench*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-4：更复杂的测试台*'
- en: 'A more complex unit like the one in [Figure 7-4](ch07.html#ch7fig4) makes it
    trivial to determine CAN traffic: just load a sniffer, adjust the knob, and watch
    for the packets to change. If you know which wires you’re targeting and the type
    of input they take, you can easily fake signals from most components.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的设备，如《[图 7-4](ch07.html#ch7fig4)》所示，使得确定 CAN 流量变得轻而易举：只需加载一个嗅探器，调整旋钮，观察数据包变化。如果你知道你针对的线和它们接收的输入类型，你可以轻松模拟大多数组件的信号。
- en: '***Simulating Sensor Signals***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***模拟传感器信号***'
- en: 'As I mentioned, you can use the potentiometers in this setup to simulate various
    vehicle sensors, including the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，你可以在这个设置中使用电位器来模拟各种车辆传感器，包括以下几种：
- en: • Coolant temperature sensor
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: • 冷却液温度传感器
- en: • Fuel sensor
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: • 燃油传感器
- en: • Oxygen sensors, which detect post-combustion oxygen in the exhaust
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: • 氧气传感器，用于检测排气中的燃烧后氧气
- en: • Throttle position, which is probably already a potentiometer in the actual
    vehicle
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: • 油门位置，这在实际车辆中可能已经是一个电位器
- en: • Pressure sensors
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: • 压力传感器
- en: If your goal is to generate more complex or digital signals, use a small microcontroller,
    such as an Arduino, or a Raspberry Pi.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是生成更复杂或数字化的信号，可以使用一个小型微控制器，如 Arduino 或 Raspberry Pi。
- en: For our test bench, we also want to control the RPMs and/or speedometer needle.
    In order to do this, we need a little background on how the ECU measures speed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的测试台，我们还想控制转速和/或车速表指针。为了实现这一点，我们需要了解ECU是如何测量速度的。
- en: '***Hall Effect Sensors***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***霍尔效应传感器***'
- en: Hall effect sensors are often used to sense engine speed and crankshaft position
    (CKP) and to generate digital signals. In [Figure 7-5](ch07.html#ch7fig5), the
    Hall effect sensor uses a shutter wheel, or a wheel with gaps in it, to measure
    the rotation speed. The gallium arsenate crystal changes its conductivity when
    exposed to a magnetic field. As the shutter wheel spins, the crystal detects the
    magnet and sends a pulse when not blocked by the wheel. By measuring the frequency
    of pulses, you can derive the vehicle speed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 霍尔效应传感器通常用于感知发动机转速和曲轴位置（CKP），并生成数字信号。在[图 7-5](ch07.html#ch7fig5)中，霍尔效应传感器使用一个快门轮，或一个带有间隙的轮子，来测量旋转速度。砷化镓晶体在暴露于磁场时会改变其导电性。随着快门轮的旋转，晶体检测到磁铁并在没有被轮子遮挡时发送脉冲。通过测量脉冲的频率，你可以推算出车辆的速度。
- en: '![image](graphics/f07-05.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-05.jpg)'
- en: '*Figure 7-5: Shutter wheel diagram for Hall effect sensor*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-5：霍尔效应传感器的快门轮示意图*'
- en: You can also use the camshaft timing sprocket to measure speed. When you look
    at the camshaft timing sprocket, the magnet is on the side of the wheel (see [Figure
    7-6](ch07.html#ch7fig6)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用凸轮轴定时链轮来测量速度。当你观察凸轮轴定时链轮时，磁铁位于车轮的一侧（见[图 7-6](ch07.html#ch7fig6)）。
- en: '![image](graphics/f07-06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-06.jpg)'
- en: '*Figure 7-6: Camshaft timing sprocket*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-6：凸轮轴定时链轮*'
- en: 'Using a scope on the signal wire shows that the Hall effect sensor produces
    a square wave. Typically, there are three wires on the camshaft sensor: power,
    ground, and sensor. Power is usually 12V, but the signal wire typically operates
    at 5V back to the ECM. Camshaft sensors also come as optical sensors, which work
    in a similar fashion except an LED is on one side and a photocell is on the other.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用示波器检测信号线表明霍尔效应传感器会产生方波。通常，凸轮轴传感器有三根线：电源、接地和信号线。电源通常是12V，但信号线通常在5V下返回ECM。凸轮轴传感器也有光学传感器，它们的工作原理类似，区别在于一侧是LED，另一侧是光电池。
- en: You can gauge full rotation timing with a missing tooth called a *trigger wheel*
    or with a timing mark. It’s important to know when the camshaft has made a full
    rotation. An inductive camshaft sensor produces a sine wave and will often have
    a missing tooth to detect full rotation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个缺齿的定时齿轮（称为*触发轮*）或一个定时标记来测量完整的旋转时间。了解凸轮轴何时完成一整圈非常重要。感应型凸轮轴传感器会产生正弦波，通常会有一个缺齿，用来检测完整的旋转。
- en: '[Figure 7-7](ch07.html#ch7fig7) shows the camshaft sensor repeating approximately
    every 2 milliseconds. The jump or a gap you see in the wave at around the 40-millisecond
    mark occurs when the missing tooth is reached. The location of that gap marks
    the point at which the camshaft has completed a full rotation. In order to fake
    these camshaft signals into the ECU test bench, you’d need to write a small sketch
    for your microcontroller. When writing microcontroller code to mimic these sensors,
    it’s important to know what type of sensor your vehicle uses so that you’ll know
    whether to use a digital or analog output when faking the teeth.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-7](ch07.html#ch7fig7)显示了凸轮轴传感器的信号大约每2毫秒重复一次。在约40毫秒的位置，波形中的跳跃或间隙是因为缺失齿到达的地方。该间隙的位置标志着凸轮轴完成一整圈的点。为了将这些凸轮轴信号模拟到ECU测试台，你需要为你的微控制器编写一个小的程序。当编写微控制器代码以模拟这些传感器时，了解你的车辆使用何种类型的传感器非常重要，这样你就知道在模拟齿轮时是否使用数字输出或模拟输出。'
- en: '![image](graphics/f07-07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-07.jpg)'
- en: '*Figure 7-7: Camshaft sensor signals under a scope*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-7：示波器下的凸轮轴传感器信号*'
- en: '**Simulating Vehicle Speed**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**模拟车辆速度**'
- en: Now, we’ll build a test bench to simulate vehicle speed. We’ll use this test
    bench together with the IC shown in [Figure 7-4](ch07.html#ch7fig4) to pull a
    vehicle’s VIN via the OBD-II connector. This will give us the exact year, make,
    model, and engine type of the vehicle. (We looked at how to do this manually in
    “[Unified Diagnostic Services](ch04.html#ch04lev1sec2)” on [page 54](ch04.html#page_54).)
    [Table 7-2](ch07.html#ch7tab2) shows the results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将建立一个测试台来模拟车辆速度。我们将使用这个测试台与[图 7-4](ch07.html#ch7fig4)中展示的IC一起，通过OBD-II连接器提取车辆的VIN。这将为我们提供车辆的确切年份、品牌、型号和发动机类型。（我们在《[统一诊断服务](ch04.html#ch04lev1sec2)》中手动做过这件事，详见[第54页](ch04.html#page_54)。）[表
    7-2](ch07.html#ch7tab2)显示了结果。
- en: '**Table 7-2:** Vehicle Information'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 7-2：** 车辆信息'
- en: '| **VIN** | **Model** | **Year** | **Make** | **Body** | **Engine** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **VIN** | **车型** | **年份** | **品牌** | **车身** | **发动机** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 1G1ZT53826F109149 | Malibu | 2006 | Chevrolet | Sedan 4Door | 3.5L V6 OHV
    12V |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 1G1ZT53826F109149 | Malibu | 2006 | Chevrolet | Sedan 4Door | 3.5L V6 OHV
    12V |'
- en: Once we know a vehicle’s year of manufacture and engine type, we can fetch the
    wiring diagram to determine which of the ECU wires control the engine speed (see
    [Figure 7-8](ch07.html#ch7fig8)). Then, we can send simulated speed data to the
    ECU in order to measure effects. Using wiring diagrams to simulate real engine
    behavior can make it easy to identify target signals on the CAN bus.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道了车辆的制造年份和发动机类型，就可以获取接线图来确定哪些ECU电线控制发动机转速（见[图7-8](ch07.html#ch7fig8)）。然后，我们可以向ECU发送模拟的转速数据，以便测量效果。使用接线图来模拟真实的发动机行为可以帮助我们轻松识别CAN总线上的目标信号。
- en: '![image](graphics/f07-08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-08.jpg)'
- en: '*Figure 7-8: Wiring diagram showing the engine speed pin*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-8：显示发动机转速引脚的接线图*'
- en: The wiring diagram in [Figure 7-8](ch07.html#ch7fig8) shows how you can trace
    the wire from the CKP sensor so that connector C2, pin 27 receives the engine
    speed from the crankshaft sensor. Having identified this pin in the wiring diagram,
    we locate the corresponding wire on the ECU. We can connect this wire to any digital
    IO pin on an Arduino. In this example, we’ll use pin 2 and then add a potentiometer
    to A0 to control the speed of the CKP sensor’s “teeth” going to the ECM. Pin 2
    will send output to C2, pin 27.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-8](ch07.html#ch7fig8)中的接线图展示了如何从CKP传感器追踪电线，使得C2连接器的27脚能够接收来自曲轴传感器的发动机转速。确定了接线图中的这个引脚后，我们在ECU上找到相应的电线。我们可以将这根电线连接到Arduino的任何数字IO引脚。在这个例子中，我们将使用引脚2，并将电位计连接到A0，用来控制CKP传感器的“齿轮”向ECM发送的转速。引脚2将向C2引脚27发送输出。'
- en: In order to simulate engine speed sent from the CKP sensor, we code up an Arduino
    sketch to send high and low pulses with a delay interval mapped to the potentiometer
    position (see [Listing 7-1](ch07.html#ch7list1)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟从CKP传感器发送的发动机转速，我们编写了一个Arduino草图，用来发送高低脉冲，延迟间隔与电位计位置相对应（见[清单7-1](ch07.html#ch7list1)）。
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 7-1: Arduino sketch designed to simulate engine speed*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单7-1：用于模拟发动机转速的Arduino草图*'
- en: Now, we upload this sketch to the Arduino, power up the test bench, and when
    we turn the knob on the potentiometer, the RPM dial moves on the IC. In [Figure
    7-9](ch07.html#ch7fig9), the second line of the `cansniffer` traffic shows bytes
    2 and 3—0x0B and 0x89—changing as we rotate the potentiometer knob for Arbitration
    ID 0x110 (the column labeled *ID*).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将这个草图上传到Arduino，启动测试台，并在转动电位计的旋钮时，IC上的转速表会跟随移动。在[图7-9](ch07.html#ch7fig9)中，`cansniffer`流量的第二行显示了字节2和字节3——0x0B和0x89——随着我们旋转电位计旋钮而变化，用于仲裁ID
    0x110（列出为*ID*的那一列）。
- en: '![image](graphics/f07-09.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-09.jpg)'
- en: '*Figure 7-9:* `cansniffer` *identifying RPMs*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-9:* `cansniffer` *识别转速*'
- en: '**NOTE**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*0x0B and 0x89 don’t directly translate into the RPMs; rather, they’re shorthand.
    In other words, if you’re going to 1000 RPMs, you won’t see the hex for 1000\.
    When you query an engine for RPMs, the algorithm to convert these two bytes into
    RPMs is commonly the following:*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*0x0B和0x89并不直接转换为转速；它们只是简写。换句话说，如果你要达到1000转速，你不会看到1000的十六进制值。当你查询发动机转速时，将这两个字节转换为转速的常见算法如下：*'
- en: '![image](graphics/f0125-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0125-01.jpg)'
- en: '*A is the first byte and* B *is the second byte. If you apply that algorithm
    to what’s shown in [Figure 7-9](ch07.html#ch7fig9) (converted from hex to decimal),
    you get this:*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*A是第一个字节，* B *是第二个字节。如果你将这个算法应用到[图7-9](ch07.html#ch7fig9)中显示的内容（从十六进制转换为十进制），你会得到以下结果：*'
- en: '![image](graphics/f0125-02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0125-02.jpg)'
- en: '*You can simplify this method to taking 0xB89, which is 2953 in decimal form.
    When you divide this by 4, you get 738.25 RPMs.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以简化这个方法，直接使用0xB89，它在十进制形式下是2953。当你将其除以4时，你得到738.25转速。*'
- en: When this screenshot was taken, the needle was idling a bit below the 1 on the
    RPM gauge, so that’s probably the same algorithm. (Sometimes you’ll find that
    the values in the true CAN packets don’t always match the algorithms used by off-the-shelf
    diagnostic tools using the UDS service, but it’s nice when they do.)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当这张截图拍摄时，指针在转速表的1以下略微空转，所以这可能是相同的算法。（有时你会发现，真实的CAN数据包中的数值并不总是与使用UDS服务的现成诊断工具的算法一致，但它们一致时是非常好的。）
- en: To verify that arbitration ID 0x110 with bytes 2 and 3 controls the RPM, we’ll
    send our own custom packet. By flooding the bus with a loop that sends the following,
    we’ll peg the needle at max RPMs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证仲裁ID 0x110的第2和第3字节控制RPM，我们将发送我们自己的自定义数据包。通过使用一个循环将以下数据包发送到总线，我们将把指针固定在最大转速。
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While this method works and, once connected, takes only a few seconds to identify
    the CAN packet responsible for RPMs, there are still some visible issues. Every
    so often a CAN signal shows up that resets the values to 00 00 and stops the speedometer
    from moving. So while the ECM is fairly certain the crankshaft is spinning, it’s
    detecting a problem and attempting to reset.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法有效，一旦连接，它只需要几秒钟就能识别出负责RPM的CAN数据包，但仍然存在一些明显的问题。每隔一段时间，就会出现一个CAN信号，它将值重置为00
    00，并停止转速表的指针移动。因此，虽然ECM相当确定曲轴在旋转，但它正在检测到问题并尝试重置。
- en: You can use the ISO-TP tools discussed in [Chapter 3](ch03.html#ch03) to pull
    data. In two different terminals, we can check whether there was a diagnostic
    code. (You can also use a scan tool.)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用在[第3章](ch03.html#ch03)中讨论的ISO-TP工具来提取数据。在两个不同的终端中，我们可以检查是否存在诊断代码。（你也可以使用扫描工具。）
- en: 'In one terminal, enter the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个终端中，输入以下内容：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And in another terminal, send this command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端中，发送这个命令：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see this output in the first terminal:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在第一个终端中看到这个输出：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Looks like we have a DTC set. Querying PID 0x03 returned a 4-byte DTC (0x0068C107).
    The first two bytes make up the standard DTC (0x00 0x68). This converts to P0068,
    which the Chilton manual refers to as “throttle body airflow performance.” A quick
    Google search will let you know that this is just a generic error code that results
    from a discrepancy between what the PCM thinks is going on and what data it’s
    getting from the intake manifold. If we wanted to spoof that data as well, we’d
    need to spoof three additional sensors: the MAF sensor, the throttle position,
    and the manifold air pressure (MAP). Fixing these may not actually fix our problem,
    though. The PCM may continue to think the vehicle is running smoothly, but unless
    you really care about fudging all the data, you may be able to find other ways
    to trick the signals you want out of the PCM without having to be immune to triggering
    DTC faults.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们已经有一个DTC设置了。查询PID 0x03返回了一个4字节的DTC（0x0068C107）。前两个字节构成了标准DTC（0x00 0x68）。这转换为P0068，在《Chilton手册》中被称为“节气门体气流性能”。通过快速搜索Google，你会发现这只是一个通用错误代码，通常由PCM认为发生的情况与它从进气歧管获取的数据之间的差异引起。如果我们也想伪造这些数据，我们还需要伪造三个附加传感器：MAF传感器、节气门位置传感器和进气歧管压力（MAP）。然而，修复这些问题可能并不会真正解决我们的困境。PCM可能仍然认为车辆运行正常，但除非你真的在乎篡改所有数据，否则你也许可以找到其他方法来欺骗PCM输出你想要的信号，而无需担心触发DTC故障。
- en: If you don’t want to use an Arduino to send signals, you can also buy a signal
    generator. A professional one will cost at least $150, but you can also get one
    from SparkFun for around $50 (*[http://www.sparkfun.com/products/11394/](http://www.sparkfun.com/products/11394/)*).
    Another great alternative is the JimStim for Megasquirt. This can be purchased
    as a kit or fully assembled for $90 from DIYAutoTune (*[http://www.diyautotune.com/catalog/jimstim-15-megasquirt-stimulator-wheel-simulator-assembled-p-178.html](http://www.diyautotune.com/catalog/jimstim-15-megasquirt-stimulator-wheel-simulator-assembled-p-178.html)*).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用Arduino发送信号，你也可以购买一个信号发生器。专业的信号发生器至少需要$150，但你也可以从SparkFun购买一个，价格约为$50（*[http://www.sparkfun.com/products/11394/](http://www.sparkfun.com/products/11394/)*）。另一个很好的选择是Megasquirt的JimStim。这可以作为一个套件或完全组装的版本，价格为$90，从DIYAutoTune购买（*[http://www.diyautotune.com/catalog/jimstim-15-megasquirt-stimulator-wheel-simulator-assembled-p-178.html](http://www.diyautotune.com/catalog/jimstim-15-megasquirt-stimulator-wheel-simulator-assembled-p-178.html)*）。
- en: '**Summary**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter you learned how to build an ECU test bench as an affordable
    solution to safe vehicle security testing. We went over where you can get parts
    for building a test bench and how to read wiring diagrams so you know how to hook
    those parts up. You also learned how to build a more advanced test bench that
    can simulate engine signals, in order to trick components into thinking the vehicle
    is present.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何构建一个ECU测试台，作为一种经济实惠的车辆安全测试解决方案。我们讨论了如何获取构建测试台的零件，以及如何阅读接线图，以便了解如何连接这些零件。你还学习了如何构建一个更先进的测试台，可以模拟发动机信号，从而欺骗组件让它们认为车辆存在。
- en: Building a test bench can be a time-consuming process during your initial research,
    but it will pay off in the end. Not only is it safer to do your testing on a test
    bench, but these units are also great for training and can be transported to where
    you need them.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 建立测试平台在初期研究过程中可能是一个耗时的过程，但最终会带来回报。将测试放在测试平台上进行不仅更安全，而且这些设备也非常适合培训，并且可以运输到你需要的地方。
