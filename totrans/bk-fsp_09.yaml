- en: Chapter 9. Can I Quote You on that?
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 9 章. 我能引用你说的这些吗？
- en: Another feature introduced to the .NET Framework with LINQ is expression trees.
    Often using the same syntax as lambda expressions, *expression trees* compile
    not to executable code but instead into a tree structure that describes the code
    and can be parsed for translation to other forms. This type of programming is
    often called *metaprogramming*. Just as we can think of metadata as data that
    describes data, we can think of metaprogramming as code that describes code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ 引入 .NET Framework 的另一个特性是表达式树。通常使用与 lambda 表达式相同的语法，*表达式树* 编译的不是可执行代码，而是一个描述代码的树结构，并可以被解析以转换成其他形式。这种编程方式通常被称为
    *元编程*。就像我们可以将元数据视为描述数据的数据一样，我们也可以将元编程视为描述代码的代码。
- en: This chapter isn’t about expression trees, though; it’s about a similar construct
    in F# called a *quoted expression*, also known as a *code quotation*. Quoted expressions
    address the same basic problem as expression trees, but they take a fundamentally
    different approach. Let’s quickly compare expression trees to quoted expressions
    before diving into how to compose and parse quoted expressions within your F#
    code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章并不是关于表达式树的；它讨论的是 F# 中类似的结构，叫做 *引用表达式*，也称为 *代码引用*。引用表达式解决了与表达式树相同的基本问题，但采取了根本不同的方法。在深入探讨如何在
    F# 代码中构造和解析引用表达式之前，让我们快速比较一下表达式树与引用表达式。
- en: Comparing Expression Trees and Quoted Expressions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较表达式树和引用表达式
- en: Expression trees are commonly used with LINQ providers to translate certain
    C# or Visual Basic expressions into SQL, but they aren’t only useful for translating
    code between languages. Sometimes expression trees are employed to add an extra
    degree of safety or readability to code that would otherwise be confusing or error-prone.
    Consider the `INotifyPropertyChanged` interface commonly used in WPF and Silverlight.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式树常常与 LINQ 提供者一起使用，用于将某些 C# 或 Visual Basic 表达式转换为 SQL，但它们不仅仅用于语言间的代码转换。有时，表达式树也被用来为本来可能令人困惑或容易出错的代码增加额外的安全性或可读性。考虑一下在
    WPF 和 Silverlight 中常用的 `INotifyPropertyChanged` 接口。
- en: '`INotifyPropertyChanged` defines a single member: an event with a string parameter,
    `PropertyName`, that identifies the property that changed and triggered the event.
    You raise the `PropertyChanged` event by creating a `PropertyChangedEventArgs`
    instance and passing the property name to the constructor as a string. This approach
    is error prone, though:Because there are no inherent checks around the string
    passed to the `PropertyChangedEventArgs` constructor, it’s possible to provide
    an invalid name. Expression trees can help avoid problems like this, as shown
    in the following C# class, which employs an expression tree to safely identify
    the changed property without resorting to obscene amounts of reflection code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`INotifyPropertyChanged` 定义了一个成员：一个带有字符串参数 `PropertyName` 的事件，该参数标识了发生变化并触发事件的属性。你可以通过创建一个
    `PropertyChangedEventArgs` 实例，并将属性名作为字符串传递给构造函数来触发 `PropertyChanged` 事件。然而，这种方法容易出错：因为在传递给
    `PropertyChangedEventArgs` 构造函数的字符串没有内在的检查，可能会提供一个无效的名称。表达式树可以帮助避免像这样的错误，如下所示的
    C# 类，利用表达式树安全地识别更改的属性，而无需依赖大量的反射代码：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding example shows a twist on the typical pattern for implementing
    `INotifyPropertyChanged`. Instead of passing a magic string to the `RaisePropertyChangedEvent`
    method ①, it uses a lambda expression. This lambda expression isn’t compiled to
    a delegate, however. Instead, the C# compiler infers through the signature that
    it should compile the lambda expression to an expression tree ②. Inside the method,
    we then cast the expression’s body to `MemberExpression` at ③ so we can extract
    the property name and pass it to `PropertyChangedEventArgs` at ④.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了实现 `INotifyPropertyChanged` 的典型模式的一个变化。它并没有像通常那样传递一个魔法字符串给 `RaisePropertyChangedEvent`
    方法①，而是使用了一个 lambda 表达式。然而，这个 lambda 表达式并没有编译成一个委托。相反，C# 编译器通过签名推断出应该将该 lambda
    表达式编译为表达式树②。在方法内部，我们随后将表达式的主体强制转换为 `MemberExpression`，在③处提取属性名称，并将其传递给 `PropertyChangedEventArgs`
    在④处。
- en: Quoted expressions serve a similar purpose in F#, but unlike expression trees,
    they were designed with an emphasis on functional programming, not only with how
    they’re constructed but also with how they’re parsed. Furthermore, expression
    trees don’t support many important F#concepts. By contrast, quoted expressions
    are fully aware of concepts like currying, partial application, and recursive
    declarations (`let rec`). Finally, quoted expressions are designed for recursive
    parsing, which makes it almost trivial to walk the entire quoted structure.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 引用表达式在 F# 中的作用类似，但与表达式树不同，它们在设计时强调了函数式编程，而不仅仅是它们的构造方式，还包括它们的解析方式。此外，表达式树并不支持许多
    F# 中的重要概念。相比之下，引用表达式完全理解诸如柯里化、部分应用和递归声明（`let rec`）等概念。最后，引用表达式设计为递归解析，这使得遍历整个引用结构几乎变得微不足道。
- en: 'You can rewrite the preceding C# class in F# using quoted expressions as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按如下方式使用引用表达式将前面的 C# 类重写为 F#：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This revised version of the `PropertyChangedExample` class is structured much
    like the C# version. As in the C# version, `PropertyChangedEvent` isn’t published
    directly. Instead, the `triggerPce` function at ① accepts a quoted expression
    and uses pattern matching to determine whether the supplied quoted expression
    represents getting the value of a property at ②. Finally, instead of a lambda
    expression in the call to `triggerPce` at ③, the quoted expression is represented
    as a property reference enclosed within `<@@` and `@@>`. By using a quoted expression,
    we allow the compiler to determine whether the supplied property is valid, rather
    than crossing our fingers and hoping we’ve entered the correct name. Using a quoted
    expression in this manner also protects us against future refactorings where we
    remove or rename a property but forget to update the string.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修订版本的 `PropertyChangedExample` 类结构与 C# 版本非常相似。如同 C# 版本一样，`PropertyChangedEvent`
    并未直接公开。相反，位于①的 `triggerPce` 函数接受一个引用表达式，并使用模式匹配来判断提供的引用表达式是否代表获取一个属性的值（如②所示）。最后，在对
    `triggerPce` 的调用中，③的 lambda 表达式被引用表达式取代，且该引用表达式以 `<@@` 和 `@@>` 包裹属性引用的形式呈现。通过使用引用表达式，我们允许编译器判断所提供的属性是否有效，而不是希望自己输入正确的名称。以这种方式使用引用表达式还能防止未来重构时，我们移除或重命名属性却忘记更新字符串的问题。
- en: Despite their many similarities, quoted expressions and expression trees aren’t
    quite the same. First, there’s no built-in way to evaluate quoted expressions,
    nor is there any built-in way to translate between quoted expressions and expression
    trees. Should you need to perform either task, you’ll need to turn to the F# PowerPack,
    or another library that provides these capabilities. With the inclusion of query
    expressions ([Chapter 10](ch10.html "Chapter 10. Show Me the Data")) in F# 3.0,
    however, these needs should be diminished.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管引用表达式和表达式树有许多相似之处，但它们并不完全相同。首先，没有内建的方式来评估引用表达式，也没有内建的方式将引用表达式转换为表达式树。如果你需要执行这两项任务，你将需要依赖
    F# PowerPack，或其他提供这些功能的库。然而，随着 F# 3.0 引入查询表达式（[第 10 章](ch10.html "第 10 章. 显示数据")），这些需求应该会减少。
- en: Composing Quoted Expressions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合引用表达式
- en: 'Quoted expressions can take one of two forms: strongly typed and weakly typed.
    The distinction between the two forms is a bit of a misnomer because all quotation
    expressions are ultimately based upon either the `Expr<''T>` or `Expr` types found
    in the `Microsoft.FSharp.Quotations` namespace. In this context, strong and weak
    typing really indicates whether the quotation carries information about the expression
    type as opposed to describing the expression through its constituent parts. You
    can get a weakly typed quoted expression from a strongly typed one through its
    `Raw` property.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 引用表达式可以有两种形式：强类型和弱类型。两者之间的区别有些误导，因为所有的引用表达式最终都是基于 `Expr<'T>` 或 `Expr` 类型，这些类型位于
    `Microsoft.FSharp.Quotations` 命名空间中。在这个上下文中，强类型和弱类型实际上是指引用是否包含关于表达式类型的信息，而不是通过其组成部分来描述表达式。你可以通过其
    `Raw` 属性从强类型的引用表达式获取一个弱类型的引用表达式。
- en: In addition to the `Expr` and `Expr<'T>` types, the `Microsoft.FSharp.Quotations`
    namespace also includes the `Var` type. The `Var` type is used inside quoted expressions
    to describe binding information including a binding name, its data type, and whether
    the binding is mutable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Expr` 和 `Expr<'T>` 类型之外，`Microsoft.FSharp.Quotations` 命名空间还包含 `Var` 类型。`Var`
    类型用于引用表达式中，用来描述绑定信息，包括绑定名称、数据类型以及绑定是否可变。
- en: Regardless of whether a quoted expression is strongly or weakly typed, all quoted
    expressions are subject to a few constraints. First, object expressions are forbidden
    within quotations. Next, the quotation cannot resolve to a generic expression.
    Finally, the quotation must be a complete expression; that is, a quotation must
    do more than define a `let` binding. Attempting to create a quoted expression
    that violates any of these criteria will result in a compiler error.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无论引用表达式是强类型还是弱类型，所有引用表达式都有一些约束条件。首先，引用中禁止出现对象表达式。其次，引用不能解析为泛型表达式。最后，引用必须是一个完整的表达式；即，引用必须做的不仅仅是定义一个
    `let` 绑定。尝试创建一个违反任何这些条件的引用表达式将导致编译错误。
- en: Quoted Literals
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引用字面量
- en: 'To create a quoted expression, you simply need to enclose an expression within
    `<@` and `@>` or `<@@` and `@@>`, where the first form creates a strongly typed
    quoted expression and the second creates a weakly typed quoted expression. For
    example, to create a strongly typed quoted expression that represents multiplying
    two values, you could write something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个引用表达式，您只需要将表达式包含在 `<@` 和 `@>` 或 `<@@` 和 `@@>` 之间，其中第一种形式创建一个强类型的引用表达式，第二种形式创建一个弱类型的引用表达式。例如，要创建一个表示乘法的强类型引用表达式，您可以像这样编写：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding snippet, the underlying type of the quoted expression is ①
    `Expr<int>`. In this case, the compiler infers the quoted expression’s type as
    `int` and carries that type along with the expression. The expression’s value
    is a listing of the source expression’s constituent elements. We’ll dive into
    what the pieces mean and how to use them to decompose quoted expressions a bit
    later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，引用表达式的底层类型是 ① `Expr<int>`。在这种情况下，编译器推断引用表达式的类型为 `int`，并将该类型与表达式一起传递。该表达式的值是源表达式组成元素的列表。稍后我们将深入分析这些部分的含义以及如何使用它们来分解引用表达式。
- en: 'Quoted expressions can be simple like the one in the preceding example, but
    they can also represent more complex expressions including lambda expressions.
    For instance, a lambda expression that multiplies two integers could be quoted
    like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 引用表达式可以像前面的例子一样简单，但也可以表示更复杂的表达式，包括 lambda 表达式。例如，一个乘法两个整数的 lambda 表达式可以像这样被引用：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Similarly, you can include multiple expressions in a single quoted expression.
    Here, a `let` bound function is defined and applied to two integer values:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以在一个引用表达式中包含多个表达式。在这里，定义了一个 `let` 绑定的函数，并将其应用于两个整数值：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: .NET Reflection
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET 反射
- en: 'Another way to create a quoted expression is through standard .NET reflection.
    Normally, quoted expressions are created from nonexecutable code, but on occasion
    you may find that you’ve already defined a function that includes the code you
    want to quote. Rather than duplicating the code, you can decorate the function
    with the `ReflectedDefinition` attribute:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建引用表达式的另一种方式是通过标准 .NET 反射。通常，引用表达式是从不可执行的代码中创建的，但有时您可能会发现，您已经定义了一个包含要引用的代码的函数。与其复制代码，您可以使用
    `ReflectedDefinition` 属性装饰该函数：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, `Multiply` is compiled normally so it can be invoked directly, but the
    `ReflectedDefinition` attribute instructs the compiler to also generate a weakly
    typed quoted expression and embed the result within the compiled assembly. To
    access the generated quoted expression, you need to obtain a standard reflection
    `MethodInfo` object that represents the compiled method and pass it to the `Expr`
    class’s static `TryGetReflectedDefinition` method:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Multiply` 正常编译，因此可以直接调用，但 `ReflectedDefinition` 属性指示编译器还需要生成一个弱类型的引用表达式，并将结果嵌入编译后的程序集。要访问生成的引用表达式，您需要获取一个表示编译方法的标准反射
    `MethodInfo` 对象，并将其传递给 `Expr` 类的静态方法 `TryGetReflectedDefinition`：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you need to quote multiple values within a type, decorating each one with
    the `ReflectedDefinition` attribute can get tedious. Fortunately, you can also
    apply the attribute to modules and types to generate quoted expressions for each
    of their values or members, respectively.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要在一个类型中引用多个值时，给每个值加上 `ReflectedDefinition` 属性可能会显得繁琐。幸运的是，您也可以将该属性应用于模块和类型，以分别为它们的每个值或成员生成引用表达式。
- en: Manual Composition
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动组合
- en: The final way to compose a quoted expression is to manually construct one by
    chaining the results of calls to the `Expr` type’s static methods. The `Expr`
    type defines over 40 methods that create new `Expr` instances, each representing
    the various constructs that can appear in a quoted expression.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 构建引用表达式的最终方法是通过链式调用`Expr`类型的静态方法手动构建一个表达式。`Expr`类型定义了40多个方法来创建新的`Expr`实例，每个实例表示在引用表达式中可能出现的各种构造。
- en: The `Expr` methods are defined such that their purpose should be clear now that
    you know about the data structures and language constructs available to you in
    F#, so I won’t go into detail about each of them. There are two important things
    to note about the methods, though.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Expr`方法的定义方式使得它们的目的应该已经非常清楚，既然你已经了解了F#中的数据结构和语言构造，我就不再详细讲解每一个方法了。不过有两点是非常重要的需要注意的。'
- en: First, the method parameters are tupled so instead of currying multiple parameters,
    they must be provided in tupled form. Second, many of the methods—nearly 50 percent
    of them—use .NET reflection to construct the corresponding expression.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，方法参数是元组形式的，因此不同于柯里化多个参数，它们必须以元组形式提供。其次，许多方法——近50%的方法——使用.NET反射来构造相应的表达式。
- en: Building quoted expressions manually can be tedious, but it gives you the most
    control over how expressions are constructed. Perhaps more important, however,
    is that these methods allow you to build quoted expressions based on code that
    you don’t control and therefore can’t decorate with the `ReflectedDefinition`
    attribute.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 手动构建引用表达式可能很繁琐，但它能给你最大程度的控制权，来决定表达式的构建方式。更重要的是，这些方法允许你基于你无法控制的代码来构建引用表达式，因此这些代码无法装饰上`ReflectedDefinition`属性。
- en: 'To demonstrate the process of manually constructing a quoted expression, let’s
    walk through constructing a method that multiplies two values using the multiplication
    operator. To begin, we need to use reflection to access the `Operators` module
    where the multiplication operator is defined, like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示手动构建引用表达式的过程，让我们通过构建一个使用乘法操作符将两个值相乘的方法来逐步实现。首先，我们需要使用反射来访问定义乘法操作符的`Operators`模块，如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This binding uses a partially qualified name to identify the type we’re looking
    for. (We had to use reflection here because `typeof<''T>` and `typedefof<''T>`
    don’t work on modules.) Now that we have a reference to the `Operators` module,
    we can obtain a reference to the multiplication operator method by its name, `op_Multiply`,
    with the `GetMethod` method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个绑定使用部分限定名称来标识我们正在寻找的类型。（我们不得不在这里使用反射，因为`typeof<'T>`和`typedefof<'T>`在模块上不起作用。）现在，我们已经有了对`Operators`模块的引用，可以通过方法名称`op_Multiply`使用`GetMethod`方法获取对乘法操作符方法的引用：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we inspect the returned `MethodInfo` to retrieve each of the operator’s
    parameters. To include these parameters in our expression, we need to create `Var`
    instances from the corresponding `PropertyInfo` instances. We can easily perform
    this transformation by mapping each parameter through the `Array.map` function.
    For convenience, we can also use an Array pattern to convert the resulting array
    into a tuple, as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查返回的`MethodInfo`以获取操作符的每个参数。为了将这些参数包含在我们的表达式中，我们需要从相应的`PropertyInfo`实例创建`Var`实例。我们可以通过使用`Array.map`函数轻松地将每个参数进行转换。为了方便起见，我们还可以使用数组模式将结果数组转换为元组，如下所示：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We now have enough information to construct the quoted expression:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经有足够的信息来构建引用表达式：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding bindings incrementally construct a quoted expression representing
    a curried function that multiplies two values. As you can see, the quoted expression
    contains a method call for the multiplication operator, an inner lambda expression
    that applies the `y` value, and an outer lambda expression that applies the `x`
    value. If you were to inspect the value of `outerLambda`, you should see the resulting
    expression represented like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的绑定逐步构建了一个引用表达式，表示一个柯里化的函数，该函数用于将两个值相乘。正如你所看到的，引用表达式包含了乘法操作符的方法调用，一个内部的lambda表达式应用了`y`值，还有一个外部的lambda表达式应用了`x`值。如果你检查`outerLambda`的值，你应该会看到如下表示的结果表达式：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After all this work, we finally have a quoted expression that’s equivalent
    to this weakly typed expression:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这么多工作，我们终于得到了一个等价于这个弱类型表达式的引用表达式：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For your convenience, I’m including the previous examples in their entirety
    here so you can see all the parts working together.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我在这里完整地包含了之前的示例，你可以看到所有部分如何协同工作。
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Splicing Quoted Expressions
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引用表达式拼接
- en: 'If you need to combine multiple quoted expressions, you could manually construct
    a new quoted expression by passing each one to the appropriate static method on
    the `Expr` class (typically `Call`), but there’s a much easier way: You can create
    a new literal quoted expression by splicing them together using the splicing operators.
    For example, suppose you have the following sequence and strongly typed quoted
    expressions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要合并多个引用表达式，你可以通过将每个引用表达式传递给 `Expr` 类上的适当静态方法（通常是 `Call`）手动构建一个新的引用表达式，但有一种更简单的方法：你可以通过使用拼接运算符将它们拼接在一起，从而创建一个新的字面量引用表达式。例如，假设你有以下序列和强类型引用表达式：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can combine `sum` and `count` into a third quoted expression that represents
    calculating the average from a sequence using the strongly typed splice operator
    (`%`) like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 `sum` 和 `count` 合并成一个新的引用表达式，表示通过强类型拼接运算符 (`%`) 计算序列的平均值，如下所示：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Weakly typed quoted expressions can be spliced, too. If `sum` and `count` had
    been defined as weakly typed quoted expressions (via the `<@@ ... @@>` syntax),
    you could splice them with the weakly typed splice operator (`%%`) like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 弱类型引用表达式也可以进行拼接。如果 `sum` 和 `count` 被定义为弱类型引用表达式（通过 `<@@ ... @@>` 语法），你可以使用弱类型拼接运算符
    (`%%`) 进行拼接，如下所示：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Decomposing Quoted Expressions
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用表达式的分解
- en: While code quotations can be useful for helping you understand the structure
    of code, most of their power comes from decomposition. F# includes three modules,
    also within the `Microsoft.FSharp.Quotations` namespace, that define a plethora
    of complete and partial active patterns that you can use todecompose a quoted
    expression to its constituent parts at varying degrees of granularity.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然代码引用有助于你理解代码的结构，但它们的主要优势在于分解。F# 包含三个模块，这些模块也位于 `Microsoft.FSharp.Quotations`
    命名空间中，定义了大量的完整和部分活跃模式，你可以使用它们将引用的表达式按不同粒度的程度分解为其组成部分。
- en: '****`Pattern` module****. The partial active patterns in the `Pattern` module
    match the elementary F# language features such as function calls, function applications,
    looping constructs, raw values, binding definitions, and object creation. They
    correspond nearly one-to-one with the functions defined on the `Expr` type, helping
    you identify which pattern to use for the most common expressions.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`Pattern` 模块****。`Pattern` 模块中的部分活跃模式匹配 F# 语言的基本特性，如函数调用、函数应用、循环结构、原始值、绑定定义和对象创建。它们几乎一对一地对应于
    `Expr` 类型上定义的函数，帮助你识别在最常见的表达式中使用哪个模式。'
- en: '****`DerivedPatterns` module****. The `DerivedPatterns` module includes partial
    active patterns that primarily match quoted expressions representing primitive
    literals, basic Boolean operators such as `&&` and `||`, and constructs decorated
    with `ReflectedDefinition`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`DerivedPatterns` 模块****。`DerivedPatterns` 模块包含部分活跃模式，主要用于匹配表示原始字面量的引号表达式、基本布尔运算符（如
    `&&` 和 `||`）以及使用 `ReflectedDefinition` 装饰的结构。'
- en: '****`ExprShape` module****. The `ExprShape` module defines a complete active
    pattern with three cases: `ShapeVar`, `ShapeLambda`, and `ShapeCombination`. It’s
    designed for use in recursive pattern matching so you can easily traverse a quoted
    expression, matching every expression along the way.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`ExprShape` 模块****。`ExprShape` 模块定义了一个完整的活跃模式，包含三个情况：`ShapeVar`、`ShapeLambda`
    和 `ShapeCombination`。它设计用于递归模式匹配，因此你可以轻松地遍历引用的表达式，在整个过程中匹配每一个表达式。'
- en: Parsing Quoted Expressions
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引用表达式解析
- en: Rather than going into detail about the specific active patterns defined in
    each module, I think it’s more helpful to see how they work together. We’ll start
    with a typical example, where a sampling of patterns from each module is used
    to build a string that represents the quoted F# syntax.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与其详细讲解每个模块中定义的具体活跃模式，我认为更有帮助的是看看它们如何协同工作。我们将从一个典型示例开始，使用每个模块中的一些模式来构建一个表示 F#
    引用语法的字符串。
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding example may look intimidating, but despite including a number
    of match cases, it’s really not particularly complicated when you break it down.
    The first thing to note is that the `showSyntax` function is recursive, which
    allows us to traverse the tree with any nested expressions we encounter. Each
    of the match cases belongs to one of the three quoted expression modules and matches
    a particular type of expression. I won’t go into detail about the bodies of each
    case since they don’t introduce any new concepts, but I encourage you to experiment
    with them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例可能看起来令人畏惧，但尽管包含了许多匹配案例，实际上当你把它拆开看时，它并不是特别复杂。首先要注意的是，`showSyntax`函数是递归的，这使得我们能够遍历树状结构中的任何嵌套表达式。每个匹配案例都属于三个引号表达式模块之一，并且匹配特定类型的表达式。我不会详细介绍每个案例的主体，因为它们没有引入新的概念，但我鼓励你尝试实验。
- en: The first two cases, `Int32` and `Value`, match individual literal values. The
    `Int32` pattern is a derived pattern that matches only integer values, whereas
    `Value` is a basic pattern that matches any literal value. As you can see from
    the definitions, both of these patterns extract the literal value. The `Value`
    pattern also extracts the corresponding data type, but since we’re not using it
    here we simply discard it with the Wildcard pattern.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个案例，`Int32`和`Value`，匹配单个字面值。`Int32`模式是一个派生模式，只匹配整数值，而`Value`是一个基础模式，匹配任何字面值。从定义中可以看出，这两个模式都提取了字面值。`Value`模式还会提取相应的数据类型，但由于我们在这里没有使用它，我们仅用通配符模式将其丢弃。
- en: Following the `Value` case are two `SpecificCall` cases and a generalized `Call`
    case. The `SpecificCall` cases are derived patterns that match calls to the addition
    and subtraction operators (as inline weakly typed quoted expressions), respectively.
    The `Call` case, on the other hand, is a basic pattern that matches any function
    call. The `SpecificCall` cases are much simpler than the `Call` case because we
    can make certain assumptions about the code given that we know more about what
    constitutes a match. The `Call` case needs to do more work to expand the expression.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着`Value`案例后面是两个`SpecificCall`案例和一个通用的`Call`案例。`SpecificCall`案例是派生的模式，分别匹配加法和减法运算符的调用（作为内联弱类型的引号表达式）。另一方面，`Call`案例是一个基础模式，匹配任何函数调用。`SpecificCall`案例比`Call`案例要简单得多，因为我们可以在了解匹配构成的情况下，对代码做出某些假设。而`Call`案例则需要做更多的工作来展开表达式。
- en: 'Finally, we reach the last three cases: `ShapeVar`, `ShapeLambda`, and `ShapeCombination`.
    The simplest of these, `ShapeVar`, matches any variable definition. (Note that
    the term *variable* is preferable to *binding* here because it represents a placeholder
    within the code.) The value captured by `ShapeVar` includes information such as
    the variable name, its data type, and mutability. `ShapeLambda` matches any lambda
    expression, capturing its parameter definition and body as a nested expression.
    The last case, `ShapeCombination`, matches any other expression and is included
    here for completeness.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们到了最后三个案例：`ShapeVar`、`ShapeLambda`和`ShapeCombination`。其中最简单的`ShapeVar`，匹配任何变量定义。（注意，这里使用*变量*一词比使用*绑定*更合适，因为它代表了代码中的一个占位符。）`ShapeVar`捕获的值包括变量名、数据类型和可变性等信息。`ShapeLambda`匹配任何lambda表达式，捕获其参数定义和作为嵌套表达式的主体。最后一个案例，`ShapeCombination`，匹配任何其他表达式，并且为了完整性也包括在内。
- en: 'To see the `showSyntax` function in action, you can pass in any quoted expression.
    Just remember that this implementation hardly covers every possible case, so with
    more complex expressions your results will probably be less than stellar. For
    starters, though, here are a few sample inputs and results:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`showSyntax`函数的实际效果，你可以传入任何引号表达式。只需记住，这种实现几乎无法覆盖所有可能的情况，因此对于更复杂的表达式，结果可能不会特别理想。不过，作为开始，这里有一些示例输入和结果：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Substituting Reflection
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代反射
- en: Just as you can use expression trees to enable reflection-like capabilities
    (as you saw at the beginning of this chapter), you can use quoted expressions
    to achieve a similar effect. To demonstrate, I’ll use an adapted version of a
    sample I found extremely helpful when I was first learning about quoted expressions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以使用表达式树来实现类似反射的功能（正如你在本章开头看到的那样），你也可以使用引号表达式来实现类似的效果。为了演示，我将使用一个经过改编的版本，这个示例在我第一次学习引号表达式时非常有帮助。
- en: This example, found in its original form at *[http://fssnip.net/eu/](http://fssnip.net/eu/)*,
    defines a module that makes extensive use of higher-order functions, partial application,
    and quoted expressions, letting you define ad hoc validation functions for your
    types. We’ll start with the full listing and break it down after you’ve had a
    chance to digest it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例，原始形式可以在 *[http://fssnip.net/eu/](http://fssnip.net/eu/)* 中找到，定义了一个广泛使用高阶函数、部分应用和引用表达式的模块，允许你为你的类型定义临时验证函数。我们将从完整的代码列表开始，在你有机会消化它之后再进行详细解析。
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `Validation` module’s heart is the private `add` function at ①. This function
    accepts five parameters that each participate in the validation. Of primary interest
    are the first parameter, `quote`; the third parameter, `validate`; and the final
    parameter, `xs`. These represent the quotation that identifies the property being
    validated, a validation function, and a list of test functions, respectively.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`Validation` 模块的核心是私有的 `add` 函数，位于 ① 处。此函数接受五个参数，每个参数都参与验证。最为关键的是第一个参数 `quote`，第三个参数
    `validate`，以及最后一个参数 `xs`。这三个参数分别代表标识正在验证属性的引用、验证函数和测试函数列表。'
- en: Inside `add`, we first attempt to match `quote` against the `PropertyGet` and
    `Value` active patterns to appropriately extract the value from the source object
    so it can be passed to the validation function later. Next, we define a function,
    `test`, that invokes the supplied `validate` function and returns an option indicating
    whether the extracted value is valid. Finally, the `test` function is wrapped
    inside the `Test` union case and prepended to `xs`, and the entire list is returned.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `add` 函数内部，我们首先尝试将 `quote` 与 `PropertyGet` 和 `Value` 活跃模式匹配，以适当地从源对象中提取值，以便稍后将其传递给验证函数。接着，我们定义了一个名为
    `test` 的函数，调用提供的 `validate` 函数，并返回一个选项值，指示提取的值是否有效。最后，`test` 函数被包装在 `Test` 联合类型中，并添加到
    `xs` 列表前面，最终返回整个列表。
- en: With the `add` function in place, we define a variety of functions that return
    partially applied versions of `add`, giving us an expressive validation syntax.
    In this example, we’ve defined `notNull` ②, `notEmpty` ③, and `between` ④. Each
    of these functions accepts a quoted expression that’s applied to `add` along with
    the next three parameters, resulting in new functions that accept only a list
    of `Test` union cases and return the same.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `add` 函数到位后，我们定义了多种函数，这些函数返回部分应用版的 `add`，从而使我们拥有了富有表现力的验证语法。在这个例子中，我们定义了 `notNull`
    ②、`notEmpty` ③ 和 `between` ④。每个函数接受一个被引用的表达式，并将其与接下来的三个参数一起应用于 `add`，从而生成新的函数，这些函数仅接受一个
    `Test` 联合类型的列表并返回相同的列表。
- en: The `createValidator` ⑤ function is the primary entry point into the `Validation`
    module. `createValidator` accepts a curried function whose arguments include a
    generic value and a list of `Test` union cases (of the same generic type), and
    ultimately returns another list of `Test` union cases. Notice how the second parameter
    and return value correspond to the functions returned by the `notNull`, `notEmpty`,
    and `between` functions. The implication here is that we can compose a validation
    function to pass into `createValidator` for arbitrary invocation later.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`createValidator` ⑤ 函数是进入 `Validation` 模块的主要入口。`createValidator` 接受一个柯里化函数，其参数包括一个通用值和一个
    `Test` 联合类型的列表（类型相同），最终返回另一个 `Test` 联合类型的列表。注意第二个参数和返回值与 `notNull`、`notEmpty`
    和 `between` 函数返回的函数是相对应的。这里的含义是，我们可以组合一个验证函数传递给 `createValidator`，以便稍后随意调用。'
- en: Now that the `Validation` module is fully defined, we can see how to use it.
    Let’s begin by opening the `Validation` module and defining a simple record type
    definition that we can validate against.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `Validation` 模块已完全定义，我们可以看到如何使用它。让我们从打开 `Validation` 模块并定义一个简单的记录类型定义开始，之后我们可以针对这个类型进行验证。
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There’s nothing particularly notable about this type; it merely includes three
    labels we can reference for validation. Now we can create a validation method
    by calling `createValidator` like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类型没有什么特别之处，它仅包含了我们可以引用用于验证的三个标签。现在，我们可以通过如下方式调用 `createValidator` 来创建一个验证方法：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we’ve chained together calls to `notNull`, `notEmpty`, and `between` using
    the composition operator within the function we pass to `createValidator`. The
    resulting function (returned from `createValidator`) is then bound to `validate`.
    Each of the chained calls includes a quoted expression that identifies one of
    `TestType`’s labels. You can even see here how F#’s type inference has played
    a role in determining the type of `x` in this expression.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过在传递给`createValidator`的函数中使用组合操作符，将对`notNull`、`notEmpty`和`between`的调用链式连接起来。最终返回的函数（由`createValidator`返回）然后绑定到`validate`。每个链式调用都包含一个引用表达式，用于标识`TestType`的标签。你甚至可以看到这里，F#的类型推断在确定表达式中`x`的类型时发挥了作用。
- en: 'All we need to do now is invoke the `validate` function by passing it instances
    of `TestType`. When all values satisfy the validation, `validate` simply returns
    an empty list like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是通过传递`TestType`的实例来调用`validate`函数。当所有值满足验证时，`validate`会像这样简单地返回一个空列表：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'On the other hand, when one or more values fail validation, the `validate`
    function returns a list including the name of the member that failed along with
    a failure message, as shown here where all three values fail:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当一个或多个值未通过验证时，`validate`函数会返回一个列表，包含失败的成员名称以及失败信息，如这里所示，所有三个值都失败了：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: Although quoted expressions serve much the same purpose as the expression trees
    introduced with LINQ, F#’s quoted expressions are more finely tuned for functional
    programming. As you’ve seen, you can construct quoted expressions as literal expressions,
    directly through reflection with the `ReflectedDefinition` attribute, or programmatically
    with reflection and the static methods on the `Expr` class. Quoted expressions
    derive their true power from their decomposition, however. By using the active
    patterns defined in the `Patterns`, `DerivedPatterns`, and `ExprShape` modules,
    you can decompose a quoted expression at varying degrees of granularity to accomplish
    a variety of tasks such as language translation or even flexible validation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管引用表达式的作用与LINQ引入的表达式树类似，但F#的引用表达式更适合函数式编程。正如你所看到的，你可以通过字面表达式、使用`ReflectedDefinition`特性通过反射直接构造引用表达式，或通过反射和`Expr`类中的静态方法编程构造引用表达式。然而，引用表达式的真正力量来自于它们的解构。通过使用在`Patterns`、`DerivedPatterns`和`ExprShape`模块中定义的活动模式，你可以在不同粒度上解构引用表达式，从而完成多种任务，如语言翻译甚至灵活的验证。
