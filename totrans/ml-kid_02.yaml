- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Playing Rock, Paper, Scissors Against Your Computer
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-I](Images/Alphabet-I.png)n Chapter 3, you used ML to create an image
    recognition system that can sort photos of animals. You learned that we create
    image recognition systems by collecting examples of pictures that we want the
    computer to learn how to recognize.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll train an ML model to recognize the different hand shapes
    that you make in the game Rock, Paper, Scissors (see [Figure 4-1](#figure4-1))
    and then program the computer to play against you.
  prefs: []
  type: TYPE_NORMAL
- en: '![f04001](Images/f04001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 4-1:](#figureanchor4-1) Playing Rock, Paper, Scissors'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this project, you’ll be taking photos of your hand, so you’ll need a webcam.
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ML project, name it `Rock Paper Scissors`, and set it to learn
    how to recognize images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 4-2](#figure4-2).![f04002](Images/f04002.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 4-2:](#figureanchor4-2) Train is the first phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add new label** to create a training bucket and enter the name `Rock`.
    Then create two more training buckets named `Paper` and `Scissors`, as shown in
    [Figure 4-3](#figure4-3).![f04003](Images/f04003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 4-3:](#figureanchor4-3) Click **Add new label** to create your training
    buckets.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **webcam** ****in the **Rock** bucket and make a fist in front of your
    webcam, as shown in [Figure 4-4](#figure4-4).![f04004](Images/f04004.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 4-4:](#figureanchor4-4) Take your first training photo using the webcam.****'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*****   When you’re ready, click **Add** (see [Figure 4-4](#figure4-4)). A
    photo of your fist should be added to the Rock bucket, as shown in [Figure 4-5](#figure4-5).![f04005](Images/f04005.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 4-5:](#figureanchor4-5) A thumbnail of your photo is shown in the training
    bucket.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat steps 4 and 5 using the webcam button for the Paper and Scissors training
    buckets. Keep going until you have 10 photos of a fist in the Rock bucket, 10
    photos of a flat hand in the Paper bucket, and 10 photos of two fingers in the
    Scissors bucket, as shown in [Figure 4-6](#figure4-6).![f04006](Images/f04006.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 4-6:](#figureanchor4-6) Training images for Rock, Paper, Scissors *   Click
    **Back to project** in the top-left corner of the screen.*   Click **Learn & Test**,
    as shown in [Figure 4-7](#figure4-7).![f04007](Images/f04007.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Figure 4-7:](#figureanchor4-7) Learn & Test is the second phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Train new machine learning model**, as shown in [Figure 4-8](#figure4-8).![f04008](Images/f04008.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 4-8:](#figureanchor4-8) Click **Train new machine learning model**
    to start training a model.****'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '****The example photos you’ve taken will be used to train an ML model. The
    computer will learn what the photos in each bucket have in common to be able to
    recognize different hand shapes. This process can take a few minutes, but you
    can move on to the next section to start getting your game ready while you wait.'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll make a script in Scratch that uses your ML model to play Rock, Paper,
    Scissors against you. The script will use your webcam to take a picture of your
    hand, and your model will recognize the shape that your hand is making.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Make**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Scratch 3**, and then click **Open in Scratch 3** to open a new window
    with Scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see new blocks representing your ML model in the Toolbox, as shown
    in [Figure 4-9](#figure4-9).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the top of the Scratch window, click **Project templates** as shown in [Figure
    4-9](#figure4-9).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This lets you access a variety of sample and starter projects, which should
    save you time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f04009](Images/f04009.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 4-9:](#figureanchor4-9) Opening Project templates from the top menu'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Rock Paper Scissors** in the list of project templates. (You can enter
    the name in the search field or click **Images projects** to find it more quickly.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This template gives you most of a working Rock, Paper, Scissors game in Scratch.
    The following steps will show you how to add ML to the Scratch project, but before
    you start, try reading the code to understand how it works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **you** sprite and then find the `when Green Flag clicked` and `when
    I receive new-move` scripts, as shown in [Figure 4-10](#figure4-10).![f04010](Images/f04010.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 4-10:](#figureanchor4-10) Find the scripts to modify in the **you**
    sprite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag the blocks representing your **Rock, Paper, Scissors** ML training buckets
    into the `when Green Flag clicked` script, as shown in [Figure 4-11](#figure4-11).![f04011](Images/f04011.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 4-11:](#figureanchor4-11) Update the `when Green Flag clicked` script
    with the blocks for your project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag a `recognize image (label)` block into the `when I receive new-move` script,
    and then drag the `costume image` block into that block, as shown in [Figure 4-12](#figure4-12).![f04012](Images/f04012.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 4-12:](#figureanchor4-12) Update the `when I receive new-move` script
    with the blocks for your project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s time to try out your project!
  prefs: []
  type: TYPE_NORMAL
- en: Click the Green Flag icon to start playing Rock, Paper, Scissors against the
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Hold your hand up to your webcam in the shape of a rock, paper, or scissors
    and press P on the keyboard to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: The computer will make a random choice from rock, paper, and scissors, and will
    display a cartoon to represent its move. It will use your ML model to recognize
    your move based on your hand shape, and then show a message saying who won (see
    [Figure 4-13](#figure4-13)).
  prefs: []
  type: TYPE_NORMAL
- en: '![f04013](Images/f04013.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 4-13:](#figureanchor4-13) Playing Rock, Paper, Scissors'
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve trained an ML model to recognize pictures of three different hand shapes!
    Try experimenting with it to see what makes it work well and what makes it make
    mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the ML model isn’t starting from an understanding of the Rock,
    Paper, Scissors game or the meaning of your different hand shapes. It can only
    learn from the patterns in the example photos that you’ve taken.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you took all of the rock training example photos with your hand very,
    very close to the webcam so that your hand looks huge, and that you took all of
    the scissors training example photos with your hand very, very far away from the
    webcam so that your hand looks tiny. A computer could assume that this size pattern
    was significant and learn that large hands mean “rock” and small hands mean “scissors.”
    That means that it could recognize a photo of any large hand making any hand shape
    as “rock.”
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine you took all the rock training example photos with your hand coming
    in from the left, and all of the paper training example photos with your hand
    coming in from the right, as shown in [Figure 4-14](#figure4-14). A computer could
    assume this direction pattern was significant, and learn that a hand facing to
    the right means “rock,” and a hand facing to the left means “paper.” That means
    it could recognize a photo of any hand shape facing to the right as “rock.”
  prefs: []
  type: TYPE_NORMAL
- en: '![f04014](Images/f04014.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 4-14:](#figureanchor4-14) Computers can learn from unexpected patterns
    in the training data.'
  prefs: []
  type: TYPE_NORMAL
- en: We only use the labels on the training buckets to make it easier for us to organize
    our projects. The computer doesn’t take the labels into account when it looks
    for patterns in the training examples. If you hid the labels and asked a friend
    to guess what the photos in each set in [Figure 4-14](#figure4-14) have in common,
    they might say, “Those hands are all pointing to the right, and those hands are
    all pointing to the left.” ML models work in a similar way, so they might learn
    to recognize misleading patterns.
  prefs: []
  type: TYPE_NORMAL
- en: The background of the photo can have a similar impact. I helped a student once
    who accidentally discovered this when creating this project. His face was included
    in all of the rock and paper training photos, but both his face and a classmate
    were included in all of the scissors training photos.
  prefs: []
  type: TYPE_NORMAL
- en: When he tested his project in Scratch, it seemed to do a good job of recognizing
    his hand shapes, until I came to stand next to him and watch. When I stood next
    to him, no matter the hand shape he made, his project almost always thought that
    he was showing scissors.
  prefs: []
  type: TYPE_NORMAL
- en: Although he hadn’t realized it at first, he had trained his ML model to recognize
    the difference between photos with one or two people in them. It had learned to
    recognize photos with two people as “scissors.”
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want any of these misleading patterns to affect your ML model,
    it helps to include *variety* **in your training examples. Your project will work
    best when your training photos include a lot of very different photos of the same
    subject. When taking rock training photos, make a rock shape from every different
    angle and direction that you can. Take some photos that are close up and large,
    and some that are farther away and small. If you can take photos with different
    backgrounds, even better. If the only thing that your rock training examples have
    in common is a fist hand shape, that will be the pattern the computer learns to
    recognize.**
  prefs: []
  type: TYPE_NORMAL
- en: '**We’ll learn more about how to confuse ML models in Chapter 14, but for now
    remember: *if the pictures in each training bucket have only one thing in common
    with each other, then that’s the only pattern that the ML model will learn to
    recognize*.'
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you’ve trained another ML model to recognize pictures. In
    Chapter 3, you used this to do a job: sorting photos. This time you used it to
    play a game of Rock, Paper, Scissors against your computer by having it recognize
    your hand shape. Both of these projects demonstrate *image recognition* *and are
    good examples of how it is used every day.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*You’ve learned that the basic approach for training computers in image recognition
    is to collect example photos, and you’ve learned the important lesson of avoiding
    misleading patterns in your training data to improve your results.'
  prefs: []
  type: TYPE_NORMAL
- en: Computers can learn to recognize more than just what’s in a picture, however,
    so in the next chapter you’ll see some other patterns that ML models can learn.*******
  prefs: []
  type: TYPE_NORMAL
