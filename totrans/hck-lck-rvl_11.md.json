["```\n>>> **import time**\n\n>>> **time.sleep(5)**\n```", "```\ndef get_tax(price, tax_rate):\n\n    return price * tax_rate\n\ndef get_net_price(price, tax_rate):\n\n    return price + get_tax(price, tax_rate)\n```", "```\nimport helpers\n\ntotal_price = helpers.get_net_price(50, 0.06)\n\nprint(f\"A book that costs $50, and has 6% sales tax, costs ${total_price}\")\n```", "```\nmicah@trapdoor module % **python3 price.py**\n\nA book that costs $50, and has 6% sales tax, costs $53.0\n```", "```\ndef main():\n\n    pass\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nimport os\n\ndef main():\n\n    blueleaks_path =\"`/Volumes/datasets/BlueLeaks-extracted`\"\n\n    for filename in os.listdir(blueleaks_path):\n\n        print(filename)\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 list-files1.py**\n\n211sfbay\n\nSecuritypartnership\n\nacprlea\n\nacticaz\n\nakorca\n\n`--snip--`\n```", "```\nimport os\n\ndef main():\n\n    blueleaks_path = \"`/Volumes/datasets/BlueLeaks-extracted`\"\n\n  ❶ for bl_folder in os.listdir(blueleaks_path):\n\nbl_folder_path = os.path.join(blueleaks_path, bl_folder) ❷ if not os.path.isdir(bl_folder_path):\n\n            continue\n\n      ❸ files_count = 0\n\n        folders_count = 0\n\n      ❹ for filename in os.listdir(bl_folder_path):\n\n            filename_path = os.path.join(bl_folder_path, filename)\n\n          ❺ if os.path.isfile(filename_path):\n\n                files_count += 1\n\n            if os.path.isdir(filename_path):\n\n                folders_count += 1\n\n      ❻ print(f\"{bl_folder} has {files_count} files, {folders_count} folders\")\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 list-files2.py**\n\nbostonbric has 506 files, 10 folders\n\nterrorismtip has 207 files, 0 folders\n\nociac has 216 files, 1 folders\n\nusao has 0 files, 84 folders\n\nalertmidsouth has 512 files, 10 folders\n\nchicagoheat has 499 files, 10 folders\n\n`--snip--`\n```", "```\n(dirname, subdirnames, filenames)\n```", "```\nfor dirname, subdirnames, filenames in os.walk(path):\n\n    print(f\"The folder {dirname} has subfolders: {subdirnames} and files: {filenames}\")\n```", "```\nexample\n\n├── downloads\n\n│   ├── screenshot.png\n\n│   └── paper.pdf\n\n└── documents\n\n    ├── work\n\n    │   └── finances.xlsx\n\n    └── personal\n```", "```\n>>> **for dirname, subdirnames, filenames in os.walk(\"./example\"):**\n\n...     **print(f\"The folder {dirname} has subfolders: {subdirnames} and files: {filenames}\")**\n\n...\n```", "```\nThe folder ./example has subfolders: ['documents', 'downloads'] and files: []\n\nThe folder ./example/documents has subfolders: ['personal', 'work'] and files: []\n\nThe folder ./example/documents/personal has subfolders: [] and files: []\n\nThe folder ./example/documents/work has subfolders: [] and files: ['finances.xlsx']\n\nThe folder ./example/downloads has subfolders: [] and files: ['paper.pdf', 'screenshot.png']\n```", "```\nimport os\n\ndef main():\n\n    blueleaks_path =\"`/Volumes/datasets/BlueLeaks-extracted`\"\n\n    for dirname, subdirnames, filenames in os.walk(blueleaks_path):\n\n        for filename in filenames:\n\n            absolute_filename = os.path.join(dirname, filename)\n\n            size_in_bytes = os.path.getsize(absolute_filename)\n\n            size_in_mb = int(size_in_bytes / 1024 / 1024)\n\n            if size_in_mb >= 100:\n\n                print(f\"{absolute_filename} is {size_in_mb}MB\")\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 find-big-files.py**\n\n/Volumes/datasets/BlueLeaks-extracted/usao/usaoflntraining/files/VVSF00000/001.mp4 is 644MB /Volumes/datasets/BlueLeaks-extracted/chicagoheat/html/ZA-CHICAGO HEaT_LR-20160830-034_Final\n\nFiles.pdf is 102MB\n\n/Volumes/datasets/BlueLeaks-extracted/nmhidta/files/RFIF300000/722.pdf is 148MB\n\n/Volumes/datasets/BlueLeaks-extracted/nmhidta/files/RFIF200000/543.pdf is 161MB\n\n/Volumes/datasets/BlueLeaks-extracted/nmhidta/files/RFIF100000/723.pdf is 206MB\n\n/Volumes/datasets/BlueLeaks-extracted/fbicahouston/files/VVSF00000/002.mp4 is 145MB\n\n/Volumes/datasets/BlueLeaks-extracted/fbicahouston/files/PSAVF100000/009.mp4 is 146MB\n\n/Volumes/datasets/BlueLeaks-extracted/fbicahouston/files/PSAVF100000/026.mp4 is 105MB\n\n`--snip--`\n```", "```\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nModuleNotFoundError: No module named 'click'\n\n>>>\n```", "```\nmicah@trapdoor ~ % **python3 -m pip install click**\n\nCollecting click\n\n  Using cached click-8.1.3-py3-none-any.whl (96 kB)\n\nInstalling collected packages: click\n\nSuccessfully installed click-8.1.3\n```", "```\n>>> **import click**\n\n>>>\n```", "```\nmicah@trapdoor ~ % **python3 -m pip uninstall click**\n\nFound existing installation: click 8.1.3\n\nUninstalling click-8.1.3:\n\n  Would remove:\n\n    /usr/local/lib/python3.10/site-packages/click-8.1.3.dist-info/*\n\n    /usr/local/lib/python3.10/site-packages/click/*\n\nProceed (Y/n)? **y**\n\n  Successfully uninstalled click-8.1.3\n```", "```\n**python3 -m pip install** **`package_name1 package_name2 package_name3`**\n```", "```\nclick\n\nhttpx\n\nsqlalchemy\n```", "```\nmicah@trapdoor chapter-8 % **python3 -m pip install -r requirements.txt**\n\nCollecting click\n\n  Using cached click-8.1.3-py3-none-any.whl (96 kB)\n\nCollecting httpx\n\n  Using cached httpx-0.23.0-py3-none-any.whl (84 kB)\n\n`--snip--`\n\nSuccessfully installed anyio-3.6.1 certifi-2022.9.24 click-8.1.3 h11-0.12.0 httpcore-0.15.0\n\nhttpx-0.23.0 idna-3.4 rfc3986-1.5.0 sniffio-1.3.0 sqlalchemy-1.4.41\n```", "```\nimport click\n\n@click.command()\n\n@click.argument(\"name\")\n\ndef main(name):\n\n    \"\"\"Simple program that greets NAME\"\"\"\n\n    print(f\"Hello {name}!\")\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-3.py**\n\nUsage: click-example.py [OPTIONS] NAME\n\nTry 'click-example.py --help' for help.\n\nError: Missing argument 'NAME'.\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-3.py --help**\n\nUsage: click-example.py [OPTIONS] NAME\n\n  Simple program that greets NAME\n\nOptions:\n\n  --help  Show this message and exit.\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-3.py Eve**\n\nHello Eve!\n```", "```\nimport os\n\n**import click**\n\n**@click.command()**\n\n**@click.argument(\"path\")**\n\n**@click.argument(\"min_file_size\", type=click.INT)**\n\ndef main(**path, min_file_size**):\n\n    **\"\"\"Find files in PATH that are at least MIN_FILE_SIZE MB big\"\"\"**\n\n    for dirname, subdirnames, filenames in os.walk(**path**):\n\n        for filename in filenames:\n\n            absolute_filename = os.path.join(dirname, filename)\n\n            size_in_bytes = os.path.getsize(absolute_filename)\n\n            size_in_mb = int(size_in_bytes / 1024 / 1024)\n\n            if size_in_mb >= **min_file_size**:\n\n                  print(f\"{absolute_filename} is {size_in_mb}MB\")\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-4.py /Applications 500**\n\n/Applications/Dangerzone.app/Contents/Resources/share/container.tar.gz is 668MB\n\n/Applications/Docker.app/Contents/Resources/linuxkit/services.iso is 602MB\n```", "```\ncapitals = {\n\n    \"United States\": \"Washington, DC\",\n\n    \"India\": \"New Delhi\",\n\n    \"South Africa\": \"Cape Town\",\n\n    \"Brazil\": \"Brasília\",\n\n    \"Germany\": \"Berlin\",\n\n    \"Russia\": \"Moscow\",\n\n    \"China\": \"Beijing\"\t\n\n}\n```", "```\n>>> **test_dict = {\"name\": \"Alice\", \"name\": \"Bob\", \"hobby\": \"cryptography\"}**\n\n>>> **print(test_dict)**\n\n{'name': 'Bob', 'hobby': 'cryptography'}\n```", "```\n>>> **test_dict = {\"names\": [\"Alice\", \"Bob\"], \"hobby\": \"cryptography\"}**\n\n>>> **print(test_dict)**\n\n{'names': ['Alice', 'Bob'], 'hobby': 'cryptography'}\n```", "```\n>>> **capitals[\"United States\"]**\n\n'Washington, DC'\n\n>>> **capitals[\"China\"]**\n\n'Beijing'\n\n>>> **capitals[\"Kenya\"]**\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nKeyError: 'Kenya'\n```", "```\n>>> **capitals[\"Kenya\"] = \"Nairobi\"**\n\n>>> **capitals[\"United States\"] = \"Mar-a-Lago\"**\n\n>>> **print(capitals)**\n\n{'United States': 'Mar-a-Lago', 'India': 'New Delhi', 'South Africa': 'Cape Town', 'Brazil': 'Brasília', 'Germany': 'Berlin', 'Russia': 'Moscow', 'China': 'Beijing', 'Kenya': 'Nairobi'}\n```", "```\n>>> **import json**\n\n>>> **with open(\"2022-02-24-general.json\") as f:**\n\n...     **data** **= json.load(f)**\n\n...\n```", "```\n{\n\n    \"messages\": [❶\n\n        {\n\n`--snip--`\n\n        },\n\n        {\n\n            \"_id\": \"FmFZbde9ACs3gtw27\",\n\n            \"rid\": \"GENERAL\",\n\n            \"msg\": \"Некоторые американские сенаторы предлагают помимо соцсетей блокировать в\n\nРоссииещё и PornHub!\",\n\n            \"ts\": \"2022-02-24T22:02:38.276Z\",\n\n            \"u\": {\"_id\": \"NKrXj9edAPWNrYv5r\", \"username\": \"thomas\", \"name\": \"thomas\"},\n\n            \"urls\": [],\n\n            \"mentions\": [],\n\n            \"channels\": [],\n\n            \"md\": [\n\n                {\n\n                    \"type\": \"PARAGRAPH\",\n\n                    \"value\": [\n\n                        {\n\n                            \"type\": \"PLAIN_TEXT\",\n\n                            \"value\": \"Некоторые американские сенаторы предлагают помимо\n\nсоцсетейблокировать в России ещё и PornHub!\",\n\n                        }\n\n                  ],\n\n                }\n\n            ],\n\n            \"_updatedAt\": \"2022-02-24T22:02:38.293Z\",\n\n        },\n\n        {\n\n`--snip--`\n\n        },\n\n    ],\n\n    \"success\": True ❷\n\n}\n```", "```\n>>> **len(data[\"messages\"])**\n\n604\n```", "```\n>>> **for key in data[\"messages\"][8]:**\n\n...     **print(f\"{key}: {type(data['messages'][8][key])}\")**\n\n...\n```", "```\n_id: <class 'str'>\n\nrid: <class 'str'>\n\nmsg: <class 'str'>\n\nts: <class 'str'>\n\nu: <class 'dict'>\n\nurls: <class 'list'>\n\nmentions: <class 'list'>\n\nchannels: <class 'list'>\n\nmd: <class 'list'>\n\n_updatedAt: <class 'str'>\n```", "```\n>>> **print(data[\"messages\"][8][\"md\"])**\n```", "```\n[{'type': 'PARAGRAPH', 'value': [{'type': 'PLAIN_TEXT', 'value': 'Некоторые американские\n\nсенаторы предлагают помимо соцсетей блокировать в России ещё и PornHub!'}]}]\n```", "```\n>>> **print(data[\"messages\"][8][\"md\"][0][\"value\"][0][\"value\"])**\n```", "```\nНекоторые американские сенаторы предлагают помимо соцсетей блокировать в России ещё и PornHub!\n```", "```\n>>> **for message in data[\"messages\"]:**\n\n...     **print(f\"{message['ts']} {message['u']['username']}: {message['msg']}\")**\n\n...\n```", "```\n`--snip--`\n\n2022-02-24T22:02:49.448Z thomas: последние радости у нас заберут\n\n2022-02-24T22:02:44.463Z thomas: ну все, приплыли)\n\n2022-02-24T22:02:38.276Z thomas: Некоторые американские сенаторы предлагают помимо соцсетей\n\nблокировать в России ещё и PornHub!\n\n2022-02-24T22:00:00.347Z thomas:\n\n2022-02-24T21:58:56.152Z rags: угу :(\n\n`--snip--`\n```", "```\n>>> **for message in data[\"messages\"]:**\n\n...     **if message[\"u\"][\"username\"] ==** **\"rags\":**\n\n...         **print(f\"{message['ts']} {message['u']['username']}: {message['msg']}\")**\n\n...\n```", "```\n2022-02-24T22:08:49.684Z rags: давай бро спокойной ночи\n\n2022-02-24T22:03:50.131Z rags: сча посмотрю спасиб =)\n\n2022-02-24T21:58:56.152Z rags: угу :(\n\n`--snip--`\n```", "```\n>>> **user_posts = {}**\n```", "```\n>>> **for message in data[\"messages\"]:**\n\n...     **username = message[\"u\"][\"username\"]**\n\n...     **if username not in user_posts:**\n\n...         **user_posts[username] = 1**\n\n...     **else:**\n\n...         **user_posts[username] += 1**\n\n...\n\n>>>\n```", "```\n>>> **for username in user_posts:**\n\n...     **print(f\"{username} posted {user_posts[username]} times\")**\n\n...\n```", "```\nweldon posted 64 times\n\npatrick posted 62 times\n\nrags posted 38 times\n\nthomas posted 58 times\n\nryan posted 2 times\n\nkermit posted 151 times\n\nbiggie posted 39 times\n\nstanton posted 12 times\n\nangelo posted 102 times\n\nGarfield posted 61 times\n\njaime posted 2 times\n\ngrem posted 5 times\n\njefferson posted 1 times\n\nelijah posted 6 times\n\nchad posted 1 times\n```", "```\ndef main():\n\n    pass\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\n**import click**\n\n**@click.command()**\n\n**@click.argument(\"blueleaks_path\")**\n\ndef main(**blueleaks_path**):\n\n    **\"\"\"Map out the CSVs in BlueLeaks\"\"\"**\n\n    **print(f\"blueleaks_path is: {blueleaks_path}\")**\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py --help**\n\nUsage: exercise-8-4.py [OPTIONS] BLUELEAKS_PATH\n\n  Map out the CSVs in BlueLeaks\n\nOptions:\n\n  --help  Show this message and exit.\n\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py test-path**\n\nblueleaks_path is: test-path\n```", "```\nimport click\n\n**import os**\n\n@click.command()\n\n@click.argument(\"blueleaks_path\")\n\ndef main(blueleaks_path):\n\n    \"\"\"Map out the CSVs in BlueLeaks\"\"\"\n\n    **for folder in os.listdir(blueleaks_path):**\n\n        **blueleaks_folder_path = os.path.join(blueleaks_path, folder)**\n\n        **if os.path.isdir(blueleaks_folder_path):**\n\n            **print(f\"folder: {folder}, path: {blueleaks_folder_path}\")**\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py** **`/Volumes/datasets/BlueLeaks-extracted`**\n\nfolder: bostonbric, path: /Volumes/datasets/BlueLeaks-extracted/bostonbric\n\nfolder: terrorismtip, path: /Volumes/datasets/BlueLeaks-extracted/terrorismtip\n\nfolder: ociac, path: /Volumes/datasets/BlueLeaks-extracted/ociac\n\n`--snip--`\n```", "```\nimport click\n\nimport os\n\n@click.command()\n\n@click.argument(\"blueleaks_path\")\n\ndef main(blueleaks_path):\n\n    \"\"\"Map out the CSVs in BlueLeaks\"\"\"\n\n    **csv_to_folders = {}**\n\n    for folder in os.listdir(blueleaks_path):\n\n        blueleaks_folder_path = os.path.join(blueleaks_path, folder)\n\n        if os.path.isdir(blueleaks_folder_path):\n\n            **for filename in os.listdir(blueleaks_folder_path):**\n\n                **if filename.lower().endswith(\".csv\"):**\n\n                    **if filename not in csv_to_folders:**\n\n                        **csv_to_folders[filename] = []**\n\n                    **csv_to_folders[filename].append(folder)**\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py** **`/Volumes/datasets/BlueLeaks-extracted`**\n```", "```\nimport click\n\nimport os\n\n@click.command()\n\n@click.argument(\"blueleaks_path\")\n\ndef main(blueleaks_path):\n\n    \"\"\"Map out the CSVs in BlueLeaks\"\"\"\n\n    csv_to_folders = {}\n\n    for folder in os.listdir(blueleaks_path):\n\n        blueleaks_folder_path = os.path.join(blueleaks_path, folder) if os.path.isdir(blueleaks_folder_path):\n\n            for filename in os.listdir(blueleaks_folder_path):\n\n                if filename.lower().endswith(\".csv\"):\n\n                    if filename not in csv_to_folders:\n\n                        csv_to_folders[filename] = []\n\n                    csv_to_folders[filename].append(folder)\n\n    **for filename in csv_to_folders:**\n\n        **print(f\"{len(csv_to_folders[filename])} folders | {filename}\")**\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py** **`/Volumes/datasets/BlueLeaks-extracted`**\n\n161 folders | CatalogRelated.csv\n\n161 folders | Blog.csv\n\n161 folders | EmailBuilderOptions.csv\n\n`--snip--`\n\n1 folders | HIDTAAgentCategory.csv\n\n1 folders | Lost.csv\n\n1 folders | AgencyContacts.csv\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py** **`/Volumes/datasets/BlueLeaks-extracted`** **| sort**\n\n**-n**\n\n1 folders | 1Cadets.csv\n\n1 folders | 1Mentors.csv\n\n1 folders | 1Unit.csv\n\n`--snip--`\n\n161 folders | VideoDownload.csv\n\n161 folders | VideoHistory.csv\n\n161 folders | VideoOptions.csv\n```", "```\nwith open(\"`some_file.txt`\", \"r\") as f:\n\n    text = f.read()\n```", "```\nwith open(\"output.txt\", **\"w\"**) as f:\n\n    f.write(\"hello world\")\n```", "```\nHello World\n\nHola Mundo\n```", "```\n\"Hello World\\nHola Mundo\\n\"\n```", "```\n>>> **with open(\"output.txt\", \"w\") as f:**\n\n...     **f.write(\"Hello World\\n\")**\n\n...     **f.write(\"Hola Mundo\\n\")**\n\n...\n\n12\n\n11\n```", "```\nmicah@trapdoor ~ % **cat output.txt**\n\nHello World\n\nHola Mundo\n```", "```\n>>> **with open(\"output.txt\", \"r\") as f:**\n\n...     **text = f.read()**\n\n...\n```", "```\n>>> **with open(\"/tmp/output.txt\", \"r\") as f:**\n\n...     **for line in f.readlines():**\n\n...         **print(line)**\n\n...\n\nHello World\n\nHola Mundo\n```", "```\n>>> **with open(\"/tmp/output.txt\", \"r\") as f:**\n\n...     **for line in f.readlines():**\n\n...         **line = line.strip()**\n\n...         **print(line)**\n\n...\n\nHello World\n\nHola Mundo\n```", "```\n**import click**\n\ndef alternating_caps(text):\n\n    \"\"\"Returns an aLtErNaTiNg cApS version of text\"\"\"\n\n    alternating_caps_text = \"\"\n\n    should_be_capital = True\n\n    for character in text:\n\n        if should_be_capital:\n\n            alternating_caps_text += character.upper()\n\n            should_be_capital = False\n\n        else:\n\n            alternating_caps_text += character.lower()\n\n            should_be_capital = True\n\n    return alternating_caps_text\n\n**@click.command()**\n\n**@click.argument(\"input_filename\")**\n\n**@click.argument(\"output_filename\")**\n\n**def main(input_filename, output_filename):**\n\n    **\"\"\"Converts a text file to an aLtErNaTiNg cApS version\"\"\"**\n\n    **with open(input_filename, \"r\") as f:**\n\n        **text = f.read()**\n\n    **with open(output_filename, \"w\") as f:**\n\n        **f.write(alternating_caps(text))**\n\nif __name__ == \"__main__\":\n\n      main()\n```", "```\nmicah@trapdoor chapter-8 % **cat shakespeare.txt**\n\nTo be, or not to be, that is the question:\n\nWhether 'tis nobler in the mind to suffer\n\nThe slings and arrows of outrageous fortune,\n\nOr to take Arms against a Sea of troubles,\n\nAnd by opposing end them: to die, to sleep\n\nNo more; and by a sleep, to say we end\n\n`--snip--`\n```", "```\nmicah@trapdoor chapter-8 % **python3 exercise-8-5.py shakespeare.txt shakespeare-mocking.txt**\n\nmicah@trapdoor chapter-8 % **cat shakespeare-mocking.txt**\n\nTo bE, oR NoT To bE, tHaT Is tHe qUeStIoN:\n\nwHeThEr 'TiS NoBlEr iN ThE MiNd tO SuFfEr\n\ntHe sLiNgS AnD ArRoWs oF OuTrAgEoUs fOrTuNe,\n\nOr tO TaKe aRmS AgAiNsT A SeA Of tRoUbLeS,\n\naNd bY OpPoSiNg eNd tHeM: tO DiE, tO SlEeP\n\nNo mOrE; aNd bY A SlEeP, tO SaY We eNd\n\n`--snip--`\n```"]