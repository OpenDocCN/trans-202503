["```\nifndef FOO\nFOO=New Value\nendif\n```", "```\nFOO ?= New Value\n```", "```\nFOO ?= New Value\n```", "```\nFOO=Old Value\nFOO ?= New Value\n```", "```\nFOO=\nFOO ?= New Value\n```", "```\nifeq ($(origin FOO),undefined)\nFOO = New Value\nendif\n```", "```\nifndef FOO\nFOO=New Value\nendif\n```", "```\nifeq ($(FOO),)\nFOO=New Value\nendif\n```", "```\nNOW = $(shell date)\n```", "```\nFILE_COUNT = $(shell ls | wc -l )\n```", "```\nFILES = $(shell ls)\n```", "```\nCWD = $(shell pwd)\n```", "```\n   FOO = foo\n   BAR = bar\n   FOOBAR = $(FOO) $(BAR)\n\n   all: $(FOOBAR)\n➊ $(FOOBAR):\n   →  @echo $@ $(FOOBAR)\n\n   FOO = fooey\n   BAR = barney\n```", "```\n$ **make**\nfoo fooey barney\nbar fooey barney\n```", "```\n$ **make**\nfoo foo bar\nbar foo bar\n```", "```\nFOO=foo\nBAR=bar\nBAZ=baz\nFOOBAR := $(FOO) $(BAR)\nFOOBAR += $(BAZ)\nBAZ=bazzy\n```", "```\nCWD = $(shell pwd)\nSRC_DIR=$(CWD)/src/\nOBJ_DIR=$(CWD)/obj/\nOBJS = $(OBJ_DIR)foo.o $(OBJ_DIR)bar.o $(OBJ_DIR)baz.o\n\n$(OBJ_DIR)%.o: $(SRC_DIR)%.c ; @echo Make $@ from $<\n\nall: $(OBJS)\n→  @echo $? $(OBJS)\n```", "```\nCWD := $(shell pwd)\n```", "```\nCWD = **$(warning Call to shell)**$(shell pwd)\n```", "```\n$ **make**\nmakefile:8: Call to shell\nmakefile:8: Call to shell\nmakefile:10: Call to shell\nmakefile:10: Call to shell\nmakefile:10: Call to shell\nMake /somedir/obj/foo.o from /somedir/src/foo.c\nMake /somedir/obj/bar.o from /somedir/src/bar.c\nMake /somedir/obj/baz.o from /somedir/src/baz.c\nmakefile:11: Call to shell\nmakefile:11: Call to shell\nmakefile:11: Call to shell\n/somedir/obj/foo.o /somedir/obj/bar.o /somedir/obj/baz.o /somedir/obj/foo.o\n/somedir/obj/bar.o /somedir/obj/baz.o\n```", "```\n$ **make**\nmakefile:1: Call to shell\nMake /somedir/obj/foo.o from /somedir/src/foo.c\nMake /somedir/obj/bar.o from /somedir/src/bar.c\nMake /somedir/obj/baz.o from /somedir/src/baz.c\n/somedir/obj/foo.o /somedir/obj/bar.o /somedir/obj/baz.o /somedir/obj/foo.o\n/somedir/obj/bar.o /somedir/obj/baz.o\n```", "```\ngrep -n \\$\\(shell makefile | grep -v :=\n```", "```\nset = $(eval $1 := $2)\n\n$(call set,FOO,BAR)\n$(call set,A,B)\n```", "```\ninclude gmsl\n\nc-value := 0\ncounter = $(c-value)$(eval c-value := $(call plus,$(c-value),1))\n```", "```\n$(info Starts at $(counter))\n$(info Then it's $(counter))\n$(info And then it's $(counter))\n```", "```\n$ **make**\nStarts at 0\nThen it's 1\nAnd then it's 2\n```", "```\nFOO := $(BAR)\nBAR := bar\n```", "```\nBAR := bar\nFOO := $(BAR)\n```", "```\nFOO = $(BAR)\nBAR = bar\n```", "```\nC := 1234567890 ABCDEFGHIJKLMNOPQRSTUVWXYZ\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\n\nFOO = $(subst 9,NINE,$C)$(subst 8,EIGHT,$C)$(subst 7,SEVEN,$C) \\\n$(subst 6,SIX,$C)$(subst 5,FIVE,$C)$(subst 4,FOUR,$C)          \\\n$(subst 3,THREE,$C)$(subst 2,TWO,$C)$(subst 1,ONE,$C)\n_DUMMY := $(FOO)\n--*snip*--\n\n.PHONY: all\nall:\n```", "```\nFOO := $(subst 9,NINE,$C)$(subst 8,EIGHT,$C)$(subst 7,SEVEN,$C) \\\n$(subst 6,SIX,$C)$(subst 5,FIVE,$C)$(subst 4,FOUR,$C)           \\\n$(subst 3,THREE,$C)$(subst 2,TWO,$C)$(subst 1,ONE,$C)\n```", "```\ncache = $(if $(cached-$1),,$(eval cached-$1 := 1)$(eval cache-$1 := $($1)))$(cache-$1)\n```", "```\nC := 1234567890 ABCDEFGHIJKLMNOPQRSTUVWXYZ\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\nC += $C\n\nFOO = $(subst 9,NINE,$C)$(subst 8,EIGHT,$C)$(subst 7,SEVEN,$C) \\\n$(subst 6,SIX,$C)$(subst 5,FIVE,$C)$(subst 4,FOUR,$C)          \\\n$(subst 3,THREE,$C)$(subst 2,TWO,$C)$(subst 1,ONE,$C)\n\n_DUMMY := $(call cache,FOO)\n--*snip*--\n\n.PHONY: all\nall:\n```", "```\nFOO = $(eval FOO := $(subst 9,NINE,$C)$(subst 8,EIGHT,$C)$(subst 7,SEVEN,$C) \\\n$(subst 6,SIX,$C)$(subst 5,FIVE,$C)$(subst 4,FOUR,$C)$(subst 3,THREE,$C)     \\\n$(subst 2,TWO,$C)$(subst 1,ONE,$C))$(value FOO)\n```", "```\n.PHONY: all\nall: foo foo.o foo.c\n\nfoo:\n→  touch $@ foo.c\n\n%.o: %.c\n→  touch $@\n```", "```\ntouch foo foo.c\ntouch foo.o\n```", "```\n$ **rm -f foo.c foo.o**\n$ **touch foo**\n$ **make**\nNo rule to make target `foo.c', needed by `foo.o'.\n```", "```\n$ **make -n** \ntouch foo foo.c\nNo rule to make target `foo.c', needed by `foo.o'.\n```", "```\n$ **make -j3**\ntouch foo foo.c\nNo rule to make target `foo.c', needed by `foo.o'.\nWaiting for unfinished jobs....\n```", "```\n$ **touch foo.c**\n$ **rm -f foo foo.o**\n$ **make**\ntouch foo foo.c\ntouch foo.o\n```", "```\n$ **rm -f foo.c**\n$ **make foo.o**\nNo rule to make target `foo.c', needed by `foo.o'.\n```", "```\n*.c:\n→  @command\n```", "```\n\\*.c:\n→  @command\n```", "```\nall:         \\\nprerequisite \\\nsomething else\n→  @command\n```", "```\npound := \\#\n```", "```\ndefine newline\n\nendef\n```", "```\n$(error This is an error message$(newline)with two lines)\n```", "```\ndefine \\n\n\nendef\n\n$(error This is an error message $(\\n)with two lines)\n```", "```\nspaces-to-commas = $(subst ,,,$1)\n```", "```\nspaces-to-commas = $(subst $(space),$(comma),$1)\n```", "```\ncomma := ,\n```", "```\nspace :=\nspace +=\n```", "```\nblank :=\nspace := $(blank) $(blank)\n```", "```\nblank :=\ntab := $(blank)→$(blank)\n```", "```\n, := ,\n\nblank :=\nspace := $(blank) $(blank)\n$(space) := $(space)\n```", "```\nspaces-to-commas = $(subst $( ),$(,),$1)\n```", "```\n# Define the $= or $(=) variable which has the value =\nequals := =\n$(equals) := =\n# Define the $# or $(#) variable which has the value #\nhash := \\#\n$(hash) := \\#\n# Define the $: or $(:) variable which has the value :\ncolon := :\n$(colon) := :\n\n# Define the $($$) variable which has the value $\ndollar := $$\n$(dollar) := $$\n```", "```\n+:=+\n```", "```\nif-exists = $(if ($wildcard $1),$2,$3)\n```", "```\n$(info a.foo is $(call if-exists,a.foo,there,not there))\n```", "```\nWILDCARD_LIST = wildcard returned \\'$(wildcard $(DIRECTORY)*.foo)\\'\nLS_LIST = ls returned \\'$(shell ls $(DIRECTORY)*.foo)\\'\n\n.PHONY: all\nall:\n→  @echo $(WILDCARD_LIST)\n→  @echo $(LS_LIST)\n```", "```\n$ **touch a.foo**\n$ **make**\nwildcard returned 'a.foo'\nls returned 'a.foo'\n```", "```\nWILDCARD_LIST = wildcard returned \\'$(wildcard $(DIRECTORY)*.foo)\\'\nLS_LIST = ls returned \\'$(shell ls $(DIRECTORY)*.foo)\\'\n\n.PHONY: all\nall: b.foo\n→ @echo $(WILDCARD_LIST)\n→ @echo $(LS_LIST)\n\nb.foo:\n→ @touch $@\n```", "```\n$ **touch a.foo**\n$ **make**\nwildcard returned 'a.foo'\nls returned 'a.foo b.foo'\n```", "```\nDIRECTORY=subdir/\n\n.PHONY: all\nall: $(DIRECTORY)b.foo\n→  @echo $(WILDCARD_LIST)\n→  @echo $(LS_LIST)\n\n$(DIRECTORY)b.foo:\n→  @touch $@\n```", "```\n$ **touch subdir/a.foo**\n$ **make**\nwildcard returned 'subdir/a.foo subdir/b.foo'\nls returned 'subdir/a.foo subdir/b.foo'\n```", "```\nDIRECTORY=subdir/\n\n$(warning Preexisting file: $(WILDCARD_LIST))\n\n.PHONY: all\nall: $(DIRECTORY)b.foo\n→  @echo $(WILDCARD_LIST)\n→  @echo $(LS_LIST)\n$(DIRECTORY)b.foo:\n→  @touch $@\n```", "```\n$ **touch subdir/a.foo**\n$ **make**\nmakefile:6: Preexisting file: wildcard returned 'subdir/a.foo'\nwildcard returned 'subdir/a.foo'\nls returned 'subdir/a.foo subdir/b.foo'\n```", "```\nDIRECTORY=subdir/\n\n.PHONY: all\nall: $(DIRECTORY)b.foo\n→  @echo $(WILDCARD_LIST)\n→  @echo $(LS_LIST)\n$(DIRECTORY)b.foo: $(DIRECTORY)c.foo\n→  @touch $@\n→  @echo $(WILDCARD_LIST)\n→  @echo $(LS_LIST)\n\n$(DIRECTORY)c.foo:\n→  @touch $@\n```", "```\n   $ **make**\n   wildcard returned 'subdir/a.foo subdir/c.foo'\n   ls returned 'subdir/a.foo subdir/c.foo'\n➊ wildcard returned 'subdir/a.foo subdir/c.foo'\n   ls returned 'subdir/a.foo subdir/b.foo subdir/c.foo'\n```", "```\n.PHONY: all\nall: /out/foo.o\n\n/out/foo.o: foo.c\n→  @$(COMPILE.C) -o $@ $<\n```", "```\n$ **make**\nAssembler messages:\nFATAL: can't create /out/foo.o: No such file or directory\nmake: *** [/out/foo.o] Error 1\n```", "```\nOUT = /out\n\n.PHONY: all\nall: $(OUT)/foo.o\n\n$(OUT)/foo.o: foo.c $(OUT)/\n→  @$(COMPILE.C) -o $@ $<\n\n$(OUT)/:\n→  mkdir -p $@\n```", "```\nOUT = /out\n\n.PHONY: all\nall: $(OUT)/foo.o\n\n$(OUT)/foo.o: foo.c\n→  @$(COMPILE.C) -o $@ $<\n\n$(shell mkdir -p $(OUT))\n```", "```\nifeq ($(wildcard $(OUT)/.),)\n$(shell mkdir -p $(OUT))\nendif\n```", "```\nOUT = /out\n\n.PHONY: all\nall: make_directories $(OUT)/foo.o\n\n$(OUT)/foo.o: foo.c\n→  @$(COMPILE.C) -o $@ $<\n\n.PHONY: make_directories\nmake_directories: $(OUT)/\n\n$(OUT)/:\n→  mkdir -p $@\n```", "```\nOUT = /out\n.PHONY: all\nall: $(OUT)/foo.o\n\n$(OUT)/foo.o: foo.c $(OUT)/.f\n→  @$(COMPILE.C) -o $@ $<\n$(OUT)/.f:\n→  mkdir -p $(dir $@)\n→  touch $@\n```", "```\nmarker = $1.f\nmake_dir = $(eval $1.f: ; @mkdir -p $$(dir $$@) ; touch $$@)\n\nOUT = /out\n.PHONY: all\nall: $(OUT)/foo.o\n\n$(OUT)/foo.o: foo.c $(call marker,$(OUT))\n→  @$(COMPILE.C) -o $@ $<\n\n$(call make-dir,$(OUT))\n```", "```\n   OUT = /out\n\n   .PHONY: all\n   all: $(OUT)/foo.o\n   $(OUT)/foo.o: foo.c | $(OUT)/\n   →  @$(COMPILE.C) -o $@ $<\n\n➊ $(OUT)/:\n   →  mkdir -p $@\n```", "```\nOUT = /out\n.PHONY: all\nall: $(OUT)/foo.o\n\n$(OUT)/%.o: %.c\n→  @$(COMPILE.C) -o $@ $<\n```", "```\nOUT = /tmp/out\n\n.SECONDEXPANSION:\n\nall: $(OUT)/foo.o\n\n$(OUT)/%.o: %.c $$(@D)/.f\n→  @$(COMPILE.C) -o $@ $<\n\n%/.f:\n→  mkdir -p $(dir $@)\n→  touch $@\n\n.PRECIOUS: %/.f\n```", "```\nOUT = /out\n\n.PHONY: all\nall: $(OUT)/foo.o\n\n$(OUT)/foo.o: foo.c\n→  mkdir -p $(@D)\n→  @$(COMPILE.C) -o $@ $<\n```", "```\nfoo bar: bar baz\n→ @echo Making $@ from $<\n```", "```\nfoo: bar baz\n→ @echo Making $@ from $<\nbar: bar baz\n→ @echo Making $@ from $<\n```", "```\n\"foo bar\": \"bar baz\"\n→ @echo Making $@ from $<\n```", "```\nfoo\\ bar: bar\\ baz\n→ @echo Making $@ from $<\n```", "```\n$ **make**\nMaking foo bar from bar baz\n```", "```\nfoo\\ bar: bar\\ baz a\\ b\n→ @echo Making $@ from $<\n```", "```\n/tmp/foo\\ bar/baz: bar\\ baz a\\ b\n→  @echo Making $@ from $<\n```", "```\nfoo?bar: bar?baz\n→  @echo Making $@ from $<\n```", "```\nsp :=\nsp +=\nqs = $(subst ?,$(sp),$1)\nsq = $(subst $(sp),?,$1)\n\n$(call sq,foo bar): $(call sq,bar baz)\n→ @echo Making $(call qs,$@) from $(call qs,$<)\n```", "```\nspace :=\nspace +=\n\ns+ = $(subst \\$(space),+,$1)\n+s = $(subst +,\\$(space),$1)\n```", "```\nSRCS := a\\ b.c c\\ d.c e\\ f.c\nSRCS := $(call s+,$(SRCS))\n\nOBJS := $(SRCS:.c=.o)\n\nall: $(call +s,$(OBJS))\n```", "```\n.PHONY: all\nall: ../foo\n\n.././foo:\n→ touch $@\n```", "```\n$ **make**\nmake: *** No rule to make target `../foo', needed by `all'. Stop.\n```", "```\n.PHONY: all\nall: ../foo\n\n./../foo:\n→ touch $@\n```", "```\n/tmp/sub directory/target:\n→ @do stuff\n```", "```\n/tmp/sub:\n→ @do stuff\ndirectory/target:\n→ @do stuff\n```", "```\nVPATH = ../src:../thirdparty/src /src\n\nvpath %c ../src:../thirdparty/src /src\n```", "```\nVPATH = ../src;../thirdparty/src /src\n\nvpath %c ../src;../thirdparty/src /src\n```", "```\nSRCDIR := src\nMODULE_DIR := module_1\n\nMODULE_SRCS := $(SRCDIR)/$(MODULE_DIR)\n```", "```\n/ := /\n\nSRCDIR := src\nMODULE_DIR := module_1\n\nMODULE_SRCS := $(SRCDIR)$/$(MODULE_DIR)\n```", "```\nSEP := /\n\nSRCDIR := src\nMODULE_DIR := module_1\n\nMODULE_SRCS := $(SRCDIR)$(SEP)$(MODULE_DIR)\n```", "```\n/ := $(strip \\)\n\nSRCDIR := src\nMODULE_DIR := module_1\n\nMODULE_SRCS := $(SRCDIR)$/$(MODULE_DIR)\n```", "```\nforward-to-backward = $(subst /,\\,$1)\n```", "```\n.PHONY: all\nall: File\n\nfile:\n→ @touch $@\n```", "```\nCURRENT_DIRECTORY := $(PWD)\n```", "```\nCURRENT_MAKEFILE := $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))\nMAKEFILE_DIRECTORY := $(dir $(CURRENT_MAKEFILE))\n```", "```\nclean:\n→  rm -f *.o *.obj lib tags core .pure .nfs* *.old *.bak fluff $(EXE)\n```", "```\nmostlyclean::\n→ rm -f *.o\n\nclean:: mostlyclean\n→ -$(LIBTOOL) --mode=clean rm -f $(program) $(programs)\n→ rm -f $(library).a squeeze *.bad *.dvi *.lj\n\nextraclean::\n→ rm -f *.aux *.bak *.bbl *.blg *.dvi *.log *.pl *.tfm *.vf *.vpl\n→ rm -f *.*pk *.*gf *.mpx *.i *.s *~ *.orig *.rej *\\#*\n→ rm -f CONTENTS.tex a.out core mfput.* texput.* mpout.*\n```", "```\nclean:\n→ @-rm *.o &> /dev/null\n```", "```\nSUBDIRS = library executable\n\n.PHONY: clean\nclean:\n→ for dir in $(SUBDIRS); do \\\n→ $(MAKE) -C $$dir clean; \\\n→ done\n```", "```\n.PHONY: all\nall: t5 t4 t1\n→ @echo Making $@\n\nt1: t3 t2\n→ touch $@\n\nt2:\n→ cp t3 $@\n\nt3:\n→ touch $@\n\nt4:\n→ touch $@\n\nt5:\n→ touch $@\n```", "```\n$ **make**\ntouch t5\ntouch t4\ntouch t3\ncp t3 t2\ntouch t1\nMaking all\n```", "```\n$ **make --jobs=16**\ntouch t4\ntouch t5\ntouch t3\ncp t3 t2\ntouch t1\nMaking all\n```", "```\n$ **make --jobs=16**\ntouch t3\ncp t3 t2\ntouch t4\ntouch t1\ntouch t5\nMaking all\n```", "```\n$ **make --jobs=16**\ntouch t5\ntouch t4\ncp t3 t2\ncp: cannot stat `t3': No such file or directory\nmake: *** [t2] Error 1\n```", "```\nTMP_FILE := /tmp/scratch_file\n\n.PHONY: all\nall: t\n\nt: t1 t2\n→ cat t1 t2 > $@\n\nt1:\n→ echo Output from $@ > $(TMP_FILE)\n→ cat $(TMP_FILE) > $@\n\nt2:\n→ echo Output from $@ > $(TMP_FILE)\n→ cat $(TMP_FILE) > $@\n```", "```\n$ **make**\necho Output from t1 > /tmp/scratch_file\ncat /tmp/scratch_file > t1\necho Output from t2 > /tmp/scratch_file\ncat /tmp/scratch_file > t2\ncat t1 t2 > t\n```", "```\nOutput from t1\nOutput from t2\n```", "```\n$ make --jobs=2\necho Output from t1 > /tmp/scratch_file\necho Output from t2 > /tmp/scratch_file\ncat /tmp/scratch_file > t1\ncat /tmp/scratch_file > t2\ncat t1 t2 > t\n```", "```\nOutput from t2\nOutput from t2\n```", "```\n$ **make --jobs=2**\necho Output from t1 > /tmp/scratch_file.t1\necho Output from t2 > /tmp/scratch_file.t2\ncat /tmp/scratch_file.t1 > t1\ncat /tmp/scratch_file.t2 > t2\ncat t1 t2 > t\n```", "```\nLOCK_FILE := lock.me\n\n.PHONY: all\nall: t1 t2\n→ @echo done.\n\nt1:\n→ @lockfile $(LOCK_FILE)\n→ @sleep 10\n→ @rm -f $(LOCK_FILE)\n→ @echo Finished $@\nt2:\n→ @lockfile $(LOCK_FILE)\n→ @sleep 20\n→ @rm -f $(LOCK_FILE)\n→ @echo Finished $@\n```", "```\n$ **time make**\nFinished t1\nFinished t2\ndone.\nmake 0.01s user 0.01s system 0% cpu 30.034 total\n```", "```\n$ **time make -j4**\nFinished t1\nFinished t2\ndone.\nmake -j4 0.01s user 0.02s system 0% cpu 36.812 total\n```", "```\nSUBDIRS := foo bar baz\n\n.PHONY: all\nall:\n→ for d in $(SUBDIRS);     \\\n→ do                       \\\n→ $(MAKE) –directory=$$d;  \\\n→ done\n```", "```\nSUBDIRS := foo bar baz\n\n.PHONY: all $(SUBDIRS)\nall: $(SUBDIRS)\n\n$(SUBDIRS):\n→ $(MAKE) --directory=$@\n```", "```\n.PHONY: all\nall: t\n→ @echo done\nt: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12\n→ @sleep 10\n→ @echo Made $@\n\nt1:\n→ @sleep 11\n→ @echo Made $@\n\nt2:\n→ @sleep 4\n→ @echo Made $@\n\nt3: t5\n→ @sleep 7\n→ @echo Made $@\n\nt4:\n→ @sleep 9\n→ @echo Made $@\n\nt5: t8\n→ @sleep 10\n→ @echo Made $@\n\nt6:\n→ @sleep 2\n→ @echo Made $@\n\nt7:\n→ @sleep 12\n→ @echo Made $@\n\nt8:\n→ @sleep 3\n→ @echo Made $@\n\nt9: t10\n→ @sleep 4\n→ @echo Made $@\n\nt10:\n→ @sleep 6\n→ @echo Made $@\n\nt11: t12\n→ @sleep 1\n→ @echo Made $@\n\nt12:\n→ @sleep 9\n→ @echo Made $@\n```", "```\n$ **time make**\nMade t1\nMade t2\nMade t8\nMade t5\nMade t3\nMade t4\nMade t6\nMade t7\nMade t10\nMade t9\nMade t12\nMade t11\nMade t\ndone\nmake 0.04s user 0.03s system 0% cpu 1:28.68 total\n```", "```\nrwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))\n```", "```\n$(call rwildcard,,*.c)\n```", "```\n$(call rwildcard,/tmp/,*.c)\n```", "```\n$(call rwildcard,/src/,*.c *.h)\n```", "```\nwhere-am-i = $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))\n```", "```\nTHIS_MAKEFILE := $(call where-am-i)\n```", "```\nwhere-am-i = $(CURDIR)/$(word ($words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)\n\ninclude foo/makefile\n```", "```\nTHIS_MAKEFILE := $(call where-am-i)\n$(warning $(THIS_MAKEFILE))\n\ninclude foo/bar/makefile\n```", "```\nTHIS_MAKEFILE := $(call where-am-i)\n$(warning $(THIS_MAKEFILE))\n```", "```\nfoo/makefile:2: /tmp/foo/makefile\nfoo/bar/makefile:2: /tmp/foo/bar/makefile\n```"]