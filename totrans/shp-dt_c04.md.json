["```\n#load both networks in R\nmydata1<-as.matrix(read.csv(\"Graph1w.csv\",header=F))\nmydata2<-as.matrix(read.csv(\"Graph2w.csv\",header=F))\n\n#load igraph and convert to graph objects\nlibrary(igraph)\ng1<-graph_from_adjacency_matrix(mydata1,mode=\"undirected\",weighted=T)\ng2<-graph_from_adjacency_matrix(mydata2,mode=\"undirected\",weighted=T)\n\n#plot the two graphs\nplot(g1,edge.label=E(g1)$weight,main=\"Graph 1\")\nplot(g2,edge.label=E(g2)$weight,main=\"Graph 2\")\n```", "```\n#filter Graph 1\nmydata1[mydata1<0.2]<-0\ng12<-graph_from_adjacency_matrix(mydata1,mode=\"undirected\",weighted=T)\nmydata1[mydata1<0.4]<-0\ng14<-graph_from_adjacency_matrix(mydata1,mode=\"undirected\",weighted=T)\nmydata1[mydata1<0.6]<-0\ng16<-graph_from_adjacency_matrix(mydata1,mode=\"undirected\",weighted=T)\nmydata1[mydata1<0.8]<-0\ng18<-graph_from_adjacency_matrix(mydata1,mode=\"undirected\",weighted=T)\n\n#filter Graph 2\nmydata2[mydata2<0.2]<-0\ng22<-graph_from_adjacency_matrix(mydata2,mode=\"undirected\",weighted=T)\nmydata2[mydata2<0.4]<-0\ng24<-graph_from_adjacency_matrix(mydata2,mode=\"undirected\",weighted=T)\nmydata2[mydata2<0.6]<-0\ng26<-graph_from_adjacency_matrix(mydata2,mode=\"undirected\",weighted=T)\nmydata2[mydata2<0.8]<-0\ng28<-graph_from_adjacency_matrix(mydata2,mode=\"undirected\",weighted=T)\n```", "```\n#calculate degree centrality for Graph 1's filtration sequence\nd1<-degree(g1)\nd12<-degree(g12)\nd14<-degree(g14)\nd16<-degree(g16)\nd18<-degree(g18)\n\n#create a dataset tracking degree centrality across the filtration\ng1deg<-cbind(d1,d12,d14,d16,d18)\n```", "```\n#calculate degree centrality for Graph 2's filtration sequence\nd2<-degree(g2)\nd22<-degree(g22)\nd24<-degree(g24)\nd26<-degree(g26)\nd28<-degree(g28)\n\n#create a dataset tracking degree centrality across the filtration\ng2deg<-cbind(d2,d22,d24,d26,d28)\n```", "```\n#calculate graph diameter of Graph 1's filtration\ndi1<-diameter(g1)\ndi12<-diameter(g12)\ndi14<-diameter(g14)\ndi16<-diameter(g16)\ndi18<-diameter(g18)\n```", "```\n#calculate graph diameter of Graph 2's filtration\ndi2<-diameter(g2)\ndi22<-diameter(g22)\ndi24<-diameter(g24)\ndi26<-diameter(g26)\ndi28<-diameter(g28)\n```", "```\n#load the author's network\ng_social<-read.csv(\"SocialNetwork.csv\")\n\n#create the graph\nlibrary(igraph)\ng1<-graph_from_adjacency_matrix(g_social,mode=\"undirected\",weighted=F)\n\n#compute the maximal cliques in the author's network data\ncl<-maximal.cliques(g1)\n\n#create array\ncl<-as.array(cl)\n\n#get clique size from maximal clique array\nd<-dim(cl)\nl<-rep(NA,d)\nfor (i in 1:d){\n  l[i]<-length(as.vector(cl[[i]]))\n}\n\n#create matrix of vertices in maximal cliques\nav<-matrix(rep(NA,d*20),20)\nfor (i in 1:20){\n  for (j in 1:d){\n    av[i,j]<-i%in%cl[[j]]\n  }\n}\n\n#convert to binary indicators\navind<-ifelse(av==TRUE,1,0)\n\n#multiply out to calculate each vertex's topological dimension\ntopmat<-t(avind)*l\ntopdim<-colSums(topmat)\n```", "```\n#create a table counting the number of k+1 simplices in the simplicial complex\nsumm<-as.numeric(summary(cl)[,1])\njjj<-table(summ)\n```", "```\n#simulate three graphs using the igraph package for further comparison\nlibrary(igraph)\n\n#create an Erdos-Renyi graph\ng1<-erdos.renyi.game(30,0.3)\n\n#create a scale-free graph\ng2<-sample_pa(30,power=2.5,directed=F)\n\n#create a Watts-Strogatz graph\ng3<-sample_smallworld(2,5,3,0.3)\n\n#plot the three graphs created\nplot(g1,main=\"Erdos-Renyi Graph\")\nplot(g2,main=\"Scale-Free Graph\")\nplot(g3,main=\"Watts-Strogatz Graph\")\n```", "```\n#load TDA package\nlibrary(TDAstats)\n\n#get adjacency matrices\nm1<-as.matrix(get.adjacency(g1))\nm2<-as.matrix(get.adjacency(g2))\nm3<-as.matrix(get.adjacency(g3))\n\n#compute persistent homology\nd1<-calculate_homology(m1,dim=2,format=\"cloud\")\nd2<-calculate_homology(m2,dim=2,format=\"cloud\")\nd3<-calculate_homology(m3,dim=2,format=\"cloud\")\n\n#plot persistence diagrams\nplot_persist(d1)\nplot_persist(d2)\nplot_persist(d3)\n\n#compute distances among graphs\nw1<-phom.dist(d1,d2,limit.num=0)\nw2<-phom.dist(d1,d3,limit.num=0)\nw3<-phom.dist(d2,d3,limit.num=0)\n```", "```\n#get Wasserstein distance between random graphs with the same structure\nww<-rep(NA,100)\n\nfor (i in 1:100){\n  g1<-erdos.renyi.game(30,0.3)\n  g2<-erdos.renyi.game(30,0.3)\n  m1<-as.matrix(get.adjacency(g1))\n  m2<-as.matrix(get.adjacency(g2))\n  d1<-calculate_homology(m1,dim=2,format=\"cloud\")\n  d2<-calculate_homology(m2,dim=2,format=\"cloud\")\n  ww[i]<-phom.dist(d1,d2,limit.num=0)\n}\n\n#compute 95% confidence intervals from the simulated null distribution\nquantile(ww,c(0.025,0.975))\n```"]