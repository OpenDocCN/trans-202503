["```\nCMIOExtensionProvider.m:2671:-[CMIOExtensionProvider setDevicePropertyValuesForClientID:\ndeviceID:propertyValues:reply:] <CMIOExtensionProvider>,\n3F4ADF48-8358-4A2E-896B-96848FDB6DD5, propertyValues {\n    **CMIOExtensionPropertyDeviceControlPID = 90429;**\n} \n```", "```\nsshd: Accepted keyboard-interactive/pam for Patrick from 192.168.1.176 port 59363 ssh2\nsshd: (libpam.2.dylib) in pam_sm_setcred(): Establishing credentials\nsshd: (libpam.2.dylib) in pam_sm_setcred(): Got user: Patrick\n...\nsshd: (libpam.2.dylib) in pam_sm_open_session(): UID: 501\nsshd: (libpam.2.dylib) in pam_sm_open_session(): server_URL: (null)\nsshd: (libpam.2.dylib) in pam_sm_open_session(): path: (null)\nsshd: (libpam.2.dylib) in pam_sm_open_session(): homedir: /Users/Patrick\nsshd: (libpam.2.dylib) in pam_sm_open_session(): username: Patrick \n```", "```\nsend: 0/7 synchronous to com.apple.tccd.system: request: msgID=408.11,\nfunction=TCCAccessRequest, service=kTCCServiceMicrophone, target_token={pid:23207, auid:501,\neuid:501}, \n```", "```\n% **/usr/bin/log**\nusage:\n    log <command>\n\nglobal options:\n    -?, --help\n    -q, --quiet\n    -v, --verbose\n\ncommands:\n    collect         gather system logs into a log archive\n    config          view/change logging system settings\n    erase           delete system logging data\n    show            view/search system logs\n    stream          watch live system logs\n    stats           show system logging statistics\n\nfurther help:\n    log help <command>\n    log help predicates \n```", "```\n% **log stream --predicate 'process == \"kernel\"'**\n```", "```\n% **log stream --predicate 'subsystem == \"com.apple.securityd\"'**\n```", "```\n% **otool -L /usr/bin/log**\n/System/Library/PrivateFrameworks/ktrace.framework/Versions/A/ktrace\n/System/Library/PrivateFrameworks/LoggingSupport.framework/Versions/A/LoggingSupport\n/System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication\n... \n```", "```\nNSString* process;\nint processIdentifier;\nNSString* processImagePath;\nNSString* sender;\nNSString* senderImagePath;\nNSString* category;\nNSString* subsystem;\nNSDate* date;\nNSString* composedMessage; \n```", "```\nr21 = [OSLogEventLiveStream initWithLiveSource:...];\n[r21 setEventHandler:&var_110];\n...\n[r21 setFilterPredicate:r22];\n\nprintf(\"Filtering the log data using \\\"%s\\\"\\n\", @selector(UTF8String));\n...\n[r21 activate]; \n```", "```\n#define LOGGING_SUPPORT @\"/System/Library/PrivateFrameworks/LoggingSupport.framework\"\n\n-(void)start:(NSPredicate*)predicate\nlevel:(NSUInteger)level eventHandler:(void(^)(OSLogEventProxy*))eventHandler {\n    [[NSBundle bundleWithPath:LOGGING_SUPPORT] load]; ❶\n    Class LiveStream = NSClassFromString(@\"OSLogEventLiveStream\"); ❷\n\n    self.liveStream = [[LiveStream alloc] init]; ❸\n\n    @try {\n        [self.liveStream setFilterPredicate:predicate]; ❹\n    } @catch (NSException* exception) {\n // Code to handle invalid predicate removed for brevity\n    }\n    [self.liveStream setInvalidationHandler:^void (int reason, id streamPosition) {\n        ;\n    }];\n\n    [self.liveStream setDroppedEventHandler:^void (id droppedMessage) {\n        ;\n    }];\n\n    [self.liveStream setEventHandler:eventHandler]; ❺\n    [self.liveStream setFlags:level]; ❻\n\n    [self.liveStream activate]; ❼\n} \n```", "```\nNSPredicate* predicate = [NSPredicate predicateWithFormat:<some string predicate>]; ❶\n\nLogMonitor* logMonitor = [[LogMonitor alloc] init]; ❷\n\n[logMonitor start:predicate level:Log_Level_Debug eventHandler:^(OSLogEventProxy* event) {\n    printf(\"New Log Message: %s\\n\\n\", event.description.UTF8String);\n}];\n\n[NSRunLoop.mainRunLoop run]; \n```", "```\n@interface OSLogEventLiveStream : NSObject\n    -(void)activate;\n    -(void)setFilterPredicate:(NSPredicate*)predicate;\n    -(void)setEventHandler:(void(^)(id))callback;\n    ...\n    @property(nonatomic) unsigned long long flags;\n@end\n\n@interface OSLogEventProxy : NSObject\n    @property(readonly, nonatomic) NSString* process;\n    @property(readonly, nonatomic) int processIdentifier;\n    @property(readonly, nonatomic) NSString* processImagePath;\n    ...\n@end \n```", "```\n% **./logStream 'subsystem == \"com.apple.securityd\"'**\nNew Log Message:\n<OSLogEventProxy: 0x155804080, 0x0, 400, 1300, open(%s,0x%x,0x%x) = %d>\nNew Log Message:\n<OSLogEventProxy: 0x155804080, 0x0, 400, 1300, %p is a thin file (%s)>\nNew Log Message:\n<OSLogEventProxy: 0x155804080, 0x0, 400, 1300, %zd signing bytes in %d blob(s) from %s(%s)>\nNew Log Message:\n<OSLogEventProxy: 0x155804080, 0x0, 400, 1009, network access disabled by policy> \n```", "```\n#import <objc/message.h> ❶\n#import <objc/runtime.h>\n\nvoid inspectObject(id object) {\n    unsigned int propertyCount = 0 ;\n    objc_property_t* properties = class_copyPropertyList([object class], &propertyCount); ❷\n\n    for(unsigned int i = 0; i < propertyCount; i++) {\n        NSString* name = [NSString stringWithUTF8String:property_getName(properties[i])]; ❸\n\n        printf(\"\\n%s: \", [name UTF8String]);\n\n        SEL sel = sel_registerName(name.UTF8String); ❹\n        const char* attr = property_getAttributes(properties[i]); ❺\n\n        switch(attr[1]) {\n            case '@':\n                printf(\"%s\\n\",\n                [[((id (*)(id, SEL))objc_msgSend)(object, sel) description] UTF8String]);\n                break;\n            case 'i':\n                printf(\"%i\\n\", ((int (*)(id, SEL))objc_msgSend)(object, sel));\n                break;\n            case 'f':\n                printf(\"%f\\n\", ((float (*)(id, SEL))objc_msgSend)(object, sel));\n                break;\n            default:\n                break;\n        }\n    }\n\n    free(properties);\n    return;\n} \n```", "```\nNSPredicate* predicate = [NSPredicate predicateWithFormat:<some string predicate>];\n\n[logMonitor start:predicate level:Log_Level_Debug eventHandler:\n^(OSLogEventProxy* event) {\n    inspectObject(event);\n}]; \n```", "```\n% **./logStream 'subsystem == \"com.apple.xprotect\"'**\n\nNew Log Message:\n\ncomposedMessage: Starting malware scan for: /Volumes/Install/Install.app\n\nlogType: 1\ntimeZone: GMT-0700 (GMT-7) offset -25200\n...\nprocessIdentifier: 1374\nprocess: XprotectService\nprocessImagePath: /System/Library/PrivateFrameworks/XprotectFramework\n.framework/Versions/A/XprotectService.xpc/Contents/MacOS/XprotectService\n...\nsenderImagePath: /System/Library/PrivateFrameworks/XprotectFramework\n.framework/Versions/A/XprotectService.xpc/Contents/MacOS/XprotectService\nsender: XprotectService\n...\nsubsystem: com.apple.xprotect\ncategory: xprotect\n... \n```", "```\n'composedMessage CONTAINS \"CMIOExtensionPropertyDeviceControlPID\"'\n```", "```\nsubsystem=='com.apple.cmio'\n```", "```\nif(YES == [logEvent.composedMessage\ncontainsString:@\"CMIOExtensionPropertyDeviceControlPID =\"]) {\n    // Extract the PID of the processes accessing the webcam.\n} \n```"]