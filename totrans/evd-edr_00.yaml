- en: <samp class="SANS_Dogma_OT_Bold_B_11">INTRODUCTION</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">介绍</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Today, we accept that network compromises are inevitable. Our security landscape
    has turned its focus toward detecting adversary activities on compromised hosts
    as early as possible and with the precision needed to respond effectively. If
    you work in security, you’ve almost certainly come across some type of endpoint
    security product, whether it be legacy antivirus, data-loss prevention software,
    user-activity monitoring, or the subject of this book, endpoint detection and
    response (EDR). Each product serves a unique purpose, but none is more prevalent
    today than EDR.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们已接受网络妥协是不可避免的现实。我们的安全格局已将焦点转向尽早发现已被妥协主机上的对手活动，并以精确度来进行有效响应。如果你从事安全工作，你几乎肯定接触过某种类型的端点安全产品，无论是传统的防病毒软件、数据丢失防护软件、用户活动监控，还是本书所讨论的端点检测与响应（EDR）。每种产品都有其独特的目的，但如今没有一种产品比
    EDR 更为普遍。
- en: An *EDR agent* is a collection of software components that create, ingest, process,
    and transmit data about system activity to a central node, whose job is to determine
    an actor’s intent (such as whether their behavior is malicious or benign). EDRs
    touch nearly all aspects of a modern security organization. Security operation
    center (SOC) analysts receive alerts from their EDR, which uses detection strategies
    created by detection engineers. Other engineers maintain and deploy these agents
    and servers. There are even entire companies that make their money managing their
    clients’ EDRs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*EDR 代理* 是一组软件组件，用于创建、获取、处理并传输有关系统活动的数据到一个中央节点，中央节点的任务是确定行为者的意图（例如判断其行为是恶意的还是良性的）。EDR
    涉及现代安全组织的几乎所有方面。安全运营中心（SOC）分析师从他们的 EDR 收到警报，EDR 使用由检测工程师创建的检测策略。其他工程师则负责维护和部署这些代理和服务器。甚至有一些公司专门通过管理客户的
    EDR 来盈利。'
- en: It’s time we stop treating EDRs like magic black boxes that take in “stuff”
    and output alerts. Using this book, offensive and defensive security practitioners
    alike can gain a deeper understanding of how EDRs work under the hood so that
    they can identify coverage gaps in the products deployed in target environments,
    build more robust tooling, evaluate the risk of each action they take on a target,
    and better advise clients on how to cover the gaps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候停止将 EDR 当作神秘的黑盒来看待了，这些黑盒吸入“东西”并输出警报。通过本书，攻防安全从业者都可以深入理解 EDR 的工作原理，从而识别目标环境中已部署产品的覆盖漏洞，构建更强大的工具，评估他们在目标上执行的每个操作的风险，并更好地建议客户如何弥补这些漏洞。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Who This Book Is For</samp>
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书适合谁阅读</samp>
- en: This book is for any reader interested in understanding endpoint detections.
    On the offensive side, it should guide researchers, capability developers, and
    red team operators, who can use the knowledge of EDR internals and evasion strategies
    discussed here to build their attack strategies. On the defensive side, the same
    information serves a different purpose. Understanding how your EDR works will
    help you make informed decisions when investigating alerts, building new detections,
    understanding blind spots, and purchasing products.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适合任何有兴趣理解端点检测的读者。在攻防两方面，它都能提供帮助。对于进攻方，它可以指导研究人员、能力开发人员和红队操作员，他们可以利用本书中讨论的
    EDR 内部原理和规避策略来制定自己的攻击策略。对于防守方，相同的信息则有不同的用途。理解你的 EDR 如何工作，将帮助你在调查警报、构建新的检测、理解盲点以及购买产品时做出明智的决策。
- en: 'That said, if you’re looking for a step-by-step guide to evading the specific
    EDR deployed in your particular operating environment, this book isn’t for you.
    While we discuss evasions related to the broader technologies used by most endpoint
    security agents, we do so in a vendor-agnostic way. All EDR agents generally work
    with similar data because the operating system standardizes its collection techniques.
    This means we can focus our attention on this common core: the information used
    to build detections. Understanding it can clarify why a vendor makes certain design
    decisions.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果你在寻找一种逐步指导如何规避你特定操作环境中部署的 EDR 的方法，本书不适合你。虽然我们讨论了与大多数端点安全代理使用的广泛技术相关的规避方法，但我们是以与供应商无关的方式进行讨论的。所有
    EDR 代理通常处理相似的数据，因为操作系统标准化了其数据收集方法。这意味着我们可以将注意力集中在这一共同核心上：用于构建检测的那些信息。理解这些信息可以帮助我们澄清供应商为何做出某些设计决策。
- en: Lastly, this book exclusively targets the Windows operating system. While you’ll
    increasingly find EDRs developed specifically for Linux and macOS, they still
    don’t hold a candle to the market share held by Windows agents. Because we are
    far more likely to run into an EDR deployed on Windows when attacking or defending
    a network, we’ll focus our efforts on gaining a deep understanding of how these
    agents work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本书专门针对Windows操作系统。虽然你会越来越多地发现专门为Linux和macOS开发的EDR，但它们仍然无法与Windows代理所占的市场份额相提并论。由于我们在攻击或防御网络时更有可能遇到部署在Windows上的EDR，因此我们将专注于深入了解这些代理的工作原理。
- en: <samp class="SANS_Futura_Std_Bold_B_11">What Is in This Book</samp>
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书内容</samp>
- en: Each chapter covers a specific EDR sensor or group of components used to collect
    some type of data. We begin by walking through how developers commonly implement
    the component, then discuss the types of data it collects. Lastly, we survey the
    common techniques used to evade each component and why they work.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都涵盖了特定的EDR传感器或用于收集某种数据的组件。我们首先介绍开发者常用的组件实现方式，然后讨论它收集的数据类型。最后，我们回顾了常见的规避技术及其为何有效。
- en: '**[Chapter 1](chapter1.xhtml): EDR-chitecture**   Provides an introduction
    to the design of EDR agents, their various components, and their general capabilities.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章](chapter1.xhtml): EDR架构**   介绍了EDR代理的设计、各种组件及其一般功能。'
- en: '**[Chapter 2](chapter2.xhtml): Function-Hooking DLLs**   Discusses how an EDR
    intercepts calls to user-mode functions so that it can watch for invocations that
    could indicate the presence of malware on the system.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml): 函数钩子DLL**   讨论了EDR如何拦截用户模式函数的调用，以便监视可能表明系统中存在恶意软件的调用。'
- en: '**[Chapter 3](chapter3.xhtml): Process- and Thread-Creation Notifications**   Starts
    our journey into the kernel by covering the primary technique an EDR uses to monitor
    process-creation and thread-creation events on the system and the incredible amount
    of data the operating system can provide the agent.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml): 进程和线程创建通知**   通过介绍EDR用于监控系统中进程创建和线程创建事件的主要技术，并讨论操作系统可以为代理提供的大量数据，开启了我们进入内核的旅程。'
- en: '**[Chapter 4](chapter4.xhtml): Object Notifications**   Continues our dive
    into kernel-mode drivers by discussing how an EDR can be notified when a handle
    to a process is requested.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml): 对象通知**   通过讨论EDR如何在请求进程句柄时接收到通知，继续深入探讨内核模式驱动程序。'
- en: '**[Chapter 5](chapter5.xhtml): Image-Load and Registry Notifications**   Wraps
    up the primary kernel-mode section with a walk-through of how an EDR monitors
    files, such as DLLs, being loaded into a process and how the driver can leverage
    these notifications to inject their function-hooking DLL into a new process. This
    chapter also discusses the telemetry generated when interacting with the registry
    and how it can be used to detect attacker activities.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](chapter5.xhtml): 图像加载和注册表通知**   通过讲解EDR如何监控DLL等文件加载到进程中，并如何利用这些通知将函数钩子DLL注入到新进程中，结束了内核模式部分的讨论。本章还讨论了与注册表交互时生成的遥测数据，以及如何利用这些数据检测攻击者的活动。'
- en: '**[Chapter 6](chapter6.xhtml): Filesystem Minifilter Drivers**   Provides insight
    into how an EDR can monitor filesystem operations, such as new files being created,
    and how it can use this information to detect malware trying to hide its presence.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](chapter6.xhtml): 文件系统迷你过滤驱动程序**   提供了关于EDR如何监控文件系统操作（如新文件创建）的见解，以及它如何利用这些信息检测试图隐藏其存在的恶意软件。'
- en: '**[Chapter 7](chapter7.xhtml): Network Filter Drivers**   Discusses how an
    EDR can use the Windows Filtering Platform (WFP) to monitor network traffic on
    a host and detect activities like command-and-control beaconing.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章](chapter7.xhtml): 网络过滤驱动程序**   讨论了EDR如何使用Windows过滤平台（WFP）监控主机上的网络流量，并检测诸如命令与控制信标等活动。'
- en: '**[Chapter 8](chapter8.xhtml): Event Tracing for Windows**   Dives into an
    incredibly powerful user-mode logging technology native to Windows that EDRs can
    use to consume events from corners of the operating system that are otherwise
    difficult to reach.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章](chapter8.xhtml): Windows事件追踪**   深入探讨了Windows本地的强大用户模式日志技术，EDR可以利用它从操作系统的各个角落消费事件，这些地方通常很难访问。'
- en: '**[Chapter 9](chapter9.xhtml): Scanners**   Discusses the EDR component responsible
    for determining if some content contains malware, whether it be a file dropped
    to disk or a given range of virtual memory.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 9 章](chapter9.xhtml)：扫描器**   讨论了 EDR 组件，负责判断某些内容是否包含恶意软件，无论是一个写入磁盘的文件，还是一段虚拟内存。'
- en: '**[Chapter 10](chapter10.xhtml): Antimalware Scan Interface**   Covers a scanning
    technology that Microsoft has integrated into many scripting and programming languages,
    as well as applications, to detect issues that legacy scanners can’t detect.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 10 章](chapter10.xhtml)：反恶意软件扫描接口**   介绍了一种 Microsoft 集成到许多脚本语言、编程语言和应用程序中的扫描技术，用于检测旧版扫描器无法检测的问题。'
- en: '**[Chapter 11](chapter11.xhtml): Early Launch Antimalware Drivers**   Discusses
    how an EDR can deploy a special type of driver to detect malware that runs early
    in the boot process, potentially before the EDR has a chance to start.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 11 章](chapter11.xhtml)：早期启动反恶意软件驱动程序**   讨论了 EDR 如何部署一种特殊类型的驱动程序，以便检测在启动过程中早期运行的恶意软件，可能在
    EDR 启动之前就已经运行。'
- en: '**[Chapter 12](chapter12.xhtml): Microsoft-Windows-Threat-Intelligence**   Builds
    upon the preceding chapter by discussing what is arguably the most valuable reason
    for deploying an ELAM driver: gaining access to the Microsoft-Windows-Threat-Intelligence
    ETW provider, which can detect issues that other providers miss.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 12 章](chapter12.xhtml)：Microsoft-Windows-Threat-Intelligence**   在前一章的基础上，讨论了部署
    ELAM 驱动程序的一个最有价值的原因：获得 Microsoft-Windows-Threat-Intelligence ETW 提供程序的访问权限，该提供程序能够检测其他提供程序无法发现的问题。'
- en: '**[Chapter 13](chapter13.xhtml): Case Study: A Detection-Aware Attack**   Puts
    the information gained in previous chapters into practice by walking through a
    simulated red team operation whose primary objective is to remain undetected.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 13 章](chapter13.xhtml)：案例研究：一个检测意识攻击**   通过走查一个模拟的红队操作，将前几章获得的信息付诸实践，红队的主要目标是保持不被检测到。'
- en: '**[Appendix](appendix.xhtml): Auxiliary Sources**   Discusses niche sensors
    that we don’t see deployed very frequently but that can still bring immense value
    to an EDR.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[附录](appendix.xhtml)：辅助资源**   讨论了一些小众传感器，虽然我们不常看到它们被部署，但它们仍然能为 EDR 带来巨大的价值。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Prerequisite Knowledge</samp>
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">先决知识</samp>
- en: This is a deeply technical book, and to get the most out of it, I strongly recommend
    that you familiarize yourself with the following concepts. First, knowledge of
    basic penetration testing techniques will help you better understand why an EDR
    may attempt to detect a specific action on a system. Many resources can teach
    you this information, but some free ones include Bad Sector Labs’s *Last Week
    in Security* blog series, Mantvydas Baranauskas’s blog *Red Team Notes*, and the
    SpecterOps blog.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本深度技术性的书籍，为了最大程度地从中获益，我强烈建议你熟悉以下概念。首先，了解基本的渗透测试技巧将帮助你更好地理解 EDR 为什么会尝试检测系统上的特定操作。许多资源可以教授你这些信息，但一些免费的资源包括
    Bad Sector Labs 的*《安全周报》*博客系列，Mantvydas Baranauskas 的博客 *红队笔记*，以及 SpecterOps 博客。
- en: 'We’ll spend quite a bit of time deep in the weeds of the Windows operating
    system. Thus, you may find it worthwhile to understand the basics of Windows internals
    and the Win32 API. The best resources for exploring the concepts covered in this
    book are *Windows Internals: System Architecture, Processes, Threads, Memory Management,
    and More, Part 1*, 7th edition, by Pavel Yosifovich, Alex Ionescu, Mark E. Russinovich,
    and David A. Solomon (Microsoft Press, 2017), and Microsoft’s Win32 API documentation,
    which you can find at [*https://<wbr>learn<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/windows<wbr>/win32<wbr>/api*](https://learn.microsoft.com/en-us/windows/win32/api).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将花费相当多的时间深入探讨 Windows 操作系统的细节。因此，你可能会觉得了解 Windows 内部结构和 Win32 API 的基础知识是值得的。探讨本书中所涵盖概念的最佳资源是*《Windows
    内部结构：系统架构、进程、线程、内存管理与更多，第 1 部分》*（第 7 版），由 Pavel Yosifovich、Alex Ionescu、Mark E.
    Russinovich 和 David A. Solomon 编写（微软出版社，2017年），以及微软的 Win32 API 文档，你可以在[*https://<wbr>learn<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/windows<wbr>/win32<wbr>/api*](https://learn.microsoft.com/en-us/windows/win32/api)找到该文档。
- en: Because we examine source code and debugger output in depth, you may also want
    to be familiar with the C programming language and x86 assembly. This isn’t a
    requirement, though, as we’ll walk through each code listing to highlight key
    points. If you’re interested in diving into either of these topics, you can find
    fantastic online and print resources, such as [*https://<wbr>www<wbr>.learn<wbr>-c<wbr>.org*](https://www.learn-c.org)
    and *The Art of 64-Bit Assembly Language*, Volume 1, by Randall Hyde (No Starch
    Press, 2021).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们会深入分析源代码和调试器输出，你可能也需要了解C编程语言和x86汇编语言。不过，这并不是必需的，因为我们会逐步讲解每个代码示例，重点突出关键内容。如果你有兴趣深入了解这些主题，可以找到很多优秀的在线和印刷资源，例如[*https://www.learn-c.org*](https://www.learn-c.org)
    和Randall Hyde编写的《64位汇编语言艺术》第1卷（No Starch Press，2021）。
- en: Experience with tools like *WinDbg*, the Windows debugger; *Ghidra*, the disassembler
    and decompiler; *PowerShell*, the scripting language; and the *SysInternals Suite*
    (specifically, the tools Process Monitor and Process Explorer) will aid you as
    well. Although we walk through the use of these tools in the book, they can be
    tricky at times. For a crash course, see Microsoft’s “Getting Started with Windows
    Debugging” series of articles, *The Ghidra Book* by Chris Eagle and Kara Nance
    (No Starch Press, 2020), Microsoft’s “Introduction to Scripting with PowerShell”
    course, and *Troubleshooting with the Windows Sysinternals Tools*, 2nd edition,
    by Mark E. Russinovich and Aaron Margosis (Microsoft Press, 2016).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对工具如*WinDbg*（Windows调试器）、*Ghidra*（反汇编器和反编译器）、*PowerShell*（脚本语言）以及*SysInternals
    Suite*（特别是工具Process Monitor和Process Explorer）有一定经验将对你有所帮助。虽然我们在书中会演示如何使用这些工具，但有时它们可能比较复杂。如果你想快速了解这些工具的使用，可以参考微软的《Windows调试入门》系列文章、Chris
    Eagle和Kara Nance编写的《Ghidra书》（No Starch Press，2020）、微软的《PowerShell脚本入门》课程，以及Mark
    E. Russinovich和Aaron Margosis编写的《使用Windows Sysinternals工具进行故障排除》第2版（Microsoft
    Press，2016）。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up</samp>
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置</samp>
- en: 'If you’d like to test the techniques discussed in this book, you may want to
    configure a lab environment. I recommend the following setup consisting of two
    virtual machines:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想测试本书中讨论的技术，可能需要配置一个实验室环境。我推荐以下由两台虚拟机组成的设置：
- en: 'A virtual machine running Windows 10 or later with the following software installed:
    Visual Studio 2019 or later configured for desktop C++ development, the Windows
    Driver Kit (WDK), WinDbg (available in the Microsoft store), Ghidra, and the SysInternals
    Suite.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行Windows 10或更高版本的虚拟机，并安装以下软件：Visual Studio 2019或更高版本（配置为桌面C++开发环境）、Windows驱动程序开发工具包（WDK）、WinDbg（可在微软商店获取）、Ghidra以及SysInternals
    Suite。
- en: A virtual machine running any operating system or distribution you’d like that
    can serve as a command-and-control server. You could use Cobalt Strike, Mythic,
    Covenant, or any other command-and-control framework, so long as it has the ability
    to generate agent shellcode and to execute tooling on the target system.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行任何操作系统或发行版的虚拟机，可用作命令和控制服务器。你可以使用Cobalt Strike、Mythic、Covenant或任何其他命令和控制框架，只要它能够生成代理shellcode并在目标系统上执行工具。
- en: Ideally, you should disable the antivirus and EDRs on both systems so that they
    don’t interfere with your testing. Additionally, if you plan to work with real
    malware samples, create a sandbox environment to reduce the likelihood of any
    ill effects occurring when the samples are run.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你应该禁用两个系统上的防病毒软件和EDR，以防它们干扰你的测试。此外，如果你计划使用真实的恶意软件样本，建议创建一个沙箱环境，以减少运行样本时可能出现的任何不良影响。
