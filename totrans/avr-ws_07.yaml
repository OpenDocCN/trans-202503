- en: '[7](nsp-boxall502581-0008.xhtml#rch07)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[7](nsp-boxall502581-0008.xhtml#rch07)'
- en: Using Pulse-Width Modulation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脉宽调制
- en: '![](images/nsp-boxall502581-ct.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-ct.jpg)'
- en: When you need a digital output to simulate an analog signal, such as operating
    an LED at partial brightness, you can use *pulse-width modulation (PWM)* to adjust
    the amount of time between each high and low signal from a digital output pin.
    PWM can generate various effects, such as adjusting the brightness of an LED,
    controlling the speed of an electric motor, and creating sounds using tools that
    convert electricity into vibrations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要一个数字输出模拟模拟信号时，例如让LED以部分亮度工作，你可以使用*脉宽调制（PWM）*来调整数字输出引脚之间高低信号的时间间隔。PWM可以生成多种效果，例如调节LED亮度、控制电机转速，并通过将电能转化为振动的工具产生声音。
- en: 'In this chapter, you will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将：
- en: • Learn how pulse-width modulation works and is generated by AVRs.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 学习PWM的工作原理以及AVR如何生成PWM信号。
- en: • Use PWM with ATtiny85 and ATmega328P-PU microcontrollers.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用ATtiny85和ATmega328P-PU微控制器进行PWM。
- en: • Make varying tones of sound using piezo elements with PWM.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用PWM通过压电元件制作不同音调的声音。
- en: • Learn how to use PWM to create colorful effects using RGB LEDs.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 学习如何使用PWM通过RGB LED创建多彩的效果。
- en: '[Pulse-Width Modulation and Duty Cycles](nsp-boxall502581-0008.xhtml#rah0901)'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[脉宽调制与占空比](nsp-boxall502581-0008.xhtml#rah0901)'
- en: PWM allows us to control the perceived brightness of an LED, instead of simply
    switching it on and off as we’ve done in previous chapters. The LED’s brightness
    is determined by the *duty cycle* , or the length of time the PORT *x* pin is
    on (meaning the LED is lit) versus the length of time it is off (the LED is unlit).
    Duty cycle is expressed as the percentage of “on” time. The greater the duty cycle—that
    is, the longer the PORT *x* pin is on compared to off in each cycle—the greater
    the perceived brightness of the LED connected to the pin.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: PWM允许我们控制LED的感知亮度，而不是像之前章节中那样仅仅开关LED。LED的亮度由*占空比*决定，即PORT *x* 引脚开启（意味着LED点亮）与关闭（LED熄灭）之间的时间长度。占空比表示“开启”时间的百分比。占空比越大——即PORT
    *x* 引脚在每个周期中保持开启的时间相较于关闭的时间越长——连接到该引脚的LED的感知亮度就越高。
- en: Furthermore, the higher the frequency of the PWM signal is—that is, the faster
    the signal is turned on and off—the smoother the visual effect is. If you’re controlling
    a motor, a higher PWM frequency will make the rotational speed a closer approximation
    of the actual speed required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PWM信号的频率越高——即信号开启和关闭的速度越快——视觉效果就越平滑。如果你在控制一个电机，更高的PWM频率会使电机的转速更接近实际所需的速度。
- en: '[Figure 7-1](nsp-boxall502581-0017.xhtml#f07001) shows four possible PWM duty
    cycles. The filled-in gray areas represent the amount of time that the LED is
    on; as you can see, this increases with the duty cycle.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-1](nsp-boxall502581-0017.xhtml#f07001)展示了四种可能的PWM占空比。填充的灰色区域表示LED点亮的时间；如你所见，随着占空比的增加，点亮时间也增加。'
- en: '![Diagram of four PWM duty cycles: 100%, 60%, 40%, and 20%](images/nsp-boxall502581-f07001.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![四种PWM占空比的示意图：100%、60%、40%和20%](images/nsp-boxall502581-f07001.jpg)'
- en: 'Figure 7-1: Various PWM duty cycles'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-1：各种PWM占空比
- en: We can only use certain pins on our AVR microcontrollers for PWM. For the ATtiny85,
    we use PB0, PB1, and PB4; for the ATmega328P-PU, we use PB1 to PB3 and PD3, PD5,
    and PD6\. To create a PWM signal, we need to set the required registers depending
    on the microcontroller used. I’ll demonstrate this for both microcontrollers in
    this chapter. Let’s begin with the ATtiny85.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能在AVR微控制器上使用某些引脚来实现PWM。对于ATtiny85，我们使用PB0、PB1和PB4；对于ATmega328P-PU，我们使用PB1到PB3以及PD3、PD5和PD6。为了生成PWM信号，我们需要根据所使用的微控制器设置所需的寄存器。我将在本章中展示这两款微控制器的操作。让我们从ATtiny85开始。
- en: '[Project 31: Demonstrating PWM with the ATtiny85](nsp-boxall502581-0008.xhtml#rpro31)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目31：使用ATtiny85演示PWM](nsp-boxall502581-0008.xhtml#rpro31)'
- en: In this project, you’ll learn how to trigger the available PWM outputs offered
    by the ATtiny85 microcontroller. We trigger each output slightly differently,
    but the process is always simple.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习如何触发ATtiny85微控制器提供的PWM输出。我们触发每个输出的方式略有不同，但过程总是很简单。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh0901)'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh0901)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp编程器
- en: • Solderless breadboard
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • ATtiny85 microcontroller
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATtiny85微控制器
- en: • Jumper wires
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Three LEDs
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 三个LED
- en: • Three 560 Ω resistors
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 三个560 Ω电阻
- en: Assemble the circuit as shown in [Figure 7-2](nsp-boxall502581-0017.xhtml#f07002)
    .
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 7-2](nsp-boxall502581-0017.xhtml#f07002) 所示组装电路。
- en: '![Schematic diagram for Project 31](images/nsp-boxall502581-f07002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![项目 31 的原理图](images/nsp-boxall502581-f07002.jpg)'
- en: 'Figure 7-2: Schematic for [Project 31](nsp-boxall502581-0017.xhtml#pro31)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-2：[项目 31](nsp-boxall502581-0017.xhtml#pro31) 的原理图
- en: With your circuit assembled, connect the USBasp to your microcontroller in the
    usual way.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 组装好电路后，像往常一样将 USBasp 连接到你的微控制器。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh0902)'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh0902)'
- en: Open a terminal window, navigate to the *Project 31* subfolder of this book’s
    *Chapter 7* folder, and enter the command `make flash` as usual. Once the project’s
    code has been uploaded to the microcontroller the LEDs connected to PB4, PB1,
    and PB0 should all start to fade on and off at the same time, repeatedly displaying
    rising then falling levels of brightness.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到本书*第 7 章*文件夹下的*项目 31*子文件夹，然后像往常一样输入命令`make flash`。一旦项目的代码上传到微控制器，连接到
    PB4、PB1 和 PB0 的 LED 应该同时开始渐变开关，重复显示亮度逐渐增高后逐渐降低的效果。
- en: Let’s see how this works. Open the *main.c* file for [Project 31](nsp-boxall502581-0017.xhtml#pro31)
    .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的。打开 [项目 31](nsp-boxall502581-0017.xhtml#pro31) 的 *main.c* 文件。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code defines the function `initPWM()` . The function operates every pin
    at the same time, but we’ll go over how to initialize and operate each pin one
    by one.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了函数 `initPWM()`。该函数同时操作每个引脚，但我们将逐一讲解如何初始化和操作每个引脚。
- en: We first set the required pins, PORTB0, PORTB1, and PORTB4, to outputs ❶. Next,
    in turn we address the required three registers to enable PWM on PORTB0\. To set
    the timer to fast PWM mode, we allocate the timer signal to pin PORTB0—note that
    we don’t use a prescaler, so the PWM can operate at its maximum frequency ❷. We
    only need to address one register to allow PWM over PORTB1 ❸, but using PWM on
    PORTB4 requires a different timer, so we have to address different registers ❹.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将所需的引脚 PORTB0、PORTB1 和 PORTB4 设置为输出 ❶。接下来，逐一操作所需的三个寄存器，以在 PORTB0 上启用 PWM。为了将定时器设置为快速
    PWM 模式，我们将定时器信号分配给引脚 PORTB0——请注意，我们不使用预分频器，因此 PWM 可以以其最大频率运行 ❷。我们只需操作一个寄存器以允许在
    PORTB1 上启用 PWM ❸，但在 PORTB4 上使用 PWM 需要一个不同的定时器，因此我们必须操作不同的寄存器 ❹。
- en: Now it’s time to assign values to the PWM pins to set their duty cycle. The
    microcontrollers require a value between 1 and 254, which maps out to a duty cycle
    of just over 0 to just under 100\. (If you use 0, this is a 0 percent duty cycle—that
    is, the pin will be off. If you use 255, this is a 100 percent duty cycle, so
    the pin will be on continuously.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为 PWM 引脚分配值，以设置它们的占空比了。微控制器需要一个介于 1 和 254 之间的值，这将映射到一个从 0 到接近 100 的占空比。（如果使用
    0，这就是 0 百分比占空比——也就是说，引脚将关闭。如果使用 255，这就是 100 百分比占空比，所以引脚将持续开启。）
- en: 'Three registers store the duty cycle value for our three PWM pins:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 三个寄存器存储我们三个 PWM 引脚的占空比值：
- en: • OCR0A for PORTB0
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • OCR0A 用于 PORTB0
- en: • OCR0B for PORTB1
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • OCR0B 用于 PORTB1
- en: • OCR1B for PORTB4
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • OCR1B 用于 PORTB4
- en: Next, we add a simple loop that causes the duty value to rise incrementally,
    increasing the brightness of the LEDs over time ❺. This process is then reversed
    by using another loop that decreases the brightness of the LEDs over time ❻.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个简单的循环，使占空比值逐渐增加，随着时间推移，LED 的亮度逐渐增大 ❺。然后通过另一个循环，逐渐减少 LED 的亮度 ❻。
- en: Experiment with adjusting the value in the `_delay_ms()` functions to alter
    the speed of the change in brightness. You may notice that there’s little to no
    difference in brightness between higher duty cycle values. That’s because during
    high-frequency PWM operations (anything faster than 50 cycles per second), the
    LED blinks too rapidly for the average human eye to perceive when it’s off.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试调整 `_delay_ms()` 函数中的值，以改变亮度变化的速度。你可能会注意到在较高的占空比值之间，亮度几乎没有变化。这是因为在高频 PWM 操作中（每秒
    50 次周期以上），LED 的闪烁速度过快，普通人眼无法察觉其关闭状态。
- en: '[Individual PWM Pin Control for the ATtiny85](nsp-boxall502581-0008.xhtml#rah0902)'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[ATtiny85 的独立 PWM 引脚控制](nsp-boxall502581-0008.xhtml#rah0902)'
- en: Now that you’ve assembled and tested all the PWM pins using the ATtiny85, it’s
    time to learn how to use each PWM pin so you can apply them in your own projects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经使用 ATtiny85 组装并测试了所有的 PWM 引脚，是时候学习如何使用每个 PWM 引脚，以便将它们应用到你自己的项目中了。
- en: 'To activate all the PWM pins at once, simply use the `initPWM()` function as
    used in [Project 31](nsp-boxall502581-0017.xhtml#pro31) . (You’ll learn how to
    deactivate them all later on.) To activate and deactivate each pin individually,
    follow the instructions in this list:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时激活所有PWM引脚，只需使用在[项目 31](nsp-boxall502581-0017.xhtml#pro31)中使用的`initPWM()`函数。（稍后你将学习如何停用它们。）要单独激活和停用每个引脚，请按照以下列表中的说明操作：
- en: Activating PWM on ATtiny85 pin PORTB0
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 激活 ATtiny85 引脚 PORTB0 的 PWM
- en: 'To activate PWM on PORTB0, use the following:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活 PORTB0 上的 PWM，请使用以下代码：
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can then set the duty cycle by allocating a value between 1 and 254 inclusive
    to the OCR0A register.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你可以通过将一个介于 1 和 254 之间的值分配给 OCR0A 寄存器来设置占空比。
- en: Activating PWM on ATtiny85 pin PORTB1
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活 ATtiny85 引脚 PORTB1 的 PWM
- en: 'To activate PWM on PORTB1, use the following:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活 PORTB1 上的 PWM，请使用以下代码：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can then set the duty cycle by allocating a value between 1 and 254 to the
    OCR0B register.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你可以通过将一个介于 1 和 254 之间的值分配给 OCR0B 寄存器来设置占空比。
- en: Activating PWM on ATtiny85 pin PORTB4
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活 ATtiny85 引脚 PORTB4 的 PWM
- en: 'To activate PWM on PORTB4, use the following:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活 PORTB4 上的 PWM，请使用以下代码：
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can then set the duty cycle by allocating a value between 1 and 254 to the
    OCR1B register.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你可以通过将一个介于 1 和 254 之间的值分配给 OCR1B 寄存器来设置占空比。
- en: Deactivating ATtiny85 PWM
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停用 ATtiny85 PWM
- en: 'If your project needs to use a pin for both PWM and output on or off, then
    you must deactivate PWM mode before using `PORT` `x` `|=` commands. You’ll need
    to define `initPWM()` and `disablePWM()` functions to switch PWM on and off when
    required. Use the following code to disable PWM for all the pins (PORTB0, PORTB1,
    and PORTB4):'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的项目需要同时使用某个引脚进行 PWM 和开关输出操作，那么在使用 `PORT` `x` `|=` 命令之前，你必须停用 PWM 模式。你需要定义
    `initPWM()` 和 `disablePWM()` 函数来在需要时开启和关闭 PWM。使用以下代码停用所有引脚的 PWM（PORTB0、PORTB1
    和 PORTB4）：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In general, it’s a good idea to keep these lines of code required to set up
    PWM in their own function, as in [Project 31](nsp-boxall502581-0017.xhtml#pro31)
    . Now that we’ve reviewed the ins and outs of PWM on the ATtiny85, let’s have
    some fun making noise with a piezo element.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，将设置PWM所需的这些代码行放在一个独立的函数中是个好主意，正如[项目 31](nsp-boxall502581-0017.xhtml#pro31)中所示。现在我们已经回顾了在
    ATtiny85 上使用PWM的基本方法，让我们用压电元件来玩点噪音。
- en: '[Project 32: Experimenting with Piezo and PWM](nsp-boxall502581-0008.xhtml#rpro32)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 32：实验压电元件与 PWM](nsp-boxall502581-0008.xhtml#rpro32)'
- en: A *piezo element* is a device that converts an electrical charge into a different
    form of energy. It can convert electrical energy into physical movement in the
    form of vibration, which generates sound waves that you can hear. By applying
    an electrical current and varying it using PWM, you can change the piezo’s tone.
    For this project you can use a small, prewired piezo like the one shown in [Figure
    7-3](nsp-boxall502581-0017.xhtml#f07003) .
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*压电元件*是一种将电荷转换为不同形式能量的设备。它可以将电能转换为物理运动，表现为振动，从而产生我们可以听到的声波。通过施加电流并使用PWM调节它，你可以改变压电元件的音调。对于这个项目，你可以使用一个小型的预接线压电元件，就像[图
    7-3](nsp-boxall502581-0017.xhtml#f07003)中显示的那样。'
- en: '![A prewired piezo element used for making sounds or sensing vibrations](images/nsp-boxall502581-f07003.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![用于发声或感知振动的预接线压电元件](images/nsp-boxall502581-f07003.jpg)'
- en: 'Figure 7-3: A prewired 27 mm piezo element'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-3：一个预接线的 27 毫米压电元件
- en: '[Figure 7-4](nsp-boxall502581-0017.xhtml#f07004) shows the schematic symbol
    for our piezo element.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-4](nsp-boxall502581-0017.xhtml#f07004)显示了我们压电元件的电路符号。'
- en: '![Schematic symbol for a piezo element](images/nsp-boxall502581-f07004.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![压电元件的电路符号](images/nsp-boxall502581-f07004.jpg)'
- en: 'Figure 7-4: Schematic symbol for piezo element'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-4：压电元件的电路符号
- en: In this project, you’ll learn to change the pitch of sound from a piezo element
    by adjusting a trimpot. We’ll use an ADC to read the trimpot value, then use that
    value to determine the duty cycle for PWM control of the piezo element.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习通过调整微调电位器来改变压电元件的声音音调。我们将使用一个ADC来读取电位器的值，然后用这个值来确定PWM控制压电元件的占空比。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh0903)'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh0903)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • ATtiny85 microcontroller
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATtiny85 微控制器
- en: • Jumper wires
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Prewired piezo
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 预接线压电元件
- en: • 10 kΩ breadboard-compatible linear trimpot
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 10 kΩ 面包板兼容线性微调电位器
- en: Assemble the circuit as shown in [Figure 7-5](nsp-boxall502581-0017.xhtml#f07005)
    .
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 7-5](nsp-boxall502581-0017.xhtml#f07005)中的示意图组装电路。
- en: '![Schematic diagram for Project 32](images/nsp-boxall502581-f07005.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Project 32的原理图](images/nsp-boxall502581-f07005.jpg)'
- en: 'Figure 7-5: Schematic for [Project 32](nsp-boxall502581-0017.xhtml#pro32)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-5：用于[Project 32](nsp-boxall502581-0017.xhtml#pro32)的原理图
- en: With your circuit assembled, connect the USBasp to your microcontroller via
    the solderless breadboard in the same way you have for previous projects.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装好电路后，像以往项目一样，通过无焊接面包板将USBasp连接到您的微控制器。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh0904)'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh0904)'
- en: Open a terminal window, navigate to the *Project 32* subfolder of this book’s
    *Chapter 7* folder, and enter the command `make flash` . Once the code has been
    uploaded to the microcontroller, slowly turn the trimpot in different directions,
    altering the piezo’s tone.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到本书*第7章*文件夹下的*Project 32*子文件夹，并输入命令`make flash`。一旦代码上传到微控制器，缓慢地转动电位器的不同方向，调整蜂鸣器的音调。
- en: 'To see how this works, open the *main.c* file for [Project 32](nsp-boxall502581-0017.xhtml#pro32)
    :'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此如何工作，请打开[Project 32](nsp-boxall502581-0017.xhtml#pro32)的*main.c*文件：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code recalls that from [Project 31](nsp-boxall502581-0017.xhtml#pro31)
    and the other PWM examples in this chapter. It accomplishes its goal of setting
    the duty cycle, as the code takes the 8-bit value of the ADC register and places
    it in the PWM register OCR0A.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码回顾了[Project 31](nsp-boxall502581-0017.xhtml#pro31)和本章中其他PWM示例的内容。它实现了设置占空比的目标，因为代码将ADC寄存器的8位值放入PWM寄存器OCR0A中。
- en: The code initializes the ADC and uses pin PORTB4 for the input ❶. It then initializes
    the PWM output on PB0 ❷, as in [Project 31](nsp-boxall502581-0017.xhtml#pro31)
    , starts the ADC ❸, and initializes the PWM ❹. Next, it reads the analog input
    ❺ and then finally assigns the ADC value (which falls between 0 and 255) to the
    PWM duty cycle register, thereby driving the piezo ❻.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码初始化了ADC，并使用引脚PORTB4作为输入❶。然后它初始化了PB0上的PWM输出❷，如[Project 31](nsp-boxall502581-0017.xhtml#pro31)所示，启动了ADC❸，并初始化了PWM❹。接下来，它读取模拟输入❺，最后将ADC值（介于0到255之间）分配给PWM占空比寄存器，从而驱动蜂鸣器❻。
- en: '[Individual PWM Pin Control for the ATmega328P-PU](nsp-boxall502581-0008.xhtml#rah0903)'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[ATmega328P-PU的单个PWM引脚控制](nsp-boxall502581-0008.xhtml#rah0903)'
- en: Now it’s time to move on to the PWM functions available for the ATmega328P-PU.
    [Table 7-1](nsp-boxall502581-0017.xhtml#tab0701) lists the six ATmega328P-PU pins
    that can be used with PWM.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候介绍可用于ATmega328P-PU的PWM功能了。[表7-1](nsp-boxall502581-0017.xhtml#tab0701)列出了六个可与PWM一起使用的ATmega328P-PU引脚。
- en: '| Table 7-1 : ATmega328P-PU PWM Pins |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 表7-1：ATmega328P-PU PWM引脚 |'
- en: '| --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| Port register bit | Physical pin | Duty cycle register |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 端口寄存器位 | 物理引脚 | 占空比寄存器 |'
- en: '| --- | --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| PORTB1 | 15 | OCR1A |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| PORTB1 | 15 | OCR1A |'
- en: '| PORTB2 | 16 | OCR1B |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| PORTB2 | 16 | OCR1B |'
- en: '| PORTB3 | 17 | OCR2A |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| PORTB3 | 17 | OCR2A |'
- en: '| PORTD3 | 5 | OCR2B |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| PORTD3 | 5 | OCR2B |'
- en: '| PORTD5 | 11 | OCR0B |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| PORTD5 | 11 | OCR0B |'
- en: '| PORTD6 | 12 | OCR0A |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| PORTD6 | 12 | OCR0A |'
- en: Let’s go over how to activate (and deactivate) these pins for use with PWM.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何激活（和停用）这些引脚以用于PWM。
- en: Activating PWM on ATmega328P-PU pins PORTD5/6
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 激活ATmega328P-PU引脚PORTD5/6上的PWM
- en: 'To activate PWM on PORTD5/6, use the following:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活PORTD5/6上的PWM，请使用以下方法：
- en: '[PRE6]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can then connect the PWM output to pins PORTD5/6 with:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，您可以将PWM输出连接到引脚PORTD5/6，如下所示：
- en: '[PRE7]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Set the duty cycle by allocating a value between 1 and 254 to the duty cycle
    registers. If you want to control the pins directly, to use them as regular inputs
    or outputs, you will need to disconnect them from the PWM output. You can do this
    as follows:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过为占空比寄存器分配1到254之间的值来设置占空比。如果您想直接控制引脚，使用它们作为常规输入或输出，则需要将它们从PWM输出中断开。您可以按如下方式进行操作：
- en: '[PRE8]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Activating PWM on ATmega328P-PU pins PORTB1/2
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 激活ATmega328P-PU引脚PORTB1/2上的PWM
- en: 'To activate PWM on PORTB1/2, use the following:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活PORTB1/2上的PWM，请使用以下方法：
- en: '[PRE9]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can then connect the PWM output to pins PORTB1/2 with:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，您可以将PWM输出连接到引脚PORTB1/2，如下所示：
- en: '[PRE10]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To disconnect the pins from PWM, use the following:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要断开引脚与PWM的连接，请使用以下方法：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Activating PWM on ATmega328P-PU pins PORTB3 and PORTD3
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 激活ATmega328P-PU引脚PORTB3和PORTD3上的PWM
- en: 'To activate PWM on PORTB3 and PORTD3, use the following:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活PORTB3和PORTD3上的PWM，请使用以下方法：
- en: '[PRE12]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can then connect the PWM output to pins PORTB3 and PORTD3 like so:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，您可以将PWM输出连接到引脚PORTB3和PORTD3，如下所示：
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To disconnect the pins from PWM, use the following:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要断开引脚与PWM的连接，请使用以下方法：
- en: '[PRE14]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that you can connect and disconnect pins from PWM when required only
    if you’ve run the activation code first.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，只有在首先运行激活代码之后，您才能根据需要连接或断开引脚与PWM的连接。
- en: 'You’ve already seen a few ways to use PWM in this chapter, and next I’ll give
    you one more example: generating colors using RGB LEDs.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看过本章中使用 PWM 的几种方法，接下来我将再给你一个例子：使用 RGB LED 生成颜色。
- en: '[The RGB LED](nsp-boxall502581-0008.xhtml#rah0904)'
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[RGB LED](nsp-boxall502581-0008.xhtml#rah0904)'
- en: An RGB LED is simply three LED elements—one red, one green, one blue—in a single
    enclosure, as shown in [Figure 7-6](nsp-boxall502581-0017.xhtml#f07006) . These
    LEDs are great for saving space, and you can also use them to create your own
    colors by changing the brightness of the individual elements. RGB LEDs are available in
    many sizes; one common option is 10 mm in diameter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED 实际上是由三个 LED 元件组成——一个红色，一个绿色，一个蓝色——这些元件封装在同一个外壳内，如[图 7-6](nsp-boxall502581-0017.xhtml#f07006)所示。这些
    LED 非常适合节省空间，并且你还可以通过调整单独元件的亮度来创造自己的颜色。RGB LED 有多种尺寸可选；一个常见的选择是直径为 10 毫米。
- en: '![A red, green, and blue light-emitting diode](images/nsp-boxall502581-f07006.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![红色、绿色和蓝色发光二极管](images/nsp-boxall502581-f07006.jpg)'
- en: 'Figure 7-6: Typical RGB LED'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-6：典型 RGB LED
- en: 'As you can see, RGB LEDs have four legs. As with the single-color LEDs discussed
    in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03) , there two types of these LEDs
    available: *common anode* and *common cathode* . In the common-anode configuration,
    all three LED anodes are connected, while the cathodes are separate. The common-cathode
    configuration has three separate anodes, with all three cathodes connected. [Figure
    7-7](nsp-boxall502581-0017.xhtml#f07007) shows the schematics for both.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，RGB LED 有四根引脚。与[第 3 章](nsp-boxall502581-0013.xhtml#ch03)讨论的单色 LED 一样，这些
    LED 有两种类型：*共阳极*和*共阴极*。在共阳极配置中，所有三个 LED 的阳极是连接在一起的，而阴极是分开的。共阴极配置则是三个独立的阳极，而三个阴极连接在一起。[图
    7-7](nsp-boxall502581-0017.xhtml#f07007)展示了两者的电路图。
- en: '![Schematic symbols for the two types of RGB LEDs](images/nsp-boxall502581-f07007.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![两种类型 RGB LED 的电路符号](images/nsp-boxall502581-f07007.jpg)'
- en: 'Figure 7-7: Schematic symbols for RGB LEDs: common anode (left) and common
    cathode (right)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-7：RGB LED 的电路符号：共阳极（左）和共阴极（右）
- en: The pinouts for each LED unfortunately may vary, so check with your supplier.
    However, if you cannot find this information, the longest pin is usually the common
    anode or cathode pin. You can order clear (where the body of the LED is transparent)
    or diffused (with a clouded LED body) RGB LEDs. I recommend the latter, as diffused
    LEDs work better at blending their three primary color elements to make color
    combinations.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 LED 的引脚配置可能不同，所以请向你的供应商确认。然而，如果你找不到相关信息，最长的引脚通常是共阳极或共阴极引脚。你可以选择透明（LED 外壳透明）或漫射（LED
    外壳模糊）RGB LED。我推荐选择后者，因为漫射 LED 在混合其三个基本颜色元件时效果更好，从而产生色彩组合。
- en: For the projects in this book, starting with the next one, we’ll use common-cathode
    RGB LEDs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的项目，从下一个开始，我们将使用共阴极 RGB LED。
- en: '[Project 33: Experimenting with RGB LEDs and PWM](nsp-boxall502581-0008.xhtml#rpro33)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 33：实验 RGB LED 和 PWM](nsp-boxall502581-0008.xhtml#rpro33)'
- en: This project allows you to generate various colors by mixing two of the three
    primary colors in an RGB LED with varying brightness caused by PWM. The diagram
    in [Figure 7-8](nsp-boxall502581-0017.xhtml#f07008) shows which color combinations
    will result in a given hue.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目允许你通过调整 PWM 造成的亮度变化，混合 RGB LED 中的两种基本颜色来生成各种颜色。[图 7-8](nsp-boxall502581-0017.xhtml#f07008)中的图示展示了哪些颜色组合会产生特定的色调。
- en: '![A chart showing the colors that result when primary colors are mixed](images/nsp-boxall502581-f07008.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![显示混合基本颜色后产生颜色的图表](images/nsp-boxall502581-f07008.jpg)'
- en: 'Figure 7-8: Results of mixing red, green, and blue in various combinations'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-8：红色、绿色和蓝色按不同组合混合的结果
- en: For example, mixing red and green light will create a yellow glow. By increasing
    the brightness of one color while decreasing the brightness of the other color,
    you can run through multiple shades of yellow. This project mixes only two colors,
    but you can mix three at once to create a white light if you wish in your own
    projects. You’ll use the ATmega328P-PU microcontroller for this project; it has
    many more pins than the ATtiny85, so you can use it to work with the RGB LED and
    still have pins left over for other purposes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，混合红色和绿色光将产生黄色光芒。通过增加一种颜色的亮度，同时减少另一种颜色的亮度，你可以逐渐得到多种黄色的色调。这个项目仅混合了两种颜色，但如果你愿意，也可以同时混合三种颜色，创造出白色光。在这个项目中，你将使用
    ATmega328P-PU 微控制器；它的引脚数量比 ATtiny85 多，所以你可以用它来操作 RGB LED，同时还可以保留引脚用于其他用途。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh0905)'
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh0905)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • Jumper wires
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • One diffused common-cathode RGB LED
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一颗扩散型共阴极 RGB LED
- en: • Three 560 Ω resistors
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 三个 560 Ω 电阻
- en: Assemble the circuit as shown in [Figure 7-9](nsp-boxall502581-0017.xhtml#f07009)
    .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 7-9](nsp-boxall502581-0017.xhtml#f07009) 所示组装电路。
- en: '![Schematic diagram for Project 33](images/nsp-boxall502581-f07009.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![项目 33 的电路图](images/nsp-boxall502581-f07009.jpg)'
- en: 'Figure 7-9: Schematic for [Project 33](nsp-boxall502581-0017.xhtml#pro33)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-9： [项目 33](nsp-boxall502581-0017.xhtml#pro33) 的电路图
- en: Open a terminal window, navigate to the *Project 33* subfolder of this book’s
    *Chapter 7* folder, and enter the command `make flash` . Once you’ve uploaded
    the code to the microcontroller, your RGB LED should begin to glow with constantly
    changing colors. (If your LED has a clear body, you can easily diffuse the output
    for a better effect by placing some white paper over the LED.)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到本书 *第 7 章* 文件夹中的 *Project 33* 子文件夹，并输入命令 `make flash`。上传代码到微控制器后，你的
    RGB LED 应该会开始发光，并且颜色不断变化。（如果你的 LED 透明，可以通过将一些白纸覆盖在 LED 上轻松扩散输出，从而获得更好的效果。）
- en: 'To see how this works, open the *main.c* file for [Project 33](nsp-boxall502581-0017.xhtml#pro33)
    :'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看如何实现这一点，打开 *main.c* 文件，查看 [项目 33](nsp-boxall502581-0017.xhtml#pro33)：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We begin with our usual `initPWM()` function, which sets up the PORTB1, PORTB2,
    and PORTB3 pins as PWM outputs ❷. This is followed by three simple functions,
    one for each LED ❸❹❺, that pass on the required duty cycle, to make controlling
    each of the primary colors in the LED easy when required.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从常规的 `initPWM()` 函数开始，它将 PORTB1、PORTB2 和 PORTB3 引脚设置为 PWM 输出❷。接着是三个简单的函数，每个LED一个❸❹❺，它们传递所需的占空比，这样在需要时就可以轻松控制LED中的每种基本颜色。
- en: The main code sets up PORTB1, PORTB2, and PORTB3 as output pins, then initializes
    the PWM outputs ❻. Finally, to mix the colors we use the three functions we defined
    to mix two of the LED colors by starting one color at a high level of brightness
    with the other color at a low level, then gradually decreasing and increasing
    the levels of the two colors, respectively ❼❽❾. You can adjust the speed of the
    color transition by changing the value of `wait` ❶.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 主要代码将 PORTB1、PORTB2 和 PORTB3 设置为输出引脚，然后初始化 PWM 输出❻。最后，为了混合颜色，我们使用之前定义的三个函数，通过让其中一种颜色在高亮度下启动，另一种颜色在低亮度下启动，然后逐渐增加和减少两种颜色的亮度，依次调整它们的亮度❼❽❾。你可以通过修改
    `wait` 的值来调整颜色过渡的速度❶。
- en: 'I hope you found making sound effects with the piezo element and light effects
    with the RGB LED enjoyable. You’re just getting started: there are many more uses
    for PWM, including controlling motors for robotics and electric fans, as well
    as learning how to use MOSFETs to controller larger currents. We’ll explore all
    of these in the [next chapter](nsp-boxall502581-0018.xhtml#ch08) .'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你在使用压电元件制作声音效果和使用 RGB LED 制作光效时感到愉快。你才刚刚开始：PWM有很多其他用途，包括控制机器人和电风扇的电机，以及学习如何使用
    MOSFET 来控制更大的电流。我们将在 [下一章](nsp-boxall502581-0018.xhtml#ch08) 中探索这些内容。
