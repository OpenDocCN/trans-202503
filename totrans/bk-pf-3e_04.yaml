- en: Chapter 4. Wireless Networks Made Easy
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第四章 无线网络简易设置
- en: '![Wireless Networks Made Easy](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![无线网络简易设置](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
- en: It’s rather tempting to say that on BSD—and OpenBSD, in particular—there’s no
    need to “make wireless networking easy” because it already is. Getting a wireless
    network running isn’t very different from getting a wired one up and running,
    but there are some issues that turn up simply because we’re dealing with radio
    waves and not wires. We’ll look briefly at some of the issues before moving on
    to the practical steps involved in creating a usable setup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易说，在 BSD 系统，尤其是 OpenBSD 中，不需要“简化无线网络设置”，因为它本身就已经很简单。让无线网络运行并不比让有线网络运行更复杂，但确实有一些问题是因为我们处理的是无线电波而不是电缆。我们将在继续讲解创建可用设置的实用步骤之前，简要探讨一些问题。
- en: Once we have covered the basics of getting a wireless network up and running,
    we’ll turn to some of the options for making your wireless network more interesting
    and harder to break.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们掌握了设置无线网络的基本方法，我们将转向一些选项，使你的无线网络更加有趣且更难以被破解。
- en: A Little IEEE 802.11 Background
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IEEE 802.11 背景介绍
- en: 'Setting up any network interface, in principle, is a two-step process: You
    establish a link, and then you move on to configuring the interface for TCP/IP
    traffic.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 设置任何网络接口，原则上是一个两步过程：首先建立连接，然后配置接口以支持 TCP/IP 流量。
- en: In the case of wired Ethernet-type interfaces, establishing the link usually
    consists of plugging in a cable and seeing the link indicator light up. However,
    some interfaces require extra steps. Networking over dial-up connections, for
    example, requires telephony steps, such as dialing a number to get a carrier signal.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有线以太网类型的接口，建立连接通常只是插入电缆并看到连接指示灯亮起。然而，一些接口需要额外的步骤。例如，拨号连接的网络设置需要电话步骤，比如拨打一个号码以获取载波信号。
- en: In the case of IEEE 802.11–style wireless networks, getting the carrier signal
    involves quite a few steps at the lowest level. First, you need to select the
    proper channel in the assigned frequency spectrum. Once you find a signal, you
    need to set a few link-level network identification parameters. Finally, if the
    station you want to link to uses some form of link-level encryption, you need
    to set the correct kind and probably negotiate some additional parameters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IEEE 802.11 风格的无线网络，获取载波信号涉及底层的几个步骤。首先，你需要在分配的频谱中选择正确的频道。一旦找到信号，你需要设置一些链路级网络识别参数。最后，如果你想连接的站点使用某种链路级加密，你需要设置正确的加密类型，并可能需要协商一些额外的参数。
- en: Fortunately, on OpenBSD systems, all configuration of wireless network devices
    happens via `ifconfig` commands and options, as with any other network interface.
    While most network configuration happens via `ifconfig` on other BSDs, too, on
    some systems, specific features require other configu-ration.^([[20](#ftn.ch04fn01)])
    Still, because we’re introducing wireless networks here, we need to look at security
    at various levels in the networking stack from this new perspective.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在 OpenBSD 系统上，所有无线网络设备的配置都通过 `ifconfig` 命令和选项进行，就像配置任何其他网络接口一样。虽然其他 BSD
    系统也通过 `ifconfig` 配置大多数网络设置，但在一些系统上，特定功能可能需要其他配置。^([[20](#ftn.ch04fn01)])不过，由于我们在这里介绍无线网络，所以我们需要从这个新视角来审视网络堆栈中各个层次的安全性。
- en: There are basically three kinds of popular and simple IEEE 802.11 privacy mechanisms,
    and we’ll discuss them briefly over the next sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，有三种流行且简单的 IEEE 802.11 隐私机制，我们将在接下来的章节中简要讨论它们。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*For a more complete overview of issues surrounding security in wireless networks,
    see Professor Kjell Jørgen Hole’s articles and slides at* [http://www.kjhole.com/](http://www.kjhole.com/)
    *and* [http://www.nowires.org/](http://www.nowires.org/)*.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关无线网络安全问题的更全面概述，请参见 Kjell Jørgen Hole 教授的文章和幻灯片，网址为* [http://www.kjhole.com/](http://www.kjhole.com/)
    *和* [http://www.nowires.org/](http://www.nowires.org/)*.*'
- en: MAC Address Filtering
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MAC 地址过滤
- en: The short version of the story about PF and MAC address filtering is that we
    don’t do it. A number of consumer-grade, off-the-shelf wireless access points
    offer MAC address filtering, but contrary to common belief, they don’t really
    add much security. The marketing succeeds largely because most consumers are unaware
    that it’s possible to change the MAC address of essentially any wireless network
    adapter on the market today.^([[21](#ftn.ch04fn02)])
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关于PF和MAC地址过滤的简短版本是，我们不使用它。许多消费级的现成无线接入点提供MAC地址过滤，但与普遍看法相反，它们并没有真正增加太多安全性。其营销成功主要是因为大多数消费者不知道，今天市场上几乎所有无线网络适配器的MAC地址都是可以更改的。^([[21](#ftn.ch04fn02)])
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*If you really want to try MAC address filtering, you could look into using
    the `bridge(4)` facility and the bridge-related rule options in `ifconfig(8)`
    on OpenBSD 4.7 and later. We’ll look at bridges and some of the more useful ways
    to use them with packet filtering in [Chapter 5](ch05.html "Chapter 5. Bigger
    or Trickier Networks"). Note that you can use the bridge filtering without really
    running a bridge by just adding one interface to the bridge.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你真的想尝试MAC地址过滤，可以查阅OpenBSD 4.7及以后的版本中，使用`bridge(4)`功能和`ifconfig(8)`中的桥接相关规则选项。我们将在[第5章](ch05.html
    "第5章. 更大或更复杂的网络")中探讨桥接及其与包过滤结合的更多实用方法。请注意，你可以仅通过将一个接口添加到桥接中，而不实际运行桥接，就使用桥接过滤。*'
- en: WEP
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WEP
- en: One consequence of using radio waves instead of wires to move data is that it’s
    comparatively easier for outsiders to capture data in transit over radio waves.
    The designers of the 802.11 family of wireless network standards seem to have
    been aware of this fact, and they came up with a solution that they went on to
    market under the name *Wired Equivalent Privacy*, or *WEP*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用无线电波而不是电缆传输数据的一个后果是，外部人员相对更容易捕获通过无线电波传输的数据。802.11系列无线网络标准的设计者似乎意识到了这一点，他们提出了一个解决方案，并将其推向市场，命名为*有线等效隐私*，或称*WEP*。
- en: Unfortunately, the WEP designers came up with their wired equivalent encryption
    without actually reading up on recent research or consulting active researchers
    in the field. So the link-level encryption scheme they recommended is considered
    a pretty primitive homebrew among cryptography professionals. It was no great
    surprise when WEP encryption was reverse-engineered and cracked within a few months
    after the first products were released.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，WEP的设计者在设计有线等效加密时，并没有深入研究最新的研究成果或咨询该领域的活跃研究人员。因此，他们推荐的链路级加密方案被密码学专业人士认为是相当原始的自制产品。当WEP加密在首批产品发布几个月后被逆向工程并破解时，大家并不感到惊讶。
- en: Even though you can download free tools to descramble WEP-encoded traffic in
    a matter of minutes, for a variety of reasons, WEP is still widely supported and
    used. Essentially, all IEEE 802.11 equipment available today has support for at
    least WEP, and a surprising number offer MAC address filtering, too.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以免费下载工具，在几分钟内破解WEP编码的流量，但由于多种原因，WEP仍然被广泛支持和使用。本质上，今天所有可用的IEEE 802.11设备至少支持WEP，而且惊人的是，许多设备还提供MAC地址过滤功能。
- en: You should consider network traffic protected only by WEP to be just marginally
    more secure than data broadcast in the clear. Then again, the token effort needed
    to crack into a WEP network may be sufficient to deter lazy and unsophisticated
    attackers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该将仅由WEP保护的网络流量视为比公开广播的数据稍微安全一点。不过，破解WEP网络所需的微小努力，可能足以吓退那些懒惰且技术水平低的攻击者。
- en: WPA
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WPA
- en: It dawned on the 802.11 designers fairly quickly that their WEP system wasn’t
    quite what it was cracked up to be, so they came up with a revised and slightly
    more comprehensive solution called *Wi-Fi Protected Access*, or *WPA*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 802.11的设计者们很快意识到，他们的WEP系统并不像宣传的那样强大，因此他们提出了一个修订版且稍微更全面的解决方案，称为*Wi-Fi保护访问*，或称*WPA*。
- en: WPA looks better than WEP, at least on paper, but the specification is complicated
    enough that its widespread implementation was delayed. In addition, WPA has attracted
    its share of criticism over design issues and bugs that have produced occasional
    interoperability problems. Combined with the familiar issues of access to documentation
    and hardware, free software support varies. Most free systems have WPA support,
    and even though you may find that it’s not available for all devices, the situation
    has been improving over time. If your project specification includes WPA, look
    carefully at your operating system and driver documentation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: WPA在纸面上看起来比WEP要好，但由于规范复杂，其广泛实施被推迟了。此外，WPA因设计问题和存在的一些漏洞，偶尔会产生互操作性问题，受到了批评。再加上访问文档和硬件的常见问题，免费软件的支持程度各不相同。大多数免费系统都支持WPA，尽管你可能会发现并非所有设备都支持，但随着时间推移，情况有所改善。如果你的项目规范包括WPA，务必仔细查看你的操作系统和驱动文档。
- en: And, of course, it goes almost without saying that you’ll need further security
    measures, such as SSH or SSL encryption, to maintain any significant level of
    confidentiality for your data stream.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，几乎不言而喻，为了保持数据流的机密性，你需要进一步的安全措施，如SSH或SSL加密。
- en: The Right Hardware for the Task
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务所需的正确硬件
- en: Picking the right hardware is not necessarily a daunting task. On a BSD system,
    the following simple command is all you need to enter to see a listing of all
    manual pages with the word *wireless* in their subject lines.^([[22](#ftn.ch04fn03)])
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的硬件不一定是个艰巨的任务。在BSD系统中，以下简单命令即可查看所有包含*wireless*关键词的手册页面列表。^([[22](#ftn.ch04fn03)])
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Even on a freshly installed system, this command will give you a complete list
    of all wireless network drivers available in the operating system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在刚安装的系统上，这个命令也会给出操作系统中所有可用的无线网络驱动程序的完整列表。
- en: The next step is to read the driver manual pages and compare the lists of compatible
    devices with what is available as parts or built into the systems you’re considering.
    Take some time to think through your specific requirements. For test purposes,
    low-end `rum` or `ural` USB dongles (or the newer `urtwn` and `run`) will work
    and are quite convenient. Later, when you’re about to build a more permanent infrastructure,
    you may want to look into higher-end gear, although you may find that the inexpensive
    test gear will perform quite well. Some wireless chipsets require firmware that
    for legal reasons can’t be distributed on the OpenBSD install media. In most cases,
    the *fw_update* script will be able to fetch the required firmware on first boot
    after a successful install, as long as a network connection is available. If you
    install the units in an already configured system, you can try running *fw_update*
    manually. You may also want to read [Appendix B](apb.html "Appendix B. A Note
    On Hardware Support") of this book for some further discussion.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是阅读驱动手册页面，并将兼容设备列表与可用的硬件部分或你正在考虑的系统中内置的设备进行对比。花些时间思考你具体的需求。作为测试用途，低端的`rum`或`ural`
    USB加密狗（或更新的`urtwn`和`run`）会非常有效，并且非常方便。稍后，当你准备构建一个更永久的基础设施时，可能会考虑更高端的设备，尽管你可能会发现便宜的测试设备表现得相当好。一些无线芯片组需要固件，由于法律原因，这些固件不能包含在OpenBSD安装介质中。在大多数情况下，只要网络连接可用，*fw_update*脚本在首次启动时会自动获取所需的固件。如果你在一个已经配置好的系统中安装这些设备，可以尝试手动运行*fw_update*。你还可能想阅读本书的[附录B](apb.html
    "附录B：硬件支持说明")，以获得更多讨论。
- en: Setting Up a Simple Wireless Network
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置一个简单的无线网络
- en: For our first wireless network, it makes sense to use the basic gateway configuration
    from the previous chapter as our starting point. In your network design, it’s
    likely that the wireless network isn’t directly attached to the Internet at large
    but that the wireless network will require a gateway of some sort. For that reason,
    it makes sense to reuse the working gateway setup for this wireless access point,
    with some minor modifications introduced over the next few paragraphs. After all,
    doing so is more convenient than starting a new configuration from scratch.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个无线网络，使用上一章的基本网关配置作为起点是有意义的。在你的网络设计中，无线网络很可能并不直接连接到互联网，而是需要某种形式的网关。因此，重新使用已有的工作网关设置来配置这个无线接入点是合理的，接下来的几段会对其进行一些小的修改。毕竟，这比从头开始配置更方便。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*We’re in infrastructure-building mode here, and we’ll be setting up the access
    point first. If you prefer to look at the client setup first, see [The Client
    Side](ch04.html#client_side "The Client Side").*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们现在处于基础设施建设模式，首先设置接入点。如果您更喜欢先查看客户端设置，请参见[客户端部分](ch04.html#client_side "The
    Client Side")。*'
- en: 'The first step is to make sure you have a supported card and to check that
    the driver loads and initializes the card properly. The boot-time system messages
    scroll by on the console, but they’re also recorded in the file */var/run/dmesg.boot*.
    You can view the file itself or use the `dmesg` command to see these messages.
    With a successfully configured PCI card, you should see something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是确保您拥有一个受支持的卡，并检查驱动程序是否加载并正确初始化该卡。启动时系统消息会在控制台上滚动显示，但它们也会记录在文件*/var/run/dmesg.boot*中。您可以查看该文件本身，或者使用`dmesg`命令查看这些消息。成功配置的PCI卡应该会显示类似如下内容：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the interface you want to configure is a hot-pluggable type, such as a USB
    or PC Card device, you can see the kernel messages by viewing the */var/log/messages*
    file—for example, by running `tail -f` on the file before you plug in the device.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要配置的接口是热插拔类型，例如USB或PC卡设备，您可以通过查看*/var/log/messages*文件来查看内核消息——例如，在插入设备之前，您可以运行`tail
    -f`命令查看该文件。
- en: 'Next, you need to configure the interface: first to enable the link and, finally,
    to configure the system for TCP/IP. You can do this from the command line, like
    this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要配置接口：首先启用链路，最后配置系统以支持TCP/IP。您可以通过命令行完成此操作，方法如下：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command does several things at once. It configures the `ral0` interface,
    enables the interface with the `up` parameter, and specifies that the interface
    is an access point for a wireless network with `mediaopt hostap`. Then, it explicitly
    sets the operating mode to `11g` and the channel to `11`. Finally, it uses the
    `nwid` parameter to set the network name to `unwiredbsd`, with the WEP key (`nwkey`)
    set to the hexadecimal string `0x1deadbeef9`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令一次完成多项任务。它配置了`ral0`接口，通过`up`参数启用接口，并指定该接口是无线网络的接入点，使用`mediaopt hostap`。然后，明确设置操作模式为`11g`，频道为`11`。最后，使用`nwid`参数将网络名称设置为`unwiredbsd`，WEP密钥（`nwkey`）设置为十六进制字符串`0x1deadbeef9`。
- en: 'Use `ifconfig` to check that the command successfully configured the interface:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ifconfig`检查命令是否成功配置了接口：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the contents of the `media` and `ieee80211` lines. The information displayed
    here should match what you entered on the `ifconfig` command line.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`media`和`ieee80211`行的内容。这里显示的信息应与您在`ifconfig`命令行中输入的内容匹配。
- en: 'With the link part of your wireless network operational, you can assign an
    IP address to the interface. First, set an IPv4 address:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在无线网络的链路部分正常工作后，您可以为接口分配一个IP地址。首先，设置一个IPv4地址：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Setting an IPv6 is equally straightforward:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设置IPv6也同样简单：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On OpenBSD, you can combine both steps into one by creating a */etc/hostname.ral0*
    file, roughly like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenBSD上，您可以通过创建一个*/etc/hostname.ral0*文件将这两个步骤合并为一个，大致如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, run **`sh /etc/netstart ral0`** (as root) or wait patiently for your next
    boot to complete.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以**`sh /etc/netstart ral0`**（作为root用户）运行，或者耐心等待下次启动完成。
- en: Notice that the preceding configuration is divided over several lines. The first
    line generates an `ifconfig` command that sets up the interface with the correct
    parameters for the physical wireless network. The second line generates the command
    that sets the IPv4 address after the first command completes, followed by setting
    an IPv6 address for a dual-stack configuration. Because this is our access point,
    we set the channel explicitly, and we enable weak WEP encryption by setting the
    `nwkey` parameter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的配置分为几行。第一行生成一个`ifconfig`命令，用正确的参数为物理无线网络设置接口。第二行生成命令，在第一条命令完成后设置IPv4地址，然后为双栈配置设置IPv6地址。因为这是我们的接入点，所以我们显式设置频道，并通过设置`nwkey`参数启用弱WEP加密。
- en: 'On NetBSD, you can normally combine all of these parameters in one *rc.conf*
    setting:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBSD上，通常可以将所有这些参数合并为一个*rc.conf*设置：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'FreeBSD 8 and newer versions take a slightly different approach, tying wireless
    network devices to the unified `wlan(4)` driver. Depending on your kernel configuration,
    you may need to add the relevant module load lines to */boot/loader.conf*. On
    one of my test systems, */boot/loader.conf* looks like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 8及更高版本采用稍有不同的方法，将无线网络设备绑定到统一的`wlan(4)`驱动程序。根据您的内核配置，您可能需要将相关的模块加载行添加到*/boot/loader.conf*中。在我的一个测试系统中，*/boot/loader.conf*看起来是这样的：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the relevant modules loaded, setup is a multicommand affair, best handled
    by a *start_if.if* file for your wireless network. Here is an example of an */etc/start_if.rum0*
    file for a WEP access point on FreeBSD 8:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载相关模块后，设置是一个多命令的过程，最好通过一个适用于你的无线网络的*start_if.if*文件来处理。下面是一个FreeBSD 8中用于WEP接入点的*/etc/start_if.rum0*文件示例：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After a successful configuration, your `ifconfig` output should show both the
    physical interface and the `wlan` interface up and running:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 配置成功后，`ifconfig`的输出应该显示物理接口和`wlan`接口都已启动并正在运行：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The line `status: running` means that you’re up and running, at least on the
    link level.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`status: running`这一行意味着你已经至少在链路层面上启动并运行。'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Be sure to check the most up-to-date `ifconfig` man page for other options
    that may be more appropriate for your configuration.*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*务必查看最新的`ifconfig`手册页，以获取可能更适合你配置的其他选项。*'
- en: An OpenBSD WPA Access Point
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个OpenBSD WPA接入点
- en: WPA support was introduced in OpenBSD 4.4, with extensions to most wireless
    network drivers, and all basic WPA keying functionality was merged into `ifconfig(8)`
    in OpenBSD 4.9.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: WPA支持在OpenBSD 4.4中引入，并扩展到大多数无线网络驱动程序，所有基本的WPA密钥管理功能在OpenBSD 4.9中合并到`ifconfig(8)`中。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*There may still be wireless network drivers that don’t have WPA support, so
    check the driver’s man page to see whether WPA is supported before you try to
    configure your network to use it. You can combine 802.1*x *key management with
    an external authentication server for “enterprise” mode via the `security/wpa_supplicant`
    package, but we’ll stick to the simpler preshared key setup for our purposes.*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*可能仍然有不支持WPA的无线网络驱动程序，所以在尝试配置网络以使用WPA之前，请检查驱动程序的手册页，看看是否支持WPA。你可以通过`security/wpa_supplicant`包将802.1*x密钥管理与外部认证服务器结合使用“企业”模式，但为了简便起见，我们将使用共享密钥设置。*'
- en: 'The procedure for setting up an access point with WPA is quite similar to the
    one we followed for WEP. For a WPA setup with a preshared key (sometimes referred
    to as a *network password*), you would typically write a *hostname.if* file like
    this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设置带有WPA的接入点的过程与我们为WEP配置时类似。对于带有预共享密钥的WPA设置（有时称为*网络密码*），通常会写一个类似这样的*hostname.if*文件：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you’re already running the WEP setup described earlier, disable those settings
    with the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在运行前面描述的WEP设置，可以通过以下命令禁用这些设置：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, enable the new settings with this command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令启用新的设置：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can check that the access point is up and running with `ifconfig`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`ifconfig`检查接入点是否已启动并运行：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note the `status: active` indication and that the WPA options we didn’t set
    explicitly are shown with their sensible default values.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意`status: active`的指示，以及我们没有明确设置的WPA选项，它们显示了合理的默认值。'
- en: A FreeBSD WPA Access Point
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个FreeBSD WPA接入点
- en: 'Moving from the WEP access point we configured earlier to a somewhat safer
    WPA setup is straightforward. WPA support on FreeBSD comes in the form of `hostapd`
    (a program that is somewhat similar to OpenBSD’s `hostapd` but not identical).
    We start by editing the */etc/start_if.rum0* file to remove the authentication
    information. The edited file should look something like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们之前配置的WEP接入点转到稍微安全一点的WPA设置是很简单的。FreeBSD上的WPA支持通过`hostapd`（一个与OpenBSD的`hostapd`类似但不完全相同的程序）来实现。我们首先编辑*/etc/start_if.rum0*文件，以移除认证信息。编辑后的文件应该像这样：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we add the enable line for `hostapd` in */etc/rc.conf*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在*/etc/rc.conf*中添加启用`hostapd`的行：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And finally, `hostapd` will need some configuration of its own, in */etc/ hostapd.conf*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`hostapd`需要在*/etc/hostapd.conf*中进行一些配置：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the interface specification is rather self-explanatory, while the `debug`
    value is set to produce minimal messages. The range is `0` through `4`, where
    `0` is no debug messages at all. You shouldn’t need to change the `ctrl_interface*`
    settings unless you’re developing `hostapd`. The first of the next five lines
    sets the network identifier. The subsequent lines enable WPA and set the passphrase.
    The final two lines specify accepted key-management algorithms and encryption
    schemes. (For the finer details and updates, see the `hostapd(8)` and `hostapd.conf(5)`
    man pages.)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，接口规范比较直观，而`debug`值被设置为产生最少的消息。范围是`0`到`4`，其中`0`表示没有调试消息。除非你正在开发`hostapd`，否则不需要更改`ctrl_interface*`设置。接下来的五行中的第一行设置了网络标识符。后续的行启用了WPA并设置了密码。最后两行指定了接受的密钥管理算法和加密方案。（有关详细信息和更新，请参阅`hostapd(8)`和`hostapd.conf(5)`的手册页。）
- en: 'After a successful configuration (running `sudo /etc/rc.d/hostapd force-start`
    comes to mind), `ifconfig` should produce output about the two interfaces similar
    to this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功配置后（运行 `sudo /etc/rc.d/hostapd force-start`），`ifconfig` 应该会显示类似于以下的关于两个接口的输出：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The line `status: running` means that you’re up and running, at least on the
    link level.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`status: running` 这一行意味着你已经成功启动，至少在链路层级上已经运行。'
- en: The Access Point’s PF Rule Set
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接入点的 PF 规则集
- en: 'With the interfaces configured, it’s time to start configuring the access point
    as a packet-filtering gateway. You can start by copying the basic gateway setup
    from [Chapter 3](ch03.html "Chapter 3. Into the Real World"). Enable gatewaying
    via the appropriate entries in the access point’s *sysctl.conf* or *rc.conf* file
    and then copy across the *pf.conf* file. Depending on the parts of the previous
    chapter that were most useful to you, the *pf.conf* file may look something like
    this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好接口后，接下来是将接入点配置为数据包过滤网关。你可以从[第3章](ch03.html "第3章. 进入现实世界")复制基础网关设置开始。通过在接入点的
    *sysctl.conf* 或 *rc.conf* 文件中进行适当的条目设置来启用网关功能，然后复制 *pf.conf* 文件。根据上一章中对你最有用的部分，*pf.conf*
    文件可能看起来像这样：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you’re running a PF version equal to OpenBSD 4.6 or earlier, the `match`
    rule with `nat-to` instead becomes this (assuming the external interface has one
    address, dynamically assigned):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 OpenBSD 4.6 或更早版本的 PF，`match` 规则中的 `nat-to` 将变成如下（假设外部接口只有一个地址，并且是动态分配的）：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The only difference that’s strictly necessary for your access point to work
    is the definition of `int_if`. You must change the definition of `int_if` to match
    the wireless interface. In our example, this means the line should now read as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让接入点正常工作所需的唯一差异是 `int_if` 的定义。你必须将 `int_if` 的定义修改为匹配无线接口。在我们的例子中，这意味着这一行应该改为如下所示：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: More than likely, you’ll also want to set up `dhcpd` to serve addresses and
    other relevant network information to IPv4 clients after they’ve associated with
    your access point. For IPv6 networks, you probably want to set up `rtadvd` (or
    even a DHCP6 daemon) to aid your IPv6 clients in their autoconfiguration. Setting
    up `dhcpd` and `rtadvd` is fairly straightforward if you read the man pages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，你还希望设置 `dhcpd` 来为与接入点关联后的 IPv4 客户端分配地址和其他相关的网络信息。对于 IPv6 网络，你可能需要设置 `rtadvd`（甚至是
    DHCP6 守护进程）来帮助你的 IPv6 客户端进行自动配置。如果你阅读手册页，设置 `dhcpd` 和 `rtadvd` 是相当直接的。
- en: That’s all there is to it. This configuration gives you a functional BSD access
    point, with at least token security (actually more like a *Keep Out!* sign) via
    WEP encryption or a slightly more robust link-level encryption with WPA. If you
    need to support FTP, copy the `ftp-proxy` configuration from the machine you set
    up in [Chapter 3](ch03.html "Chapter 3. Into the Real World") and make changes
    similar to those you made for the rest of the rule set.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这个配置为你提供了一个功能性的 BSD 接入点，至少通过 WEP 加密或稍微强一些的链路层加密（如 WPA）提供了基本的安全性（实际上更像是一个
    *禁止进入!* 的标志）。如果你需要支持 FTP，从你在[第3章](ch03.html "第3章. 进入现实世界")中设置的机器复制 `ftp-proxy`
    配置，并进行类似你为其余规则集所做的更改。
- en: Access Points with Three or More Interfaces
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三个或更多接口的接入点
- en: 'If your network design dictates that your access point is also the gateway
    for a wired local network, or even several wireless networks, you need to make
    some minor changes to your rule set. Instead of just changing the value of the
    `int_if` macro, you might want to add another (descriptive) definition for the
    wireless interface, such as the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网络设计要求接入点同时是有线局域网或多个无线网络的网关，你需要对规则集做一些小的调整。除了修改 `int_if` 宏的值外，你可能还需要为无线接口添加另一个（描述性）定义，例如如下所示：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Your wireless interfaces are likely to be on separate subnets, so it might
    be useful to have a separate rule for each of them to handle any IPv4 NAT configuration.
    Here’s an example for OpenBSD 4.7 and newer systems:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你的无线接口很可能位于不同的子网中，因此为每个接口单独设置一个规则来处理任何 IPv4 NAT 配置可能会很有用。以下是 OpenBSD 4.7 及更新系统的示例：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And here’s one on pre–OpenBSD 4.7 PF versions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于 OpenBSD 4.7 之前的 PF 版本的内容：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Depending on your policy, you might also want to adjust your `localnet` definition,
    or at least include `$air_if` in your `pass` rules where appropriate. And once
    again, if you need to support FTP, a separate pass with divert or redirection
    for the wireless network to `ftp-proxy` may be in order.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的策略，你可能还需要调整`localnet`定义，或者至少在适当的位置将`$air_if`包含在你的`pass`规则中。再一次，如果你需要支持FTP，可能需要为无线网络设置一个单独的pass规则，并将流量重定向或转发到`ftp-proxy`。
- en: Handling IPSec, VPN Solutions
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理IPSec，VPN解决方案
- en: You can set up *virtual private networks (VPNs)* using built-in IPsec tools,
    OpenSSH, or other tools. However, due to the perceived poor security profile of
    wireless networks in general or for other reasons, you’re likely to want to set
    up some additional security.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用内置的IPsec工具、OpenSSH或其他工具来设置*虚拟专用网络（VPN）*。然而，由于无线网络的安全性普遍较差，或者出于其他原因，你可能希望设置一些额外的安全措施。
- en: 'The options fall roughly into three categories:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 选项大致分为三类：
- en: '****SSH****. If your VPN is based on SSH tunnels, the baseline rule set already
    contains all the filtering you need. Your tunneled traffic will be indistinguishable
    from other SSH traffic to the packet filter.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****SSH****。如果你的VPN基于SSH隧道，基线规则集已经包含了你所需的所有过滤。你的隧道流量对于数据包过滤器来说将与其他SSH流量无异。'
- en: '****IPsec with UDP key exchange (IKE/ISAKMP)****. Several IPsec variants depend
    critically on key exchange via `proto udp port 500` and use `proto udp port 4500`
    for *NAT Traversal (NAT-T)*. You need to let this traffic through in order to
    let the flows become established. Almost all implementations also depend critically
    on letting ESP protocol traffic (protocol number 50) pass between the hosts with
    the following:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****带UDP密钥交换的IPsec（IKE/ISAKMP）****。几种IPsec变种严重依赖通过`proto udp port 500`的密钥交换，并使用`proto
    udp port 4500`进行*NAT穿越（NAT-T）*。你需要允许这些流量通过，以使流建立。几乎所有实现也都严重依赖允许ESP协议流量（协议号50）在主机之间传递，配置如下：'
- en: '[PRE25]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '****Filtering on IPsec encapsulation interfaces****. With a properly configured
    IPsec setup, you can set up PF to filter on the encapsulation interface `enc0`
    itself with the following:^([[23](#ftn.ch04fn04)])'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****基于IPsec封装接口的过滤****。通过正确配置的IPsec设置，你可以设置PF以在封装接口`enc0`本身上进行过滤，使用如下内容：^([[23](#ftn.ch04fn04)])'
- en: '[PRE26]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See [Appendix A](apa.html "Appendix A. Resources") for references to some of
    the more useful literature on the subject.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[附录A](apa.html "附录A. 参考资料")，其中包含一些关于该主题的有用文献。
- en: The Client Side
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端侧
- en: As long as you have BSD clients, setup is extremely easy. The steps involved
    in connecting a BSD machine to a wireless network are quite similar to the ones
    we just went through to set up a wireless access point. On OpenBSD, the configuration
    centers on the *hostname.if* file for the wireless interface. On FreeBSD, the
    configuration centers on *rc.conf* but will most likely involve a few other files,
    depending on your exact configuration.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你有BSD客户端，设置就非常简单。将BSD机器连接到无线网络的步骤与我们刚才设置无线接入点的步骤非常相似。在OpenBSD中，配置重点在于无线接口的*hostname.if*文件。在FreeBSD中，配置重点在于*rc.conf*，但根据具体配置，可能还需要涉及其他一些文件。
- en: OpenBSD Setup
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenBSD设置
- en: 'Starting with the OpenBSD case, in order to connect to the WEP access point
    we just configured, your OpenBSD clients need a *hostname.if* (for example, */etc/hostname.ral0*)
    configuration file with these lines:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以OpenBSD为例，为了连接到我们刚才配置的WEP接入点，你的OpenBSD客户端需要一个*hostname.if*（例如，*/etc/hostname.ral0*）配置文件，其中包含以下内容：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The first line sets the link-level parameters in more detail than usually required.
    Only `up` and the `nwid` and `nwkey` parameters are strictly necessary. In almost
    all cases, the driver will associate with the access point on the appropriate
    channel and in the best available mode. The second line calls for a DHCP configuration
    and, in practice, causes the system to run a `dhclient` command to retrieve TCP/IP
    configuration information. The final line invokes `rtsol(8)` to initiate IPv6
    configuration.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行比通常需要的更详细地设置了链路层参数。只有`up`、`nwid`和`nwkey`参数是严格必要的。在几乎所有情况下，驱动程序会在适当的频道和最佳可用模式下与接入点关联。第二行要求进行DHCP配置，实际上会导致系统运行`dhclient`命令以获取TCP/IP配置信息。最后一行调用`rtsol(8)`来启动IPv6配置。
- en: 'If you choose to go with the WPA configuration, the file will look like this
    instead:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择WPA配置，文件看起来会是这样的：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Again, the first line sets the link-level parameters, where the crucial ones
    are the network selection and encryption parameters `nwid` and `wpakey`. You can
    try omitting the `mode` and `chan` parameters; in almost all cases, the driver
    will associate with the access point on the appropriate channel and in the best
    available mode.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try out the configuration commands from the command line before
    committing the configuration to your */etc/hostname.if* file, the command to set
    up a client for the WEP network is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `ifconfig` command should complete without any output. You can then use
    `ifconfig` to check that the interface was successfully configured. The output
    should look something like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note that the `ieee80211:` line displays the network name and channel, along
    with a few other parameters. The information displayed here should match what
    you entered on the `ifconfig` command line.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the command to configure your OpenBSD client to connect to the WPA
    network:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The command should complete without any output. If you use `ifconfig` again
    to check the interface status, the output will look something like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Check that the `ieee80211:` line displays the correct network name and sensible
    WPA parameters.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are satisfied that the interface is configured at the link level,
    use the `dhclient` command to configure the interface for TCP/IP, like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `dhclient` command should print a summary of its dialogue with the DHCP
    server that looks something like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To initialize the interface for IPv6, enter the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `rtsol` command normally completes without any messages. Check the interface
    configuration with `ifconfig` to see that the interface did in fact receive an
    IPv6 configuration.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: FreeBSD Setup
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On FreeBSD, you may need to do a bit more work than is necessary with OpenBSD.
    Depending on your kernel configuration, you may need to add the relevant module
    load lines to */boot/loader.conf*. On one of my test systems, */boot/loader.conf*
    looks like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'With the relevant modules loaded, you can join the WEP network we configured
    earlier by issuing the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, issue this command to get an IPv4 configuration for the interface:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To initialize the interface for IPv6, enter the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `rtsol` command normally completes without any messages. Check the interface
    configuration with `ifconfig` to see that the interface did in fact receive an
    IPv6 configuration.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more permanent configuration, create a *start_if.rum0* file (replace
    *rum0* with the name of the physical interface if it differs) with content like
    this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you want to join the WPA network, you need to set up `wpa_supplicant` and
    change your network interface settings slightly. For the WPA access point, connect
    with the following configuration in your *start_if.rum0* file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You also need an */etc/wpa_supplicant.conf* file that contains the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, add a second `ifconfig_wlan0` line in *rc.conf* to ensure that `dhclient`
    runs correctly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 *rc.conf* 中添加第二行 `ifconfig_wlan0`，以确保 `dhclient` 正常运行。
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For the IPv6 configuration, add the following line to *rc.conf*:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IPv6 配置，将以下内容添加到 *rc.conf* 中：
- en: '[PRE44]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Other WPA networks may require additional options. After a successful configuration,
    the `ifconfig` output should display something like this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 WPA 网络可能需要额外的选项。在成功配置后，`ifconfig` 的输出应该类似于这样：
- en: '[PRE45]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Guarding Your Wireless Network with authpf
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 authpf 保护你的无线网络
- en: Security professionals tend to agree that even though WEP encryption offers
    little protection, it’s just barely enough to signal to would-be attackers that
    you don’t intend to let all and sundry use your network resources. Using WPA increases
    security significantly, at the cost of some complexity in contexts that require
    the “enterprise”-grade options.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 安全专家普遍认为，尽管 WEP 加密提供的保护非常有限，但它勉强足够向潜在攻击者表明你不打算让任何人都能使用你的网络资源。使用 WPA 能显著提高安全性，代价是需要一些复杂的配置，特别是在需要“企业级”选项的场景下。
- en: The configurations we’ve built so far in this chapter are functional. Both the
    WEP and WPA configurations will let all reasonably configured wireless clients
    connect, and that may be a problem in itself because that configuration doesn’t
    have any real support built in for letting you decide who uses your network.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中我们构建的配置是有效的。无论是 WEP 还是 WPA 配置，都会让所有合理配置的无线客户端连接，这本身可能就是一个问题，因为这种配置没有内建的真实支持来决定谁可以使用你的网络。
- en: As mentioned earlier, MAC address filtering is not really a solid defense against
    attackers because changing a MAC address is just too easy. The Open-BSD developers
    chose a radically different approach to this problem when they introduced `authpf`
    in OpenBSD version 3.1\. Instead of tying access to a hardware identifier, such
    as the network card’s MAC address, they decided that the robust and highly flexible
    user authentication mechanisms already in place were more appropriate for the
    task. The user shell `authpf` lets the system load PF rules on a per-user basis,
    effectively deciding which user gets to do what.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，MAC 地址过滤并不能真正有效地防御攻击者，因为更改 MAC 地址实在太简单了。当 Open-BSD 开发者在 OpenBSD 3.1 版本中引入
    `authpf` 时，他们选择了一个截然不同的方法来解决这个问题。与其将访问权限绑定到硬件标识符（如网络卡的 MAC 地址），他们决定使用已经存在的强大且灵活的用户身份验证机制来处理此问题。用户外壳
    `authpf` 允许系统根据每个用户来加载 PF 规则，实际上决定了哪个用户可以做什么。
- en: To use `authpf`, you create users with the `authpf` program as their shell.
    In order to get network access, the user logs in to the gateway using SSH. Once
    the user successfully completes SSH authentication, `authpf` loads the rules you
    have defined for the user or the relevant class of users.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `authpf`，你需要创建用户，并将 `authpf` 程序作为他们的 shell。为了获得网络访问权限，用户通过 SSH 登录到网关。一旦用户成功完成
    SSH 身份验证，`authpf` 会加载你为该用户或相关用户类别定义的规则。
- en: These rules, which usually are written to apply only to the IP address the user
    logged in from, stay loaded and in force for as long as the user stays logged
    in via the SSH connection. Once the SSH session is terminated, the rules are unloaded,
    and in most scenarios, all non-SSH traffic from the user’s IP address is denied.
    With a reasonable setup, only traffic originated by authenticated users will be
    let through.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则通常仅适用于用户登录时的 IP 地址，并且在用户通过 SSH 连接登录期间保持加载并有效。一旦 SSH 会话终止，这些规则就会卸载，在大多数情况下，来自用户
    IP 地址的所有非 SSH 流量将被拒绝。通过合理的配置，只有经过身份验证的用户产生的流量才会被允许通过。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*On OpenBSD, `authpf` is one of the login classes offered by default, as you’ll
    notice the next time you create a user with `adduser`.*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 OpenBSD 中，`authpf` 是默认提供的登录类之一，正如你下次使用 `adduser` 创建用户时会注意到的那样。*'
- en: 'For systems where the `authpf` login class isn’t available by default, you
    may need to add the following lines to your */etc/login.conf* file:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于默认没有 `authpf` 登录类的系统，你可能需要将以下几行添加到你的 */etc/login.conf* 文件中：
- en: '[PRE46]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The next couple of sections contain a few examples that may or may not fit your
    situation directly but that I hope will give you ideas you can use.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节内容包含了一些示例，虽然可能并不完全适用于你的情况，但我希望它们能为你提供一些启发，帮助你找到适合的解决方案。
- en: A Basic Authenticating Gateway
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个基本的认证网关
- en: Setting up an authenticating gateway with `authpf` involves creating and maintaining
    a few files besides your basic *pf.conf*. The main addition is *authpf.rules*.
    The other files are fairly static entities that you won’t be spending much time
    on once they’ve been created.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `authpf` 设置一个身份验证网关涉及创建并维护一些文件，除了基本的 *pf.conf* 文件之外。主要的新增文件是 *authpf.rules*。其他文件是相对静态的实体，一旦创建好，你不会再花太多时间在它们上面。
- en: Start by creating an empty */etc/authpf/authpf.conf* file. This file needs to
    be there in order for `authpf` to work, but it doesn’t actually need any content,
    so creating an empty file with touch is appropriate.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个空的 */etc/authpf/authpf.conf* 文件。这个文件需要存在才能使 `authpf` 正常工作，但实际上不需要任何内容，所以用
    touch 创建一个空文件即可。
- en: 'The other relevant bits of */etc/pf.conf* follow. First, here are the interface
    macros:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是其他相关的 */etc/pf.conf* 部分。首先，这里是接口宏：
- en: '[PRE47]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In addition, if you define a table called `<authpf_users>`, `authpf` will add
    the IP addresses of authenticated users to the table:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你定义了一个名为 `<authpf_users>` 的表，`authpf` 将把已认证用户的 IP 地址添加到该表中：
- en: '[PRE48]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you need to run NAT, the rules that take care of the translation could just
    as easily go in *authpf.rules*, but keeping them in the *pf.conf* file doesn’t
    hurt in a simple setup like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要运行 NAT，负责翻译的规则可以直接放入 *authpf.rules* 中，但在像这样简单的设置中，将其保留在 *pf.conf* 文件中不会有坏处：
- en: '[PRE49]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here’s pre–OpenBSD 4.7 syntax:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 OpenBSD 4.7 之前的语法：
- en: '[PRE50]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we create the `authpf` anchor, where rules from *authpf.rules* are loaded
    once the user authenticates:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建 `authpf` anchor，一旦用户进行身份验证，*authpf.rules* 中的规则就会被加载：
- en: '[PRE51]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'For pre–OpenBSD 4.7 `authpf` versions, several anchors were required, so the
    corresponding section would be as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 OpenBSD 4.7 之前的 `authpf` 版本，需要几个 anchor，因此相应的部分如下所示：
- en: '[PRE52]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This brings us to the end of the required parts of a *pf.conf* file for an `authpf`
    setup.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着 `authpf` 设置所需的 *pf.conf* 文件部分的结束。
- en: 'For the filtering part, we start with the block all default and then add the
    `pass` rules we need. The only essential item at this point is to let SSH traffic
    pass on the internal network:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于过滤部分，我们从默认的阻止所有流量开始，然后添加所需的 `pass` 规则。此时唯一必需的项是允许在内部网络上通过 SSH 流量：
- en: '[PRE53]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: From here on out, it really is up to you. Do you want to let your clients have
    name resolution before they authenticate? If so, put the `pass` rules for the
    TCP and UDP service domain in your *pf.conf* file, too.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，实际上完全由你决定。你是否希望在用户进行身份验证之前让客户端进行名称解析？如果是的话，也可以将 TCP 和 UDP 服务域的 `pass`
    规则放入你的 *pf.conf* 文件中。
- en: 'For a relatively simple and egalitarian setup, you could include the rest of
    our baseline rule set, changing the `pass` rules to allow traffic from the addresses
    in the `<authpf_users>` table, rather than any address in your local network:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个相对简单且平等的设置，你可以包括我们基线规则集的其余部分，将 `pass` 规则修改为允许来自 `<authpf_users>` 表中的地址的流量，而不是本地网络中的任何地址：
- en: '[PRE54]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'For a more differentiated setup, you could put the rest of your rule set in
    */etc/authpf/authpf.rules* or per-user rules in customized *authpf.rules* files
    in each user’s directory under */etc/authpf/users/*. If your users generally need
    some protection, your general */etc/authpf/authpf.rules* could have content like
    this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更为细分的设置，你可以将其余的规则集放入 */etc/authpf/authpf.rules* 中，或将每个用户的规则放在每个用户目录下的定制 *authpf.rules*
    文件中，路径为 */etc/authpf/users/*。如果你的用户通常需要一些保护，你的通用 */etc/authpf/authpf.rules* 文件可以包含如下内容：
- en: '[PRE55]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The macro `user_ip` is built into `authpf` and expands to the IP address from
    which the user authenticated. These rules will apply to any user who completes
    authentication at your gateway.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 宏 `user_ip` 内置于 `authpf` 中，并展开为用户认证时的 IP 地址。这些规则将适用于任何在你的网关上完成身份验证的用户。
- en: 'A nice and relatively easy addition to implement is special-case rules for
    users with different requirements than your general user population. If an *authpf.rules*
    file exists in the user’s directory under */etc/authpf/users/*, the rules in that
    file will be loaded for the user. This means that your naive user Peter who only
    needs to surf the Web and have access to a service that runs on a high port on
    a specific machine could get what he needs with a */etc/ authpf/users/peter/authpf.rules*
    file like this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相对简单且容易实现的功能是为需求与普通用户群体不同的用户设置特殊规则。如果用户目录下的 */etc/authpf/users/* 中存在 *authpf.rules*
    文件，那么该文件中的规则将为该用户加载。这意味着你的天真用户 Peter，只需要上网并访问在特定机器的高端口上运行的某个服务，可以通过 */etc/authpf/users/peter/authpf.rules*
    文件来满足他的需求，内容如下：
- en: '[PRE56]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'On the other hand, Peter’s colleague Christina runs OpenBSD and generally knows
    what she’s doing, even if she sometimes generates traffic to and from odd ports.
    You could give her free rein by putting this in */etc/authpf/users/christina/authpf.rules*:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Peter 的同事 Christina 运行 OpenBSD，并且通常知道自己在做什么，即使她有时会产生来自奇怪端口的流量。你可以通过在 */etc/authpf/users/christina/authpf.rules*
    中加入以下内容来给她完全的自由：
- en: '[PRE57]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This means Christina can do pretty much anything she likes over TCP/IP as long
    as she authenticates from her OpenBSD machines.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 Christina 只要从她的 OpenBSD 机器进行认证，就几乎可以在 TCP/IP 上做任何她喜欢的事情。
- en: Wide Open but Actually Shut
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 看似开放，但实际上已关闭
- en: In some settings, it makes sense to set up your network to be open and unencrypted
    at the link level, while enforcing some restrictions via `authpf`. The next example
    is very similar to Wi-Fi zones you may encounter in airports or other public spaces,
    where anyone can associate to the access points and get an IP address, but any
    attempt at accessing the Web will be redirected to one specific Web page until
    the user has cleared some sort of authentication.^([[24](#ftn.ch04fn05)])
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些设置中，配置网络在链路层保持开放和未加密，同时通过 `authpf` 强制实施一些限制是有意义的。下一个示例非常类似于你可能在机场或其他公共场所遇到的
    Wi-Fi 区域，在这些区域中，任何人都可以连接到接入点并获得 IP 地址，但任何访问 Web 的尝试都会被重定向到一个特定的网页，直到用户通过某种认证。^([[24](#ftn.ch04fn05)])
- en: 'This *pf.conf* file is again built on our baseline, with two important additions
    to the basic `authpf` setup—a macro and a redirection:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 *pf.conf* 文件再次基于我们的基础设置，加入了两个对基本 `authpf` 设置非常重要的内容——一个宏和一个重定向：
- en: '[PRE58]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `auth_web` macro and the redirection make sure all Web traffic from addresses
    that are not in the `<authpf_users>` table leads all nonauthenticated users to
    a specific address. At that address, you set up a Web server that serves up whatever
    you need. This could range from a single page with instructions on whom to contact
    in order to get access to the network all the way up to a system that accepts
    credit cards and handles user creation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`auth_web` 宏和重定向确保所有来自不在 `<authpf_users>` 表中的地址的 Web 流量都会将所有未认证的用户引导到一个特定地址。在该地址上，你可以设置一个
    Web 服务器，提供你所需的内容。这可以是一个包含联系人的单页，用于获取网络访问权限，也可以是一个接受信用卡并处理用户创建的系统。'
- en: Note that in this setup, name resolution will work, but all surfing attempts
    will end up at the `auth_web` address. Once the users clear authentication, you
    can add general rules or user-specific ones to the *authpf.rules* files as appropriate
    for your situation.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这种设置中，名称解析会正常工作，但所有上网尝试都会最终转到 `auth_web` 地址。用户通过认证后，你可以根据需要向 *authpf.rules*
    文件中添加通用规则或特定用户规则。
- en: '* * *'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[20](#ch04fn01)]) On some systems, the older, device-specific programs, such
    as `wicontrol` and `ancontrol,` are still around, but for the most part, they
    are deprecated and have long been replaced with `ifconfig` functionality. On OpenBSD,
    the consolidation into `ifconfig` has been completed.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[20](#ch04fn01)]) 在一些系统上，旧的设备特定程序，如 `wicontrol` 和 `ancontrol` 仍然存在，但大多数情况下，它们已经被弃用，并长期被
    `ifconfig` 功能所取代。在 OpenBSD 上，`ifconfig` 的整合已经完成。
- en: ^([[21](#ch04fn02)]) A quick man page lookup on OpenBSD will tell you that the
    command to change the MAC address for the interface `rum0` is simply `ifconfig
    rum0 lladdr 00:ba:ad:f0:0d:11`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[21](#ch04fn02)]) 在 OpenBSD 上快速查阅 man 页面可以告诉你，修改 `rum0` 接口的 MAC 地址的命令就是 `ifconfig
    rum0 lladdr 00:ba:ad:f0:0d:11`。
- en: ^([[22](#ch04fn03)]) In addition, it’s possible to look up man pages on the
    Web. Check *[http://www.openbsd.org/](http://www.openbsd.org/)* and the other
    project websites. They offer keyword-based man page searching.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[22](#ch04fn03)]) 此外，您还可以在 Web 上查找 man 页面。请查看 *[http://www.openbsd.org/](http://www.openbsd.org/)*
    及其他项目网站，它们提供基于关键字的 man 页面搜索。
- en: ^([[23](#ch04fn04)]) In OpenBSD 4.8, the encapsulation interface became a cloneable
    interface, and you can configure several separate `enc` interfaces. All `enc`
    interfaces become members of the `enc` interface group.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[23](#ch04fn04)]) 在 OpenBSD 4.8 中，封装接口变成了可克隆的接口，你可以配置多个独立的 `enc` 接口。所有 `enc`
    接口都会成为 `enc` 接口组的成员。
- en: ^([[24](#ch04fn05)]) Thanks to Vegard Engen for the idea and for showing me
    his configuration, which is preserved here in spirit, if not in all its details.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[24](#ch04fn05)]) 感谢 Vegard Engen 提供这个想法，并向我展示他的配置，虽然没有保留所有细节，但精神得以保留在这里。
