["```\n    \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n    ```", "```\n    **cmd /k** \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n    ```", "```\n    cmd /k \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" **x64**\n    ```", "```\n    **********************************************************************\n    ** Visual Studio 2019 Developer Command Prompt v16.9.0\n    ** Copyright (c) 2019 Microsoft Corporation\n    **********************************************************************\n    [vcvarsall.bat] Environment initialized for: 'x64'\n    ```", "```\n    C:\\>`ml64`\n    Microsoft (R) Macro Assembler (x64) Version 14.28.29910.0\n    Copyright (C) Microsoft Corporation.  All rights reserved.\n\n    usage: ML64 [options] filelist [/link linkoptions]\n    Run \"ML64 /help\" or \"ML64 /?\" for more info\n    ```", "```\n    C:\\>`cl`\n    Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29910 for x64\n    Copyright (C) Microsoft Corporation.  All rights reserved.\n\n    usage: cl [option...] filename... [/link linkoption...]\n    ```", "```\nincludelib kernel32.lib\n\n        extrn __imp_GetStdHandle:proc\n        extrn __imp_WriteFile:proc\n\n        .CODE\nhwStr   byte    \"Hello World!\"\nhwLen   =       $-hwStr\n\nmain    PROC\n\n; On entry, stack is aligned at 8 mod 16\\. Setting aside 8\n; bytes for \"bytesWritten\" ensures that calls in main have\n; their stack aligned to 16 bytes (8 mod 16 inside function).\n\n lea     rbx, hwStr\n        sub     rsp, 8\n        mov     rdi, rsp        ; Hold # of bytes written here\n\n; Note: must set aside 32 bytes (20h) for shadow registers for\n; parameters (just do this once for all functions). \n; Also, WriteFile has a 5th argument (which is NULL), \n; so we must set aside 8 bytes to hold that pointer (and\n; initialize it to zero). Finally, the stack must always be \n; 16-byte-aligned, so reserve another 8 bytes of storage\n; to ensure this.\n\n; Shadow storage for args (always 30h bytes).\n\n        sub     rsp, 030h \n\n; Handle = GetStdHandle(-11);\n; Single argument passed in ECX.\n; Handle returned in RAX.\n\n        mov     rcx, -11        ; STD_OUTPUT\n        call    qword ptr __imp_GetStdHandle \n\n; WriteFile(handle, \"Hello World!\", 12, &bytesWritten, NULL);\n; Zero out (set to NULL) \"LPOverlapped\" argument:\n\n        mov     qword ptr [rsp + 4 * 8], 0  ; 5th argument on stack\n\n        mov     r9, rdi         ; Address of \"bytesWritten\" in R9\n        mov     r8d, hwLen      ; Length of string to write in R8D \n        lea     rdx, hwStr      ; Ptr to string data in RDX\n        mov     rcx, rax        ; File handle passed in RCX\n        call    qword ptr __imp_WriteFile\n        add     rsp, 38h\n        ret\nmain    ENDP\n        END\n```", "```\nincludelib kernel32.lib\n```", "```\nml64 hw64.asm /link /subsystem:console /entry:main\n```", "```\nC:\\MASM64>**ml64 hw64.asm /link /subsystem:console /entry:main**\nMicrosoft (R) Macro Assembler (x64) Version 14.28.29910.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n Assembling: hw64.asm\nMicrosoft (R) Incremental Linker Version 14.28.29910.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/OUT:hw64.exe\nhw64.obj\n/subsystem:console\n/entry:main\n```", "```\nC:\\MASM64>**hw64**\nHello World!\n```"]