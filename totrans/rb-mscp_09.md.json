["```\nclass Quote\n  def display\n    puts \"The quick brown fox jumped over the lazy dog.\"\n  end\nend\n```", "```\n    class Quote\n   def self.display\n        puts \"The quick brown fox jumped over the lazy dog.\"\n      end\n    end\n```", "```\n class Quote\n   class << self\n        def display\n          puts \"The quick brown fox jumped over the lazy dog.\"\n        end\n      end\n    end\n```", "```\n class Quote\n    end\n\n some_quote = Quote.new\n def some_quote.display\n      puts \"The quick brown fox jumped over the lazy dog.\"\n    end\n```", "```\n    class Quote\n    end\n\n    some_quote = Quote.new\n class << some_quote\n      def display\n        puts \"The quick brown fox jumped over the lazy dog.\"\n      end\n    end\n```", "```\nclass Quote\n  def display\n    puts \"The quick brown fox jumped over the lazy dog.\"\n  end\nend\n```", "```\nmodule AllCaps\n  refine Quote do\n    def display\n      puts \"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.\"\n    end\n  end\nend\n```", "```\n Quote.new.display\n     => The quick brown...\n\n using AllCaps\n\n Quote.new.display\n     => THE QUICK BROWN...\n```", "```\np self\n => main\np Module.nesting\n => []\n```", "```\n    p self\n    p Module.nesting\n\n    class Quote\n      p self\n    => Quote\n      p Module.nesting\n    => [Quote]\n    end\n```", "```\n    p self\n    p Module.nesting\n\n    class Quote\n      p self\n      p Module.nesting\n\n      class << self\n        p self\n      => #<Class:Quote>\n        p Module.nesting\n      => [#<Class:Quote>, Quote]\n      end\n    end\n```", "```\n    p self\n    p Module.nesting\n\n    class Quote\n      p self\n      p Module.nesting\n\n      class << self\n        p self\n        p Module.nesting\n\n        def class_method\n          p self\n          p Module.nesting\n        end\n      end\n    end\n\n    Quote.class_method\n  => Quote\n  => [#<Class:Quote>, Quote]\n```", "```\nstr = \"puts\"\nstr += \" 2\"\nstr += \" +\"\nstr += \" 2\"\neval(str)\n```", "```\n    a = 2\n    b = 3\n    str = \"puts\"\n    str += \" a\"\n    str += \" +\"\n    str += \" b\"\n eval(str)\n```", "```\na = 2\nb = 3\n10.times do\n  puts a+b\nend\n```", "```\n    def get_binding\n      a = 2\n      b = 3\n   binding\n    end\n eval(\"puts a+b\", get_binding)\n```", "```\n class Quote\n      def initialize\n     @str = \"The quick brown fox\"\n      end\n    end\n    str2 = \"jumps over the lazy dog.\"\n obj = Quote.new\n obj.instance_eval do\n   puts \"#{@str} #{str2}\"\n    end\n```", "```\nclass Quote\n  def initialize\n    @str = \"The quick brown fox jumps over the lazy dog\"\n  end\n  def display\n    puts @str\n  end\nend\nQuote.new.display\n => The quick brown fox jumps over the lazy dog\n```", "```\n    class Quote\n      def initialize\n        @str = \"The quick brown fox jumps over the lazy dog\"\n      end\n   define_method :display do\n        puts @str\n      end\n    end\n```", "```\nclass Quote\n  def initialize\n    @str = \"The quick brown fox\"\n  end\nend\n```", "```\n    def create_method_using_a_closure\n      str2 = \"jumps over the lazy dog.\"\n   Quote.send(:define_method, :display) do\n        puts \"#{@str} #{str2}\"\n      end\n    end\n```", "```\ncreate_method_using_a_closure\nQuote.new.display\n => The quick brown fox jumps over the lazy dog.\n```", "```\n    class Quote\n      def initialize\n        @str = \"The quick brown fox\"\n      end\n    end\n    def create_method_using_a_closure\n      str2 = \"jumps over the lazy dog.\"\n      lambda do\n        puts \"#{@str} #{str2}\"\n      end\n    end\n Quote.send(:define_method, :display, create_method_using_a_closure)\n Quote.new.display\n```"]