- en: A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Number Bases
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The word *digit* derives from the Latin word *digitius*, meaning finger or toe.
    Of course we take this as the origin of our counting digits zero through nine,
    which we can match with our fingers (or toes). These digits form the basis of
    our base-10 or decimal number system. The positional number system commonly in
    use today is called the *Hindu–Arabic numeral system*. The works of Muhammad ibn
    Mūsā al-Khwārizm̄ī (for example *On the Calculation with Hindu Numerals*, c. 825)
    were influential in the introduction of this system. The innovation was using
    the position of each digit to represent which power of 10 to multiply the digit
    by. This made calculations much simpler than using other systems, such as Roman
    numerals.
  prefs: []
  type: TYPE_NORMAL
- en: The decimal number system assigns to each digit position a power of 10, starting
    with the rightmost digit in a string of digits. The meaning of a string of digits
    is then derived by multiplying each digit by the corresponding power of 10, as
    seen in [Figure A-1](app01.xhtml#chAfig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-1: Base-10 positional values*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is taken to mean the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 271828 = 2 ⋅ 10⁵ + 7 ⋅ 10⁴ + 1 ⋅ 10³ + 8 ⋅ 10² + 2 ⋅ 10¹ + 8 ⋅ 10⁰
  prefs: []
  type: TYPE_NORMAL
- en: 'A concise way to represent this value is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0318-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here *d*[0] = 8, *d*[1] = 2, …, *d*[5] = 2—the digits from least to most significant.
  prefs: []
  type: TYPE_NORMAL
- en: The decimal system isn’t the only possible number system. Any integer greater
    than 1 can be used as the base of a number system. If you were a citizen of a
    universe where people only had eight fingers (see [Figure A-2](app01.xhtml#chAfig2)),
    you’d probably use the octal (or base-8) number system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-2: The octal digits*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Numbers in bases other than 10 are normally printed with the base as a subscript
    of the number. A number in the octal system would be printed as 1234[8]. We can
    convert this to decimal as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0318-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As is well known, computers internally work strictly on the binary (or base-2)
    number system. Three binary digits are capable of representing the numbers from
    0 to 7, which, as we’ve seen, form the basis of the octal number system. Four
    binary digits can represent the numbers from 0 to 15 (the base-16 digits). Since
    the numbers 10 through 15 take more than one decimal digit to represent, the letters
    A through F are used instead. That is, A=10, B=11, etc. This is known as the hexadecimal
    number system. For example, the number FACE[16] = 64206, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0318-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Two hexadecimal digits (or eight binary digits) constitute what’s called a byte.
    Bytes aren’t usually used as a number basis, but they’re a common unit used to
    designate the size of computer memory.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s some Racket code that takes a positive decimal integer and returns a
    list consisting of the digits that form the binary representation of the number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This works by extracting the least significant (rightmost) binary digit and
    reducing the value of *n* by dividing by 2 to get to the next digit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Racket also provides the ˜`r` function, which takes a base-10 value and outputs
    a formatted string in another base.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
