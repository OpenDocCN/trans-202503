- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Android Services
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Android 服务
- en: One mouse click away from a disaster of unprecedented^([1](#c20-footnote-1))
    proportion in the mobile industry.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 只需轻轻点击鼠标，就可能导致移动行业前所未有的灾难^([1](#c20-footnote-1))。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Android services team slogan
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — Android 服务团队口号
- en: For the most part, the Android team operated separately from the rest of Google.
    Google funded the project and checked in with the leadership team, but otherwise
    left them alone. The Android team kept their heads down, writing the operating
    system, the tools, the apps, and everything else they needed, without interacting
    with the larger engineering organization in Google.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，Android 团队与 Google 其他团队独立运作。Google 为项目提供资金，并与领导团队保持联系，但其他方面则让他们自行决定。Android
    团队低调工作，编写操作系统、工具、应用程序及其他所需的所有内容，而无需与 Google 更大的工程团队互动。
- en: Except for the services team.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除了服务团队。
- en: 'If you’re writing a single-player game, which only needs to deal with the local
    device and storage, you can do that independently of any back-end infrastructure
    or mechanisms. But for most other applications, which deal with information outside
    of that application, or data that you want to store off-device, you are probably
    going to need to interact with systems on the backend. The application running
    locally on a device is really just a window into data and services that are all
    managed on external servers. Maps, Search, Gmail, Calendar, Contacts, Talk, YouTube:
    all of these applications rely on data and functionality that is stored on Google
    servers.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发一款单机游戏，只需处理本地设备和存储，你可以独立完成，不需要任何后端基础设施或机制。但对于大多数其他应用程序，它们需要处理应用外的信息，或是你希望存储在设备外的数据，你可能需要与后端系统进行交互。运行在设备上的应用程序，实际上只是通向存储在外部服务器上的数据和服务的窗口。地图、搜索、Gmail、日历、联系人、Talk、YouTube：所有这些应用程序都依赖于存储在
    Google 服务器上的数据和功能。
- en: Google wanted to make its applications and services available to mobile users
    through the Android operating system. So the need for figuring out how to connect
    Android devices to the Google services running on the backend was paramount.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Google 希望通过 Android 操作系统使其应用和服务能够在移动设备上使用。因此，解决如何将 Android 设备连接到 Google 后端服务的问题变得至关重要。
- en: 'To make sure that this work happened, Android started the services team, which
    was initially three people: Fred Quintana, Malcolm Handley, and Debajit Ghosh.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这项工作得以完成，Android 成立了服务团队，最初只有三个人：Fred Quintana、Malcolm Handley 和 Debajit
    Ghosh。
- en: Debajit Ghosh and Calendar
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Debajit Ghosh 和日历
- en: Debajit always assumed he would study science in college, while programming
    on the side to support his primary academic interests. But in high school, he
    realized he could just do programming as his *main* focus. So he changed direction
    and went to college in computer science, getting his master’s degree in 1998.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Debajit 一直以为他会在大学学习科学，同时通过编程来支持他的主要学术兴趣。但在高中时，他意识到他可以将编程作为自己的*主要*兴趣。因此，他改变了方向，进入计算机科学专业，1998年获得硕士学位。
- en: Debajit spent a few years working on speech recognition, which combined a growing
    interest in mobile with the ability for users to get information on the go. In
    2005, a colleague went to Google to form a speech recognition group. He reached
    out to Debajit to see if he was interested in coming to Google to work on mobile
    technology.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Debajit 花了几年时间从事语音识别工作，这项工作结合了他对移动设备日益增长的兴趣以及让用户能够随时随地获取信息的能力。2005年，一位同事加入了
    Google，组建了语音识别团队。他联系了 Debajit，看看他是否有兴趣加入 Google，参与移动技术的工作。
- en: At first, Debajit wasn’t interested, thinking, “Google? I don’t want to work
    at Google—it’s way too big of a company.” But when he thought about some of the
    mobile possibilities, he was swayed, thinking, “I’m not sure about this Google
    thing, but it’d be really interesting to learn about mobile.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，Debajit 并不感兴趣，他想：“Google？我不想去 Google 工作——那家公司太大了。”但当他想到一些移动技术的可能性时，他改变了主意，想：“我不确定
    Google 适不适合我，但了解移动技术真的很有趣。”
- en: Debajit started on Google’s small mobile team (not the Android team) in early
    2005\. The mobile team was created to make the company’s services available on
    existing mobile devices, and brought in Debajit to lead the server-side team.
    “The first project I was working on was trans-coding traditional web pages into
    what could be viewed on the really cruddy browsers you’d have on cell phones at
    that time.” The browser application on the phone would make a request to view
    a website. The content from that site would come down to the Google servers, get
    translated into something that that very limited phone device could handle, and
    that simpler version of the site would be sent down to the phone. This was similar
    to the approach that Danger used for its Hiptop phone browser years earlier, and
    WebTV for its TV browser years before that, with a server translating between
    what web pages actually looked like and what was possible to display on an actual
    device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Debajit于2005年初加入了Google的小型移动团队（不是Android团队）。该团队的任务是将公司服务提供给现有的移动设备，并邀请Debajit领导服务器端团队。“我开始做的第一个项目是将传统网页转码为可以在当时手机上极为简陋的浏览器上查看的格式。”手机上的浏览器应用会发出请求，试图查看某个网站。该网站的内容会下载到Google服务器，并转换为该有限设备可以处理的格式，然后这种简化版的网页会被发送到手机上。这与Danger多年前为Hiptop手机浏览器使用的方法相似，也与WebTV早期为其电视浏览器采用的方法类似，服务器负责转换网页的实际显示效果与设备实际能显示的内容之间的差异。
- en: In the Spring of 2005, Debajit returned from a vacation to find a stack of resumes
    on his desk, along with a request to interview the members of a startup named
    “Android” that Google was interested in acquiring. “I’m in this vacation haze,
    trying to figure out, ‘Android? What’s this Android thing?’”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年春天，Debajit度假归来时，发现桌上堆满了简历，并收到了一项任务，要面试一个名为“Android”的初创公司，Google有意收购这个公司。“我还处于度假后的迷茫状态，试图搞清楚，‘Android？这到底是个什么东西？’”
- en: He interviewed the engineers on the team, including Brian Swetland and Ficus
    Kirkpatrick. “Ficus spent a bunch of the time talking about Brian. So I got to
    know some of the personalities very early on.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 他对团队中的工程师进行了面试，包括Brian Swetland和Ficus Kirkpatrick。“Ficus花了很多时间谈论Brian，所以我很早就了解了一些团队成员的个性。”
- en: Debajit continued working on the mobile team, checking in with Andy Rubin and
    his team occasionally. Then, in late 2006 he reached out to Cédric Beust, a former
    colleague on the mobile team. He also chatted with Steve Horowitz, the engineering
    director for Android, and learned more about what they needed. The team was starting
    to think about Google services. For example, Android needed to figure out a story
    for the Calendar app, and how to sync with Google’s calendar services.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Debajit继续在移动团队工作，偶尔与Andy Rubin和他的团队进行沟通。然后，在2006年底，他联系了Cédric Beust，他曾是移动团队的同事。他还与Android的工程总监Steve
    Horowitz进行了交流，进一步了解他们的需求。团队开始考虑Google服务的内容。例如，Android需要为日历应用程序制定一个方案，并考虑如何与Google的日历服务进行同步。
- en: Meanwhile, Debajit had been working on a side project, synchronizing calendar
    information to J2ME devices. He was still interested in how to get information
    to people on the go, and calendar data was an important part of that problem.
    In talking to the Android team, he realized that, by joining them, he could make
    his side project his full time job. So he transferred to Android, joining the
    now three-person team working on Google services.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Debajit一直在做一个副项目，将日历信息同步到J2ME设备。他仍然对如何将信息传递给随时在外的人感兴趣，而日历数据是解决这一问题的重要组成部分。在与Android团队交谈时，他意识到，通过加入他们，他可以将副项目转变为全职工作。因此，他转到了Android团队，加入了现在由三人组成的Google服务开发团队。
- en: Each engineer on the team worked on services for specific applications. Fred
    Quintana worked with Jeff Hamilton, who was writing the Contacts app for Android.
    Malcolm Handley worked with Cédric on Gmail. And Debajit worked with Jack Veenstra
    on Calendar.^([2](#c20-footnote-2)) All of these applications had the same requirement
    for sending data to and from Google servers, so the team collaborated on a centralized
    sync mechanism.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 团队中的每位工程师都负责为特定应用开发服务。Fred Quintana与Jeff Hamilton合作，后者负责为Android编写联系人应用。Malcolm
    Handley与Cédric一起开发Gmail。Debajit与Jack Veenstra一起负责日历应用程序。^([2](#c20-footnote-2))
    所有这些应用程序都有相同的需求，即在Google服务器之间发送和接收数据，因此团队在一个集中式同步机制上进行了合作。
- en: 'Soon after that initial services engineering team got rolling, Andy Rubin brought
    in someone he knew from Danger to lead the project: Michael Morrissey.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在初期的服务工程团队开始运作后，Andy Rubin从他在Danger时认识的人那里引入了一位领导者来带领这个项目：Michael Morrissey。
- en: Michael Morrissey and the Services Team
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Michael Morrissey与服务团队
- en: Michael Morrissey went to college and grad school in math, but realized he’d
    rather do programming.^([3](#c20-footnote-3)) He started playing around with a
    BeBox and eventually ended up getting a job at Be.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Michael Morrissey在大学和研究生院学的是数学，但他意识到自己更喜欢做编程。^([3](#c20-footnote-3))他开始玩BeBox，最终得到了Be的工作。
- en: One of the things that Michael found most interesting was printing—he enjoyed
    the interaction of the OS, the drivers, and the graphics code. This was a good
    thing, because the state of printing on BeOS was terrible at the time. Michael
    remembered, “Jean-Louis Gassée, the founder and CEO of Be, was really angry one
    day that he couldn’t print. He always had to switch to a Mac to print something.
    He was really, really mad.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Michael最感兴趣的事情之一是打印——他喜欢操作系统、驱动程序和图形代码之间的互动。这对他来说是件好事，因为当时BeOS的打印状态非常糟糕。Michael记得，“Jean-Louis
    Gassée，Be的创始人兼首席执行官，有一天因为无法打印而非常生气。他总是必须切换到Mac上打印东西。他真的，非常生气。”
- en: Michael encouraged external developers to write printer drivers for Be. That’s
    how he first met Mathias Agopian (who later started Android’s graphics team).
    “He had written all these amazing Epson drivers. He was really into the color
    side of it. He kept sending these drivers in.” Mathias was doing this work as
    a hobby, but he eventually joined Be.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Michael鼓励外部开发者为Be编写打印机驱动程序。这也是他第一次遇到Mathias Agopian（后来加入了Android的图形团队）。 “他编写了所有这些了不起的Epson驱动程序。他非常热衷于色彩方面的工作。他一直在不断发送这些驱动程序。”Mathias做这些工作是作为兴趣爱好，但最终他加入了Be。
- en: Michael left Be after an uninspiring IPO and an ensuing and doomed pivot to
    an Internet Appliance device. On a suggestion from Hiroshi Lockheimer, he ended
    up at Danger in March of 2000\. At first, the company was working on a small device
    that made it possible to carry around your contacts and email, and then sync to
    other devices by connecting them. But the dot-com implosion, which started soon
    after Michael arrived, forced them to start looking into other product directions,
    ending up with Danger’s Hiptop phone.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Michael在Be经历了一个毫无灵感的首次公开募股（IPO）后，离开了公司，并且公司接着转向了一个注定失败的互联网设备。根据Hiroshi Lockheimer的建议，他最终于2000年3月加入了Danger。最初，公司在开发一款小型设备，可以携带联系人和电子邮件，然后通过连接其他设备进行同步。但是在Michael加入后不久，互联网泡沫破裂，迫使公司开始考虑其他产品方向，最终推出了Danger的Hiptop手机。
- en: During his time at Danger, Michael worked on back-end services, connecting applications
    on the phone to data on Danger servers and to the internet in general. “I loved
    server-side stuff, so I started building out the backend, and the protocol between
    the device and the server.” For example, Danger phone users had many different
    kinds of email services they needed to connect to. Rather than handle all of those
    services locally on the device, the Danger servers would connect to those various
    email services and translate the results into a single protocol that Danger devices
    understood. Similarly, the browser worked by having the servers translate full
    web pages into simplified representations that were sent down to the phone.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Danger工作的期间，Michael负责后端服务，将手机上的应用程序与Danger服务器上的数据以及互联网进行连接。“我喜欢服务器端的工作，于是我开始构建后端和设备与服务器之间的协议。”例如，Danger手机用户需要连接许多不同种类的电子邮件服务。Danger服务器不会将这些服务都本地化到设备上，而是通过服务器连接这些不同的电子邮件服务，并将结果翻译成Danger设备能够理解的单一协议。同样，浏览器也是通过服务器将完整的网页翻译成简化版，并发送到手机上。
- en: One of the innovations at Danger was a persistent connection between a device
    and the servers. Through this connection, a device would get new email or messages
    immediately. This was huge back in 2002\. Even if you had one of the few phones
    at that time with email capability, those devices typically required you to synchronize
    them manually with your computer. So you would get that message about the meeting
    you needed to attend an hour after it ended. But on Danger phones, you would know
    that you were missing the meeting as it was happening.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Danger的创新之一是设备与服务器之间的持久连接。通过这种连接，设备可以立即收到新的电子邮件或消息。这在2002年是一个巨大的突破。即使你当时拥有少数几款具备电子邮件功能的手机，这些设备通常也需要手动与计算机同步。所以，你会在会议结束一小时后才收到关于你需要参加的会议的消息。但在Danger手机上，你会在会议进行时就知道自己错过了会议。
- en: In 2005, Michael moved on from Danger to Microsoft, enticed by a nascent project
    to create Microsoft phones. At the time, Microsoft licensed their OS to manufacturers
    like HTC. But someone at Microsoft envisioned a future where the company would
    also make its own phones. This is basically the model that Apple pursued, but
    with the addition of having a licensable OS (like Android, except that Android
    is free).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2005 年，Michael 离开 Danger 加入微软，受到一个新兴项目的吸引，该项目旨在制造微软手机。当时，微软将操作系统授权给像 HTC 这样的制造商。但微软内部有人设想了一个未来，认为公司也可以制造自己的手机。这基本上就是苹果所追求的模式，只不过微软当时的操作系统是可以授权的（类似于
    Android，不过 Android 是免费的）。
- en: But the project had a hard time getting traction in the company, since it was
    running counter to Microsoft’s traditional software business. In one frustrating
    meeting, Michael recounted that an executive wouldn’t sign off on their phone
    being a Windows device because it wouldn’t run PowerPoint, even though that use
    case was not the point of the phone and the very limited device was ill-equipped
    to take on that additional burden. Through meetings like this and various other
    obstacles, the project had a hard time making forward progress.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但该项目在公司内部难以获得支持，因为它与微软传统的软件业务背道而驰。在一次令人沮丧的会议中，Michael 回忆说，一位高管因为手机无法运行 PowerPoint
    而拒绝签署该手机为 Windows 设备，尽管这个应用场景并不是手机的重点，而且这个功能非常有限的设备根本无法承担额外的负担。通过类似的会议和其他各种障碍，该项目在推进过程中遇到了很大困难。
- en: Meanwhile, Andy Rubin kept checking in with Michael every quarter to see if
    he wanted to come help out on Android. Eventually, Michael ran out of patience
    with the project at Microsoft and joined Android to lead the services team in
    the Spring of 2007\. He looked at where the team was at and told Andy and Steve
    what they needed to do. “They were like, ‘Great! Go. Run. Do this.’”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Andy Rubin 每个季度都会与 Michael 联系，看看他是否想来帮助 Android。最终，Michael 对微软的项目失去了耐心，于
    2007 年春季加入了 Android，领导服务团队。他看了看团队的现状，告诉 Andy 和 Steve 他们需要做什么。“他们说，‘太棒了！去吧。去做。’”
- en: 'Michael helped organize the team to get all of the right things happening.
    “I had had the luxury of working on this stuff at Danger, so I knew a pattern
    that would work for these things. I saw the bigger picture, in terms of how the
    services had to be architected: how you would build a persistent connection, what
    the transport layer should look like, and all the landmines you would have to
    watch out for.”'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Michael 帮助组织团队，确保所有事情都能顺利进行。“我在 Danger 工作时有幸接触过这些事情，所以我知道什么样的模式适用于这些事情。我看到了更大的图景，理解服务架构的必要性：如何建立持久连接，传输层应该是什么样的，以及你需要注意的所有‘地雷’。”
- en: Michael also worked on growing the team. He needed people who knew how to deal
    with Google infrastructure. “One of the things I realized pretty early on was
    that we wouldn’t get anywhere unless we had people who came from inside of Google,
    because Google had such a weird way of doing things. If we brought in people who
    had the kind of domain knowledge of the mobile industry, but not the Google knowledge,
    that wouldn’t be good because it would take them forever to get through the Google
    machinery. I thought it would be faster if we took people who were at Google and
    transferred them onto Android and instructed them about the domain of mobile along
    the way.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Michael 也在努力扩大团队规模。他需要那些懂得如何处理 Google 基础设施的人。“我很早就意识到，如果我们没有来自 Google 内部的人，我们就不会有任何进展，因为
    Google 做事情的方式非常独特。如果我们引入那些拥有移动行业领域知识的人，但没有 Google 知识的人，那就不好，因为他们需要花费很长时间才能适应 Google
    的工作流程。我觉得，如果我们从 Google 内部找人，然后把他们转到 Android，并且在此过程中向他们传授移动领域的知识，会更有效率。”
- en: 'One of the early problems to solve was push functionality: when something changed
    on the server side (for example, an email arriving in the user’s inbox, or a calendar
    event being updated), the server needed to update the device so that the data
    on the phone and the server would match. Debajit coined the term “tickle.” “We
    wanted to ‘tickle’ the device. We came up with terms like Light Tickle, letting
    the device know that something’s changed, please sync. Heavy tickle: including
    the payload. We favored a Light Tickle approach, but it depended on the use case.”'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个早期需要解决的问题是推送功能：当服务器端发生变化时（例如，用户的邮箱收到新邮件，或者日历事件更新），服务器需要更新设备，以确保手机上的数据与服务器上的数据匹配。Debajit
    创造了“tickle”这个术语。“我们想要‘tickle’设备。我们提出了像 Light Tickle 这样的术语，告诉设备发生了变化，请进行同步。Heavy
    tickle：包括负载。我们更倾向于使用 Light Tickle 方法，但这取决于具体的使用场景。”
- en: The team came up with an approach where the phone would have a single, dedicated
    connection to Google servers on the backend. The connection, called the Mobile
    Connection Server (MCS), would be persistent, so that messages could always be
    sent or received, ensuring that the phone would be notified whenever there was
    new information on the server. Each application had its own specific requirements
    for data, but they all shared this single connection through which the server
    would alert the device that something changed. The connection was also used for
    the initial Google Talk functionality, to send and receive messages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 团队提出了一种方法，手机将与Google服务器后端建立一个单一的、专用的连接。这个连接被称为移动连接服务器（MCS），将是持久的，以确保信息可以随时发送或接收，保证手机在服务器上有新信息时能得到通知。每个应用都有其特定的数据需求，但它们都共享这个单一的连接，通过这个连接，服务器会提醒设备某些信息已发生变化。该连接还用于最初的Google
    Talk功能，用于发送和接收消息。
- en: Establishing that persistent connection back to Google servers wasn’t just a
    technical problem; it was also one of constrained resources.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 建立与Google服务器的持久连接不仅是一个技术问题，还涉及到资源有限的问题。
- en: '![](image_fi/502680c20/f20001.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c20/f20001.png)'
- en: Michael Morrissey, October 21, 2008—the day before the G1 launch (picture courtesy
    Brian Swetland)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Michael Morrissey，2008年10月21日——G1发布前一天（图片由Brian Swetland提供）
- en: The networking ops team controlled the persistent connection mechanism that
    Android needed. At that time, Google worked on the assumption that everything
    needing a network connection was web-based; data transfer requests used standard
    web HTTP request mechanisms. But Android needed to use a completely different
    protocol, so they required a dedicated network resource called a Virtual IP (VIP).
    The problem was, the network team didn’t want to give them one. “The way that
    Google was built, for a whole bunch of boring reasons that I won’t go into, these
    were extremely rare. There was literally only capacity for only about 200 of them.
    A bunch of them were used, and the network team would not give them out at all.”
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 网络运维团队控制着Android所需的持久连接机制。当时，Google假设所有需要网络连接的东西都是基于Web的；数据传输请求使用标准的Web HTTP请求机制。但Android需要使用完全不同的协议，因此他们需要一个专用的网络资源，叫做虚拟IP（VIP）。问题是，网络团队不愿意给他们提供一个。“Google的构建方式，出于一些无聊的原因我不想细说，这些VIP非常稀缺。实际上，只能容纳大约200个。已经有一些被占用了，网络团队根本不愿意发放。”
- en: 'Debajit and Michael met often with the networking team to persuade them to
    give a VIP to Android. These kind of discussions were not new to Michael: “A lot
    of my job was running around trying to convince people on Gmail, and Calendar,
    and Contacts, and all these other teams that this was a big thing for Google,
    and they should be helping us with engineering on their side and SRE^([4](#c20-footnote-4))
    support.”'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Debajit和Michael经常与网络团队会面，劝说他们为Android提供VIP。这类讨论对Michael来说并不陌生：“我的很多工作都是四处奔走，试图说服Gmail、日历、联系人以及所有其他团队，这对Google来说是一个重要的事情，他们应该在工程和SRE^([4](#c20-footnote-4))支持方面帮助我们。”
- en: Finally, networking ops relented and gave them the VIP they needed on a provisional
    basis, along with a friendly wager. They said that if Android didn’t reach a million
    users in the first six months, they would take back the VIP, and Michael and Debajit
    would owe them a case of whisky. Debajit remembered, “Whisky was definitely part
    of this discussion. That was the currency.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，网络运维团队让步，临时为他们提供了所需的VIP，并附带了一场友好的赌注。他们说，如果Android在前六个月内没有达到一百万用户，他们将收回VIP，而Michael和Debajit则需要给他们送上一箱威士忌。Debajit记得：“威士忌绝对是讨论的一部分，那就是我们的货币。”
- en: They were able to set up the persistent connection and get MCS up and running,
    on port number 5228.^([5](#c20-footnote-5))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 他们成功建立了持久连接，并让MCS在5228端口号上运行。^([5](#c20-footnote-5))
- en: Android won the bet, though Michael said it depended on when you defined the
    timeframe. The networking ops team said that it was from the moment they gave
    them the VIP, whereas Michael defined it from the moment 1.0 launched. In any
    case, it was obvious at that time that Android was successful enough to warrant
    not losing the connection to all of those Android devices.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Android赢得了赌注，尽管Michael表示，这取决于你如何定义时间框架。网络运维团队说，从他们给了VIP的那一刻起算，而Michael则从1.0版本发布的那一刻起算。无论如何，当时显然Android已经足够成功，不会失去与这些Android设备的连接。
- en: Launch Fire Drill
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动消防演习
- en: Android’s unique requirements for persistent connections meant that Android
    needed dedicated servers in specific data centers. Anyone dealing with data knows
    that you always need a backup in case something goes wrong with the main system.
    It’s why we have redundant disk arrays and backup storage, and it’s why many households
    have two parents so that the children can ask the other parent if they don’t get
    the answer they want the first time around.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Android 对持久连接的独特需求意味着它需要在特定数据中心配置专用的服务器。任何涉及数据的工作都知道，必须准备备份以防主系统出现故障。这就是为什么我们有冗余磁盘阵列和备份存储的原因，也正因为如此，许多家庭会有两个父母，以便孩子可以在第一次得不到答案时去问另一个父母。
- en: But Android wasn’t just about serving a single user, or a small number of them;
    they needed a system that would scale to many, many more users. One backup site
    wouldn’t be enough. It was entirely possible for one system to go down. And it
    was possible, albeit unlikely, that a second system would also have problems.
    So they enabled a third data center just in case; three would surely be enough
    to cover all of these situations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Android 不仅仅是为了服务单个用户，或少数几个用户；他们需要一个能够扩展到更多用户的系统。一个备份站点是不够的。一个系统完全可能会宕机。而且，虽然不太可能，但第二个系统也可能会出现问题。因此，他们启用了第三个数据中心以防万一；三个肯定足够应对所有这些情况。
- en: 'Launch day: October 22, 2008\. One of Android’s servers had already gone down
    earlier in the week, but was fortunately working again in time for the launch.
    On launch day, a second server went down due to “unplanned maintenance.” Google
    wanted to work on it, so they just took it out of the system. So immediately,
    on launch day, Android was down to two servers. Fortunately, two was still enough
    for a robust, fail-safe system.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日：2008年10月22日。Android的一个服务器在那周早些时候已经宕机，但幸运的是在发布前恢复了。发布当天，第二个服务器由于“计划外维护”宕机。谷歌想要进行维护，所以直接将其从系统中移除。因此，在发布当天，Android只剩下了两台服务器。幸运的是，两个服务器仍然足够支撑一个强大且具有故障容错的系统。
- en: Then one of those servers caught fire.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后其中一台服务器着火了。
- en: There was an overheating issue in the data center that day, so they had to shut
    down the system to work on it. Michael said, “We were really sweating bullets—we
    were down to a single data center! We just lost two; if that third one went down,
    none of the sync stuff would work properly—there would be no chat or whatever.
    We were really panicked.”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 那天数据中心出现了过热问题，因此他们不得不关闭系统进行处理。迈克尔说：“我们真的是汗流浃背——我们只剩下一个数据中心！我们失去了两个；如果第三个也挂了，所有同步功能就无法正常工作——就不能有聊天什么的了。我们真的慌了。”
- en: That last server stayed up, so there was no outage. But the team had come a
    lot closer to failure than they thought they would.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后那个服务器保持运行，所以没有发生停机。但团队实际上距离失败比他们预想的要近得多。
- en: Dan Egnor and OTAs
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dan Egnor 和 OTA
- en: If you’re not careful, your OTA download can brick^([6](#c20-footnote-6)) the
    world.
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果不小心，你的 OTA 下载可能会导致世界“死机”^([6](#c20-footnote-6))。
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Michael Morrissey (as remembered by Dan Egnor)
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——迈克尔·莫里西（由丹·埃格诺回忆）
- en: Since the beginning, one of the impressive things about the Android operating
    system is its Over-the-Air (OTA) update system. Occasionally (or too frequently,
    if you’re running internal, pre-release builds), you get a notification on your
    phone that the system would like to update itself. Eventually you get tired of
    its incessant nagging, tell it to go ahead, and then it does its thing. It downloads
    the update, reboots, configures itself, and shows the login screen; it’s ready
    to go.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，Android 操作系统的一个令人印象深刻的特点就是其无线（OTA）更新系统。偶尔（或者，如果你在运行内部的预发布版本，频率会更高），你的手机会收到系统需要更新的通知。最终你会厌倦它不断的提醒，决定让它继续更新，然后它就开始了。它下载更新，重启，进行配置，并显示登录界面；一切准备就绪。
- en: It may not be obvious as a user, but you’ve just had your phone completely replace
    the fundamental pieces of itself on the fly, and it all just worked. It’s like
    having your brain swapped out while you’re standing in line at the coffee shop,
    and then continuing to order that coffee, as if nothing happened.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，这可能不太明显，但你已经让手机在运行过程中完全替换了它的核心部分，而且一切都顺利运行。这就像是你在咖啡店排队时，大脑被替换了，然后继续点咖啡，仿佛什么都没发生过。
- en: And it all just works. Every time. Well, okay, there was that one time. . . .
    More about that later.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 而且一切都正常运作。每次都是如此。嗯，好吧，有那么一次……稍后再讲。
- en: Early on, the team recognized the importance of being able to update the phones
    remotely. Updates might be needed for something as major as the next release of
    the platform (like upgrading from, say, Android 8.1 Oreo to Android 9 Pie) or
    something smaller, like a monthly security/bug-fix release. Or maybe there would
    even be the need for an emergency fix if something went horribly wrong with a
    release. In any case, there needed to be a mechanism for devices to get these
    updates without having to go through partners, carriers, and anything else that
    might stand in the way of Android updates getting out to users.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，团队就认识到远程更新手机的重要性。更新可能是针对平台下一个版本的重大更新（例如从Android 8.1 Oreo升级到Android 9 Pie），也可能是较小的更新，比如每月的安全补丁或漏洞修复更新。或者，如果发布出现严重问题，可能还需要紧急修复。无论如何，必须有一种机制，让设备能够接收这些更新，而无需通过合作伙伴、运营商或其他可能阻碍Android更新传播的渠道。
- en: In August of 2007, Michael Morrissey brought in Dan Egnor to work on the update
    system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年8月，Michael Morrissey把Dan Egnor带进来，负责更新系统的工作。
- en: Dan was programming in childhood, hanging out in the computer lab at the college
    where his mother taught. Eventually, the college cracked down and wouldn’t allow
    faculty kids in the lab, at which point his mother got him an Atari 400\. “I used
    it intensively. All of the grownups were impressed at how fast I could type on
    this ridiculous membrane keyboard.”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Dan从小就开始编程，常常待在母亲所在大学的计算机实验室里。最终，学校加强了管理，不允许教职工的子女进入实验室，这时他的母亲给他买了一台Atari 400。“我用得非常频繁。所有的大人都对我在这个滑稽的薄膜键盘上打字的速度感到印象深刻。”
- en: After college, he ended up at Microsoft, then a startup, then as a quant^([7](#c20-footnote-7))
    on Wall Street. In 2002, Google held a programming contest, which Dan entered
    for fun, and won. “They gave a corpus of documents and said to do something fun
    with it. I made a little geographical search app. They flew me to Mountain View,
    had me talk to a bunch of people and asked if I was interested in a job.”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大学毕业后，他先是在微软工作，然后去了一个初创公司，接着成为了华尔街的一名量化分析师^([7](#c20-footnote-7))。2002年，谷歌举办了一场编程竞赛，Dan出于兴趣参加了，并获得了胜利。“他们提供了一些文档，并让我们做些有趣的事情。我做了一个小型的地理搜索应用。他们把我飞到山景城，让我和一群人谈话，并问我是否有兴趣加入他们的团队。”
- en: Dan turned them down. He wanted to stay in New York and Google did not have
    an office there at that time. His rejection confused the team at Google, since
    the contest was meant as a recruiting ploy. A year later, Google opened a New
    York office and Dan signed on as the second employee. He worked on search and
    maps-related projects, eventually moving out to Mountain View.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Dan拒绝了他们的邀请。他希望留在纽约，而谷歌那时在纽约没有办公室。他的拒绝让谷歌团队感到困惑，因为那场竞赛本来是作为招聘手段的。一年后，谷歌在纽约开设了办公室，Dan作为第二名员工加入了公司。他开始从事搜索和地图相关的项目，最终搬到了山景城。
- en: Meanwhile, Dan heard rumors, along with the rest of Google, about what was happening
    in that skunkworks project of Andy Rubin’s. “It was all very secretive. ‘Are they
    making Cameras? Andy Rubin—he was the guy at Danger, right?’”
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Dan和谷歌的其他人一起听到了一些关于Andy Rubin的那个秘密项目的传闻。“一切都非常保密。‘他们在做相机吗？Andy Rubin——他不是Danger的那个人吗？’”
- en: Dan had always been a mobile enthusiast. “I had been carrying a [Danger] Hiptop,
    for as long as there had been Hiptops and was a big fan. And I was a fan of mobile
    computing. I was that guy with the weird little mini-PC and radio system that
    could get on the internet from anywhere, back when it was super crazy to do that.
    I was an enthusiast in early Wi-Fi and related technologies, back when that was
    so novel there were user groups that you would go to and talk with other Wi-Fi
    enthusiasts about how this was going to change everything.” So he was intrigued
    about what was happening in the Android group.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Dan一直是移动设备的爱好者。“我从Hiptops问世起就一直在使用[Danger] Hiptop，还是它的忠实粉丝。而且，我也是移动计算的粉丝。那时我就是那个带着奇怪的小型迷你PC和无线电系统的人，能够随时随地上网，当时做到这一点可是非常疯狂的。我是早期Wi-Fi和相关技术的爱好者，那时候Wi-Fi还非常新鲜，甚至有用户组可以参加，你可以和其他Wi-Fi爱好者交流，这将改变一切。”所以他对Android小组的动向很感兴趣。
- en: At the same time, Michael Morrissey was looking for people like Dan for the
    services team; he needed engineers familiar with Google’s backend, because Android
    devices needed to talk to those servers so they needed experts to create the software
    to do it. The timing was right and Dan joined the team in August of 2007, three
    months before the SDK was released and a year before the 1.0 launch.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Michael Morrissey 正在寻找像 Dan 这样的工程师加入服务团队；他需要熟悉 Google 后端的工程师，因为 Android
    设备需要与这些服务器进行通信，所以需要专家来创建相关的软件。时机恰到好处，Dan 在 2007 年 8 月加入了团队，距离 SDK 发布还有三个月，距离 1.0
    版本的发布还有一年。
- en: Dan joined the small services team, which at that time consisted of the manager,
    Michael Morrissey, plus engineers Debajit Ghosh, Malcolm Handley, and Fred Quintana.
    The other three engineers were focused on data synchronization plus the specific
    details of the applications that they were working with (Calendar, Gmail, and
    Contacts, respectively). Dan helped out with some of that stuff, and core infrastructure
    for services overall, but he mainly took responsibility for what they called Device
    Management. This work included Over the Air updates as well as the check-in service.
    There was already a basic update mechanism, but Dan rewrote it into the system
    that Android used when it launched.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 加入了那个小型服务团队，团队成员当时包括经理 Michael Morrissey，以及工程师 Debajit Ghosh、Malcolm Handley
    和 Fred Quintana。其他三位工程师专注于数据同步以及他们所使用应用的具体细节（分别是 Calendar、Gmail 和 Contacts）。Dan
    在这些方面提供了一些帮助，同时也负责整体服务的核心基础设施，但他主要负责他们所称之为设备管理的工作。这项工作包括空中下载（Over the Air, OTA）更新以及签到服务。虽然当时已经有一个基本的更新机制，但
    Dan 重写了它，最终形成了 Android 启动时使用的系统。
- en: 'Dan had help and advice from his manager. “Michael Morrissey was very much
    the grizzled old hand—I mean, he’s no older than I am—with the voice of wisdom.
    He had managed similar things at Danger, he had seen a lot of shit go down, and
    definitely had wise wisdom, in terms of what to pay attention to, what to focus
    on, what architectures were likely to work, what could be a pain point. He remembered
    many times when the ability to just push an OTA to fix some problem saved that
    company’s bacon. So this was going to be really important: if you’ve got something
    out there not behaving well, you can quickly ship a fix. Or if there’s some security
    issue, it’s important to have a very quick turnaround OTA thing. We do not want
    to leave this in the hands of carriers if we can avoid it.”'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 得到了经理的帮助和建议。“Michael Morrissey 就是那种经验丰富的老手——我的意思是，他并不比我年长——但他有着智慧的声音。他在
    Danger 管理过类似的事情，见识过很多复杂的情况，确实有着非常智慧的经验，知道该关注什么、该集中精力做什么、哪些架构可能有效、哪些可能会成为痛点。他记得很多时候，能够迅速推送
    OTA 更新来解决问题，拯救了公司。所以这非常重要：如果你的设备出现了问题，能够快速发布一个修复补丁。或者如果遇到安全问题，快速的 OTA 解决方案也至关重要。如果可以避免，我们绝对不希望把这个交给运营商。”
- en: Meanwhile, the OTA system itself had to be carefully designed to anticipate
    all of the things that could go wrong, from running out of space on the device,
    to restarting in the middle of an update, to security vulnerability. The team
    thought hard about all of these issues and came up with an architecture that seems
    to have worked so far.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，OTA 系统本身必须经过精心设计，以预见所有可能出错的情况，从设备存储空间不足、更新过程中重启到安全漏洞。团队对这些问题进行了深思熟虑，提出了一个架构，到目前为止似乎运行得相当顺利。
- en: First of all, the team divided the bits on the device into *system* and *data*.
    The system partition contained the Android platform itself as well as pre-installed
    apps, which was read-only (except for the OTA updates). The rest of the information
    on the device, including downloaded applications, application data, user preferences,
    and account information, was stored in the data partition. This segmentation meant
    that if there was ever some catastrophic problem, the device could do a factory
    reset, blow away the entire data partition, and the phone would at least work.
    The user would have to set up their accounts again and reinstall applications.
    And they might have lost some application-specific data.^([8](#c20-footnote-8))
    But much of the data was safe anyway, because it was either on external SD-card
    storage or up in the cloud.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，团队将设备上的数据分为*系统*和*数据*两个部分。系统分区包含了Android平台本身以及预装应用程序，并且是只读的（除了OTA更新）。设备上的其余信息，包括下载的应用程序、应用程序数据、用户偏好设置和账户信息，都存储在数据分区中。这种分区方式意味着，如果发生严重故障，设备可以进行恢复出厂设置，清除整个数据分区，至少手机还能继续使用。用户需要重新设置账户并重新安装应用程序，可能会丢失一些应用程序特定的数据^([8](#c20-footnote-8))。但大部分数据依然是安全的，因为它们要么存储在外部SD卡上，要么保存在云端。
- en: 'During updates, the read-only system partition would have to be perturbed,
    because that’s where the new bits from the update had to go. The question was:
    how would the update system guarantee that there was enough space available, the
    right bits were being modified, and the updates were able to proceed even in extreme
    circumstances of the phone restarting during update or running out of battery?'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新过程中，只读的系统分区必须被修改，因为更新的内容必须写入该分区。问题是：更新系统如何确保有足够的空间，正确的部分被修改，并且即使在极端情况下，如手机在更新过程中重启或电池耗尽，更新仍能顺利进行？
- en: The solution was to have a series of incremental updates. So rather than treating
    the entire Android system as a single amorphous blob, updates separated the system
    into individual portions that would be dealt with on their own. For example, an
    update might have new bits for the framework, the media stack, and the SMS driver.
    These, then, might reside in different modules which could be handled independently.
    The update system packaged updates for each of these modules, downloading all
    of them prior to starting the update process. The update rebooted and launched
    into the update app, which walked through each of these modules one by one, installing
    each one, verifying that the results were as expected, swapping it in on top of
    the old one, and then proceeding to the next one. If the phone ever died or restarted
    in the middle of the update process, it could pick up where it left off, without
    leaving the system in some unfinished, indeterminate state. “Our goal was, even
    though it said on the screen ‘Do not power off your phone,’ if any number of power
    cycles, battery pulls, whatever happened, it would still eventually arrive at
    a completed, updated state.”
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是采用一系列增量更新。因此，更新不再将整个Android系统视为一个单一的、没有形状的整体，而是将系统划分为独立的部分，逐一处理。例如，一个更新可能包含框架、媒体堆栈和短信驱动程序的新部分。这些部分可能会被存储在不同的模块中，可以独立处理。更新系统将这些模块的更新打包，在开始更新过程之前下载所有模块的更新。更新会重启并启动更新应用程序，逐一处理每个模块，安装每个模块，验证结果是否如预期，并将新模块替换旧模块，然后继续处理下一个模块。如果手机在更新过程中死机或重启，更新会从中断处继续，而不会留下一个未完成、不确定的状态。“我们的目标是，即使屏幕上显示‘请勿关闭手机’，如果发生多次重启、电池拔出等情况，最终仍能完成更新。”
- en: One of the problems that can occur is running out of space. What happens if
    there is not enough free memory on the device to download the update? Or what
    if the update results in a system size that is too large for the available memory
    and runs out of room mid-update? This was especially a concern on early Android
    devices, where space was at a premium and it was entirely possible for a user
    to have used up most of the available storage space.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个可能出现的问题是存储空间不足。如果设备上没有足够的空闲内存来下载更新怎么办？或者，如果更新导致系统文件过大，超过了可用内存，并在更新过程中空间用尽怎么办？这在早期的Android设备上尤为令人担忧，因为那时空间非常紧张，用户很可能已经使用了大部分可用存储空间。
- en: Fortunately, the team anticipated this problem. The main strategy to ensure
    that there was enough room for updates was to use the cache. “We had this cache
    partition, set aside for that purpose. It was shared. Applications could put temporary
    data there that was allowed to be deleted. But it mainly existed so the OTA system
    could download into it.” While the cache was ostensibly available for applications
    to use for temporary files, its real purpose was to enable the update system to
    function, so that there was always enough room for updates to download and install.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，团队预见到了这个问题。确保更新有足够空间的主要策略是使用缓存。“我们有一个专门为此目的设置的缓存分区。它是共享的。应用程序可以把临时数据放在里面，这些数据是允许被删除的。但它的主要存在是为了让
    OTA 系统能够下载到其中。”虽然缓存名义上是供应用程序使用临时文件，但它的真正目的是让更新系统能够正常运行，以便始终有足够的空间供更新下载和安装。
- en: Of course, there was always the theoretical possibility that the system might
    run out of room anyway. After all, Android was created to be used by manufacturers
    for all kinds of unpredictable configurations. In that case, maybe an OTA wouldn’t
    be possible; but it still wouldn’t leave the phone in an unusable state. “There
    was some weird thing where the device was full, the cache was full, and nobody
    was deleting that data, then the OTA download might fail. So you might not get
    your OTA, which was bad if it’s critical. But it’s not as bad as an update leaving
    you with a brick.”
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，理论上系统可能还是会用完空间。毕竟，Android 是为各类制造商和各种不可预测的配置而创建的。在这种情况下，可能就无法进行 OTA 更新；但它仍然不会让手机变成无法使用的状态。“有时候设备满了，缓存满了，又没人删除这些数据，那么
    OTA 下载可能会失败。所以你可能得不到 OTA 更新，如果它是至关重要的，那就糟糕了。但这总比更新后让你把手机变成砖头要好。”
- en: The final area to nail down for updates was security. Updates were allowed to
    write to an otherwise read-only partition, so that they could update the core
    operating system on the device. So what’s to stop some malicious software from
    pretending that it is an update and similarly changing the system software?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 更新的最终领域要解决的是安全问题。更新被允许写入本应只读的分区，以便它们可以更新设备上的核心操作系统。那么，是什么阻止了恶意软件伪装成更新并同样更改系统软件呢？
- en: The approach that Dan and the team used, with the help of Android’s security
    team, was to only allow trusted files to replace those on the system. Update modules
    would each be signed with keys that could be verified by the system as trusted
    by Android. The Security team added another level of protection so that each entire
    update had one more layer of key encryption in addition to that used by each of
    the individual modules. With all of those layers, the system was deemed secure
    and was allowed to ship (and to update).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 和团队在 Android 安全团队的帮助下，采用的方法是只允许受信任的文件替换系统中的文件。更新模块每个都用密钥签名，系统可以验证这些密钥是否被
    Android 信任。安全团队增加了另一个保护层，使得每个完整的更新除了每个单独模块使用的密钥外，还增加了一层密钥加密。通过所有这些层次，系统被认为是安全的，可以进行发布（并且可以更新）。
- en: After launch, Dan searched the web to see if anyone was poking at the security
    aspects of updates, to make sure that there were no problems. He found a discussion
    about it on a hacking forum. “People were interested in hacking their way into
    this phone. One person who was pretty well regarded on the forum said, ‘Give it
    up. Code’s solid. I can read how it works. You’re not going to get past it. Game
    over—look somewhere else.’”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 发布后，Dan 在网上搜索，看看是否有人在探讨更新的安全性，以确保没有问题。他在一个黑客论坛上发现了相关讨论。“人们对黑进这部手机很感兴趣。有一个在论坛上相当受人尊敬的人说，‘放弃吧。代码很稳。我能读懂它的工作原理。你不会突破的。游戏结束——去别的地方找吧。’”
- en: 'Dan quoted that discussion in his annual performance review that year, when
    talking about his work on the OTA system, concluding: “The internet has reviewed
    my code.”'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 在当年的年度绩效评审中引用了这个讨论，当时他在谈论自己在 OTA 系统方面的工作时总结道：“互联网已经审查过我的代码。”
- en: One of the impressive things about Android OTAs is how reliable they have been
    since the beginning. Engineers on the team have taken hundreds of updates, both
    for internal pre-release builds and for official releases without problems.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Android OTA 的一个令人印象深刻的地方是它们自始至今的可靠性。团队的工程师们已经进行了数百次更新，既包括内部的预发布版本，也包括官方版本，而且没有出现问题。
- en: But there was this one time . . .
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一次……
- en: Originally, the update mechanism provided a single, huge binary file for the
    entire system. So even if there was just a small update to one specific area of
    the platform, updates would still require downloading and installing the entire
    system. That wasn’t a great experience (for users or carriers), due to the size,
    bandwidth, and time required for such large updates.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，更新机制提供了一个整个系统的单一、大型二进制文件。因此，即使只是对平台的某个特定区域做了小的更新，更新也需要下载并安装整个系统。这对用户或运营商来说并不是一个良好的体验，因为这样大规模的更新需要大量的存储、带宽和时间。
- en: Sometime soon after 1.0, the OTA team (which now included Doug Zongker as well
    as Dan Egnor) implemented delta updates. The system figured out what had changed
    between the previous system and the new one and would only download and install
    the bits that had changed. The system worked and the team was ready to release
    it into the wild.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.0版本发布后不久，OTA团队（现在包括道格·宗克尔和丹·埃格诺）实施了差异更新。系统会识别出之前的系统和新系统之间发生了什么变化，只下载和安装那些发生变化的部分。系统正常运行，团队准备将其发布到实际使用中。
- en: At the time, Michael was moving to Mountain View from Seattle. He thought, “Everything
    seems pretty good, I’m going to take a week off and move my family. A couple days
    into that, it was ten o’clock on a Tuesday night, my phone rings. It’s Dan Egnor.
    I answer the phone, and I’m like ‘Dan, what’s up?’ He said, ‘First, I want you
    to know, everything’s perfectly fine.’ That immediately tells me—this is not fine.
    ‘But . . . we bricked a bunch of devices.’”
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，迈克尔正从西雅图搬到山景城。他想着：“一切看起来还不错，我打算休息一周，搬家给家人安排一下。几天后，周二晚上十点，我的手机响了。是丹·埃格诺打来的。我接起电话，问‘丹，怎么了？’他说，‘首先，我想让你知道，一切都很好。’那一瞬间我就知道——这根本不好。‘但是……我们把一堆设备弄成了砖头。’”
- en: The problem was that the image used to create the delta for that update was
    slightly different from the one that HTC (the manufacturer of the G1) had put
    onto the phones. The update mechanism using deltas only worked if the systems
    matched exactly. So when the update was applied on those phones, the system was
    corrupted and the devices were bricked.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 问题出在用来创建此次更新的差异镜像与HTC（G1的制造商）放入手机中的镜像稍有不同。使用差异更新的机制只有在系统完全匹配时才会正常工作。所以当该更新应用到这些手机时，系统被破坏，设备被变砖。
- en: The good news was that there were only 129 devices affected by the problem.
    It was still horrible for those users, and there was a bunch of customer service
    work that had to happen to replace those phones. But 129 out of the fleet of all
    G1s was pretty good for this kind of catastrophic failure. The reason the problem
    was so contained was that the phased-rollout and check-in service mechanisms that
    the team used worked as intended; Dan and Doug were monitoring the updates as
    they rolled out. They detected the problem immediately and put a stop to the update
    until they diagnosed and fixed the problem.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，只有129个设备受到了问题的影响。对于这些用户来说，情况仍然很糟糕，需要大量客户服务工作来更换这些手机。但考虑到所有G1设备的数量，129个受影响的设备对于这种灾难性故障来说已经算是不错了。问题之所以得以有效控制，是因为团队使用的分阶段推出和检查服务机制按预期工作；丹和道格在更新发布过程中一直在监控进展。他们立刻发现了问题，并停止了更新，直到诊断并修复了问题。
- en: This failure also resulted in new policies and processes to ensure that it didn’t
    happen again. And so far, it hasn’t.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这次故障还导致了新政策和新流程的出台，以确保类似问题不再发生。到目前为止，它确实没有再发生。
- en: When the team was developing the OTA system, updates were not a common thing
    for mobile devices (other than Danger’s, of course). The iPhone, when it first
    launched, didn’t have updates like this. To update an iPhone, you needed to plug
    it into your Mac, the same as syncing music on an iPod. Nowadays, Over the Air
    updates are just an expectation of our wireless mobile reality. Your phone downloads
    and reconfigures its entire operating system wirelessly and reboots into the new
    OS, and of course it’s all going to be okay. What could possibly go wrong?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队开发OTA系统时，更新并不是移动设备的常见功能（当然，Danger设备除外）。iPhone首次发布时也没有这种更新功能。要更新iPhone，你需要将它连接到你的Mac，和同步iPod上的音乐一样。如今，空中下载更新已成为我们无线移动现实的一部分。你的手机会无线下载并重新配置整个操作系统，然后重新启动到新的操作系统中，当然，一切都会好起来的。有什么可能会出问题呢？
- en: The other necessary piece that made the OTA updates work reliably was the check-in
    service, which provided the ability for Android servers to monitor devices in
    the field. Dan wrote the basics of the system, but received some help when Chiu-Ki
    Chan joined the team in early 2008.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使OTA更新能够可靠工作的另一个必要部分是签到服务，它为Android服务器提供了监控现场设备的能力。Dan写下了该系统的基础部分，但在2008年初，当Chiu-Ki
    Chan加入团队时，他获得了一些帮助。
- en: Chiu-Ki Chan and the Check-In Service
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chiu-Ki Chan与签到服务
- en: Chiu-Ki got her start in software development at age eight, when her mother
    enrolled her in a summer programming course. They had thought she’d just learn
    computer usage skills, but the course also covered programming in BASIC, and Chiu-Ki
    enjoyed it, especially the sense of power she got from it. “As an 8 year old,
    I really enjoyed bossing the computer around. In real life, people bossed *me*.
    But as a kid, you can actually tell the computer to do something.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Chiu-Ki在8岁时开始了软件开发的旅程，那时她母亲让她参加了一个暑期编程课程。他们原本以为她只是学会一些计算机使用技能，但课程内容也涉及了BASIC编程，而Chiu-Ki很享受，特别是她从中获得的那种掌控感。“作为一个8岁的孩子，我真的很喜欢指挥计算机。在现实生活中，人们指挥*我*，但作为孩子，你可以告诉计算机做点什么。”
- en: Many years later, after getting her master’s degree in computer science, she
    joined Google in 2003 to work on search quality. That project made sense, since
    she’d specialized in text processing during her graduate program.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 多年后，在获得计算机科学硕士学位后，她于2003年加入谷歌，从事搜索质量工作。这个项目很合适，因为她在研究生阶段专攻文本处理。
- en: After working on search for a few years, she wanted to try something new. She
    had friends on the Android team, including Dan Egnor whom she’d known on the search
    team, so she joined the services team in February of 2008\. The Android team had
    launched the public SDK the previous Fall, but was still months away from shipping
    1.0\.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在从事搜索工作几年后，她希望尝试一些新的事情。她在Android团队有朋友，包括她在搜索团队认识的Dan Egnor，因此她在2008年2月加入了服务团队。Android团队在前一年的秋天发布了公共SDK，但距离1.0版本发布还有几个月。
- en: Like Dan, Chiu-Ki had experience with the Google back-end infrastructure, so
    the services team was a logical place for her to start on Android. Eventually,
    she would work on the Android Market team, as well as the Maps team. But when
    she first joined the team, she helped out with the check-in service, getting things
    ready for the 1.0 launch.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 和Dan一样，Chiu-Ki有着Google后台基础设施的经验，因此服务团队成了她开始Android之旅的理想地方。最终，她会在Android市场团队和地图团队工作。但刚加入时，她帮助处理签到服务，为1.0版本的发布做准备。
- en: The check-in service worked hand-in-hand with OTAs as updates rolled out to
    the fleet of devices. From his experience at Danger, Michael believed in rolling
    out an update slowly, in a way that could be tracked and reverted. Dan remembered
    Michael telling him, “‘If you’re not careful, your OTA download can brick the
    world.’ He insisted, quite correctly, on having a staged rollout canary^([9](#c20-footnote-9))
    process, where we’ll roll out to internal users first. We’ll have a way to monitor
    that they actually booted back up with their new OS and are still checking in
    with that. We’ll have those plots [real-time graphs of check-in results] so we
    can deliver to internal users, watch it bounce down as they all reboot. Then we’ll
    deliver it to .01 percent of external users, watch the same plot in case there’s
    something weird. Then we’d go from .01 percent to .1 percent to 1 percent to 10
    percent to a rolling ramp, always watching those charts and looking for signals.”
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 签到服务与OTA（空中下载）紧密配合，随着更新推出到设备群体中。根据他在Danger的经验，Michael相信应该慢慢推出更新，采取可追踪和回滚的方式。Dan记得Michael曾告诉他，“‘如果你不小心，你的OTA下载可能会把整个世界搞崩溃。’他坚持非常正确地认为，应该采取分阶段推出的‘金丝雀’过程，我们首先向内部用户推出更新。我们将有办法监控他们是否能够启动并运行新操作系统，并且是否仍然在进行签到。我们会有这些图表[签到结果的实时图表]，以便我们能交付给内部用户，观察他们重新启动时的变化。然后我们会将其发布给0.01%的外部用户，观察相同的图表，看看是否有异常。接着我们会从0.01%到0.1%到1%到10%的逐步推送，始终观察这些图表，寻找信号。”
- en: Distinguished Service
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杰出服务
- en: The underlying capabilities that the services team provided for Android can’t
    be underestimated; they are fundamental to making the Android platform so powerful
    for users. Pieces of the platform like the kernel and the framework are necessary
    just for making the device boot and run. But without services that allow users
    to get instantaneous messages and email, or to synchronize calendar or contact
    information, or to get necessary release updates, Android wouldn’t have been nearly
    as compelling as a smartphone platform.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 服务团队为 Android 提供的基础功能不可小觑；它们是让 Android 平台对用户如此强大的基础。像内核和框架这样的平台组件仅仅是为了让设备能够启动和运行。但如果没有那些让用户能够即时接收消息和电子邮件、同步日历或联系人信息，或者获取必要的版本更新的服务，Android
    就不可能像现在这样成为一个有吸引力的智能手机平台。
