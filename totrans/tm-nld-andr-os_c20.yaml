- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Services
  prefs: []
  type: TYPE_NORMAL
- en: One mouse click away from a disaster of unprecedented^([1](#c20-footnote-1))
    proportion in the mobile industry.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Android services team slogan
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For the most part, the Android team operated separately from the rest of Google.
    Google funded the project and checked in with the leadership team, but otherwise
    left them alone. The Android team kept their heads down, writing the operating
    system, the tools, the apps, and everything else they needed, without interacting
    with the larger engineering organization in Google.
  prefs: []
  type: TYPE_NORMAL
- en: Except for the services team.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re writing a single-player game, which only needs to deal with the local
    device and storage, you can do that independently of any back-end infrastructure
    or mechanisms. But for most other applications, which deal with information outside
    of that application, or data that you want to store off-device, you are probably
    going to need to interact with systems on the backend. The application running
    locally on a device is really just a window into data and services that are all
    managed on external servers. Maps, Search, Gmail, Calendar, Contacts, Talk, YouTube:
    all of these applications rely on data and functionality that is stored on Google
    servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Google wanted to make its applications and services available to mobile users
    through the Android operating system. So the need for figuring out how to connect
    Android devices to the Google services running on the backend was paramount.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that this work happened, Android started the services team, which
    was initially three people: Fred Quintana, Malcolm Handley, and Debajit Ghosh.'
  prefs: []
  type: TYPE_NORMAL
- en: Debajit Ghosh and Calendar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debajit always assumed he would study science in college, while programming
    on the side to support his primary academic interests. But in high school, he
    realized he could just do programming as his *main* focus. So he changed direction
    and went to college in computer science, getting his master’s degree in 1998.
  prefs: []
  type: TYPE_NORMAL
- en: Debajit spent a few years working on speech recognition, which combined a growing
    interest in mobile with the ability for users to get information on the go. In
    2005, a colleague went to Google to form a speech recognition group. He reached
    out to Debajit to see if he was interested in coming to Google to work on mobile
    technology.
  prefs: []
  type: TYPE_NORMAL
- en: At first, Debajit wasn’t interested, thinking, “Google? I don’t want to work
    at Google—it’s way too big of a company.” But when he thought about some of the
    mobile possibilities, he was swayed, thinking, “I’m not sure about this Google
    thing, but it’d be really interesting to learn about mobile.”
  prefs: []
  type: TYPE_NORMAL
- en: Debajit started on Google’s small mobile team (not the Android team) in early
    2005\. The mobile team was created to make the company’s services available on
    existing mobile devices, and brought in Debajit to lead the server-side team.
    “The first project I was working on was trans-coding traditional web pages into
    what could be viewed on the really cruddy browsers you’d have on cell phones at
    that time.” The browser application on the phone would make a request to view
    a website. The content from that site would come down to the Google servers, get
    translated into something that that very limited phone device could handle, and
    that simpler version of the site would be sent down to the phone. This was similar
    to the approach that Danger used for its Hiptop phone browser years earlier, and
    WebTV for its TV browser years before that, with a server translating between
    what web pages actually looked like and what was possible to display on an actual
    device.
  prefs: []
  type: TYPE_NORMAL
- en: In the Spring of 2005, Debajit returned from a vacation to find a stack of resumes
    on his desk, along with a request to interview the members of a startup named
    “Android” that Google was interested in acquiring. “I’m in this vacation haze,
    trying to figure out, ‘Android? What’s this Android thing?’”
  prefs: []
  type: TYPE_NORMAL
- en: He interviewed the engineers on the team, including Brian Swetland and Ficus
    Kirkpatrick. “Ficus spent a bunch of the time talking about Brian. So I got to
    know some of the personalities very early on.”
  prefs: []
  type: TYPE_NORMAL
- en: Debajit continued working on the mobile team, checking in with Andy Rubin and
    his team occasionally. Then, in late 2006 he reached out to Cédric Beust, a former
    colleague on the mobile team. He also chatted with Steve Horowitz, the engineering
    director for Android, and learned more about what they needed. The team was starting
    to think about Google services. For example, Android needed to figure out a story
    for the Calendar app, and how to sync with Google’s calendar services.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, Debajit had been working on a side project, synchronizing calendar
    information to J2ME devices. He was still interested in how to get information
    to people on the go, and calendar data was an important part of that problem.
    In talking to the Android team, he realized that, by joining them, he could make
    his side project his full time job. So he transferred to Android, joining the
    now three-person team working on Google services.
  prefs: []
  type: TYPE_NORMAL
- en: Each engineer on the team worked on services for specific applications. Fred
    Quintana worked with Jeff Hamilton, who was writing the Contacts app for Android.
    Malcolm Handley worked with Cédric on Gmail. And Debajit worked with Jack Veenstra
    on Calendar.^([2](#c20-footnote-2)) All of these applications had the same requirement
    for sending data to and from Google servers, so the team collaborated on a centralized
    sync mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'Soon after that initial services engineering team got rolling, Andy Rubin brought
    in someone he knew from Danger to lead the project: Michael Morrissey.'
  prefs: []
  type: TYPE_NORMAL
- en: Michael Morrissey and the Services Team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Michael Morrissey went to college and grad school in math, but realized he’d
    rather do programming.^([3](#c20-footnote-3)) He started playing around with a
    BeBox and eventually ended up getting a job at Be.
  prefs: []
  type: TYPE_NORMAL
- en: One of the things that Michael found most interesting was printing—he enjoyed
    the interaction of the OS, the drivers, and the graphics code. This was a good
    thing, because the state of printing on BeOS was terrible at the time. Michael
    remembered, “Jean-Louis Gassée, the founder and CEO of Be, was really angry one
    day that he couldn’t print. He always had to switch to a Mac to print something.
    He was really, really mad.”
  prefs: []
  type: TYPE_NORMAL
- en: Michael encouraged external developers to write printer drivers for Be. That’s
    how he first met Mathias Agopian (who later started Android’s graphics team).
    “He had written all these amazing Epson drivers. He was really into the color
    side of it. He kept sending these drivers in.” Mathias was doing this work as
    a hobby, but he eventually joined Be.
  prefs: []
  type: TYPE_NORMAL
- en: Michael left Be after an uninspiring IPO and an ensuing and doomed pivot to
    an Internet Appliance device. On a suggestion from Hiroshi Lockheimer, he ended
    up at Danger in March of 2000\. At first, the company was working on a small device
    that made it possible to carry around your contacts and email, and then sync to
    other devices by connecting them. But the dot-com implosion, which started soon
    after Michael arrived, forced them to start looking into other product directions,
    ending up with Danger’s Hiptop phone.
  prefs: []
  type: TYPE_NORMAL
- en: During his time at Danger, Michael worked on back-end services, connecting applications
    on the phone to data on Danger servers and to the internet in general. “I loved
    server-side stuff, so I started building out the backend, and the protocol between
    the device and the server.” For example, Danger phone users had many different
    kinds of email services they needed to connect to. Rather than handle all of those
    services locally on the device, the Danger servers would connect to those various
    email services and translate the results into a single protocol that Danger devices
    understood. Similarly, the browser worked by having the servers translate full
    web pages into simplified representations that were sent down to the phone.
  prefs: []
  type: TYPE_NORMAL
- en: One of the innovations at Danger was a persistent connection between a device
    and the servers. Through this connection, a device would get new email or messages
    immediately. This was huge back in 2002\. Even if you had one of the few phones
    at that time with email capability, those devices typically required you to synchronize
    them manually with your computer. So you would get that message about the meeting
    you needed to attend an hour after it ended. But on Danger phones, you would know
    that you were missing the meeting as it was happening.
  prefs: []
  type: TYPE_NORMAL
- en: In 2005, Michael moved on from Danger to Microsoft, enticed by a nascent project
    to create Microsoft phones. At the time, Microsoft licensed their OS to manufacturers
    like HTC. But someone at Microsoft envisioned a future where the company would
    also make its own phones. This is basically the model that Apple pursued, but
    with the addition of having a licensable OS (like Android, except that Android
    is free).
  prefs: []
  type: TYPE_NORMAL
- en: But the project had a hard time getting traction in the company, since it was
    running counter to Microsoft’s traditional software business. In one frustrating
    meeting, Michael recounted that an executive wouldn’t sign off on their phone
    being a Windows device because it wouldn’t run PowerPoint, even though that use
    case was not the point of the phone and the very limited device was ill-equipped
    to take on that additional burden. Through meetings like this and various other
    obstacles, the project had a hard time making forward progress.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, Andy Rubin kept checking in with Michael every quarter to see if
    he wanted to come help out on Android. Eventually, Michael ran out of patience
    with the project at Microsoft and joined Android to lead the services team in
    the Spring of 2007\. He looked at where the team was at and told Andy and Steve
    what they needed to do. “They were like, ‘Great! Go. Run. Do this.’”
  prefs: []
  type: TYPE_NORMAL
- en: 'Michael helped organize the team to get all of the right things happening.
    “I had had the luxury of working on this stuff at Danger, so I knew a pattern
    that would work for these things. I saw the bigger picture, in terms of how the
    services had to be architected: how you would build a persistent connection, what
    the transport layer should look like, and all the landmines you would have to
    watch out for.”'
  prefs: []
  type: TYPE_NORMAL
- en: Michael also worked on growing the team. He needed people who knew how to deal
    with Google infrastructure. “One of the things I realized pretty early on was
    that we wouldn’t get anywhere unless we had people who came from inside of Google,
    because Google had such a weird way of doing things. If we brought in people who
    had the kind of domain knowledge of the mobile industry, but not the Google knowledge,
    that wouldn’t be good because it would take them forever to get through the Google
    machinery. I thought it would be faster if we took people who were at Google and
    transferred them onto Android and instructed them about the domain of mobile along
    the way.”
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the early problems to solve was push functionality: when something changed
    on the server side (for example, an email arriving in the user’s inbox, or a calendar
    event being updated), the server needed to update the device so that the data
    on the phone and the server would match. Debajit coined the term “tickle.” “We
    wanted to ‘tickle’ the device. We came up with terms like Light Tickle, letting
    the device know that something’s changed, please sync. Heavy tickle: including
    the payload. We favored a Light Tickle approach, but it depended on the use case.”'
  prefs: []
  type: TYPE_NORMAL
- en: The team came up with an approach where the phone would have a single, dedicated
    connection to Google servers on the backend. The connection, called the Mobile
    Connection Server (MCS), would be persistent, so that messages could always be
    sent or received, ensuring that the phone would be notified whenever there was
    new information on the server. Each application had its own specific requirements
    for data, but they all shared this single connection through which the server
    would alert the device that something changed. The connection was also used for
    the initial Google Talk functionality, to send and receive messages.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing that persistent connection back to Google servers wasn’t just a
    technical problem; it was also one of constrained resources.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c20/f20001.png)'
  prefs: []
  type: TYPE_IMG
- en: Michael Morrissey, October 21, 2008—the day before the G1 launch (picture courtesy
    Brian Swetland)
  prefs: []
  type: TYPE_NORMAL
- en: The networking ops team controlled the persistent connection mechanism that
    Android needed. At that time, Google worked on the assumption that everything
    needing a network connection was web-based; data transfer requests used standard
    web HTTP request mechanisms. But Android needed to use a completely different
    protocol, so they required a dedicated network resource called a Virtual IP (VIP).
    The problem was, the network team didn’t want to give them one. “The way that
    Google was built, for a whole bunch of boring reasons that I won’t go into, these
    were extremely rare. There was literally only capacity for only about 200 of them.
    A bunch of them were used, and the network team would not give them out at all.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Debajit and Michael met often with the networking team to persuade them to
    give a VIP to Android. These kind of discussions were not new to Michael: “A lot
    of my job was running around trying to convince people on Gmail, and Calendar,
    and Contacts, and all these other teams that this was a big thing for Google,
    and they should be helping us with engineering on their side and SRE^([4](#c20-footnote-4))
    support.”'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, networking ops relented and gave them the VIP they needed on a provisional
    basis, along with a friendly wager. They said that if Android didn’t reach a million
    users in the first six months, they would take back the VIP, and Michael and Debajit
    would owe them a case of whisky. Debajit remembered, “Whisky was definitely part
    of this discussion. That was the currency.”
  prefs: []
  type: TYPE_NORMAL
- en: They were able to set up the persistent connection and get MCS up and running,
    on port number 5228.^([5](#c20-footnote-5))
  prefs: []
  type: TYPE_NORMAL
- en: Android won the bet, though Michael said it depended on when you defined the
    timeframe. The networking ops team said that it was from the moment they gave
    them the VIP, whereas Michael defined it from the moment 1.0 launched. In any
    case, it was obvious at that time that Android was successful enough to warrant
    not losing the connection to all of those Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Fire Drill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android’s unique requirements for persistent connections meant that Android
    needed dedicated servers in specific data centers. Anyone dealing with data knows
    that you always need a backup in case something goes wrong with the main system.
    It’s why we have redundant disk arrays and backup storage, and it’s why many households
    have two parents so that the children can ask the other parent if they don’t get
    the answer they want the first time around.
  prefs: []
  type: TYPE_NORMAL
- en: But Android wasn’t just about serving a single user, or a small number of them;
    they needed a system that would scale to many, many more users. One backup site
    wouldn’t be enough. It was entirely possible for one system to go down. And it
    was possible, albeit unlikely, that a second system would also have problems.
    So they enabled a third data center just in case; three would surely be enough
    to cover all of these situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch day: October 22, 2008\. One of Android’s servers had already gone down
    earlier in the week, but was fortunately working again in time for the launch.
    On launch day, a second server went down due to “unplanned maintenance.” Google
    wanted to work on it, so they just took it out of the system. So immediately,
    on launch day, Android was down to two servers. Fortunately, two was still enough
    for a robust, fail-safe system.'
  prefs: []
  type: TYPE_NORMAL
- en: Then one of those servers caught fire.
  prefs: []
  type: TYPE_NORMAL
- en: There was an overheating issue in the data center that day, so they had to shut
    down the system to work on it. Michael said, “We were really sweating bullets—we
    were down to a single data center! We just lost two; if that third one went down,
    none of the sync stuff would work properly—there would be no chat or whatever.
    We were really panicked.”
  prefs: []
  type: TYPE_NORMAL
- en: That last server stayed up, so there was no outage. But the team had come a
    lot closer to failure than they thought they would.
  prefs: []
  type: TYPE_NORMAL
- en: Dan Egnor and OTAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re not careful, your OTA download can brick^([6](#c20-footnote-6)) the
    world.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Michael Morrissey (as remembered by Dan Egnor)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since the beginning, one of the impressive things about the Android operating
    system is its Over-the-Air (OTA) update system. Occasionally (or too frequently,
    if you’re running internal, pre-release builds), you get a notification on your
    phone that the system would like to update itself. Eventually you get tired of
    its incessant nagging, tell it to go ahead, and then it does its thing. It downloads
    the update, reboots, configures itself, and shows the login screen; it’s ready
    to go.
  prefs: []
  type: TYPE_NORMAL
- en: It may not be obvious as a user, but you’ve just had your phone completely replace
    the fundamental pieces of itself on the fly, and it all just worked. It’s like
    having your brain swapped out while you’re standing in line at the coffee shop,
    and then continuing to order that coffee, as if nothing happened.
  prefs: []
  type: TYPE_NORMAL
- en: And it all just works. Every time. Well, okay, there was that one time. . . .
    More about that later.
  prefs: []
  type: TYPE_NORMAL
- en: Early on, the team recognized the importance of being able to update the phones
    remotely. Updates might be needed for something as major as the next release of
    the platform (like upgrading from, say, Android 8.1 Oreo to Android 9 Pie) or
    something smaller, like a monthly security/bug-fix release. Or maybe there would
    even be the need for an emergency fix if something went horribly wrong with a
    release. In any case, there needed to be a mechanism for devices to get these
    updates without having to go through partners, carriers, and anything else that
    might stand in the way of Android updates getting out to users.
  prefs: []
  type: TYPE_NORMAL
- en: In August of 2007, Michael Morrissey brought in Dan Egnor to work on the update
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Dan was programming in childhood, hanging out in the computer lab at the college
    where his mother taught. Eventually, the college cracked down and wouldn’t allow
    faculty kids in the lab, at which point his mother got him an Atari 400\. “I used
    it intensively. All of the grownups were impressed at how fast I could type on
    this ridiculous membrane keyboard.”
  prefs: []
  type: TYPE_NORMAL
- en: After college, he ended up at Microsoft, then a startup, then as a quant^([7](#c20-footnote-7))
    on Wall Street. In 2002, Google held a programming contest, which Dan entered
    for fun, and won. “They gave a corpus of documents and said to do something fun
    with it. I made a little geographical search app. They flew me to Mountain View,
    had me talk to a bunch of people and asked if I was interested in a job.”
  prefs: []
  type: TYPE_NORMAL
- en: Dan turned them down. He wanted to stay in New York and Google did not have
    an office there at that time. His rejection confused the team at Google, since
    the contest was meant as a recruiting ploy. A year later, Google opened a New
    York office and Dan signed on as the second employee. He worked on search and
    maps-related projects, eventually moving out to Mountain View.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, Dan heard rumors, along with the rest of Google, about what was happening
    in that skunkworks project of Andy Rubin’s. “It was all very secretive. ‘Are they
    making Cameras? Andy Rubin—he was the guy at Danger, right?’”
  prefs: []
  type: TYPE_NORMAL
- en: Dan had always been a mobile enthusiast. “I had been carrying a [Danger] Hiptop,
    for as long as there had been Hiptops and was a big fan. And I was a fan of mobile
    computing. I was that guy with the weird little mini-PC and radio system that
    could get on the internet from anywhere, back when it was super crazy to do that.
    I was an enthusiast in early Wi-Fi and related technologies, back when that was
    so novel there were user groups that you would go to and talk with other Wi-Fi
    enthusiasts about how this was going to change everything.” So he was intrigued
    about what was happening in the Android group.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, Michael Morrissey was looking for people like Dan for the
    services team; he needed engineers familiar with Google’s backend, because Android
    devices needed to talk to those servers so they needed experts to create the software
    to do it. The timing was right and Dan joined the team in August of 2007, three
    months before the SDK was released and a year before the 1.0 launch.
  prefs: []
  type: TYPE_NORMAL
- en: Dan joined the small services team, which at that time consisted of the manager,
    Michael Morrissey, plus engineers Debajit Ghosh, Malcolm Handley, and Fred Quintana.
    The other three engineers were focused on data synchronization plus the specific
    details of the applications that they were working with (Calendar, Gmail, and
    Contacts, respectively). Dan helped out with some of that stuff, and core infrastructure
    for services overall, but he mainly took responsibility for what they called Device
    Management. This work included Over the Air updates as well as the check-in service.
    There was already a basic update mechanism, but Dan rewrote it into the system
    that Android used when it launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dan had help and advice from his manager. “Michael Morrissey was very much
    the grizzled old hand—I mean, he’s no older than I am—with the voice of wisdom.
    He had managed similar things at Danger, he had seen a lot of shit go down, and
    definitely had wise wisdom, in terms of what to pay attention to, what to focus
    on, what architectures were likely to work, what could be a pain point. He remembered
    many times when the ability to just push an OTA to fix some problem saved that
    company’s bacon. So this was going to be really important: if you’ve got something
    out there not behaving well, you can quickly ship a fix. Or if there’s some security
    issue, it’s important to have a very quick turnaround OTA thing. We do not want
    to leave this in the hands of carriers if we can avoid it.”'
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, the OTA system itself had to be carefully designed to anticipate
    all of the things that could go wrong, from running out of space on the device,
    to restarting in the middle of an update, to security vulnerability. The team
    thought hard about all of these issues and came up with an architecture that seems
    to have worked so far.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, the team divided the bits on the device into *system* and *data*.
    The system partition contained the Android platform itself as well as pre-installed
    apps, which was read-only (except for the OTA updates). The rest of the information
    on the device, including downloaded applications, application data, user preferences,
    and account information, was stored in the data partition. This segmentation meant
    that if there was ever some catastrophic problem, the device could do a factory
    reset, blow away the entire data partition, and the phone would at least work.
    The user would have to set up their accounts again and reinstall applications.
    And they might have lost some application-specific data.^([8](#c20-footnote-8))
    But much of the data was safe anyway, because it was either on external SD-card
    storage or up in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'During updates, the read-only system partition would have to be perturbed,
    because that’s where the new bits from the update had to go. The question was:
    how would the update system guarantee that there was enough space available, the
    right bits were being modified, and the updates were able to proceed even in extreme
    circumstances of the phone restarting during update or running out of battery?'
  prefs: []
  type: TYPE_NORMAL
- en: The solution was to have a series of incremental updates. So rather than treating
    the entire Android system as a single amorphous blob, updates separated the system
    into individual portions that would be dealt with on their own. For example, an
    update might have new bits for the framework, the media stack, and the SMS driver.
    These, then, might reside in different modules which could be handled independently.
    The update system packaged updates for each of these modules, downloading all
    of them prior to starting the update process. The update rebooted and launched
    into the update app, which walked through each of these modules one by one, installing
    each one, verifying that the results were as expected, swapping it in on top of
    the old one, and then proceeding to the next one. If the phone ever died or restarted
    in the middle of the update process, it could pick up where it left off, without
    leaving the system in some unfinished, indeterminate state. “Our goal was, even
    though it said on the screen ‘Do not power off your phone,’ if any number of power
    cycles, battery pulls, whatever happened, it would still eventually arrive at
    a completed, updated state.”
  prefs: []
  type: TYPE_NORMAL
- en: One of the problems that can occur is running out of space. What happens if
    there is not enough free memory on the device to download the update? Or what
    if the update results in a system size that is too large for the available memory
    and runs out of room mid-update? This was especially a concern on early Android
    devices, where space was at a premium and it was entirely possible for a user
    to have used up most of the available storage space.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the team anticipated this problem. The main strategy to ensure
    that there was enough room for updates was to use the cache. “We had this cache
    partition, set aside for that purpose. It was shared. Applications could put temporary
    data there that was allowed to be deleted. But it mainly existed so the OTA system
    could download into it.” While the cache was ostensibly available for applications
    to use for temporary files, its real purpose was to enable the update system to
    function, so that there was always enough room for updates to download and install.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there was always the theoretical possibility that the system might
    run out of room anyway. After all, Android was created to be used by manufacturers
    for all kinds of unpredictable configurations. In that case, maybe an OTA wouldn’t
    be possible; but it still wouldn’t leave the phone in an unusable state. “There
    was some weird thing where the device was full, the cache was full, and nobody
    was deleting that data, then the OTA download might fail. So you might not get
    your OTA, which was bad if it’s critical. But it’s not as bad as an update leaving
    you with a brick.”
  prefs: []
  type: TYPE_NORMAL
- en: The final area to nail down for updates was security. Updates were allowed to
    write to an otherwise read-only partition, so that they could update the core
    operating system on the device. So what’s to stop some malicious software from
    pretending that it is an update and similarly changing the system software?
  prefs: []
  type: TYPE_NORMAL
- en: The approach that Dan and the team used, with the help of Android’s security
    team, was to only allow trusted files to replace those on the system. Update modules
    would each be signed with keys that could be verified by the system as trusted
    by Android. The Security team added another level of protection so that each entire
    update had one more layer of key encryption in addition to that used by each of
    the individual modules. With all of those layers, the system was deemed secure
    and was allowed to ship (and to update).
  prefs: []
  type: TYPE_NORMAL
- en: After launch, Dan searched the web to see if anyone was poking at the security
    aspects of updates, to make sure that there were no problems. He found a discussion
    about it on a hacking forum. “People were interested in hacking their way into
    this phone. One person who was pretty well regarded on the forum said, ‘Give it
    up. Code’s solid. I can read how it works. You’re not going to get past it. Game
    over—look somewhere else.’”
  prefs: []
  type: TYPE_NORMAL
- en: 'Dan quoted that discussion in his annual performance review that year, when
    talking about his work on the OTA system, concluding: “The internet has reviewed
    my code.”'
  prefs: []
  type: TYPE_NORMAL
- en: One of the impressive things about Android OTAs is how reliable they have been
    since the beginning. Engineers on the team have taken hundreds of updates, both
    for internal pre-release builds and for official releases without problems.
  prefs: []
  type: TYPE_NORMAL
- en: But there was this one time . . .
  prefs: []
  type: TYPE_NORMAL
- en: Originally, the update mechanism provided a single, huge binary file for the
    entire system. So even if there was just a small update to one specific area of
    the platform, updates would still require downloading and installing the entire
    system. That wasn’t a great experience (for users or carriers), due to the size,
    bandwidth, and time required for such large updates.
  prefs: []
  type: TYPE_NORMAL
- en: Sometime soon after 1.0, the OTA team (which now included Doug Zongker as well
    as Dan Egnor) implemented delta updates. The system figured out what had changed
    between the previous system and the new one and would only download and install
    the bits that had changed. The system worked and the team was ready to release
    it into the wild.
  prefs: []
  type: TYPE_NORMAL
- en: At the time, Michael was moving to Mountain View from Seattle. He thought, “Everything
    seems pretty good, I’m going to take a week off and move my family. A couple days
    into that, it was ten o’clock on a Tuesday night, my phone rings. It’s Dan Egnor.
    I answer the phone, and I’m like ‘Dan, what’s up?’ He said, ‘First, I want you
    to know, everything’s perfectly fine.’ That immediately tells me—this is not fine.
    ‘But . . . we bricked a bunch of devices.’”
  prefs: []
  type: TYPE_NORMAL
- en: The problem was that the image used to create the delta for that update was
    slightly different from the one that HTC (the manufacturer of the G1) had put
    onto the phones. The update mechanism using deltas only worked if the systems
    matched exactly. So when the update was applied on those phones, the system was
    corrupted and the devices were bricked.
  prefs: []
  type: TYPE_NORMAL
- en: The good news was that there were only 129 devices affected by the problem.
    It was still horrible for those users, and there was a bunch of customer service
    work that had to happen to replace those phones. But 129 out of the fleet of all
    G1s was pretty good for this kind of catastrophic failure. The reason the problem
    was so contained was that the phased-rollout and check-in service mechanisms that
    the team used worked as intended; Dan and Doug were monitoring the updates as
    they rolled out. They detected the problem immediately and put a stop to the update
    until they diagnosed and fixed the problem.
  prefs: []
  type: TYPE_NORMAL
- en: This failure also resulted in new policies and processes to ensure that it didn’t
    happen again. And so far, it hasn’t.
  prefs: []
  type: TYPE_NORMAL
- en: When the team was developing the OTA system, updates were not a common thing
    for mobile devices (other than Danger’s, of course). The iPhone, when it first
    launched, didn’t have updates like this. To update an iPhone, you needed to plug
    it into your Mac, the same as syncing music on an iPod. Nowadays, Over the Air
    updates are just an expectation of our wireless mobile reality. Your phone downloads
    and reconfigures its entire operating system wirelessly and reboots into the new
    OS, and of course it’s all going to be okay. What could possibly go wrong?
  prefs: []
  type: TYPE_NORMAL
- en: The other necessary piece that made the OTA updates work reliably was the check-in
    service, which provided the ability for Android servers to monitor devices in
    the field. Dan wrote the basics of the system, but received some help when Chiu-Ki
    Chan joined the team in early 2008.
  prefs: []
  type: TYPE_NORMAL
- en: Chiu-Ki Chan and the Check-In Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chiu-Ki got her start in software development at age eight, when her mother
    enrolled her in a summer programming course. They had thought she’d just learn
    computer usage skills, but the course also covered programming in BASIC, and Chiu-Ki
    enjoyed it, especially the sense of power she got from it. “As an 8 year old,
    I really enjoyed bossing the computer around. In real life, people bossed *me*.
    But as a kid, you can actually tell the computer to do something.”
  prefs: []
  type: TYPE_NORMAL
- en: Many years later, after getting her master’s degree in computer science, she
    joined Google in 2003 to work on search quality. That project made sense, since
    she’d specialized in text processing during her graduate program.
  prefs: []
  type: TYPE_NORMAL
- en: After working on search for a few years, she wanted to try something new. She
    had friends on the Android team, including Dan Egnor whom she’d known on the search
    team, so she joined the services team in February of 2008\. The Android team had
    launched the public SDK the previous Fall, but was still months away from shipping
    1.0\.
  prefs: []
  type: TYPE_NORMAL
- en: Like Dan, Chiu-Ki had experience with the Google back-end infrastructure, so
    the services team was a logical place for her to start on Android. Eventually,
    she would work on the Android Market team, as well as the Maps team. But when
    she first joined the team, she helped out with the check-in service, getting things
    ready for the 1.0 launch.
  prefs: []
  type: TYPE_NORMAL
- en: The check-in service worked hand-in-hand with OTAs as updates rolled out to
    the fleet of devices. From his experience at Danger, Michael believed in rolling
    out an update slowly, in a way that could be tracked and reverted. Dan remembered
    Michael telling him, “‘If you’re not careful, your OTA download can brick the
    world.’ He insisted, quite correctly, on having a staged rollout canary^([9](#c20-footnote-9))
    process, where we’ll roll out to internal users first. We’ll have a way to monitor
    that they actually booted back up with their new OS and are still checking in
    with that. We’ll have those plots [real-time graphs of check-in results] so we
    can deliver to internal users, watch it bounce down as they all reboot. Then we’ll
    deliver it to .01 percent of external users, watch the same plot in case there’s
    something weird. Then we’d go from .01 percent to .1 percent to 1 percent to 10
    percent to a rolling ramp, always watching those charts and looking for signals.”
  prefs: []
  type: TYPE_NORMAL
- en: Distinguished Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underlying capabilities that the services team provided for Android can’t
    be underestimated; they are fundamental to making the Android platform so powerful
    for users. Pieces of the platform like the kernel and the framework are necessary
    just for making the device boot and run. But without services that allow users
    to get instantaneous messages and email, or to synchronize calendar or contact
    information, or to get necessary release updates, Android wouldn’t have been nearly
    as compelling as a smartphone platform.
  prefs: []
  type: TYPE_NORMAL
