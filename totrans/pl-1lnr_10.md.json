["```\nperl -pe '$\\ = \"\\n\"'\nperl -pe 'BEGIN { $\\ = \"\\n\" }'\nperl -pe '$_ .= \"\\n\"'\nperl -pe 's/$/\\n/'\nperl -nE 'say'\n```", "```\nperl -pe '$_ .= \"\\n\" unless /^$/'\nperl -pe '$_ .= \"\\n\" if /\\S/'\n```", "```\nperl -pe '$\\ = \"\\n\\n\"'\nperl -pe '$_ .= \"\\n\\n\"'\nperl -pe 's/$/\\n\\n/'\n```", "```\nperl -pe '$_ .= \"\\n\"x7'\n```", "```\nperl -pe 's/^/\\n/'\n```", "```\nperl -ne 'print unless /^$/'\nperl -lne 'print if length'\nperl -ne 'print if /\\S/'\n```", "```\nperl -00 -pe ''\nperl -00pe0\n```", "```\nperl -00 -pe '$_ .= \"\\n\"x2'\n```", "```\nperl -pe 's/ /  /g'\n```", "```\nperl -pe 's/ +//g'\nperl -pe 's/\\s+//g'\n```", "```\nperl -pe 's/ +/ /g'\n```", "```\nperl -lpe 's// /g'\n```", "```\nperl -pe '$_ = \"$. $_\"'\nperl -ne 'print \"$. $_\"'\n```", "```\nperl -pe '$_ = ++$x.\" $_\" if /./'\nperl -pe '$_ = ++$x.\" $_\" if /\\S/'\n```", "```\nperl -ne 'print ++$x.\" $_\" if /./'\n```", "```\nperl -pe '$_ = \"$. $_\" if /./'\n```", "```\nperl -pe '$_ = ++$x.\" $_\" if /regex/'\n```", "```\nperl -ne 'print ++$x.\" $_\" if /regex/'\n```", "```\nperl -pe '$_ = \"$. $_\" if /regex/'\n```", "```\nperl -ne 'printf \"%-5d %s\", $., $_'\n```", "```\nperl -lne 'END { print $. }'\nperl -le 'print $n = () = <>'\nperl -le 'print $n = (() = <>)'\nperl -le 'print scalar(() = <>)'\nperl -le 'print scalar(@foo = <>)'\nperl -ne '}{print $.'\n```", "```\nperl -le 'print scalar(grep { /./ } <>)'\nperl -le 'print ~~grep{/./}<>'\nperl -le 'print~~grep/./,<>'\nperl -lE 'say~~grep/./,<>'\n```", "```\nperl -lne '$x++ if /^$/; END { print $x+0 }'\nperl -lne '$x++ if /^$/; END { print int $x }'\nperl -le 'print scalar(grep { /^$/ } <>)'\nperl -le 'print ~~grep{ /^$/ } <>'\n```", "```\nperl -lne '$x++ if /regex/; END { print $x+0 }'\n```", "```\nperl -pe 's/(\\w+)/++$i.\".$1\"/ge'\n```", "```\nperl -pe '$i=0; s/(\\w+)/++$i.\".$1\"/ge'\n```", "```\nperl -pe 's/(\\w+)/++$i/ge'\n```", "```\nperl -lne '(1x$_) !~ /^1?$|^(11+?)\\1+$/ && print \"$_ is prime\"'\n```", "```\nperl -MList::Util=sum -alne 'print sum @F'\nperl -MList::Util=sum -F: -alne 'print sum @F'\n```", "```\nperl -MList::Util=sum -alne 'push @S,@F; END { print sum @S }'\nperl -MList::Util=sum -alne '$s += sum @F; END { print $s }'\n```", "```\nperl -MList::Util=shuffle -alne 'print \"@{[shuffle @F]}\"'\nperl -MList::Util=shuffle -alne 'print join \" \", shuffle @F'\n```", "```\nperl -MList::Util=min -alne 'print min @F'\n```", "```\nperl -MList::Util=min -alne '@M = (@M, @F); END { print min @M }'\nperl -MList::Util=min -alne '\n  $min = min @F;\n  $rmin = $min unless defined $rmin && $min > $rmin;\n  END { print $rmin }\n'\nperl -MList::Util=min -alne '$min = min($min // (), @F); END { print $min }'\n```", "```\nperl -MList::Util=max -alne 'print max @F'\n```", "```\nperl -MList::Util=max -alne '@M = (@M, @F); END { print max @M }'\nperl -MList::Util=max -alne '\n  $max = max @F;\n  $rmax = $max unless defined $rmax && $max < $rmax;\n  END { print $rmax }\n'\nperl -MList::Util=max -alne '$max = max($max // (), @F); END { print $max }'\n```", "```\nperl -alne 'print \"@{[map { abs } @F]}\"'\n```", "```\nperl -alne 'print scalar @F'\n```", "```\nperl -alne 'print scalar @F, \" $_\"'\n```", "```\nperl -alne '$t += @F; END { print $t }'\n```", "```\nperl -alne 'map { /regex/ && $t++ } @F; END { print $t || 0 }'\nperl -alne '$t += /regex/ for @F; END { print $t }'\nperl -alne '$t += grep /regex/, @F; END { print $t }'\n```", "```\nperl -lne '/regex/ && $t++; END { print $t || 0 }'\n```", "```\nperl -Mbignum=bpi -le 'print bpi(21)'\nperl -Mbignum=PI -le 'print PI'\n```", "```\nperl -Mbignum=bexp -le 'print bexp(1,21)'\nperl -Mbignum=e -le 'print e'\n```", "```\nperl -le 'print time'\n```", "```\nperl -le 'print scalar gmtime'\nperl -le 'print scalar localtime'\n```", "```\nperl -MPOSIX -le '\n  @now = localtime;\n  $now[3] -= 1;\n  print scalar localtime mktime @now\n'\n```", "```\nperl -MPOSIX -le '\n  @now = localtime;\n  $now[0] -= 7;\n  $now[3] -= 9;\n  $now[4] -= 14;\n  print scalar localtime mktime @now\n'\n```", "```\nperl -MMath::BigInt -le 'print Math::BigInt->new(5)->bfac()'\nperl -le '$f = 1; $f *= $_ for 1..5; print $f'\n```", "```\nperl -MMath::BigInt=bgcd -le 'print bgcd(@list_of_numbers)'\nperl -MMath::BigInt=bgcd -le 'print bgcd(20,60,30)'\nperl -MMath::BigInt=bgcd -anle 'print bgcd(@F)'\nperl -le '\n  $n = 20; $m = 35;\n  ($m,$n) = ($n,$m%$n) while $n;\n  print $m\n'\n```", "```\nperl -MMath::BigInt=blcm -le 'print blcm(35,20,8)'\nperl -MMath::BigInt=blcm -anle 'print blcm(@F)'\nperl -le '\n  $a = $n = 20;\n  $b = $m = 35;\n  ($m,$n) = ($n,$m%$n) while $n;\n  print $a*$b/$m\n'\n```", "```\nperl -le 'print join \",\", map { int(rand(15-5))+5 } 1..10'\nperl -le '\n  $n=10;\n  $min=5;\n  $max=15;\n  $, = \" \";\n  print map { int(rand($max-$min))+$min } 1..$n;\n'\n```", "```\nperl -MAlgorithm::Permute -le '\n  $l = [1,2,3,4,5];\n  $p = Algorithm::Permute->new($l);\n  print \"@r\" while @r = $p->next\n'\n perl -MAlgorithm::Permute -le '\n  @l = (1,2,3,4,5);\n  Algorithm::Permute::permute { print \"@l\" } @l\n'\n```", "```\nperl -MList::PowerSet=powerset -le '\n  @l = (1,2,3,4,5);\n  print \"@$_\" for @{powerset(@l)}\n'\n```", "```\nperl -le '\n  $i=3;\n  $u += ($_<<8*$i--) for \"127.0.0.1\" =~ /(\\d+)/g;\n  print $u\n'\n perl -le '\n  $ip=\"127.0.0.1\";\n  $ip =~ s/(\\d+)\\.?/sprintf(\"%02x\", $1)/ge;\n  print hex($ip)\n'\n perl -le 'print unpack(\"N\", 127.0.0.1)'\n perl -MSocket -le 'print unpack(\"N\", inet_aton(\"127.0.0.1\"))'\n```", "```\nperl -MSocket -le 'print inet_ntoa(pack(\"N\", 2130706433))'\nperl -le '\n  $ip = 2130706433;\n  print join \".\", map { (($ip>>8*($_))&0xFF) } reverse 0..3\n'\nperl -le '\n  $ip = 2130706433;\n  $, = \".\";\n  print map { (($ip>>8*($_))&0xFF) } reverse 0..3\n'\nperl -le '\n  $ip = 2130706433;\n  $, = \".\";\n  print map { (($ip>>8*($_))&0xFF) } 3,2,1,0\n'\n```", "```\nperl -le 'print a..z'\nperl -le 'print (\"a\"..\"z\")'\nperl -le '$, = \",\"; print (\"a\"..\"z\")'\nperl -le '$alphabet = join \",\", (\"a\"..\"z\"); print $alphabet'\n```", "```\nperl -le 'print join \",\", (\"a\"..\"zz\")'\nperl -le 'print join \",\", \"aa\"..\"zz\"'\n```", "```\n@hex = (0..9, \"a\"..\"f\")\nperl -le '\n  $num = 255;\n  @hex = (0..9, \"a\"..\"f\");\n  while ($num) {\n    $s = $hex[($num % 16)].$s;\n    $num = int $num/16;\n  }\n  print $s\n'\nperl -le 'printf(\"%x\", 255)'\nperl -le '$num = \"ff\"; print hex $num'\n```", "```\nperl -le 'print map { (\"a\"..\"z\")[rand 26] } 1..8'\nperl -le 'print map { (\"a\"..\"z\", 0..9)[rand 36] } 1..8'\n```", "```\nperl -le 'print \"a\"x50'\nperl -e 'print \"a\"x1024'\nperl -le '@list = (1,2)x20; print \"@list\"'\n```", "```\n@months = split ' ', \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\"\n@months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/\n```", "```\nperl -le 'print \"(\", (join \",\", @ARGV), \")\"' val1 val2 val3\nperl -le '\n  print \"INSERT INTO table VALUES (\", (join \",\", @ARGV), \")\"\n' val1 val2 val3\n```", "```\nperl -le 'print join \", \", map { ord } split //, \"hello world\"'\nperl -le 'print join \", \", unpack(\"C*\", \"hello world\")'\nperl -le '\n  print join \", \", map { sprintf \"0x%x\", ord $_ } split //, \"hello world\"\n'\nperl -le '\n  print join \", \", map { sprintf \"%o\", ord $_ } split //, \"hello world\"\n'\nperl -le '\n  print join \", \", map { sprintf \"%#o\", ord $_ } split //, \"hello world\"\n'\n```", "```\nperl -le '\n  @ascii = (99, 111, 100, 105, 110, 103);\n  print pack(\"C*\", @ascii)\n'\nperl -le '\n  @ascii = (99, 111, 100, 105, 110, 103);\n  $str = join \"\", map chr, @ascii;\n  print $str\n'\nperl -le 'print map chr, 99, 111, 100, 105, 110, 103'\nperl -le 'print map chr, @ARGV' 99 111 100 105 110 103\n```", "```\nperl -le '@odd = grep {$_ % 2 == 1} 1..100; print \"@odd\"'\nperl -le '@odd = grep { $_ & 1 } 1..100; print \"@odd\"'\n```", "```\nperl -le '@even = grep {$_ % 2 == 0} 1..100; print \"@even\"'\n```", "```\nperl -le 'print length \"one-liners are great\"'\n```", "```\nperl -le '@array = (\"a\"..\"z\"); print scalar @array'\nperl -le '@array = (\"a\"..\"z\"); print $#array + 1'\nperl -le 'print scalar @ARGV' *.txt\nperl -le 'print scalar (@ARGV=<*.txt>)'\n```", "```\nperl -le '$str = \"bananas\"; $str =~ y/A-Za-z/N-ZA-Mn-za-m/; print $str'\nperl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file\nperl -pi.bak -e 'y/A-Za-z/N-ZA-Mn-za-m/' file\n```", "```\nperl -MMIME::Base64 -e 'print encode_base64(\"string\")'\nperl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file\n```", "```\nperl -MMIME::Base64 -le 'print decode_base64(\"base64string\")'\nperl -MMIME::Base64 -0777 -ne 'print decode_base64($_)' file\n```", "```\nperl -MURI::Escape -le 'print uri_escape(\"http://example.com\")'\n```", "```\nperl -MURI::Escape -le 'print uri_unescape(\"http%3A%2F%2Fexample.com\")'\n```", "```\nperl -MHTML::Entities -le 'print encode_entities(\"<html>\")'\n```", "```\nperl -MHTML::Entities -le 'print decode_entities(\"&lt;html&gt;\")'\n```", "```\nperl -nle 'print uc'\nperl -ple '$_ = uc'\nperl -nle 'print \"\\U$_\"'\n```", "```\nperl -nle 'print lc'\nperl -nle 'print \"\\L$_\"'\n```", "```\nperl -nle 'print ucfirst lc'\nperl -nle 'print \"\\u\\L$_\"'\n```", "```\nperl -ple 'y/A-Za-z/a-zA-Z/'\n```", "```\nperl -ple 's/(\\w+)/\\u$1/g'\n```", "```\nperl -ple 's/^[ \\t]+//'\nperl -ple 's/^\\s+//'\n```", "```\nperl -ple 's/[ \\t]+$//'\nperl -ple 's/\\s+$//'\n```", "```\nperl -ple 's/^[ \\t]+|[ \\t]+$//g'\nperl -ple 's/^\\s+|\\s+$//g'\n```", "```\nperl -pe 's|\\012|\\015\\012|'\n```", "```\nperl -pe 's|\\015\\012|\\012|'\n```", "```\nperl -pe 's|\\012|\\015|'\n```", "```\nperl -pe 's/foo/bar/'\nperl -pe 's/foo/bar/g'\n```", "```\nperl -pe '/baz/ && s/foo/bar/'\nperl -pe 's/foo/bar/ if /baz/'\n```", "```\nperl -00 -e 'print reverse <>' file\n```", "```\nperl -lne 'print scalar reverse $_'\nperl -lne 'print scalar reverse'\nperl -lpe '$_ = reverse $_'\nperl -lpe '$_ = reverse'\n```", "```\nperl -alne 'print \"@{[reverse @F]}\"'\nperl -F: -alne 'print \"@{[reverse @F]}\"'\nperl -F: -alne '$\" = \":\"; print \"@{[reverse @F]}\"'\n```", "```\nperl -ne 'print; exit' file\nperl -i -ne 'print; exit' file\nperl -i.bak -ne 'print; exit' file\n```", "```\nperl -ne 'print if $. <= 10' file\nperl -ne '$. <= 10 && print' file\nperl -ne 'print if 1..10' file\nperl -ne 'print; exit if $. == 10' file\n```", "```\nperl -ne '$last = $_; END { print $last }' file\nperl -ne 'print if eof' file\n```", "```\nperl -ne 'push @a, $_; @a = @a[@a-10..$#a] if @a>10; END { print @a }' file\nperl -ne 'push @a, $_; shift @a if @a>10; END { print @a }' file\n```", "```\nperl -ne '/regex/ && print'\nperl -ne 'print if /regex/'\n```", "```\nperl -ne '!/regex/ && print'\nperl -ne 'print if !/regex/'\nperl -ne 'print unless /regex/'\nperl -ne '/regex/ || print'\n```", "```\nperl -ne '/regex/ && $last && print $last; $last = $_'\n```", "```\nperl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/'\nperl -ne '$p && print && ($p = 0); $p++ if /regex/'\nperl -ne '$p && print; $p = /regex/'\n```", "```\nperl -ne '/AAA/ && /BBB/ && print'\n```", "```\nperl -ne '!/AAA/ && !/BBB/ && print'\n```", "```\nperl -ne '/AAA.*BBB.*CCC/ && print'\n```", "```\nperl -ne 'print if length >= 80'\nperl -lne 'print if length >= 80'\n```", "```\nperl -ne 'print if length() < 80'\n```", "```\nperl -ne '$. == 13 && print && exit'\n```", "```\nperl -ne '$. != 27 && print'\nperl -ne 'print if $. != 27'\nperl -ne 'print unless $. == 27'\n```", "```\nperl -ne 'print if $. == 13 || $. == 19 || $. == 67'\nperl -ne '\n  @lines = (13, 19, 88, 290, 999, 1400, 2000);\n  print if grep { $_ == $. } @lines\n'\n```", "```\nperl -ne 'print if $. >= 17 && $. <= 30'\nperl -ne 'print if 17..30'\n```", "```\nperl -ne 'print if /regex1/../regex2/'\n```", "```\nperl -ne '\n  $l = $_ if length($_) > length($l);\n  END { print $l }\n'\n```", "```\nperl -ne '\n  $s = $_ if $. == 1;\n  $s = $_ if length($_) < length($s);\n  END { print $s }\n'\n```", "```\nperl -ne 'print if /\\d/'\n```", "```\nperl -ne 'print if /^\\d+$/'\nperl -lne 'print unless /\\D/'\n```", "```\nperl -ne 'print if /^[[:alpha:]]+$/\n```", "```\nperl -ne 'print if $. % 2'\n```", "```\nperl -ne 'print if $. % 2 == 0'\nperl -ne 'print unless $. % 2'\n```", "```\nperl -ne 'print if ++$a{$_} == 2'\n```", "```\nperl -ne 'print unless $a{$_}++'\n```", "```\n/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n/^(\\d{1,3}\\.){3}\\d{1,3}$/\nperl -ne 'print if /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/'\n```", "```\n/^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/\nperl -le '\n  map { $n++ if /^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/ } 0..255;\n  END { print $n }\n'\nperl -le '\n  map { $n++ if /^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/ } 0..1000;\n  END { print $n }\n'\n```", "```\nmy $ip_part = qr/[0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]/;\nif ($ip =~ /^$ip_part\\.$ip_part\\.$ip_part\\.$ip_part$/) {\n  print \"valid ip\\n\";\n}\nif ($ip =~ /^($ip_part\\.){3}$ip_part$/) {\n  print \"valid ip\\n\";\n}\nperl -ne '\n  $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|;\n  print if /^($ip_part\\.){3}$ip_part$/\n'\n```", "```\n/\\S+@\\S+\\.\\S+/\nuse Email::Valid;\nprint Email::Valid->address('cats@catonmat.net') ? 'valid email' : 'invalid email';\nperl -MEmail::Valid -ne 'print if Email::Valid->address($_)'\n```", "```\n/^\\d+$/\n/^[+-]?\\d+$/\n/^[+-]?\\d+\\.?\\d*$/\nperl -MRegexp::Common -ne 'print if /$RE{num}{real}/'\nperl -MRegexp::Common -ne 'print if /$RE{num}{hex}/'\nperl -MRegexp::Common -ne 'print if /$RE{num}{oct}/'\nperl -MRegexp::Common -ne 'print if /$RE{num}{bin}/'\n```", "```\n/(word).*\\1/\n```", "```\n$str =~ s/(\\d+)/$1+1/ge\nperl -MRegexp::Common -pe 's/($RE{num}{real})/$1+1/ge'\n```", "```\n/^User-Agent: (.+)$/\n```", "```\n/[ -~]/\n```", "```\nm|<strong>([^<]*)</strong>|\nm|<strong>(.*?)</strong>|\n```", "```\n$html =~ s|<(/)?b>|<$1strong>|g\n```", "```\nmy @matches = $text =~ /regex/g;\n```"]