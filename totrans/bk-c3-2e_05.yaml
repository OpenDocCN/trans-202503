- en: '**5**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WEB FONTS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: The features covered in this chapter are the oldest in this book, having been
    introduced in CSS2 many years ago—only to be dropped from the 2.1 spec owing to
    a lack of implementation by browser makers. Now a new generation of browsers has
    revived interest in improving the typographical options available to web designers,
    and I, for one, welcome the return of these features in CSS3\. Chief among them
    is the ability to specify fonts that don’t already exist on the user’s system—by
    utilizing the `@font-face` method—which frees designers from the yoke of the standard
    palette of “web-safe” system fonts that have been used for many years. Surprisingly,
    this capability has been available in Internet Explorer since 1997!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: IE4 was the first browser to allow web fonts, but it did so with a proprietary
    format that prevented other browsers from following suit. Microsoft later submitted
    its format to the W3C for consideration as a standard, but in the meantime Firefox,
    Safari, and Chrome all backed a different set of formats (see “[Font Formats](ch05.html#ch05leve1sec56)”
    on [page 52](ch05.html#page_52)), so later versions of Internet Explorer eventually
    followed suit.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The CSS Fonts Module Level 3 (*[http://www.w3.org/TR/css3-fonts/](http://www.w3.org/TR/css3-fonts/)*)
    has Candidate Recommendation status, and most of the spec has already been implemented
    in modern browsers (with a couple of exceptions, which I’ll cover later), so you
    can consider these features safe to use.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**The @font-face Rule**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To display web fonts on your pages, you first need to define them by using
    the `@font-face` rule. This rule sets the name and type of the font and provides
    the browser with the location of the file to use. Here’s the basic syntax:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I’ll break this syntax down a little. First, I give the font a name with the
    `font-family` property (➊). This property is one you should be familiar with,
    although it serves a slightly different purpose inside the rule than it does when
    used in the declaration block for a regular selector; here, it’s used to declare
    a font name, not to refer to one. Just like the `font-family` property in CSS2.1,
    you can use multiple, space-separated words as long as you enclose them within
    single quotation marks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '*When you define your font’s name with* `*font-family*`*, you can use the same
    name multiple times—in fact, sometimes you need to. I’ll discuss why shortly,
    in “[Defining Different Faces](ch05.html#ch05leve1sec52)” on [page 49](ch05.html#page_49).*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the `src` property (➋), which tells the browser the location of the
    font file. This property accepts a few different values: `local` (➌) uses the
    name of the source font to check if the font is already installed on the user’s
    machine; and `url` (➍) provides a path to the font if it’s not available locally.
    I’ve also included the optional `format` (➎) hint, used to specify the font type;
    in this example, I used OpenType, but more types are available, and I’ll discuss
    those later in “[Font Formats](ch05.html#ch05leve1sec56)” on [page 52](ch05.html#page_52).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 `src` 属性（➋），它告诉浏览器字体文件的位置。该属性接受几种不同的值：`local`（➌）使用源字体的名称来检查字体是否已经安装在用户的机器上；`url`（➍）提供字体的路径，如果该字体在本地不可用的话。我还包括了可选的
    `format`（➎）提示，用于指定字体类型；在这个例子中，我使用了 OpenType，但还有更多类型，我将在 “[字体格式](ch05.html#ch05leve1sec56)”
    中讨论，位于[第 52 页](ch05.html#page_52)。
- en: I can supply many different values for the `src` property by separating the
    values with commas, as I’ve done in the code example. This utilizes the power
    of the cascade to allow different fall-back values, which will come in handy in
    a later example.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以为 `src` 属性提供许多不同的值，使用逗号分隔这些值，正如我在代码示例中所做的那样。这利用了级联的优势，允许不同的后备值，这在后续的例子中会派上用场。
- en: '**NOTE**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Remember that in a font stack the browser will use the first file it encounters
    that can be loaded, rather than reading through all files and choosing the most
    recent.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，在字体栈中，浏览器将使用它遇到的第一个可加载的文件，而不是逐个读取所有文件并选择最新的文件。*'
- en: 'To use the font I just defined, I need only call its name in the font stack,
    as I’d normally do:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我刚定义的字体，我只需要像平常一样在字体栈中调用它的名称：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To illustrate a real-world example, I’ll apply the Chunk font (available to
    download for free from *[http://www.theleagueofmoveabletype.com/fonts/4-chunk/](http://www.theleagueofmoveabletype.com/fonts/4-chunk/)*)
    to an `h1` element using `@font-face`. Here’s the code I’ll use in my style sheet:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一个现实世界的例子，我将使用 Chunk 字体（可以从 *[http://www.theleagueofmoveabletype.com/fonts/4-chunk/](http://www.theleagueofmoveabletype.com/fonts/4-chunk/)*
    免费下载）应用到一个 `h1` 元素上，使用 `@font-face` 规则。以下是我将在样式表中使用的代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first step is to name my font; I’ve chosen `ChunkFive` (➊) because I can
    remember it easily, but I could use any name. Next I provide values to the `src`
    property: `local` (➋) uses the true name of the font, `ChunkFive`, to check if
    it’s available on my system. Following that I enter a relative path to the font
    file I want to use (➌), and finally, I assign an argument of `woff` to the `format`
    value (➍). I explain the WOFF format in “Font Formats” on [page 52](ch05.html#page_52).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是给我的字体命名；我选择了 `ChunkFive`（➊），因为我容易记住它，但我可以使用任何名称。接下来，我为 `src` 属性提供值：`local`（➋）使用字体的真实名称
    `ChunkFive` 来检查它是否已安装在我的系统上。随后，我输入我想要使用的字体文件的相对路径（➌），最后，我将 `woff` 作为 `format`
    的值（➍）。我将在 “字体格式” 中解释 WOFF 格式，见[第 52 页](ch05.html#page_52)。
- en: '**NOTE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can usually find a font’s true name by using a font management application
    or by right-clicking the font file to view the font information.*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常可以通过使用字体管理应用程序或右键点击字体文件查看字体信息，来找到字体的真实名称。*'
- en: 'In the last line (➎), I include my newly defined font in the font stack using
    the name value I defined inside the `@font-face` rule and apply it to all `h1`
    elements with a `class` of `webfont`. To see how that displays, here’s a quick
    comparison using the following markup:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行（➎），我使用在 `@font-face` 规则中定义的名称值，将新定义的字体加入字体栈，并将其应用到所有 `h1` 元素，且这些元素具有 `webfont`
    类。为了查看显示效果，这里有一个快速对比，使用以下标记：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see the output in [Figure 5-1](ch05.html#ch05fig1).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [图 5-1](ch05.html#ch05fig1) 中看到输出结果。
- en: '![Image](graphics/f05-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图像](graphics/f05-01.jpg)'
- en: '*Figure 5-1: The ChunkFive font (the bottom row), called using the* `*@font-face*`
    *rule, compared to the page default font (the top row)*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：ChunkFive 字体（底部行），通过`*@font-face*`规则调用，与页面默认字体（顶部行）进行对比*'
- en: '***Defining Different Faces***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***定义不同的字体样式***'
- en: 'The `@font-face` syntax you’ve seen so far in this chapter is pretty straightforward,
    but it only defines one font face—that is, a single permutation of weight, slope,
    and so on. If you want to use a different face, such as a bolder weight or an
    italic type, you have to define each font face individually. To do this, you re-use
    the same name and add extra descriptors to the `@font-face` rule:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本章看到的 `@font-face` 语法非常简单，但它只定义了一个字体样式——也就是一种权重、倾斜等的排列方式。如果你想使用不同的样式，比如加粗的权重或斜体类型，你必须为每个字体样式单独定义。为此，你可以重复使用相同的名称并在
    `@font-face` 规则中添加额外的描述：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, you can see that the first `@font-face` rule defines the font name as
    `Gentium Basic` (➊) and gives the URL of the regular font face (➋). The second
    `@font-face` rule uses the same font name (➌) but adds the `font-style` property
    with the `italic` value (➍), and the URL points at the font’s italic face (➎).
    The italic style is applied automatically and appropriately, without your having
    to define it in the CSS, as in this example markup:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The second `h1` element uses the italic font face defined in the previous rules
    (you can see the result in [Figure 5-2](ch05.html#ch05fig2)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-2: Gentium Basic Regular (top) and Italic (bottom) applied using*
    `*@font-face*`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define any number of variations of a font with this method by using
    different font properties in the `@font-face` rule: `font-weight` to set various
    weights, `font-variant` for small caps faces, and so on.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '***True vs. Artificial Font Faces***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One thing to be aware of when you use web fonts is that you must define a link
    to an appropriate file for each different font face you wish to use. If you don’t,
    browsers will attempt to re-create the face artificially, often with ugly results.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you’re going to use an italic style in your page, you must
    be sure to also define an italic style in `@font-face`. Here’s an illustration
    of how *not* to define an italic weight:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see that my `@font-face` rule uses the regular face of the Gentium Basic
    font, but the `h1` element has an italic style declared on it. You can see the
    effect in [Figure 5-3](ch05.html#ch05fig3), which compares this method with the
    correctly defined method from the previous section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-3: Comparing an artificial italic (top) with a true italic font face
    (bottom)*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the two examples are quite different. The first is the selected
    Gentium Basic font slanted to fake an italic style (using the first code example);
    the characters are larger, slightly distorted, and spaced inconsistently. The
    second is the true italic font face (using the correct method), which uses characters
    designed specifically for this purpose.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The same applies for all the different font faces: bold, italic, bold italic,
    small caps, condensed, and so on.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**A “Bulletproof” @font-face Syntax**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I explained at the beginning of this chapter that the `@font-face` rule has
    been around for quite a while, having been implemented in Internet Explorer as
    far back as 1997\. This means that it carries with it some unfortunate legacy
    issues in older versions of IE. In addition, some historical issues around font
    formats can cause compatibility problems in older versions of other browsers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Because of these issues, you need a workaround to ensure that `@font-face` works
    correctly across all browsers. Before I introduce the fully crossbrowser “bulletproof”
    `@font-face` syntax, let me discuss briefly some of the problems it addresses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Local Fonts***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `local()` value for the `src` property is used to check whether a user already
    has the defined font installed on his or her system—if the user does, the local
    copy can be applied rather than downloading a new copy. `local()` is a good idea,
    but it suffers from a few drawbacks. The first drawback, and not the least, is
    that `local()` isn’t supported by any versions of Internet Explorer below 9!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Another drawback is that, in some cases, the `@font-face` rule doesn’t play
    nicely with font management software, displaying incorrect characters or opening
    a dialog to ask for permissions to use a font.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, leaving the `local()` value out is generally safer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '***Font Formats***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next problem comes in the shape of different, and competing, formats. When
    `@font-face` was originally implemented, it supported only Microsoft’s proprietary
    *Embedded OpenType (EOT)* format, and this is still the only font format that
    is supported in IE8 and below. To complicate this still further, IE9 causes the
    `@font-face` rule to break when the browser is put into compatibility mode; this
    is very much an edge case and becoming less relevant all the time, but it’s worth
    noting as we can fix it simply in our bulletproof syntax.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: The resurgence of interest in web fonts came about because modern browsers—first
    Safari and then Firefox and then others—allowed the use of the more common *TrueType*
    and *OpenType* formats. Unfortunately, many commercial font foundries wouldn’t
    allow their fonts to be used in this way as it makes illegal copying of their
    fonts a little easier (see “[Licensing Fonts for Web Use](ch05.html#ch05leve1sec58)”
    on [page 53](ch05.html#page_53)). For this reason, Mozilla consulted with some
    font makers and created the *Web Open Font Format (WOFF)*, which is now supported
    in all major browsers, including IE9 and above, with the exception of older versions
    of the stock Android browser (4.3 and below).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Some browsers also accept the *Scalable Vector Graphics (SVG)* font type. This
    font type is a vector re-creation of the font and is considerably lighter in file
    size, making it ideal for mobile use. This format is really only useful, however,
    if you need to support older versions (4.1 and below) of Safari for iPhone.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '***The Final “Bulletproof” Syntax***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For your chosen font to display the same in every browser on every platform,
    you should use code in this format:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let me explain what’s happening here. The first font to be specified is the
    EOT (➊) for Internet Explorer 8 and below. This font is in a rule of its own,
    as the next rule contains the optional `format()` hint; this hint is unfamiliar
    to old IE8, and so the whole rule will be ignored. But the EOT font needs to be
    included again (➋) to deal with the IE9 compatibility problem. Next, the WOFF
    format is defined (➌) for the majority of browsers, followed by the TTF format
    (➍) for older browsers, including Android 4.3 and below (remember that browsers
    will ignore formats they don’t understand and therefore can’t load).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: As the IE9 compatibility problem is really becoming less important, you can
    leave out the second line (➋) at your discretion.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: For this to work, the major requirement is that your chosen font be available
    in three different formats. To make this easier, I strongly recommend using the
    `@font-face` Generator by Font Squirrel (*[http://www.fontsquirrel.com/fontface/generator/](http://www.fontsquirrel.com/fontface/generator/)*).
    Simply upload the font file you want to use and `@font-face` Generator converts
    it into all the relevant formats—as well as generating the CSS you need to use
    in your pages. This tool is invaluable. Font Squirrel also has a library of fonts
    that are ready to use with `@font-face` embedding, saving you the task of converting.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '*For a full explanation of why the IE trick is required and how it works, read*
    [http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax/](http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax/).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '**Licensing Fonts for Web Use**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned previously in “Font Formats” on [page 52](ch05.html#page_52), many
    font foundries expressly forbid embedding their web fonts in your pages using
    `@font-face`. They forbid this because linked OpenType or TrueType fonts are easy
    to locate and download and can then be used illegally in both on- and offline
    applications. The WOFF file type was created in response to this; WOFF is a web-only
    format and can contain licensing information to help track down a copyright infringer.
    Many foundries have already committed to selling this format, and I hope many
    more will follow.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: In general, the best policy is to check that the font you choose has a license
    explicitly allowing you to use it for web embedding; don’t assume that because
    a font is free to download, it is free to use online. That said, many good-quality
    free fonts that do allow embedding are available online; some resources are given
    in Appendix B.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: While the licensing situation is in a state of flux, many web font service providers
    have created mechanisms to embed fonts legally in your pages. By adding JavaScript
    to your pages, the provider is authorized to serve the font files from their network,
    so you can call the font families in your stacks. The method is known as *Fonts
    as a Service (FaaS)*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Most FaaS providers are commercial, allowing a limited set of fonts for free
    but charging a monthly or annual fee for the majority. The two biggest players
    in this category are probably Fontdeck (*[http://fontdeck.com/](http://fontdeck.com/)*)
    and Typekit (*[https://typekit.com/](https://typekit.com/)*). Other providers
    supply only free fonts—Google Fonts (*[http://www.google.com/fonts/](http://www.google.com/fonts/)*)
    being a notable example of this. Each provider has its own way of including the
    licensed fonts on your site, usually through the inclusion of an external CSS
    or JS file, or both.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '**A Real-World Web Fonts Example**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having discussed the intricacies and niceties of fonts, licensing, and multiple
    syntaxes, let’s see a real-world example of `@font-face` in action. I’ll use an
    example that compares text displayed in a standard sans-serif font (Arial) to
    the same text displayed in three different font families (all from Font Squirrel).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the CSS for this example. Bear in mind that, for the sake of clarity,
    I’ve simplified this snippet to show only a single font format (WOFF), although
    the accompanying example file has the full code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'I also left out some color and size adjustments to keep the code as readable
    as possible. Here’s the markup I used:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see the output in [Figure 5-4](ch05.html#ch05fig4).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-4: Text using “web-safe” fonts (left) and using different web fonts
    (right)*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: In the example on the right, I mixed three fairly distinctive font families—many
    designers will probably tell you mixing isn’t a good idea on a production site,
    but it works well to illustrate my point. Whatever you think of my font choices,
    I hope you’ll at least agree that the text looks more dynamic and enticing with
    those choices applied.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Despite the long and winding route we’ve had to take to get a cross-browser
    syntax, using `@font-face` isn’t complicated; you’ll expend some overhead in the
    form of extra setup time to declare the font faces and variants you want to use,
    but after that you can call them in your font stacks and style them in exactly
    the same way as system fonts.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '**Controlling Font Loading**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web fonts are loaded as external assets and must be downloaded by the browser
    before they can be displayed. Before the file has loaded, no font at all will
    be visible on the elements the font is to be applied to. You may then see a slight
    “flash” that occurs as the font loads and is applied. This is known as the *Flash
    of Unstyled Text (FoUT)*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Many FaaS providers offer ways to work around this problem using configuration
    files, but if you’re hosting your own fonts, you may want to investigate the Web
    Font Loader library (*[https://github.com/typekit/webfontloader/](https://github.com/typekit/webfontloader/)*),
    which provides an event system that allows you to control the appearance of your
    page dynamically as fonts are loaded.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '**More Font Properties**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CSS3 Web Fonts Module doesn’t just re-introduce the `@font-face` rule; it
    also revives two other font properties that were first proposed for CSS2\. These
    properties are potentially quite useful for giving you granular control over your
    fonts—I say *potentially* because, as of this moment, they aren’t widely implemented.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 Web 字体模块不仅重新引入了 `@font-face` 规则；它还恢复了两个最早为 CSS2 提出的字体属性。这些属性对于让你精确控制字体非常有用——我之所以说
    *有用*，是因为截至目前，它们并未广泛实现。
- en: '***font-size-adjust***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***font-size-adjust***'
- en: 'The only drawback to using font stacks in CSS is that fonts can vary so much
    in size; your first choice font may look great at 16px, but if that font isn’t
    available, the next fallback may appear smaller or have different proportions
    and be harder to read at that size. To combat this, the `font-size-adjust` property
    lets you dynamically alter the `font-size` property to ensure a regular appearance
    no matter which font is used from the stack. The `font-size-adjust` property takes
    a single decimal value; here’s the syntax:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字体堆栈（font stacks）在 CSS 中的唯一缺点是字体的大小差异可能非常大；你选择的第一种字体在16px下可能看起来很好，但如果该字体不可用，下一个备选字体可能会显得更小，或者有不同的比例，使得在相同的大小下更难阅读。为了解决这个问题，`font-size-adjust`
    属性允许你动态地调整 `font-size` 属性，以确保无论使用哪种字体，外观始终保持一致。`font-size-adjust` 属性接受一个小数值；以下是语法：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `*number*` value is the proportion of the total height that is occupied
    by a lowercase *x* character (known as the *x-height*). In other words, a font
    might be 16px high in total, but the height of the lowercase *x* might be half
    that (8px), which gives an x-height ratio of 0.5 (8 divided by 16):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`*number*` 值是由小写 *x* 字符（即 *x-height*）所占的字体总高度的比例。换句话说，一种字体的总高度可能为 16px，但小写
    *x* 的高度可能只有一半（8px），这就给出了一个 x-height 比例为 0.5（8 除以 16）：'
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By using `font-size-adjust`, you can ensure that no matter which font is displayed,
    the x-height always has the same value, and legibility does not suffer. To illustrate,
    consider the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `font-size-adjust`，你可以确保无论显示哪种字体，x-height 始终保持相同的值，且可读性不受影响。为说明这一点，请考虑以下代码：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, in the following three `h1` elements, all with the same values for `font-size`,
    I apply different values to them using their class names, which you can see in
    this markup:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在接下来的三个 `h1` 元素中，所有的 `font-size` 值相同，我通过它们的类名应用了不同的值，你可以在这段标记中看到：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first `h1` is rendered in the default Helvetica Neue font, the second in
    Impact, and the third also in Impact but with the `font-size-adjust` property
    applied using the value `0.517`, which is the x-height of Helvetica Neue. You
    can see the results in [Figure 5-5](ch05.html#ch05fig5).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 `h1` 使用默认的 Helvetica Neue 字体渲染，第二个使用 Impact，第三个也使用 Impact，但应用了 `font-size-adjust`
    属性，值为 `0.517`，即 Helvetica Neue 的 x-height。你可以在[图 5-5](ch05.html#ch05fig5)中查看效果。
- en: '![Image](graphics/f05-05.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f05-05.jpg)'
- en: '*Figure 5-5: The effect of* `*font-size-adjust*` *on the Impact font (third
    line)*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-5：* `*font-size-adjust*` *对 Impact 字体的影响（第三行）*'
- en: You can clearly see the difference between the Helvetica Neue (first line) and
    Impact (second line) fonts in the first two `h1` elements. (Of course, you are
    unlikely to ever use these two in the same font stack, but because they have quite
    different x-heights, they’re good for illustrative purposes.) As I mentioned,
    Helvetica Neue has an x-height ratio of 0.517, which means the lowercase *x* is
    about half the height of the font. By contrast, Impact has an x-height ratio of
    0.7, which means less contrast in height between upperand lowercase letters.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以清楚地看到在前两个 `h1` 元素中，Helvetica Neue（第一行）和 Impact（第二行）字体之间的差异。（当然，你不太可能在同一个字体堆栈中同时使用这两种字体，但由于它们的
    x-height 差异很大，因此它们非常适合用于说明。）如我所提到的，Helvetica Neue 的 x-height 比例为 0.517，这意味着小写的
    *x* 大约是字体高度的一半。相比之下，Impact 的 x-height 比例为 0.7，这意味着大写字母和小写字母之间的高度对比较小。
- en: 'The first two lines in the example are not adjusted in any way, so Impact’s
    lowercase characters in the second line are considerably taller than Helvetica
    Neue’s in the first line—the fonts have the same size, but their metrics are different.
    In the third line, however, I set the `font-size-adjust` value to `0.517` to match
    the x-height ratio of Helvetica Neue:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中的前两行没有做任何调整，因此第二行的 Impact 小写字母比第一行的 Helvetica Neue 要高得多——字体大小相同，但它们的度量标准不同。然而，在第三行，我将
    `font-size-adjust` 的值设置为 `0.517`，以匹配 Helvetica Neue 的 x-height 比例：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This adjusts the font size so Impact displays at a smaller size—just over 18.6px,
    which is slightly more than half of the 36px height set by `font-size`. You can
    see this more clearly if I directly compare the two elements, as shown in [Figure
    5-6](ch05.html#ch05fig6). Here, the characters without *ascenders* (lines that
    rise above the x-height)—that is, *e*, *x*, *c*, and *n*—of the adjusted Impact
    font are the exact same height as those of the Helvetica Neue font.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-6: Characters from the Helvetica Neue font (left) compared to characters
    from the Impact font adjusted with* `*font-size-adjust*` *(right)*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, a font’s x-height ratio isn’t easily available; you can either
    use a graphics package to measure it manually or try to find an online resource.
    (I found a calculator made by the online fonts service, Fontdeck, which works
    with the fonts installed on your system: *[http://fontdeck.com/support/fontsizeadjust/](http://fontdeck.com/support/fontsizeadjust/)*.)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The major drawback of this property is that, at the time of writing, Firefox
    is the only browser that supports it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '***font-stretch***'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Some font families contain condensed or expanded variants, and the `font-stretch`
    property allows access to these. Here’s the syntax:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'According to the specification, the keyword value can be any one of the following:
    `normal` (the default), `ultra-condensed`, `extra-condensed`, `condensed`, `semi-condensed`,
    `semi-expanded`, `expanded`, `extra-expanded`, and `ultra-expanded`. Each keyword
    relates to a font variant within a family, such as Frutiger Condensed or Nova
    Ultra Expanded.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, I use `font-stretch` to display two different faces
    of the font PT Sans, using the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `h1` element is displayed twice, both times using the font PT Sans. In the
    second instance, I’ve used the `font-stretch` property with the value `condensed`,
    which tells the browser to display the PT Sans Condensed face. You can see the
    results in [Figure 5-7](ch05.html#ch05fig7).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-7: The second example uses the narrow font face because of the effect
    of the* `*font-stretch*` *property.*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'The `font-stretch` property is implemented in Firefox and IE9 and above, but
    you could also replicate the effect by using the `@font-face` rule (introduced
    at the beginning of this chapter) to specify a condensed or expanded face in your
    font stack:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**OpenType Features**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although web typography takes a great leap forward in CSS3, it still just scratches
    the surface of the possibilities of type. If you compare the options available
    to you in a browser with what’s available in a desktop publishing application
    such as Adobe InDesign, you’ll see that the latter is much richer than the former.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: OpenType font formats are capable of much more than face or weight variations;
    they have a range of ligatures, swashes, special numeric characters, and much
    more. (If none of those terms makes any sense to you, I recommend Magnet Studio’s
    Beginners Guide to OpenType at *[http://www.magnetstudio.com/words/2010/opentype-guide/](http://www.magnetstudio.com/words/2010/opentype-guide/)*).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '***Enabling Font Features***'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Many browsers have implemented a property that allows you to explore the extra
    features afforded by OpenType and other similar formats. The new property is called
    `font-feature-settings`, and here’s its syntax:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `*parameters*` value is a series of strings containing shorthand codes
    for each font feature, plus an optional binary value to enable or disable the
    feature. Here’s an example:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The first parameter is `dlig`, the short code for discretionary ligatures, plus
    the value of `on` to show it’s being enabled—the default state is on, so you can
    safely omit that value in this example.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to disable a feature, you use the alternative binary value, `off`;
    in the following example, I’m disabling the small caps OpenType feature:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can, as I mentioned, have more than one parameter—just create a comma-separated
    list. The following example enables common ligatures and disables tabular numbers:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s look at some examples that show the advantage of using Open-Type features.
    In “[True vs. Artificial Font Faces](ch05.html#ch05leve1sec53)” on [page 50](ch05.html#page_50),
    I showed why you should always use a true italic font rather than letting the
    browser create one artificially. In this example, you’ll see that the same principle
    holds when using the small caps font variant. Here are the relevant style rules:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here, I use two `h1` elements: I apply the `font-variant` property with the
    `small-caps` value to the first; for the second, I use `font-feature-settings`,
    with the parameter used to toggle small caps, `smcp`. You can see the difference
    in [Figure 5-8](ch05.html#ch05fig8).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-08.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-8: The lower example uses OpenType’s own small caps feature*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: In the first `h1` element, which uses simulated small caps, the proportions
    are off; the difference between the large and small capitals is barely noticeable.
    Compare that with the second `h1` element, which has more obvious proportions
    and looks more pleasing to the eye.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Now I’ll demonstrate the use of ligatures, which are used to join certain pairs
    of characters to make them appear more harmonious. As with kerning, most browsers
    automatically use common ligatures unless instructed not to, so, in this example,
    I’ll compare text with no ligatures, common ligatures, and discretionary—that
    is, more decorative—ligatures.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code is applied to three `h1` elements. The first has the parameter string
    `"liga" off`, so common ligatures are disabled. The second uses the same parameter
    string except without the `off` value, so common ligatures are enabled. The third
    has the string `"dlig"`, which enables discretionary ligatures. [Figure 5-9](ch05.html#ch05fig9)
    compares the three.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-09.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-9: Comparing OpenType ligatures: (from top) none, common, and discretionary*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Pay attention to the character pairs *Th* and *ct*. In the first `h1` element,
    without ligatures, they are rendered as separate characters. In the second, with
    common ligatures, the *Th* pair is joined together at the point where the characters
    almost meet. In the third `h1` element, the ligatures are discretionary, so the
    *ct* pair is also joined with an extravagant flourish.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, `font-feature-settings` are implemented in IE10+ and
    in Chrome and Firefox with appropriate vendor prefixes. You can also get access
    to these properties in Safari, but in a slightly different way; read on to find
    out how.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '*These features are all suggestions to the browser, not commands; some browsers
    will choose how fonts are rendered considering the platform and potential performance,
    and these feature suggestions may be ignored.*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '***Font Feature Properties***'
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The individual features enabled or disabled by `font-feature-settings` are
    also specified to be implemented as individual properties, known as the `font-variant-*`
    properties. For example, to work with ligatures, you use the `font-variant-ligatures`
    property with a keyword value representing the ligatures you wanted to set; the
    following code disables discretionary ligatures:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can also use `font-variant-position` for super- or subscript, `font-variant-caps`
    for titling capitalization, `font-variant-numeric` for numerical forms, and `font-variant-alternates`
    for swashes, ornaments, and so on.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Chrome and Safari are the only browsers to support the `font-variant-*` properties
    currently, with the `-webkit-` prefix, and the examples in [Figures 5-7](ch05.html#ch05fig7),
    [5-8](ch05.html#ch05fig8), and [5-9](ch05.html#ch05fig9) should all work in Safari
    using these properties instead of `font-feature-settings`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: One other related property is `font-kerning`, which (fairly obviously) controls
    the kerning of a font. This accepts values of `normal`, where kerning is applied;
    `none`, where kerning is disabled; and `auto` (the default), which lets the browser
    make the decision of whether to kern.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In [Figure 5-10](ch05.html#ch05fig10), you can see this property in action.
    The upper heading has kerning disabled, whereas the lower has it applied. I’ve
    added some background lines to make it easier to see.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f05-10.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-10: Text with kerning disabled (top) and enabled (bottom) using the*
    `*font-kerning*` *property*'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While `font-size-adjust` and `font-stretch` will surely come in handy in the
    future, for now `@font-face` is the killer feature of the Web Fonts Module. `@font-face`
    is not without its drawbacks, however, not least that every extra font you use
    adds to the page’s load time. Also be aware that misuse or overuse of different
    typefaces can lead to decreased legibility. Your site lives or dies on its content,
    so make sure your visitors can read it by choosing your fonts carefully and checking
    them closely across different browsers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Despite those caveats, you can use this simple rule to amazing effect. In [Chapter
    6](ch06.html#ch06), I’ll show you some ways to further enhance your typography.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Fonts: Browser Support**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| `@font-face` | Yes | Yes | Yes | Yes |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| `font-size-adjust` | No | Yes | No | No |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| `font-stretch` | No | Yes | No | Yes |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| `font-feature-settings` | Yes | Yes | No | IE10 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| `font-variant-^([*](ch05.html#footnote21a))` | Yes* | No | Yes* | No |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '[*](ch05.html#footnote_21a) Requires vendor prefix'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
