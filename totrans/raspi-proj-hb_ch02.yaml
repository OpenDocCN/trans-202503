- en: '**2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pushbutton LED Flashlight**
  prefs: []
  type: TYPE_NORMAL
- en: This LED flashlight will teach you to use pushbuttons, an essential skill in
    electronic circuits. You’ll learn how to use a pushbutton in your circuit to trigger
    an event—in this case, lighting an LED—when the pushbutton is pressed and stop
    the event when it’s released.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0047-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: 5 mm LED
  prefs: []
  type: TYPE_NORMAL
- en: 330 Ω resistor
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING SWITCHES AND BUTTONS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Switches are everywhere. You use them to turn on lights, adjust the speed of
    your blender, light your stove, and so much more. There’s a wide variety of switches
    available, but some of the ones you’ll see around the house include pushbutton,
    toggle, rotary, and magnetic reed switches. [Figure 2-1](ch02.xhtml#ch02fig1)
    shows a few different switches commonly used in electronics.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0048-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 2-1:** Several types of switches used in electronics'
  prefs: []
  type: TYPE_NORMAL
- en: A switch can act either as an *interrupter*, interrupting the electric current
    to allow or restrict power to a certain component, or as a *diverter*, diverting
    the current to another part of the circuit. This project will use a simple pushbutton—an
    interrupter switch that is great for electronics because it is cheap, fits perfectly
    into a breadboard, and is easy to manipulate.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main types of pushbuttons: normally open and normally closed.
    *Normally open* pushbuttons, shown in [Figure 2-2](ch02.xhtml#ch02fig2), have
    a circuit that’s open by default, preventing the current from flowing through
    it. When you press the pushbutton, the two sides are connected, the circuit closes,
    and current flows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0049-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 2-2:** A normally open pushbutton’s internal connection'
  prefs: []
  type: TYPE_NORMAL
- en: '*Normally closed* pushbuttons have a closed circuit when the button is not
    being pressed, allowing current to flow through until you press the pushbutton
    to open the circuit and stop its flow.'
  prefs: []
  type: TYPE_NORMAL
- en: Pushbuttons can have either two or four legs. Four-leg pushbuttons are more
    common in prototyping projects because they fit well into the breadboard. The
    right side of [Figure 2-2](ch02.xhtml#ch02fig2) shows a diagram of a typical normally
    open, four-leg pushbutton. Legs 1 and 2 are always connected. The same is true
    for legs 3 and 4.
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll use a normally open pushbutton with four legs. This pushbutton
    allows current to flow only *while* the button is being pressed, so unlike a light
    switch, the LED in this project will be lit only for the duration that the button
    is held down.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this project, you want the LED to turn on only when the button is being pressed,
    so your Raspberry Pi needs to be able to tell when the button is being pressed
    and when it isn’t. Your Raspberry Pi will get this information through the GPIO
    pins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create your circuit, using [Figure 2-3](ch02.xhtml#ch02fig3)
    as a reference:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND to the blue power rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert an LED into the breadboard and connect the positive LED lead to GPIO
    25 through a 330 Ω resistor, as we did in [Project 1](ch01.xhtml#ch01). Connect
    the negative lead to the GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the pushbutton in the middle of the breadboard so that two legs are on
    either side of the divide. You want to make sure there isn’t a connection between
    the two top pins and the two bottom pins. (Remember that the connection in the
    rows of holes is broken in this center strip.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one side of the pushbutton to GPIO 2 and the other to GND, as shown
    in [Figure 2-3](ch02.xhtml#ch02fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0050-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 2-3:** The LED flashlight circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This script will trigger different events depending on whether the pushbutton
    is being pressed or released. The following *pseudoscript*—a plain English version
    of the code instructions—should help you understand the Python script. Writing
    a pseudoscript is a great way to outline your program. Here’s what the program
    should do:'
  prefs: []
  type: TYPE_NORMAL
- en: When the pushbutton is being pressed, the LED is set to on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the pushbutton is not being pressed (that is, when it’s released), the
    LED stays off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code into the Python Editor and then save the script
    as *led_flashlight.py* in the *LEDs* folder (remember that you can download all
    the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This script is straightforward to understand. You first import the LED and the
    Button libraries to control the LED and the pushbutton; then, you import `pause`
    from the signal library ➊. The `pause()` ➎ function keeps the program running
    even after all the code has run through to detect events—in this case, it’s continuously
    checking the pushbutton state.
  prefs: []
  type: TYPE_NORMAL
- en: You create an `LED` object called `led` that refers to GPIO 25, the pin the
    LED is connected to, and a `Button` object called `button` that refers to GPIO
    2, the pin the pushbutton is connected to ➋.
  prefs: []
  type: TYPE_NORMAL
- en: The `button.when_pressed` function turns the LED on when the pushbutton is being
    pressed by calling `led.on` when a pushbutton press is detected ➌. Likewise, the
    `button.when_released` function calls `led.off` to turn the LED off when the pushbutton
    is not being pressed ➍.
  prefs: []
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. The LED should
    be on while the pushbutton is pressed down. To stop the program, press CTRL-C.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With what you’ve learned in this simple project, you can create countless other
    projects. Here are some ideas to test your skills:'
  prefs: []
  type: TYPE_NORMAL
- en: Add more pushbuttons and LEDs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the code to change the LED state when you press the pushbutton so that
    you don’t have to hold the button to keep the LED lit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a traffic light.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
