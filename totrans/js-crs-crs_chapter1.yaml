- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">GETTING
    STARTED</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll get started writing your first JavaScript code. First,
    you’ll learn how to enter code directly into a web browser, without having to
    install any specialized software. This approach is ideal for quickly testing out
    simple sequences of code. Next, you’ll see how to write JavaScript in a separate
    text editor program, which is more appropriate as your code becomes more complex.
    We’ll use both of these techniques for writing and executing JavaScript code throughout
    the book, so this chapter will prepare you for everything that’s to come.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Using the JavaScript Console</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The quickest way to run JavaScript code is through the *JavaScript console*.
    This is an interface in most web browsers that lets you enter individual lines
    of code and immediately see the results. We’ll use the console in Google Chrome,
    the most popular browser. If you don’t have Chrome installed, you can download
    and install it from [*https://<wbr>www<wbr>.google<wbr>.com<wbr>/chrome*](https://www.google.com/chrome).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Chrome installed, follow these steps to access the JavaScript
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Open Chrome and enter **about:blank** in the address bar. This will take
    you to a blank web page.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  In Windows or Linux, press CTRL-SHIFT-J, or press OPTION-COMMAND-J if you’re
    using macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  You should now see the JavaScript console, including the > prompt symbol
    where you can enter code. Click inside the console to put your cursor next to
    the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: The console should look something like [Figure 1-1](chapter1.xhtml#fig1-1).
    It may appear alongside the blank web page, rather than beneath it, depending
    on your browser settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_1-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-1: Google Chrome’s
    JavaScript console</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re learning a new programming language, it’s customary to start by
    writing some code to display the message “Hello, world!” Let’s try it out! Type
    the following into the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this book, when I ask you to enter code into the JavaScript console, I’ll
    show the code in bold. If the code produces any output in the console, I’ll show
    it directly below your input, not in bold.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re ready to run the code you’ve typed in, press ENTER. You should see
    a dialog appear in the browser containing the message “Hello, world!” as shown
    in [Figure 1-2](chapter1.xhtml#fig1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_1-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-2: Hello, world!</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve just used JavaScript’s alert function, which makes text pop up in a
    dialog. A *function* is a piece of code for performing a certain task—in this
    case, displaying a dialog. Functions can take *arguments*, which help specify
    how the task should be performed. The alert function takes one argument: a piece
    of text to display. Here, we’ve provided "Hello, world!" as the argument. You’ll
    learn much more about functions in [Chapter 5](chapter5.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Click **OK** to dismiss the dialog and get back to the console. Then congratulate
    yourself on running your first JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Using a Text Editor</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JavaScript console is good for testing out a few lines of code, but it isn’t
    so suitable for the larger projects we’ll be working on later in the book. For
    those, it’s more practical to use a *text editor*, a dedicated program for writing
    and editing code files. In this section, we’ll create a similar “Hello, world!”
    program in a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, I recommend using the Visual Studio Code text editor from Microsoft
    (VS Code for short). It’s freely available for Windows, macOS, and Linux. Go to
    [*https://<wbr>code<wbr>.visualstudio<wbr>.com*](https://code.visualstudio.com)
    and follow the instructions there to download and install the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve installed VS Code, create a new directory on your computer called
    *javascript_work* where you can save the code files you work on for this book.
    Then follow these steps to get ready to write your code:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Open VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  Create a new file by selecting **File****New File**.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  You should be prompted to name the new file. Enter ***hello.html***.
  prefs: []
  type: TYPE_NORMAL
- en: 4.  Next, you should be prompted to choose the new file’s location. Select the
    *javascript_work* directory you just created and click **Create File**.
  prefs: []
  type: TYPE_NORMAL
- en: 5.  You should now be on a screen where you can edit your new file.
  prefs: []
  type: TYPE_NORMAL
- en: The.*html* extension in the filename indicates that this is an HTML file. HTML
    is a markup language used to describe the content of web pages. One way to run
    JavaScript code is to include it in an HTML file and then open the HTML file in
    a web browser. That’s what we’ll be doing here. Enter the contents of [Listing
    1-1](#Lis1-1) into your new file, exactly as written.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 1-1: Writing JavaScript
    inside the file</samp> <samp class="SANS_Futura_Std_Book_11">hello.html</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: As you type, you may notice that VS Code tries to predict what you’re entering.
    This can be confusing at first, but once you get used to it, you’ll likely find
    it helpful. Sometimes these predictions will be inserted automatically, while
    for others you’ll have to press TAB to insert them.
  prefs: []
  type: TYPE_NORMAL
- en: The first and last lines of [Listing 1-1](#Lis1-1) are HTML code, the bare minimum
    required to embed JavaScript into an HTML file. We’ll explore HTML in detail in
    [Chapter 7](chapter7.xhtml). For now, all you need to know is that it involves
    *tags* that identify different components of a web page. Most important for our
    purposes are the opening <script> tag at the end of the first line and the closing
    </script> tag at the beginning of the third line. When you load this file in a
    browser, everything between these tags (the second line in [Listing 1-1](#Lis1-1))
    will be interpreted as JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JavaScript portion of the file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here we’re using the alert function, just as we did earlier in the console.
    This time we provide a different message, "Hello from hello.html!", to display
    in the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re finished entering the code, save the file. Now you’re ready to
    open the file in Chrome and see the JavaScript code in action. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Open a new tab in Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  Press CTRL-O in Windows or Linux, or COMMAND-O in macOS, to bring up the
    Open File dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  Locate your *hello.html* file, select it, and click **Open**.
  prefs: []
  type: TYPE_NORMAL
- en: You should now see a dialog pop up containing the "Hello from hello.html!" message,
    as shown in [Figure 1-3](chapter1.xhtml#fig1-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_1-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-3: Hello from</samp>
    <samp class="SANS_Futura_Std_Book_11">hello.html</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">!</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The browser recognized the code in the HTML file between the <script> and </script>
    tags as JavaScript and executed that code, causing the dialog to appear. If you
    don’t see the dialog pop up, double-check the code in your *hello.html* file to
    make sure it matches [Listing 1-1](#Lis1-1) exactly.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned two different ways to write and execute JavaScript
    code. First, you entered code into the JavaScript console in the Chrome web browser.
    You’ll use this technique in the coming chapters to test out short snippets of
    code as you learn the basics of the language. Next, you embedded JavaScript in
    an HTML file using a text editor, then opened that file in Chrome to run the code.
    You’ll use this technique in later chapters to develop more sophisticated projects.
  prefs: []
  type: TYPE_NORMAL
