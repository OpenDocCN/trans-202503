["```\n/* Project 60 â€“ Building a Remote Monitoring Station created 18 Dec 2009 by David A. Mellis, modified 9 Apr 2012 by Tom Igoe modified August 2020 by John Boxall */\n#include <SPI.h>#include <Ethernet.h>1 IPAddress ip(`xxx`,`xxx`,`xxx`,`xxx`); //  Replace this with your project's IP address2 byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; \nEthernetServer server(80);\nvoid setup() \n{ // Start the Ethernet connection and server Ethernet.begin(mac, ip); server.begin(); for (int z=0; z<10; z++)   { pinMode(z, INPUT);         // set digital pins 0 to 9 to inputs }\n} \nvoid loop()\n{ // listen for incoming clients (incoming web page request connections) EthernetClient client = server.available(); if (client) { // an HTTP request ends with a blank line boolean currentLineIsBlank = true; while (client.connected()) { if (client.available()) { char c = client.read(); if (c == '\\n') && currentLineIsBlank) { client.println(\"HTTP/1.1 200 OK\"); client.println(\"Content-Type: text/html\"); client.println(\"Connection: close\"); client.println(); client.println(\"<!DOCTYPE HTML>\"); client.println(\"<html>\"); // add a meta refresh tag, so the browser pulls again every 5 sec:3           client.println(\"<meta http-equiv=\\\"refresh\\\" content=\\\"5\\\">\");  // output the value of each analog input pin onto the web page for (int analogChannel = 0; analogChannel < 6; analogChannel++) { int sensorReading = analogRead(analogChannel);4             client.print(\"analog input \"); client.print(analogChannel); client.print(\" is \"); client.print(sensorReading); client.println(\"<br />\");        } // output the value of digital pins 0 to 9 onto the web page for (int digitalChannel = 0; digitalChannel < 10; digitalChannel++) { boolean pinStatus = digitalRead(digitalChannel); client.print(\"digital pin \"); client.print(digitalChannel); client.print(\" is \"); client.print(pinStatus); client.println(\"<br />\");           }           client.println(\"</html>\"); break; } if (c == '\\n') { // you're starting a new line currentLineIsBlank = true; }  else if (c != '\\r') { // you've gotten a character on the current line currentLineIsBlank = false; } } } // give the web browser time to receive the data delay(1); // close the connection: client.stop(); }\n}\n```", "```\nIPAddress ip(192, 168, 0, 69); // Ethernet shield's IP address\n```", "```\nclient.print(\"analog input \");\nclient.print(analogChannel);\nclient.print(\" is \");\nclient.print(sensorReading);\n```", "```\n// Project 61 - Creating an Arduino Tweeter\n#include <SPI.h> \n#include <Ethernet.h>\n#include <Twitter.h>// Ethernet shield settings1 IPAddress ip(192,168,0,1); // Replace this with your project's IP address2 byte mac[] = { `0xDE`, `0xAD`, `0xBE`, `0xEF`, `0xFE`, `0xED` };3 Twitter twitter(\"`insertyourtokenhere`\");\n// Message to post4 char msg[] = \"`I'm alive!`\";\nvoid setup()\n{ delay(1000); Ethernet.begin(mac, ip); // or you can use DHCP for automatic IP address configuration // Ethernet.begin(mac); Serial.begin(9600); Serial.println(\"connecting ...\");\n}\nvoid loop()\n{5  if (twitter.post(msg)) { int status = twitter.wait(&Serial); if (status == 200) { Serial.println(\"OK.\"); } else { Serial.print(\"failed : code \"); Serial.println(status); } } else { Serial.println(\"connection failed.\"); } while (1);\n}\n```", "```\nhttp://us01.proxy.teleduino.org/api/1.0/328.php?k={*YOURKEY*}&r=definePinMode&pin=<*X*>&mode=<*Y*>\n```", "```\nhttp://us01.proxy.teleduino.org/api/1.0/328.php?k={*YOURKEY*}\n&r=setDigitalOutput&pin=<*X*>&output=<*S*>\n```", "```\nhttp://us01.proxy.teleduino.org/api/1.0/328.php?k={`YOURKEY`}&r=setDigitalOutput&pin=7&output=1\n```", "```\n{\"status\":200,\"message\":\"OK\",\"response\"\n{\"result\":0,\"time\":0.22814512252808,\"values\":[]}}\n```", "```\n{\"status\":403,\"message\":\"Key is offline or invalid.\",\"response\":[]}\n```", "```\nhttp://us01.proxy.teleduino.org/api/1.0/328.php?k={`YOURKEY`}&r=setPwmOutput&pin=<`X`>&output=<`Y`>\n```"]