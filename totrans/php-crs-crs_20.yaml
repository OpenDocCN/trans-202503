- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 16 AUTHENTICATION AND AUTHORIZATION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Many websites implement security measures to safeguard private content or sensitive
    data. In this chapter, we’ll use PHP sessions to develop an application with one
    such measure, a login form. In the process, you’ll learn how to implement two
    related security concepts: authentication and authorization.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Authentication* determines the identity of the person using the computer system—that
    is, *who* is the user? Our application will harness the username- and-password
    login method of authentication to identify the user. Meanwhile, *authorization*
    determines whether the user is permitted to access a particular part of the computer
    system (*what* is the user permitted to do?). Our application will use data stored
    in a PHP session, combined with access control logic, to authorize certain aspects
    of the web application that a user can access.'
  prefs: []
  type: TYPE_NORMAL
- en: '### A Simple Login Form'
  prefs: []
  type: TYPE_NORMAL
- en: At its heart, a login page is an HTML form usually consisting of a text field
    for the unique user identifier (such as a username or email address), a password
    text field, and a Submit button. That’s it! The difference between a regular text
    field and a password text field is that for the latter, the browser displays a
    placeholder symbol like an asterisk (*) for each character typed so that the actual
    password isn’t displayed onscreen for a snooper to read. [Figure 16-1](#fig16-1)
    shows a bare-bones login form.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-1: A simple login form'
  prefs: []
  type: TYPE_NORMAL
- en: 'The form has the three elements we’ve described: a Username field, a Password
    field, and a Submit button. [Listing 16-1](#lis16-1) shows the HTML code needed
    to display this login form.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-1: The code for a basic login form'
  prefs: []
  type: TYPE_NORMAL
- en: This code creates our labeled input boxes for a username and password, along
    with a submit input button. We specify type="password" for the Password field
    so that the input will display as placeholder characters ❷. The login form submits
    via the POST HTTP method ❶. Almost all login forms use the POST method so that
    the user’s password won’t be displayed as a query-string variable in the browser
    address bar, as would happen with the GET method. A second reason to use POST
    is that we don’t want the login data to be cached. Instead, we want the server
    to process each username and password at the time the login form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: '*Caching* occurs when a computer system or application, such as a web browser,
    stores copies of files locally (on the desktop, laptop, or phone) in order to
    retrieve them faster the next time they’re requested. Although this works well
    for website logos and unchanging page content like home pages, you usually wouldn’t
    want a web browser to store a local copy of submitted forms, such as login forms.'
  prefs: []
  type: TYPE_NORMAL
- en: Web browser applications often cache web pages requested with the GET HTTP method,
    but they don’t cache the content of web pages received after a POST HTTP request.
    Remember, GET requests simply retrieve information (without changing content on
    the server), so there is no problem with caching such requests. However, POST
    requests often involve form data submission (including login forms), and such
    requests can result in changes to the server contents such as deleting or changing
    database contents, so it would be dangerous, and perhaps insecure, to cache and
    repeat such POST requests.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Site with a Login Form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you know how to create a basic login form, let’s build a website that
    includes a functional, professional-looking login page. We’ll secure one of the
    pages of the website by requiring users to log in to view it. The website will
    have the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Contact Us page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A login form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An error message page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Secure Banking page (with Swiss bank account details!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’re happy for any user (whether logged in or not) to see the home page,
    Contact Us page, and login page, we need to authenticate users via the form on
    the login page in order to allow only authorized users to view the secured Swiss
    bank account page.
  prefs: []
  type: TYPE_NORMAL
- en: All the pages of the website will have the same structure and look. For example,
    [Figure 16-2](#fig16-2) shows the home page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-2: The home page of our website'
  prefs: []
  type: TYPE_NORMAL
- en: Every page will have a Bootstrap-styled header featuring a custom logo and a
    navigation bar. Where appropriate, the navigation link relating to the page currently
    being displayed will be highlighted in white, while the other links will be gray.
    Below the navigation bar is a banner with a website tagline on the left and a
    greeting on the right. The bottom part of each page contains the individual page
    content (in this case, the heading and text telling users that this is the home
    page).
  prefs: []
  type: TYPE_NORMAL
- en: To build the website, we’ll first create the individual pages. Then we’ll create
    the login form and login-processing logic, and add the code to authorize only
    successfully logged-in users to view the secured Swiss bank account page.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the File Structure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create a folder for the project. Inside, it will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg304.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Shared Page Content
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we’ll create a *_header.php* file defining the header content shared by
    all the page templates. Using a shared header file will give a consistent look
    and feel to the site and avoid unnecessary code duplication. Additionally, if
    we ever want to change the site style or navigation bar contents, we’ll need to
    change only the contents of this one header file.
  prefs: []
  type: TYPE_NORMAL
- en: Add the *_header.php* file to the *templates* subfolder*.* The file will contain
    quite a few lines of code (mostly Bootstrap classes and HTML <div> elements),
    so we’ll look at it in three parts, starting with [Listing 16-2](#lis16-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-2: The first part of _header.php'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with a PHP code block declaring three variables to help control the
    display of the navigation links at the top of the page: $homeLink, $contactLink,
    and $loginLink, corresponding to the Home, Contact Us, and Login page links. Later,
    when we write the individual templates for each of these pages, we’ll add code
    setting that page’s variable to the ''active'' string, which corresponds to a
    CSS style selector that will make the page’s navigation link appear white. Here
    in the *_header* template, we use the null-coalescing operator ?? (see [Chapter
    4](chapter4.xhtml)) to set all three variables to empty strings if they don’t
    already have a value. An empty string will make the navigation link appear gray.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, when we load the login page, for example, $loginLink will be set to 'active',
    and the Login navigation link will appear white, while $homeLink and $contactLink,
    not having any prior value, will be set to empty strings and their links will
    appear gray. This use of PHP variables to fill in CSS style values is an effective
    way to highlight the current page in a navigation bar and gray out the others.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*If you aren’t confident using the null-coalescing operator, you can always
    write an* if *statement using the* isset() *function to provide the same functionality,
    such as* if (!isset($homeLink)) $homeLink = ''''*.*'
  prefs: []
  type: TYPE_NORMAL
- en: We next use another null-coalescing operator to set the $pageTitle variable
    to an empty string in case it hasn’t been set. Then we use the value of $pageTitle
    to form an HTML <title> element for the page ❶. This way, each function that includes
    our *_header.php* file can define a value for the PHP variable $pageTitle, giving
    each page a meaningful title that most browsers will use for the bookmark text.
    We then read in the Bootstrap stylesheet as well as our own CSS stylesheet file
    from */public/css/login.css*. This stylesheet, which we’ll create later, will
    have a few styles for the login page. The final line in this listing starts a
    <body> element, styled with the Bootstrap container class.
  prefs: []
  type: TYPE_NORMAL
- en: The code for our header template continues in [Listing 16-3](#lis16-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-3: The second part of _header.php'
  prefs: []
  type: TYPE_NORMAL
- en: We declare a header element that will contain the logo image and navigation
    links ❶. Within it, we declare the navigation bar link for the home page, styling
    this link with class="nav-link <?= $homeLink ?>" ❷. Here’s where we continue implementing
    the navigation link styling mechanism we set in motion at the start of [Listing
    16-2](#lis16-2). The link will be styled as a Bootstrap navigation link (nav-link),
    but also as active (highlighted in white) if we’ve set the $homeLink variable
    to 'active'. Otherwise, if $homeLink is an empty string, the navigation bar link
    won’t be highlighted in white as the active page link. We style the Contact Us
    ❸ and Login ❹ links in a similar way, again making them active only if their corresponding
    link variable ($contactLink or $loginLink) contains the string 'active'.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 16-4 is the final part of our common page-header code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-4: The third part of _header.php'
  prefs: []
  type: TYPE_NORMAL
- en: Here we declare a Bootstrap row <div> with the standard content for every page
    on the website. This <div> is styled with a light gray background and some padding.
    It contains two <div> elements styled as columns, one with the website tagline
    and the other with a greeting touting the site’s login feature.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the Page Templates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, we’ll create the templates for the home, Contact Us, and Secure Banking
    pages. With much of the work being done by the common page-header template, the
    template scripts for these three pages are straightforward. [Listing 16-5](#lis16-5)
    shows our Home page template script. Save this script in the *templates* subfolder
    as *homepage.php*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-5: The homepage.php template'
  prefs: []
  type: TYPE_NORMAL
- en: We first assign the $pageTitle variable a value, heading off the null-coalescing
    operator in [Listing 16-2](#lis16-2). Additionally, since we want the Home link
    highlighted in the navigation bar, we assign the string 'active' to the $homeLink
    variable. Then we read in and execute the *_header.php* template. Next, we display
    the value in $pageTitle as a level 1 heading in the body of the HTML page ❶. This
    is followed by a paragraph of page content, then tags to close the <body> and
    <html> elements of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 16-6 shows the code for the Contact Us page in *templates/ contact.php*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-6: The contact.php template'
  prefs: []
  type: TYPE_NORMAL
- en: The Contact Us template is similar to the Home page template, differing only
    in the value of $pageTitle ❶, the variable set to 'active' to highlight the Contact
    Us navigation link ❷, and the page content paragraph and definition list details
    ❸.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll create the Secure Banking page, which is shown in [Figure 16-3](#fig16-3).
    We’ll add authorization logic later so that only logged-in users can view this
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-3: The Secure Banking page of our website'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 16-7 creates the Secure Banking page. Save this code in *templates/
    secureBanking.php*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-7: The secureBanking.php template'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, this template is similar to those for the home page and Contact
    Us page. It differs only in the value of $pageTitle ❶ and the page content paragraph
    ❷. Since we don’t currently link to this page in the navigation bar, we don’t
    bother setting a variable to 'active'.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the Login Form
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we’ll create a login form for our website ([Figure 16-4](#fig16-4)). Though
    we’ll use some extra HTML and CSS to make the form look more professional, at
    its core it’ll be the same as the basic login form we created at the start of
    the chapter, with a Username field, a Password field, and a Log In submit button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-4: The login page of our website'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 16-8 shows the code used to create the login form, saved in *templates/login.php*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-8: The login.php template'
  prefs: []
  type: TYPE_NORMAL
- en: 'The script starts much like our other templates: we assign a value to $pageTitle,
    set $loginLink to the string ''active'' so the Login link will be highlighted
    in the navigation bar, and read in and execute the *_header.php* template. Then
    we define a <div> to encapsulate the login form, styled with a custom formLogin
    CSS class (which we’ll create shortly). The login form itself is declared with
    the POST method and the /?action=login action ❶.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use this same action value (login) to both request the display of the
    login form and process the submitted form data, distinguishing between the requests
    by their HTTP method: GET will request the form be displayed, and POST will request
    processing of submitted login form data by the web application. We’ll implement
    this logic later in the chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Our form is structured as three Bootstrap rows for the Username ❷, Password
    ❸, and Log In ❹ inputs, each represented with a <div> element. The Username and
    Password rows contain <label> and <input> elements. Notice that the inputs have
    a placeholder attribute whose value will appear as faint gray filler text, and
    that we specify type="password" as an attribute of the Password input box to obscure
    the password while it’s being typed in.
  prefs: []
  type: TYPE_NORMAL
- en: To finish up the login page, we’ll create the CSS stylesheet *public/css/ login.css*,
    shown in [Listing 16-9](#lis16-9). It adds custom styling to the login form. Recall
    that the common *_header.php* template reads in this stylesheet for every page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-9: The CSS code in login.css'
  prefs: []
  type: TYPE_NORMAL
- en: The stylesheet defines the formLogin class referenced in [Listing 16-8](#lis16-8).
    This style sets the form background to light gray, adds padding, and sets a maximum
    width of 30 characters.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Front Controller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As usual, we’ll create a single front controller through which every request
    to our web application must arrive. Create *public/index.php* containing the code
    in [Listing 16-10](#lis16-10).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-10: The index.php front-controller script'
  prefs: []
  type: TYPE_NORMAL
- en: The script follows the usual pattern of reading in the function-declaration
    file, extracting the value of the action query-string parameter (if found in the
    request), and passing it to a switch statement that decides what to do. If the
    value is contact ❶, we invoke contact(), which reads in the template to display
    the Contact Us page. If the value is 'login' ❷, we test whether the HTTP request
    used the POST method, indicating the user has submitted username and password
    values through the login form, and invoke the processLogin() function if so. Otherwise,
    we invoke the loginForm() function to display the login page. Finally, the default
    case ❸ displays the home page by invoking the home() function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Logic Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, we need to create the functions for implementing the logic of the website,
    saved in *src/functions.php*. Five of the functions are straightforward: they
    simply display the four main pages of the site (home page, Contact Us, login page,
    Secure Banking), plus an error message page. We’ll look at these functions first,
    shown in [Listing 16-11](#lis16-11).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-11: The display functions in functions.php'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first four functions all perform the same task: they use a require_once
    statement to read in and display one of the template scripts. Next, the showError()
    function expects a $message string as a parameter. It too uses a require_once
    statement to read in and display one of the template scripts. In this case, since
    $message is a parameter, it has scope when the *error.php* template is read in
    and executed, so the template can display the contents of the string inside $message.
    (We’ll create the *error.php* template shortly.)'
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the *functions.php* script, shown in [Listing 16-12](#lis16-12),
    declares three functions for processing submitted usernames and passwords from
    the login form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-12: The second part of functions.php'
  prefs: []
  type: TYPE_NORMAL
- en: In this part of the script, we declare the getUsers() function ❶, which returns
    an array called $users whose keys are usernames and whose values are passwords.
    This is the list of users who can be authenticated through our website’s login
    system (by providing a valid username and its corresponding password). Although
    we’re using an array here, a real-world website would usually get username and
    password data from a database, and the passwords would be hashed for security
    reasons. We’ll look at how to do this in [Chapter 30](chapter30.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define the processLogin() function ❷. In it, we use filter_input()
    to attempt to retrieve the username and password submitted via the login form,
    storing the values in the $username and $password variables. Then we pass these
    values to the validLoginCredentials() function ❸. If the function returns true,
    we’ve successfully authenticated the user, since they were able to provide a matching
    username-password pair. Therefore, we display the secure bank page to the user
    by invoking the secureBanking() function. Otherwise, if validLoginCredentials()
    returns false, we invoke the showError() function to display the error page, passing
    an error message stating the login credentials are invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the error message doesn’t tell the user whether the problem is with
    the username or password. This follows the common security practice of *minimum
    information disclosure*. We shouldn’t inform the user (or hacker-bot or whatever
    is trying to log in) when they’ve found a valid username. Armed with that information,
    an attacker could repeatedly use the valid username with different passwords in
    an attempt to gain access to the system, which would be easier than needing to
    guess the username *and* the password each time.
  prefs: []
  type: TYPE_NORMAL
- en: The final function is validLoginCredentials() ❹, which expects two parameters,
    $username and $password. This is where we perform the all-important task of authenticating
    the user attempting to log in. We first retrieve the array of passwords indexed
    by the username from getUsers(), storing the array in the $users variable.
  prefs: []
  type: TYPE_NORMAL
- en: Then we test whether an element can be found in $users with the key $username.
    If no such key is found (isset($users[$username]) is false), we exit the if statement
    and the function will return false ❺, indicating the submitted username and password
    aren’t valid. However, if $username can be found in $users, its corresponding
    value is stored in the $storedPassword variable. Then we test whether the password
    received from the login form ($password) matches the retrieved password from the
    array ($storedPassword). If the two passwords match, we have valid credentials,
    so we return true. Otherwise, the script will drop out of the if statement and
    return false.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Error Page Template
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we’ll create the template for the error page ([Figure 16-5](#fig16-5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-5: The error message page after invalid login credentials'
  prefs: []
  type: TYPE_NORMAL
- en: This template, saved in *templates/error.php*, is similar to the other page
    templates we’ve created, as shown in [Listing 16-13](#lis16-13).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-13: The error.php template'
  prefs: []
  type: TYPE_NORMAL
- en: 'We set the value of $pageTitle to ''Error page'', then read in and execute
    the common *_header.php* template. In a pink Bootstrap alert–styled <div>, we
    output the string inside the $message variable ❶. All scripts that include this
    error page template should have first assigned a string to this variable (as we
    did, for example, in [Listing 16-12](#lis16-12) when we called showError() with
    the string ''invalid login credentials - try again'').  ### Storing Login Data
    with Sessions'
  prefs: []
  type: TYPE_NORMAL
- en: While our website at present allows a user to authenticate through the login
    form and visit the Secure Banking page, the site doesn’t remember the successful
    login credentials. Once the user clicks away from the bank details page, they’ll
    have to return to the login form and resubmit their credentials to view it again.
    To make the site more user-friendly, we can use PHP sessions to remember successful
    logins.
  prefs: []
  type: TYPE_NORMAL
- en: If all logged-in users should have the same level of access, we can simply store
    the username to the session after a successful login, as we’ll do in this section.
    If different users have roles that come with different levels of authorization
    (for example, sales, supervisor, manager, administrator), we could store both
    the username and the corresponding role in the session. Then we would write logic
    so logged-in users can access only pages appropriate to their role. We’ll talk
    through this second approach in Exercise 3 at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add some code to save login data to the session. We’ll also add a link
    to the Secure Banking page for the navigation bar, but we’ll let the user visit
    that page only if they’ve logged in. Otherwise, we’ll display an authentication
    error message.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Front Controller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We first need to edit our *index.php* front controller to handle navigation
    to the Secure Banking details page. Since we now plan to use sessions to remember
    login data, we also need to (re)start a PHP session at the beginning of the front-controller
    script. [Listing 16-14](#lis16-14) shows the updated script, with new code highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-14: The updated index.php front-controller script'
  prefs: []
  type: TYPE_NORMAL
- en: At the start of the script, we (re)start a session. Then we add a new case to
    the switch statement for when the value of $action is 'secured' ❶. In this case,
    we call the isLoggedIn() function, which we’ll write shortly. If it returns true,
    we invoke secureBanking() to display the Secure Banking page. Otherwise, we display
    the error page with the message 'invalid login credentials - try again'.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Login Function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we need to write a new isLoggedIn() function to check whether a username
    is stored in the $_SESSION array, indicating a user has successfully logged in.
    We also need to update our processLogin() function so that when valid login credentials
    are processed, we store the username in $_SESSION. First, add isLoggedIn() to
    the end *src/functions.php*, as shown in [Listing 16-15](#lis16-15).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-15: The isLoggedIn() function'
  prefs: []
  type: TYPE_NORMAL
- en: The function uses a simple if...else statement based on whether a value can
    be found in the $_SESSION array for the string key 'username'. If so, we return
    true; if not, we return false. Notice that we don’t need to test the actual value
    stored in the session under the 'username' key. We simply test whether *any* value
    is stored for this key. We don’t care what the username is of the user who’s logged
    in, as long as they’ve successfully logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Now edit the processLogin() function in *src/functions.php* as shown in [Listing
    16-16](#lis16-16) to store the username in the session after a successful login.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-16: Updating the processLogin() function'
  prefs: []
  type: TYPE_NORMAL
- en: In the if branch of the function’s conditional logic, we store the submitted
    username in the $_SESSION array under the 'username' key. This way, the test in
    isLoggedIn() will pass after a successful login.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Header Template
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s now edit the common *templates/_header.php* file to add a navigation bar
    link to the secured bank page, along with its associated CSS style variable. We’ll
    use an if statement so that this link will appear only while the user is logged
    in. We need to add this conditional nav-item after the navigation bar items for
    the home and Contact Us pages, as shown in [Listing 16-17](#lis16-17).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-17: Adding a conditional navigation link for the Secure Banking
    page in _header.php'
  prefs: []
  type: TYPE_NORMAL
- en: We use the null-coalescing operator to set the $securedLink variable to an empty
    string if it has no value already ❶. Then we add an if statement that uses our
    isLoggedIn() function to test whether the user is logged in ❷. If so, the navigation
    link in the body of the if statement will be displayed. The link adds an action=secured
    variable to the query string ❸. Notice also that the value of the $securedLink
    variable is part of the CSS class for this link. As with our other navigation
    links, if this variable contains the string 'active', the link will be highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Banking Page Template
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we’ve added a navigation link for the Secure Banking page, we need
    to update the *templates/secureBanking.php* script to set the $securedLink variable
    to 'active'. This will highlight the page’s navigation link when the page is being
    viewed. Update the template as shown in [Listing 16-18](#lis16-18).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-18: Updating the secureBanking.php template'
  prefs: []
  type: TYPE_NORMAL
- en: The only change we need to make here is to add the statement that sets the $securedLink
    variable before we read in the shared header template.
  prefs: []
  type: TYPE_NORMAL
- en: Offering a Logout Feature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we offer the user a way to log in and have their login information remembered,
    we should also offer a way to log out. Logging out a user means setting the $_SESSION
    array to be empty so it no longer contains an element with the string key 'username'.
    To put this into practice, we need to add a new function, update the front controller,
    and create a logout link in the navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Adding the Logout Function'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s write a logout() function in *src/functions.php* that clears the
    user’s data from the session. Add the code shown in [Listing 16-19](#lis16-19)
    to the end of the file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-19: The logout() function'
  prefs: []
  type: TYPE_NORMAL
- en: We set $_SESSION to an empty array, erasing the stored username from the session.
    Then we invoke the home() function to display the home page to the user after
    they’ve logged out.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Front Controller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we need to add a new logout case to the switch statement in our *index.php*
    front controller. Update the file as shown in [Listing 16-20](#lis16-20).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-20: The logout case in index.php'
  prefs: []
  type: TYPE_NORMAL
- en: We add a case that invokes that logout() function when the $action variable
    has the value 'logout' ❶.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Logout Link
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Finally, we need to conditionally decide whether to offer the user a Login link
    or a Logout link, depending on whether the user is currently logged in. We therefore
    need to add an if statement to the common *templates/_header.php* file, as shown
    in [Listing 16-21](#lis16-21).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-21: The conditional Login/Logout navigation bar link in _header.php'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the declaration of an HTML list item with the nav-item class, we use
    an if...else statement to test the value returned by the isLoggedIn() function.
    If the user is logged in ❶, we display the /?action=logout link. Otherwise, if
    the user isn’t logged in ❷, we display the /?action=login link as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 16-6](#fig16-6) shows the navigation bar when the user has successfully
    logged in and is visiting the secured bank details page.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-6: The navigation bar showing the Secure Banking and Logout links'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the Logout link appears on the right instead of the Login link.
    Additionally, the Secure Banking link in the middle is highlighted, since that’s
    the page the user is currently viewing.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Logged-in Username
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final feature we’ll add to our website is to display the username of the
    logged-in user in the navigation bar, above the Logout link. To do this, we need
    a function to return the username stored in the $_SESSION array. We’ll also need
    to update the shared header template and add extra code to our CSS stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the Username
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To look up the current user’s username, add the function in [Listing 16-22](#lis16-22)
    to the end of the *src/functions.php* file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-22: The usernameFromSession() function'
  prefs: []
  type: TYPE_NORMAL
- en: Here we define the usernameFromSession() function. Using isset(), we check whether
    a value can be found in the $_SESSION array under the 'username' key. If a value
    exists, it’s returned. Otherwise, the function returns an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Navigation Bar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Listing 16-23 shows what we need to add to the navigation bar in the common
    *templates/_header.php* file to display the current username as well as the Logout
    link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-23: Displaying the username in _header.php'
  prefs: []
  type: TYPE_NORMAL
- en: 'We declare an HTML <span> element, styled with the CSS username class (which
    we’ll create next). This displays the text You are logged in as: followed by the
    value returned from the usernameFromSession() function. Since we should display
    this text only when the user is logged in, there will always be a stored username,
    so usernameFromSession() should never return an empty string.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the CSS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Finally, we need to add a CSS rule for the username class to *public/css/login.css*,
    as shown in [Listing 16-24](#lis16-24). This style rule colors the username text
    yellow (in contrast with the dark background of the navigation bar)..username
    {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-24: The username CSS class in login.css'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 16-7](#fig16-7) shows how the username is displayed in the navigation
    bar as a result of this CSS declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure16-7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-7: The username and Logout link in the navigation bar'
  prefs: []
  type: TYPE_NORMAL
- en: The text showing the username appears above the Logout link. In this example,
    I’ve logged in with the username matt. This username was successfully stored in
    the $_SESSION array and then retrieved for display.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we created a front controller–driven website that uses the
    login form method of authenticating a user’s identity. Although this is a small
    website with only a few pages, its basic architecture and approach to security
    mirror the way real-world, secure websites operate. We wrote functions to search
    for a match between submitted username and password credentials and a stored array
    of username and password pairs.
  prefs: []
  type: TYPE_NORMAL
- en: We stored details of a successfully authenticated user in a PHP session to remember
    when a user has logged in. Then we wrote program logic such as the isLoggedIn()
    function to allow our website to decide whether a user is authorized to view bank
    details. We used the same logic to decide whether to display a Login or a Logout
    link in the navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 1.   Add a second secured page to the website for this chapter that displays
    the solution to a math question (answer = -2!). In the navigation bar, add a link
    to the secured page that displays only when a user has successfully logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: You’ll need to add a new case to the *index.php* front controller and
    a new function to display the page in *functions.php*.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.   Add two additional authorized users to the system, one with a username
    of fred and a password of flintstone, and the other with a username of teddy and
    a password of cuddly.
  prefs: []
  type: TYPE_NORMAL
- en: '3.   Try adding another layer of security to the website by having two user-authentication
    roles: ''USER'' and ''BANKER''. Any logged-in user can view the math solution
    page, but only those with the ''BANKER'' role can view the bank details page.
    Add two more authorized banker user credentials to the system, one with a username
    of banker1 and a password of rich, and the other with a username of banker2 and
    a password of veryrich.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: a.   Just as you have a getUsers() function, add a getBankers() function.
  prefs: []
  type: TYPE_NORMAL
- en: b.   Rename the validLoginCredentials() function to validUSERLoginCredentials().
  prefs: []
  type: TYPE_NORMAL
- en: c.   Write a second version of this function as validBANKERLoginCredentials().
  prefs: []
  type: TYPE_NORMAL
- en: 'd.   Change the logic in the processLogin() function to do the following: If
    a valid user logs in, store their username in the session and display the home
    page. If a valid banker logs in, store their username in the session, store their
    role in the session ($_SESSION[''role''] = ''BANKER''), and display the home page.'
  prefs: []
  type: TYPE_NORMAL
- en: e.   Add a new getRoleFromSession() function that returns the role found in
    the session. If a value is found for $_SESSION['role'], that string is returned;
    otherwise, an empty string is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'f.   Change the logic in the *index.php* front controller as follows: For the
    math solution, check whether a user is logged in. For the bank page, check whether
    the role of the logged-in user is ''BANKER''. You could write something like getRoleFromSession()
    == ''BANKER''.'
  prefs: []
  type: TYPE_NORMAL
