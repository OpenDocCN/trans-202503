- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ENUMERATING
    HARDWARE AND NETWORK CONFIGURATIONS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">枚举硬件和网络配置</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: Hardware information, such as CPU speed and RAM allotment, and networking configurations,
    such as the MAC and IP addresses of the host’s network interfaces, can indicate
    to malware that it’s operating in a lab environment. Additionally, malware can
    use these pieces of information to establish context within its operating environment.
    In this chapter, we’ll discuss the techniques that malware might use to gather
    this information and evade detection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件信息，例如CPU速度和内存分配，以及网络配置，例如主机网络接口的MAC地址和IP地址，可以向恶意软件表明它正在实验室环境中运行。此外，恶意软件还可以利用这些信息来建立其操作环境的上下文。在本章中，我们将讨论恶意软件可能使用的收集这些信息并避免检测的技术。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Hardware and Device Configurations</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">硬件和设备配置</samp>
- en: System hardware configurations can provide valuable information to a malware
    sample that it can use to determine whether it’s running in a VM or sandbox. VMs
    use emulated hardware that can easily be differentiated from real hardware, and
    they are often configured much differently from physical systems. The malware
    can also enumerate hardware information, like the number of processors, the amount
    of RAM installed in the system, the hard drive storage capacity, and more. In
    this section, we’ll explore each of these areas in turn.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 系统硬件配置可以为恶意软件样本提供有价值的信息，帮助它判断是否在虚拟机（VM）或沙盒中运行。虚拟机使用的硬件是仿真硬件，容易与真实硬件区分，而且通常与物理系统配置大不相同。恶意软件还可以枚举硬件信息，比如处理器数量、系统中安装的内存大小、硬盘存储容量等。在本节中，我们将依次探讨这些领域。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">CPU</samp>
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">CPU</samp>
- en: 'Because virtualized CPUs look a bit different from their physical counterparts,
    malware will often check the host’s processor to determine the context in which
    it’s running. There are a few ways the malware can retrieve CPU hardware information.
    One of the more common approaches is calling the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp>
    function to get the <samp class="SANS_TheSansMonoCd_W5Regular_11">dwNumberOfProcessors</samp>
    value, which represents how many processors the system has. Modern computer systems
    almost always have more than one processor and processor core. To determine whether
    it’s running on a virtual machine, the malware might check whether the host has
    fewer than two processor cores, like so:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于虚拟化的CPU与物理CPU看起来有所不同，恶意软件通常会检查主机的处理器，以确定它运行的环境。恶意软件可以通过几种方式获取CPU硬件信息。比较常见的方法是调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp> 函数，以获取 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dwNumberOfProcessors</samp> 值，该值表示系统拥有的处理器数量。现代计算机系统几乎总是有多个处理器和处理器核心。为了判断是否在虚拟机中运行，恶意软件可能会检查主机的处理器核心数量是否少于两个，例如：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this pseudocode, the sample defines a struct (<samp class="SANS_TheSansMonoCd_W5Regular_11">systemInfo</samp>),
    then calls <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp>.
    A *struct*, short for structure, is a data type that allows for grouping of other
    data under a single name. All of the information returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp>
    function will be stored in the <samp class="SANS_TheSansMonoCd_W5Regular_11">systemInfo</samp>
    struct. The malware then inspects the <samp class="SANS_TheSansMonoCd_W5Regular_11">dwNumberOfProcessors</samp>
    value in the struct and, if the <samp class="SANS_TheSansMonoCd_W5Regular_11">numProcessors</samp>
    value is less than <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>, will
    terminate itself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段伪代码中，样本定义了一个结构体（<samp class="SANS_TheSansMonoCd_W5Regular_11">systemInfo</samp>），然后调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp>。*结构体*（struct）是一种数据类型，允许将其他数据以单一名称组合在一起。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp> 函数返回的所有信息将存储在 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">systemInfo</samp> 结构体中。恶意软件随后检查结构体中的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dwNumberOfProcessors</samp> 值，如果 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">numProcessors</samp> 的值小于 <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>，则会终止自身。
- en: 'Similarly, a malware sample can call the following functions to return information
    it can use to infer the environment it’s running in:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，恶意软件样本可以调用以下函数来返回它可以用来推断其运行环境的信息：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">GetLogicalProcessorInformation</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11"> </samp>Returns processor core information.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">GetLogicalProcessorInformation</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11"> </samp>返回处理器核心信息。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">GetNativeSystemInfo </samp>Returns
    similar information as <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp>,
    but is normally invoked by 64-bit applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">GetNativeSystemInfo </samp>返回与<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetSystemInfo</samp>类似的信息，但通常由64位应用程序调用。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IsProcessorFeaturePresent </samp>Returns
    the status of various processor features. If it returns true for <samp class="SANS_TheSansMonoCd_W5Regular_11">PF_VIRT_FIRMWARE_ENABLED</samp>,
    the system is using virtual firmware, an obvious clue that the system is likely
    virtualized.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IsProcessorFeaturePresent </samp>返回各种处理器特性的状态。如果它返回true表示<samp
    class="SANS_TheSansMonoCd_W5Regular_11">PF_VIRT_FIRMWARE_ENABLED</samp>，则说明系统正在使用虚拟固件，这显然是系统可能已虚拟化的线索。
- en: 'The Process Environment Block can also be used for CPU enumeration. To recap
    from [Chapter 1](chapter1.xhtml), the PEB structure consists of pointers to other
    structures in memory that contain information about the currently running process.
    The following code shows how malware can search the PEB to retrieve CPU information:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 进程环境块（PEB）也可以用于CPU枚举。回顾[第1章](chapter1.xhtml)，PEB结构包含指向内存中其他结构的指针，这些结构包含当前运行进程的信息。以下代码展示了恶意软件如何搜索PEB以检索CPU信息：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The sample moves the address of the PEB (stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0x30]</samp>)
    into the <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp> register, then
    puts the specific offset of the PEB in which the malware is interested (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">[eax+0x64]</samp>) in the <samp class="SANS_TheSansMonoCd_W5Regular_11">edx</samp>
    register. Offset 0x64 in the PEB structure stores the number of processor cores
    configured on the system. If the number of processor cores is <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    the malware terminates itself by jumping to the <samp class="SANS_TheSansMonoCd_W5Regular_11">terminate_process</samp>
    function.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 样本将PEB的地址（存储在<samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0x30]</samp>中）移动到<samp
    class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>寄存器，然后将恶意软件感兴趣的PEB特定偏移量（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">[eax+0x64]</samp>）放入<samp class="SANS_TheSansMonoCd_W5Regular_11">edx</samp>寄存器。PEB结构中的偏移量0x64存储系统上配置的处理器核心数量。如果处理器核心数量为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，恶意软件将通过跳转到<samp class="SANS_TheSansMonoCd_W5Regular_11">terminate_process</samp>函数终止自己。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*For 64-bit processes, the address of the PEB will be in the gs register at
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">gs:[0x60]</samp>, so be
    on the lookout for malware referencing this address as well.*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于64位进程，PEB的地址将位于gs寄存器中的<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">gs:[0x60]</samp>，因此需要留意恶意软件是否引用此地址。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">RAM</samp>
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">RAM</samp>
- en: 'Modern computers typically have a minimum of 4GB of RAM, but some malware analysis
    environments and sandboxes may not have this amount. If the installed RAM is below
    the 4GB threshold (or similar), the malware might assume it is running in a virtual
    environment. To check this, the malware calls the Windows function <samp class="SANS_TheSansMonoCd_W5Regular_11">GetPhysicallyInstalledSystemMemory</samp>
    to return the amount of system memory, like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算机通常至少拥有4GB的内存，但某些恶意软件分析环境和沙盒可能没有这个内存大小。如果安装的内存低于4GB的阈值（或类似的），恶意软件可能会认为它正在虚拟环境中运行。为检查这一点，恶意软件调用Windows函数<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetPhysicallyInstalledSystemMemory</samp>来返回系统内存的数量，示例如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here the malware sample calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetPhysicallyInstalledSystemMemory</samp>
    function with <samp class="SANS_TheSansMonoCd_W5Regular_11">TotalMemoryInKilobytes</samp>
    as a parameter, which will store the total system memory value returned from the
    function. After the function call, the malware compares the <samp class="SANS_TheSansMonoCd_W5Regular_11">TotalMemoryInKilobytes</samp>
    value with <samp class="SANS_TheSansMonoCd_W5Regular_11">4194302</samp>, which
    is 4,194,302 kilobytes, or 4GB. If the amount of system RAM is lower than 4GB,
    the malware sample will jump to <samp class="SANS_TheSansMonoCd_W5Regular_11">terminate_process</samp>
    and delete itself.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，恶意软件样本调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetPhysicallyInstalledSystemMemory</samp>
    函数，并以 <samp class="SANS_TheSansMonoCd_W5Regular_11">TotalMemoryInKilobytes</samp>
    作为参数，该函数将返回的系统总内存值存储下来。在函数调用之后，恶意软件将 <samp class="SANS_TheSansMonoCd_W5Regular_11">TotalMemoryInKilobytes</samp>
    的值与4194302（即4,194,302千字节或4GB）进行比较。如果系统RAM的量低于4GB，恶意软件样本将跳转到 <samp class="SANS_TheSansMonoCd_W5Regular_11">terminate_process</samp>
    并删除自身。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Hard Disks</samp>
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">硬盘</samp>
- en: Most modern computers are allotted hundreds of gigabytes of storage space. Malware
    can query the storage capacity of the hard disks, and if that value is below a
    certain threshold, it might determine that it’s running in a virtual environment.
    This threshold is typically 40GB, 60GB, or 80GB, but this number may increase
    as average storage capacity grows.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代计算机被分配了数百GB的存储空间。恶意软件可以查询硬盘的存储容量，如果该值低于一定阈值，则可能确定正在虚拟环境中运行。这个阈值通常为40GB、60GB或80GB，但随着平均存储容量的增长，这个数字可能会增加。
- en: The most common Windows functions used for gathering hard disk and capacity
    information are <samp class="SANS_TheSansMonoCd_W5Regular_11">GetDiskFreeSpace</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">GetDiskFreeSpaceEx</samp>. Other
    than evasion, there are limited reasons why malware would be querying the hard
    disk space, so these functions should raise a red flag for you. An easy way to
    bypass this evasion tactic is to increase the size of your VM disks to more than
    40GB or, even better, 80GB.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用于收集硬盘和容量信息的 Windows 函数是 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetDiskFreeSpace</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetDiskFreeSpaceEx</samp>。除了逃避检测之外，恶意软件很少会查询硬盘空间，因此这些函数应该引起你的警惕。绕过这种逃避策略的简单方法是将您的虚拟机磁盘大小增加到40GB以上，或者更好的是80GB。
- en: 'Windows contains many API functions that are not well known and are less commonly
    used. One example is the <samp class="SANS_TheSansMonoCd_W5Regular_11">IsNativeVhdBoot</samp>
    function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 包含许多不太知名且不常用的 API 函数。其中一个例子是 <samp class="SANS_TheSansMonoCd_W5Regular_11">IsNativeVhdBoot</samp>
    函数：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If <samp class="SANS_TheSansMonoCd_W5Regular_11">IsNativeVhdBoot</samp> doesn’t
    return <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, the system was
    booted from a virtual hard disk, which indicates a VM. Note that the <samp class="SANS_TheSansMonoCd_W5Regular_11">IsNativeVhdBoot</samp>
    function is effective only on Windows 8 and above.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">IsNativeVhdBoot</samp> 的返回值不是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>，则系统是从虚拟硬盘引导的，表明是虚拟机。请注意，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">IsNativeVhdBoot</samp> 函数仅在 Windows 8
    及以上版本上有效。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Monitor Configurations</samp>
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">监视配置</samp>
- en: A typical modern computer setup will likely have a high-resolution monitor and
    sometimes more than one, whereas (most) VMs and sandboxes will not. Some malware
    specifically looks for the number of monitors in use, and if it detects, say,
    only one monitor, it might infer that it’s in an analysis environment. To accomplish
    this, it can call the Windows API function <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemMetrics</samp>,
    which returns a specific variable called <samp class="SANS_TheSansMonoCd_W5Regular_11">SM_CMONITORS</samp>
    representing the number of monitors in use. Another option is to call the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp> function, which
    doesn’t return the total number directly but instead executes a callback function
    for each monitor. A *callback function* is simply a way of performing tasks for
    each object—in this case, a monitor—that invokes it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的现代计算机配置可能会有一台高分辨率显示器，有时甚至不止一台，而（大多数）虚拟机和沙箱环境通常没有这么多显示器。一些恶意软件专门检查正在使用的显示器数量，如果它检测到只有一个显示器，它可能会推测自己处于分析环境中。为了实现这一点，它可以调用Windows
    API函数<samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemMetrics</samp>，该函数返回一个特定的变量<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SM_CMONITORS</samp>，表示正在使用的显示器数量。另一种方法是调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>函数，该函数不会直接返回总数，而是为每个显示器执行回调函数。*回调函数*只是执行每个对象任务的一种方式——在这个例子中，是每个显示器。
- en: Malware can also check screen resolution using the same functions. The typical
    resolution for a non-virtualized end-user system is quite high, such as 1,600
    × 900\. If the display resolution of your analysis machine is lower (say, 1,152
    × 864), malware might note this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可以使用相同的函数检查屏幕分辨率。非虚拟化终端用户系统的典型分辨率通常很高，例如1,600 × 900。如果你的分析机器的显示分辨率较低（例如1,152
    × 864），恶意软件可能会注意到这一点。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">USB Controllers</samp>
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">USB 控制器</samp>
- en: Many VMs are configured to use either an older USB protocol version (V1.1 or
    V2.0, for example) or no USB controller device at all. Because most modern non-virtualized
    systems have at least one USB controller with an up-to-date USB device version,
    this can be a good clue for malware.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 许多虚拟机配置为使用较旧的USB协议版本（例如V1.1或V2.0），或者根本没有USB控制器设备。因为大多数现代非虚拟化系统至少有一个USB控制器，并且拥有最新的USB设备版本，这对于恶意软件来说可能是一个重要线索。
- en: 'Windows provides a helpful API just for enumeration of USB devices and settings:
    *Winusb.dll*. If you spot malware attempting to import this DLL and use its functions,
    it’s a strong indicator that something fishy is going on.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Windows提供了一个有用的API，用于列举USB设备和设置：*Winusb.dll*。如果你发现恶意软件试图导入此DLL并使用其功能，这很可能是某些可疑活动的强烈指示。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Firmware Tables</samp>
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">固件表</samp>
- en: Most system hardware is accompanied by low-level software known as *firmware*.
    Firmware breathes life into the hardware; without it, the hardware couldn’t interface
    with the OS or any other programs. Windows keeps track of firmware in *firmware
    tables* that also contain the make and model of the associated hardware, which
    malware can exploit to identify any hypervisor-related information.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数系统硬件都配有被称为*固件*的低级软件。固件赋予硬件生命；没有它，硬件无法与操作系统或其他程序进行交互。Windows会跟踪*固件表*，这些表格还包含相关硬件的品牌和型号，恶意软件可以利用这些信息来识别与虚拟机监控器相关的任何信息。
- en: Let’s take a look at a firmware table. [Figure 6-1](chapter6.xhtml#fig6-1) shows
    the output on my VM of Nirsoft’s free tool FirmwareTablesView.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下固件表。[图 6-1](chapter6.xhtml#fig6-1)展示了我在虚拟机上运行Nirsoft免费工具FirmwareTablesView的输出。
- en: '![](../images/fig6-1.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig6-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-1: Firmware tables
    displayed in FirmwareTablesView</samp>'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-1：在FirmwareTablesView中显示的固件表</samp>
- en: You can likely already spot the anomalies that a malware sample could take advantage
    of. There are multiple references to *VBOX*, which is the standard prefix for
    VirtualBox hypervisor firmware.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经能发现恶意软件样本可能利用的异常情况。文中多次提到*VBOX*，这是VirtualBox虚拟机监控器固件的标准前缀。
- en: 'In the Firmware column, you can see the type of each firmware table, also called
    the *provider signature*: ACPI, SMBIOS, or Raw. Some functions, like <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemFirmwareTable</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumSystemFirmwareTables</samp>,
    require a provider signature to retrieve firmware tables. The following code shows
    a piece of malware calling <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumSystemFirmwareTables</samp>
    to inspect the ACPI tables:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在固件列中，您可以看到每个固件表的类型，也叫做*提供者签名*：ACPI、SMBIOS 或 Raw。有些函数，如<samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemFirmwareTable</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumSystemFirmwareTables</samp>，需要提供者签名来检索固件表。以下代码展示了一个恶意软件调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumSystemFirmwareTables</samp>来检查ACPI表：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Later, this malware will search the buffer storing the firmware tables for hypervisor-related
    strings like <samp class="SANS_TheSansMonoCd_W5Regular_11">Oracle</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Vbox</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">VirtualBox</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">VMware</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">VMware,
    Inc</samp>.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，该恶意软件将搜索存储固件表的缓冲区，查找与虚拟机监控器相关的字符串，如<samp class="SANS_TheSansMonoCd_W5Regular_11">Oracle</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Vbox</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">VirtualBox</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">VMware</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">VMware,
    Inc</samp>。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>
    function also returns a lot of different system information, for both malicious
    and legitimate reasons. Malware can use this function to enumerate firmware tables.
    Here’s what this might look like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>函数还会返回许多不同的系统信息，既包括恶意用途，也包括合法用途。恶意软件可以利用这个函数来枚举固件表。以下是可能的情况：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The malware calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>
    function with a few important parameters. The first parameter, <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemInformationLength</samp>
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">[ebp+Length]</samp>), is the size
    of the buffer that will receive the data returned from the function call. The
    second parameter, <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemFirmwareTableInformation</samp>
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>), is a pointer to that
    buffer. The third parameter, <samp class="SANS_TheSansMonoCd_W5Regular_11">76</samp>,
    represents the system information class that this malware is interested in, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SystemFirmwareTableInformation</samp>.
    After the malware calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>
    function and the firmware table structure is stored in the buffer, it can enumerate
    the buffer for hypervisor-related information.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该恶意软件使用几个重要的参数调用了<samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>函数。第一个参数，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SystemInformationLength</samp> (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">[ebp+Length]</samp>), 是接收函数调用返回数据的缓冲区大小。第二个参数，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SystemFirmwareTableInformation</samp>
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>), 是指向该缓冲区的指针。第三个参数，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">76</samp>, 表示该恶意软件感兴趣的系统信息类别，即<samp class="SANS_TheSansMonoCd_W5Regular_11">SystemFirmwareTableInformation</samp>。在恶意软件调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>函数并将固件表结构存储在缓冲区后，它可以枚举缓冲区中的与虚拟机监控器（Hypervisor）相关的信息。
- en: Note that the <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemFirmwareTableInformation</samp>
    data class is undocumented by Microsoft, so there isn’t much public information
    about it. Microsoft keeps certain functionalities internal, likely so that they
    can’t be easily abused, but malware authors and researchers will inevitably find
    them. Conix Cybersécurité has compiled a complete list of the data classes that
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>
    can return at [*https://<wbr>github<wbr>.com<wbr>/conix<wbr>-security<wbr>/zer0m0n<wbr>/blob<wbr>/master<wbr>/src<wbr>/driver<wbr>/include<wbr>/nt<wbr>/structures<wbr>/SYSTEM<wbr>_INFORMATION<wbr>_CLASS<wbr>.h*](https://github.com/conix-security/zer0m0n/blob/master/src/driver/include/nt/structures/SYSTEM_INFORMATION_CLASS.h).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，<samp class="SANS_TheSansMonoCd_W5Regular_11">SystemFirmwareTableInformation</samp>
    数据类没有被微软文档化，因此关于它的公开信息不多。微软将某些功能保密，可能是为了避免被滥用，但恶意软件作者和研究人员最终会发现这些功能。Conix Cybersécurité
    已经编制了一个完整的列表，列出了 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQuerySystemInformation</samp>
    可以返回的数据类，详见 [*https://<wbr>github<wbr>.com<wbr>/conix<wbr>-security<wbr>/zer0m0n<wbr>/blob<wbr>/master<wbr>/src<wbr>/driver<wbr>/include<wbr>/nt<wbr>/structures<wbr>/SYSTEM<wbr>_INFORMATION<wbr>_CLASS<wbr>.h*](https://github.com/conix-security/zer0m0n/blob/master/src/driver/include/nt/structures/SYSTEM_INFORMATION_CLASS.h)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Other Hardware Devices</samp>
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">其他硬件设备</samp>
- en: Examples of other hardware configurations that malware might use to obtain information
    about its environment are CD or DVD drives, sound cards and audio configurations,
    attached printers (or the lack thereof), and serial ports. We’ll go over some
    more of these settings in [Appendix A](appendix-A.xhtml), but because malware
    could enumerate any and all hardware configurations on the victim system, it’s
    impossible to include all of them in this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能会利用其他硬件配置来获取其环境信息，例如 CD 或 DVD 驱动器、声卡和音频配置、连接的打印机（或没有打印机）、以及串口等。我们将在[附录
    A](appendix-A.xhtml)中详细介绍一些此类设置，但由于恶意软件可能会枚举受害系统上的所有硬件配置，因此不可能在本书中列出所有硬件配置。
- en: Next, we’ll turn our attention to the networking-related information that malware
    might use to suss out a VM or sandbox environment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注恶意软件可能用来检测虚拟机或沙盒环境的网络相关信息。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Networking-Related Artifacts</samp>
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">网络相关伪装痕迹</samp>
- en: Networking-related artifacts such as IP address configurations, currently established
    connections, open service ports, and even the domain that the victim system is
    joined to can help malware detect its operating environment. In this section,
    you’ll learn how.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 网络相关的伪装痕迹，如 IP 地址配置、当前建立的连接、开放的服务端口，甚至是受害系统所加入的域，都可以帮助恶意软件识别其操作环境。本节将教你如何做到这一点。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">IP Address Configurations</samp>
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">IP 地址配置</samp>
- en: Malware may want to get the host’s IP address for a number of reasons, most
    notably to detect if the host is running in a sandbox or malware analysis lab.
    The default IP address range for internal VirtualBox networks is 192.168.56.*X*.
    The default IP range for VMware Workstation is 192.168.*X.X*, with the last two
    octets being randomized (such as 192.168.5.100, or 192.168.187.101). The range
    depends on what version of the hypervisor software the system is running. If the
    victim system has an IP address in these ranges, the malware might either determine
    it’s a VM or further scrutinize the system.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能会出于多种原因获取主机的 IP 地址，最常见的原因是检测主机是否在沙盒或恶意软件分析实验室中运行。内置虚拟网络的默认 IP 地址范围为 192.168.56.*X*。VMware
    Workstation 的默认 IP 范围是 192.168.*X.X*，其中最后两位数字是随机化的（例如 192.168.5.100 或 192.168.187.101）。此范围取决于系统运行的虚拟机管理程序软件版本。如果受害系统的
    IP 地址位于这些范围内，恶意软件可能会判断它是虚拟机，或者进一步检查系统。
- en: 'Retrieving the IP address of the host is as simple as leveraging the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp> function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 获取主机的 IP 地址非常简单，只需利用 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    函数即可：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Like many Windows API functions, <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    takes a series of parameters. In this case, <samp class="SANS_TheSansMonoCd_W5Regular_11">push
    edx</samp> pushes to the stack the address of the buffer <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>,
    which will hold all the address data returned from the function call. The next
    three instructions push the <samp class="SANS_TheSansMonoCd_W5Regular_11">reserved</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">flags</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">family</samp>
    parameters. The most important is the <samp class="SANS_TheSansMonoCd_W5Regular_11">family</samp>
    parameter, which contains a value of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>,
    telling <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    to return only IPv4 information. [Table 6-1](chapter6.xhtml#tab6-1) lists the
    definitions of each <samp class="SANS_TheSansMonoCd_W5Regular_11">family</samp>
    parameter value.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 和许多 Windows API 函数一样，<samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    接受一系列的参数。在这个例子中，<samp class="SANS_TheSansMonoCd_W5Regular_11">push edx</samp>
    将缓冲区 <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp> 的地址推送到栈中，该缓冲区将保存从函数调用中返回的所有地址数据。接下来的三条指令将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">reserved</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">flags</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">family</samp> 参数推送到栈中。最重要的是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">family</samp> 参数，它的值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>，告诉
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp> 仅返回
    IPv4 信息。[表 6-1](chapter6.xhtml#tab6-1) 列出了每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">family</samp>
    参数值的定义。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 6-1:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses
    family</samp> <samp class="SANS_Futura_Std_Book_11">Parameter Values</samp>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 6-1：</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses
    家族</samp> <samp class="SANS_Futura_Std_Book_11">参数值</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ASCII value</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Numerical
    value</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Definition</samp> |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ASCII 值</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">数字值</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">定义</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AF_UNSPEC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">Returns both IPv4 and IPv6 addresses</samp>
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AF_UNSPEC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">返回 IPv4 和 IPv6 地址</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AF_INET</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">Returns only IPv4 addresses</samp> |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AF_INET</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">仅返回 IPv4 地址</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AF_INET6</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    | <samp class="SANS_Futura_Std_Book_11">Returns only IPv6 addresses</samp> |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AF_INET6</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    | <samp class="SANS_Futura_Std_Book_11">仅返回 IPv6 地址</samp> |'
- en: Next, the malware calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    function. Later in the code, the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses.FirstUnicastAddress</samp>
    is moved into <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>, and the
    variable <samp class="SANS_TheSansMonoCd_W5Regular_11">bad_ip_address</samp> is
    moved into <samp class="SANS_TheSansMonoCd_W5Regular_11">edx</samp>. The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">FirstUnicastAddress</samp> variable is
    part of <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>
    and contains the first IP address in the structure. The <samp class="SANS_TheSansMonoCd_W5Regular_11">bad_ip_address</samp>
    variable contains the IP address that the malware is checking against. Let’s assume
    this value is <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.2</samp>,
    indicating a VirtualBox network. The malware compares the <samp class="SANS_TheSansMonoCd_W5Regular_11">FirstUnicastAddress</samp>
    value with the <samp class="SANS_TheSansMonoCd_W5Regular_11">bad_ip_address</samp>
    using <samp class="SANS_TheSansMonoCd_W5Regular_11">cmp eax, edx</samp> to see
    if the victim system has the IP address <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.2</samp>.
    If this IP exists in the <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>
    structure, the malware jumps to the <samp class="SANS_TheSansMonoCd_W5Regular_11">terminate_process</samp>
    function to terminate itself.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，恶意软件调用了<samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>函数。在后续的代码中，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses.FirstUnicastAddress</samp>的值被移入<samp
    class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>，而变量<samp class="SANS_TheSansMonoCd_W5Regular_11">bad_ip_address</samp>则被移入<samp
    class="SANS_TheSansMonoCd_W5Regular_11">edx</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">FirstUnicastAddress</samp>变量是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>的一部分，包含结构中的第一个IP地址。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">bad_ip_address</samp>变量包含恶意软件正在检查的IP地址。假设该值为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.2</samp>，表示一个VirtualBox网络。恶意软件使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">cmp eax, edx</samp>将<stext class="SANS_TheSansMonoCd_W5Regular_11">FirstUnicastAddress</samp>的值与<samp
    class="SANS_TheSansMonoCd_W5Regular_11">bad_ip_address</samp>进行比较，检查受害者系统是否具有IP地址<samp
    class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.2</samp>。如果此IP存在于<samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>结构中，恶意软件将跳转到<samp
    class="SANS_TheSansMonoCd_W5Regular_11">terminate_process</samp>函数以终止自身。
- en: Keep in mind that there are many ways to enumerate the IP addresses on a system.
    Some functions involve querying the interface information directly, while others
    use a more back-channel method, such as listing the IP network tables. IP address
    information can also be queried using Windows tools such as WMI, PowerShell, and
    the Windows command line. You should be suspicious of any malware looking for
    the host’s internal IP address, as it could be using a detection technique.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，列举系统上的IP地址有许多方法。有些函数涉及直接查询接口信息，而其他函数则采用更为间接的方法，如列出IP网络表。还可以使用Windows工具（如WMI、PowerShell和Windows命令行）查询IP地址信息。您应该对任何试图查找主机内部IP地址的恶意软件保持警惕，因为它可能正在使用某种检测技术。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Domain Configurations</samp>
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">域配置</samp>
- en: Malware may attempt to enumerate the victim host’s domain to ensure the target
    is within a certain company or network, or to weed out malware analysis environments.
    In this case, a *domain* is simply a logical grouping of systems on a network.
    The computer you use for work is likely part of a domain whose name relates to
    your company name. This domain is also typically part of your system’s *hostname*,
    or the name of your device on the network. If you work at Evil Corp, for example,
    your domain name might be *evil.corp* and your hostname might be *your.computer.evil.corp*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能会尝试列举受害主机的域名，以确保目标属于某个特定公司或网络，或排除恶意软件分析环境。在这种情况下，*域*只是网络中系统的逻辑分组。您用于工作的计算机很可能是某个域的一部分，该域的名称与您的公司名称相关。这个域通常也是您系统的*主机名*的一部分，或者说是您设备在网络上的名称。例如，如果您在Evil
    Corp工作，您的域名可能是*evil.corp*，而您的主机名可能是*your.computer.evil.corp*。
- en: Domain enumeration can be a great evasive tactic for malware. For example, if
    the victim system isn’t associated with a domain, or if the domain it’s attached
    to doesn’t match the malware’s primary target, the malware may terminate itself
    to avoid analysis or change its behavior. Common Windows API functions for enumerating
    a host’s domain are <samp class="SANS_TheSansMonoCd_W5Regular_11">GetComputerName</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">DsGetDcName</samp>.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 域枚举可以成为恶意软件的一种极佳规避策略。例如，如果受害系统没有与域关联，或者它所连接的域与恶意软件的主要目标不匹配，恶意软件可能会终止自身以避免分析，或者改变其行为。用于枚举主机域的常见
    Windows API 函数是 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetComputerName</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">DsGetDcName</samp>。
- en: 'In addition to Windows API functions, malware may query these registry keys,
    which may contain the domain of the system:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Windows API 函数外，恶意软件还可能查询这些注册表项，其中可能包含系统的域信息：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU\Volatile Environment</samp>
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU\Volatile Environment</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM\System\CurrentControlSet\Services\Tcpip\Parameters</samp>
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM\System\CurrentControlSet\Services\Tcpip\Parameters</samp>
- en: To thwart this tactic, join your VMs and sandboxes to a domain. Even if the
    domain is fake, it can still trick malware into executing. We’ll discuss more
    about faking domains and network connectivity in [Appendix A](appendix-A.xhtml).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了阻止这种攻击策略，可以将虚拟机和沙箱加入到一个域中。即使该域是虚假的，仍然可以欺骗恶意软件执行。我们将在[附录A](appendix-A.xhtml)中进一步讨论如何伪造域和网络连接。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">MAC Address Configurations</samp>
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">MAC 地址配置</samp>
- en: A *media access control (MAC) address* is a unique identifier applied to all
    computer network hardware. The MAC address consists of digits (3 bytes) that represent
    the device manufacturer, followed by another series of digits (3 additional bytes)
    specific to the host’s hardware devices (see [Figure 6-2](chapter6.xhtml#fig6-2)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*媒体访问控制（MAC）地址*是一个应用于所有计算机网络硬件的唯一标识符。MAC 地址由代表设备制造商的数字（3个字节）组成，接着是另一个由特定于主机硬件设备的数字（另外3个字节）组成的序列（参见[图6-2](chapter6.xhtml#fig6-2)）。'
- en: '![](../images/fig6-2.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig6-2.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-2: MAC address structure</samp>'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-2：MAC 地址结构</samp>
- en: In [Figure 6-2](chapter6.xhtml#fig6-2), the example MAC address is 00:50:56:62:9A:12\.
    The first 3 bytes (00:50:56) represent the manufacturer’s identifier (in this
    case, VMware), and the last 3 bytes represent this specific adapter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图6-2](chapter6.xhtml#fig6-2)中，示例的 MAC 地址是 00:50:56:62:9A:12。前三个字节（00:50:56）代表制造商标识符（在此案例中为
    VMware），最后三个字节代表该特定适配器。
- en: Malware can query the host’s MAC addresses to see if the host is using a specific
    manufacturer’s network hardware. Each piece of network hardware has its own dedicated
    MAC address as well, so malware can also use this information to target its victims.
    An example of this is the now well-known supply chain attack dubbed “ShadowHammer,”
    which occurred in 2019\. The attackers used a list of preselected MAC addresses
    to target and infect specific computers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以查询主机的 MAC 地址，查看主机是否使用特定制造商的网络硬件。每个网络硬件都有自己的专用 MAC 地址，因此恶意软件还可以利用这些信息来锁定受害者。一个例子就是2019年发生的著名供应链攻击事件，名为“ShadowHammer”。攻击者利用一份预先选择的
    MAC 地址列表来锁定并感染特定的计算机。
- en: 'To obtain a list of MAC addresses on the host, malware can call the Windows
    API function <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>.
    It then compares that list to a hardcoded list of MAC addresses, infecting the
    system only if it finds a network device with a matching MAC address. After the
    malware calls <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    (using the same technique I outlined in “IP Address Configurations” on [page 109](chapter6.xhtml#pg_109)),
    it checks the <samp class="SANS_TheSansMonoCd_W5Regular_11">PhysicalAddress</samp>
    value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>
    structure, which contains the host’s MAC addresses, like so:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取主机上的 MAC 地址列表，恶意软件可以调用 Windows API 函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>。然后它将该列表与硬编码的
    MAC 地址列表进行比较，只有在找到与 MAC 地址匹配的网络设备时，才会感染系统。在恶意软件调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAdaptersAddresses</samp>
    后（使用我在“IP 地址配置”部分中介绍的相同技术，见[第109页](chapter6.xhtml#pg_109)），它会检查 <samp class="SANS_TheSansMonoCd_W5Regular_11">AdapterAddresses</samp>
    结构体中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">PhysicalAddress</samp> 值，该值包含主机的
    MAC 地址，如下所示：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Later, the malware moves data onto the stack with instructions like <samp class="SANS_TheSansMonoCd_W5Regular_11">mov
    [ebp+var_38], 0B203B000h</samp>. This data represents part of the MAC address
    that the malware will compare to the victim’s MAC addresses.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，恶意软件通过类似 <samp class="SANS_TheSansMonoCd_W5Regular_11">mov [ebp+var_38],
    0B203B000h</samp> 的指令将数据移入堆栈。这些数据代表恶意软件将与受害者的 MAC 地址进行比较的部分 MAC 地址。
- en: 'VM-related MAC addresses can also be enumerated this way. The presence of one
    of the following MAC address prefixes would indicate to the malware that it’s
    running in a VM environment and possibly being analyzed:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟机相关的 MAC 地址也可以通过这种方式枚举。以下 MAC 地址前缀之一的存在将指示恶意软件它正在虚拟机环境中运行，且可能正在被分析：
- en: '**VMware Workstation**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Workstation**'
- en: 00:50:56 ...
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 00:50:56 ...
- en: 00:0C:29 ...
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 00:0C:29 ...
- en: 00:05:69 ...
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 00:05:69 ...
- en: '**VirtualBox**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**'
- en: 08:00:27 ...
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 08:00:27 ...
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*To bypass this detection technique, change the MAC addresses of your VMs and
    sandboxes.*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了绕过这种检测技术，请更改您的虚拟机和沙箱的 MAC 地址。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">External IP Address
    and Internet Connectivity</samp>
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">外部 IP 地址与互联网连接性</samp>
- en: One evasion technique that has seen increasing use is obtaining the potential
    victim’s external IP address. Malware might want this information for two reasons.
    First, malware can use it to determine the potential victim’s location. Some malware
    may target victims only in a certain area of the world, or it might want to exclude
    certain geographical regions. Not only does this help the malware stay on target,
    but it also aids in anti-analysis and evasion; if the potential victim isn’t within
    the malware’s regional scope, the malware will terminate itself or modify its
    behavior, likely fooling sandboxes and malware analysts.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一种越来越常见的规避技术是获取潜在受害者的外部 IP 地址。恶意软件可能出于两个原因需要这些信息。首先，恶意软件可以用它来确定潜在受害者的位置。有些恶意软件可能只针对特定地区的受害者，或者它可能想排除某些地理区域。这不仅帮助恶意软件保持目标准确，还有助于反分析和规避；如果潜在受害者不在恶意软件的区域范围内，恶意软件会终止自身或修改行为，从而欺骗沙箱和恶意软件分析员。
- en: Second, malware can use the host’s external IP address information or internet
    connection status to detect an analysis environment. For example, if the external
    IP is a popular virtual private network (VPN) gateway (such as NordVPN or ExpressVPN)
    or a TOR exit node, then the malware may infer that it’s being analyzed. (After
    all, if someone is using TOR or a VPN, they *must* be a malware analyst, right?)
    In addition, it’s often the case that sandboxes and analysis environments are
    intentionally offline, so if the host has no external IP address at all, the malware
    might assume it’s running in a lab environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，恶意软件可以利用主机的外部 IP 地址信息或互联网连接状态来检测分析环境。例如，如果外部 IP 地址是一个流行的虚拟私人网络（VPN）网关（如 NordVPN
    或 ExpressVPN）或 TOR 退出节点，恶意软件可能会推断出它正在被分析。（毕竟，如果有人使用 TOR 或 VPN，他们*一定*是恶意软件分析员，对吧？）此外，沙箱和分析环境通常是故意离线的，因此如果主机根本没有外部
    IP 地址，恶意软件可能会认为它运行在实验室环境中。
- en: 'This technique can be executed in a number of ways, but perhaps the most common
    is simply sending a web request to an IP lookup service, such as *WhatIsMyIP.com*
    or *IPLocation.net*. These are legitimate services that report back the external
    IP and geolocation information of a calling host. If you detonate malware in an
    analysis sandbox or lab and you see HTTP requests to sites like these, it’s a
    signal that the malware might be attempting to look up the host’s external IP
    address or location. Here’s how that might look:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术可以通过多种方式执行，但最常见的方法可能是简单地向 IP 查询服务发送 web 请求，如*WhatIsMyIP.com*或*IPLocation.net*。这些是合法的服务，能够报告回调用主机的外部
    IP 和地理位置信息。如果你在分析沙箱或实验室中引爆恶意软件，并且看到类似这些网站的 HTTP 请求，这可能是恶意软件正在尝试查找主机的外部 IP 地址或位置的信号。以下是可能的情况：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, the malware sample moves the value <samp class="SANS_TheSansMonoCd_W5Regular_11">lpszServerName</samp>,
    which contains the domain *icanhazip.com*, into the <samp class="SANS_TheSansMonoCd_W5Regular_11">ecx</samp>
    register for later use ❶. The <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetConnectA</samp>
    function takes a lot of parameters, but the important ones are <samp class="SANS_TheSansMonoCd_W5Regular_11">nServerPort</samp>
    ❷, which indicates the port on which this malware sample will contact the domain
    (port <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">HTTP</samp>),
    and the domain itself, now stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">ecx</samp>
    ❸. Finally, it calls <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetConnectA</samp>
    ❹. This sample’s code is essentially contacting the *icanhazip.com* domain over
    HTTP to obtain the host’s external IP address.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，恶意软件样本将包含域名*icanhazip.com*的值 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpszServerName</samp>
    移动到 <samp class="SANS_TheSansMonoCd_W5Regular_11">ecx</samp> 寄存器中，供以后使用 ❶。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">InternetConnectA</samp> 函数有很多参数，但重要的参数是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">nServerPort</samp> ❷，它表示恶意软件样本将通过哪个端口与域名进行联系（端口
    <samp class="SANS_TheSansMonoCd_W5Regular_11">80</samp>，或 <samp class="SANS_TheSansMonoCd_W5Regular_11">HTTP</samp>），以及域名本身，现在存储在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ecx</samp> 中 ❸。最后，它调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetConnectA</samp>
    ❹。这个样本的代码本质上是通过 HTTP 联系 *icanhazip.com* 域名，以获取主机的外部 IP 地址。
- en: 'A related method is to simply send a DNS or HTTP request to an online service
    provider. Any service provider will do, but *Google.com* is a common one. If the
    malware sample sends a request to a web server and receives no data (or incorrect
    data), it might deduce that it’s being analyzed. The following sample attempts
    to contact *Google.com* and then checks the response to ensure it matches the
    normal response from the server:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一种相关的方法是简单地向在线服务提供商发送 DNS 或 HTTP 请求。任何服务提供商都可以使用，但*Google.com*是常见的一个。如果恶意软件样本向
    web 服务器发送请求并未收到数据（或收到错误数据），它可能会推测自己正在被分析。以下样本尝试联系*Google.com*，然后检查响应，以确保它与服务器的正常响应一致：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After attempting to contact *Google.com* (using <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetConnectA</samp>),
    the sample pushes parameters for the <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetReadFile</samp>
    function, including <samp class="SANS_TheSansMonoCd_W5Regular_11">dwNumberOfBytesToRead</samp>
    ❶, which contains the number of bytes to be read from the web server response
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">9</samp>), and <samp class="SANS_TheSansMonoCd_W5Regular_11">lpBuffer</samp>
    ❷, which is a pointer to the data <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetReadFile</samp>
    will return. Next, the malware sample calls <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetReadFile</samp>
    ❸, which reads the first 9 bytes from Google’s response (which should be <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><!doctype</samp>). Finally, the code compares
    the <samp class="SANS_TheSansMonoCd_W5Regular_11"><!doctype</samp> value to the
    actual response stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">lpBuffer</samp>
    ❹. If the responses are different, this malware sample might conclude that the
    system isn’t connected to the internet or is perhaps being analyzed in a sandbox.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试联系 *Google.com*（使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetConnectA</samp>）之后，样本会传递
    <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetReadFile</samp> 函数的参数，其中包括
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dwNumberOfBytesToRead</samp> ❶，它包含从Web服务器响应中读取的字节数（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">9</samp>），以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpBuffer</samp>
    ❷，这是一个指向 <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetReadFile</samp>
    将返回的数据的指针。接下来，恶意软件样本调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">InternetReadFile</samp>
    ❸，它从Google的响应中读取前9个字节（应该是 <samp class="SANS_TheSansMonoCd_W5Regular_11"><!doctype</samp>）。最后，代码将
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><!doctype</samp> 值与存储在 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpBuffer</samp>
    ❹ 中的实际响应进行比较。如果响应不同，这个恶意软件样本可能会得出结论，认为系统没有连接到互联网，或者可能正在沙盒中被分析。
- en: 'It’s not uncommon to see this external IP validation technique in modern malware,
    so be on the lookout for it. If you’re analyzing a malware sample and see outbound
    HTTP or DNS requests to websites such as *WhatIsMyIP.com* or to service providers
    such as *Google.com* or *AWS.Amazon.com*, there’s a chance the malware is using
    this VM detection technique. Here are some other websites to keep an eye out for:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代恶意软件中，看到这种外部IP验证技术并不罕见，因此要保持警觉。如果你正在分析一个恶意软件样本，并看到它向像 *WhatIsMyIP.com* 这样的站点发送外发HTTP或DNS请求，或者向
    *Google.com* 或 *AWS.Amazon.com* 这样的服务提供商发送请求，那么很有可能该恶意软件正在使用这种虚拟机检测技术。以下是一些其他需要注意的网站：
- en: '*api.ipify.org*'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*api.ipify.org*'
- en: '*checkip.amazonaws.com*'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*checkip.amazonaws.com*'
- en: '*checkip.dyndns.com*'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*checkip.dyndns.com*'
- en: '*icanhazip.com*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*icanhazip.com*'
- en: '*ip-api.com*'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ip-api.com*'
- en: '*ip.anysrc.net*'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ip.anysrc.net*'
- en: '*ipecho.net*'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ipecho.net*'
- en: '*ipinfo.io*'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ipinfo.io*'
- en: '*iplocation.net*'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*iplocation.net*'
- en: '*myexternalip.com*'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*myexternalip.com*'
- en: '*myipaddress.com*'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*myipaddress.com*'
- en: '*showipaddress.com*'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*showipaddress.com*'
- en: '*whatismyip.com*'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*whatismyip.com*'
- en: '*whatismyipaddress.com*'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*whatismyipaddress.com*'
- en: '*wtfismyip.com*'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*wtfismyip.com*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">TCP Connection States</samp>
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">TCP连接状态</samp>
- en: In the previous section, I mentioned that malware analysts often configure their
    analysis machines and sandboxes to be completely offline or connected to a fake
    network. Malware can take advantage of this behavior by enumerating the outgoing
    TCP connections and trying to determine if they’re valid. A legitimate end-user
    system or server will likely have many outgoing TCP connections to various external
    IP addresses and ports. A malware analysis machine or sandbox, unless connected
    to a real network like the internet, may have only a few connections or none at
    all.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我提到过，恶意软件分析师通常会将分析机器和沙盒配置为完全离线，或连接到一个假网络。恶意软件可以利用这一行为，通过枚举外发的TCP连接，尝试判断这些连接是否有效。一个合法的终端用户系统或服务器可能会有许多指向各种外部IP地址和端口的外发TCP连接。而恶意软件分析机器或沙盒，除非连接到像互联网这样的真实网络，否则可能只有少数几个连接，甚至没有任何连接。
- en: This tactic involves using the Windows API <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTcpTable</samp>
    function, which returns a table listing the current status of the latest TCP connections
    on the system, similar to the result of running *netstat.exe* on the host. This
    table might look something like [Table 6-2](chapter6.xhtml#tab6-2).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这一策略涉及使用Windows API <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTcpTable</samp>
    函数，该函数返回一个表格，列出了系统上最新的TCP连接的当前状态，类似于在主机上运行 *netstat.exe* 的结果。这个表格可能类似于[表6-2](chapter6.xhtml#tab6-2)。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 6-2:</samp> <samp class="SANS_Futura_Std_Book_11">Sample
    TCP Connections</samp>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表6-2：</samp> <samp class="SANS_Futura_Std_Book_11">示例TCP连接</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Local address</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Local
    port</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Remote address</samp> |
    <samp class="SANS_Futura_Std_Heavy_B_11">Remote port</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">State</samp>
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">本地地址</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">本地端口</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">远程地址</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">远程端口</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">状态</samp> |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">127.0.0.1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2869</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">local-machine</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">49202</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">TIME_WAIT</samp> |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">127.0.0.1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2869</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">local-machine</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">49202</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">TIME_WAIT</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">127.0.0.1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2869</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">local-machine</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">49203</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">ESTABLISHED</samp> |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">127.0.0.1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2869</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">local-machine</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">49203</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">ESTABLISHED</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">192.168.1.2</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">49157</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">91.184.220.29</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ESTABLISHED</samp> |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">192.168.1.2</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">49157</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">91.184.220.29</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">80</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ESTABLISHED</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">192.168.1.2</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">49158</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">64.233.160.15</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">443</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ESTABLISHED</samp> |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">192.168.1.2</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">49158</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">64.233.160.15</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">443</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ESTABLISHED</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp> |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp> |'
- en: An offline malware analysis machine or sandbox likely won’t have any established
    remote TCP connections like the third and fourth rows in [Table 6-2](chapter6.xhtml#tab6-2).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 离线恶意软件分析机器或沙箱可能不会像[表6-2](chapter6.xhtml#tab6-2)中的第三行和第四行那样建立远程TCP连接。
- en: Malware can also, of course, leverage native Windows tools for this, such as
    the aforementioned *netstat.exe*. When inspecting malware, watch for attempts
    to enumerate TCP state information via Windows functions or native Windows tools.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件当然也可以利用本地Windows工具来实现这一点，比如前面提到的*netstat.exe*。在检查恶意软件时，留意通过Windows函数或本地Windows工具枚举TCP状态信息的尝试。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, we covered many of the hardware and network configuration enumeration
    techniques that malware might use to determine its operating environment. As you’ve
    seen, understanding its environment and establishing context are key to malware’s
    ability to detect VMs and sandboxes, evade analysts, or otherwise stay on target.
    In the next chapter, we’ll explore how malware exposes the malware analysis environment
    by inspecting runtime anomalies, monitoring performance, and abusing virtual processor
    instructions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了恶意软件可能使用的许多硬件和网络配置枚举技术，以确定其操作环境。正如你所看到的，理解其环境并建立上下文是恶意软件检测虚拟机和沙盒、躲避分析师或保持目标不变的关键。
    在下一章中，我们将探讨恶意软件如何通过检查运行时异常、监控性能以及滥用虚拟处理器指令来暴露恶意软件分析环境。
