- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In 2015, we met for the first time at a coffee shop in downtown Toronto, hoping
    to establish a local hacking community. That meeting was the genesis of Toronto’s
    official DEFCON chapter. Ever since then, we’ve collaborated to break web applications,
    cars, locks, smart buildings, and APIs. In more recent years, we’ve focused our
    attention on yet another challenge: the vast world of offensive GraphQL security.'
  prefs: []
  type: TYPE_NORMAL
- en: A relatively new technology, the GraphQL query language has shifted the API
    paradigm, appealing to many companies looking to optimize performance, scale,
    and ease of use. However, fully understanding this query language’s security implications
    takes time. Our collaboration has unlocked a vast number of novel insights about
    GraphQL and its ecosystem. In fact, many of the vulnerabilities and exploits referenced
    in this book have never before been published. We uncovered several of them, including
    unique, never-before-seen weaknesses, through our joint research. In addition,
    we ourselves are the authors and maintainers of many of the GraphQL security tools,
    educational security platforms, and exploits highlighted herein.
  prefs: []
  type: TYPE_NORMAL
- en: This book provides a practical resource for offensive security engineers as
    well as defenders. By bridging the gap between the hacking community and the GraphQL
    ecosystem, we aim to improve this increasingly popular technology, strengthening
    the security of the many industries that use it and educating engineers on how
    to attack and defend their GraphQL APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is for anyone interested in learning how to break and protect GraphQL
    APIs through applied offensive security testing. Whether you’re a penetration
    tester who has heard of GraphQL and want to develop your hacking expertise, a
    security analyst looking to improve your knowledge of how to defend GraphQL APIs,
    or a software engineer planning to build a GraphQL-backed application, you should
    gain a lot of useful information from this book. By learning how to attack GraphQL
    APIs, you can develop hardening procedures, build automated security testing into
    your integration-and-delivery pipeline, and effectively validate controls.
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes that you have no prior exposure to GraphQL. If you already
    understand the technology, the first three chapters will reinforce some basics
    of the language, as well as discuss advanced topics. You can then delve into the
    offensive security aspects beginning in Chapter 4.
  prefs: []
  type: TYPE_NORMAL
- en: The Book’s Lab and Code Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can practice everything covered in this book in its dedicated security lab,
    which we’ve curated specifically for GraphQL hacking. We highly recommend experimenting
    with the material shared throughout the 10 chapters by running the various tools
    and querying GraphQL APIs. You’ll set up the lab in Chapter 2.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we encourage you to clone the book’s code repository, located at
    [https://github.com/dolevf/Black-Hat-GraphQL](https://github.com/dolevf/Black-Hat-GraphQL).
    The repository includes artifacts sorted by chapter, such as GraphQL code samples,
    exploits, queries, and more. We also acknowledge that, as the security community
    better learns how to hack and secure GraphQL APIs, new tools and research papers
    will emerge. As such, we’ve created a special section of the repository for documenting
    these resources for your arsenal, under the *tools* folder.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The book lays out fundamental and advanced GraphQL concepts in the first three
    chapters, as well as guides you in setting up the lab tools that security professionals
    need for security testing of GraphQL APIs. By Chapter 4, you will have a solid
    understanding how GraphQL as a technology works. The remainder of the book is
    reserved for learning and practicing the art of GraphQL penetration testing, which
    will allow you to confidently test GraphQL APIs in your future security endeavors.
    At the end of this book in Appendix A you can find a GraphQL security testing
    cheat sheet, as well as additional extracurricular resources to learn more about
    GraphQL in Appendix B. The following summary provides more detail about each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Chapter 1: A Primer on GraphQL**, you’ll be introduced to the technology
    and learn how it differs from other API protocols. In particular, we’ll demonstrate
    the differences between GraphQL and REST APIs by walking through an example using
    each. This should illustrate their relative advantages and disadvantages, as well
    as clarify why GraphQL is slowly gaining market share in the API space. You’ll
    also run your first GraphQL query.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 2: Setting Up a GraphQL Security Lab** gathers some of the best GraphQL
    security tools available for your long-term penetration testing lab environment.
    We’ll guide you through installing and configuring them. Some of these tools we
    authored ourselves, while others were kindly released as open source software
    by other security professionals.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are new to GraphQL, play close attention to **Chapter 3: The GraphQL
    Attack Surface**. This chapter has two goals: introducing you to the many components
    of the technology and enabling you to think about these concepts in a hacking
    context. In this chapter, you’ll learn about the GraphQL language and type system.
    After learning the type system, you’ll understand how GraphQL schemas work under
    the hood. And after learning the language system, you’ll know how to build and
    execute queries against GraphQL APIs. We’ll also provide an overview of the common
    weaknesses in GraphQL in preparation for Chapters 4 through 9.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Chapter 4: Reconnaissance**, we’ll use data collection and target mapping
    to apply tools and techniques to learn as much about our target as possible. Without
    doing this homework, we’d be shooting in the dark and wasting valuable time. You’ll
    learn information-gathering techniques that will allow you to make educated guesses
    about a GraphQL target’s infrastructure and increase your chances of success.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Chapter 5: Denial of Service**, you’ll learn how to achieve either a performance
    degradation or complete server takedown. Denial of service is one of the most
    prevalent vulnerabilities in GraphQL, and this chapter covers numerous techniques
    to destabilize servers by executing special queries. You’ll also learn about how
    GraphQL APIs can be built with more resiliency in mind, using defensive GraphQL
    security controls.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowledge is power, and as you’ll learn in **Chapter 6: Information Disclosure**,
    certain GraphQL design decisions can lead to information disclosure vulnerabilities.
    We’ll leverage insecure configurations and abuse GraphQL features to reconstruct
    the schema on a hardened target. We’ll also take advantage of error and debugging
    mechanisms in GraphQL servers to infer important information about the target.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should expect to find authorization and authentication controls in any
    application or API that hosts valuable data, yet these aren’t always easy to implement
    securely. **Chapter 7: Authentication and Authorization Bypasses** will teach
    you how to test for bypasses in these two important controls, enabling us to impersonate
    users, take actions we’re not authorized to take, and view information we’re not
    authorized to see.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Processing user input is a necessary evil. Most applications need it, yet we
    should never trust it, because it might be malicious. **Chapter 8: Injection**
    will cover several injection types and how they can be introduced in GraphQL interfaces
    that accept user input. We’ll use manual techniques as well as automated tools
    to uncover injection-based vulnerabilities in servers, databases, and client browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Chapter 9: Request Forgery and Hijacking**, we’ll discuss cross-site request
    forgery and server-side request forgery, two forgery-based vulnerabilities that
    impact clients and servers. We’ll also discuss cross-site WebSocket hijacking:
    an attack, used to steal user sessions, that impacts GraphQL subscriptions. By
    using several HTTP methods to send GraphQL queries, we’ll target clients and force
    a server to request sensitive information on our behalf.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Chapter 10: Disclosed Vulnerabilities and Exploits**, we’ll explore more
    than a dozen vulnerability-disclosure reports and review exploit code that impacts
    GraphQL APIs. We’ll dissect these artifacts to reinforce the takeaways of previous
    chapters and reveal how vulnerabilities have impacted large companies that run
    GraphQL APIs in production.'
  prefs: []
  type: TYPE_NORMAL
- en: As computer-security enthusiasts, we’re honored to contribute to the hacking
    community by sharing our knowledge with the industry. Armed with our perspective,
    you too can help businesses better secure their GraphQL applications. Remember
    that the content of this book is intended for educational purposes only. We highly
    encourage you to receive formal authorization before performing any penetration
    test against applications.
  prefs: []
  type: TYPE_NORMAL
