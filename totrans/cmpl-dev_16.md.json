["```\n.root {\n    background-color: #fff;\n    border-radius: 5px;\n    color: #1d1f21;\n    cursor: pointer;\n    list-style: none;\n    margin: 0.5rem 0;\n    padding: 0.5rem;\n    transition: background-color 0.25s ease-in, color 0.25s ease-in;\n    will-change: background-color, color;\n}\n\n.root:hover {\n    background-color: rgba(0, 118, 255, 0.9);\n    color: #fff;\n}\n\n.root h2 {\n    margin: 0;\n    padding: 0;\n}\n\n.root small {\n    font-weight: 300;\n    padding: 0 1rem;\n} \n```", "```\nimport Link from \"next/link\";\nimport styles from \"./index.module.css\";\nimport {LocationType} from \"mongoose/locations/schema\";\n\ninterface PropsInterface {\n    location: LocationType;\n}\n\nconst LocationsListItem = (props: PropsInterface): JSX.Element => {\n    const location = props.location;\n    return (\n        <>\n            {location && (\n                <li className={styles.root}>\n                    <Link href={`/location/${location.location_id}`}>\n                        <h2>\n                            {location.name}\n                            <small className={styles.details}>\n                                {location.cuisine} in {location.borough}\n                            </small>\n                        </h2>\n                    </Link>\n                </li>\n            )}\n        </>\n    );\n};\n\nexport default LocationsListItem; \n```", "```\n.root {\n    margin: 0;\n    padding: 0;\n} \n```", "```\nimport LocationsListItem from \"components/locations-list-item\";\nimport styles from \"./index.module.css\";\nimport {LocationType} from \"mongoose/locations/schema\";\n\ninterface PropsInterface {\n    locations: LocationType[];\n}\n\nconst LocationsList = (props: PropsInterface): JSX.Element => {\n    return (\n        <ul className={styles.root}>\n            {props.locations.map((location) => {\n                return (\n                    <LocationsListItem\n                        location={location}\n                        key={location.location_id}\n                    />\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default LocationsList; \n```", "```\nhtml,\nbody {\n    font-family: -apple-system, Segoe UI, Roboto, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nh1 {\n    font-size: 3rem;\n}\n\na {\n    color: inherit;\n    text-decoration: none;\n} \n```", "```\nimport Head from \"next/head\";\nimport type {GetStaticProps, InferGetStaticPropsType, NextPage} from \"next\";\n\nimport LocationsList from \"components/locations-list\";\nimport dbConnect from \"middleware/db-connect\";\nimport {findAllLocations} from \"mongoose/locations/services\";\nimport {LocationType} from \"mongoose/locations/schema\";\n\n❶ const Home: NextPage = (\n    props: InferGetStaticPropsType<typeof getStaticProps>\n) => {\n\n  ❷ const locations: LocationType[] = JSON.parse(props.data?.locations);\n    let title = `The Food Finder - Home`;\n\n    return (\n        <div>\n            <Head>\n                <title>{title}</title>\n                <meta name=\"description\" content=\"The Food Finder - Home\" />\n            </Head>\n\n            <h1>Welcome to the Food Finder!</h1>\n            <LocationsList locations={locations} />\n        </div>\n    );\n};\n\n❸ export const getStaticProps: GetStaticProps = async () => {\n    let locations: LocationType[] | [];\n    try {\n        await dbConnect();\n      ❹ locations = await findAllLocations();\n    } catch (err: any) {\n        return {notFound: true};\n    }\n  ❺ return {\n        props: {\n            data: {locations: JSON.stringify(locations)},\n        },\n    };\n};\n\nexport default Home; \n```", "```\n.root {\n    display: inline-block;\n    height: 35px;\n    position: relative;\n    width: 119px;\n}\n\n@media (min-width: 600px) {\n    .root {\n        height: 50px;\n        width: 169px;\n    }\n} \n```", "```\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport logo from \"/public/assets/logo.svg\";\nimport styles from \"./index.module.css\";\n\nconst Logo = (): JSX.Element => {\n    return (\n        <Link href=\"/\" passHref className={styles.root}>\n            <Image\n                src={logo}\n                alt=\"Logo: Food Finder\"\n                sizes=\"100vw\"\n                fill\n                priority\n            />\n        </Link>\n    );\n};\n\nexport default Logo; \n```", "```\n.root {\n    background: white;\n    border-bottom: 1px solid #eaeaea;\n    padding: 1rem 0;\n    position: sticky;\n    top: 0;\n    width: 100%;\n    z-index: 1;\n} \n```", "```\nimport styles from \"./index.module.css\";\nimport Logo from \"components/header/logo\";\n\nconst Header = (): JSX.Element => {\n    return (\n        <header className={styles.root}>\n            <div className=\"layout-grid\">\n                <Logo />\n            </div>\n        </header>\n    );\n};\n\nexport default Header; \n```", "```\n.layout-grid {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    margin: 0 auto;\n    max-width: 800px;\n    padding: 0 1rem;\n    width: 100%;\n}\n\n@media (min-width: 600px) {\n    .layout-grid {\n        flex-direction: row;\n        padding: 0 2rem;\n    }\n} \n```", "```\nimport Header from \"components/header\";\n\ninterface PropsInterface {\n    children: React.ReactNode;\n}\n\nconst Layout = (props: PropsInterface): JSX.Element => {\n    return (\n        <>\n            <Header />\n            <main className=\"layout-grid\">\n                {props.children}\n            </main>\n        </>\n    );\n};\nexport default Layout; \n```", "```\nimport \"../styles/globals.css\";\n**import \"../styles/layout.css\";**\nimport type {AppProps} from \"next/app\";\n**import Layout from \"components/layout\";**\n\nexport default function App({Component, pageProps}: AppProps) {\n    return (\n **<Layout>**\n            <Component {...pageProps} />\n **<****/Layout>**\n    );\n} \n```", "```\n.root {\n    margin: 0 0 2rem 0;\n    padding: 0;\n}\n.root li {\n    list-style: none;\n    margin: 0 0 0.5rem 0;\n} \n```", "```\nimport {LocationType} from \"mongoose/locations/schema\";\nimport styles from \"./index.module.css\";\n\ninterface PropsInterface {\n    location: LocationType;\n}\n\nconst LocationDetail = (props: PropsInterface): JSX.Element => {\n    let location = props.location;\n    return (\n        <div>\n            {location && (\n                <ul className={styles.root}>\n                    <li>\n                        <b>Address: </b>\n                        {location.address}\n                    </li>\n                    <li>\n                        <b>Zipcode: </b>\n                        {location.zipcode}\n                    </li>\n                    <li>\n                        <b>Borough: </b>\n                        {location.borough}\n                    </li>\n                    <li>\n                        <b>Cuisine: </b>\n                        {location.cuisine}\n                    </li>\n                    <li>\n                        <b>Grade: </b>\n                        {location.grade}\n                    </li>\n                </ul>\n            )}\n        </div>\n    );\n};\nexport default LocationDetail; \n```", "```\nimport Head from \"next/head\";\nimport type {\n    GetServerSideProps,\n    GetServerSidePropsContext,\n    InferGetServerSidePropsType,\n    PreviewData,\n    NextPage,\n} from \"next\";\nimport LocationDetail from \"components/location-details\";\nimport dbConnect from \"middleware/db-connect\";\nimport {findLocationsById} from \"mongoose/locations/services\";\nimport {LocationType} from \"mongoose/locations/schema\";\nimport {ParsedUrlQuery} from \"querystring\";\n\nconst Location: NextPage = (\n    props: InferGetServerSidePropsType<typeof getServerSideProps>\n) => {\n    let location: LocationType = JSON.parse(props.data?.location);\n  ❶ let title = `The Food Finder - Details for ${location?.name}`;\n    return (\n        <div>\n            <Head>\n                <title>{title}</title>\n                <meta\n                    name=\"description\"\n                    content={`The Food Finder. \n                        Details for ${location?.name}`}\n                />\n            </Head>\n            <h1>{location?.name}</h1>\n          ❷ <LocationDetail location={location} />\n        </div>\n    );\n};\n\n❸ export const getServerSideProps: GetServerSideProps = async (\n    context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>\n) => {\n     let locations: LocationType[] | [];\n  ❹ let {locationId} = context.query;\n     try {\n        await dbConnect();\n        locations = await findLocationsById([locationId as string]);\n      ❺ if (!locations.length) {\n            throw new Error(`Locations ${locationId} not found`);\n        }\n    } catch (err: any) {\n        return {\n            notFound: true,\n        };\n    }\n    return {\n      ❻ props: {data: {location: JSON.stringify(locations.pop())}},\n    };\n}; \n```"]