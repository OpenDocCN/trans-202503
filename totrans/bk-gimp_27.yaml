- en: Chapter 20. Image Formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GIMP can manage more than 40 file formats for representing images. It can read
    35 input formats and generate 39 output formats. Moreover, it accepts these formats
    in a compressed form, using either the Gzip or Bzip2 compression techniques.
  prefs: []
  type: TYPE_NORMAL
- en: If we covered all these formats in detail, this chapter would be enormous. Instead,
    we cover only the formats that are popular with, or at least useful to, many GIMP
    users. We also discuss the general principles that govern the various image formats.
  prefs: []
  type: TYPE_NORMAL
- en: 20.1 An Overview of File Formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An image on a computer screen is comprised of a matrix of pixels. This holds
    true on all current displays: cathode-ray tube, plasma, liquid crystals, and others.
    This is also true for laser and inkjet printers. Even the eye breaks down images
    into an array of rods and cones, as described in [Appendix A](apa.html "Appendix A. Vision
    and Image Representation").'
  prefs: []
  type: TYPE_NORMAL
- en: The *file format* is how a file is stored in memory and is independent of how
    an image was captured and how it will eventually be viewed. So the representation
    of an image as a file, whether stored on disk or downloaded online, is not necessarily
    a representation of the final matrix of pixels. And because pixel density varies
    widely among mobile phone displays, computer monitors, cheap inkjet printers,
    and professional laser printers, any representation needs to be converted from
    the internal representation to the external one. Images that you produce must
    also be converted—be it from a phone’s camera, a scanner, or a professional digital
    camera.
  prefs: []
  type: TYPE_NORMAL
- en: Raster and Vector Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Image formats can be divided into two main families: raster and vector.'
  prefs: []
  type: TYPE_NORMAL
- en: In the *raster formats*, an image is stored as a representation of the pixels
    it contains. A *bitmap* image, which can represent black and white only (no gray
    levels), contains 1 bit per pixel, whereas a *pixmap* image, which can represent
    gray levels and colors, contains several bits per pixel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the *vector formats*, an image is stored as a geometric description of its
    contents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each format has its advantages and drawbacks. An image file in vector format
    is generally much smaller than a file in raster format, and a vector image will
    be displayed at any size with the same sharpness because the pixels are computed
    each time the zoom factor changes. [Figure 20-1](ch20s01.html#icon "Figure 20-1. An
    icon") shows a 48 × 48 icon generated as a vector graphic image. The file is 63KB
    in the SVG format (which is a textual format in the XML convention). It is 1.3KB
    in JPEG because the image is very small.
  prefs: []
  type: TYPE_NORMAL
- en: '![An icon](httpatomoreillycomsourcenostarchimages1457288.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-1. An icon
  prefs: []
  type: TYPE_NORMAL
- en: '![The icon enlarged as a vector image](httpatomoreillycomsourcenostarchimages1457290.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-2. The icon enlarged as a vector image
  prefs: []
  type: TYPE_NORMAL
- en: '![The icon enlarged as a raster image](httpatomoreillycomsourcenostarchimages1457292.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-3. The icon enlarged as a raster image
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-2](ch20s01.html#icon_enlarged_as_a_vector_image "Figure 20-2. The
    icon enlarged as a vector image") shows the same icon enlarged to 480 × 480 as
    a vector graphic image at 300 dpi. The SVG file is the same size as before, but
    the JPEG file is now 30KB. [Figure 20-3](ch20s01.html#icon_enlarged_as_a_raster_image
    "Figure 20-3. The icon enlarged as a raster image") shows the same icon enlarged
    as a raster graphic image. The JPEG file is 19KB, but the image is badly pixelated.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A typical vector graphic image](httpatomoreillycomsourcenostarchimages1457294.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-4. A typical vector graphic image
  prefs: []
  type: TYPE_NORMAL
- en: Although vector graphics clearly have advantages, their main drawback is they
    cannot represent complicated images like photographs accurately. For example,
    describing the relief and shading of a human face with mathematical formulas is
    not feasible. [Figure 20-4](ch20s01.html#typical_vector_graphic_image "Figure 20-4. A
    typical vector graphic image") is a typical example of a portrait done in vector
    graphics. Although tools are available for converting an image from a raster format
    to a vector image, the results tend to be poor.
  prefs: []
  type: TYPE_NORMAL
- en: GIMP works on the raster representation of images, so it works well for photographs
    and illustrations. A pixmap cannot be zoomed in indefinitely, however, so when
    working with a raster image, work with as large a definition as possible. You
    can always reduce the size before sending the file to somebody or posting it online.
  prefs: []
  type: TYPE_NORMAL
- en: Lossless and Lossy Compression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Raster images are generally large, and they keep getting larger as digital cameras
    improve. The data size of a single pixel also increases when the number of colors
    that can be represented increases. And the number of pixels increases with the
    size and resolution of the image. A digital camera can now create images as large
    as 10 (or even 12) million pixels, which generally means at least 30MB if the
    number of colors in each channel is 256.
  prefs: []
  type: TYPE_NORMAL
- en: A 30MB file is rather large, even for current hard disks, especially if you
    store a lot of photos. This file size is also large for most memory cards and
    would be difficult to send via email or to post online. One solution is to compress
    the file to decrease its size. A number of algorithms are available for compressing
    files, especially image files. These algorithms can be either lossless or lossy.
  prefs: []
  type: TYPE_NORMAL
- en: '![A photo of a rose with decreasing image quality](httpatomoreillycomsourcenostarchimages1457296.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-5. A photo of a rose with decreasing image quality
  prefs: []
  type: TYPE_NORMAL
- en: A *lossless* compression algorithm rebuilds the original data without losing
    any information. The image quality remains stable, but sometimes the original
    image is transformed in a lossy way. If the image isn’t transformed first, then
    applying lossless compression won’t reduce the file size by very much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *lossy* compression algorithm results in some loss of information, but the
    differences may be invisible to the human eye. Generally, lossy compression reduces
    the file size considerably, but you cannot rebuild the original image exactly
    as it was, and if you apply lossy compression more than once, the deterioration
    is cumulative. Eventually, you can see the difference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want maximum image quality and don’t care about size, use only lossless
    compression. If you can accept some loss in image quality in exchange for significant
    size reduction, choose a lossy algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sizes and quality factors of the images shown in](httpatomoreillycomsourcenostarchimages1457298.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-6. Sizes and quality factors of the images shown in [Figure 20-5](ch20s01.html#photo_of_a_rose_with_decreasing_image_qu
    "Figure 20-5. A photo of a rose with decreasing image quality")
  prefs: []
  type: TYPE_NORMAL
- en: '![The initial photo of the rose (left); the same image after saving and reloading
    several times (right)](httpatomoreillycomsourcenostarchimages1457300.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-7. The initial photo of the rose (left); the same image after saving
    and reloading several times (right)
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-5](ch20s01.html#photo_of_a_rose_with_decreasing_image_qu "Figure 20-5. A
    photo of a rose with decreasing image quality") shows the same image nine times.'
  prefs: []
  type: TYPE_NORMAL
- en: Each time the image’s quality factor and size decrease, as shown in [Figure 20-6](ch20s01.html#sizes_and_quality_factors_of_the_images
    "Figure 20-6. Sizes and quality factors of the images shown in Figure 20-5").
  prefs: []
  type: TYPE_NORMAL
- en: You cannot see any obvious loss of quality down to factor 60\. When the factor
    is 10 or less, however, the loss is very apparent.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem with lossy compression is that defects accumulate if you save
    the image several times. [Figure 20-7](ch20s01.html#initial_photo_of_the_rose_left_parenthes
    "Figure 20-7. The initial photo of the rose (left); the same image after saving
    and reloading several times (right)") (left) shows an enlarged section of the
    rose photo, and [Figure 20-7](ch20s01.html#initial_photo_of_the_rose_left_parenthes
    "Figure 20-7. The initial photo of the rose (left); the same image after saving
    and reloading several times (right)") (right) shows the same photo after we saved
    and reloaded it several times with a low quality factor (less than 60). The compression
    artifacts are clearly visible on the edge of the middle petal.
  prefs: []
  type: TYPE_NORMAL
- en: Layout Engines and Browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These days many people view images through browsers like Firefox or Internet
    Explorer. Unfortunately, not all image formats are supported by all browsers.
    In fact, the three common formats discussed in the next section are the only ones
    that are displayed by all existing browsers, and sometimes even those formats
    don’t work perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many different browsers exist, and some browsers vary depending on your operating
    system. Browsers use *layout engines* to display images on the screen. Fewer than
    10 layout engines are available, and only a handful are widely used. Different
    browsers using the same layout engine handle images in the same way. The following
    table lists popular layout engines and the browsers that use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Layout Engine | Browsers |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Gecko | all Mozilla software: Firefox, Galeon, Seamonkey, etc. |'
  prefs: []
  type: TYPE_TB
- en: '| KHTML | Konqueror |'
  prefs: []
  type: TYPE_TB
- en: '| Presto | Opera |'
  prefs: []
  type: TYPE_TB
- en: '| Trident | Internet Explorer 4 to 9 |'
  prefs: []
  type: TYPE_TB
- en: '| Webkit | Safari, Epiphany, Google Chrome |'
  prefs: []
  type: TYPE_TB
- en: Because many people still use Internet Explorer, many people use Trident. No
    layout engine is perfect, but unfortunately Trident is one of the worst. Its main
    problem, with regard to image display, is that it does not handle PNG format very
    well. Other free software browsers handle PNG images much better.
  prefs: []
  type: TYPE_NORMAL
- en: 20.2 JPEG, GIF, and PNG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we discuss the common formats that all layout engines handle
    (though not always well) and which are generally the most useful.
  prefs: []
  type: TYPE_NORMAL
- en: JPEG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Surprisingly, JPEG is not the name of the format, which is called JFIF, but
    of the working group that defined it—the Joint Photographic Experts Group. This
    committee defined what became an ISO standard in 1994\. The format they designed
    is the usual output format of most, if not all, digital cameras. JFIF stands for
    *JPEG File Interchange Format*.
  prefs: []
  type: TYPE_NORMAL
- en: JPEG uses a lossy compression algorithm, which means that some information is
    lost, but the file size is decreased substantially while maintaining a fairly
    high image quality. JPEG is the format of choice for photographs and digital illustrations
    because it can present complex images as files that are small enough to send by
    email or to post on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Figure 20-7](ch20s01.html#initial_photo_of_the_rose_left_parenthes
    "Figure 20-7. The initial photo of the rose (left); the same image after saving
    and reloading several times (right)"), exporting a JPEG over and over is not a
    good idea because the quality loss accumulates. Each time you load a picture you
    start with the last state, which suffered some loss of quality when you last exported
    it. Always work on the image as an XCF in GIMP, and export it from the XCF to
    store it as a JPEG. This issue is one of the reasons why, since version 2.8, GIMP
    only exports an image as JPEG and doesn’t consider the image to be saved until
    you have saved it as an XCF file.
  prefs: []
  type: TYPE_NORMAL
- en: The JPEG format is not well suited to images containing line drawings, text,
    or a sharp contrast between adjacent pixels. A lossless compression algorithm
    is needed in such a case, because it means that only some pixels from the initial
    image are saved and the missing pixels are interpolated when the image is loaded.
    If pixels along a sharp border in a line drawing are not saved, the interpolation
    assigns them an average value based on the surrounding pixels, which smooths the
    border and can make the image look blurry.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharp contrast with a lossy compression algorithm](httpatomoreillycomsourcenostarchimages1457302.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-8. Sharp contrast with a lossy compression algorithm
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharp contrast with a lossless compression algorithm](httpatomoreillycomsourcenostarchimages1457304.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-9. Sharp contrast with a lossless compression algorithm
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-8](ch20s02.html#sharp_contrast_with_a_lossy_compression "Figure 20-8. Sharp
    contrast with a lossy compression algorithm") and [Figure 20-9](ch20s02.html#sharp_contrast_with_a_lossless_compressi
    "Figure 20-9. Sharp contrast with a lossless compression algorithm") show the
    difference between a lossy and lossless compression algorithm used on an image
    with high contrast. In the first figure, the character contours are blurred by
    the lossy compression algorithm, whereas in the second figure, they remain sharp,
    thanks to the lossless compression algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: Another weakness of the JPEG format is that it cannot handle transparency. Although
    generally fine for photos, if you want to display a non-rectangular graphic on
    a web page, for example, and it’s a JPEG, you have to fill the background with
    a color or pattern.
  prefs: []
  type: TYPE_NORMAL
- en: A JPEG file can contain an ICC color profile, which defines the color space
    used (see [Chapter 12](ch12.html "Chapter 12. Color")). If this is the case, when
    you load the file, GIMP asks whether you want to use the embedded profile. Generally,
    you should answer yes. Many simpler image applications simply ignore the profile.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting to JPEG
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you export an image to JPEG (`.jpeg` or `.jpg`), GIMP opens a dialog, which
    in its simplest form only allows you to set the compression quality [0 to 100].
  prefs: []
  type: TYPE_NORMAL
- en: The QUALITY slider determines how much the image quality will be degraded to
    decrease the file size. Images at values greater than 85 generally look the same,
    and the loss in quality is practically indiscernible at such values. The degradation
    usually becomes apparent only if the value is less than 50\. Check SHOW PREVIEW
    IN IMAGE WINDOW to see the effect of the current setting before exporting the
    image.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click ADVANCED OPTIONS, you’ll see the extended dialog shown in [Figure 20-10](ch20s02.html#export_image_as_jpeg_dialog-id00198
    "Figure 20-10. The Export Image as JPEG dialog"). Here are the most useful ADVANCED
    OPTIONS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROGRESSIVE: The file loads progressively in a web page. First, a crude version
    appears, and then the image becomes more and more refined. This setting is useful
    for large files that inevitably take time to load, but it increases the file size
    slightly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE EXIF DATA: The EXIF data, which is generally added to the file by digital
    cameras, contains information about a photo, including the date and time the photo
    was taken, the camera brand and model, and the camera settings used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE THUMBNAIL: This option saves a thumb-nail of the image in the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'USE QUALITY SETTINGS FROM ORIGINAL IMAGE: These settings determine how the
    compression algorithm works. The original image may have an unusual set of values;
    in this case, checking this box guarantees that if you make minor changes to the
    image, the result will have the same quality as the original.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SMOOTHING: This slider smooths imperfections created by a high level of compression.
    Smoothing also blurs the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other ADVANCED OPTIONS are useful only under very specific circumstances,
    so just ignore them unless you know that you need to change them. Note that the
    COMMENT field, which adds text to the file, will not be visible in the image itself,
    but you can see it in GIMP with **Image: Image > Image Properties**, on the third
    tab. The COMMENT field can be handy for adding a copyright notice, for example.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to transparency, JPEG cannot save multiple layers. Although it has
    some popular applications, JPEG can’t store nearly as much information as XCF,
    which is another reason why it’s always better to save files as XCF and export
    them as JPEG rather than storing them only as JPEG.
  prefs: []
  type: TYPE_NORMAL
- en: GIF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Graphics Interchange Format (GIF) has a long and tumultuous history. Although
    this format has many major drawbacks, it remains popular partly because it’s the
    simplest format for building small animations ([Chapter 18](ch18.html "Chapter 18. Animation
    Tools")) and because people are familiar with it.
  prefs: []
  type: TYPE_NORMAL
- en: This format was defined in 1987 by CompuServe, now a subsidiary of AOL. At that
    time, the compression of images was considered much more important than the number
    of colors, which was limited by most existing display screens. For this reason,
    the GIF format, with its efficient compression algorithm and limited palette,
    was widely used in the first browsers and graphic tools.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Export Image as JPEG dialog](httpatomoreillycomsourcenostarchimages1457306.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-10. The Export Image as JPEG dialog
  prefs: []
  type: TYPE_NORMAL
- en: The compression algorithm used by GIF is known as LZW. It was designed in the
    late 1970s by Jacob Ziv and Abraham Lempel and improved in 1983 by Terry Welch.
    Welch immediately filed an application for a US patent on his algorithm and extended
    this patent later to various other countries.
  prefs: []
  type: TYPE_NORMAL
- en: When the GIF format was published, the authors were not aware of the patent,
    and it was only in 1993 that the current patent owner, Unisys, tried to exercise
    rights to the algorithm. They tried to get royalties when the format was used,
    at least in commercial products. This triggered much indignation in the Internet
    world and was one of the main reasons for the development of the PNG format (see
    [PNG](ch20s02.html#png-id00199 "PNG")). The patent expired in 2003 in the US and
    one year later in other countries, so you can now use the format freely, but its
    reputation hasn’t fully recovered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GIF format was actually pretty good when it was developed, but today PNG
    is superior in all respects but one: animation. Internet Explorer’s poor support
    of PNG remains a major obstacle to the full adoption of this format, however.'
  prefs: []
  type: TYPE_NORMAL
- en: 'GIF’s main characteristic is that the image must be in *indexed mode*. An indexed
    image is encoded using a color table, as we explained in [Chapter 12](ch12.html
    "Chapter 12. Color"). The pixels are represented as indexes in the table, and
    the size of each pixel depends on the size of the table: A table with 4 colors
    requires 2 bits, a table with 64 colors requires 6 bits, and a table with 256
    colors requires 8 bits (1 byte), the maximum for GIF.'
  prefs: []
  type: TYPE_NORMAL
- en: Indexed mode saves space because a pixel needs at most 1 byte instead of 3 (with
    8-bit depth RGB encoding). But even more space is saved by the increased probability
    that neighboring pixels are the same. Instead of storing the value of every pixel
    separately, a compression algorithm can store the shape and size of a contiguous
    area with identical pixels and the pixel value for the area.
  prefs: []
  type: TYPE_NORMAL
- en: '![The rose in indexed with 32 colors](httpatomoreillycomsourcenostarchimages1457308.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-11. The rose in [Figure 20-7](ch20s01.html#initial_photo_of_the_rose_left_parenthes
    "Figure 20-7. The initial photo of the rose (left); the same image after saving
    and reloading several times (right)") indexed with 32 colors
  prefs: []
  type: TYPE_NORMAL
- en: The LZW compression algorithm doesn’t quite work that way, but the compression
    rate is still better if neighboring pixels have the same value. LZW doesn’t work
    if there are more possible values for pixels than pixels in the image, which is
    often the case with RGB encoding. With 8-bit RGB, you have 2^(24) possible pixel
    values (more than 16 million), but a 4000 × 4000 pixel image is unusually large.
    GIF also doesn’t work well for photos, as the probability that neighboring pixels
    have the same value is low.
  prefs: []
  type: TYPE_NORMAL
- en: The LZW algorithm works best when the image contains large areas of the same
    color, which means the GIF format is best suited for simple graphics, line drawings,
    and cartoons. A smooth change in hue or value is not easy to represent because
    the palette does not have enough colors. A technique known as *dithering* can
    smooth transitions to a degree. When dithering is applied, two different colors
    are used in neighboring pixels, and because the pixels are so small, the eye blends
    the two colors together. Dithering can lead to a loss of detail, and the result
    doesn’t always look very good. Another consequence is that neighboring pixels
    are no longer identical, so the LZW algorithm can’t compress the image as effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-11](ch20s02.html#rose_in_figure_20dot7_indexed_with_32_co "Figure 20-11. The
    rose in Figure 20-7 indexed with 32 colors") shows the effect of indexing on the
    rose from [Figure 20-7](ch20s01.html#initial_photo_of_the_rose_left_parenthes
    "Figure 20-7. The initial photo of the rose (left); the same image after saving
    and reloading several times (right)"). The image was indexed with 32 colors, and
    the colors look blocky.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A color gradient](httpatomoreillycomsourcenostarchimages1457310.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-12. A color gradient
  prefs: []
  type: TYPE_NORMAL
- en: '![The color gradient indexed and dithered](httpatomoreillycomsourcenostarchimages1457312.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-13. The color gradient indexed and dithered
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-12](ch20s02.html#color_gradient "Figure 20-12. A color gradient")
    shows a simple image built with the Blend tool and the `Full saturation spectrum
    CW` gradient. [Figure 20-13](ch20s02.html#color_gradient_indexed_and_dithered
    "Figure 20-13. The color gradient indexed and dithered") shows the same image
    after we indexed it using 256 different colors. Even though we used the maximum
    number of colors, the image didn’t look right, so we added dithering to smooth
    the transitions. But it still doesn’t look right.'
  prefs: []
  type: TYPE_NORMAL
- en: Among the 256 different colors available in GIF, one can be used for transparency.
    When the image is displayed on the Web, a transparent pixel lets the background
    show through. Although transparency isn’t possible with a JPEG, GIF doesn’t allow
    for progressive transparency.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting to GIF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you export an image to the GIF format (`.gif`), GIMP opens the dialog shown
    in [Figure 20-14](ch20s02.html#export_image_as_gif_dialog "Figure 20-14. The Export
    Image as GIF dialog").
  prefs: []
  type: TYPE_NORMAL
- en: If you’re saving a still image, this dialog allows you only to add a comment
    and check the INTERLACE box. Interlace builds an image that displays progressively,
    which may be useful for a large image coming over a slow Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: If the image has more than one layer, the option to save it as an animation
    is available. Checking AS ANIMATION expands the dialog, and you can set the animation
    parameters explained in [Output Formats](ch18s01.html#output_formats "Output Formats").
  prefs: []
  type: TYPE_NORMAL
- en: If the image is in RGB mode when you export it as a GIF, it is automatically
    converted to indexed mode using a default colormap.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Export Image as GIF dialog](httpatomoreillycomsourcenostarchimages1457314.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-14. The Export Image as GIF dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Converting it to indexed mode (**Image: Image > Mode > Indexed**) first is
    safer; this way you can choose the colormap and whether to use dithering.'
  prefs: []
  type: TYPE_NORMAL
- en: PNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Portable Network Graphics (PNG) format was first defined as a free replacement
    for GIF at the peak of the battle over the patented LZW compression algorithm
    used with GIF. PNG uses a lossless, patent-free compression algorithm and is also
    designed to avoid most of GIF’s drawbacks, including the restriction to indexed
    representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PNG format became an ISO standard in 2003 and was revised a year later.
    Although PNG is clearly superior to GIF, it hasn’t completely replaced it for
    two reasons: its lack of support for animation and Microsoft’s unwillingness to
    implement it correctly in Internet Explorer. Later versions of Internet Explorer
    (7 and above) handle PNG better, however, and IE 9 seems faultless, so we have
    hope.'
  prefs: []
  type: TYPE_NORMAL
- en: PNG supports RGB, grayscale, and indexed images, but it doesn’t support other
    color spaces like CMYK. It also supports progressive transparency as an additional
    channel when the image is in RGB or grayscale mode or by adding Alpha values to
    palette entries in indexed mode.
  prefs: []
  type: TYPE_NORMAL
- en: '![Some text in a PNG image](httpatomoreillycomsourcenostarchimages1457316.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-15. Some text in a PNG image
  prefs: []
  type: TYPE_NORMAL
- en: '![The same text in a JPEG image](httpatomoreillycomsourcenostarchimages1457318.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-16. The same text in a JPEG image
  prefs: []
  type: TYPE_NORMAL
- en: Because PNG uses lossless compression, it produces larger files than JPEG, but
    the format is clearly superior to JPEG in the case of a photograph on which text
    is printed. The lossy algorithm used for JPEG blurs the outline of the characters,
    as [Figure 20-15](ch20s02.html#some_text_in_a_png_image "Figure 20-15. Some text
    in a PNG image") and [Figure 20-16](ch20s02.html#same_text_in_a_jpeg_image "Figure 20-16. The
    same text in a JPEG image") show. The lossy compression used by JPEG does result
    in smaller files, however, and image quality is just as good for a photo as long
    as you select a quality factor greater than 50.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to GIF, PNG actually generates smaller files if the conditions are
    the same (that is, if the image is in indexed mode). If you export an RGB image
    as a PNG, it stays in RGB mode and, therefore, takes up more space because it
    contains more colors. If you first convert the image to indexed mode and then
    export it to both GIF and PNG, the PNG file is about half the size of the GIF
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The PNG format works well for all kinds of images—except animations. (But for
    photos without text, JPEG is preferable because the file size is smaller.) When
    storing simple illustrations like cartoons that have only a few colors, do not
    forget to convert the image to indexed mode before exporting it. Because the compression
    algorithm is lossless, you can repeatedly export an image as PNG without the cumulative
    deterioration seen with JPEG.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting to PNG
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you export an image as a PNG (`.png`), the dialog in [Figure 20-17](ch20s02.html#export_image_as_png_dialog
    "Figure 20-17. The Export Image as PNG dialog") opens. Here are the most useful
    entries in the dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: 'INTERLACING: This option creates an image that loads progressively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE BACKGROUND COLOR: This option is for obsolete browsers that can’t handle
    progressive transparency. Using this option, you can choose the color that is
    displayed in place of the transparent pixels. Unfortunately, Internet Explorer
    does not recognize these settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE RESOLUTION: This option is useful only if the program that opens the image
    can read the saved resolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE CREATION TIME: This option stores the time and date when the image was
    last saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE COMMENT: Any comments added via **Image: Image > Image Properties** on
    the COMMENT tab are saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SAVE COLOR VALUES FROM TRANSPARENT PIXELS: Fully transparent pixels may still
    have a color value, which will appear if the transparency is decreased or removed
    later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![The Export Image as PNG dialog](httpatomoreillycomsourcenostarchimages1457320.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-17. The Export Image as PNG dialog
  prefs: []
  type: TYPE_NORMAL
- en: 20.3 GIMP’s Native Formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In GIMP, a work in progress often includes multiple layers, transparency, and
    an active selection. It might also have layer masks, channels containing saved
    selections, and paths. It probably also includes undo history. Anything you can
    do in GIMP can be represented by the *native format*, XCF. A native format is
    a file structure designed specifically for a piece of software.
  prefs: []
  type: TYPE_NORMAL
- en: GIMP also has tools for defining new brushes, patterns, palettes, and gradients.
    Each of those also has a native format in GIMP. You can download custom brushes,
    patterns, palettes, and gradients from the Web or even create your own and post
    them for other users to download. We show you how in [Chapter 22](ch22.html "Chapter 22. Customizing
    GIMP").
  prefs: []
  type: TYPE_NORMAL
- en: XCF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XCF is GIMP’s most important native format. When you save an image in XCF, you’re
    saving all its components, layers, layer groups, masks, channels, paths, guides,
    and so on. The only thing that isn’t saved is the undo history, which would increase
    the file size significantly.
  prefs: []
  type: TYPE_NORMAL
- en: XCF is the only format that is guaranteed to store all the information in an
    image that you’re working on in GIMP, and it’s the best format for a work in progress.
    If you want to store a file in another format, but you want to make additional
    changes at some point, always save a copy of your work as XCF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because XCF stores so much information, an XCF file can be rather large, but
    GIMP allows you to compress it using one of two lossless external compression
    algorithms: the one used by Gzip and the one used by Bzip2\. Bzip2 yields better
    results than Gzip but only by 30% or 40% at most. Bzip2 is also much slower. GIMP
    can load and save files compressed using these algorithms without first having
    to unpack the files. The compression is indicated by a second extension, which
    is either `.gz` or `.bz2`. On a GNU/Linux operating system, the suffix does not
    determinate the file format, which is specified by the file’s first few bytes,
    but it can be helpful for users.'
  prefs: []
  type: TYPE_NORMAL
- en: Although XCF can be read by several other applications, including ImageMagick,
    Krita, and Inkscape, it’s not intended as a universal format.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you save an image with **Image: File > Save As** or ![](httpatomoreillycomsourcenostarchimages1453852.png.jpg),
    GIMP automatically assumes the file format is XCF and adds the corresponding extension
    to the filename. For all other output formats, you must export the image with
    **Image: File > Export As** or ![](httpatomoreillycomsourcenostarchimages1453856.png.jpg).
    The export commands cannot generate XCF. If an image is modified and then exported,
    GIMP does not consider the image saved and opens a warning window if you try to
    close it.'
  prefs: []
  type: TYPE_NORMAL
- en: Other Native Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to images, whose natural format is XCF, four other objects have
    their own native formats in GIMP. These are brushes, patterns, gradients, and
    palettes. Each of these objects has a specialized dockable dialog: The Brushes
    dialog, the Patterns dialog, and the Gradients dialog are present, by default,
    in the multi-dialog window; and the Palettes dialog can be opened via **Image:
    Windows > Dockable dialogs** or from the dialog menu, which you open by clicking
    the small triangle found at the top of all dockable dialogs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These objects are stored on the computer in special folders, which you can
    define using **Image: Edit > Preferences** in the Folders entry. Each category
    has a systemwide folder, where objects are stored when installing or updating
    GIMP, and a personal folder, where you can store objects you create.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create, edit, or delete a brush, pattern, and palette by using the
    buttons at the bottom of the corresponding dialog. These let you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the current object. Editing works only if the object is in the personal
    folder. Otherwise, you can only look at the characteristics of the object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate the current object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the current object (if it’s in your personal folder).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refresh the object list in the dialog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also access these options via the dialog menu or by right-clicking a
    brush, palette, or pattern. Patterns are not built using a specific tool, so the
    Patterns dialog only contains buttons for deleting, refreshing, and opening the
    current pattern as an image.
  prefs: []
  type: TYPE_NORMAL
- en: Building and saving new brushes, patterns, dialogs, and palettes is described
    in [Chapter 22](ch22.html "Chapter 22. Customizing GIMP").
  prefs: []
  type: TYPE_NORMAL
- en: 20.4 Other Useful Formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we cover the image formats that, although useful to know when
    using GIMP, are less frequently used.
  prefs: []
  type: TYPE_NORMAL
- en: PostScript and PDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PostScript is not exactly an image format; rather it is a programming language,
    designed in 1982 for document page description. Early laser printers, and even
    many current ones, use PostScript to describe pages being printed. These printers
    contain an interpreter for the language, and executing this interpreter tells
    the printer where to put dots on the page.
  prefs: []
  type: TYPE_NORMAL
- en: PostScript is a proprietary language that belongs to Adobe, but its description
    is public. The Ghostscript interpreter is free software under GPL that lets you
    print PostScript files on printers that don’t use PostScript (for instance, on
    most inkjet printers).
  prefs: []
  type: TYPE_NORMAL
- en: PostScript is a vector graphics language. It rasterizes the image at the last
    moment when the printer definition is received from the printer. The character
    fonts can be defined in vector geometry and zoomed in or out without pixelation.
  prefs: []
  type: TYPE_NORMAL
- en: When you export an image as PostScript (`.ps`), GIMP opens the dialog shown
    in [Figure 20-18](ch20s04.html#export_image_as_postscript_dialog "Figure 20-18. The
    Export Image as PostScript dialog"). The dimensions of the image are predefined
    in millimeters or inches. You can change them, but if you do, you freeze the printer
    definition attached to the image. Leaving the conversion from image to PostScript
    to whatever application you use to add it to a document is best.
  prefs: []
  type: TYPE_NORMAL
- en: Encapsulated PostScript (EPS) is PostScript with additional information on the
    box that encapsulates the image. This information tells the application importing
    the file the image’s exact dimensions and generally works more smoothly than regular
    PostScript when inserting an image into a document.
  prefs: []
  type: TYPE_NORMAL
- en: GIMP can also import a PostScript file using the dialog in [Figure 20-19](ch20s04.html#import_from_postscript_dialog
    "Figure 20-19. The Import from PostScript dialog"). The resolution you choose
    is very important. The image is immediately rasterized when you import it, and
    the vector information in the input file is lost.
  prefs: []
  type: TYPE_NORMAL
- en: The Portable Document Format, generally known as PDF, is a simplified version
    of PostScript. PDF also belongs to Adobe but was accepted as an ISO standard in
    2008\. PDF is slowly replacing PostScript and offers several advantages. GIMP
    is able to import and export PDF files.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Export Image as PostScript dialog](httpatomoreillycomsourcenostarchimages1457322.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-18. The Export Image as PostScript dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![The Import from PostScript dialog](httpatomoreillycomsourcenostarchimages1457324.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-19. The Import from PostScript dialog
  prefs: []
  type: TYPE_NORMAL
- en: When you import a PDF file into GIMP, it opens the dialog shown in [Figure 20-20](ch20s04.html#import_from_pdf_dialog
    "Figure 20-20. The Import from PDF dialog"). You can select the input file’s resolution,
    the pages to import, and whether to import them as layers of a single image or
    as multiple images.
  prefs: []
  type: TYPE_NORMAL
- en: When you export an image to PDF, GIMP opens the dialog shown in [Figure 20-21](ch20s04.html#export_image_as_pdf_dialog
    "Figure 20-21. The Export Image as PDF dialog"). You can choose options for decreasing
    the size of the generated PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Import from PDF dialog](httpatomoreillycomsourcenostarchimages1457326.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-20. The Import from PDF dialog
  prefs: []
  type: TYPE_NORMAL
- en: TIFF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tagged Image File Format, also known as TIFF, is not an international standard.
    It also belongs to Adobe, was defined in the mid-1980s, and has not been updated
    since 1992.
  prefs: []
  type: TYPE_NORMAL
- en: TIFF is a complicated and flexible format that can use several different compression
    algorithms—lossy or lossless. It can also use different numbers of bits per color,
    different color spaces, and more. But most applications can’t handle all the TIFF
    features, which means you may lose information when transferring images from one
    application to another.
  prefs: []
  type: TYPE_NORMAL
- en: The TIFF format is the format of choice in scientific imaging and is widely
    accepted in the printing business, however.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Export Image as PDF dialog](httpatomoreillycomsourcenostarchimages1457328.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-21. The Export Image as PDF dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![The Export Image as TIFF dialog](httpatomoreillycomsourcenostarchimages1457330.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-22. The Export Image as TIFF dialog
  prefs: []
  type: TYPE_NORMAL
- en: When you export an image in TIFF format (`.tiff`), GIMP opens the dialog shown
    in [Figure 20-22](ch20s04.html#export_image_as_tiff_dialog "Figure 20-22. The
    Export Image as TIFF dialog"). The radio buttons let you choose the compression
    algorithm. LZW, Pack Bits, and Deflate are lossless; JPEG is lossy. The two CCITT
    compression algorithms work only with black and white images (without gray levels).
    If the image contains paths, they are saved too.
  prefs: []
  type: TYPE_NORMAL
- en: Netpbm Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Netpbm is a public domain, portable collection of programs for converting from
    one graphic format to another. These programs handle a large set of graphic formats
    and define four new ones that are supported by GIMP:'
  prefs: []
  type: TYPE_NORMAL
- en: Portable Bit Map (PBM) is for bitmaps (black and white images).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portable Gray Map (PGM) is for grayscale images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portable Pixmap (PPM) is for color pixmaps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PNM refers to these three formats together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Netpbm offers an additional format called PAM, but GIMP doesn’t support it.
    All these formats use a textual representation, which results in very large files.
    For example, the rose in [Figure 20-5](ch20s01.html#photo_of_a_rose_with_decreasing_image_qu
    "Figure 20-5. A photo of a rose with decreasing image quality") has the following
    sizes (the TIFF was saved with Deflate compression):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Format | Size (KB) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| GIF | 109 |'
  prefs: []
  type: TYPE_TB
- en: '| JPEG | 26 |'
  prefs: []
  type: TYPE_TB
- en: '| TIFF | 300 |'
  prefs: []
  type: TYPE_TB
- en: '| PPM | 3600 |'
  prefs: []
  type: TYPE_TB
- en: Despite their size, these formats are handy because you can convert them to
    or from almost any existing image format.
  prefs: []
  type: TYPE_NORMAL
- en: SVG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scalable Vector Graphics (SVG) is the format of choice for vector graphics.
    It is an open standard defined by the World Wide Web Consortium that relies on
    the textual nature of XML. More and more application programs accept this format
    in their input files, including GIMP.
  prefs: []
  type: TYPE_NORMAL
- en: SVG is the native format for some vector graphics programs like Inkscape (free
    software). Others, like Adobe Illustrator, CorelDRAW, Blender, or Xara Xtreme
    (the last two are free software), can import and export SVG files. Note that Adobe
    Photoshop does not offer SVG support.
  prefs: []
  type: TYPE_NORMAL
- en: Most browsers can display SVG images. The only exception is Internet Explorer,
    but plug-ins are available that allow Internet Explorer to display SVG.
  prefs: []
  type: TYPE_NORMAL
- en: GIMP can import SVG images like the one shown in [Figure 20-2](ch20s01.html#icon_enlarged_as_a_vector_image
    "Figure 20-2. The icon enlarged as a vector image"), but exporting a raster image
    to SVG is not possible, and the result probably wouldn’t look very good anyway.
    But a GIMP path can be exported to SVG.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Formats Supported by GIMP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GIMP can import Photoshop image files, which is useful for people who want to
    abandon proprietary software in favor of free software.
  prefs: []
  type: TYPE_NORMAL
- en: The BMP format is a very simple Microsoft format that lacks compression. The
    image in [Figure 20-5](ch20s01.html#photo_of_a_rose_with_decreasing_image_qu "Figure 20-5. A
    photo of a rose with decreasing image quality") takes up 1100KB when saved in
    BMP. This format is notably used for icons in the Microsoft Windows system as
    well as in OS/2\. GIMP can import and export BMP files. When exporting, you can
    choose the number of bits of the color space and the representation of the Alpha
    channel, if one exists.
  prefs: []
  type: TYPE_NORMAL
- en: The X window system (the windowing system on all Unix-like operating systems)
    uses the XPM and XBM graphic formats for icons and such. The first one is for
    pixmaps and the second one for bitmaps. Both are fully textual, so they aren’t
    suitable for large images. The image shown in [Figure 20-5](ch20s01.html#photo_of_a_rose_with_decreasing_image_qu
    "Figure 20-5. A photo of a rose with decreasing image quality") occupies 2400KB
    when exported to XPM.
  prefs: []
  type: TYPE_NORMAL
- en: An image format popular among professional photographers is *raw format*. We
    discuss this format in more detail in [Choosing a Format](ch19s03.html#choosing_a_format
    "Choosing a Format") and [Handling Raw Photographs](ch19s03.html#handling_raw_photographs
    "Handling Raw Photographs").
  prefs: []
  type: TYPE_NORMAL
