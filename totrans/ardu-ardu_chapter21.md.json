["```\n// Project #61 - Retrieving Internet time\n\n❶ #include <NTPClient.h>\n#include <WiFi.h>\n#include <WiFiUdp.h>\nWiFiUDP ntpUDP;\n\n❷ // Enter your Wi-Fi network SSID and password:\nconst char* ssid = \"`SSID`\";\nconst char* password = \"`password`\";\n\n// ntpUDP, time server pool, offset in seconds, update interval (mS):\nNTPClient timeClient(ntpUDP, \"`0.north-america.pool.ntp.org`\", `36000`, 60000);\n\nvoid setup()\n{\n    Serial.begin(115200);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n    Serial.print(\"Connecting to Wi-Fi \");\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(500);\n        Serial.print(\".\");\n    }\n    timeClient.begin();\n}\n\nvoid loop()\n{\n    String dateString;\n    String date, month, year;\n\n  ❸ timeClient.update();\n    Serial.println(timeClient.getEpochTime());\n    Serial.println(timeClient.getFormattedDate());\n    Serial.println(timeClient.getFormattedTime());\n\n    // Retrieve and display day of week\n  ❹ Serial.print(\"Today is \");\n    switch (timeClient.getDay())\n    {\n        case 0: Serial.println(\"Sunday\"); break;\n        case 1: Serial.println(\"Monday\"); break;\n        case 2: Serial.println(\"Tuesday\"); break;\n        case 3: Serial.println(\"Wednesday\"); break;\n        case 4: Serial.println(\"Thursday\"); break;\n        case 5: Serial.println(\"Friday\"); break;\n        case 6: Serial.println(\"Saturday\"); break;\n        case 7: Serial.println(\"Sunday\"); break;\n    }\n\n // Retrieve hours, minutes, and seconds separately and display:\n    if (timeClient.getHours() < 10)\n    {\n        Serial.print(\"0\");\n    }\n    Serial.print(timeClient.getHours());\n        Serial.print(\"-\");\n  if (timeClient.getMinutes() < 10)\n  {\n          Serial.print(\"0\");\n    }\n      Serial.print(timeClient.getMinutes());\n        Serial.print(\"-\");\n    if (timeClient.getSeconds() < 10)\n    {\n        Serial.print(\"0\");\n    }\n    Serial.println(timeClient.getSeconds());\n\n  ❺ // Extract data from formatted date result and display:\n    dateString = timeClient.getFormattedDate();\n    date = dateString.substring(8, 10);\n    Serial.print(date);\n    Serial.print(\"/\");\n    month = dateString.substring(5, 7);\n    Serial.print(month);\n    Serial.print(\"/\");\n    year = dateString.substring(0, 4);\n    Serial.println(year);\n    Serial.println();\n    delay(1000);\n} \n```", "```\n// Project #62 - OLED NTP clock\n\n#include <NTPClient.h>\n#include <WiFi.h>\n#include <WiFiUdp.h>\n#include <U8g2lib.h>\n#include <Wire.h>\nU8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);\n\n// Enter your Wi-Fi network SSID and password\nconst char* ssid = \"`SSID`\";\nconst char* password = \"`Password`\";\nWiFiUDP ntpUDP;\n\n❶ // ntpUDP, time server pool, offset in seconds, update interval (mS)\nNTPClient timeClient(ntpUDP, \"`0.us.pool.ntp.org`\", `36000`, 60000);\n\nvoid setup()\n{\n    Wire.begin();\n    u8g2.begin();\n    u8g2.setFont(u8g2_font_9x18_tr);\n    Serial.begin(115200);\n  ❷ WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n    Serial.print(\"Connecting to Wi-Fi \");\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        u8g2.clearBuffer();\n        u8g2.drawStr(0, 16, \"Connecting\");\n        u8g2.drawStr(0, 31, \"to Wi-Fi\"…\");\n        u8g2.sendBuffer();\n    }\n    timeClient.begin();\n}\n\nvoid loop()\n{\n    int hours, minutes, seconds;\n    int date, month, year, dayOfWeek;\n    String hh, mm, ss, dateString;\n    String OLED1, OLED2;\n\n    timeClient.update();\n\n    // Assemble time:\n  ❸ hours = timeClient.getHours();\n    minutes = timeClient.getMinutes();\n    seconds = timeClient.getSeconds();\n\n    if (hours < 10) {hh = hh + \"0\";}\n    if (minutes < 10) {mm = mm + \"0\";}\n    if (seconds < 10) {ss = ss + \"0\";}\n    hh = hh + String(hours);\n    mm = mm + String(minutes);\n    ss = ss + String(seconds);\n  ❹ OLED1 = hh + \":\" + mm + \":\" + ss;\n\n    // Assemble date:\n  ❺ dateString = timeClient.getFormattedDate();\n    switch (timeClient.getDay())\n    {\n        case 0: OLED2 = OLED2 + \"Sun \"; break;\n        case 1: OLED2 = OLED2 + \"Mon \"; break;\n        case 2: OLED2 = OLED2 + \"Tue \"; break;\n case 3: OLED2 = OLED2 + \"Wed \"; break;\n        case 4: OLED2 = OLED2 + \"Thu \"; break;\n        case 5: OLED2 = OLED2 + \"Fri \"; break;\n        case 6: OLED2 = OLED2 + \"Sat \"; break;\n        case 7: OLED2 = OLED2 + \"Sun \"; break;\n\t}\n\n  ❻ OLED2 = OLED2 + dateString.substring(8, 10); // Date\n    OLED2 = OLED2 + \"/\";\n    OLED2 = OLED2 + dateString.substring(5, 7); // Month\n    OLED2 = OLED2 + \"/\";\n    OLED2 = OLED2 + dateString.substring(0, 4); // Year\n\n    // Show time and date on OLED:\n  ❼ u8g2.clearBuffer();\n    u8g2.drawStr(0, 16, OLED1.c_str());\n    u8g2.drawStr(0, 31, OLED2.c_str());\n    u8g2.sendBuffer();\n    delay(1000);\n} \n```", "```\n// Project #63 - OLED dual-zone NTP clock\n\n#include <NTPClient.h>\n#include <WiFi.h>\n#include <WiFiUdp.h>\n#include <U8g2lib.h>\n\n#include <Wire.h>\nU8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);\n\n// Enter your Wi-Fi network SSID and password:\nconst char* ssid = \"`SSID`\";\nconst char* password = \"`Password`\";\nWiFiUDP ntpUDP;\n\n// ntpUDP, time server pool, offset in seconds, update interval (mS)\n// Starts with home offset (e.g. 36000 for UTC + 10)\nNTPClient timeClient(ntpUDP, \"`0.us.pool.ntp.org`\", `36000`, 60000);\n\nvoid setup()\n{\n    Wire.begin();\n    u8g2.begin();\n    u8g2.setFont(u8g2_font_9x18_tr);\n\n    Serial.begin(115200);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n    Serial.print(\"Connecting to Wi-Fi \");\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        u8g2.clearBuffer();\n        u8g2.drawStr(0, 16, \"Connecting\");\n        u8g2.drawStr(0, 31, \"to Wi-Fi…\");\n        u8g2.sendBuffer();\n    }\n    timeClient.begin();\n}\n\nvoid loop()\n{\n    int hours, minutes, seconds;\n    String hh, mm, ss, dateString;\n    String OLED1, OLED2;\n    timeClient.update();\n\n    // Assemble home time (BNE, UTC + 10):\n  ❶ timeClient.setTimeOffset(`36000`);\n    hours = timeClient.getHours();\n    minutes = timeClient.getMinutes();\n    seconds = timeClient.getSeconds();\n\n    if (hours < 10) {hh = hh + \"0\";}\n    if (minutes < 10) {mm = mm + \"0\";}\n    if (seconds < 10) {ss = ss + \"0\";}\n    hh = hh + String(hours);\n    mm = mm + String(minutes);\n    ss = ss + String(seconds);\n  ❷ OLED1 = \"Home \" + hh + \":\" + mm + \":\" + ss;\n  ❸ hh = \" \"; mm = \" \"; ss = \" \";\n\n    // Assemble away time (SFO, UTC - 8):\n    timeClient.setTimeOffset(−`28800`);\n    hours = timeClient.getHours();\n    minutes = timeClient.getMinutes();\n    seconds = timeClient.getSeconds();\n\n    if (hours < 10) {hh = hh + \"0\";}\n    if (minutes < 10) {mm = mm + \"0\";}\n    if (seconds < 10) {ss = ss + \"0\";}\n    hh = hh + String(hours);\n    mm = mm + String(minutes);\n    ss = ss + String(seconds);\n ❹ OLED2 = \"SFO \" + hh + \":\" + mm + \":\" + ss;\n\n    // Show time and date on OLED:\n  ❺ u8g2.clearBuffer();\n    u8g2.drawStr(0, 16, OLED1.c_str());\n    u8g2.drawStr(0, 31, OLED2.c_str());\n    u8g2.sendBuffer();\n    delay(1000);\n} \n```", "```\n// Project #64 - Giant LED NTP Clock\n\n#include <NTPClient.h>\n#include <WiFi.h>\n#include <WiFiUdp.h>\n\n// Enter your Wi-Fi network SSID and password:\nconst char* ssid = \"`SSID`\";\nconst char* password = \"`Password`\";\nWiFiUDP ntpUDP;\n\n// ntpUDP, time server pool, offset in seconds, update interval (mS)\n// Starts with home offset (e.g. 36000 for UTC + 10)\nNTPClient timeClient(ntpUDP, \"`0.us.pool.ntp.org`\", `36000`, 60000);\n❶ #define LATCH 5  // Latch RCK pin\n#define CLOCK 18 // Clock SRCK pin\n#define DATA 23  // Data SERIN pin\n\nint digits[] = { B00111111,   // 0\n                 B00000110,   // 1\n                 B01011011,   // 2\n                 B01001111,   // 3\n                 B01100110,   // 4\n                 B01101101,   // 5\n                 B01111101,   // 6\n                 B00000111,   // 7\n                 B01111111,   // 8\n                 B01100111}; // 9\n\nvoid sendNumbers(int numbers[], int dp)\n{\n    digitalWrite(LATCH, LOW);\n    for (int i = 0; i < 4; i++)\n    {\n        int dig_idx = numbers[i];\n        if (dp == i)\n        {\n          // Display the digit:\n          shiftOut(DATA, CLOCK, MSBFIRST, digits[dig_idx] | B10000000);\n        } else\n        {\n          shiftOut(DATA, CLOCK, MSBFIRST, digits[dig_idx]);\n        }\n    }\n    digitalWrite(LATCH, HIGH);\n}\n\nvoid setup()\n{\n    pinMode(LATCH, OUTPUT);\n    pinMode(CLOCK, OUTPUT);\n    pinMode(DATA, OUTPUT);\n    Serial.begin(115200);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n    Serial.print(\"Connecting to Wi-Fi…\");\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        Serial.print(\".\");\n        delay(500);\n    }\n  ❷ timeClient.begin();\n}\n\nvoid loop()\n{\n    int numbers[4];\n    int hours, minutes;\n ❸ timeClient.update();\n\n    hours = timeClient.getHours();\n    minutes = timeClient.getMinutes();\n\n  ❹ numbers[3] = hours / 10;\n    numbers[2] = hours % 10;\n    numbers[1] = minutes / 10;\n    numbers[0] = minutes % 10;\n\n  ❺ sendNumbers(numbers, 2);\n    delay(1000);\n} \n```"]