- en: '**LEDS**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**LED**'
- en: '**1'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1'
- en: Blinking an LED**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**使 LED 闪烁**'
- en: In this first project, you’ll connect an LED to your Pi and make it blink with
    a python script. Learning how to blink an LED using the GPIO pins is an important
    step in your Pi education; once you know how to control an LED, you can control
    practically any output, whether it’s a motor, a lamp, or even a toaster.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个项目中，你将把一个 LED 连接到你的 Pi，并通过 Python 脚本让它闪烁。学习如何使用 GPIO 引脚使 LED 闪烁是你 Pi 教育中的重要一步；一旦你知道如何控制
    LED，就可以控制几乎任何输出，无论是电机、灯泡，甚至是烤面包机。
- en: '![image](../images/f0037-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0037-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需材料**'
- en: Raspberry Pi
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 5 mm LED
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 5 毫米 LED**
- en: 330 Ω resistor
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 330 Ω 电阻
- en: Jumper wires
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING THE GPIO PINS**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 GPIO 引脚**'
- en: The *General Purpose Input/Output (GPIO)* pins allow you to connect electronic
    hardware, like LEDs and sensors, to your Pi. They can be used to both read and
    send information, allowing your Pi to interact with the real world.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*通用输入/输出（GPIO）* 引脚允许你将电子硬件（如 LED 和传感器）连接到你的 Pi。它们既可以用来读取信息，也可以用来发送信息，使你的 Pi
    能与现实世界进行交互。'
- en: The Raspberry Pi 3 Model B board has a double row of 40 GPIO pins, shown in
    [Figure 1-1](ch01.xhtml#ch01fig1). This layout is the same for the Pi 2 Model
    B and Pi 1 Model B+, but slightly different from the Pi 1 Model A and B, which
    have only the first 26 pins. Check the [“Raspberry Pi GPIO Pin Guide”](app01.xhtml#app01)
    on [page 261](app01.xhtml#page_261) if you’re using a board other than the Raspberry
    Pi 3 Model B.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 3 Model B 板具有一排 40 个 GPIO 引脚，如[图 1-1](ch01.xhtml#ch01fig1)所示。此布局与
    Pi 2 Model B 和 Pi 1 Model B+ 相同，但与 Pi 1 Model A 和 B 略有不同，后者只有前 26 个引脚。如果你使用的不是
    Raspberry Pi 3 Model B，请查看[“树莓派 GPIO 引脚指南”](app01.xhtml#app01)中的[第 261 页](app01.xhtml#page_261)。
- en: '![image](../images/f0038-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0038-01.jpg)'
- en: '**FIGURE 1-1:** Raspberry Pi GPIO layout'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-1：** 树莓派 GPIO 布局'
- en: 'There are two ways to refer to a GPIO pin: its name (which is known as GPIO
    numbering or Broadcom numbering) or by its corresponding pin number (which is
    known as physical numbering). For example, GPIO 25 corresponds to pin 22\. Throughout
    this book, we''ll refer to GPIO pins by their names. GPIO pins can be set to HIGH,
    which outputs 3.3 V and turns a component on, or LOW, which outputs 0 V and turns
    the component off.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式来表示一个 GPIO 引脚：其名称（通常称为 GPIO 编号或 Broadcom 编号）或它对应的引脚编号（通常称为物理编号）。例如，GPIO
    25 对应引脚 22。在本书中，我们将使用 GPIO 引脚的名称进行引用。GPIO 引脚可以设置为 HIGH，输出 3.3 V 并打开组件，或者设置为 LOW，输出
    0 V 并关闭组件。
- en: '| **FUNCTION** | **NAME** | **NUMBER** | **NUMBER** | **NAME** | **FUNCTION**
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **名称** | **编号** | **编号** | **名称** | **功能** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| DC power | 3.3 V | 1 | 2 | 5 V | DC power |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| DC 电源 | 3.3 V | 1 | 2 | 5 V | DC 电源 |'
- en: '| SDA1, I²C | GPIO 2 | 3 | 4 | 5 V | DC power |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| SDA1, I²C | GPIO 2 | 3 | 4 | 5 V | DC 电源 |'
- en: '| SCL1, I²C | GPIO 3 | 5 | 6 | GND |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| SCL1, I²C | GPIO 3 | 5 | 6 | GND |  |'
- en: '| GPIO_GCLK | GPIO 4 | 7 | 8 | GPIO 14 | TXD0 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GCLK | GPIO 4 | 7 | 8 | GPIO 14 | TXD0 |'
- en: '|  | GND | 9 | 10 | GPIO 15 | RXD0 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|  | GND | 9 | 10 | GPIO 15 | RXD0 |'
- en: '| GPIO_GEN0 | GPIO 17 | 11 | 12 | GPIO 18 | GPIO_GEN1 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GEN0 | GPIO 17 | 11 | 12 | GPIO 18 | GPIO_GEN1 |'
- en: '| GPIO_GEN2 | GPIO 27 | 13 | 14 | GND |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GEN2 | GPIO 27 | 13 | 14 | GND |  |'
- en: '| GPIO_GEN3 | GPIO 22 | 15 | 16 | GPIO 23 | GPIO_GEN4 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GEN3 | GPIO 22 | 15 | 16 | GPIO 23 | GPIO_GEN4 |'
- en: '| **FUNCTION** | **NAME** | **NUMBER** | **NUMBER** | **NAME** | **FUNCTION**
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **名称** | **编号** | **编号** | **名称** | **功能** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| DC power | 3.3 V | 17 | 18 | GPIO 24 | GPIO_GEN5 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| DC 电源 | 3.3 V | 17 | 18 | GPIO 24 | GPIO_GEN5 |'
- en: '| SPI_MOSI | GPIO 10 | 19 | 20 | GND |  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| SPI_MOSI | GPIO 10 | 19 | 20 | GND |  |'
- en: '| SPI_MISO | GPIO 9 | 21 | 22 | GPIO 25 | GPIO_GEN6 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| SPI_MISO | GPIO 9 | 21 | 22 | GPIO 25 | GPIO_GEN6 |'
- en: '| SPI_CLK | GPIO 11 | 23 | 24 | GPIO 8 | SPI_CE0_N |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| SPI_CLK | GPIO 11 | 23 | 24 | GPIO 8 | SPI_CE0_N |'
- en: '|  | GND | 25 | 26 | GPIO 7 | SPI_CE1_N |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|  | GND | 25 | 26 | GPIO 7 | SPI_CE1_N |'
- en: '| I²C ID EEPROM | DNC | 27 | 28 | DNC | I²C ID EEPROM |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| I²C ID EEPROM | DNC | 27 | 28 | DNC | I²C ID EEPROM |'
- en: '|  | GPIO 5 | 29 | 30 | GND |  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 5 | 29 | 30 | GND |  |'
- en: '|  | GPIO 6 | 31 | 32 | GPIO 12 |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 6 | 31 | 32 | GPIO 12 |  |'
- en: '|  | GPIO 13 | 33 | 34 | GND |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 13 | 33 | 34 | GND |  |'
- en: '|  | GPIO 19 | 35 | 36 | GPIO 16 |  |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 19 | 35 | 36 | GPIO 16 |  |'
- en: '|  | GPIO 26 | 37 | 38 | GPIO 20 |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 26 | 37 | 38 | GPIO 20 |  |'
- en: '|  | GND | 39 | 40 | GPIO 21 |  |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|  | GND | 39 | 40 | GPIO 21 |  |'
- en: '**WARNING**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*The GPIO pins are designed to work at 3.3 V, so if you connect them to higher
    voltages, you’ll permanently damage your Raspberry Pi.*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*GPIO 引脚设计为 3.3 V 工作，因此如果你将它们连接到更高电压的设备上，可能会永久损坏你的 Raspberry Pi。*'
- en: The pins highlighted in gray, pins 27 and 28, are DNC, or “do not connect,”
    pins. The Raspberry Pi also has eight GND (ground) pins—highlighted in black in
    the table—for connecting ground to your circuits. There are four power pins, two
    5 V pins and two 3.3 V—highlighted in red and orange, respectively—to supply power.
    Several pins have special features; for example, the pins highlighted in yellow
    are used in serial peripheral interface (SPI) communication, and the ones highlighted
    in green are used for inter-integrated circuit (I²C) communication. You’ll learn
    about these communication protocols in [Project 3](ch03.xhtml#ch03) and [Project
    7](ch07.xhtml#ch07), respectively.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表格中灰色高亮的引脚27和28是DNC，即“不连接”引脚。树莓派还具有八个GND（地）引脚—表格中以黑色高亮显示—用于将地连接到电路。还有四个电源引脚，其中两个是5V引脚，两个是3.3V引脚，分别以红色和橙色高亮显示，用于提供电力。几个引脚具有特殊功能；例如，黄色高亮的引脚用于串行外设接口（SPI）通信，绿色高亮的引脚用于集成电路间（I²C）通信。你将在[项目3](ch03.xhtml#ch03)和[项目7](ch07.xhtml#ch07)中了解这些通信协议。
- en: '**INTRODUCING LEDs**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍LED**'
- en: LEDs come in a wide variety of sizes, shapes, and colors, and some can even
    mix colors to produce almost any color. In this project you’ll use a simple 5
    mm red LED.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: LED有各种尺寸、形状和颜色，有些甚至可以混合颜色以产生几乎任何颜色。在这个项目中，你将使用一个简单的5毫米红色LED。
- en: An *LED*, or *light-emitting diode*, is—as its name suggests—a diode that emits
    light. Diodes are electronic components that have *polarity*, meaning they allow
    current to flow in only one direction, from positive to negative. LEDs, like all
    diodes, have a positive connection known as an *anode*, and a negative connection
    known as a *cathode*. The two legs, or *leads*, on LEDs are different lengths
    to help you identify which is positive and which is negative, illustrated in [Figure
    1-2](ch01.xhtml#ch01fig2). The longer lead is the anode (+) and the shorter lead
    is the cathode (–).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*LED*，即*发光二极管*，顾名思义，是一种发光的二极管。二极管是具有*极性*的电子元件，意味着它们只允许电流单向流动，从正极流向负极。LED与所有二极管一样，有一个正连接称为*阳极*，和一个负连接称为*阴极*。LED的两个引脚，或*引线*，长度不同，帮助你区分哪个是正极，哪个是负极，如[图1-2](ch01.xhtml#ch01fig2)所示。较长的引线是阳极（+），较短的引线是阴极（–）。'
- en: '![image](../images/f0040-01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0040-01.jpg)'
- en: '**FIGURE 1-2:** A 5 mm red LED'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-2：** 5毫米红色LED'
- en: FINDING THE RIGHT RESISTOR
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 找到合适的电阻器
- en: 'LEDs can handle only so much current before they overload and burn out, which
    can potentially damage the LED and even the Pi board. To prevent this, you must
    always connect LEDs in series with a *resistor*: a small component that limits
    the amount of current passing through it.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: LED只能承受一定的电流，超过电流限制会导致LED过载并烧毁，这可能会损坏LED甚至Pi板。为防止这种情况发生，你必须始终将LED与*电阻器*串联连接：一个限制通过电流的小元件。
- en: Resistors come in all sorts of values, and you need one that’s strong enough
    to protect your component without being so strong that it limits the component’s
    capabilities. For example, a stronger resistor can dull the light an LED gives
    off. The appropriate resistance value depends on the LED you’re using—most LEDs
    you’ll use in electronics can handle a maximum current rating of 20 mA. For the
    LED in this project, picking up a resistor of any value between 220 Ω and 470
    Ω is fine, and within this range, a lower resistance value will result in a slightly
    brighter LED.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻器有各种不同的阻值，你需要选择一个足够强大的电阻器来保护你的组件，同时又不会强到限制组件的性能。例如，较强的电阻器可能会使LED发出的光变暗。合适的电阻值取决于你使用的LED——你在电子项目中使用的大多数LED可以承受最大20
    mA的电流。对于本项目中的LED，选择一个220 Ω到470 Ω之间的电阻器都可以，在这个范围内，较低的电阻值会导致LED稍微更亮一些。
- en: '**NOTE**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We recommend that you purchase a 1/4 W resistor assortment that spans a wide
    range of resistance values. These will meet most of your needs.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们建议你购买一个1/4 W的电阻器组合，涵盖广泛的电阻值范围。这些可以满足你大多数的需求。*'
- en: The resistance value is indicated by the color bands on the resistor. Resistors
    usually have four bands, as shown in [Figure 1-3](ch01.xhtml#ch01fig3). The first
    two represent the first two digits of the value. The third is a multiplier representing
    the number of zeros after the first two digits. The fourth is the *tolerance*
    of the resistance, which notes the percentage that the actual resistance might
    be above or below the given value. For example, a 330 Ω resistor with a 5 percent
    tolerance might be any value between 313.5 Ω and 346.5 Ω.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻值由电阻上的色环表示。电阻通常有四个色环，如[图1-3](ch01.xhtml#ch01fig3)所示。前两个代表值的前两个数字。第三个是乘数，表示前两个数字后面的零的个数。第四个是电阻的*公差*，标明实际电阻值可能偏高或偏低的百分比。例如，一个330Ω的电阻，公差为5％，其值可能在313.5Ω和346.5Ω之间。
- en: '![image](../images/f0040-02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0040-02.jpg)'
- en: '**FIGURE 1-3:** A 330 Ω resistor'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-3：** 330Ω电阻'
- en: If you need help identifying a resistor, check the resistor color card in [“Decoding
    Resistor Values”](app02.xhtml#app02) on [page 264](app02.xhtml#page_264).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要帮助识别电阻，请查看[“解码电阻值”](app02.xhtml#app02)中的电阻色环卡，在[第264页](app02.xhtml#page_264)上。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路接线**'
- en: Now you’re ready to build your first circuit. All the projects in this book
    use a *solderless breadboard*, which gives you an inexpensive and easy way to
    build circuits without having to connect the components using solder. If you’ve
    never used a breadboard before, make sure to read [“How Does a Breadboard Work?”](ch01.xhtml#ch01box1)
    on [page 42](ch01.xhtml#page_42) before beginning.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备好构建第一个电路了。本书中的所有项目都使用*无焊接面包板*，它为你提供了一种便宜且简便的方法来构建电路，而无需使用焊接连接组件。如果你以前从未使用过面包板，确保在开始之前阅读[“面包板是如何工作的？”](ch01.xhtml#ch01box1)，该章节位于[第42页](ch01.xhtml#page_42)。
- en: To wire an LED to the Raspberry Pi, follow these next steps. Use the wiring
    diagram in [Figure 1-4](ch01.xhtml#ch01fig4) as a reference, and review [Figure
    1-1](ch01.xhtml#ch01fig1) for pin locations if you need to.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要将LED连接到树莓派，请按照以下步骤操作。参考[图1-4](ch01.xhtml#ch01fig4)中的接线图，并在需要时查看[图1-1](ch01.xhtml#ch01fig1)以确认引脚位置。
- en: Connect a blue breadboard rail to one of the Raspberry Pi GND pins (pins 6,
    9, 14, 20, 25, 30, 34, and 39 all provide GND).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将蓝色面包板轨道连接到树莓派的任意一个GND引脚（6、9、14、20、25、30、34和39号引脚都提供GND）。
- en: Insert the LED into the breadboard.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED插入面包板。
- en: Insert the 330 Ω resistor into the breadboard so that one side is connected
    to the LED anode (the longer, positive lead).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将330Ω电阻插入面包板，使一端连接到LED的阳极（较长的正极引脚）。
- en: Connect the other side of the resistor to GPIO 25 (pin 22) with a jumper wire.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将电阻的另一端连接到GPIO 25（第22号引脚）。
- en: Connect the LED cathode (the shorter, negative lead) to the GND power rail.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED的阴极（较短的负极引脚）连接到GND电源轨。
- en: '![image](../images/f0041-01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0041-01.jpg)'
- en: '**LISTING 1-1:** Wiring an LED to the Raspberry Pi. The LED lead with a bend
    in it is the anode.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单1-1：** 将LED接到树莓派上。带弯曲的LED引脚是阳极。'
- en: We’ve given you instructions on where to place the resistor, but really it doesn’t
    matter whether it’s connected to the anode or cathode as long as it is connected
    to one. You might wonder why we didn’t just connect the LED cathode directly to
    pin 6 (GND), since we only need the GND rail for that one connection. The reason
    is that it’s good practice to use the breadboard GND rails, which will become
    more useful in more advanced circuits.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经告诉你将电阻放置的位置，但其实电阻连接到阳极还是阴极并不重要，只要它连接到其中一个就行。你可能会想，既然我们只需要GND轨道来连接那一个点，为什么不直接将LED的阴极连接到6号引脚（GND）呢？原因是，使用面包板上的GND轨道是一种良好的做法，尤其在更复杂的电路中，它会变得更加有用。
- en: '**HOW DOES A BREADBOARD WORK?**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板是如何工作的？**'
- en: Wiring a circuit using a breadboard is as easy as plugging and unplugging components.
    A breadboard has rows of holes that connect with copper strips underneath, so
    you just need to insert the components into those holes and then use jumper wires
    to connect them. The breadboard holes are connected to each other in a specific
    way, shown here by the orange lines.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面包板接线就像插拔组件一样简单。面包板上有排孔，通过下面的铜条连接在一起，所以你只需要将组件插入这些孔，然后用跳线将它们连接起来。面包板的孔是以特定方式连接的，这里通过橙色线条展示了这一点。
- en: '![image](../images/f0042-01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0042-01.jpg)'
- en: 'Each individual line is electrically isolated from the others. The horizontal
    lines are the *power rails*, used to connect the power supply: the blue rails
    are used to connect GND and the red rails to connect power. In the middle of the
    breadboard is a divide that splits the rows on either side. You should place your
    components in these rows. Components in the same row, on the same side of the
    center divide, will be connected by the copper strips beneath.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单独的行都是电气隔离的。水平线是*电源轨*，用于连接电源：蓝色轨道用于连接GND，红色轨道用于连接电源。在面包板的中间有一个分隔，分开两边的行。您应将组件放置在这些行中。位于同一行且位于中心分隔两侧的组件将通过下面的铜条连接。
- en: '**WRITING THE SCRIPT**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: To keep all your projects organized, create a folder called *Projects* in your
    desktop environment to save all your projects’ scripts. Inside the newly created
    folder, create a new folder called *LEDs* where you’ll save the LED projects in
    this book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持所有项目的组织性，在桌面环境中创建一个名为*Projects*的文件夹，用于保存所有项目的脚本。在新创建的文件夹内，创建一个名为*LEDs*的新文件夹，您将在其中保存本书中的LED项目。
- en: 'In simple terms, the blinking LED project works as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，闪烁LED项目的工作原理如下：
- en: The LED turns on for 1 second—GPIO 25 set to HIGH.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED亮起1秒钟——GPIO 25设置为HIGH。
- en: The LED turns off for 1 second—GPIO 25 set to LOW.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED关闭1秒钟——GPIO 25设置为LOW。
- en: The LED is on again for 1 second—GPIO 25 set to HIGH.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED再次亮起1秒钟——GPIO 25设置为HIGH。
- en: The LED is off again for 1 second—GPIO 25 set to LOW.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED再次关闭1秒钟——GPIO 25设置为LOW。
- en: This pattern continues until you tell the program to stop.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式会持续进行，直到您告诉程序停止。
- en: Throughout this book, we’ll control the Raspberry Pi GPIOs using a Python library
    called gpiozero. The gpiozero library provides a collection of interfaces for
    everyday components like LEDs, buttons, potentiometers, sensors, and much more.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用一个名为gpiozero的Python库来控制树莓派的GPIO。gpiozero库提供了一系列接口，用于操作日常组件，如LED、按钮、电位器、传感器等。
- en: '**Entering the Script**'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code to the Python Editor and save the script as *blinking_led.py*
    inside the *LEDs* folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**并进入**File** ▸ **New File**以创建一个新脚本。将以下代码复制到Python编辑器中，并将脚本保存在*LEDs*文件夹中的*blinking_led.py*文件中（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE0]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There’s quite a lot going on here, so we’ll go through each major code section
    one at a time.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容，所以我们将逐一讲解每个主要的代码部分。
- en: '**Importing Libraries**'
  id: totrans-86
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导入库**'
- en: At ➊ you import `LED` from the gpiozero library to control the GPIO that the
    LED is connected to. Then you import the `sleep()` function from the `time` module
    ➋.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，您从gpiozero库导入`LED`以控制LED连接的GPIO。然后，您导入`time`模块中的`sleep()`函数➋。
- en: '**Declaring the Pin**'
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**声明引脚**'
- en: At ➌ you create an `LED` object called `led` that refers to GPIO 25, which is
    the GPIO the LED is connected to. When you create and use this `LED` object, Python
    knows GPIO 25 is an output and thus should be set to HIGH or LOW. After this declaration,
    you can use `led` to refer to your GPIO 25.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在➌处，您创建了一个名为`led`的`LED`对象，该对象指向GPIO 25，这是LED连接的GPIO。当您创建并使用这个`LED`对象时，Python会知道GPIO
    25是一个输出，因此应设置为HIGH或LOW。声明后，您可以使用`led`来引用GPIO 25。
- en: '**Starting the while Loop**'
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**启动while循环**'
- en: At ➎ you start a `while` loop with the condition `True`, which means this loop
    will run forever until you stop the program yourself. The lines of code that follow
    the loop declaration are indented, telling Python that this is the content of
    the loop to be run as long as the `while` condition is met.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在➎处，您开始了一个条件为`True`的`while`循环，这意味着该循环将永远运行，直到您手动停止程序。紧随循环声明之后的代码行被缩进，告诉Python这是循环中的内容，只有在`while`条件满足时才会执行。
- en: '**Setting the Digital Output**'
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置数字输出**'
- en: Next you need to set the digital output for the LED. You use the `led.on()`
    function ➏ to set GPIO 25 to HIGH, turning the LED on, and the `led.off()` function
    ➑ to set GPIO 25 to LOW, turning the LED off. There is a pause of 1 second between
    each LED state using the `sleep()` function ➐, which creates the blinking effect.
    The code stops where it is and waits for the amount of time specified in the `delay`
    variable (given in seconds) ➍ before proceeding to the next line of code. This
    allows you to keep the LED on or off for a given period of time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要设置 LED 的数字输出。你使用 `led.on()` 函数 ➏ 将 GPIO 25 设置为高电平，从而点亮 LED；使用 `led.off()`
    函数 ➑ 将 GPIO 25 设置为低电平，熄灭 LED。每次 LED 状态变化之间都有 1 秒的暂停，使用 `sleep()` 函数 ➐ 创建闪烁效果。代码会在当前位置暂停，并等待
    `delay` 变量中指定的时间（以秒为单位） ➍ 后再继续执行下一行代码。这允许你保持 LED 在指定时间内开启或关闭。
- en: '**Running the Script**'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: To run the script, first save it and then press **F5** or go to **Run** ▸ **Run
    Module**. Your circuit should look something like Figure 1-5, with your LED turning
    on and off every second. To stop the running program, press CTRL-C.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本，首先保存它，然后按 **F5** 或前往 **运行** ▸ **运行模块**。你的电路应该类似于图 1-5，LED 每秒钟开关一次。要停止正在运行的程序，请按
    CTRL-C。
- en: '![image](../images/f0044-01.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0044-01.jpg)'
- en: '**FIGURE 1-4:** The completed project'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-4：** 完成的项目'
- en: Congratulations—you’ve just built your first working project!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你——你刚刚完成了第一个工作项目！
- en: '**TAKING IT FURTHER**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更进一步**'
- en: 'The best way to learn electronics and programming is by experimenting. Here
    are two simple ideas for modifications you could try:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 学习电子和编程的最佳方式就是通过实验。这里有两个你可以尝试的简单修改想法：
- en: Change the delay time in the script.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改脚本中的延迟时间。
- en: Modify the circuit and script to control more than one LED.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改电路和脚本以控制多个 LED。
- en: See if you can use what you learned in this project to figure out each task.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你能否利用在这个项目中学到的知识来完成每个任务。
- en: '**2'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: Pushbutton LED Flashlight**
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮 LED 手电筒**
- en: This LED flashlight will teach you to use pushbuttons, an essential skill in
    electronic circuits. You’ll learn how to use a pushbutton in your circuit to trigger
    an event—in this case, lighting an LED—when the pushbutton is pressed and stop
    the event when it’s released.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 LED 手电筒将教你如何使用按钮，这是电子电路中的一项基本技能。你将学习如何在电路中使用按钮来触发一个事件——在这个例子中，是点亮一个 LED——当按钮按下时触发事件，当按钮释放时停止事件。
- en: '![image](../images/f0047-01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0047-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 5 mm LED
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 5 毫米 LED
- en: 330 Ω resistor
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 330 Ω 电阻
- en: Jumper wires
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING SWITCHES AND BUTTONS**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍开关和按钮**'
- en: Switches are everywhere. You use them to turn on lights, adjust the speed of
    your blender, light your stove, and so much more. There’s a wide variety of switches
    available, but some of the ones you’ll see around the house include pushbutton,
    toggle, rotary, and magnetic reed switches. [Figure 2-1](ch02.xhtml#ch02fig1)
    shows a few different switches commonly used in electronics.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 开关无处不在。你用它们来打开灯、调节搅拌机的速度、点燃炉子，还有更多。市面上有各种各样的开关，但你在家里可能会看到的有按钮开关、翻转开关、旋转开关和磁性簧片开关。[图
    2-1](ch02.xhtml#ch02fig1)展示了几种常见的电子开关。
- en: '![image](../images/f0048-01.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0048-01.jpg)'
- en: '**FIGURE 2-1:** Several types of switches used in electronics'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-1：** 电子设备中使用的几种开关'
- en: A switch can act either as an *interrupter*, interrupting the electric current
    to allow or restrict power to a certain component, or as a *diverter*, diverting
    the current to another part of the circuit. This project will use a simple pushbutton—an
    interrupter switch that is great for electronics because it is cheap, fits perfectly
    into a breadboard, and is easy to manipulate.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 开关可以充当 *中断器*，中断电流以允许或限制电力流向某个组件，或者充当 *分流器*，将电流引导到电路的其他部分。这个项目将使用一个简单的按钮——一个中断器开关，它在电子设备中非常受欢迎，因为它便宜、完美适配面包板，并且易于操作。
- en: 'There are two main types of pushbuttons: normally open and normally closed.
    *Normally open* pushbuttons, shown in [Figure 2-2](ch02.xhtml#ch02fig2), have
    a circuit that’s open by default, preventing the current from flowing through
    it. When you press the pushbutton, the two sides are connected, the circuit closes,
    and current flows.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮有两种主要类型：常开型和常闭型。*常开型* 按钮，如[图 2-2](ch02.xhtml#ch02fig2)所示，默认电路是开路的，防止电流通过它。当你按下按钮时，两个触点连接，电路闭合，电流开始流动。
- en: '![image](../images/f0049-01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0049-01.jpg)'
- en: '**FIGURE 2-2:** A normally open pushbutton’s internal connection'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-2：** 常开按钮的内部连接'
- en: '*Normally closed* pushbuttons have a closed circuit when the button is not
    being pressed, allowing current to flow through until you press the pushbutton
    to open the circuit and stop its flow.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*常闭*按钮在按钮未被按下时回路是闭合的，允许电流通过，直到你按下按钮打开电路并停止电流流动。'
- en: Pushbuttons can have either two or four legs. Four-leg pushbuttons are more
    common in prototyping projects because they fit well into the breadboard. The
    right side of [Figure 2-2](ch02.xhtml#ch02fig2) shows a diagram of a typical normally
    open, four-leg pushbutton. Legs 1 and 2 are always connected. The same is true
    for legs 3 and 4.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮可以有两脚或四脚。四脚按钮在原型项目中更为常见，因为它们能很好地适配面包板。[图2-2](ch02.xhtml#ch02fig2)的右侧展示了一个典型的常开四脚按钮的示意图。脚1和脚2总是连接的，脚3和脚4也是如此。
- en: In this project you’ll use a normally open pushbutton with four legs. This pushbutton
    allows current to flow only *while* the button is being pressed, so unlike a light
    switch, the LED in this project will be lit only for the duration that the button
    is held down.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用一个常开四脚按钮。这个按钮只在按下时允许电流通过，因此与普通的开关不同，项目中的LED只有在按钮被按下时才会亮起。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**连接电路**'
- en: In this project, you want the LED to turn on only when the button is being pressed,
    so your Raspberry Pi needs to be able to tell when the button is being pressed
    and when it isn’t. Your Raspberry Pi will get this information through the GPIO
    pins.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，只有在按下按钮时，LED才会亮起，因此你的Raspberry Pi需要能够判断按钮是被按下还是未被按下。你的Raspberry Pi将通过GPIO引脚获取这些信息。
- en: 'Follow these steps to create your circuit, using [Figure 2-3](ch02.xhtml#ch02fig3)
    as a reference:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤连接电路，使用[图2-3](ch02.xhtml#ch02fig3)作为参考：
- en: Connect GND to the blue power rail.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GND连接到蓝色电源轨。
- en: Insert an LED into the breadboard and connect the positive LED lead to GPIO
    25 through a 330 Ω resistor, as we did in [Project 1](ch01.xhtml#ch01). Connect
    the negative lead to the GND rail.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个LED插入面包板，并通过一个330 Ω的电阻将LED的正极连接到GPIO 25，像在[项目1](ch01.xhtml#ch01)中那样。将LED的负极连接到GND轨道。
- en: Insert the pushbutton in the middle of the breadboard so that two legs are on
    either side of the divide. You want to make sure there isn’t a connection between
    the two top pins and the two bottom pins. (Remember that the connection in the
    rows of holes is broken in this center strip.)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮插入面包板的中间，使得两个脚位位于中间的分隔两侧。确保顶部两个脚与底部两个脚之间没有连接。（记住，面包板中间的这一条孔排是断开的。）
- en: Connect one side of the pushbutton to GPIO 2 and the other to GND, as shown
    in [Figure 2-3](ch02.xhtml#ch02fig3).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的一侧连接到GPIO 2，另一侧连接到GND，如[图2-3](ch02.xhtml#ch02fig3)所示。
- en: '![image](../images/f0050-01.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0050-01.jpg)'
- en: '**FIGURE 2-3:** The LED flashlight circuit'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-3：** LED手电筒电路'
- en: '**WRITING THE SCRIPT**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'This script will trigger different events depending on whether the pushbutton
    is being pressed or released. The following *pseudoscript*—a plain English version
    of the code instructions—should help you understand the Python script. Writing
    a pseudoscript is a great way to outline your program. Here’s what the program
    should do:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本会根据按下或释放按钮的状态触发不同的事件。以下的*pseudoscript*——一个以简单英语描述的代码指令版本——可以帮助你理解Python脚本。编写pseudoscript是概述程序的一种好方法。程序应该做的事情如下：
- en: When the pushbutton is being pressed, the LED is set to on.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按钮被按下时，LED设置为亮起。
- en: When the pushbutton is not being pressed (that is, when it’s released), the
    LED stays off.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按钮没有被按下（即被释放时），LED保持关闭。
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code into the Python Editor and then save the script
    as *led_flashlight.py* in the *LEDs* folder (remember that you can download all
    the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，并点击**文件** ▸ **新建文件**，创建一个新的脚本。将以下代码复制到Python编辑器中，然后将脚本保存为*led_flashlight.py*到*LEDs*文件夹中（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE1]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script is straightforward to understand. You first import the LED and the
    Button libraries to control the LED and the pushbutton; then, you import `pause`
    from the signal library ➊. The `pause()` ➎ function keeps the program running
    even after all the code has run through to detect events—in this case, it’s continuously
    checking the pushbutton state.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本很容易理解。你首先导入 LED 和 Button 库来控制 LED 和按钮；然后，从 signal 库导入`pause` ➊。`pause()`
    ➎函数让程序在所有代码执行完后仍然保持运行状态，以检测事件——在这种情况下，它会持续检查按钮的状态。
- en: You create an `LED` object called `led` that refers to GPIO 25, the pin the
    LED is connected to, and a `Button` object called `button` that refers to GPIO
    2, the pin the pushbutton is connected to ➋.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个叫做`led`的`LED`对象，它指向 GPIO 25，这是 LED 连接的引脚；同时，创建了一个叫做`button`的`Button`对象，它指向
    GPIO 2，这是按钮连接的引脚 ➋。
- en: The `button.when_pressed` function turns the LED on when the pushbutton is being
    pressed by calling `led.on` when a pushbutton press is detected ➌. Likewise, the
    `button.when_released` function calls `led.off` to turn the LED off when the pushbutton
    is not being pressed ➍.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`button.when_pressed`函数在按下按钮时调用`led.on`，打开 LED ➌。同样，`button.when_released`函数在按钮释放时调用`led.off`，关闭
    LED ➍。'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. The LED should
    be on while the pushbutton is pressed down. To stop the program, press CTRL-C.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**F5**或前往**运行** ▸ **运行模块**来运行脚本。当按下按钮时，LED 应该亮起。要停止程序，按下 CTRL-C。
- en: '**TAKING IT FURTHER**'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探讨**'
- en: 'With what you’ve learned in this simple project, you can create countless other
    projects. Here are some ideas to test your skills:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在这个简单项目中学到的内容，你可以创建无数其他项目。以下是一些可以测试你技能的想法：
- en: Add more pushbuttons and LEDs.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更多的按钮和 LED。
- en: Modify the code to change the LED state when you press the pushbutton so that
    you don’t have to hold the button to keep the LED lit.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改代码，使得按下按钮时改变 LED 状态，这样你就不必按住按钮来保持 LED 闪烁。
- en: Build a traffic light.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个红绿灯。
- en: '**3'
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: LED Dimmer Switch**
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: LED 调光开关**
- en: In this project, you’ll build a light dimmer by controlling the brightness of
    an LED using a potentiometer. The power in this project lies in your ability to
    read analog inputs with the Raspberry Pi and output pulse-width modulation signals.
    These will be incredibly useful skills in future projects and in your Pi learning.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将通过控制电位器来调节 LED 的亮度，从而构建一个调光器。这个项目的关键在于你能利用树莓派读取模拟输入并输出脉冲宽度调制信号。这些将在未来的项目和树莓派学习中成为非常有用的技能。
- en: '![image](../images/f0053-01.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0053-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 10 kΩ potent iometer
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 10 kΩ 电位器
- en: MCP 3008 chip
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: MCP 3008 芯片
- en: 5 mm LED
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 5 毫米 LED
- en: 330 Ω resistor
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 330 Ω 电阻
- en: Jumper wires
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING POTENTIOMETERS**'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍电位器**'
- en: Potentiometers are like power dials and are used in a wide variety of applications
    in your daily life, such as controlling the volume of the radio, adjusting the
    brightness of a display, setting the speed on a fan, and much more. The potentiometer
    you’ll use in this project is shown in [Figure 3-1](ch03.xhtml#ch03fig1).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器就像是电源调节旋钮，广泛应用于你日常生活中的各种场景，如控制收音机音量、调整显示器亮度、设定风扇转速等等。你在这个项目中使用的电位器如[图 3-1](ch03.xhtml#ch03fig1)所示。
- en: '![image](../images/f0054-01.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0054-01.jpg)'
- en: '**FIGURE 3-1:** A 10 kΩ potentiometer'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-1：** 一个 10 kΩ 电位器'
- en: A potentiometer, also referred to as *pot*, is a manually adjustable variable
    resistor. This means that you can change the amount of resistance it applies to
    a circuit by rotating the knob, changing the amount of current reaching a particular
    component.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器，也称为*电位调节器*，是一种手动可调的可变电阻器。这意味着你可以通过旋转旋钮来改变它对电路施加的电阻，从而改变到达特定元件的电流量。
- en: A potentiometer has three pins, as shown in [Figure 3-2](ch03.xhtml#ch03fig2).
    The two outer pins, shown in blue and red, are connected to a resistive element,
    while the third, shown in black, is connected to a conductive adjustable *wiper*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器有三个引脚，如[图 3-2](ch03.xhtml#ch03fig2)所示。两个外部引脚，分别用蓝色和红色标出，连接到一个电阻元件；而第三个引脚，黑色标出，连接到一个可调的导电*滑臂*。
- en: '![image](../images/f0054-02.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0054-02.jpg)'
- en: '**FIGURE 3-2:** How a potentiometer works'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-2：** 电位器的工作原理'
- en: The position of the wiper determines how much resistance is in the circuit.
    In this project, you’ll control the resistance in the circuit to make the LED
    brighter or dimmer.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 摇臂的位置决定了电路中的电阻大小。在这个项目中，你将通过控制电路中的电阻来调节 LED 的亮度。
- en: '**READING ANALOG SIGNALS WITH RASPBERRY PI**'
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用树莓派读取模拟信号**'
- en: The Raspberry Pi GPIOs can read only digital signals, which means they can read
    either HIGH (3.3 V ) or LOW (0 V ) but nothing in between. However, the potentiometer
    is an analog input, and rotating the knob changes its output voltage from 0 V
    up to 3.3 V. You want the Pi to be able to read all the values in between—like
    1 V, 1.4 V, 1.8 V, and so on—so you have gradations of light, not just on and
    off. For this, you need to convert the analog signal to digital with an analog-to-digital
    converter chip, and then create imitation analog signals using pulse-width modulation.
    Let’s go over these two topics before you begin your build.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派的 GPIO 只能读取数字信号，这意味着它们只能读取 HIGH（3.3 V）或 LOW（0 V）的状态，但无法读取两者之间的信号。然而，电位计是模拟输入，旋转旋钮会改变其输出电压，从
    0 V 到 3.3 V。你希望树莓派能够读取这些中间值——如 1 V、1.4 V、1.8 V 等——这样就能实现亮度的渐变，而不仅仅是开与关的切换。为此，你需要通过模拟到数字转换器芯片将模拟信号转换为数字信号，然后利用脉冲宽度调制产生模拟信号的仿真效果。在开始构建之前，让我们先了解这两个主题。
- en: '**Analog-to-Digital Converters**'
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**模拟到数字转换器**'
- en: The analog-to-digital converter (ADC) chip (MCP3008), shown in [Figure 3-3](ch03.xhtml#ch03fig3),
    converts the potentiometer analog signals to digital signals.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 3-3](ch03.xhtml#ch03fig3)所示，模拟到数字转换器（ADC）芯片（MCP3008）将电位计的模拟信号转换为数字信号。
- en: '![image](../images/f0055-01.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0055-01.jpg)'
- en: '**FIGURE 3-3:** MCP3008 chip analog-to-digital converter'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-3：** MCP3008 芯片模拟到数字转换器'
- en: This chip has 16 pins, 8 of which are analog inputs you can connect to analog
    devices. The other 8 connect to the Raspberry Pi GPIOs. The chip pinout is shown
    in [Figure 3-4](ch03.xhtml#ch03fig4). To identify each pin, orient the chip with
    the half-circle at the top as shown in the figure.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 该芯片有 16 个引脚，其中 8 个是模拟输入，你可以将其连接到模拟设备。其他 8 个引脚连接到树莓派的 GPIO。芯片引脚布局如[图 3-4](ch03.xhtml#ch03fig4)所示。要识别每个引脚，请将芯片按图示方向放置，顶部有一个半圆形标记。
- en: '![image](../images/f0055-02.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0055-02.jpg)'
- en: '**FIGURE 3-4:** MCP3008 chip'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-4：** MCP3008 芯片'
- en: The following table gives the function for each pin.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了每个引脚的功能。
- en: '| **PIN** | **SYMBOL** | **DESCRIPTION** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **引脚** | **符号** | **描述** |'
- en: '| --- | --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | CH0 | Analog input (channel 0) |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 1 | CH0 | 模拟输入（通道 0） |'
- en: '| 2 | CH1 | Analog input (channel 1) |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 2 | CH1 | 模拟输入（通道 1） |'
- en: '| 3 | CH2 | Analog input (channel 2) |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 3 | CH2 | 模拟输入（通道 2） |'
- en: '| 4 | CH3 | Analog input (channel 3) |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 4 | CH3 | 模拟输入（通道 3） |'
- en: '| 5 | CH4 | Analog input (channel 4) |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 5 | CH4 | 模拟输入（通道 4） |'
- en: '| 6 | CH5 | Analog input (channel 5) |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 6 | CH5 | 模拟输入（通道 5） |'
- en: '| 7 | CH6 | Analog input (channel 6) |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 7 | CH6 | 模拟输入（通道 6） |'
- en: '| 8 | CH7 | Analog input (channel 7) |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 8 | CH7 | 模拟输入（通道 7） |'
- en: '| 9 | DGND | Digital ground |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 9 | DGND | 数字地 |'
- en: '| 10 | CS/SHDN | Chip select/shutdown input |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 10 | CS/SHDN | 芯片选择/关机输入 |'
- en: '| 11 | D[IN] | Serial data in |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 11 | D[IN] | 串行数据输入 |'
- en: '| 12 | D[OUT] | Serial data out |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 12 | D[OUT] | 串行数据输出 |'
- en: '| 13 | CLK | Serial clock |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 13 | CLK | 串行时钟 |'
- en: '| 14 | AGND | Analog ground |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 14 | AGND | 模拟地 |'
- en: '| 15 | V[REF] | Reference voltage input |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 15 | V[REF] | 参考电压输入 |'
- en: '| 16 | V[DD] | +2.7 V to 5.5 V power supply |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 16 | V[DD] | +2.7 V 到 5.5 V 电源 |'
- en: '**Pulse-Width Modulation**'
  id: totrans-198
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**脉冲宽度调制**'
- en: As we mentioned earlier, the Raspberry Pi GPIOs can be set to either HIGH or
    LOW, but they can’t output any voltages in between. However, you can output “fake”
    mid-level voltages using *pulse-width modulation (PWM)*, which is how you’ll produce
    varying levels of LED brightness for this project.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，树莓派的 GPIO 只能设置为 HIGH 或 LOW，但不能输出两者之间的电压。然而，你可以通过*脉冲宽度调制（PWM）*输出“伪”中间电压，这也是你在此项目中调节
    LED 亮度的方式。
- en: If you alternate an LED’s voltage between HIGH and LOW very fast, your eyes
    can’t keep up with the speed at which the LED switches on and off; you’ll simply
    see some gradations in brightness. That’s basically how PWM works—by producing
    an output that changes between HIGH and LOW at a very high *frequency*. The *duty
    cycle* is the fraction of the period of time at which the LED is set to HIGH.
    [Figure 3-5](ch03.xhtml#ch03fig5) illustrates how PWM works.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你快速交替改变 LED 的电压在 HIGH 和 LOW 之间，你的眼睛无法跟上 LED 开关的速度；你会看到亮度的渐变变化。这基本上就是 PWM 的工作原理——通过产生在
    HIGH 和 LOW 之间快速变化的输出，工作频率非常高。*占空比*是 LED 设为 HIGH 的时间比例。[图 3-5](ch03.xhtml#ch03fig5)展示了
    PWM 如何工作。
- en: '![image](../images/f0057-01.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0057-01.jpg)'
- en: '**FIGURE 3-5:** How PWM works'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-5：** PWM 工作原理'
- en: A duty cycle of 50 percent results in 50 percent LED brightness, a duty cycle
    of 0 means the LED is fully off, and a duty cycle of 100 means the LED is fully
    on. Changing the duty cycle is how you produce different levels of brightness.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 50%的占空比对应50%的LED亮度，0%的占空比表示LED完全关闭，100%的占空比表示LED完全亮起。通过改变占空比，你可以产生不同亮度的效果。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路连接**'
- en: For this circuit you’ll need to connect an LED, the MCP3008 chip, and a potentiometer
    to the Pi. Follow these instructions to build the circuit, using [Figure 3-6](ch03.xhtml#ch03fig6)
    as a reference.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此电路，你需要将LED、电位器和MCP3008芯片连接到树莓派。按照这些说明构建电路，并以[图3-6](ch03.xhtml#ch03fig6)为参考。
- en: Connect GND to the blue breadboard rail.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GND连接到蓝色面包板轨道。
- en: Connect 3.3 V to the red breadboard rail.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将3.3 V连接到红色面包板轨道。
- en: Insert an LED into the breadboard, connecting the longer LED lead to GPIO 17
    through a 330 Ω resistor and the shorter lead to the GND rail.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED插入面包板，将较长的LED引脚通过330 Ω电阻连接到GPIO 17，将较短的引脚连接到GND轨道。
- en: Place the MCP3008 chip in the middle of the breadboard and connect it as shown
    in the following table.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将MCP3008芯片放置在面包板的中央，并按照下表所示进行连接。
- en: '| **MCP3008** | **RASPBERRY PI** |'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **MCP3008** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | Potentiometer middle lead |'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | 电位器中间引脚 |'
- en: '| 9 | GND |'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 | GND |'
- en: '| 10 | GPIO 8 |'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 | GPIO 8 |'
- en: '| 11 | GPIO 10 |'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 | GPIO 10 |'
- en: '| 12 | GPIO 9 |'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 | GPIO 9 |'
- en: '| 13 | GPIO 11 |'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 | GPIO 11 |'
- en: '| 14 | GND |'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 | GND |'
- en: '| 15 | 3.3 V |'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 | 3.3 V |'
- en: '| 16 | 3.3 V |'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 | 3.3 V |'
- en: '**NOTE**'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Before applying power to the circuit, make sure you’ve connected the MCP3008
    chip correctly using the pinout in [Figure 3-4](ch03.xhtml#ch03fig4), or you could
    damage the chip.*'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*在为电路供电之前，确保你已经按照[图3-4](ch03.xhtml#ch03fig4)中的引脚图正确连接了MCP3008芯片，否则可能会损坏芯片。*'
- en: Connect one of the outer leads of the potentiometer to GND and the other to
    3.3 V—it doesn’t matter which lead you use for which connection. Connect the middle
    lead to MCP3008 chip pin 1 if you haven’t already.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电位器的一个外部引脚连接到GND，另一个引脚连接到3.3 V——哪个引脚连接哪个电源都无所谓。如果你还没有，将中间引脚连接到MCP3008芯片的引脚1。
- en: '![image](../images/f0058-01.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0058-01.jpg)'
- en: '**FIGURE 3-6:** Circuit to control the LED brightness with a potentiometer'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-6：** 使用电位器控制LED亮度的电路'
- en: '**WRITING THE SCRIPT**'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: The Pi reads the analog values from the MCP3008 chip using SPI communication,
    so you’ll need to enable that first.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Pi通过SPI通信读取MCP3008芯片的模拟值，因此你需要首先启用SPI。
- en: From the taskbar main menu, select **Preferences** ▸ **Raspberry Pi Configuration**.
    In the Interfaces tab, enable SPI as shown in [Figure 3-7](ch03.xhtml#ch03fig7)
    and click **OK**.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 从任务栏主菜单中选择**首选项** ▸ **树莓派配置**。在“接口”标签页中，启用SPI，如[图3-7](ch03.xhtml#ch03fig7)所示，然后点击**确定**。
- en: '![image](../images/f0059-01.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0059-01.jpg)'
- en: '**FIGURE 3-7:** Enabling SPI communication'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-7：** 启用SPI通信'
- en: 'Your script needs to be able to do the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你的脚本需要能够完成以下任务：
- en: Read an analog input value from the potentiometer through the MCP3008 chip.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从电位器通过MCP3008芯片读取模拟输入值。
- en: Control the brightness of your LED with PWM.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PWM控制LED的亮度。
- en: Change the duty cycle of the PWM according to the input value read from the
    potentiometer.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据从电位器读取的输入值更改PWM的占空比。
- en: '**Entering the Script**'
  id: totrans-235
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code to the Python Editor and save the script as *brightness_controller.py*
    inside the *LEDs* folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，然后点击**文件** ▸ **新建文件**以创建一个新的脚本。将以下代码复制到Python编辑器中，并将脚本保存在*LEDs*文件夹下，命名为*brightness_controller.py*（记得可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE2]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As usual, you start your code by importing the required libraries. Then you
    create an object called `pot` ➊ that refers to MCP3008 channel 0, the channel
    the potentiometer is connected to. Channel 0 corresponds to MCP3008 pin 1, channel
    1 to pin 2, and so on.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，首先导入所需的库。然后创建一个名为`pot` ➊的对象，指向MCP3008的通道0，这是电位器连接的通道。通道0对应MCP3008的引脚1，通道1对应引脚2，依此类推。
- en: '**Setting a PWM Pin and Reading Analog Values**'
  id: totrans-239
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置PWM引脚并读取模拟值**'
- en: The gpiozero library allows you to control an LED’s brightness with PWM by using
    a `PWMLED` object. So at ➋, you create a `PWMLED` object called `led` that refers
    to the pin the LED is connected to, in this case, GPIO17.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: gpiozero库允许你通过使用`PWMLED`对象来控制LED的亮度。因此，在➋，你创建了一个名为`led`的`PWMLED`对象，它指向LED连接的引脚，在这个例子中是GPIO17。
- en: To read an analog value using the gpiozero library, you simply get the potentiometer
    value with `pot.value`. Remember that `pot` refers to MCP3008 channel 0\. You’ll
    get decimal values between `0` and `1`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使用gpiozero库读取模拟值时，你只需通过`pot.value`获取电位器的值。记住，`pot`指的是MCP3008的通道0。你会获得介于`0`和`1`之间的小数值。
- en: '**Adjusting the Brightness**'
  id: totrans-242
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**调整亮度**'
- en: To adjust the LED brightness using PWM, you need to change its duty cycle. To
    adjust the duty cycle, you simply have to attribute a value between `0` and `1`
    to the `led.value`, in which `0` corresponds to a fully off LED and `1` to a fully
    on LED.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PWM调整LED亮度，你需要改变它的占空比。要调整占空比，你只需将`0`到`1`之间的一个值赋给`led.value`，其中`0`表示LED完全熄灭，`1`表示LED完全亮起。
- en: 'In this script, a `while` loop ➌ that is always `True` keeps the program running.
    This loop is constantly checking the potentiometer values: if the value read from
    the potentiometer is below `0.001` ➍, the duty cycle is set to `0`, which turns
    your LED off ➎. Otherwise, the code enters the `else` block ➏, in which the duty
    cycle changes according to the value read from the potentiometer.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，一个始终为`True`的`while`循环 ➌ 使程序保持运行。这个循环不断检查电位器的值：如果从电位器读取的值低于`0.001` ➍，占空比设置为`0`，这将关闭LED
    ➎。否则，代码进入`else`块 ➏，其中占空比根据从电位器读取的值变化。
- en: '**Running the Script**'
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Now you should
    be able to rotate the potentiometer to control the brightness of the LED.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 按**F5**或进入**运行** ▸ **运行模块**来运行脚本。现在你应该能够旋转电位器来控制LED的亮度。
- en: '**TAKING IT FURTHER**'
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'Knowing how to read analog values and control output pins with PWM opens you
    up to a huge variety of projects. Give some of these a try for starters:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 学会如何读取模拟值和使用PWM控制输出引脚，为你打开了丰富的项目创作空间。作为入门，你可以尝试以下几个项目：
- en: Control several LEDs with the same potentiometer.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用同一个电位器控制多个LED。
- en: Build a bar graph of LEDs that you can control with a potentiometer.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个LED条形图，通过电位器控制。
- en: Control the blinking speed of an LED using a potentiometer.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用电位器控制LED的闪烁速度。
- en: '**4'
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: A Graphical User Interface for a Multicolor LED**
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 多彩LED的图形用户界面**
- en: In this project, we’ll introduce you to the multicolor RGB LED, and you’ll learn
    how to build a simple graphical user interface in Tkinter to control your electronics.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将介绍多彩RGB LED，你将学会如何在Tkinter中构建一个简单的图形用户界面来控制你的电子设备。
- en: '![image](../images/f0062-01.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0062-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: Raspberry Pi
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: Common cathode RGB LED
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 共阴RGB LED
- en: Three 330 Ω resistors
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 三个330 Ω电阻
- en: Jumper wires
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING RGB LEDS**'
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍RGB LED**'
- en: RGB LEDs are three LEDs in one—red, green, and blue—that can produce almost
    any color by combining those three colors.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED是三个LED集成在一个模块中——红色、绿色和蓝色——通过组合这三种颜色，几乎可以产生任何颜色。
- en: With an RGB LED you can, of course, produce red, green, and blue light, and
    by configuring the intensity of each LED, you can produce other colors as well.
    For example, to produce purely blue light, you’d set the blue LED to the highest
    intensity and the green and red LEDs to the lowest intensity. For a white light,
    you’d set all three LEDs to the highest intensity. [Figure 4-1](ch04.xhtml#ch04fig1)
    shows a simplified RGB color-mixing chart to give you an idea of how to combine
    red, green, and blue to produce different colors.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RGB LED，你当然可以产生红色、绿色和蓝色光，通过调节每个LED的强度，你还可以产生其他颜色。例如，要产生纯蓝色光，你需要将蓝色LED设置为最大强度，而将绿色和红色LED设置为最小强度。要产生白光，你需要将三个LED都设置为最大强度。[图4-1](ch04.xhtml#ch04fig1)展示了一个简化的RGB色彩混合图，帮助你理解如何结合红色、绿色和蓝色产生不同的颜色。
- en: '![image](../images/f0063-01.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0063-01.jpg)'
- en: '**FIGURE 4-1:** Simple RGB color mixing'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-1：** 简单的RGB色彩混合'
- en: 'There are two kinds of RGB LEDs: a *common cathode* LED, where each color LED
    shares a negative connection, and a *common anode*, where each LED shares a positive
    connection. [Figure 4-2](ch04.xhtml#ch04fig2) illustrates a common anode and a
    common cathode LED.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED有两种类型：*共阴极*LED，其中每个颜色的LED共享一个负极连接，以及*共阳极*LED，其中每个LED共享一个正极连接。[图4-2](ch04.xhtml#ch04fig2)展示了共阳极和共阴极LED。
- en: '![image](../images/f0063-02.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0063-02.jpg)'
- en: '**FIGURE 4-2:** Common anode and common cathode RGB LEDs'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-2：** 共阳极和共阴极RGB LED'
- en: RGB LEDs have four leads—one for each LED and another for the common anode or
    cathode. You can identify each lead by its length, as shown in [Figure 4-3](ch04.xhtml#ch04fig3).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED有四个引脚——每种LED一个，还有一个用于共阳极或共阴极的引脚。你可以通过引脚的长度来识别每个引脚，参考[图4-3](ch04.xhtml#ch04fig3)。
- en: '![image](../images/f0064-01.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0064-01.jpg)'
- en: '**FIGURE 4-3:** Common anode and common cathode RGB LED leads'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-3：** 共阳极和共阴极RGB LED引脚'
- en: 'With the LED facing you so the anode or cathode (the longest lead) is second
    from the left, the leads should be in the following order: red, anode or cathode,
    green, and blue. We’ll be using a common cathode LED for this project, but if
    you already have a common anode LED it’s fine to use that; just watch out for
    the differences noted in the circuit wiring.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当LED朝向你时，阳极或阴极（最长引脚）位于左侧第二个位置，引脚的顺序应该是：红色、阳极或阴极、绿色和蓝色。我们将在本项目中使用共阴极LED，但如果你已经有共阳极LED，也可以使用它；只需注意电路连接中的差异。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路连接**'
- en: Wiring an RGB LED to the Raspberry Pi is really straightforward and not much
    different than wiring a simple LED. You’ll need three current limiting resistors—one
    for each LED color.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 将RGB LED连接到树莓派非常简单，与连接普通LED没有太大区别。你需要三个限流电阻——每种LED颜色一个。
- en: Follow these instructions, using [Figure 4-4](ch04.xhtml#ch04fig4) as a reference.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明操作，使用[图4-4](ch04.xhtml#ch04fig4)作为参考。
- en: Connect the LED pins in the breadboard and add a 330 Ω current-limiting resistor
    in series for each color lead.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED引脚连接到面包板，并为每个颜色引脚串联一个330 Ω限流电阻。
- en: Connect GND to the breadboard blue rail, and wire the RGB LED to the Raspberry
    Pi’s GPIO according to the following table, with red connected to GPIO 23, the
    cathode to GND, green to GPIO 24, and blue to GPIO 25\. Check [Figure 4-3](ch04.xhtml#ch04fig3)
    to make sure you’re orienting the LED correctly.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GND连接到面包板的蓝色轨道，并根据下表将RGB LED连接到树莓派的GPIO，红色连接到GPIO 23，阴极连接到GND，绿色连接到GPIO 24，蓝色连接到GPIO
    25。查看[图4-3](ch04.xhtml#ch04fig3)，确保你正确地定向LED。
- en: '**NOTE**'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: If you’re using a common anode RGB LED, connect the longest lead (the anode)
    to 3.3 V.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是共阳极RGB LED，请将最长的引脚（阳极）连接到3.3V。
- en: '| **RGB LED** | **RASPBERRY PI** |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| **RGB LED** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| First lead: red | GPIO 23 |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| 第一根引脚：红色 | GPIO 23 |'
- en: '| Second lead: cathode | GND |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 第二根引脚：阴极 | GND |'
- en: '| Third lead: green | GPIO 24 |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 第三根引脚：绿色 | GPIO 24 |'
- en: '| Fourth lead: blue | GPIO 25 |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| 第四根引脚：蓝色 | GPIO 25 |'
- en: '![image](../images/f0065-01.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0065-01.jpg)'
- en: '**FIGURE 4-4:** Wiring a common cathode RGB LED to the Raspberry Pi'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-4：** 将共阴极RGB LED连接到树莓派'
- en: '**WRITING THE SCRIPT**'
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: In your script, you’ll use a library called Tkinter to create a user interface
    window in your desktop environment that you can use to control the RGB LED. Tkinter
    is already installed with your Raspbian system, so you just need to import it
    in your script.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的脚本中，你将使用一个名为Tkinter的库来创建一个桌面环境中的用户界面窗口，利用它来控制RGB LED。Tkinter已经预装在你的Raspbian系统中，所以你只需要在脚本中导入它。
- en: The interface window will have three sliders (with values of `0` to `1`) to
    control the intensity of the built-in red, green, and blue LEDs, and a close button
    to shut down the program. By adjusting the values’ intensities with the sliders,
    you can change the color of the RGB LED.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 界面窗口将有三个滑块（值范围从`0`到`1`）来控制内置红色、绿色和蓝色LED的亮度，并且有一个关闭按钮来退出程序。通过调整滑块的值，你可以改变RGB
    LED的颜色。
- en: 'Now, open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a
    new script. Then, enter the following code into the Python Editor and save the
    script as *rgb_led_controller.py* inside the *LEDs* folder (remember that you
    can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开**Python 3 (IDLE)**，然后进入**文件** ▸ **新建文件**以创建一个新的脚本。接着，将以下代码输入Python编辑器，并将脚本保存为*rgb_led_controller.py*，保存在*LEDs*文件夹中（记得你可以从*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE3]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**USER-DEFINED FUNCTIONS**'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户自定义函数**'
- en: To define a new function, you use the word `def` followed by the name you want
    to give the function and a set of parentheses.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个新函数，你使用关键字`def`，后面跟上你想给该函数起的名称以及一对括号。
- en: 'After the parentheses you add a colon (`:`) and then tell the function what
    instructions to perform. Python knows which instructions are part of the function
    definition by the use of the colon and indentation: every indented line after
    the colon is part of the function. Later, you can run the instructions you’ve
    set inside the function by entering the name of the function, also known as *calling*
    the function.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在括号后添加一个冒号（`:`），然后告诉函数执行什么操作。Python通过冒号和缩进来识别哪些操作是函数定义的一部分：冒号后面的每一行缩进代码都属于该函数。之后，你可以通过输入函数名称来运行你在函数内部设置的操作，这也叫做*调用*函数。
- en: First, you import `PWMLED` from the gpiozero library to control the LED with
    PWM, and import the tkinter library to build the user interface ➊. Next, you create
    the function to control the LED color. Remember that a function is basically a
    block of reusable code that will perform a certain action. Python has many built-in
    functions, like `print()`, `int()`, and `input()`, but you can also build your
    own *user-defined functions*, as in this script. Read the [“User-Defined Functions”](ch04.xhtml#ch04box1)
    box to learn more.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你从gpiozero库导入`PWMLED`来通过PWM控制LED，然后导入tkinter库来构建用户界面➊。接下来，你创建了一个控制LED颜色的函数。记住，函数基本上是一个可重用的代码块，用来执行某些操作。Python有许多内置函数，如`print()`、`int()`和`input()`，你也可以像在这个脚本中那样，自己定义*用户自定义函数*。阅读[“用户自定义函数”](ch04.xhtml#ch04box1)框了解更多内容。
- en: '**Controlling the Intensity and Closing the Window**'
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**控制LED亮度并关闭窗口**'
- en: The `change_color()` function ➋ changes the LED’s duty cycle as you adjust the
    value of the slider, which in turn changes the intensity of the LED and therefore
    the color it produces. This function is called every time the sliders move, so
    you should see an instantaneous change on the LED when you move the slider. At
    ➍, you create `PWMLED` objects to refer to each color of the RGB LED.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`change_color()`函数➋根据滑块的值变化来改变LED的占空比，从而改变LED的亮度和产生的颜色。每次滑块移动时都会调用此函数，因此你应该会看到LED亮度的即时变化。在➍，你创建了`PWMLED`对象来引用RGB
    LED的每种颜色。'
- en: The `close_window()` function ➌ closes the window with `window.destroy()`. This
    function is called when you press the Close button in the Tkinter interface. We’ll
    look at how to create the Tkinter interface next.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`close_window()`函数➌使用`window.destroy()`关闭窗口。每当你点击Tkinter界面中的关闭按钮时，这个函数就会被调用。接下来我们将探讨如何创建Tkinter界面。'
- en: '**Designing the User Interface with Tkinter**'
  id: totrans-301
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用Tkinter设计用户界面**'
- en: At ➎, you define the main window of your interface. You create a variable called
    `window` that is a `tkinter` window with the line `window = Tk()`. You then give
    your window a title and set the window dimensions with the `title()` and `geometry()`
    methods, respectively.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在➎，你定义了界面的主窗口。你创建了一个名为`window`的变量，它是一个`tkinter`窗口，通过`window = Tk()`这行代码生成。接着，你为窗口设置了标题，并通过`title()`和`geometry()`方法分别设置了窗口的尺寸。
- en: '**Creating Sliders and Buttons**'
  id: totrans-303
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建滑块和按钮**'
- en: After creating the window, you can start adding the controls, known as *widgets*,
    like buttons, labels, and sliders. You’re using a `Button` widget to close the
    window and three `Scale` widgets to add the sliders to your window.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 创建窗口后，你可以开始添加控件，称为*小部件*，比如按钮、标签和滑块。你使用一个`Button`小部件来关闭窗口，并使用三个`Scale`小部件来将滑块添加到窗口中。
- en: 'You then create three sliders, one for each RGB color ➏, using the following
    syntax:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下语法创建三个滑块，每个滑块对应一个RGB颜色➏：
- en: '[PRE4]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The master argument is the window you’ll add the widget to, and each option
    argument allows you to personalize your sliders. In the *rgb_led_controller.py*
    script, you use the following options:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: master参数是你将添加小部件（widget）的窗口，每个选项参数则允许你个性化你的滑块。在*rgb_led_controller.py*脚本中，你使用了以下选项：
- en: '`from_` defines the lower end of the scale’s range.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_`定义了范围的下限。'
- en: '`to` defines the upper end of the scale’s range. In our case, the range is
    0 to 1.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`定义了范围的上限。在我们的例子中，范围是从0到1。'
- en: '`resolution` sets the resolution of the slider—the minimum difference between
    two consecutive values. Here, the resolution is `0.01`.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolution`设置滑块的分辨率——即两个连续值之间的最小差值。在这里，分辨率是`0.01`。'
- en: '`orient` defines the slider orientation, either `HORIZONTAL` or `VERTICAL`.
    This script sets the sliders to `HORIZONTAL`.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orient`定义了滑块的方向，可以是`HORIZONTAL`或`VERTICAL`。此脚本将滑块设置为`HORIZONTAL`。'
- en: '`label` sets the slider label. You label each slider in this script according
    to the LED color it controls.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`设置滑块的标签。你根据每个滑块控制的LED颜色为每个滑块加上标签。'
- en: '`troughcolor` sets the background color of the slider. Each slider background
    is the color of the LED it controls.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`troughcolor` 设置滑块的背景颜色。每个滑块的背景颜色与它所控制的LED颜色相同。'
- en: '`length` defines the length of the slider in pixels. All of the sliders are
    set to `200`.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` 定义了滑块的长度（以像素为单位）。所有滑块的长度都设置为 `200`。'
- en: '`command` dictates the procedure that will be called every time the slider
    is moved. In this case, moving the slider calls the `change_color()` function,
    which changes the LED’s duty cycle and thus the color it produces.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command` 指定了每次滑动滑块时将调用的过程。在这个案例中，滑动滑块会调用 `change_color()` 函数，它会改变LED的占空比，从而改变其发出的颜色。'
- en: 'After creating the slider, you use the `pack()` method to place the widgets
    in the main `window`. As you’re not passing any argument to the `pack()` method,
    the widgets are placed in the window according to the default settings: widgets
    fill only their minimal dimension, and they are packed against the top of the
    window or against the widget above.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 创建滑块后，你使用 `pack()` 方法将小部件放置在主 `window` 中。由于没有向 `pack()` 方法传递任何参数，因此小部件会根据默认设置放置：小部件只填充它们的最小尺寸，并且它们被放置在窗口的顶部或上面的控件旁边。
- en: 'Next, you create the Close button ➐ using the following syntax:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将使用以下语法创建关闭按钮 ➐：
- en: '[PRE5]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In your code, you use these options:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码中，你使用了这些选项：
- en: '`text` defines the text that will be displayed on the button.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` 定义了按钮上将显示的文本。'
- en: '`command` dictates the procedure that will be called when the button is pressed—here,
    the `close_window()` function, which closes the window.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command` 指定了按下按钮时将调用的过程——在这里，是 `close_window()` 函数，它会关闭窗口。'
- en: '**Using the Main Loop**'
  id: totrans-322
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用主循环**'
- en: The script’s final statement calls the `mainloop()` function ➑, which is an
    infinite loop that allows windows to be drawn and events to be processed. The
    `mainloop()` function is what keeps your program running.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后一条语句调用了 `mainloop()` 函数 ➑，这是一个无限循环，允许窗口绘制和事件处理。`mainloop()` 函数是让程序持续运行的关键。
- en: '**Running the Script**'
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Your interface
    window should pop up, as shown in [Figure 4-5](ch04.xhtml#ch04fig5).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 按 **F5** 或者去 **运行** ▸ **运行模块** 来运行脚本。你的界面窗口应该弹出，如 [图 4-5](ch04.xhtml#ch04fig5)
    所示。
- en: '![image](../images/f0069-01.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0069-01.jpg)'
- en: '**FIGURE 4-5:** The RGB LED controller user interface'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-5：** RGB LED 控制器用户界面'
- en: Congratulations! You’ve made your own component user interface! Now try moving
    the sliders to change the LED color. When you change each slider’s position, the
    RGB LED color should change accordingly.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经制作了自己的组件用户界面！现在试着移动滑块来改变LED的颜色。当你改变每个滑块的位置时，RGB LED的颜色应该会相应变化。
- en: To close the program, just press the Close button.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭程序，只需按下“关闭”按钮。
- en: '**TAKING IT FURTHER**'
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步扩展**'
- en: 'Now that you know how to make a graphical user interface, we encourage you
    to edit its parameters to customize its look to suit your tastes. Here are some
    other project ideas you could try:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何制作图形用户界面了，我们鼓励你编辑其参数，定制界面外观以符合你的个人喜好。以下是一些你可以尝试的其他项目创意：
- en: Build a graphical user interface that controls turning an LED on and off.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个图形用户界面，用于控制LED的开关。
- en: Make a graphical user interface that controls the brightness of the LED.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个图形用户界面，用于控制LED的亮度。
- en: Alter the user interface to control several LEDs.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改用户界面以控制多个LED。
- en: '**5'
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5'
- en: Rainbow Light Strip**
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 彩虹灯带**
- en: In this project you’ll create a rainbow light effect using an addressable RGB
    LED strip. You’ll use a pushbutton to start and stop the rainbow effect, and you’ll
    control the rainbow’s speed and brightness using two potentiometers.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用一个可寻址的RGB LED灯带创建一个彩虹灯光效果。你将使用按钮来启动和停止彩虹效果，并通过两个电位器来控制彩虹的速度和亮度。
- en: '![image](../images/f0071-01.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0071-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: WS2812B addressable RGB LED strip
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812B 可寻址 RGB LED 灯带
- en: Logic level conver ter module BSS 138
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑电平转换模块 BSS 138
- en: Two 10 kΩ potentiometers
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 10 kΩ 电位器
- en: MCP 3 008 chip
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: MCP 3008 芯片
- en: Pushbutton
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮
- en: Three header pins
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 三个针脚
- en: Jumper wires
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: WS2 81X library
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: WS281X 库
- en: '**INTRODUCING THE WS2812B ADDRESSABLE RGB LED STRIP**'
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 WS2812B 可寻址 RGB LED 灯带**'
- en: For the rainbow light effect, you’ll use the WS2812B RGB LED strip, which is
    available in many different sizes. The strip comes in a reel, as shown in [Figure
    5-1](ch05.xhtml#ch05fig1), and you can cut off as long a section as you need.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 对于彩虹灯光效果，你将使用WS2812B RGB LED条，该条有多种不同的尺寸可供选择。该条呈卷轴状，如[图5-1](ch05.xhtml#ch05fig1)所示，你可以根据需要切割出合适的长度。
- en: '![image](../images/f0072-01.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0072-01.jpg)'
- en: '**FIGURE 5-1:** WS2812B addressable RGB LED strip on a reel'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-1：** 卷轴上的WS2812B可寻址RGB LED条'
- en: The strip shown in [Figure 5-1](ch05.xhtml#ch05fig1) is 5 meters long with 300
    addressable WS2812B RGB LEDs wired in series, and later you’ll cut a section of
    14 LEDs to use in this project. There are cutting marks, shown in [Figure 5-2](ch05.xhtml#ch05fig2),
    along the entire length of the strip.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[图5-1](ch05.xhtml#ch05fig1)中的条形灯长5米，包含300个串联的可寻址WS2812B RGB LED，稍后你将切割出14个LED用于这个项目。条形灯沿整条长度上都有切割标记，如[图5-2](ch05.xhtml#ch05fig2)所示。'
- en: '![image](../images/f0072-02.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0072-02.jpg)'
- en: '**FIGURE 5-2:** WS2812B addressable RGB LED strip pins'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-2：** WS2812B可寻址RGB LED条的引脚'
- en: The color and brightness of each LED can be controlled individually, allowing
    you to produce amazing effects easily. Each LED has an integrated circuit (IC)
    built right in, which means you can control the whole strip using just one GPIO
    pin, connected to the middle pin—the Data pin—at the end of the strip (see [Figure
    5-2](ch05.xhtml#ch05fig2)).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 每个LED的颜色和亮度可以单独控制，使你可以轻松制作出惊艳的效果。每个LED都内建了一个集成电路（IC），这意味着你可以只通过一个GPIO引脚来控制整个条形灯，该引脚连接到条形灯末端的中间引脚——数据引脚（见[图5-2](ch05.xhtml#ch05fig2)）。
- en: 'Prepare the LED strip for this project as follows:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为这个项目准备LED条：
- en: Cut a strip of 14 LEDs along the cutting marks shown on the strip.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 沿着条形灯上的切割标记切割14个LED。
- en: Solder header pins to the 5 V, Data, and GND pins as shown in [Figure 5-2](ch05.xhtml#ch05fig2).
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[图5-2](ch05.xhtml#ch05fig2)所示，将引脚焊接到5V、数据和GND引脚。
- en: '**NOTE**'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ve found that a Raspberry Pi 5 V pin (such as pin 2 or pin 4) is capable
    of powering a strip of 20 LEDs or fewer, but in projects where you’re using a
    longer strip, you’ll need to use an external 5 V power supply to provide enough
    current.*'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们发现，树莓派的5V引脚（例如引脚2或引脚4）能够为20个或更少的LED提供电力，但在使用较长条形灯的项目中，你需要使用外部的5V电源来提供足够的电流。*'
- en: Now you need to figure out your power supply. The LED strip requires a 5 V power
    source. You can determine the amps you need from the amount of power each LED
    requires. An individual LED draws up to 60 mA at full brightness (which produces
    white light), but since you’ll rarely need all LEDs at their maximum value for
    any length of time, you can safely estimate 20 mA per LED. So if your strip is
    14 LEDs long, you’ll need a 5 V power source with approximately 20 × 14 = 280
    mA.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要确定电源。LED条需要一个5V的电源。你可以通过每个LED所需的功率来确定所需的电流。每个LED在全亮状态下（即产生白光时）最多消耗60 mA，但由于你不太可能长时间让所有LED都达到最大亮度，因此可以安全地估计每个LED需要20
    mA的电流。所以，如果你的条形灯有14个LED，你将需要一个大约为20 × 14 = 280 mA的5V电源。
- en: The Data pin that controls the strip needs a 5 V signal, but the Pi GPIOs operate
    at 3.3 V. To get the 5 V you need, you’ll use a component called a logic level
    converter.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 控制条形灯的数据引脚需要5V信号，但树莓派的GPIO引脚工作在3.3V电压下。为了获得所需的5V信号，你将使用一个名为逻辑电平转换器的组件。
- en: '**INTRODUCING THE LOGIC LEVEL CONVERTER**'
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**引入逻辑电平转换器**'
- en: A *logic level converter* allows you to convert 3.3 V signals to 5 V signals.
    There are many types of logic level converter, but in this project you’ll use
    the two-channel logic level converter bidirectional module shown in [Figure 5-3](ch05.xhtml#ch05fig3).
    (To find the same logic level converter module we’re using, search online for
    *logic level converter module bss138*.)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '*逻辑电平转换器*可以将3.3V信号转换为5V信号。逻辑电平转换器有很多种类型，但在这个项目中你将使用[图5-3](ch05.xhtml#ch05fig3)中所示的双通道逻辑电平转换器双向模块。（要找到与我们使用的相同的逻辑电平转换器模块，可以在线搜索*logic
    level converter module bss138*。）'
- en: The bidirectionality of this module allows you to convert data in both ways—from
    3.3 V to 5 V and from 5 V to 3.3 V. You won’t need to convert 5 V to 3.3 V in
    this project, but having this more flexible model in your toolkit (versus a unidirectional
    model) can come in handy for future projects. This logic level converter also
    has two channels, channel 1 and channel 2\. In this project you’ll use only one
    of the channels to control the LED strip’s Data pin.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块的双向性允许你双向转换数据——从 3.3 V 转换到 5 V，或从 5 V 转换到 3.3 V。在这个项目中，你不需要将 5 V 转换为 3.3
    V，但在你的工具包中拥有这个更灵活的模型（相较于单向模型）将来对其他项目可能会很有帮助。这个逻辑电平转换器还有两个通道，通道 1 和通道 2。在这个项目中，你只需使用其中一个通道来控制
    LED 灯带的数据引脚。
- en: '![image](../images/f0073-01.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0073-01.jpg)'
- en: '**FIGURE 5-3:** Two-channel logic level converter bidirectional module'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-3：** 双通道逻辑电平转换器双向模块'
- en: More likely than not, your module will come with the header pins separate, so
    you’ll need to solder the pins to it to make it breadboard-friendly. Break off
    two rows of six header pins, and solder one pin to each tiny hole.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你的模块会配有分离的引脚排针，因此你需要将引脚焊接到模块上，使其适合面包板。取下两排六个引脚的排针，并将每个引脚焊接到每个小孔上。
- en: The module has a low-voltage side (left side of [Figure 5-3](ch05.xhtml#ch05fig3)),
    to which you attach everything that’s at 3.3 V, and a high-voltage side (right
    side), where you attach everything at 5 V. For this project, you need to use one
    of the pins highlighted in red, as you want to send 3.3 V data and convert it
    to 5 V.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块有一个低电压端（[图 5-3](ch05.xhtml#ch05fig3)左侧），你需要将所有 3.3 V 的设备连接到此端，而高电压端（右侧）用于连接
    5 V 的设备。在这个项目中，你需要使用标红的引脚之一，因为你要发送 3.3 V 数据并将其转换为 5 V。
- en: To use the logic level converter, connect GND on both sides, 3.3 V on the low-voltage
    side, and 5 V on the high-voltage side. Then, connect data from the Pi on one
    of the TX1 pins—you can use either channel 1 or channel 2—and get the 5 V data
    on the corresponding TX0 pin.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用逻辑电平转换器，首先将两侧的 GND 引脚连接在一起，将低电压侧的 3.3 V 和高电压侧的 5 V 连接好。然后，将 Pi 的数据连接到 TX1
    引脚之一——你可以选择通道 1 或通道 2——并在相应的 TX0 引脚上获取 5 V 数据。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**连接电路**'
- en: At this point, you should have cut your strip to size (14 LEDs) and soldered
    header pins both to the end of the strip and to the logic level converter. Now
    you’re ready to wire the circuit. To do so, you’ll connect together a pushbutton,
    two potentiometers via the MCP3008 chip, and the addressable RGB LED strip using
    the logic level converter module, as shown in [Figure 5-4](ch05.xhtml#ch05fig4).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该已经将 LED 灯带剪裁成所需的尺寸（14 个 LED），并已将排针焊接到灯带的末端以及逻辑电平转换器上。现在，你可以开始连接电路了。为此，你需要将一个按钮、两个电位计通过
    MCP3008 芯片连接起来，并使用逻辑电平转换器模块将可寻址 RGB LED 灯带连接在一起，如[图 5-4](ch05.xhtml#ch05fig4)所示。
- en: '![image](../images/f0074-01.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0074-01.jpg)'
- en: '**FIGURE 5-4:** Circuit for controlling the RGB LED strip'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-4：** 控制 RGB LED 灯带的电路'
- en: '**WARNING**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Remember that you can’t connect 5 V to the Pi GPIOs, as that can permanently
    damage your board.*'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '*请记住，你不能将 5 V 连接到 Pi 的 GPIO 引脚，因为那样可能会永久损坏你的板子。*'
- en: '**NOTE**'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*To identify the MCP3008 pins, orient the chip so it’s facing you with the
    half-circle cutout at the top. The first pin is the top left and the last pin
    is the top right. See [“Analog-to-Digital Converters”](ch03.xhtml#lev41) on [page
    55](ch03.xhtml#page_55) for a full MCP3008 pinout description.*'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '*要识别 MCP3008 引脚，定位芯片，使其正面朝向你，顶部有一个半圆形的缺口。第一个引脚在左上角，最后一个引脚在右上角。有关完整的 MCP3008
    引脚图，请参见[“模拟到数字转换器”](ch03.xhtml#lev41)第[55页](ch03.xhtml#page_55)。*'
- en: Connect the GND and 3.3 V pins to the breadboard rails.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 和 3.3 V 引脚连接到面包板的轨道。
- en: Insert the MCP3008 chip in the middle of the breadboard with the two sides straddling
    the center divide.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MCP3008 芯片插入面包板的中间，两侧跨越中心隔板。
- en: Insert two potentiometers in the breadboard, wiring one’s outer lead to GND
    and the other’s outer lead to 3.3 V.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个电位计插入面包板，将一个的外引脚连接到 GND，另一个的外引脚连接到 3.3 V。
- en: Connect the MCP3008 chip as shown in the following table. It doesn’t matter
    which potentiometer you connect to which pins; they will work the same way.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下表连接 MCP3008 芯片。连接哪个电位计到哪个引脚并不重要，它们的工作方式相同。
- en: '| **MCP3008** | **CONNECT TO** |'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **MCP3008** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | One potentiometer’s middle lead |'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | 一个电位计的中间引脚 |'
- en: '| 2 | Other potentiometer’s middle lead |'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 | 另一个电位计的中间引脚 |'
- en: '| 9 | GND |'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 | GND |'
- en: '| 10 | GPIO 8 |'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 | GPIO 8 |'
- en: '| 11 | GPIO 10 |'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 | GPIO 10 |'
- en: '| 12 | GPIO 9 |'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 | GPIO 9 |'
- en: '| 13 | GPIO 11 |'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 | GPIO 11 |'
- en: '| 14 | GND |'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 | GND |'
- en: '| 15 | 3.3 V |'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 | 3.3 V |'
- en: '| 16 | 3.3 V |'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 | 3.3 V |'
- en: Insert a pushbutton into the breadboard, straddling the center divide. On one
    side of the center divide, connect one pin to GND and the other pin to GPIO 2.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个按键插入面包板，跨过中间分隔线。在中间分隔线的一侧，将一个引脚连接到 GND，另一个引脚连接到 GPIO 2。
- en: Insert the RGB LED strip pins into the breadboard.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 RGB LED 条形灯的引脚插入面包板。
- en: Insert the logic level converter into the breadboard. Connect the low-voltage
    side as directed.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将逻辑电平转换器插入面包板。按照指示连接低电压端。
- en: '| **LOGIC LEVEL CONVERTER** | **RASPBERRY PI** |'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **逻辑电平转换器** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| TX1 (channel 2) | GPIO 18 |'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| TX1 (通道 2) | GPIO 18 |'
- en: '| LV | 3.3 V |'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| LV | 3.3 V |'
- en: '| GND | GND |'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: Connect the high-voltage side as directed.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照指示连接高电压端。
- en: '| **LOGIC LEVEL CONVERTER** | **CONNECT TO** |'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **逻辑电平转换器** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| TX0 (channel 2) | RGB LED strip’s Data pin (middle pin) |'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| TX0 (通道 2) | RGB LED 条形灯的数据引脚（中间引脚） |'
- en: '| HV | 5 V |'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| HV | 5 V |'
- en: '| GND | GND |'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: With the logic level converter connected, connect the RGB LED strip as directed.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接好逻辑电平转换器后，按指示连接 RGB LED 条形灯。
- en: '| **RGB LED STRIP** | **CONNECT TO** |'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **RGB LED 条形灯** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 5 V | 5 V |'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 V | 5 V |'
- en: '| Din | Logic level converter TX0 pin |'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Din | 逻辑电平转换器 TX0 引脚 |'
- en: '| GND | GND |'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '**NOTE**'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you choose to do this project with a strip of more than 20 LEDs, you’ll
    need to connect your 5 V power source to the strip’s 5 V pin and the GND power
    source to the GND rail.*'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您选择使用超过 20 个 LED 的条形灯做这个项目，您需要将 5 V 电源连接到条形灯的 5 V 引脚，将 GND 电源连接到 GND 导轨。*'
- en: '**WRITING THE SCRIPT**'
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: This script relies on the WS281X library to control the individual LEDs, so
    you need to install that library and then enable the Serial Peripheral Interface
    (SPI) communication the strip needs to communicate with the Pi.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本依赖于 WS281X 库来控制各个 LED，因此您需要先安装该库，然后启用串行外设接口（SPI）通信，条形灯需要通过 SPI 与树莓派进行通信。
- en: '**Installing the WS281X Library**'
  id: totrans-422
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装 WS281X 库**'
- en: There are a few steps to installing the WS281X library, as it requires you to
    set up the libraries it depends on first.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 WS281X 库有几个步骤，因为它需要您首先设置其依赖的库。
- en: 'Open a terminal window and install the scons, python3-dev, and swig libraries:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口并安装 scons、python3-dev 和 swig 库：
- en: '[PRE6]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Still in the terminal, navigate to the desktop, create a folder called *Libraries*,
    and then navigate to the newly created folder:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，导航到桌面，创建一个名为 *Libraries* 的文件夹，然后进入新创建的文件夹：
- en: '[PRE7]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Clone the library to download it.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆该库以进行下载。
- en: '[PRE8]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Move to the *rpi_ws281x* library folder and run the `scons` command:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 *rpi_ws281x* 库文件夹并运行 `scons` 命令：
- en: '[PRE9]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Navigate to the *python* folder and install the WS281X library on your Pi:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 *python* 文件夹并在树莓派上安装 WS281X 库：
- en: '[PRE10]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now you’re ready to use the WS281X library in your code.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好在代码中使用 WS281X 库。
- en: '**Enabling SPI Communication**'
  id: totrans-435
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启用 SPI 通信**'
- en: To communicate with the MCP3008 chip, you need to enable SPI communication.
    Go to the taskbar main menu and select **Preferences** ▸ **Raspberry Pi Configuration**.
    In the Interfaces tab, click **Enabled** in the SPI row, as shown in [Figure 5-5](ch05.xhtml#ch05fig5),
    and then click **OK**.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 MCP3008 芯片通信，您需要启用 SPI 通信。打开任务栏主菜单，选择 **首选项** ▸ **树莓派配置**。在“接口”选项卡中，点击 SPI
    行中的 **启用**，如 [图 5-5](ch05.xhtml#ch05fig5) 所示，然后点击 **确定**。
- en: '![image](../images/f0077-01.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0077-01.jpg)'
- en: '**FIGURE 5-5:** Enabling SPI communication'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-5：** 启用 SPI 通信'
- en: '**ENTERING THE SCRIPT**'
  id: totrans-439
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'Let’s recap how the circuit works to help you better understand the script
    before entering it:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下电路如何工作，以便在输入脚本之前帮助您更好地理解：
- en: Your RGB LED strip displays a moving rainbow.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的 RGB LED 条形灯将显示一个移动的彩虹。
- en: One potentiometer controls the rainbow speed.
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电位器控制彩虹动画的速度。
- en: Another potentiometer controls the rainbow brightness.
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个电位器控制彩虹的亮度。
- en: The pushbutton starts and stops the rainbow animation.
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按键用于启动和停止彩虹动画。
- en: '**TROUBLESHOOTING CRAZY PIXELS**'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**故障排除：像素乱跳**'
- en: 'At the time of this writing, there is an issue with the strip pixels on newer
    versions of Raspbian. The pin used to control the strip is shared with analog
    audio output, so the pixels can go crazy and not work properly. If this happens
    when you load the code, you need to add two lines to the *config.txt* file. Go
    to the terminal and enter the following:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在写本文时，较新版本的 Raspbian 存在条形灯像素的问题。用于控制条形灯的引脚与模拟音频输出共享，因此像素可能会出现问题并无法正常工作。如果在加载代码时发生这种情况，您需要在
    *config.txt* 文件中添加两行。进入终端并输入以下内容：
- en: '[PRE11]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the file that opens, add the following two lines (anywhere should be fine):'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的文件中，添加以下两行（可以放在任何位置）：
- en: '[PRE12]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Press CTRL-X to save the file and then, when prompted, type **Y** and press
    ENTER. Reboot your Pi for the changes to take effect, and then proceed to the
    library installation.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 按下CTRL-X保存文件，然后在提示时输入**Y**并按回车键。重新启动你的Pi，使更改生效，然后继续进行库的安装。
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 5-1](ch05.xhtml#ch05list1) to the Python Editor
    and save the script as *rainbow_effect.py* inside the *LEDs* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，然后进入**文件** ▸ **新建文件**来创建一个新的脚本。将[列表 5-1](ch05.xhtml#ch05list1)中的代码复制到Python编辑器中，并将脚本保存在*LEDs*文件夹内，命名为*rainbow_effect.py*（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 5-1:** The Rainbow Strip *rainbow_effect.py* code'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 5-1：** 彩虹灯带*rainbow_effect.py*代码'
- en: '[PRE13]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, you import the libraries you’ll use to control the project ➊. You need
    the neopixel library to control the LED strip, the time library to import the
    `sleep()` function for controlling the delay time, and from gpiozero you import
    the `Button()` and `MCP3008()` interfaces to read the pushbutton and potentiometer
    values, respectively.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你导入你将用于控制项目的库 ➊。你需要neopixel库来控制LED灯带，time库来导入`sleep()`函数以控制延迟时间，另外从gpiozero库导入`Button()`和`MCP3008()`接口，用于分别读取按钮和电位器的值。
- en: '**Setting the Strip Parameters**'
  id: totrans-455
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置灯带参数**'
- en: At ➋, you create variables for configuring the RGB LED strip, including the
    number of LEDs and the GPIO pin used. Then, at ➌, you create objects to refer
    to the two potentiometers, with the brightness on MCP3008 channel 0 (pin 1) and
    the speed on MCP3008 channel 1 (pin 2), and an object for the button on GPIO 2\.
    You also create a variable for starting and stopping the animation called `running_animation`,
    which takes a Boolean and is `False` (off ) by default.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你创建了配置RGB LED灯带的变量，包括LED的数量和所使用的GPIO引脚。然后，在➌处，你创建了用于表示两个电位器的对象，一个是MCP3008通道0（引脚1）上的亮度，另一个是MCP3008通道1（引脚2）上的速度，还有一个对象用于GPIO
    2上的按钮。你还创建了一个名为`running_animation`的变量，用于启动和停止动画，它是一个布尔值，默认值为`False`（关闭）。
- en: '**Creating the Rainbow Effect Functions**'
  id: totrans-457
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建彩虹效果函数**'
- en: At ➍ and ➎, you create the functions that produce the moving rainbow effect.
    These functions are the same as the ones used in the *strandtest.py* example that
    comes with the neopixel library. In simple terms, the `wheel()` function generates
    the color spectrum by varying each color parameter between 0 and 255\. Each color
    is composed of red, green, and blue (RGB) parameters, and varying each parameter
    between 0 and 255 produces different colors, resulting in a rainbow effect. The
    `rainbowCycle()` function distributes the rainbow across the number of LEDs on
    your strip.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋和➎处，你创建了产生移动彩虹效果的函数。这些函数与neopixel库自带的*strandtest.py*示例中使用的函数相同。简单来说，`wheel()`函数通过将每个颜色参数在0到255之间变化来生成颜色光谱。每种颜色由红色、绿色和蓝色（RGB）参数组成，通过在0到255之间变化这些参数会产生不同的颜色，进而实现彩虹效果。`rainbowCycle()`函数则在你的LED灯带的数量上分布彩虹效果。
- en: The line at ➏ sets the delay time for the `sleep()` function. To calculate the
    delay time, you multiply the value read from one of the potentiometers (which
    is between 0 and 1) by 40 and then divide that result by 1,000\. Multiplying the
    potentiometer value by 40 produces a noticeable delay time; otherwise, the delay
    would be so short that the rainbow effect would happen too fast for you to detect
    the movement of the lights. Dividing by 1,000 gives you a delay time in milliseconds.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: ➏处的这一行设置了`sleep()`函数的延迟时间。为了计算延迟时间，你将从一个电位器读取的值（范围在0到1之间）乘以40，然后将结果除以1,000。将电位器的值乘以40可以产生明显的延迟时间，否则延迟时间会太短，导致彩虹效果太快，你来不及看到灯光的变化。除以1,000会将延迟时间转换为毫秒。
- en: '**Controlling the Pushbutton**'
  id: totrans-460
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**控制按钮**'
- en: 'Using the gpiozero library, you assign a particular action to a pushbutton
    press as follows:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 使用gpiozero库，你可以将特定的动作分配给按钮按下事件，方法如下：
- en: '[PRE14]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The function_name function refers to a generic function that will be called
    when the button is pressed; that function must be defined before it is called.
    In this case, that function is `start_animation` ➑, defined at ➐. Notice that
    function_name doesn’t have parentheses. This happens because we’re just assigning
    a function to another function instead of running the function. In our case, we’re
    telling the code to run the `start_animation` function when the `button_start.when_pressed`
    function is triggered.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`function_name`函数是指一个通用函数，当按钮被按下时会被调用；该函数必须在被调用之前定义。在这个案例中，那个函数是`start_animation`
    ➑，在➐处定义。注意`function_name`后面没有括号。这是因为我们只是将一个函数赋值给另一个函数，而不是直接运行它。在我们的例子中，我们告诉代码当触发`button_start.when_pressed`函数时运行`start_animation`函数。'
- en: When the button is pressed, the `running_animation` value changes. When the
    `running_animation` variable is `False` and the button is pressed, it changes
    to `True`, and vice versa. This allows you to start and stop the rainbow effect.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮被按下时，`running_animation`值会变化。当`running_animation`变量为`False`且按钮被按下时，它会变为`True`，反之亦然。这样你就可以启动和停止彩虹效果。
- en: '**Controlling the Animation with the while Loop**'
  id: totrans-465
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用while循环控制动画**'
- en: At ➒, you create an `Adafruit_Neopixel` object called `strip` that takes in
    the strip parameters you defined earlier at ➋. To control the strip’s LED brightness,
    you use `int(pot_brightness.value*255)`. The brightness changes according to the
    value read from one of the potentiometers (between 0 and 1). You multiply that
    value by 255 because the strip’s LED brightness has a range of 0 to 255\. Using
    the `int()` function rounds the number to an integer. This way, you can adjust
    the LED brightness by rotating the potentiometer.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在➒处，你创建了一个名为`strip`的`Adafruit_Neopixel`对象，它接收你之前在➋处定义的条带参数。为了控制条带LED的亮度，你使用`int(pot_brightness.value*255)`。亮度根据从一个电位器读取的值（在0和1之间）来变化。你将这个值乘以255，因为条带LED的亮度范围是0到255。使用`int()`函数将数字四舍五入为整数。这样，你就可以通过旋转电位器来调整LED亮度。
- en: Then, you use `strip.begin()`, which you need to call before making other calls
    on the `Adafruit_Neopixel` object.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你使用`strip.begin()`，这是在对`Adafruit_Neopixel`对象进行其他调用之前必须先调用的。
- en: The `while` loop ➓ keeps the program running. Then, you set the strip brightness
    before starting the animation. If the `running_animation` variable is equal to
    `True`, the `rainbowCycle()` function will run, starting the animation. If you
    press the pushbutton, the `running_animation` variable changes to `False`, and
    the animation stops.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环 ➓ 使程序持续运行。接着，在开始动画之前，你设置条带的亮度。如果`running_animation`变量等于`True`，`rainbowCycle()`函数将运行，启动动画。如果你按下按钮，`running_animation`变量会变为`False`，动画停止。'
- en: '**Running the Script**'
  id: totrans-469
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: To run this script, you need to use the terminal window. Running it from the
    Python 3 IDLE editor will give you a permissions error.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这个脚本，你需要使用终端窗口。从Python 3 IDLE编辑器运行会导致权限错误。
- en: 'Save the script as *rainbow_effect.py* inside the *LEDs* folder within the
    *Projects* directory, and open the terminal. Then, navigate to the *LEDs* folder
    and run the script:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本保存为*rainbow_effect.py*，放在*Projects*目录中的*LEDs*文件夹内，然后打开终端。接着，导航到*LEDs*文件夹并运行脚本：
- en: '[PRE15]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now you can control the speed and brightness by rotating their respective potentiometers
    and stop and start the animation by pressing the pushbutton.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过旋转各自的电位器来控制速度和亮度，按下按钮则可以停止和启动动画。
- en: Congratulations! You have an awesome decoration for your home!
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你为你的家增添了一个超棒的装饰！
- en: '**TAKING IT FURTHER**'
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'Here are some simple ideas you can try if you want to increase your level of
    control over the strip:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些简单的想法，你可以尝试一下，如果你想增加对条带的控制能力：
- en: Light up a specific LED in the middle of the strip.
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在条带的中间点亮一个特定的LED。
- en: Light all the LEDs in just one color.
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有LED点亮为一个单一的颜色。
- en: Add a pushbutton to change between preset effects.
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个按钮来切换预设效果。
- en: Blink the LEDs like Christmas lights.
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像圣诞灯一样闪烁LED。
- en: Invent your own effects.
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发明你自己的效果。
