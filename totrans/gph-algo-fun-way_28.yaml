- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Dogma_OT_Bold_B_11">INDEX</samp>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">INDEX</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp>
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp>
- en: absorbing nodes, [217](chapter13.xhtml#pg_217)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收节点，[217](chapter13.xhtml#pg_217)
- en: absorption probability, [217](chapter13.xhtml#pg_217)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收概率，[217](chapter13.xhtml#pg_217)
- en: absorption time, [217](chapter13.xhtml#pg_217)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收时间，[217](chapter13.xhtml#pg_217)
- en: acyclic graphs, [136](chapter9.xhtml#pg_136)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无环图，[136](chapter9.xhtml#pg_136)
- en: adjacency list representation, [7–15](chapter1.xhtml#pg_7)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻接表表示法，[7–15](chapter1.xhtml#pg_7)
- en: adjacency matrix representation, [15–17](chapter1.xhtml#pg_15)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻接矩阵表示法，[15–17](chapter1.xhtml#pg_15)
- en: admissible heuristics, [113](chapter8.xhtml#pg_113). *See also* [heuristics](#ind9)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可接受启发式，[113](chapter8.xhtml#pg_113)。*另见* [启发式](#ind9)
- en: '*Algorithmic Thinking* (Zingaro), [369](appendix_C.xhtml#pg_369)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*算法思维*（Zingaro），[369](appendix_C.xhtml#pg_369)'
- en: '*Algorithms* (Sedgewick and Wayne), [200](chapter12.xhtml#pg_200)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*算法*（Sedgewick 和 Wayne），[200](chapter12.xhtml#pg_200)'
- en: all-pairs shortest-path problem, [102–103](chapter7.xhtml#pg_102). *See also*
    [shortest-path problem](#ind15)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有对的最短路径问题，[102–103](chapter7.xhtml#pg_102)。*另见* [最短路径问题](#ind15)
- en: anti-parallel edges, [231](chapter14.xhtml#pg_231), [253–254](chapter14.xhtml#pg_253)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向边，[231](chapter14.xhtml#pg_231)，[253–254](chapter14.xhtml#pg_253)
- en: arcs. *See* [edges](#ind6)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弧。*另见* [边](#ind6)
- en: articulation point finding algorithm, [186–191](chapter11.xhtml#pg_186)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切点查找算法，[186–191](chapter11.xhtml#pg_186)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">articulation_point_dfs()</samp>
    function, [188](chapter11.xhtml#pg_188)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">articulation_point_dfs()</samp>
    函数，[188](chapter11.xhtml#pg_188)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">articulation_point_root()</samp>
    function, [188](chapter11.xhtml#pg_188)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">articulation_point_root()</samp>
    函数，[188](chapter11.xhtml#pg_188)
- en: articulation points, [177](chapter11.xhtml#pg_177)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切点，[177](chapter11.xhtml#pg_177)
- en: '*Artificial Intelligence* (Russell and Norvig), [323](chapter17.xhtml#pg_323)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*人工智能*（Russell 和 Norvig），[323](chapter17.xhtml#pg_323)'
- en: A* search, [119–132](chapter8.xhtml#pg_119)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A* 搜索，[119–132](chapter8.xhtml#pg_119)
- en: admissible heuristics, [124](chapter8.xhtml#pg_124)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可接受启发式，[124](chapter8.xhtml#pg_124)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">astar_dynamic()</samp> function,
    [128](chapter8.xhtml#pg_128)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">astar_dynamic()</samp> 函数，[128](chapter8.xhtml#pg_128)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">astar_search()</samp> function,
    [120](chapter8.xhtml#pg_120)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">astar_search()</samp> 函数，[120](chapter8.xhtml#pg_120)
- en: exploring graphs, [126–132](chapter8.xhtml#pg_126)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图的探索，[126–132](chapter8.xhtml#pg_126)
- en: puzzles, [124–126](chapter8.xhtml#pg_124)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拼图，[124–126](chapter8.xhtml#pg_124)
- en: augmenting paths, [238–243](chapter14.xhtml#pg_238). *See also* [maximum-flow
    problem](#ind10)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增广路径，[238–243](chapter14.xhtml#pg_238)。*另见* [最大流问题](#ind10)
- en: average clustering coefficient, [25](chapter2.xhtml#pg_25)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均聚类系数，[25](chapter2.xhtml#pg_25)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">B</samp>
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">B</samp>
- en: backward residual, [235](chapter14.xhtml#pg_235), [239](chapter14.xhtml#pg_239),
    [241](chapter14.xhtml#pg_241)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向残量，[235](chapter14.xhtml#pg_235)，[239](chapter14.xhtml#pg_239)，[241](chapter14.xhtml#pg_241)
- en: Bellman-Ford algorithm, [97–99](chapter7.xhtml#pg_97)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贝尔曼-福特算法，[97–99](chapter7.xhtml#pg_97)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">BellmanFord()</samp> function,
    [99](chapter7.xhtml#pg_99)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">BellmanFord()</samp> 函数，[99](chapter7.xhtml#pg_99)
- en: cost, [99](chapter7.xhtml#pg_99)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[99](chapter7.xhtml#pg_99)
- en: best-first search, [111](chapter8.xhtml#pg_111), [114](chapter8.xhtml#pg_114).
    *See also* [heuristic-guided search](#ind8)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳优先搜索，[111](chapter8.xhtml#pg_111)，[114](chapter8.xhtml#pg_114)。*另见* [启发式引导搜索](#ind8)
- en: bipartite graphs, [255](chapter15.xhtml#pg_255), [257–273](chapter15.xhtml#pg_257)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分图，[255](chapter15.xhtml#pg_255)，[257–273](chapter15.xhtml#pg_257)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">bipartite_labeling()</samp> function,
    [259](chapter15.xhtml#pg_259)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">bipartite_labeling()</samp> 函数，[259](chapter15.xhtml#pg_259)
- en: labeling, [258–263](chapter15.xhtml#pg_258)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记，[258–263](chapter15.xhtml#pg_258)
- en: bipartite matching problem, [263–273](chapter15.xhtml#pg_263)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分匹配问题，[263–273](chapter15.xhtml#pg_263)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">bipartite_matching_exh()</samp>
    function, [266](chapter15.xhtml#pg_266)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">bipartite_matching_exh()</samp>
    函数，[266](chapter15.xhtml#pg_266)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">bipartite_matching_max_flow()</samp>
    function, [270](chapter15.xhtml#pg_270)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">bipartite_matching_max_flow()</samp>
    函数，[270](chapter15.xhtml#pg_270)
- en: exhaustive algorithms, [264–269](chapter15.xhtml#pg_264)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 穷举算法，[264–269](chapter15.xhtml#pg_264)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">matching_recursive()</samp> function,
    [266](chapter15.xhtml#pg_266)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">matching_recursive()</samp> 函数,
    [266](chapter15.xhtml#pg_266)
- en: using maximum-flow algorithms, [269–273](chapter15.xhtml#pg_269)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最大流算法, [269–273](chapter15.xhtml#pg_269)
- en: breadth-first search, [63–74](chapter5.xhtml#pg_63)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广度优先搜索, [63–74](chapter5.xhtml#pg_63)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">breadth_first_search()</samp>
    function, [65](chapter5.xhtml#pg_65)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">breadth_first_search()</samp>
    函数, [65](chapter5.xhtml#pg_65)
- en: maximum-flow problem, [246–251](chapter14.xhtml#pg_246)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大流问题, [246–251](chapter14.xhtml#pg_246)
- en: shortest paths, [68–70](chapter5.xhtml#pg_68)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最短路径, [68–70](chapter5.xhtml#pg_68)
- en: bridge-finding algorithm, [180–186](chapter11.xhtml#pg_180)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥查找算法, [180–186](chapter11.xhtml#pg_180)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">bridge_finding_dfs()</samp> function,
    [184](chapter11.xhtml#pg_184)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">bridge_finding_dfs()</samp> 函数,
    [184](chapter11.xhtml#pg_184)
- en: cost, [184](chapter11.xhtml#pg_184)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本, [184](chapter11.xhtml#pg_184)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_bridges()</samp> function,
    [184](chapter11.xhtml#pg_184)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_bridges()</samp> 函数, [184](chapter11.xhtml#pg_184)
- en: bridges, [176](chapter11.xhtml#pg_176)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥, [176](chapter11.xhtml#pg_176)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">C</samp>
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">C</samp>
- en: capacity, [230–232](chapter14.xhtml#pg_230). *See also* [maximum-flow problem](#ind10)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容量, [230–232](chapter14.xhtml#pg_230). *另见* [最大流问题](#ind10)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">CapacityEdge</samp> class, [233–235](chapter14.xhtml#pg_233)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">CapacityEdge</samp> 类, [233–235](chapter14.xhtml#pg_233)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">adjusted_used()</samp> method,
    [234](chapter14.xhtml#pg_234)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">adjusted_used()</samp> 方法, [234](chapter14.xhtml#pg_234)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">capacity_left()</samp> method,
    [234](chapter14.xhtml#pg_234)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">capacity_left()</samp> 方法, [234](chapter14.xhtml#pg_234)
- en: constructor, [234](chapter14.xhtml#pg_234)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数, [234](chapter14.xhtml#pg_234)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">flow_used()</samp> method, [234](chapter14.xhtml#pg_234)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">flow_used()</samp> 方法, [234](chapter14.xhtml#pg_234)
- en: Chaitin, George, [293](chapter16.xhtml#pg_293)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chaitin, George, [293](chapter16.xhtml#pg_293)
- en: cliques, [301–308](chapter17.xhtml#pg_301)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团, [301–308](chapter17.xhtml#pg_301)
- en: backtracking search, [305–308](chapter17.xhtml#pg_305)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回溯搜索, [305–308](chapter17.xhtml#pg_305)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">clique_expansion_options()</samp>
    function, [303](chapter17.xhtml#pg_303)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">clique_expansion_options()</samp>
    函数, [303](chapter17.xhtml#pg_303)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">clique_greedy()</samp> function,
    [304](chapter17.xhtml#pg_304)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">clique_greedy()</samp> 函数, [304](chapter17.xhtml#pg_304)
- en: greedy search, [303–305](chapter17.xhtml#pg_303)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贪心搜索, [303–305](chapter17.xhtml#pg_303)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_clique()</samp> function, [302](chapter17.xhtml#pg_302)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_clique()</samp> 函数, [302](chapter17.xhtml#pg_302)
- en: maximum clique, [302](chapter17.xhtml#pg_302)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大团, [302](chapter17.xhtml#pg_302)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_clique_backtracking()</samp>
    function, [306](chapter17.xhtml#pg_306)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_clique_backtracking()</samp>
    函数, [306](chapter17.xhtml#pg_306)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_clique_recursive()</samp>
    function, [305](chapter17.xhtml#pg_305)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_clique_recursive()</samp>
    函数, [305](chapter17.xhtml#pg_305)
- en: closed-neighborhood subgraphs, [27](chapter2.xhtml#pg_27)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭邻域子图, [27](chapter2.xhtml#pg_27)
- en: clustering coefficient, [24–26](chapter2.xhtml#pg_24)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚类系数, [24–26](chapter2.xhtml#pg_24)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ave_clustering_coefficient()</samp>
    function, [25](chapter2.xhtml#pg_25)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">ave_clustering_coefficient()</samp>
    函数, [25](chapter2.xhtml#pg_25)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">clustering_coefficient()</samp>
    function, [24](chapter2.xhtml#pg_24)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">clustering_coefficient()</samp>
    函数, [24](chapter2.xhtml#pg_24)
- en: comma-separated values (CSV), [347](appendix_A.xhtml#pg_347)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逗号分隔值（CSV）, [347](appendix_A.xhtml#pg_347)
- en: connected components, [42](chapter3.xhtml#pg_42), [176](chapter11.xhtml#pg_176),
    [193](chapter12.xhtml#pg_193). *See also* [strongly connected components](#ind16)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接分量, [42](chapter3.xhtml#pg_42), [176](chapter11.xhtml#pg_176), [193](chapter12.xhtml#pg_193).
    *另见* [强连接分量](#ind16)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_cc()</samp> function,
    [55](chapter4.xhtml#pg_55)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_cc()</samp> 函数,
    [55](chapter4.xhtml#pg_55)
- en: and Eulerian cycles, [336](chapter18.xhtml#pg_336)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和欧拉回路, [336](chapter18.xhtml#pg_336)
- en: constructing graphs
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建图
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_graph_from_points()</samp>
    function, [354](appendix_A.xhtml#pg_354)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_graph_from_points()</samp>
    函数, [354](appendix_A.xhtml#pg_354)
- en: from edge list, [346–347](appendix_A.xhtml#pg_346)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从边列表, [346–347](appendix_A.xhtml#pg_346)
- en: loading co-occurrence graphs, [351–353](appendix_A.xhtml#pg_351)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载共现图, [351–353](appendix_A.xhtml#pg_351)
- en: loading edges from file, [347–349](appendix_A.xhtml#pg_347)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件加载边, [347–349](appendix_A.xhtml#pg_347)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_dependencies()</samp>
    function, [355](appendix_A.xhtml#pg_355)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_dependencies()</samp>
    函数, [355](appendix_A.xhtml#pg_355)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_edges()</samp>
    function, [346](appendix_A.xhtml#pg_346)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_edges()</samp>
    函数, [346](appendix_A.xhtml#pg_346)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_multi_csv()</samp>
    function, [353](appendix_A.xhtml#pg_353)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_multi_csv()</samp>
    函数, [353](appendix_A.xhtml#pg_353)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_weighted_csv()</samp>
    function, [348](appendix_A.xhtml#pg_348)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_weighted_csv()</samp>
    函数, [348](appendix_A.xhtml#pg_348)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_weighted_csv2()</samp>
    function, [351](appendix_A.xhtml#pg_351)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_graph_from_weighted_csv2()</samp>
    函数, [351](appendix_A.xhtml#pg_351)
- en: from preconditions, [355–356](appendix_A.xhtml#pg_355)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从前置条件, [355–356](appendix_A.xhtml#pg_355)
- en: from spatial data, [353–355](appendix_A.xhtml#pg_353)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从空间数据, [353–355](appendix_A.xhtml#pg_353)
- en: co-occurrence graphs, [351–353](appendix_A.xhtml#pg_351)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共现图, [351–353](appendix_A.xhtml#pg_351)
- en: cut vertex, [177](chapter11.xhtml#pg_177)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 割点, [177](chapter11.xhtml#pg_177)
- en: cycles, [136](chapter9.xhtml#pg_136)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环, [136](chapter9.xhtml#pg_136)
- en: detecting, [147–148](chapter9.xhtml#pg_147)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测, [147–148](chapter9.xhtml#pg_147)
- en: negative, [96](chapter7.xhtml#pg_96)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负数, [96](chapter7.xhtml#pg_96)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">D</samp>
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">D</samp>
- en: DAG (directed acyclic graph), [136](chapter9.xhtml#pg_136)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAG（有向无环图）, [136](chapter9.xhtml#pg_136)
- en: '*Data Structures and Algorithms* (Aho, Hopcroft, and Ullman), [199](chapter12.xhtml#pg_199),
    [200](chapter12.xhtml#pg_200)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据结构与算法*（Aho, Hopcroft 和 Ullman）, [199](chapter12.xhtml#pg_199), [200](chapter12.xhtml#pg_200)'
- en: '*Data Structures the Fun Way* (Kubica), [xxi](introduction.xhtml#pg_xxi), [358](appendix_B.xhtml#pg_358)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据结构的趣味之道*（Kubica）, [xxi](introduction.xhtml#pg_xxi), [358](appendix_B.xhtml#pg_358)'
- en: degree, [22–24](chapter2.xhtml#pg_22), [335](chapter18.xhtml#pg_335)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 度数, [22–24](chapter2.xhtml#pg_22), [335](chapter18.xhtml#pg_335)
- en: computing, [336](chapter18.xhtml#pg_336)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算, [336](chapter18.xhtml#pg_336)
- en: in-degree, [23](chapter2.xhtml#pg_23)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入度, [23](chapter2.xhtml#pg_23)
- en: out-degree, [23](chapter2.xhtml#pg_23)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出度, [23](chapter2.xhtml#pg_23)
- en: and self-loops, [23](chapter2.xhtml#pg_23), [336](chapter18.xhtml#pg_336)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和自环, [23](chapter2.xhtml#pg_23), [336](chapter18.xhtml#pg_336)
- en: depth-first search, [45–61](chapter4.xhtml#pg_45)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度优先搜索, [45–61](chapter4.xhtml#pg_45)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">depth_first_search_basic_all()</samp>
    function, [49](chapter4.xhtml#pg_49)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">depth_first_search_basic_all()</samp>
    函数, [49](chapter4.xhtml#pg_49)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">depth_first_search_path()</samp>
    function, [50](chapter4.xhtml#pg_50)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">depth_first_search_path()</samp>
    函数, [50](chapter4.xhtml#pg_50)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">depth_first_search_stack()</samp>
    function, [52](chapter4.xhtml#pg_52)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">depth_first_search_stack()</samp>
    函数, [52](chapter4.xhtml#pg_52)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_basic()</samp> function,
    [48](chapter4.xhtml#pg_48)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_basic()</samp> 函数,
    [48](chapter4.xhtml#pg_48)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_cc()</samp> function,
    [55](chapter4.xhtml#pg_55)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_cc()</samp> 函数,
    [55](chapter4.xhtml#pg_55)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_path()</samp> function,
    [49](chapter4.xhtml#pg_49)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dfs_recursive_path()</samp> 函数,
    [49](chapter4.xhtml#pg_49)
- en: recursive algorithm, [48–52](chapter4.xhtml#pg_48)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归算法, [48–52](chapter4.xhtml#pg_48)
- en: stack-based algorithm, [52–55](chapter4.xhtml#pg_52)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于栈的算法, [52–55](chapter4.xhtml#pg_52)
- en: uses
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用
- en: checking reachability, [48](chapter4.xhtml#pg_48)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查可达性, [48](chapter4.xhtml#pg_48)
- en: finding articulation points, [186–191](chapter11.xhtml#pg_186)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找关节点, [186–191](chapter11.xhtml#pg_186)
- en: finding bridges, [180–186](chapter11.xhtml#pg_180)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找桥, [180–186](chapter11.xhtml#pg_180)
- en: finding connected components, [55–57](chapter4.xhtml#pg_55)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找连通分量, [55–57](chapter4.xhtml#pg_55)
- en: finding Hamiltonian paths, [328–330](chapter18.xhtml#pg_328)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找哈密顿路径, [328–330](chapter18.xhtml#pg_328)
- en: Kosaraju-Sharir’s algorithm, [199–204](chapter12.xhtml#pg_199)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kosaraju-Sharir 算法，[199–204](chapter12.xhtml#pg_199)
- en: maximum-flow problem, [241–243](chapter14.xhtml#pg_241)
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大流问题，[241–243](chapter14.xhtml#pg_241)
- en: solving the traveling salesperson problem, [331–334](chapter18.xhtml#pg_331)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 求解旅行商问题，[331–334](chapter18.xhtml#pg_331)
- en: topological sort, [143–147](chapter9.xhtml#pg_143)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拓扑排序，[143–147](chapter9.xhtml#pg_143)
- en: depth-first search forest, [58](chapter4.xhtml#pg_58)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度优先搜索森林，[58](chapter4.xhtml#pg_58)
- en: depth-first search tree, [57–59](chapter4.xhtml#pg_57). *See also* [<samp class="SANS_TheSansMonoCd_W5Regular_11">DFSTreeStats</samp>
    class](#ind5)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度优先搜索树，[57–59](chapter4.xhtml#pg_57)。*另见* [<samp class="SANS_TheSansMonoCd_W5Regular_11">DFSTreeStats</samp>
    类](#ind5)
- en: back edge, [180](chapter11.xhtml#pg_180)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向边，[180](chapter11.xhtml#pg_180)
- en: post-order index, [199](chapter12.xhtml#pg_199)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后序索引，[199](chapter12.xhtml#pg_199)
- en: preorder index, [180](chapter11.xhtml#pg_180)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先序索引，[180](chapter11.xhtml#pg_180)
- en: untraversed edges, [180–181](chapter11.xhtml#pg_180)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未遍历边，[180–181](chapter11.xhtml#pg_180)
- en: uses
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用
- en: finding articulation points, [186](chapter11.xhtml#pg_186)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找关节点，[186](chapter11.xhtml#pg_186)
- en: finding bridges, [180](chapter11.xhtml#pg_180)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找桥梁，[180](chapter11.xhtml#pg_180)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">DFSTreeStats</samp> class, [182](chapter11.xhtml#pg_182)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">DFSTreeStats</samp> 类，[182](chapter11.xhtml#pg_182)
- en: constructor, [183](chapter11.xhtml#pg_183)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[183](chapter11.xhtml#pg_183)
- en: uses
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用
- en: finding articulation points, [188](chapter11.xhtml#pg_188)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找关节点，[188](chapter11.xhtml#pg_188)
- en: finding bridges, [183](chapter11.xhtml#pg_183)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找桥梁，[183](chapter11.xhtml#pg_183)
- en: diameter, [108–110](chapter7.xhtml#pg_108)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直径，[108–110](chapter7.xhtml#pg_108)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">GraphDiameter()</samp> function,
    [109](chapter7.xhtml#pg_109)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">GraphDiameter()</samp> 函数，[109](chapter7.xhtml#pg_109)
- en: Dijkstra, Edsger W., [91](chapter7.xhtml#pg_91)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dijkstra，Edsger W.，[91](chapter7.xhtml#pg_91)
- en: Dijkstra’s algorithm, [91–96](chapter7.xhtml#pg_91)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dijkstra 算法，[91–96](chapter7.xhtml#pg_91)
- en: cost, [93](chapter7.xhtml#pg_93)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[93](chapter7.xhtml#pg_93)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dijkstras()</samp> function, [92](chapter7.xhtml#pg_92)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dijkstras()</samp> 函数，[92](chapter7.xhtml#pg_92)
- en: disconnected graphs, [95–96](chapter7.xhtml#pg_95)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不连通图，[95–96](chapter7.xhtml#pg_95)
- en: nonnegative edges, [91](chapter7.xhtml#pg_91)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非负边，[91](chapter7.xhtml#pg_91)
- en: Dinic, E. A., [246](chapter14.xhtml#pg_246)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dinic，E. A.，[246](chapter14.xhtml#pg_246)
- en: Dinitz, Yefim, [246](chapter14.xhtml#pg_246)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dinitz，Yefim，[246](chapter14.xhtml#pg_246)
- en: Dinitz algorithm, [246–251](chapter14.xhtml#pg_246)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dinitz 算法，[246–251](chapter14.xhtml#pg_246)
- en: directed acyclic graph (DAG), [136](chapter9.xhtml#pg_136)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有向无环图（DAG），[136](chapter9.xhtml#pg_136)
- en: directed edges, [5–7](chapter1.xhtml#pg_5). *See also* [edges](#ind6)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有向边，[5–7](chapter1.xhtml#pg_5)。*另见* [边](#ind6)
- en: directed graphs, [6](chapter1.xhtml#pg_6)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有向图，[6](chapter1.xhtml#pg_6)
- en: disjoint sets, [161](chapter10.xhtml#pg_161), [370](appendix_C.xhtml#pg_370)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不相交集合，[161](chapter10.xhtml#pg_161)，[370](appendix_C.xhtml#pg_370)
- en: distance between nodes, [90](chapter7.xhtml#pg_90)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点之间的距离，[90](chapter7.xhtml#pg_90)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">E</samp>
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">E</samp>
- en: '|*E*|, [4](chapter1.xhtml#pg_4)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '|*E*|，[4](chapter1.xhtml#pg_4)'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Edge</samp> class, [9–10](chapter1.xhtml#pg_9)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Edge</samp> 类，[9–10](chapter1.xhtml#pg_9)
- en: constructor, [9](chapter1.xhtml#pg_9)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[9](chapter1.xhtml#pg_9)
- en: representing undirected edges, [10](chapter1.xhtml#pg_10)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示无向边，[10](chapter1.xhtml#pg_10)
- en: representing unweighted edges, [9](chapter1.xhtml#pg_9)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示无权边，[9](chapter1.xhtml#pg_9)
- en: edges, [4](chapter1.xhtml#pg_4)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边，[4](chapter1.xhtml#pg_4)
- en: destination, [6](chapter1.xhtml#pg_6)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目的地，[6](chapter1.xhtml#pg_6)
- en: directed, [5–7](chapter1.xhtml#pg_5)
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有向，[5–7](chapter1.xhtml#pg_5)
- en: graphical representation, [4–6](chapter1.xhtml#pg_4)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形表示，[4–6](chapter1.xhtml#pg_4)
- en: to indicate order, [136](chapter9.xhtml#pg_136)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示顺序，[136](chapter9.xhtml#pg_136)
- en: negative weight, [96–97](chapter7.xhtml#pg_96)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负权重，[96–97](chapter7.xhtml#pg_96)
- en: origin, [6](chapter1.xhtml#pg_6)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起点，[6](chapter1.xhtml#pg_6)
- en: relaxation, [97](chapter7.xhtml#pg_97)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 松弛，[97](chapter7.xhtml#pg_97)
- en: undirected, [6](chapter1.xhtml#pg_6)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向，[6](chapter1.xhtml#pg_6)
- en: weighted, [5](chapter1.xhtml#pg_5)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带权，[5](chapter1.xhtml#pg_5)
- en: Edmonds, Jack, [246](chapter14.xhtml#pg_246)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Edmonds，Jack，[246](chapter14.xhtml#pg_246)
- en: Edmonds-Karp algorithm, [246–251](chapter14.xhtml#pg_246). *See also* [maximum-flow
    problem](#ind10)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Edmonds-Karp 算法，[246–251](chapter14.xhtml#pg_246)。*另见* [最大流问题](#ind10)
- en: augmenting path, [238](chapter14.xhtml#pg_238)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增广路径，[238](chapter14.xhtml#pg_238)
- en: in bipartite graph matching, [270](chapter15.xhtml#pg_270)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在二分图匹配中，[270](chapter15.xhtml#pg_270)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">edmonds_karp()</samp> function,
    [248](chapter14.xhtml#pg_248)
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">edmonds_karp()</samp> 函数, [248](chapter14.xhtml#pg_248)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_augmenting_path_bfs()</samp>
    function, [246](chapter14.xhtml#pg_246)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_augmenting_path_bfs()</samp>
    函数, [246](chapter14.xhtml#pg_246)
- en: Euclidean distance, [112–113](chapter8.xhtml#pg_112), [354](appendix_A.xhtml#pg_354)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧几里得距离, [112–113](chapter8.xhtml#pg_112), [354](appendix_A.xhtml#pg_354)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">euclidean_dist()</samp> function,
    [112](chapter8.xhtml#pg_112)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">euclidean_dist()</samp> 函数, [112](chapter8.xhtml#pg_112)
- en: Euler, Leonhard, [334](chapter18.xhtml#pg_334), [335](chapter18.xhtml#pg_335)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧拉，莱昂哈德, [334](chapter18.xhtml#pg_334), [335](chapter18.xhtml#pg_335)
- en: Eulerian cycles, [334–341](chapter18.xhtml#pg_334)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧拉回路, [334–341](chapter18.xhtml#pg_334)
- en: finding with Hierholzer’s algorithm, [337](chapter18.xhtml#pg_337)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Hierholzer 算法进行寻找, [337](chapter18.xhtml#pg_337)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">has_eulerian_cycle()</samp> function,
    [336](chapter18.xhtml#pg_336)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">has_eulerian_cycle()</samp> 函数,
    [336](chapter18.xhtml#pg_336)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_eulerian_cycle()</samp> function,
    [336](chapter18.xhtml#pg_336)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_eulerian_cycle()</samp> 函数,
    [336](chapter18.xhtml#pg_336)
- en: Eulerian paths, [334](chapter18.xhtml#pg_334)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧拉路径, [334](chapter18.xhtml#pg_334)
- en: Eulerian trails, [335](chapter18.xhtml#pg_335)
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧拉路径, [335](chapter18.xhtml#pg_335)
- en: expected absorption time, [218](chapter13.xhtml#pg_218)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望吸收时间, [218](chapter13.xhtml#pg_218)
- en: expected hitting time, [218](chapter13.xhtml#pg_218)
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望击中时间, [218](chapter13.xhtml#pg_218)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">F</samp>
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">F</samp>
- en: finishing time, [199](chapter12.xhtml#pg_199)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成时间, [199](chapter12.xhtml#pg_199)
- en: flow, [230–231](chapter14.xhtml#pg_230). *See also* [maximum-flow problem](#ind10)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流, [230–231](chapter14.xhtml#pg_230). *另见* [最大流问题](#ind10)
- en: Floyd-Warshall algorithm, [103–108](chapter7.xhtml#pg_103)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Floyd-Warshall 算法, [103–108](chapter7.xhtml#pg_103)
- en: cost, [105](chapter7.xhtml#pg_105)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本, [105](chapter7.xhtml#pg_105)
- en: dynamic programming, [104](chapter7.xhtml#pg_104)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态规划, [104](chapter7.xhtml#pg_104)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">FloydWarshall()</samp> function,
    [105](chapter7.xhtml#pg_105)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">FloydWarshall()</samp> 函数, [105](chapter7.xhtml#pg_105)
- en: intermediate paths, [103](chapter7.xhtml#pg_103)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间路径, [103](chapter7.xhtml#pg_103)
- en: Ford, L.R., Jr., [237](chapter14.xhtml#pg_237)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 福特，L.R.，Jr.， [237](chapter14.xhtml#pg_237)
- en: Ford-Fulkerson algorithm, [237–246](chapter14.xhtml#pg_237). *See also* [maximum-flow
    problem](#ind10)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 福特-福尔克森算法, [237–246](chapter14.xhtml#pg_237). *另见* [最大流问题](#ind10)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">augmenting_path_dfs_recursive()</samp>
    function, [241](chapter14.xhtml#pg_241)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">augmenting_path_dfs_recursive()</samp>
    函数, [241](chapter14.xhtml#pg_241)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_augmenting_path_dfs()</samp>
    function, [241](chapter14.xhtml#pg_241)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_augmenting_path_dfs()</samp>
    函数, [241](chapter14.xhtml#pg_241)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ford-fulkerson()</samp> function,
    [244](chapter14.xhtml#pg_244)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">ford-fulkerson()</samp> 函数, [244](chapter14.xhtml#pg_244)
- en: forward residual, [235](chapter14.xhtml#pg_235), [239](chapter14.xhtml#pg_239),
    [241](chapter14.xhtml#pg_241)
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正向残量, [235](chapter14.xhtml#pg_235), [239](chapter14.xhtml#pg_239), [241](chapter14.xhtml#pg_241)
- en: Fulkerson, D. R., [237](chapter14.xhtml#pg_237)
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 福尔克森，D. R., [237](chapter14.xhtml#pg_237)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">G</samp>
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">G</samp>
- en: games of chance, [214–215](chapter13.xhtml#pg_214), [219–221](chapter13.xhtml#pg_219)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机会游戏, [214–215](chapter13.xhtml#pg_214), [219–221](chapter13.xhtml#pg_219)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> class, [12–15](chapter1.xhtml#pg_12).
    *See also* [constructing graphs](#ind3)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 类, [12–15](chapter1.xhtml#pg_12).
    *另见* [构建图](#ind3)
- en: constructor, [12](chapter1.xhtml#pg_12), [350](appendix_A.xhtml#pg_350)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数, [12](chapter1.xhtml#pg_12), [350](appendix_A.xhtml#pg_350)
- en: copying, [15](chapter1.xhtml#pg_15)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制, [15](chapter1.xhtml#pg_15)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> method, [12](chapter1.xhtml#pg_12)
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> 方法, [12](chapter1.xhtml#pg_12)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_index_by_name()</samp> method,
    [350](appendix_A.xhtml#pg_350)
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_index_by_name()</samp> 方法,
    [350](appendix_A.xhtml#pg_350)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_in_neighbors()</samp> method,
    [21](chapter2.xhtml#pg_21)
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_in_neighbors()</samp> 方法,
    [21](chapter2.xhtml#pg_21)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_edge()</samp> method, [13](chapter1.xhtml#pg_13)
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_edge()</samp> 方法，[13](chapter1.xhtml#pg_13)
- en: inserting nodes by name, [350–351](appendix_A.xhtml#pg_350)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按名称插入节点，[350–351](appendix_A.xhtml#pg_350)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_node()</samp> method, [14](chapter1.xhtml#pg_14)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_node()</samp> 方法，[14](chapter1.xhtml#pg_14)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_edge()</samp> method, [13](chapter1.xhtml#pg_13)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_edge()</samp> 方法，[13](chapter1.xhtml#pg_13)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_copy()</samp> method, [15](chapter1.xhtml#pg_15)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_copy()</samp> 方法，[15](chapter1.xhtml#pg_15)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_edge_list()</samp> function,
    [13](chapter1.xhtml#pg_13), [100](chapter7.xhtml#pg_100)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_edge_list()</samp> 函数，[13](chapter1.xhtml#pg_13)，[100](chapter7.xhtml#pg_100)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_undirected_neighborhood _subgraph()</samp>
    method, [27](chapter2.xhtml#pg_27)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_undirected_neighborhood_subgraph()</samp>
    方法，[27](chapter2.xhtml#pg_27)
- en: numeric node index, [9](chapter1.xhtml#pg_9), [12](chapter1.xhtml#pg_12)
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字节点索引，[9](chapter1.xhtml#pg_9)，[12](chapter1.xhtml#pg_12)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">remove_edge()</samp> method, [13](chapter1.xhtml#pg_13)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">remove_edge()</samp> 方法，[13](chapter1.xhtml#pg_13)
- en: representing undirected graphs, [12](chapter1.xhtml#pg_12), [14](chapter1.xhtml#pg_14)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示无向图，[12](chapter1.xhtml#pg_12)，[14](chapter1.xhtml#pg_14)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">save_graph_to_csv()</samp> function,
    [350](appendix_A.xhtml#pg_350)
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">save_graph_to_csv()</samp> 函数，[350](appendix_A.xhtml#pg_350)
- en: saving to file, [349–350](appendix_A.xhtml#pg_349)
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存到文件，[349–350](appendix_A.xhtml#pg_349)
- en: graph coloring, [277–297](chapter16.xhtml#pg_277)
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图着色，[277–297](chapter16.xhtml#pg_277)
- en: backtracking search, [284–290](chapter16.xhtml#pg_284)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回溯搜索，[284–290](chapter16.xhtml#pg_284)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_dfs()</samp> function,
    [285](chapter16.xhtml#pg_285)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_dfs()</samp> 函数，[285](chapter16.xhtml#pg_285)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_dfs_pruning()</samp>
    function, [287](chapter16.xhtml#pg_287)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_dfs_pruning()</samp>
    函数，[287](chapter16.xhtml#pg_287)
- en: pruning, [286–290](chapter16.xhtml#pg_286)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪枝，[286–290](chapter16.xhtml#pg_286)
- en: exhaustive search, [283–284](chapter16.xhtml#pg_283)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 穷举搜索，[283–284](chapter16.xhtml#pg_283)
- en: cost, [283](chapter16.xhtml#pg_283)
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[283](chapter16.xhtml#pg_283)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_brute_force()</samp>
    function, [283](chapter16.xhtml#pg_283)
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_brute_force()</samp>
    函数，[283](chapter16.xhtml#pg_283)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">first_unused_color()</samp> function,
    [290](chapter16.xhtml#pg_290)
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">first_unused_color()</samp> 函数，[290](chapter16.xhtml#pg_290)
- en: greedy search, [290–293](chapter16.xhtml#pg_290)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贪婪搜索，[290–293](chapter16.xhtml#pg_290)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_greedy()</samp> function,
    [291](chapter16.xhtml#pg_291)
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_greedy()</samp> 函数，[291](chapter16.xhtml#pg_291)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_graph_coloring_valid()</samp>
    function, [278](chapter16.xhtml#pg_278)
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_graph_coloring_valid()</samp>
    函数，[278](chapter16.xhtml#pg_278)
- en: minimum graph-coloring problem, [278](chapter16.xhtml#pg_278)
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小图着色问题，[278](chapter16.xhtml#pg_278)
- en: node removal, [293–297](chapter16.xhtml#pg_293)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点移除，[293–297](chapter16.xhtml#pg_293)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_removal()</samp> function,
    [293](chapter16.xhtml#pg_293)
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_color_removal()</samp> 函数，[293](chapter16.xhtml#pg_293)
- en: number of states, [282](chapter16.xhtml#pg_282)
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态数量，[282](chapter16.xhtml#pg_282)
- en: problem definition, [278](chapter16.xhtml#pg_278)
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题定义，[278](chapter16.xhtml#pg_278)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">GraphMatrix</samp> class, [16–17](chapter1.xhtml#pg_16),
    [212](chapter13.xhtml#pg_212)
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">GraphMatrix</samp> 类，[16–17](chapter1.xhtml#pg_16)，[212](chapter13.xhtml#pg_212)
- en: constructor, [16](chapter1.xhtml#pg_16)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[16](chapter1.xhtml#pg_16)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> method, [16](chapter1.xhtml#pg_16)
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> 方法，[16](chapter1.xhtml#pg_16)
- en: in random walks, [212](chapter13.xhtml#pg_212)
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在随机游走中，[212](chapter13.xhtml#pg_212)
- en: representing undirected graphs, [16](chapter1.xhtml#pg_16)
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示无向图，[16](chapter1.xhtml#pg_16)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">set_edge()</samp> method, [17](chapter1.xhtml#pg_17)
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">set_edge()</samp> 方法，[17](chapter1.xhtml#pg_17)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">simulate_random_step()</samp>
    method, [212](chapter13.xhtml#pg_212)
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">simulate_random_step()</samp>
    方法，[212](chapter13.xhtml#pg_212)
- en: graphs. *See also* [constructing graphs](#ind3); [edges](#ind6); [nodes](#ind11)
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图。*另见* [构造图](#ind3)；[边](#ind6)；[节点](#ind11)
- en: adjacency list representation, [7–15](chapter1.xhtml#pg_7)
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻接表表示，[7–15](chapter1.xhtml#pg_7)
- en: adjacency matrix representation, [15–17](chapter1.xhtml#pg_15)
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻接矩阵表示，[15–17](chapter1.xhtml#pg_15)
- en: bipartite, [255](chapter15.xhtml#pg_255), [257–273](chapter15.xhtml#pg_257)
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分图，[255](chapter15.xhtml#pg_255)，[257–273](chapter15.xhtml#pg_257)
- en: diameter, [108–110](chapter7.xhtml#pg_108)
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直径，[108–110](chapter7.xhtml#pg_108)
- en: directed, [6](chapter1.xhtml#pg_6)
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有向图，[6](chapter1.xhtml#pg_6)
- en: transpose, [200–201](chapter12.xhtml#pg_200)
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置，[200–201](chapter12.xhtml#pg_200)
- en: undirected, [6](chapter1.xhtml#pg_6)
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向图，[6](chapter1.xhtml#pg_6)
- en: unweighted, [5](chapter1.xhtml#pg_5)
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无权图，[5](chapter1.xhtml#pg_5)
- en: weighted, [5](chapter1.xhtml#pg_5)
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有权图，[5](chapter1.xhtml#pg_5)
- en: graph search, [45](chapter4.xhtml#pg_45)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图搜索，[45](chapter4.xhtml#pg_45)
- en: greedy best-first search, [114–118](chapter8.xhtml#pg_114)
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贪心最佳优先搜索，[114–118](chapter8.xhtml#pg_114)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">greedy_search()</samp> function,
    [115](chapter8.xhtml#pg_115)
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">greedy_search()</samp> 函数，[115](chapter8.xhtml#pg_115)
- en: grid-based graphs, [70–72](chapter5.xhtml#pg_70)
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于网格的图，[70–72](chapter5.xhtml#pg_70)
- en: height, [70](chapter5.xhtml#pg_70)
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度，[70](chapter5.xhtml#pg_70)
- en: indexing, [71](chapter5.xhtml#pg_71)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引，[71](chapter5.xhtml#pg_71)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_grid_graph()</samp> function,
    [71](chapter5.xhtml#pg_71)
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_grid_graph()</samp> 函数，[71](chapter5.xhtml#pg_71)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_grid_with_obstacles()</samp>
    function, [72](chapter5.xhtml#pg_72)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_grid_with_obstacles()</samp>
    函数，[72](chapter5.xhtml#pg_72)
- en: and mazes, [72](chapter5.xhtml#pg_72)
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和迷宫，[72](chapter5.xhtml#pg_72)
- en: obstacles, [71–72](chapter5.xhtml#pg_71)
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 障碍，[71–72](chapter5.xhtml#pg_71)
- en: width, [70](chapter5.xhtml#pg_70)
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度，[70](chapter5.xhtml#pg_70)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">H</samp>
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">H</samp>
- en: Hamilton, William, [326](chapter18.xhtml#pg_326)
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈密尔顿，威廉，[326](chapter18.xhtml#pg_326)
- en: Hamiltonian cycles, [326](chapter18.xhtml#pg_326)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈密尔顿回路，[326](chapter18.xhtml#pg_326)
- en: Hamiltonian paths, [326–330](chapter18.xhtml#pg_326)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈密尔顿路径，[326–330](chapter18.xhtml#pg_326)
- en: finding with depth-first search, [328–330](chapter18.xhtml#pg_328)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用深度优先搜索查找，[328–330](chapter18.xhtml#pg_328)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">hamiltonian_dfs()</samp> function,
    [329](chapter18.xhtml#pg_329)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">hamiltonian_dfs()</samp> 函数，[329](chapter18.xhtml#pg_329)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">hamiltonian_dfs_rec()</samp> function,
    [328](chapter18.xhtml#pg_328)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">hamiltonian_dfs_rec()</samp> 函数，[328](chapter18.xhtml#pg_328)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_hamiltonian_path()</samp> function,
    [327](chapter18.xhtml#pg_327)
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_hamiltonian_path()</samp> 函数，[327](chapter18.xhtml#pg_327)
- en: heaps, [358–361](appendix_B.xhtml#pg_358)
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆，[358–361](appendix_B.xhtml#pg_358)
- en: as an array, [59](chapter4.xhtml#pg_59)
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为数组，[59](chapter4.xhtml#pg_59)
- en: dequeue, [366](appendix_B.xhtml#pg_366)
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出队，[366](appendix_B.xhtml#pg_366)
- en: enqueue, [365](appendix_B.xhtml#pg_365)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入队，[365](appendix_B.xhtml#pg_365)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HeapItem</samp> class, [358](appendix_B.xhtml#pg_358)
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HeapItem</samp> 类，[358](appendix_B.xhtml#pg_358)
- en: max heap, [358](appendix_B.xhtml#pg_358)
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大堆，[358](appendix_B.xhtml#pg_358)
- en: min heap, [358](appendix_B.xhtml#pg_358)
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小堆，[358](appendix_B.xhtml#pg_358)
- en: swapping elements, [359–361](appendix_B.xhtml#pg_359)
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换元素，[359–361](appendix_B.xhtml#pg_359)
- en: heuristic-guided search, [111–132](chapter8.xhtml#pg_111). *See also* [A* search](#ind1);
    [greedy best-first search](#ind7)
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启发式引导搜索，[111–132](chapter8.xhtml#pg_111)。*另见* [A* 搜索](#ind1)；[贪心最佳优先搜索](#ind7)
- en: heuristics, [112–114](chapter8.xhtml#pg_112)
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启发式，[112–114](chapter8.xhtml#pg_112)
- en: admissible, [113](chapter8.xhtml#pg_113)
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可接受的，[113](chapter8.xhtml#pg_113)
- en: Euclidean distance, [112](chapter8.xhtml#pg_112)
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧几里得距离，[112](chapter8.xhtml#pg_112)
- en: hidden Markov model, [210](chapter13.xhtml#pg_210)
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐马尔可夫模型，[210](chapter13.xhtml#pg_210)
- en: hierarchical clustering, [169](chapter10.xhtml#pg_169)
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层次聚类，[169](chapter10.xhtml#pg_169)
- en: Hierholzer, Carl, [337](chapter18.xhtml#pg_337)
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赫尔霍泽，卡尔，[337](chapter18.xhtml#pg_337)
- en: Hierholzer’s algorithm, [337](chapter18.xhtml#pg_337), [341](chapter18.xhtml#pg_341)
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赫尔霍泽算法，[337](chapter18.xhtml#pg_337)，[341](chapter18.xhtml#pg_341)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">hierholzers()</samp> function,
    [338](chapter18.xhtml#pg_338)
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">hierholzers()</samp> 函数，[338](chapter18.xhtml#pg_338)
- en: subloop, [337](chapter18.xhtml#pg_337)
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子循环，[337](chapter18.xhtml#pg_337)
- en: hitting probability, [217](chapter13.xhtml#pg_217)
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命中概率，[217](chapter13.xhtml#pg_217)
- en: hitting time, [217](chapter13.xhtml#pg_217)
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命中时间，[217](chapter13.xhtml#pg_217)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">I</samp>
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">I</samp>
- en: in-degree, [23](chapter2.xhtml#pg_23)
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入度，[23](chapter2.xhtml#pg_23)
- en: independent set, [308–315](chapter17.xhtml#pg_308), [321–322](chapter17.xhtml#pg_321)
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立集，[308–315](chapter17.xhtml#pg_308)，[321–322](chapter17.xhtml#pg_321)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_independent_set_random()</samp>
    function, [322](chapter17.xhtml#pg_322)
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_independent_set_random()</samp>
    函数，[322](chapter17.xhtml#pg_322)
- en: heuristics, [310](chapter17.xhtml#pg_310)
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启发式，[310](chapter17.xhtml#pg_310)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_expansion _options()</samp>
    function, [309](chapter17.xhtml#pg_309)
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_expansion _options()</samp>
    函数，[309](chapter17.xhtml#pg_309)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_greedy()</samp>
    function, [311](chapter17.xhtml#pg_311)
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_greedy()</samp>
    函数，[311](chapter17.xhtml#pg_311)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_lowest _expansion()</samp>
    function, [310](chapter17.xhtml#pg_310)
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_lowest _expansion()</samp>
    函数，[310](chapter17.xhtml#pg_310)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_random()</samp>
    function, [321](chapter17.xhtml#pg_321)
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">independent_set_random()</samp>
    函数，[321](chapter17.xhtml#pg_321)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_independent_set()</samp> function,
    [308](chapter17.xhtml#pg_308)
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_independent_set()</samp> 函数，[308](chapter17.xhtml#pg_308)
- en: maximum, [309](chapter17.xhtml#pg_309)
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大值，[309](chapter17.xhtml#pg_309)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_independent_set _backtracking()</samp>
    function, [313](chapter17.xhtml#pg_313)
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_independent_set _backtracking()</samp>
    函数，[313](chapter17.xhtml#pg_313)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_independent_set_rec()</samp>
    function, [312](chapter17.xhtml#pg_312)
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">maximum_independent_set_rec()</samp>
    函数，[312](chapter17.xhtml#pg_312)
- en: using backtracking search, [311–312](chapter17.xhtml#pg_311)
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用回溯搜索，[311–312](chapter17.xhtml#pg_311)
- en: using greedy search, [309–311](chapter17.xhtml#pg_309)
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用贪婪搜索，[309–311](chapter17.xhtml#pg_309)
- en: in-neighbors, [21](chapter2.xhtml#pg_21)
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入邻居，[21](chapter2.xhtml#pg_21)
- en: '*Introduction to Algorithms* (Cormen, Leiserson, Rivest, and Stein), [323](chapter17.xhtml#pg_323)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*算法导论*（Cormen, Leiserson, Rivest, 和 Stein），[323](chapter17.xhtml#pg_323)'
- en: iterative deepening, [59–61](chapter4.xhtml#pg_59)
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代加深，[59–61](chapter4.xhtml#pg_59)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">J</samp>
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">J</samp>
- en: Jarník, Vojteˇch, [156](chapter10.xhtml#pg_156)
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贾尼克，Vojteˇch，[156](chapter10.xhtml#pg_156)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">K</samp>
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">K</samp>
- en: Kahn, Arthur B., [139](chapter9.xhtml#pg_139)
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡恩，Arthur B.，[139](chapter9.xhtml#pg_139)
- en: Kahn’s algorithm, [139](chapter9.xhtml#pg_139), [143](chapter9.xhtml#pg_143)
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡恩算法，[139](chapter9.xhtml#pg_139)，[143](chapter9.xhtml#pg_143)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_cycle_kahns()</samp> function,
    [148](chapter9.xhtml#pg_148)
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_cycle_kahns()</samp> 函数，[148](chapter9.xhtml#pg_148)
- en: cost, [141](chapter9.xhtml#pg_141)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[141](chapter9.xhtml#pg_141)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Kahns()</samp> function, [140](chapter9.xhtml#pg_140)
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Kahns()</samp> 函数，[140](chapter9.xhtml#pg_140)
- en: Karp, Richard M., [246](chapter14.xhtml#pg_246)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡普，Richard M.，[246](chapter14.xhtml#pg_246)
- en: Kosaraju, S. Rao, [199](chapter12.xhtml#pg_199)
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kosaraju，S. Rao，[199](chapter12.xhtml#pg_199)
- en: Kosaraju-Sharir’s algorithm, [199–204](chapter12.xhtml#pg_199)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kosaraju-Sharir 算法，[199–204](chapter12.xhtml#pg_199)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_reachable()</samp> function,
    [201](chapter12.xhtml#pg_201)
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_reachable()</samp> 函数，[201](chapter12.xhtml#pg_201)
- en: cost, [200](chapter12.xhtml#pg_200)
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[200](chapter12.xhtml#pg_200)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">kosaraju_sharir()</samp> function,
    [201](chapter12.xhtml#pg_201)
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">kosaraju_sharir()</samp> 函数，[201](chapter12.xhtml#pg_201)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_transpose_graph()</samp>
    function, [200](chapter12.xhtml#pg_200)
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_transpose_graph()</samp>
    函数，[200](chapter12.xhtml#pg_200)
- en: transpose graph, [200](chapter12.xhtml#pg_200)
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置图，[200](chapter12.xhtml#pg_200)
- en: Kruskal, Joseph B., [161](chapter10.xhtml#pg_161)
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克鲁斯卡尔，Joseph B.，[161](chapter10.xhtml#pg_161)
- en: Kruskal’s algorithm, [161–164](chapter10.xhtml#pg_161)
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克鲁斯卡尔算法，[161–164](chapter10.xhtml#pg_161)
- en: cost, [161](chapter10.xhtml#pg_161)
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[161](chapter10.xhtml#pg_161)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">kruskals()</samp> function, [162](chapter10.xhtml#pg_162)
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">kruskals()</samp> 函数，[162](chapter10.xhtml#pg_162)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">L</samp>
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">L</samp>
- en: links. *See* [edges](#ind6)
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接。*见* [edges](#ind6)
- en: local clustering coefficient, [24](chapter2.xhtml#pg_24)
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局部聚类系数，[24](chapter2.xhtml#pg_24)
- en: lowest-cost path. *See* [shortest path](#ind14)
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低成本路径。*见* [最短路径](#ind14)
- en: lowest-cost path problem. *See* [shortest-path problem](#ind15)
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低成本路径问题。*见* [最短路径问题](#ind15)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">M</samp>
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">M</samp>
- en: Manhattan distance, [354](appendix_A.xhtml#pg_354)
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曼哈顿距离，[354](appendix_A.xhtml#pg_354)
- en: Markov chain, [210](chapter13.xhtml#pg_210). *See also* [random walks](#ind13)
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马尔可夫链，[210](chapter13.xhtml#pg_210)。*另见* [随机游走](#ind13)
- en: Markov model, [210](chapter13.xhtml#pg_210)
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马尔可夫模型，[210](chapter13.xhtml#pg_210)
- en: matching, [255–257](chapter15.xhtml#pg_255), [263–273](chapter15.xhtml#pg_263).
    *See also* [bipartite matching problem](#ind2)
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配，[255–257](chapter15.xhtml#pg_255)，[263–273](chapter15.xhtml#pg_263)。*另见*
    [二分匹配问题](#ind2)
- en: maximal, [256](chapter15.xhtml#pg_256)
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极大，[256](chapter15.xhtml#pg_256)
- en: maximum-cardinality, [256](chapter15.xhtml#pg_256)
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大基数，[256](chapter15.xhtml#pg_256)
- en: maximum-weight, [256](chapter15.xhtml#pg_256)
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大权重，[256](chapter15.xhtml#pg_256)
- en: perfect, [257](chapter15.xhtml#pg_257)
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完美，[257](chapter15.xhtml#pg_257)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Matching</samp> class, [264–265](chapter15.xhtml#pg_264)
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Matching</samp> 类，[264–265](chapter15.xhtml#pg_264)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_edge()</samp> method, [265](chapter15.xhtml#pg_265)
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_edge()</samp> 方法，[265](chapter15.xhtml#pg_265)
- en: constructor, [264](chapter15.xhtml#pg_264)
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[264](chapter15.xhtml#pg_264)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">remove_edge()</samp> method, [265](chapter15.xhtml#pg_265)
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">remove_edge()</samp> 方法，[265](chapter15.xhtml#pg_265)
- en: matrix transpose, [200](chapter12.xhtml#pg_200)
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵转置，[200](chapter12.xhtml#pg_200)
- en: maximum-flow problem, [229–254](chapter14.xhtml#pg_229)
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大流问题，[229–254](chapter14.xhtml#pg_229)
- en: anti-parallel edges, [231](chapter14.xhtml#pg_231), [253–254](chapter14.xhtml#pg_253)
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向边，[231](chapter14.xhtml#pg_231)，[253–254](chapter14.xhtml#pg_253)
- en: augmenting paths, [238–243](chapter14.xhtml#pg_238)
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增广路径，[238–243](chapter14.xhtml#pg_238)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">augment_multisink_graph()</samp>
    function, [253](chapter14.xhtml#pg_253)
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">augment_multisink_graph()</samp>
    函数，[253](chapter14.xhtml#pg_253)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">augment_multisource_graph()</samp>
    function, [252](chapter14.xhtml#pg_252)
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">augment_multisource_graph()</samp>
    函数，[252](chapter14.xhtml#pg_252)
- en: for bipartite matching, [269–273](chapter15.xhtml#pg_269)
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于二分匹配，[269–273](chapter15.xhtml#pg_269)
- en: capacity, [230–232](chapter14.xhtml#pg_230)
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容量，[230–232](chapter14.xhtml#pg_230)
- en: flow, [230–231](chapter14.xhtml#pg_230)
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量，[230–231](chapter14.xhtml#pg_230)
- en: residual, [239–241](chapter14.xhtml#pg_239)
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 残量，[239–241](chapter14.xhtml#pg_239)
- en: backward, [235](chapter14.xhtml#pg_235), [239](chapter14.xhtml#pg_239), [241](chapter14.xhtml#pg_241)
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向后，[235](chapter14.xhtml#pg_235)，[239](chapter14.xhtml#pg_239)，[241](chapter14.xhtml#pg_241)
- en: forward, [235](chapter14.xhtml#pg_235), [239](chapter14.xhtml#pg_239), [241](chapter14.xhtml#pg_241)
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向前，[235](chapter14.xhtml#pg_235)，[239](chapter14.xhtml#pg_239)，[241](chapter14.xhtml#pg_241)
- en: sink node, [230](chapter14.xhtml#pg_230)
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇节点，[230](chapter14.xhtml#pg_230)
- en: with multiple sinks, [252–253](chapter14.xhtml#pg_252)
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多汇点，[252–253](chapter14.xhtml#pg_252)
- en: source node, [230](chapter14.xhtml#pg_230)
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源节点，[230](chapter14.xhtml#pg_230)
- en: with multiple sources, [251–252](chapter14.xhtml#pg_251)
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多源，[251–252](chapter14.xhtml#pg_251)
- en: maximum likelihood estimation, [221](chapter13.xhtml#pg_221)
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大似然估计，[221](chapter13.xhtml#pg_221)
- en: mazes
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迷宫
- en: generation, [165–169](chapter10.xhtml#pg_165)
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成，[165–169](chapter10.xhtml#pg_165)
- en: representation, [165](chapter10.xhtml#pg_165)
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示，[165](chapter10.xhtml#pg_165)
- en: as a graph, [46](chapter4.xhtml#pg_46)
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为图，[46](chapter4.xhtml#pg_46)
- en: minimum spanning tree, [153–173](chapter10.xhtml#pg_153)
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小生成树，[153–173](chapter10.xhtml#pg_153)
- en: Kruskal’s algorithm, [161–164](chapter10.xhtml#pg_161)
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克鲁斯卡尔算法，[161–164](chapter10.xhtml#pg_161)
- en: maze generation, [165–169](chapter10.xhtml#pg_165)
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迷宫生成，[165–169](chapter10.xhtml#pg_165)
- en: number of edges, [154](chapter10.xhtml#pg_154)
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边的数量，[154](chapter10.xhtml#pg_154)
- en: Prim’s algorithm, [156–161](chapter10.xhtml#pg_156)
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普里姆算法，[156–161](chapter10.xhtml#pg_156)
- en: single linkage clustering, [169–173](chapter10.xhtml#pg_169)
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单链接聚类，[169–173](chapter10.xhtml#pg_169)
- en: modifiable priority queue, [357–368](appendix_B.xhtml#pg_357). *See also* [<samp
    class="SANS_TheSansMonoCd_W5Regular_11">PriorityQueue</samp> class](#ind12)
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可修改优先队列，[357–368](appendix_B.xhtml#pg_357)。*另见* [<samp class="SANS_TheSansMonoCd_W5Regular_11">PriorityQueue</samp>
    类](#ind12)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">N</samp>
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">N</samp>
- en: negative cycles, [96](chapter7.xhtml#pg_96)
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负循环，[96](chapter7.xhtml#pg_96)
- en: negative edge weight. *See also* [edges](#ind6)
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负权边。*另见* [edges](#ind6)
- en: neighborhood subgraphs, [26–30](chapter2.xhtml#pg_26)
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻域子图，[26–30](chapter2.xhtml#pg_26)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_undirected_neighborhood _subgraph()</samp>
    method, [27](chapter2.xhtml#pg_27)
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_undirected_neighborhood _subgraph()</samp>
    方法，[27](chapter2.xhtml#pg_27)
- en: neighbors, [19–22](chapter2.xhtml#pg_19)
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻居，[19–22](chapter2.xhtml#pg_19)
- en: in directed graphs, [21–22](chapter2.xhtml#pg_21)
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在有向图中，[21–22](chapter2.xhtml#pg_21)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_in_neighbors()</samp> method,
    [21](chapter2.xhtml#pg_21)
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_in_neighbors()</samp> 方法，[21](chapter2.xhtml#pg_21)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_neighbors()</samp> method,
    [20](chapter2.xhtml#pg_20)
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_neighbors()</samp> 方法，[20](chapter2.xhtml#pg_20)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_out_neighbors()</samp> method,
    [21](chapter2.xhtml#pg_21)
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_out_neighbors()</samp> 方法，[21](chapter2.xhtml#pg_21)
- en: in-neighbor, [21](chapter2.xhtml#pg_21)
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部邻居，[21](chapter2.xhtml#pg_21)
- en: out-neighbor, [21](chapter2.xhtml#pg_21)
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部邻居，[21](chapter2.xhtml#pg_21)
- en: in undirected graphs, [20–21](chapter2.xhtml#pg_20)
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在无向图中，[20–21](chapter2.xhtml#pg_20)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Node</samp> class, [10–11](chapter1.xhtml#pg_10)
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Node</samp> 类，[10–11](chapter1.xhtml#pg_10)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_edge()</samp> method, [11](chapter1.xhtml#pg_11)
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_edge()</samp> 方法，[11](chapter1.xhtml#pg_11)
- en: constructor, [10](chapter1.xhtml#pg_10)
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[10](chapter1.xhtml#pg_10)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge_list()</samp> method,
    [11](chapter1.xhtml#pg_11)
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge_list()</samp> 方法，[11](chapter1.xhtml#pg_11)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> method, [10](chapter1.xhtml#pg_10)
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> 方法，[10](chapter1.xhtml#pg_10)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_neighbors()</samp> method,
    [20](chapter2.xhtml#pg_20)
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_neighbors()</samp> 方法，[20](chapter2.xhtml#pg_20)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_out_neighbors()</samp> method,
    [21](chapter2.xhtml#pg_21)
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_out_neighbors()</samp> 方法，[21](chapter2.xhtml#pg_21)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_sorted_edge_list()</samp>
    method, [11](chapter1.xhtml#pg_11)
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_sorted_edge_list()</samp>
    方法，[11](chapter1.xhtml#pg_11)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">num_edges()</samp> method, [10](chapter1.xhtml#pg_10)
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">num_edges()</samp> 方法，[10](chapter1.xhtml#pg_10)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">remove_edge()</samp> method, [11](chapter1.xhtml#pg_11)
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">remove_edge()</samp> 方法，[11](chapter1.xhtml#pg_11)
- en: nodes, [4](chapter1.xhtml#pg_4). *See also* [degree](#ind4)
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点，[4](chapter1.xhtml#pg_4)。*另见* [degree](#ind4)
- en: graphical representation, [4](chapter1.xhtml#pg_4)
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形表示，[4](chapter1.xhtml#pg_4)
- en: index, [9](chapter1.xhtml#pg_9), [12](chapter1.xhtml#pg_12)
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引，[9](chapter1.xhtml#pg_9)，[12](chapter1.xhtml#pg_12)
- en: neighbors, [19–22](chapter2.xhtml#pg_19)
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻居，[19–22](chapter2.xhtml#pg_19)
- en: NP-hard problem, [282](chapter16.xhtml#pg_282), [299](chapter17.xhtml#pg_299),
    [323](chapter17.xhtml#pg_323)
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NP-hard 问题，[282](chapter16.xhtml#pg_282)，[299](chapter17.xhtml#pg_299)，[323](chapter17.xhtml#pg_323)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">O</samp>
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">O</samp>
- en: open-neighborhood subgraphs, [27](chapter2.xhtml#pg_27)
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放邻域子图，[27](chapter2.xhtml#pg_27)
- en: order index, [180](chapter11.xhtml#pg_180)
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序索引，[180](chapter11.xhtml#pg_180)
- en: out-degree, [23](chapter2.xhtml#pg_23)
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外度，[23](chapter2.xhtml#pg_23)
- en: out-neighbors, [21](chapter2.xhtml#pg_21)
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部邻居，[21](chapter2.xhtml#pg_21)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">P</samp>
  id: totrans-411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">P</samp>
- en: path planning, [70–73](chapter5.xhtml#pg_70)
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径规划，[70–73](chapter5.xhtml#pg_70)
- en: paths, [31–42](chapter3.xhtml#pg_31), [325–341](chapter18.xhtml#pg_325)
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径，[31–42](chapter3.xhtml#pg_31)，[325–341](chapter18.xhtml#pg_325)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_edge_path_valid()</samp>
    function, [35](chapter3.xhtml#pg_35)
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_edge_path_valid()</samp>
    函数，[35](chapter3.xhtml#pg_35)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_last_path_valid()</samp>
    function, [39](chapter3.xhtml#pg_39)
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_last_path_valid()</samp>
    函数，[39](chapter3.xhtml#pg_39)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_node_path_valid()</samp>
    function, [33](chapter3.xhtml#pg_33)
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_node_path_valid()</samp>
    函数，[33](chapter3.xhtml#pg_33)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">compute_path_cost_from_edges()</samp>
    function, [40](chapter3.xhtml#pg_40)
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">compute_path_cost_from_edges()</samp>
    函数，[40](chapter3.xhtml#pg_40)
- en: cost, [39–41](chapter3.xhtml#pg_39), [90](chapter7.xhtml#pg_90)
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[39–41](chapter3.xhtml#pg_39)，[90](chapter7.xhtml#pg_90)
- en: loop, [91](chapter7.xhtml#pg_91)
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环，[91](chapter7.xhtml#pg_91)
- en: negative edge weight, [91](chapter7.xhtml#pg_91)
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负边权，[91](chapter7.xhtml#pg_91)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PathCost()</samp> expression,
    [90](chapter7.xhtml#pg_90)
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">PathCost()</samp> 表达式，[90](chapter7.xhtml#pg_90)
- en: destination, [32](chapter3.xhtml#pg_32)
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标，[32](chapter3.xhtml#pg_32)
- en: as a list of edges, [34–36](chapter3.xhtml#pg_34)
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为边的列表，[34–36](chapter3.xhtml#pg_34)
- en: as a list of nodes, [33](chapter3.xhtml#pg_33)
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为节点的列表，[33](chapter3.xhtml#pg_33)
- en: as a list of previous nodes, [36–39](chapter3.xhtml#pg_36)
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为前驱节点的列表，[36–39](chapter3.xhtml#pg_36)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_node_path_from_last()</samp>
    function, [37](chapter3.xhtml#pg_37)
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_node_path_from_last()</samp>
    函数，[37](chapter3.xhtml#pg_37)
- en: origin, [32](chapter3.xhtml#pg_32)
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原点，[32](chapter3.xhtml#pg_32)
- en: and reachability, [41–42](chapter3.xhtml#pg_41)
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和可达性，[41–42](chapter3.xhtml#pg_41)
- en: with repeated nodes, [32](chapter3.xhtml#pg_32)
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 含有重复节点，[32](chapter3.xhtml#pg_32)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> class, [81](chapter6.xhtml#pg_81)
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> 类，[81](chapter6.xhtml#pg_81)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Point</samp> class, [170](chapter10.xhtml#pg_170),
    [354](appendix_A.xhtml#pg_354)
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Point</samp> 类，[170](chapter10.xhtml#pg_170)，[354](appendix_A.xhtml#pg_354)
- en: post-order index, [199](chapter12.xhtml#pg_199)
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后序索引，[199](chapter12.xhtml#pg_199)
- en: preorder index, [180](chapter11.xhtml#pg_180)
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先序索引，[180](chapter11.xhtml#pg_180)
- en: Prim, R. C., [156](chapter10.xhtml#pg_156)
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prim, R. C.，[156](chapter10.xhtml#pg_156)
- en: Prim’s algorithm, [156](chapter10.xhtml#pg_156), [161](chapter10.xhtml#pg_161)
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prim 算法，[156](chapter10.xhtml#pg_156)，[161](chapter10.xhtml#pg_161)
- en: cost, [157](chapter10.xhtml#pg_157)
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本，[157](chapter10.xhtml#pg_157)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">prims()</samp> function, [158](chapter10.xhtml#pg_158)
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">prims()</samp> 函数，[158](chapter10.xhtml#pg_158)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PriorityQueue</samp> class, [361–368](appendix_B.xhtml#pg_361)
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">PriorityQueue</samp> 类，[361–368](appendix_B.xhtml#pg_361)
- en: constructor, [362](appendix_B.xhtml#pg_362)
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[362](appendix_B.xhtml#pg_362)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dequeue()</samp> method, [361](appendix_B.xhtml#pg_361),
    [366](appendix_B.xhtml#pg_366)
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dequeue()</samp> 方法，[361](appendix_B.xhtml#pg_361)，[366](appendix_B.xhtml#pg_366)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">_elements_inverted()</samp> method,
    [363](appendix_B.xhtml#pg_363)
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">_elements_inverted()</samp> 方法，[363](appendix_B.xhtml#pg_363)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">enqueue()</samp> method, [361](appendix_B.xhtml#pg_361),
    [365](appendix_B.xhtml#pg_365)
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">enqueue()</samp> 方法，[361](appendix_B.xhtml#pg_361)，[365](appendix_B.xhtml#pg_365)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_priority()</samp> method,
    [361–362](appendix_B.xhtml#pg_361)
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_priority()</samp> 方法，[361–362](appendix_B.xhtml#pg_361)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">in_queue()</samp> method, [361–362](appendix_B.xhtml#pg_361)
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">in_queue()</samp> 方法，[361–362](appendix_B.xhtml#pg_361)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_empty()</samp> method, [361–362](appendix_B.xhtml#pg_361)
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_empty()</samp> 方法，[361–362](appendix_B.xhtml#pg_361)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">peek_top()</samp> method, [362](appendix_B.xhtml#pg_362),
    [368](appendix_B.xhtml#pg_368)
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">peek_top()</samp> 方法，[362](appendix_B.xhtml#pg_362)，[368](appendix_B.xhtml#pg_368)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">peek_top_priority()</samp> method,
    [362](appendix_B.xhtml#pg_362), [368](appendix_B.xhtml#pg_368)
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">peek_top_priority()</samp> 方法，[362](appendix_B.xhtml#pg_362)，[368](appendix_B.xhtml#pg_368)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">peek_top_value()</samp> method,
    [362](appendix_B.xhtml#pg_362), [368](appendix_B.xhtml#pg_368)
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">peek_top_value()</samp> 方法，[362](appendix_B.xhtml#pg_362)，[368](appendix_B.xhtml#pg_368)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">_propagate_down()</samp> method,
    [365](appendix_B.xhtml#pg_365)
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">_propagate_down()</samp> 方法，[365](appendix_B.xhtml#pg_365)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">_propagate_up()</samp> method,
    [364](appendix_B.xhtml#pg_364)
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">_propagate_up()</samp> 方法，[364](appendix_B.xhtml#pg_364)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">size()</samp> method, [362](appendix_B.xhtml#pg_362)
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">size()</samp> 方法，[362](appendix_B.xhtml#pg_362)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">_swap_elements()</samp> method,
    [364](appendix_B.xhtml#pg_364)
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">_swap_elements()</samp> 方法，[364](appendix_B.xhtml#pg_364)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">update_priority()</samp> method,
    [362](appendix_B.xhtml#pg_362), [367](appendix_B.xhtml#pg_367)
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">update_priority()</samp> 方法，[362](appendix_B.xhtml#pg_362)，[367](appendix_B.xhtml#pg_367)
- en: uses
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用
- en: in A* search, [120](chapter8.xhtml#pg_120)
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 A* 搜索中，[120](chapter8.xhtml#pg_120)
- en: in Dijkstra’s algorithm, [93](chapter7.xhtml#pg_93)
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Dijkstra 算法中，[93](chapter7.xhtml#pg_93)
- en: in greedy best-first search, [115](chapter8.xhtml#pg_115)
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在贪心最佳优先搜索中，[115](chapter8.xhtml#pg_115)
- en: in Prim’s algorithm, [158](chapter10.xhtml#pg_158)
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Prim 算法中，[158](chapter10.xhtml#pg_158)
- en: puzzles, [75–88](chapter6.xhtml#pg_75)
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谜题，[75–88](chapter6.xhtml#pg_75)
- en: river-crossing, [78–79](chapter6.xhtml#pg_78), [81–88](chapter6.xhtml#pg_81)
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 河流过河，[78–79](chapter6.xhtml#pg_78)，[81–88](chapter6.xhtml#pg_81)
- en: slider, [79–80](chapter6.xhtml#pg_79)
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑块，[79–80](chapter6.xhtml#pg_79)
- en: solving with search, [85–88](chapter6.xhtml#pg_85)
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用搜索解决，[85–88](chapter6.xhtml#pg_85)
- en: states, [76](chapter6.xhtml#pg_76), [81](chapter6.xhtml#pg_81)
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态，[76](chapter6.xhtml#pg_76)，[81](chapter6.xhtml#pg_81)
- en: state space graph, [78](chapter6.xhtml#pg_78)
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态空间图，[78](chapter6.xhtml#pg_78)
- en: constructing, [77](chapter6.xhtml#pg_77), [80–85](chapter6.xhtml#pg_80)
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造，[77](chapter6.xhtml#pg_77)，[80–85](chapter6.xhtml#pg_80)
- en: Tower of Hanoi, [76–77](chapter6.xhtml#pg_76)
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汉诺塔，[76–77](chapter6.xhtml#pg_76)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Q</samp>
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Q</samp>
- en: queue, [65](chapter5.xhtml#pg_65)
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 队列，[65](chapter5.xhtml#pg_65)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">R</samp>
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">R</samp>
- en: randomized algorithm, [321–323](chapter17.xhtml#pg_321)
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机化算法，[321–323](chapter17.xhtml#pg_321)
- en: random walks, [207–226](chapter13.xhtml#pg_207)
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机游走，[207–226](chapter13.xhtml#pg_207)
- en: absorbing nodes, [217](chapter13.xhtml#pg_217)
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收节点，[217](chapter13.xhtml#pg_217)
- en: absorption probability, [217](chapter13.xhtml#pg_217)
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收概率，[217](chapter13.xhtml#pg_217)
- en: absorption time, [217](chapter13.xhtml#pg_217)
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸收时间，[217](chapter13.xhtml#pg_217)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">choose_next_node()</samp> function,
    [215](chapter13.xhtml#pg_215)
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">choose_next_node()</samp> 函数，[215](chapter13.xhtml#pg_215)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">choose_start()</samp> function,
    [224](chapter13.xhtml#pg_224)
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">choose_start()</samp> 函数，[224](chapter13.xhtml#pg_224)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">estimate_graph_from_random _walks()</samp>
    function, [222](chapter13.xhtml#pg_222)
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">estimate_graph_from_random_walks()</samp>
    函数，[222](chapter13.xhtml#pg_222)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">estimate_start_from_random _walks()</samp>
    function, [225](chapter13.xhtml#pg_225)
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">estimate_start_from_random_walks()</samp>
    函数，[225](chapter13.xhtml#pg_225)
- en: expected absorption time, [218](chapter13.xhtml#pg_218)
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望吸收时间，[218](chapter13.xhtml#pg_218)
- en: expected hitting time, [218](chapter13.xhtml#pg_218)
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望到达时间，[218](chapter13.xhtml#pg_218)
- en: and games of chance, [214–215](chapter13.xhtml#pg_214), [219–221](chapter13.xhtml#pg_219)
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和机会游戏，[214–215](chapter13.xhtml#pg_214)，[219–221](chapter13.xhtml#pg_219)
- en: hitting probability, [217](chapter13.xhtml#pg_217)
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到达概率，[217](chapter13.xhtml#pg_217)
- en: hitting time, [217](chapter13.xhtml#pg_217)
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到达时间，[217](chapter13.xhtml#pg_217)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_valid_probability_graph()</samp>
    function, [211](chapter13.xhtml#pg_211)
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_valid_probability_graph()</samp>
    函数，[211](chapter13.xhtml#pg_211)
- en: learning, [221–226](chapter13.xhtml#pg_221)
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习，[221–226](chapter13.xhtml#pg_221)
- en: random starting node, [224](chapter13.xhtml#pg_224)
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机起始节点，[224](chapter13.xhtml#pg_224)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">random_walk()</samp> function,
    [216](chapter13.xhtml#pg_216)
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">random_walk()</samp> 函数，[216](chapter13.xhtml#pg_216)
- en: self-loops, [208](chapter13.xhtml#pg_208)
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自环，[208](chapter13.xhtml#pg_208)
- en: simulating, [215–216](chapter13.xhtml#pg_215), [224–225](chapter13.xhtml#pg_224)
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟，[215–216](chapter13.xhtml#pg_215)，[224–225](chapter13.xhtml#pg_224)
- en: stationary distribution, [218–219](chapter13.xhtml#pg_218)
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平稳分布，[218–219](chapter13.xhtml#pg_218)
- en: time invariance, [210](chapter13.xhtml#pg_210)
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间不变性，[210](chapter13.xhtml#pg_210)
- en: transition matrix, [211](chapter13.xhtml#pg_211)
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移矩阵，[211](chapter13.xhtml#pg_211)
- en: transition probability, [208](chapter13.xhtml#pg_208), [210–211](chapter13.xhtml#pg_210)
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移概率，[208](chapter13.xhtml#pg_208)，[210–211](chapter13.xhtml#pg_210)
- en: reachability, [41–48](chapter3.xhtml#pg_41)
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可达性，[41–48](chapter3.xhtml#pg_41)
- en: checking, [48](chapter4.xhtml#pg_48), [195](chapter12.xhtml#pg_195)
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查，[48](chapter4.xhtml#pg_48)，[195](chapter12.xhtml#pg_195)
- en: in directed graphs, [193](chapter12.xhtml#pg_193)
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在有向图中，[193](chapter12.xhtml#pg_193)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_reachable()</samp> function,
    [195](chapter12.xhtml#pg_195)
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_reachable()</samp> 函数，[195](chapter12.xhtml#pg_195)
- en: mutually reachable, [195](chapter12.xhtml#pg_195)
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相互可达，[195](chapter12.xhtml#pg_195)
- en: relaxation, [97](chapter7.xhtml#pg_97)
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 松弛，[97](chapter7.xhtml#pg_97)
- en: residual, [239–241](chapter14.xhtml#pg_239)
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 残余，[239–241](chapter14.xhtml#pg_239)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ResidualGraph</samp> class, [235–237](chapter14.xhtml#pg_235),
    [240](chapter14.xhtml#pg_240), [243](chapter14.xhtml#pg_243)
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">ResidualGraph</samp> 类，[235–237](chapter14.xhtml#pg_235)，[240](chapter14.xhtml#pg_240)，[243](chapter14.xhtml#pg_243)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">compute_total_flow()</samp> method,
    [237](chapter14.xhtml#pg_237)
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">compute_total_flow()</samp> 方法，[237](chapter14.xhtml#pg_237)
- en: constructor, [236](chapter14.xhtml#pg_236)
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[236](chapter14.xhtml#pg_236)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> method, [236](chapter14.xhtml#pg_236)
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_edge()</samp> 方法，[236](chapter14.xhtml#pg_236)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_residual()</samp> method,
    [241](chapter14.xhtml#pg_241)
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_residual()</samp> 方法，[241](chapter14.xhtml#pg_241)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_edge()</samp> method, [236](chapter14.xhtml#pg_236)
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_edge()</samp> 方法，[236](chapter14.xhtml#pg_236)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">min_residual_on_path()</samp>
    method, [243](chapter14.xhtml#pg_243)
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">min_residual_on_path()</samp>
    方法，[243](chapter14.xhtml#pg_243)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">update_along_path()</samp> method,
    [243](chapter14.xhtml#pg_243)
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">update_along_path()</samp> 方法，[243](chapter14.xhtml#pg_243)
- en: river-crossing puzzle, [78–79](chapter6.xhtml#pg_78), [81–88](chapter6.xhtml#pg_81)
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 河流过桥谜题，[78–79](chapter6.xhtml#pg_78)，[81–88](chapter6.xhtml#pg_81)
- en: A* search, [124–126](chapter8.xhtml#pg_124)
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A* 搜索，[124–126](chapter8.xhtml#pg_124)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">create_prisoners_and_guards()</samp>
    function, [84](chapter6.xhtml#pg_84)
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">create_prisoners_and_guards()</samp>
    函数，[84](chapter6.xhtml#pg_84)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_generate_heuristic()</samp>
    function, [125](chapter8.xhtml#pg_125)
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_generate_heuristic()</samp>
    函数，[125](chapter8.xhtml#pg_125)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp> function,
    [83](chapter6.xhtml#pg_83)
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp> 函数，[83](chapter6.xhtml#pg_83)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp> function,
    [82](chapter6.xhtml#pg_82)
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp> 函数，[82](chapter6.xhtml#pg_82)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> class, [81](chapter6.xhtml#pg_81)
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> 类，[81](chapter6.xhtml#pg_81)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_state_to_index_map()</samp>
    function, [85](chapter6.xhtml#pg_85)
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_state_to_index_map()</samp>
    函数，[85](chapter6.xhtml#pg_85)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">solve_pg_bfs()</samp> function,
    [86](chapter6.xhtml#pg_86)
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">solve_pg_bfs()</samp> 函数，[86](chapter6.xhtml#pg_86)
- en: states, [78](chapter6.xhtml#pg_78)
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态，[78](chapter6.xhtml#pg_78)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">S</samp>
  id: totrans-519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">S</samp>
- en: self-loops, [22](chapter2.xhtml#pg_22)
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自环，[22](chapter2.xhtml#pg_22)
- en: in adjacency list representation, [22](chapter2.xhtml#pg_22)
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在邻接表表示法中，[22](chapter2.xhtml#pg_22)
- en: in adjacency matrix representation, [22](chapter2.xhtml#pg_22)
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在邻接矩阵表示法中，[22](chapter2.xhtml#pg_22)
- en: and degree, [23](chapter2.xhtml#pg_23)
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及度数，[23](chapter2.xhtml#pg_23)
- en: in random walks, [208](chapter13.xhtml#pg_208)
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在随机游走中，[208](chapter13.xhtml#pg_208)
- en: and undirected graphs, [22](chapter2.xhtml#pg_22)
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及无向图，[22](chapter2.xhtml#pg_22)
- en: Sharir, M., [199](chapter12.xhtml#pg_199)
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sharir, M.，[199](chapter12.xhtml#pg_199)
- en: shortest path, [90–91](chapter7.xhtml#pg_90)
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最短路径，[90–91](chapter7.xhtml#pg_90)
- en: in unweighted graphs, [68](chapter5.xhtml#pg_68)
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在无权图中，[68](chapter5.xhtml#pg_68)
- en: in weighted graphs, [69](chapter5.xhtml#pg_69)
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加权图中，[69](chapter5.xhtml#pg_69)
- en: shortest-path problem, [89–110](chapter7.xhtml#pg_89)
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最短路径问题，[89–110](chapter7.xhtml#pg_89)
- en: all-pairs, [102–103](chapter7.xhtml#pg_102)
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全对，[102–103](chapter7.xhtml#pg_102)
- en: Bellman-Ford algorithm, [97–99](chapter7.xhtml#pg_97)
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bellman-Ford 算法，[97–99](chapter7.xhtml#pg_97)
- en: Dijkstra’s algorithm, [91–96](chapter7.xhtml#pg_91)
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dijkstra 算法，[91–96](chapter7.xhtml#pg_91)
- en: Floyd-Warshall algorithm, [103–108](chapter7.xhtml#pg_103)
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Floyd-Warshall 算法，[103–108](chapter7.xhtml#pg_103)
- en: negative edge weight, [96–97](chapter7.xhtml#pg_96)
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负边权，[96–97](chapter7.xhtml#pg_96)
- en: single-linkage clustering, [169–173](chapter10.xhtml#pg_169)
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单链聚类，[169–173](chapter10.xhtml#pg_169)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Link</samp> class, [171](chapter10.xhtml#pg_171)
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Link</samp> 类，[171](chapter10.xhtml#pg_171)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Point</samp> class, [170–171](chapter10.xhtml#pg_170)
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Point</samp> 类，[170–171](chapter10.xhtml#pg_170)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">single_linkage_clustering()</samp>
    function, [171](chapter10.xhtml#pg_171)
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">single_linkage_clustering()</samp>
    函数，[171](chapter10.xhtml#pg_171)
- en: sink node, [230](chapter14.xhtml#pg_230)
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇聚节点，[230](chapter14.xhtml#pg_230)
- en: slider puzzle, [79–80](chapter6.xhtml#pg_79)
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑块拼图，[79–80](chapter6.xhtml#pg_79)
- en: source node, [230](chapter14.xhtml#pg_230)
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源节点，[230](chapter14.xhtml#pg_230)
- en: spanning tree, [154](chapter10.xhtml#pg_154)
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极小生成树，[154](chapter10.xhtml#pg_154)
- en: spatial data, [353–355](appendix_A.xhtml#pg_353)
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间数据，[353–355](appendix_A.xhtml#pg_353)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_graph_from_points()</samp>
    function, [354](appendix_A.xhtml#pg_354)
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_graph_from_points()</samp>
    函数，[354](appendix_A.xhtml#pg_354)
- en: Euclidean distance, [112](chapter8.xhtml#pg_112), [354](appendix_A.xhtml#pg_354)
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧几里得距离，[112](chapter8.xhtml#pg_112)，[354](appendix_A.xhtml#pg_354)
- en: Manhattan distance, [354](appendix_A.xhtml#pg_354)
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曼哈顿距离，[354](appendix_A.xhtml#pg_354)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Point</samp> class, [354](appendix_A.xhtml#pg_354)
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Point</samp> 类，[354](appendix_A.xhtml#pg_354)
- en: state space graphs, [78](chapter6.xhtml#pg_78)
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态空间图，[78](chapter6.xhtml#pg_78)
- en: constructing, [77](chapter6.xhtml#pg_77), [80–85](chapter6.xhtml#pg_80)
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建，[77](chapter6.xhtml#pg_77)，[80–85](chapter6.xhtml#pg_80)
- en: stationary distribution, [218–219](chapter13.xhtml#pg_218)
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平稳分布，[218–219](chapter13.xhtml#pg_218)
- en: strongly connected components, [193–205](chapter12.xhtml#pg_193)
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强连通分量，[193–205](chapter12.xhtml#pg_193)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_strongly_connected()</samp>
    function, [196](chapter12.xhtml#pg_196)
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_strongly_connected()</samp>
    函数，[196](chapter12.xhtml#pg_196)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_reachable()</samp> function,
    [195](chapter12.xhtml#pg_195)
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_reachable()</samp> 函数，[195](chapter12.xhtml#pg_195)
- en: Kosaraju-Sharir’s algorithm, [199–204](chapter12.xhtml#pg_199)
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kosaraju-Sharir 算法，[199–204](chapter12.xhtml#pg_199)
- en: strongly connected graphs, [194](chapter12.xhtml#pg_194)
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强连通图，[194](chapter12.xhtml#pg_194)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">T</samp>
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">T</samp>
- en: Tarjan, Robert, [180](chapter11.xhtml#pg_180), [204](chapter12.xhtml#pg_204)
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tarjan, Robert，[180](chapter11.xhtml#pg_180)，[204](chapter12.xhtml#pg_204)
- en: task graphs, [138](chapter9.xhtml#pg_138)
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务图，[138](chapter9.xhtml#pg_138)
- en: time invariance, [210](chapter13.xhtml#pg_210)
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间不变性，[210](chapter13.xhtml#pg_210)
- en: topological sort, [135–151](chapter9.xhtml#pg_135)
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拓扑排序，[135–151](chapter9.xhtml#pg_135)
- en: depth-first search, [143–147](chapter9.xhtml#pg_143)
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度优先搜索，[143–147](chapter9.xhtml#pg_143)
- en: order of starting nodes, [146](chapter9.xhtml#pg_146)
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动节点的顺序，[146](chapter9.xhtml#pg_146)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">topological_dfs()</samp> function,
    [143](chapter9.xhtml#pg_143)
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">topological_dfs()</samp> 函数，[143](chapter9.xhtml#pg_143)
- en: detecting cycles, [147–148](chapter9.xhtml#pg_147)
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测环，[147–148](chapter9.xhtml#pg_147)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_cycle_kahns()</samp> function,
    [148](chapter9.xhtml#pg_148)
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">check_cycle_kahns()</samp> 函数，[148](chapter9.xhtml#pg_148)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_topo_ordered()</samp> function,
    [137](chapter9.xhtml#pg_137)
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_topo_ordered()</samp> 函数，[137](chapter9.xhtml#pg_137)
- en: Kahn’s algorithm, [139](chapter9.xhtml#pg_139)
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kahn 算法，[139](chapter9.xhtml#pg_139)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">sort_forward_pointers()</samp>
    function, [149](chapter9.xhtml#pg_149)
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">sort_forward_pointers()</samp>
    函数，[149](chapter9.xhtml#pg_149)
- en: use for ordering lists, [148–150](chapter9.xhtml#pg_148)
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于排序列表，[148–150](chapter9.xhtml#pg_148)
- en: Tower of Hanoi puzzle, [76–77](chapter6.xhtml#pg_76)
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汉诺塔问题，[76–77](chapter6.xhtml#pg_76)
- en: transition matrix, [211](chapter13.xhtml#pg_211)
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移矩阵，[211](chapter13.xhtml#pg_211)
- en: transition probability, [208](chapter13.xhtml#pg_208), [210–211](chapter13.xhtml#pg_210)
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移概率，[208](chapter13.xhtml#pg_208)，[210–211](chapter13.xhtml#pg_210)
- en: learning, [221–226](chapter13.xhtml#pg_221)
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习，[221–226](chapter13.xhtml#pg_221)
- en: transpose graph, [200–201](chapter12.xhtml#pg_200)
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置图，[200–201](chapter12.xhtml#pg_200)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_transpose_graph()</samp>
    function, [200](chapter12.xhtml#pg_200)
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_transpose_graph()</samp>
    函数，[200](chapter12.xhtml#pg_200)
- en: of undirected graphs, [201](chapter12.xhtml#pg_201)
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向图，[201](chapter12.xhtml#pg_201)
- en: traveling salesperson problem, [331–334](chapter18.xhtml#pg_331)
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旅行商问题，[331–334](chapter18.xhtml#pg_331)
- en: heuristics, [333](chapter18.xhtml#pg_333)
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启发式方法，[333](chapter18.xhtml#pg_333)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">tsp_dfs()</samp> function, [333](chapter18.xhtml#pg_333)
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">tsp_dfs()</samp> 函数，[333](chapter18.xhtml#pg_333)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">tsp_dfs_rec()</samp> function,
    [332](chapter18.xhtml#pg_332)
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">tsp_dfs_rec()</samp> 函数，[332](chapter18.xhtml#pg_332)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">U</samp>
  id: totrans-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">U</samp>
- en: undirected edges, [6](chapter1.xhtml#pg_6), [10](chapter1.xhtml#pg_10). *See
    also* [edges](#ind6)
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向边，[6](chapter1.xhtml#pg_6)，[10](chapter1.xhtml#pg_10)。*参见* [edges](#ind6)
- en: undirected graphs, [6](chapter1.xhtml#pg_6), [12](chapter1.xhtml#pg_12), [14](chapter1.xhtml#pg_14)
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向图，[6](chapter1.xhtml#pg_6)，[12](chapter1.xhtml#pg_12)，[14](chapter1.xhtml#pg_14)
- en: Union-Find, [161](chapter10.xhtml#pg_161), [369–373](appendix_C.xhtml#pg_369)
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并查集，[161](chapter10.xhtml#pg_161)，[369–373](appendix_C.xhtml#pg_369)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp> class
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp> 类
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">are_disjoint()</samp> method,
    [372](appendix_C.xhtml#pg_372)
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">are_disjoint()</samp> 方法，[372](appendix_C.xhtml#pg_372)
- en: constructor, [372](appendix_C.xhtml#pg_372)
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数，[372](appendix_C.xhtml#pg_372)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_set()</samp> method, [372](appendix_C.xhtml#pg_372)
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_set()</samp> 方法，[372](appendix_C.xhtml#pg_372)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp> class, [371](appendix_C.xhtml#pg_371)
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp> 类，[371](appendix_C.xhtml#pg_371)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">union_sets()</samp> method, [372](appendix_C.xhtml#pg_372)
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">union_sets()</samp> 方法，[372](appendix_C.xhtml#pg_372)
- en: uses
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用
- en: in Kruskal’s algorithm, [161](chapter10.xhtml#pg_161), [163](chapter10.xhtml#pg_163)
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在克鲁斯卡尔算法中，[161](chapter10.xhtml#pg_161)，[163](chapter10.xhtml#pg_163)
- en: in maze generation, [167](chapter10.xhtml#pg_167)
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在迷宫生成中，[167](chapter10.xhtml#pg_167)
- en: in single-linkage clustering, [171](chapter10.xhtml#pg_171)
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单链接聚类中，[171](chapter10.xhtml#pg_171)
- en: unweighted graphs, [5](chapter1.xhtml#pg_5), [9](chapter1.xhtml#pg_9)
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无权图，[5](chapter1.xhtml#pg_5)，[9](chapter1.xhtml#pg_9)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">V</samp>
  id: totrans-597
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">V</samp>
- en: '|*V*|, [4](chapter1.xhtml#pg_4)'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '|*V*|，[4](chapter1.xhtml#pg_4)'
- en: vertex cover, [315–321](chapter17.xhtml#pg_315)
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶点覆盖，[315–321](chapter17.xhtml#pg_315)
- en: heuristics, [316](chapter17.xhtml#pg_316)
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启发式方法，[316](chapter17.xhtml#pg_316)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_vertex_cover()</samp> function,
    [315](chapter17.xhtml#pg_315)
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">is_vertex_cover()</samp> 函数，[315](chapter17.xhtml#pg_315)
- en: minimum, [316](chapter17.xhtml#pg_316)
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小值，[316](chapter17.xhtml#pg_316)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">minimum_vertex_cover _backtracking()</samp>
    function, [319](chapter17.xhtml#pg_319)
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">minimum_vertex_cover _backtracking()</samp>
    函数，[319](chapter17.xhtml#pg_319)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">minimum_vertex_cover_rec()</samp>
    function, [318](chapter17.xhtml#pg_318)
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">minimum_vertex_cover_rec()</samp>
    函数，[318](chapter17.xhtml#pg_318)
- en: using backtracking search, [318–321](chapter17.xhtml#pg_318)
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用回溯搜索，[318–321](chapter17.xhtml#pg_318)
- en: using greedy search, [316–318](chapter17.xhtml#pg_316)
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用贪心搜索，[316–318](chapter17.xhtml#pg_316)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vertex_cover_greedy_choice()</samp>
    function, [316](chapter17.xhtml#pg_316)
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vertex_cover_greedy_choice()</samp>
    函数，[316](chapter17.xhtml#pg_316)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vertex_cover_greedy()</samp> function,
    [317](chapter17.xhtml#pg_317)
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vertex_cover_greedy()</samp> 函数，[317](chapter17.xhtml#pg_317)
- en: vertexes. *See* [nodes](#ind11)
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶点。*参见* [nodes](#ind11)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">W</samp>
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">W</samp>
- en: walks, [32](chapter3.xhtml#pg_32)
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步态，[32](chapter3.xhtml#pg_32)
- en: weighted edges, [5](chapter1.xhtml#pg_5). *See also* [edges](#ind6)
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加权边，[5](chapter1.xhtml#pg_5)。*参见* [edges](#ind6)
- en: weighted graphs, [5](chapter1.xhtml#pg_5)
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加权图，[5](chapter1.xhtml#pg_5)
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">World</samp> class, [127–130](chapter8.xhtml#pg_127)
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">World</samp> 类，[127–130](chapter8.xhtml#pg_127)
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Z</samp>
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Z</samp>
- en: Zingaro, Daniel, [369](appendix_C.xhtml#pg_369)
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zingaro, Daniel，[369](appendix_C.xhtml#pg_369)
