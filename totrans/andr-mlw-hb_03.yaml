- en: '**2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: ANDROID MALWARE IN THE WILD**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓恶意软件的现状**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: This chapter is an overview of interesting Android malware found in the wild
    since 2010, when the first specimens were discovered. As you’ll soon see, malware
    authors are constantly searching for more profitable ways to abuse Android devices,
    leading to the rise and decline of numerous malware families.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了自2010年以来在野外发现的有趣安卓恶意软件样本，当时首次发现了这些样本。正如你将很快看到的那样，恶意软件作者不断寻求更有利可图的方式来滥用安卓设备，导致了许多恶意软件家族的兴衰。
- en: There are millions of Android malware samples out there, and this chapter could
    not possibly cover them all. Instead, we chose to focus mainly on famous malware
    families with high app counts, likely devised by large-scale malicious enterprises.
    These enterprises are usually interesting in some way, be it for their technological
    capabilities or their operational prowess. We also highlight some malware families
    that haven’t been discussed in publications elsewhere. Even regular readers of
    the Android Security team’s *Android Security Year in Review* reports should discover
    new information here. For each malware family, we discuss its technical properties,
    its interesting features, and its place in Android malware history.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有数百万个安卓恶意软件样本，本章无法涵盖所有样本。我们选择主要集中于一些著名的恶意软件家族，这些家族的应用数量较大，可能是由大规模恶意企业设计的。这些企业通常在某种程度上很有趣，无论是技术能力还是运营能力。我们还重点介绍了一些在其他出版物中没有讨论过的恶意软件家族。即使是安卓安全团队的常规读者，也应该能在这里发现新信息。对于每个恶意软件家族，我们讨论其技术特性、其有趣的特点以及其在安卓恶意软件历史中的地位。
- en: '**NOTE**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We refer to malware samples by their package name, their version code, and
    the first four digits of the malware file’s SHA-256 hash, like this:* com.batterypro
    *(v4, 29ee). Using this information, you should be able to find the malware samples
    in your own malware file databases.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们通过其包名、版本号以及恶意软件文件SHA-256哈希值的前四位来引用恶意软件样本，格式如下：* com.batterypro *(v4, 29ee)。通过这些信息，你应该能够在自己的恶意软件文件数据库中找到相应的恶意软件样本。*'
- en: '**The Early Years: 2008 to 2012**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**初期阶段：2008到2012年**'
- en: Hackers were quick to discover Android. The platform launched in 2008, when
    criminal malware enterprises had already begun abusing other operating systems.
    Eighteen months later, its swiftly acquired market share had made it commercially
    interesting to criminal malware authors, and in 2010, the first Android malware
    sample appeared on Google Play (known as Android Market at the time).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客们很快就发现了安卓。该平台于2008年推出，而在此之前，犯罪恶意软件企业已经开始滥用其他操作系统。18个月后，安卓迅速占领市场，吸引了恶意软件作者的注意，2010年，第一个安卓恶意软件样本出现在Google
    Play（当时称为安卓市场）。
- en: To this day, nearly all known Android malware aims to make money through illicit
    methods. Contrast this with the much older world of DOS, Windows, and Linux malware,
    which saw decades of technical innovation before profit became the primary motive
    of malware authors. By comparison, Android malware remains primarily interesting
    for its exploration of all the new ways smartphones can be exploited to make money
    at scale in ways that are not possible on desktop systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 直到今天，几乎所有已知的安卓恶意软件都旨在通过非法手段赚钱。与DOS、Windows和Linux恶意软件的历史相比，后者在几十年的技术创新后，才将盈利作为恶意软件作者的主要动机。相比之下，安卓恶意软件主要的研究价值在于探索智能手机能够以规模化方式赚取金钱的新方式，这些方式在桌面系统上是无法实现的。
- en: 'After the first high-profile malware incidents, the Android Security team developed
    a plan to keep Google Play free of malware. To evade the new defenses, malware
    authors adopted a few strategies: continuing to develop malware for release on
    Google Play, which required investment in techniques for bypassing Google Play’s
    malware scanning; developing malware for distribution through third-party websites
    and app stores (called sideloading), which required investment in marketing methods
    that would appeal to users; and developing malware to be preinstalled on devices,
    which required investment in social engineering and strategies such as setting
    up fake business fronts to deceive device manufacturers into including malware
    on their devices as part of the manufacturing process. This chapter details malware
    distributed in all of these ways.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次发生高调的恶意软件事件后，Android 安全团队制定了一个计划，以保持 Google Play 免受恶意软件的侵害。为了躲避新的防御，恶意软件作者采用了一些策略：继续开发恶意软件并发布到
    Google Play，这需要投入绕过 Google Play 恶意软件扫描的技术；开发通过第三方网站和应用商店（称为侧载）分发的恶意软件，这需要投入吸引用户的营销方法；以及开发预安装在设备上的恶意软件，这需要投入社交工程和策略，例如设立虚假的商业前台，欺骗设备制造商在其设备中预装恶意软件作为生产过程的一部分。本章详细介绍了通过这些方式分发的恶意软件。
- en: '***DroidSMS***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***DroidSMS***'
- en: In August 2010, the Russian security company Kaspersky discovered malware outside
    of Google Play. Dubbed DroidSMS and described in a blog post titled “First SMS
    Trojan for Android,” this is often considered to be the first Android malware
    family.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2010 年 8 月，俄罗斯安全公司卡巴斯基发现了 Google Play 外的恶意软件。这个恶意软件被称为 DroidSMS，并在一篇名为《Android
    首个短信木马》的博客文章中进行了描述，它通常被认为是第一个 Android 恶意软件家族。
- en: DroidSMS was used to send costly SMS messages from user devices to a premium
    SMS number that fraudsters had registered earlier. When users installed and ran
    DroidSMS, the app sent a hidden message without the user noticing. The user would
    then get billed a small sum of money for the message, which would go to the malware
    authors. Affected users only learned about this illicit charge the next time they
    received their phone bill, and only if they cared to check their bill for inexplicable
    charges.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DroidSMS 被用来从用户设备发送昂贵的短信到诈骗者之前注册的高级短信号码。当用户安装并运行 DroidSMS 时，应用会在用户没有察觉的情况下发送一条隐藏的短信。用户随后会被收取一小笔费用，这笔费用将支付给恶意软件作者。受影响的用户只有在下次收到手机账单时才会得知这一非法收费，前提是他们关心并检查账单中的无法解释的费用。
- en: All of this secret SMS activity happened within the boundaries of Android’s
    platform security model. In particular, Android’s permission system worked as
    designed, displaying a dialog that asked users whether to allow DroidSMS to send
    messages. At the time, Android often let users make security-relevant decisions.
    After all, Android was an open system, the prevalent way of thinking went, and
    so users should make their own security and privacy choices; Android and Google
    Play would merely provide users with the information needed to make such decisions.
    However, apps that abused many users’ lack of security mindset soon began appearing
    on Google Play.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些秘密短信活动都发生在 Android 平台安全模型的范围内。特别是，Android 的权限系统按照设计工作，显示一个对话框询问用户是否允许 DroidSMS
    发送短信。当时，Android 经常让用户做出与安全相关的决定。毕竟，Android 是一个开放系统，普遍的观点认为，用户应该做出自己的安全和隐私选择；Android
    和 Google Play 只是提供用户做出这些决策所需的信息。然而，滥用许多用户缺乏安全意识的应用很快开始出现在 Google Play 上。
- en: In retrospect, the idea of leaving security and privacy decisions up to the
    users may have seemed reasonable in the days when nobody but technology enthusiasts
    used Android. But as soon as it began to gain widespread appeal, this system broke
    down. It is not rational to expect billions of everyday users to understand the
    intricacies of Android’s permission system. The Android team eventually realized
    this and retrofitted Android with the many “safe-by-default” techniques that now
    protect users from straightforward abuse like that perpetrated by DroidSMS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾过去，将安全和隐私决策交给用户的想法，在只有技术爱好者使用 Android 的时代可能看起来是合理的。但是，一旦 Android 开始获得广泛的吸引力，这一系统就出现了问题。指望数十亿普通用户理解
    Android 权限系统的复杂性是不理性的。Android 团队最终意识到这一点，并对 Android 进行了许多“默认安全”技术的改进，这些技术现在能够保护用户免受像
    DroidSMS 这样直接的滥用。
- en: '***DroidDream***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***DroidDream***'
- en: 'A few months after DroidSMS appeared, the Android malware situation escalated.
    In March 2011, San Francisco–based security company Lookout Mobile Security discovered
    a new trojan on Google Play that it named DroidDream. As described in Lookout’s
    blog post “Security Alert: DroidDream Malware Found in Official Android Market,”
    DroidDream went further than previous Android malware, as it broke out of the
    boundaries of the Android security model. Using a privilege escalation exploit
    called Rage Against the Cage (also known as CVE-2010-EASY), DroidDream exploited
    a vulnerability in the Android operating system to gain root privileges.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DroidSMS 出现几个月后，Android 恶意软件的形势急剧恶化。2011 年 3 月，总部位于旧金山的安全公司 Lookout Mobile Security
    在 Google Play 上发现了一种新型木马，命名为 DroidDream。正如 Lookout 博客文章《安全警报：在官方 Android 市场中发现
    DroidDream 恶意软件》所描述，DroidDream 比以往的 Android 恶意软件更为严重，因为它突破了 Android 安全模型的边界。DroidDream
    利用了一个名为 Rage Against the Cage（也称为 CVE-2010-EASY）的特权升级漏洞，通过该漏洞，DroidDream 利用 Android
    操作系统中的漏洞获得了 root 权限。
- en: DroidDream was a turning point for the Android Security team. Because affected
    devices were permanently compromised and users could not reset them to a secure
    state, it became mandatory for Google Play apps to be scanned for safety before
    getting into users’ hands. The Android Security team quickly announced that they
    would remove existing DroidDream installations from devices, which would save
    at least those users that had installed but not yet opened infected apps.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DroidDream 是 Android 安全团队的一个转折点。由于受影响的设备已经被永久性地入侵，用户无法将其重置为安全状态，因此 Google Play
    应用必须在用户使用之前进行安全扫描。Android 安全团队迅速宣布，他们将从设备中删除现有的 DroidDream 安装，这至少能拯救那些已经安装但尚未打开被感染应用的用户。
- en: Remote removal of apps had not previously been attempted, and removing DroidDream
    from devices relied on a hack built into the Google Play app. Due to the obvious
    value of remote removal, the Android Security team added it as an official feature
    to Google Play Protect. Nowadays, the Android Security team regularly protects
    Android users by remotely removing suspected malware apps in high-risk categories,
    such as bank phishing or ransomware, and rooting trojans like DroidDream.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以前没有尝试过远程删除应用程序，而从设备中删除 DroidDream 依赖于 Google Play 应用内置的黑客技术。由于远程删除的明显价值，Android
    安全团队将其作为一个官方功能添加到了 Google Play Protect 中。如今，Android 安全团队定期通过远程删除高风险类别（如银行钓鱼或勒索病毒）和类似
    DroidDream 的 root 木马恶意软件，来保护 Android 用户。
- en: '***The Wallpaper Family***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***壁纸家族***'
- en: This large SMS fraud malware family from the early Android days pretended to
    offer home screen wallpapers for download. Despite its size, this malware family
    has not yet been publicly described.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个来自 Android 初期的大型短信欺诈恶意软件家族假装提供主屏幕壁纸供下载。尽管它的规模很大，但这个恶意软件家族至今未被公开描述。
- en: Like all early Android malware, it did not protect itself against analysis.
    Its apps executed their malicious payload without applying any obfuscation or
    other trickery to throw off security researchers. For example, [Listing 2-1](ch02.xhtml#ch2lis1)
    shows the SMS fraud functionality in *com.kk4.SkypeWallpapers* (v3, 8cab). The
    app checks whether it is running on a Russian phone and, if so, executes the `makeRelation`
    method to send an undisclosed premium SMS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有早期 Android 恶意软件一样，它没有对分析进行保护。它的应用程序在执行恶意 payload 时没有采用任何混淆或其他技术来迷惑安全研究人员。例如，[清单
    2-1](ch02.xhtml#ch2lis1) 显示了 *com.kk4.SkypeWallpapers* (v3, 8cab) 中的短信欺诈功能。该应用程序检查是否运行在俄罗斯的手机上，如果是，它会执行
    `makeRelation` 方法来发送未公开的高级短信。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 2-1: Premium SMS fraud in* com.kk4.SkypeWallpapers *(v3, 8cab)*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-1：* com.kk4.SkypeWallpapers *(v3, 8cab) 中的高级短信欺诈功能*'
- en: The method name `makeRelation` is characteristic of this family. Readers with
    access to Android malware databases can search for it to discover additional samples.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`makeRelation` 这个方法名称是这个家族的特征。具有访问 Android 恶意软件数据库的读者可以搜索该方法，发现更多样本。'
- en: '***The Camera Family***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***相机家族***'
- en: This large SMS fraud malware family is unnamed and has no publicly available
    documentation. Often disguised as camera apps or other system utilities, it became
    active in mid-2011 and proved more sophisticated than the Wallpaper family.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个大型的短信欺诈恶意软件家族没有名称，也没有公开的文档。它通常伪装成相机应用或其他系统工具，于 2011 年中期活跃起来，并且比壁纸家族更为复杂。
- en: Rather than merely targeting users in Russia, this malware family collected
    information about the device’s country and mobile carrier, sent it to a command-and-control
    server, and received the phone number and SMS message text to send. This technique
    allowed it to operate in different countries and expand into new countries, without
    updating the apps. [Listing 2-2](ch02.xhtml#ch2lis2), taken from *com.batterypro*
    (v4, 29ee), shows how this device profiling data was collected.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与仅仅针对俄罗斯用户不同，这种恶意软件家族收集了设备的国家和移动运营商信息，将其发送到指挥与控制服务器，并接收要发送的电话号码和短信内容。这个技术使其能够在不同的国家运行并扩展到新的国家，而无需更新应用程序。[列表
    2-2](ch02.xhtml#ch2lis2)来自*com.batterypro*（v4，29ee），展示了如何收集这些设备配置文件数据。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 2-2: The* com.batterypro *(v4, 29ee) app collects device information
    that is later used to customize SMS fraud.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-2：* com.batterypro *(v4，29ee) 应用收集设备信息，稍后用于定制短信欺诈。*'
- en: Benign and malicious apps alike commonly record the data points collected by
    this app, like the device’s International Mobile Equipment Identity (IMEI). As
    IMEI numbers are globally unique identifiers, they can be used to fingerprint
    devices, identify individual users, and associate other collected data with a
    particular device.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是良性应用还是恶意应用，通常都会记录这个应用收集的数据点，比如设备的国际移动设备身份码（IMEI）。由于IMEI号码是全球唯一的标识符，它们可以用于对设备进行指纹识别，识别单个用户，并将其他收集的数据与特定设备关联起来。
- en: To curb the abuse of IMEIs for user tracking, Android 10 began guarding access
    to the IMEI and other similar hardware identifiers by using a special permission
    called `READ_PRIVILEGED_PHONE_STATE`. This permission is not available to apps
    on Google Play. Apps that want to access these hardware identifiers must find
    other distribution opportunities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遏制IMEI在用户追踪中的滥用，Android 10开始通过使用一种名为`READ_PRIVILEGED_PHONE_STATE`的特殊权限来保护对IMEI和其他类似硬件标识符的访问。这个权限对Google
    Play上的应用程序不可用。想要访问这些硬件标识符的应用程序必须寻找其他分发机会。
- en: '***Cricketland***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Cricketland***'
- en: While SMS fraud accounted for about 20 percent of the Android malware in 2012
    and received the most public attention, the availability of sensitive data on
    mobile phones also gave rise to spyware. In fact, spyware was the most common
    malware category in the early days of Google Play—and among the early spyware
    families, Cricketland was the largest.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然短信欺诈在2012年占据了大约20%的安卓恶意软件，并获得了最多的公众关注，但移动电话上敏感数据的可用性也催生了间谍软件。事实上，间谍软件在Google
    Play初期是最常见的恶意软件类别——在早期的间谍软件家族中，Cricketland是最大的。
- en: Publicly undocumented until now, Cricketland was an SDK embedded in seemingly
    legitimate apps from Vietnam. It is not clear whether app developers using this
    SDK knew of its spyware functionality. Without user consent, the SDK would send
    the user’s contact list information to a remote server. The Android Security team
    named it Cricketland after the SDK package name, *net.cricketland*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，Cricketland一直没有公开文档，它是一个嵌入在看似合法的越南应用程序中的SDK。目前尚不清楚使用这个SDK的应用开发者是否知道它的间谍软件功能。在未经用户同意的情况下，这个SDK会将用户的联系人列表信息发送到远程服务器。Android安全团队将其命名为Cricketland，源于SDK包名*net.cricketland*。
- en: Cricketland’s code was not very sophisticated. When an app with Cricketland
    initialized the SDK, it collected all kinds of information and uploaded it to
    a page hosted on Google Drive. One example of an app using the Cricketland SDK
    was *masteryourgames.amazingalextoolbox* (v12, c4f0). Its data collection code
    is shown in [Listing 2-3](ch02.xhtml#ch2lis3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Cricketland的代码并不复杂。当一个包含Cricketland的应用初始化SDK时，它会收集各种信息并上传到一个托管在Google Drive上的页面上。使用Cricketland
    SDK的一个应用示例是*masteryourgames.amazingalextoolbox*（v12，c4f0）。它的数据收集代码见[列表 2-3](ch02.xhtml#ch2lis3)。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 2-3: Cricketland data collection code in* masteryourgames.amazingalextoolbox
    *(v12, c4f0)*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-3：Cricketland 数据收集代码在* masteryourgames.amazingalextoolbox *（v12，c4f0）中*'
- en: The Android Security team considers any app that collects a user’s contact list
    without consent to be spyware. Collecting phone location or account information
    without user consent is also problematic and covered in Google’s Mobile Unwanted
    Software policy. As this account information includes all accounts registered
    on a device, malware can use it to connect a user’s email address with their LinkedIn
    profile, X name, Facebook page, and more.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Android安全团队认为，任何未经用户同意收集用户联系人列表的应用程序都可以被视为间谍软件。未经用户同意收集电话位置或账户信息也是有问题的，并且在Google的移动不良软件政策中有所涵盖。由于这些账户信息包括设备上注册的所有账户，恶意软件可以利用这些信息将用户的电子邮件地址与其LinkedIn档案、X账号、Facebook页面等进行关联。
- en: The danger of collecting account information to build cross-platform user profiles
    should be obvious. In Android 8.0 (Oreo), the Android team removed the ability
    to silently collect this information without user consent.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 收集账户信息以建立跨平台用户档案的危险显而易见。在Android 8.0（Oreo）中，Android团队移除了在未获得用户同意的情况下悄悄收集这些信息的能力。
- en: '***Dougaleaker***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Dougaleaker***'
- en: Another notable spyware network from 2012 was Dougaleaker, which targeted the
    contact list information of Japanese nationals. It was discovered by US-based
    security company McAfee and described in a blog post titled “Android Malware Promises
    Video While Stealing Contacts.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得注意的间谍网络是Dougaleaker，它在2012年针对日本国民的联系人列表信息。该网络由美国安全公司McAfee发现，并在一篇名为“Android恶意软件承诺视频同时窃取联系人”的博客文章中进行了描述。
- en: Japanese police eventually arrested the authors of Dougaleaker, who went on
    trial for spyware distribution but were found not guilty by a Japanese court.
    Little information about this case is available in the English-language press,
    but the article “5 Tokyo Devs Cuffed over ‘The Movie’ Android App Scam,” published
    in *The Register*, provides some background.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 日本警方最终逮捕了Dougaleaker的作者，并以间谍软件分发罪进行审判，但日本法院判定他们无罪。关于此案件的英文媒体报道较少，但《The Register》发布的文章《5名东京开发者因‘电影’Android应用骗局被捕》提供了一些背景。
- en: After a user launches a Dougaleaker app, for example *jp.co.dougastation* (v2,
    83fd), the spyware functionality sends their contact list information to a web
    server ([Listing 2-4](ch02.xhtml#ch2lis4)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户启动Dougaleaker应用时，例如*jp.co.dougastation*（v2, 83fd），间谍软件功能会将其联系人列表信息发送到一个Web服务器（[列表2-4](ch02.xhtml#ch2lis4)）。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 2-4: Dougaleaker spyware code in* jp.co.dougastation *(v2, 83fd)*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-4：Dougaleaker间谍软件代码在* jp.co.dougastation *(v2, 83fd)中*'
- en: 'Dougaleaker’s limited spyware functionality and narrow target suggest that
    it was created for just one purpose: to map the social connections of all people
    in Japan. Due to the app’s very high installation numbers, the authors were likely
    successful in their goal.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Dougaleaker的间谍软件功能有限且目标狭窄，这表明它的创作者仅有一个目的：绘制所有日本人的社交关系图。由于该应用的安装量非常高，作者们很可能在他们的目标上取得了成功。
- en: '***BeeKeeper***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***BeeKeeper***'
- en: BeeKeeper is another previously undescribed large-scale SMS fraud family that
    targeted Russian Android users. To gain installations, the malware apps impersonated
    popular brands. The Android Security team called the family BeeKeeper because
    it mostly targeted mobile phones on the Russian Beeline mobile carrier network.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: BeeKeeper是另一个之前未被描述的大规模SMS欺诈家族，目标是俄罗斯的Android用户。为了获得安装量，恶意软件应用伪装成流行品牌。Android安全团队将这个家族命名为BeeKeeper，因为它主要针对俄罗斯Beeline移动运营商网络上的手机。
- en: 'On a technical level, BeeKeeper was interesting for two reasons. First, it
    used a command-and-control structure that was powerful for its time: it supported
    more than a dozen commands, with names such as `sendContactList`, `sendSms`, `catchSms`,
    and `openUrl`. The server controlled every action BeeKeeper took on a device.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术层面，BeeKeeper有两个有趣的地方。首先，它使用了一种强大的指挥和控制结构：支持十多个命令，命令名如`sendContactList`、`sendSms`、`catchSms`和`openUrl`。服务器控制BeeKeeper在设备上执行的每一个动作。
- en: Second, BeeKeeper used reflection as an obfuscation technique to hide its behavior
    from static analysis. *Reflection* is a Java feature that allows developers to
    examine, modify, or invoke classes, objects, and methods in a program. The use
    of reflection introduces a level of indirectness that makes it difficult for static
    app analysis to succeed. In particular, it allows the code to reference classes
    and methods through obfuscated, encoded, and encrypted strings.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，BeeKeeper使用反射作为一种混淆技术，来隐藏其行为，以防止静态分析。*反射*是Java的一项特性，允许开发人员检查、修改或调用程序中的类、对象和方法。反射的使用引入了一种间接性，使得静态应用分析变得困难。特别是，它允许代码通过混淆、编码和加密的字符串引用类和方法。
- en: '[Listing 2-5](ch02.xhtml#ch2lis5) shows how BeeKeeper used reflection to dynamically
    resolve the Android API method `SmsManager.sendTextMessage` and then send texts
    using that method.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表2-5](ch02.xhtml#ch2lis5)展示了BeeKeeper如何使用反射动态解析Android API方法`SmsManager.sendTextMessage`，然后利用该方法发送短信。'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 2-5: The app* com.qiwi.application *(v4, 37f3) impersonated the digital
    wallet service Qiwi and used reflection to hide from static analysis.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-5：应用* com.qiwi.application *(v4, 37f3)伪装成数字钱包服务Qiwi，并使用反射来隐藏静态分析。*'
- en: First, the malware creates an object of the Android `SmsManager` class that
    has the ability to send SMS messages. Then, it looks up the `sendTextMessage`
    method with its five `String` and `PendingIntent` arguments. Finally, it calls
    the `sendTextMessage` API to send the costly SMS to a concrete phone number.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，恶意软件创建了一个 Android `SmsManager` 类的对象，该对象具备发送短信的能力。然后，它查找带有五个 `String` 和 `PendingIntent`
    参数的 `sendTextMessage` 方法。最后，它调用 `sendTextMessage` API，将费用较高的短信发送到指定的电话号码。
- en: To this day, reflection is one of the most common techniques used to evade malware
    analysis and detection. Usually reflection-based obfuscation is not as easy to
    understand as it is in BeeKeeper’s case, because modern Android malware typically
    encrypts and obfuscates the string arguments passed to the reflection APIs. Some
    malware analysis tools can’t handle this combination of encryption and reflection,
    so they aren’t able to effectively analyze modern Android malware.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 直到今天，反射仍然是规避恶意软件分析和检测的常用技术之一。通常，基于反射的混淆不像 BeeKeeper 的情况那样容易理解，因为现代 Android 恶意软件通常会加密和混淆传递给反射
    API 的字符串参数。一些恶意软件分析工具无法处理这种加密与反射相结合的情况，因此无法有效分析现代 Android 恶意软件。
- en: In more extreme cases, the arguments passed to the reflection API are not made
    available in the code at all. We have seen such arguments loaded from an app’s
    asset files or even the internet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些极端情况下，传递给反射 API 的参数根本不会出现在代码中。我们曾看到这些参数从应用的资产文件或甚至是互联网加载。
- en: '***Dogowar***'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Dogowar***'
- en: On a lighter note, next we’ll highlight an Android malware specimen that was
    not created for profit. Android.Dogowar, first described by US-based security
    company Symantec in an August 2011 blog post titled “Animal Rights Protesters
    Use Mobile Means for Their Message,” modified a legitimate yet controversial game,
    *Dog Wars*, by adding two pieces of functionality. First, it sent the text message
    “I take pleasure in hurting small animals, just thought you should know that”
    to all contacts from the device’s contact list. Second, it sent an SMS to the
    premium number 73822 to subscribe the device to a news service about animal welfare
    topics provided by People for the Ethical Treatment of Animals (PETA). Clearly,
    the malware developer took offense at the simulated dog-fighting game and everybody
    playing it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 转到轻松一点的内容，接下来我们将介绍一个并非为了盈利而创建的 Android 恶意软件样本。Android.Dogowar，首次由美国安全公司 Symantec
    在 2011 年 8 月的博客文章《动物权利抗议者通过移动手段传达信息》中描述，修改了一款合法但具有争议的游戏 *Dog Wars*，并添加了两个功能。首先，它向设备联系人列表中的所有联系人发送了短信：“我喜欢伤害小动物，只是想让你知道这一点。”其次，它向收费号码
    73822 发送了一条短信，订阅了一个由“美国动物保护协会”（PETA）提供的关于动物福利的新闻服务。显然，恶意软件开发者对这款模拟狗斗游戏和所有参与其中的玩家感到不满。
- en: '***Other Early Android Malware***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***其他早期的 Android 恶意软件***'
- en: Other examples of early malware found on Google Play include Plankton, DroidKungFu,
    ggTracker, DroidDream Light, and Gingermaster. Because security researchers have
    thoroughly described these, we don’t cover them here. You can find more information
    about them with a quick web search.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其他早期在 Google Play 上发现的恶意软件示例包括 Plankton、DroidKungFu、ggTracker、DroidDream Light
    和 Gingermaster。由于安全研究人员已对这些恶意软件进行了详尽的描述，因此我们在此不再赘述。你可以通过快速的网络搜索找到更多相关信息。
- en: The early years of sideloaded and preloaded malware are harder to reconstruct.
    At the time, the Android Security team and external security researchers focused
    on Google Play, so data from 2011 and 2012 that describes other malware is spotty
    and difficult to obtain. The Security team keeps a historical log of all Google
    Play apps, but no such log exists for sideloaded apps. Based on the limited data
    we have, we believe that DroidDream Light, a spyware variant of DroidDream that
    didn’t include any privilege escalation exploits, may have been the most sideloaded
    malware of 2011\. In 2012, RuFraud, another premium SMS fraud family targeting
    Russia, was likely the most popular sideloaded malware.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 sideloaded 和预装恶意软件的重建更为困难。那时，Android 安全团队和外部安全研究人员主要关注 Google Play，因此描述其他恶意软件的
    2011 年和 2012 年的数据零星且难以获取。安全团队会保留所有 Google Play 应用的历史日志，但对于 sideloaded 应用则没有此类日志。根据我们掌握的有限数据，我们认为
    DroidDream Light，一款没有包含任何特权提升漏洞的 DroidDream 间谍软件变种，可能是 2011 年最常被 sideload 的恶意软件。2012
    年，RuFraud 这一针对俄罗斯的付费短信诈骗恶意软件家族，可能是最流行的 sideloaded 恶意软件。
- en: We are not aware of any preloaded malware (that is, malware preinstalled on
    Android devices) active between 2010 and 2012\. However, we also doubt that researchers
    looked for preloaded malware in those early years, so it’s possible that it existed
    and nobody knew about it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有发现2010到2012年间有任何预装恶意软件（即预先安装在Android设备上的恶意软件）活跃的记录。然而，我们也怀疑在早期的那些年份里，研究人员可能并未专门寻找预装恶意软件，因此它可能存在，而当时没有人注意到。
- en: '**The Professionalization of Malware: 2013 and 2014**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**恶意软件的专业化：2013年与2014年**'
- en: The year 2013 was historic for Android malware. Previous specimens occasionally
    caused severe harm and sometimes spread widely, but they rarely did both at the
    same time. No malware network excelled in distribution, technology, and profitability
    all at once. This changed in 2013, when several malware families appeared that
    were created by developers who understood the components of a successful malware
    enterprise. These malware developers likely organized themselves as modest software
    shops, unlike the presumed lone-wolf or small-scale operations of previous years.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年是Android恶意软件的历史性一年。之前的恶意软件偶尔会造成严重的损害，有时传播范围较广，但它们很少同时做到这两点。没有任何恶意软件网络在分发、技术和盈利能力上都表现出色。但在2013年，几种恶意软件家族的出现改变了这一切，它们的开发者理解如何构建一个成功的恶意软件企业。这些恶意软件开发者可能将自己组织成了适度的软件公司，而不像以往的孤狼式或小规模的操作。
- en: While SMS fraud and spyware continued to dominate in 2013 (combined, they made
    up more than 50 percent of all malware on Google Play that year), hostile downloaders
    (20 percent) and rooting trojans (20 percent) were important, too.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然短信欺诈和间谍软件在2013年继续占据主导地位（合计它们占Google Play上所有恶意软件的50%以上），但恶意下载程序（占20%）和root木马（占20%）也同样重要。
- en: '***Ghost Push***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Ghost Push***'
- en: Of all the new, sophisticated malware families available on Google Play in 2013,
    Ghost Push was the largest, responsible for nearly all rooting trojans of that
    year. Its developers set up a highly scaled, profitable network consisting of
    thousands of apps that they refined over the following years (and are potentially
    still updating today).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在2013年，所有出现在Google Play上的新型复杂恶意软件家族中，Ghost Push是规模最大的，几乎负责了那一年所有的root木马。它的开发者建立了一个高度扩展、利润丰厚的网络，这个网络由数千个应用程序组成，开发者在随后的几年里不断完善这些应用（并且可能至今仍在更新）。
- en: The Android Security team has known about this family since 2014, but public
    documentation of it didn’t exist until September 2015, when the Chinese security
    company Cheetah Mobile described it in a Chinese-language blog post. Despite its
    scale, antivirus vendors did not detect this network for about two years.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Android安全团队自2014年就已经知道这个恶意软件家族的存在，但直到2015年9月，中文安全公司猎豹移动才在一篇中文博客文章中公开描述了它。尽管它的规模庞大，但病毒防护供应商大约用了两年时间才发现这个网络。
- en: What exactly Ghost Push does is hard to understand. While analyzing any of its
    individual files is straightforward, Ghost Push is part of a massive malware distribution
    industry operating out of China, and any analysis must take this context into
    account. Since at least 2013, this malware industry has generated more Android
    malware than any other source. As far as we can tell, it consists of an undetermined
    number of malware creators and distributors. The distributors infiltrate Google
    Play, third-party stores, and device manufacturers to build reliable malware distribution
    channels. Their apps use a plug-in-based system to download malicious modules
    provided by the malware creators.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ghost Push究竟做了什么很难理解。虽然分析其单个文件相对简单，但Ghost Push是中国运营的庞大恶意软件分发产业的一部分，任何分析都必须考虑到这个背景。从2013年起，这个恶意软件产业生成的Android恶意软件数量超过了任何其他来源。据我们了解，这个产业由数量不确定的恶意软件创作者和分发商组成。分发商渗透进Google
    Play、第三方应用商店和设备制造商，建立了可靠的恶意软件分发渠道。它们的应用程序使用基于插件的系统来下载恶意模块，这些模块由恶意软件创作者提供。
- en: This distribution method hides how many people and companies are involved. We’ve
    seen samples that download more than 20 malicious plug-ins with different functionality.
    How many of these plug-ins are built by the same people? Are the malware distributors
    and malware creators completely separate entities, or is there overlap? These
    are open questions. One thing we do know is that this industry is laser-focused
    on making money, be it through ad spam, click fraud, pushing app installs for
    pay, or other means.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分发方式隐藏了涉及的人员和公司数量。我们曾见过下载超过 20 个具有不同功能的恶意插件的样本。这些插件中有多少是由同一批人开发的？恶意软件分发者和恶意软件创作者是否完全是独立的实体，还是有重叠？这些问题尚无明确答案。我们知道的一件事是，这个行业的焦点完全放在赚钱上，无论是通过广告垃圾邮件、点击欺诈、推动付费应用安装，还是其他方式。
- en: '***BadNews, RuFraud, and RuPlay***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***BadNews、RuFraud 和 RuPlay***'
- en: 'SMS fraud malware continued to affect Russian users in 2013\. BadNews was a
    hostile downloader family first discovered by Lookout Mobile Security in April
    2013 and described in a blog post titled “The Bearer of BadNews.” RuPlay and RuFraud
    made up a network of malware families that have not yet been publicly documented:
    RuPlay apps acted as hostile downloaders on Google Play that downloaded RuFraud
    apps from elsewhere.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 短信欺诈恶意软件在 2013 年继续影响俄罗斯用户。BadNews 是一个在 2013 年 4 月由 Lookout Mobile Security 首次发现的恶意下载者家族，并在一篇名为《BadNews
    的传播者》的博客文章中描述。RuPlay 和 RuFraud 组成了一个尚未公开文档化的恶意软件家族网络：RuPlay 应用在 Google Play 上充当恶意下载器，从其他地方下载
    RuFraud 应用。
- en: Like many other malware families, RuPlay apps impersonated popular apps of the
    day. The RuPlay developers registered dozens of domains with names like *[subwaysurfcheats.com](http://subwaysurfcheats.com)*
    and *angrybirds.p.ht*. They created websites that copied the look of Google Play
    and urged users to download apps under false pretenses (for example, to get updates
    to popular gaming apps like Subway Surfer and Angry Birds). They also used keyword
    spam and other nefarious techniques to game Google Play’s search result rankings,
    deceiving users into downloading the impersonators instead of the legitimate apps.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多其他恶意软件家族一样，RuPlay 应用模仿了当时流行的应用。RuPlay 的开发者注册了多个域名，如 *[subwaysurfcheats.com](http://subwaysurfcheats.com)*
    和 *angrybirds.p.ht*。他们创建了仿制 Google Play 外观的网站，并以虚假借口敦促用户下载应用（例如，获取热门游戏应用如 Subway
    Surfer 和 Angry Birds 的更新）。他们还利用关键词垃圾邮件和其他恶意手段操控 Google Play 的搜索排名，欺骗用户下载这些冒充应用，而非正版应用。
- en: '**NOTE**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Besides tricking users into downloading fake versions of real apps, the RuPlay
    apps on Google Play did not contain harmful functionality—the SMS fraud element
    was in the RuFraud apps they downloaded and installed—so we won’t show any source
    code here. For a representative example, interested readers can analyze* com.wHill
    ClimbRacingMoneyMod *(v1366388635, 9de8), which pretended to offer cheats for
    the hit game Hill Climb Racing.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*除了欺骗用户下载真实应用的伪造版本外，Google Play 上的 RuPlay 应用本身并不含有有害功能——短信欺诈功能存在于它们下载并安装的 RuFraud
    应用中——因此我们在这里不会展示任何源代码。对于有代表性的示例，感兴趣的读者可以分析* com.wHill ClimbRacingMoneyMod *(v1366388635,
    9de8)，它假装提供热门游戏 Hill Climb Racing 的作弊工具。*'
- en: The ultimate download location of RuPlay SMS fraud apps was a website called
    *hotdroid-apps.pm*. That website is long gone, and most of its malicious apps
    are lost to history. One surviving app is *flv.app* (v118, 6ed2), which many antivirus
    products recognize as malware named FakeApp, FakeInst, or Agent. Built for SMS
    fraud, it contained some other interesting ideas.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: RuPlay 短信欺诈应用的最终下载位置是一个名为 *hotdroid-apps.pm* 的网站。这个网站已经消失了，大部分恶意应用也都被历史遗忘了。其中一个幸存的应用是
    *flv.app* (v118, 6ed2)，许多杀毒产品将其识别为名为 FakeApp、FakeInst 或 Agent 的恶意软件。该应用为短信欺诈而构建，包含了一些其他有趣的想法。
- en: For example, the app’s command-and-control server could instruct the app to
    redirect outgoing calls made by the user. Because we don’t have access to the
    server’s logs, we don’t know the purpose of this functionality, but it’s likely
    that the app tried to intercept users’ calls to their mobile carriers to avoid
    complaints about unrecognized charges. Instead of reaching the carrier’s support
    hotline, the user would unwittingly call the fraudsters. The code in [Listing
    2-6](ch02.xhtml#ch2lis6) shows how this works.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，应用的指挥和控制服务器可以指示应用将用户发出的外呼电话重定向。由于我们无法访问服务器日志，因此不清楚此功能的目的，但很可能该应用试图拦截用户与其移动运营商的电话，以避免因无法识别的收费而产生投诉。用户可能会误打电话给欺诈者，而不是拨打运营商的支持热线。[清单
    2-6](ch02.xhtml#ch2lis6) 中的代码展示了这一过程是如何工作的。
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 2-6: The app* flv.app *(v118, 6ed2) redirects phone calls made by
    the user.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-6：该应用* flv.app *(v118, 6ed2) 会重定向用户拨打的电话。*'
- en: The app’s command-and-control server also supported commands unrelated to text
    and call activity. For example, the command `antiUninstall` prompted a system
    dialog to grant the app device administrator permissions and included a scary
    message downloaded from the server. For years, Android malware used administrator
    permissions to keep users from removing malicious apps. Over time, the Android
    Security team worked with the operating system team to remove device administrator
    properties abused by malware, until the API itself became deprecated in Android
    9.0 (Pie). In Android 10, the API stopped doing anything at all.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用的命令与控制服务器还支持与文本和通话活动无关的命令。例如，命令`antiUninstall`会触发一个系统对话框，授予该应用设备管理员权限，并从服务器下载一条令人恐惧的消息。多年来，Android恶意软件使用管理员权限来防止用户卸载恶意应用。随着时间的推移，Android安全团队与操作系统团队合作，去除恶意软件滥用的设备管理员属性，直到该API在Android
    9.0（Pie）中被废弃。在Android 10中，API完全停止了功能。
- en: '***WallySMS***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***WallySMS***'
- en: Another SMS fraud family, WallySMS targeted countries in Western Europe. [Listing
    2-7](ch02.xhtml#ch2lis7) is a sample from *com.albertech.harlemshake* (v2, 31f8)
    that checks whether the device is in France, Spain, or Germany by inspecting the
    mobile country code (MCC). It then assigns the device a Base64-encoded premium
    SMS number for fraudulent activity.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个SMS欺诈家族WallySMS针对的是西欧国家。[列表 2-7](ch02.xhtml#ch2lis7) 是来自 *com.albertech.harlemshake*（v2,
    31f8）的样本，它通过检查移动国家代码（MCC）来判断设备是否位于法国、西班牙或德国。然后，它为设备分配一个Base64编码的高级短信号码，用于欺诈活动。
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 2-7: The app* com.albertech.harlemshake *(v2, 31f8) has premium SMS
    payloads for France (MCC 208), Spain (MCC 214), and Germany (MCC 262) only.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-7：该应用* com.albertech.harlemshake *(v2, 31f8) 仅在法国（MCC 208）、西班牙（MCC 214）和德国（MCC
    262）具有高级短信有效载荷。*'
- en: Dynamic analysis of this sample has shown that, when executed on a device configured
    for any other country, the app won’t display any malicious activity.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对该样本的动态分析表明，当在配置为其他国家的设备上执行时，该应用不会显示任何恶意活动。
- en: Modern mobile phones come in many configurations, so malware analysis tools
    must understand the environmental requirements of the malware they’re analyzing.
    In particular, they should combine insights from static and dynamic analysis,
    because setting up the appropriate dynamic analysis environment is tricky without
    information gained from static analysis. The most sophisticated malware analysis
    tools pass information between static and dynamic analysis engines.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现代手机有许多不同的配置，因此恶意软件分析工具必须了解它们分析的恶意软件的环境需求。特别是，它们应该结合静态和动态分析的见解，因为在没有静态分析提供的信息的情况下，设置合适的动态分析环境是很棘手的。最先进的恶意软件分析工具会在静态和动态分析引擎之间传递信息。
- en: '***Mono WAP***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Mono WAP***'
- en: Responding to the prevalence of SMS fraud in the early Android years, the operating
    system team made some changes to better protect users. In 2012, Android 4.2 (Jelly
    Bean) added a warning dialog that opens whenever an app sends a text to a premium
    number. Around 2014, this Android version reached critical distribution. This
    small change decreased the profitability of SMS fraud significantly and blocked
    the most straightforward way to make illicit money on Android. While some SMS
    fraud families continued to be uploaded to Google Play, none became huge or were
    backed by sophisticated malware authors. Instead, the people running professional
    malware businesses sought out other ways to make a quick buck off Android users.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对早期Android系统中SMS欺诈的普遍存在，操作系统团队做出了一些改动以更好地保护用户。2012年，Android 4.2（Jelly Bean）增加了一个警告对话框，每当应用向高级号码发送短信时，都会弹出该对话框。大约在2014年，这个Android版本达到了关键的分发规模。这个小改动显著减少了SMS欺诈的盈利能力，并阻止了通过Android进行非法获利的最直接途径。虽然一些SMS欺诈家族仍然继续上传到Google
    Play，但没有一个变得庞大，也没有得到复杂恶意软件作者的支持。相反，运营专业恶意软件业务的人开始寻找其他方式从Android用户身上快速赚钱。
- en: The next best way to defraud users was to turn to other forms of phone billing
    fraud. In many countries, phone users can pay for services through a technology
    called Wireless Application Protocol (WAP) billing. WAP billing servers can be
    accessed over HTTP, making it easy for malicious apps to connect to them. The
    downside for fraudsters is that WAP billing is not as widespread as SMS-based
    billing, limiting them to targets in a few countries, like Russia, Thailand, Vietnam,
    Spain, and the United Kingdom.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 欺诈者实施下一步欺诈的最佳方式是转向其他形式的电话计费欺诈。在许多国家，电话用户可以通过无线应用协议（WAP）计费技术为服务付费。WAP 计费服务器可以通过
    HTTP 访问，使恶意应用容易与之连接。欺诈者的缺点是，WAP 计费不像基于短信的计费那样普及，这使得他们只能在少数几个国家（如俄罗斯、泰国、越南、西班牙和英国）实施欺诈。
- en: 'Mono WAP, the largest WAP fraud family of 2014, was interesting for reasons
    beyond its wide distribution: namely its choice of programming language and the
    miniscule size of its malicious code, which made it hard to spot.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 2014 年最大的 WAP 欺诈家族 Mono WAP 的有趣之处不仅在于其广泛分布，还在于它所选的编程语言以及其恶意代码的极小体积，这使得它很难被发现。
- en: Unlike other large Android malware families, which were almost exclusively written
    in Java, Mono WAP was written in Mono for Android, an open source software framework
    that allowed developers to create Android apps in .NET languages like C#. (In
    2016, Microsoft acquired the company behind Mono for Android and renamed the framework
    to Xamarin.Android.) This choice of language posed big problems to antivirus technologies
    that could only analyze Java code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他大多数 Android 恶意软件家族（几乎完全使用 Java 编写）不同，Mono WAP 是使用 Mono for Android 编写的，这是一种开源软件框架，允许开发者使用
    .NET 语言（如 C#）开发 Android 应用。（2016 年，微软收购了 Mono for Android 背后的公司，并将该框架更名为 Xamarin.Android。）这种语言选择给只能分析
    Java 代码的杀毒技术带来了巨大问题。
- en: The Mono WAP fraud family’s other interesting feature is that it contained barely
    any code and operated extremely subtly. It loaded WAP fraud pages in a WebView,
    the standard Android component used to show web pages without a web browser, and
    signed the user up for a recurring premium service subscription. Before mobile
    carriers beefed up WAP sign-up protection, a Mono WAP app only had to collect
    the device’s Android ID and send it to a domain hosted by the fraudsters.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Mono WAP 欺诈家族的另一个有趣特点是它几乎没有任何代码，并且操作极其隐秘。它在 WebView 中加载 WAP 欺诈页面，WebView 是标准的
    Android 组件，用于在没有浏览器的情况下显示网页，并将用户注册为定期订阅的高级服务。在移动运营商加强 WAP 注册保护之前，Mono WAP 应用只需要收集设备的
    Android ID 并将其发送到诈骗者托管的域名。
- en: 'For example, the sample *com.baibla.krasive* (v1, 9604) made requests to URLs
    like this one:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，样本 *com.baibla.krasive*（v1，9604）向类似这样的 URL 发出了请求：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `app` URL parameter presumably identified the app from which the request
    originated, and the `aid` parameter identified the user to sign up for a premium
    service.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`app` 的 URL 参数可能用于标识发出请求的应用，而 `aid` 参数用于标识用户以注册高级服务。'
- en: This simple scheme only worked on devices connected to the carrier network providing
    the premium subscription service. No sign-up could happen if the device was on
    Wi-Fi or another carrier’s mobile network. Still, the ease of signing up for premium
    services through simple HTTP connections made WAP fraud hard to detect. How does
    one distinguish a legitimate HTTP request from one that signs users up for services
    against their will? In their early days, WAP fraud apps were often only discovered
    after enough users had complained about unwanted charges.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的方案只适用于连接到提供高级订阅服务的运营商网络的设备。如果设备连接的是 Wi-Fi 或其他运营商的移动网络，则无法进行注册。然而，通过简单的
    HTTP 连接注册高级服务的便捷性使得 WAP 欺诈很难被发现。如何区分合法的 HTTP 请求和未经用户同意将用户注册为服务的请求？在 WAP 欺诈应用的早期阶段，通常是在足够多的用户投诉不明收费之后，才发现这些应用。
- en: 'Over the years, mobile carriers improved fraud protection through two-factor
    authentication and other mechanisms for proving that a user had authorized a payment.
    In some countries, governments changed legislation around WAP billing to favor
    consumers. As mobile carriers improved the security of their WAP sign-up pages,
    WAP fraud apps became more sophisticated: malicious apps now needed to intercept
    two-factor authentication texts and use JavaScript or other techniques to enter
    the confirmation code into a dialog.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，移动运营商通过双重身份验证和其他验证用户授权支付的机制来改善防欺诈保护。在一些国家，政府修改了关于 WAP 计费的法律，以便更好地保护消费者。随着移动运营商提高其
    WAP 注册页面的安全性，WAP 欺诈应用变得越来越复杂：恶意应用现在需要拦截双重身份验证短信，并使用 JavaScript 或其他技术将确认码输入到对话框中。
- en: WAP fraud continued to be profitable and widespread on Android until at least
    2023\. As legitimate WAP billing is a great source of extra income for mobile
    carriers, more and more countries and mobile carriers have started to enable it
    for their customers. Every new WAP billing market immediately attracts WAP fraud
    malware, as new WAP billing operators are often inexperienced in fighting abuse
    and fraud.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: WAP欺诈在安卓系统上持续盈利并广泛存在，直到至少2023年。由于合法的WAP计费是移动运营商的一项重要收入来源，越来越多的国家和移动运营商开始为其客户启用该服务。每一个新的WAP计费市场都会立即吸引WAP欺诈恶意软件，因为新的WAP计费运营商通常在打击滥用和欺诈方面经验不足。
- en: '***Cryptocurrency Malware***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***加密货币恶意软件***'
- en: The year 2014 also saw the rise of Android cryptocurrency malware. Back then,
    users could still mine many cryptocurrencies with the limited hardware specs of
    mobile phones, especially if they controlled a large number of devices and turned
    them into a mining botnet. At first, surreptitious mining efforts targeted cryptocurrencies
    like Bitcoin and Litecoin, but they soon homed in on Monero. By design, mining
    Monero required less powerful hardware than other cryptocurrencies of the time,
    making it a great match for mobile phones.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年也见证了安卓加密货币恶意软件的兴起。那时，用户仍可以利用移动电话有限的硬件规格来挖掘许多加密货币，尤其是当他们控制大量设备并将其转化为挖矿僵尸网络时。起初，隐秘的挖矿行为主要针对比特币和莱特币等加密货币，但很快他们将目标转向了Monero。由于设计上的原因，挖掘Monero比其他当时的加密货币对硬件的要求更低，因此非常适合手机。
- en: The biggest thing Monero mining had going for it was a website called Coinhive,
    which allowed anyone to mine Monero coins with just one line of JavaScript code.
    Soon, malware authors everywhere (not just on Android) had embedded these Coinhive
    mining one-liners in apps, websites, advertisements, and anything else that could
    execute JavaScript code. Antivirus software and other security products started
    blocking all connections to the site due to the scale of the abuse. In March 2018,
    computer security journalist Brian Krebs posted a lengthy exposé dubbed “Who and
    What Is Coinhive?” that chronicled the dubious history of the site and the people
    behind it. Coinhive shut down in early 2019, and no other site has since followed
    in its footsteps. This shutdown effectively ended surreptitious cryptocurrency
    mining by Android malware.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Monero挖矿最大的优势是一个名为Coinhive的网站，它允许任何人通过一行JavaScript代码来挖掘Monero币。很快，世界各地的恶意软件作者（不仅仅是在安卓系统上）将这些Coinhive挖矿的一行代码嵌入到应用程序、网站、广告以及任何能执行JavaScript代码的地方。由于滥用的规模，杀毒软件和其他安全产品开始屏蔽所有与该网站的连接。2018年3月，计算机安全记者Brian
    Krebs发布了一篇长篇曝光文章，题为“Coinhive是谁，做了什么？” 该文章详细记录了该网站及其背后人员的可疑历史。Coinhive在2019年初关闭，至此没有其他网站跟随其步伐。这一关闭实际上结束了安卓恶意软件通过隐秘的加密货币挖矿活动。
- en: When cryptocurrency prices spiked to new record levels in 2020 and 2021, malware
    authors switched from mining to phishing. The phishing apps broke into cryptocurrency
    accounts and wallets and transferred any balances to the malware developer’s accounts.
    Protecting users across the diverse cryptocurrency ecosystem, with thousands of
    currencies churned through their hype cycles, proved a real challenge. Just keeping
    track of the names, logos, and websites of all these cryptocurrencies, as well
    as their official and unofficial wallet apps, is a full-time job for a whole team.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当加密货币价格在2020年和2021年飙升至新纪录时，恶意软件作者从挖矿转向了网络钓鱼。钓鱼应用程序入侵了加密货币账户和钱包，并将余额转移到恶意软件开发者的账户中。在成千上万种加密货币通过它们的炒作周期不断变动的复杂加密货币生态系统中保护用户，成为一项真正的挑战。仅仅跟踪这些加密货币的名称、标志、网站以及它们的官方和非官方钱包应用程序，就足以让一个团队全职工作。
- en: '***Taicliphot***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Taicliphot***'
- en: Outside of Google Play, the malware situation remained opaque. We believe that
    the most frequently sideloaded malware between 2012 and 2014 may have been RuFraud,
    covered earlier in this chapter. Thousands of known app samples operated similarly,
    but whether they comprised a single malware family or a cluster of families with
    the same tactics remains unclear. DroidDream Light, which remained active in 2013,
    disappeared in 2014.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google Play之外，恶意软件的情况依然不透明。我们认为，2012年到2014年间最常被侧载的恶意软件可能是本章前面提到的RuFraud。成千上万的已知应用样本运行方式相似，但它们是否属于同一恶意软件家族，还是属于具有相同战术的多个家族，仍然不清楚。DroidDream
    Light在2013年继续活跃，但在2014年消失了。
- en: Another major off-market family of 2014 was the Taicliphot SMS fraud applications,
    which targeted pornography viewers in Vietnam. The apps barely contained any code,
    jumping straight to the SMS fraud functionality in the `onCreate` method of the
    main activity. [Listing 2-8](ch02.xhtml#ch2lis8), taken from *ncn.taicliphot*
    (v1, 38a3) shows this functionality.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，另一个重要的市场外恶意软件家族是 Taicliphot 短信诈骗应用，它们主要针对越南的色情内容观众。这些应用几乎没有任何代码，直接跳转到主活动的`onCreate`方法中的短信诈骗功能。[清单
    2-8](ch02.xhtml#ch2lis8)来自 *ncn.taicliphot* (v1, 38a3)，展示了这一功能。
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 2-8: The app* ncn.taicliphot *(v1, 38a3) sends premium SMS messages
    without user consent.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-8：应用* ncn.taicliphot *(v1, 38a3) 在未征得用户同意的情况下发送高级短信。*'
- en: Because the Android versions available at the time did not yet have dynamic
    permission dialogs, users consented to all permissions requested by an app at
    installation time. When the user launched the Taicliphot app, they had already
    granted the SMS permission. This allowed the app to send texts to premium numbers
    using the code shown here.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于当时的Android版本尚未具备动态权限对话框，用户在安装应用时便已经同意了应用请求的所有权限。当用户启动Taicliphot应用时，他们已经授予了短信权限。这使得该应用能够使用如下代码向高级号码发送短信。
- en: '***The First Preinstalled Malware***'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第一个预安装的恶意软件***'
- en: 'In 2014, we also saw some early instances of preinstalled malware. The Chinese
    security company Qihoo 360 discovered a preinstalled malware family called OldBoot,
    which it documented in a January blog post titled “Oldboot: The First Bootkit
    on Android.” Shortly thereafter, Kaspersky found UUPay, a malware family collecting
    sensitive user information without consent and potentially adding charges to the
    user’s phone bill, on Chinese devices, documenting it in the March blog post “Caution:
    Malware Pre-Installed!”'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，我们还见证了预安装恶意软件的早期实例。中国安全公司奇虎360发现了一种名为OldBoot的预安装恶意软件家族，并在1月的博客中记录了它，文章标题为“Oldboot：Android上的第一个引导木马”。不久之后，卡巴斯基发现了UUPay，这是一个收集敏感用户信息并可能向用户电话账单添加费用的恶意软件家族，出现在中国设备上，并在3月的博客中进行了记录，文章标题为“警惕：预安装的恶意软件！”
- en: 'Lookout Mobile Security found DeathRing, a family of trojans that were capable
    of SMS and WAP fraud. You can read about it in “DeathRing: Pre-Loaded Malware
    Hits Smartphones for the Second Time in 2014,” from December of that year.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Lookout Mobile Security发现了DeathRing，这是一个能够进行短信和WAP诈骗的木马家族。你可以在2014年12月的文章“DeathRing：预装恶意软件再次袭击智能手机”中了解相关内容。
- en: 'The fourth discovery of the year was CoolReaper, reported by Palo Alto Networks
    and described in “CoolReaper Revealed: A Backdoor in Coolpad Android Devices”
    in December. CoolReaper was a powerful backdoor family installed on devices by
    the Chinese manufacturer Coolpad.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当年的第四个发现是CoolReaper，由Palo Alto Networks报告，并在12月的文章“CoolReaper揭秘：Coolpad Android设备中的后门”中进行了描述。CoolReaper是一个强大的后门家族，由中国制造商Coolpad预装在设备上。
- en: '**The Rise of Large Malware Networks: 2015 and 2016**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**大型恶意软件网络的崛起：2015年与2016年**'
- en: Android malware continued to evolve rapidly in 2015 and 2016, making these years
    the most interesting for Android malware research. As changes to Android’s defenses
    made SMS fraud less profitable, malware authors branched out into other forms
    of abuse. This section covers examples ranging from trojans and phishing to DDoS
    attacks, WAP fraud, and more.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年和2016年，Android恶意软件继续快速发展，使这两年成为Android恶意软件研究中最有趣的时期。随着Android防御措施的变化，短信诈骗的利润下降，恶意软件作者开始尝试其他形式的滥用。本节涵盖了从木马、钓鱼到DDoS攻击、WAP诈骗等各种示例。
- en: '***Turkish Clicker***'
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***土耳其点击器***'
- en: 'In 2014, a new malware family appeared on Google Play and soon became infamous:
    Turkish Clicker. Turkish Clicker apps loaded JavaScript code from command-and-control
    servers and executed it in a WebView. The Android Security team learned of this
    family when, that year, the malware used infected devices to execute a DDoS attack
    against Google Play. We’re not sure if this attack was intentional or a byproduct
    of an overly aggressive attempt to manipulate Google Play’s app-ranking mechanism.
    Either way, the Android Security team quickly shut down Turkish Clicker, removing
    its apps from devices to stop the attack.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，一个新的恶意软件家族出现在Google Play上，并迅速臭名昭著：土耳其点击器。土耳其点击器应用从命令与控制服务器加载JavaScript代码，并在WebView中执行。当年，Android安全团队在发现该恶意软件使用感染的设备对Google
    Play发起DDoS攻击时了解了这个家族。我们不确定这次攻击是故意的还是过于激进地试图操纵Google Play的应用排名机制所产生的副作用。无论如何，Android安全团队迅速关闭了土耳其点击器，移除了其应用以停止攻击。
- en: 'In 2015, Turkish Clicker came back with a vengeance, growing into the largest
    malware network ever seen on Google Play at that time. It was the first malware
    network to scale the creation of Google Play developer accounts, creating thousands
    over the years. Its malware authors experimented with different money-making schemes
    and ultimately settled on click fraud and WAP fraud, focusing on Turkish users.
    The public learned about this network in January 2016, when the American–Israeli
    security firm Check Point blogged about it in a post titled “Turkish Clicker:
    Check Point Finds New Malware on Google Play.”'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，土耳其点击器卷土重来，迅速成长为当时Google Play上最大规模的恶意软件网络。它是第一个扩展Google Play开发者账户创建的恶意软件网络，多年来创建了成千上万个账户。其恶意软件作者尝试了不同的赚钱方式，最终选择了点击欺诈和WAP欺诈，重点针对土耳其用户。2016年1月，美国–以色列的安全公司Check
    Point在一篇名为《土耳其点击器：Check Point发现Google Play上的新恶意软件》的博文中揭露了这个网络。
- en: '[Listing 2-9](ch02.xhtml#ch2lis9) shows a prettified payload that the Turkish
    Clicker app *com.gkrj.djjsas* (v2, c901) downloaded from its command-and-control
    server.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 2-9](ch02.xhtml#ch2lis9)展示了土耳其点击器应用*com.gkrj.djjsas*（v2，c901）从其指挥和控制服务器下载的美化载荷。'
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 2-9: A click fraud payload downloaded by* com.gkrj.djjsas *(v2, c901)*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-9：* com.gkrj.djjsas *(v2，c901) 下载的点击欺诈载荷*'
- en: The IP address in the first line (seemingly ignored by the app) may have belonged
    to a Tor exit node. The URL in the second line is a secondary command-and-control
    server from which the malware loads a list of target websites. Later in the listing,
    the JavaScript code contains click fraud functionality that clicks ads on the
    target websites. At the time of the analysis in 2016, these targets were all pornography
    websites.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行中的IP地址（似乎被应用忽略）可能属于一个Tor出口节点。第二行中的URL是一个次级指挥和控制服务器，恶意软件从中加载目标网站列表。在后面的列表中，JavaScript代码包含点击欺诈功能，会在目标网站上点击广告。在2016年进行分析时，这些目标都是色情网站。
- en: '***Gaiaphish***'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Gaiaphish***'
- en: 'While the largest malware networks of 2015 focused on WAP fraud, midsized networks
    proved genuinely innovative. Several networks began taking over social media accounts
    on apps like Instagram or the Russian social network VK by stealing credentials
    from users. Another network, Shuabang, created countless new Gmail accounts to
    manipulate Google products. The Spanish computer security company ElevenPaths
    first described Shuabang in a November 2014 blog post titled “Shuabang Botnet:
    BlackHat App Store Optimization (BlackASO) in Google Play.”'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然2015年最大的恶意软件网络主要集中在WAP欺诈，但中型网络展示了真正的创新性。多个网络开始通过窃取用户凭证接管像Instagram或俄罗斯社交网络VK等应用的社交媒体账户。另一个网络Shuabang则创建了无数新的Gmail账户，以操控Google产品。西班牙计算机安全公司ElevenPaths在2014年11月的博文《Shuabang
    Botnet：Google Play中的BlackHat应用商店优化（BlackASO）》中首次描述了Shuabang。
- en: Yet another network, called Gaiaphish and described in the *2017 Android Security
    Year in Review* report, phished Google account credentials. In addition, its apps
    loaded code dynamically to abuse various Google websites. For example, *skt.faker.world*
    (v3, 936c) contained Base64-encoded URLs from which to download additional plug-in
    files that targeted Google’s advertising properties, the social network Google+,
    and Google Play itself ([Listing 2-10](ch02.xhtml#ch2lis10)).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个名为Gaiaphish的网络，如*2017年安卓安全年度回顾*报告所述，钓鱼Google账户凭证。此外，其应用动态加载代码以滥用各种Google网站。例如，*skt.faker.world*（v3，936c）包含Base64编码的URL，从这些URL中下载额外的插件文件，针对Google的广告属性、社交网络Google+以及Google
    Play本身（[列表 2-10](ch02.xhtml#ch2lis10)）。
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 2-10: Base64-encoded strings in* skt.faker.world *(v3, 936c)*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-10：* skt.faker.world *(v3，936c) 中的Base64编码字符串*'
- en: 'The encoded strings shown here decode to the following URLs:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此处显示的编码字符串解码后是以下URL：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The downloaded plug-in hid its malicious functionality in official-sounding
    package names, like *com.google.android.** or *com.google.dex.**. Configuration
    instructions contained dozens of parameters. [Listing 2-11](ch02.xhtml#ch2lis11)
    shows a few of these.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的插件将其恶意功能隐藏在官方听起来的包名中，如*com.google.android.**或*com.google.dex.**。配置说明中包含了数十个参数。[列表
    2-11](ch02.xhtml#ch2lis11)展示了其中的一些。
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 2-11: Gaiaphish configuration options from* skt.faker.world *(v3,
    936c)*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-11：* skt.faker.world *(v3，936c) 中的Gaiaphish配置选项*'
- en: One fun Gaiaphish feature is that its apps would post fake reviews, presumably
    for pay, on Google Play to increase the popularity and reputation of other apps.
    Gaiaphish samples contain many of these fake app reviews as hardcoded strings.
    [Listing 2-12](ch02.xhtml#ch2lis12) shows a small selection.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的Gaiaphish特性是，它的应用程序会在Google Play上发布虚假评论，可能是为了付费，来提高其他应用的流行度和声誉。Gaiaphish样本中包含许多这些虚假的应用评论，作为硬编码字符串。[列表2-12](ch02.xhtml#ch2lis12)展示了其中的一小部分。
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 2-12: Fake Google Play user reviews taken from* skt.faker.world *(v3,
    936c)*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-12：来自* skt.faker.world *(v3, 936c)的虚假Google Play用户评论*'
- en: Android malware has a long history of manipulating Google Play app rankings.
    Depending on its level of criminality, malware can post fake reviews from phished
    Google accounts, automatically generated fake Google accounts, or farms of real
    devices operated by humans. The more convincing these ratings and comments are,
    the more successful they are at luring unsuspecting users into downloading an
    app.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Android恶意软件在操控Google Play应用排名方面有着悠久的历史。根据其犯罪程度，恶意软件可以从被钓鱼的Google帐户、自动生成的虚假Google帐户，或由人类操作的真实设备农场发布虚假评论。这些评分和评论越真实，就越能成功地诱使毫无戒心的用户下载应用程序。
- en: '***Judy***'
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Judy***'
- en: 'Judy, the second-largest malware family of 2016, made money through advertising
    fraud. The security company Check Point first discovered this family and described
    it in a blog post titled “The Judy Malware: Possibly the Largest Malware Campaign
    Found on Google Play” in May 2017\. Judy apps aimed to execute click fraud against
    Google advertising properties.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Judy，2016年第二大恶意软件家族，通过广告欺诈赚钱。安全公司Check Point首次发现了这个家族，并在2017年5月的博客文章《Judy恶意软件：可能是Google
    Play上发现的最大恶意软件活动》中描述了它。Judy应用程序旨在对Google广告平台执行点击欺诈。
- en: Judy app code can be a bit convoluted. It uses an internal messaging system
    to locate Google ads and execute fraudulent clicks with JavaScript. The prettified
    code in [Listing 2-13](ch02.xhtml#ch2lis13) shows the fraudulent click activity
    in *air.com.eni.AnimalJudy035* (v1250000, a72a).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Judy应用程序的代码可能有些复杂。它使用一个内部消息系统来定位Google广告并通过JavaScript执行欺诈性点击。[列表2-13](ch02.xhtml#ch2lis13)中的美化代码显示了*air.com.eni.AnimalJudy035*（v1250000,
    a72a）中的欺诈性点击活动。
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 2-13: The app* air.com.eni.AnimalJudy035 *(v1250000, a72a) clicks
    a random pixel in a previously located ad.*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-13：应用程序* air.com.eni.AnimalJudy035 *(v1250000, a72a)在先前定位的广告中点击一个随机像素。*'
- en: The click happens in a thread launched after the `LODING5` message arrives.
    To make this click, the code calculates random x- and y-coordinates inside the
    ad. Then it clicks the ad through two calls of the `dispatchTouchEvent` API.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击发生在`LODING5`消息到达后启动的线程中。为了实现这个点击，代码计算广告内部的随机x和y坐标。然后，通过两次调用`dispatchTouchEvent`
    API来点击广告。
- en: Ad fraud, be it click fraud or other techniques, dominated Android malware after
    2016\. This lucrative category remains one of the few direct ways for malware
    authors to make money now that SMS fraud and cryptocurrency mining are less profitable.
    Many other malware categories are capable of only indirect monetization. For example,
    to make money from stolen data, a malware author has to find a buyer for it. Likewise,
    to make money from ransomware, a malware author has to find a victim willing (and
    able) to pay the ransom.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 广告欺诈，无论是点击欺诈还是其他技术，主导了2016年后的Android恶意软件。这一盈利丰厚的类别仍然是恶意软件作者赚钱的少数直接途径之一，因为短信欺诈和加密货币挖矿已不再那么有利可图。许多其他恶意软件类别只能通过间接方式获利。例如，要从窃取的数据中赚钱，恶意软件作者必须找到买家。类似地，要从勒索软件中获利，恶意软件作者必须找到一个愿意（且有能力）支付赎金的受害者。
- en: 'Advertising fraud has another advantage: it can stay completely hidden from
    users. That’s important, as users can observe and understand more intrusive forms
    of malware (say, phishing) and uninstall apps suspected of foul play. Advertising
    fraud can stay undetected on devices for years, generating income for malware
    authors over a long period.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 广告欺诈有另一个优势：它可以完全隐藏在用户的视线之外。这一点非常重要，因为用户可以察觉到并理解更具侵入性的恶意软件形式（例如，钓鱼攻击），并卸载被怀疑存在不正当行为的应用程序。广告欺诈可以在设备上保持未被检测的状态长达数年，为恶意软件作者带来长期的收入。
- en: '***DressCode***'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***DressCode***'
- en: DressCode, a large malware network discovered by Check Point and described in
    an August 2016 blog post titled “DressCode Android Malware Discovered on Google
    Play,” had another innovative way to make money. It turned infected devices into
    nodes of a proxy botnet. The malware authors could then route traffic (say, abusive
    traffic to fraudulently click advertisements) through these devices to hide its
    origin.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: DressCode 是一个大型恶意软件网络，由 Check Point 发现，并在 2016 年 8 月的一篇名为《在 Google Play 上发现
    DressCode Android 恶意软件》的博客文章中进行了描述，它有另一种创新的赚钱方式。它将感染的设备变成了代理僵尸网络的节点。恶意软件作者可以通过这些设备路由流量（比如，滥用流量来欺诈性地点击广告）以隐藏流量的来源。
- en: DressCode apps implement their malware functionality in just a few classes.
    The malware authors reused sample code published in 2000 on CodeProject ([*https://www.codeproject.com*](https://www.codeproject.com)),
    then added additional classes for their proxying needs. [Listing 2-14](ch02.xhtml#ch2lis14)
    shows prettified code taken from *com.dark.kazy.goddess.lp* (v1, d858). After
    connecting to a preconfigured command-and-control server, the code parses the
    text-based commands received from the server and opens new proxy connections to
    other servers specified in the `CREATE` command.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: DressCode 应用程序仅通过几个类实现其恶意软件功能。恶意软件作者重用了 2000 年在 CodeProject 上发布的示例代码（[*https://www.codeproject.com*](https://www.codeproject.com)），然后为其代理需求添加了额外的类。[清单
    2-14](ch02.xhtml#ch2lis14) 展示了从 *com.dark.kazy.goddess.lp*（v1, d858）提取的美化代码。在连接到预配置的指挥和控制服务器后，代码解析从服务器接收到的基于文本的命令，并根据
    `CREATE` 命令打开新的代理连接到其他指定的服务器。
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 2-14: The app* com.dark.kazy.goddess.lp *(v1, d858) parses various
    proxy commands from its command-and-control server.*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-14：应用程序* com.dark.kazy.goddess.lp *(v1, d858) 从其指挥和控制服务器解析各种代理命令。*'
- en: Once in control of a proxy botnet, malware authors can make money in several
    ways. For instance, in addition to the example mentioned above, they can sell
    botnet access to other gangs who want to execute DDoS attacks, or they can turn
    infected devices into exit nodes for VPN providers.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦控制了一个代理僵尸网络，恶意软件作者可以通过多种方式赚钱。例如，除了上面提到的示例，他们还可以将僵尸网络的访问权限卖给其他希望进行 DDoS 攻击的黑帮，或者他们可以将感染的设备变成
    VPN 提供商的出口节点。
- en: The VPN option became one of the most widespread forms of Android malware abuse
    between 2016 and 2021\. As user demand rose for personal VPN services in those
    years, shady VPN companies built their business on the backs of unwitting Android
    users. These VPN companies created proxy SDKs and paid established Android developers
    to include them in their popular apps. Users who installed apps with these SDKs
    had their devices turned into end nodes for proxied network traffic. Of course,
    this happened without disclosure to users.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: VPN 选项在 2016 年至 2021 年期间成为 Android 恶意软件滥用的最广泛形式之一。随着这些年用户对个人 VPN 服务需求的增加，一些不正当的
    VPN 公司借助毫无察觉的 Android 用户建立了业务。这些 VPN 公司创建了代理 SDK，并支付给已有的 Android 开发者，将其嵌入到他们流行的应用中。安装了这些
    SDK 的应用程序的用户，其设备变成了代理网络流量的终端节点。当然，这一切都没有告知用户。
- en: Like advertising fraud, this is an easy way to monetize Android malware. Proxy
    behavior is just as invisible to users as click fraud and can continue for as
    long as apps with proxy SDKs are installed.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 像广告欺诈一样，这是将 Android 恶意软件货币化的一种简单方式。代理行为对用户来说和点击欺诈一样不可见，只要安装了带有代理 SDK 的应用程序，这种行为就可以持续下去。
- en: '***Joker***'
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Joker***'
- en: Joker is probably the largest malware family in Google Play history, exceeding
    the scale even of Turkish Clicker. Since 2016, its developers have been at work
    crafting SMS and WAP fraud applications for Google Play.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Joker 可能是 Google Play 历史上最大的恶意软件家族，甚至超越了土耳其点击器的规模。自 2016 年以来，它的开发者一直在为 Google
    Play 开发短信和 WAP 欺诈应用程序。
- en: 'The Android Security team first referenced Joker in its *2017 Android Security
    Year in Review* report, calling it BreadSMS. Then, in June 2019, Danish CSIS Security
    Group rediscovered Joker and described it in a blog post titled “Analysis of Joker—A
    Spy & Premium Subscription Bot on GooglePlay.” That publication, and a follow-up
    blog post by the Android Security team called “PHA Family Highlights: Bread (and
    Friends)” in January 2020, provide technical details about this family.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Android 安全团队在其*2017 年 Android 安全年终回顾*报告中首次提到 Joker，将其称为 BreadSMS。随后，在 2019 年
    6 月，丹麦 CSIS 安全小组重新发现了 Joker，并在一篇名为《Joker 分析——GooglePlay 上的间谍和付费订阅机器人》的博客文章中进行了描述。该发布内容以及
    Android 安全团队在 2020 年 1 月发布的后续博客文章《PHA 家族亮点：Bread（及其朋友们）》提供了关于这个家族的技术细节。
- en: Since 2019, Joker has been repeatedly found on Google Play, and many security
    researchers have reported it. To this day, the original Joker developers likely
    continue to develop WAP fraud applications targeting Southeast Asia, but we also
    believe that copycat malware developers have sprung up in the wake of Joker’s
    public success. Today, “Joker” is an umbrella term for WAP fraud on Google Play,
    covering an unknown number of distinct malware families.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2019 年以来，Joker 一直反复出现在 Google Play 上，许多安全研究人员已对此进行了报告。直到今天，原始的 Joker 开发者可能仍在开发针对东南亚的
    WAP 欺诈应用程序，但我们也认为，在 Joker 公开成功后，模仿者的恶意软件开发者纷纷涌现。如今，“Joker”已成为 Google Play 上 WAP
    欺诈的统称，涵盖了若干个不同的恶意软件家族。
- en: The most interesting aspects of Joker are its scale and its sophisticated methods
    of evading detection. Between 2016 and 2022, malware developers created thousands
    of Joker apps. As the Android Security team and antivirus companies learned how
    to detect Joker, the developers adjusted their defenses to avoid detection. Over
    the years, malware developers and defenders went through many iterations of this
    cat-and-mouse game. As a result, recent Joker apps are more convoluted than most
    malware families.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Joker 最有趣的方面是它的规模和巧妙的规避检测方法。从 2016 年到 2022 年，恶意软件开发者创建了数千个 Joker 应用程序。当 Android
    安全团队和杀毒公司学会如何检测 Joker 时，开发者调整了防御措施以避免被发现。多年来，恶意软件开发者和防御者经历了多轮这种猫捉老鼠的游戏。因此，最近的
    Joker 应用程序比大多数恶意软件家族更为复杂。
- en: The Joker app *com.guo.smscolor.amessage* (v5, 5445) from November 2021 shows
    how far things have gone. The app contains an encrypted file, *assets/ extersion/ex_compose*,
    that is really native ARM code. Once decrypted by the app and executed, this file
    reveals encrypted DEX code, which gets decrypted and executed. The code downloads
    a file called *adal.jar* from AliBaba’s cloud service and executes that, too.
    This *adal.jar* file contains the actual WAP fraud code. Of course, a smattering
    of other defensive techniques are employed throughout each of these steps, like
    emulator detection, code obfuscation, and encryption.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 2021 年 11 月的 Joker 应用 *com.guo.smscolor.amessage*（v5，5445）展示了技术已经发展的程度。该应用包含一个加密文件
    *assets/extersion/ex_compose*，实际上是原生的 ARM 代码。一旦应用解密并执行该文件，它将揭示加密的 DEX 代码，接着这些代码会被解密并执行。该代码从阿里巴巴的云服务下载名为
    *adal.jar* 的文件并执行。这个 *adal.jar* 文件包含了实际的 WAP 欺诈代码。当然，在每个步骤中都采用了一些其他防御技术，如模拟器检测、代码混淆和加密。
- en: '[Listing 2-15](ch02.xhtml#ch2lis15) shows code from *com.guo.smscolor.amessage*
    (v5, 5445), which targets South Africa and Thailand for WAP fraud. We’ve intentionally
    left it obfuscated to show how difficult it is to understand contemporary Joker
    code.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 2-15](ch02.xhtml#ch2lis15) 展示了来自 *com.guo.smscolor.amessage*（v5，5445）的代码，它针对南非和泰国进行
    WAP 欺诈。我们特意将其混淆，以展示当代 Joker 代码有多么难以理解。'
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 2-15: Sample code from the app* com.guo.smscolor.amessage *(v5, 5445)*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 2-15：来自应用* com.guo.smscolor.amessage *(v5, 5445) 的示例代码*'
- en: 'This example illustrates how *adal.jar* targets different countries and carriers.
    The Android API `getSimOperator` returns a five- or six-digit string containing
    the phone’s mobile country code and its mobile network code (MNC). Then the code
    checks whether this value starts with 655, the MCC for South Africa. In another
    place, it compares the value to 52001, 52003, and 52023\. The prefix 520 identifies
    Thailand, and the suffixes 01, 03, and 23 identify three of Thailand’s largest
    mobile networks: AIS, AIS-3G, and MTS. Joker targets these networks for WAP fraud.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了 *adal.jar* 如何针对不同国家和运营商。Android API `getSimOperator` 返回一个包含手机的移动国家代码和移动网络代码（MNC）的五位或六位字符串。然后，代码检查这个值是否以
    655 开头，这是南非的 MCC。另一个地方，它将该值与 52001、52003 和 52023 进行比较。前缀 520 标识泰国，后缀 01、03 和 23
    分别标识泰国的三大移动网络：AIS、AIS-3G 和 MTS。Joker 针对这些网络进行 WAP 欺诈。
- en: South Africa and Thailand are among the most common targets of WAP fraud. Other
    popular targets include countries in Southeast Asia (Vietnam and Indonesia, in
    particular) and the Middle East (including Egypt, the United Arab Emirates, Saudi
    Arabia, and others).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 南非和泰国是 WAP 欺诈的最常见目标之一。其他常见目标还包括东南亚国家（尤其是越南和印度尼西亚）以及中东地区（包括埃及、阿联酋、沙特阿拉伯等）。
- en: '**RAMNIT: WHEN WINDOWS MALWARE INFECTS ANDROID DEVELOPERS**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**RAMNIT：当 Windows 恶意软件感染 Android 开发者**'
- en: As a curious side note, 2015 and 2016 were big years for the Windows botnet
    Win32!Ramnit. This botnet infected the Windows computers of so many Android developers
    that it became the seventh-largest Google Play malware family of 2016\. On infected
    computers, Ramnit injected itself into ZIP files to propagate. Because Android
    apps are just ZIP files with the APK file extension, Ramnit also infected those.
    It wasn’t cross-system malware, so the fact that Android users installed apps
    containing Ramnit posed no danger. Nevertheless, the Android Security team removed
    apps with Ramnit executables from Google Play and asked infected developers to
    clean up their development systems.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个有趣的附带说明，2015年和2016年是Windows僵尸网络Win32!Ramnit的大年。这个僵尸网络感染了大量安卓开发者的Windows计算机，以至于它成为2016年Google
    Play第七大恶意软件家族。在感染的计算机上，Ramnit将自身注入ZIP文件进行传播。由于安卓应用程序实际上就是带有APK文件扩展名的ZIP文件，Ramnit也感染了这些应用程序。它并不是跨系统恶意软件，因此安卓用户安装含有Ramnit的应用程序并不构成危险。然而，安卓安全团队从Google
    Play中删除了含有Ramnit可执行文件的应用，并要求受感染的开发者清理他们的开发系统。
- en: '***Triada***'
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Triada***'
- en: 'When we discussed Ghost Push earlier in this chapter, we described a booming
    Chinese malware industry of connected creators and distributors. Other early malware
    specimens from this network include Triada and Chamois in 2014; Gooligan, Snowfox,
    and YouTube Downloader in 2015; and Hummingbad in 2016\. These malware families
    were huge, with sophisticated distribution models. While early versions of these
    networks spread through Google Play and sideloading, their distributors later
    focused on a much better distribution method: infiltrating and undermining the
    device manufacturing process.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本章早些时候讨论Ghost Push时，我们描述了一个蓬勃发展的中国恶意软件产业，涵盖了创作者和分发者的联系。来自这个网络的其他早期恶意软件样本包括2014年的Triada和Chamois，2015年的Gooligan、Snowfox和YouTube
    Downloader，以及2016年的Hummingbad。这些恶意软件家族规模庞大，分发模式复杂。虽然这些网络的早期版本通过Google Play和侧载传播，但它们的分发者后来将重点放在了一种更有效的分发方式上：渗透并破坏设备制造过程。
- en: Conveniently, most Android devices are manufactured in China, making it easy
    for Chinese malware authors to access them. One common way to gain this access
    appears to be through forming shell companies that masquerade as legitimate software
    developers. In reality, the software they build contains backdoors and other malicious
    built-in functionality. We have seen these shell companies develop over-the-air
    update solutions, face unlock software, and font management software with backdoors,
    then cheaply sell this technology to device manufacturers. As part of the integration
    process, the shell companies ask the manufacturers to give their software privileged
    access deep into the Android systems, allowing the malware to execute functionality
    that previously required rooting exploit capabilities.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，大多数安卓设备都是在中国制造的，这使得中国的恶意软件作者很容易访问这些设备。一种常见的方式似乎是通过成立壳公司，伪装成合法的软件开发商。实际上，他们开发的软件包含后门和其他恶意内建功能。我们已经看到这些壳公司开发了空中更新解决方案、人脸解锁软件以及带有后门的字体管理软件，然后廉价地将这些技术出售给设备制造商。在集成过程中，壳公司要求制造商给予他们的软件深入访问安卓系统的权限，从而使恶意软件能够执行之前需要root权限的功能。
- en: 'Triada might be the most famous preinstalled Android malware family. First
    described by Kaspersky in two blog posts in March 2016, “Triada: Organized Crime
    on Android” and “Everyone Sees Not What They Want to See,” it reached a level
    of sophistication rarely seen before. In June 2019, the Android Security team
    published additional technical insights about Triada’s capabilities in “PHA Family
    Highlights: Triada.” That month, tech journalist Brian Krebs dug into the origins
    of Triada and the people behind it in “Tracing the Supply Chain Attack on Android.”'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Triada 可能是最著名的预装安卓恶意软件家族。它首次由卡巴斯基在2016年3月的两篇博客文章中描述，分别是《Triada：安卓上的有组织犯罪》和《每个人看到的都不是他们想看到的》，它达到了前所未有的复杂程度。2019年6月，安卓安全团队在《PHA家族亮点：Triada》中发布了关于Triada能力的更多技术见解。同月，科技记者布赖恩·克雷布斯在《追踪安卓供应链攻击》一文中深入探讨了Triada的起源及其背后的人员。
- en: To understand how sophisticated malware families develop over time, it helps
    to look at early samples. These tend to be more primitive and contain fewer anti-analysis
    techniques, like obfuscation and encryption. Following the development of a malware
    family over time also helps understand the malware developers’ motivations and
    what did and didn’t work for them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解复杂的恶意软件家族是如何随时间发展演变的，查看早期样本很有帮助。这些样本通常较为原始，且包含的反分析技术较少，例如混淆和加密。随着恶意软件家族随时间的演变，了解它们的开发动机以及哪些方法有效，哪些无效，也是非常重要的。
- en: Triada’s roots go back to at least September 2014, when a sample appeared with
    the package name *com.untory.run1* (v1, 251c). This app is easy to understand,
    as it uses few defensive techniques. The Java packages *security.**, *tools.**,
    and *util.** contain the core of the Triada code. The only attempt at obfuscation
    is a few encrypted strings that the app would decrypt at runtime with the help
    of a native code function in the embedded file *libhzwtool.so*. Like the use of
    .NET by the Mono WAP fraud family described earlier in this chapter, the use of
    code in native libraries can bypass app scanning tools that only analyze Java
    code. Hoping to evade these limited tools, the Triada authors intentionally used
    native code as an anti-analysis trick; the string decryption function doesn’t
    contain any behavior that could not be implemented in Java.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Triada的历史至少可以追溯到2014年9月，当时一个名为*com.untory.run1*（v1，251c）的样本首次出现。这个应用很容易理解，因为它使用了很少的防御技术。Java包*security.**、*tools.**和*util.**包含了Triada代码的核心。唯一的混淆尝试是几个加密字符串，应用在运行时会通过嵌入的本地代码函数*libhzwtool.so*解密这些字符串。像本章前面描述的Mono
    WAP欺诈家族使用.NET一样，使用本地库中的代码可以绕过仅分析Java代码的应用扫描工具。为了躲避这些有限的工具，Triada的作者故意使用了本地代码作为反分析手段；而字符串解密函数并没有包含任何无法用Java实现的行为。
- en: As input, the string decryption algorithm accepts a hex string and two 16-byte
    keys. It then XORs each byte of the ciphertext with the appropriate bytes of the
    two keys. The two keys are read from offsets 0x08 and 0x18 of the asset file *assets/hzwLib*.
    For years, Triada has hidden encryption keys in asset files and used simple double-XOR
    decryption algorithms, making new samples easy to recognize.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 作为输入，字符串解密算法接受一个十六进制字符串和两个16字节的密钥。然后，它将密文的每个字节与两个密钥的相应字节进行异或（XOR）操作。两个密钥从资产文件*assets/hzwLib*的偏移地址0x08和0x18读取。多年来，Triada一直将加密密钥隐藏在资产文件中，并使用简单的双异或解密算法，使新样本容易被识别。
- en: For its rooting capabilities, the *com.untory.run1* (v1, 251c) sample uses EasyRoot.
    This is an Android SDK developed by Chinese technology conglomerate Baidu that
    contains rooting exploits for different devices and is freely available for Android
    developers to embed in their apps. Triada stores the rooting exploits in the package
    *com.baidu.easyroot*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其rooting能力，*com.untory.run1*（v1，251c）样本使用了EasyRoot。这是由中国科技巨头百度开发的Android SDK，包含了不同设备的root漏洞，并且可以自由供Android开发者嵌入他们的应用程序中。Triada将root漏洞存储在*com.baidu.easyroot*包中。
- en: We believe that the shift to manufacturer infiltration happened partly because
    Android devices became more difficult to root. We have never seen one of these
    Chinese networks deploy zero-day rooting capabilities, suggesting that they had
    previously relied on rooting exploits developed by others. After 2015, public
    rooting exploits became so rare that years could go by between releases. Tired
    of waiting, the malware developers likely had to find an alternative way to get
    privileged system access.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为，转向制造商渗透的原因部分是因为Android设备变得越来越难以获取root权限。我们从未看到这些中国网络部署过零日rooting能力，这表明他们之前依赖于别人开发的root漏洞。2015年之后，公开的root漏洞变得极为稀少，发布之间可能会有多年间隔。由于等待时间过长，恶意软件开发者很可能不得不寻找其他方式来获取特权系统访问权限。
- en: 'There are other benefits to infiltrating device manufacturers. Pre-installed
    software can perform device modifications that are off-limits even to rooting
    exploits, such as changes to security settings like SELinux. It is also much easier
    to gain a large installation base: malware distributors only have to dupe one
    company into installing their malware onto hundreds of thousands of devices. That’s
    a much easier task than advertising a product to individual Android users in the
    hopes that they will choose to install it! These advantages helped preinstalled
    malware take off in 2015.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透设备制造商还有其他好处。预安装的软件可以进行即使是根权限漏洞也无法修改的设备修改，例如对安全设置（如SELinux）的更改。此外，获得大量安装基础也变得更加容易：恶意软件分发者只需欺骗一家企业将他们的恶意软件安装到成千上万的设备上。这比向单个Android用户宣传产品，并希望他们选择安装它，任务要容易得多！这些优势帮助预安装恶意软件在2015年得到了广泛传播。
- en: '***Chamois***'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Chamois***'
- en: Following in Triada’s footsteps, Chamois may have been the most impactful botnet
    of 2018\. First publicly described by the Android Security team in March 2017
    in a blog post titled “Detecting and Eliminating Chamois, a Fraud Botnet on Android,”
    it originated in November 2014.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 继Triada之后，Chamois可能是2018年最具影响力的僵尸网络。Android安全团队在2017年3月首次在一篇名为《检测并消除Chamois：Android上的欺诈僵尸网络》的博客中公开描述了它，它的起源可以追溯到2014年11月。
- en: 'Chamois improved upon Triada in several ways, most noticeably by introducing
    complex anti-analysis functionality. It includes several layers of encrypted native
    code of much higher complexity than Triada’s, then hides at least 45 environmental
    checks to determine whether it is running in an emulated environment or under
    analysis by security researchers. While many Android malware samples already had
    similar checks, 45 of them was exceptional at the time. The Android Security team
    discusses these features further in the 2018 Virus Bulletin paper “Unpacking the
    Packed Unpacker: Reversing an Android Anti-Analysis Native Library.”'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Chamois在多个方面改进了Triada，最显著的改进是引入了复杂的反分析功能。它包括几层比Triada复杂得多的加密本地代码，并隐藏至少45个环境检查，用于判断它是否运行在模拟环境中或是否受到安全研究人员的分析。尽管许多Android恶意软件样本已经具备类似的检查，但当时45个检查的数量是非常突出的。Android安全团队在2018年《病毒公告》论文《解包打包解包器：逆向分析Android反分析本地库》中进一步讨论了这些特性。
- en: Chamois was also an early example of malware that pivoted from using Google
    Play as an infection vector to getting preinstalled on user devices. After the
    Android Security team first removed all Chamois apps from Google Play in 2017,
    the Chamois developers started contacting Android manufacturers. Officially, they
    offered a mobile payment solution, but this solution contained hidden code that
    downloaded and executed malicious functionality, like advertising or SMS fraud.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Chamois还是一个早期的恶意软件例子，它从使用Google Play作为感染途径转向了预安装在用户设备上的方式。在Android安全团队在2017年首次从Google
    Play中移除所有Chamois应用后，Chamois的开发者开始联系Android设备制造商。官方上，他们提供了一种移动支付解决方案，但这个解决方案包含了隐藏的代码，用来下载和执行恶意功能，例如广告或短信欺诈。
- en: '***Gooligan and Snowfox***'
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Gooligan和Snowfox***'
- en: Two other Android malware families from China, Gooligan and Snowfox, compromised
    millions of Google accounts in 2015 and 2016\. Instead of phishing users for their
    Google account credentials, these families stole Google account tokens from a
    protected part of the Android operating system. These account tokens gave the
    thieves total control over a victim’s account. For example, they could log into
    the victim’s Gmail account, download their files from Google Drive, or look at
    the photos they’d saved in Google Photos.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 来自中国的另外两个Android恶意软件家族——Gooligan和Snowfox，在2015年和2016年侵入了数百万个Google账户。与其通过钓鱼攻击获取用户的Google账户凭证，这些恶意软件家族从Android操作系统的受保护部分窃取了Google账户令牌。这些账户令牌使盗贼能够完全控制受害者的账户。例如，他们可以登录受害者的Gmail账户，下载其Google
    Drive中的文件，或者查看他们保存在Google Photos中的照片。
- en: Regular apps can’t access the area of the operating system that stores Google
    account access tokens. To steal the tokens, third-party applications need to elevate
    their privileges with an exploit or come preinstalled with elevated privileges
    already granted. Gooligan did both. As described by Check Point in “More Than
    1 Million Google Accounts Breached by Gooligan” in November 2016, Gooligan used
    several exploits to elevate its regular app privileges to root. It collected information
    about the device configuration, sent that to its command-and-control server, and
    downloaded exploit plug-ins that specifically targeted the fingerprinted device
    type.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 常规应用无法访问存储 Google 账户访问令牌的操作系统区域。为了窃取令牌，第三方应用需要通过漏洞提升其权限，或者预装时已经获得了提升的权限。Gooligan
    做到了这两点。正如 Check Point 在 2016 年 11 月的《超过 100 万 Google 账户被 Gooligan 入侵》报告中所描述的，Gooligan
    使用了多个漏洞将其常规应用权限提升为 root 权限。它收集了设备配置的信息，将其发送到指挥与控制服务器，并下载了专门针对指纹识别设备类型的利用插件。
- en: Snowfox, named after its characteristic *com.snowfox* package name, is an SDK
    discovered after Gooligan. Unlike Gooligan, it did not download exploit plug-ins
    to root devices. Rather, it came preinstalled on devices or, if sideloaded, relied
    on devices already being rooted. Snowfox was extremely capable, with an extensive
    plug-in system that downloaded additional code from its command-and-control server.
    We have observed more than 30 different plug-in files with functionality like
    Google account token theft, advertising fraud, or the ability to download and
    install more apps. The Android Security team was the first to describe Snowfox,
    in the *2018 Android Security Year in Review* report.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Snowfox，因其特有的 *com.snowfox* 包名而得名，是一个在 Gooligan 后被发现的 SDK。与 Gooligan 不同，它并没有下载利用插件以获取设备的
    root 权限。相反，它预装在设备上，或者如果通过侧载安装，则依赖于设备已经被 root。Snowfox 极其强大，拥有一个广泛的插件系统，可以从其指挥与控制服务器下载额外的代码。我们已经观察到超过
    30 个不同的插件文件，功能包括窃取 Google 账户令牌、广告欺诈或下载和安装更多应用。Android 安全团队首次在 *2018 Android 安全年度回顾*
    报告中描述了 Snowfox。
- en: One example of a Snowfox app is *com.zg.magicDrop* (v1, 9097). After communicating
    with its command-and-control servers via encrypted channels, this app downloads
    plug-ins like *snowfox*_*v19n.jar* with malicious functionality. This plug-in
    code isn’t well obfuscated. For example, [Listing 2-16](ch02.xhtml#ch2lis16) shows
    the functionality used to steal Google account tokens. It first copies the Accounts
    database to a different location and then uses SQLite commands to extract the
    tokens from the database.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Snowfox 应用的一个示例是 *com.zg.magicDrop* (v1, 9097)。该应用通过加密通道与其指挥与控制服务器通信后，下载恶意功能的插件，如
    *snowfox*_*v19n.jar*。这个插件代码没有经过复杂的混淆。例如，[列表 2-16](ch02.xhtml#ch2lis16) 显示了用来窃取
    Google 账户令牌的功能。它首先将账户数据库复制到另一个位置，然后使用 SQLite 命令从数据库中提取令牌。
- en: '[PRE17]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 2-16: The app* com.zg.magicDrop *(v1, 9097) stealing Google account
    tokens*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-16：应用* com.zg.magicDrop *(v1, 9097) 偷窃 Google 账户令牌*'
- en: 'VirusTotal’s anti-malware scan results link *snowfox*_*v19n.jar* to Xinyinhe,
    another malware family created by a Chinese company of the same name. California-based
    security company Fire Eye discusses this family in a 2015 blog post titled “Guaranteed
    Clicks: Mobile App Company Takes Control of Android Phones,” describing functionality
    and a structure that sound similar to that of Gooligan and Snowfox. Whether these
    apps belong to the same family or were developed by the same people is unclear,
    as the plug-in-based system of many Chinese malware families makes attribution
    complicated.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: VirusTotal 的反恶意软件扫描结果将 *snowfox*_*v19n.jar* 与 Xinyinhe 关联，Xinyinhe 是一家中国公司创建的另一个恶意软件家族。总部位于加利福尼亚的安全公司
    Fire Eye 在 2015 年的博客文章《保证点击：移动应用公司控制 Android 手机》中讨论了这个家族，描述的功能和结构与 Gooligan 和
    Snowfox 相似。是否这些应用属于同一家族，或者是否由同一开发人员开发尚不明确，因为许多中国恶意软件家族的插件化系统使得归属变得复杂。
- en: '***Hummingbad***'
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Hummingbad***'
- en: In 2016 Check Point discovered Hummingbad, a complex preinstalled malware family
    from China with lots of dynamically downloaded functionality. Of particular interest,
    Hummingbad performed process injection using the Linux system call `ptrace`. A
    July report titled “From Hummingbad to Worse” describes the technical details
    of this.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年，Check Point 发现了 Hummingbad，一个来自中国的复杂预安装恶意软件家族，具有大量动态下载的功能。特别引人注意的是，Hummingbad
    使用 Linux 系统调用 `ptrace` 执行进程注入。一份 7 月的报告《从 Hummingbad 到更糟》描述了这一技术细节。
- en: In the sample *com.swiping.whale* (v262, 783a), the injection code appears in
    the Java package *com.ry.inject.JNI*. Two asset files, *assets/inject* and *assets/libhooker.so*,
    are involved in hooking Google Play. The *inject* file is a regular Linux executable
    that takes command line arguments to direct the hooking process. [Listing 2-17](ch02.xhtml#ch2lis17)
    shows how Hummingbad builds the whole process injection command.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 *com.swiping.whale*（v262, 783a）中，注入代码出现在 Java 包 *com.ry.inject.JNI* 中。两个资产文件，*assets/inject*
    和 *assets/libhooker.so*，涉及到钩取 Google Play。*inject* 文件是一个常规的 Linux 可执行文件，接受命令行参数来指导钩取过程。[清单
    2-17](ch02.xhtml#ch2lis17) 显示了 Hummingbad 如何构建整个进程注入命令。
- en: '[PRE18]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 2-17: Hummingbad starting the process injection into Google Play*'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-17：Hummingbad 启动 Google Play 的进程注入*'
- en: The first argument is the name of the process to hook (*com.android.vending*,
    for Google Play) and the second is the binary to be injected, *libhooker.so*.
    The third argument is an exported function in *libhooker.so* that is called after
    the binary is injected into the Google Play process.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是要钩取的进程名称（*com.android.vending*，即 Google Play），第二个参数是要注入的二进制文件，*libhooker.so*。第三个参数是
    *libhooker.so* 中的一个导出函数，在二进制文件注入到 Google Play 进程后被调用。
- en: This binary also contains a Java code file that is responsible for interacting
    with Google Play after injection. This code allows Hummingbad to manipulate the
    Google Play interface to, for example, click the installation button and install
    apps without user consent.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该二进制文件还包含一个 Java 代码文件，负责在注入后与 Google Play 交互。该代码允许 Hummingbad 操控 Google Play
    界面，例如点击安装按钮并在未获得用户同意的情况下安装应用程序。
- en: '***YouTube Downloader***'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***YouTube 下载器***'
- en: YouTube Downloader was a comparatively small malware family preinstalled on
    low-cost Android devices. To distribute the malware, someone with access to the
    device manufacturing process inserted malicious code into Google apps like YouTube
    (hence the name of the malware family), effectively replacing the legitimate apps.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube 下载器是一个相对较小的恶意软件家族，预装在低成本安卓设备上。为了分发恶意软件，某些有权限访问设备制造过程的人将恶意代码插入到谷歌应用程序中，如
    YouTube（因此得名），有效地替换了合法的应用程序。
- en: Injecting malware into preloaded Google apps makes it much harder for antivirus
    applications to disinfect devices. Due to technical limitations, it is impossible
    to delete preloaded apps from devices; we can only disable these apps to stop
    them from running. However, an attempt to disable popular apps like YouTube to
    protect users likely won’t succeed, as users will probably re-enable them to watch
    videos.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 将恶意软件注入预装的 Google 应用程序使得杀毒应用程序更难清除设备上的病毒。由于技术限制，无法从设备中删除预装应用程序；我们只能禁用这些应用程序以防止其运行。然而，尝试禁用像
    YouTube 这样的热门应用来保护用户可能不会成功，因为用户可能会重新启用它们以观看视频。
- en: YouTube apps containing the preloaded malware also can’t be updated to the legitimate
    version. Original YouTube apps are signed with Google’s secret private key. When
    malware developers inject malicious code into the legitimate YouTube app, they
    need to re-sign the modified app to prove its integrity to Android. But, as malware
    developers don’t have Google’s private key, they must use their own. As a result,
    when installing a legitimate YouTube update, Android notices the key mismatch
    and denies the install, turning the code signing security feature against the
    user. In the end, the only way to disinfect devices with fake YouTube apps is
    for the manufacturer to issue a complete system update that removes the app.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 含有预装恶意软件的 YouTube 应用程序也无法更新为正版版本。原版的 YouTube 应用程序是用谷歌的私钥签名的。当恶意软件开发者将恶意代码注入到正版
    YouTube 应用程序时，他们需要重新签名修改后的应用程序，以证明其完整性给安卓系统。但由于恶意软件开发者没有谷歌的私钥，他们必须使用自己的私钥。因此，当安装正版
    YouTube 更新时，安卓系统会发现密钥不匹配并拒绝安装，这样代码签名的安全特性反而对用户产生了不利影响。最终，唯一能清除假 YouTube 应用程序的方式是设备制造商发布一个完整的系统更新来删除该应用。
- en: YouTube Downloader set the direction for the next few years of malware. Many
    malware developers stopped developing new preinstalled malware apps and instead
    focused on injecting malicious code into legitimate system apps. Over time, the
    locations of the code became ever more sneaky. We’ve seen code injected into the
    system UI process, the update process, and even the Android API itself. Disabling
    these sensitive apps and files renders devices unusable, putting antivirus products
    in a difficult spot when they try to protect users.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube Downloader为接下来几年的恶意软件发展指明了方向。许多恶意软件开发者停止了开发新的预装恶意软件应用，而是专注于将恶意代码注入到合法的系统应用中。随着时间的推移，这些代码的位置变得越来越隐蔽。我们曾看到代码被注入到系统UI进程、更新进程，甚至Android
    API本身。禁用这些敏感应用和文件会使设备无法使用，使得当防病毒产品尝试保护用户时，面临着困难的局面。
- en: Other than their distribution technique, YouTube Downloader files are not very
    interesting. Samples like *com.google.android.youtube* (v1599000099, 428a) contain
    nothing but functionality that downloads and installs other apps. We omit example
    code for these samples, as they do not contain any novel techniques.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 除了分发方式外，YouTube Downloader 文件并不十分有趣。像*com.google.android.youtube*（v1599000099,
    428a）这样的示例仅包含下载并安装其他应用的功能。我们省略了这些示例的代码，因为它们并不包含任何新颖的技术。
- en: '**The Consolidation of Abuse: 2017 and Onward**'
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**滥用的整合：2017年及之后**'
- en: In 2017, Android malware developers reached consensus regarding the best ways
    to profit from Android malware. This change ended the diverse, exploratory phase
    of the prior years, when successful malware developers used many techniques to
    make money. From 2017 on, the largest malware families were proxy networks like
    Idle Coconut, WAP fraud families like the previously described Joker and Turkish
    Clicker, data brokers like OneAudience, and ad fraud families like Android.Click.312.origin.
    We’ll look at the last two of these in this section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在2017年，Android 恶意软件开发者就如何从 Android 恶意软件中获利达成了共识。这一变化结束了前几年多样化、探索性的阶段，那时成功的恶意软件开发者使用了多种技术来赚钱。从2017年开始，最大的恶意软件家族是代理网络，如Idle
    Coconut，WAP欺诈家族，如前文描述的Joker和Turkish Clicker，数据经纪人，如OneAudience，以及广告欺诈家族，如Android.Click.312.origin。在本节中，我们将重点关注后两类恶意软件。
- en: While diverse at first glance, most modern malware follows a common scheme.
    First, it is invisible to users. Users don’t like abusive, malicious, or annoying
    app behavior. If they believe an app is problematic, they will uninstall it, ending
    the developer’s ability to earn income from it. Setting up network proxies, slurping
    up data, or clicking invisible ads is not behavior users can easily recognize
    or attribute to a particular app. Apps with this invisible functionality can stay
    on devices for months or years, running in the background even if users have long
    forgotten about them.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来虽然多样，但大多数现代恶意软件遵循一个共同的模式。首先，它对用户是不可见的。用户不喜欢滥用、恶意或令人讨厌的应用行为。如果他们认为某个应用有问题，他们会卸载它，从而结束开发者从中获利的可能。设置网络代理、吸取数据或点击不可见的广告都不是用户能轻易识别或归因于某个特定应用的行为。具有这种隐形功能的应用可以在设备上停留数月甚至数年，即使用户早已忘记它们，它们仍会在后台运行。
- en: Second, modern malware requires very few Android permissions. To set up network
    proxies, generate fraudulent ad clicks, or connect to WAP fraud sites, they require
    only the `INTERNET` permission. Nearly every app in the Android ecosystem requests
    this permission, so malware authors can use it without garnering unwanted attention.
    The lack of sensitive or unusual permissions makes it very difficult for security
    companies to scan for and detect this kind of abuse. With no activity besides
    network requests, this malware is as indistinguishable from legitimate apps as
    it gets.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，现代恶意软件所需的Android权限非常少。要设置网络代理、生成欺诈性广告点击或连接到WAP欺诈网站，它们仅需要`INTERNET`权限。几乎每个Android生态系统中的应用都请求此权限，因此恶意软件作者可以在不引起不必要注意的情况下使用它。缺乏敏感或异常权限使得安全公司难以扫描和检测这种滥用行为。除了网络请求外，这些恶意软件与合法应用几乎无法区分。
- en: Third, modern malware sits in a legal and moral gray area. A malware author
    who steals a user’s bank credentials and empties their bank account will find
    themselves in the spotlight of law enforcement. But a malware author who pays
    app developers to embed a proxy SDK or collect user data is unlikely to be prosecuted.
    As a result, malware developers don’t have to be underground criminal organizations.
    Seemingly legitimate software shops with office buildings, social media presence,
    and venture capital funding can build these kinds of apps.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，现代恶意软件处于法律和道德的灰色地带。一名盗取用户银行凭证并清空其银行账户的恶意软件作者将成为执法部门关注的焦点。然而，支付应用开发者嵌入代理 SDK
    或收集用户数据的恶意软件作者不太可能被起诉。因此，恶意软件开发者不必是地下犯罪组织。看似合法的软件公司，拥有办公楼、社交媒体存在以及风险投资资金，也可以开发这类应用。
- en: In addition, many successful modern Android malware families use SDKs. Advertising
    fraudsters, proxy networks, and data brokers make only a little money from each
    infected device, so they must reach large numbers of devices. To get there, these
    malware developers build SDKs and convince legitimate developers to use them in
    their apps, either voluntarily or for pay. In several publicly documented cases,
    malware SDKs were embedded in apps that had hundreds of millions of installs.
    No other known method allows malware developers to scale to this level.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多成功的现代安卓恶意软件家族都使用 SDK。广告欺诈者、代理网络和数据经纪人从每个感染设备中赚取的利润较少，因此他们必须接触大量设备。为了达到这一点，这些恶意软件开发者构建
    SDK 并说服合法开发者将其用于应用中，无论是自愿的还是付费的。在几起公开记录的案例中，恶意软件 SDK 被嵌入了数亿次安装量的应用中。没有其他已知方法可以让恶意软件开发者达到这个规模。
- en: Convincing legitimate developers to embed SDKs in their apps without asking
    too many questions requires at least the appearance of legitimacy, which explains
    why many malware companies have pretended to be legitimate participants in the
    Android ecosystem. They have professional websites, a presence on LinkedIn, and
    even account managers on staff that build relationships with legitimate developers
    of popular apps.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 说服合法开发者将 SDK 嵌入其应用而不提过多问题，至少需要一种合法的外观，这也解释了为什么许多恶意软件公司伪装成安卓生态系统中的合法参与者。它们拥有专业的网站、LinkedIn
    页面，甚至配备有客户经理与受欢迎的应用开发者建立关系。
- en: The SDK method also pushes cost and risk away from malware developers and onto
    unwitting developers. Once a malware SDK is revealed, it’s the legitimate developer’s
    Google Play account that risks being terminated. The fraudsters behind the SDK
    hide their traces through shell companies in countries such as Seychelles. A shell
    company that has acquired a bad reputation is easily replaced by a new shell company
    run by the same people.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 方法还将成本和风险从恶意软件开发者转移到了毫无察觉的开发者身上。一旦恶意软件 SDK 被曝光，面临风险的将是合法开发者的 Google Play
    账号被终止。SDK 背后的诈骗者通过在如塞舌尔等国家的壳公司掩盖他们的踪迹。一个名誉受损的壳公司可以轻易被同一群人运营的新壳公司替代。
- en: '***OneAudience***'
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***OneAudience***'
- en: Data brokers are as old as Android but grew in popularity around 2017, when
    more of them began building SDKs and paying legitimate developers to secretly
    embed them in their apps. These SDKs gather as much information about a user’s
    location history, app usage, or web browsing behavior as possible. Because there
    is no shortage of potential buyers for this data, many companies push the boundaries
    of what kinds of data collection Google Play policies will allow.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 数据经纪人和安卓一样古老，但在 2017 年左右开始流行起来，那时更多的经纪人开始构建 SDK，并支付合法开发者将其偷偷嵌入应用中。这些 SDK 会尽可能地收集用户的位置信息历史、应用使用情况或网页浏览行为。由于这些数据的潜在买家不乏其人，许多公司不断挑战
    Google Play 政策所允许的数据收集边界。
- en: Founded in 2016, an American company called OneAudience was an early player
    in that space. Its stated goal was to “help developers earn new revenue by enhancing
    app user information into the audience insights advertisers crave.” In 2019, it
    was discovered that OneAudience provided an Android SDK that collected Twitter
    (which was renamed X in 2023) and Facebook information without user consent. After
    being exposed, the company swiftly announced its shutdown. Facebook later filed
    a lawsuit against the developer pertaining to the company’s data access practices.
    They settled the lawsuit, as described in Facebook’s February 2020 blog post “Taking
    Action Against Platform Abuse.” OneAudience acknowledged the settlement on its
    website but kept its product and company shut down.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年成立的美国公司OneAudience是该领域的早期参与者。其声明的目标是“通过将应用用户信息转化为广告商渴望的观众洞察，帮助开发者赚取新的收入。”2019年，发现OneAudience提供了一个Android
    SDK，未经用户同意收集Twitter（2023年更名为X）和Facebook的信息。曝光后，该公司迅速宣布关闭。Facebook随后对该开发者提起诉讼，涉及公司数据访问行为。根据Facebook
    2020年2月的博客文章《采取行动反对平台滥用》，双方达成了和解。OneAudience在其网站上确认了和解，但仍然关闭了其产品和公司。
- en: The technical details of OneAudience’s access to Twitter and Facebook accounts
    reveal a security problem common across all popular operating systems. Modern
    applications are built by combining app code with many add-on SDKs. By default,
    all of this code is executed in the same process. There are no security boundaries
    inside a process, as the operating system assumes that all code inside the same
    process is equally trustworthy. Unfortunately, this model is outdated and unrealistic.
    Rogue SDKs exist, with full access to all of the app’s other SDKs and core code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: OneAudience访问Twitter和Facebook账户的技术细节揭示了一个所有流行操作系统中普遍存在的安全问题。现代应用程序通过将应用程序代码与许多附加SDK结合来构建。默认情况下，所有这些代码都在同一个进程中执行。进程内部没有安全边界，因为操作系统假设同一进程内的所有代码都是同等可信的。不幸的是，这种模型已经过时且不现实。恶意SDK存在，能够完全访问应用程序的其他SDK和核心代码。
- en: '[Listing 2-18](ch02.xhtml#ch2lis18), taken from the app *com.bestcoolfungames.cockroachsmasher*
    (v10617, 52f2), shows how the OneAudience SDK uses reflection to access users’
    Facebook and Twitter information. This behavior is possible because the Facebook
    and Twitter SDKs are running in the same app process as the OneAudience SDK. If
    a user has previously logged in to Twitter or Facebook from inside the app, the
    Twitter and Facebook SDKs contain their authentication tokens. OneAudience collects
    these authentication tokens and uses them to secretly connect to the user’s Twitter
    and Facebook accounts and scrape personal information.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表2-18](ch02.xhtml#ch2lis18)，摘自应用程序*com.bestcoolfungames.cockroachsmasher*（v10617,
    52f2），展示了OneAudience SDK如何通过反射访问用户的Facebook和Twitter信息。这个行为之所以可能，是因为Facebook和Twitter
    SDK与OneAudience SDK运行在相同的应用进程中。如果用户之前在应用程序中登录过Twitter或Facebook，Twitter和Facebook
    SDK中会包含他们的认证令牌。OneAudience收集这些认证令牌，并利用它们偷偷连接到用户的Twitter和Facebook账户，抓取个人信息。'
- en: '[PRE19]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 2-18: OneAudience uses reflection to access Twitter and Facebook authentication
    tokens.*'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-18：OneAudience使用反射访问Twitter和Facebook认证令牌。*'
- en: Besides Twitter and Facebook information, OneAudience also collected information
    about the user’s email addresses, phone call history, contact list, location,
    installed apps, and much more.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Twitter和Facebook的信息，OneAudience还收集了用户的电子邮件地址、电话通话历史、联系人列表、位置、已安装的应用程序等更多信息。
- en: '***Android.Click.312.origin***'
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Android.Click.312.origin***'
- en: 'In 2018, the Russian antivirus company Dr. Web discovered the largest click
    fraud family of that year. In the August 2019 blog post “Doctor Web: Clicker Trojan
    Installed from Google Play by Some 102,000,000 Android Users,” the company gave
    the malware family the nondescript name *Android.Click.312.origin*. This generic
    name understates the importance of this family, which remained prominent in 2019
    and 2020.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年，俄罗斯的杀毒公司Dr. Web发现了当年最大的点击欺诈家族。在2019年8月的博客文章《Doctor Web：某些102,000,000 Android用户从Google
    Play安装了Clicker木马》中，该公司为这一恶意软件家族起了一个不起眼的名字*Android.Click.312.origin*。这个通用名称低估了这个家族的重要性，它在2019年和2020年依然保持了显著影响力。
- en: Android.Click.312.origin is a typical click fraud SDK. It uses heavily obfuscated
    class and variable names and encrypts all of its strings with a custom encryption
    scheme. [Listing 2-19](ch02.xhtml#ch2lis19) shows an excerpt taken from the app
    *com.happylife.callflash* (v26, dca4).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Android.Click.312.origin是一个典型的点击欺诈SDK。它使用高度混淆的类和变量名，并通过自定义加密方案加密所有字符串。[列表 2-19](ch02.xhtml#ch2lis19)显示了来自应用*com.happylife.callflash*（v26，dca4）的摘录。
- en: '[PRE20]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Listing 2-19: Using name obfuscation and custom string encryption, Android.Click.312.origin
    protects itself from naive analysis.*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-19：通过使用名称混淆和自定义字符串加密，Android.Click.312.origin 保护自己免受简单分析。*'
- en: Under all of this obfuscation and encryption, Android.Click.312.origin is straightforward.
    After a certain period of time, the SDK starts creating invisible WebView objects
    and executes JavaScript code that fraudulently clicks advertisements.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些混淆和加密下，Android.Click.312.origin其实很简单。在一段时间后，该SDK开始创建不可见的WebView对象，并执行JavaScript代码，欺诈性地点击广告。
- en: '***Cheetah Mobile***'
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***猎豹移动***'
- en: In November 2018, BuzzFeed News published an article called “These Hugely Popular
    Android Apps Have Been Committing Ad Fraud Behind Users’ Backs” about a severe
    form of ad fraud discovered by US-based advertising company Kochava. The article
    accused Chinese mobile app development company Cheetah Mobile of defrauding legitimate
    advertisers through a technique called *installation attribution fraud*. After
    the BuzzFeed News article broke, Cheetah Mobile was permanently suspended from
    Google Play.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年11月，BuzzFeed新闻发布了一篇名为《这些极受欢迎的安卓应用在用户背后进行广告欺诈》的文章，报道了美国广告公司Kochava发现的一种严重广告欺诈形式。文章指控中国移动应用开发公司猎豹移动通过一种名为*安装归因欺诈*的技术欺骗了合法的广告商。在BuzzFeed新闻的报道曝光后，猎豹移动被Google
    Play永久封禁。
- en: 'Installation attribution fraud is a form of ad fraud that doesn’t rely on fraudulent
    clicks on ads to make money. Instead, it intercepts the installation attribution
    process, which determines the advertiser to credit when a user installs an app
    from an ad. When no fraud is involved, the developer of the application that showed
    the ad is credited for the installation of the advertised app. But when fraud
    is involved, this crediting system can be redirected: the fraudulent code intercepts
    the attribution, replacing it with a forged attribution that claims that the installation
    came from the fraudster’s code. Then, the fraudster receives the credit instead
    of the developer of the legitimate app that showed the ad.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 安装归因欺诈是一种广告欺诈形式，它不依赖于欺诈性点击广告来赚钱。相反，它拦截安装归因过程，该过程决定了用户从广告安装应用时应归功于哪个广告商。在没有欺诈的情况下，展示广告的应用开发者会因用户安装广告应用而获得归因。但当涉及欺诈时，这一归因系统可以被重定向：欺诈代码拦截了归因，将其替换为伪造的归因，声称安装来自欺诈者的代码。这样，欺诈者会获得归因，而不是展示广告的合法应用的开发者。
- en: Responding to the allegations by BuzzFeed News and Kochava, Cheetah Mobile representatives
    posted a series of nine blog posts explaining their point of view. Denying responsibility
    for the fraudulent behavior, Cheetah Mobile blamed several SDKs embedded in its
    apps for the fraudulent behavior—most notably three SDKs called Batmobi, Duapps,
    and Altamob, which were themselves developed by three Chinese companies in the
    mobile advertising space.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在回应BuzzFeed新闻和Kochava的指控时，猎豹移动代表发布了一系列九篇博客文章，阐明了他们的观点。猎豹移动否认对欺诈行为负责，指责其应用中嵌入的多个SDK导致了欺诈行为——其中最著名的是三个SDK，分别是Batmobi、Duapps和Altamob，它们是由三家中国的移动广告公司开发的。
- en: Who is to blame for the fraud (and whether any of the lawsuits with which the
    different parties threatened each other actually materialized) is beyond the scope
    of this book, but let’s take a look at how the fraud works. In order to perform
    installation attribution fraud, the SDKs continuously monitor installations coming
    from Google Play. After a few plausibility checks to hide the fraudulent activity,
    they broadcast a `com.android.vending.INSTALL_REFERRER` message to claim themselves
    as the source of the new app installation. [Listing 2-20](ch02.xhtml#ch2lis20)
    shows this straightforward fraud technique.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 谁应为欺诈负责（以及不同方之间互相威胁的诉讼是否有实际发生）超出了本书的范围，但我们可以来看看欺诈是如何运作的。为了执行安装归因欺诈，这些SDK会持续监控来自Google
    Play的安装。在经过一些合理性检查以隐藏欺诈活动后，它们会广播`com.android.vending.INSTALL_REFERRER`消息，声称自己是新应用安装的来源。[列表
    2-20](ch02.xhtml#ch2lis20)展示了这一简单的欺诈技术。
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 2-20: The SDK sends an install referrer message to fraudulently claim
    to be the origin of an app installation.*'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-20：该 SDK 发送安装推荐信息，欺诈性地声称自己是应用程序安装的来源。*'
- en: Of course, the SDKs implicated in this case are not the only ones practicing
    installation attribution fraud. Like click fraud, this method is widespread in
    the Android ecosystem. Ad providers would be well advised to study it and take
    steps to protect their own advertisement revenue streams.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，涉及此案件的 SDK 并不是唯一一个进行安装归因欺诈的例子。像点击欺诈一样，这种方法在 Android 生态系统中非常普遍。广告提供商最好研究这一点，并采取措施保护自己的广告收入来源。
- en: '***Anti-Fraud SDKs***'
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***反欺诈 SDK***'
- en: 'In 2019, another problematic kind of SDK rose to prominence: financial anti-fraud
    SDKs. Embedded in financial apps (usually those for personal loans), these SDKs
    determine whether a user is a legitimate person. At first glance, this practice
    seems perfectly reasonable for protecting customers. The problem is that these
    SDKs collect so much data from devices that they cross into spyware territory.
    For example, the biggest such SDK, dubbed Loan Spy by the Android Security team,
    abuses the accessibility API to get access to WhatsApp messages, then guesses
    whether the user is legitimate based on their WhatsApp usage.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 2019 年，另一种有问题的 SDK 开始引起关注：金融反欺诈 SDK。嵌入金融应用程序（通常是个人贷款应用）中，这些 SDK 用于判断用户是否为合法用户。乍一看，这种做法似乎非常合理，旨在保护客户。问题在于，这些
    SDK 从设备中收集的数据过多，已经触及间谍软件的范畴。例如，最大的此类 SDK 被 Android 安全团队称为“Loan Spy”，它滥用辅助功能 API
    来访问 WhatsApp 信息，然后根据用户的 WhatsApp 使用情况判断是否为合法用户。
- en: 'Little is publicly known about these SDKs, but in October 2019 the Chinese
    news website China Money Network reported that authorities had raided the offices
    of technology company Tongdun in connection with one such scheme. The article
    “China Cracks Down on Malicious Lending and Web Crawlers, Temasek-Backed Tongdun
    Tech Implicated” reads:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些 SDK 的公开信息很少，但在 2019 年 10 月，中国新闻网站《中国财经网》报道，当局曾突袭科技公司同盾的办公室，调查与其中一项计划相关的情况。文章《中国打击恶意贷款和网络爬虫，淡马锡支持的同盾科技牵涉其中》写道：
- en: As part of this nation-wide campaign, law enforcement agencies have also targeted
    rampant illegal scraping of personal data online. It is an industry open secret
    that the practice of illegally collecting and selling personal data is an “original
    sin” that few of the so-called big data companies can escape.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全国范围内行动的一部分，执法机构也开始打击非法在线抓取个人数据的行为。非法收集和出售个人数据的行为是一个行业的公开秘密，几乎没有所谓的大数据公司能够逃脱这一“原罪”。
- en: 'Like its competitors, Loan Spy accesses a veritable laundry list of sensitive
    information on the user’s device: call log information, SMS messages, contact
    lists, GPS location data, and so on. Most troubling, though, is that Loan Spy
    also abuses the accessibility API to break the sandbox between Android apps. This
    API includes support tools like screen readers, input simulation, and other features
    that ignore the sandbox between applications in order to fully interact with all
    apps on the system.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 像它的竞争对手一样，Loan Spy 访问用户设备上的大量敏感信息：通话记录、短信、联系人列表、GPS 位置信息等等。然而，最令人担忧的是，Loan Spy
    还滥用辅助功能 API 打破了 Android 应用之间的沙盒隔离。这个 API 包括屏幕阅读器、输入模拟等支持工具，它们忽视应用之间的沙盒隔离，能够与系统上的所有应用程序完全互动。
- en: You might be wondering how these SDKs can become widespread if they only target
    apps from financial institutions. The answer is that in Southeast Asia, the financial
    lending situation looks stunningly different from that of the Western world. In
    the years leading up to 2020, demand for personal lines of credit vastly increased,
    leading to the creation and publication of more than 10,000 small personal lending
    apps targeting users in that region. These apps all need methods of determining
    whether they are loaning money to fake personas, in which case there would be
    little chance of recovering the loans later on. Thus, Loan Spy has garnered a
    presence on Android devices that rivals that of intentionally fraudulent malware
    networks.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，这些 SDK 怎么会广泛传播，如果它们只针对金融机构的应用程序？答案是，在东南亚，金融借贷的情况与西方世界截然不同。在 2020 年前的几年中，个人信用额度的需求急剧增加，导致了超过
    10,000 款小型个人借贷应用程序的诞生，这些应用针对该地区的用户。这些应用都需要一种方法来判断是否在向虚假身份放贷，否则后续很难收回贷款。因此，Loan
    Spy 在 Android 设备上的存在感已与故意欺诈的恶意软件网络相媲美。
- en: In the years leading up to 2023, another problem with these personal loan apps
    was widely reported by app users. Using the personal data previously collected
    from devices, loan companies would call and threaten people who were behind on
    their loans, or even their friends or family members. The Google Play policy team
    responded in April 2023 by disallowing personal loan applications from requesting
    Android permissions related to personal information such as contact lists, phone
    numbers, photos, or location. Going forward, personal loan applications will not
    be able to use these permissions for any reason.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2023 年之前的几年里，使用这些个人贷款应用的用户普遍反映出了另一个问题。贷款公司会利用之前从设备中收集的个人数据，打电话威胁那些未按时还款的人，甚至是他们的朋友或家人。Google
    Play 政策团队在 2023 年 4 月做出了回应，禁止个人贷款应用请求与个人信息相关的 Android 权限，例如联系人列表、电话号码、照片或位置。未来，个人贷款应用将无法以任何理由使用这些权限。
- en: '***Loapi/Podec***'
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Loapi/Podec***'
- en: Two of the largest malware families found outside of Google Play from 2017 on
    were Loapi/Podec and HDC Bookmark. Of these, the Loapi/Podec family is the more
    interesting one. Russian security company Kaspersky first described Podec in a
    March 2015 blog post titled “SMS Trojan Bypasses CAPTCHA.” A December 2017 follow-up
    blog post titled “Jack of All Trades” linked a newer variant, called Loapi, to
    Podec.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2017 年以来，Google Play 外发现的两大恶意软件家族是 Loapi/Podec 和 HDC Bookmark。其中，Loapi/Podec
    家族更为引人注目。俄罗斯安全公司卡巴斯基在 2015 年 3 月的一篇博客文章《SMS 木马绕过 CAPTCHA》中首次描述了 Podec。2017 年 12
    月的一篇后续博客文章《多面手》将一种名为 Loapi 的新变种与 Podec 关联起来。
- en: Loapi/Podec may have started as simple SMS fraud malware, but over time it grew
    into a powerful backdoor trojan. According to Kaspersky, the 2015 version (Podec)
    handled 16 different commands from its command-and-control servers. While most
    were related to premium billing sign-ups or general SMS or phone call abuse, one
    noteworthy command told infected devices to execute a DDoS attack against a provided
    target.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Loapi/Podec 可能最初是一个简单的 SMS 欺诈恶意软件，但随着时间的推移，它变成了一个强大的后门木马。根据卡巴斯基的说法，2015 版本（Podec）能执行来自指挥控制服务器的
    16 个不同命令。虽然大多数命令与高级收费注册或普通的 SMS 或电话滥用相关，但有一个值得注意的命令是要求感染的设备执行针对提供目标的 DDoS 攻击。
- en: The 2017 variant (Loapi) expanded on Podec’s capabilities with a complex plug-in-based
    system that could download and execute additional malicious modules, depending
    on instructions from the command-and-control server. In particular, Kaspersky
    calls out the trojan’s ability to perform advertising fraud, Monero cryptocurrency
    mining, and many more activities.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 2017 年的变种（Loapi）在 Podec 的基础上扩展了功能，采用了复杂的插件系统，可以根据来自指挥控制服务器的指令下载和执行额外的恶意模块。特别是，卡巴斯基指出该木马能够进行广告欺诈、Monero
    加密货币挖矿等多种活动。
- en: '***HDC Bookmark***'
  id: totrans-242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***HDC Bookmark***'
- en: The second major sideloaded family of this period, HDC Bookmark, proved less
    sophisticated. Its author bulk-created many thousands of apps with package names
    that started with *com.hdc.bookmark* and ended with a random number, such as *com.hdc.bookmark52428*
    (v1, 1dda). Targeting Vietnam, these apps appear to be associated with *apkfull.mobi*,
    a Vietnamese site that existed from 2013 to 2018 and provided cracked versions
    of Android apps and games. The HDC Bookmark apps offered these for download for
    a small fee of roughly $0.65.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这一时期的第二大侧载恶意软件家族 HDC Bookmark 显得不那么复杂。其作者批量创建了数千个应用，包名以 *com.hdc.bookmark* 开头，结尾则是一个随机数字，例如
    *com.hdc.bookmark52428*（v1, 1dda）。这些应用主要针对越南，似乎与 *apkfull.mobi* 这一越南网站有关，该网站存在于
    2013 到 2018 年间，提供安卓应用和游戏的破解版本。这些 HDC Bookmark 应用提供了这些内容供用户下载，费用大约为 0.65 美元。
- en: Though it was likely profitable at first, we don’t believe this malware family
    found long-term success. These apps do not defend against detection, and most
    common Android anti-malware products reliably detect them. The Android operating
    system now also protects the sign-up process for SMS-based subscription services
    by showing a warning to users that apps are trying to send costly messages. This
    might explain why the *apkfull.mobi* website disappeared in 2018.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管起初可能颇具盈利性，但我们认为这个恶意软件家族并未取得长期的成功。这些应用没有防范检测机制，大多数常见的 Android 反恶意软件产品能够可靠地检测到它们。Android
    操作系统现在也通过向用户显示警告来保护 SMS 订阅服务的注册过程，告知用户应用试图发送高额费用的信息。这或许解释了为什么 *apkfull.mobi* 网站在
    2018 年消失。
- en: However, HDC Bookmark apps have an insidious feature that lets them send premium
    texts even if the user explicitly disagrees. Encrypted asset files, such as *assets/map.lib*,
    include configuration options in JSON format. When the `url_config_auto_sms` option
    is set, the app sends a premium SMS regardless of whether the user wants to pay
    15,000 Vietnamese Dong for a pirated app. In [Listing 2-21](ch02.xhtml#ch2lis21),
    you can see the click handler for this subscription dialog’s Cancel button.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，HDC书签应用程序有一个隐蔽的功能，使得它们即使用户明确拒绝，也能发送收费短信。加密的资源文件，如*assets/map.lib*，包含以JSON格式的配置选项。当`url_config_auto_sms`选项被启用时，无论用户是否愿意为一个盗版应用支付15,000越南盾，应用都会发送收费短信。在[清单2-21](ch02.xhtml#ch2lis21)中，你可以看到该订阅对话框取消按钮的点击处理程序。
- en: '[PRE22]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*Listing 2-21: Regardless of user choice,* com.hdc.bookmark52428 *(v1, 1dda)
    can be configured to always send premium SMS messages.*'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单2-21：无论用户选择如何，* com.hdc.bookmark52428 *(v1, 1dda) 都可以配置为始终发送收费短信。*'
- en: If `auto_sms` is disabled, the app exits after the user declines the offer.
    However, if `auto_sms` is enabled, the app checks what Vietnamese mobile carrier
    the device is using and sends the premium SMS. This behavior is fraudulent.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`auto_sms`被禁用，在用户拒绝该提议后，应用会退出。然而，如果`auto_sms`被启用，应用会检查设备使用的是哪个越南移动运营商，并发送收费短信。这种行为是欺诈行为。
- en: '***EagerFonts***'
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***EagerFonts***'
- en: Preinstalled malware continues to thrive on low-cost and no-name devices. Deep
    inside new Android phones, researchers have discovered business models built on
    spyware, unwanted advertising, and pay-for-install app-pushing schemes.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 预装恶意软件继续在低成本和无品牌设备上盛行。研究人员在新的安卓手机中发现了建立在间谍软件、不必要广告和付费安装推送应用程序计划上的商业模式。
- en: One particularly nasty preinstalled malware family was EagerFonts, a trojan
    disguised as a font management app that downloaded malicious modules in the background.
    The EagerFonts developers convinced a chipset vendor to include the app in its
    development SDK. As a result, all manufacturers using that chipset SDK had their
    devices infected. In total, EagerFonts compromised more than 12 million devices
    across more than 1,000 models built by hundreds of manufacturers.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个特别恶劣的预装恶意软件家族是EagerFonts，它伪装成一个字体管理应用程序，在后台下载恶意模块。EagerFonts的开发者说服了一家芯片组供应商将该应用包含在其开发SDK中。因此，所有使用该芯片组SDK的制造商的设备都被感染了。总的来说，EagerFonts让超过1200万个设备受感染，涉及1000多款由数百家制造商生产的设备。
- en: 'EagerFonts highlights a simple truth in supply chain compromise: the further
    upstream a compromise happens, the larger the number of infected devices. Convincing
    a single manufacturer to include malware on devices is profitable, but convincing
    the supplier of more than 100 manufacturers to do so is like winning the lottery.
    Even if the abuse is detected, any malware removal effort will take months of
    coordination between vendors and likely miss a significant fraction of infected
    devices. In the meantime, the malware will continue to bring in money for its
    developers.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: EagerFonts突出了供应链妥协中的一个简单事实：妥协发生的上游越远，受感染的设备数量就越多。说服单一制造商在设备中包含恶意软件是有利可图的，但说服超过100家制造商的供应商这样做，就像中彩票一样。即使滥用行为被发现，任何恶意软件移除的努力都需要几个月的厂商协调，并且很可能会遗漏大量受感染的设备。在此期间，恶意软件将继续为其开发者带来收入。
- en: The Android Security team described this malware’s technical details in a BlackHat
    USA 2019 talk, “Securing the System—A Deep Dive into Reversing Android Pre-Installed
    Apps.” The slides for this talk are freely available on the internet. Like most
    preinstalled backdoors, the main purpose of EagerFonts is to download plug-ins
    with malicious functionality. It connects to a command-and-control server at *pushstablev9.ekesoo.com*,
    as shown in [Listing 2-22](ch02.xhtml#ch2lis22). This domain primarily hosts a
    pornography site.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Android安全团队在2019年BlackHat USA大会上介绍了该恶意软件的技术细节，演讲题为“系统安全——深入分析反向工程安卓预装应用”。该演讲的幻灯片可以在互联网上免费获得。像大多数预装后门一样，EagerFonts的主要目的是下载具有恶意功能的插件。它连接到一个命令与控制服务器*pushstablev9.ekesoo.com*，如[清单2-22](ch02.xhtml#ch2lis22)所示。这个域名主要托管一个色情网站。
- en: '[PRE23]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*Listing 2-22: EagerFonts communicates with its command-and-control server.*'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单2-22：EagerFonts与其命令与控制服务器进行通信。*'
- en: Besides code for downloading and managing the malicious plug-ins, EagerFonts
    contains little other functionality. The downloaded plug-ins are highly diverse
    and belong to Chinese malware families like Chamois and Snowfox (discussed earlier
    in this chapter).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于下载和管理恶意插件的代码外，EagerFonts几乎没有其他功能。下载的插件种类繁多，属于中国的恶意软件家族，如Chamois和Snowfox（在本章前面已讨论）。
- en: '***GMobi***'
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GMobi***'
- en: 'Malware developers have repeatedly attacked one particular part of the preinstalled
    app supply chain: third-party over-the-air (OTA) update providers. OTA update
    software downloads and installs system updates onto Android devices, be it smaller
    monthly security updates or new versions of Android. Installing these updates
    requires OTA software to make changes deep inside the Android system, so it has
    some of the highest privileges available. This highly privileged position makes
    it a prime target for Android malware developers.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件开发者曾多次攻击预装应用供应链中的一个特定部分：第三方的无线OTA（空中下载）更新提供商。OTA更新软件用于下载并安装Android设备的系统更新，无论是较小的每月安全更新，还是新的Android版本。安装这些更新要求OTA软件对Android系统进行深层次更改，因此它拥有一些最高的权限。这种高度特权的位置使其成为Android恶意软件开发者的主要攻击目标。
- en: Manufacturers manage and distribute updates to their devices using several strategies.
    Large companies, like Samsung and Xiaomi, manage their own OTA update infrastructure
    and software. Google provides GOTA, a free OTA distribution and management solution
    for devices with Google Play Services. Manufacturers who cannot or do not want
    to use GOTA can pick from about a dozen commercial OTA solution providers. After
    a series of security problems, researchers started investigating these commercial
    OTA providers.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 制造商通过几种策略管理和分发设备更新。像三星和小米这样的公司管理自己的OTA更新基础设施和软件。谷歌提供GOTA，这是一个免费的OTA分发和管理解决方案，适用于安装了Google
    Play服务的设备。那些不能或不愿使用GOTA的制造商，可以从大约十几家商业OTA解决方案提供商中选择。经过一系列的安全问题后，研究人员开始调查这些商业OTA提供商。
- en: 'The first of these OTA providers that we’ll consider is by the Taipei-based
    General Mobile Corporation (GMobi). Concerns about GMobi’s OTA app first came
    to light when Russian security company Dr. Web published a blog post called “New
    Adware for Android Attacked Firmware and Apps by Well-Known Companies” in March
    2016\. Dr. Web researchers noted capabilities like data collection (for example,
    collecting the user’s email addresses and GPS location), showing unwanted ads,
    and installing new apps without user consent. In particular, the ability to install
    apps led to malware incidents: for example, in October 2015, GMobi installed a
    Ghost Push app on nearly a million devices.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要考虑的第一个OTA提供商是总部位于台北的通用移动公司（GMobi）。关于GMobi的OTA应用程序的担忧首次曝光是在2016年3月，当时俄罗斯安全公司Dr.
    Web发布了一篇博客文章，名为“新的广告软件攻击了知名公司发布的固件和应用程序”。Dr. Web的研究人员指出了诸如数据收集（例如收集用户的电子邮件地址和GPS位置）、显示不必要的广告和在未经用户同意的情况下安装新应用程序等功能。特别是，安装应用程序的能力导致了恶意软件事件：例如，在2015年10月，GMobi在近百万台设备上安装了一个Ghost
    Push应用。
- en: 'Months earlier, in January 2015, a Tech in Asia article described GMobi’s business
    model. The article, titled “Meet the Company Stamping Bloatware on Millions of
    Emerging Market Smartphones,” said the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月前，在2015年1月，《Tech in Asia》文章描述了GMobi的商业模式。文章标题为“认识这家在数百万新兴市场智能手机上安装臃肿软件的公司”，内容如下：
- en: It’s important to remember that behind every piece of bloatware is a hard-won
    handshake. By mutually agreeing to invade your smartphone, app publishers get
    reach, and smartphone brands get cash. GMobi is a Taiwan-based startup that earns
    money by facilitating these handshakes. For four years, the company has brokered
    pre-installs, built white-label app stores, and driven firmware updates for dozens
    of smartphone brands.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，每一款臃肿软件背后都可能有一场艰难的握手。通过共同同意入侵你的智能手机，应用发布商获得了用户覆盖，智能手机品牌则获得了现金。GMobi是一家总部位于台湾的初创公司，通过促进这些“握手”来赚钱。四年来，该公司一直在为几十个智能手机品牌提供预装服务、构建白标应用商店并推动固件更新。
- en: Other commercial OTA providers likely receive pay for installing apps and displaying
    ads, driving their profits. The OTA functionality is only a means to establish
    a deep hook into the Android system.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 其他商业OTA提供商可能通过安装应用程序和展示广告获得收入，从而推动它们的利润。OTA功能只是建立深入Android系统钩子的手段。
- en: 'Additional security companies also took note of GMobi. German antivirus company
    Avira described adware problems with GMobi in an April 2016 blog post, “Trojan
    Adware Hits Budget Androids—And Some Well-Known Apps.” In July 2018, a *Washington
    Post* article called “App Traps: How Cheap Smartphones Siphon User Data in Developing
    Countries” used research by the British company Upstream Systems to further scrutinize
    GMobi’s data collection practices.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 其他安全公司也注意到了GMobi。德国的杀毒公司Avira在2016年4月的一篇博客文章中描述了GMobi的广告软件问题，文章名为“Trojan Adware
    Hits Budget Androids—And Some Well-Known Apps”。2018年7月，《华盛顿邮报》的一篇文章《应用陷阱：廉价智能手机如何在发展中国家窃取用户数据》使用了英国公司Upstream
    Systems的研究，进一步审视了GMobi的数据收集行为。
- en: '***Adups***'
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Adups***'
- en: Another OTA provider company with a documented history of security concerns
    is Shanghai-based Adups. In October 2016, the security company Kryptowire exposed
    spyware behavior in the Adups OTA software. Its report, titled “Android Firmware
    Sharing Private Data Without Consent,” notes that the Adups software collects
    text messages, contact list information, and the device’s call history, including
    full telephone numbers.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 另一家有记录的、安全问题突出的OTA供应商是总部位于上海的Adups。2016年10月，安全公司Kryptowire曝光了Adups OTA软件中的间谍行为。其报告《Android固件未经同意共享私人数据》指出，Adups软件收集了短信、联系人信息和设备的通话记录，包括完整的电话号码。
- en: 'Like GMobi, Adups software can download and install other applications without
    user consent. The first public evidence of this functionality dates back to at
    least January 2015, when a Reddit user posted the following in the */r/india*
    subreddit:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 和GMobi一样，Adups软件也可以在没有用户同意的情况下下载和安装其他应用程序。关于这一功能的第一个公开证据可以追溯到至少2015年1月，当时一位Reddit用户在*/r/india*版块发布了以下内容：
- en: I use a Micromax A093 Canvas fire, and have been since August of last year.
    [ . . . ] Meanwhile, looks like Micromax is installing apps without my permission,
    using up precious space and my 3G! Apps reappear after uninstalling them. This
    is ridiculous! Many times, instead of downloading apps, it creates 8-10 notifications
    which are advertisements for online stores and other apps.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是Micromax A093 Canvas fire，自去年8月起一直在使用。[ . . . ] 与此同时，看来Micromax正在未经我允许安装应用程序，占用了宝贵的空间和我的3G流量！这些应用程序在卸载后又重新出现。这真是荒谬！很多时候，它不仅下载应用程序，还创建8-10条通知，这些通知是在线商店和其他应用程序的广告。
- en: Adups continued to build these capabilities and downloaded and installed apps
    that made up large Chinese botnets like Ghost Push and Snowfox. Certain iterations
    of Adups have drawn so much attention from security researchers that The MITRE
    Corporation, a US-based defense nonprofit, now lists it in its MITRE ATT&CK framework,
    an industry-standard repository of malware tactics and techniques.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Adups继续增强这些功能，下载并安装了组成大型中国僵尸网络的应用程序，如Ghost Push和Snowfox。Adups的某些版本引起了安全研究人员的极大关注，以至于美国的国防非营利组织MITRE公司现在将其列入MITRE
    ATT&CK框架，这是一个业界标准的恶意软件战术和技术库。
- en: '***Redstone***'
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Redstone***'
- en: A third OTA company with a history of security problems is Redstone Sunshine,
    based in Beijing. In April 2021, Malwarebytes, a US-based anti-malware company,
    expressed concerns about Redstone in an article called “Pre-Installed Auto Installer
    Threat Found on Android Mobile Devices in Germany.” This article made quite a
    splash in the tech press. For example, the largest German computer magazine, *Computer
    Bild*, picked up the story, and the German Bundesamt für Sicherheit in der Informationstechnik
    (Federal Office for Information Security) issued a warning to German users of
    the affected devices.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 另一家有安全问题历史的OTA公司是位于北京的Redstone Sunshine。2021年4月，美国反恶意软件公司Malwarebytes在一篇名为“Pre-Installed
    Auto Installer Threat Found on Android Mobile Devices in Germany”的文章中对Redstone表达了关注。该文章在科技媒体中引起了广泛关注。例如，德国最大的计算机杂志《Computer
    Bild》报道了这一事件，德国信息安全局（Bundesamt für Sicherheit in der Informationstechnik）也向受影响的德国用户发出了警告。
- en: In November 2021, Dr. Web described a series of data collection problems and
    hidden app installs affecting the Elari Kidphone 4G Smartwatch. A blog post titled
    “Doctor Web Discovered Vulnerabilities in Children’s Smart Watches” describes
    how the OTA component could be used for “cyber espionage, displaying ads, and
    installing unwanted or even malicious apps.” Dr. Web does not mention Redstone
    in the text, but many of the malicious files presented in the blog post belong
    to Redstone’s OTA solution. This can be verified by looking at the app signing
    information of the presented files.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 2021 年 11 月，Dr. Web 描述了一系列影响 Elari Kidphone 4G 智能手表的数据收集问题和隐藏应用安装。标题为《Doctor
    Web 发现儿童智能手表中的漏洞》的博客文章描述了 OTA 组件如何被用于“网络间谍活动、显示广告和安装不需要的甚至恶意的应用程序”。Dr. Web 在文章中没有提到
    Redstone，但文章中提到的许多恶意文件属于 Redstone 的 OTA 解决方案。通过查看展示文件的应用签名信息，可以验证这一点。
- en: '***Digitime***'
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Digitime***'
- en: Digitime, a company from Shenzhen, China, went unnoticed by the professional
    security world and tech press until 2019\. That year, an independent security
    researcher nicknamed Ninji documented problems with Digitime’s OTA update software
    functionality. In the December blog post “Researching the Digitime Tech FOTA Backdoors,”
    Ninji describes Digitime’s extensive Lua-based plug-in system, which downloads
    additional modules with problematic functionality. Examples include the ability
    to install and uninstall any apps on the device and grant them any permissions
    without using the permission prompt.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Digitime 是一家来自中国深圳的公司，直到 2019 年才引起专业安全界和科技媒体的注意。那一年，一位名为 Ninji 的独立安全研究员记录了 Digitime
    的 OTA 更新软件功能问题。在 12 月的博客文章《研究 Digitime Tech FOTA 后门》中，Ninji 描述了 Digitime 广泛的基于
    Lua 的插件系统，该系统下载具有问题功能的附加模块。举例来说，包括能够在设备上安装和卸载任何应用程序，并在不使用权限提示的情况下授予它们任何权限。
- en: Half a year later, Digitime’s OTA update software caused public concern. Malwarebytes
    identified security and privacy problems with a low-cost device named UMX U683CL
    that was built by Chinese company TeleEpoch, branded for Chinese device manufacturer
    Unimax, and sold by the American mobile carrier Assurance Wireless. Despite involving
    lesser-known manufacturers, this device model is noteworthy. It was part of Lifeline,
    a federal program to lower the monthly cost of phone and internet service for
    eligible US citizens. The revelation that this Chinese-built device had backdoor
    and spyware capabilities caused an uproar in the national press, though Digitime
    temporarily escaped unscathed; Malwarebytes mistakenly attributed the OTA software
    to Adups instead. Then, in July 2020, an anonymous contributor going by the name
    Concerned_Citizen posted a forum thread in the public Malwarebytes forums called
    “Pre-Installed Malware on Lifeline Phones” explaining how they had applied Ninji’s
    reverse engineering guide to the software’s Lua code and discovered that the real
    company behind the app was Digitime.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 半年后，Digitime 的 OTA 更新软件引起了公众关注。Malwarebytes 识别出一款由中国公司 TeleEpoch 制造、以中国设备制造商
    Unimax 品牌销售、并由美国移动运营商 Assurance Wireless 销售的低成本设备 UMX U683CL 存在安全和隐私问题。尽管涉及的是不太知名的制造商，但这一设备型号值得关注。它是美国联邦计划
    Lifeline 的一部分，该计划旨在降低符合条件的美国公民的电话和互联网服务月费。揭露这款中国制造的设备具有后门和间谍软件功能，引发了国家媒体的轰动，尽管
    Digitime 暂时未受到影响；Malwarebytes 错误地将该 OTA 软件归咎于 Adups。然后，在 2020 年 7 月，一位匿名贡献者以 Concerned_Citizen
    为名，在公共 Malwarebytes 论坛发布了一篇名为《Lifeline 手机上的预装恶意软件》的帖子，解释了他们如何使用 Ninji 的逆向工程指南分析软件的
    Lua 代码，并发现真正的开发公司是 Digitime。
- en: Over time, Digitime built an increasingly sophisticated obfuscation and encryption
    scheme to hide its Lua-based plug-in engine. Recent versions like *com.qiot.update*
    (v1032, 4529) were first seen in September 2019 and installed on devices like
    the Oukitel C22 and the Okapi 10 Pro. On these devices, Digitime modifies the
    Android system component *frameworks.jar* file by adding nonstandard packages
    named *com.internal.jar.pl.**. Code in these packages calls out to a native ELF
    library at */system/lib64/libpowerhalwrap_jni.so*. After passing all kinds of
    anti-analysis checks, the ELF library drops two DEX files and a ZIP file that
    contains a standard Lua framework.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Digitime 建立了一个越来越复杂的混淆和加密方案，用以隐藏其基于 Lua 的插件引擎。像 *com.qiot.update*（v1032，4529）这样的最新版本首次出现在
    2019 年 9 月，并安装在如 Oukitel C22 和 Okapi 10 Pro 等设备上。在这些设备上，Digitime 通过添加名为 *com.internal.jar.pl.**
    的非标准包来修改 Android 系统组件 *frameworks.jar* 文件。这些包中的代码调用位于 */system/lib64/libpowerhalwrap_jni.so*
    的本地 ELF 库。在通过各种反分析检查后，ELF 库会丢弃两个 DEX 文件和一个包含标准 Lua 框架的 ZIP 文件。
- en: 'The Lua interpreter is statically linked into the ELF library, with one cheeky
    modification: the `luaL_loadfile` method, responsible for loading Lua scripts,
    is modified to load nonstandard Lua files encrypted with a simple XOR algorithm.
    Thus, after extracting the Lua scripts, analysts must decrypt them before loading
    them into Lua reverse engineering tools like LuaDec. Luckily, the encryption algorithm
    is simple. The modified *luaL_loadfile* method uses an XOR pad that can be created
    with the Python code in [Listing 2-23](ch02.xhtml#ch2lis23).'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: Lua 解释器被静态链接到 ELF 库中，并进行了一些巧妙的修改：`luaL_loadfile` 方法，负责加载 Lua 脚本，被修改为加载通过简单的
    XOR 算法加密的非标准 Lua 文件。因此，在提取 Lua 脚本后，分析师必须先解密它们，然后才能将其加载到像 LuaDec 这样的 Lua 逆向工程工具中。幸运的是，加密算法很简单。修改后的
    *luaL_loadfile* 方法使用的 XOR 填充可以通过 [列表 2-23](ch02.xhtml#ch2lis23) 中的 Python 代码创建。
- en: '[PRE24]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*Listing 2-23: Python code for decrypting Digitime’s encrypted Python scripts*'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-23：用于解密 Digitime 加密 Python 脚本的 Python 代码*'
- en: If the Lua scripts execute successfully, they will communicate with the command-and-control
    server at *http://rp1.androidevlog.com:10000/inf_v20* to receive configuration
    options and download more Lua modules. They download malicious plug-ins from domains
    like *google-global.com*, *facebook -3rd.com*, *bugreportsync.com*, *flurrydata.com*,
    and *gmscenter.org*, which impersonate legitimate companies in the Android ecosystem
    and were likely picked to fool security researchers reading logfiles or source
    code.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Lua 脚本成功执行，它们将与位于*http://rp1.androidevlog.com:10000/inf_v20*的指挥与控制服务器进行通信，以接收配置选项并下载更多
    Lua 模块。它们从像*google-global.com*、*facebook-3rd.com*、*bugreportsync.com*、*flurrydata.com*
    和 *gmscenter.org* 等域名下载恶意插件，这些域名伪装成 Android 生态系统中的合法公司，可能是为了欺骗阅读日志文件或源代码的安全研究人员。
- en: 'Additional information about the technical capabilities of the Digitime software
    and how they evolved over time was published by the Android Security team at the
    2022 Virus Bulletin and 2023 BotConf conferences, in two presentations titled
    “You OTA Know: Combating Malicious Android System Updaters.”'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Digitime 软件的技术能力及其随时间演变的更多信息，已由 Android 安全团队在 2022 年 Virus Bulletin 和 2023
    年 BotConf 大会上发布，内容包括两场名为“你 OTA 知道吗：打击恶意 Android 系统更新程序”的演讲。
- en: '**Up Next**'
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接下来**'
- en: This chapter reviewed 10 years’ worth of Android malware found in the wild.
    While not exhaustive, the families, samples, and properties introduced here serve
    as useful examples of what Android malware looks like and how it operates. The
    rest of the book describes how to detect and analyze such malware.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回顾了 10 年来在野外发现的 Android 恶意软件。虽然并不详尽，但这里介绍的家族、样本和特性作为 Android 恶意软件的有用示例，展示了其外观和运作方式。书的其余部分描述了如何检测和分析此类恶意软件。
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '[*OceanofPDF.com*](https://oceanofpdf.com)'
