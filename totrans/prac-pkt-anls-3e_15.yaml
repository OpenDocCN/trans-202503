- en: '**B**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**NAVIGATING PACKETS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: In this appendix, we’ll examine ways that packets can be represented. We’ll
    look at fully interpreted and hexadecimal representations of packets, as well
    as how to read and reference packet values using a packet diagram.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Because you’ll find a wealth of software that can interpret packet data for
    you, you could perform packet sniffing and analysis without understanding the
    information contained in this appendix. But, if you take the time to learn about
    packet data and how it’s structured, you’ll be in a much better position to understand
    what tools like Wireshark are showing you. The less abstraction between you and
    the data you’re analyzing, the better.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '**Packet Representation**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many ways a packet can be represented for interpretation. Raw packet
    data can be represented as binary, a combination of 1s and 0s in base 2, like
    this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Binary numbers represent digital information at the lowest level possible,
    with a 1 representing the presence of an electrical signal and a 0 representing
    the absence of a signal. Each digit is a bit, and eight bits is a byte. However,
    binary data is difficult for humans to read and interpret, so we usually convert
    binary data to hexadecimal, a combination of letters and numbers in base 16\.
    The same packet in hexadecimal looks like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Hexadecimal* (also referred to as hex) is a numbering system that uses the
    numbers 0 through 9 and letters A through F to represent values. It is one of
    the most common ways that packets are represented because it’s concise and can
    easily be converted to the even more fundamental binary interpretation. In hex,
    two characters represent a byte, which contains eight bits. Each character within
    a byte is a *nibble* (4 bits), with the leftmost value being the *higher-order
    nibble* and the rightmost value being the *lower-order nibble*. Using the example
    packet, this means that the first byte is 45, the higher-order nibble is 4, and
    the lower-order nibble is 5.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The position of bytes within a packet is represented using offset notation,
    starting from zero. Therefore, the first byte in the packet (45) is at position
    0x00, the second byte (00) is at 0x01, and the third byte (00) is at 0x02, and
    so on. The 0x part is saying that hex notation is being used. When referencing
    a position spanning more than one byte, the number of additional bytes is indicated
    numerically after a colon. For example, to reference the position of the first
    four bytes in the example packet (4500 0034), you would use 0x00:4\. This explanation
    will be important when we use packet diagrams to dissect unknown protocols in
    “Navigating a Mystery Packet” on [page 330](ch15_appb.xhtml#page_330).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '*The most common mistake I see people make when trying to dissect packets is
    forgetting to start counting from zero. This is very hard to get used to, since
    most people are taught to start counting from one. I’ve been slicing and dicing
    packets for years, and I still make this mistake. The best advice I can give here
    is* don’t be afraid to count on your fingers*. You might feel like it looks dumb,
    but there’s absolutely no shame in it, especially if it helps you arrive at the
    correct answer.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: At a much higher level, a tool like Wireshark can represent a packet in a fully
    interpreted manner by using a protocol dissector, which we’ll discuss next. The
    same packet we just looked at is shown in [Figure B-1](ch15_appb.xhtml#appb-1),
    fully interpreted by Wireshark.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f327-01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-1: A packet interpreted by Wireshark*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark shows the information in a packet with labels that describe it. Packets
    don’t contain labels, but their data does map to a precise format specified by
    the protocol standard. Fully interpreting a packet means reading the data based
    on the protocol standard and dissecting it into labeled, human-friendly text.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark and similar tools are able to fully interpret packet data because
    they have protocol dissectors built into them that define the position, length,
    and values of each field within a protocol. For example, the packet in [Figure
    B-1](ch15_appb.xhtml#appb-1) is broken into sections based on the Transmission
    Control Protocol (TCP). Within TCP, there are labeled fields and values. Source
    Port is one label, and 1606 is its decimal value. This makes it easy to find the
    information you’re looking for when performing analysis. Whenever this option
    is available to you, it’s usually the most efficient way to get the job done.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark has thousands of dissectors, but you might encounter protocols that
    Wireshark doesn’t know how to interpret. This is often the case with vendor-specific
    protocols that aren’t widely used and custom malware protocols. When this happens,
    you’ll be left with only partially interpreted packets. This is why Wireshark
    provides the raw hexadecimal packet data at the bottom of the screen by default
    (see [Figure B-1](ch15_appb.xhtml#appb-1)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: More commonly, command line programs like tcpdump that show raw hex don’t have
    nearly as many dissectors. This is especially true for more complex application-layer
    protocols, which are trickier to parse. Thus, encountering partially interpreted
    packets is the norm when using this tool. An example of using tcpdump is shown
    in [Figure B-2](ch15_appb.xhtml#appb-2).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: When you are working with partially interpreted packets, you’ll have to rely
    on knowledge of packet structure at a more fundamental level. Wireshark, tcpdump,
    and most other tools enable this by showing the raw packet data in hex format.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f328-01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-2: Partially interpreted packets from tcpdump*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Packet Diagrams**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we learned in [Chapter 1](ch01.xhtml#ch01), a packet represents data that
    is formatted based on the rules of protocols. Because common protocols format
    packet data in a specific manner so that hardware and software can interpret this
    data, the packets must follow explicit formatting rules. We can identify this
    formatting and use it to interpret packet data by using packet diagrams. A *packet
    diagram* is a graphical representation of a packet that allows an analyst to map
    bytes within a packet to fields used by any given protocol. Derived from the protocol’s
    RFC specification document, it shows the fields present within the protocol, their
    length, and their order.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第1章](ch01.xhtml#ch01)中所学，数据包代表根据协议规则格式化的数据。由于常见协议以特定的方式格式化数据包数据，使得硬件和软件能够解释这些数据，因此数据包必须遵循明确的格式规则。我们可以通过使用数据包图来识别这种格式，并利用它来解释数据包数据。*数据包图*是数据包的图形表示，允许分析师将数据包中的字节映射到任何给定协议使用的字段。它源自协议的RFC规范文档，显示协议中存在的字段、字段长度及其顺序。
- en: Let’s take another look at the example packet diagram for IPv4 we saw in [Chapter
    7](ch07.xhtml#ch07) (provided here for your convenience as [Figure B-3](ch15_appb.xhtml#appb-3)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看在[第7章](ch07.xhtml#ch07)中看到的IPv4示例数据包图（为方便起见，提供在[图B-3](ch15_appb.xhtml#appb-3)中）。
- en: '![image](../images/f328-02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f328-02.jpg)'
- en: '*Figure B-3: A packet diagram for IPv4*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图B-3：IPv4的数据包图*'
- en: In this diagram, the horizontal axis represents individual binary bits that
    are numbered from 0 to 31\. The bits are grouped into 8-bit bytes that are numbered
    from 0 to 3\. The vertical axis also is labeled according to bits and bytes, and
    each row is divided into 32-bit (or 4-byte) sections. We use the axes to count
    field positions using offset notation by first reading from the vertical axis
    to determine which 4-byte section the field resides in, and then counting off
    each byte in the section using the horizontal axis. The first row consists of
    the first four bytes, 0 through 3, which are labeled accordingly on the horizontal
    axis. The second row consists of the next four bytes, 4 through 7, which can also
    be counted off using the horizontal axis. Here we start with byte 4, which is
    byte 0 on the horizontal axis, then byte 5, which corresponds to byte 1 on the
    horizontal axis, and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此图中，横轴表示从0到31的单独二进制位。位被分组为8位字节，编号从0到3。纵轴也根据位和字节进行标注，每一行被划分为32位（或4字节）部分。我们通过首先从纵轴读取，确定字段所在的4字节部分，然后使用横轴按偏移量符号数出每个字节，来使用这些轴来计数字段的位置。第一行包含前四个字节，即字节0到3，这些字节在横轴上标注相应的数字。第二行包含接下来的四个字节，即字节4到7，也可以使用横轴来计数。从字节4开始，它是横轴上的字节0，然后是字节5，对应横轴上的字节1，依此类推。
- en: For example, we can determine that for IPv4, byte 0x01 is the Type of Service
    field, since we start at offset 0 and then count to byte 1\. On the vertical axis,
    the first four bytes are in the first row, so we would then use the horizontal
    axis and start counting from 0 to byte 1\. As another example, byte 0x08 is the
    Time to Live field. Using the vertical axis, we determine that byte 8 is in the
    third row down, which contains bytes 8 through 11\. We then use the horizontal
    axis to count to byte 8 starting from 0\. Since byte 8 is the first in the section,
    the horizontal axis column is just 0, which is the Time to Live field.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以确定对于IPv4，字节0x01是服务类型字段，因为我们从偏移量0开始，然后数到字节1。在纵轴上，前四个字节位于第一行，因此我们将使用横轴从0开始数到字节1。另一个例子是字节0x08是生存时间字段。使用纵轴，我们确定字节8位于第三行，该行包含字节8至11。然后我们使用横轴从0开始数到字节8。由于字节8是该部分中的第一个字节，因此横轴列为0，即生存时间字段。
- en: Some fields, such as the Source IP field, span multiple bytes, as we see in
    0x12:4\. Other fields are divided into nibbles. An example is 0x00, which contains
    the Version field in the higher-order nibble and the IP Header Length in the lower-order
    nibble. Byte 0x06 contains even more granularity, with individual bits used to
    represent specific fields. When a field is a single binary value, it is often
    referred to as a *flag*. Examples are the Reserved, Don’t Fragment, and More Fragments
    fields in the IPv4 header. A flag can only have a binary value of 1 (true) or
    0 (false), so the flag is “set” when the value is 1\. The exact implication of
    a flag setting will vary based on protocol and field.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一些字段，比如源 IP 字段，跨越多个字节，正如我们在 0x12:4 中看到的那样。其他字段则被划分为半字节。一个例子是 0x00，其中包含了版本字段的高位半字节和
    IP 头部长度的低位半字节。字节 0x06 则包含了更细粒度的内容，使用单独的比特来表示特定的字段。当一个字段是单一的二进制值时，它通常被称为*标志*。例如，IPv4
    头部中的保留字段、禁止分段字段和更多分段字段。一个标志只能有二进制值 1（真）或 0（假），因此当值为 1 时，标志被“设置”。标志设置的确切含义将根据协议和字段的不同而有所变化。
- en: Let’s look at another example in [Figure B-4](ch15_appb.xhtml#appb-4) (you may
    recognize this diagram from [Chapter 8](ch08.xhtml#ch08)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下[图 B-4](ch15_appb.xhtml#appb-4)中的另一个示例（你可能会认出这个图来自[第 8 章](ch08.xhtml#ch08)）。
- en: '![image](../images/f329-01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f329-01.jpg)'
- en: '*Figure B-4: A packet diagram for the TCP*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-4：TCP 数据包图*'
- en: 'This image shows the TCP header. Looking at this image, we can answer a lot
    of questions about a TCP packet without knowing exactly what TCP does. Consider
    an example TCP packet header represented in hex here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图展示了 TCP 头部。通过查看这张图，我们可以回答很多关于 TCP 数据包的问题，而不需要确切了解 TCP 的工作原理。考虑一下这里以十六进制表示的一个示例
    TCP 数据包头：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using the packet diagram, we can locate and interpret specific fields. For
    example, we can determine the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据包图，我们可以定位并解释特定的字段。例如，我们可以确定以下内容：
- en: '•     The Source Port number is at 0x00:2 and has a hex value of 0646 (Decimal:
    1606).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: •     源端口号位于 0x00:2，十六进制值为 0646（十进制：1606）。
- en: '•     The Destination Port number is at 0x02:2 and has a hex value of 0050
    (Decimal: 80).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: •     目标端口号位于 0x02:2，十六进制值为 0050（十进制：80）。
- en: •     The header length is in the Data Offset field at the higher-order nibble
    of 0x12 and has a hex value of 8.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: •     头部长度位于数据偏移字段中的高位半字节 0x12，十六进制值为 8。
- en: Let’s apply this knowledge by dissecting a mystery packet.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过解析一个神秘数据包来应用这些知识。
- en: '**Navigating a Mystery Packet**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**解析神秘数据包**'
- en: 'In [Figure B-2](ch15_appb.xhtml#appb-2), I showed you a packet that was only
    partially interpreted. You can ascertain through the interpreted portion of the
    data that this is a TCP/IP packet transmitted between two devices on the same
    network, but other than that, you don’t know much about the data being transmitted.
    Here’s the complete hex output of the packet:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 B-2](ch15_appb.xhtml#appb-2)中，我给你展示了一个仅部分解析的数据包。你可以通过解析的部分数据得知，这是一个在同一网络上两个设备之间传输的
    TCP/IP 数据包，但除此之外，你对传输的数据并不了解。以下是数据包的完整十六进制输出：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A quick count finds that there are 52 bytes in this packet. The packet diagram
    for IP tells us that the normal size of the IP header is 20 bytes, which is confirmed
    by looking at the header size value in the lower-order nibble of 0x00\. The diagram
    for the TCP header tells us that it is also 20 bytes if no additional options
    are present (there aren’t here, but we discuss TCP options in more depth in [Chapter
    8](ch08.xhtml#ch08)). This means that the first 40 bytes of this output are related
    to the TCP and IP data that has already been interpreted. This leaves the remaining
    12 bytes uninterpreted.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 快速统计后发现，这个数据包有 52 字节。IP 数据包图告诉我们，IP 头部的正常大小是 20 字节，这可以通过查看 0x00 的低位半字节中的头部大小值来确认。TCP
    头部的数据包图告诉我们，如果没有额外选项（这里没有，我们将在[第 8 章](ch08.xhtml#ch08)中更深入地讨论 TCP 选项），它的大小也是 20
    字节。这意味着输出的前 40 字节与已经解析的 TCP 和 IP 数据相关。剩下的 12 字节是未解析的。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Without knowledge of how to navigate packets, this might leave you stumped,
    but you now know how to apply a packet diagram to the uninterpreted bytes. In
    this case, the interpreted TCP data tells us that the destination port for this
    data is 502\. Reviewing the ports used by traffic isn’t a foolproof method for
    identifying uninterpreted bytes, but it’s a good place to start. A quick Google
    search reveals that port 502 is most commonly used for Modbus over TCP, which
    is a protocol used in Industrial Control System (ICS) networks. We can validate
    this is the case and navigate this packet by comparing the hex output to the packet
    diagram for Modbus, shown in [Figure B-5](ch15_appb.xhtml#appb-5).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有了解如何解析数据包的知识，这可能会让你感到困惑，但现在你知道如何将数据包图解应用于未解释的字节。在这种情况下，解释后的 TCP 数据告诉我们该数据的目标端口是
    502。回顾流量使用的端口并不是识别未解释字节的万无一失的方法，但它是一个很好的起点。快速的 Google 搜索显示端口 502 最常用于 TCP 上的 Modbus，这是一个在工业控制系统（ICS）网络中使用的协议。我们可以通过将十六进制输出与
    Modbus 的数据包图解进行比较来验证这一点，如 [图 B-5](ch15_appb.xhtml#appb-5) 所示。
- en: '![image](../images/f331-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f331-01.jpg)'
- en: '*Figure B-5: Packet diagram for Modbus over TCP*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-5：Modbus over TCP 数据包图解*'
- en: 'This packet diagram was created based on the information in the Modbus implementation
    guide: *[http://www.modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf](http://www.modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf)*.
    This tells us that there should be a 7-byte header that includes the Length field
    at 0x04:2 (relative to the start of the header). Counting to that position, we
    arrive at a hex value of 0006 (or a decimal value of 6), indicating there should
    be 6 bytes following that field, which is exactly the case. It appears that this
    is indeed Modbus over TCP data.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据包图解是基于 Modbus 实现指南中的信息创建的： *[http://www.modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf](http://www.modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf)*。这告诉我们应该有一个包含在
    0x04:2 位置（相对于头部开始处）的长度字段的 7 字节头部。数到该位置时，我们得到了十六进制值 0006（或十进制值 6），这表明该字段后应该有 6
    个字节，情况确实如此。看起来这确实是 Modbus over TCP 数据。
- en: 'By comparing the packet diagram to the entirety of the hex output, the following
    information is derived:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将数据包图解与完整的十六进制输出进行比较，可以得出以下信息：
- en: •     The Transaction Identifier is at 0x00:2 and has a hex value of 00d1\.
    This field is used to pair a request with a response.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: •     事务标识符位于 0x00:2，并具有 00d1 的十六进制值。此字段用于将请求与响应配对。
- en: •     The Protocol Identifier is at 0x02:2 and has a hex value of 0000\. This
    identifies the protocol as Modbus.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: •     协议标识符位于 0x02:2，并具有 0000 的十六进制值。这标识该协议为 Modbus。
- en: •     The Length is at 0x04:2 and has a hex value of 0006\. This defines the
    length of the packet data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: •     长度位于 0x04:2，并具有 0006 的十六进制值。这定义了数据包的长度。
- en: •     The Unit Identifier is at 0x06 and has a hex value of 01\. This is used
    for intrasystem routing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: •     单元标识符位于 0x06，并具有十六进制值 01。用于系统内部路由。
- en: •     The Function Code is at 0x07 and has a hex value of 03\. This is the Read
    Holding Registers function, which reads a data value from a system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: •     功能代码位于 0x07，并具有 03 的十六进制值。这是读取保持寄存器功能，用于从系统中读取数据值。
- en: •     Based on the function code value of 3, two more data fields are expected.
    The Reference Number and Word Count are found at 0x08:4, and each has a hex value
    of 0001.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: •     基于功能代码值为 3，预计会有两个数据字段。参考号和字计数位于 0x08:4，每个字段的十六进制值为 0001。
- en: The mystery packet can now be fully explained in the context of the Modbus protocol.
    If you were troubleshooting the system responsible for this packet, this information
    should be all you need to proceed onward. Even if you never encounter Modbus,
    this is an example of how you can approach an unknown protocol and uninterpreted
    packet using a packet diagram.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以在 Modbus 协议的上下文中完全解释这个神秘的数据包。如果你正在排查负责该数据包的系统，这些信息应该就是你继续进行的全部所需。即使你从未遇到过
    Modbus，这也是如何使用数据包图解来处理未知协议和未解释数据包的一个例子。
- en: It’s always best practice to be aware of the abstraction between yourself and
    the data being analyzed. This helps you make sounder and more knowledgeable decisions
    and allows you to work with packets in a variety of situations. I’ve found myself
    in many scenarios in which I’ve only been able to use command line–based tools
    such as tcpdump to analyze packets. Because most of these tools lack dissection
    for many layer 7 protocols, the ability to manually dissect specific bytes in
    these packets has been crucial.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的做法是时刻意识到自己与正在分析的数据之间的抽象层次。这有助于你做出更合理、更有知识依据的决策，并能在各种情境中处理数据包。我自己就曾多次只能使用基于命令行的工具，如tcpdump，来分析数据包。由于这些工具大多缺乏对许多第七层协议的解析，因此能够手动解析数据包中的特定字节变得至关重要。
- en: '**NOTE**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*A colleague once had to help perform incident response in a highly secure
    environment. He was cleared to review the data he needed to look at, but not to
    access the specific system the data was stored on. The only thing they could do
    in the amount of time they had was print out the packets from specific conversations.
    Thanks to his fundamental knowledge of how packets are built and of how to navigate
    them, he was able to find the information he needed in the printed data. Of course,
    the process was slower than cold molasses running down a frozen branch. This is
    an extreme scenario, but it’s a prime example of why universal tool-agnostic knowledge
    is important.*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*有位同事曾经在一个高度安全的环境中帮助进行事件响应。他被允许查看需要分析的数据，但不能访问存储数据的具体系统。在他们拥有的时间内，他们唯一能做的事情就是打印出特定对话的包。多亏了他对数据包构建方式和如何浏览它们的基本知识，他能够在打印出的数据中找到所需的信息。当然，这个过程比冷糖浆顺着冰冻的树枝流下来还要慢。这是一个极端的例子，但它是为什么普遍的、与工具无关的知识如此重要的最佳证明。*'
- en: For all of these reasons, it’s helpful to spend time breaking apart packets
    in order to gain experience viewing multiple interpretations. I do this enough
    that I’ve printed out several common packet diagrams, had them laminated, and
    keep them beside my desk. I also maintain a digital version on my laptop and tablet
    for quick reference when traveling. For convenience, I’ve included several common
    packet diagrams in the ZIP file containing the packet captures that goes along
    with this book (*[https://www.nostarch.com/packetanalysis3/](https://www.nostarch.com/packetanalysis3/)*).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 基于上述原因，花时间拆解数据包，以获得查看多种解读的经验，是非常有帮助的。我自己做得足够多，以至于打印出了几种常见的数据包图示，并将它们塑封，放在桌子旁边。我还在我的笔记本和手机上保留了数字版本，以便在旅行时快速查阅。为了方便起见，我已将几种常见的数据包图示包含在与本书相关的ZIP文件中，该文件包含了数据包捕获内容（*
    [https://www.nostarch.com/packetanalysis3/](https://www.nostarch.com/packetanalysis3/)*）。
- en: '**Final Thoughts**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结思考**'
- en: In this appendix, we learned how to interpret packet data in a variety of formats
    and how to use packet diagrams to navigate uninterpreted packet data. Given this
    fundamental knowledge, you should have no trouble understanding how to dissect
    packets regardless of the tool you are using to view packet data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们学习了如何以多种格式解读数据包数据，并且如何使用数据包图示来浏览未解读的数据包。掌握了这些基本知识后，无论你使用什么工具来查看数据包数据，都应该能够顺利地解剖数据包。
