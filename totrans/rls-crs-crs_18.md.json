["```\n    irb(main):001:0> **file = File.read(\"test.txt\")**\n     => \"Call me Ishmael...\"\n    irb(main):002:0> **puts file.split**\n    Call\n    me\n    Ishmael\n    --*snip*--\n     => nil\n    irb(main):003:0> **puts file.split.length**\n     => 198\n    irb(main):004:0> **puts file.split.uniq.length**\n     => 140\n    ```", "```\n    file = File.read(\"test.txt\")\n    counts = {}\n    file.split.each do |word|\n      if counts[word]\n        counts[word] = counts[word] + 1\n      else\n        counts[word] = 1\n      end\n    end\n    puts counts\n    ```", "```\n    => {\"Call\"=>1, \"me\"=>3, \"Ishmael.\"=>1, ...\n    ```", "```\n    class WordCounter\n      def initialize(file_name)\n        @file = File.read(file_name)\n      end\n\n      def count\n        @file.split.length\n      end\n\n      def uniq_count\n        @file.split.uniq.length\n      end\n\n      def frequency\n        counts = {}\n        @file.split.each do |w|\n          if counts[w]\n            counts[w] = counts[w] + 1\n          else\n            counts[w] = 1\n          end\n        end\n      end\n    end\n    ```", "```\n    $ **bin/rails g migration add_email_to_comments email:string**\n        invoke  active_record\n        create    db/migrate/20140404225418_add_email_to_comments.rb\n    $ **bin/rake db:migrate**\n    == 20140404225418 AddEmailToComments: migrating...\n    --*snip*--\n    ```", "```\n    class Comment < ActiveRecord::Base\n      belongs_to :post\n      **validates :author, :body, presence: true**\n    end\n    ```", "```\n    2.1.0 :001 > **Post.all.each do |post|**\n    2.1.0 :002 *   **puts post.comments.count**\n    2.1.0 :003 > **end**\n    ```", "```\n    class CommentsController < ApplicationController\n      def create\n        @post = Post.find(params[:post_id])\n\n        if @post.comments.create(comment_params) ➊\n          redirect_to @post,\n                      notice: 'Comment was successfully created.'\n        else\n          redirect_to @post,\n                      alert: 'Error creating comment.'\n        end\n      end\n    --*snip*--\n    ```", "```\n    class CommentsController < ApplicationController\n      def create\n        @post = Post.find(params[:post_id])\n        **@comment = @post.comments.build(comment_params)**\n\n        if **@comment.save**\n          redirect_to @post,\n                      notice: 'Comment was successfully created.'\n        else\n          redirect_to @post,\n                      alert: 'Error creating comment. ' **+**\n                        **@comment.errors.full_messages.to_sentence** ➊\n        end\n      end\n    --*snip*--\n    ```", "```\n    class CommentsController < ApplicationController\n    --*snip*--\n\n      private\n      def comment_params\n        params.require(:comment).permit(:author, :body**, :email**)\n      end\n    end\n    ```", "```\n    --*snip*--\n    <body>\n    **<h1>Listing posts</h1>**\n\n    <%= yield %>\n\n    </body>\n    </html>\n    ```", "```\n    **<h2>New post</h2>**\n\n    <%= render 'form' %>\n\n    <%= link_to 'Back', posts_path %>\n    ```", "```\n    --*snip*--\n      <div class=\"field\">\n        <%= f.label :title %><br>\n        <%= f.text_field :title %>\n      </div>\n      **<div class=\"field\">**\n        **<%= f.label :author %><br>**\n        **<%= f.text_field :author %>**\n      **</div>**\n      <div class=\"field\">\n        <%= f.label :body %><br>\n        <%= f.text_area :body %>\n      </div>\n    --*snip*--\n    ```", "```\n    --*snip*--\n        def post_params\n          params.require(:post).permit(:title, **:author,** :body)\n        end\n    end\n    ```", "```\n    --*snip*--\n      **def destroy**\n        **@post = Post.find(params[:post_id])**\n        **@comment = @post.comments.find(params[:id])**\n\n        **@comment.destroy**\n        **respond_to do |format|**\n          **format.html { redirect_to @post }**\n          **format.json { head :no_content }**\n        **end**\n      **end**\n    --*snip*--\n    ```", "```\n    $ **rails new vinyl**\n    ```", "```\n    $ **cd vinyl**\n    $ **bin/rails generate scaffold Album title artist release_date:datetime**\n    ```", "```\n    irb(main):001:0> Post.ancestors.count\n    => 58\n    ```", "```\n    irb(main):012:0> pp Post.ancestors\n    [Post(id: integer, title: string, body: text, created_at: datetime,\n    updated_at: datetime, author: string),\n     Post::GeneratedFeatureMethods,\n     #<Module:0x007fabc21bafd8>,\n     ActiveRecord::Base,\n     --*snip*--\n     ActiveRecord::Validations,\n     --*snip*--\n     Kernel,\n     BasicObject]\n    ```", "```\n    class User\n      FEATURES = ['create', 'update', 'delete']\n\n      FEATURES.each do |f|\n        define_method \"can_#{f}!\" do\n          @features[f] = true\n        end\n\n        **define_method \"cannot_#{f}!\" do**\n          **@features[f] = false**\n        **end**\n\n        define_method \"can_#{f}?\" do\n          !!@features[f]\n        end\n      end\n\n      def initialize\n        @features = {}\n      end\n    end\n    ```", "```\n    irb(main):001:0> **user = User.new**\n     => #<User:0x007fc01b95abe0 @features={}>\n    irb(main):002:0> **user.can_create!**\n     => true\n    irb(main):003:0> **user.can_create?**\n     => true\n    irb(main):004:0> **user.cannot_create!**\n     => false\n    irb(main):005:0> **user.can_create?**\n     => false\n    ```", "```\n    irb(main):001:0> **Element.instance_methods(false)**\n     => [:name, :name=]\n    ```", "```\n    irb(main):002:0> **class Element**\n    irb(main):003:1> **accessor :symbol**\n    irb(main):004:1> **end**\n     => :symbol=\n    ```", "```\n    irb(main):005:0> **Element.instance_methods(false)**\n     => [:name, :name=, :symbol, :symbol=]\n    ```", "```\n    class Comment < ActiveRecord::Base\n      belongs_to :post\n      belongs_to :user\n\n      **validates :post_id, presence: true**\n      **validates :user_id, presence: true**\n    end\n    ```", "```\n    irb(main):001:0> **carol = User.create name: \"Carol\"**\n     => #<User id: 3, name: \"Carol\", ...>\n    irb(main):002:0> **post = TextPost.create user: carol, body: \"Testing\"**\n     => #<TextPost id: 3, body: \"Testing\", ...>\n    irb(main):003:0> **comment = Comment.create post: post, user: carol, \\**\n                                    **body: \"Hello\"**\n     => #<Comment id: 1, body: \"Hello\", ...>\n    irb(main):004:0> **carol.posts.count**\n     => 1\n    irb(main):005:0> **carol.comments.count**\n     => 1\n    irb(main):006:0> **carol.destroy** ➊\n    --*snip*--\n     => #<User id: 3, name: \"Carol\", ...>\n    irb(main):007:0> **carol.posts.count**\n     => 0\n    irb(main):008:0> **carol.comments.count**\n     => 0\n    irb(main):009:0> **carol.reload** ➋\n    ActiveRecord::RecordNotFound: Couldn't find User with id=3\n    --*snip*--\n    ```", "```\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">\n          <%= text_post.title %>\n        </h3>\n        **<%= link_to(**\n              **\"#{time_ago_in_words text_post.created_at} ago\",**\n              **post_path(text_post)) %>**\n      </div>\n    --*snip*--\n    ```", "```\n    --*snip*--\n      </h3>\n      **<%= link_to \"#{time_ago_in_words image_post.created_at} ago\",**\n            **post_path(image_post) %>**\n    </div>\n    --*snip*--\n    ```", "```\n    class CommentsController < ApplicationController\n      **before_action :authenticate_user!**\n\n      --*snip*--\n    end\n    ```", "```\n    **<p><em><%= comment.user.name %> said:</em></p>**\n    **<p><%= comment.body %></p>**\n    ```", "```\n    irb(main):001:0> **alice = User.find 1**\n      User Load ...\n     => #<User id: 1, name: \"Alice\", ...>\n    irb(main):002:0> **alice.password_digest**\n     => \"$2a$10$NBjrpHtfLJN14c6kVjG7sety1N4ifyuto7GD5qX7xHdVmbtweL1Ny\"\n    ```", "```\n    --*snip*--\n    <div class=\"panel-body\">\n      <p><em>By **<%= link_to text_post.user.name, text_post.user %>**</em></p>\n\n      <%= text_post.body %>\n    </div>\n    --*snip*--\n    ```", "```\n    --*snip*--\n    <div class=\"panel-body\">\n      <p><em>By **<%= link_to image_post.user.name, image_post.user %>**</em></p>\n\n      <%= image_tag image_post.url, class: \"img-responsive\" %>\n\n      <%= image_post.body %>\n    </div>\n    --*snip*--\n    ```", "```\n    --*snip*--\n    <div class=\"pull-right\">\n      <% if current_user %>\n        **<%= link_to 'Profile', current_user %>**\n        <%= link_to 'Log Out', logout_path %>\n      <% else %>\n    --*snip*--\n    ```", "```\n    class UsersController < ApplicationController\n      **before_action :authenticate_user!, only: :follow**\n\n    --*snip*--\n    ```", "```\n    --*snip*--\n    <p class=\"lead\"><%= @user.name %></p>\n\n    **<% if current_user %>**\n      **<% if current_user != @user && !current_user.following?(@user) %>**\n        <%= link_to \"Follow\", follow_user_path(@user),\n                 class: \"btn btn-default\" %>\n      **<% end %>**\n    **<% end %>**\n\n    <h3>Posts</h3>\n    --*snip*--\n    ```", "```\n    class ImagePostsController < ApplicationController\n      **def new**\n        **@image_post = ImagePost.new**\n      **end**\n      **def create**\n        **@image_post = current_user.image_posts.build(image_post_params)**\n        **if @image_post.save**\n          **redirect_to post_path(@image_post),**\n                        **notice: \"Post created!\"**\n        **else**\n          **render :new, alert: \"Error creating post.\"**\n        **end**\n      **end**\n\n      **private**\n\n      **def image_post_params**\n        **params.require(:image_post).permit(:title, :url, :body)**\n      **end**\n    end\n    ```", "```\n    <div class=\"page-header\">\n      <h1>New Image Post</h1>\n    </div>\n\n    <%= render 'form' %>\n    ```", "```\n    <%= form_for @image_post do |f| %>\n      <div class=\"form-group\">\n        <%= f.label :title %>\n        <%= f.text_field :title, class: \"form-control\" %>\n      </div>\n      <div class=\"form-group\">\n        <%= f.label :url %>\n        <%= f.text_field :url, class: \"form-control\" %>\n      </div>\n      <div class=\"form-group\">\n        <%= f.label :body %>\n        <%= f.text_area :body, class: \"form-control\" %>\n      </div>\n\n      <%= f.submit class: \"btn btn-primary\" %>\n      <%= link_to 'Cancel', :back, class: \"btn btn-default\" %>\n    <% end %>\n    ```", "```\n    --*snip*--\n    <p>\n      <%= link_to \"New Text Post\", new_text_post_path,\n            class: \"btn btn-default\" %>\n      **<%= link_to \"New Image Post\", new_image_post_path,**\n            **class: \"btn btn-default\" %>**\n    </p>\n    --*snip*--\n    ```", "```\n    --*snip*--\n\n    **def edit**\n\n      **@image_post = current_user.image_posts.find(params[:id])**\n    **end**\n\n      **def update**\n        **@image_post = current_user.image_posts.find(params[:id])**\n        **if @image_post.update(image_post_params)**\n          **redirect_to post_path(@image_post), notice: \"Post updated!\"**\n        **else**\n          **render :edit, alert: \"Error updating post.\"**\n        **end**\n      **end**\n\n      private\n\n      def image_post_params\n        params.require(:image_post).permit(:title, :body, :url)\n      end\n    end\n    ```", "```\n    <div class=\"page-header\">\n      <h1>Edit Image Post</h1> </div>\n    <%= render 'form' %>\n    ```", "```\n    --*snip*--\n    <%= image_post.body %>\n        **<% if image_post.user == current_user %>**\n          **<p>**\n          **<%= link_to 'Edit', edit_image_post_path(image_post),**\n                **class: \"btn btn-default\" %>**\n          **</p>**\n        **<% end %>**\n      </div>\n    </div>\n    ```", "```\n      --*snip*--\n\n      def show\n        @post = Post.find(params[:id])\n        **@can_moderate = (current_user == @post.user)**\n      end\n    end\n    ```", "```\n    <p><em><%= comment.user.name %> said:</em></p>\n    <p><%= comment.body %></p>\n    <% if @can_moderate %>\n      **<p>**\n      **<%= link_to 'Destroy', comment_path(comment),**\n            **method: :delete, class: \"btn btn-default\" %>**\n      **</p>**\n    **<% end %>**\n    ```", "```\n    --*snip*--\n\n    **def destroy**\n      **@comment = Comment.find(params[:id])**\n\n      **if @comment.destroy**\n        **redirect_to post_path(@comment.post_id),**\n                    **notice: 'Comment successfully destroyed.'**\n      **else**\n        **redirect_to post_path(@comment.post_id),**\n                    **alert: 'Error destroying comment.'**\n      **end**\n    **end**\n      private\n\n      def comment_params\n        params.require(:comment).permit(:body, :post_id)\n      end\n    end\n    ```", "```\n      --*snip*--\n      get 'login', to: 'sessions#new', as: 'login'\n      **delete** 'logout', to: 'sessions#destroy', as: 'logout'\n\n      root 'posts#index'\n    end\n    ```", "```\n    --*snip*--\n\n    <div class=\"pull-right\">\n      <% if current_user %>\n        <%= link_to 'Profile', current_user %>\n        <%= link_to 'Log Out', logout_path**, method: :delete** %>\n      <% else %>\n    --*snip*--\n    ```", "```\n    --*snip*--\n\n      def show\n        @post = Post**.includes(comments: [:user])**.find(params[:id]) ➊\n        @can_moderate = (current_user == @post.user)\n      end\n    end\n    ```", "```\n    <% cache [comment, @can_moderate] do %> ➊\n      <p><em><%= comment.user.name %> said:</em></p>\n      <p><%= comment.body %></p>\n      <% if @can_moderate %>\n        <p>\n          <%= link_to 'Destroy', comment_path(comment),\n                method: :delete, class: \"btn btn-default\" %>\n        </p>\n      <% end %>\n    **<% end %>**\n    ```", "```\n    --*snip*--\n\n    <h3>Comments</h3>\n    **<% cache [@post, 'comments', @can_moderate] do %>** ➊\n      <%= render @post.comments %>\n    **<% end %>**\n\n    *--snip--*\n    ```", "```\n    <div class=\"panel panel-default\">\n      --*snip*--\n\n        <%= debug text_post %>\n      </div>\n    </div>\n    ```", "```\n    <div class=\"panel panel-default\">\n      --*snip*--\n\n        <%= debug link_post %>\n      </div>\n    </div>\n    ```", "```\n    class PostsController < ApplicationController\n      before_action :authenticate_user!\n\n      def index\n        user_ids = current_user.timeline_user_ids\n        @posts = Post.includes(:user).where(user_id: user_ids)\n                   .paginate(page: params[:page], per_page: 5)\n                   .order(\"created_at DESC\")\n\n        **@posts.each do |post|**\n          **logger.debug \"Post #{post.id} is a #{post.type}\"**\n        **end**\n      end\n    --*snip*--\n    ```", "```\n    class SessionsController < ApplicationController\n      --*snip*--\n\n      def create\n        **debugger**\n        user = User.find_by(email: params[:email])\n        if user && user.authenticate(params[:password])\n          session[:user_id] = user.id\n          redirect_to root_url, :notice => \"Logged in!\"\n        else\n          flash.now.alert = \"Invalid email or password\"\n          render \"new\"\n        end\n      end\n\n      --*snip*--\n    ```", "```\n    $ **curl -i \\**\n           **-d '{\"text_post\":{\"title\":\"Test\",\"body\":\"Hello\"}}' \\**\n           **-H \"Content-Type: application/json\" \\**\n           **-H \"Authorization: Token fake\" \\**\n           **http://localhost:3000/api/text_posts**\n\n    HTTP/1.1 401 Unauthorized\n    --*snip*--\n\n    HTTP Token: Access denied.\n    ```", "```\n    $ **curl -i \\**\n           **-d '{\"text_post\":{\"title\":\"Test\"}}' \\**\n           **-H \"Content-Type: application/json\" \\**\n           **-H \"Authorization: Token *token\"* \\**\n           **http://localhost:3000/api/text_posts**\n    HTTP/1.1 422 Unprocessable Entity\n    --*snip*--\n\n    {\"errors\":{\"body\":[\"can't be blank\"]}}\n    ```", "```\n    module Api\n      class PostsController < ApplicationController\n        respond_to :json\n\n        --*snip*--\n\n        **def show**\n          **@post = Post.find(params[:id])**\n          **respond_with @post**\n        **end**\n      end\n    end\n    ```", "```\n    $ **curl http://localhost:3000/api/posts/1**\n    {\n      \"id\":1,\n      \"title\":\"First Post\",\n      \"body\":\"Hello, World!\",\n      \"url\":null,\n      \"user_id\":1,\n      \"created_at\":\"2014-04-22T00:56:48.188Z\",\n      \"updated_at\":\"2014-04-22T00:56:48.188Z\"\n    }\n    ```", "```\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>**My Awesome Site**</title>\n      --*snip*--\n    ```", "```\n    $ **git add .**\n    $ **git commit -m \"Update title\"**\n    ```"]