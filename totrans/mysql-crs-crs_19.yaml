- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Calling MySQL from Programming Languages
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从编程语言调用 MySQL
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'In this chapter, you’ll write computer programs that use MySQL, focusing on
    three open source programming languages: PHP, Python, and Java. You’ll write programs
    in each language to select from a table, insert a row into a table, and call a
    stored procedure.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将编写使用 MySQL 的计算机程序，重点介绍三种开源编程语言：PHP、Python 和 Java。你将在每种语言中编写程序，进行从表格中选择数据、向表格插入行以及调用存储过程等操作。
- en: Regardless of the programming language, you follow the same general steps to
    call MySQL. First, you establish a connection to the MySQL database using your
    MySQL database credentials, including the hostname of the MySQL server, the database,
    user ID, and password. Then, you use that connection to run your SQL statements
    against the database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种编程语言，调用 MySQL 的基本步骤都是相同的。首先，你需要使用 MySQL 数据库凭证建立与 MySQL 数据库的连接，其中包括 MySQL
    服务器的主机名、数据库、用户 ID 和密码。然后，你使用该连接执行 SQL 语句，操作数据库。
- en: You embed SQL statements in your program and when the program is run, the SQL
    is executed against the database. If you need to send parameter values to a SQL
    statement, you use a *prepared statement*, a reusable SQL statement that uses
    placeholders to temporarily represent the parameters. Then you bind parameter
    values to the prepared statement, replacing the placeholders with actual values.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你在程序中嵌入 SQL 语句，当程序运行时，SQL 会执行并与数据库交互。如果你需要向 SQL 语句传递参数值，可以使用 *预处理语句*，这是一种可重用的
    SQL 语句，使用占位符暂时表示参数。然后，你将参数值绑定到预处理语句，用实际值替换占位符。
- en: If you’re retrieving data from the database, you iterate through the results
    and perform some action, like displaying the results. When you’re done, you close
    the connection to MySQL.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要从数据库中检索数据，你会遍历结果并执行某些操作，例如显示结果。当操作完成后，你需要关闭与 MySQL 的连接。
- en: Let’s look at some examples using PHP, Python, and Java.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些使用 PHP、Python 和 Java 的示例。
- en: PHP
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP
- en: 'PHP (a recursive acronym for PHP: Hypertext Preprocessor) is an open source
    programming language used mostly for web development. Millions of websites have
    been built with PHP.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PHP（PHP：超文本预处理器的递归缩写）是一种开源编程语言，主要用于 Web 开发。数百万个网站是用 PHP 构建的。
- en: PHP is commonly used with MySQL. Both are part of the *LAMP stack*, a popular
    software development architecture consisting of Linux, Apache, MySQL, and PHP.
    (The *P* can also refer to the Python programming language and, less frequently,
    to Perl.) Many sites use Linux as the operating system; Apache as the web server
    to receive requests and send back responses; MySQL as the relational database
    management system; and PHP as the programming language.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 通常与 MySQL 一起使用。两者都属于 *LAMP 堆栈*，这是一种流行的软件开发架构，包括 Linux、Apache、MySQL 和 PHP。（*P*
    也可以指 Python 编程语言，较少情况下指 Perl。）许多网站使用 Linux 作为操作系统；Apache 作为接收请求并返回响应的 Web 服务器；MySQL
    作为关系型数据库管理系统；PHP 作为编程语言。
- en: 'To use MySQL from within PHP, you need a PHP *extension*, which enables you
    to use functionality in your PHP program that isn’t included in the core language.
    Since not all PHP applications need to access MySQL, this functionality is provided
    as an extension you can load. There are two choices for extensions: *PHP Data
    Objects (PDO)* and *MySQLi*. You’ll specify which you want to load by listing
    them in your *php.ini* configuration file, like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PHP 中使用 MySQL，你需要一个 PHP *扩展*，该扩展使你能够在 PHP 程序中使用核心语言中未包含的功能。由于并非所有 PHP 应用程序都需要访问
    MySQL，因此该功能作为扩展提供，你可以加载它。有两种扩展选择：*PHP 数据对象（PDO）* 和 *MySQLi*。你可以在 *php.ini* 配置文件中列出你想加载的扩展，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The PDO and MySQLi extensions provide different ways to create database connections
    and execute SQL statements from within your PHP programs. These are object-oriented
    extensions. (MySQLi is also available as a procedural extension; you’ll learn
    what this means in the section “Procedural MySQLi” later in the chapter.) *Object-oriented
    programming (OOP)* relies on objects that contain data and can execute code in
    the form of methods. A *method* is the equivalent of a function in procedural
    programming; it is a set of instructions you can call to take some action, like
    running a query or executing a stored procedure.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PDO 和 MySQLi 扩展提供了不同的方式，在你的 PHP 程序中创建数据库连接并执行 SQL 语句。这些是面向对象的扩展。（MySQLi 也可以作为过程化扩展使用；你将在本章稍后的“过程化
    MySQLi”部分了解这意味着什么。）*面向对象编程（OOP）*依赖于包含数据并能够以方法形式执行代码的对象。*方法*相当于过程化编程中的函数；它是一组可以调用以执行某些操作的指令，例如运行查询或执行存储过程。
- en: To use PHP’s object-oriented MySQL extensions, you’ll create a new `PDO` or
    `MySQLi` object in your PHP code and use the `->` symbol to call the object’s
    methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 PHP 的面向对象 MySQL 扩展，你需要在 PHP 代码中创建一个新的 `PDO` 或 `MySQLi` 对象，并使用 `->` 符号来调用该对象的方法。
- en: Let’s take a look at each of these extensions, starting with PDO.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从 PDO 开始，看看这些扩展的使用。
- en: PDO
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PDO
- en: The PDO extension can be used with many relational database management systems,
    including MySQL, Oracle, Microsoft SQL Server, and PostgreSQL.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PDO 扩展可以与许多关系数据库管理系统一起使用，包括 MySQL、Oracle、Microsoft SQL Server 和 PostgreSQL。
- en: Selecting from a Table
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从表中选择数据
- en: In [Listing 15-1](#listing15-1), you write a PHP program called *display_mountains_pdo.php*
    that uses PDO to select from a MySQL table called `mountain` in the `topography`
    database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Listing 15-1](#listing15-1) 中，你编写了一个名为 *display_mountains_pdo.php* 的 PHP
    程序，使用 PDO 从名为 `topography` 数据库中的 `mountain` 表中选择数据。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 15-1: Using PDO to display data from the `mountain` table (*display_mountains_pdo.php*)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 15-1：使用 PDO 从 `mountain` 表中显示数据 (*display_mountains_pdo.php*)
- en: The program begins with the opening tag `<?php` and ends with the closing tag
    `?>`. The tags tell the web server to interpret the code between them as PHP.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 程序从开标签 `<?php` 开始，结束标签 `?>` 结束。标签告诉 Web 服务器将其中的代码作为 PHP 进行解析。
- en: To use MySQL from within PHP, you need to create a connection to your MySQL
    database by creating a new `PDO` object ❶ and passing in your database credentials.
    In this case, your hostname is `localhost`, your database name is `topography`,
    the database user ID is `top_app`, and the password for your MySQL database is
    `pQ3fgR5u5`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PHP 中使用 MySQL，你需要通过创建一个新的 `PDO` 对象 ❶ 并传入你的数据库凭证来建立与 MySQL 数据库的连接。在这种情况下，你的主机名是
    `localhost`，数据库名称是 `topography`，数据库用户 ID 是 `top_app`，MySQL 数据库的密码是 `pQ3fgR5u5`。
- en: 'You can also specify the port by adding it to the end of the line with your
    host and database name, like so:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过将端口号添加到主机和数据库名称的末尾来指定端口，例如：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you don’t provide a port, it defaults to `3306`, which is the port normally
    used to connect to a MySQL server. If your MySQL server instance was configured
    to run on another port, ask your database administrator to check the configuration
    files for the port number.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有提供端口号，默认值为 `3306`，这是连接 MySQL 服务器时通常使用的端口。如果你的 MySQL 服务器实例配置为在另一个端口上运行，向你的数据库管理员询问配置文件中的端口号。
- en: You save the connection as a variable named `$conn`. PHP variables are preceded
    by a dollar sign. This variable now represents the connection between your PHP
    program and your MySQL database.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将连接保存为一个名为`$conn`的变量。PHP 变量前面有一个美元符号。这一变量现在代表了你的 PHP 程序和 MySQL 数据库之间的连接。
- en: Next, you create a PHP variable called `$sql` that holds your SQL statement
    ❷.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你创建一个名为`$sql`的 PHP 变量，用于存储你的 SQL 语句 ❷。
- en: You call PDO’s `query()` method and send it the SQL statement you want to run.
    In object-oriented programming, the `->` symbol is often used to call an object’s
    instance methods, like `$conn->query()`. You save the statement and its results
    as an array variable called `$stmt` ❸.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你调用 PDO 的 `query()` 方法，并将你想要运行的 SQL 语句传递给它。在面向对象编程中，`->` 符号通常用于调用对象的实例方法，例如
    `$conn->query()`。你将语句及其结果保存为名为 `$stmt` 的数组变量 ❸。
- en: An *array* is a type of variable you can use to store a group of values. It
    uses an *index* to identify one value in the group. You use PDO’s `fetch()` method
    to fetch each row from `$stmt` using a *mode*, which controls how the data gets
    returned to you. Here, the mode `PDO::FETCH_ASSOC` ❹ returns an array that is
    indexed by the database table’s column names, like `$row['mountain_name']`, `$row['location']`,
    and `$row['height']`. If you had used the mode `PDO::FETCH_NUM`, it would have
    returned an array that is indexed by the column number starting at zero, like
    `$row[0]`, `$row[1]`, and `$row[2]`. Other modes can be found in PHP’s online
    manual at [https://php.net](https://php.net).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组*是你可以用来存储一组值的变量类型。它使用*索引*来标识组中的一个值。你使用PDO的`fetch()`方法从`$stmt`中获取每一行，并使用*模式*来控制数据返回的方式。在这里，模式`PDO::FETCH_ASSOC`❹返回一个由数据库表的列名索引的数组，比如`$row[''mountain_name'']`、`$row[''location'']`和`$row[''height'']`。如果你使用了`PDO::FETCH_NUM`模式，它会返回一个由列的编号（从零开始）索引的数组，比如`$row[0]`、`$row[1]`和`$row[2]`。更多的模式可以在PHP的在线手册中找到，[https://php.net](https://php.net)。'
- en: Next, the `while` loop will loop through each row that was fetched. You use
    the `echo()` command ❺ to display each column separated by the pipe (`|`) character.
    The `<br />` HTML tag at the end of your `echo()` statement will create a line
    break after each line in your browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`while`循环将遍历每一行已获取的数据。你使用`echo()`命令❺来显示每一列，列与列之间通过竖线（`|`）分隔。`echo()`语句末尾的`<br
    />` HTML标签将在浏览器中为每行数据创建换行符。
- en: Finally, you close the connection by setting it to `null` ❻.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你通过将连接设置为`null`❻来关闭连接。
- en: Navigate to [http://localhost/display_mountains_pdo.php](http://localhost/display_mountains_pdo.php%20)
    to see the results of your PHP program, shown in [Figure 15-1](#figure15-1).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://localhost/display_mountains_pdo.php](http://localhost/display_mountains_pdo.php)查看你的PHP程序的结果，结果显示在[图
    15-1](#figure15-1)中。
- en: '![](image_fi/503007c15/f15001.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c15/f15001.png)'
- en: 'Figure 15-1: The results of *display_mountains_pdo.php*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '图 15-1: *display_mountains_pdo.php*的结果'
- en: You’ve successfully accessed MySQL via PDO to select data from the `mountain`
    table and return each column separated by the pipe character.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功通过PDO访问MySQL，选择了`mountain`表中的数据，并返回每列数据，列与列之间由竖线字符分隔。
- en: Inserting a Row into a Table
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向表中插入一行数据
- en: Now you’ll create a new PHP program called *add_mountain_pdo.php* that inserts
    a new row in the `mountain` table using PDO.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将创建一个新的PHP程序，名为*add_mountain_pdo.php*，它使用PDO向`mountain`表插入一行新数据。
- en: In [Listing 15-2](#listing15-2), you’ll use a prepared statement, which, as
    mentioned earlier, uses placeholders to represent values in a SQL statement. Then,
    you’ll replace those placeholders with actual values from PHP variables. Using
    prepared statements is a good security practice because it helps protect against
    SQL injection attacks, which are a common way for hackers to run malicious SQL
    code against your database.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在[代码清单 15-2](#listing15-2)中，你将使用准备语句，正如之前所提到的，它使用占位符来表示SQL语句中的值。然后，你会用来自PHP变量的实际值替换这些占位符。使用准备语句是一种良好的安全实践，因为它有助于防止SQL注入攻击，这是一种黑客通过运行恶意SQL代码来攻击你数据库的常见方式。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 15-2: Using PDO to insert a row into the `mountain` table (*add_mountain_pdo.php*)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '代码清单 15-2: 使用PDO向`mountain`表插入一行数据（*add_mountain_pdo.php*）'
- en: As in [Listing 15-1](#listing15-1), you first create a connection to your MySQL
    database ❶. You have three PHP variables called `$new_mountain`, `$new_location`,
    and `$new_height` that hold the name, location, and height of the mountain, respectively,
    that you want to insert into your `mountain` table.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如[代码清单 15-1](#listing15-1)所示，你首先创建一个与MySQL数据库的连接❶。你有三个PHP变量，分别是`$new_mountain`、`$new_location`和`$new_height`，它们分别保存你要插入到`mountain`表中的山名、位置和高度。
- en: You use the connection’s `prepare()` method ❷ to create a prepared statement
    that uses named placeholders for your values. You write the `insert` SQL statement,
    but instead of including the actual values you want to insert, you use placeholders
    ❸. Your named placeholders are `:mountain`, `:location`, and `:height`. Named
    placeholders are preceded by a colon.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用连接的`prepare()`方法❷来创建一个准备语句，该语句使用命名占位符来表示你的值。你编写`insert` SQL 语句，但并不是直接包含你想插入的实际值，而是使用占位符❸。你的命名占位符是`:mountain`、`:location`和`:height`。命名占位符前面会有一个冒号。
- en: Next, you replace the placeholders with actual values using the `bindParam()`
    method ❹, which links, or binds, a placeholder with a variable. You bind the first
    placeholder to the `$new_mountain` variable, which replaces `:mountain` with the
    value `K2`. You bind the second placeholder to the `$new_location` variable, replacing
    `:location` with the value `Asia`. You bind the third placeholder to the `$new_height`
    variable, replacing `:height` with the value `28252`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你使用 `bindParam()` 方法 ❹ 替换占位符为实际值，该方法将占位符与变量绑定。你将第一个占位符绑定到 `$new_mountain`
    变量，它将 `:mountain` 替换为值 `K2`。你将第二个占位符绑定到 `$new_location` 变量，它将 `:location` 替换为值
    `Asia`。你将第三个占位符绑定到 `$new_height` 变量，它将 `:height` 替换为值 `28252`。
- en: Then, you specify the type of data the variables represent. The mountain and
    location are strings, so you use `PDO::PARAM_STR`. The height is an integer, so
    you use `PDO::PARAM_INT`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要指定变量代表的数据类型。山脉和位置是字符串，所以你使用 `PDO::PARAM_STR`。高度是整数，因此你使用 `PDO::PARAM_INT`。
- en: When you call the statement’s `execute()` method ❺, your statement is executed
    and your new row gets inserted into the `mountain` table.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用语句的 `execute()` 方法 ❺ 时，语句会执行，你的新行将被插入到 `mountain` 表中。
- en: Calling a Stored Procedure
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调用存储过程
- en: Next, you’ll write a PHP program named *find_mountains_by_loc_pdo.php* that
    calls a MySQL stored procedure, `p_get_mountain_by_loc()`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一个名为 *find_mountains_by_loc_pdo.php* 的 PHP 程序，调用一个 MySQL 存储过程 `p_get_mountain_by_loc()`。
- en: You’ll provide the stored procedure with a parameter for the location you want
    to search for; in this example, you’ll search for mountains in `Asia`. Your PHP
    program will call the stored procedure and return the number of mountains in the
    `mountain` table that are in Asia (see [Listing 15-3](#listing15-3)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为存储过程提供一个参数，用于指定你想要搜索的地点；在本例中，你将搜索位于 `Asia` 的山脉。你的 PHP 程序将调用存储过程，并返回位于亚洲的
    `mountain` 表中的山脉数量（参见[列表 15-3](#listing15-3)）。
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 15-3: Using PDO to call a stored MySQL procedure (*find_mountains_by_loc_pdo.php*)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-3：使用 PDO 调用存储的 MySQL 存储过程 (*find_mountains_by_loc_pdo.php*)
- en: You use the `call` statement ❶ in your prepared statement to call the stored
    procedure. Then you create a named placeholder, `:location` ❷, and use `bindParam`
    ❸ to replace `:location` with the value in the `$location` variable, which evaluates
    to `Asia`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你在预处理语句中使用 `call` 语句 ❶ 调用存储过程。然后，你创建一个命名占位符 `:location` ❷，并使用 `bindParam` ❸
    将 `:location` 替换为 `$location` 变量中的值，该值为 `Asia`。
- en: Next, you execute the stored procedure ❹. Then you use a `while` statement ❺
    to select the rows returned from the stored procedure. You display them to the
    user using the `echo` command. Finally, you end the connection. The results are
    shown in [Figure 15-2](#figure15-2).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你执行存储过程 ❹。然后，你使用 `while` 语句 ❺ 选择从存储过程中返回的行，并使用 `echo` 命令将它们显示给用户。最后，你结束连接。结果如图
    [15-2](#figure15-2) 所示。
- en: '![](image_fi/503007c15/f15002.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c15/f15002.png)'
- en: 'Figure 15-2: The results of *find_mountains_by_loc_pdo.php*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-2：*find_mountains_by_loc_pdo.php* 的结果
- en: You can add more functionality to these programs. For example, you might choose
    to allow the user to select the location they want to see, rather than hardcoding
    `Asia` in the PHP program. You could even check for errors connecting to the database
    or calling your stored procedure, and display detailed error messages to the user
    when there is a problem.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为这些程序添加更多功能。例如，你可能会选择允许用户选择他们希望查看的地点，而不是在 PHP 程序中硬编码 `Asia`。你甚至可以检查与数据库连接或调用存储过程时是否有错误，并在出现问题时向用户显示详细的错误信息。
- en: Object-Oriented MySQLi
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向对象的 MySQLi
- en: The MySQL Improved (MySQLi) extension is the upgraded version of an old legacy
    PHP extension that was called MySQL. In this section, you’ll learn how to use
    the object-oriented version of MySQLi.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 改进版（MySQLi）扩展是旧版 PHP 扩展 MySQL 的升级版。在本节中，你将学习如何使用 MySQLi 的面向对象版本。
- en: Selecting from a Table
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从表中选择
- en: In [Listing 15-4](#listing15-4), you write a PHP program using the object-oriented
    MySQLi to select from your `mountain` table.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表 15-4](#listing15-4)中，你编写了一个使用面向对象的 MySQLi 的 PHP 程序，从 `mountain` 表中选择数据。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 15-4: Using object-oriented MySQLi to display data from the `mountain`
    table (*display_mountains_mysqli_oo.php*)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-4：使用面向对象的 MySQLi 显示来自 `mountain` 表的数据 (*display_mountains_mysqli_oo.php*)
- en: You establish a connection to MySQL by creating a `mysqli` object ❶ and passing
    in the host, user ID, password, and database. You run your query using the connection’s
    `query()` method ❷ and save the results to a PHP variable called `$result`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过创建一个 `mysqli` 对象 ❶ 并传入主机、用户 ID、密码和数据库，来建立与 MySQL 的连接。然后，使用连接的 `query()` 方法
    ❷ 执行查询，并将结果保存到名为 `$result` 的 PHP 变量中。
- en: You iterate through the resulting rows, calling the `$result` `fetch_assoc()`
    method ❸ so that you can reference the columns as indexes, like `$row['mountain_name']`.
    Then you print the values of those columns and close your connection with the
    `close()` method ❹.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您遍历结果行，调用 `$result` 的 `fetch_assoc()` 方法 ❸，这样您可以通过索引引用列，例如 `$row['mountain_name']`。然后打印这些列的值，并通过
    `close()` 方法 ❹ 关闭连接。
- en: The result is displayed in [Figure 15-3](#figure15-3).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在 [图 15-3](#figure15-3) 中。
- en: '![](image_fi/503007c15/f15003.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c15/f15003.png)'
- en: 'Figure 15-3: The results of *display_mountains_mysqli_oo.php*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-3：*display_mountains_mysqli_oo.php* 的结果
- en: Inserting a Row into a Table
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向表中插入一行数据
- en: Now, you’ll create a PHP program to insert a row into the `mountain` table using
    object-oriented MySQLi (see [Listing 15-5](#listing15-5)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将创建一个 PHP 程序，使用面向对象的 MySQLi 向 `mountain` 表中插入一行数据（请参见 [列表 15-5](#listing15-5)）。
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 15-5: Using object-oriented MySQLi to insert a row into the `mountain`
    table (*add_mountain_mysqli_oo.php*)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-5：使用面向对象的 MySQLi 向 `mountain` 表插入一行数据（*add_mountain_mysqli_oo.php*）
- en: Once you’ve established your connection, you use a prepared statement with question
    marks as your placeholders ❶. Then, you replace your question mark placeholders
    with values using the `bind_param()` method ❷.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了连接，您使用准备好的语句，并用问号作为占位符 ❶。然后，您使用 `bind_param()` 方法 ❷ 替换问号占位符为值。
- en: With MySQLi, you can provide the data types of the bind variables as a string.
    The first parameter you send to `bind_param()` is the value `ssi`, which indicates
    that you want to replace the first and second placeholders with a string (`s`)
    value, and the third placeholder with an integer (`i`) value. You can also choose
    `d` if the bind variable has a data type of `double` (a double-precision floating-point
    number) or `b` if the bind variable has a data type of `blob` (a binary large
    object).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 MySQLi，您可以作为字符串提供绑定变量的数据类型。您发送给 `bind_param()` 的第一个参数是值 `ssi`，这表示您希望将第一个和第二个占位符替换为字符串（`s`）类型的值，第三个占位符替换为整数（`i`）类型的值。如果绑定变量的数据类型是
    `double`（双精度浮动小数），您还可以选择使用 `d`，如果是 `blob`（二进制大对象）类型，则使用 `b`。
- en: Finally, you execute the prepared statement with `execute()` and close your
    connection. When you run the program, it inserts a new mountain—`Makalu`—into
    your `mountain` table.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您通过 `execute()` 执行准备好的语句，并关闭连接。当您运行该程序时，它会在 `mountain` 表中插入一座新的山脉——`Makalu`。
- en: Calling a Stored Procedure
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调用存储过程
- en: '[Listing 15-6](#listing15-6) shows a PHP program that uses object-oriented
    MySQLi to execute a stored procedure.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 15-6](#listing15-6) 显示了一个使用面向对象的 MySQLi 执行存储过程的 PHP 程序。'
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 15-6: Using object-oriented MySQLi to call a stored MySQL procedure
    (*find_mountains_by_loc_mysqli_oo.php*)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-6：使用面向对象的 MySQLi 调用存储的 MySQL 过程（*find_mountains_by_loc_mysqli_oo.php*）
- en: You use a prepared statement that calls the `p_get_mountain_by_loc()` stored
    procedure. It has one question mark placeholder that represents the location of
    the mountains you want to search for. You bind the location, replacing the `?`
    with `Asia`. You send `s` as the first parameter to the `bind_param()` method
    to indicate that the location is a string ❶.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用一个准备好的语句来调用 `p_get_mountain_by_loc()` 存储过程。它有一个问号占位符，表示您要搜索的山脉位置。您将位置绑定，并用
    `Asia` 替换 `?`。您将 `s` 作为第一个参数发送给 `bind_param()` 方法，以指示位置是字符串类型 ❶。
- en: Once you execute the statement and loop through your results, the name and height
    of the Asian mountains in your table are displayed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您执行了语句并遍历结果，表中显示的将是亚洲山脉的名称和高度。
- en: The results are shown in [Figure 15-4](#figure15-4).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在 [图 15-4](#figure15-4) 中。
- en: '![](image_fi/503007c15/f15004.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c15/f15004.png)'
- en: 'Figure 15-4: The results of *find_mountains_by_loc_mysqli_oo.php*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-4：*find_mountains_by_loc_mysqli_oo.php* 的结果
- en: Procedural MySQLi
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过程化 MySQLi
- en: MySQLi is also available as a procedural extension. The procedural version of
    MySQLi looks similar to the object-oriented version, but instead of using `->`
    syntax to call methods, like `$conn->close()`, you’ll use functions that start
    with the text `mysqli_`, like `mysqli_connect()`, `mysqli_query()`, and `mysqli_close()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: MySQLi也可以作为过程式扩展使用。MySQLi的过程式版本与面向对象的版本相似，但不同之处在于，调用方法时不使用`->`语法（如`$conn->close()`），而是使用以`mysqli_`开头的函数，如`mysqli_connect()`、`mysqli_query()`和`mysqli_close()`。
- en: '*Procedural programming* treats data and procedures as two different entities.
    It uses a top-down approach where you write code giving instructions in order
    from beginning to end, and call procedures—or functions—that contain code to handle
    specific tasks.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*过程式编程*将数据和过程视为两个不同的实体。它采用自上而下的方法，按照从头到尾的顺序编写代码，并调用包含处理特定任务代码的过程或函数。'
- en: Selecting from a Table
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从表中查询数据
- en: In [Listing 15-7](#listing15-7), you write a PHP program to select from your
    `mountain` table using the procedural version of MySQLi.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单15-7](#listing15-7)中，你编写了一个PHP程序，使用MySQLi的过程式版本从`mountain`表中查询数据。
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 15-7: Using procedural MySQLi to display data from the `mountain` table
    (*display_mountains_mysqli_procedural.php*)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 清单15-7：使用过程式MySQLi显示`mountain`表中的数据（*display_mountains_mysqli_procedural.php*）
- en: You use MySQLi’s `mysqli_connect()` function to connect to the database with
    your database credentials. You define a variable called `$sql` that holds your
    SQL statement. Next, you use MySQLi’s `mysqli_query()` function to run the query
    using your connection, and save the results to the `$result` variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用MySQLi的`mysqli_connect()`函数，使用数据库凭证连接到数据库。你定义一个名为`$sql`的变量，保存你的SQL语句。接下来，你使用MySQLi的`mysqli_query()`函数，通过连接运行查询，并将结果保存到`$result`变量中。
- en: Then, you fetch the results using the `mysql_fetch_assoc()` function so you
    can reference the resulting `$row` variables using indexes matching the database
    column names, like `$row['mountain_name']`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`mysql_fetch_assoc()`函数获取结果，这样你就可以通过与数据库列名匹配的索引引用结果的`$row`变量，例如`$row['mountain_name']`。
- en: You print the results using the `echo` command and add a pipe (`|`) delimiter
    between the values. The HTML `<br />` tag will add a line break after each row
    in your browser.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`echo`命令打印结果，并在值之间添加管道符号（`|`）作为分隔符。HTML的`<br />`标签将在浏览器中每一行后添加换行符。
- en: Finally, you close the connection using the `mysqli_close()` function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`mysqli_close()`函数关闭连接。
- en: The results are displayed in [Figure 15-5](#figure15-5).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果显示在[图15-5](#figure15-5)中。
- en: '![](image_fi/503007c15/f15005.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c15/f15005.png)'
- en: 'Figure 15-5: The results of *display_mountains_mysqli_procedural.php*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-5：*display_mountains_mysqli_procedural.php*的结果
- en: Inserting a Row into a Table
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向表中插入一行
- en: Now, you’ll create a PHP program to insert a row into your `mountain` table
    using procedural MySQLi ([Listing 15-8](#listing15-8)).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将创建一个PHP程序，通过使用过程式MySQLi（[清单15-8](#listing15-8)）将一行插入到你的`mountain`表中。
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 15-8: Using procedural MySQLi to insert a row into the `mountain` table
    (*add_mountain_mysqli_procedural.php*)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 清单15-8：使用过程式MySQLi向`mountain`表插入一行（*add_mountain_mysqli_procedural.php*）
- en: 'The program inserts a new mountain called `Lhotse` into your `mountain` table.
    The program’s logic is similar to the programs you’ve seen before: you create
    a connection using your database credentials, use a prepared statement with `?`
    placeholders, bind values to replace the placeholders, execute the statement,
    and close the connection.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将一个名为`Lhotse`的新山插入到`mountain`表中。程序的逻辑与之前看到的程序相似：你使用数据库凭证创建连接，使用带有`?`占位符的预处理语句，将值绑定到占位符以替换，执行语句，并关闭连接。
- en: Calling a Stored Procedure
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调用存储过程
- en: The PHP code to execute a stored procedure using procedural MySQLi is shown
    in [Listing 15-9](#listing15-9).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用过程式MySQLi执行存储过程的PHP代码显示在[清单15-9](#listing15-9)中。
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 15-9: Using procedural MySQLi to call a stored MySQL procedure (*find_mountains_by_loc_mysqli_procedural.php*)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 清单15-9：使用过程式MySQLi调用存储的MySQL过程（*find_mountains_by_loc_mysqli_procedural.php*）
- en: You use a prepared statement to call the procedure and a question mark placeholder
    to represent the stored procedure’s parameter. You bind the `$location` PHP variable
    and specify `s` (string) as the data type. Then, you execute the statement and
    fetch and iterate through the resulting rows, printing the mountain name and height
    for each row in your `mountain` table that is in Asia. Finally, you close your
    connection.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '你使用预处理语句调用存储过程，并使用问号占位符表示存储过程的参数。你将`$location` PHP变量绑定，并指定`s`（字符串）作为数据类型。然后，你执行该语句并获取结果，遍历每一行，打印出`mountain`表中位于亚洲的每座山的名称和高度。最后，你关闭连接。  '
- en: The results are shown in [Figure 15-6](#figure15-6).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '结果显示在[图 15-6](#figure15-6)中。  '
- en: '![](image_fi/503007c15/f15006.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c15/f15006.png)  '
- en: 'Figure 15-6: The results of *find_mountains_by_loc_mysqli_procedural.php*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '图 15-6：*find_mountains_by_loc_mysqli_procedural.php*的结果  '
- en: Python
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Python  '
- en: Python is an open source programming language with concise and readable syntax.
    It’s worthwhile to learn Python because it can be used for many different types
    of programming—from data science and math to video games, web development, and
    even artificial intelligence!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'Python是一种开源编程语言，具有简洁且易读的语法。学习Python非常值得，因为它可以用于许多不同类型的编程——从数据科学和数学，到视频游戏、网页开发，甚至人工智能！  '
- en: 'Python’s syntax is unique in that it places a lot of importance on indentation.
    Other languages use curly brackets to group a block of code, as in this PHP code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Python的语法独特，特别注重缩进。其他语言使用大括号来分组代码块，正如下面的PHP代码所示：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Because your block of PHP code starts with `{` and ends with `}`, the indentation
    of the lines of code within the block doesn’t matter; it’s just for readability.
    The following code runs just as well in PHP:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '因为你的PHP代码块是以`{`开始并以`}`结束，所以代码块内的缩进不影响运行，它仅仅是为了可读性。以下代码在PHP中同样能够正常运行：  '
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Python, on the other hand, doesn’t use curly brackets to identify blocks of
    code. It relies on indentation:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '另一方面，Python不使用大括号来标识代码块。它依赖于缩进：  '
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the temperature is over 70 degrees, this example will print `It's hot in
    here` and will turn down the temperature 2 degrees.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '如果温度超过70度，示例将打印`It''s hot in here`，并将温度调低2度。  '
- en: 'But if you change the indentation in Python, the program does something different:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '但是，如果你更改了Python中的缩进，程序将会做出不同的响应：  '
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The message `It's hot in here` will still print only when the temperature is
    more than 70, but now the temperature will be turned down 2 degrees regardless.
    That’s probably not what you intended.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '只有当温度超过70度时，消息`It''s hot in here`才会打印，但现在不管怎样，温度都会调低2度。这可能不是你所期望的结果。  '
- en: Selecting from a Table
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '从表中选择数据  '
- en: In [Listing 15-10](#listing15-10), you write a Python program called *display_mountains.py*
    to select from the `mountain` table and display the results.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '在[列表15-10](#listing15-10)中，你编写了一个名为*display_mountains.py*的Python程序，从`mountain`表中选择数据并显示结果。  '
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 15-10: Using Python to display data from the `mountain` table (*display_mountains.py*)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '列表15-10：使用Python显示`mountain`表中的数据（*display_mountains.py*）  '
- en: In the first line of your code, you import MySQL Connector/Python with `mysql.connector`.
    Then you create a connection to your MySQL database ❶ by calling the `connect()`
    method with your database credentials. You save this connection as a Python variable
    called `conn`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '在代码的第一行，你通过`mysql.connector`导入了MySQL Connector/Python。然后，你通过调用`connect()`方法，并提供数据库凭证来创建一个与MySQL数据库的连接
    ❶。你将这个连接保存为一个名为`conn`的Python变量。  '
- en: You use the connection to create a cursor that you save as a variable called
    `cursor` ❷. Next, you use the `cursor` `execute()` method to run a SQL query that
    selects from the `mountain` table. A `for` loop is one type of loop that allows
    you to loop, or iterate, through values. Here, you use a `for` loop ❸ to iterate
    through the rows in the cursor, printing the mountain name, location, and height
    of each mountain as you go. The looping will continue until there are no more
    rows to loop through in `cursor`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '你使用连接来创建一个游标，并将其保存为名为`cursor`的变量 ❷。接下来，你使用`cursor`的`execute()`方法来运行一个SQL查询，从`mountain`表中选择数据。`for`循环是一种允许你循环或遍历值的循环类型。在这里，你使用`for`循环
    ❸遍历游标中的行，并打印每座山的名称、位置和高度。循环将持续进行，直到游标中没有更多的行可供遍历。  '
- en: Lastly, you close the connection with `conn.close()`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，你使用`conn.close()`关闭连接。  '
- en: 'You can navigate to your operating system’s command prompt and run the Python
    program to see the results:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以进入操作系统的命令提示符并运行Python程序，查看结果：  '
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Your Python program selected all the rows from your `mountain` table and displayed
    the data from the table.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Python 程序从 `mountain` 表中选择了所有行并显示了表中的数据。
- en: While your database credentials are included in your Python program in this
    example, you’d typically put sensitive information in a Python file called *config.py*
    to separate them from the rest of your code.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这个示例中，你的数据库凭据包含在 Python 程序中，但通常你会将敏感信息放在名为 *config.py* 的 Python 文件中，将它们与其余代码分开。
- en: Inserting a Row into a Table
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向表中插入一行数据
- en: Now, you’ll write a Python program called *add_mountain.py* to insert a row
    into the `mountain` table ([Listing 15-11](#listing15-11)).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将编写一个名为 *add_mountain.py* 的 Python 程序，将一行数据插入到 `mountain` 表中（[列表 15-11](#listing15-11)）。
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 15-11: Using Python to insert a row into the `mountain` table (*add_mountain.py*)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-11：使用 Python 向 `mountain` 表插入一行数据 (*add_mountain.py*)
- en: Using your connection, you create a `cursor` that allows you to use prepared
    statements.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的连接，你创建了一个 `cursor`，使你能够使用预处理语句。
- en: You create a Python variable called `sql` that contains the `insert` statement
    ❶. Python can use either `?` or `%s` for placeholders in prepared statements.
    (The letter *s* has nothing to do with the data type or values here; that is,
    the placeholder `%s` isn’t just for strings.)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个名为 `sql` 的 Python 变量，它包含了 `insert` 语句❶。Python 可以在预处理语句中使用 `?` 或 `%s` 作为占位符。（字母
    *s* 与数据类型或值无关；也就是说，占位符 `%s` 不仅仅用于字符串。）
- en: You create a variable called `val` ❷ that contains the values you want to insert
    into the table. Then you call the `cursor` `execute()` method, passing in your
    `sql` and `val` variables. The `execute()` method binds the variables, replacing
    the `?` placeholders with the values, and executes the SQL statement.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个名为 `val` 的变量❷，它包含了你想插入到表中的值。然后，你调用 `cursor` 的 `execute()` 方法，将 `sql` 和
    `val` 变量传入。`execute()` 方法绑定变量，将 `?` 占位符替换为对应的值，并执行 SQL 语句。
- en: You need to commit the statement to the database by calling the `connection`
    `commit()` method ❸. By default, MySQL Connector/Python doesn’t automatically
    commit, so if you forget to call `commit()`, the changes won’t be applied to your
    database.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要通过调用 `connection` 的 `commit()` 方法❸来提交语句到数据库。默认情况下，MySQL Connector/Python
    不会自动提交，因此如果你忘记调用 `commit()`，更改将不会应用到数据库中。
- en: Calling a Stored Procedure
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用存储过程
- en: '[Listing 15-12](#listing15-12) shows a Python program called *find_mountains_by_loc.py*
    that calls the `p_get_mountain_by_loc()` stored procedure and sends a parameter
    value of `Asia` to display only the mountains in the table that are in Asia.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 15-12](#listing15-12) 显示了一个名为 *find_mountains_by_loc.py* 的 Python 程序，该程序调用
    `p_get_mountain_by_loc()` 存储过程，并传入 `Asia` 参数值，仅显示表中位于亚洲的山脉。'
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 15-12: Using Python to call a stored procedure (*find_mountains_by_loc.py*)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-12：使用 Python 调用存储过程 (*find_mountains_by_loc.py*)
- en: You call the `cursor` `callproc()` method to call your stored procedure, sending
    it a value of `Asia` ❶. Then, you call the `cursor` `stored_results()` method
    to get the results of the stored procedure, and you iterate through those results
    using a `for` loop to get the record for each mountain ❷.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你调用 `cursor` 的 `callproc()` 方法来调用存储过程，并传入 `Asia` 的值❶。然后，你调用 `cursor` 的 `stored_results()`
    方法来获取存储过程的结果，并使用 `for` 循环遍历这些结果，以获取每个山脉的记录❷。
- en: Python uses zero-based indexes, so `record[0]` represents the first column that
    was returned from the stored procedure for the row—in this example, the mountain
    name. To print the second column, the mountain’s height, you use `record[1]`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用从零开始的索引，因此 `record[0]` 表示从存储过程返回的行中的第一列——在这个例子中是山脉名称。要打印第二列，也就是山脉的高度，你可以使用
    `record[1]`。
- en: 'Run the Python program from the command line to see the results:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行 Python 程序查看结果：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Java
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java
- en: Java is an open source, object-oriented programming language that is commonly
    used for everything from mobile app development to desktop applications to web
    apps.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Java 是一种开源、面向对象的编程语言，广泛用于从移动应用开发到桌面应用程序，再到 Web 应用程序的各种场景。
- en: There are lots of build tools and integrated development environments (IDEs)
    for Java, but for these examples, you’ll work from the command line. Let’s go
    over the basics before we start looking at examples.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Java 有许多构建工具和集成开发环境（IDEs），但在这些示例中，你将从命令行进行操作。在开始查看示例之前，让我们先了解一些基础知识。
- en: You’ll create a Java program that ends in the file extension *.java*. To run
    a Java program, you first compile it to a *.class* file using the `javac` command.
    This file is in bytecode format. *Bytecode* is a machine-level format that runs
    in the Java Virtual Machine (JVM). Once a program is compiled, you run it using
    the `java` command.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个以*.java*为文件扩展名的Java程序。要运行Java程序，你首先需要使用`javac`命令将它编译成*.class*文件。这个文件是字节码格式的。*字节码*是一个机器级格式，它在Java虚拟机（JVM）中运行。一旦程序被编译，你可以使用`java`命令来运行它。
- en: 'Here you create a Java program called *MountainList.java* and compile it to
    bytecode:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你创建一个名为*MountainList.java*的Java程序并将其编译为字节码：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'That command creates a bytecode file called *MountainList.class*. To run it,
    you use this command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会创建一个名为*MountainList.class*的字节码文件。要运行它，你可以使用以下命令：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Selecting from a Table
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从表中选择数据
- en: As with the other programming languages, you’ll start by writing a Java program
    called *MountainList.java* that selects a list of mountains from your MySQL `mountain`
    table ([Listing 15-13](#listing15-13)).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他编程语言一样，你将开始编写一个名为*MountainList.java*的Java程序，从MySQL的`mountain`表中选择一组山脉（[列表
    15-13](#listing15-13)）。
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Listing 15-13: Using Java to display data from the `mountain` table (*MountainList.java*)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-13：使用Java从`mountain`表中显示数据（*MountainList.java*）
- en: First, you import the `java.sql` package ❶ to give you access to Java objects
    for using a MySQL database, like `Connection`, `Statement`, and `ResultSet`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你导入`java.sql`包 ❶，以便访问用于操作MySQL数据库的Java对象，如`Connection`、`Statement`和`ResultSet`。
- en: You create a Java class called `MountainList` that has a `main()` method, which
    is automatically executed when you run the program ❷. In the `main()` method,
    you create a connection to your MySQL database by providing your database credentials.
    You save this connection as a Java variable called `conn` ❺.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建一个名为`MountainList`的Java类，它有一个`main()`方法，当你运行程序时该方法会自动执行 ❷。在`main()`方法中，你通过提供数据库凭证创建到MySQL数据库的连接。你将这个连接保存为一个名为`conn`的Java变量
    ❺。
- en: You load the Java class for MySQL Connector/J, `com.mysql.cj.jdbc.Driver`, using
    the `Class.forName` command ❹.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`Class.forName`命令 ❹加载MySQL Connector/J的Java类`com.mysql.cj.jdbc.Driver`。
- en: Using the `Connection` `createStatement()` method, you create a `Statement`
    ❻ to execute SQL against the database. The `Statement` returns a `ResultSet` ❼,
    which you loop through to display the name, location, and height of each mountain
    in the database table. You close the connection when you’re done.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Connection`的`createStatement()`方法，你创建一个`Statement` ❻来执行SQL语句。`Statement`返回一个`ResultSet`
    ❼，你遍历它以显示数据库表中每个山脉的名称、位置和高度。完成后，你关闭连接。
- en: Notice that many of these Java commands are wrapped in a `try` block ❸. This
    way, if there are problems running these commands, Java will throw an *exception*
    (or error) that you can catch in your corresponding `catch` statement. In this
    case, when an exception is thrown, control is passed to the `catch` block and
    you display the exception to the user.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，许多Java命令都被包裹在`try`块中 ❸。这样，如果执行这些命令时出现问题，Java将抛出一个*异常*（或错误），你可以在相应的`catch`语句中捕获该异常。在这种情况下，当抛出异常时，控制权会转移到`catch`块，你可以将异常信息显示给用户。
- en: In Python and PHP, wrapping your code in a `try...catch` block is best practice,
    but optional. (The syntax in Python is `try/except`.) But in Java, you *must*
    use a `try...catch` block. If you try to compile the Java code without it, you’ll
    get an error saying that exceptions `must be caught or declared to be thrown`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python和PHP中，将代码包裹在`try...catch`块中是最佳实践，但它是可选的。（Python中的语法是`try/except`。）但在Java中，你*必须*使用`try...catch`块。如果你尝试在没有它的情况下编译Java代码，你会收到一个错误，提示异常`必须被捕获或声明抛出`。
- en: 'Compile and run your Java program from the command line, and see the results:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行编译并运行你的Java程序，查看结果：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Inserting a Row into a Table
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向表中插入一行数据
- en: In [Listing 15-14](#listing15-14), you’ll write a Java program to insert a row
    into the `mountain` table.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表 15-14](#listing15-14)中，你将编写一个Java程序，将一行数据插入到`mountain`表中。
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Listing 15-14: Using Java to insert a row into the `mountain` table (*MountainNew.java*)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-14：使用Java向`mountain`表中插入一行数据（*MountainNew.java*）
- en: Your SQL statement uses question marks as placeholders. You use a `PreparedStatement`
    this time ❶ instead of a `Statement` so that you can send parameter values. You
    bind the parameter values using the `setString()` and `setInt()` methods. Then
    you call the `executeUpdate()` method ❷, which is used to insert, update, or delete
    rows in your MySQL table.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你的SQL语句使用问号作为占位符。这次你使用`PreparedStatement`❶而不是`Statement`，这样可以发送参数值。你通过`setString()`和`setInt()`方法绑定参数值。然后，你调用`executeUpdate()`方法❷，该方法用于插入、更新或删除MySQL表中的行。
- en: Calling a Stored Procedure
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用存储过程
- en: '[Listing 15-15](#listing15-15) shows a Java program to execute a MySQL stored
    procedure.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 15-15](#listing15-15)展示了一个执行MySQL存储过程的Java程序。'
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Listing 15-15: Using Java to call a MySQL stored procedure (*MountainAsia.java*)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 15-15: 使用Java调用MySQL存储过程（*MountainAsia.java*）'
- en: This time, you use a `CallableStatement` ❶ instead of `Statement` to call stored
    procedures. You set the first (and only) parameter to `Asia` and execute your
    query using `CallableStatement`’s `executeQuery()` method. Then you iterate through
    the results, displaying each mountain name and height.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你使用`CallableStatement`❶而不是`Statement`来调用存储过程。你将第一个（也是唯一的）参数设置为`Asia`，并通过`CallableStatement`的`executeQuery()`方法执行查询。然后，你遍历结果，显示每个山脉的名称和高度。
- en: 'The results are:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you looked at calling MySQL from programming languages. You
    learned that SQL statements are often embedded and run from within programs. You
    saw that the same database table that can be accessed from MySQL Workbench can
    also be accessed using PHP, Python, Java, or any number of other tools or languages.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何从编程语言调用MySQL。你了解到SQL语句通常会嵌入到程序中并执行。你还看到了，可以通过MySQL Workbench访问的同一数据库表，也可以使用PHP、Python、Java或其他各种工具或语言进行访问。
- en: 'In the next chapter, you’ll work on your first project using MySQL: creating
    a functioning weather database. You’ll build scripts to accept a weather feed
    hourly and load it into your MySQL database.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将开始使用MySQL进行第一个项目：创建一个功能完整的天气数据库。你将编写脚本，每小时接收天气数据流并将其加载到MySQL数据库中。
