- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calling MySQL from Programming Languages
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, you’ll write computer programs that use MySQL, focusing on
    three open source programming languages: PHP, Python, and Java. You’ll write programs
    in each language to select from a table, insert a row into a table, and call a
    stored procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the programming language, you follow the same general steps to
    call MySQL. First, you establish a connection to the MySQL database using your
    MySQL database credentials, including the hostname of the MySQL server, the database,
    user ID, and password. Then, you use that connection to run your SQL statements
    against the database.
  prefs: []
  type: TYPE_NORMAL
- en: You embed SQL statements in your program and when the program is run, the SQL
    is executed against the database. If you need to send parameter values to a SQL
    statement, you use a *prepared statement*, a reusable SQL statement that uses
    placeholders to temporarily represent the parameters. Then you bind parameter
    values to the prepared statement, replacing the placeholders with actual values.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re retrieving data from the database, you iterate through the results
    and perform some action, like displaying the results. When you’re done, you close
    the connection to MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some examples using PHP, Python, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PHP (a recursive acronym for PHP: Hypertext Preprocessor) is an open source
    programming language used mostly for web development. Millions of websites have
    been built with PHP.'
  prefs: []
  type: TYPE_NORMAL
- en: PHP is commonly used with MySQL. Both are part of the *LAMP stack*, a popular
    software development architecture consisting of Linux, Apache, MySQL, and PHP.
    (The *P* can also refer to the Python programming language and, less frequently,
    to Perl.) Many sites use Linux as the operating system; Apache as the web server
    to receive requests and send back responses; MySQL as the relational database
    management system; and PHP as the programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use MySQL from within PHP, you need a PHP *extension*, which enables you
    to use functionality in your PHP program that isn’t included in the core language.
    Since not all PHP applications need to access MySQL, this functionality is provided
    as an extension you can load. There are two choices for extensions: *PHP Data
    Objects (PDO)* and *MySQLi*. You’ll specify which you want to load by listing
    them in your *php.ini* configuration file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The PDO and MySQLi extensions provide different ways to create database connections
    and execute SQL statements from within your PHP programs. These are object-oriented
    extensions. (MySQLi is also available as a procedural extension; you’ll learn
    what this means in the section “Procedural MySQLi” later in the chapter.) *Object-oriented
    programming (OOP)* relies on objects that contain data and can execute code in
    the form of methods. A *method* is the equivalent of a function in procedural
    programming; it is a set of instructions you can call to take some action, like
    running a query or executing a stored procedure.
  prefs: []
  type: TYPE_NORMAL
- en: To use PHP’s object-oriented MySQL extensions, you’ll create a new `PDO` or
    `MySQLi` object in your PHP code and use the `->` symbol to call the object’s
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at each of these extensions, starting with PDO.
  prefs: []
  type: TYPE_NORMAL
- en: PDO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The PDO extension can be used with many relational database management systems,
    including MySQL, Oracle, Microsoft SQL Server, and PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Listing 15-1](#listing15-1), you write a PHP program called *display_mountains_pdo.php*
    that uses PDO to select from a MySQL table called `mountain` in the `topography`
    database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-1: Using PDO to display data from the `mountain` table (*display_mountains_pdo.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: The program begins with the opening tag `<?php` and ends with the closing tag
    `?>`. The tags tell the web server to interpret the code between them as PHP.
  prefs: []
  type: TYPE_NORMAL
- en: To use MySQL from within PHP, you need to create a connection to your MySQL
    database by creating a new `PDO` object ❶ and passing in your database credentials.
    In this case, your hostname is `localhost`, your database name is `topography`,
    the database user ID is `top_app`, and the password for your MySQL database is
    `pQ3fgR5u5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also specify the port by adding it to the end of the line with your
    host and database name, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t provide a port, it defaults to `3306`, which is the port normally
    used to connect to a MySQL server. If your MySQL server instance was configured
    to run on another port, ask your database administrator to check the configuration
    files for the port number.
  prefs: []
  type: TYPE_NORMAL
- en: You save the connection as a variable named `$conn`. PHP variables are preceded
    by a dollar sign. This variable now represents the connection between your PHP
    program and your MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you create a PHP variable called `$sql` that holds your SQL statement
    ❷.
  prefs: []
  type: TYPE_NORMAL
- en: You call PDO’s `query()` method and send it the SQL statement you want to run.
    In object-oriented programming, the `->` symbol is often used to call an object’s
    instance methods, like `$conn->query()`. You save the statement and its results
    as an array variable called `$stmt` ❸.
  prefs: []
  type: TYPE_NORMAL
- en: An *array* is a type of variable you can use to store a group of values. It
    uses an *index* to identify one value in the group. You use PDO’s `fetch()` method
    to fetch each row from `$stmt` using a *mode*, which controls how the data gets
    returned to you. Here, the mode `PDO::FETCH_ASSOC` ❹ returns an array that is
    indexed by the database table’s column names, like `$row['mountain_name']`, `$row['location']`,
    and `$row['height']`. If you had used the mode `PDO::FETCH_NUM`, it would have
    returned an array that is indexed by the column number starting at zero, like
    `$row[0]`, `$row[1]`, and `$row[2]`. Other modes can be found in PHP’s online
    manual at [https://php.net](https://php.net).
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `while` loop will loop through each row that was fetched. You use
    the `echo()` command ❺ to display each column separated by the pipe (`|`) character.
    The `<br />` HTML tag at the end of your `echo()` statement will create a line
    break after each line in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you close the connection by setting it to `null` ❻.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [http://localhost/display_mountains_pdo.php](http://localhost/display_mountains_pdo.php%20)
    to see the results of your PHP program, shown in [Figure 15-1](#figure15-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c15/f15001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-1: The results of *display_mountains_pdo.php*'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve successfully accessed MySQL via PDO to select data from the `mountain`
    table and return each column separated by the pipe character.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a Row into a Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll create a new PHP program called *add_mountain_pdo.php* that inserts
    a new row in the `mountain` table using PDO.
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 15-2](#listing15-2), you’ll use a prepared statement, which, as
    mentioned earlier, uses placeholders to represent values in a SQL statement. Then,
    you’ll replace those placeholders with actual values from PHP variables. Using
    prepared statements is a good security practice because it helps protect against
    SQL injection attacks, which are a common way for hackers to run malicious SQL
    code against your database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-2: Using PDO to insert a row into the `mountain` table (*add_mountain_pdo.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: As in [Listing 15-1](#listing15-1), you first create a connection to your MySQL
    database ❶. You have three PHP variables called `$new_mountain`, `$new_location`,
    and `$new_height` that hold the name, location, and height of the mountain, respectively,
    that you want to insert into your `mountain` table.
  prefs: []
  type: TYPE_NORMAL
- en: You use the connection’s `prepare()` method ❷ to create a prepared statement
    that uses named placeholders for your values. You write the `insert` SQL statement,
    but instead of including the actual values you want to insert, you use placeholders
    ❸. Your named placeholders are `:mountain`, `:location`, and `:height`. Named
    placeholders are preceded by a colon.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you replace the placeholders with actual values using the `bindParam()`
    method ❹, which links, or binds, a placeholder with a variable. You bind the first
    placeholder to the `$new_mountain` variable, which replaces `:mountain` with the
    value `K2`. You bind the second placeholder to the `$new_location` variable, replacing
    `:location` with the value `Asia`. You bind the third placeholder to the `$new_height`
    variable, replacing `:height` with the value `28252`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you specify the type of data the variables represent. The mountain and
    location are strings, so you use `PDO::PARAM_STR`. The height is an integer, so
    you use `PDO::PARAM_INT`.
  prefs: []
  type: TYPE_NORMAL
- en: When you call the statement’s `execute()` method ❺, your statement is executed
    and your new row gets inserted into the `mountain` table.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a Stored Procedure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, you’ll write a PHP program named *find_mountains_by_loc_pdo.php* that
    calls a MySQL stored procedure, `p_get_mountain_by_loc()`.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll provide the stored procedure with a parameter for the location you want
    to search for; in this example, you’ll search for mountains in `Asia`. Your PHP
    program will call the stored procedure and return the number of mountains in the
    `mountain` table that are in Asia (see [Listing 15-3](#listing15-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-3: Using PDO to call a stored MySQL procedure (*find_mountains_by_loc_pdo.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: You use the `call` statement ❶ in your prepared statement to call the stored
    procedure. Then you create a named placeholder, `:location` ❷, and use `bindParam`
    ❸ to replace `:location` with the value in the `$location` variable, which evaluates
    to `Asia`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you execute the stored procedure ❹. Then you use a `while` statement ❺
    to select the rows returned from the stored procedure. You display them to the
    user using the `echo` command. Finally, you end the connection. The results are
    shown in [Figure 15-2](#figure15-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c15/f15002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-2: The results of *find_mountains_by_loc_pdo.php*'
  prefs: []
  type: TYPE_NORMAL
- en: You can add more functionality to these programs. For example, you might choose
    to allow the user to select the location they want to see, rather than hardcoding
    `Asia` in the PHP program. You could even check for errors connecting to the database
    or calling your stored procedure, and display detailed error messages to the user
    when there is a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Object-Oriented MySQLi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MySQL Improved (MySQLi) extension is the upgraded version of an old legacy
    PHP extension that was called MySQL. In this section, you’ll learn how to use
    the object-oriented version of MySQLi.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Listing 15-4](#listing15-4), you write a PHP program using the object-oriented
    MySQLi to select from your `mountain` table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-4: Using object-oriented MySQLi to display data from the `mountain`
    table (*display_mountains_mysqli_oo.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: You establish a connection to MySQL by creating a `mysqli` object ❶ and passing
    in the host, user ID, password, and database. You run your query using the connection’s
    `query()` method ❷ and save the results to a PHP variable called `$result`.
  prefs: []
  type: TYPE_NORMAL
- en: You iterate through the resulting rows, calling the `$result` `fetch_assoc()`
    method ❸ so that you can reference the columns as indexes, like `$row['mountain_name']`.
    Then you print the values of those columns and close your connection with the
    `close()` method ❹.
  prefs: []
  type: TYPE_NORMAL
- en: The result is displayed in [Figure 15-3](#figure15-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c15/f15003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-3: The results of *display_mountains_mysqli_oo.php*'
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a Row into a Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, you’ll create a PHP program to insert a row into the `mountain` table using
    object-oriented MySQLi (see [Listing 15-5](#listing15-5)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-5: Using object-oriented MySQLi to insert a row into the `mountain`
    table (*add_mountain_mysqli_oo.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve established your connection, you use a prepared statement with question
    marks as your placeholders ❶. Then, you replace your question mark placeholders
    with values using the `bind_param()` method ❷.
  prefs: []
  type: TYPE_NORMAL
- en: With MySQLi, you can provide the data types of the bind variables as a string.
    The first parameter you send to `bind_param()` is the value `ssi`, which indicates
    that you want to replace the first and second placeholders with a string (`s`)
    value, and the third placeholder with an integer (`i`) value. You can also choose
    `d` if the bind variable has a data type of `double` (a double-precision floating-point
    number) or `b` if the bind variable has a data type of `blob` (a binary large
    object).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you execute the prepared statement with `execute()` and close your
    connection. When you run the program, it inserts a new mountain—`Makalu`—into
    your `mountain` table.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a Stored Procedure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 15-6](#listing15-6) shows a PHP program that uses object-oriented
    MySQLi to execute a stored procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-6: Using object-oriented MySQLi to call a stored MySQL procedure
    (*find_mountains_by_loc_mysqli_oo.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: You use a prepared statement that calls the `p_get_mountain_by_loc()` stored
    procedure. It has one question mark placeholder that represents the location of
    the mountains you want to search for. You bind the location, replacing the `?`
    with `Asia`. You send `s` as the first parameter to the `bind_param()` method
    to indicate that the location is a string ❶.
  prefs: []
  type: TYPE_NORMAL
- en: Once you execute the statement and loop through your results, the name and height
    of the Asian mountains in your table are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The results are shown in [Figure 15-4](#figure15-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c15/f15004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-4: The results of *find_mountains_by_loc_mysqli_oo.php*'
  prefs: []
  type: TYPE_NORMAL
- en: Procedural MySQLi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MySQLi is also available as a procedural extension. The procedural version of
    MySQLi looks similar to the object-oriented version, but instead of using `->`
    syntax to call methods, like `$conn->close()`, you’ll use functions that start
    with the text `mysqli_`, like `mysqli_connect()`, `mysqli_query()`, and `mysqli_close()`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Procedural programming* treats data and procedures as two different entities.
    It uses a top-down approach where you write code giving instructions in order
    from beginning to end, and call procedures—or functions—that contain code to handle
    specific tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Listing 15-7](#listing15-7), you write a PHP program to select from your
    `mountain` table using the procedural version of MySQLi.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-7: Using procedural MySQLi to display data from the `mountain` table
    (*display_mountains_mysqli_procedural.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: You use MySQLi’s `mysqli_connect()` function to connect to the database with
    your database credentials. You define a variable called `$sql` that holds your
    SQL statement. Next, you use MySQLi’s `mysqli_query()` function to run the query
    using your connection, and save the results to the `$result` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you fetch the results using the `mysql_fetch_assoc()` function so you
    can reference the resulting `$row` variables using indexes matching the database
    column names, like `$row['mountain_name']`.
  prefs: []
  type: TYPE_NORMAL
- en: You print the results using the `echo` command and add a pipe (`|`) delimiter
    between the values. The HTML `<br />` tag will add a line break after each row
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you close the connection using the `mysqli_close()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The results are displayed in [Figure 15-5](#figure15-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c15/f15005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-5: The results of *display_mountains_mysqli_procedural.php*'
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a Row into a Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, you’ll create a PHP program to insert a row into your `mountain` table
    using procedural MySQLi ([Listing 15-8](#listing15-8)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-8: Using procedural MySQLi to insert a row into the `mountain` table
    (*add_mountain_mysqli_procedural.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The program inserts a new mountain called `Lhotse` into your `mountain` table.
    The program’s logic is similar to the programs you’ve seen before: you create
    a connection using your database credentials, use a prepared statement with `?`
    placeholders, bind values to replace the placeholders, execute the statement,
    and close the connection.'
  prefs: []
  type: TYPE_NORMAL
- en: Calling a Stored Procedure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The PHP code to execute a stored procedure using procedural MySQLi is shown
    in [Listing 15-9](#listing15-9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-9: Using procedural MySQLi to call a stored MySQL procedure (*find_mountains_by_loc_mysqli_procedural.php*)'
  prefs: []
  type: TYPE_NORMAL
- en: You use a prepared statement to call the procedure and a question mark placeholder
    to represent the stored procedure’s parameter. You bind the `$location` PHP variable
    and specify `s` (string) as the data type. Then, you execute the statement and
    fetch and iterate through the resulting rows, printing the mountain name and height
    for each row in your `mountain` table that is in Asia. Finally, you close your
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: The results are shown in [Figure 15-6](#figure15-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c15/f15006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-6: The results of *find_mountains_by_loc_mysqli_procedural.php*'
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is an open source programming language with concise and readable syntax.
    It’s worthwhile to learn Python because it can be used for many different types
    of programming—from data science and math to video games, web development, and
    even artificial intelligence!
  prefs: []
  type: TYPE_NORMAL
- en: 'Python’s syntax is unique in that it places a lot of importance on indentation.
    Other languages use curly brackets to group a block of code, as in this PHP code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Because your block of PHP code starts with `{` and ends with `}`, the indentation
    of the lines of code within the block doesn’t matter; it’s just for readability.
    The following code runs just as well in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Python, on the other hand, doesn’t use curly brackets to identify blocks of
    code. It relies on indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If the temperature is over 70 degrees, this example will print `It's hot in
    here` and will turn down the temperature 2 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you change the indentation in Python, the program does something different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The message `It's hot in here` will still print only when the temperature is
    more than 70, but now the temperature will be turned down 2 degrees regardless.
    That’s probably not what you intended.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a Table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Listing 15-10](#listing15-10), you write a Python program called *display_mountains.py*
    to select from the `mountain` table and display the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-10: Using Python to display data from the `mountain` table (*display_mountains.py*)'
  prefs: []
  type: TYPE_NORMAL
- en: In the first line of your code, you import MySQL Connector/Python with `mysql.connector`.
    Then you create a connection to your MySQL database ❶ by calling the `connect()`
    method with your database credentials. You save this connection as a Python variable
    called `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: You use the connection to create a cursor that you save as a variable called
    `cursor` ❷. Next, you use the `cursor` `execute()` method to run a SQL query that
    selects from the `mountain` table. A `for` loop is one type of loop that allows
    you to loop, or iterate, through values. Here, you use a `for` loop ❸ to iterate
    through the rows in the cursor, printing the mountain name, location, and height
    of each mountain as you go. The looping will continue until there are no more
    rows to loop through in `cursor`.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you close the connection with `conn.close()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate to your operating system’s command prompt and run the Python
    program to see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Your Python program selected all the rows from your `mountain` table and displayed
    the data from the table.
  prefs: []
  type: TYPE_NORMAL
- en: While your database credentials are included in your Python program in this
    example, you’d typically put sensitive information in a Python file called *config.py*
    to separate them from the rest of your code.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a Row into a Table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, you’ll write a Python program called *add_mountain.py* to insert a row
    into the `mountain` table ([Listing 15-11](#listing15-11)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-11: Using Python to insert a row into the `mountain` table (*add_mountain.py*)'
  prefs: []
  type: TYPE_NORMAL
- en: Using your connection, you create a `cursor` that allows you to use prepared
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: You create a Python variable called `sql` that contains the `insert` statement
    ❶. Python can use either `?` or `%s` for placeholders in prepared statements.
    (The letter *s* has nothing to do with the data type or values here; that is,
    the placeholder `%s` isn’t just for strings.)
  prefs: []
  type: TYPE_NORMAL
- en: You create a variable called `val` ❷ that contains the values you want to insert
    into the table. Then you call the `cursor` `execute()` method, passing in your
    `sql` and `val` variables. The `execute()` method binds the variables, replacing
    the `?` placeholders with the values, and executes the SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: You need to commit the statement to the database by calling the `connection`
    `commit()` method ❸. By default, MySQL Connector/Python doesn’t automatically
    commit, so if you forget to call `commit()`, the changes won’t be applied to your
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a Stored Procedure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Listing 15-12](#listing15-12) shows a Python program called *find_mountains_by_loc.py*
    that calls the `p_get_mountain_by_loc()` stored procedure and sends a parameter
    value of `Asia` to display only the mountains in the table that are in Asia.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-12: Using Python to call a stored procedure (*find_mountains_by_loc.py*)'
  prefs: []
  type: TYPE_NORMAL
- en: You call the `cursor` `callproc()` method to call your stored procedure, sending
    it a value of `Asia` ❶. Then, you call the `cursor` `stored_results()` method
    to get the results of the stored procedure, and you iterate through those results
    using a `for` loop to get the record for each mountain ❷.
  prefs: []
  type: TYPE_NORMAL
- en: Python uses zero-based indexes, so `record[0]` represents the first column that
    was returned from the stored procedure for the row—in this example, the mountain
    name. To print the second column, the mountain’s height, you use `record[1]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the Python program from the command line to see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java is an open source, object-oriented programming language that is commonly
    used for everything from mobile app development to desktop applications to web
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of build tools and integrated development environments (IDEs)
    for Java, but for these examples, you’ll work from the command line. Let’s go
    over the basics before we start looking at examples.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll create a Java program that ends in the file extension *.java*. To run
    a Java program, you first compile it to a *.class* file using the `javac` command.
    This file is in bytecode format. *Bytecode* is a machine-level format that runs
    in the Java Virtual Machine (JVM). Once a program is compiled, you run it using
    the `java` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you create a Java program called *MountainList.java* and compile it to
    bytecode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'That command creates a bytecode file called *MountainList.class*. To run it,
    you use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Selecting from a Table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with the other programming languages, you’ll start by writing a Java program
    called *MountainList.java* that selects a list of mountains from your MySQL `mountain`
    table ([Listing 15-13](#listing15-13)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-13: Using Java to display data from the `mountain` table (*MountainList.java*)'
  prefs: []
  type: TYPE_NORMAL
- en: First, you import the `java.sql` package ❶ to give you access to Java objects
    for using a MySQL database, like `Connection`, `Statement`, and `ResultSet`.
  prefs: []
  type: TYPE_NORMAL
- en: You create a Java class called `MountainList` that has a `main()` method, which
    is automatically executed when you run the program ❷. In the `main()` method,
    you create a connection to your MySQL database by providing your database credentials.
    You save this connection as a Java variable called `conn` ❺.
  prefs: []
  type: TYPE_NORMAL
- en: You load the Java class for MySQL Connector/J, `com.mysql.cj.jdbc.Driver`, using
    the `Class.forName` command ❹.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `Connection` `createStatement()` method, you create a `Statement`
    ❻ to execute SQL against the database. The `Statement` returns a `ResultSet` ❼,
    which you loop through to display the name, location, and height of each mountain
    in the database table. You close the connection when you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that many of these Java commands are wrapped in a `try` block ❸. This
    way, if there are problems running these commands, Java will throw an *exception*
    (or error) that you can catch in your corresponding `catch` statement. In this
    case, when an exception is thrown, control is passed to the `catch` block and
    you display the exception to the user.
  prefs: []
  type: TYPE_NORMAL
- en: In Python and PHP, wrapping your code in a `try...catch` block is best practice,
    but optional. (The syntax in Python is `try/except`.) But in Java, you *must*
    use a `try...catch` block. If you try to compile the Java code without it, you’ll
    get an error saying that exceptions `must be caught or declared to be thrown`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compile and run your Java program from the command line, and see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Inserting a Row into a Table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Listing 15-14](#listing15-14), you’ll write a Java program to insert a row
    into the `mountain` table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-14: Using Java to insert a row into the `mountain` table (*MountainNew.java*)'
  prefs: []
  type: TYPE_NORMAL
- en: Your SQL statement uses question marks as placeholders. You use a `PreparedStatement`
    this time ❶ instead of a `Statement` so that you can send parameter values. You
    bind the parameter values using the `setString()` and `setInt()` methods. Then
    you call the `executeUpdate()` method ❷, which is used to insert, update, or delete
    rows in your MySQL table.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a Stored Procedure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Listing 15-15](#listing15-15) shows a Java program to execute a MySQL stored
    procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-15: Using Java to call a MySQL stored procedure (*MountainAsia.java*)'
  prefs: []
  type: TYPE_NORMAL
- en: This time, you use a `CallableStatement` ❶ instead of `Statement` to call stored
    procedures. You set the first (and only) parameter to `Asia` and execute your
    query using `CallableStatement`’s `executeQuery()` method. Then you iterate through
    the results, displaying each mountain name and height.
  prefs: []
  type: TYPE_NORMAL
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you looked at calling MySQL from programming languages. You
    learned that SQL statements are often embedded and run from within programs. You
    saw that the same database table that can be accessed from MySQL Workbench can
    also be accessed using PHP, Python, Java, or any number of other tools or languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, you’ll work on your first project using MySQL: creating
    a functioning weather database. You’ll build scripts to accept a weather feed
    hourly and load it into your MySQL database.'
  prefs: []
  type: TYPE_NORMAL
