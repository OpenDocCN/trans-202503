- en: '**Introduction**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**导言**'
- en: Over a decade ago, I self-published *The Nature of Code*, an online resource
    and print book exploring the unpredictable evolutionary and emergent properties
    of nature in software via the creative coding framework Processing. It’s the understatement
    of the century to say that much has changed in the world of technology and creative
    media since then, and so here I am again, with a new and rebooted version of this
    book built around JavaScript and the p5.js library. The book has a few new coding
    tricks this time, but it’s the same old nature—birds still flap their wings, and
    apples still fall on our heads.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 十多年前，我自费出版了*The Nature of Code*，一本在线资源和印刷书籍，通过创意编程框架 Processing 探讨软件中自然界的不可预测的进化和涌现特性。从那时起，技术和创意媒体的世界发生了翻天覆地的变化，简直可以说是本世纪的轻描淡写。现在，我再次带着这本书的新版本和重启版出现，这次围绕
    JavaScript 和 p5.js 库构建。书中有一些新的编程技巧，但本质上还是那个熟悉的自然——鸟儿仍然拍打翅膀，苹果依旧会掉到我们的头上。
- en: '**What Is This Book?**'
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**这本书是什么？**'
- en: At ITP/IMA (Tisch School of the Arts, New York University), I’ve been teaching
    a course titled Introduction to Computational Media since 2004\. The origins of
    this class date back to 1987 and the work of Mike Mills and John Henry Thompson
    (inventor of the Lingo programming language). In the course, students learn the
    basics of programming (variables, conditionals, loops, objects, arrays) as well
    as concepts related to making interactive media projects (pixels, data, sound,
    networking, 3D, and more). In 2008, I synthesized my materials for this class
    into an introductory book, *Learning Processing*, and in 2015, I created a series
    of video tutorials that follow the same trajectory in JavaScript with the p5.js
    library.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ITP/IMA（纽约大学 Tisch 艺术学院），我自 2004 年起教授名为《计算媒体导论》的课程。这个课程的起源可以追溯到 1987 年，源自
    Mike Mills 和 John Henry Thompson（Lingo 编程语言的发明者）的工作。在这门课程中，学生们学习编程基础（变量、条件语句、循环、对象、数组），以及与制作互动媒体项目相关的概念（像素、数据、声音、网络、3D
    等）。2008 年，我将这些课程材料汇编成一本入门书籍《Learning Processing》，2015 年，我制作了一系列视频教程，内容与这本书相似，不过这次是在
    JavaScript 和 p5.js 库下进行的。
- en: Once a student has learned the basics and seen an array of applications, their
    next step might be to delve deeply into a particular area. Maybe they want to
    focus on computer vision, data visualization, or generative poetry. My Nature
    of Code course (also taught at ITP/IMA since 2008) represents another possible
    next step. The course picks up exactly where my introductory material leaves off,
    demonstrating a world of programming techniques that focus on algorithms and simulation.
    The book you’re reading has evolved from that course.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦学生掌握了基础知识，并见识了各种应用，他们的下一步可能是深入研究某个特定领域。也许他们想专注于计算机视觉、数据可视化或生成诗歌。我的《Nature
    of Code》课程（自 2008 年起在 ITP/IMA 教授）代表了另一个可能的下一步。该课程正好接续了我的入门课程，展示了一系列集中于算法和仿真的编程技巧。你现在阅读的这本书正是从那门课程演变而来。
- en: 'My goal for this book is simple: I want to take a look at phenomena that naturally
    occur in the physical world and figure out how to write code to simulate them.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目标很简单：我想探讨物理世界中自然发生的现象，并找出如何编写代码来模拟它们。
- en: What, then, is this book exactly? Is it a science book? The answer is a resounding
    no. True, I might examine topics that come from physics or biology, but I won’t
    investigate these topics with a particularly high level of academic rigor. Instead,
    the book is “inspired by actual events.” I’m grabbing the parts from science and
    mathematics needed to build a software interpretation of nature, and veering off
    course or skipping details as I see fit.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这本书到底是什么？它是一本科学书籍吗？答案是否定的。确实，我可能会研究一些源自物理学或生物学的主题，但我不会以特别高的学术严谨度来探讨这些主题。相反，这本书是“受到实际事件的启发”。我会挑选科学和数学中需要的部分来构建自然的计算机软件解释，并根据需要偏离主题或跳过一些细节。
- en: Is this an art or design book? I would also say no. Regardless of how informal
    my approach might be, I’m still focusing on algorithms and their related programming
    techniques. Sure, the resulting demonstrations are visual (manifested as animated
    p5.js sketches), but they’re literal visualizations of the algorithms and programming
    techniques themselves, drawn only with basic shapes and grayscale color. It’s
    my hope, however, that you, dear reader, can use your creativity and visual ideas
    to make new, engaging work out of the examples. (I won’t complain if you turn
    every sketch into a rainbow.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本艺术或设计书吗？我也会说不是。尽管我的方式可能比较非正式，但我依然专注于算法及其相关的编程技术。没错，结果展示是可视的（以 p5.js 动画示例的形式呈现），但它们仅仅是算法和编程技术的字面可视化，全部用基本的图形和灰度色彩绘制。然而，我的希望是，你，亲爱的读者，能通过你的创意和视觉构思，利用这些示例创造出新的、引人入胜的作品。（如果你把每个示例都变成彩虹，我不会抱怨。）
- en: In the end, if this book is anything, it’s an old-fashioned programming textbook.
    While a scientific topic (Newtonian physics, cellular growth, evolution) may seed
    a chapter and the results might inspire artistic projects, the content itself
    will always boil down to the code implementation, with a particular focus on object-oriented
    programming.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，如果这本书有什么特点，那就是它是一本文法较为传统的编程教材。尽管某些科学话题（如牛顿物理学、细胞生长、进化）可能会为某一章节提供灵感，并且结果可能会启发艺术项目，但内容本身始终会归结为代码实现，特别侧重于面向对象编程。
- en: '**A Word About p5.js**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于 p5.js 的说明**'
- en: The p5.js library is a reimagining of the Processing creative coding environment
    for the modern web. I’m using it in this book for a number of reasons. For one,
    it’s an environment that I’m very familiar with. While the original Processing
    built on top of Java is my first love and still what I turn to when trying out
    a new idea, p5.js is what I now use for teaching many of my programming classes.
    It’s free, open source, and well suited to beginners, and because it’s JavaScript,
    everything runs right there in the web browser itself—no installation required.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: p5.js 库是对 Processing 创意编码环境在现代 Web 上的重新构想。我在这本书中使用它有几个原因。首先，它是我非常熟悉的环境。虽然最初基于
    Java 的 Processing 是我的初恋，仍然是我尝试新想法时常用的工具，但 p5.js 是我现在用来教授许多编程课程的工具。它是免费的、开源的，并且非常适合初学者，且由于它是
    JavaScript 编写的，所有内容都直接在 Web 浏览器中运行——无需安装。
- en: For me, however, Processing and p5.js are first and foremost a community of
    people, not coding libraries or frameworks. Those people have generously dedicated
    countless hours to making and sharing the software. I’ve written this book for
    that community and for anyone and everyone who loves to explore their curiosity
    and play through code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对我来说，Processing 和 p5.js 首先是一个由人组成的社区，而非编码库或框架。那些人无私地奉献了无数小时来制作和共享软件。我为这个社区，以及所有热衷于通过代码探索好奇心和玩乐的朋友们写了这本书。
- en: All that said, nothing ties this book’s content strictly to p5.js—or Processing,
    for that matter. This book could have been written with “vanilla” JavaScript or
    Java, or with any number of other open source creative coding environments like
    openFrameworks, Cinder, and so on. It’s my hope that after I’ve completed this
    book, I’ll be able to release versions of the examples that run in other environments.
    If anyone is interested in helping to port the examples, please feel free to contact
    me by email at *[daniel@natureofcode.com](mailto:daniel@natureofcode.com)*. Go
    on, you know you want to port *The Nature of Code* to PHP!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，本书的内容并不严格依赖于 p5.js——或者说 Processing。其实，这本书也可以用“原生” JavaScript 或 Java 编写，或者用任何其他开源创意编码环境，如
    openFrameworks、Cinder 等。我的希望是，在完成这本书后，我能发布可以在其他环境中运行的示例版本。如果有人有兴趣帮助移植这些示例，欢迎通过电子邮件联系我，*邮箱：[daniel@natureofcode.com](mailto:daniel@natureofcode.com)*。来吧，你知道你想把*The
    Nature of Code* 移植到 PHP！
- en: All the examples in this book have been tested with p5.js version 1.9.0, but
    for the most part they should also work with earlier versions. I’ll be keeping
    them up to date with the latest version. The most recent code can always be found
    on this book’s website (*[https://natureofcode.com](https://natureofcode.com)*)
    and its associated GitHub repository (*[https://github.com/nature-of-code](https://github.com/nature-of-code)*).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都已使用 p5.js 版本 1.9.0 进行过测试，但大部分示例应该也能在早期版本中运行。我会保持它们与最新版本同步更新。最新的代码始终可以在本书的网站上找到（*
    [https://natureofcode.com](https://natureofcode.com) *）以及其关联的 GitHub 仓库（* [https://github.com/nature-of-code](https://github.com/nature-of-code)
    *）。
- en: '**What Do You Need to Know?**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你需要了解什么？**'
- en: The prerequisites for understanding the material in this book could be stated
    as “one semester of programming instruction with p5.js, Processing, or any other
    creative coding environment.” That said, there’s no reason you couldn’t read this
    book having learned programming with a different language or development environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 理解本书内容的前提条件可以表述为：“学习过一学期的 p5.js、Processing 或任何其他创意编程环境的编程课程。” 也就是说，即便你用其他语言或开发环境学过编程，也完全可以阅读这本书。
- en: 'If you’ve never written any code before, while you could read the book for
    the concepts and inspiration, you’ll likely struggle with the code because I’m
    assuming knowledge of the fundamentals: variables, conditionals, loops, functions,
    objects, and arrays. If these concepts are new to you, my “Code! Programming with
    p5.js” (*[https://thecodingtrain.com/p5js](https://thecodingtrain.com/p5js)*)
    and “Learning Processing” (*[https://thecodingtrain.com/processing](https://thecodingtrain.com/processing)*)
    video courses provide the fundamentals of what you need to know.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未写过代码，虽然你可以通过这本书来学习概念和获得灵感，但你可能会在理解代码时遇到困难，因为我假设你已经掌握了基础知识：变量、条件语句、循环、函数、对象和数组。如果这些概念对你来说是新的，我的“Code!
    使用 p5.js 编程”（* [https://thecodingtrain.com/p5js](https://thecodingtrain.com/p5js)
    *）和“学习 Processing”（* [https://thecodingtrain.com/processing](https://thecodingtrain.com/processing)
    *）视频课程提供了你需要了解的基础知识。
- en: If you’re an experienced programmer but haven’t worked with p5.js, you can probably
    pick it up by checking out the p5.js documentation (*[https://p5js.org](https://p5js.org)*),
    poking through the examples, and reading through the library’s “Get Started” page
    (*[https://p5js.org/get-started](https://p5js.org/get-started)*).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是经验丰富的程序员，但没有使用过 p5.js，你可以通过查阅 p5.js 的文档（* [https://p5js.org](https://p5js.org)
    *），浏览示例，并阅读库的“入门”页面（* [https://p5js.org/get-started](https://p5js.org/get-started)
    *）来学习它。
- en: I should also point out that experience with object-oriented programming is
    fairly critical. I’ll review some of the basics in [Chapter 0](ch00.xhtml#ch00),
    but if classes and objects are unfamiliar to you, I suggest watching my p5.js
    and Processing object-oriented video tutorials, both also available at the Coding
    Train (*[https://thecodingtrain.com/oop](https://thecodingtrain.com/oop)*).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我还应该指出，面向对象编程的经验非常关键。我将在[第 0 章](ch00.xhtml#ch00)中回顾一些基础知识，但如果你对类和对象不熟悉，我建议观看我的
    p5.js 和 Processing 面向对象编程的视频教程，这些教程也可以在 Coding Train 网站找到（* [https://thecodingtrain.com/oop](https://thecodingtrain.com/oop)
    *）。
- en: '**How Are You Reading This Book?**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你是怎么阅读这本书的？**'
- en: Are you reading this book on a Kindle? Printed paper? On your laptop in PDF
    form? On a tablet showing an animated HTML5 version? Are you strapped to a chair,
    absorbing the content directly into your brain via a series of electrodes, tubes,
    and cartridges?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你是在 Kindle 上阅读这本书吗？打印版纸质书？在笔记本电脑上以 PDF 格式阅读？在平板电脑上观看 HTML5 动画版本？还是你被绑在椅子上，通过一系列电极、电缆和卡带将内容直接传输到大脑中？
- en: My dream has always been to write this book in one single format (in this case,
    a collection of Notion documents) and then, after pressing a magic button ( `npm
    run build` ), out comes the book in any and all formats you might want—PDF, HTML5,
    printed hard copy, Kindle, and so on. This was largely made possible by the Magic
    Book project (*[https://github.com/magicbookproject](https://github.com/magicbookproject)*),
    which is an open source framework for self-publishing originally developed at
    ITP by Rune Madsen and Steve Klise. Everything has been designed and styled using
    CSS—no manual typesetting or layout.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我的梦想一直是将这本书写成一个统一的格式（在本例中是 Notion 文档集合），然后，在按下一个神奇的按钮（`npm run build`）后，书就能以你可能需要的任何格式输出——PDF、HTML5、打印版、Kindle
    版等等。这在很大程度上得益于 Magic Book 项目（* [https://github.com/magicbookproject](https://github.com/magicbookproject)
    *），这是一个最初由 Rune Madsen 和 Steve Klise 在 ITP 开发的开源自出版框架。所有内容都使用 CSS 进行设计和排版——没有手动排版或布局。
- en: The reality of putting this book together isn’t quite so clean as that, and
    the story of how it happened is long. If you’re interested in learning more, make
    sure to read the book’s acknowledgments, and then go hire the people I’ve thanked
    to help you publish a book! I’ll also include more details in the associated GitHub
    repository (*[https://github.com/nature-of-code](https://github.com/nature-of-code)*).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这本书的过程并不像那么简单，背后的故事也很漫长。如果你有兴趣了解更多，记得阅读书中的致谢部分，然后去雇佣我感谢过的人，帮助你出版一本书！我还会在相关的
    GitHub 仓库中提供更多细节（* [https://github.com/nature-of-code](https://github.com/nature-of-code)
    *）。
- en: The bottom line is that no matter what format you’re reading it in, the material
    is all the same. The only difference will be in how you experience the code examples—more
    on that in “How to Read the Code” on [page xxxiii](intro.xhtml#ch00lev1sec7).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是，无论你以何种形式阅读，内容都是相同的。唯一的区别在于你体验代码示例的方式——更多内容请参见“如何阅读代码”一节，见[第xxxiii页](intro.xhtml#ch00lev1sec7)。
- en: '**The Coding Train Connection**'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**The Coding Train 连接**'
- en: Personally, I still love an assembled amalgamation of cellulose pulp, meticulously
    bound together with a resilient spine, upon which pigmented compounds have been
    artfully deployed to convey words and ideas. Yet, ever since 2012, when I impulsively
    recorded my very first video lesson about programming in my office at ITP, I’ve
    discovered the tremendous value and joy in conveying ideas and lessons through
    moving pictures.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我仍然喜欢由纸浆精心拼装而成、坚韧脊背牢牢装订在一起的书籍，上面以色素化合物艺术性地传达文字和思想。然而，自2012年以来，当时我在ITP办公室里冲动地录制了我的第一节编程视频课后，我发现通过动态图像传递思想和课程具有巨大的价值和乐趣。
- en: All this is to say, I have a YouTube channel called the Coding Train (*[https://www.youtube.com/thecodingtrain](https://www.youtube.com/thecodingtrain)*).
    I mentioned it earlier when discussing options for learning the prerequisite material
    for this book, and if you continue reading, you’ll find I continue to reference
    related videos. I might allude to one I made about a related algorithm or alternative
    technique for a particular coding example, or suggest a series on a tangential
    concept that could provide additional context to a topic I’m exploring.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我有一个名为The Coding Train的YouTube频道（*[https://www.youtube.com/thecodingtrain](https://www.youtube.com/thecodingtrain)*）。我在前面提到过它，用来讨论学习本书先决条件的选项，如果你继续阅读，你会发现我会不断引用相关的视频。我可能会提到我制作的关于某个相关算法或特定编程示例的替代技术的视频，或者推荐一个系列讲解与我正在探索的主题相关的旁支概念，提供额外的上下文。
- en: If video learning is your style, I’m also working on an accompanying set of
    video tutorials that follow the exact same material as this book. I made a whole
    bunch 10 years ago with Processing, and more recently I started publishing a series
    of updated ones with p5.js. At the time of this writing, I’m about halfway through
    [Chapter 5](ch05.xhtml#ch05).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢通过视频学习，我也在制作一套与本书内容完全相同的视频教程。我十年前用Processing制作了很多视频，最近我开始发布使用p5.js更新的系列教程。在撰写本文时，我大约完成了[第5章](ch05.xhtml#ch05)。
- en: '**Additional Resources**'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**附加资源**'
- en: There’s also an abundance of exceptional educational material teaching simulation
    and generative algorithms that I did not write or record. I always recommend that
    you explore various perspectives and voices when attempting to learn something
    new. It’s possible that what I’ve written might not click with you, and even hearing
    me repeat the same information in video form, regardless of how much mugging I
    do for the camera, won’t help. Sometimes what’s best is someone else you can relate
    to writing or saying or demonstrating the same concepts in different words with
    a different style. To this end, I’m including an “Additional Resources” section
    on this book’s website. If you create your own materials or have any recommendations
    for inclusion, please get in touch!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还有大量优秀的教育材料，讲解模拟和生成算法，这些我并没有编写或录制。我总是推荐你在尝试学习新知识时，探索不同的视角和声音。可能我所写的内容与你不太契合，甚至看到我在视频中重复同样的信息，也许无论我如何在镜头前做表情，效果都不大。有时最好的方式是找一个你能产生共鸣的人，用不同的语言、不同的风格来阐述或演示相同的概念。为此，我在本书网站上加入了一个“附加资源”部分。如果你创作了自己的材料或有任何推荐内容，希望能够纳入其中，请与我联系！
- en: Two quick recommendations I have right now are *The Computational Beauty of
    Nature* by Gary William Flake (MIT Press, 1998)—it’s where I originally learned
    a lot of the ideas for this book—and the superbly organized online resource That
    Creative Code Page by Taru Muhonen and Raphaël de Courville (*[https://thatcreativecode.page](https://thatcreativecode.page)*).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在有两个快速推荐，分别是由Gary William Flake（麻省理工学院出版社，1998年）所著的*《自然的计算美》*——这本书是我最初学习这本书中许多概念的来源——以及Taru
    Muhonen和Raphaël de Courville精心组织的在线资源*[That Creative Code Page](https://thatcreativecode.page)*。
- en: '**The “Story” of This Book**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**这本书的“故事”**'
- en: If you glance over the book’s table of contents, you’ll notice 12 chapters (0–11!),
    each one covering a different topic. And in one sense, this book is just that—a
    survey of a dozen concepts and associated code examples. Nevertheless, in putting
    together the material, I always imagined something of a linear narrative. Before
    you begin reading, I’d like to walk you through this story.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览一下本书的目录，你会注意到有12章（第0到第11章！），每一章都涵盖了不同的主题。从某种意义上来说，这本书就是这样的——对一打概念和相关代码示例的概览。尽管如此，在编排这些材料时，我总是想象出一个线性的叙事结构。在你开始阅读之前，我想带你走一遍这个故事。
- en: '**Part 1: Inanimate Objects**'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第一部分：无生命物体**'
- en: A soccer ball lies in the grass. A kick launches it into the air. Gravity pulls
    it back down. A heavy gust of wind keeps it afloat a moment longer until it falls
    and bounces off the head of a jumping player. The soccer ball isn’t alive; it
    makes no choices as to how it will move through the world. Rather, it’s an inanimate
    object waiting to be pushed and pulled by the forces of its environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一颗足球躺在草地上。一记踢击将它踢向空中。重力将它拉回地面。一阵强风让它在空中停留了片刻，直到它落下并弹跳到一个跳跃球员的头上。足球并不是活的；它不会自行选择如何在世界中运动。相反，它是一个没有生命的物体，等待着被环境的力量推拉。
- en: 'How would you model a soccer ball moving in a digital canvas? If you’ve ever
    programmed a circle moving across a screen, you’ve probably written the following
    line of code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何在数字画布上建模一个移动的足球？如果你曾编写过让圆形在屏幕上移动的程序，你可能写过以下这行代码：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You draw a shape at position `x`. With each frame of animation, you increment
    the value of `x`, redraw the shape, and voilà—the illusion of motion! Maybe you
    took it a step or two further and included a `y` position, as well as variables
    for speed along the x- and y-axes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你在位置`x`处绘制一个形状。在每一帧动画中，你增加`x`的值，重新绘制形状，哇——就创造出了运动的假象！也许你更进一步，增加了`y`位置，并为沿x轴和y轴的速度设置了变量：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Part 1 of this story will take this idea even further. After exploring how to
    use different flavors of randomness to drive an object’s motion (**[Chapter 0](ch00.xhtml#ch00)**),
    I’m going to take these `xspeed` and `yspeed` variables and demonstrate how together
    they form a vector (**[Chapter 1](ch01.xhtml#ch01)**). You won’t get any new functionality
    out of this, but it will build a solid foundation for programming motion in the
    rest of the book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本故事的第一部分将进一步拓展这个想法。在探索如何使用不同类型的随机性来驱动物体的运动（**[第0章](ch00.xhtml#ch00)**）后，我将展示如何将这些`xspeed`和`yspeed`变量结合起来，并说明它们如何共同形成一个向量（**[第1章](ch01.xhtml#ch01)**）。你不会从中获得任何新的功能，但它将为本书其余部分的运动编程奠定坚实的基础。
- en: Once you know a little something about vectors, you’re going to quickly realize
    that a force (**[Chapter 2](ch02.xhtml#ch02)**) is a vector. Kick a soccer ball
    and you’re applying a force. What does a force cause an object to do? According
    to Sir Isaac Newton, force equals mass times acceleration, so that force causes
    an object to accelerate. Modeling forces will allow you to create systems with
    dynamic motion, in which objects move according to a variety of rules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解了有关向量的基本知识，你会很快意识到，力（**[第2章](ch02.xhtml#ch02)**）是一个向量。踢足球时，你就在施加力。力会导致物体做什么呢？根据艾萨克·牛顿爵士的说法，力等于质量乘以加速度，因此力会使物体加速。建模力将使你能够创建具有动态运动的系统，其中物体根据多种规则移动。
- en: Now, that soccer ball to which you applied a force might have also been spinning.
    If an object moves according to its *linear* acceleration, it can spin according
    to its *angular* acceleration (**[Chapter 3](ch03.xhtml#ch03)**). Understanding
    the basics of angles and trigonometry will allow you to model rotating objects
    as well as grasp the principles behind oscillating motion, like a pendulum swinging
    or a spring bouncing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你施加了力的那颗足球可能也在旋转。如果一个物体根据其*线性*加速度运动，它也可以根据其*角加速度*旋转（**[第3章](ch03.xhtml#ch03)**）。理解角度和三角学的基础知识将帮助你建模旋转物体，并理解诸如摆动的钟摆或弹跳的弹簧等振荡运动的原理。
- en: Once you’ve tackled the basics of motion and forces for an individual inanimate
    object, I’ll show you how to make thousands upon thousands of those objects and
    manage them as a single unit called a *particle system* (**[Chapter 4](ch04.xhtml#ch04)**).
    Particle systems are also a good excuse to look at some additional features of
    object-oriented programming—namely, inheritance and polymorphism.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了单个无生命物体的运动和力学基础，我将向你展示如何制作成千上万的这些物体，并将它们作为一个单元进行管理，称之为*粒子系统*（**[第4章](ch04.xhtml#ch04)**）。粒子系统也是一个很好的借口来研究面向对象编程的额外特性——即继承和多态。
- en: '**Part 2: It’s Alive!**'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第二部分：它活了！**'
- en: 'What does it mean to model life? Not an easy question to answer, but I’ll begin
    by building objects that have an ability to perceive their environment. Let’s
    think about this for a moment. A block that falls off a table moves according
    to forces, as does a dolphin swimming through the water. But there’s a key difference:
    the block can’t decide to leap off the table, whereas the dolphin can decide to
    leap out of the water. The dolphin has dreams and desires. It feels hunger and
    fear, and those feelings inform its movements. By examining techniques behind
    modeling autonomous agents (**[Chapter 5](ch05.xhtml#ch05)**), you’ll learn to
    breathe life into inanimate objects, allowing them to make decisions about their
    movements according to their understanding of their environment.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟生命是什么意思？这个问题不容易回答，但我将从构建能够感知环境的物体开始。我们先想一想。一块从桌子上掉下来的木块是根据力的作用运动的，就像一只在水中游泳的海豚一样。但是有一个关键的区别：那块木块不能决定从桌子上跳下，而海豚可以决定跃出水面。海豚有梦想和欲望。它感到饥饿和恐惧，这些情感会影响它的运动。通过研究建模自主体的技术（**[第5章](ch05.xhtml#ch05)**），你将学会为无生命的物体注入生命，让它们根据对环境的理解做出运动决策。
- en: 'In [Chapters 1](ch01.xhtml#ch01) through [5](ch05.xhtml#ch05), all the examples
    will be written “from scratch”—meaning the code for the algorithms driving the
    motion of the objects will be written directly in p5.js. I’m certainly not the
    first programmer ever to consider the idea of simulating physics and life in animation,
    however, so next I’ll examine how you can use physics libraries (**[Chapter 6](ch06.xhtml#ch06)**)
    to model more sophisticated behaviors. I’ll look at the features of two libraries:
    Matter.js and Toxiclibs.js.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.xhtml#ch01)到[第5章](ch05.xhtml#ch05)中，所有的示例将“从头开始”编写——意味着驱动物体运动的算法代码将直接用p5.js编写。我当然不是第一个考虑在动画中模拟物理和生命的程序员，因此接下来我将探讨如何使用物理库（**[第6章](ch06.xhtml#ch06)**）来模拟更复杂的行为。我将介绍两个库的特点：Matter.js和Toxiclibs.js。
- en: The end of [Chapter 5](ch05.xhtml#ch05) will explore group behaviors that exhibit
    the properties of complexity. A complex system is typically defined as a system
    that’s more than the sum of its parts. While the individual elements of the system
    may be incredibly simple and easily understood, the behavior of the system as
    a whole can be highly complex, intelligent, and difficult to predict. Chasing
    complexity will lead you away from thinking purely about modeling motion and into
    the realm of rule-based systems. What can you model with cellular automata (**[Chapter
    7](ch07.xhtml#ch07)**), systems of cells living on a grid? What types of patterns
    can you generate with fractals (**[Chapter 8](ch08.xhtml#ch08)**), the geometry
    of nature?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.xhtml#ch05)的结尾将探讨表现复杂性特征的群体行为。复杂系统通常被定义为一个整体大于其部分之和的系统。虽然系统的各个元素可能非常简单并且容易理解，但整个系统的行为可能非常复杂、智能且难以预测。追求复杂性会使你不再仅仅考虑模拟运动，而是进入基于规则的系统领域。你可以用细胞自动机（**[第7章](ch07.xhtml#ch07)**）来模拟什么？这些是生活在网格上的细胞系统。你可以用分形（**[第8章](ch08.xhtml#ch08)**）——自然几何——生成什么样的模式？'
- en: '**Part 3: Intelligence**'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第三部分：智能**'
- en: You made things move. Then you gave those things hopes and dreams and fears,
    along with rules to live by. The last step in this book will bring intelligent
    decision-making into your creations. Can you apply the biological process of evolution
    to computational systems (**[Chapter 9](ch09.xhtml#ch09)**) in order to evolve
    the behavior of autonomous agents? Taking inspiration from the human brain, can
    you program an artificial neural network (**[Chapter 10](ch10.xhtml#ch10)**)?
    How can agents make decisions, learn from their mistakes, and adapt to their environment
    (**[Chapter 11](ch11.xhtml#ch11)**)?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你让事物开始运动。然后，你赋予这些事物希望、梦想和恐惧，并制定了生活规则。本书的最后一步将把智能决策引入到你的创作中。你能否将生物进化过程应用到计算系统中（**[第9章](ch09.xhtml#ch09)**），从而让自主代理的行为进化？受到人类大脑启发，你能否编写人工神经网络（**[第10章](ch10.xhtml#ch10)**）？代理如何做出决策、从错误中学习并适应环境（**[第11章](ch11.xhtml#ch11)**）？
- en: '**Using This Book as a Syllabus**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用本书作为大纲**'
- en: 'While the content in this book certainly makes for an intense and highly compressed
    semester, I’ve designed it to fit into a 14-week course. I find that some chapters
    work better expanded across multiple weeks, while others can be combined and explored
    together in a single week. Here’s one possible syllabus:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书的内容无疑会带来紧张且高度压缩的学期，但我已将其设计为适应14周的课程。我发现，有些章节在多周展开时效果更好，而其他章节可以合并在一周内一起探讨。这里是一个可能的大纲：
- en: '| Week 1 | Randomness and vectors ([Chapters 0](ch00.xhtml#ch00)–[1](ch01.xhtml#ch01))
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 第1周 | 随机性与向量（[第0章](ch00.xhtml#ch00)–[1章](ch01.xhtml#ch01)） |'
- en: '| Week 2 | Forces ([Chapter 2](ch02.xhtml#ch02)) |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 第2周 | 力学（[第2章](ch02.xhtml#ch02)） |'
- en: '| Week 3 | Oscillation ([Chapter 3](ch03.xhtml#ch03)) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 第3周 | 振荡（[第3章](ch03.xhtml#ch03)） |'
- en: '| Week 4 | Particle systems ([Chapter 4](ch04.xhtml#ch04)) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 第4周 | 粒子系统（[第4章](ch04.xhtml#ch04)） |'
- en: '| Week 5 | Autonomous agents ([Chapter 5](ch05.xhtml#ch05)) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 第5周 | 自主代理（[第5章](ch05.xhtml#ch05)） |'
- en: '| Week 6 | Physics libraries ([Chapter 6](ch06.xhtml#ch06)) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 第6周 | 物理学库（[第6章](ch06.xhtml#ch06)） |'
- en: '| Week 7 | Mid-semester project about motion |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 第7周 | 学期中期运动项目 |'
- en: '| Week 8 | Complex systems: 2D cellular automata and fractals ([Chapters 7](ch07.xhtml#ch07)–[8](ch08.xhtml#ch08))
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 第8周 | 复杂系统：二维元胞自动机与分形（[第7章](ch07.xhtml#ch07)–[8章](ch08.xhtml#ch08)） |'
- en: '| Week 9 | Genetic algorithms ([Chapter 9](ch09.xhtml#ch09)) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 第9周 | 遗传算法（[第9章](ch09.xhtml#ch09)） |'
- en: '| Week 10 | Neural networks and neuroevolution ([Chapters 10](ch10.xhtml#ch10)–[11](ch11.xhtml#ch11))
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 第10周 | 神经网络与神经进化（[第10章](ch10.xhtml#ch10)–[11章](ch11.xhtml#ch11)） |'
- en: '| Week 11 | Final project discussion |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 第11周 | 最终项目讨论 |'
- en: '| Weeks 12–13 | Final project workshop |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 第12–13周 | 最终项目研讨会 |'
- en: '| Week 14 | Final project presentation |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 第14周 | 最终项目展示 |'
- en: If you’re considering using this text for a course or workshop, please feel
    free to contact me. I hope to eventually finish the companion set of videos, as
    well as include helpful slides as supplementary educational materials. If you
    make your own, I’d love to hear about it!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算将此书用作课程或研讨会教材，欢迎随时与我联系。我希望最终能完成伴随视频集，并将有用的幻灯片作为补充教材。如果你自己制作了相关材料，也希望能听到你的反馈！
- en: '**How to Read the Code**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如何阅读代码**'
- en: Code is the main medium of this book, weaving throughout the narrative as it’s
    dissected and examined. Sometimes it appears as full, stand-alone examples, other
    times it drops in as a single line or two, and often it’s stretched over whole
    sections in many short snippets, with explanations nestled in between. Whatever
    form it takes, code will always appear in a `monospaced font`. Here’s a quick
    guide on how to navigate the types of code sprinkled throughout the book.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是本书的主要媒介，它贯穿整个叙述并被剖析和检视。有时它以完整的独立示例出现，其他时候它作为一两行代码出现，往往它会通过许多简短的片段分布在整个章节中，解释也夹在其中。不管它以什么形式出现，代码总是以`等宽字体`展示。下面是关于如何阅读本书中不同类型代码的简要指南。
- en: '**Full Examples**'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**完整示例**'
- en: 'Each chapter includes fully functional code examples that are written with
    the p5.js library. Here’s what they look like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都包含了使用p5.js库编写的完整功能代码示例。它们的样子如下：
- en: '![Image](../images/pg36_Image_4.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg36_Image_4.jpg)'
- en: The examples are numbered sequentially within each chapter to help you find
    the corresponding code online. In the printed version of the book, you’ll see
    a screenshot right below the example title. The online version has the running
    sketch embedded right there on the page. For animated examples (which are almost
    all of them), the screenshots will often show a “trail” of motion. This effect
    was achieved by adding transparency to the `background(255, 10)` function, though
    the accompanying code won’t include that enhancement.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例在每一章中按顺序编号，帮助你在线查找对应的代码。在书籍的打印版中，你会看到一个截图，位于示例标题正下方。在线版则直接在页面上嵌入了运行中的草图。对于动画示例（几乎所有示例都是），截图通常会展示“运动轨迹”。这一效果是通过在`background(255,
    10)`函数中添加透明度来实现的，尽管随附的代码并未包括这一增强功能。
- en: Below the example, you’ll find the code, but it’s not always the *complete*
    code. Since many examples are quite long and span multiple files, I make my best
    effort to include a snippet that highlights the main aspects of the example or
    whatever new components are being introduced that weren’t already discussed earlier
    in the section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例下方，你会看到代码，但它不一定是*完整的*代码。由于许多示例相当长，并且涉及多个文件，我会尽量提供一个突出了示例的主要部分或本节中没有早先讨论过的新组件的片段。
- en: 'You can find the full version of the code on the book’s website. There, you
    can interact with, modify, and experiment with the code in the p5.js Web Editor
    (*[https://editor.p5js.org](https://editor.p5js.org)*). Additionally, everything
    is included in the book’s GitHub repository. Here are links for all the materials:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的网站上找到完整版本的代码。在那里，你可以与代码互动、修改并在 p5.js Web 编辑器中进行实验 (*[https://editor.p5js.org](https://editor.p5js.org)*)。此外，所有内容都包含在本书的
    GitHub 仓库中。以下是所有材料的链接：
- en: The book’s website (*[https://natureofcode.com](https://natureofcode.com)*)
    includes the full text of the book, additional reading and references, and all
    code examples.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书的网站 (*[https://natureofcode.com](https://natureofcode.com)*) 包含了完整的书籍文本、额外的阅读材料和参考资料，以及所有代码示例。
- en: The GitHub repositories (*[https://github.com/nature-of-code](https://github.com/nature-of-code)*)
    contain the raw source code for the book’s website, the book’s build process,
    and all code examples.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 仓库 (*[https://github.com/nature-of-code](https://github.com/nature-of-code)*)
    包含了本书网站的原始源代码、本书的构建过程以及所有代码示例。
- en: In addition to the website and GitHub repositories, you can also access the
    code by viewing the list of sketches in the p5.js web editor (*[https://editor.p5js.org/natureofcode/sketches](https://editor.p5js.org/natureofcode/sketches)*).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了网站和 GitHub 仓库，你还可以通过查看 p5.js 网页编辑器中的草图列表来访问代码 (*[https://editor.p5js.org/natureofcode/sketches](https://editor.p5js.org/natureofcode/sketches)*).
- en: Notice that I’ve used comments in the example to address what’s happening in
    the code. These comments float next to the code (the appearance may vary depending
    on how you’re reading the book). The background shading groups the comments with
    their corresponding lines of code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我在示例中使用了注释来解释代码的作用。这些注释会漂浮在代码旁边（具体显示效果可能会因你阅读的方式不同而有所变化）。背景阴影将注释与其对应的代码行分组。
- en: '**Complete Snippets**'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**完整代码片段**'
- en: 'Though rare, “complete” sections of code are occasionally mixed in with the
    body text. Sometimes, as with the sample [Example #.#](intro.xhtml#introex1) in
    the previous section, I might actually list all the code associated with a complete
    p5.js sketch. In most cases, however, I’m considering a “complete” snippet to
    be the code for an entire function or a class—a fully finished block of code,
    complete with opening and closing curly brackets and everything in between. Something
    like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管很少见，偶尔会有“完整”的代码部分与正文混合在一起。有时候，像前一节中的示例[Example #.#](intro.xhtml#introex1)那样，我可能会列出与完整的
    p5.js 草图相关的所有代码。然而，在大多数情况下，我认为“完整”的代码片段是指一个完整函数或类的代码——一个完整的代码块，包括了开头和结尾的花括号以及其中的所有内容。就像这样：'
- en: '![Image](../images/pg37_Image_5.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg37_Image_5.jpg)'
- en: This snippet shows the entire `draw()` function, but it still isn’t a complete
    sketch. It assumes the existence of a global variable called `spacing`, as well
    as a `setup()` function that calls `createCanvas()`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段展示了整个`draw()`函数，但它仍然不是一个完整的草图。它假定存在一个名为`spacing`的全局变量，以及一个调用`createCanvas()`的`setup()`函数。
- en: '**Context-Free Code**'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**无上下文代码**'
- en: Occasionally, you’ll find lines of code hanging out on the page without a surrounding
    function or context. These snippets are there to illustrate a point, not necessarily
    to be run as is. They might represent a concept, a tiny piece of an algorithm,
    or a coding technique.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，你会看到一些代码行出现在页面上，而没有被包含在任何函数或上下文中。这些代码片段是用来阐明某个观点的，不一定是要直接运行的。它们可能代表一个概念、一小段算法，或者一种编程技巧。
- en: '![Image](../images/pg38_Image_6.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg38_Image_6.jpg)'
- en: Notice that this context-free snippet matches the indentation of `fill(255)`
    in the previous “complete” snippet. I’ll do this when the code has been established
    to be part of something demonstrated previously. Admittedly, this won’t always
    work out so cleanly or perfectly, but I’m doing my best!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个没有上下文的代码片段与前一个“完整”代码片段中的`fill(255)`保持了相同的缩进。当代码被确认为之前演示的一部分时，我会这样做。虽然这并不总是能做到如此干净或完美，但我尽力而为！
- en: '**Snipped Code**'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**代码片段**'
- en: Be on the lookout for the scissors! This design element indicates that a code
    snippet is a continuation of a previous piece or will be continued after some
    explanatory text. Sometimes it’s not actually being continued but is just cut
    off because all the code isn’t relevant to the discussion at hand. The scissors
    are there to say, “Hey, there might be more to this code above or below, or at
    the very least, this is a part of something bigger!” Here’s how this might play
    out with some surrounding body text.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 留意剪刀图标！这个设计元素表示代码片段是前一部分的继续，或者会在一些解释性文字之后继续。有时它实际上并没有继续，而只是被截断，因为所有代码并不适合当前讨论。剪刀图标的作用是：“嘿，可能上面或下面还有更多代码，或者至少，这是某个更大部分的一部分！”这可能会在一些上下文的配合下体现出来。
- en: 'The first step to building a p5.js sketch is to create a canvas:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 构建p5.js草图的第一步是创建一个画布：
- en: '![Image](../images/pg38_Image_6a.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg38_Image_6a.jpg)'
- en: 'Then it’s time to draw the background:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是时候绘制背景了：
- en: '![Image](../images/pg38_Image_6b.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg38_Image_6b.jpg)'
- en: 'I also like to include a circle in the center of the canvas:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我还喜欢在画布的中心添加一个圆圈：
- en: '![Image](../images/pg38_Image_6c.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg38_Image_6c.jpg)'
- en: In `draw()`, I might want to start placing squares at random locations on top
    of the background and fixed circle. The rest of the code could be anything you
    want it to be!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`draw()`中，我可能想要开始将方形放置在背景和固定圆圈上方的随机位置。其余的代码可以是任何你想要的内容！
- en: '![Image](../images/pg38_Image_6d.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg38_Image_6d.jpg)'
- en: Notice that I’m keeping the indentation consistent to try to help establish
    the context, and again, I’m using the scissors icon to help indicate where code
    is continued or cut off.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在保持缩进一致性，以帮助建立上下文，而且，我再次使用剪刀图标来标示代码是继续的部分或已被截断的部分。
- en: A particular side effect of using snipped code is that you’ll often notice opening
    curly brackets in one snippet that don’t have a corresponding closing bracket
    until several snippets later (if at all). If you’re used to looking at JavaScript
    code, this may initially send you into a mild panic, but hopefully you’ll get
    used to it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码片段的一个特定副作用是，你会经常发现某个代码片段中的左花括号，直到几个代码片段后才会有对应的右花括号（如果有的话）。如果你习惯了查看JavaScript代码，刚开始可能会让你有些惊慌，但希望你能逐渐习惯。
- en: '**Exercises**'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**练习**'
- en: 'Each chapter includes numbered exercises that serve as your playground to apply,
    experiment with, and go beyond the concepts and code provided within the chapters.
    Here’s what an exercise might look like:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都包含编号的练习，作为你的练习场地，让你应用、实验并超越本章中提供的概念和代码。以下是一个练习的样子：
- en: '![Image](../images/pencil.jpg) **Exercise #.#**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/pencil.jpg) **练习 #.#**'
- en: 'Try tweaking [Example #.#](intro.xhtml#introex1) so that each circle has a
    random size:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '尝试调整[示例 #.#](intro.xhtml#introex1)，使得每个圆圈具有随机大小：'
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To keep you on your toes, the exercises come in a variety of formats. Some pose
    technical challenges, asking you to write a variation of a specific algorithm
    or solve a highly specific problem. Others are open-ended inquiries, prompting
    you to play and experiment, following your own ideas. Some include snippets of
    code with blank spots, inviting you to fill them in directly. Don’t hesitate to
    write, scribble, or doodle in this very book as you work through them!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你保持警觉，练习题有多种格式。有些提出了技术挑战，要求你编写特定算法的变体或解决某个特定问题。其他则是开放性问题，促使你进行创作和实验，按照自己的想法进行探索。有些包括代码片段，其中有空白部分，邀请你直接填写。不要犹豫，在这本书中写下、涂鸦或随意勾画！
- en: '**Solutions**'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Solutions for the exercises are provided on the book’s website. Or I should
    say, I aspire to include solutions for all the exercises on the book’s website.
    As of this moment, just a handful are available, but hopefully by the time you’re
    reading this, there will be many more. If you’d like to contribute a solution
    to an exercise, I would love for you to do so via the book’s GitHub repository!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 练习的解答可以在本书网站上找到。或者我应该说，我希望能够在本书网站上提供所有练习的解答。截至目前，只有少数解答可用，但希望等你读到这时，解答会有更多。如果你愿意贡献一个练习的解答，我很希望你能通过本书的
    GitHub 仓库来提交！
- en: '**The Ecosystem Project**'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**生态系统项目**'
- en: As much as I’d like to pretend you could learn everything by curling up in a
    comfy chair and reading some prose, to learn programming you’re really going to
    have to do some programming. The exercises scattered throughout each chapter are
    a start, but you might find it helpful to also keep in mind a more substantial
    project idea (or two) that you can develop as you go from chapter to chapter.
    In fact, when teaching my Nature of Code course at ITP, I’ve often found that
    students enjoy building a single project, step by step, week by week, over the
    course of the semester.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我很想假装你可以通过蜷缩在舒适的椅子上阅读一些散文来学习一切，但要学会编程，你实际上必须动手编程。每章中散布的练习是一个起点，但你可能会发现，牢记一个更为实际的项目想法（或两个），并在每一章的学习过程中逐步开发它，会对你有所帮助。事实上，当我在
    ITP 教授《代码的本质》课程时，我发现学生们喜欢在一个学期中，逐步地、每周地构建一个项目。
- en: At the end of each chapter, you’ll find a series of prompts for one such project—exercises
    that build on each other, one topic at a time. This project is based on the following
    scenario. You’ve been asked by a science museum to develop the software for a
    new exhibit, the *Digital Ecosystem*, a world of animated, procedural creatures
    that live in a computer simulation for visitors to enjoy as they enter the museum.
    I don’t mean to suggest that this is a particularly innovative or creative concept.
    Rather, I’ll use this example Ecosystem Project idea as a literal representation
    of the content in the book, demonstrating how the elements can fit together in
    a single program. I encourage you to develop your own idea, one that’s perhaps
    more abstract and nontraditional.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一章的末尾，你会看到一系列针对这样一个项目的提示——这些练习是相互关联的，每次只涉及一个主题。这个项目基于以下情境：你受到了一个科学博物馆的委托，开发一个新的展览的软件，*数字生态系统*，这是一个充满动画的、程序生成的生物世界，它们生活在一个计算机仿真中，供游客在进入博物馆时欣赏。我并不是要暗示这是一个特别创新或有创意的概念。相反，我将使用这个生态系统项目的例子，作为本书内容的字面表现，展示这些元素如何在一个程序中结合在一起。我鼓励你开发自己的想法，可能是更抽象、更非传统的。
- en: '**Getting Help and Submitting Feedback**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取帮助与提交反馈**'
- en: Coding can be tough and frustrating, and the ideas in this book aren’t always
    straightforward. You don’t have to go it alone. There’s probably someone else
    reading right now who would love to co-organize a study group or a book club where
    you can meet, chat, and share your struggles and successes. If you don’t find
    a local community for traveling this journey together, what about an online one?
    Two places I’d suggest are the official Processing forums (*[https://discourse.processing.org](https://discourse.processing.org)*)
    and the Coding Train Discord server (*[https://thecodingtrain.com/discord](https://thecodingtrain.com/discord)*).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 编程可能既艰难又令人沮丧，本书中的一些想法也不总是直接明了的。你不必独自一人走这条路。现在可能有人正在阅读本书，他们也希望共同组织一个学习小组或书友会，在那里你们可以见面、聊天，并分享各自的困难与成功。如果你找不到一个本地社区一起走这段旅程，如何考虑一个在线社区呢？我建议的两个地方是官方的
    Processing 论坛 (*[https://discourse.processing.org](https://discourse.processing.org)*)
    和 Coding Train 的 Discord 服务器 (*[https://thecodingtrain.com/discord](https://thecodingtrain.com/discord)*)。
- en: I consider the online version of this book a living document and welcome your
    feedback. For all things book related, please visit the Nature of Code website
    (*[https://natureofcode.com](https://natureofcode.com)*). The raw source text
    of the book and all the illustrations are on GitHub (*[https://github.com/nature-of-code](https://github.com/nature-of-code)*).
    Please leave feedback and submit corrections by using GitHub issues (*[https://github.com/nature-of-code/noc-book-2/issues](https://github.com/nature-of-code/noc-book-2/issues)*).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为本书的在线版本是一本活文档，欢迎您的反馈。有关本书的所有信息，请访问《代码的本质》网站 (*[https://natureofcode.com](https://natureofcode.com)*)。本书的原始文本和所有插图都可以在
    GitHub 上找到 (*[https://github.com/nature-of-code](https://github.com/nature-of-code)*)。请通过
    GitHub issues (*[https://github.com/nature-of-code/noc-book-2/issues](https://github.com/nature-of-code/noc-book-2/issues)*)
    提交反馈和修改意见。
- en: More important, I want to see what you make! You can share your ideas by submitting
    to the passenger showcase on the Coding Train website (*[https://thecodingtrain.com/showcase](https://thecodingtrain.com/showcase)*)
    or in the channels on the aforementioned Discord. A hello in a YouTube comment
    is always welcome (although to be honest, it’s often best not to read the comments
    on YouTube), and feel free to tag me on whatever platform the future of social
    media has to offer—whichever one is the friendliest and least toxic! I want to
    enjoy all the bloops that swim in your ecosystem. Whether they leap triumphantly
    over a wave of creativity or make a tiny splash in a pond of learning, let’s bask
    in the ripples they send through the nature of coding!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我想看到你创造的东西！你可以通过将你的想法提交到Coding Train网站上的乘客展示区 (*[https://thecodingtrain.com/showcase](https://thecodingtrain.com/showcase)*)
    或者在前面提到的Discord频道中分享。YouTube评论中的问候也始终欢迎（尽管说实话，最好还是不要读YouTube的评论），而且随时可以在任何社交媒体平台上@我——无论哪个平台最友好、最少毒性！我想享受你们生态系统中所有的小失误。无论它们是自豪地跃过创意的波浪，还是在学习的池塘中溅起一丝涟漪，让我们一起享受它们在编程本质中激起的涟漪！
