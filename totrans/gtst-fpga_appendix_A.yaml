- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">FPGA
    DEVELOPMENT BOARDS</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: This appendix lists a few example FPGA development boards that you can use to
    work on the projects in this book. A dev board that you can program is a valuable
    learning tool. There’s nothing more satisfying than blinking LEDs, pushing buttons,
    and interfacing to external devices! You can certainly learn a lot from this book
    without completing the practical examples. But to really unlock its value I recommend
    purchasing a board, such as one of the devices mentioned here, and working through
    all of the projects using physical hardware.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](chapter2.xhtml) we discussed some criteria for selecting a board,
    including the features required to complete the book’s projects as written. In
    particular, I recommend choosing a board with a Lattice iCE40 FPGA, a USB connection,
    and peripherals such as LEDs, push buttons, and a seven-segment display. The boards
    covered here either meet these requirements off-the-shelf or allow you to meet
    them by connecting a few extra peripherals. There are other boards that will work,
    too; you can use any of these or use these recommendations as a starting point
    for your own research.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Nandland Go Board</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I created the Nandland Go Board ([Figure A-1](#figA-1)) as a part of a successful
    Kickstarter campaign in 2016 to fill a gap in the market: a lack of FPGA development
    boards that were fun, affordable, and easy to use for beginners. I designed the
    board with many peripherals, to allow for a wide range of interesting projects.
    The Go Board has everything you need to work on all of the projects in this book
    without any modifications.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/FigureA-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-1: The Nandland Go
    Board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The FPGA on the Go Board is an iCE40 HX1K, which is small compared to modern
    AMD and Intel FPGAs but powerful enough to create the game *Pong* on a VGA monitor.
    The board has four LEDs, four push-button switches, two seven-segment displays,
    a Pmod connector, a VGA connector, and a USB connector for power, programming,
    and communication. At about $65 at the time of writing, it’s an affordable board
    that will allow you to try many different projects in either Verilog or VHDL.
    It’s available through [*https://<wbr>nandland<wbr>.com*](https://nandland.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Lattice iCEstick</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lattice designed the iCEstick FPGA development board to be plugged directly
    into the USB port of a computer, like a thumb drive. It has the same FPGA as the
    Go Board (an iCE40 HX1K), but it’s a bit more limited in terms of built-in peripherals.
    There are five LEDs available, a Pmod connector, and an IrDA transceiver for sending
    and receiving infrared data.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing the iCEstick is priced at around $50, and it can be purchased
    directly from Lattice’s website ([*https://<wbr>latticesemi<wbr>.com*](https://latticesemi.com))
    or through electronics distributers such as Digi-Key ([*https://<wbr>digikey<wbr>.com*](https://digikey.com)).
    To use this development board for the projects in this book, you’ll need to make
    use of the Pmod connector to expand its capabilities. At a minimum, I would recommend
    purchasing a breakout board with additional button inputs; for example, Digilent
    ([*https://<wbr>digilent<wbr>.com*](https://digilent.com)) sells a Pmod module
    with four push-button switches.
  prefs: []
  type: TYPE_NORMAL
- en: The iCEstick doesn’t have enough Pmod connectors to interface to a seven-segment
    display and a button module at the same time for the state machine project in
    [Chapter 8](chapter8.xhtml). However, if you want to implement the seven-segment
    display portion of the project, you can connect an individual display using some
    of the 16 through-hole I/O connections on the sides of the board.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Alchitry Cu</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Alchitry Cu is similar to the iCEstick in that it’s a relatively simple
    board with a single FPGA and connectors, and not many on-board peripherals. The
    difference is that the Alchitry Cu has many more connectors available, so you
    can interface to more peripherals. Additionally, it uses a larger FPGA, the iCE40
    HX8K, which has more resources available for larger, more complicated projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Alchitry Cu can be paired with the Alchitry Io Element Board to expand
    its capabilities: the Io mounts directly on top of the Cu, similar to an Arduino
    shield, and adds 4 seven-segment displays, 5 push buttons, 24 LEDs, and 24 switches.
    This option is the most expensive of the three discussed here; the Cu and Io together
    cost around $85 as of this writing. You can purchase the boards at [*https://<wbr>sparkfun<wbr>.com*](https://sparkfun.com).'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Switching Between Boards</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned in [Chapter 2](chapter2.xhtml), the beauty of Verilog and VHDL
    is that they’re FPGA-agnostic. The code that you write for one development board
    will translate very well to another board, often with no modifications needed,
    provided you aren’t using device-specific hard IP features like the ones discussed
    in [Chapter 9](chapter9.xhtml). This makes it quite natural to start your FPGA
    journey on a low-cost, easy-to-use iCE40-based board like the ones described here,
    and then level up to a fancier development board as you gain experience. You’ll
    be able to take all the projects you developed for your first board and port them
    to a new, more advanced board with minimal revision.
  prefs: []
  type: TYPE_NORMAL
