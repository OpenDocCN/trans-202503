- en: Chapter 1. Meet F#
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章. 认识 F#
- en: Originally developed at Microsoft Research, Cambridge, F# is a functional-first,
    multi-paradigm language. In plain terms, that means that while F#’s syntax and
    constructs emphasize writing code that applies functions to data, it’s also a
    full-featured, object-oriented language with a few imperative constructs tossed
    in for good measure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: F# 最初在微软研究院剑桥分部开发，是一种以函数为主的多范式语言。通俗来说，这意味着尽管 F# 的语法和构造强调编写将函数应用于数据的代码，但它也是一种功能全面的面向对象语言，并且加入了一些命令式编程的构造。
- en: F# dates back to 2002, but the first major release didn’t appear until Microsoft
    made version 1.0 available in 2005\. F# is descended from the ML language and
    was heavily inspired by OCaml in particular. Early in its development, the F#
    team strived to maintain syntactic compatibility with ML, but over time the language
    has diverged a bit. Gradually, F# has found its place as a first-class citizen
    of Visual Studio, with project templates available out-of-the-box in every version
    starting with Visual Studio 2010\. F#’s latest release accompanies Visual Studio
    2013 and has been designated as version 3.1.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: F# 起源于 2002 年，但直到 2005 年微软发布了版本 1.0，才迎来了第一次重大发布。F# 源自 ML 语言，并受到 OCaml 的深刻启发。在早期的开发过程中，F#
    团队努力保持与 ML 的语法兼容，但随着时间推移，语言有所不同。逐渐地，F# 找到了在 Visual Studio 中的第一等公民地位，从 Visual Studio
    2010 开始，每个版本都提供了现成的项目模板。F# 的最新版本随 Visual Studio 2013 一同发布，版本号为 3.1。
- en: Despite its inclusion in Visual Studio, F# has developed an undeserved reputation
    as a niche language useful only in academia or highly specialized financial software.
    As a result, it has failed to secure widespread adoption, particularly in enterprise
    software, but that seems to be changing as developers are starting to understand
    the virtues of functional languages. The fact that F# is an open source language
    licensed under the Apache 2.0 license and there are compilers available on every
    major platform is also helping the language gain traction. Microsoft continues
    to contribute heavily to F#, but the language itself is managed by the independent
    F# Software Foundation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 F# 被包含在 Visual Studio 中，但它仍然拥有不应有的声誉，认为它只是学术界或高度专业化的金融软件中使用的冷门语言。因此，它未能在企业软件中获得广泛应用，但随着开发人员开始理解函数式语言的优点，这种情况似乎正在改变。F#
    是一门开源语言，使用 Apache 2.0 许可证，并且每个平台都有可用的编译器，这也在帮助这门语言获得更多的关注。微软继续为 F# 做出重大贡献，但语言本身是由独立的
    F# 软件基金会管理的。
- en: The goal of this chapter is to give you an idea of how F# programs are organized
    at both the Visual Studio project and code levels. As you learn the language,
    you’ll find that F# truly is a general-purpose language capable of meeting the
    demands of most modern software development tasks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是让你了解 F# 程序在 Visual Studio 项目和代码层面的组织结构。在你学习这门语言的过程中，你会发现 F# 真正是一种通用编程语言，能够满足大多数现代软件开发任务的需求。
- en: Unless otherwise noted, the examples in this book were developed with F# 3.1
    in Visual Studio 2013 (Professional and Ultimate editions). If, for any reason,
    you’re not using Visual Studio, don’t fret; the majority of the examples within
    this book are applicable no matter which platform you’re using.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，本书中的示例是使用 F# 3.1 在 Visual Studio 2013（专业版和终极版）中开发的。如果出于某种原因你没有使用 Visual
    Studio，不用担心，本书中的大部分示例无论你使用哪个平台都适用。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: '*Although I don’t specifically cover them, if you intend to follow along with
    a development environment other than Visual Studio, the F# Software Foundation
    has plenty of resources to help you get started on its website at* [http://fsharp.org/](http://fsharp.org/)*.
    You can also try F# in your browser at* [http://www.tryfsharp.org/](http://www.tryfsharp.org/).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管我在本书中并未专门讲解，但如果你打算使用除 Visual Studio 之外的开发环境，可以参考 F# 软件基金会网站上的大量资源，帮助你入门，网址是*
    [http://fsharp.org/](http://fsharp.org/)*。你还可以在浏览器中尝试 F#，网址是* [http://www.tryfsharp.org/](http://www.tryfsharp.org/).'
- en: F# in Visual Studio
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: F# 与 Visual Studio
- en: Because this book is primarily intended for experienced .NET developers, I’ll
    assume you already know how to create projects in Visual Studio. I’ll go right
    into introducing the different F# project templates that are available to you
    and follow that with a brief discussion about file organization within an F# project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为本书主要面向有经验的 .NET 开发人员，所以我假设你已经知道如何在 Visual Studio 中创建项目。我将直接介绍可用的不同 F# 项目模板，并简要讨论
    F# 项目中的文件组织结构。
- en: Project Templates
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目模板
- en: Each of the Visual F# project templates is listed under the Visual F# category
    in the New Project dialog, but the category’s location within the list will vary
    according to your IDE settings. If the Visual F# category isn’t listed immediately
    under Installed Templates, check under the Other Languages node. If you still
    don’t see it, make sure the F# components are installed. [Figure 1-1](ch01.html#fhash_project_templates_in_visual_studio
    "Figure 1-1. F# project templates in Visual Studio 2013") shows each template
    as it would appear with the IDE configured for F# development and targeting .NET
    4.0.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Visual F#项目模板都列在新建项目对话框中的Visual F#类别下，但该类别在列表中的位置会根据你的IDE设置有所不同。如果Visual F#类别没有立即列在已安装模板下，请检查其他语言节点。如果仍然没有看到，确保已安装F#组件。[图1-1](ch01.html#fhash_project_templates_in_visual_studio
    "图1-1. Visual Studio 2013中的F#项目模板")展示了在为F#开发并针对.NET 4.0配置的IDE中，每个模板的显示方式。
- en: 'As you can see, there are five templates available. The template names are
    pretty intuitive, but here’s a rundown:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，提供了五个模板。模板名称非常直观，以下是简要说明：
- en: '****Console Application****. Creates a new command-line application.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****控制台应用程序****。创建一个新的命令行应用程序。'
- en: '****Library****. Creates a new library you can reference from other applications
    or libraries.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****库****。创建一个新的库，可以从其他应用程序或库中引用。'
- en: '![F# project templates in Visual Studio 2013](httpatomoreillycomsourcenostarchimages1981198.png.jpg)Figure 1-1. F#
    project templates in Visual Studio 2013'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Visual Studio 2013中的F#项目模板](httpatomoreillycomsourcenostarchimages1981198.png.jpg)图1-1.
    Visual Studio 2013中的F#项目模板'
- en: '****Tutorial****. Is a quick way to peek into what F# has to offer, but it’s
    not very useful for starting new projects.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****教程****。这是一个快速了解F#提供的功能的方式，但对于开始新项目来说并不太有用。'
- en: '****Portable Library****. Creates a portable class library that can be used
    by both .NET 4.5 and Windows Store applications.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****便携式库****。创建一个便携式类库，可以同时被.NET 4.5和Windows Store应用程序使用。'
- en: '****Portable Library (Legacy)****. Creates a portable class library that can
    be used by both .NET 4.0 and Silverlight applications.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****便携式库（遗留版）****。创建一个便携式类库，可以同时被.NET 4.0和Silverlight应用程序使用。'
- en: '****Silverlight Library****. Creates a new library you can reference in a Silverlight
    application.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****Silverlight库****。创建一个新的库，可以在Silverlight应用程序中引用。'
- en: Once you’ve created a project with any of these templates, you should see the
    familiar Visual Studio interface with the text editor, Solution Explorer, and
    any other windows you may normally have open. Depending on whether you’ve previously
    experimented with F#, you may also see the F# Interactive window.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使用这些模板创建了一个项目，你应该能看到熟悉的Visual Studio界面，包括文本编辑器、解决方案资源管理器以及你通常打开的其他窗口。根据你之前是否使用过F#，你也可能会看到F#互动窗口。
- en: Among the templates that are conspicuously missing are those for Windows Forms
    applications, WPF applications, and ASP.NET applications. A key reason for the
    omission is that many of the designer tools haven’t been updated to support generating
    or understanding F# code. Despite the lack of built-in templates, you can still
    construct applications with F# using these technologies, but typically you have
    to do more manual work.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 显眼缺失的模板包括Windows Forms应用程序、WPF应用程序和ASP.NET应用程序的模板。缺失的一个主要原因是许多设计工具尚未更新以支持生成或理解F#代码。尽管缺少内置模板，你仍然可以使用这些技术构建F#应用程序，但通常需要做更多的手动工作。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The F# Community Templates repository on GitHub hosts a number of additional
    templates. At the time of this writing, the repository contains only a handful
    of templates for Visual Studio, but over time it’s likely that templates for other
    editors, such as Xamarin Studio, will be added to the mix. You can find the repository
    at* [https://github.com/fsharp/FSharpCommunityTemplates/](https://github.com/fsharp/FSharpCommunityTemplates/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*GitHub上的F#社区模板库托管了多个额外的模板。写本文时，库中仅包含少量的Visual Studio模板，但随着时间推移，可能会添加针对其他编辑器（如Xamarin
    Studio）的模板。你可以在* [https://github.com/fsharp/FSharpCommunityTemplates/](https://github.com/fsharp/FSharpCommunityTemplates/)
    *找到该库。*'
- en: Project Organization
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目组织
- en: When you first see Visual Studio’s project workspace after creating a project
    from one of the aforementioned templates, you may be tempted to think that an
    F# project is just like a C# or Visual Basic project. In some regards, it is.
    For instance, you can start executable projects by pressing F5, the Visual Studio
    debugger can step through F# code, and files are managed with Solution Explorer.
    However, project organization in F# is very different from that of the traditional
    .NET languages. In fact, you’ll probably find that F#’s code structure is almost
    as foreign as the language itself.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次看到 Visual Studio 在从上述模板创建项目后的项目工作区时，可能会误以为 F# 项目和 C# 或 Visual Basic 项目一样。从某些方面来看，确实如此。例如，你可以通过按
    F5 启动可执行项目，Visual Studio 调试器可以逐步执行 F# 代码，文件通过解决方案资源管理器进行管理。然而，F# 的项目组织与传统 .NET
    语言有很大的不同。实际上，你可能会发现 F# 的代码结构几乎和语言本身一样陌生。
- en: Traditional .NET projects generally follow the convention of one type per file;
    that is, individual data types are almost always stored in separate files and
    organized into a folder hierarchy that mirrors the project’s namespaces. Aside
    from avoiding circular assembly references, there are very few steadfast rules
    on how or when something can appear within a project. Barring any accessibility
    modifiers (public, private, and so on), types and members are free to reference
    each other and their members regardless of where they are defined in the project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 .NET 项目通常遵循每个文件一个类型的惯例；也就是说，单独的数据类型几乎总是存储在不同的文件中，并按与项目命名空间相对应的文件夹层次结构进行组织。除了避免循环程序集引用外，关于如何或何时在项目中出现某个元素，几乎没有什么固定的规则。除非涉及访问修饰符（如
    public、private 等），否则类型和成员可以互相引用，不管它们在项目中定义的位置在哪里。
- en: 'Some rules are meant to be broken, but in this case F# shredded the project
    organization rulebook and then burned the remains. It is incredibly prescriptive
    about how projects are organized, and for good reason: F# code is evaluated from
    top to bottom. This means that not only is the order of declarations within an
    individual code file significant, but the order of the files within your project
    is significant as well!'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有些规则是可以打破的，但在这种情况下，F# 彻底摧毁了项目组织规则书，然后焚烧了残骸。它对项目的组织方式有着极其严格的规定，且理由充分：F# 代码是自上而下进行评估的。这意味着，不仅单个代码文件内的声明顺序很重要，项目中的文件顺序同样至关重要！
- en: It’s common for new F# programmers to add a new file to the project, fill in
    some definitions, and then get compiler errors stating that the new definitions
    are missing. This is usually because the programmer forgot to move the newly created
    file above the files that will use the definitions. Fortunately, changing file
    order within an F# project is relatively painless because there are context menu
    items and hotkeys to move files up and down, as shown in [Figure 1-2](ch01.html#move_and_add_options_in_solution_explore
    "Figure 1-2. Move and Add options in Solution Explorer’s context menu").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 F# 程序员常常会向项目中添加一个新文件，填入一些定义，然后出现编译错误，提示新定义缺失。这通常是因为程序员忘记将新创建的文件移动到会使用这些定义的文件之前。幸运的是，在
    F# 项目中更改文件顺序相对简单，因为 IDE 中有上下移动文件的右键菜单和快捷键，如 [图 1-2](ch01.html#move_and_add_options_in_solution_explore
    "图 1-2. 在解决方案资源管理器的上下文菜单中移动和添加选项")所示。
- en: The other major implication of F#’s top-down evaluation order is that folders
    are not allowed. Folders wouldn’t necessarily break the evaluation order, but
    they certainly do complicate it, so there’s no option within the IDE to add them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: F# 自上而下的评估顺序的另一个重要影响是，不允许使用文件夹。文件夹本身不会破坏评估顺序，但它们确实会使其变得更加复杂，因此在 IDE 中没有添加文件夹的选项。
- en: You might be wondering what advantage such an evaluation structure could possibly
    offer. The primary benefit is that the compiler can make more assumptions about
    your code and, as a result, give you type inference capabilities unrivaled by
    any other .NET language. Furthermore, this evaluation structure avoids inadvertent
    recursive definitions (when two or more types depend on each other). This makes
    you think a bit more about how and where your types are used, and it forces you
    to be explicit about recursive definitions where they’re appropriate.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，这种评估结构究竟能带来什么优势。其主要好处是，编译器可以对你的代码做出更多假设，从而为你提供其他 .NET 语言无法比拟的类型推断能力。此外，这种评估结构避免了不经意的递归定义（即两个或多个类型相互依赖）。这促使你更多地思考类型的使用方式和使用位置，并且在合适的地方强制你明确递归定义。
- en: '![Move and Add options in Solution Explorer’s context menu](httpatomoreillycomsourcenostarchimages1981200.png.jpg)Figure 1-2. Move
    and Add options in Solution Explorer’s context menu'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![Solution Explorer 的上下文菜单中的移动和添加选项](httpatomoreillycomsourcenostarchimages1981200.png.jpg)图
    1-2. Solution Explorer 中上下文菜单的移动和添加选项'
- en: Significance of Whitespace
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空白字符的重要性
- en: Newcomers to F# are usually quick to notice the absence of braces or `BEGIN`
    and `END` delimiters. Rather than relying on syntactic tokens to denote code blocks,
    the designers of F# decided to make whitespace significant.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 新接触 F# 的人通常会很快注意到缺少大括号或 `BEGIN` 和 `END` 分隔符。F# 的设计者并没有依赖语法符号来表示代码块，而是决定让空白字符具有意义。
- en: Code that is inside a block must be indented farther than the line that opens
    the block. For example, when you define a function, the lines belonging to the
    function’s body must begin to the right of the first character of the function
    declaration. It doesn’t really matter how far the lines are indented, only that
    they are indented and that the indentation level is consistent for each line in
    a block.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个代码块内的代码必须比打开该代码块的行缩进得更远。例如，当你定义一个函数时，属于函数体的行必须比函数声明的第一字符向右缩进。缩进的距离并不重要，重要的是代码被缩进，并且同一个代码块中的每行缩进级别要保持一致。
- en: With most programming languages, this is the point where the age-old debate
    of tabs versus spaces would flare up, but this is not the case in F#. The F# compiler
    rules with an iron fist on this matter and expressly forbids tabs because the
    number of spaces that a given tab character represents is unknown. When you begin
    writing F#, you’ll probably want to configure the options for Visual Studio’s
    text editor to insert spaces in place of tabs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程语言中，这通常是制表符与空格之间的老生常谈的争论点，但在 F# 中并非如此。F# 编译器在这个问题上采取了铁腕政策，明确禁止使用制表符，因为制表符所代表的空格数是不可知的。当你开始编写
    F# 时，你可能希望配置 Visual Studio 的文本编辑器选项，将制表符替换为空格。
- en: One Syntax to Rule them All
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一种语法，统领一切
- en: 'To say that F# requires consistent indentation or that it expressly forbids
    tabs isn’t completely accurate. F# actually has two syntax formats: verbose and
    lightweight. The verbose format requires you to be more explicit with your code
    but isn’t as sensitive to indentation. Under verbose syntax you denote the end
    of a code block not by decreasing the indentation level, but by using additional
    keywords like `end` and `done`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 说 F# 需要一致的缩进，或者明确禁止制表符，并不完全准确。F# 实际上有两种语法格式：冗长格式和轻量格式。冗长格式要求你更明确地编写代码，但对缩进不那么敏感。在冗长语法下，代码块的结束不是通过减少缩进级别来表示的，而是通过使用额外的关键字，如
    `end` 和 `done` 来表示。
- en: In F#’s infancy, verbose format was the norm, but as the language has matured,
    the lightweight syntax has gained favor and is now the default. Of course, there
    are other differences between verbose and lightweight syntax, but they are beyond
    the scope of this book. None of the examples in this book use verbose syntax,
    but should you yearn to write more code, you can revert to verbose syntax by opening
    a code file with the `#light off` directive.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 F# 的初期，冗长格式是标准，但随着语言的发展，轻量语法逐渐受到青睐，现在成为了默认语法。当然，冗长格式和轻量格式之间还有其他差异，但它们超出了本书的范围。本书中的所有示例都没有使用冗长语法，但如果你渴望编写更多代码，可以通过在代码文件中使用
    `#light off` 指令来恢复到冗长语法。
- en: Grouping Constructs
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码分组构造
- en: 'There are two primary ways to group code in F#: namespaces and modules. In
    single-file projects, declaring a namespace or module is optional, as the contents
    of the file will implicitly become a module with the same name as the file—for
    example, if your file is named *Program.fs*, the module will automatically be
    named `Program`. In all other cases, though, each file must begin with a namespace
    or module declaration.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: F# 中有两种主要的代码分组方式：命名空间和模块。在单文件项目中，声明命名空间或模块是可选的，因为文件的内容会隐式地成为一个与文件同名的模块——例如，如果你的文件名是
    *Program.fs*，那么模块会自动命名为 `Program`。然而，在所有其他情况下，每个文件必须以命名空间或模块声明开始。
- en: Namespaces
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名空间
- en: F# namespaces are the same as in C# and Visual Basic in that they allow you
    to group related code by a name to reduce the likelihood of a naming conflict.
    Namespaces can include modules and type definitions but cannot directly include
    any values or functions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: F# 的命名空间与 C# 和 Visual Basic 中的命名空间相同，它们允许你通过名称对相关代码进行分组，从而减少命名冲突的可能性。命名空间可以包含模块和类型定义，但不能直接包含任何值或函数。
- en: 'You declare namespaces with the `namespace` keyword followed by an identifier.
    For example, a namespace for the code in this book might look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`namespace`关键字后跟标识符来声明命名空间。例如，本书中的代码可能会有如下的命名空间：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also declare more granular namespaces by nesting them. Nested namespaces
    are declared with fully qualified names, with each level separated by a dot (`.`).
    For instance, we could group all the code for this chapter in a nested namespace
    like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过嵌套命名空间来声明更细粒度的命名空间。嵌套的命名空间使用完全限定的名称声明，每个层级由点（`.`）分隔。例如，我们可以将本章的所有代码分组到一个嵌套的命名空间中，如下所示：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Just as in the other .NET languages, you can split namespaces across files and
    assemblies. You can also declare multiple namespaces within a single file, but
    you cannot nest them inline; each namespace declaration must be a top-level block.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在其他.NET语言中一样，你可以将命名空间分割到多个文件和程序集。你还可以在一个文件中声明多个命名空间，但不能将它们内联嵌套；每个命名空间声明必须是顶级块。
- en: 'In the event that you want to place code in .NET’s global namespace, you can
    declare the namespace with the `global` keyword as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将代码放入.NET的全局命名空间，可以使用`global`关键字声明命名空间，如下所示：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Whenever you declare a namespace, other code already loaded into that namespace
    is immediately made available to your code. For all other cases, though, you must
    either fully qualify the type or module names or import them using the `open`
    keyword, as you would with a `using` directive in C# or an `Imports` statement
    in Visual Basic. The following snippet shows both approaches:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你声明一个命名空间时，已经加载到该命名空间中的其他代码会立即对你的代码可用。然而，在所有其他情况下，你必须完全限定类型或模块名称，或者使用`open`关键字导入它们，就像在C#中使用`using`指令或在Visual
    Basic中使用`Imports`语句一样。以下代码片段展示了这两种方法：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Modules
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块
- en: Modules are similar to namespaces in that they allow you to logically group
    code. Unlike namespaces, however, they can directly contain values and functions.
    In practice, modules are more closely related to classes containing only static
    members in other .NET languages; in fact, that’s how they’re represented in the
    compiled assembly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 模块与命名空间类似，因为它们允许你逻辑地分组代码。然而，与命名空间不同，模块可以直接包含值和函数。实际上，模块更像是其他.NET语言中只包含静态成员的类；事实上，它们就是这样在编译后的程序集中的表现。
- en: 'Modules fall into one of two categories: top-level and local. *Top-level* modules
    contain all the code in a single implementation file. By contrast, *local* modules
    are used when multiple modules or types not belonging to a module are defined
    in the same file.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模块分为两类：顶级模块和本地模块。*顶级*模块将所有代码包含在一个单一的实现文件中。相反，*本地*模块用于当多个模块或不属于任何模块的类型在同一文件中定义时。
- en: 'You declare modules with the `module` keyword followed by an identifier, like
    this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`module`关键字后跟标识符来声明模块，如下所示：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Unlike namespaces, module definitions cannot span multiple files, but you can
    define multiple modules within a single file. You can also nest modules directly
    within a parent module like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与命名空间不同，模块定义不能跨文件，但你可以在单一文件中定义多个模块。你也可以像这样将模块直接嵌套在父模块中：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you want to use both a namespace and a top-level module, F# provides a
    convenient syntactic shortcut that combines them into a single declaration. To
    take advantage of this, simply include the fully qualified name before the module
    name, as shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想同时使用命名空间和顶级模块时，F#提供了一个方便的语法快捷方式，将它们合并为单个声明。要利用这一点，只需在模块名称前包含完整的限定名称，如下所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding snippet, we declare a module named `QualifiedModule` within
    the `TheBookOfFSharp.Chapter1` namespace.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们在`TheBookOfFSharp.Chapter1`命名空间中声明了一个名为`QualifiedModule`的模块。
- en: 'As a final note, you can import module members through the `open` keyword as
    though they belong to a namespace. For instance, to import any types defined in
    `QualifiedModule`, we could write:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过`open`关键字导入模块成员，就像它们属于一个命名空间一样。例如，要导入`QualifiedModule`中定义的任何类型，我们可以写：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To simplify this process for commonly used modules, you can decorate the module
    with the `AutoOpen` attribute like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化这个过程，你可以使用`AutoOpen`属性来修饰模块，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By applying this attribute to a module, whenever you explicitly open the namespace
    containing the module, the module will also be opened.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将该属性应用于模块，每当你显式地打开包含该模块的命名空间时，模块也会被打开。
- en: Expressions Are Everywhere
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式无处不在
- en: 'One of F#’s distinguishing characteristics is that it is an *expression-based*
    language; that is, nearly everything that’s evaluated returns a result. As you
    learn F#, you’ll quickly discover that writing applications and libraries is an
    exercise in combining expressions to produce results. This is a stark contrast
    to languages like C#, where typically only methods (and operators) return a result.
    In F#, seemingly familiar constructs like `if...else` gain new life because, like
    all expressions, the `if...else` expression returns a result. Consider the following
    snippet, which uses C#’s `if...else` statement to print a string indicating whether
    a number is even or odd:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: F#的一个显著特征是它是一种*基于表达式*的语言；也就是说，几乎所有被求值的内容都会返回结果。当你学习F#时，你会很快发现，编写应用程序和库是通过组合表达式来产生结果的练习。这与C#等语言形成鲜明对比，在这些语言中，通常只有方法（和运算符）返回结果。在F#中，像`if...else`这样的看似熟悉的结构焕发新生，因为就像所有表达式一样，`if...else`表达式会返回结果。考虑下面这段代码，它使用C#的`if...else`语句打印一个字符串，表示一个数字是偶数还是奇数：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, compare that with this functionally equivalent code in F#, which uses
    the `if...else` expression instead:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，比较一下这段功能等效的F#代码，它使用了`if...else`表达式：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first thing you probably noticed is that the F# version is more concise.
    What might not be immediately apparent, though, is that the F# version eliminates
    the mutable state that’s present in the C# version (`evenOrOdd` is uninitialized
    before it is assigned a value). This isn’t necessarily an issue in this simple
    example because the mutable state is isolated, but in larger applications, mutable
    state contributes to a fragile and often unpredictable code base.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能首先注意到的是，F#版本更简洁。然而，可能不那么明显的是，F#版本消除了C#版本中的可变状态（`evenOrOdd`在赋值之前是未初始化的）。在这个简单的示例中，这不是问题，因为可变状态是隔离的，但在更大的应用程序中，可变状态会导致脆弱且常常不可预测的代码库。
- en: You might argue (correctly) that we could write the C# code using C#’s conditional
    operator instead of the `if...else` statement to achieve the same effect as the
    F# code. But the main point of this example is that even seemingly familiar constructs
    return values in F#.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会争辩（正确地说）我们可以使用C#的条件操作符来代替`if...else`语句，从而实现与F#代码相同的效果。但这个例子的关键点在于，即使是看似熟悉的结构，在F#中也会返回值。
- en: Application Entry Point
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序入口点
- en: 'In an F# application, the initializations defined in the last file of the project
    are used as the application’s entry point by default. For more control over how
    your application starts, you can define a `let` bound function as the application’s
    entry point by decorating it with the `EntryPoint` attribute. This allows you
    to use an arbitrary function for what would be the `Main` method or procedure
    in a C# or Visual Basic application, respectively. Accordingly, the decorated
    function must accept a string array and return an integer to be valid. Such a
    function would typically follow this pattern:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在F#应用程序中，项目中最后一个文件中定义的初始化程序默认作为应用程序的入口点。为了更好地控制应用程序的启动方式，你可以通过使用`EntryPoint`特性装饰一个`let`绑定的函数来将其作为应用程序的入口点。这允许你使用任意函数来代替C#或Visual
    Basic应用程序中的`Main`方法或过程。因此，装饰过的函数必须接受一个字符串数组并返回一个整数，才能被视为有效。这样的函数通常遵循以下模式：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Implicit Return Values
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式返回值
- en: Because F# is a language steeped in expressions, the F# compiler can make more
    assumptions about your code. Because all expressions return a value and all functions
    are expressions, it is implied that all functions will return a value. Therefore,
    the compiler can assume that the last expression evaluated within a function is
    the function’s return value; you don’t need to explicitly state it as such with
    a keyword like `return`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于F#是一种以表达式为基础的语言，F#编译器能够对你的代码做出更多的假设。因为所有表达式都会返回值，所有函数也是表达式，所以可以推断所有函数都会返回一个值。因此，编译器可以假设在函数中最后一个被求值的表达式就是函数的返回值；你无需显式使用`return`关键字来声明它。
- en: 'As an example, consider the `main` function from the previous section. In that
    function, `0` is implicitly returned because it’s the final expression evaluated
    in the function. Similarly, consider this function, which simply adds two integers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑上一节中的`main`函数。在这个函数中，`0`是隐式返回的，因为它是该函数中最后被求值的表达式。类似地，考虑这个函数，它只是简单地将两个整数相加：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, the `add` function accepts two parameters, `x` and `y`, and contains
    only a single expression: an addition operation. Because the addition operation
    is the last expression evaluated when `add` is invoked, `add` implicitly returns
    the result of that operation.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`add` 函数接受两个参数，`x` 和 `y`，并且只包含一个表达式：加法操作。由于加法操作是在调用 `add` 时最后一个被评估的表达式，`add`
    隐式地返回该操作的结果。
- en: Your First F# Program
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的第一个 F# 程序
- en: 'Now that you’ve learned how to structure an F# project, it’s time to see some
    “real” F# code that goes beyond basic syntax. Although the instant gratification
    of a traditional “Hello world”–type application is a nice confidence booster when
    you’re starting out with a new language, I’ve decided to forego that approach
    in favor of an example that both is useful and provides a nice sampling of many
    of F#’s capabilities: a Reverse Polish Notation (RPN) calculator.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何构建 F# 项目，是时候看看一些“真实”的 F# 代码了，这些代码超越了基本的语法。尽管传统的“Hello world”类型应用程序的即时满足感是刚开始学习新语言时很好的信心提升，但我决定放弃这种方法，转而选择一个既有用又能很好展示
    F# 多种功能的示例：一个逆波兰表示法（RPN）计算器。
- en: RPN is a postfix notation for mathematical expressions; that is, it’s a manner
    of expressing computations where each operator immediately follows its operands.
    For example, to express computing the sum of 1 and 2, we’d normally write `1 +
    2`; when using RPN, however, we’d write `1 2 +`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: RPN 是一种后缀表示法，用于数学表达式；也就是说，它是一种表示计算的方式，每个运算符紧跟其操作数。例如，要表示计算 1 和 2 的和，我们通常会写作
    `1 + 2`；然而，使用 RPN 时，我们会写作 `1 2 +`。
- en: You typically implement RPN calculators by iterating over a sequence of numbers
    and operators. Each item is inspected and numbers are pushed onto a stack, whereas
    operators pop the appropriate number of operands from the stack, evaluate, and
    push the result back onto the stack. At the end of the process, the sole item
    remaining in the stack should be the expression’s result. [Figure 1-3](ch01.html#application_of_reverse_polish_notation
    "Figure 1-3. Application of Reverse Polish Notation") roughly illustrates how
    this process looks when applied to the expression `4 2 5 * +`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以通过遍历一系列数字和运算符来实现 RPN 计算器。每个项目都会被检查，数字会被压入堆栈，而运算符则从堆栈中弹出适当数量的操作数，进行计算，并将结果重新压入堆栈。处理结束时，堆栈中剩下的唯一项目应为表达式的结果。[图
    1-3](ch01.html#application_of_reverse_polish_notation "图 1-3. 逆波兰表示法应用") 大致说明了当该过程应用于表达式
    `4 2 5 * +` 时的情况。
- en: '![Application of Reverse Polish Notation](httpatomoreillycomsourcenostarchimages1981202.png)Figure 1-3. Application
    of Reverse Polish Notation'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![逆波兰表示法应用](httpatomoreillycomsourcenostarchimages1981202.png)图 1-3. 逆波兰表示法应用'
- en: Working from left to right, you can see how items are added to and removed from
    the stack, ultimately producing `14` as the result. As you’re about to see, though,
    implementing a basic RPN calculator in F# takes only a few lines of code and doesn’t
    even require managing a mutable stack!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右工作，你可以看到如何向堆栈中添加和移除项目，最终得出`14`作为结果。不过，正如你将看到的，使用 F# 实现一个基本的逆波兰表示法（RPN）计算器只需要几行代码，甚至不需要管理一个可变堆栈！
- en: 'If you’d like to follow along with this example in Visual Studio, create a
    new project using the F# Application template. When you’re ready, replace the
    text editor’s contents with the following code (note that F# is case sensitive):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在 Visual Studio 中跟随这个示例进行操作，创建一个使用 F# 应用程序模板的新项目。准备好后，将文本编辑器的内容替换为以下代码（请注意，F#
    是区分大小写的）：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When you’ve finished entering the RPN calculator code, press F5 and observe
    the output. You should see the results depicted in [Figure 1-4](ch01.html#reverse_polish_notation_calculator_resul
    "Figure 1-4. Reverse Polish Notation calculator results").
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成输入 RPN 计算器代码后，按 F5 键并观察输出。你应该能看到如 [图 1-4](ch01.html#reverse_polish_notation_calculator_resul
    "图 1-4. 逆波兰表示法计算器结果") 所示的结果。
- en: '![Reverse Polish Notation calculator results](httpatomoreillycomsourcenostarchimages1981204.png.jpg)Figure 1-4. Reverse
    Polish Notation calculator results'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![逆波兰表示法计算器结果](httpatomoreillycomsourcenostarchimages1981204.png.jpg)图 1-4.
    逆波兰表示法计算器结果'
- en: Don’t be discouraged if the RPN calculator code doesn’t make much sense right
    now; that’s the point! For now it’s enough to recognize that the entire RPN calculation
    is contained within the `evalRpnExpr` function. I like starting with this example
    because it not only shows some idiomatic F# code, but it also demonstrates a number
    of important concepts, such as default immutability, functions as data, pattern
    matching, recursion, library functions, partial application, F# lists, and pipelining.
    These concepts work together to create highly expressive and predictable code.
    Throughout this book, you’ll explore each of these concepts and many more in detail.
    As you progress through the book, I encourage you to revisit this example periodically
    to see just how much functionality is contained within such a small program.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在看不懂RPN计算器的代码，不要气馁；这正是重点！目前你只需要明白整个RPN计算都包含在`evalRpnExpr`函数中。之所以从这个例子开始，是因为它不仅展示了一些地道的F#代码，还演示了许多重要的概念，比如默认不可变性、函数作为数据、模式匹配、递归、库函数、部分应用、F#列表和管道化。这些概念协同作用，创建了高度表达性且可预测的代码。在本书的过程中，你将详细探讨这些概念及更多内容。随着阅读的深入，我鼓励你定期回顾这个例子，看看这样一个小程序包含了多少功能。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Despite a reputation as a niche language, F# is an expressive, functional-first,
    multiparadigm language rooted in ML and useful for most modern software development
    activities. As you’ll see in the coming chapters, writing F# effectively is about
    learning how to combine the types, functions, and values you’ll define in namespaces
    and modules into expressions. That said, traditional .NET developers will have
    to adjust to some of the language’s nuances like top-down evaluation, whitespace
    significance, and implicit returns. Once you get over the initial learning curve,
    however, you’ll see how F#’s simple yet expressive syntax will enable you to solve
    complex problems while producing code that is more stable and predictable.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管F#有着作为小众语言的声誉，但它是一门富有表现力、以函数为核心、支持多范式的语言，根植于ML，并且对大多数现代软件开发活动都非常有用。正如你将在接下来的章节中看到的，编写高效的F#代码就是学习如何将你在命名空间和模块中定义的类型、函数和数值组合成表达式。也就是说，传统的.NET开发者需要适应语言的一些细微差别，如自上而下的求值、空格的意义以及隐式返回。然而，一旦你克服了初始的学习曲线，你就会看到F#简单却富有表现力的语法将使你能够解决复杂的问题，并且写出的代码更稳定、可预测。
