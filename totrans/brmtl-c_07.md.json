["```\nint aNumber;        // A number\n```", "```\nint anArray[5];     // An array of numbers\n```", "```\nanArray[3] = 99;    // Store an element in the array.\n\nif (anArray[3] == 98) {\n```", "```\nanArray[4] = 0;     // Legal\n```", "```\nanArray[5] = 9;     // Illegal, 5 is too big\n```", "```\n/*\n * Sum up a series of numbers.\n */\n#include <stdio.h>\n\nint main()\n{\n    const int NUMBER_ELEMENTS = 5;      // Number of elements\n    int numbers[NUMBER_ELEMENTS];       // The numbers\n    int sum;                            // The sum so far\n    int current;                        // The current number we are adding\n\n    numbers[0] = 5;\n    numbers[1] = 8;\n numbers[2] = 9;\n    numbers[3] = -5;\n    numbers[4] = 22;\n\n    sum = 0;\n    // Loop over each element and add them up.\n    for (current = 0; current < NUMBER_ELEMENTS; ++current)\n    {\n        sum += numbers[current];\n    }\n    printf(\"Total is %d\\n\", sum);\n    return (0);\n}\n```", "```\n// Define some numbers to sum.\nint numbers[5] = {5 8, 9, -5, 22};\n```", "```\n// Define some numbers to sum.\nint numbers[] = {5 8, 9, -5, 22};\n```", "```\nuint8_t* thingPtr;      // A pointer to an integer\n```", "```\nuint8_t thing = 5;      // A thing\nthingPtr = &thing;      // thingPtr points to 5.\n```", "```\notherThing = *thingPtr; // Get what's pointed to by thingPtr.\n```", "```\n/*\n * Demonstrate pointers.\n */\n#include <stdio.h>\n#include <stdint.h>\n\nint main()\n{\n    uint8_t smallThing = 5;     // Something small\n    uint8_t smallThing2 = 6;    // Something else small\n    uint64_t largeThing = 987654321; // Something large\n\n    uint8_t* smallPtr;          // Pointer to small thing\n    uint64_t* largePtr;         // Pointer to large thing\n  1 printf(\"smallThing %d\\n\", smallThing);\n    printf(\"sizeof(smallThing) %lu\\n\", sizeof(smallThing));\n    printf(\"largeThing %ld\\n\", largeThing);\n    printf(\"sizeof(largeThing) %lu\\n\", sizeof(largeThing));\n\n    // smallPtr points to smallThing.\n    smallPtr = &smallThing;\n\n  2 printf(\"smallPtr %p\\n\", smallPtr);\n    printf(\"sizeof(smallPtr) %lu\\n\", sizeof(smallPtr));\n    printf(\"*smallPtr %d\\n\", *smallPtr);\n\n    // smallPtr points to smallThing2.\n    smallPtr = &smallThing2;    \n    printf(\"*smallPtr %d\\n\", *smallPtr);\n\n    largePtr = &largeThing;\n    printf(\"largePtr %p\\n\", largePtr);\n    printf(\"sizeof(largePtr) %lu\\n\", sizeof(largePtr));\n    printf(\"*largePtr %ld\\n\", *largePtr);\n\n    return (0);\n}\n```", "```\nsmallThing 5\nsizeof(smallThing) 1\n```", "```\nsmallPtr 0x7fffc3935dee\nsizeof(smallPtr) 8\n*smallPtr 5\n```", "```\nlargeThing 987654321\nsizeof(largeThing) 8\n\nlargePtr 0x7fffc3935df0\nsizeof(largePtr) 8\n*largePtr 987654321\n```", "```\nint array[5] = {1,2,3,4,5};\nint* arrayPtr = array;\n```", "```\nint i = array[1];\n```", "```\nint i = *(arrayPtr+1);\n```", "```\n/*\n * Demonstrate the relationship between arrays and pointers.\n */\n#include <stdio.h>\nint main()\n{\n    int array[] = {1,2,3,4,-1}; // Array\n    int* arrayPtr = array;      // Pointer to array\n\n    // Print array using array.\n    for (int index = 0; array[index] >= 0; ++index) {\n        printf(\"Address %p Value %d\\n\",\n               &array[index], array[index]);\n    }\n    printf(\"--------------\\n\");\n    // Same thing with a pointer\n    for (int index = 0; *(arrayPtr +index) >= 0; ++index) {\n        printf(\"Address %p Value %d\\n\",\n                arrayPtr + index, *(arrayPtr + index));\n    }\n    printf(\"--------------\\n\");\n    // Same thing using an incrementing pointer\n    for (int* current = array; *current >= 0; ++current) {\n printf(\"Address %p Value %d\\n\", current, *current);\n    }\n\n}\n```", "```\nAddress 0x7fffa22e0610 Value 1\nAddress 0x7fffa22e0614 Value 2\nAddress 0x7fffa22e0618 Value 3\nAddress 0x7fffa22e061c Value 4\n```", "```\n/*\n * Demonstrate what happens\n * when you overflow an array.\n */\n#include <stdio.h>\n\nint main()\n{\n    int numbers1[5] = {11,12,13,14,15};   // Some numbers\n    int numbers2[5] = {21,22,23,24,25};   // Variable to be overwritten\n\n  1 printf(\"numbers2[0] %d\\n\", numbers2[0]);\n\n  2 numbers1[8] = 99;   // <------------ Illegal\n\n    // Illegal -- loops past the end\n    for (int i = 0; i < 9; ++i)\n        printf(\"numbers1[%d] %p\\n\", i, &numbers1[i]);\n\n    printf(\"numbers2[%d] %p\\n\", 0, &numbers2[0]);\n  3 printf(\"numbers2[0] %d\\n\", numbers2[0]);\n    return (0);\n} \n```", "```\nnumbers2[0] 21\nnumbers1[0] 0x7ffc5e94ff00\nnumbers1[1] 0x7ffc5e94ff04\nnumbers1[2] 0x7ffc5e94ff08\nnumbers1[3] 0x7ffc5e94ff0c\nnumbers1[4] 0x7ffc5e94ff10\nnumbers1[5] 0x7ffc5e94ff14\nnumbers1[6] 0x7ffc5e94ff18\nnumbers1[7] 0x7ffc5e94ff1c\nnumbers1[8] 0x7ffc5e94ff20\nnumbers2[0] 0x7ffc5e94ff20\nnumbers2[0] 99\n```", "```\nint array[5];\n// Wrong\nfor (int i = 1; i <= 5; ++i)\n    array[i] = 0;\n```", "```\nchar stop = 'S'; // Character to indicate stop\n```", "```\n/*\n * Hello World using string variable\n */\n#include <stdio.h>\n\n// The characters to print\nconst char hello[] = {'H', 'e', 'l', 'l', 'o', ' ',\n                      'W', 'o', 'r', 'l', 'd', '\\0'};\n\nint main()\n{\n    puts(hello); // Write string and newline\n    return (0);\n}\n```", "```\nconst char hello[] = \"Hello World\";   // The characters to print\n```", "```\nconst char* const hello = \"Hello World\";   // The characters to print\n```", "```\n/**\n * @brief Program to demonstrate the use of const\n * with pointers\n */\n\nchar theData[5] = \"1234\";             // Some data to play with\n\n      char*       allChange;          // Pointer and value can change\nconst char*       dataConst = \"abc\"   // Char const, pointer not\n      char* const ptrConst = theData; // Char var, ptr not\nconst char* const allConst = \"abc\";   // Nobody change nothing\n\nint main()\n{\n    char otherData[5] = \"abcd\";   // Some other data\n\n    allChange = otherData;        // Change pointer\n    *allChange = 'x';             // Change data\n\n    dataConst = otherData;        // Change pointer\n    // *dataConst = 'x';          // Illegal to change data\n\n    // ptrConst = otherData;      // Illegal to change pointer\n    *ptrConst = 'x';              // Change data\n\n    // allConst = otherData;      // Illegal to change pointer\n    // *allConst = 'x';           // Illegal to change data\n    return (0);\n}\n```"]