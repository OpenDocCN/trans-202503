- en: '**CHAPTER 2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ANIMATIONS**
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get more familiar with ScratchJr by creating some simple animations. To
    get your characters moving, you just need to give them scripts that describe how
    you want them to move.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll do four small activities together, and then we’ll make a final animation
    at the end of the chapter!
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 2: MAKE YOUR CAT MOVE!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you get the ScratchJr cat to move from one side of the screen to the other?
    Figure out how many Move Right blocks you need!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get more familiar with ScratchJr by creating some simple animations. To
    get your characters moving, you just need to give them scripts that describe how
    you want them to move.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll do four small activities together, and then we’ll make a final animation
    at the end of the chapter!
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 2: MAKE YOUR CAT MOVE!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you get the ScratchJr cat to move from one side of the screen to the other?
    Figure out how many Move Right blocks you need!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll do four small activities together, and then we’ll make a final animation
    at the end of the chapter!
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 2: MAKE YOUR CAT MOVE!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you get the ScratchJr cat to move from one side of the screen to the other?
    Figure out how many Move Right blocks you need!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 2: MAKE YOUR CAT MOVE!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you get the ScratchJr cat to move from one side of the screen to the other?
    Figure out how many Move Right blocks you need!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Can you get the ScratchJr cat to move from one side of the screen to the other?
    Figure out how many Move Right blocks you need!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you will explore some options for making the cat move on the
    screen. All motion in ScratchJr follows a grid, and you’ll discover how to change
    the number of steps along this grid using the motion blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also learn how to use the Start on Green Flag block to reset your cat’s
    position so that you can run your script again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You can make a very simple script with lots of Move Right blocks, and the cat
    will take one step to the right for each block. But isn’t it a lot of work to
    drag and connect all these motion blocks together?
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: There must be a better way to do this. . . .
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Aha! There is a number at the bottom of each motion block. Let’s see what happens
    when you change it.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: When you tap the number at the bottom of the motion block, a keypad appears
    on the right side of the programming area. Enter a new number with the keypad,
    and then tap the block. Notice how far the cat moves with just one programming
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the meaning of this number a little more.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tap the **Grid** button at the top of the screen to show the grid.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a grid appear on the stage. This grid will help you keep track
    of where your characters are on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now tap your script again. See what happens when the cat moves from one
    spot to another on the stage? The blue square will move with your cat, and the
    blue numbered circles will indicate the cat’s new position on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Try to make your cat visit every corner of the stage by using the first
    four motion blocks in the blue blocks palette.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. If you start your script with a **Start on Green Flag** block and you run
    the script by tapping the Green Flag button at the top of the screen, the cat
    will reset itself to its starting position before the script runs.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: This will make it easier for you to make changes in your script and retest it,
    since the cat will always start from the same location. You can change the cat’s
    starting position by dragging the cat to another location on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. When you are finished having the cat visit all four corners of the stage,
    save your project by tapping the **Home** button (). You’ll return to the home
    screen, where you can access all of your projects and make new ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: There is no block for diagonal movement in ScratchJr. If you want to move the
    cat to a corner of the screen, you will have to move it to that spot with motion
    blocks for horizontal steps and vertical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: If you have multiple motion blocks of the same kind in a row, see if you can
    simplify your script by changing the number input.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the Hop block and see what happens when you change the number
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that changing the number input to 4 will not have the same effect as
    putting two Hop blocks next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the number input on a Hop block controls how high a character
    will hop, not how many times a character will hop.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: SPELLING A NAME**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve programmed your cat to move, come up with a name for the cat!
    Tap the **Paintbrush** button to go to the paint editor, and replace the word
    *Cat* at the top with your cat’s name. Think about how each letter sounds as you
    try to spell it.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: SEEING HOW MANY WAYS YOU CAN GET TO 10**'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can calculate which number on the grid the cat will end up on after
    you run your script. How many different scripts can you create that will make
    the cat move to that particular location?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: there are many different ways to write a script and get to 10! Play around
    with changing the number inputs for the motion blocks to see what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Children may have trouble understanding that one motion block can be used to
    make a character move several steps. Try setting up these two scripts to show
    how they make a character move the same distance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 3: MAKE YOUR CAT TURN!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll make your cat turn right (clockwise) or left (counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll create another new project and learn how to use the
    Turn Right and Turn Left blocks to tilt your cat clockwise or counterclockwise.
    See how many times your cat has to turn right or left to make a full circle. Then
    try thinking of other ways you could use these blocks!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. From the home screen, tap the plus sign to make a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Turn Right** block from the blue blocks palette to the programming
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the number input, and tap the **Turn Right** block to see how the
    cat responds.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment to figure out what number will make the cat turn upside down. Then
    figure out what the number should be to make the cat turn a full circle.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Don’t forget to start your script with a **Start on Green Flag** block so
    that the cat returns to a vertical position before turning.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now try the same thing with the **Turn Left** block!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you can drag the cat around on the screen with your finger, and
    this will reset the cat’s starting position. You can’t rotate the cat with your
    finger, though! You have to use a motion block to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: See whether you can make the cat do a cartwheel by making it turn and move forward
    *at the same time* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: use two scripts for this and start both scripts at the same time with
    a Start on Green Flag block. You can also use this trick with Move Right and Move
    Up blocks to make the cat move diagonally!'
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: DESCRIBING FEELINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a story about why your cat is spinning. Is the cat happy? Sad? Dizzy?
    Explain your project to a friend, and make sure they understand why your cat is
    feeling that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: TELLING TIME**'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how a clock’s hands move around its face, and compare that direction
    to the direction of the cat when it turns. Which one of the turn blocks—Turn Left
    or Turn Right—moves the cat in the same direction as a clock’s hands?
  prefs: []
  type: TYPE_NORMAL
- en: See how many times the cat has to turn to go a quarter of the way around a circle.
    If you double the number input, will the cat turn halfway around the circle?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the Turn Right and Turn Left blocks in terms of a clock face.
    Each turn moves the cat “one hour”—that is, one-twelfth of the full circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 4: LET’S PLAY HIDE-AND-SEEK!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: The cat in this activity is playing a game of hide-and-seek. The cat will disappear
    and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](text00007.html#ch01) , you used a purple block to make a character
    say something. In this activity, you will learn how to use the purple Hide and
    Show blocks to make the cat disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, select the purple category of blocks—the looks blocks. These control
    how a character looks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drag the **Hide** and **Show** blocks to the programming area, but don’t
    snap them together yet. Tap the **Hide** block to see what happens. Now tap the
    **Show** block. These blocks make a character disappear and reappear.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now drag two more sets of **Hide** and **Show** blocks to the programming
    area, and snap them onto the first set to make a script that causes the cat to
    disappear and then reappear three times.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the script to see how your cat plays hide-and-seek.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: If you combine motion blocks with the Hide and Show blocks, you will see that
    your cat can still move even when it’s hidden!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Try to make your cat disappear and then reappear at another place on the screen.
    Can you make your cat disappear and then reappear twice, each time moving to a
    new place on the screen? How about three times?
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Try out other purple looks blocks, such as Grow and Shrink, to see how they
    change your cat’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: How large can you make the cat? How small can you make it? Notice what happens
    when you change the number input on these blocks. See if you can get the cat back
    to its original size. See whether the Start on Green Flag block has any effect
    on the cat’s size.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TELLING A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Why does your cat keep disappearing? Think of a story about why your cat is
    disappearing and reappearing, and share this story with a friend. Remember to
    speak clearly and explain what is happening in your scripts to help you tell the
    story!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: OBSERVING AND COUNTING**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of times your cat disappears and how many times it reappears.
    Does this match the number of blocks you used?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a conversation about what happens when you place a programming
    block after the Hide block. Sometimes children have trouble understanding why
    they cannot see their character complete a script after it has disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a Start on Green Flag block will reset a character’s position, but
    it will not make a hidden character visible.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 5: DO SOMETHING OVER AND OVER!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll make your cat repeat multiple actions on the stage
    without using multiple blocks of the same kind.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, if you wanted to repeat an action, you had to use several blocks
    of the same kind or change the number input on a block.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you’ll learn how to use the Repeat block and the Repeat Forever
    block to repeat one or more actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at your script from the previous activity:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: The first two blocks (the Hide block and the Show block) make the cat disappear
    and reappear. This pattern of Hide and Show blocks is then repeated two more times.
    But rather than use all of these blocks, you can use a Repeat block to make the
    first pattern run several times.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First, delete the last four blocks of the script by dragging them back to
    the blocks palette. You are left with only a single Hide block and a single Show
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now, tap the orange category of blocks to reveal the *control blocks* .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drag the **Repeat** block to the programming area and position it around
    the two purple looks blocks.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number in the bubble of the Repeat block to whatever you
    want. If you want the script to do exactly what it did in the previous activity,
    you would change this number to 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a big number to make your cat disappear and reappear many times,
    but what if you want the cat to disappear and reappear forever? Then, instead
    of using a Repeat block, you could end your script with the Repeat Forever block.
    Try it! (To stop a repeating script, tap the red stop sign button that replaces
    the green flag button while a script is running.)
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You can drag multiple blocks around the programming area at the same time. To
    delete four of the six Hide and Show blocks from your previous script in one motion,
    just put your finger on the third block and drag it back to the blocks palette.
    All of the blocks to the right of that block will move with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Put other blocks inside and outside of the Repeat block. Try out some motion
    blocks from the blue category. Notice how the animation changes depending on whether
    a block is or is not included in the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You could also have a Repeat block within a script that ends with a Repeat Forever
    block. Try it! The entire script will repeat forever, and each time it repeats,
    the blocks inside the Repeat block will repeat for the number of times specified
    by the number input.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: COMPARING YOUR SCRIPTS TO SENTENCES**'
  prefs: []
  type: TYPE_NORMAL
- en: As your cat moves on the stage, you will see that the blocks in your scripts
    light up one at a time, starting at the left end of the script and ending at the
    right end of the script. The blocks light up from left to right because ScratchJr
    reads your script in the same way you read sentences in a book! Some blocks take
    longer to run than others, a bit like how some words take longer to say.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: Point out to children that they can follow the flow of a script by looking at
    the blocks in the programming area while the script is running. The blocks will
    become a darker shade of their color when they are running. In this picture, the
    Show block is a darker shade of purple, which means it is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: The next time you run a ScratchJr script, watch closely and you’ll see how the
    program runs. Seeing the exact action each block performs is one of the advantages
    of playing a script in the main interface rather than in Presentation Mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPARING TWO SCRIPTS**'
  prefs: []
  type: TYPE_NORMAL
- en: Make a script that uses the Repeat block, and make another script that does
    the same thing but does not use the Repeat block. Compare the two scripts and
    explain why they do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When you wrap a series of blocks in a Repeat block, you will see a gray shadow
    from the Repeat block appear in the programming area before you drop it. This
    shadow will show you exactly which blocks will fall inside the Repeat block.
  prefs: []
  type: TYPE_NORMAL
- en: You can still add blocks in after you’ve dropped the Repeat block, so don’t
    worry if you can’t get the shadow to wrap around all the blocks you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! OLD MACDONALD’S FARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project you will make a farm with three animals and a barn, and you
    will program the animals to start moving when you tap the Green Flag button. You
    will use the skills that you learned in this chapter: move, turn, show, hide,
    and repeat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make a farm with at least three animals.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To set the scene, we can find a background that will give the animals a
    good place to graze. Tap the **Change Background** button, tap the farm, and then
    tap the check mark to load the farm onto the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Now we can add the farm animals. Let’s start with a rabbit. Tap the plus
    sign under the cat to add a new character. Select the rabbit and then tap the
    check mark.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. We want to make the rabbit disappear, reappear, and then move in different
    directions when we tap the Green Flag button. Drag the following blocks to the
    programming area, and snap them together to make this script:'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now that you’ve created a script for the rabbit, can you add more animals
    to your scene and create programs for them so that they also move when you tap
    the Green Flag button?
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Add at least two more animals to your farm, and give them programs to make the
    animals move around the stage. You might add a chicken that hops around using
    the Hop block. Or you can add a pig that turns around in circles. Perhaps you
    might add a cow and use the Move Left and Move Right blocks with a Repeat Forever
    block to keep it moving.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Which animals are going to be on your farm? Add different animals if you want
    to!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a chicken and a pig, your farm will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. You can see that this farm doesn’t have a cat. To delete the cat from your
    project, press and hold it. When the red X appears, tap it to delete the cat.
    You can also delete the cat by pressing and holding it on the stage instead of
    in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can also see that this farm has a barn. The barn is one of the characters
    that you can add to your project. Try adding it to your farm too.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when you have multiple characters in your project, and each character
    has a script that begins with the Start on Green Flag block, you should start
    the action by tapping the Green Flag button at the top of the screen. If, instead,
    you tap the Start on Green Flag block in your script, only the selected character
    will move.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Can you put yourself on the farm? Create a character that looks like you! Here’s
    how you can do it. Tap the new character button, pick a person with a blank face,
    and tap the check mark.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: To add your own face to the character, you’ll have to edit it. Tap the **Paintbrush**
    button next to the character you chose.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: The paint editor opens. To add your face, tap the Camera tool, and then tap
    the face of the character.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now be able to take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: Line up your own face so it looks good, and then tap the **Camera** button.
    You’re really in ScratchJr now!
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: BUILDING NEW VOCABULARY**'
  prefs: []
  type: TYPE_NORMAL
- en: Go over the vocabulary for the different kinds of animals that live on a farm.
    Can you use any of these new words in your Old MacDonald project?
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can add text to your project, create characters that look like
    letters, or even rename existing characters!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING THE BLOCKS YOU’VE USED**'
  prefs: []
  type: TYPE_NORMAL
- en: Count the number of blocks in your project. How many blue (motion), yellow (triggering),
    and purple (looks) blocks did you use? Create a chart or graph showing the different
    blocks you used. Which block color did you use the most?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: If some characters do not move when you tap the Green Flag button at the top
    of the screen, double-check that the scripts for all of the characters begin with
    a Start on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes children may get frustrated because their character is not moving
    in the way that they expected. Explain that an important part of the programming
    process is *debugging* —that is, testing your program, figuring out what went
    wrong, and then improving the program.
  prefs: []
  type: TYPE_NORMAL
