- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 9 LABELS AND NONSEQUENTIAL EXECUTION
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9 标签与非顺序执行
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In politics, labels have gotten a bad reputation, but at the most basic level,
    a *label* is an identifier that concisely defines a product or an object in as
    few words as possible. Commerce would grind to a halt if we didn’t have labels;
    grocery stores would contain shelves and shelves of mysterious canned products.
    What’s for dinner? It might be beans or pumpkin pie mix; we won’t know until we
    open it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在政治领域，标签常常被误解，但在最基本的层面上，*标签*是一个标识符，它以尽可能少的字词简明地定义一个产品或对象。如果没有标签，商业就会停滞不前；超市会堆满满满的神秘罐头产品。晚餐吃什么？可能是豆子，也可能是南瓜派混合粉；我们打开之前无法知道。
- en: 'Without labels Batch wouldn’t be thrown into quite this level of disarray,
    but an important tool for creating more complex bat files would be missing from
    your coder’s toolbox. Up until now every bat file, snippet, and listing in this
    book has executed sequentially. The interpreter interprets each line, one by one,
    executing the first command first, followed by the second. This continues until
    one of two things happens: either the final command of the bat file is interpreted,
    or a syntax error crashes the bat file. Labels allow you to execute Batch commands
    in a nonsequential manner. In this chapter, I’ll introduce the concept of branching
    forward and backward in the code, repeating some section of code based on a data
    condition and even creating a couple commands not intrinsic to Batch.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 没有标签，Batch 文件不会完全陷入这种混乱，但作为创建更复杂批处理文件的重要工具，它将缺失在你的编程工具箱中。到目前为止，本书中的每个批处理文件、代码片段和列表都是按顺序执行的。解释器逐行解释，每次先执行第一条命令，然后是第二条。这一过程会一直继续，直到发生以下两种情况之一：要么是批处理文件的最后一条命令被解释，要么是语法错误导致批处理文件崩溃。标签允许你以非顺序的方式执行
    Batch 命令。在本章中，我将介绍如何在代码中进行前后分支、根据数据条件重复某些代码段，甚至创建一些 Batch 本身不包含的命令。
- en: 'Labels will also afford me a great opportunity to discuss a topic that’s exceedingly
    important: coding conventions, in particular, indentation.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 标签还为我提供了一个很好的机会，来讨论一个至关重要的话题：编码规范，尤其是缩进。
- en: Labels
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标签
- en: A *label* in Batch is what you might expect it to be, a tag defining a block
    of code. More specifically, a certain spot or location in the bat file is *labeled*.
    A label isn’t a command, and although it’s never executed, you’ll soon see that
    it’s critical to the execution flow.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Batch 中，*标签*就是你可能预期的那样，一个定义代码块的标签。更具体地说，批处理文件中的某个位置或点被*标记*为标签。标签本身不是命令，虽然它从未被执行，但你很快会发现它对于执行流程至关重要。
- en: 'Labels can contain letters, numbers, and some special characters, and, most
    important, they must start with a colon. Oddly, the name of the label can contain
    additional colons, but never in the second position. For example, here’s some
    code being defined or labeled for exactly what it does, checking the state of
    a specific variable:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 标签可以包含字母、数字和一些特殊字符，最重要的是，它们必须以冒号开头。奇怪的是，标签名可以包含额外的冒号，但绝不能出现在第二个位置。例如，这里有一些代码，按照它的作用进行了定义或标记，用于检查特定变量的状态：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Similarly, this bit of code handles a very rudimentary abort process and is
    labeled as such:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，这段代码处理一个非常基本的中止过程，并被标记为这样：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I’ll discuss the exit command in [Chapter 10](chapter10.xhtml). For now, it’s
    simply being used to get out of the bat file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第10章](chapter10.xhtml)中讨论退出命令。现在，它仅用于退出批处理文件。
- en: Defining a label is straightforward, but before getting into the impactfulness
    of labels and how to use them, allow me a digression, maybe even a rant, on coding
    conventions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 定义标签非常简单，但在深入了解标签的影响及如何使用它们之前，请允许我稍微偏离一下，甚至有点愤怒地谈谈编码规范。
- en: Indentation
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进
- en: Many Batch coders refuse to indent their code. I’m not sure why, as every other
    language I'm familiar with has some sort of a convention, if not a hard requirement,
    on indentation. My best guess is that at its core is a fundamental disrespect
    of the language, considering Batch a utilitarian nuisance that must be dispatched
    with as quickly as possible with no regard for readability, much less aesthetics.
    For your Batch code to garner the respect it merits, I recommend starting all
    commands with an indentation of two spaces. Indent all logic inside the code blocks
    of if commands (and similar structures yet to be discussed) another three spaces,
    with nested structures indented even more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多批处理编码员拒绝给他们的代码添加缩进。我不太清楚原因，因为我所熟悉的每种编程语言都有某种约定，即使不是强制要求，也有对缩进的规范。我的最佳猜测是，批处理语言本质上缺乏对其本身的尊重，认为批处理只是一个必须尽快完成的工具性麻烦，根本不考虑可读性，更别提美学了。为了让你的批处理代码赢得应有的尊重，我建议所有命令前加上两个空格的缩进。在
    if 命令的代码块（以及其他类似结构，后面会讨论）内部，缩进再加三个空格，嵌套结构则应缩进更多。
- en: This topic might seem like a non sequitur in a chapter about labels, but in
    reality, it’s the ideal location. Labels should stand out a bit, or even more
    than a bit. A well-formatted document of any kind has parts, chapters, sections,
    and/or subsections, where each often has some sort of a header or cue—or dare
    I say *label*—that visually stands out from the rest of the text with a different
    font, font size, emboldening, underlining, colorization, or a combination of some
    or all of the above. These options are unavailable when writing a bat file. Our
    arsenal for the task has been reduced to one significant item, indentation, with
    a nod to capitalization and whitespace.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题可能在讲解标签的章节中看起来有些不合时宜，但实际上，这是最理想的位置。标签应该稍微突出一点，甚至更突出。任何格式良好的文档都有部分、章节、节和/或小节，每个部分通常都有某种标题或提示——或者我敢说是
    *标签*——通过不同的字体、字号、加粗、下划线、着色或上述几种方式的组合，使其在视觉上与其余文本区别开来。然而，在编写 bat 文件时，这些选项都不可用。我们的工具库只剩下一个重要的项目——缩进，同时也可以借助大写字母和空格。
- en: 'Since the first character of a label is always a colon, I always place that
    colon in the second byte of the line, reducing my typical indentation to one character.
    Therefore, when anyone, including myself, views a bat file that I’ve written,
    all the labels stand out. I reserve the first character of a line for the start
    of a rem command. For instance, here’s a rudimentary remark, label, and two simple
    commands:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标签的第一个字符总是冒号，因此我通常将冒号放在行的第二个字符位置，这样我的典型缩进就减少为一个字符。因此，当任何人，包括我自己，查看我编写的 bat
    文件时，所有标签都会非常明显。我将行的第一个字符保留给 rem 命令的开始。例如，下面是一个基本的备注、标签和两个简单的命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The uppercase character after the colon in the label also adds to its prominence.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 标签中的冒号后的大写字母也增加了其显著性。
- en: I hope I’m not coming across as the Stalin of Batch coding conventions. This
    is just one coder’s opinion, and other well-thought-out conventions exist that
    are different from mine. What’s important is that the code should be easy to read.
    There are many ways to accomplish this, but a complete lack of indenting most
    certainly fails the test, even if this topic brings out my autocratic side.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我不是把自己当作批处理编码规范的斯大林。这只是一个编码员的个人意见，实际上还有许多经过深思熟虑、与我不同的规范。重要的是代码应该易于阅读。实现这一点有很多方法，但完全不缩进肯定无法通过测试，即使这个话题让我显得有些专制。
- en: The goto Command
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: goto 命令
- en: 'Now that we have a label defining a snippet of code, what good is it? Some
    coders actually use labels as makeshift remarks (which is fine, I guess), but
    the true function of a label is to direct the process flow to the code under the
    label. This is where the goto command comes into play, and it does what it sounds
    like it would do. It instructs the interpreter to skip to (or go to) a location
    in the code defined by a label. Consider these two commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了一个定义代码片段的标签，那它有什么用呢？一些编码员实际上将标签当作临时备注（我想这也没问题），但标签的真正功能是指引程序流向标签下方的代码。这就是
    goto 命令的作用，它按字面意思指示解释器跳转到由标签定义的代码位置。考虑以下两个命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The goto commands are sending control to the :Abort and :DoSomething labels
    defined previously in this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: goto 命令将控制转到本章前面定义的 :Abort 和 :DoSomething 标签。
- en: Well, that’s not entirely true; the first command sends the execution to the
    abort routine, and the second goto command never executes. In a bat file, a label
    itself can come before or after the goto command that branches to it, but what’s
    important to understand is that the execution never returns to the command immediately
    after the goto command. Once the goto is executed, we are totally at the mercy
    of the code under the label.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这不完全正确；第一条命令将执行跳转到abort例程，第二个goto命令永远不会执行。在bat文件中，标签本身可以出现在goto命令之前或之后，但重要的是要明白，一旦执行了goto命令，执行不会返回到goto命令后的那条命令。执行一旦跳转，我们就完全受制于标签下的代码。
- en: 'To go to a label defined as :Abort, you can also do so with this command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳转到定义为:Abort的标签，你也可以使用以下命令：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Two things are going on here. First, the colon has been dropped from the label
    name in the goto command. I suspect that this is an early bug that Microsoft won’t
    fix to maintain backward compatibility. Second, the actual label has only the
    A capitalized, but the goto command shows the entire label name capitalized.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两件事。首先，goto命令中标签名称的冒号被省略了。我怀疑这是一个早期的错误，微软为了保持向后兼容性可能不会修复。其次，实际的标签只有A是大写的，但goto命令显示的是整个标签名称都大写。
- en: This example demonstrates that the label name is case-insensitive, as Batch
    is in general, and that the colon is optional in the goto command. While the interpreter
    makes this permissible, I see no reason for the two label names to differ in any
    way as it can only breed confusion. Consistency is key.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了标签名称是大小写不敏感的，就像Batch通常一样，并且在goto命令中冒号是可选的。虽然解释器允许这样做，但我认为没有理由让两个标签名称有所不同，因为这只会引起混乱。保持一致性是关键。
- en: The call command introduced in [Chapter 8](chapter8.xhtml) is also used in conjunction
    with labels, but its behavior is quite distinct from the goto command. I’ll come
    back to the call command and those differences in [Chapter 10](chapter10.xhtml).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](chapter8.xhtml)中介绍的call命令也与标签一起使用，但其行为与goto命令非常不同。我将在[第10章](chapter10.xhtml)中回到call命令和这些区别。
- en: Branching Forward
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 前进分支
- en: 'The goto command sends control or the process flow in one of two directions;
    one is to branch forward over code. Three echo commands write text to the console
    in this example, but only the first and third are executed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: goto命令将控制权或流程转向两个方向之一；一个是跳过代码的前进分支。在这个例子中，三个echo命令将文本输出到控制台，但只有第一个和第三个会被执行：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It’s not hard to imagine more complex code using this technique. A goto command
    might be done conditionally based on the results of an if command, and instead
    of branching over a single echo command, it might be skipping a far larger section
    of code. For instance, you can skip the execution of one or more programs if a
    certain file is present or not present, or if a failure is detected, you can jump
    to the code that will abort the bat file’s execution, skipping everything else.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易想象使用这种技术的更复杂代码。一个goto命令可能基于if命令的结果有条件地执行，而不仅仅是跳过单个echo命令，它可能跳过更大的一段代码。例如，如果某个文件存在或不存在，或者检测到失败，你可以跳转到将中止bat文件执行的代码，跳过其他所有内容。
- en: 'The goto can also be a tool to break out of a loop. Unfortunately, I haven’t
    discussed loops yet; in [Part II](part2.xhtml), I’ll discuss the for command and
    loops extensively. But for now, to understand this logic you need to know only
    that this loop will execute once for each name listed in the listOfNames variable,
    regardless of how many names it contains:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: goto也可以作为跳出循环的工具。不幸的是，我还没有讨论循环；在[第二部分](part2.xhtml)中，我将详细讨论for命令和循环。但现在，为了理解这个逻辑，你只需要知道这个循环会根据listOfNames变量中列出的每个名称执行一次，不管它包含多少个名称：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The if command is searching for a particular name. If and when it’s found, the
    goto command breaks out of the loop, jumping down to the label on the last line.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: if命令在搜索特定名称。如果找到了，它会让goto命令跳出循环，跳转到最后一行的标签。
- en: This is important for two reasons. One, it’s efficient—if the name is found
    near the beginning of the list, CPU cycles aren’t wasted pointlessly searching
    the rest of the list. More important, the echo command is never executed if the
    name is found. Notice that the logic not only breaks out of the loop prematurely
    but also branches over the writing of the message that indicates that the name
    wasn’t found.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，原因有两个。首先，它是高效的——如果名字出现在列表的前面，CPU不会浪费周期去无谓地搜索列表的其余部分。更重要的是，如果名字被找到，echo
    命令就不会被执行。请注意，逻辑不仅提前跳出了循环，而且还跳过了写出未找到名字的消息的部分。
- en: Branching Backward
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向后跳转
- en: The examples in the previous section use a goto command to skip forward in the
    code. Next, I’ll look at examples of a goto command going in the reverse direction.
    But first, I’ve already discussed how we can build certain components of more
    modern languages that aren’t explicitly part of Batch (think booleans and floats),
    but many others are yet to come. Batch doesn’t have a while command, nor does
    it support a do...while command. In other languages, a while command executes
    a block of code zero to multiple times until a condition is met. A do...while
    command is very similar; the only difference is that the code block will execute
    once before the condition is evaluated. Let’s create both of these in Batch.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中的示例使用了 goto 命令来跳过代码的前进。接下来，我将展示一些 goto 命令反向跳转的示例。但首先，我已经讨论了如何构建一些更现代语言的组件，这些组件并不是批处理语言的一部分（比如布尔值和浮点数），但很多其他组件还未出现。批处理没有
    while 命令，也不支持 do...while 命令。在其他语言中，while 命令会根据条件执行一段代码零次或多次，直到条件满足。do...while
    命令也非常类似；唯一的区别是，在评估条件之前，代码块会执行一次。让我们在批处理中创建这两种命令。
- en: The while “Command”
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: while “命令”
- en: To demonstrate the usefulness of a Batch while command, we’ll write some code
    that’ll strip all leading zeros off a value, a necessity for any coder not wanting
    to perform octal arithmetic accidentally (long story on that in [Chapter 6](chapter6.xhtml)
    if you missed it). The while command might execute a bit of code as long as—or
    *while*—the first byte is 0, and that code will do nothing more than strip off
    one leading byte.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示批处理 while 命令的有用性，我们将编写一些代码，去除值的所有前导零，这对于任何不想意外执行八进制算术的程序员来说是必要的（如果你错过了，可以在[第六章](chapter6.xhtml)找到详细解释）。while
    命令会执行一段代码，只要——或者 *当*——第一个字节是 0，并且这段代码将仅仅做一件事：去除一个前导字节。
- en: 'The following code performs the task perfectly:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码完美地执行了任务：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The interpreter essentially ignores the label when it’s first encountered and
    interrogates the first character of nbr. If it’s zero, the code next verifies
    that there’s a second byte—that is, that the 0 is in fact leading something. If
    both are true, the code block is entered, where it strips off the leading 0 before
    the goto command sends control back to the label just prior to the if command.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器在第一次遇到标签时，基本上会忽略它，并检查 nbr 的第一个字符。如果是 0，接下来代码会验证是否有第二个字节——也就是说，0 是否确实位于某个值的前面。如果两者都成立，代码块会被执行，它会移除前导
    0，然后 goto 命令将控制权传回到 if 命令之前的标签。
- en: Let’s step through the code with three different numbers to really get a feel
    for the logic. If the variable has no leading 0, the code block is never executed.
    If it has one leading 0, the code block is executed once. Then the leading byte
    is checked again, and since it’s no longer 0, the execution flow proceeds to whatever
    comes next. If nbr has 17 leading 0s, the code block removing a 0 executes 17
    times, and after the leading byte is checked an 18th time, the execution moves
    on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过三个不同的数字逐步查看代码，真正理解其逻辑。如果变量没有前导 0，则代码块永远不会执行。如果有一个前导 0，则代码块执行一次。然后，再次检查前导字节，由于它不再是
    0，执行流程将继续执行后续的内容。如果 nbr 有 17 个前导 0，移除 0 的代码块会执行 17 次，在前导字节第 18 次检查后，执行流程继续向下进行。
- en: The word *while* doesn’t appear in that listing, but it does everything a proper
    while command would. As far as I’m concerned, it’s a Batch while command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中并没有出现 *while* 这个词，但它做的事情和一个标准的 while 命令一样。就我而言，它就是一个批处理中的 while 命令。
- en: NOTE
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*The previous snippet is the first example I’ve shown of one if command nested
    inside another, but you’ll see many more nested commands in the chapters ahead.
    As another note on coding conventions, I’ve stacked the two trailing close parentheses
    on a single line in that listing. This makes the code more compact, especially
    when nesting multiple levels deep, and it keeps the focus on the interesting logic,
    but I concede that I’m in the minority. Most Batch coders line up each close parenthesis
    with its respective if command. This requires more lines of code, but the following
    is functionally equivalent to my previous code:*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Do what feels right to you and do it consistently. Also, notice that the label
    name contains a numeric value. As mentioned previously, we aren’t restricted to
    letters of the alphabet. And by the way, doesn’t that indentation look nice?*'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The do...while “Command”
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A Batch do...while command looks quite similar; the only difference is that
    the main logic must be executed at least once. In languages with a built-in do...while
    command, the conditional clause usually comes at the tail end of the structure
    (understandably after the main logic is executed once), and Batch is no different.
    Compared to the while command, the main logic is moved from inside the if command
    code block to just after the label and prior to the if command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate, let’s take an example where the textStr variable is to be right-padded
    with at least one space to build it out to a minimum of 25 bytes in length. If
    the original string is less than 25 bytes long, the result will be 25 bytes; if
    it’s originally at least 25 bytes long, a single space will be appended to the
    result. (The string might be part of some concatenated text to be displayed on
    the console, where the space-padding will line up the columns. But of course,
    we’ll want a space between it and whatever comes next, even if it requires an
    extra byte.)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'The fact that the right padding must be done at least once lends itself to
    the do...while command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As with the while command, the label precedes the bulk of the code, but the
    core logic immediately follows it, which in this case is a single set command
    padding the string with one space. Then the 25th byte is examined. (Remember,
    it’s zero-offset.) If it doesn’t exist, the goto command sends the execution back
    to the label so that another space can be appended to the string. This repeats
    until that 25th byte is populated, ensuring that the string is at least 25 bytes
    long and also that at least one space has been added regardless of the length.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 26](chapter26.xhtml), I’ll detail how to perform automatic restarts
    of a failed process that might work if tried again with little more than a label
    and a goto command—also known as the do...while command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The :eof Label
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One special label not created by the coder but intrinsic to all bat files is
    :eof, which stands for *end of file*. When the following goto :eof command executes
    in the main logic of a called bat file, control is returned to the calling bat
    file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Executing the same command in the high-level bat file will cease the process
    entirely even though no label defined as :eof exists in the bat file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: If you’re of the contrarian nature and decide to define your own :eof label,
    the interpreter will simply ignore it as if it were a nonsensical remark. In [Chapter
    10](chapter10.xhtml), I’ll explore this unique label further, in particular, how
    the interpreter handles the goto :eof command when inside a callable routine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Variable Labels
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Working in a language that doesn’t have a compiler has some definite downsides,
    but I’ve already shown you some silver linings (delayed expansion, for example).
    One more is the ability to define the label name in a goto command at the time
    of execution, although the label itself must be hardcoded. To set that up, envision
    a different label for each month of the year. The first three are shown here without
    their respective month-centric code beneath them:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Obviously, the following command will send the execution to one particular
    label in the previous snippet:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'But that’s old news by now. More interesting, if the variable month is set
    to the value February, the following command will call the same label:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The argument to this goto command is the concatenation of the hardcoded :Month
    and the value of the month variable. After the variable is resolved, the command
    directs the execution to the label :MonthFebruary. The same goes for the other
    valid months, meaning that the same line of code also goes to :MonthMarch if month
    is set to the value of March.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'But that does raise the question of what happens when the resulting label name
    doesn’t exist in the bat file, for instance, if month is set to Erele (February
    in the Yoruba language). The interpreter writes the following message to the console:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Unfortunately, you’ll never see this message because the process will immediately
    crash.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](chapter10.xhtml), you’ll see that Batch handles a bad label
    name better when used with a call command, but if you use this technique with
    a goto command, ensure that the argument resolves to a valid label.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, I introduced the concept of labels and how to navigate to them
    via the goto command. You learned how to create labels, explored tips on their
    use, and saw how instrumental they are in the building of the while and do...while
    commands. I also introduced the indispensable :eof label.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: But you can navigate to labels in two distinct ways. Much of the next chapter
    will also focus on labels and how you can use them to create callable routines
    inside a bat file. I’ll also detail how to call one bat file from another, a crucial
    topic as you begin creating projects too complex for a single bat file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
