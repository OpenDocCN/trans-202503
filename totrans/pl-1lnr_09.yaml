- en: Appendix B. Using Perl One-Liners On Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this appendix, I’ll show you how to run Perl on Windows, install a bash
    port on Windows, and use Perl one-liners in three different ways: from the Windows
    bash port, the Windows command prompt (*cmd.exe*), and PowerShell.'
  prefs: []
  type: TYPE_NORMAL
- en: B.1 Perl on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can run Perl on Windows, you need to install Perl for Windows. My
    favorite Windows Perl port is Strawberry Perl (*[http://strawberryperl.com/](http://strawberryperl.com/)*),
    a Perl environment with everything you need to run and develop Perl applications
    on Windows. Strawberry Perl is designed to function as much as possible like the
    Perl environment on UNIX systems. It includes Perl binaries, the gcc compiler
    and related build tools, and many external libraries.
  prefs: []
  type: TYPE_NORMAL
- en: To install Strawberry Perl, download and run the installer, click through a
    bunch of menus a few times, and you’re done. My choice for the installation directory
    is *c:\strawberryperl*. (Installing any UNIX software for Windows in a directory
    with no spaces in it is always a good idea.) Once the installation is done, the
    installer should put the installation directory in your path environment variable
    so you can run Perl from the command line right away.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the Windows command line is really basic compared to the command
    line on UNIX systems. A UNIX system runs a real shell with well-defined command-line
    parsing rules, but Windows doesn’t really have anything like that. The Windows
    command line has weird rules about how it treats certain symbols, the quoting
    rules aren’t well defined, and the escaping rules are strange, all of which makes
    it difficult to run Perl one-liners. Therefore, the preferred way to run one-liners
    on Windows is to use a UNIX shell (such as bash) for Windows, as you’ll learn
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: B.2 Bash on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting a bash shell to run on Windows is simple. I recommend win-bash (*[http://win-bash.sourceforge.net/](http://win-bash.sourceforge.net/)*),
    a stand-alone bash port for Windows that doesn’t need a special environment or
    additional DLLs. The download is a single zip file that contains the bash shell
    (*bash.exe*) and a bunch of UNIX utilities (such as awk, cat, cp, diff, find,
    grep, sed, vi, wc, and about 100 others).
  prefs: []
  type: TYPE_NORMAL
- en: To install bash and all the utilities, simply unzip the file and you’re done.
    My choice for the installation directory is *c:\winbash*, again with no spaces
    in the directory. Run *bash.exe* from *c:\winbash* to start the bash shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you start *bash.exe* after you install Strawberry Perl, Perl should be available
    for use right away because the Strawberry Perl installer should have updated the
    path with the installation directory. To confirm, run `perl --version`. It should
    output the version of the installed Perl. If you get an error saying that `perl`
    was not found, manually append the *C:\strawberryperl\perl\bin* directory to the
    `PATH` environment variable by entering this in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bash uses the `PATH` variable to find executables to run. By appending Strawberry
    Perl’s binary directory to the `PATH` variable, you tell bash where to look for
    the `perl` executable.
  prefs: []
  type: TYPE_NORMAL
- en: B.3 Perl One-Liners in Windows Bash
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some important differences between bash on Windows and UNIX. The first
    difference pertains to file paths. Win-bash supports both UNIX-style and Windows-style
    paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say you install win-bash in *C:\winbash*. When you start *bash.exe*, it should
    map the root directory */* to the current C: drive. To change the root directory
    to another drive, such as D:, enter `cd d:` in the bash shell. To change back
    to C:, enter `cd c:` in the shell. Now you can access a file such as *C:\work\report.txt*
    via */work/report.txt, c:/work/report.txt*, or *c:\\work\\report.txt*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The best thing about using win-bash is that all of the one-liners in this book
    should work because you’re running a real shell just like in a UNIX environment!
    For example, to number the lines in the *C:\work\report.txt* file (one-liner 3.1
    on page 17), you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can refer to the file as if you were in UNIX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can use Windows-style paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid using double backslashes, you can single-quote the file path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the filename has spaces in it, then you always have to quote it. For example,
    to work with *C:\Documents and Settings\Peter\My Documents\report.txt*, quote
    the entire path when passing it to a one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the UNIX-style path to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Quoting the filename is necessary here because without it Perl thinks you’re
    passing it a bunch of files rather than a single file with spaces in it.
  prefs: []
  type: TYPE_NORMAL
- en: B.4 Perl One-Liners in the Windows Command Prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If, for some reason, you can’t use win-bash as recommended, you can run one-liners
    through the Windows command prompt (*cmd.exe*). You will need to change the one-liners
    in this book a bit if you’re running them in the Windows command prompt because
    of the way Windows parses and treats the command-line arguments. Here’s what to
    do.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, verify that Perl is available from the command prompt. Start *cmd.exe*
    and enter `perl --version` in the command line. If you do this after having installed
    Strawberry Perl, the command should output the Perl version, and you’re good to
    go. Otherwise, you’ll have to update the `PATH` environment variable with the
    path to Strawberry Perl’s binary directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As in UNIX, the `PATH` variable tells the command prompt where to look for executables.
  prefs: []
  type: TYPE_NORMAL
- en: Converting One-Liners in the Windows Command Prompt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let’s see how to convert one-liners for the command prompt, beginning with
    one-liner 2.1 (page 7), which double-spaces a file. In UNIX, you simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re running this one-liner in the Windows command prompt, however, you
    have to make sure that it’s always wrapped in double quotes from the outside and
    that you’ve escaped any double quotes and special characters inside it. With those
    changes, the one-liner looks like this on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This one-liner is getting ugly quickly, but you can employ a couple of Perl
    tricks to make it look a little nicer. First, replace double quotes inside the
    one-liner with the `qq/.../` operator, which double-quotes anything between the
    slashes. Writing `qq/text/` in Perl is the same as writing `"text"`. Now you rewrite
    this one-liner like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s a little nicer. You can also change the character that the `qq` operator
    uses to separate its content. For example, the syntax `qq|...|` double-quotes
    anything between the pipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You could even use matching parentheses or curly brackets, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'or this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how to convert several more one-liners to Windows. How about converting
    an IP address to an integer (one-liner 4.27 on page 45)? In UNIX you run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you need to change the quotes outside the one-liner to double quotes
    and escape the double quotes inside the one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can use the `qq|...|` operator to avoid escaping double quotes inside
    the one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For things that don’t need interpolation, such as the format string `N` and
    the IP address `127.0.0.1`, you can also use single quotes instead of double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Another trick is to use the `q/.../` operator, which single-quotes any text
    between the slashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Writing `q/N/` and `q/127.0.0.1/` is the same as writing `'N'` and `'127.0.0.1'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s convert another one-liner from UNIX to Windows. I’ve expanded it to multiple
    lines for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, to convert this to Windows, you have to join all of the lines
    together (making the result less readable), and apply the new quoting rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can increase the readability a little by using the `qq` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'or by using single quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Symbol Challenges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might also run into issues with the caret (`^`) symbol in one-liners because
    the Windows command prompt uses the caret as the escape symbol. To tell Windows
    to treat the caret symbol literally, you *usually* have to replace each caret
    with two carets: `^^`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at several examples that simply try to print the `^` character.
    Here’s my first attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'No output! The `^` symbol disappeared. Let’s try `^` twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This worked! It printed the `^` symbol. Now let’s try using single quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This also worked and printed `^`, and I didn’t need to enter `^` twice. Using
    `qq/^/` also works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, running one-liners on Windows can be tricky because there are
    no uniform parsing rules for the command-line arguments. You may run into similar
    issues when writing one-liners with the `%`, `&`, `<`, `>`, and `|` symbols. If
    so, try preceding them with the `^` escape character so that `%` becomes `^%`,
    `&` becomes `^&`, `<` becomes `^<`, `>` becomes `^>`, and `|` becomes `^|`. Or
    try wrapping them in the `qq` operator, as I discussed previously. (Better yet,
    install win-bash and use the one-liners through it to avoid all these issues.)
  prefs: []
  type: TYPE_NORMAL
- en: Windows File Paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using the Windows command prompt, you can pass filenames to one-liners
    in several different ways. For example, to access the file *C:\work\wrong-spacing.txt*,
    you can enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can reverse the slashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If the filename contains spaces, you have to quote the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: For more Windows Perl usage hints, see the Win32 Perl documentation at *[http://perldoc.perl.org/perlwin32.html](http://perldoc.perl.org/perlwin32.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: B.5 Perl One-Liners in PowerShell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running one-liners in PowerShell is a bit different than running them in the
    command prompt (*cmd.exe*). The main difference is that PowerShell is a modern
    shell implementation with different parsing rules than the command prompt. In
    this section, I’ll show you how to run Perl one-liners in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to verify that Perl works in the PowerShell environment. Run
    `perl --version` in the PowerShell. If the command outputs the Perl version, then
    Perl is available, and you should be able to run the one-liners. Otherwise, update
    the `Path` environment variable and append Strawberry Perl’s binary directory
    to it by running the following command in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `Path` variable tells PowerShell where to look for executables, so when
    you run `perl`, it searches all the directories (separated by the `;` character)
    for *perl.exe*.
  prefs: []
  type: TYPE_NORMAL
- en: Converting One-Liners in PowerShell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider one-liner 2.1 (page 7), which double-spaces a file. In UNIX, the one-liner
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To make this one-liner work in PowerShell, you have to change three things:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Escape the `$` symbol, which PowerShell uses for variables, by adding the ``
    ` `` character (backtick) before it: `` `$ ``.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the *cmd.exe* command prompt, make sure double quotes are used on the
    outside of the one-liner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `qq/.../` operator for the double quotes inside the one-liner, as explained
    in “Converting One-Liners in the Windows Command Prompt” on page 108\. You can’t
    just escape the double quotes with a backslash as with the command prompt, however;
    you must use the `qq/.../` operator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you put it all together, the PowerShell version of this one-liner becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify full paths to files, use Windows-style paths. For example, to reference
    a file at *C:\work\wrong-spacing.txt*, enter that path directly after the one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If the filename or file path contains spaces, enter it like this, with double
    quotes around it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for another version of the same one-liner. In UNIX the one-liner looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'But in PowerShell you have to change the outer single quotes to double quotes,
    escape the `$` symbol, and change double quotes to `qq/.../` inside the one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s look at the one-liner that numbers the non-empty lines in a file
    (one-liner 3.2 on page 18):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'When converted to PowerShell, the one-liner looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How about the artistic one-liner that checks if a number is prime (one-liner
    4.1 on page 29)?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In PowerShell, the one-liner looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember the one-liner on page 46 that converts IPs to integers? Here’s how
    it looks in UNIX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the same one-liner for PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: One-Liners in PowerShell 3.0+
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’re running PowerShell version 3.0 or later, you can use the `--%` escape
    sequence to prevent PowerShell from doing any additional parsing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out which PowerShell version you’re running, enter `$PSVersionTable.PSVersion`
    in the shell. It should output a table like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This table shows that you’re running PowerShell version 3.0, which has the `--%`
    escape sequence. (Older versions of PowerShell don’t have this sequence, in which
    case you have to use the tricks I described earlier.)
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the `--%` escape sequence, you don’t have to escape the `$` symbol.
    It also lets you escape the double quotes with backslashes inside the one-liner.
    For example, here’s how the one-liner that double-spaces lines looks with the
    `--%` escape sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `qq/.../` operator to avoid escaping double quotes inside
    the one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how you can write the other version of the same one-liner in PowerShell
    3.0 and later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is how the one-liner that numbers the lines looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the one-liner that uses a regular expression to see if a number is prime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the one-liner that converts IPs to integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, running one-liners in PowerShell is quite tricky and requires
    several workarounds. Again, I recommend that you install win-bash as described
    in “Bash on Windows” on page 106 to avoid having to implement these workarounds.
  prefs: []
  type: TYPE_NORMAL
