- en: Chapter 15. Custom Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving your finished application into production and making it available to
    users requires you to make many choices. You can choose from a variety of web
    hosting providers, Rails application servers, databases, and automated deployment
    systems. In [Chapter 6](ch06.html "Chapter 6. Deployment"), you learned about
    Heroku, a hosting service that uses Git for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Most large companies have an operations team to configure servers and deploy
    applications. But as a beginning Rails programmer, you may not have the luxury
    of a dedicated operations team to deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll set up a server to host your application, configure
    your application’s production environment, push your application to GitHub, and
    finally deploy to your server using Capistrano.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *virtual private server (VPS)* is a type of virtual machine sold by web hosting
    providers. A single physical server can run many virtual private servers. An individual
    VPS is often referred to as an *instance*.
  prefs: []
  type: TYPE_NORMAL
- en: When you buy a VPS, you get part of the processing power, memory, and disk space
    of a larger physical server. You get you full access to your part of the server,
    including the ability to choose your operating system. So you are free to install
    the software you need and configure the server however you like. Unfortunately,
    you are also responsible for any installation and configuration errors on the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Many different hosting providers offer VPS services. A quick Google search leads
    to hundreds of competing providers. A popular choice among both startups and established
    companies is Amazon Web Services (AWS).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The rest of this chapter uses AWS to set up a server and deploy your application,
    but the instructions are not AWS specific. If you would rather use a different
    service, create an instance running Ubuntu Linux 14.04 LTS, and you should be
    able to follow along with no problem. Ubuntu Linux 14.04 LTS is a long-term support
    release with guaranteed support until April 2019.*'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon AWS Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to being a popular choice, Amazon also provides an AWS free usage
    tier for new users. You can read more about the free usage tier at *[http://aws.amazon.com/free/](http://aws.amazon.com/free/)*
    to see if you qualify. Even if you don’t qualify for the free usage tier, you
    can still get an AWS Micro instance for a few cents an hour.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon calls their VPS service *Amazon Elastic Compute Cloud (Amazon EC2)*.
    Rather than cover the details of setting up your Amazon account here, please refer
    to the Amazon EC2 documentation at *[http://aws.amazon.com/documentation/ec2/](http://aws.amazon.com/documentation/ec2/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **User Guide** link, and follow the instructions, starting with Setting
    Up. This section walks you through the process of signing up for AWS, creating
    a user account in the AWS Identity and Access Management (IAM) system, creating
    a key pair, and creating a security group. Be sure you store your IAM credentials
    and private key—you’ll need them for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Then move on to Getting Started. In this section, you should launch an EC2 instance,
    connect to your instance, add a storage volume, and finally clean up your instance
    and volume. The EC2 user guide uses an Amazon Linux machine image that we won’t
    be using again, so be sure to follow the clean-up instructions in the User Guide
    when you’re done with this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’re up to speed on Amazon EC2, you can set up your production server
    as described in this section. I recommend Ubuntu Linux, so the instructions that
    follow are Ubuntu specific. From the EC2 Management Console, click the **Launch
    Instance** button to create a new server instance, and choose the Ubuntu Server
    14.04 LTS (PV) Amazon Machine Image in the Quick Start section. Because this is
    a web server, you need to configure the security group to allow HTTP traffic.
    Click the **Next** button in the Launch Instance wizard until you reach Step 6:
    Configure Security Group. Now click the **Add Rule** button, select **HTTP** from
    the Type drop-down menu, and click the **Review and Launch** button. Finally,
    click the **Launch** button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the instance is running, make note of the public DNS name displayed in
    the EC2 Management Console, and then connect to the instance with SSH in a terminal
    window. Using the following command, replace `your_key_file` with the full path
    to the private key file you created in the Setting Up section of the EC2 User
    Guide and `your_instance_name` with the public DNS name of your instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The default user account on the Ubuntu AMI is named *ubuntu*. So this command
    connects to the user named ubuntu at your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu Linux Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’re connected, you can configure the instance for hosting Ruby on Rails
    applications. Enter all of the commands in this section on your instance over
    the SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu uses a system called `apt-get` for installing software from online repositories.
    The first thing you need is Ruby. Unfortunately, the default repositories often
    contain an older version of Ruby, but you have a way around that.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The developers at a hosting company called Brightbox have set up their own
    Ubuntu repository with the latest version of Ruby and made it available to the
    public. This repository is known as a *Personal Package Archive (PPA)*. You can
    add this repository to your instance and get the latest version of Ruby using
    these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Press ENTER when prompted, and then wait for the word `OK` to appear. After
    you add the Brightbox repository, update the `apt-get` package lists so it can
    find the newer versions of the Ruby packages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now install Ruby version 2.1\. The following command installs both the Ruby
    interpreter and the development headers needed to compile additional gems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Press ENTER to continue. Once the installation completes, check the Ruby version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Since Ruby is frequently updated, you’ll probably see a newer version number
    than the one shown here. Now that Ruby’s installed, you need a web server for
    Ruby on Rails applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache and Passenger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A variety of web servers are available today. The most popular web server is
    Apache, and that’s what we’ll use. Install the Apache HTTP Server version 2 with
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Press ENTER to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve completed this, open your web browser and go to the public DNS name
    of your instance to see the default Ubuntu website. Although you can’t see your
    application yet, you’re making progress.
  prefs: []
  type: TYPE_NORMAL
- en: Apache is great for serving web pages, but you need an application server to
    run your Ruby on Rails application. A popular application server that integrates
    with Apache is Phusion Passenger.
  prefs: []
  type: TYPE_NORMAL
- en: Phusion provides the Passenger application server through its own `apt-get`
    repository. It’s not a PPA like the Brightbox repository you used earlier, however,
    so the setup has a few more steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, enter the `apt-key` command to import Phusion’s RSA key for the Ubuntu
    key server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `apt-get` program uses this key to ensure that packages you install are
    really coming from Phusion. Phusion’s repository uses an encrypted HTTP connection
    (HTTPS) to communicate with your instance.
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to add the Phusion Passenger repository to your instance. Enter
    the following command to open a new file in the `nano` editor on your instance.
    (Or, if you’re more comfortable with another command-line editor, use that instead.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Enter **`deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty
    main`** on the first line to add the address of the Phusion Passenger repository
    to your instance. Then, if you’re using `nano`, press CTRL-O followed by ENTER
    to save the file and CTRL-X to exit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now update the `apt-get` package lists again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then install the Apache 2 Phusion Passenger module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Press ENTER to continue. Once the installation completes, your instance should
    be set up to serve both standard web pages and Ruby on Rails applications.
  prefs: []
  type: TYPE_NORMAL
- en: With your web server installed, create a directory for your application. The
    default directory for regular HTML web pages is */var/www/html*. Because you’re
    deploying a Ruby on Rails application, create a separate directory with these
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first command creates a directory named */var/www/social*. The next two
    commands assign ownership of that directory to your ubuntu user and group, allowing
    you to write files to that directory as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now you need to install and set up a database for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PostgreSQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter uses the PostgreSQL database, but which database software you choose
    is mostly up to you. MySQL is another popular, open source option you might consider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install PostgreSQL with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Press ENTER to continue. Now that the database software is installed, let’s
    add a user account and create a few databases. The default user account for PostgreSQL
    is named *postgres*, so you need to issue the `createuser` command as the `postgres`
    user with the `sudo -u postgres` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This command creates a new user named *ubuntu* with superuser access to the
    database. This user has full access to all database commands. PostgreSQL is configured
    with an authentication system known as *ident sameuser,* by default, in Ubuntu.
    This means if your Ubuntu username matches your PostgreSQL username, you can connect
    without a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve created a PostgreSQL account for yourself, add a database and
    then see if you can connect to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Your account can now log in to PostgreSQL and run commands. Enter **`\q`**
    to quit. Now add a production database for your social application by entering
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You won’t need to enter any other PostgreSQL commands on your instance. Now
    that you’ve created the production database, the migrations in your application
    create the tables needed by your application. You’ll configure the application
    to use this database before you deploy to your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Build Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your instance is almost ready to go! Before you can deploy your application,
    however, you need to install a few more tools. Some of the gems your application
    uses need to be compiled, and to do so, you need build tools such as a C compiler.
    You also need Git for retrieving code from repositories and header files for PostgreSQL
    to compile the PostgreSQL database gem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, this single command should install all of the build tools you
    need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `build-essential` package is a collection of common build tools needed to
    compile many different types of software. You’re already familiar with Git from
    [Chapter 6](ch06.html "Chapter 6. Deployment"). The `libpq-dev` package is needed
    to compile PostgreSQL client applications such as the pg gem.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Gems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last setup step is to install the gems your application needs. As you’ll
    learn in the next section, the `bundle` command runs automatically when you deploy,
    but installing gems while you’re connected to the server helps to verify everything
    is working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gems normally generate documentation during installation. On the server, this
    documentation just takes up space and slows down the installation. You can tell
    the `gem` command to not generate documentation by adding `gem: --no-document`
    to your *.gemrc* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you’ve turned off gem documentation, install Rails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Because you’re using the PostgreSQL database, also install the pg gem. Parts
    of this gem are written in C, and they’ll be compiled automatically during the
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you need a gem called therubyracer. This gem embeds Google’s V8 JavaScript
    interpreter into Ruby. Rails uses this gem to compile assets on the server. Parts
    of this gem must also be compiled.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With these gems in place, your instance is ready to run Rails applications.
    Now that the VPS setup is complete, let’s learn about Capistrano and the changes
    you need to make to your application to deploy and run it in production.
  prefs: []
  type: TYPE_NORMAL
- en: Capistrano
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Capistrano is an open source tool for automating the process of running scripts
    and deploying applications on remote servers over an SSH connection. Capistrano
    extends the `rake` tool that you’ve used already. Just like `rake`, Capistrano
    uses a simple DSL to define *tasks*, which are applied to different servers based
    on their *role*.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks include things such as pulling code from a Git repository, running `bundle
    install`, or running database migrations with `rake`. Roles are different types
    of servers such as web, application, or database. Currently, these are all on
    the same server, but when your application gets too big for a single server, Capistrano
    makes splitting the work among multiple servers easy.
  prefs: []
  type: TYPE_NORMAL
- en: Capistrano also supports deploying an application to different *stages*. Capistrano
    stages are sets of servers, such as staging servers and production servers. Both
    of these servers run your Rails application in the production environment, but
    the staging server is probably used only for testing, whereas the production server
    is accessible by your users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exit the SSH session on your VPS or open another terminal window on your local
    computer to set up Capistrano. Because Capistrano is a gem, you first need to
    update your application’s *Gemfile*. Capistrano is already in the file, but it’s
    commented out. Remove the pound sign from the beginning of the line for the capistrano-rails
    gem to install both Capistrano and the Rails-specific tasks you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'While you’re editing the *Gemfile*, also make the changes needed for running
    in production:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: These changes first specify that the SQLite gem is only needed in the `development`
    and test environments ➊. Next, therubyracer gem is needed to compile assets in
    production ➋ as mentioned in the last section. The capistrano-rails gem is only
    needed in development ➌. Finally, you also need the PostgreSQL gem in production
    ➍.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now update the installed gems on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The --binstubs option tells bundler to also install the executable files in
    the *bin/* directory. For example, Capistrano includes the cap command that you’ll
    use to deploy your application, and you’ll run that from *bin/*. The --without
    production option tells bundler to install only gems for the development and test
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to install Capistrano in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This process generates the files you need to configure Capistrano to deploy
    your application. Let’s dig into those next.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that your application has been Capified, you may notice some new files.
    The first of these is named *Capfile* and is located in the root of the application.
    You need to make one small change to that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As the comment says, the new `require` line includes Capistrano’s Rails-specific
    tasks in your application ➊. After you save this file, you can see a list of Capistrano
    tasks by entering the `bin/cap -T` command in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to edit the file *config/deploy.rb*. This file contains configuration
    that is shared by all deployment stages, such as the name of your application
    and the address of your Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: First, set the name of your application to `social` and specify the URL of your
    Git repository ➊. Replace `yourname` with your GitHub username. Next, set the
    *deploy* directory to the */var/www/social* directory that you created on your
    instance ➋. Finally, uncomment the `execute` line ➌ in the `restart` task. This
    line executes the `touch tmp/restart.txt` command. This command is needed to restart
    the Passenger application server after deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the shared settings are updated, edit the *config/deploy/ production.rb*
    file. This file contains settings specific to the Capistrano `production` stage.
    Replace the existing code in this file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: First, Capistrano needs the address of your servers, along with the username
    and roles of each server ➊. Your instance is fulfilling all three roles, and the
    username is `ubuntu`. Replace `your_instance_name` with your server’s public DNS
    name. Next, specify the SSH options needed to connect to your instance ➋. Capistrano
    needs the path to your private key to connect. Replace `your_key_file` with the
    full path to your private key file.
  prefs: []
  type: TYPE_NORMAL
- en: Database Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, configure your application to use the PostgreSQL database you created
    earlier. Database configuration is in the file *config/database.yml*. Update the
    `production` section, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This code tells Rails to use the PostgreSQL database named `social_production`
    ➊ in the `production` environment. Rails will connect to the database with the
    username `ubuntu` ➋ and no password ➌, thanks to the Ubuntu’s ident sameuser authentication
    setup mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last thing you need to set up is the secret key used to sign your application’s
    cookies. This value is stored in the file *config/secrets.yml*. This file can
    also be used to store other secret information such as passwords or API keys needed
    by your application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned in the comment, you shouldn’t keep production secrets in this file
    ➊. If the code for your application is stored in a public Git repository, these
    secrets would then be publicly available. Instead, this file uses an ERB tag to
    read the value of the `SECRET_KEY_BASE` environment variable ➋.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can set this environment variable on your server, generate a value
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Copy the value output by this command and save it in a safe place. You’ll need
    it again when you set up the virtual host for your application later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Add to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Capistrano configured and the database configured, you’re ready to create
    a Git repository for your application and push your code to GitHub. Capistrano
    runs `git` commands on your instance to pull changes to your application from
    GitHub during deployment.
  prefs: []
  type: TYPE_NORMAL
- en: First create a Git repository on your local computer with the following commands.
    (Refer back to [Chapter 6](ch06.html "Chapter 6. Deployment") if you need a refresher
    on Git.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now log in to your GitHub account and create a new public repository named *social*.
    Once the repository is created, add a remote to the local repository you just
    created and push the code up to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Once Capistrano is configured and your application is on GitHub, you’re ready
    to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, test the connection to your instance and check if the instance is ready
    to receive a deployment from Capistrano. The `deploy:check` task ensures everything
    on the instance is set up correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note that I specified the `production` stage in the command. You must include
    the stage with every Capistrano command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `deploy:check` task finishes successfully, you’re ready to deploy your
    application for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The deploy task not only checks out the latest code from GitHub but also runs
    `bundle install` to update installed gems, compiles your application’s assets,
    and migrates the database. Even once your application is installed on your instance
    and running, however, you still need to make one more configuration change to
    see your application on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Virtual Host
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *Virtual Host* is a way to host multiple sites on the same server or instance.
    The Apache web server allows you to set up many different sites on the same physical
    server. It then uses the DNS name of each site to serve the correct site for each
    incoming request. You currently have only a single site running on your instance,
    but you still need to set it up as a Virtual Host.
  prefs: []
  type: TYPE_NORMAL
- en: You perform this step one time. You won’t need to do this again unless you decide
    to add another site to the same server. You needed to wait until after your application
    was deployed since the directory names you’re going to specify didn’t exist before.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, connect to your instance with SSH, and then create a configuration file
    for the social application in the */etc/apache2/sites-available* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command opens the new file in the `nano` editor. Enter the following
    Apache configuration code in the new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The first line means this Virtual Host responds to all requests (indicated by
    the star) on port 80 ➊. Next, specify the server name of this Virtual Host ➋.
    Replace ***`your_instance_name`*** with the public DNS name of your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Then set the document root for this Virtual Host ➌. The document root is normally
    the location of the site’s HTML files, but here, you set it to your application’s
    public directory. This configuration is specific to the Passenger application
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The next line sets the `SECRET_KEY_BASE` environment variable ➍. Replace the
    partial key shown here with the complete 128-digit key generated by the `bin/rake
    secret` command you entered earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, set options for the document root directory ➎. The `Allow from all`
    line means that all hosts and IP addresses are allowed access to the files in
    this directory. The `Options -MultiViews` line turns off the MultiViews feature
    in Apache. This feature uses automatic content negotiation, which can cause Apache
    to serve files to a client even if the file extension is not specified, which
    you don’t want.
  prefs: []
  type: TYPE_NORMAL
- en: Press CTRL-O followed by ENTER to save the file, and then press CTRL-X to exit
    the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the new site is configured in Apache, you need to disable the default
    site that comes with Apache and enable the social site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, reload Apache to activate the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now open your web browser and go to the public DNS name of your instance. Your
    application should be available to the world, running in production on your own
    virtual private server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up a Linux server for hosting Rails
    applications. You installed and configured the Apache web server, the Phusion
    Passenger application server, and the PostgreSQL database server.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to integrate the remote server automation tool Capistrano
    in your Rails application. You configured your Rails application for production
    and used Capistrano to deploy it to your instance.
  prefs: []
  type: TYPE_NORMAL
- en: With this done, you are well on your way to becoming a professional Rails developer!
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Q: | 1\. Make a small change to your application, such as updating the title
    of each page. Commit the change to your local Git repository, push the changes
    to GitHub, and then deploy the change to your instance. |'
  prefs: []
  type: TYPE_TB
- en: '| Q: | 2\. Learn about other gems you can use to add features to your Rails
    applications easily. For example, you might want to allow users to upload images
    to your site instead of using a third-party image-hosting service. Hundreds of
    open source projects are available for adding this and other features to your
    application. Find one you like and try it out. If you find a bug, fix it and send
    the developer a pull request on GitHub. |'
  prefs: []
  type: TYPE_TB
- en: '| Q: | 3\. Get to know the Ruby on Rails community and get involved. Follow
    Rails development on GitHub. Check out the official Ruby on Rails website and
    blog. Find out about Ruby and Rails conferences and try to attend; make yourself
    known at your local Ruby or Rails User Group. |'
  prefs: []
  type: TYPE_TB
