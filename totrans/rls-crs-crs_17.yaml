- en: Chapter 15. Custom Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章。定制部署
- en: Moving your finished application into production and making it available to
    users requires you to make many choices. You can choose from a variety of web
    hosting providers, Rails application servers, databases, and automated deployment
    systems. In [Chapter 6](ch06.html "Chapter 6. Deployment"), you learned about
    Heroku, a hosting service that uses Git for deployment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的完成的应用程序投入生产并使其可供用户访问，需要做出许多选择。你可以选择各种各样的网络托管服务提供商、Rails 应用程序服务器、数据库和自动化部署系统。在
    [第 6 章](ch06.html "第 6 章 部署")中，你学习了 Heroku，一种使用 Git 进行部署的托管服务。
- en: Most large companies have an operations team to configure servers and deploy
    applications. But as a beginning Rails programmer, you may not have the luxury
    of a dedicated operations team to deploy your application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数大型公司都有一个运营团队来配置服务器并部署应用程序。但作为一名初学者 Rails 程序员，你可能没有专门的运营团队来部署你的应用程序。
- en: In this chapter, you’ll set up a server to host your application, configure
    your application’s production environment, push your application to GitHub, and
    finally deploy to your server using Capistrano.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将设置一个服务器来托管你的应用程序，配置应用程序的生产环境，将应用程序推送到 GitHub，最后使用 Capistrano 部署到服务器。
- en: Virtual Private Servers
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟私人服务器
- en: A *virtual private server (VPS)* is a type of virtual machine sold by web hosting
    providers. A single physical server can run many virtual private servers. An individual
    VPS is often referred to as an *instance*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*虚拟私人服务器（VPS）* 是由网站托管服务提供商销售的一种虚拟机。一个物理服务器可以运行多个虚拟私人服务器。每个 VPS 通常被称为 *实例*。'
- en: When you buy a VPS, you get part of the processing power, memory, and disk space
    of a larger physical server. You get you full access to your part of the server,
    including the ability to choose your operating system. So you are free to install
    the software you need and configure the server however you like. Unfortunately,
    you are also responsible for any installation and configuration errors on the
    server.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你购买 VPS 时，你获得了一个更大物理服务器的一部分处理能力、内存和磁盘空间。你可以完全访问服务器的这部分，包括选择操作系统的能力。因此，你可以自由安装所需的软件，并按自己喜欢的方式配置服务器。不幸的是，你也需要对服务器上的任何安装和配置错误负责。
- en: Many different hosting providers offer VPS services. A quick Google search leads
    to hundreds of competing providers. A popular choice among both startups and established
    companies is Amazon Web Services (AWS).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不同的托管服务提供商提供 VPS 服务。通过快速的 Google 搜索可以找到数百家竞争的提供商。亚马逊 Web 服务（AWS）是创业公司和成熟企业中常见的选择。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The rest of this chapter uses AWS to set up a server and deploy your application,
    but the instructions are not AWS specific. If you would rather use a different
    service, create an instance running Ubuntu Linux 14.04 LTS, and you should be
    able to follow along with no problem. Ubuntu Linux 14.04 LTS is a long-term support
    release with guaranteed support until April 2019.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章其余部分将使用 AWS 设置服务器并部署应用程序，但说明并非特定于 AWS。如果你更愿意使用其他服务，可以创建一个运行 Ubuntu Linux
    14.04 LTS 的实例，应该可以顺利跟随操作。Ubuntu Linux 14.04 LTS 是一个长期支持版本，保证支持至 2019 年 4 月。*'
- en: Amazon AWS Setup
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊 AWS 设置
- en: In addition to being a popular choice, Amazon also provides an AWS free usage
    tier for new users. You can read more about the free usage tier at *[http://aws.amazon.com/free/](http://aws.amazon.com/free/)*
    to see if you qualify. Even if you don’t qualify for the free usage tier, you
    can still get an AWS Micro instance for a few cents an hour.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了是一个流行的选择外，亚马逊还为新用户提供了 AWS 免费使用层。你可以通过 *[http://aws.amazon.com/free/](http://aws.amazon.com/free/)*
    阅读更多关于免费使用层的信息，看看自己是否符合条件。即使你不符合免费使用层的条件，你仍然可以以每小时几美分的价格获得一个 AWS 微型实例。
- en: Amazon calls their VPS service *Amazon Elastic Compute Cloud (Amazon EC2)*.
    Rather than cover the details of setting up your Amazon account here, please refer
    to the Amazon EC2 documentation at *[http://aws.amazon.com/documentation/ec2/](http://aws.amazon.com/documentation/ec2/)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊将他们的 VPS 服务称为 *亚马逊弹性计算云（Amazon EC2）*。为了避免在这里详细介绍如何设置亚马逊账户，请参考亚马逊 EC2 文档，链接见
    *[http://aws.amazon.com/documentation/ec2/](http://aws.amazon.com/documentation/ec2/)*。
- en: Click the **User Guide** link, and follow the instructions, starting with Setting
    Up. This section walks you through the process of signing up for AWS, creating
    a user account in the AWS Identity and Access Management (IAM) system, creating
    a key pair, and creating a security group. Be sure you store your IAM credentials
    and private key—you’ll need them for this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **User Guide** 链接，并按照从设置开始的说明进行操作。本节将指导你完成注册 AWS、在 AWS 身份与访问管理（IAM）系统中创建用户帐户、创建密钥对和创建安全组的过程。请务必存储你的
    IAM 凭据和私钥 —— 你将在本章中需要它们。
- en: Then move on to Getting Started. In this section, you should launch an EC2 instance,
    connect to your instance, add a storage volume, and finally clean up your instance
    and volume. The EC2 user guide uses an Amazon Linux machine image that we won’t
    be using again, so be sure to follow the clean-up instructions in the User Guide
    when you’re done with this section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后继续进行“入门”部分。在本节中，你应该启动一个 EC2 实例，连接到你的实例，添加一个存储卷，最后清理你的实例和卷。EC2 用户指南使用了一个 Amazon
    Linux 机器镜像，我们不会再次使用，因此在完成本节后，请确保按照用户指南中的清理说明进行操作。
- en: 'Once you’re up to speed on Amazon EC2, you can set up your production server
    as described in this section. I recommend Ubuntu Linux, so the instructions that
    follow are Ubuntu specific. From the EC2 Management Console, click the **Launch
    Instance** button to create a new server instance, and choose the Ubuntu Server
    14.04 LTS (PV) Amazon Machine Image in the Quick Start section. Because this is
    a web server, you need to configure the security group to allow HTTP traffic.
    Click the **Next** button in the Launch Instance wizard until you reach Step 6:
    Configure Security Group. Now click the **Add Rule** button, select **HTTP** from
    the Type drop-down menu, and click the **Review and Launch** button. Finally,
    click the **Launch** button.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你熟悉了 Amazon EC2，你就可以按照本节所述设置生产服务器。我推荐使用 Ubuntu Linux，因此以下的指令是针对 Ubuntu 的。从
    EC2 管理控制台，点击 **Launch Instance** 按钮以创建一个新的服务器实例，并在“快速启动”部分选择 Ubuntu Server 14.04
    LTS (PV) Amazon 机器镜像。因为这是一个 Web 服务器，你需要配置安全组以允许 HTTP 流量。点击 **Next** 按钮，直到到达步骤
    6：配置安全组。现在点击 **Add Rule** 按钮，选择 **HTTP** 从类型下拉菜单中，然后点击 **Review and Launch** 按钮。最后，点击
    **Launch** 按钮。
- en: 'Once the instance is running, make note of the public DNS name displayed in
    the EC2 Management Console, and then connect to the instance with SSH in a terminal
    window. Using the following command, replace `your_key_file` with the full path
    to the private key file you created in the Setting Up section of the EC2 User
    Guide and `your_instance_name` with the public DNS name of your instance:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例启动，记下在 EC2 管理控制台中显示的公共 DNS 名称，然后通过终端窗口使用 SSH 连接到实例。使用以下命令，将 `your_key_file`
    替换为在 EC2 用户指南的“设置”部分中创建的私钥文件的完整路径，将 `your_instance_name` 替换为实例的公共 DNS 名称：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The default user account on the Ubuntu AMI is named *ubuntu*. So this command
    connects to the user named ubuntu at your instance.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu AMI 上的默认用户帐户名为 *ubuntu*。因此，这个命令会连接到你实例上的名为 ubuntu 的用户。
- en: Ubuntu Linux Setup
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ubuntu Linux 设置
- en: Once you’re connected, you can configure the instance for hosting Ruby on Rails
    applications. Enter all of the commands in this section on your instance over
    the SSH connection.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你连接成功，就可以配置实例以托管 Ruby on Rails 应用程序。在 SSH 连接上执行本节中的所有命令。
- en: Ubuntu uses a system called `apt-get` for installing software from online repositories.
    The first thing you need is Ruby. Unfortunately, the default repositories often
    contain an older version of Ruby, but you have a way around that.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 使用一个名为 `apt-get` 的系统来从在线仓库安装软件。你需要的第一件事是 Ruby。不幸的是，默认的仓库通常包含较旧版本的 Ruby，但你有解决办法。
- en: Installing Ruby
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Ruby
- en: 'The developers at a hosting company called Brightbox have set up their own
    Ubuntu repository with the latest version of Ruby and made it available to the
    public. This repository is known as a *Personal Package Archive (PPA)*. You can
    add this repository to your instance and get the latest version of Ruby using
    these commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一家名为 Brightbox 的托管公司开发人员创建了自己的 Ubuntu 仓库，提供最新版本的 Ruby，并将其公开提供。这个仓库被称为 *个人软件包存档（PPA）*。你可以通过这些命令将该仓库添加到你的实例中，并获取最新版本的
    Ruby：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Press ENTER when prompted, and then wait for the word `OK` to appear. After
    you add the Brightbox repository, update the `apt-get` package lists so it can
    find the newer versions of the Ruby packages.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时按 ENTER，然后等待 `OK` 显示出来。在添加 Brightbox 仓库后，更新 `apt-get` 包列表，以便它能够找到更新版本的 Ruby
    包。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now install Ruby version 2.1\. The following command installs both the Ruby
    interpreter and the development headers needed to compile additional gems:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在安装 Ruby 2.1 版本。以下命令将同时安装 Ruby 解释器和编译额外 gem 所需的开发头文件：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Press ENTER to continue. Once the installation completes, check the Ruby version.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 继续。安装完成后，检查 Ruby 版本。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Since Ruby is frequently updated, you’ll probably see a newer version number
    than the one shown here. Now that Ruby’s installed, you need a web server for
    Ruby on Rails applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Ruby 经常更新，你可能会看到比此处显示的版本号更新的版本。现在 Ruby 已安装，你需要一个 web 服务器来支持 Ruby on Rails
    应用。
- en: Installing Apache and Passenger
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Apache 和 Passenger
- en: 'A variety of web servers are available today. The most popular web server is
    Apache, and that’s what we’ll use. Install the Apache HTTP Server version 2 with
    this command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有多种 web 服务器可供选择。最流行的 web 服务器是 Apache，我们将使用它。使用以下命令安装 Apache HTTP Server 2
    版本：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Press ENTER to continue.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 继续。
- en: Once you’ve completed this, open your web browser and go to the public DNS name
    of your instance to see the default Ubuntu website. Although you can’t see your
    application yet, you’re making progress.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开浏览器，访问你实例的公共 DNS 名称，以查看默认的 Ubuntu 网站。虽然此时还看不到你的应用，但你已经在取得进展。
- en: Apache is great for serving web pages, but you need an application server to
    run your Ruby on Rails application. A popular application server that integrates
    with Apache is Phusion Passenger.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 是用于提供网页的优秀选择，但你需要一个应用服务器来运行你的 Ruby on Rails 应用。与 Apache 集成的一个流行应用服务器是
    Phusion Passenger。
- en: Phusion provides the Passenger application server through its own `apt-get`
    repository. It’s not a PPA like the Brightbox repository you used earlier, however,
    so the setup has a few more steps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Phusion 通过自己的 `apt-get` 仓库提供 Passenger 应用服务器。与之前使用的 Brightbox 仓库不同，它不是 PPA，因此设置过程会多一些步骤。
- en: 'First, enter the `apt-key` command to import Phusion’s RSA key for the Ubuntu
    key server:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，输入 `apt-key` 命令，将 Phusion 的 RSA 密钥导入到 Ubuntu 密钥服务器：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `apt-get` program uses this key to ensure that packages you install are
    really coming from Phusion. Phusion’s repository uses an encrypted HTTP connection
    (HTTPS) to communicate with your instance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt-get` 程序使用这个密钥来确保你安装的软件包确实来自 Phusion。Phusion 的仓库使用加密的 HTTP 连接（HTTPS）与实例进行通信。'
- en: First, you need to add the Phusion Passenger repository to your instance. Enter
    the following command to open a new file in the `nano` editor on your instance.
    (Or, if you’re more comfortable with another command-line editor, use that instead.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要将 Phusion Passenger 仓库添加到你的实例中。输入以下命令，在你的实例上用 `nano` 编辑器打开一个新文件。（或者，如果你更喜欢使用其他命令行编辑器，可以使用其他编辑器。）
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enter **`deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty
    main`** on the first line to add the address of the Phusion Passenger repository
    to your instance. Then, if you’re using `nano`, press CTRL-O followed by ENTER
    to save the file and CTRL-X to exit the editor.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行输入 **`deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty
    main`**，将 Phusion Passenger 仓库的地址添加到你的实例中。然后，如果你使用的是 `nano`，按 CTRL-O 然后按 ENTER
    保存文件，按 CTRL-X 退出编辑器。
- en: 'Now update the `apt-get` package lists again:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次更新 `apt-get` 包列表：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then install the Apache 2 Phusion Passenger module:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后安装 Apache 2 Phusion Passenger 模块：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Press ENTER to continue. Once the installation completes, your instance should
    be set up to serve both standard web pages and Ruby on Rails applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 继续。安装完成后，你的实例应该已经配置好，可以提供标准网页和 Ruby on Rails 应用的服务。
- en: With your web server installed, create a directory for your application. The
    default directory for regular HTML web pages is */var/www/html*. Because you’re
    deploying a Ruby on Rails application, create a separate directory with these
    commands.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好 web 服务器后，为你的应用创建一个目录。常规 HTML 网页的默认目录是 */var/www/html*。因为你正在部署 Ruby on Rails
    应用，所以需要使用以下命令创建一个单独的目录。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first command creates a directory named */var/www/social*. The next two
    commands assign ownership of that directory to your ubuntu user and group, allowing
    you to write files to that directory as needed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令创建一个名为 */var/www/social* 的目录。接下来的两个命令将该目录的所有权分配给你的 ubuntu 用户和组，允许你根据需要向该目录写入文件。
- en: Now you need to install and set up a database for your application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要为你的应用安装并配置一个数据库。
- en: Installing PostgreSQL
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL
- en: This chapter uses the PostgreSQL database, but which database software you choose
    is mostly up to you. MySQL is another popular, open source option you might consider.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用了 PostgreSQL 数据库，但你选择哪款数据库软件主要取决于你。MySQL 是另一个你可以考虑的流行开源选项。
- en: 'Install PostgreSQL with this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 PostgreSQL：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Press ENTER to continue. Now that the database software is installed, let’s
    add a user account and create a few databases. The default user account for PostgreSQL
    is named *postgres*, so you need to issue the `createuser` command as the `postgres`
    user with the `sudo -u postgres` command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按 ENTER 键继续。现在数据库软件已安装，我们来添加一个用户账户并创建一些数据库。PostgreSQL 的默认用户账户名为*postgres*，所以你需要使用
    `sudo -u postgres` 命令作为 `postgres` 用户执行 `createuser` 命令：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command creates a new user named *ubuntu* with superuser access to the
    database. This user has full access to all database commands. PostgreSQL is configured
    with an authentication system known as *ident sameuser,* by default, in Ubuntu.
    This means if your Ubuntu username matches your PostgreSQL username, you can connect
    without a password.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个名为*ubuntu*的新用户，该用户具有对数据库的超级用户访问权限。该用户可以完全访问所有数据库命令。在 Ubuntu 中，PostgreSQL
    配置了一个名为*ident sameuser*的身份验证系统，默认情况下，如果你的 Ubuntu 用户名与 PostgreSQL 用户名匹配，你可以无需密码直接连接。
- en: 'Now that you’ve created a PostgreSQL account for yourself, add a database and
    then see if you can connect to it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经为自己创建了 PostgreSQL 账户，接下来添加一个数据库，看看能否成功连接：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Your account can now log in to PostgreSQL and run commands. Enter **`\q`**
    to quit. Now add a production database for your social application by entering
    this command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的账户可以登录 PostgreSQL 并运行命令。输入**`\q`**退出。接下来，通过输入以下命令为你的社交应用程序添加一个生产数据库：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You won’t need to enter any other PostgreSQL commands on your instance. Now
    that you’ve created the production database, the migrations in your application
    create the tables needed by your application. You’ll configure the application
    to use this database before you deploy to your instance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你在实例上不需要输入其他 PostgreSQL 命令。既然你已经创建了生产数据库，应用程序中的迁移会创建应用程序所需的表。在部署到实例之前，你将配置应用程序以使用这个数据库。
- en: Installing Build Tools
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装构建工具
- en: Your instance is almost ready to go! Before you can deploy your application,
    however, you need to install a few more tools. Some of the gems your application
    uses need to be compiled, and to do so, you need build tools such as a C compiler.
    You also need Git for retrieving code from repositories and header files for PostgreSQL
    to compile the PostgreSQL database gem.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你的实例几乎准备就绪！不过，在你部署应用程序之前，你需要再安装一些工具。你的应用程序使用的一些 gems 需要被编译，为此你需要像 C 编译器这样的构建工具。你还需要
    Git 来从代码仓库中获取代码，并且需要 PostgreSQL 的头文件来编译 PostgreSQL 数据库 gem。
- en: 'Fortunately, this single command should install all of the build tools you
    need:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个单一命令应该会安装你所需的所有构建工具：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `build-essential` package is a collection of common build tools needed to
    compile many different types of software. You’re already familiar with Git from
    [Chapter 6](ch06.html "Chapter 6. Deployment"). The `libpq-dev` package is needed
    to compile PostgreSQL client applications such as the pg gem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`build-essential` 包是一组常见的构建工具，许多不同类型的软件在编译时都需要它们。你已经在[第 6 章](ch06.html "第 6
    章. 部署")中熟悉了 Git。`libpq-dev` 包是编译 PostgreSQL 客户端应用程序（如 pg gem）所必需的。'
- en: Installing Gems
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Gems
- en: The last setup step is to install the gems your application needs. As you’ll
    learn in the next section, the `bundle` command runs automatically when you deploy,
    but installing gems while you’re connected to the server helps to verify everything
    is working.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步设置是安装你的应用程序所需的 gems。正如你将在下一节中学习的，`bundle` 命令在你部署时会自动运行，但在连接到服务器时安装 gems
    有助于验证一切是否正常工作。
- en: 'Gems normally generate documentation during installation. On the server, this
    documentation just takes up space and slows down the installation. You can tell
    the `gem` command to not generate documentation by adding `gem: --no-document`
    to your *.gemrc* file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'Gems 在安装时通常会生成文档。在服务器上，这些文档只是占用空间并减慢安装速度。你可以通过在 *.gemrc* 文件中添加 `gem: --no-document`
    来告诉 `gem` 命令不要生成文档：'
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that you’ve turned off gem documentation, install Rails:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经关闭了 gem 文档生成，现在可以安装 Rails：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Because you’re using the PostgreSQL database, also install the pg gem. Parts
    of this gem are written in C, and they’ll be compiled automatically during the
    installation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你正在使用 PostgreSQL 数据库，所以还需要安装 pg gem。这个 gem 的部分内容是用 C 语言编写的，安装时会自动编译。
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finally, you need a gem called therubyracer. This gem embeds Google’s V8 JavaScript
    interpreter into Ruby. Rails uses this gem to compile assets on the server. Parts
    of this gem must also be compiled.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一个叫做 therubyracer 的 gem。这个 gem 将 Google 的 V8 JavaScript 解释器嵌入到 Ruby 中。Rails
    使用这个 gem 在服务器上编译资产。这个 gem 的部分内容也需要进行编译。
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With these gems in place, your instance is ready to run Rails applications.
    Now that the VPS setup is complete, let’s learn about Capistrano and the changes
    you need to make to your application to deploy and run it in production.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好这些 gems 后，你的实例就可以运行 Rails 应用程序了。现在 VPS 设置已完成，让我们了解 Capistrano 以及你需要对应用程序进行的更改，以便将其部署并在生产环境中运行。
- en: Capistrano
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Capistrano
- en: Capistrano is an open source tool for automating the process of running scripts
    and deploying applications on remote servers over an SSH connection. Capistrano
    extends the `rake` tool that you’ve used already. Just like `rake`, Capistrano
    uses a simple DSL to define *tasks*, which are applied to different servers based
    on their *role*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Capistrano 是一个开源工具，用于自动化通过 SSH 连接在远程服务器上运行脚本和部署应用程序的过程。Capistrano 扩展了你已经使用过的
    `rake` 工具。就像 `rake` 一样，Capistrano 使用一个简单的 DSL 来定义 *任务*，这些任务会根据不同的 *角色* 应用到不同的服务器上。
- en: Tasks include things such as pulling code from a Git repository, running `bundle
    install`, or running database migrations with `rake`. Roles are different types
    of servers such as web, application, or database. Currently, these are all on
    the same server, but when your application gets too big for a single server, Capistrano
    makes splitting the work among multiple servers easy.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 任务包括从 Git 仓库拉取代码、运行 `bundle install` 或通过 `rake` 运行数据库迁移等。角色是不同类型的服务器，如 Web 服务器、应用服务器或数据库服务器。目前这些服务器都在同一台服务器上，但当应用程序变得过大而无法仅依赖一台服务器时，Capistrano
    使得将工作分配到多台服务器上变得更加简单。
- en: Capistrano also supports deploying an application to different *stages*. Capistrano
    stages are sets of servers, such as staging servers and production servers. Both
    of these servers run your Rails application in the production environment, but
    the staging server is probably used only for testing, whereas the production server
    is accessible by your users.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Capistrano 还支持将应用程序部署到不同的*阶段*。Capistrano 阶段是服务器的集合，例如预发布服务器和生产服务器。这两台服务器都在生产环境中运行你的
    Rails 应用程序，但预发布服务器可能仅用于测试，而生产服务器则是用户可以访问的。
- en: Getting Started
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: Exit the SSH session on your VPS or open another terminal window on your local
    computer to set up Capistrano. Because Capistrano is a gem, you first need to
    update your application’s *Gemfile*. Capistrano is already in the file, but it’s
    commented out. Remove the pound sign from the beginning of the line for the capistrano-rails
    gem to install both Capistrano and the Rails-specific tasks you need.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 退出 VPS 上的 SSH 会话，或者在你的本地计算机上打开另一个终端窗口来设置 Capistrano。由于 Capistrano 是一个 gem，你首先需要更新应用程序的
    *Gemfile*。Capistrano 已经出现在文件中，但它被注释掉了。删除 capistrano-rails gem 前面的井号，以便安装 Capistrano
    和你需要的 Rails 特定任务。
- en: 'While you’re editing the *Gemfile*, also make the changes needed for running
    in production:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑 *Gemfile* 时，还需要做出适应生产环境运行的更改：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: These changes first specify that the SQLite gem is only needed in the `development`
    and test environments ➊. Next, therubyracer gem is needed to compile assets in
    production ➋ as mentioned in the last section. The capistrano-rails gem is only
    needed in development ➌. Finally, you also need the PostgreSQL gem in production
    ➍.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改首先指定了 SQLite gem 仅在 `development` 和测试环境中需要 ➊。接下来，therubyracer gem 在生产环境中需要用于编译资产
    ➋，如上一节所述。capistrano-rails gem 仅在开发环境中需要 ➌。最后，在生产环境中，你还需要 PostgreSQL gem ➍。
- en: 'Now update the installed gems on your computer:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更新你计算机上安装的 gems：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The --binstubs option tells bundler to also install the executable files in
    the *bin/* directory. For example, Capistrano includes the cap command that you’ll
    use to deploy your application, and you’ll run that from *bin/*. The --without
    production option tells bundler to install only gems for the development and test
    environments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: --binstubs 选项告诉 bundler 还要将可执行文件安装到 *bin/* 目录中。例如，Capistrano 包含你将用来部署应用程序的 cap
    命令，你将从 *bin/* 目录运行该命令。--without production 选项告诉 bundler 仅安装开发和测试环境所需的 gems。
- en: 'Next, you need to install Capistrano in your application:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要在应用程序中安装 Capistrano：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This process generates the files you need to configure Capistrano to deploy
    your application. Let’s dig into those next.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程生成了你配置 Capistrano 部署应用程序所需的文件。接下来我们来详细了解这些内容。
- en: Configuration
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: 'Now that your application has been Capified, you may notice some new files.
    The first of these is named *Capfile* and is located in the root of the application.
    You need to make one small change to that file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的应用程序已经被 Capified，您可能会注意到一些新文件。第一个文件名为*Capfile*，位于应用程序的根目录。您需要对该文件进行一个小的修改：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As the comment says, the new `require` line includes Capistrano’s Rails-specific
    tasks in your application ➊. After you save this file, you can see a list of Capistrano
    tasks by entering the `bin/cap -T` command in your terminal.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如注释所述，新的`require`行将 Capistrano 的 Rails 特定任务包含到您的应用程序中 ➊。保存该文件后，您可以通过在终端中输入`bin/cap
    -T`命令来查看 Capistrano 任务列表。
- en: Next, you need to edit the file *config/deploy.rb*. This file contains configuration
    that is shared by all deployment stages, such as the name of your application
    and the address of your Git repository.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要编辑文件*config/deploy.rb*。该文件包含所有部署阶段共享的配置，例如您的应用程序名称和 Git 仓库地址。
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: First, set the name of your application to `social` and specify the URL of your
    Git repository ➊. Replace `yourname` with your GitHub username. Next, set the
    *deploy* directory to the */var/www/social* directory that you created on your
    instance ➋. Finally, uncomment the `execute` line ➌ in the `restart` task. This
    line executes the `touch tmp/restart.txt` command. This command is needed to restart
    the Passenger application server after deployment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将您的应用程序名称设置为`social`，并指定您的 Git 仓库的 URL ➊。将`yourname`替换为您的 GitHub 用户名。接下来，将*deploy*目录设置为您在实例上创建的*/var/www/social*目录
    ➋。最后，在`restart`任务中取消注释`execute`行 ➌。此行会执行`touch tmp/restart.txt`命令。部署后，此命令用于重新启动
    Passenger 应用服务器。
- en: 'Now that the shared settings are updated, edit the *config/deploy/ production.rb*
    file. This file contains settings specific to the Capistrano `production` stage.
    Replace the existing code in this file with the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在共享设置已经更新，请编辑*config/deploy/production.rb*文件。该文件包含 Capistrano `production`阶段特定的设置。将该文件中的现有代码替换为以下代码：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: First, Capistrano needs the address of your servers, along with the username
    and roles of each server ➊. Your instance is fulfilling all three roles, and the
    username is `ubuntu`. Replace `your_instance_name` with your server’s public DNS
    name. Next, specify the SSH options needed to connect to your instance ➋. Capistrano
    needs the path to your private key to connect. Replace `your_key_file` with the
    full path to your private key file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Capistrano 需要您服务器的地址，以及每台服务器的用户名和角色 ➊。您的实例执行所有三个角色，用户名是`ubuntu`。将`your_instance_name`替换为服务器的公共
    DNS 名称。接下来，指定连接到实例所需的 SSH 选项 ➋。Capistrano 需要私钥的路径来进行连接。将`your_key_file`替换为您的私钥文件的完整路径。
- en: Database Setup
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库设置
- en: 'Next, configure your application to use the PostgreSQL database you created
    earlier. Database configuration is in the file *config/database.yml*. Update the
    `production` section, as shown here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，配置您的应用程序以使用您之前创建的 PostgreSQL 数据库。数据库配置位于文件*config/database.yml*中。更新`production`部分，如下所示：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This code tells Rails to use the PostgreSQL database named `social_production`
    ➊ in the `production` environment. Rails will connect to the database with the
    username `ubuntu` ➋ and no password ➌, thanks to the Ubuntu’s ident sameuser authentication
    setup mentioned earlier.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Rails 在`production`环境中使用名为`social_production`的 PostgreSQL 数据库 ➊。Rails
    将使用用户名`ubuntu` ➋并且没有密码 ➌，这要归功于之前提到的 Ubuntu 的 ident sameuser 身份验证设置。
- en: Secrets Setup
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥设置
- en: The last thing you need to set up is the secret key used to sign your application’s
    cookies. This value is stored in the file *config/secrets.yml*. This file can
    also be used to store other secret information such as passwords or API keys needed
    by your application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要设置的最后一件事是用于签署应用程序 cookie 的密钥。该值存储在文件*config/secrets.yml*中。此文件还可以用于存储其他秘密信息，如应用程序所需的密码或
    API 密钥。
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As mentioned in the comment, you shouldn’t keep production secrets in this file
    ➊. If the code for your application is stored in a public Git repository, these
    secrets would then be publicly available. Instead, this file uses an ERB tag to
    read the value of the `SECRET_KEY_BASE` environment variable ➋.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如注释中所述，您不应将生产环境的密钥保存在此文件中 ➊。如果您的应用程序代码存储在公共 Git 仓库中，那么这些密钥将变得公开可用。相反，该文件使用 ERB
    标签读取`SECRET_KEY_BASE`环境变量的值 ➋。
- en: 'Before you can set this environment variable on your server, generate a value
    using the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以在服务器上设置此环境变量之前，请使用以下命令生成一个值：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Copy the value output by this command and save it in a safe place. You’ll need
    it again when you set up the virtual host for your application later in this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 复制此命令输出的值，并将其保存在安全的地方。稍后在本章设置应用的虚拟主机时你还会用到它。
- en: Add to Git
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加到 Git
- en: With Capistrano configured and the database configured, you’re ready to create
    a Git repository for your application and push your code to GitHub. Capistrano
    runs `git` commands on your instance to pull changes to your application from
    GitHub during deployment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好 Capistrano 并配置好数据库后，你就可以为你的应用创建 Git 仓库并将代码推送到 GitHub 了。Capistrano 会在你的实例上运行
    `git` 命令，在部署过程中从 GitHub 拉取你应用的更改。
- en: First create a Git repository on your local computer with the following commands.
    (Refer back to [Chapter 6](ch06.html "Chapter 6. Deployment") if you need a refresher
    on Git.)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在你的本地计算机上使用以下命令创建 Git 仓库。如果需要复习 Git，可以参考 [第 6 章](ch06.html "第 6 章 部署")。
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now log in to your GitHub account and create a new public repository named *social*.
    Once the repository is created, add a remote to the local repository you just
    created and push the code up to GitHub.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在登录到你的 GitHub 账户，并创建一个名为 *social* 的新公共仓库。创建仓库后，向你刚创建的本地仓库添加一个远程仓库，并将代码推送到 GitHub。
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once Capistrano is configured and your application is on GitHub, you’re ready
    to deploy.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Capistrano 配置完成且你的应用已上传至 GitHub，你就可以进行部署了。
- en: Deployment
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: 'First, test the connection to your instance and check if the instance is ready
    to receive a deployment from Capistrano. The `deploy:check` task ensures everything
    on the instance is set up correctly:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，测试与实例的连接，并检查实例是否准备好接收来自 Capistrano 的部署。`deploy:check` 任务确保实例上的所有设置正确：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that I specified the `production` stage in the command. You must include
    the stage with every Capistrano command.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在命令中指定了 `production` 阶段。每次执行 Capistrano 命令时都必须包括阶段。
- en: 'If the `deploy:check` task finishes successfully, you’re ready to deploy your
    application for the first time:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `deploy:check` 任务成功完成，你就可以第一次部署你的应用了：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The deploy task not only checks out the latest code from GitHub but also runs
    `bundle install` to update installed gems, compiles your application’s assets,
    and migrates the database. Even once your application is installed on your instance
    and running, however, you still need to make one more configuration change to
    see your application on the Internet.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`deploy` 任务不仅会从 GitHub 检出最新的代码，还会运行 `bundle install` 更新已安装的 gems，编译应用的资产，并迁移数据库。然而，即使你的应用已经安装并在实例上运行，你仍然需要进行最后一次配置修改，才能在互联网上访问到你的应用。'
- en: Adding a Virtual Host
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加虚拟主机
- en: A *Virtual Host* is a way to host multiple sites on the same server or instance.
    The Apache web server allows you to set up many different sites on the same physical
    server. It then uses the DNS name of each site to serve the correct site for each
    incoming request. You currently have only a single site running on your instance,
    but you still need to set it up as a Virtual Host.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*虚拟主机* 是一种在同一服务器或实例上托管多个站点的方式。Apache Web 服务器允许你在同一物理服务器上设置多个不同的站点。它根据每个站点的
    DNS 名称，来为每个传入请求提供正确的站点。你当前的实例上只运行了一个站点，但你仍然需要将其设置为虚拟主机。'
- en: You perform this step one time. You won’t need to do this again unless you decide
    to add another site to the same server. You needed to wait until after your application
    was deployed since the directory names you’re going to specify didn’t exist before.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步只需执行一次。除非你决定在同一服务器上添加另一个站点，否则以后无需再次执行此步骤。由于你接下来要指定的目录名称在之前并不存在，所以你需要等到应用部署完成后再进行。
- en: 'First, connect to your instance with SSH, and then create a configuration file
    for the social application in the */etc/apache2/sites-available* directory:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 SSH 连接到实例，然后在 */etc/apache2/sites-available* 目录中为社交应用创建配置文件：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The previous command opens the new file in the `nano` editor. Enter the following
    Apache configuration code in the new file:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令会在 `nano` 编辑器中打开新文件。在新文件中输入以下 Apache 配置代码：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The first line means this Virtual Host responds to all requests (indicated by
    the star) on port 80 ➊. Next, specify the server name of this Virtual Host ➋.
    Replace ***`your_instance_name`*** with the public DNS name of your instance.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行表示此虚拟主机响应所有请求（通过星号表示）并监听 80 端口 ➊。接下来，指定此虚拟主机的服务器名称 ➋。将 ***`your_instance_name`***
    替换为你实例的公共 DNS 名称。
- en: Then set the document root for this Virtual Host ➌. The document root is normally
    the location of the site’s HTML files, but here, you set it to your application’s
    public directory. This configuration is specific to the Passenger application
    server.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为这个虚拟主机设置文档根目录 ➌。文档根目录通常是网站的 HTML 文件所在的位置，但在这里，你将其设置为你的应用程序的公共目录。此配置特定于 Passenger
    应用程序服务器。
- en: The next line sets the `SECRET_KEY_BASE` environment variable ➍. Replace the
    partial key shown here with the complete 128-digit key generated by the `bin/rake
    secret` command you entered earlier.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行设置了`SECRET_KEY_BASE`环境变量 ➍。将此处显示的部分密钥替换为你之前输入的`bin/rake secret`命令生成的完整 128
    位密钥。
- en: Finally, set options for the document root directory ➎. The `Allow from all`
    line means that all hosts and IP addresses are allowed access to the files in
    this directory. The `Options -MultiViews` line turns off the MultiViews feature
    in Apache. This feature uses automatic content negotiation, which can cause Apache
    to serve files to a client even if the file extension is not specified, which
    you don’t want.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为文档根目录设置选项 ➎。`Allow from all`这一行意味着所有主机和 IP 地址都可以访问此目录中的文件。`Options -MultiViews`这一行关闭了
    Apache 中的 MultiViews 功能。该功能使用自动内容协商，可能会导致 Apache 向客户端提供文件，即使文件扩展名未指定，这是你不希望发生的。
- en: Press CTRL-O followed by ENTER to save the file, and then press CTRL-X to exit
    the editor.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按 CTRL-O 然后按 ENTER 保存文件，再按 CTRL-X 退出编辑器。
- en: 'Now that the new site is configured in Apache, you need to disable the default
    site that comes with Apache and enable the social site:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，新的站点已经在 Apache 中配置完成，你需要禁用 Apache 自带的默认站点并启用社交网站：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once this is done, reload Apache to activate the changes:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，重新加载 Apache 以激活更改：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now open your web browser and go to the public DNS name of your instance. Your
    application should be available to the world, running in production on your own
    virtual private server.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开你的网络浏览器，访问你实例的公共 DNS 名称。你的应用程序应该可以在互联网上访问，并在你自己的虚拟私人服务器上以生产模式运行。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to set up a Linux server for hosting Rails
    applications. You installed and configured the Apache web server, the Phusion
    Passenger application server, and the PostgreSQL database server.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何为托管 Rails 应用程序设置 Linux 服务器。你安装并配置了 Apache Web 服务器、Phusion Passenger
    应用程序服务器和 PostgreSQL 数据库服务器。
- en: You also learned how to integrate the remote server automation tool Capistrano
    in your Rails application. You configured your Rails application for production
    and used Capistrano to deploy it to your instance.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了如何将远程服务器自动化工具 Capistrano 集成到你的 Rails 应用程序中。你为生产环境配置了 Rails 应用程序，并使用 Capistrano
    将其部署到你的实例中。
- en: With this done, you are well on your way to becoming a professional Rails developer!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，你已经在成为一名专业的 Rails 开发者的道路上迈出了重要的一步！
- en: Exercises
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Make a small change to your application, such as updating the title
    of each page. Commit the change to your local Git repository, push the changes
    to GitHub, and then deploy the change to your instance. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| Q: | 1\. 对你的应用程序进行一些小改动，例如更新每个页面的标题。将更改提交到本地 Git 仓库，推送更改到 GitHub，然后将更改部署到你的实例。
    |'
- en: '| Q: | 2\. Learn about other gems you can use to add features to your Rails
    applications easily. For example, you might want to allow users to upload images
    to your site instead of using a third-party image-hosting service. Hundreds of
    open source projects are available for adding this and other features to your
    application. Find one you like and try it out. If you find a bug, fix it and send
    the developer a pull request on GitHub. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| Q: | 2\. 了解其他可以用来轻松为你的 Rails 应用程序添加功能的 gem。例如，你可能希望允许用户将图片上传到你的网站，而不是使用第三方图片托管服务。数百个开源项目可以为你的应用程序添加此类功能。找到一个你喜欢的并试试。如果你发现
    bug，修复它并向开发者发送 GitHub 上的 pull request。 |'
- en: '| Q: | 3\. Get to know the Ruby on Rails community and get involved. Follow
    Rails development on GitHub. Check out the official Ruby on Rails website and
    blog. Find out about Ruby and Rails conferences and try to attend; make yourself
    known at your local Ruby or Rails User Group. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| Q: | 3\. 了解 Ruby on Rails 社区并参与其中。在 GitHub 上关注 Rails 开发。查看官方 Ruby on Rails
    网站和博客。了解 Ruby 和 Rails 的会议，并尝试参加；在你当地的 Ruby 或 Rails 用户小组中让自己出名。 |'
