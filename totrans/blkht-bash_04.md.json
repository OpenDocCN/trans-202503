["```\n#!/bin/bash\n\n# Generate IP addresses from a given range.\nfor ip in $(seq 1 254); do\n  echo \"172.16.10.${ip}\" >> 172-16-10-hosts.txt\ndone \n```", "```\n$ **cat 172-16-10-hosts.txt**\n172.16.10.1\n172.16.10.2\n172.16.10.3\n172.16.10.4\n172.16.10.5\n`--snip--` \n```", "```\n$ **echo 10.1.0.{1..254}**\n\n10.1.0.1 10.1.0.2 10.1.0.3 10.1.0.4 ... \n```", "```\n$ **echo 10.1.0.{1..254} | sed 's/ /\\n/g'**\n\n10.1.0.1\n10.1.0.2\n10.1.0.3\n`--snip--` \n```", "```\n$ **printf \"10.1.0.%d\\n\" {1..254}**\n```", "```\n#!/bin/bash\nDOMAIN=\"${1}\"\nFILE=\"${2}\"\n\n# Read the file from standard input and echo the full domain.\nwhile read -r subdomain; do\n  echo \"${subdomain}.${DOMAIN}\"\ndone < \"${FILE}\" \n```", "```\n$ **./generate_subdomains.sh example.com subdomains-1000.txt**\n\nwww.example.com\nmail.example.com\nftp.example.com\nlocalhost.example.com\nwebmail.example.com\n`--snip--` \n```", "```\n$ **sed 's/$/.example.com/g' subdomains-1000.txt**\n\nrelay.example.com\nfiles.example.com\nnewsletter.example.com \n```", "```\n$ **ping 172.16.10.10**\n\nPING 172.16.10.10 (172.16.10.10) 56(84) bytes of data.\n64 bytes from 172.16.10.10: icmp_seq=1 ttl=64 time=0.024 ms\n64 bytes from 172.16.10.10: icmp_seq=2 ttl=64 time=0.029 ms\n64 bytes from 172.16.10.10: icmp_seq=3 ttl=64 time=0.029 ms \n```", "```\n#!/bin/bash\nFILE=\"${1}\"\n\n❶ while read -r host; do\n   ❷ if ping -c 1 -W 1 -w 1 \"${host}\" &> /dev/null; then\n    echo \"${host} is up.\"\n  fi\n❸ done < \"${FILE}\" \n```", "```\n$ **./multi_host_ping.sh 172-16-10-hosts.txt**\n\n172.16.10.1 is up.\n172.16.10.10 is up.\n172.16.10.11 is up.\n172.16.10.12 is up.\n172.16.10.13 is up. \n```", "```\n$ **nmap -sn 172.16.10.0/24**\n\nNmap scan report for 172.16.10.1\nHost is up (0.00093s latency).\nNmap scan report for 172.16.10.10\nHost is up (0.00020s latency).\nNmap scan report for 172.16.10.11\nHost is up (0.00076s latency).\n`--snip--` \n```", "```\n$ **nmap -sn 172.16.10.0/24 | grep \"Nmap scan\" | awk -F'report for ' '{print $2}'**\n\n172.16.10.1\n172.16.10.10\n`--snip--` \n```", "```\n$ **sudo arp-scan 172.16.10.10 -I br_public**\n```", "```\n$ **sudo arp-scan 172.16.10.0/24 -I br_public**\n```", "```\n$ **sudo arp-scan -f 172-16-10-hosts.txt -I br_public**\n```", "```\n172.16.10.10  02:42:ac:10:0a:0a     (Unknown: locally administered)\n172.16.10.11  02:42:ac:10:0a:0b     (Unknown: locally administered)\n172.16.10.12  02:42:ac:10:0a:0c     (Unknown: locally administered)\n172.16.10.13  02:42:ac:10:0a:0d     (Unknown: locally administered) \n```", "```\n#!/bin/bash\n\n# Sends a notification upon new host discovery\nKNOWN_HOSTS=\"172-16-10-hosts.txt\"\nNETWORK=\"172.16.10.0/24\"\nINTERFACE=\"br_public\"\nFROM_ADDR=\"kali@blackhatbash.com\"\nTO_ADDR=\"security@blackhatbash.com\"\n\n❶ while true; do\n  echo \"Performing an ARP scan against ${NETWORK}...\"\n\n❷ sudo arp-scan -x -I ${INTERFACE} ${NETWORK} | while read -r line; do\n  ❸ host=$(echo \"${line}\" | awk '{print $1}')\n  ❹ if ! grep -q \"${host}\" \"${KNOWN_HOSTS}\"; then\n      echo \"Found a new host: ${host}!\"\n    ❺ echo \"${host}\" >> \"${KNOWN_HOSTS}\"\n    ❻ sendemail -f \"${FROM_ADDR}\" \\\n        -t \"${TO_ADDR}\" \\\n        -u \"ARP Scan Notification\" \\\n        -m \"A new host was found: ${host}\"\n    fi\n  done\n\n  sleep 10\ndone \n```", "```\n$ **nmap scanme.nmap.org**\n```", "```\n$ **nmap 172.16.10.1**\n```", "```\n$ **nmap localhost scanme.nmap.org**\n```", "```\n$ **nmap -sV -iL 172-16-10-hosts.txt**\n\n`--snip--`\nNmap scan report for 172.16.10.1\nHost is up (0.00028s latency).\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 9.0p1 Debian 1+b2 (protocol 2.0)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n`--snip--`\n\nNmap scan report for 172.16.10.10\nHost is up (0.00029s latency).\nPORT     STATE SERVICE          VERSION\n8081/tcp open  blackice-icecap?\n`--snip--` \n```", "```\n$ **nmap -sV -iL 172-16-10-hosts.txt | grep open**\n\n22/tcp open  ssh\n8081/tcp open  blackice-icecap\n21/tcp open  ftp\n80/tcp open  http\n80/tcp open  http\n22/tcp open  ssh\n`--snip--` \n```", "```\n$ **nmap -sV -iL 172-16-10-hosts.txt --open**\n```", "```\n$ **rustscan -a 172.16.10.0/24**\n\nOpen 172.16.10.11:21\nOpen 172.16.10.1:22\nOpen 172.16.10.13:22\n`--snip--` \n```", "```\n$ **rustscan -g -a 172.16.10.0/24 -r 1-1024**\n\n172.16.10.11 -> [80]\n172.16.10.12 -> [80] \n```", "```\n$ **rustscan -g -a 172.16.10.0/24 -r 1-1024 | awk -F'->' '{print $1,$2}'**\n```", "```\n$ **rustscan -g -a 172.16.10.0/24 -r 1-1024 | awk -F'->' '{print $1,$2}' | tr -d '[]'**\n```", "```\n$ **nc -zv 172.16.10.11 1-1024**\n\n`--snip--`\n\n(UNKNOWN) [172.16.10.11] 80 (http) open\n(UNKNOWN) [172.16.10.11] 21 (ftp) open \n```", "```\n#!/bin/bash\nHOSTS_FILE=\"172-16-10-hosts.txt\"\n❶ RESULT=$(nmap -iL ${HOSTS_FILE} --open | grep \"Nmap scan report\\|tcp open\")\n\n# Read the nmap output line by line.\nwhile read -r line; do\n❷ if echo \"${line}\" | grep -q \"report for\"; then\n    ip=$(echo \"${line}\" | awk -F'for ' '{print $2}')\n  else\n  ❸ port=$(echo \"${line}\" | grep open | awk -F'/' '{print $1}')\n  ❹ file=\"port-${port}.txt\"\n  ❺ echo \"${ip}\" >> \"${file}\"\n  fi\ndone <<< \"${RESULT}\" \n```", "```\n$ **ls -l**\n\ntotal 24\n-rw-r--r-- 1 kali kali 3448 Mar  6 22:18 172-16-10-hosts.txt\n-rw-r--r-- 1 kali kali   13 Mar  8 22:34 port-21.txt\n-rw-r--r-- 1 kali kali   25 Mar  8 22:34 port-22.txt\n`--snip--`\n\n$ **cat port-21.txt**\n\n172.16.10.11 \n```", "```\n$ **nmap -iL 172-16-10-hosts.txt --open -oG -**\n\nHost: 172.16.10.1 ()    Status: Up\nHost: 172.16.10.1 ()    Ports: 22/open/tcp//ssh///  Ignored State: closed (999)\nHost: 172.16.10.10 ()   Status: Up\nHost: 172.16.10.10 ()   Ports: 8081/open/tcp//blackice-icecap///  Ignored State: closed (999)\n`--snip--` \n```", "```\n$ **nmap -iL 172-16-10-hosts.txt --open -oX -**\n\n`--snip--`\n<port protocol=\"tcp\" portid=\"22\"><state state=\"open\" reason=\"syn-ack\" reason_ttl=\"0\"/><service\nname=\"ssh\" method=\"table\" conf=\"3\"/></port>\n`--snip--` \n```", "```\n#!/bin/bash\nLOG_FILE=\"watchdog.log\"\nIP_ADDRESS=\"${1}\"\nWATCHED_PORT=\"${2}\"\n\nservice_discovery(){\n  local host\n  local port\n  host=\"${1}\"\n  port=\"${2}\"\n\n❶ nmap -sV -p \"${port}\" \"${host}\" >> \"${LOG_FILE}\"\n}\n\n❷ while true; do\n❸ port_scan=$(docker run --network=host -it --rm \\\n             --name rustscan rustscan/rustscan:2.1.1 \\\n             -a \"${IP_ADDRESS}\" -g -p \"${WATCHED_PORT}\")\n❹ if [[-n \"${port_scan}\"]]; then\n    echo \"${IP_ADDRESS} has started responding on port ${WATCHED_PORT}!\"\n    echo \"Performing a service discovery...\"\n  ❺ if service_discovery \"${IP_ADDRESS}\" \"${WATCHED_PORT}\"; then\n      echo \"Wrote port scan data to ${LOG_FILE}\"\n      break\n    fi\n  else\n    echo \"Port is not yet open, sleeping for 5 seconds...\"\n  ❻ sleep 5\n  fi\ndone \n```", "```\n$ **./port_watchdog.sh 127.0.0.1 3337**\n```", "```\n$ **python3 -m http.server 3337**\n```", "```\nPort is not yet open, sleeping for 5 seconds...\n127.0.0.1 has started responding on port 3337!\nPerforming a service discovery...\nWrote port scan data to watchdog.log \n```", "```\n$ **cat watchdog.log**\nStarting Nmap (https://nmap.org)\nNmap scan report for 172.16.10.10\nHost is up (0.000099s latency).\n\nPORT     STATE SERVICE          VERSION\n3337/tcp open  SimpleHTTPServer\n`--snip--` \n```", "```\n$ **nc 172.16.10.11 -v 21**\n\n172.16.10.11: inverse host lookup failed: Unknown host\n(UNKNOWN) [172.16.10.11] 21 (ftp) open\n220 (**vsFTPd 3.0.5**) \n```", "```\n#!/bin/bash\nFILE=\"${1}\"\nPORT=\"${2}\"\n\n❶ if [[\"$#\" -ne 2]]; then\n  echo \"Usage: ${0} <file> <port>\"\n  exit 1\nfi\n\n❷ if [[! -f \"${FILE}\"]]; then\n  echo \"File: ${FILE} was not found.\"\n  exit 1\nfi\n\n❸ if [[! \"${PORT}\" =~ ^[0-9]+$]]; then\n  echo \"${PORT} must be a number.\"\n  exit 1\nfi\n\n❹ while read -r ip; do\n  echo \"Running netcat on ${ip}:${PORT}\"\n  result=$(echo -e \"\\n\" | nc -v \"${ip}\" -w 1 \"${PORT}\" 2> /dev/null)\n❺ if [[-n \"${result}\"]]; then\n    echo \"===================\"\n    echo \"+ IP Address: ${ip}\"\n    echo \"+ Banner: ${result}\"\n    echo \"===================\"\n  fi\ndone < \"${FILE}\" \n```", "```\n$ **curl --head 172.16.10.10:8081**\n\nHTTP/1.1 200 OK\nServer: Werkzeug/2.2.3 Python/3.11.1\n`--snip--`\nContent-Length: 7176\nConnection: close \n```", "```\n#!/bin/bash\nDEFAULT_PORT=\"80\"\n\n❶ read -r -p \"Type a target IP address: \" ip\n❷ read -r -p \"Type a target port (default: 80): \" port\n\n❸ if [[-z \"${ip}\"]]; then\n  echo \"You must provide an IP address.\"\n  exit 1\nfi\n\n❹ if [[-z \"${port}\"]]; then\n  echo \"You did not provide a specific port, defaulting to ${DEFAULT_PORT}\"\n❺ port=\"${DEFAULT_PORT}\"\nfi\n\necho \"Attempting to grab the Server header of ${ip}...\"\n\n❻ result=$(curl -s --head \"${ip}:${port}\" | grep Server | awk -F':' \\\n        '{print $2}')\n\necho \"Server header for ${ip} on port ${port} is: ${result}\" \n```", "```\n$ **./curl_banner_grab**\n\nType a target IP address: **172.16.10.10**\nType a target port (default: 80): **8081**\nAttempting to grab the Server header of 172.16.10.10...\nServer header for 172.16.10.10 on port 8081 is: Werkzeug/2.2.3 Python/3.11.1 \n```", "```\n$ **ls -l /usr/share/nmap/scripts**\n\n-rw-r--r-- 1 root root  3901 Oct  6 10:43 acarsd-info.nse\n-rw-r--r-- 1 root root  8749 Oct  6 10:43 address-info.nse\n-rw-r--r-- 1 root root  3345 Oct  6 10:43 afp-brute.nse\n-rw-r--r-- 1 root root  6463 Oct  6 10:43 afp-ls.nse\n-rw-r--r-- 1 root root  3345 Oct  6 10:43 afp-brute.nse\n-rw-r--r-- 1 root root  6463 Oct  6 10:43 afp-ls.nse\n`--snip--` \n```", "```\n$ **nmap -sV --script=banner.nse -iL 172-16-10-hosts.txt**\n\nNmap scan report for 172.16.10.12\n`--snip--`\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.54 ((Debian))\n|_http-server-header: Apache/2.4.54 (Debian)\n`--snip--` \n```", "```\n$ **nmap -sV --script=banner.nse -iL 172-16-10-hosts.txt | grep \"|_banner\\||_http-server-header\"**\n```", "```\nPORT     STATE SERVICE          VERSION\n8081/tcp open  blackice-icecap?\n| fingerprint-strings:\n`--snip--` \n```", "```\n$ **sudo nmap -O -iL 172-16-10-hosts.txt**\n\n`--snip--`\n21/tcp open  ftp\n80/tcp open  http\nMAC Address: 02:42:AC:10:0A:0B (Unknown)\nDevice type: general purpose\nRunning: Linux 4.X|5.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\nOS details: Linux 4.15 - 5.6\nNetwork Distance: 1 hop \n```", "```\n#!/bin/bash\nHOSTS=\"$*\"\n\n❶ if [[\"${EUID}\" -ne 0]]; then\n  echo \"The Nmap OS detection scan type (-O) requires root privileges.\"\n  exit 1\nfi\n\n❷ if [[\"$#\" -eq 0]]; then\n  echo \"You must pass an IP or an IP range\"\n  exit 1\nfi\n\necho \"Running an OS Detection Scan against ${HOSTS}...\"\n\n❸ nmap_scan=$(sudo nmap -O ${HOSTS} -oG -)\n❹ while read -r line; do\n  ip=$(echo \"${line}\" | awk '{print $2}')\n  os=$(echo \"${line}\" | awk -F'OS: ' '{print $2}' | sed 's/Seq.*//g')\n\n❺ if [[-n \"${ip}\"]] && [[-n \"${os}\"]]; then\n    echo \"IP: ${ip} OS: ${os}\"\n  fi\ndone <<< \"${nmap_scan}\" \n```", "```\n$ **sudo nmap -O 172.16.10.0/24 -oG -**\n\n`--snip--`\nHost: 172.16.10.10 () Ports: 8081/open/tcp//blackice-icecap/// Ignored State: closed (999) OS:\nLinux 4.15 - 5.6   Seq Index: 258   IP ID Seq: All zeros\n`--snip--` \n```", "```\n$ **sudo ./os_detection.sh 172.16.10.0/24**\n\nRunning an OS Detection Scan against 172.16.10.0/24...\nIP: 172.16.10.10 OS: Linux 4.15 - 5.6\nIP: 172.16.10.11 OS: Linux 4.15 - 5.6\nIP: 172.16.10.12 OS: Linux 4.15 - 5.6\nIP: 172.16.10.13 OS: Linux 4.15 - 5.6\nIP: 172.16.10.1 OS: Linux 2.6.32 \n```", "```\n$ **whatweb 172.16.10.10:8081**\n\nhttp://172.16.10.10:8081 [200 OK] Country[RESERVED][ZZ], HTML5,\nHTTPServer[Werkzeug/2.3.7 Python/3.11.4], IP[172.16.10.10],\nPython[3.11.4], Title[Menu], Werkzeug[2.3.7], X-UA-Compatible[ie=edge]\n`--snip--` \n```", "```\n$ **whatweb 172.16.10.10:8081 --log-json=/dev/stdout --quiet | jq**\n\n[\n  {\n`--snip--`\n    \"plugins\": {\n      \"Country\": {\n        \"string\": [\n          \"RESERVED\"\n        ],\n        \"module\": [\n          \"ZZ\"\n        ]\n      },\n      \"HTML5\": {},\n      \"HTTPServer\": {\n        \"string\": [\n          \"Werkzeug/2.3.7 Python/3.11.4\"\n        ]\n      },\n      \"IP\": {\n        \"string\": [\n          \"172.16.10.10\"\n        ]\n      },\n \"Python\": {\n        \"version\": [\n          \"3.11.4\"\n        ]\n      },\n      \"Title\": {\n        \"string\": [\n          \"Menu\"\n        ]\n      },\n      \"Werkzeug\": {\n        \"version\": [\n          \"2.3.7\"\n        ]\n      },\n      \"X-UA-Compatible\": {\n        \"string\": [\n          \"ie=edge\"\n        ]\n      }\n    }\n  }\n]\n`--snip--` \n```", "```\n$ **whatweb 172.16.10.10:8081 --log-json=/dev/stdout --quiet |**\n**jq '.[0].plugins.HTTPServer.string[0]'**\n\n\"Werkzeug/2.3.7 Python/3.11.4\" \n```", "```\n$ **whatweb 172.16.10.10:8081 --log-json=/dev/stdout --quiet | jq '.[0].plugins.IP.string[0]'**\n\n\"172.16.10.10\" \n```"]