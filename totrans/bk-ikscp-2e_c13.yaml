- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Path Effects
  prefs: []
  type: TYPE_NORMAL
- en: 'Inkscape has three main extensibility mechanisms: filters, path effects, and
    extensions. If you''re a developer eager to add a cool new feature that doesn''t
    need to be in the core of the vector editor, you should look into one of these.
    Filters ([Chapter 17](c17.xhtml#ch17)), rooted in bitmap processing software,
    are mostly for altering colors and textures; in this chapter, continuing the topic
    of shapes and paths, I describe the interactive path effects that add a whole
    new level of complexity—and excitement—to plain SVG paths. Extensions, which are
    the most universal (but least interactive) way to provide new functionality for
    Inkscape users, are covered in [Chapter 19](c19.xhtml#ch19), although we''ll look
    at path-processing extensions in [13.4](#section13.4).'
  prefs: []
  type: TYPE_NORMAL
- en: 13.1 How Path Effects Work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Live path effects* (LPEs), or simply *path effects*, are an easy-to-use (for
    the end user) yet powerful (for the developer) mechanism for modifying the visible
    shape of a path—for example, rounding the corners, roughening a smooth path, or
    distorting it by blowing or pinching. When you apply a path effect (or multiple
    path effects) to a path, the *original* before-the-effect path is still there—you
    can always view and edit it. Every time you edit the original path, the *visible*
    after-the-effect path is recalculated from that original path and the effect parameters.
    That''s what the *live* in "live path effects" means!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inkscape''s path effects are another application of the basic principle of
    vector graphics: instead of making some permanent and destructive change, leave
    the original object unchanged and record the way the change is to be applied to
    it. After that, both the original object and the parameters of the effect can
    be edited separately at any time.'
  prefs: []
  type: TYPE_NORMAL
- en: Despite the name, path effects apply not only to paths but also to shapes ([Chapter 11](c11.xhtml#ch11))—which
    remain shapes and are still editable as such, using the handles or numeric parameters
    in their shape tools ([Figure 13-1](#fig13-1)). A path effect can also be applied
    to a group, which gives the same result as if the effect were applied to all the
    paths and shapes in the group. Path effects never apply to text objects, clones,
    or bitmaps.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-example.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-1: The Sketch effect ([13.3.4.1](#section13.3.4.1)) applied to a
    path (left) and to a 3D box (right)'
  prefs: []
  type: TYPE_NORMAL
- en: When a path effect is applied to an object, the only aspect that changes is
    the*visible shape* of the object; if you want to change its *style* in a nondestructive
    way, try filters instead ([Chapter 17](c17.xhtml#ch17)). Path effects can be stacked
    on top of one another, so that the output of one effect is the input for the next
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Path effects are an Inkscape-only feature; unlike, for example, filters, path
    effects are not part of the SVG standard. However, they are implemented in an
    SVG-compatible way. In other words, if you load an SVG file that uses a path effect
    into any SVG viewer (or into an old version of Inkscape that did not support this
    effect), you will see the same*visible* path that you see in latest Inkscape—just
    without access to the *original* path and the effect parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, *display* compatibility (your files are guaranteed to look the
    same in all SVG viewers) does not imply *editing* compatibility. If you edit an
    SVG document with path effects in another editor or in an old Inkscape version,
    you are editing the *visible* path, ignoring the effect. If you then reload the
    edited file into a version of Inkscape that does support the effect and try to
    edit it there, your changes will be lost because the new visible path will be
    regenerated from the unchanged original path and the effect parameters. What's
    worse, the list of path effects and their interpretations is not standardized;
    there is no guarantee that future versions of Inkscape will implement all the
    effects you're using in exactly the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Despite these potential drawbacks, path effects remain a crucial Inkscape technology
    that, since its inception, has proliferated all across the application. Under
    the hood, many commands and features are implemented as path effects. Examples
    include pressure-sensitive ([14.1.2.2](c14.xhtml#section14.1.2.2)) and shaped
    ([14.1.5](c14.xhtml#section14.1.5)) strokes in the Pen and Pencil tools, the Spiro
    and BSpline modes in those tools ([14.1.4](c14.xhtml#section14.1.4)), as well
    as Power Clip and Power Mask ([13.3.12](#section13.3.12)).
  prefs: []
  type: TYPE_NORMAL
- en: 13.2 Managing Path Effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inkscape comes with a number of sample SVG files (in the inkscape/examples folder
    under the Inkscape data folder that you can look up in Preferences, System page).
    A few of these sample files (with names starting with live-path-effects) demonstrate
    and explain some Inkscape path effects. Let's load and explore one of them to
    get a quick idea of how a path effect may look and behave.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that a path object that has one or more path effects applied
    says so in the status bar when you select it—for example,Path 328 nodes, path
    effect: Pattern Along Path, Roughen in layer Background. You can use a copy/paste
    trick to reuse the same effect (or stack of effects) on any number of paths: copy
    the source object (Ctrl-C), select other path (or shape) object(s), and use the
    **Path ▶ Paste Path Effect** command (Ctrl-7).'
  prefs: []
  type: TYPE_NORMAL
- en: To clear away the path effect and return to the original path, use the **Remove
    Path Effect** command in the **Path** menu. If, however, you want to preserve
    the result of the effect and forget the original path (this is sometimes called
    "flattening" or "baking in" the effect), use the **Object to Path** command (Shift-Ctrl-C);
    after it, your path will look exactly the same but the effect will be gone.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean operations ([12.2](c12.xhtml#section12.2)) on paths with path effects
    "flatten" them as well—that is, the result is the same as if you used Object to
    Path on all paths beforehand (however, there is a path effect reimplementation
    of Boolean operations that is nondestructive, [13.3.10](#section13.3.10)). Unfortunately,
    this is also the case for the Combine and Break Apart operations ([12.1.1](c12.xhtml#section12.1.1)),
    even though many effects work on subpaths, so a way to manipulate subpaths without
    losing the effect would be very useful. (In fact, that's how Combine and Break
    Apart used to work in previous versions of Inkscape.) A workaround is to group
    separate paths together and apply the effects to the group. After that, you can
    enter the group ([4.9.1](c04.xhtml#section4.9.1)) and combine or break apart the
    paths inside as needed, without losing the effect on the group.
  prefs: []
  type: TYPE_NORMAL
- en: The Node tool ([12.5](c12.xhtml#section12.5)) edits the *original* path, not
    the *visible* path after the effect. Since the original path you're editing is
    not visible by itself, the Node tool can optionally highlight it with red if you
    turn on the Show path outline toolbar button ([Figure 12-17](c12.xhtml#fig12-17)).
    Also, as you will see below, many effects have on-canvas editable handles that
    you can drag using the Node tool.
  prefs: []
  type: TYPE_NORMAL
- en: 13.2.1 The Path Effect Editor Dialog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Path Effect Editor dialog (Shift-Ctrl-7) is Inkscape's main control hub
    for path effects ([Figure 13-2](#fig13-2)). This is where you apply individual
    effects to the selected object as well as edit parameters of applied effects.
    When an object with one or more path effects is selected, this is where you manage
    its stack of effects—you can add, rearrange, or remove effects in the stack.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-dialog.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-2: The Path Effect Editor dialog: a path with three effects is selected
    (Spiro spline, Stitch Sub-Paths, and Sketch).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dialog works only when you have a single path, shape, or group selected—that
    is, you cannot edit effects on multiple paths simultaneously. Once again, the
    fact that path effects can apply to groups provides a workaround: if there are
    many paths or shapes that you want to have the same effect(s) with the same parameters,
    simply group them together, select the group, and use this dialog to apply the
    effect(s) to the group. After that, you will be able to access or edit these effects
    only if you select the parent group, not any of the individual paths inside the
    group (remember that, for example, the Node tool always selects paths ignoring
    grouping).'
  prefs: []
  type: TYPE_NORMAL
- en: The list at the top of the dialog shows all the effects applied to the selected
    object. The effects are listed top to bottom—that is, the topmost effect in the
    list is the first to be applied to the source path. Its output is passed as input
    to the second one, and so on, until the last listed effect's output is displayed
    as the final result.
  prefs: []
  type: TYPE_NORMAL
- en: Any new effect that you add (using the plus-sign button under the list) is placed
    at the end of the stack. You can move any effect in the stack up or down with
    the arrow buttons. Clicking the eye icon before each effect's name disables that
    effect, forcing Inkscape to bypass it. To delete an effect from the stack, use
    the button with the minus sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'The panel below the list is where you edit the parameters of the effect selected
    in the list. These may be run-of-the-mill checkboxes or drop-down lists, but some
    effect parameters belong to more interesting types:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Numbers* can be either integers or fractional, depending on the nature of
    the parameter. When a number denotes a distance, there is usually a unit selector
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an effect uses a random number, the corresponding *random number parameter*
    gives the range in which the random values must fall (see [Figure 13-3](#fig13-3)).
    The dice button to the right re-randomizes (technically, *reseeds*) the random
    values controlled by this parameter.![](14/pe-param-random.svg.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 13-3: A random number parameter of a path effect'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Link parameters* are used when one path''s effect uses some other path as
    one of its parameters, as shown in [Figure 13-4](#fig13-4). That *linked path*
    can be a separate object located somewhere on the canvas (in the same document),
    or it can be a path stored entirely within the path effect and not visible in
    the document.![](14/pe-param-link.svg.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 13-4: A link parameter of a path effect'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Each link parameter displays a row of four buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit
  prefs: []
  type: TYPE_NORMAL
- en: Switches Inkscape to the Node tool and lets you edit that linked parameter path—whether
    it is a separate object or a path stored inside the effect ([Figure 13-5](#fig13-5)).
    The parameter path is shown as a dark green outline.
  prefs: []
  type: TYPE_NORMAL
- en: This is the same as if you manually switch to the Node tool and click theShow
    next editable path effect parameter button on the controls bar (see [Figure 12-17](c12.xhtml#fig12-17))
    to navigate to this specific linked parameter path (as there may be several, depending
    on the effect).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-edit.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-5: Editing a path effect''s linked path'
  prefs: []
  type: TYPE_NORMAL
- en: Copy
  prefs: []
  type: TYPE_NORMAL
- en: Copies the linked path to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: Paste
  prefs: []
  type: TYPE_NORMAL
- en: Pastes the path from the clipboard into the effect, making a copy of the clipboard
    path and storing it in the effect.
  prefs: []
  type: TYPE_NORMAL
- en: Link
  prefs: []
  type: TYPE_NORMAL
- en: Takes the path copied to the clipboard and links the effect to its original
    in the document. Now, editing the path you had copied will change this path's
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Some effects can only *link* to another path in the document, not store it inside,
    so they don't have the Copy and Paste buttons (for example, the Clone original
    effect, [13.3.5.1](#section13.3.5.1)).
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the numeric controls in the dialog, some path effects allow you to
    edit their parameters visually by on-canvas handles accessible in the Node tool
    and the shape tools (you'll see examples of this as I discuss specific effects).
    These handles are often white and diamond-shaped, but they can be of any color
    or shape so long as they do not get confused with the path nodes and node handles
    that are also editable in that tool. Hovering your mouse over a path effect handle
    will usually show some useful hint in the status bar.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the parameters panel, there is a folded section titled Set
    default parameters. In it, you can make the current value of any of the effect's
    parameters its default value. The default value will then be used when you apply
    this specific effect to new objects.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3 A Guide to Inkscape Path Effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Path effects remain one of the active growth areas in Inkscape development,
    and the list of effects supported by the program expands with each new version.
    Unfortunately, this also means that path effects are a "work in progress" more
    so than the rest of Inkscape. Some of the effects are marked "experimental," but
    even among the non-experimental ones, not all effects are polished and reliable
    enough for a more than occasional use.
  prefs: []
  type: TYPE_NORMAL
- en: This section lists and explains, with examples, the most useful and usable path
    effects in the latest version of Inkscape, grouped by topic. [Figure 13-6](#fig13-6)
    shows what you see when you click the plus-sign button in the Path Effect Editor
    dialog to add a new effect.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-live-path-effects-editor.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-6: All path effects in Inkscape (excluding the experimental ones)'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.1 Stroke Shaping Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Historically, what later evolved into Inkscape path effects was first inspired
    by the desire to have paths stroked by something more interesting and expressive
    than the standard same-width SVG stroke—to have editable *vector brushes*. Now,
    Inkscape offers two different approaches to this, described in this and the following
    sections; each approach has at least two implementations as distinct path effects.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.1.1 Power Stroke
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Imagine that your stroked path has additional handles along its length, and
    you can drag any of them laterally to make the path wider or narrower in this
    area. That''s exactly what the Power stroke effect offers: a variable-width stroke
    whose profile you can adjust interactively by dragging onscreen handles (in the
    Node tool). Just as with a regular stroke, you can also adjust cap ([9.3](c09.xhtml#section9.3))
    and join types ([9.2](c09.xhtml#section9.2)), as well as play with various interpolation
    and smoothness settings.'
  prefs: []
  type: TYPE_NORMAL
- en: Power stroke is what the Pencil tool applies to paths it creates in the pressure-sensitive
    mode ([14.1.2.2](c14.xhtml#section14.1.2.2)). However, as with any other path
    effect, you can also assign it to any path manually. Just select a path, click
    the plus-sign button in the **Path Effect Editor** dialog, and select **Power
    stroke** in the list ([Figure 13-6](#fig13-6)). This creates a power stroke with
    (initially) three purple-coloredPower stroke handles along the path. Switch to
    the Node tool and drag any of them to see how the path responds ([Figure 13-7](#fig13-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-powerstroke.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-7: The Power stroke effect'
  prefs: []
  type: TYPE_NORMAL
- en: Of the parameters of the effect, the most useful are the Width factor, which
    uniformly scales the stroke width at all handles, and the Cap type that you can
    select for the start and end nodes separately. The default Zero width cap smoothly
    tapers out the stroke from the first/last purple handle to the end of the path,
    whereas the Butt, Round, and Peak caps keep it the same width from the ultimate
    handle to the end.
  prefs: []
  type: TYPE_NORMAL
- en: If you need more purple handles to shape your stroke, Ctrl-click any of them
    and then drag away the new handle that gets created in the same spot. To delete
    a handle, Ctrl-Alt-click it.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.1.2 Taper Stroke
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A simpler variation of Power stroke is the Taper stroke effect shown in [Figure 13-8](#fig13-8).
    Instead of arbitrary shaping, all it does is taper off the ends of a stroke—but
    this is good enough for many use cases. This effect displays two round handles
    that can move only along the path's centerline, indicating the points where the
    path begins to narrow down. The Taper smoothing parameter lets you vary the tapering
    from triangular (0) to smoothly elliptic (1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-taperstroke.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-8: The Taper stroke effect'
  prefs: []
  type: TYPE_NORMAL
- en: The biggest problem with both Taper stroke and Power stroke is that they are
    tied to the positions of the nodes in a path, instead of the distance along that
    path. For instance, the numeric start/end offsets in Taper stroke are measured
    in the units of the first/last internode distance—so that when Start offset is
    1, the start tapering handle coincides with the *second* node on the path. Many
    path operations, such as Simplify ([12.3](c12.xhtml#section12.3)), do not preserve
    node positions, which makes Taper stroke and Power stroke behave unpredictably.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.2 Path-Bending Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Pattern Along Path and Bend effects implement a different approach to editable
    vector brushes ([Figure 13-9](#fig13-9)). They both take one path (called the
    *pattern*) and bend and/or stretch it along another path (called the *skeleton*).
    As usual with path effects, both the skeleton path and the pattern remain editable
    at any time, with the result updated live.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-pattern.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-9: Bending a pattern along a skeleton'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is also used by the Pencil tool: instead of a Power stroke controlled
    by a pressure-sensitive tablet pen, you can assign a predefined fixed shape to
    your Pencil strokes (see [Figure 14-12](c14.xhtml#fig14-12) for an example). You
    can also take an existing drawing made with plain SVG strokes and try applying
    various patterns to its paths.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.2.1 Pattern Along Path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The main difference between the Pattern Along Path and Bend effects is which
    path is the skeleton and which is the pattern. In Pattern Along Path, the path
    you're applying the effect to is the skeleton, and the pattern is linked up as
    a link parameter.
  prefs: []
  type: TYPE_NORMAL
- en: This effect is ideal for simple, possibly repeated, patterns applied to arbitrarily
    complex skeletons. The linked pattern path can be either an independent path object
    in the document or a path stored inside the effect itself. The result gets the
    style of the skeleton. This is the effect used by the Shape option in the Pen
    and Pencil tools ([14.1.5](c14.xhtml#section14.1.5)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you apply Pattern Along Path to a skeleton path, you need to supply the
    pattern using the Pattern source link parameter. The Edit button does not work
    unless you paste or link some pattern path first, so the usual sequence of operations
    is this: select a pattern path, copy it (Ctrl-C), select a skeleton path, assign
    **Pattern Along Path** to it, and paste or link the pattern to it, as shown in
    [Figure 13-10](#fig13-10). You can also draw paths with the copied pattern applied
    to them automatically if you choose From clipboard in theShape list in the Pen
    or Pencil tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-pop.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-10: The Pattern Along Path effect'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Pattern Along Path effect can use one of the following *repeat modes*:'
  prefs: []
  type: TYPE_NORMAL
- en: Single
  prefs: []
  type: TYPE_NORMAL
- en: Places a single copy of the pattern along the skeleton, from the start node,
    without stretching it. If the pattern is shorter than the skeleton, it will only
    cover part of the skeleton's length; if the pattern is so long that it does not
    fit even once, it will not be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Single, stretched (default)
  prefs: []
  type: TYPE_NORMAL
- en: Also places a single copy of the pattern along the skeleton, but always stretches
    or squeezes it so it exactly fits the skeleton's length. The Bend effect always
    uses this mode; unlike Pattern Along Path, in Bend the repeat mode is not changeable.
  prefs: []
  type: TYPE_NORMAL
- en: Repeated
  prefs: []
  type: TYPE_NORMAL
- en: Places as many copies of the pattern as will fit along the skeleton, but doesn’t
    stretch them, so the remainder of the skeleton (less than one pattern length)
    remains unfilled. (This does not mean that the copies of the pattern are identical;
    the curvature of the skeleton may noticeably distort them, as [Figure 13-11](#fig13-11)
    demonstrates.)
  prefs: []
  type: TYPE_NORMAL
- en: Repeated, stretched
  prefs: []
  type: TYPE_NORMAL
- en: Places as many copies of the pattern along the skeleton as would fit and stretches
    them evenly, so that they exactly fill the entire skeleton length.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-pop-repeat.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-11: Repeat modes of Pattern Along Path'
  prefs: []
  type: TYPE_NORMAL
- en: The pattern always starts from the start of the path; if you want it to go the
    other way, use**Path ▶ Reverse**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Pattern Along Path effect also allows you to adjust some *distance parameters*:'
  prefs: []
  type: TYPE_NORMAL
- en: Spacing (only for repeated modes)
  prefs: []
  type: TYPE_NORMAL
- en: Sets the spacing between copies of the pattern on the path.
  prefs: []
  type: TYPE_NORMAL
- en: Normal offset
  prefs: []
  type: TYPE_NORMAL
- en: Moves all copies of the pattern *perpendicular* to the skeleton path at each
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Tangential offset
  prefs: []
  type: TYPE_NORMAL
- en: Moves all copies of the pattern *along* the skeleton path, so that the first
    pattern starts not at the beginning of the skeleton but at this specified distance
    from it.
  prefs: []
  type: TYPE_NORMAL
- en: These offsets and spacing parameters are, by default, in absolute `px` units.
    By checking the Offset in units of pattern size checkbox, you can express them
    as multipliers of the pattern size—for example, a tangential offset of 0.5 will
    shift the pattern along the skeleton by half the pattern's width, as [Figure 13-12](#fig13-12)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-pop-offsets.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-12: Spacing and offsets in Pattern Along Path'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the original pattern is considered to be horizontal—that is, the
    pattern is aligned on the skeleton by the pattern's horizontal axis. By checkingPattern
    is vertical (for Pattern Along Path) or Original path is vertical (forBend), you
    can rotate the pattern by 90 degrees so it aligns its vertical axis to the path
    (see [Figure 13-13](#fig13-13)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-pop-ori.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-13: Orientation of pattern in Pattern Along Path'
  prefs: []
  type: TYPE_NORMAL
- en: Both effects let you change the width of the pattern. The Width parameter can
    be measured either in the units of the original width of the pattern or in the
    units of the skeleton length (Width in units of length). In both effects, you
    can also adjust width by an onscreen handle that is attached to one end of the
    skeleton path by a perpendicular segment ([Figure 13-14](#fig13-14)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-pop-width.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-14: Adjusting the width of a pattern in Pattern Along Path'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.2.2 Bend
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Bend, the path you're applying the effect to is the pattern, whereas the
    skeleton is linked up using a link parameter. This is more convenient when you
    have a complex pattern that you want to curve lightly along a simple skeleton
    path that can be shared by several bent paths. Similarly, the linked skeleton
    path can be either an independent path in the document or a path stored inside
    the effect itself. The result gets the style of the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: For this effect, you start with the pattern, apply the effect, and use the Bend
    link parameter to link to a skeleton. Unlike Pattern Along Path, however, Bend
    provides a default two-node skeleton path that stretches along the horizontal
    axis of your pattern—so you can at once use the Edit button to edit that skeleton
    ([Figure 13-15](#fig13-15)). Or you can paste a skeleton (which may itself have
    some path effect applied to it) from the clipboard, or link to a copied path in
    the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-bp.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-15: The Bend effect'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.3 Deformation Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Effects in this group create an editable external frame on your path, and you
    can then edit that frame to deform or distort the path in various ways. You will
    need this, for example, when inscribing a complex shape into a 3D scene (perspective
    distortion) or sticking a label onto a curvilinear bottle (lattice or envelope
    deformation). As with all other path effects, these deformations will work on
    a group as well as on an individual path, and the group can contain all kinds
    of differently styled objects (even though any non-paths and non-shapes in that
    group, such as bitmaps or text not converted to paths, will *not* be distorted
    by the effect).
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.3.1 Envelope
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The simplest effect in this group, Envelope Deformation, creates a rectangular
    envelope whose four sides can each be edited as Bézier curves. The effect treats
    the sides as four individual helper paths ("bend paths"), which is slightly inconvenient:
    you need to click theEdit buttons for each side in turn to curve all four sides.
    TheCopy and Paste buttons allow you to transfer the shape of the envelope from
    one object to another, but this also requires four separate copy/paste operations.
    On the other hand, the four sides being separate means they need not necessarily
    touch each other, which allows for some additional distortive flexibility, as
    shown in [Figure 13-16](#fig13-16).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-envelope.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-16: Envelope distortion on a group of paths (bottom bend path activated);
    the red outline (on mouse hover in the Node tool) shows the original undistorted
    path of one of the letters.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.3.2 Lattice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Lattice Deformation effect is a more complex variation of the same idea.
    It creates a five-by-five lattice of control points that you can drag around individually
    (also in the Node tool), which allows for more sophisticated and detailed distortions
    ([Figure 13-17](#fig13-17)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Handling that many points manually may be tricky, so the effect offers some
    ways to simplify the workflow: theMirror movements in horizontal/vertical parameters
    make the lattice symmetric so you need to shape only one half of it, andUse only
    perimeter removes the inner points altogether, limiting the lattice to the 16
    points on its perimeter. The Reset grid button lets you clear any botched edits
    of the lattice and start over.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-lattice.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-17: Lattice distortion on a group of paths; the red outline (on mouse
    hover in the Node tool) shows the original undistorted path of one of the letters.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.3.3 Perspective
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Finally, the Perspective Transformation effect is specialized for 3D-like transformations
    of paths—for example, this is what you would use to place a word of text on the
    side of a 3D box ([11.3](c11.xhtml#section11.3)). Here, the envelope has only
    four corner nodes and its sides cannot be curved, as [Figure 13-18](#fig13-18)
    demonstrates. The effect's parameters allow you to set the coordinates of the
    four points numerically or make the envelope symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-perspective.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-18: Perspective distortion on a group of paths; the red outline (on
    mouse hover in Node tool) shows the original undistorted path of one of the letters.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.4 Artistic Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Effects in this group strive to make objects look less geometric and more organic
    or freehand-drawn. Usually, this involves an element of randomness.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.4.1 Sketch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sketch is an artistic effect that turns a path into a sketch-like drawing made
    of multiple strokes, as if drafted on paper by an artist trying to grope for the
    perfect shape ([Figure 13-19](#fig13-19)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-sketch.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-19: The Sketch effect'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sense of this complex effect''s parameters, note that the sketch consists
    of two types of artifacts: approximating strokes and construction lines. The *approximating
    strokes* cover the entire path; they are typically curvilinear, more or less parallel
    to the original path (with certain tremor), and travel at some distance from it.
    The *construction lines*, on the other hand, identify and emphasize the straight
    or almost straight segments of the path by drawing straight lines that extend
    each such segment on both sides.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the approximating strokes, you can change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The average *number* of parallel strokes at each point of the path (default
    is five). Set this parameter to 0 to hide approximating strokes (leaving only
    construction lines). Low values make the sketch airy and tentative; increasing
    the number makes it bolder and noisier, as shown in [Figure 13-20](#fig13-20).![](14/pe-sketch-num.svg.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 13-20: Changing the number of approximating strokes (construction lines
    are off)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The maximum *length* of strokes (in `px` units) and the range of the random
    length variation (relative to the maximum length).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum *overlapping* of subsequent strokes (in `px` units) and the range
    of the randomvariation of this parameter (relative to the maximum overlap value).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *end tolerance*, which affects how close the approximating strokes follow
    the original path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The average *offset* of the approximating strokes from the original path; by
    varying this parameter, you can make the sketch either neat and tight or wide
    and ruffled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum *tremble* and its *frequency*; these control how the strokes oscillate
    around the original path ([Figure 13-21](#fig13-21)). Increasing the maximum tremble
    ruffles the sketch, similar to increasing offset but more randomly. Increasing
    the frequency makes the sketch lines look rougher by making them tremble on a
    smaller scale.![](14/pe-sketch-tre.svg.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 13-21: Changing the tremble frequency of approximating strokes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the construction lines, you can change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The total (not average) *number* of lines in the sketch (the default is five).
    Set this to 0 to suppress construction lines, leaving only approximating strokes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *scale* parameter, which tells how far the ends of the construction lines
    can go beyond the ends of the straight (or approximately straight) segments of
    the path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum *length*, and its random *variation*, which set the upper limit
    on the length of construction lines ([Figure 13-22](#fig13-22)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](14/pe-sketch-con.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-22: Playing with construction lines (approximating strokes are off)'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.4.2 Hatches
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Hatches effect, unlike everything else you've seen so far, focuses on the
    fill of the path, not its stroke. It creates a wiggly line that fills the path
    to create an impression of freehand artistic hatching.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic parameters of the hatching are controlled by onscreen handles, editable
    in the Node tool. There are two pairs of handles: the green pair controls the
    density (frequency) of the hatching and its slant, while the yellow pair bends
    the hatching lines into arcs. In each pair, the round handle is the base (which
    can be placed anywhere), and the diamond handle controls its parameter by its
    position relative to the base, as shown in [Figure 13-23](#fig13-23).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-hatches.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-23: The Hatches effect and its control handles'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the parameters of this complex effect control various aspects of
    the hatching shape. Frequency randomness controls how much random variation is
    added to the density of the strokes; the smaller this value, the more uniform
    is the density of the hatching.
  prefs: []
  type: TYPE_NORMAL
- en: The 1st side and 2nd side in the parameter labels refer to the two opposite
    series of bends of the hatching wiggle—for example, bottom and top, if hatching
    is oriented vertically. Thus, Magnitude jitter, 1st side controls how random the
    position of each bend is at the bottom of the hatching—that is, how closely the
    hatching tracks the edge of the original path at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Parallelism jitter adds randomness to the direction of the wiggle strokes, and
    Half-turn smoothness allows you to vary the bends from sharp angles to circular
    arcs. Finally, Thickness values change how narrow or wide the hatching strokes
    are in various parts. [Figure 13-24](#fig13-24) shows some examples.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-hatches-params.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-24: Playing with the Hatches effect''s parameters'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.4.3 Roughen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Roughen effect is the general-purpose noise component in the path effects
    ecosystem. It subdivides the Bézier curves of a path into shorter segments and
    randomly displaces the nodes and node handles ([Figure 13-25](#fig13-25)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-roughen.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-25: The Roughen effect'
  prefs: []
  type: TYPE_NORMAL
- en: 'The subdividing is done in one of two ways: either specify the maximum segment
    size or give the number of segments into which to break each Bézier of the original
    path. The first approach (the default) is better in that it does not depend on
    the nodes of the original path and produces segments of approximately equal size.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you get to choose by how much to jitter the nodes. Maximum displacement
    parameters limit this from above—but if you tick the Fixed displacement checkbox,
    it also limits the movement of the nodes by 1/3 of the (subdivided) segment length.
    That is, if you want to jitter nodes by 10 px, you need to put 10 into theMaximum
    displacement fields and also uncheck Fixed displacement. With Shift nodes unchecked,
    the effect only randomly rotates the handles of the Bézier segments but does not
    move the nodes themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.4.4 Simplify
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You''ve already met Simplify ([12.3](c12.xhtml#section12.3)) as a one-time
    destructive command. Now, meet its tamer, more cooperative, and fully reversible
    cousin: the Simplify path effect.'
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying is a powerful concept. You take a path and ask Inkscape to redraw
    it from scratch, without looking at the original nodes but trying to preserve
    the overall shape—with some simplification. The result may be more or less useful,
    but it rarely fails to amuse. It makes sense to group Simplify together with Roughen
    because they act in directly opposite ways—although, of course, simplifying a
    roughened path will not give you the exact original, but just a different (and
    subtler) kind of artistic distortion, as shown in [Figure 13-26](#fig13-26).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-simplify.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-26: The Simplify effect'
  prefs: []
  type: TYPE_NORMAL
- en: The effect's parameters worth fiddling with include the simplification threshold
    and the number of passes. (The Helper size is best set to 0; I could not find
    any use for the helper lines that this effect shows on canvas.)
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it makes just as much sense to overlay Roughen on top of Simplify,
    so that Simplify creates a characteristic organic shape to which Roughen adds
    texture, as [Figure 13-27](#fig13-27) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-simplify-roughened.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-27: Roughen on top of Simplify'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.5 Repeaters and Fractals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of effects, instead of distorting the source path, simply copy or multiply
    it in various useful ways.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.5.1 Clone Original
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a generic clone effect for copying one path's nodes (more precisely,
    *path data*, which includes positions and types of all nodes and handles) to another
    path. Unlike the standard SVG clones ([Chapter 16](c16.xhtml#ch16)), this effect
    lets you copy only the path data, with or without its path effects. The cloned
    path is still a path, so you can apply some other effects to it on top of the
    Clone original. For example, you can have an original path that uses Spiro spline
    and a number of its clones that have varying levels of Roughen or Simplify applied
    on top. This effect also allows you to specify precisely which attributes or CSS
    properties ([8.1](c08.xhtml#section8.1)) the clone object gets from the original.
  prefs: []
  type: TYPE_NORMAL
- en: You can even link a path to a text object without converting it to a path. This
    way, the text remains editable as text, but you also have an automatically identical
    path with the Clone original effect that can have any other path effects stacked
    on top.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use it, you first need to have a path object that will become a clone (its
    own path data will be discarded). Assign the **Clone original** effect to it.
    Then, select and copy (Ctrl-C) the path or text you want to clone. Then, select
    the path with the **Clone original** effect again and click the **Link to item**
    button in its parameters panel. (The Select original button next to it selects
    the object that this one clones from.) Then, choose one of the **Shape** options
    that control exactly what path data will be copied:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With LPE''s (default): the visible path with all its path effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Without LPE''s: the path before any path effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spiro or BSpline Only: the path with only its spline effects ([13.3.7](#section13.3.7))
    applied, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No Shape: nothing is copied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you can specify (as comma-separated lists) the attributes and CSS properties
    that the clone will get from the original path. A separate checkbox controls the
    copying of transformations ([Chapter 6](c06.xhtml#ch6)); if it is unchecked, the
    clone will always be positioned exactly over (or under, depending on z-order)
    the original.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.5.2 Slice [1.1]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Slice effect cuts a path (or shape or group) into two halves with a straight
    cut. This "sawing a person in half" trick produces two separate paths that you
    can move, transform, and style independently ([Figure 13-28](#fig13-28)). Of the
    two resulting paths, one (with the Slice effect applied) stores and lets you edit
    the entire path but shows only one half of it. The other path has no path effects
    of its own, but when you edit the first path, it updates automatically to reflect
    the changes. You can adjust the cut line's position and angle with the handles.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-slice.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-28: Slicing a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.5.3 Mirror Symmetry
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This effect takes the original path and creates a copy of it mirrored around
    an axis of symmetry that you can adjust interactively via onscreen handles in
    the Node tool ([Figure 13-29](#fig13-29)). The length of the mirror axis is irrelevant;
    only its position and direction matter. Of the three handles on the mirror axis,
    the end ones rotate it while the central one moves it parallel to itself.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-mirror.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-29: The Mirror symmetry effect'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the effect creates the copy as a subpath of the original path, so
    in the areas where the original and the copy overlap, the paint is determined
    by the fill rule ([12.1.2](c12.xhtml#section12.1.2)). If you enable Fuse paths,
    the paths will never overlap because they will be clipped by the mirror axis;
    if you also enable Fuse opposite sides, clipping itself is mirrored, so you see
    only the parts of the path that go *beyond* the mirror axis (and their reflection).
    The Split elements option creates, instead of a subpath, a separate path element
    for the mirror copy, which can have a different style; you can manually transform
    or node-edit this mirror path—but if you then transform or node-edit the original
    path, the mirror copy object will synchronize, overriding your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Even such a simple thing as mirror symmetry can produce amazingly deep patterns
    if applied, for example, to a large complex star, as [Figure 13-30](#fig13-30)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-mirror-star.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-30: An owl''s eyes: a mirrored 183-ray star'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.5.4 Rotate Copies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a close relative of the Mirror symmetry effect, except that it creates
    any number of copies placed on a circle whose center and starting angle you can
    adjust via onscreen handles in Node tool. Optionally, you can mirror every second
    copy. You can also enable the Split elements option that creates separate path
    elements, instead of subpaths, for each copy. Note that adjusting the starting
    angle rotates all copies of the path, including the original (even though the
    Node tool will still show it in its original place, if you enable the red outline),
    as shown in [Figure 13-31](#fig13-31).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-rotate.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-31: The Rotate copies effect'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.5.5 Fill Between Many [1.1]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Fill between many effect creates a new path linked to one or more original
    paths and covering the entire space between them—as if the ends of those paths
    were connected by straight line segments to form a single closed path. The original
    paths can have some path effects of their own (for example, path-shaping effects).
    Editing any of the linked paths updates the fill-between path automatically. This
    effect is so useful, it even has its own menu command: Path ▶ Fill between paths.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-fillbetween.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-32: The Fill between many effect'
  prefs: []
  type: TYPE_NORMAL
- en: You can't node-edit or transform the fill-between path with the Selector, but
    you can style it with a fill and/or stroke style of its own. You can also select
    and delete it as a separate object without affecting the linked paths.
  prefs: []
  type: TYPE_NORMAL
- en: Despite having the word *many* in its name, this effect can be just as useful
    with a single original path. When you assign Power stroke or Taper stroke to a
    path with fill ([13.3.1.1](#section13.3.1.1)), a fill-between path is also created
    that is linked to the original path, reproducing its original fill style (which
    otherwise would be lost). This way, you get a shaped stroke and the fill inside
    it, both updated live when you edit the path with the stroke-shaping effect.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.6 VonKoch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recursive effect takes the original path and repeats it twice (as subpaths)
    with shifting, scaling, and rotating; it then repeats the same operation on these
    copies, and so on for the specified number of *generations*. This is an example
    of a fractal—a self-similar shape that looks the same at different levels of zoom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three helper paths control the copies'' transformations: a *reference segment*
    (initially, running horizontally across the source path) and two *generating**paths*
    (initially, running horizontally across the two first-generation copies), as shown
    in [Figure 13-33](#fig13-33).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-vonkoch.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-33: A number of VonKoch fractals for the same source path and different
    helper paths'
  prefs: []
  type: TYPE_NORMAL
- en: These helper paths are two-node straight line segments; to edit them, use the
    Node tool and click the **Show next editable path effect parameter** button on
    its control bar once (for the reference segment) or twice (for the generating
    paths).
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.7 Splines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The word *spline*, as originally used by shipbuilders, referred to a springy
    wooden strip that was fixed in several points and took the most naturally smooth
    shape given the restrictions. In computer design, a spline is a mathematical curve
    that goes through given points and has some desirable properties, such as smoothness
    and naturalness.
  prefs: []
  type: TYPE_NORMAL
- en: Bézier curves ([12.1.4](c12.xhtml#section12.1.4)) are one kind of a spline,
    but there are other kinds too. Bézier curves are flexible and powerful; using
    them for building paths has many years of tradition behind it. All modern graphics
    software supports them in much the same way, and millions of users are familiar
    with them. And yet, once you try something better, the disadvantages of Béziers
    become obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Via path effects, Inkscape implements two other spline types: BSplines and
    Spiro splines. The Pen and Pencil tools can produce BSplines and Spiro paths directly
    ([14.1.4](c14.xhtml#section14.1.4)).'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.7.1 BSpline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *BSpline* is a smooth curve that is inscribed into a polygon that consists
    of the nodes of the original path ([Figure 13-34](#fig13-34)). It does not go
    through those node points but rather treats them as posts on a ski run—trying
    to pass them closely but without losing speed (that is, without sacrificing smoothness).
    Only the start and end nodes of the curve lie on the BSpline, while the smooth
    interior nodes are *off-curve*. (In fact, these off-curve nodes behave almost
    as if they were Bézier handles of a single monstrous Bézier that can have any
    number of handles and not just two.)
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-bspline.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-34: Examples of BSplines'
  prefs: []
  type: TYPE_NORMAL
- en: A BSpline path can also have cusp nodes (which *do* lie on the curve, as they
    start or end a curved segment). A node of the original path that has both Bézier
    handles of nonzero length becomes an off-curve smooth point of a BSpline; a node
    that has at least one of its handles retracted is interpreted as a cusp node.
    To switch node types in a BSpline, in the Node tool, use Shift-S (to smooth) and
    Shift-C twice (to cusp, the first Shift-C just changes the type of the node and
    the second actually retracts the handles).
  prefs: []
  type: TYPE_NORMAL
- en: The fact that, with the exception of the first/last and cusp nodes, all other
    nodes are off-curve is perhaps the biggest disadvantage of BSplines in practice.
    Still, if you want a path that always remains naturally smooth and is easier to
    manipulate than a sequence of Béziers, the BSpline effect is worth trying.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.7.2 Spiro Spline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Spiro splines*, developed by Raph Levien, are another way of defining curvilinear
    paths. Spiros take some getting used to, but for certain tasks (such as lettershape
    design, [Figure 13-35](#fig13-35)), they have a clear advantage over Bézier curves.
    Compared with BSplines, Spiro paths are often harder to manipulate—sometimes they''re
    outright cranky—but, in return, they are smooth at an entirely new level of naturalness.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-spiro-letters.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-35: Lettershapes created with Spiro paths'
  prefs: []
  type: TYPE_NORMAL
- en: A Spiro path is defined by a sequence of nodes. A Spiro path has no off-curve
    nodes or handles; unlike a BSpline, a Spiro goes through all of its nodes. The
    curvature of the path is defined entirely by the positions of the nodes and their
    types, as shown in [Figure 13-36](#fig13-36). The path behaves very similarly
    to the original shipbuilders' *spline*—a springy rod that is forced to pass through
    the given points and assumes the *minimum possible curvature* to satisfy the requirement.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-spiro.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-36: Converting a regular path to a Spiro path and back'
  prefs: []
  type: TYPE_NORMAL
- en: The major selling point of a Spiro path is that it is always very smooth—not
    just superficially or locally smooth, as in having no cusps, but smooth at the
    level of the entire path, which you can approximate with Béziers only by a lot
    of laborious tweaking. With a Spiro, moving one node may visibly affect the curve
    at a distance of several nodes away. This does take some getting used to but the
    result may be well worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: With Béziers, the main problem is that each node has not only a position but
    also its own intrinsic direction and curvature, as defined by its handles. So,
    whenever you move a Bézier node around, you also need to adjust its handles carefully
    so that the curve remains naturally smooth. With a BSpline or a Spiro, just move
    the node wherever you want the curve to go, and the smoothness is taken care of
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Spiro path, select any path and assign the **Spiro spline** path
    effect to it. There are no parameters. Each node of your path becomes a point
    of a Spiro path, depending on the type of node ([12.5.5](c12.xhtml#section12.5.5)),
    as shown in [Figure 13-37](#fig13-37):'
  prefs: []
  type: TYPE_NORMAL
- en: Smooth nodes
  prefs: []
  type: TYPE_NORMAL
- en: Nodes with two collinear Bézier handles are smooth points on the Spiro path.
    The length and direction of the Bézier handles on the source path are ignored,
    so long as they remain collinear (that is, so long as the node is smooth). Press
    Shift-S to line up the handles of the selected node to make it smooth.
  prefs: []
  type: TYPE_NORMAL
- en: Half-smooth nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'Nodes with one Bézier handle collinear with a straight line segment on the
    other side behave exactly the same on a Spiro path: they sit between a straight
    line and a curve and force them to join smoothly without a cusp. If you have a
    straight line segment on one side of a node, the first Shift-S will make it half-smooth.'
  prefs: []
  type: TYPE_NORMAL
- en: Cusp nodes
  prefs: []
  type: TYPE_NORMAL
- en: Nodes on the source path become corner points of the Spiro path. They behave
    like free hinges on the springy rod, allowing it to bend at any angle. Between
    two corner points, the Spiro path is always a straight line. To make a node cusp,
    press Shift-C twice (the first Shift-C just changes the type of the node and the
    second actually retracts the handles).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-spiro-nodetype.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-37: Playing with node types in a Spiro path'
  prefs: []
  type: TYPE_NORMAL
- en: The biggest problem with Spiro splines is that some configurations of points
    are unstable and produce wild loops and spirals instead of a smooth curve ([Figure 13-38](#fig13-38)).
    Still, sensible sequences of points usually work fine; you just need to avoid
    sharp changes in direction between points to prevent such instability.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-spiro-failed.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-38: A divergent Spiro path with five nodes'
  prefs: []
  type: TYPE_NORMAL
- en: When editing Spiro paths with the Node tool, the red highlight of the source
    path may be a distraction; you can turn it off with a toggle button in the controls
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.8 Path Utilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This category includes effects that do some useful tweaks to paths that would
    be time-consuming to do manually.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.8.1 Corners (Fillet/Chamfer)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rounding corners is a very common operation in design and technical drawing.
    Rectangles have convenient handles for corner rounding ([11.2.2](c11.xhtml#section11.2.2)),
    but a generic path does not have this luxury. Of course, you can round a path's
    sharp corner manually, but it's a cumbersome task that makes the path harder to
    edit or transform later. Fortunately, Inkscape has a path effect that does all
    the hard work for you and preserves the flexibility of the original path. It's
    even better than rectangle rounding because it allows different rounding radii
    for different corners and supports different rounding profiles!
  prefs: []
  type: TYPE_NORMAL
- en: The term *fillet* means rounding a corner with an arc, whereas *chamfer* means
    cutting a corner with a straight line segment. To make things more fun, both fillets
    and chamfers can be *inverted*—that is, flipped around the corner-cutting diagonal.
    Chamfers can be multistep—that is, consisting of more than one straight line segment
    (and obviously, it's only for multistep chamfers that inverting makes any difference).
  prefs: []
  type: TYPE_NORMAL
- en: You can adjust the size of the fillet/chamfer for any individual node (not necessarily
    cusp) via onscreen handles in the Node tool, as shown in [Figure 13-39](#fig13-39).
    You can also change the Radius value in the parameters pane; this (as well as
    any other parameter change, such as corner type) will by default apply to all
    nodes of the path but can be limited to a selection of nodes if Change only selected
    nodes is on. The radius can be in absolute units or a percentage of the length
    of the adjacent segment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-chamfer.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-39: The Corners (Fillet/Chamfer) effect'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.8.2 Knot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This effect breaks a path into subpaths in order to create gaps between them
    where the path (or a group of paths) self-intersects. [Figure 13-40](#fig13-40)
    demonstrates how to turn a stroked path with self-intersections into a Celtic
    knot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-knot.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-40: The Knot effect on a group of two paths with self-intersections'
  prefs: []
  type: TYPE_NORMAL
- en: It need not necessarily be a single self-intersecting path. Remember that you
    can assign any path effect to a group of paths—and with Knot, this will force
    all paths to create gaps where they intersect all other paths in the same group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Gap length numeric parameter for this effect specifies the width of each
    gap, either In units of stroke width or in document units if this checkbox is
    off. If you have this effect on a group that includes paths of different stroke
    width, the Groups: Inverse parameter ensures that when path A creates a gap crossing
    path B, it takes the width of path B (and not A) as the base for calculating the
    gap width.'
  prefs: []
  type: TYPE_NORMAL
- en: On canvas, you can control each intersection individually. In the Node tool,
    notice that one of its self-intersections has a diamond-shaped handle and a blue
    circular indicator that is open on one side. Click that handle; the indicator
    flips to the other side, and the gap is now created on the *other* line at the
    intersection. Click it again, and you close the intersection, removing any gaps
    (the indicator is now a solid circle). Clicking the handle further cycles through
    these three states for a given intersection. To control another intersection,
    simply drag the handle and drop it onto the intersection you need.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.9 Subpath Manipulations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of effects focus on the subpaths of the original path and do various
    interesting things to them, such as connecting or interpolating.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.9.1 Stitch Sub-Paths
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The surprisingly useful Stitch Sub-Paths effect works only for paths with two
    or more subpaths ([12.1.1](c12.xhtml#section12.1.1)). It replaces the source path
    with a lattice of paths connecting equispaced points on the subpaths, with the
    Number of paths parameter controlling how densely these connecting paths go. With
    this effect, you can create all kinds of hair, fur, lattices, moiré patterns,
    or "power fields," as shown in [Figure 13-41](#fig13-41).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-stitch.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-41: Stitching subpaths'
  prefs: []
  type: TYPE_NORMAL
- en: If a path has three or more subpaths, each pair of subpaths gets its own connecting
    lattice ([Figure 13-42](#fig13-42)). This means the number of connecting lines
    literally explodes as you increase the number of subpaths in the original—so don't
    try this effect on a path with too many subpaths or Inkscape may grind to a halt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-stitch-3.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-42: Stitching three or more subpaths'
  prefs: []
  type: TYPE_NORMAL
- en: The connecting lines need not be straight—that is just the default. You can
    use the Stitch path link parameter to paste or link any existing open path to
    serve as the template for the stitches, or you can edit that template with the
    Node tool. The Scale width parameter scales the stitch path in the direction perpendicular
    to its start-end direction (the value of 1 gives it its natural width). The Scale
    width relative to length parameter makes the width of each stitch depend on the
    length of that stitch, as shown in [Figure 13-43](#fig13-43).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-stitch-width.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-43: Adjusting the width of a curved stitch path'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a group of randomization (variance) parameters allows you to shuffle
    the attachment points of the stitches, both along the path (spacing) and perpendicular
    to it (edge), separately for the beginning and end of each stitch, as [Figure 13-44](#fig13-44)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-stitch-random.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-44: Randomizing the stitched subpaths'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.9.2 Interpolate Sub-Paths
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This effect is a natural complement for Stitch Sub-Paths. Instead of drawing
    lines from one subpath to another, it draws a number of interpolated subpaths
    between the original path's subpaths. Just as withStitch Sub-Paths, you can node-edit
    or link to a path that guides the placement of the interpolation steps, as shown
    in [Figure 13-45](#fig13-45).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-interpolate-subpaths.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-45: The Interpolate Sub-Paths effect'
  prefs: []
  type: TYPE_NORMAL
- en: For best results, the subpaths should be similar enough, ideally with the same
    number of nodes; otherwise, interpolation may create inexplicable ugly cusps.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.10 Boolean Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You''re already familiar with Boolean operations on paths ([12.2](c12.xhtml#section12.2)).
    They are an essential tool, but they have a big problem: they are destructive.
    Once you union two paths, they no longer exist as separable objects, so you cannot
    copy or clone one of them for reuse, nor can you node-edit them separately. Some
    parts of the original objects (in the case of a union, those areas where the paths
    overlap) are lost forever. Once again, path effects are a natural solution.'
  prefs: []
  type: TYPE_NORMAL
- en: The Boolean operation path effect applied to one path stores a link to another
    path and makes the first path look like a result of a Boolean operation (union,
    cut, division, intersection, difference, or symmetric difference) with the linked
    path. The second (linked) path is not destroyed but hidden ([4.1](c04.xhtml#section4.1)),
    unless you uncheck the Hide linked parameter; however, you can easily select it
    for editing with the Select original button in the parameter panel of the effect.
  prefs: []
  type: TYPE_NORMAL
- en: For example, to make the "an" monogram shown in [Figure 13-46](#fig13-46), I
    assigned the Boolean operation effect to the "n" path, then selected the "a" path,
    copied it, selected "n" again, and pasted it to the effect's Operand path parameter.
    The original "a" path is still present in the document but is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-boolean.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-46: The Boolean operation effect'
  prefs: []
  type: TYPE_NORMAL
- en: When I select the monogram, the bounding box enframes the entire unioned path,
    but the Node tool can edit only the "n" path (as shown by the red outline and
    highlighted nodes); to edit the "a," I need to click the effect's Select original
    button. Note that both letters were made with Spiro splines ([13.3.7.2](#section13.3.7.2)),
    so the Boolean operation effect on "n" is stacked on top of the Spiro effect.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.11 Offset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You've already seen the regular offset commands ([12.4](c12.xhtml#section12.4))
    that expand (*outset*) or contract (*inset*) a path perpendicular to its direction
    at each point. Just as with plain Boolean operations, those commands are destructive—once
    you offset a path, you lose the original. Inkscape now offers a nondestructive
    way to achieve the same result.
  prefs: []
  type: TYPE_NORMAL
- en: The Offset path effect displays, in the Node tool, a single round handle on
    the path. You can drag that handle to any point on the path where it's convenient;
    what matters for the offset is its distance from the closest point on the original
    path. You can also specify the amount of offset numerically with the Offset parameter.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can choose the type of join and the miter limit (compare [9.2](c09.xhtml#section9.2)).
    An outset path is similar to what you would get by adding a stroke to the original
    path, so these parameters give you access to the properties of this imaginary
    stroke. In particular, by setting Join to Miter, you make sure the sharp corners
    of the original path remain sharp in the outset path, as shown in [Figure 13-47](#fig13-47).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-offset.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-47: The Offset path effect'
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, Inkscape has a couple more implementations of path offsets,
    also interactive and adjustable on canvas but not using path effects (they were
    added to the program before the path effects were invented). These are the Dynamic
    Offset and Linked Offset commands in the Path menu and their shortcuts (Ctrl-J
    and Ctrl-Alt-J, correspondingly). A Dynamic Offset is very similar to the Offset
    path effect, whereas a Linked Offset can be emulated by the Offset effect on top
    of the Clone original effect ([13.3.5.1](#section13.3.5.1)). I see no reason to
    use these obsolete implementations now that there is a path effect that does the
    same thing but better (notably, the path effect can offset an unclosed path without
    closing it).
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.12 Power Clip and Power Mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike Boolean operations, plain SVG clips and masks ([18.3](c18.xhtml#section18.3))
    are already nondestructive: you can always recover the original object by removing
    the clip or mask. So why reimplement those features as path effects too?'
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, there''s nothing particularly "power" about the Power clip and Power
    mask path effects. They were created with a single purpose: to enable creating
    an *inverted* clip or mask that would reveal what the plain clip or mask hides
    and vice versa. As such, they are not even assignable via the Path Effects dialog;
    instead, go to the menu and choose **Object ▶ Clip ▶ Set Inverse (LPE)** or **Object ▶ Mask ▶ Set
    Inverse (LPE)**. After that, in the Path Effects dialog, you can check out the
    effect''s parameters, which include checkboxes to turn the effect on or off as
    well as toggle the inversion.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.13 Dashed Stroke
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What on Earth could be improved in standard SVG's dashed strokes ([9.4](c09.xhtml#section9.4))?
    It turns out, a lot.
  prefs: []
  type: TYPE_NORMAL
- en: In SVG, a dash pattern is specified in units of stroke width, but it is not
    in any way coordinated with the path itself—its shape or size. When working with
    a simple symmetric shape, such as a rectangle, it is annoying when you can't make
    the dashes meet symmetrically in the corners or when two opposite and equal sides'
    dashes are not in sync. The Dashed Stroke path effects solves all of these problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this effect, you can tell Inkscape exactly how many dashes you want in your
    path, not how long they need to be. This way, the dashes always stay in sync with
    the shape even when you scale it or change the stroke width. If the Use segments
    parameter is on, you get the specified number of dashes in each segment—that is,
    between each two nodes of the path; if the segments are not equal, the dashes
    will have different lengths too. Turn on **Equalize dashes** to fix this: now
    the entire path will have dashes of the same length as the shortest of its segments.'
  prefs: []
  type: TYPE_NORMAL
- en: The gaps between the dashes are controlled by the Hole factor parameter that
    ranges from −1 (all gaps, no dashes) to 1 (all dashes, no gaps). The default value
    of zero makes the gaps the same length as the dashes.
  prefs: []
  type: TYPE_NORMAL
- en: The Half start/end parameter, on by default, makes each segment start and end
    with a dash of half width, so that the combined dashes at the segment boundaries
    have the same length as elsewhere. When this parameter is off, you will have double-length
    dashes at each node between segments ([Figure 13-48](#fig13-48)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-dashed.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-48: The Dashed Stroke path effect'
  prefs: []
  type: TYPE_NORMAL
- en: The biggest drawback of this effect is that, since it emulates dashes by separate
    subpaths, the path as a whole cannot have a fill because SVG cannot fill in between
    subpaths of a path. One solution is to use Clone original ([13.3.5.1](#section13.3.5.1))
    to clone the path*without* the effect and apply the fill you need to that cloned
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.14 Helper Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Bounding Box and Show handles effects are useful when you need to create
    lasting visualizations of your paths—for example, when you're creating illustrations
    for a book such as this one. The Bounding Box effect turns one path (whose path
    data will be discarded) into a dynamically updated rectangular bounding box of
    another (linked) path. The Show handles effect adds subpaths imitating nodes and
    node handles of the path as they are shown in the Node tool.
  prefs: []
  type: TYPE_NORMAL
- en: The Ruler effect turns any path (not necessarily straight) into a ruler with
    minor and major marks and with adjustable size and spacing. The Measure effect
    is a complex engine for creating measurements on segments of a path; this partly
    overlaps with what the Measure tool does ([6.9.6](c06.xhtml#section6.9.6)) but
    is more powerful for its specific task—with a ton of options for colors, sizes,
    precision, and label formatting, as shown in [Figure 13-49](#fig13-49).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-helpers.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-49: Examples of Show handles, Bounding Box, and Measure Segments
    effects'
  prefs: []
  type: TYPE_NORMAL
- en: 13.3.15 Geometric Constructions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A final group of path effects will help you do some simple interactive geometric
    constructions ([Figure 13-50](#fig13-50)). In the Path Effects dialog, they are
    currently marked as "experimental" and hidden by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-geometric.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-50: The geometric constructions extensions'
  prefs: []
  type: TYPE_NORMAL
- en: Circle by three points
  prefs: []
  type: TYPE_NORMAL
- en: Using the Pen, click three times to create a three-point path, assign this effect,
    and Inkscape will create a circle that passes through those three points. A circle
    is never clipped—even though it can potentially be infinite when the three lines
    are on the same straight line (in practice, placing the points on the same line
    makes the effect misbehave). This path effect has no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Circle by center and radius
  prefs: []
  type: TYPE_NORMAL
- en: The first node of the path gives the center, and the last one sets the radius.
    This path effect has no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Parallel
  prefs: []
  type: TYPE_NORMAL
- en: This effect creates a line running through an *anchor point* parallel to the
    line connecting your path's start and end nodes. You can move the anchor point
    via a diamond-shaped handle in the Node tool or via the Offset parameters of the
    Parallel path effect. To change how far to the left and right of the anchor point
    you want the parallel line to go, use the **Length left** and **Length right**
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original path—to which the new line is parallel—becomes invisible when
    you create the parallel: the parallel is now the visible path of that object,
    and the original nodes are editable only in the Node tool. If you need two visible
    straight lines that are always automatically parallel to each other, create *two*
    lines and make the second one a **Clone original** ([13.3.5.1](#section13.3.5.1))
    of the first but choose the **Without LPE''s** option. Then, select the first
    one and turn it into its own parallel using this tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Perpendicular bisector
  prefs: []
  type: TYPE_NORMAL
- en: This works similar to the Parallel effect except that instead of a parallel
    line, it creates a line that is perpendicular to the given segment and goes through
    its center. If you need two lines to be automatically perpendicular to one another,
    create a**Perpendicular bisector** on one of them, then open the **Path Effects**
    dialog, add a **Clone original** effect to it, and move it up before the **Perpendicular
    bisector** effect. Finally, select the second line object, copy it, and paste
    into the **Link** parameter of the **Clone original**.
  prefs: []
  type: TYPE_NORMAL
- en: Angle bisector
  prefs: []
  type: TYPE_NORMAL
- en: This works similarly to the Perpendicular bisector except it bisects an angle
    created by a three-node path. Just assign this path effect to a path with three
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Mirror symmetry
  prefs: []
  type: TYPE_NORMAL
- en: See [13.3.5.3](#section13.3.5.3) for a description of the Mirror symmetry effect.
  prefs: []
  type: TYPE_NORMAL
- en: Ellipse from points
  prefs: []
  type: TYPE_NORMAL
- en: This effect adapts to the number of points in the original path. For two or
    three points, it creates a circle; for five points, it creates an ellipse that
    goes exactly through those five points. For any other number of points, the effect
    can't be exact, but it tries as best it can, creating an *approximate* ellipse
    that minimizes the deviations from all points ([Figure 13-51](#fig13-51)).
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, you can add a frame or axes to the ellipse. If you set the Method
    parameter to Force circle, the effect will always create a circle, either exact
    or approximate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-ellipse.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-51: The Ellipse from points effect'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4 Path Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Extensions ▶ Generate from Path, Extensions ▶ Modify Path, and Extensions ▶ Visualize
    Path submenus, Inkscape has a number of extensions ([Chapter 19](c19.xhtml#ch19))
    that work with paths. Through the years, many of them have been reimplemented
    as path effects—with on-canvas editability, better integration with the rest of
    the program, and, typically, richer options. However, Inkscape still includes
    most of the obsoleted extensions.
  prefs: []
  type: TYPE_NORMAL
- en: One reason is that an extension, as a one-off operation, does not introduce
    any non-SVG attributes into the document, so it is not prone to potential incompatibilities
    that path effects may face ([13.1](#section13.1)). Extensions are also much easier
    for curious Inkscape users to study, experiment with, and develop in new directions.
    Finally, some of these extensions still have some unique capabilities or options
    not available in path effects.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.1 The Generate from Path Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 13.4.1.1 Inset/Outset Halo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This extension adds to the selected path a specified number of inset or outset
    paths (Steps), at a Width from each other, each further offset having lower and
    lower opacity ([Figure 13-52](#fig13-52)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-halo.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-52: The Halo extension may be considered "a poor man''s Gaussian
    blur."'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.1.2 Extrude, Motion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These extensions create a primitive 3D effect by extruding the selected path
    at a given angle to a given distance. The result is a group of two objects, one
    being the original path and the other its extrusion skirt that you can style differently.
    A similar Extrude path effect is currently marked as experimental ([Figure 13-53](#fig13-53)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-extrude.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-53: The Extrude extension'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.1.3 Interpolate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This extension creates an interpolation, or *blend*, between two paths—a set
    of smooth transition steps when you transform one path into the other. You can
    specify the number of the Interpolation steps and the Exponent, which, if different
    from the default 0, shifts the blend toward one of the ends, as shown in [Figure 13-54](#fig13-54).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-interpolate.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-54: The Interpolate extension'
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the Interpolate Sub-Paths effect ([13.3.9](#section13.3.9)).
    Unlike the path effect, however, this extension has the Interpolate style option
    that paints intermediate steps with intermediate colors.
  prefs: []
  type: TYPE_NORMAL
- en: The extension generates the intermediate steps as a group of paths; the Duplicate
    endpaths option adds copies of the original paths to this group as well. Since
    interpolation always connects beginnings and ends of the two paths, you may need
    to reverse one of the paths (Path ▶ Reverse) in order to get the result you want.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.1.4 Pattern Along Path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is similar to the path effect of the same name ([13.3.2](#section13.3.2))
    and, in fact, is the first version of this functionality created before path effects
    were invented. The extension has one advantage compared to the path effect: it
    can use a group of objects (each with its own style) as the pattern; in the path
    effect, you are limited to a single-pattern path. To use the extension, select
    the pattern path or group and the skeleton path (the pattern must be on top of
    the skeleton in z-order), and apply the command; the options are similar to those
    for the corresponding path effect.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.1.5 Voronoi Diagram and Voronoi Pattern
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A Voronoi diagram (also used by the pixel tracer, [18.5.2.6](c18.xhtml#section18.5.2.6))
    is a tessellation of a plane into polygons in such a way that each point on a
    polygon is closer to the center of its own polygon than to the centers of other
    polygons ([Figure 13-55](#fig13-55)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-voronoi.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-55: Voronoi diagrams from selected 3D boxes (left) and as pattern
    on a circle (right)'
  prefs: []
  type: TYPE_NORMAL
- en: The first of these extensions generates such a tessellation from the centers
    of all selected objects; the second one creates a random Voronoi pattern and assigns
    it to the selected objects as fill (and you can then use it on other objects as
    well, see [10.8](c10.xhtml#section10.8) for details).
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2 The Modify Path Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 13.4.2.1 Add Nodes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This useful extension creates extra nodes in a path without changing its shape.
    You can specify either the maximum allowed distance between adjacent nodes or
    the number of segments into which each segment will be divided. [Figure 9-11](c09.xhtml#fig9-11)
    shows this extension in action.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2.2 Flatten Béziers and Straighten Segments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Flatten Béziers extension approximates each Bézier curve in the selected
    path with a sequence of straight line segments; higher Flatness values result
    in rougher approximation with fewer segments. The Straighten Segments simply shortens
    all Bézier handles by the given percent, so that setting this to 100 percent turns
    each Bézier curve into a straight line segment, as [Figure 13-56](#fig13-56) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-flastra.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-56: The Flatten Béziers and Straighten Segments extensions'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2.3 Jitter Nodes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This extension randomizes the selected paths by displacing all nodes in random
    directions and at random distances, limited by the Maximum displacement parameters
    that can be set separately for X and Y (for example, Maximum displacement in X
    set to 0 will jitter nodes only vertically). Also, you can enable jittering separately
    for nodes themselves and for their Bézier handles, as [Figure 13-57](#fig13-57)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-jitter.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-57: The Jitter Nodes extension'
  prefs: []
  type: TYPE_NORMAL
- en: The Distribution of the displacements parameter governs the probabilities of
    different displacement values, as [Figure 13-58](#fig13-58) demonstrates. By switching
    from the default Uniform to Pareto, you can make smaller displacements a lot more
    probable than larger ones (much like in life, the probability of a random city
    having a huge population is very small). Gaussian distribution has a more blunted
    peak, with the probabilities falling off slowly around the peak but faster as
    you move further off. The Log-normal distribution looks like Pareto, but its extreme
    values are more extreme and may fall far outside the Maximum displacement range.
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-jitter-prob.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-58: Probability distributions in Jitter nodes: horizontal displacement
    only, ranges are the same.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2.4 Fractalize
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is another way to randomize a path. It flattens any Bézier curves in the
    original path, then creates new nodes between the existing ones and moves these
    new nodes around, leaving the original nodes in place. TheSubdivisions parameter
    determines how many times each segment will be subdivided in two (for example,
    10 subdivisions turn a two-node path into one with 1,025 nodes because 2^(10)
    + 1 = 1025). Smoothness changes how far the new nodes can move; a lower Smoothness
    produces a rougher path. This effect is perfect for creating coastal lines in
    fantasy maps ([Figure 13-59](#fig13-59)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-fractalize.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-59: The Fractalize extension'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2.5 Mesh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The two extensions in this sub-submenu convert a mesh gradient ([10.7](c10.xhtml#section10.7))
    to a path and back, which might be a lifesaver given that Inkscape's tools for
    editing mesh nodes are currently rather poor ([10.7.3](c10.xhtml#section10.7.3)).
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2.6 Pixel Snap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use this extension to snap all nodes in all selected paths to px grid boundaries,
    so as to minimize anti-aliasing when exporting your artwork at 96 dpi ([18.6.1.2](c18.xhtml#section18.6.1.2)).
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.2.7 Rubber Stretch and Whirl
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These extensions distort selected paths as [Figure 13-60](#fig13-60) shows.
    They work best on paths with many nodes because they only displace existing nodes
    without creating new ones. The Whirl extension works around the center of the
    view in Inkscape when you start the extension; to place the center of the view
    at the geometric center of the selection, press 3 or choose **View ▶ Zoom ▶ Selection**
    ([3.11](c03.xhtml#section3.11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](14/pe-whirl.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-60: The Rubber Stretch (left) and Whirl (right) extensions'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.3 Visualize Path Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 13.4.3.1 Number Nodes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This replaces a path with a group of dots, each marking a node of the original
    path with a sequential number (a text object). You can adjust the dots' size and
    the font size of these numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.3.2 Draw Handles
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This extension visualizes the Bézier handles of the selected paths, similar
    to the Show handles path effect ([13.3.14](#section13.3.14)). For each selected
    path, it creates a new path with each handle being a subpath.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4.3.3 Dimensions and Measure Path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Dimensions extension creates a frame and dimension lines around the selected
    object (not necessarily a path); use the **Measure Path** extension to add the
    actual length measurements to it. This is similar to what the Measure effect does
    ([13.3.14](#section13.3.14)).
  prefs: []
  type: TYPE_NORMAL
