["```\nPS> $MaximumHistoryCount\n4096\n```", "```\nPS> $MaximumHistoryCount = 200\nPS> $MaximumHistoryCount\n200\n```", "```\nPS> $color\nThe variable '$color' cannot be retrieved because it has not been set.\n\nAt line:1 char:1\n+ $color\n+ ~~~~\n + CategoryInfo          : InvalidOperation: (color:String) [], RuntimeException\n    + FullyQualifiedErrorId : VariableIsUndefined\n```", "```\nPS> Set-StrictMode -Version Latest\n```", "```\nPS> $color = 'blue'\n```", "```\nPS> $color\nblue\n```", "```\nPS> Set-Variable -Name color -Value blue\n\nPS> Get-Variable -Name color\n\nName                           Value\n----                           -----\ncolor                          blue\n```", "```\nPS> Get-Variable \n\nName                           Value\n----                           -----\n$                              Get-PSDrive\n?                              True\n^                              Get-PSDrive\nargs                           {}\ncolor                          blue\n--snip--\n```", "```\nPS> $foo = $null\nPS> $foo\nPS> $bar\nThe variable '$bar' cannot be retrieved because it has not been set.\nAt line:1 char:1\n+ $bar\n+ ~~~~\n    + CategoryInfo          : InvalidOperation: (bar:String) [], RuntimeException\n    + FullyQualifiedErrorId : VariableIsUndefined\n```", "```\nPS> Get-Variable -Name foo\n\nName                           Value\n----                           -----\nfoo\n\nPS> Get-Variable -Name bar\nGet-Variable : Cannot find a variable with the name 'bar'.\nAt line:1 char:1\n+ Get-Variable -Name bar\n+ ~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (bar:String) [Get-Variable], ItemNotFoundException\n    + FullyQualifiedErrorId : VariableNotFound,Microsoft.PowerShell.Commands.GetVariableCommand\n```", "```\nPS> ping.exe -n 1 dfdfdfdfd.com\n\nPinging dfdfdfdfd.com [14.63.216.242] with 32 bytes of data:\nRequest timed out.\n\nPing statistics for 14.63.216.242:\n    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),\nPS> $LASTEXITCODE\n1\nPS> ping.exe -n 1 google.com\n\nPinging google.com [2607:f8b0:4004:80c::200e] with 32 bytes of data:\nReply from 2607:f8b0:4004:80c::200e: time=47ms\n\nPing statistics for 2607:f8b0:4004:80c::200e:\n    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),\nApproximate round trip times in milli-seconds:\n    Minimum = 47ms, Maximum = 47ms, Average = 47ms\nPS> $LASTEXITCODE\n0\n```", "```\nPS> Get-Variable -Name *Preference\n\nName                           Value\n----                           -----\nConfirmPreference              High\nDebugPreference                SilentlyContinue\nErrorActionPreference          Continue\nInformationPreference          SilentlyContinue\nProgressPreference             Continue\nVerbosePreference              SilentlyContinue\nWarningPreference              Continue\nWhatIfPreference               False\n```", "```\nPS> Get-Variable -Name 'doesnotexist'\nGet-Variable : Cannot find a variable with the name 'doesnotexist'.\nAt line:1 char:1\n+ Get-Variable -Name 'doesnotexist'\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (doesnotexist:String) [Get-Variable],\n                              ItemNotFoundException\n    + FullyQualifiedErrorId : VariableNotFound,Microsoft.PowerShell.Commands.GetVariableCommand\n```", "```\nPS> $ErrorActionPreference = 'SilentlyContinue'\nPS> Get-Variable -Name 'doesnotexist'\nPS>\n```", "```\nPS> $foo = 1\nPS> $foo = 'one'\nPS> $foo = $true\n```", "```\nPS> $isOn = $true\nPS> $isOn \nTrue\n```", "```\n❶ PS> $num = 1\n   PS> $num\n   1\n❷ PS> $num.GetType().name\n   Int32\n❸ PS> $num = 1.5\n   PS> $num.GetType().name\n   Double\n❹ PS> [Int32]$num\n   2\n```", "```\nPS> $num = 0.1234567910\nPS> $num.GetType().name\nDouble\nPS> $num + $num\n0.2469135782 \nPS> [Float]$num + [Float]$num\n0.246913582086563\n```", "```\nPS> $color = blue\nblue : The term 'blue' is not recognized as the name of a cmdlet, function, script file, or\noperable program. Check the spelling of the name, or if a path was included, verify that the\npath is correct and try again.\nAt line:1 char:10\n+ $color = blue\n+          ~~~~\n    + CategoryInfo          : ObjectNotFound: (blue:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\n```", "```\nPS> $sentence = \"Today, you learned that PowerShell loves the color blue\"\nPS> $sentence\nToday, you learned that PowerShell loves the color blue\n```", "```\nPS> $language = 'PowerShell'\nPS> $color = 'blue'\n\nPS> $sentence = \"Today, you learned that $language loves the color $color\"\nPS> $sentence\nToday, you learned that PowerShell loves the color blue\n```", "```\nPS> 'Today, $name learned that $language loves the color $color'\nToday, $name learned that $language loves the color $color\n```", "```\nPS> $color = \"yellow\"\nPS> $color\nyellow\nPS> $color = 'red'\nPS> $color\nred\nPS> $color = ''\nPS> $color\nPS> $color = \"blue\"\nPS> $color\nblue\n```", "```\nPS> \"$color\"\nblue\nPS> '$color'\n$color\n```", "```\nPS> $color = 'red'\nPS> $color\nred\n```", "```\nPS>  Select-Object -InputObject $color -Property *\n\nLength\n------\n     3\n```", "```\nPS> $color.Length\n3\n```", "```\nPS> Get-Member -InputObject $color\n\n   TypeName: System.String\n\nName             MemberType            Definition\n----             ----------            ----------\nClone            Method                System.Object Clone(), System.Object ICloneable.Clone()\nCompareTo        Method                int CompareTo(System.Object value),\n                                       int CompareTo(string strB), int IComparab...\nContains         Method                bool Contains(string value)\nCopyTo           Method                void CopyTo(int sourceIndex, char[] destination,\n                                       int destinationIndex, int co...\nEndsWith         Method                bool EndsWith(string value),\n                                       bool EndsWith(string value, System.StringCompari...\nEquals           Method                bool Equals(System.Object obj),\n                                       bool Equals(string value), bool Equals(string...\n--snip--\nLength           Property              int Length {get;}\n```", "```\nPS> Get-Member -InputObject $color –Name Remove\nName   MemberType Definition\n----   ---------- ----------\nRemove Method     string Remove(int startIndex, int count), string Remove(int startIndex)\n```", "```\nPS> $color.Remove(1,1)\nRd\nPS> $color\nred\n```", "```\nPS> $newColor = $color.Remove(1,1)\nPS> $newColor\nRd\n```", "```\nPS> $colorPicker = @('blue','white','yellow','black')\nPS> $colorPicker\nblue\nwhite\nyellow\nblack\n```", "```\nPS> $colorPicker[0]\nblue\nPS> $colorPicker[2]\nyellow\nPS> $colorPicker[3]\nblack\nPS> $colorPicker[4]\nIndex was outside the bounds of the array.\nAt line:1 char:1\n+ $colorPicker[4]\n+ ~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (:) [], IndexOutOfRangeException\n    + FullyQualifiedErrorId : System.IndexOutOfRangeException\n```", "```\nPS> 1..3\n1\n2\n3\n```", "```\nPS> $colorPicker[1..3]\nwhite\nyellow\nblack\n```", "```\nPS> $colorPicker[3]\nblack\nPS> $colorPicker[3] = 'white'\nPS> $colorPicker[3]\nwhite\n```", "```\nPS> $colorPicker = $colorPicker + 'orange'\nPS> $colorPicker\nblue\nwhite\nyellow\nwhite\norange\n```", "```\nPS> $colorPicker += 'brown'\nPS> $colorPicker\nblue\nwhite\nyellow\nwhite\norange\nbrown\n```", "```\nPS> $colorPicker += @('pink','cyan')\nPS> $colorPicker\nblue\nwhite\nyellow\nwhite\norange\nbrown\npink\ncyan\n```", "```\nPS> $colorPicker = [System.Collections.ArrayList]@('blue','white','yellow','black')\nPS> $colorPicker\nblue\nwhite\nyellow\nblack\n```", "```\nPS> $colorPicker.Add('gray')\n4\n```", "```\nPS> $null = $colorPicker.Add('gray')\n```", "```\nPS> $colorPicker.Remove('gray')\n```", "```\nPS> $users = @{\n abertram = 'Adam Bertram'\n raquelcer = 'Raquel Cerillo'\n zheng21 = 'Justin Zheng'\n}\nPS> $users\nName                           Value\n----                           -----\nabertram                       Adam Bertram\nraquelcer                      Raquel Cerillo\nzheng21                        Justin Zheng\n```", "```\nPS> $users['abertram']\nAdam Bertram\nPS> $users.abertram\nAdam Bertram\n```", "```\nPS> $users.Keys\nabertram                       \nraquelcer                      \nzheng21                        \nPS> $users.Values\nAdam Bertram\nRaquel Cerillo\nJustin Zheng\n```", "```\nPS> Select-Object -InputObject $yourobject -Property *\n```", "```\nPS> $users.Add('natice', 'Natalie Ice')\nPS> $users['phrigo'] = 'Phil Rigo'\n```", "```\nPS> $users.ContainsKey('johnnyq')\nFalse\n```", "```\nPS> $users['phrigo'] = 'Phoebe Rigo'\nPS> $users['phrigo']\nPhoebe Rigo\n```", "```\nPS> $users.Remove('natice')\n```", "```\nPS> $myFirstCustomObject = New-Object -TypeName PSCustomObject\n```", "```\nPS> $myFirstCustomObject = [PSCustomObject]@{OSBuild = 'x'; OSVersion = 'y'}\n```", "```\nPS> Get-Member  -InputObject $myFirstCustomObject\n\n   TypeName: System.Management.Automation.PSCustomObject\n\nName        MemberType   Definition\n----        ----------   ----------\nEquals      Method       bool Equals(System.Object obj)\nGetHashCode Method       int GetHashCode()\nGetType     Method       type GetType()\nToString    Method       string ToString()\nOSBuild     NoteProperty string OSBuild=OSBuild\nOSVersion   NoteProperty string OSVersion=Version\n```", "```\nPS> $myFirstCustomObject.OSBuild\nx\nPS> $myFirstCustomObject.OSVersion\ny\n```"]