["```\n#include \"LowPower.h\" \n```", "```\nLowPower.powerDown (SLEEP_8S, ADC_OFF, BOD_OFF); \n```", "```\n❶ #include \"LowPower.h\"\n\nvoid setup() {}\n\nvoid loop()\n{\n    // Idle for 16 seconds\n  ❷ LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);\n    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);\n    // Operate at normal power for 16 seconds\n  ❸ delay(16000);\n} \n```", "```\n❶ #include <DS3231.h>\n#include <Wire.h>\n\nDS3231 RTCmodule;\n\n❷ bool century = false;\nbool h12Flag = false;\nbool pmFlag = false;\nint hh, mm, ss, dd, dow, mo, yy;\n\nvoid setTime()\n{\n  ❸ RTCmodule.setClockMode(false); // Set to 24-hour time\n    RTCmodule.setYear(`22`);\n    RTCmodule.setMonth(`1`);\n    RTCmodule.setDate(`28`);\n    RTCmodule.setDoW(`6`); // Sunday = 1\n    RTCmodule.setHour(`14`);\n    RTCmodule.setMinute(`5`);\n    RTCmodule.setSecond(`30`);\n}\n\nvoid showTime()\n{\n    // Get data from RTC.\n  ❹ dd = RTCmodule.getDate();\n    dow = RTCmodule.getDoW();\n    mo = RTCmodule.getMonth(century);\n    yy = RTCmodule.getYear();\n    hh = RTCmodule.getHour(h12Flag, pmFlag);\n    mm = RTCmodule.getMinute();\n    ss = RTCmodule.getSecond();\n\n // Send information to Serial Monitor\n  ❺ switch(dow)\n    {\n        case 1: Serial.print(\"Sunday \"); break;\n        case 2: Serial.print(\"Monday \"); break;\n        case 3: Serial.print(\"Tuesday \"); break;\n        case 4: Serial.print(\"Wednesday \"); break;\n        case 5: Serial.print(\"Thursday \"); break;\n        case 6: Serial.print(\"Friday \"); break;\n        case 7: Serial.print(\"Saturday \"); break;\n    }\n    Serial.print(dd, DEC);\n    Serial.print(\"/\");\n    Serial.print(mo, DEC);\n    Serial.print(\"/\");\n    Serial.print(yy, DEC);\n    Serial.print(\" | \");\n    Serial.print(hh, DEC);\n    Serial.print(\":\");\n    if (mm < 10) // Check for leading 0 on minutes\n    {\n        Serial.print(\"0\");\n    }\n    Serial.print(mm, DEC);\n    Serial.print(\":\");\n    if (ss < 10) // Check for leading 0 on seconds\n    {\n        Serial.print(\"0\");\n    }\n    Serial.println(ss, DEC);\n}\n\nvoid setup()\n{\n    Serial.begin(9600);\n    Wire.begin();\n  ❻ // setTime();\n}\n\nvoid loop()\n{\n    showTime();\n    delay(1000);\n} \n```", "```\n// Project #44 - Periodic low-power data logging\n\n❶ #include <SD.h>\n#include <LowPower.h>\n#include <DS3231.h>\n#include <Wire.h>\n#include <Adafruit_BMP085.h>\n\nAdafruit_BMP085 bmp;\nDS3231 RTCmodule;\n\n❷ bool century = false;\nbool h12Flag = false;\nbool pmFlag = false;\n\nint hh, mm, ss, dd, mo, yy, temperature, pressure;\n\nvoid setup()\n{\n    delay(3000); // Allow time for SD card to be inserted\n    Serial.begin(9600);\n  ❸ Serial.println(\"Initializing SD card…\");\n    pinMode(10, OUTPUT);\n    // Check that the memory card exists and is usable:\n    if (!SD.begin(10))\n    {\n        Serial.println(\"Card failed, or not present\");\n        // Stop sketch\n        return;\n    }\n    Serial.println(\"memory card is ready\");\n    Wire.begin();\n    bmp.begin();\n}\n\nvoid setTime()\n{\n    // Set to 24-hour time\n    RTCmodule.setClockMode(false);\n    RTCmodule.setYear(`2022`);\n    RTCmodule.setMonth(`1`);\n    RTCmodule.setDate(`11`);\n    RTCmodule.setHour(`17`);\n    RTCmodule.setMinute(`11`);\n    RTCmodule.setSecond(`8`);\n}\n\nvoid logData()\n{\n    // Create the file for writing:\n    File dataFile = SD.open(\"DATA.TXT\", FILE_WRITE);\n    // If the file is ready, write to it:\n    if (dataFile)\n    {\n        // Get data from RTC:\n        dd = RTCmodule.getDate();\n        mo = RTCmodule.getMonth(century);\n        yy = RTCmodule.getYear();\n hh = RTCmodule.getHour(h12Flag, pmFlag);\n        mm = RTCmodule.getMinute();\n        ss = RTCmodule.getSecond();\n        // Write time and date to SD card:\n        dataFile.print(dd, DEC);\n        dataFile.print(\"/\");\n        dataFile.print(mo, DEC);\n        dataFile.print(\"/\");\n        dataFile.print(yy, DEC);\n        dataFile.print(\" | \");\n        dataFile.print(hh, DEC);\n        dataFile.print(\":\");\n        if (mm < 10) // Check for leading 0 on minutes\n        {\n            dataFile.print(\"0\");\n        }\n        dataFile.print(mm, DEC);\n        dataFile.print(\":\");\n        if (ss < 10) // Check for leading 0 on seconds\n        {\n            dataFile.print(\"0\");\n        }\n        dataFile.print(ss, DEC);\n        dataFile.print(\" | \");\n\n        // Write temperature data:\n        temperature = bmp.readTemperature();\n        pressure = int(bmp.readPressure() / 100);\n        dataFile.print(temperature, DEC);\n        dataFile.print(\" C - \");\n        dataFile.print(pressure, DEC);\n        dataFile.println(\" hPa\");\n        dataFile.close();\n    }\n}\n\nvoid loop()\n{\n  ❹ // setTime(); // Used to set time in RTC if necessary\n    for (int snooze = 0; snooze<8; snooze++)\n    // Idle for 64 seconds\n    {\n      ❺ LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);\n    }\n    logData();\n} \n```", "```\n#include \"LowPower.h\" \n```", "```\nvoid wakeUp() {} \n```", "```\nattachInterrupt(pinNumber, interruptFunction, `mode`); \n```", "```\nvoid interruptFunction() {} \n```", "```\nLowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF); \n```", "```\ndetachInterrupt(0); \n```", "```\n❶ #include <LowPower.h>\n\n❷ void interruptFunction(){}\n\nvoid setup()\n{\n    ❸ pinMode(2, INPUT);\n    ❹ pinMode(13, OUTPUT); // For demo LED\n}\n\nvoid loop()\n{\n    // start using interrupt pin\n  ❺ attachInterrupt(0, interruptFunction, FALLING);\n\n    // Enter power down state with ADC and BOD module disabled.\n    // Wake up when D2 is low.\n  ❻ LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF);\n\n    // Disable external pin interrupt on wake up pin\n    // Not using interrupt anymore\n  ❼ detachInterrupt(0);\n\n    // Do something here when interrupt triggered\n  ❽ digitalWrite(13, HIGH);\n    delay(1000);\n    digitalWrite(13, LOW);\n} \n```", "```\n// Project #45 - Interrupt-triggered logging with reduced power consumption\n\n#include <SD.h>\n#include <LowPower.h>\n#include <DS3231.h>\n#include <Wire.h>\nDS3231 RTCmodule;\n\nbool century = false;\nbool h12Flag = false;\nbool pmFlag = false;\n\nint hh, mm, ss, dd, mo, yy;\n\nvoid setup()\n{\n    delay(3000); // Allow time for SD card to be inserted:\n    Serial.begin(9600);\n    Serial.println(\"Initializing SD card…\");\n    pinMode(10, OUTPUT);\n    // Check that the memory card exists and is usable:\n    if (!SD.begin(10))\n    {\n        Serial.println(\"Card failed, or not present.\");\n        // Stop sketch\n        return;\n    }\n Serial.println(\"Memory card is ready!\");\n    Wire.begin();\n    pinMode(13, OUTPUT);\n}\n\nvoid interruptFunction() {}\n\nvoid setTimeData()\n// Use once to set the time and date in the RTC module:\n{\n    RTCmodule.setClockMode(false); // Set to 24-hour time\n    RTCmodule.setYear(2022);\n    RTCmodule.setMonth(1);\n    RTCmodule.setDate(11);\n    RTCmodule.setDoW(2);\n    RTCmodule.setHour(17);\n    RTCmodule.setMinute(11);\n    RTCmodule.setSecond(8);\n}\n\nvoid logData()\n{\n    // Create the file for writing:\n    File dataFile = SD.open(\"DATA.TXT\", FILE_WRITE);\n    // If the file is ready, write to it:\n    if (dataFile)\n    {\n        // Get data from RTC:\n        dd = RTCmodule.getDate();\n        mo = RTCmodule.getMonth(century);\n        yy = RTCmodule.getYear();\n        hh = RTCmodule.getHour(h12Flag, pmFlag);\n        mm = RTCmodule.getMinute();\n        ss = RTCmodule.getSecond();\n\n        // Write time and date to SD card:\n        dataFile.print(dd, DEC);\n        dataFile.print(\"/\");\n        dataFile.print(mo, DEC);\n        dataFile.print(\"/\");\n        dataFile.print(yy, DEC);\n        dataFile.print(\" | \");\n        dataFile.print(hh, DEC);\n        dataFile.print(\":\");\n        if (mm < 10) // Check for leading 0 on minutes\n        {\n            dataFile.print(\"0\");\n        }\n        dataFile.print(mm, DEC);\n        dataFile.print(\":\");\n        if (ss < 10) // Check for leading 0 on seconds\n        {\n            dataFile.print(\"0\");\n        }\n dataFile.print(ss, DEC);\n        dataFile.println(\".\");\n        // Close the file once the system has finished with it\n        dataFile.close();\n    }\n\n}\n\nvoid loop()\n{\n  ❶ attachInterrupt(0, interruptFunction, RISING);\n  ❷ LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF);\n  ❸ detachInterrupt(0);\n  ❹ logData();\n} \n```", "```\n// Project #46 - Blink LED on D7\n\nvoid setup()\n{\n    pinMode(7, OUTPUT);\n}\nvoid loop()\n{\n    digitalWrite(7, HIGH);\n    delay(1000);\n digitalWrite(7, LOW);\n    delay(1000);\n} \n```"]