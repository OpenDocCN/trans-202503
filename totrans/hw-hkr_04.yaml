- en: 3. the factory floor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous two chapters were filled with stories of my personal experiences
    learning, making mistakes, and growing with the manufacturing ecosystem in the
    greater Shenzhen area. In January 2013, after I’d learned the ropes, the MIT Media
    Lab asked me to start mentoring graduate students on supply chain and manufacturing,
    and I took them on a tour of Shenzhen (the same tour where I met Akiba and visited
    the USB memory stick factory). This chapter is an attempt to distill everything
    I taught over a course of weeks into a couple dozen pages.
  prefs: []
  type: TYPE_NORMAL
- en: The challenges and trade-offs in low-volume manufacturing are different from
    those of well-funded corporate exercises that prototype at the scale of thousands
    of units. I learned this over time, but not everyone has six years to bumble through
    all the newbie mistakes. If you’re already in a fast-moving tech startup, you
    probably don’t have the luxury of doing any exploration at all. The lessons in
    this chapter are applicable to anyone looking to bootstrap a hardware product
    from an initial prototype to moderate volumes (perhaps hundreds of thousands of
    units). Treat this summary as a general guideline, not a detailed roadmap. The
    devil is always in the details, and one fun part of making new, innovative hardware
    products is there’s no end of novel and interesting challenges to be solved.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE A BILL OF MATERIALS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most makers trying to scale up their output quickly realize the only practical
    path forward is to outsource production. If only outsourcing were as easy as schematic
    + cash = product!
  prefs: []
  type: TYPE_NORMAL
- en: Whether you work with the assembly shop down the street or send your work to
    China, a clear and complete *bill of materials (BOM)* is the first step to outsourcing
    production. Every single assumption you make about your circuit board, down to
    the color of the soldermask, has to be spelled out unambiguously for a third party
    to faithfully reproduce your design. Missing or incomplete documentation is the
    leading cause of production delays, defects, and cost overruns.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Simple BOM for a Bicycle Safety Light**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a case study, suppose you ran a successful Kickstarter campaign for a bicycle
    safety light. It contains a circuit that uses a 555 timer to flash a small array
    of LEDs. After a great marketing campaign, several hundred orders need to be filled
    in a few months’ time.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, a BOM for the bicycle light, as automatically generated by a design
    tool such as Altium, might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Quantity** | **Comment** | **Designator** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.1μF | C1 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 10μF | C2 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | white LED | D1, D2, D3 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 2N3904 | Q1 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 100 | R1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 20k | R2, R4 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1k | R3 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 555 timer | U1 |'
  prefs: []
  type: TYPE_TB
- en: '*A very basic bicycle safety light BOM*'
  prefs: []
  type: TYPE_NORMAL
- en: This BOM, along with a schematic, is likely sufficient for any graduate of a
    US electrical engineering program to reproduce the prototype, but it’s far from
    adequate for a manufacturing cost quotation. This version of the BOM addresses
    only electronics. A complete BOM for an LED flasher also needs to include the
    PCB, battery, plastic case pieces, lens, screws, any labeling (like a serial number),
    a manual, and packaging (plastic bag plus cardboard box, for example). It may
    also need a master carton to ship multiple LED flashers together, as a single
    boxed LED flasher is too small to ship on its own. Although cardboard boxes are
    cheap, they aren’t free, and if they aren’t ordered on time, inventory will sit
    on the dock until a master carton is delivered for final pack-out prior to shipment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following key information is also missing:'
  prefs: []
  type: TYPE_NORMAL
- en: • Approved manufacturer for each component
  prefs: []
  type: TYPE_NORMAL
- en: • Tolerance, material composition, and voltage specification for passive components
  prefs: []
  type: TYPE_NORMAL
- en: • Package type information for all parts
  prefs: []
  type: TYPE_NORMAL
- en: • Extended part numbers specific to each manufacturer
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at each of the missing items in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Approved Manufacturers**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A proper factory will require you to supply an *approved vendor list (AVL)*
    specifying the allowed manufacturer(s) for every part on a PCB. A manufacturer
    is not a distributor but rather the company that actually makes a part. A capacitor,
    for example, could be made by TDK, Murata, Taiyo Yuden, AVX, Panasonic, Samsung,
    and so on. I’m still surprised at how many BOMs I’ve reviewed list DigiKey, Mouser,
    Avnet, or some other distributor as the manufacturer for a part.
  prefs: []
  type: TYPE_NORMAL
- en: It may seem silly to trifle over who makes a capacitor, but there are definitely
    situations where the maker of a component matters—even for the humble capacitor.
    For example, blindly substituting the filter capacitors on a switching regulator,
    even if the substitute has the same rated capacitance and voltage, can lead to
    unstable operation and even boards catching fire.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, some parts in a design can be truly insensitive to the manufacturer,
    in which case I would mark “any/open” on the BOM for the AVL. (This is particularly
    true for parts like pull-up resistors.) This invites the factory to suggest their
    preferred supplier on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tolerance, Composition, and Voltage Specification**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For passive components marked “any/open,” you should always specify the following
    key parameters to ensure the right part is purchased:'
  prefs: []
  type: TYPE_NORMAL
- en: • For resistors, specify at minimum the tolerance and wattage. A 1 kΩ, 1 percent
    tolerance, 1/4 W carbon resistor is a very different beast from a 1 kΩ, 5 percent
    tolerance, 1 W wire-wound resistor!
  prefs: []
  type: TYPE_NORMAL
- en: • For capacitors, specify at minimum the tolerance, voltage rating, and dielectric
    type. For special applications, also specify certain parameters such as ESR or
    ripple current tolerance. A 10 μF, electrolytic, 10 percent tolerance capacitor
    rated for 50V has vastly different performance at high frequencies compared to
    a 10 μF, ceramic, 20 percent tolerance capacitor rated for 16V.
  prefs: []
  type: TYPE_NORMAL
- en: Inductors are sufficiently specialized that I don’t recommend ever labeling
    them as “any/open” in your BOM. For power inductors, the basic parameters to specify
    are core composition, DC resistance, saturation, temperature rise, and current,
    but unlike resistors and capacitors, inductors have no standard for casing. Furthermore,
    important parameters such as shielding and potting, which can have material impacts
    on a circuit’s performance, are often implicit in a part number; hence, it’s best
    to fully specify the inductor. The same goes for RF inductors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Electronic Component Form Factor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Always fully specify the *form factor*, or package type, of a component. Poorly
    specified or underspecified package parameters can lead to assembly errors. Beyond
    basic parameters like the Electronic Industries Alliance (EIA) or JEDEC Solid
    State Technology Association package code (that is, 0402, 0805, TSSOP, and so
    on), consider the following package information as you create your BOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Surface mount packages** The height of a component can vary, particularly
    for packages larger than 1206 or for inductors. Pay attention to whether the board
    is slotting into a tight case.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Through-hole packages** Always specify lead pitch and component height.'
  prefs: []
  type: TYPE_NORMAL
- en: For ICs in general, try to also specify the common name that corresponds to
    the package, not just the manufacturer’s internal code. For example, a Texas Instruments
    “DW” type package code corresponds to an SOIC package. This consistency check
    helps guard against errors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extended Part Numbers**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Designers often think about components in abbreviated part numbers. A great
    example of this is the 7404\. The venerable 7404 is a hex inverter and has been
    in service for decades. Because of its ubiquity, *7404* can be used as a generic
    term for an inverter among design engineers.
  prefs: []
  type: TYPE_NORMAL
- en: When going to production, however, you must specify information like the package
    type, manufacturer, and logic family. A complete part number for a particular
    hex inverter might be **74**VHCT**04**AMTC, which specifies an inverter made by
    Fairchild Semiconductor, from the VHCT series, in a TSSOP package, shipped in
    tubes. The extra characters are very important, because small variations can cause
    big problems, such as quoting and ordering the wrong packaged device and being
    stuck with a reel of unusable parts or subtle reliability problems.
  prefs: []
  type: TYPE_NORMAL
- en: For example, on a robotics controller I designed (codenamed *Kovan*), I encountered
    a problem due to a mistaken substitution of *VHC* in the part number for a component
    in the *VHCT* logic family. Using the VHC part switched the input thresholds of
    the inverter from TTL to CMOS logic-compatible, and some units had an asymmetric
    response to input signals as a result. Fortunately, I caught this problem before
    production ramped. The correct part was used on all other units, and I avoided
    a whole lot of potential rework—or worse, returns from upset customers. Luckily,
    the only cost of the mistake was reworking the few prototypes I was validating
    before production.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s another example of how missing a few characters in a part number can
    cost thousands of dollars. A fully specified part number for the LM3670 switching
    regulator might be LM3670MFX-3.3/NOPB. If */NOPB* is omitted, the part number
    is still valid and orderable—but that version uses leaded solder. This could be
    disastrous for products exporting to a region that requires RoHS compliance (meaning
    lead-free, among other things), like the European Union.
  prefs: []
  type: TYPE_NORMAL
- en: The *X* in the part number is another, more subtle issue. Part numbers with
    an *X* come in reels of 3,000 pieces, and those lacking an *X* come in reels of
    1,000 pieces. While many factories will question an */NOPB* omission since they
    typically assemble RoHS documentation as they purchase parts, they rarely flag
    the reel quantity as an issue.
  prefs: []
  type: TYPE_NORMAL
- en: But *you* should care about the reel quantity. If you plan to build only 1,000
    products, including the *X* in the part number means you’ll have 2,000 extra LM3670s.
    And yes, you’re on the hook to pay for the excess, since your BOM specified that
    part number. There are many valid reasons for ordering excess parts, so factories
    will rarely question a decision like that.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, parts ordered in lots of 1,000 units are a bit more expensive
    per unit than those ordered in lots of 3,000\. So, if you leave out the *X* as
    your volume increases, you’ll end up paying more for the part than you have to.
    Either way, the factory will quote your BOM exactly as specified, and if your
    quantity specifiers are incorrect, you could be leaving money on the table—or
    worse, losing money.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line? Every digit and character counts, and lack of attention to
    detail can cost real money!
  prefs: []
  type: TYPE_NORMAL
- en: '**The Bicycle Safety Light BOM Revisited**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With those four points in mind, consider how a proper, fully specified BOM for
    the bicycle safety light example might look.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/t0080-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The improved bicycle safety light BOM*'
  prefs: []
  type: TYPE_NORMAL
- en: There’s a big difference between a BOM that any engineer could use to produce
    a prototype, like the first one I showed for the bicycle safety light, and a BOM
    like this, which any factory could use to mass-produce a product. Notice the MOQ
    (minimum order quantity) and Lead Time columns in particular. These columns are
    irrelevant when you’re building low-volume prototypes, as you’d typically buy
    parts from distributors that have few MOQ restrictions and maintain stock for
    next-day deliveries. When scaling into production, however, you save a lot of
    money by cutting the distributor overhead and buying through wholesale channels.
    In wholesale channels, MOQs and lead times matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that the factory will fill in the MOQ and lead time as part
    of the quotation process. But you’ll find it helpful to track these parameters
    from the beginning. If the MOQ of a particular component is very high, the factory
    may have to buy massive numbers of excess parts, which increases the effective
    price of the project. If the lead time of a part is very long, you may want to
    consider redesigning for a part with a shorter lead time. Using parts with shorter
    lead times not only saves time but also improves cash flow: no one wants to tie
    up cash on long-lead components four months in advance of sales revenue.'
  prefs: []
  type: TYPE_NORMAL
- en: This BOM also includes several nonelectronic items—like the box, a bar code
    label, and so on—which wouldn’t be on the engineering prototype’s BOM. These miscellaneous
    bits are easy to forget, but a missing user manual in an initial BOM is often
    not discovered until the final sample is opened for approval, leading to a last-minute
    scramble to get the manual into the final product. Many products have been delayed
    simply because a user manual or box art wasn’t completed and approved in time,
    and it sucks to have a hundred thousand dollars’ worth of inventory idling in
    a warehouse for want of a slip of paper.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond a proper BOM, providing the factory with golden samples of your product
    along with your CAD files is another best practice. These working prototypes enable
    the factory to make smarter decisions about any ambiguities in your submitted
    BOM. Hand-soldering one more unit just for the factory may seem annoying, but
    in my opinion, a few hours of soldering beats a week of trading emails with the
    factory.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you’re building a business model, parts and packaging still aren’t the
    only costs to consider. Even this detailed BOM doesn’t list factory margin, labor
    for assembly, pack-out, shipping, duties, and so on. I discuss these “soft costs”
    in “[Picking (and Maintaining) a Partner](ch03.xhtml#ch00lev1sec58)” on [page
    107](ch03.xhtml#page_107).*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Planning for and Coping with Change**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Of course, even if your design is perfect and your BOM is ideal, your design
    may still have to change if vendors *end-of-life (EOL)*, or stop making, components
    you selected. And let’s face it: there’s always a chance your design assumptions
    won’t survive contact with real consumers, too.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before crossing the threshold into production, formalize the process for changing
    a design with the factory. It’s best practice to use written, formal *engineering
    change orders (ECO)* to update the factory on any changes after the initial quotation.
    At minimum, here’s what an ECO template should include:'
  prefs: []
  type: TYPE_NORMAL
- en: • The details of each changed part, and a brief explanation of why the change
    is needed
  prefs: []
  type: TYPE_NORMAL
- en: • A unique revision number for conveniently referencing the change down the
    road
  prefs: []
  type: TYPE_NORMAL
- en: • A method to record the factory’s receipt of the ECO paperwork
  prefs: []
  type: TYPE_NORMAL
- en: Be thorough with ECOs, rather than relying on casual emails, or the buyers at
    your factory may buy the wrong part. Worse yet, the factory might *install* the
    wrong part, and entire lots of your product will need to be scrapped or reworked.
    Even after troubleshooting a problem with the factory engineers, I still write
    up a formal ECO and submit it to the production staff to formalize the findings.
    I hate paperwork as much as the next engineer, but in production, one small mistake
    can cost tens of thousands of dollars, and that thought keeps me disciplined on
    ECOs.
  prefs: []
  type: TYPE_NORMAL
- en: On the next page is an actual ECO I issued that ended up saving me time and
    money.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the date on this ECO: February 27, 2014\. This ECO was issued right before
    the Chinese New Year, when the factories go on holiday for a couple of weeks.
    There is significant turnover of unskilled labor inside factories after the holidays,
    and thus there’s a lot of opportunity for work orders to get lost and forgotten.
    Worried that the ECO would be missed, I consulted with the managers after the
    factory resumed production to ensure the ECO wasn’t forgotten. They assured me
    it was applied, but I still felt a vague paranoia, so I asked for photos of the
    circuit board to confirm. Sure enough, the first production batch was missing
    the change in my ECO.'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the detailed ECO, the factory readily admitted its error, repaired
    the entire production run, and paid for the reworking. But if I’d sent the change
    order in a quick email without referencing specific batches or work orders, there
    could have been sufficient ambiguity for the factory to get out of the rework
    charges. The factory could have argued that it thought I meant to apply the change
    to a future production run, or it could simply deny receiving a confirmed order,
    as emails are a fairly casual form of communication. Either way, a few minutes
    of documentation saved days of negotiation and hundreds of dollars in rework fees.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0084-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Example of an actual ECO used in production. Thanks to the formal documentation
    process, a production mix-up related to this ECO was resolved in my favor.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROCESS OPTIMIZATION: DESIGN FOR MANUFACTURING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While you’re designing your final product and putting together a BOM, considering
    *yield*, the number of good units that come out of the manufacturing process,
    is also important. Yield is a boring subject for many engineers, but for entrepreneurs,
    success or failure will be determined in part by whether they achieve a reasonable
    yield. Fortunately, you can help your yield by designing with it in mind.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why DFM?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unlike software, every copy of a physical good has slight imperfections. Sometimes
    the imperfections cancel out; sometimes, they gang up and degrade performance.
    As production volume ramps, a fraction of the product always ends up nonsalable.
    In a robust design, the failing fraction may be so small that functional tests
    can be simplified, leading to further cost reductions. In contrast, designs sensitive
    to component tolerances require extensive testing and will suffer heavy yield
    losses. Reworking defective units incurs extra labor and parts charges, ultimately
    eroding profits.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, redesigning to improve robustness in the face of normal manufacturing
    tolerances is a major challenge of moving from the engineering bench to mass production.
    This process is called *design for manufacturing (DFM)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0085-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Left, before DFM, almost half the units are not meeting the acceptance level
    and are therefore failing. Right, after DFM, the acceptance level is the same,
    but the average performance is improved, leading to most units passing*.'
  prefs: []
  type: TYPE_NORMAL
- en: To understand the importance of DFM, consider these graphs. Each depicts a *bell
    curve*, which is an assumed statistical distribution of a particular parameter.
    The x-axis is a parameter of interest, and the y-axis is the number of items produced
    that hit the given parameter. For example, in a plot of the brightness of thousands
    of LEDs, the x-axis would be brightness, and the y-axis would be the number of
    LEDs that reach a given brightness. The position of the bell curve relative to
    the pass/fail criteria determines the net production yield.
  prefs: []
  type: TYPE_NORMAL
- en: On the right-hand curve, most LEDs are bright enough, and most of the production
    inventory is shippable. On the left-hand curve, maybe 40 percent of the LEDs pass.
    Given that most hardware companies operate with about a 30 to 50 percent gross
    margin, scrapping 40 percent of the material would mean the end of the business.
    In such a situation, the only viable options are to spend the time and effort
    to rework the LEDs until they pass or to lower the performance requirement. The
    product wouldn’t be as high quality as hoped, but at least the business could
    keep operating.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tolerances to Consider**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The goal of DFM is to ensure that your product always passes muster and that
    you’re never faced with the unsavory choice of reducing margins, lowering quality
    standards, or going out of business. But there are some component aspects to think
    about when applying DFM.
  prefs: []
  type: TYPE_NORMAL
- en: ELECTRONIC TOLERANCES
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Passive component tolerances are the most obvious tolerances to design for.
    If a resistor’s true value can be +/-5 percent of its labeled value, be sure the
    rest of your circuit can cope with the edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: Active component datasheet parameters—like current gain (hFE) for bipolar transistors,
    threshold voltage (V[t]) for field effect transistors (FETs), and forward bias
    voltage (V[f]) for LEDs—can also vary widely. Always read the datasheet, and watch
    for parameters with a great disparity between their minimum and maximum values,
    a difference often referred to as a *min-max spread*. For example, the min-max
    on hFE for Fairchild’s 2N3904 ranges from 40 to 300, and the V[f] on a superbright
    LED from Kingbright is between 2 and 2.5V.
  prefs: []
  type: TYPE_NORMAL
- en: Nominal operating voltage aside, a component’s maximum voltage rating is particularly
    important for capacitors and input networks. I try to use capacitors rated for
    twice the nominal voltage; for example, where possible, I use 10V capacitors for
    5V rails and 6.3V capacitors for 3.3V rails. To understand why, consider ceramic
    capacitor dielectrics, which have reduced capacitance with increasing voltage.
    In designs operating near a ceramic capacitor’s maximum voltage, that component’s
    operating capacitance will be at the negative end of its tolerance range. Also,
    *input networks* (any part of the circuit that a user can plug something into)
    are subject to punishing electrostatic discharge and other transient abuses, so
    pay special attention to the ratings of capacitors there to achieve your desired
    reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after you have a good sense of the components you’ll use, pay close
    attention to trace widths and layer stack variations when designing your PCB.
    These will impact systems that require matched impedance or deal with high currents.
  prefs: []
  type: TYPE_NORMAL
- en: MECHANICAL TOLERANCES
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Electronic tolerances aren’t the end of your worries, though; mechanical tolerances
    are important, too. Neither PCBs nor cases will come out exactly the right size,
    so design your case with some wiggle room. If your case design has zero tolerance
    for the PCB dimensions, half the time the factory will force PCBs into cases,
    when either the PCB is cut a little large or the case comes out a little small.
    This can cause unintentional mechanical damage to the circuitry or the case.
  prefs: []
  type: TYPE_NORMAL
- en: And don’t forget about cosmetic blemishes! Any manufactured product is subject
    to small blemishes, such as dust trapped in plastics, small scratches, sink marks,
    and abrasions. It’s important to work out the acceptance criteria for such defects
    with the factory ahead of time. For example, you might tell the factory that a
    unit can be considered “good” if it has no more than two dot blemishes larger
    than 0.2mm, no scratch longer than 0.3mm, and so on. Most factories will have
    a particular system they’ve adopted to describe and enforce these standards. If
    you discuss these parameters in advance, the factory can craft the manufacturing
    process to avoid such defects, as opposed to the more expensive alternative of
    building extra units and throwing away those that don’t meet criteria imposed
    late in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, avoiding defects isn’t free. To keep your product cheaper, avoid
    high-gloss finishes and consider using matte or textured finishes that naturally
    hide blemishes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following DFM Helps Your Bottom Line**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To imagine DFM in a real-world scenario, return to the bicycle safety flasher
    case study from “[How to Make a Bill of Materials](ch03.xhtml#ch00lev1sec34)”
    on [page 74](ch03.xhtml#page_74). Say the prototype design calls for an array
    of three LEDs in parallel, each with its own resistor to set the current. The
    *forward bias voltage*, or *V[f]*, of an LED at a given brightness can vary by
    perhaps 20 percent between devices; in this case, that swing is from 2.0 to 2.5V.
  prefs: []
  type: TYPE_NORMAL
- en: A design that limits the current to the LEDs with resistors, called *resistive
    current limiting*, will amplify this variation. This happens because an efficient
    circuit would drop a minority of the voltage across the current-limiting resistor,
    leaving the parameter that sets the current (the voltage drop across the resistor)
    more sensitive to the variation in V[f]. Since the brightness of an LED is not
    proportional to the voltage but rather the current flowing through it, setting
    the LED brightness with resistive current limiting can cause jarring inconsistencies
    in LED brightness.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0089-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Comparing high V[f] and low V[f] corners*'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, a 20 percent LED V[f] variation (from 2.0V to 2.5V, per the
    LED manufacturer’s specification) leads to a 40 percent change in the voltage
    across a current-set resistor for a fixed 3.3V supply. This will cause a 40 percent
    change in the current flowing through the LED. As brightness is directly proportional
    to current, the change manifests as up to a 40 percent variation in perceived
    brightness between individual LEDs. A design like that may work well most of the
    time; the problem would only be pronounced when a high V[f] unit is observed next
    to a low V[f] unit.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0089-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Setting current for individual LEDs using resistors can lead to dramatic variations
    in brightness.*'
  prefs: []
  type: TYPE_NORMAL
- en: The one or two units prepared on the lab bench during development may have looked
    great, but in production a meaningful fraction may have such serious brightness
    uniformity issues that units must be rejected. As most large hardware businesses
    have to survive on lean margins, losing even 10 percent of finished goods to defects
    is a terrible outcome.
  prefs: []
  type: TYPE_NORMAL
- en: One stop-gap option is to rework the failed units. A factory can identify an
    LED that is too dim or too bright in an array and replace it with one that better
    matches its cohorts. But that rework would drive up costs and result in an unexpected
    and unpleasant invoice at the 11th hour of a manufacturing program. Naive designers
    may be inclined to blame the factory for poor quality and argue over who should
    bear the cost, but it’s better to proactively avoid these kinds of problems by
    subjecting every design to a DFM check and using a small pilot run to sanity-check
    yield before punching out a whole bunch of units.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cost of yield fallout quantifies how much money to spend on extra circuitry
    to compensate for normal component variability. For example, a product with a
    $10 *cost of goods sold (COGS)* that yields 80 percent good units has an effective
    cost per salable unit of $12.50, as calculated with this formula:'
  prefs: []
  type: TYPE_NORMAL
- en: Effective cost = COGS × total units built / yielded units
  prefs: []
  type: TYPE_NORMAL
- en: Increasing the COGS by $2.50 to improve yield to 100 percent would allow you
    to break even. But using the same formula, spending $1 extra dollar in COGS to
    improve yield to 99 percent would actually improve the bottom line by $1.38.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0091-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A circuit to set the current on three LEDs, created by applying DFM*'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the bicycle safety light, that dollar could be spent on a current-feedback
    boost regulator IC like the SP6699EK-L/TR, allowing the LEDs to be stacked in
    series instead of parallel. The design would be far more complicated and expensive
    than using individual resistors, but it would guarantee each LED has a consistent,
    identical current flowing through it by driving all three LEDs in a series circuit
    with a fixed-current feedback loop. That would virtually eliminate brightness
    variation. While the cost of the boost regulator is much greater than the penny
    spent on three current-limiting LEDs, the improvement in manufacturing yield more
    than pays for the extra component costs. In fact, this trick is standard practice
    for applications that require good uniformity of brightness out of LEDs, such
    as in the backlights of LCD panels. A typical mobile phone backlight uses about
    a dozen LEDs, but, thanks to circuits like this, you never see light or dark splotches
    despite the large variations in V[f] between the constituent LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Product Behind Your Product**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Alongside dealing with tolerances, another often-neglected design responsibility
    is the test program. A factory can only detect the problems it is instructed to
    look for. Therefore, every feature of a product must be tested, no matter how
    trivial. For example, on a chumby device, every user-facing feature had an explicit
    factory test, including the LCD, touchscreen, audio, microphone, all the expansion
    ports (USB, audio), battery, buttons, knobs, and so on. I made sure that even
    the simplest buttons were tested. While it’s tempting to skip testing such simple
    components, I guarantee that anything not tested will lead to returns.
  prefs: []
  type: TYPE_NORMAL
- en: I like to call the factory tester “[the product behind your product.](ch03.xhtml#ch00lev1sec48)”
    That’s because in some cases, the factory tester is more complicated and more
    difficult to engineer than the product you’re trying to sell. This is particularly
    true of simple products.
  prefs: []
  type: TYPE_NORMAL
- en: A REAL-WORLD TEST PROGRAM
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As a case study, consider this microcontroller sticker from Chibitronics, a
    project I discuss at length in [Chapter 8](ch08.xhtml#ch08).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0092-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A microcontroller circuit—on a sticker*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This circuit is very simple: it consists of just an 8-bit AVR microcontroller
    and a handful of resistors and capacitors. (It’s also the same product referred
    to in the ECO example on [page 84](ch03.xhtml#page_84).) My collaborator and I
    sketched in Adobe Illustrator for about two days before we derived the final shape
    for this product. Then we spent about a day in Altium designing the circuit, and
    about a week coding in the Arduino IDE to create its firmware. In all, the development
    process took about two weeks. For production, the microcontroller is paired with
    a set of sensors that can process sound, light, and touch, and as a result, the
    test program runs on all four at the same time.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0093-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The testing machine for the Chibitronics microcontroller sticker*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test rig pictured consists of a 32-bit ARM computer running Linux with
    a graphical UI rendered on an HDMI monitor. Behind this is an FPGA, some adapter
    electronics to create analog waveforms for testing, and a mechanical pogo-pin
    assembly for touching down on the sticker. Breaking down the design process for
    this rig into its component parts, we spent:'
  prefs: []
  type: TYPE_NORMAL
- en: • Several days designing in Altium
  prefs: []
  type: TYPE_NORMAL
- en: • A week programming in the Xilinx ISE for the FPGA
  prefs: []
  type: TYPE_NORMAL
- en: • A couple of weeks hacking on Linux drivers
  prefs: []
  type: TYPE_NORMAL
- en: • A couple of solid months hacking in C++, to create the Qt integration framework
  prefs: []
  type: TYPE_NORMAL
- en: • A couple of days in SolidWorks, to create the mechanical apparatus to hold
    the whole thing together
  prefs: []
  type: TYPE_NORMAL
- en: Altogether, creating the tester for the microcontroller sticker took over two
    months, compared to the two weeks to create the product itself.
  prefs: []
  type: TYPE_NORMAL
- en: Why go through all this effort? Because time is money, and defects and returns
    are expensive to process. The tester can process one board in under 30 seconds;
    and in those 30 seconds, the tester has to program two microcontrollers; test
    sensors for light, sound, and touch; and confirm operation at both 5V and 3V.
    A manual test for all these operations could take several minutes of skilled labor
    and wouldn’t be as reliable. Thanks to this tester, we processed zero returns
    due to defective material. Also, the graphical UI on the tester makes it very
    easy for the factory to determine exactly which point in the circuit is failing,
    facilitating fast rework of any imperfect material.
  prefs: []
  type: TYPE_NORMAL
- en: GUIDELINES FOR CREATING A TEST PROGRAM
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As a rule of thumb, for every product you make, you’re actually making two
    related products: one for the end user, and a test for the factory. In many ways,
    the test for the factory has to be as user-friendly and foolproof as the product
    itself; after all, tests are not run by electrical engineers. But the related
    testing product will be much quicker and faster to build if adequate testing features
    are designed into the consumer product.'
  prefs: []
  type: TYPE_NORMAL
- en: And no, don’t outsource the test program to the factory, even if the factory
    offers that service. The factory often won’t understand your design intent, so
    their test programs will either be inefficient or test for the wrong behavior.
    Factories also have an incentive to pass as much material as possible, as quickly
    as possible, so their test programs tend to be primitive and inadequate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some guidelines to follow when designing your own program:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strive for 100 percent feature coverage.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t overlook simple or secondary features like status LEDs or an internal
    voltage sensor. When creating the test list, I take an “outside/inside” approach.
    First, look at the product from the outside: list every way a consumer can interact
    with it. Does your test program address every interaction surface, even if only
    superficially? Is every LED lit, every button pressed, every sensor stimulated,
    and every memory device touched? Has every bullet point in your marketing material
    been confirmed? Promising “world-class” RF sensitivity is different from simply
    advertising the presence of a radio. Then, think about the inside: from the schematic,
    look at every port and consider key internal nodes to monitor. If the product
    has a microcontroller, review which drivers are loaded to cross-check the test
    list, and make sure no components are forgotten.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimize incremental setup effort.**'
  prefs: []
  type: TYPE_NORMAL
- en: Optimize the amount of time required to set up the test for each unit. This
    is often done through jigs that employ pogo pins or prealigned connector arrays.
    A test that requires an operator to manually probe a dozen test points with a
    multimeter or insert a dozen connectors is time-consuming and error-prone. Most
    factories in China can help design the jig for a nominal cost, but jig design
    is easier and more effective if the design itself already includes adequate test
    points.
  prefs: []
  type: TYPE_NORMAL
- en: '**Automate test procedure into a linear flow.**'
  prefs: []
  type: TYPE_NORMAL
- en: An ideal test runs with a single button press, and produces a pass or fail result.
    In practice, there are always stop points that require operator intervention,
    but try not to require too much. For example, don’t require an operator to key
    in or select an SSID from a list during each Wi-Fi connectivity test. Instead,
    fix the test target’s SSID and hardcode that value into a test script so the connection
    cycle is automatic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use icons and colors, not text, to communicate with operators.**'
  prefs: []
  type: TYPE_NORMAL
- en: Not every operator is guaranteed to be literate in a given language.
  prefs: []
  type: TYPE_NORMAL
- en: '**Employ audit logs.**'
  prefs: []
  type: TYPE_NORMAL
- en: Record test results correlated to device serial numbers by incorporating a barcode
    scanner into the test rig. Alternatively, have the device print a coupon with
    a unique, timestamped code or a locally stored audit log to prove which units
    passed a test. Logs will help you figure out what went wrong when a consumer returns
    a failed product, and they let you quickly check that all products were tested.
    After an eight-hour shift of testing, an operator may make mistakes, such as accidentally
    putting a defective unit into the “good” bin. Being able to check that every shipped
    product was subjected to and passed the full test can help you identify and isolate
    such problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Provide an easy update mechanism.**'
  prefs: []
  type: TYPE_NORMAL
- en: Like any program, test programs have bugs. Tests also need to evolve as your
    product is patched and upgraded. Have a mechanism to update and fix test programs
    without visiting the factory in person. Many of my test fixtures can “phone home”
    via a VPN, and I can SSH into the jig itself to fix bugs. Even my simplest jig
    employs a Linux laptop (or equivalent) at its core. This is in part because Linux
    is easier to update and maintain than a bespoke microcontroller that requires
    a special adapter for firmware updates.
  prefs: []
  type: TYPE_NORMAL
- en: These guidelines are easy to implement if your product is designed with testability
    in mind. Most of the products I design run Linux, and I leverage the processor
    inside the product itself to run most tests and help manage the test user interface.
    For products that lack user interaction surfaces, an Android phone or a laptop
    connected via Wi-Fi or serial can be used to render the test user interface.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing vs. Validation**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Production tests are meant to check for assembly errors, not parametric variations
    or design issues. If a test is screening out devices because of normal parametric
    component variations, either buy better components or redo your design.
  prefs: []
  type: TYPE_NORMAL
- en: For consumer-grade products, you don’t need to run a five-minute comprehensive
    RAM test on every unit. In theory, your product should be designed well enough
    that if it’s all soldered together correctly, the RAM will do its job. A quick
    test to check that there are no stuck or open address pins is often enough. Name-brand
    chip vendors typically have very low defectivity, so you’re not validating the
    silicon; rather, you’re validating the solder joints and connectors and checking
    for missing or swapped components. (But if you buy clone chips or off-brand, remarked,
    or partially tested devices to cut costs, I recommend making a mini validation
    program for those components.)
  prefs: []
  type: TYPE_NORMAL
- en: VALIDATING A SWITCH
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To illustrate the difference between production testing and validation, let’s
    look at how both might work for a switch.
  prefs: []
  type: TYPE_NORMAL
- en: A production test for a switch may simply ask the operator to hit the switch
    a few times and verify that the feel is right, and that electrical contact is
    made through a simple digital indicator. A validation test, on the other hand,
    may involve selecting a few devices at random, measuring the switch contact resistance
    with a multimeter that is accurate to five significant digits (also called a *five-digit
    multimeter*), subjecting the devices to elevated humidity and temperature for
    a couple of days, and then putting the devices into an automated jig that cycles
    the switches 10,000 times. Finally, you might remeasure the switch contact resistance
    with a five-digit multimeter and note any degradation in close-state contact resistance.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, this level of validation can’t be performed on every device manufactured.
    Rather, the validation program evaluates the switch’s performance over the expected
    lifetime of the product. The production test, on the other hand, just makes sure
    the switch is put together right.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s good practice to rerun validation tests on a couple of randomly sampled
    units out of every several thousand units produced. There are formulas and tables
    you can use to compute how much sampling you need to achieve a certain level of
    quality; just search online for “manufacturing validation test table.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'But how much testing is enough? You can derive one threshold for testing through
    a cost argument. Every additional test run incurs equipment costs, engineering
    costs, and the variable cost of the test time. As a result, testing is subject
    to diminishing returns: at some point, it’s cheaper just to take a product return
    than to test more. Naturally, the testing bar is much higher for medical or industrial-grade
    equipment, as the liability associated with faulty equipment is also much higher.
    Likewise, a novelty product meant to be given away may need much less testing.'
  prefs: []
  type: TYPE_NORMAL
- en: DESIGNING YOUR TEST JIG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'A final thought: always apply solid engineering to your test jig design. When
    I worked on the chumby 8, there was a problem where a 50-pin flat flex cable adapter
    was exhibiting random cold-solder-joint failures. I asked the factory to build
    a test to validate the adapters. Their solution was to hang LEDs from every pin
    of the adapter, apply a test voltage to one side of the cable, and look for LEDs
    that didn’t light on the other side. The cold solder joints weren’t simply open
    or closed; some just had high resistance. Enough current would flow to light an
    LED, yet there was also enough resistance to cause a fault in the design.'
  prefs: []
  type: TYPE_NORMAL
- en: The factory proposed buying 50 multimeters and attaching them to every pin to
    check the resistance manually, which would have been expensive and error-prone.
    It’s not reasonable to expect an operator to look at 50 displays hundreds of times
    a day and be able to reliably find the out-of-spec numbers. Instead, I chose to
    daisy-chain the connections across the adapter and use a single multimeter to
    check the net resistance of the daisy chain. By putting the connections in series,
    I could check all 50 connections with a single numeric measurement, as opposed
    to the subjective observation of an LED’s brightness.
  prefs: []
  type: TYPE_NORMAL
- en: As this case illustrates, there are good and bad ways to implement even a test
    as simple as checking for cold solder joints on a cable adapter. Ever more complicated
    components require ever more subtle tests, and there’s real value in using engineering
    skills to craft efficient yet foolproof tests.
  prefs: []
  type: TYPE_NORMAL
- en: '**FINDING BALANCE IN INDUSTRIAL DESIGN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even if your product passes all validation tests with flying colors, it still
    may not be successful if consumers don’t want it. Remember: sex sells. To within
    a factor of two or so, the performance of a CPU or amount of RAM in a box is less
    important to a typical consumer than how the device looks. Apple devices command
    a hefty premium in part because of their slick industrial design, and many product
    designers aim to emulate the success of Sir Jonathan Ive, Apple’s chief design
    officer, in their own products.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many schools of thought in *industrial design*, the process of designing
    how a product will look before actually making it. One school invokes the monastic
    designer, who creates a beautiful, pure concept, and the production engineers,
    who spoil the design’s purity when they tweak it for functionality. Another school
    invokes the pragmatic designer, who works closely with production engineers to
    hammer out gritty compromises to produce an inexpensive and high-yielding design.
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, neither extreme is compelling. The monastic approach often
    results in an unmanufacturable product that is either late to market or expensive
    to produce. The pragmatist approach often results in a product that looks and
    feels so cheap that consumers have trouble assigning it a significant value. The
    real trick is understanding how to strike a balance between the two, and it begins
    by getting into the factory and understanding how things are done. Here’s a couple
    of examples of what I’ve learned about how different factory processes affect
    that balance, from Chumby and Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '**The chumby One’s Trim and Finish**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Trim and finish are difficult, making them points of distinction in a product’s
    appearance. When I worked at Chumby, we wanted the final product to have a minimalist,
    honest finish. (*Honest finishes* feature the natural properties of the material
    systems in play and eschew the use of paints and decals.) Minimalist designs are
    very hard to manufacture because with fewer features, even tiny blemishes stand
    out. Honest finishes can be difficult, too, as all the burs, gates, sinks, knits,
    scoring, and flow lines that are facts of life in manufacturing are laid naked
    before the consumer. As a result, this school of design requires well-made manufacturing
    tools that are constantly checked and maintained throughout production.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have pockets deep enough to invest in new equipment and capabilities
    on behalf of your factory (that is, if you’re not a *Fortune* 500 company), the
    first step is to learn the vocabulary available. A *design vocabulary* is defined
    by the capabilities of the factory or factories producing the goods, like what
    materials you can obtain, what finish is possible, what tolerances are achievable,
    and what fastening technology exists. These are all heavily dependent upon the
    processes available to your factory.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I find that visiting a factory in person early in the design process
    results in a better design. After a factory visit, you’ll discard some design
    vocabulary, but you’ll discover some new vocabulary as well. The engineers who
    work in the factory day in and day out develop process innovations that can open
    up novel design possibilities that you won’t discover unless you visit.
  prefs: []
  type: TYPE_NORMAL
- en: The chumby One is a concrete example of the impact manufacturing processes can
    have on design outcome. In the original concept art, a blue highlight was added
    around the front edge to resemble a speech balloon, like those used in comic strips.
    The idea was that the chumby would caption your world with snippets from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0102-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A finished chumby One unit*'
  prefs: []
  type: TYPE_NORMAL
- en: But applying a blue trim across a raised surface was very hard. The first factory
    used paint, because the front edge wasn’t flat enough to make silk screening an
    option. *Pad printing* (also known as *tampo printing*, a process in which ink
    is transferred from a silicone pad to an object) can handle curved surfaces, but
    the alignment of the ridge on the chumby One wasn’t good enough, and the tiniest
    ink bleed over the edge looked terrible from the side. Decals and stickers likewise
    couldn’t achieve the alignment we wanted. In the end, a small channel was carved
    to contain the paint, and the factory created the highlight with a stencil and
    spray paint.
  prefs: []
  type: TYPE_NORMAL
- en: The yield was terrible. In some lots, over 40 percent of the chumby One cases
    were thrown away due to painting errors. Fortunately, plastic is cheap, so throwing
    away every other case after painting had a net cost impact of about $0.35.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0103-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Two chumby One units with bad paint jobs*'
  prefs: []
  type: TYPE_NORMAL
- en: Midway through production, we started producing chumby One units in a second-source
    facility. The second factory had different plastic molding equipment, and unlike
    the first factory, this facility could do *double-shot molds*. A double-shot mold
    involves twice the number of tools of a single-shot injection mold, but it can
    injection-mold two different colors, or even two different materials, into the
    same mold. At the new factory, we tried a double-shot process instead of painting
    for the thin blue strip.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0103-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A perfect chumby One ridge, from the double-injection mold process*'
  prefs: []
  type: TYPE_NORMAL
- en: The results were stunning. Every unit came off the line with a crisp blue line,
    and no paint meant a cleaner, more honest finish. But the cost per case jumped
    to $0.94 apiece with the more expensive process, despite the 100 percent yield.
    It would have been cheaper to throw away more than half of the painted cases,
    but even the best painted cases could not compare to the quality of the finish
    delivered by the double-shot tool.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Arduino Uno’s Silkscreen Art**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another great example of how tweaking a factory process can improve a product’s
    appearance is the Arduino motherboard. The wonderfully detailed artwork on the
    back side, sporting an outline of Italy and very fine lettering, isn’t silkscreen.
    The factory that makes these boards actually puts on two layers of soldermask:
    one blue and one white.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0104-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The underside of an Arduino Uno R3*'
  prefs: []
  type: TYPE_NORMAL
- en: When Arduino boards are manufactured, soldermask is applied through the photolithographic
    process I described in “[Where Arduinos Are Born](ch02.xhtml#ch00lev1sec19)” on
    [page 44](ch02.xhtml#page_44). This process results in artwork with much better
    resolution, consistency, and alignment than a silkscreen. And since an Arduino’s
    look is the circuit board, this art gives the product a distinctive, high-quality
    appearance that is difficult to copy using conventional processing methods.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the process capability of a factory (whether it’s painting versus double-shot
    molding, or double soldermasking versus silkscreening) can have a real effect
    on a product’s perceived quality, without a huge impact on cost. The factory,
    however, may not appreciate the full potential of its processes, and until a designer
    interacts with the facility directly, your product can’t harness that potential,
    either.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, many designers don’t visit a factory until something has gone
    wrong. At that point, the tools are cut, and even if you discover a cool process
    that could solve all your problems, it’s often too late.
  prefs: []
  type: TYPE_NORMAL
- en: '**My Design Process**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Design is an intensely personal activity, and as a result, every designer will
    develop their own process. If you need a framework for developing your own, however,
    this is the general process I might use to develop a product on a tight, startup
    budget:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a sketchbook. Decide on the soul and identity of the design, and
    pick a material system and vocabulary that suits your concept. But don’t fall
    in love with it, because it may have to change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Break down the design by material system, and identify a factory capable of
    producing each material system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the facility, and note what is actually running down the production lines.
    Don’t assume anything based on the one-off units from the sample room. Practice
    makes perfect, and from the operators to the engineers, factory workers execute
    procedures they do daily much better than they would an arcane capability they
    don’t use often.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reevaluate your design based on a new understanding of what’s possible at the
    factory, and iterate. Go back to step 1 if small tweaks aren’t enough. This is
    the stage when it’s easiest to make compromises without sacrificing the purity
    of your design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rough out the details of your design. Pick sliding surfaces, parting lines where
    pieces of the case snap together, finishes, fastening systems, and so on based
    on what the factory can do best.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass a revised drawing to the factory, and work with them to finalize details
    such as draft angles, fastening surfaces, internal ribbing, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate the design using a 3D print and extensive 3D model checks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Identify features prone to tolerance errors, and trim the initial manufacturing
    tool so that the tolerance favors modifications that will help you minimize costly
    changes to the tool. For example, consider injection molding, where a steel tool
    is the negative of the plastic it’s molding. Removing steel from a tool (adding
    plastic) is easier than adding steel (removing plastic), so target the initial
    test shot to use more steel on critical dimensions, as opposed to too little.
    A button is one mechanism that benefits from tuning like this: predicting exactly
    how a button will feel from CAD or 3D prints is hard, and perfecting the tactile
    feel usually requires a little trimming of the tool.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Of course, this process isn’t a set of hard rules to follow. You may need to
    add or repeat steps based on your experience with your factory, but if you choose
    a good factory, this should be a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: '**PICKING (AND MAINTAINING) A PARTNER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like the wands from *Harry Potter*, a good factory chooses you as much
    as you choose it, so forget the term *vendor* and replace it with *partner*. If
    you’re doing it right, you aren’t simply instructing the factory; there should
    be a frank dialogue about the trade-offs involved and how the manufacturing process
    can be improved. That’s the only way to get the best product possible.
  prefs: []
  type: TYPE_NORMAL
- en: A healthy relationship with a factory can also lead to better payment terms,
    which improves your cash flow. In some cases, factory credit can directly replace
    raising venture capital, taking loans, or getting Kickstarter funding. As a result,
    I treat good factories with the same respect as investors and partners in a business.
    For an idea of what that means, here are some tips on how to choose and work with
    your factory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tips for Forming a Relationship with a Factory**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, pick the right-sized factory for your product. If you work with a factory
    that’s too big, you risk getting lost in bureaucracy and pushed out of the production
    line by bigger customers at critical times. Work with a factory too small, and
    it won’t be able to provide the services you need. As a rule, I pick the biggest
    facility where I can get direct access to the *lao ban* (factory boss) on a regular
    basis, because if you can’t talk to the boss, you’re nobody. It’s a good sign
    if the lao ban is there on the first meeting to give you a tour and asks astute
    questions about your business over lunch.
  prefs: []
  type: TYPE_NORMAL
- en: Second, follow the adage “Sunlight is the best disinfectant.” If a factory won’t
    quote with an open BOM, where the cost of every component, process, and margin
    is explicitly disclosed, I won’t work with them. Cost reduction discussions cannot
    function without transparency, because there are too many places to bury costs
    otherwise. Likewise, if cost discussions turn into a game of whack-a-mole, where
    reduced costs on one line item are inexplicably popping up in another, run away.
  prefs: []
  type: TYPE_NORMAL
- en: This final tip applies primarily to startups. In your early stages, everyone
    knows your cash supplies are finite. Even if you’ve just closed a big round of
    financing, swaggering into a factory with money bags is not a sustainable approach.
    Smart factories know your cash supplies are limited, and if the greatest value
    you propose to bring to the factory is piles of money, your value is limited;
    in the best case, it won’t really pay out until years down the road when the product
    is shipping in high volumes. As a result, it’s helpful to try to deliver value
    to the factory in nonmonetary ways.
  prefs: []
  type: TYPE_NORMAL
- en: As silly as it sounds, being a pleasant and constructive person goes a long
    way in currying the favor of your facility. Manufacturing is a high-stress, low-margin
    business, and everyone in the facility has to deal with difficult problems all
    day. I find I get better service—even better than customers with deeper pockets—if
    I treat my factories as I would treat a friendly acquaintance, and not as slave
    labor or a mere subcontractor. Mistakes happen, and being able to turn a bad situation
    into a learning experience will benefit you on the day you make a stupid (and
    perhaps expensive) mistake.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tips on Quotations**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Openness aside, know that if a quote seems too good to be true, it often is.
    When negotiating prices with a factory, step back and check if the quote makes
    sense. Factories that lose money on a deal will stop at nothing to make it back,
    and many manufacturing horror stories have roots in unhealthy cost structures.
    A factory’s first prerogative is survival, even if that means mixing defective
    units into lots to boost margin, or assigning novice engineers to a flagging project
    to better monetize their seasoned engineers on more profitable customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you evaluate a quote, make sure it includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • The price of each part
  prefs: []
  type: TYPE_NORMAL
- en: • The excess material for the job due to *minimum order quantities (MOQs)*
  prefs: []
  type: TYPE_NORMAL
- en: • Labor costs
  prefs: []
  type: TYPE_NORMAL
- en: • The factory’s overhead cost
  prefs: []
  type: TYPE_NORMAL
- en: • *Nonrecurring engineering (NRE)* fees
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a few of these items in detail.
  prefs: []
  type: TYPE_NORMAL
- en: KEEPING AN EYE ON EXCESS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*Excess* is the result of what I call the “hot dogs and buns” problem. Hot
    dogs come in packs of 10, but buns come in packs of 8\. Unless you buy 40 servings,
    you’ll have leftover buns or hot dogs.'
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, many components only come in 3,000-piece reels. A 10,000-piece build
    requires 4 reels for a total of 12,000 pieces, leaving 2,000 pieces of excess.
    Factories can buy parts in cut tape or partial reels, but the cost per part of
    cut tape is much higher, as the risk of excess material is shifted onto the distributor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Excess isn’t all bad, though: it can be folded into future runs of a product.
    As long as your product sustains a decent production rate, excess component inventory
    should turn into cash on a regular basis. At some point, however, production will
    end or pause, and the bill for the excess will arrive, putting a crimp on cash
    flow. If a quote lacks an excess column, the factory may charge you for the full
    reel but keep the excess for their own purposes; this is where many of the gray-market
    goods in Shenzhen come from. They may also just send an unexpected invoice for
    it down the road, which often arrives at the worst possible time—revenue from
    the product has already ceased, but bills keep coming in. Either way, it’s best
    to know up front the complete cradle-to-grave business model.'
  prefs: []
  type: TYPE_NORMAL
- en: FIGURING OUT LABOR COSTS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Labor costs are devilishly tricky to estimate, but the good news is that for
    high-tech assemblies, labor is typically a small fraction of total cost. The labor
    cost of assembling small volumes of a straightforward board with 200 parts may
    be about $2 or $3 in China, while the cost of assembling in the United States
    is closer to $20 or $30\. Even if labor prices double overnight in China and halve
    in the United States, China may still be competitive.
  prefs: []
  type: TYPE_NORMAL
- en: This is in contrast to the lower-value goods moving out of China (such as textiles),
    where the base value of the raw material is already low, so labor costs are a
    significant portion of the final product cost. I usually don’t argue much over
    labor costs, since the end result of scrimping on labor is often lowered quality,
    and pushing too hard on labor costs can force the factory to reduce the workers’
    quality of life by trimming benefits.
  prefs: []
  type: TYPE_NORMAL
- en: THE FACTORY’S OVERHEAD
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Negotiating factory margin is also a bit of an art, and there are no hard-and-fast
    rules. I’ll give guidance here, but there are always exceptions to the rule, and
    every factory can cut you a special deal depending on the circumstances. Ultimately,
    it’s important to look at the big picture when reviewing a factory’s quote and
    use some common sense.
  prefs: []
  type: TYPE_NORMAL
- en: What constitutes a fair margin for a factory depends on how much value it adds
    to your product, and the volume of production. The definition of “margin” also
    varies depending on the facility. Some facilities include scrap, handling overhead,
    and even research and development expenses in the margin, while others may break
    those out on separate lines.
  prefs: []
  type: TYPE_NORMAL
- en: In general, margin ranges between single-digit and low double-digit percentages,
    depending upon volume, value add, and project complexity. For very low-quantity
    production lots (fewer than 1,000 pieces), you may also be charged a per-lot *line
    fee*. This fee partially defrays the cost of setting up an assembly line only
    to tear it down after a couple of hours. A line’s throughput may be very fast,
    producing hundreds to thousands of units a day, but it also takes days to set
    up.
  prefs: []
  type: TYPE_NORMAL
- en: NONRECURRING ENGINEERING COSTS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: NRE costs are onetime fees required to set up a production run, such a stencils,
    SMT programming, jigs, and test equipment. Note that reusing test equipment between
    customers is considered bad practice; if a multimeter is required as part of a
    production test, don’t be surprised if a bill for a multimeter is tacked onto
    the NRE. Customers have drastically varying standards around the maintenance and
    use of test equipment, so good factories don’t take chances with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Miscellaneous Advice**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Who you can talk to and how open the factory is about costs are certainly key
    concerns, but with experience, you’ll learn a lot more about dealing with factories
    that doesn’t fall into any particular category. To close, here are a few more
    important points to keep in mind when selecting a factory.
  prefs: []
  type: TYPE_NORMAL
- en: SCRAP AND YIELD
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Ideally, you’d pay a factory only for good, delivered items, and the factory
    would bear the burden of defective units. This gives the factory an incentive
    to maintain a high production quality, because every percent of defectiveness
    eats away at its margin. But if your design has a flaw or is too hard to build,
    and defectiveness is high, the factory may start shipping lower-quality units
    as a desperate measure to meet production and margin targets. It may also start
    selling defective goods on the gray market to recover cost, leading to brand reputation
    problems down the road.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid situations like that, reach an understanding with the factory ahead
    of time on how to handle scrap units or exceptional yield loss. This may include,
    for example, a dedicated “scrap” line item inside the quotation to handle defectiveness
    explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: ORDER MORE UNITS THAN THE PROVEN DEMAND
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Despite everyone’s best efforts, mistakes will happen, customers will receive
    bad devices, and you’ll want extra working units for returns and exchanges. Ordering
    1,000 pieces to fulfill a 1,000-piece Kickstarter campaign means if customers
    want to return or exchange units that were broken in shipping, all you can do
    is issue refunds. It’s just not practical to fire up the factory to make a dozen
    replacement units.
  prefs: []
  type: TYPE_NORMAL
- en: As a general rule, I order a few percent excess beyond the number of units I
    need to deliver to customers, to have stock on hand to handle returns and exchanges.
    Units that don’t get used up by the returns process can be turned into demo loaners
    or business development giveaways to drum up the next set of orders!
  prefs: []
  type: TYPE_NORMAL
- en: SHIPPING COSTS MONEY
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Keep an eye on shipping costs. These fees aren’t typically built into a factory’s
    quotation, but they impact your bottom line, even more so for low-volume products.
    Shipping FedEx is a great way to save time, but it’s also very expensive. Courier
    fees can easily wash out the profit on a small project, so manage those costs.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Couriers offer discounts to frequent shippers, but you have to call in to
    negotiate the special rates.*'
  prefs: []
  type: TYPE_NORMAL
- en: FACTOR IN IMPORT DUTIES
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Components imported to China without an import license are levied a roughly
    20 percent compulsory duty on their value. The general rule for China is dutiable
    on import, duty free on export. If something is accidentally shipped across the
    border to Hong Kong, expect to pay a duty to get it back into China, too.
  prefs: []
  type: TYPE_NORMAL
- en: Get a customs broker to work angles for saving money; for example, some brokers
    can get goods taxed by their weight and not their value, which for microelectronics
    is typically a good deal. I haven’t figured out all the customs rules, as they
    seem to be a moving target. Every month it seems there’s a new rule, fine, exceptional
    fee, or tariff to deal with. There are also plenty of shady ways to get goods
    into China, but I sleep better at night knowing I do my best to comply with every
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: Quotations don’t include duties, because factories assume by default that you
    will have an import license. Import licenses enable the duty-free import of goods.
    But import licenses cost a few thousand bucks, take weeks to process, and have
    no room for flexibility, as they are tied to an exact BOM for the product. Small
    engineering change orders can invalidate an import license. I’ve known customs
    officers to count the number of decoupling caps on a PCB, and if it doesn’t match
    the count in the license, a fine is levied and the license is invalidated. Even
    deviations in the material used to line a decorative box can invalidate a license.
    In short, this import license scheme favors high-volume products, and punishes
    low-volume producers, so tread lightly.
  prefs: []
  type: TYPE_NORMAL
- en: '**CLOSING THOUGHTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Going to China for manufacturing clearly isn’t for everyone. Particularly if
    you’re based in the United States, the overhead of courier fees, travel, duties,
    and late-night conference calls adds up rapidly. As a rule of thumb, a small US-based
    company is often better off assembling PCBs in the United States for volumes under
    1,000 units, and you won’t start seeing clear advantages until volumes of perhaps
    5,000 to 10,000 units.
  prefs: []
  type: TYPE_NORMAL
- en: That math shifts in China’s favor as processes like injection molding and chassis
    assembly come into play, due to the expertise Chinese factories have in these
    labor-intensive processes. The break-even point can also be much lower if you
    live in or near China, as courier fees, travel, and time-zone impact are all a
    small fraction of what they’d be from the United States. This compounds with the
    fact that locals are more effective at leveraging the component ecosystem in China,
    leading to further cost reductions compared to a design produced using only US
    parts.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, physically large assemblies or systems built using lots of
    dutiable components may be cheaper to build domestically, as they save on shipping
    costs and tariffs. In the end, keep an open mind and try to consider all the possible
    secondary costs and benefits of domestic versus foreign manufacturing before deciding
    where to park production.
  prefs: []
  type: TYPE_NORMAL
