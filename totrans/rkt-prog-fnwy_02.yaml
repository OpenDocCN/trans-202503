- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: ARITHMETIC AND OTHER NUMERICAL PARAPHERNALIA
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 算术及其他数值附属物
- en: '![Image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common01.jpg)'
- en: In this chapter, we’ll take a look at the rich set of numerical data types that
    Racket provides. We’ll discover the expected integer and floating-point values,
    but we’ll also learn that Racket supports rational (or fractional) values along
    with complex numbers (don’t worry if you don’t know what complex numbers are;
    they are not heavily used in this text, but we take a brief look for those that
    may be interested).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Racket提供的丰富数值数据类型。我们将发现常见的整数和浮点值，但我们也会了解到Racket支持有理数（或分数）以及复数（即使你不清楚复数是什么，也没关系；它在本文中并不会大量使用，但我们简要介绍一下，以供感兴趣的人参考）。
- en: Booleans
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔值
- en: '*Booleans* are true and false values, and while they aren’t strictly numbers,
    they behave a bit like numbers in that they can be combined by various operators
    to produce other Boolean values. The discipline governing these operations is
    known as *Boolean algebra*. In Racket, Booleans are represented by the values
    `#t` and `#f`, true and false respectively. It’s also possible to use `#true`
    (or `true`) and `#false` (or `false`) as aliases for `#t` and `#f` respectively.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*布尔值*是表示真和假的值，尽管它们严格来说不是数字，但它们的行为有点像数字，因为可以通过各种运算符将它们组合成其他布尔值。统领这些运算的学科被称为*布尔代数*。在Racket中，布尔值由`#t`和`#f`表示，分别代表真和假。也可以使用`#true`（或`true`）和`#false`（或`false`）作为`#t`和`#f`的别名。'
- en: Before we introduce specific Boolean operators, one important observation about
    Racket Boolean operators in general is that they typically treat any value that’s
    not literally `#f` as true. You’ll see some examples of this behavior below.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍具体的布尔运算符之前，一个关于Racket布尔运算符的一般性重要观察是：它们通常将任何非`#f`的值视为true。你将在下面看到一些这种行为的示例。
- en: The first operator we’ll look at is `not`, which simply converts `#t` to `#f`
    and vice versa.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的第一个运算符是`not`，它简单地将`#t`转换为`#f`，反之亦然。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that `5` was converted to `#f`, meaning that it was originally treated
    as `#t`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`5`被转换成了`#f`，意味着它原本被视为`#t`。
- en: 'The next Boolean operator we’ll look at is `and`, which returns true if all
    its arguments are true. Let’s look at some examples:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的下一个布尔运算符是`and`，它在所有参数都为true时返回true。让我们看一些示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may be a bit puzzled by the last example (and rightfully so). Remember that
    Racket considers all non-false values as true, so 23 is in fact a valid return
    value. More important though is how `and` evaluates its arguments. What happens
    in reality is that `and` sequentially evaluates its arguments until it hits a
    `#f` value. If no `#f` value is encountered, it returns the value of its last
    argument, 23 in the example above. While this behavior seems a bit odd, it is
    consistent with how the `or` operator works, where, as we’ll see shortly, it can
    be quite useful in certain circumstances.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对最后一个示例感到有些困惑（这也完全合理）。记住，Racket认为所有非`#f`的值都是真值，因此23实际上是一个有效的返回值。更重要的是，`and`如何评估其参数。实际上发生的情况是，`and`依次评估其参数，直到遇到`#f`值。如果没有遇到`#f`值，它就返回最后一个参数的值，在上面的例子中是23。虽然这种行为看起来有些奇怪，但它与`or`运算符的工作方式一致，正如我们稍后将看到的那样，它在某些情况下非常有用。
- en: 'The last Boolean operator we’ll look at is the `or` operator, which will return
    true if any of its arguments are true and `#f` otherwise. Here are some examples:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的最后一个布尔运算符是`or`运算符，如果其任一参数为true，则返回true，否则返回`#f`。以下是一些示例：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Much like `and`, `or` sequentially evaluates its arguments. But in `or`’s case,
    the first *true* value is returned. In the example above, 45 is treated as true,
    so that’s the value returned. This behavior can be quite useful when one wants
    the first value that’s not `#f`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与`and`类似，`or`会依次评估其参数。但在`or`的情况下，返回的是第一个*true*值。在上面的例子中，45被视为true，因此返回的值就是它。这种行为在你希望返回第一个非`#f`值时非常有用。
- en: Other less frequently used Boolean operators are `nand`, `nor`, and `xor`. Consult
    the Racket Documentation for details on these operators.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些不常用的布尔运算符包括`nand`、`nor`和`xor`。有关这些运算符的详细信息，请参考Racket文档。
- en: The Numerical Tower
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数值塔
- en: In mathematics there’s a hierarchy of number types. *Integers* are a subset
    of rational (or fractional) numbers. *Rational numbers* are a subset of real numbers
    (or floating-point values as they are approximated by computers). And *real numbers*
    are a subset of complex numbers. This hierarchy is known as the *numerical tower*
    in Racket.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，有一套数字类型的层级结构。*整数*是*有理数*（或分数）的子集。*有理数*是*实数*（或浮动点数，在计算机中进行近似）的子集。而*实数*又是*复数*的子集。这个层级结构在
    Racket 中被称为*数值塔*。
- en: '***Integers***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***整数***'
- en: In mathematics the set of integers is represented by the symbol ℤ. Racket integers
    consist of a sequence of digits from 0 to 9, optionally preceded by a plus or
    minus sign. Integers in Racket are said to be *exact*. What this means is that
    applying arithmetical operations to exact numbers will always produce an exact
    numerical result (in this case a number that’s still an integer). In many computer
    languages, once an operation produces a number of a certain size, the result will
    either be incorrect or it will be converted to an approximate value represented
    by a floating-point number. With Racket, numbers can get bigger and bigger until
    your computer literally runs out of memory and explodes. Here are some examples.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，整数集由符号 ℤ 表示。Racket 中的整数由 0 到 9 的数字序列组成，前面可以选择性地加上加号或减号。Racket 中的整数被称为*精确的*。这意味着对精确数字进行算术运算将始终产生精确的数值结果（在这种情况下，仍然是整数）。在许多编程语言中，一旦某个操作生成了某个大小的数字，结果要么不正确，要么会被转换为近似值，由浮动点数表示。使用
    Racket，数字可以越来越大，直到计算机的内存耗尽并崩溃。以下是一些示例。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that in the last examples, division doesn’t result in a floating-point
    number but rather returns an *exact* value: a rational number (discussed in the
    next section).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在最后的示例中，除法操作没有产生浮动点数，而是返回了*精确*值：一个有理数（将在下一节讨论）。
- en: 'It’s possible to enter integers in number bases other than 10\. Racket understands
    *binary numbers* (integers prefixed by `#b`), *octal* numbers (integers prefixed
    by `#o`), and *hexadecimal* numbers (integers prefixed by `#x`):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以输入除了 10 以外的其他进制的整数。Racket 理解*二进制数字*（以`#b`为前缀的整数）、*八进制*数字（以`#o`为前缀的整数）和*十六进制*数字（以`#x`为前缀的整数）：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Non-decimal bases have somewhat specialized use cases, but one example is that
    HTML web pages typically express color values as hexadecimal numbers. Also, binary
    numbers are how computers store all values internally, so they can be useful for
    individuals studying basic computer science. Octal and hexadecimal values have
    a further advantage: binary numbers can easily be converted to octal since three
    binary digits equates to a single octal value and four binary digits equates to
    a single hexadecimal digit.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 非十进制进制有一些特定的使用场景，一个例子是 HTML 网页通常将颜色值表示为十六进制数字。此外，二进制数字是计算机内部存储所有值的方式，因此它们对于学习基础计算机科学的人来说非常有用。八进制和十六进制值还有一个额外的优势：二进制数字可以很容易地转换为八进制，因为三个二进制位等于一个八进制值，四个二进制位等于一个十六进制位。
- en: '***Rationals***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***有理数***'
- en: Next up on the mathematical food chain are the rational numbers (or fractions),
    expressed by the mathematical symbol ℚ. Fractions in Racket consist of two positive
    integer values separated by a forward slash (no spaces allowed), optionally preceded
    by a plus or minus sign. Rational numbers are also an exact numeric type, and
    all operations permitted for integers are also valid for rational numbers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数学食物链中的下一级是有理数（或分数），用数学符号 ℚ 表示。Racket 中的分数由两个正整数值组成，它们之间用斜杠分隔（不允许有空格），前面可以选择性地加上加号或减号。有理数也是一种精确的数字类型，所有整数的运算都适用于有理数。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The numerator and denominator of a rational number can be obtained with the
    `numerator` and `denominator` functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`numerator`和`denominator`函数获取有理数的分子和分母。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '***Reals***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***实数***'
- en: 'A *real* number is a mathematical concept (specified by the symbol ℝ) that,
    in reality, does not exist in the world of computers. Real numbers such as *π*
    have an infinite decimal expansion that can only be approximated in a computer.
    Thus, we reach our first class of *inexact* numbers: floating-point numbers. Floating-point
    numbers in Racket are entered in the same way as they are in most programming
    languages and calculators. Here are some (unfortunately boring) examples:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*实数*是一个数学概念（由符号 ℝ 表示），在现实中并不存在于计算机世界中。像*π*这样的实数具有无限小数扩展，在计算机中只能被近似。因此，我们得到了第一类*不精确*数字：浮动小数。Racket
    中的浮动小数与大多数编程语言和计算器中的输入方式相同。以下是一些（不幸的是无聊的）例子：'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It’s important to keep in mind that there are some subtle distinctions in the
    mathematical concept of certain number types and what they mean in a computing
    environment. For example a number entered as 1/10 is, as mentioned above, treated
    as an exact rational number since it can be represented as such in a computer
    (internally it’s stored as two binary integer values), but the value 0.1 is treated
    as an inexact floating-point value, an approximation of the real number value,
    since it cannot be represented internally a single binary value (at least not
    without using an infinite number of binary digits).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记的是，某些数字类型的数学概念在计算环境中的含义存在一些细微的区别。例如，输入为 1/10 的数字，如上所述，被视为精确的有理数，因为它可以在计算机中表示为这种形式（内部以两个二进制整数值存储），但值
    0.1 被视为不精确的浮动小数值，作为实数值的近似值，因为它不能在内部表示为单一的二进制值（至少不能在不使用无限二进制位的情况下表示）。
- en: '***Complex Numbers***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***复数***'
- en: When we use the term *complex* number it does not mean we are speaking of a
    *complicated* number, but rather a special type of number. If you’re not already
    familiar with this concept, there’s no harm in moving on to the next section,
    since complex numbers aren’t used in the remainder of the book (although I would
    encourage you to read up on this fascinating subject). This section is included
    as a reference for the brave souls who may make use of this information in their
    own projects.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用*复数*这个术语时，并不意味着我们在说一个*复杂*的数字，而是指一种特殊类型的数字。如果你还不熟悉这个概念，可以跳过这一节，因为在本书的剩余部分不会使用复数（不过我鼓励你阅读这个迷人的主题）。这一节作为参考，供那些可能在自己项目中使用这些信息的勇敢人士参考。
- en: 'Complex numbers are entered almost exactly as they appear in any mathematical
    text, but there are some points to note. First, if the real component is omitted,
    the imaginary part must be preceded by a plus or minus sign. Second, there can
    be no spaces in the string used to define the number. And third, complex numbers
    must end in `i`. Examples:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 复数的输入几乎与任何数学文本中的表示方式完全相同，但有一些需要注意的点。首先，如果省略了实部，虚部必须以加号或减号开头。其次，用于定义数字的字符串中不能有空格。最后，复数必须以`i`结尾。示例如下：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that complex numbers can be exact or inexact. We can test exactness using
    the `exact?` operator:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，复数可以是精确的或不精确的。我们可以使用`exact?`运算符来测试精确度：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To get at the components of a complex number, use `real-part` and `imag-part`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取复数的组成部分，使用`real-part`和`imag-part`：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This concludes our look at the numerical tower and basic arithmetical operations
    on the various number types. In the next few sections we’ll look at comparison
    operators, what happens when different number types are added together (for example
    adding an integer to a floating-point number), and some useful mathematical functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对数字塔和各种数字类型的基本算术操作的讨论。在接下来的几节中，我们将讨论比较运算符，数字类型相加时会发生什么（例如将整数与浮动小数相加），以及一些有用的数学函数。
- en: Numeric Comparison
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字比较
- en: 'Racket supports the usual complement of numeric comparison operators. We can
    test if numbers are equal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 支持常见的数字比较运算符。我们可以测试数字是否相等：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'and compare their sizes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 并比较它们的大小：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also use these operators on multiple arguments, and Racket will ensure
    that the elements pair-wise satisfy the comparison operator. In the example below,
    this means that 1 < 2, 2 < 3, and 3 < 4.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将这些运算符应用于多个参数，Racket 会确保元素按对满足比较运算符。如下例所示，意味着 1 < 2，2 < 3，3 < 4。
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'But there’s no *not equals* operator, so to test if two numbers are not equal
    to each other, you would have to do something like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但没有*不等于*运算符，所以要测试两个数字是否不相等，你需要做类似如下的操作：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Combining Data Types
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并数据类型
- en: As you saw above, you can compare numbers of different types. But notice that
    we only performed arithmetic on exact numbers with exact numbers and vice versa.
    Here we’ll discuss the implications of mixing exact and inexact numbers. Mixing
    exact and inexact numbers won’t result in mass chaos (think *Ghostbusters* stream-crossing),
    but there are some fine points you should be aware of.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，你可以比较不同类型的数字。但请注意，我们只对精确数字与精确数字进行算术运算，反之亦然。这里我们将讨论混合精确和不精确数字的影响。混合精确和不精确数字不会导致大规模混乱（想象一下*捉鬼敢死队*中的能量流交叉），但你应该注意一些细节。
- en: 'First and foremost, when it comes to arithmetic operators (addition, subtraction,
    and so on), the rules are fairly simple:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，当涉及到算术运算符（加法、减法等）时，规则相当简单：
- en: Mixing exact with exact will give an exact result.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将精确与精确混合将得到精确的结果。
- en: Mixing inexact with inexact will give an inexact result.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将不精确与不精确混合将得到不精确的结果。
- en: Mixing exact with inexact (or vice versa) will give an inexact result.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将精确与不精确（或反之）混合将得到不精确的结果。
- en: No surprises here, but there are some nuanced exceptions to these rules, such
    as multiplying anything by zero gives exactly zero.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么意外，但这些规则也有一些微妙的例外，比如将任何数与零相乘会得到精确的零。
- en: 'Trigonometric functions will generally always return an inexact result (but
    again, there are some reasonable exceptions; for example `exp 0` gives an exact
    1). You’ll see some of these functions later in the chapter. The square function,
    `sqr`, will return an exact result if given an exact number. Its square root counterpart,
    `sqrt`, will return an exact result if it’s given an exact number *and* the result
    is an exact number; otherwise, it will return an inexact number:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 三角函数通常会返回一个不精确的结果（但同样也有一些合理的例外；例如 `exp 0` 会返回精确的 1）。你将在本章后面看到这些函数。平方函数`(sqr)`如果输入一个精确数字，将返回一个精确结果。如果它的平方根对应函数`(sqrt)`接收的是精确数字*并且*结果是精确数字，则也会返回精确结果；否则，它将返回不精确的数字：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are a couple of functions available to test exactness. Earlier you saw
    the function `exact?`, which returns `#t` if its argument is an exact number;
    otherwise it returns `#f`. Its counterpart is `inexact?`. It’s also possible to
    force an exact number to be inexact and vice versa using two built-in functions:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个函数可以用来测试精确性。之前你见过`exact?`函数，如果它的参数是精确数字，则返回`#t`；否则返回`#f`。它的对等函数是`inexact?`。还可以通过两个内置函数强制将一个精确数字变为不精确，反之亦然：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There’s a predicate to test for each of the numeric data types we have mentioned
    in this section, but they may not work exactly as you expect.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个谓词可以测试本节中提到的每种数字数据类型，但它们的工作方式可能不完全如你所预期。
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These predicates return a result that honors the mathematical meaning of the
    predicate. You may have expected `(complex? 70)` to return `#f`, but integers
    are complex numbers, just with a zero real component. Likewise, you may have expected
    `(integer? 70.0)` to return `#f` since it’s a floating-point number, but since
    the fractional part is 0, the number (while also real) is in fact an integer (but
    not an exact number). The number 1.5 is equivalent to 3/2, so Racket considers
    this to be a rational number (but again, inexact). The number type predicates
    (`integer?`, `rational?`, `real?`, and `complex?`) are aligned with the mathematical
    hierarchy (or numerical tower) as mentioned at the beginning of the section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些谓词返回的结果符合该谓词的数学含义。你可能期望`(complex? 70)`返回`#f`，但是整数也是复数，只不过它的实部为零。同样，你可能期望`(integer?
    70.0)`返回`#f`，因为它是一个浮点数，但由于小数部分为 0，该数（虽然也是实数）实际上是一个整数（但不是精确的数字）。数字 1.5 等于 3/2，因此
    Racket 认为它是一个有理数（但同样是近似的）。数字类型谓词（`integer?`、`rational?`、`real?` 和 `complex?`）与数学层级（或数值塔）对齐，如本节开头所提到的。
- en: Built-in Functions
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置函数
- en: Aside from the normal arithmetical operators illustrated above, Racket provides
    the usual complement of mathematical functions that are standard fare in any programming
    language. A generous litany of examples follows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述的普通算术运算符，Racket 还提供了通常的数学函数，这些函数是任何编程语言中的标准内容。以下是一些详细的示例。
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that when possible, a function that has an exact argument will return an
    exact result.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当可能时，带有精确参数的函数将返回精确的结果。
- en: There are of course many other functions available. Consult the Racket Documentation
    for details.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他可用的函数。详情请查阅 Racket 文档。
- en: Infix Notation
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中缀表示法
- en: 'As we’ve seen, in Racket, mathematical operators are given before the operands:
    `(+ 1 2)`. Typical mathematical notation has the operator between the operands:
    1 + 2\. This is called *infix notation*. Racket natively allows a form of infix
    notation by using a period operator. Here are some examples.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在 Racket 中，数学运算符位于操作数之前：`(+ 1 2)`。典型的数学符号是将运算符放在操作数之间：1 + 2。这种写法叫做
    *中缀表示法*。Racket 原生支持一种通过点运算符的中缀表示法。下面是一些示例。
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This can be useful when we want to make explicit the relationship between certain
    operators, but it’s unwieldy for complex expressions.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望明确某些运算符之间的关系时，这非常有用，但对于复杂的表达式来说，它显得有些笨重。
- en: 'For complex mathematical expressions, Racket provides the `infix` package.
    This package can be imported with the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂的数学表达式，Racket 提供了 `infix` 包。这个包可以通过以下代码导入：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `#lang` keyword allows us to define language extensions (in this case the
    `at-exp` allows us to use @-expressions, which we will see shortly). The `require
    infix` expression states that we want to use the *infix* library. Unfortunately,
    the `infix` package is not installed by default and must be installed from the
    Racket package manager (the package manager can be accessed through the DrRacket
    File menu) or the `raco` command line tool (if the executable for `raco` is not
    in your execution path, it can be launched directly from the Racket install folder).
    To install using `raco`, execute the following on the command line:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`#lang` 关键字允许我们定义语言扩展（在本例中，`at-exp` 允许我们使用 @-表达式，我们很快就会看到）。`require infix`
    表达式表示我们希望使用 *infix* 库。不幸的是，`infix` 包默认没有安装，必须从 Racket 包管理器安装（可以通过 DrRacket 的文件菜单访问包管理器）或使用
    `raco` 命令行工具（如果 `raco` 的可执行文件不在你的执行路径中，可以直接从 Racket 安装文件夹启动）。要使用 `raco` 安装，请在命令行执行以下命令：'
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also note that we’re using the language extension `at-exp`, which, while not
    entirely necessary, provides a nicer syntax to enter infix expressions. For example
    without `at-exp`, to compute 1 + 2 * 3, we would enter the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意，我们使用了语言扩展 `at-exp`，虽然它不是完全必要的，但提供了一种更优雅的语法来输入中缀表达式。例如，如果没有 `at-exp`，要计算
    1 + 2 * 3，我们需要输入以下内容：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With the `at-exp` extension, we could enter this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `at-exp` 扩展，我们可以输入如下内容：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: While this only saves a couple of keystrokes, it removes the annoying string
    delimiters and just looks a bit more natural.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这仅节省了几个按键，但它去除了令人讨厌的字符串分隔符，看起来更自然一些。
- en: Function calls are handled in a familiar way by using square brackets. For example
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用通过使用方括号以熟悉的方式处理。例如
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There is even a special form for lists:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有一种特殊的列表表示形式：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And there’s one for variable assignments (which use `:=`, equivalent to `set!`,
    so the variable must be bound first):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个用于变量赋值的形式（使用 `:=`，等同于 `set!`，因此变量必须先绑定）：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To further illustrate the capabilities of the `infix` package, below is a complete
    program containing a function called `quad`, which returns a list containing the
    roots of the quadratic equation
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步说明 `infix` 包的功能，下面是一个包含名为 `quad` 的函数的完整程序，该函数返回一个包含二次方程根的列表
- en: '*ax² + bx + c* = 0'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*ax² + bx + c* = 0'
- en: As you’ll recall from your algebra class (you *do* remember, don’t you), these
    roots are given by
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在代数课上学到的（你*还记得*吧），这些根可以表示为
- en: '![Image](../images/p039.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p039.jpg)'
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After compiling this, we can solve 2*x*² *-* 8*x* + 6 = 0 for *x*, by entering
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，我们可以通过输入以下内容求解 2*x*² -* 8*x* + 6 = 0 的 *x*：
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: or equivalently . . .
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '或者等效地。。。 '
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: With these first two chapters under your belt, you should be thoroughly familiar
    with Racket’s basic data types. You should also be comfortable performing mathematical
    operations in Racket’s rich numerical environment. This should prepare you for
    the somewhat more interesting topics to follow where we will explore number theory,
    data analysis, logic programming, and more. But, next up is functional programming,
    where we get down to the nitty-gritty of actually creating programs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前两章的学习，你应该已经对 Racket 的基本数据类型非常熟悉。你也应该能熟练地在 Racket 丰富的数值环境中执行数学运算。这应该为接下来更有趣的主题做好准备，我们将在其中探讨数论、数据分析、逻辑编程等内容。但接下来要学习的是函数式编程，我们将深入探讨如何实际编写程序。
