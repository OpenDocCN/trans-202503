- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 21 PSEUDO-ENVIRONMENT VARIABLES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21 伪环境变量
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: I introduced environment variables in [Chapter 2](chapter2.xhtml) with the set
    command, and they have found their way onto nearly every page since. You can define
    and resolve a simple variable and then maybe reset and use it again in various
    ways. *Pseudo-environment variables* are similar but also quite distinct. You
    can resolve them just like regular environment variables, but their origins or
    how they are set are substantially different.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第2章](chapter2.xhtml)中介绍了环境变量及其 set 命令，它们从那时起出现在了几乎每一页中。你可以定义和解析一个简单的变量，然后可能会重置并以不同方式再次使用它。*伪环境变量*与其类似，但也有显著不同。你可以像常规环境变量一样解析它们，但它们的来源或设置方式有本质的不同。
- en: We’ve already discussed a few pseudo-environment variables, including path,
    pathext, cd, and errorlevel. All pseudo-environment variables share some characteristics,
    but many have unique qualities. There are different means of setting many of them,
    and some you should never set at all. Some are active before you run a bat file,
    and the interpreter updates others repeatedly during an execution.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些伪环境变量，包括 path、pathext、cd 和 errorlevel。所有伪环境变量都有一些共同特点，但许多都有独特的属性。许多伪环境变量有不同的设置方式，有些你根本不应设置。某些变量在运行
    bat 文件之前就已激活，而解释器会在执行过程中反复更新其他变量。
- en: Each pseudo-environment variable has an intrinsic quality in the Batch universe
    that you must understand before properly using it. In this chapter, I’ll explain
    the intricacies of some pseudo-environment variables already touched on and explore
    some useful ones that we’ll use in future chapters. I’ll also provide the long-promised
    explanation of the primary difference between bat and cmd files from the coder’s
    perspective.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个伪环境变量在批处理世界中都有一个固有的特性，在正确使用之前你必须理解这一点。在本章中，我将解释一些已经提到的伪环境变量的复杂性，并探索一些我们将在未来章节中使用的有用的伪环境变量。我还将提供一直承诺的关于从编码者角度看，bat
    文件和 cmd 文件的主要区别的解释。
- en: Date and Time
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期和时间
- en: 'You can easily retrieve the current date and time with the aptly named date
    and time pseudo-environment variables, respectively:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地通过分别使用恰如其分命名的日期和时间伪环境变量来获取当前的日期和时间：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command would have produced the following output if executed shortly after
    the Boston Red Sox snapped their 86-year championship drought:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在波士顿红袜队结束了86年的冠军荒之后不久执行该命令，它将产生如下输出：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The date variable contains the current date, formatted as day of week, month,
    day, and year. The day of the week always presents as a three-character mixed-case
    abbreviation, followed by a space, a two-byte month, a forward slash, a two-byte
    day, another slash, and a four-byte year. For instance, Sun 06/08/1986 is an example
    from the early Batch era.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 日期变量包含当前日期，格式为星期几、月份、日期和年份。星期几总是以三个字符的大写和小写混合形式呈现，后跟一个空格、一个两字节的月份、一个斜杠、一个两字节的日期、另一个斜杠和一个四字节的年份。例如，Sun
    06/08/1986 是批处理时代早期的一个例子。
- en: The time variable contains the current time, formatted as hours, minutes, seconds,
    and hundredths of seconds. It uses military time or a 24-hour clock, so 11:39
    PM translates to 23:39:00.00. If the hour is a single digit, Batch precedes it
    with a space instead of a leading zero; just before the stroke of 10:00 AM, time
    resolves to a space followed by 9:59:59.99, and midnight presents as a space followed
    by 0:00:00.00.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 时间变量包含当前时间，格式为小时、分钟、秒和百分之一秒。它使用24小时制，因此晚上11:39转为23:39:00.00。如果小时数是单个数字，批处理会在其前面加上一个空格，而不是前导零；例如，在上午10:00临近时，时间将解析为一个空格，后跟
    9:59:59.99，而午夜则显示为空格加上 0:00:00.00。
- en: It’s certainly an oddity, but keep in mind that time has a leading space in
    lieu of a zero, while date has a leading 0 for all the one-digit months and days
    of the month.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实有些奇怪，但请记住，时间在前面有一个空格代替零，而日期对于所有单数字的月份和日期则有一个前导零。
- en: Since date and time are nicely formatted, you can easily use them to enhance
    reports and logfiles, and because date is consistently formatted, it’s easy to
    substring out a datestamp, formatted as CCYYMMDD, as shown in [Listing 21-1](#Lis21-1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于日期和时间格式良好，你可以轻松地将它们用来增强报告和日志文件，而且因为日期格式一致，所以可以轻松地提取一个日期戳，格式为 CCYYMMDD，如 [Listing
    21-1](#Lis21-1) 所示。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 21-1: Two commands in the Datestamp.bat bat file to build a datestamp'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 21-1: 在 Datestamp.bat 文件中使用的两个命令来构建日期戳'
- en: (To save keystrokes I like to use the pound sign as a very short variable name,
    but only for a very concise and limited use. Using this variable much later in
    the bat file would be confusing, but using it immediately within the next line
    or two is a nice way to condense the code. Though I must admit that %#:~7,2% is
    esoteric and not to everyone’s liking.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （为了节省按键次数，我喜欢使用井号作为一个非常简短的变量名，但仅限于非常简洁和有限的使用。在bat文件中稍后使用这个变量会造成困扰，但在接下来的一两行中立即使用它则是一个很好的方式来简化代码。虽然我必须承认，%#:~7,2%是深奥的，并非每个人都喜欢。）
- en: 'Using a different technique, here’s the code to build a timestamp formatted
    as HHMMSSss:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的技术，以下是构建按HHMMSSss格式的时间戳的代码：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first command replaces the leading space, if it exists, with a 0. The next
    two commands remove the two colons and the decimal point.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将替换前导空格（如果存在的话），用0代替。接下来的两个命令将移除两个冒号和小数点。
- en: Unless coding and testing before 10 AM, it’s disturbingly easy to forget about
    the leading space, but it’s critical. If you miss it while testing in the afternoon,
    the variable will suddenly contain a space at the stroke of midnight, and depending
    on how you plan to use it, failures could ensue at a very inopportune time of
    day. Consider this one more batveat.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除非在上午10点之前进行编码和测试，否则很容易忘记前导空格，但它是至关重要的。如果在下午测试时忘记了它，变量将会在午夜时刻突然包含一个空格，而根据你计划如何使用它，可能会在非常不合时宜的时刻发生失败。这可以看作是另一个警告。
- en: Datestamps and timestamps have many uses. You can use them in filenames to indicate
    their creation date and time. In an if command, you can compare them to other
    datestamps or timestamps to turn on logic at a specific date and time. You can
    even capture them before and after some process to measure elapsed time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 日期戳和时间戳有许多用途。你可以在文件名中使用它们来表示创建日期和时间。在if命令中，你可以将它们与其他日期戳或时间戳进行比较，在特定日期和时间启用逻辑。你甚至可以在某些过程之前和之后捕获它们来衡量经过的时间。
- en: Prompt
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Prompt
- en: The prompt pseudo-environment variable does double duty as a command. Just as
    path is a command to change the path variable, prompt is a command to change the
    prompt variable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 提示符伪环境变量同时也作为命令使用。就像path是用来更改路径变量的命令一样，prompt是用来更改提示符变量的命令。
- en: 'In [Chapter 12](chapter12.xhtml), when discussing the interpreter-generated
    output (stdout), I mentioned that the interpreter prefixes the output from every
    command, whether it ends up on the console or redirected to a trace file, with
    the prompt. By default, the prompt is the current directory followed by a greater-than
    symbol. For instance, if the two lines of code producing a datestamp in *Datestamp.bat*
    from [Listing 21-1](#Lis21-1) were run from the *C:\Batch\* directory, it might
    generate the following output to a trace file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](chapter12.xhtml)中，当讨论解释器生成的输出（stdout）时，我提到了解释器会在每个命令的输出前加上提示符，无论输出最终是显示在控制台上，还是重定向到跟踪文件中。默认情况下，提示符是当前目录后跟一个大于符号。例如，如果从*
    C:\Batch\* 目录运行[清单21-1](#Lis21-1)中生成日期戳的两行代码，它可能会生成以下输出到跟踪文件：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But defaults are made to be changed. The prompt variable contains hardcoded
    text and/or special codes that define the content of the prompt seen in stdout,
    and the prompt command is the tool that updates the prompt variable. The command’s
    lone argument is the new prompt variable, which’ll change what we see in stdout.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但默认设置是可以更改的。提示符变量包含硬编码文本和/或特殊代码，定义了在stdout中看到的提示符内容，而提示符命令是更新提示符变量的工具。该命令的唯一参数是新的提示符变量，它将改变我们在stdout中看到的内容。
- en: 'To demonstrate, if I were particularly self-absorbed and wanted my signature
    on every line of executed code, this simple command would assuage my ego:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，如果我特别自恋并希望每行执行的代码上都带有我的签名，这个简单的命令可以满足我的虚荣心：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Two pieces of hardcoded text are in the argument, Jack''s and Code. Additionally,
    two special codes insert a space ($S) in between the words and a greater-than
    sign ($G) at the end. Running the same two lines of code on the same date now
    produces this output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 参数中有两段硬编码文本，分别是Jack's和Code。此外，还有两个特殊代码，在单词之间插入一个空格（$S），在末尾插入一个大于符号（$G）。运行相同的两行代码，在同一天现在会生成如下输出：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But this command and variable were not created for vanity; they were created
    to populate the prompt with customized information. Consider this far more complex
    and esoteric example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个命令和变量并不是为了虚荣而创建的；它们是为了在提示符中填充自定义信息而创建的。考虑这个更为复杂和深奥的示例：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This prompt command isn’t the easiest to read, but here it’s broken down:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提示符命令并不容易阅读，但这里我将其分解如下：
- en: '%~NX0    Bat filename and extension; perhaps resolves to Datestamp.bat'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '%~NX0    Bat 文件名和扩展名；可能解析为 Datestamp.bat'
- en: $A    Ampersand; resolves to &
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: $A    和符号；解析为 &
- en: $N    Drive letter; perhaps resolves to C
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: $N    驱动器字母；可能解析为 C
- en: ':    Hardcoded text; appears as :'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ':    硬编码文本；显示为 :'
- en: $$    Dollar sign; resolves to $
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: $$    美元符号；解析为 $
- en: $C    Open parenthesis; resolves to (
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: $C    左括号；解析为 (
- en: $D    Date; perhaps resolves to Wed 10/27/2004
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: $D    日期；可能解析为 Wed 10/27/2004
- en: $B    Pipe; resolves to |
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: $B    管道符号；解析为 |
- en: $T    Time; perhaps resolves to 23:39:12.34
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: $T    时间；可能解析为 23:39:12.34
- en: $F    Close parenthesis; resolves to)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: $F    右括号；解析为）
- en: $G    Greater-than sign; resolves to >
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: $G    大于号；解析为 >
- en: 'After you assign this prompt variable, executing the same two lines might result
    in this output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在你分配这个提示变量之后，执行相同的两行可能会得到如下输出：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Of these entities in this prompt variable, all but a couple are special codes
    specific to the prompt command. One byte, the colon, is hardcoded, and the first
    item, %~NX0, is just a resolved variable. It happens to be the name and extension
    of the bat file being executed, but most any variable would work here.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个提示变量中的这些实体，除了少数几个，都是特定于提示命令的特殊代码。一个字节，冒号，是硬编码的，第一个项目，%~NX0，只是一个解析后的变量。它恰好是正在执行的bat文件的名称和扩展名，但几乎任何变量都可以在这里使用。
- en: The special code for time ($T) allows you to see exactly when each and every
    command executes. If a bat file seems to take longer to execute than it should,
    this is a simple means of pinpointing the bottleneck. In the previous example,
    the fact that the second command executed a hundredth of a second after the first
    is displayed in the prompt, while the rest of the prompt is unchanged.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 时间的特殊代码 ($T) 允许你精确看到每个命令执行的时间。如果一个bat文件执行时间似乎比预期长，这是一个简单的方式来确定瓶颈。在前面的例子中，第二个命令执行的时间比第一个多了百分之一秒，这个信息会在提示符中显示出来，而其他部分保持不变。
- en: Also, notice that the greater-than sign ($G) is the last character in the prompt.
    Without it, the prompt bleeds into the command following it, producing a rather
    unreadable stdout. It isn’t required, but it’s good form to conclude the prompt
    with the greater-than sign or some sort of special character.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，大于号 ($G) 是提示符中的最后一个字符。如果没有它，提示符会与后面的命令混在一起，产生相当难以读取的标准输出。它不是必须的，但最好在提示符末尾加上大于号或某种特殊字符。
- en: 'You can even add a space or two after the greater-than sign to further distinguish
    the prompt from the output. Regardless of the current prompt variable, this command
    will add two spaces to it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以在大于号后加上一个或两个空格，以进一步区分提示符和输出。无论当前提示变量是什么，这个命令都会在提示符后加上两个空格：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This command clearly shows the two uses of prompt. Assuming that the default
    prompt was active, the prompt variable resolves to $P$G (current directory and
    greater-than sign). The command then appends this with $S$S and uses it as the
    argument to the prompt command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令清楚地展示了提示符的两种用法。假设默认的提示符是活动的，提示符变量解析为 $P$G（当前目录和大于号）。然后命令将此与 $S$S 连接，并将其作为提示命令的参数：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command activates the new prompt with trailing spaces for the execution
    of any subsequent commands:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令激活带有尾随空格的新提示符，以执行任何后续命令：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With hardcoded text and all the characters available with the special codes,
    you can easily customize the prompt to virtually any text imaginable to suit any
    need. I showed a number of the special codes earlier, but the help command provides
    a complete list.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过硬编码的文本和所有特殊代码可用的字符，你可以轻松地定制提示符，几乎可以实现任何你想得到的文本，以满足任何需求。我之前展示了一些特殊代码，但帮助命令提供了完整的列表。
- en: Random Numbers
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机数字
- en: The random pseudo-environment variable resolves to a random number between 0
    and 32,767, inclusive. You can use this to simulate a coin flip; an even number
    is heads, and an odd is tails. If you want to randomly launch a process on one
    of any number of servers, this pseudo-environment variable gives you that ability.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 随机伪环境变量解析为一个介于0和32,767之间的随机数，包括两者。你可以用它来模拟抛硬币；偶数为正面，奇数为反面。如果你想随机启动一个过程在任意数量的服务器上，这个伪环境变量可以为你提供这种能力。
- en: To demonstrate one use of random, in [Chapter 15](chapter15.xhtml) I demonstrated
    interactive Batch with a bat file that offered up a joke, pun, or riddle—but just
    one of each. Unfortunately, it didn’t take long to exhaust the material. Now imagine
    a library of 100 bat jokes, 100 bat puns, and 100 bat riddles. Unfortunately (or
    fortunately), I won’t list them here. Imagine further that when the user asks
    for a pun, we randomly select one of the 100 puns from the library.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示随机的一个用法，在[第 15 章](chapter15.xhtml)中，我展示了交互式批处理，其中有一个 bat 文件提供笑话、双关语或谜语——但每次只提供其中一个。不幸的是，这些内容很快就用完了。现在，想象一个包含
    100 个 bat 笑话、100 个 bat 双关语和 100 个 bat 谜语的库。不幸的是（或幸运的是），我不会在这里列出它们。再想象一下，当用户请求一个双关语时，我们从这个库中随机选择一个双关语。
- en: 'To make this happen, we need a couple of things. First, we need to put the
    100 puns into an array so that we can select them individually. (That’ll come
    in [Chapter 29](chapter29.xhtml).) More important at this moment, we need a means
    of generating one random number out of 100 possible numbers. The following set
    /A command uses the random pseudo-environment variable and the modulo operator
    to generate a *random* number between 0 and 99 (sort of):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要做几件事。首先，我们需要将 100 个双关语放入数组中，以便单独选择它们。（这一点将在[第 29 章](chapter29.xhtml)中讨论。）更重要的是，我们需要一种生成
    100 个可能数字中的一个随机数字的方法。以下的 set /A 命令使用随机伪环境变量和模运算符生成一个介于 0 和 99 之间的 *随机* 数字（可以说）：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the puns are labeled 0 through 99, we can simply choose the pun based on
    the value of punNbr. If the puns are labeled 1 through 100, we merely need to
    add 1 to the result:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将这些双关语标记为 0 到 99，我们可以简单地根据 punNbr 的值选择双关语。如果将双关语标记为 1 到 100，我们只需在结果中加 1：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are two reasons I mentioned that this “sort of” works. First, like the
    vast majority of computer-generated random numbers, this is actually a pseudo-random
    number and not truly random. (Yes, this is the pseudo-random pseudo-environment
    variable.) When the bat file first starts, the interpreter seeds the random function
    with the current time, which it uses in the algorithm that generates all future
    random numbers on request. This means that two bat files starting at the very
    same moment will see the same set of pseudo-random numbers generated—even two
    bat files launched within seconds of each other will see very similar *random*
    numbers, at least for the first few invocations. It’s important to be aware of
    this, although pseudo-random numbers are more than acceptable for most applications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到这“有点”有效的原因有两个。首先，像大多数计算机生成的随机数一样，这实际上是一个伪随机数，而不是真正的随机数。（是的，这就是伪随机的伪环境变量。）当
    bat 文件第一次启动时，解释器会用当前时间为随机函数提供种子，这个时间会被用于生成后续请求的所有随机数的算法。这意味着，在同一时刻启动的两个 bat 文件会看到相同的伪随机数生成集——甚至是相隔几秒钟启动的两个
    bat 文件，至少在最初的几次调用中，也会看到非常相似的 *随机* 数字。虽然伪随机数对于大多数应用程序来说是完全可以接受的，但还是要注意这一点。
- en: The second reason punNbr isn’t truly random is that 32,768, the total number
    of random numbers, isn’t divisible by 100\. If you executed the first set command
    in this section 32,768 times (once for each number from 0 to 32,767), 0 would
    be the result 328 times. Likewise, 1 through 67 would be the result 328 times
    each. But you would see 68 as the result only 327 times, and the same goes for
    all of the numbers up to and including 99. The upshot is that some numbers will
    be *randomly* selected just slightly more often than other numbers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: punNbr 不是完全随机的第二个原因是 32,768 这个随机数的总数不能被 100 整除。如果你在这一节中执行第一次 set 命令 32,768 次（每次执行一次，数字从
    0 到 32,767），结果为 0 的次数是 328 次。同样，1 到 67 的结果各出现 328 次。然而，68 作为结果的次数仅为 327 次，其余数字直到
    99 也都是如此。结果是，有些数字会被 *随机* 选择的频率稍微高于其他数字。
- en: The remainder of this section is the inevitable result of a just slightly obsessive-compulsive
    mathematician becoming a coder who ultimately deals with random numbers. The vast
    majority of the time a pseudo-random number and modulo arithmetic will more than
    get the job done, but if you want to find out how to get as close as possible
    to a truly random number, read on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余内容是一个略微有强迫症的数学家成为程序员，最终处理随机数的不可避免结果。大多数时候，伪随机数和模运算能完全完成任务，但如果你想知道如何尽可能接近真正的随机数，请继续阅读。
- en: The cmdcmdline Variable
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cmdcmdline 变量
- en: 'Another interesting pseudo-environment variable is cmdcmdline, or *command
    command line*. It looks redundant, but it’s the command line command that originally
    started the current execution. On Windows computers, the *.bat* extension is associated
    with the Windows *cmd.exe* program by default, and when you open a bat file, this
    program executes it. To demonstrate, assume that the *DateTime.bat* bat file contains
    this command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的伪环境变量是cmdcmdline，或者*命令行命令*。它看起来很冗余，但它实际上是最初启动当前执行的命令行命令。在Windows计算机上，*.bat*扩展名默认与Windows的*cmd.exe*程序关联，当你打开一个bat文件时，这个程序会执行它。为了演示，假设*DateTime.bat*文件包含以下命令：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Executing the bat file might write this to the console:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行bat文件时可能会将这些内容写入控制台：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When you open or double-click a bat file, behind the scenes Windows is calling
    the *cmd.exe* program with the /C option and the bat file as its argument. If
    this bat file calls another bat file, the value of cmdcmdline won’t change. It’s
    consistently the command that started the high-level process.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开或双击一个bat文件时，Windows在后台会调用*cmd.exe*程序，并传入/C选项和bat文件作为其参数。如果这个bat文件调用了另一个bat文件，cmdcmdline的值不会改变。它始终是启动高级进程的命令。
- en: You can parse this variable to get some useful information. Even from a called
    bat file, you can retrieve the original parameter list. If you have redirected
    stdout to a trace file, the path and name of the trace file are at the end of
    the variable’s value, ready to be extracted. A bat file might be designed to run
    in two different modes, stand-alone or invoked by another bat file, with slightly
    different logic needed in each mode. To intelligently determine the mode, compare
    the contents of this variable to the %0 hidden parameter. If you find the name
    of the same bat file in both fields, it’s the high-level bat file and, therefore,
    stand-alone. If not, it must be a called bat file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以解析这个变量来获取一些有用的信息。即使从被调用的bat文件中，你也可以检索到原始的参数列表。如果你已经将stdout重定向到跟踪文件，跟踪文件的路径和名称就位于变量值的末尾，准备好被提取。一个bat文件可能被设计成可以在两种不同模式下运行，独立运行或被另一个bat文件调用，每种模式下需要略有不同的逻辑。为了智能地确定模式，可以将这个变量的内容与%0隐藏参数进行比较。如果你发现这两个字段中都包含同一个bat文件的名称，那么它就是高级bat文件，因此是独立的。如果没有，那么它一定是被调用的bat文件。
- en: System Variables
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统变量
- en: Another class of pseudo-environment variables informs you about the machine
    where a bat file executes. They are called *system variables*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类伪环境变量告诉你bat文件执行所在的机器信息。它们被称为*系统变量*。
- en: A sampling of these system variables includes USERNAME, USERPROFILE, PROCESS_ARCHITECTURE,
    NUMBER_OF_PROCESSORS, and others that’ll be meaningful to anyone familiar with
    the workings of a Windows computer. The variable ProgramFiles resolves to the
    root directory where Microsoft has installed its 64-bit program files, and ProgramFiles(x86)
    does the same for its 32-bit counterpart.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些系统变量的一个示例包括USERNAME、USERPROFILE、PROCESS_ARCHITECTURE、NUMBER_OF_PROCESSORS等，这些对任何熟悉Windows计算机工作原理的人来说都有意义。变量ProgramFiles解析为Microsoft安装其64位程序文件的根目录，而ProgramFiles(x86)则对其32位版本做同样的事。
- en: After all of these verbosely named variables, it might seem odd, but OS is a
    severe abbreviation of *operating system*. The directory for holding *temporary*
    files is special enough to warrant two system variables, TEMP and TMP, while you
    can reference the root *Windows directory* via windir.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些冗长命名的变量之后，可能会显得有些奇怪，但OS是*操作系统*的一个简化缩写。用于存储*临时*文件的目录足够特殊，值得拥有两个系统变量TEMP和TMP，而你可以通过windir引用根*Windows目录*。
- en: The USERDOMAIN variable is very handy when your bat file can run in different
    domains, perhaps even different physical locations. Each domain likely has differing
    infrastructure, such as pathing for certain resources, and this one variable is
    the key to making the code intelligent enough to run in those multiple locations.
    Another system variable that I’ve used often is COMPUTERNAME. If a process can
    be launched on any one of dozens of servers, you can use this variable to easily
    determine exactly where the bat file is being executed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: USERDOMAIN变量在你的bat文件可以在不同域中运行时非常有用，甚至可能在不同的物理位置。每个域可能有不同的基础设施，例如某些资源的路径，而这个变量是使代码足够智能以便在多个位置运行的关键。我常用的另一个系统变量是COMPUTERNAME。如果一个进程可以在几十台服务器中的任何一台上启动，你可以使用这个变量轻松确定bat文件在哪里被执行。
- en: '> NOTE'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '> 注意'
- en: '*Despite appearances, I’m not being arbitrary with the capitalization of the
    system variable names in this section. You’re probably aware that all Batch variables
    are case-insensitive and that I typically use camel case, but I show each pseudo-environment
    variable as Microsoft presents them—that is, what would be displayed by running
    a set command with no arguments at the command prompt to avoid any confusion.
    Some are entirely uppercase, some entirely lowercase, some are camel case, some
    are even snake case (words separated by underscores), and a couple even have parentheses
    in the variable name. It’s truly a nightmare for anyone yearning for consistency.*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管看起来可能不一致，但我在本节中对系统变量名称的大小写并不是随意的。你可能知道所有批处理变量都是不区分大小写的，而我通常使用驼峰式命名，但我展示每个伪环境变量的方式是按照微软的呈现方式——即，通过在命令提示符下运行没有参数的
    set 命令时所显示的内容，以避免任何混淆。有些完全大写，有些完全小写，有些是驼峰式命名，有些甚至是蛇形命名（用下划线分隔的单词），还有一些甚至在变量名中包含括号。这对于任何渴望一致性的人来说，简直是噩梦。*'
- en: Explore further on your own. Pull up the command prompt and enter the three-byte
    command, set, to see a list of all the variables set on your machine. All of them
    are available at the onset of any bat file’s execution on that particular computer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步探索。打开命令提示符并输入三字节命令 set，查看你计算机上设置的所有变量。所有这些变量在该计算机上运行任何 bat 文件时都会可用。
- en: Bat Files vs. cmd Files
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bat 文件与 cmd 文件
- en: In [Chapter 1](chapter1.xhtml), I introduced bat files and cmd files. At the
    time, I mentioned that the only significant difference from a coder’s perspective
    concerned how and when the interpreter sets the return code. Here I’ll detail
    those differences.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 1 章](chapter1.xhtml)中，我介绍了 bat 文件和 cmd 文件。当时，我提到从编码者的角度来看，唯一显著的区别在于解释器设置返回码的方式和时机。这里我将详细说明这些区别。
- en: 'We’ve discussed three commands that set errorlevel to a nonzero value when
    the command fails to execute properly: set, path, and prompt. Actually, most commands
    do this, but these differ in that when the command executes successfully, they
    don’t set errorlevel to 0. The upshot is that you can’t trust the value of errorlevel
    after you execute one of these commands.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过三个命令，当命令执行失败时，会将 errorlevel 设置为非零值：set、path 和 prompt。实际上，大多数命令都会这样做，但它们的不同之处在于，当命令执行成功时，它们不会将
    errorlevel 设置为 0。最终的结果是，执行这些命令后，你不能信任 errorlevel 的值。
- en: In a cmd file, however, executing these commands successfully always sets errorlevel
    to 0, and when they fail, they always set errorlevel to a nonzero value. (I said
    that this was *the* biggest difference. I didn’t say it was a *big* difference.)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 cmd 文件中，成功执行这些命令时，errorlevel 总是设置为 0，而当命令执行失败时，errorlevel 总是设置为非零值。（我说这是*最大的*区别。我并没有说这是*很大的*区别。）
- en: Most coders, including myself, rarely interrogate the return code for these
    commands. Even if you pass a nonexistent directory to the path command, it won’t
    fail; it fails only when it can’t reset the variable with a valid path for some
    reason, and I’ve never seen that happen. Likewise, the prompt command accepts
    pretty much anything as the prompt variable, and I’ve never seen it fail either.
    Setting a simple variable with the set command is also difficult to get wrong.
    The one possible exception is when using set /A to do some arithmetic. For instance,
    a missing operand or division by zero generates nonzero values of errorlevel.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编码者，包括我自己，很少检查这些命令的返回码。即使你将一个不存在的目录传给 path 命令，它也不会失败；只有在某些原因导致它无法用有效路径重置变量时才会失败，而我从未见过这种情况。同样，prompt
    命令几乎接受任何东西作为提示变量，我也从未见过它失败。使用 set 命令设置简单变量也很难出错。唯一可能的例外是使用 set /A 做一些算术运算时。例如，缺少操作数或除以零会生成非零的
    errorlevel 值。
- en: That said, if you want to interrogate errorlevel after executing one of these
    commands, there are two solutions. First, when using a bat file, in some way,
    shape, or fashion, you need to reset errorlevel to zero before executing the set,
    path, or prompt command. If the command fails, the interpreter resets errorlevel
    to a nonzero value; if it succeeds, errorlevel will still be zero. The other option
    is to use a cmd file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果你想在执行这些命令后检查 errorlevel，有两种解决方法。首先，在使用 bat 文件时，无论以何种方式，你都需要在执行 set、path
    或 prompt 命令之前，将 errorlevel 重置为零。如果命令失败，解释器会将 errorlevel 重置为非零值；如果命令成功，errorlevel
    仍然是零。另一种选择是使用 cmd 文件。
- en: There’s one hurdle to overcome with setting the return code to zero in a bat
    file. In general, the issue is how to set pseudo-environment variables. More specifically,
    errorlevel should never be set to anything with a set command, but there’s always
    a way.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 bat 文件中将返回码设置为零有一个障碍。一般来说，问题在于如何设置伪环境变量。更具体地说，errorlevel 永远不应通过 set 命令设置，但总有解决办法。
- en: Setting Pseudo-Environment Variables
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置伪环境变量
- en: You have the power to set and reset some pseudo-environment variables. You’ve
    learned that path, cd, and prompt act as both commands and variables, where the
    command resets the variable of the same name. They’re set to defaults when a bat
    file starts, but you can change the values.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你有能力设置和重置一些伪环境变量。你已经了解到，path、cd 和 prompt 既可以作为命令，也可以作为变量，命令会重置同名的变量。它们在 bat
    文件启动时会设置为默认值，但你可以更改这些值。
- en: 'Other pseudo-environment variables, such as windir, are already set when a
    bat file starts, and it would be foolish to reset them. The interpreter sets and
    resets still other such variables during a bat file’s execution, perhaps many
    times. For instance, most commands reset errorlevel; the time variable takes on
    a new value every 100th of a second, and if the bat file is running at midnight,
    date will change as well. You should never set those variables. Notice that I
    didn’t write that you *cannot* set these variables. There’s nothing to stop you
    from executing this command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其他伪环境变量，如 windir，在 bat 文件启动时已经设置，重置它们是愚蠢的行为。解释器在 bat 文件执行过程中会设置并重置其他这样的变量，可能多次。例如，大多数命令会重置
    errorlevel；time 变量每 1/100 秒就会获得一个新值，如果 bat 文件在午夜运行，date 也会发生变化。你绝不应该设置这些变量。请注意，我没有写出你*不能*设置这些变量。没有什么能阻止你执行这个命令：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There’s no compiler to prevent this hubris. The interpreter doesn’t abort and
    crash the execution. It essentially says, “So you want to set errorlevel now?
    This was my variable, but if you want it, fine, it’s yours now. But I’ll have
    nothing more to do with it.” I probably personify the interpreter more than I
    should, but it can be so very passive-aggressive.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 没有编译器来阻止这种傲慢行为。解释器不会中止并崩溃执行，它本质上说：“你现在想设置 errorlevel 吗？这是我的变量，但如果你想要它，没问题，它现在是你的了。不过，我再也不管它了。”我可能把解释器拟人化得太过了，但它有时真的显得非常消极攻击性。
- en: This simple yet ill-advised set command transforms the variable into a simple
    user variable and removes it from the domain of the pseudo-environment variables.
    Subsequent commands will succeed or fail, commands that would normally generate
    a return code, but since errorlevel is no longer a pseudo-environment variable,
    it’ll remain as is, unchanged from its erroneously assigned value, until the run
    stream ends or another ill-advised set command erroneously resets it again.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单但不明智的 set 命令将变量转换为一个简单的用户变量，并将其从伪环境变量的范畴中移除。随后执行的命令将会成功或失败，这些命令通常会生成返回码，但由于
    errorlevel 不再是伪环境变量，它将保持原样，不会从其错误分配的值中改变，直到运行流结束或另一个不明智的 set 命令再次错误地重置它。
- en: 'Some of the pseudo-environment variables that should never be set with a set
    command are errorlevel, date, time, cmdcmdline, and random. When in doubt, it’s
    best to assume that any pseudo-environment variable shouldn’t be reset. It wouldn’t
    make sense to reset most of these variables, but there’s just one that you might
    want to reset: errorlevel. In the prior section, I detail just such a scenario.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一些永远不应通过 set 命令设置的伪环境变量包括 errorlevel、date、time、cmdcmdline 和 random。如果有疑问，最好假设任何伪环境变量都不应该被重置。重置这些变量大多数时候没有意义，但有一个你可能希望重置：errorlevel。在上一节中，我详细描述了这种场景。
- en: 'The following command resets errorlevel to 0 without even mentioning errorlevel:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令在没有提及 errorlevel 的情况下将 errorlevel 重置为 0：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The cmd command opens a new command shell, and the /C option tells the interpreter
    to execute the command that comes after it and then terminate the new command
    shell when it’s through. In this example, it executes a simple exit command returning
    0. The result is that it sets errorlevel to 0—without a set command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: cmd 命令打开一个新的命令行窗口，/C 选项告诉解释器执行其后的命令，并在执行完毕后终止新命令行窗口。在这个示例中，它执行一个简单的退出命令，返回 0。结果是，它将
    errorlevel 设置为 0——无需使用 set 命令。
- en: If this looks oddly familiar, that’s because I mentioned the *cmd.exe* program
    earlier in this chapter. You can invoke the same program, which also happens to
    be the interpreter, with the cmd command to execute a bat file or another command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这看起来有点熟悉，那是因为我在本章前面提到过 *cmd.exe* 程序。你可以使用 cmd 命令调用这个程序，它也是解释器，从而执行 bat 文件或其他命令。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Truly understanding pseudo-environment variables will give you more tools, allowing
    you to complete more tasks. I didn’t provide an exhaustive list, but I touched
    on the important ones. You learned how to manipulate the prompt, how to generate
    random numbers, and about the dangers of erroneously setting certain pseudo-environment
    variables. I also discussed the errorlevel pseudo-environment variable in two
    contexts. You can reset it to any number, but not how you probably imagined, and
    it behaves a little differently in bat files compared to cmd files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 真正理解伪环境变量将为你提供更多工具，让你完成更多任务。我没有提供一个详尽的列表，但我提到了重要的几个。你已经学会了如何操作提示符，如何生成随机数，以及错误设置某些伪环境变量的危险。我还在两种情况下讨论了
    errorlevel 伪环境变量。你可以将它重置为任何数字，但并不是你可能想象的那样，并且它在 bat 文件中和 cmd 文件中的表现有所不同。
- en: In the next chapter, you’ll learn how to create and format reports in Batch
    using the date and time pseudo-environment variables.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用日期和时间伪环境变量在批处理文件中创建和格式化报告。
