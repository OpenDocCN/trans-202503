["```\nwhile <boolean-expression> do <statements>\n```", "```\nwhile i < 10 do i := i - 1;\n```", "```\ny := m * x + b;\n```", "```\n] 10 FOR X = 1 TO 10\n] 20 PRINT X, X*X\n] 30 NEXT X\n```", "```\n]RUN\n1     1\n2     4\n3     9\n4     16\n5     25\n6     36\n7     49\n8     64\n9     81\n10    100\n```", "```\n0801: link: 080D \n      0A 00 -- line number 10, uint16, lo/hi\n      81 token \"FOR\"\n      58 ASCII character, \"X\"\n      D0 token \"=\"\n      31 ASCII character, \"1\"\n      C1 token \"TO\"\n      31 30 ASCII characters, \"10\"\n      00 end of line\n080D: link: 0818 \n      14 00 -- line number 20, uint16, lo/hi\n      BA token \"PRINT\"\n      58 ASCII character, \"X\"\n      2C ASCII character, \",\"\n      58 ASCII character, \"X\"\n      CA token \"*\"\n      58 ASCII character, \"X\"\n      00 end of line\n0818: link: 081F \n      1E 00 -- line number 30, uint16, lo/hi 82 token \"NEXT\"\n      58 ASCII character, \"X\"\n      00 end of line\n081F: 00 00 -- end of program\n```", "```\np10f200\nIntRC_OSC\nWDT_OFF\nCP_OFF\nMCLRE_OFF\n\nequ[ count 0x12 ]\n\n[ main\n  asm{ movwf OSCCAL }     ;  store oscillator calibration value\n  OSCCAL/0                ;  disable INTOSC/4 on GPIO.2\n  0 GPIO!                 ;  clear GPIO\n  0b00001000 R0->W tris   ;  set GPIO directions\n\n  ;  Clear TMR0 and reset prescaler\n  0 TMR0!  clrwdt 0b11000111 R0->W option\n\n  ;  Loop forever\n  {\n    ;  Wait for the timer to overflow 100 times\n    100 count! {\n        TMR0@ 0if\n          count--  count@ ?0break\n        then\n    }\n\n    ;  Toggle LED\n    if(GPIO^2) GPIO/2 else GPIO^2 then\n  }\n]\n```", "```\n    processor  10F200\n    include    <P10F200.inc>\n    __CONFIG   _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF\n\nGP0    equ    d'0'\nGP1    equ    d'1' GP2    equ    d'2'\nGP3    equ    d'3'\nR0     equ    d'16'\nR1     equ    d'17'\ncount  equ    d'18'\n\nmain\n    movwf   OSCCAL \n    bcf     OSCCAL,0\n    movlw   d'0'\n    movwf   GPIO\n    movlw   d'8'\n    movwf   R0\n    movf    R0,w\n    tris    GPIO\n    movlw   d'0'\n    movwf   TMR0\n    clrwdt    \n    movlw   d'199'\n    movwf   R0\n    movf    R0,w\n    option    \nA_0000\n    movlw   d'100'\n    movwf   d'18'\nA_0002\n    movf    TMR0,w\n    movwf   R0\n    movf    R0,f\n    btfss   STATUS,Z\n    goto    A_0004\n    decf    d'18',f\n    movf    d'18',w\n    movwf   R0\n    movf    R0,f\n    btfss   STATUS,Z\n    goto    A_0006\n    goto    A_0003\nA_0006\nA_0004\n    goto    A_0002\nA_0003\n    btfss   GPIO,2\n    goto    A_0007\n    bcf     GPIO,2\n    goto    A_0008 A_0007\n    bsf     GPIO,2\nA_0008\n    goto    A_0000\nA_0001\n    sleep    \n    END\n```", "```\n:020000040000FA\n:1000000025000504000C2600080C30001002060034\n:10001000000C21000400C70C300010020200640C28\n:10002000320001023000300243071D0AF2001202C2\n:100030003000300243071D0A1E0A110A4607220A31\n:0A0040004604230A46050F0A0300D8\n:021FFE00EB0FE7\n:00000001FF\n```", "```\ndef fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n```", "```\nimport dis; dis.dis(fact)\n```", "```\n2        0 LOAD_FAST             0 (n)\n         2 LOAD_CONST            1 (0)\n         4 COMPARE_OP            2 (==)\n         6 POP_JUMP_IF_FALSE    12\n\n3        8 LOAD_CONST            2 (1)\n        10 RETURN_VALUE\n\n5  >>   12 LOAD_FAST             0 (n)\n        14 LOAD_GLOBAL           0 (fact)\n        16 LOAD_FAST             0 (n)\n        18 LOAD_CONST            2 (1)\n        20 BINARY_SUBTRACT\n        22 CALL_FUNCTION         1\n        24 BINARY_MULTIPLY\n        26 RETURN_VALUE\n        28 LOAD_CONST            0 (None)\n        30 RETURN_VALUE\n```", "```\ntype\n    PhoneNumberType = record\n        area, exchange, number : Integer;\n    end;\n\n    BirthdayType = record\n        month, day, year : Integer;\n    end;\n\n    PersonType = record\n        first, last : string;\n        address : string;\n        phone : PhoneNumberType;\n        bday : BirthdayType;\n     end;\n```", "```\nvar  person : PersonType;\n```", "```\nperson.first := 'Melvin';\nperson.bday.year := 1953;\n```", "```\n> sudo apt-get install fp-compiler-3.0.4\n```", "```\ntypedef char string[32];\n\ntypedef struct {\n    int area, exchange, number; } phone_number_t;\n\ntypedef struct {\n    int month, day, year;\n} birthday_t;\n\ntypedef struct {\n    string first, last;\n    string address;\n    phone_number_t phone;\n    birthday_t bday;\n} person_t;\n```", "```\ntypedef union {\n    float f;\n    unsigned int d;\n} fp_t;\n```", "```\nfp_t fp;\nfp.f = 3.14159265;\nprintf(\"%0.8f in hex is %08d\\n\", fp.f, fp.d);\n```", "```\nvar A : array[0..7, 0..7] of integer;\n```", "```\ndef a():\n    def b():\n        def c():\n            def d():\n                x = 20\n              ➊ print('d()  says', x)\n          ➋ print('c()  says', x)\n            d()\n      ➌ print('b()  says', x)\n        c()\n    x = 15\n    print('a()  says', x)\n    b()\n\nx = 10\nprint('main says', x)\na()\n```", "```\nmain says 10\na()  says 15\nb()  says 15\nc()  says 15\nd()  says 20\n```", "```\nif <condition> then <statements1> [else <statements2>]\n```", "```\nif x < 2:                      if x < 2:\n    print(\"less\")                  print(\"less\") \nelse:                    =>    elif x < 12:\n    if x < 12:                     print(\"more\")\n        print(\"more\")\n```", "```\nswitch (x) {\n    case 1:\n        printf(\"one\\n\");\n        break;\n    case 3:  case 5:  case 7:\n        printf(\"prime\\n\");\n        break;\n    case 2:  case 4:  case 6:\n    case 8:  case 0:\n        printf(\"even\\n\");\n        break;\n    default: break;\n};\n```", "```\ncase x of\n  1 : writeln('one');\n  3,5,7 : writeln('prime');\n  2,4,6,8,0 : writeln('even');\nend;\n```", "```\n(cond\n  ((= x 1) (display \"one\"))\n  ((member x '(3 5 7)) (display \"prime\"))\n  ((member x '(2 4 6 8 0)) (display \"even\")))\n```", "```\n   MODULE loops;\n\n   FROM StrIO IMPORT WriteString, WriteLn;\n   FROM NumberIO IMPORT WriteCard;\n\n   VAR\n    ➊ i : CARDINAL;\n\n   BEGIN\n     WriteString(\"Top tested:\");  WriteLn;\n     WriteString(\"  index:\");\n  ➋ i := 0;\n     WHILE (i < 6) DO\n       WriteCard(i,3); i := i + 1;\n     END;\n     WriteLn;\n\n     WriteString(\"Bottom tested:\");  WriteLn;\n     WriteString(\"  index:\");\n  ➌ i := 0;\n     REPEAT\n       WriteCard(i,3);\n       i := i + 1;\n     UNTIL i = 6;\n     WriteLn;\n\n     WriteString(\"Loop:\");  WriteLn;\n     WriteString(\"  index:\");\n➍ i := 0;\n     LOOP\n       WriteCard(i,3);\n       i := i + 1;\n       IF i = 6 THEN \n         EXIT;\n       END;\n     END;\n     WriteLn;\n\n     WriteString(\"Counted:\");  WriteLn;\n     WriteString(\"  index:\");\n➎ FOR i := 0 TO 5 DO\n       WriteCard(i,3);\n     END;\n     WriteLn;\n   END loops.\n```", "```\n#include <iostream>\nusing namespace std;\n\ndouble CtoF(int C) {\n    return (9*C)/5 + 32; \n}\ndouble CtoF(double C) {\n    return (9.0/5.0)*C + 32.0;\n}\n\nint main() {\n    cout << CtoF(37) << endl;\n    cout << CtoF(37.0) << endl;\n}\n```", "```\n98\n98.6\n```", "```\ndef factory(x):\n    def mult(y):\n        return x*y ➊ return mult\n\n➋ mult2 = factory(2)\n   mult11 = factory(11)\n\n   print(mult2(4))\n   print(mult11(3))\n```", "```\n➊ def mydecorator(f):\n    def decorate(*args, **kwargs):\n        return \"Per your request, the result is \" + str(f(*args,**kwargs))\n    return decorate\n\n➋ @mydecorator\n   def afunc(x):\n       return x**2 + 3*x + 4\n\n➌ def bfunc(x):\n       return x**2 + 3*x + 4\n\n   dfunc = mydecorator(bfunc)\n```", "```\n>>> from decorator import * \n>>> print(afunc(23.4))\nPer your request, the result is 621.76\n>>> print(dfunc(23.4))\nPer your request, the result is 621.76\n```", "```\nvar\n  A : array[0..99,0..511,0..511] of real;\n  i,j,k : integer;\nbegin\n  (* Load the array with the images *)\n\n  for i:= 0 to 99 do\n    for j:= 0 to 511 do\n      for k:= 0 to 511 do\n        A[i,j,k] := A[i,j,k] / 255.0;\n```", "```\n> sudo apt-get install gnudatalanguage\n```", "```\n➊ pro display, a, b, f\n       compile_opt idl2, logical_predicate\n       tvscl, a, 0\n       tvscl, b, 1\n       write_png, 'images/'+f, tvrd()\n   end\n\n   pro arraydemo\n       compile_opt idl2, logical_predicate\n       window, 0, xs=1024, ys=512\n\n    ➋ i0 = read_png('images/barbara.png')\n       i1 = read_png('images/boat.png') i2 = read_png('images/cameraman.png')\n       i3 = read_png('images/zelda.png')\n\n    ➌ display, i2, 255-i2, 'cinvert.png'\n\n    ➍ m03 = bytscl(1.0*i0 + i3)\n       m12 = bytscl(1.0*i1 + 2*i2)\n       write_png, 'images/bzelda.png', m03 \n       write_png, 'images/cboat.png', m12\n\n    ➎ t = i3/255.0\n       m = t^3 - t\n       display, i3, m, 'zelda_ghost.png'\n\n    ➏ k = [[0,1,0],[-1,0,1],[0,-1,0]]\n    ➐ im = convol(i1, k)\n       display, i1, im, 'boat_edges.png'\n       k = [[0,-1,0],[-1,5,-1],[0,-1,0]]\n       im = convol(i0, k)\n       display, i0, im, 'barbara_sharp.png'\n    ➑ k = 5*(randomu(seed,3,3)-0.5)\n       im = convol(1.0*i2, k)\n       display, i2, im, 'camera_random.png'\n       print, k\n   end\n```", "```\n> gdl -quiet\nGDL> arraydemo\n```"]