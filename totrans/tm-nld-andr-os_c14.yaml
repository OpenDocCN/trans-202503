- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UI Toolkit
  prefs: []
  type: TYPE_NORMAL
- en: '![g14001](image_fi/502680c14/g14001.png)'
  prefs: []
  type: TYPE_IMG
- en: The UI toolkit provides most of the visual elements on the screen. Buttons,
    text, animations, and the graphics that draw all of those things are all part
    of the UI toolkit on Android.
  prefs: []
  type: TYPE_NORMAL
- en: In late 2005, there was no UI toolkit (nor was there much of anything else,
    either). There was low-level graphics functionality that allowed some things to
    be drawn on the screen using the Skia library. And there were two conflicting
    ideas for how to build a UI toolkit on top of that graphics engine.
  prefs: []
  type: TYPE_NORMAL
- en: On one side, Mike Reed’s Skia team had a working system which used XML to describe
    the UI and JavaScript code to provide the programming logic.
  prefs: []
  type: TYPE_NORMAL
- en: On the other side, the framework team preferred a more code-centric approach.
  prefs: []
  type: TYPE_NORMAL
- en: This decision, like so many in Android, happened through sheer effort. Andy
    Rubin had recently decided that Android would use Java as the main programming
    language. Joe Onorato decided it was time to dive in and implement the UI layer
    in Java. “It was basically a furious ‘Let’s get something done’ time. Took about
    a day, 24-hour marathon.^([1](#c14-footnote-1)) I had Views [UI elements] up on
    screen.”
  prefs: []
  type: TYPE_NORMAL
- en: Mathias Agopian said of Joe, “He didn’t tell anybody. One morning he showed
    up and said, ‘Problem solved, it’s in Java. Now we don’t have to talk about it
    anymore because it’s there.’”
  prefs: []
  type: TYPE_NORMAL
- en: 'Mike Reed remembered the decision to go with Joe’s implementation: “Joe came
    in with very clear ideas. Especially because we were remote [the Skia team was
    in North Carolina], we just took a step back and let it work itself out.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Joe demoed his work to Andy, which didn’t go as well as he’d hoped. “The first
    time I showed it to Rubin, he was less than impressed. The first thing I did was
    draw a red X on the screen from the UI. Apparently, that was the thing that something
    would draw on Danger when it kernel-panicked.^([2](#c14-footnote-2)) I showed
    him what I thought was a major achievement: ‘Look, I got a View hierarchy done!’.
    But to him, it looked like the phone just crashed. He’s like, ‘Wow, you made the
    kernel panic.’”'
  prefs: []
  type: TYPE_NORMAL
- en: But Joe’s work was significant. It allowed developers on the team to start writing
    other pieces of the system that needed UI functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, many parts of the system were in flux during early development, and
    the UI toolkit was one of them. The system that Joe built was multi-threaded.^([3](#c14-footnote-3))
    This approach is unusual in UI toolkits, as it requires very careful coding to
    correctly handle requests coming in willy-nilly without regard to threading concerns.
  prefs: []
  type: TYPE_NORMAL
- en: In March of 2006, three months after Joe wrote the initial View system, Mike
    Cleron joined Android. He saw complexities mounting in the growing code base that
    depended on Joe’s multi-threaded UI toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Mike Cleron and the UI Toolkit Rewrite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mike Cleron never pictured himself going into computer science until he was
    in college. “I thought I was going to be an Econ major until I took Econ 1.” His
    computer science classes worked out better: “I really enjoyed my freshman year
    courses where we learned not about programming, but about data structures and
    algorithms. I thought binary tree traversal was the coolest thing ever. Big time
    nerd.'
  prefs: []
  type: TYPE_NORMAL
- en: “It was the only thing I could possibly have gotten a degree in, because it
    was the only thing I could do still reasonably competently when the rest of my
    brain was shut down from exhaustion. I took a bunch of political science courses,
    close to being a major, but at one o’clock in the morning, 250 pages from finishing
    a 500 page reading assignment, I’m asleep. But when I’m 16 hours into a 16 hour
    programming assignment, my reptile brain is still letting me program in Emacs
    on my VT100.^([4](#c14-footnote-4)) I thought, ‘I’d better major in this because
    I can graduate.’”
  prefs: []
  type: TYPE_NORMAL
- en: He continued on in computer science, eventually getting his master’s degree,
    and stayed on at Stanford as a lecturer, developing some of the curriculum for
    undergraduates to make their on-ramp to computer science a little less severe
    than his had been (Mike’s was the first year that Stanford even offered a computer
    science degree). “My mission as a lecturer there was to try to make the people
    who followed in my footsteps have less of a difficult time than I did. They [Stanford]
    had basically taken all their graduate level courses, subtracted a hundred, and
    said ‘Now you have an undergraduate course.’ They all assumed that you’d already
    had a computer science education and now you just needed to know a little more
    about compilers or automata.”
  prefs: []
  type: TYPE_NORMAL
- en: Mike worked at Apple after he left academia, then moved to WebTV in 1996, where
    he worked with many future Android engineers. WebTV was acquired by Microsoft
    in 1997, and Mike continued working there for several more years.
  prefs: []
  type: TYPE_NORMAL
- en: In early 2006, Mike’s manager at Microsoft, Steve Horowitz, left to join the
    Android team at Google. “It was really Steve leaving that made me think it was
    time for me to go. I wasn’t having that much fun at Microsoft anymore, and Steve
    leaving wasn’t going to make it better.”
  prefs: []
  type: TYPE_NORMAL
- en: Steve said, “I remember having the talk with Mike Cleron, telling him before
    I had actually come to Google. I said, ‘Mike, I have to let you know that I’ve
    just accepted an offer to go lead engineering on the Android acquisition at Google.’
    Before I could finish the sentence, he was like ‘Here’s my resume!’ Mike was my
    first hire, and came on board fairly soon after I did.”
  prefs: []
  type: TYPE_NORMAL
- en: Mike began life on Android by working on the UI toolkit, along with a host of
    other things, including the launcher^([5](#c14-footnote-5)) and the system UI.
    He eventually became the manager of what was called the “framework team,” which
    comprised the UI toolkit, the framework team,^([6](#c14-footnote-6)) and various
    parts of the system UI, like the lock screen, launcher, and the notification system.^([7](#c14-footnote-7))
  prefs: []
  type: TYPE_NORMAL
- en: One of Mike’s first projects after joining Android in March of 2006 was to rewrite
    the UI toolkit code that Joe Onorato had written. There was growing disagreement
    over the toolkit’s architecture; some people on the team felt that the multi-threaded
    nature of the system was causing undue complexity in both that code and in the
    apps that used it.
  prefs: []
  type: TYPE_NORMAL
- en: Mike figured there were three possible approaches for a UI toolkit. “The best
    outcome would be thread-safe, easy to use multi-threading. Second was single-threaded
    but at least you could wrap your head around it. Worst was multi-threaded but
    buggy, because you couldn’t reason about it. We were headed for the last thing.”
  prefs: []
  type: TYPE_NORMAL
- en: Mathias Agopian talked about writing code for the multi-threaded system. “When
    you wrote a View, you couldn’t write it the traditional way, with member variables.^([8](#c14-footnote-8))
    That led to a lot of multi-threaded bugs because app developers were not used
    to it. In particular, Chris DeSalvo^([9](#c14-footnote-9)) was a fierce opponent
    to this multi-threaded thing. Joe and Chris were going at it, fighting all the
    time, Chris saying it was crap, didn’t work. Mike was trying to weigh in, see
    what could be done.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Steve Horowitz got involved, as the director of the engineering team: “It was
    down to me deciding which one are we going to pick, because they could not convince
    one another. Honestly, I think we would’ve been okay with either direction, but
    I had to make a call.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mathias continued: “Joe literally dropped it: ‘Do whatever you want. It’s not
    mine anymore.’”'
  prefs: []
  type: TYPE_NORMAL
- en: Mike then rewrote the UI toolkit to its current single-threaded form. “That’s
    the nastiest CL^([10](#c14-footnote-10)) that I worked on, trying to make all
    that stuff work in a different way.” Mike’s code formed the basis of the UI toolkit
    that the Android system had from that moment on.^([11](#c14-footnote-11))
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, Mike wrote, or at least inherited and enhanced, other fundamental
    pieces of Android’s UI toolkit, like View (the basic building block of every UI
    class), ViewGroup (the parent and container of views), ListView (a list of data
    that could be scrolled and flung by the user), and various Layout classes (ViewGroups
    that define how their children are sized and positioned).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c14/f14001.png)'
  prefs: []
  type: TYPE_IMG
- en: Mike Cleron, presenting at the first internal tech talk about Android at Google
    in August of 2007 (picture courtesy Brian Swetland)
  prefs: []
  type: TYPE_NORMAL
- en: But Android’s UI toolkit is more than just views and layout classes. For example,
    the UI toolkit is responsible for handling text.
  prefs: []
  type: TYPE_NORMAL
- en: Eric Fischer and TextView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mike Cleron said that when he arrived at Android, “Eric Fischer, as far as I
    could tell, just found TextView in a stone cavern in a mountain somewhere. There
    was TextView in finished form. I never saw anyone creating TextView. It’s just
    always been there.”
  prefs: []
  type: TYPE_NORMAL
- en: A few years earlier, Eric had worked with Mike Fleming at Eazel, a startup founded
    by some members of the early Macintosh team. Both Eric and Mike went to Danger
    when Eazel fell apart in 2001.
  prefs: []
  type: TYPE_NORMAL
- en: One of the appeals of small companies like Danger is the ability to work on
    many different kinds of projects, compared to the opportunities available on a
    team that supports just part of a larger product. While at Danger, Eric worked
    on everything from text and internationalization to the build system to performance
    optimization. Working at Danger also gave Eric, years later, an appreciation for
    the faster development process at Android. “Android offered the promise of much
    faster and more flexible development by giving Google, and not the carriers, final
    responsibility for what went into the software.”
  prefs: []
  type: TYPE_NORMAL
- en: Eric joined the Android team at Google in November of 2005\. “My very first
    piece of code for Android was a C++ text storage class. For the first few weeks
    I was there, we thought we were going to write the user interface elements as
    C++ classes with JavaScript bindings.” A few weeks later, Andy made the call to
    standardize on Java for Android.
  prefs: []
  type: TYPE_NORMAL
- en: “Once we decided to use Java instead, one of the first steps toward getting
    a working system was writing a new implementation of the core classes of the Java
    standard library, and I did some of that. All of that code except for the time
    zone handling was, I believe, replaced by the Apache Commons implementation before
    the first public release.
  prefs: []
  type: TYPE_NORMAL
- en: “I touched some other parts of the software, but most of my work went into the
    text display and editing system. The earliest development hardware was candybar^([12](#c14-footnote-12))
    phones with only a 12-key numeric keypad, which is why there is a `MultiTapKeyListener`
    class for that style of agonizingly slow text entry. Fortunately, we quickly moved
    on to the Sooner development hardware with a tiny QWERTY keyboard instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c14/f14002.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left is the early candybar phone, nicknamed Tornado, which the team used
    until the later Sooner device. The phone on the right is an HTC Excalibur, which
    was the basis for Sooner after some industrial design modifications (and replacing
    the Windows Mobile OS with Android). (Picture courtesy Eric Fischer.)
  prefs: []
  type: TYPE_NORMAL
- en: “I made sure to handle bidirectional text layout from the beginning, which was
    sufficient for Hebrew, but not for Arabic.”^([13](#c14-footnote-13))
  prefs: []
  type: TYPE_NORMAL
- en: Software engineers tend to get emotionally attached to their code, and that
    was the case for Eric, who displayed his passion in the license plate for his
    car. “I had the California EBCDIC personalized license plate, for the 1960s IBM
    character code that competed with ASCII. Someone else in building 44 had UNICODE.”^([14](#c14-footnote-14))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c14/f14003.png)'
  prefs: []
  type: TYPE_IMG
- en: UNICODE battles EBCDIC as text standards in the Google parking lot (Eric Fischer’s
    car is the one with EBCDIC). (Picture courtesy Eric Fischer.)
  prefs: []
  type: TYPE_NORMAL
- en: Text rendering (drawing the actual pixels for the text that is seen on the screen)
    was handled at a different layer, by Skia, discussed in Chapter 11 (“Graphics”).
    Skia rendered font characters into bitmaps (images) using an open source library
    called FreeType.^([15](#c14-footnote-15))
  prefs: []
  type: TYPE_NORMAL
- en: One of the pervasive problems in the early days of Android was performance;
    the limited capabilities of the hardware at that time drove many of the decisions
    about the software design and implementation. These decisions bled over into how
    the code was written for the platform and the applications. As Eric said, “All
    my attempts at generality were undermined by the urgent performance concerns of
    running fast enough to be usable on the very slow early hardware. I had to put
    in all kinds of special fast paths to avoid memory allocation and floating point
    math when laying out and drawing plain ASCII strings with no style markup and
    no transformations like ellipsizing or password-hiding.”
  prefs: []
  type: TYPE_NORMAL
- en: Eric observed an ongoing tension on the team, with disagreements on how things
    should be built. “Sometimes it felt like it shouldn’t have succeeded. It was a
    classic ‘second system effect’ where a lot of us had done something similar before
    and thought we could do it again without all the mistakes from the first time.
    Those of us coming from Danger wanted to make another user interface toolkit based
    on Java class inheritance, but get it right this time with a real operating system
    underneath and a robust service architecture on the other side of the network.
    The people coming from PalmSource wanted to do their activity lifecycle model
    and interprocess communication model again, but get it right this time. The people
    coming from Skia wanted to do QuickDraw GX again, but get it right this time.
    We were all wrong, and wrong in ways that clashed badly with each other. It took
    years of work to straighten out the consequences of all our bad early decisions
    and the interactions between them.”
  prefs: []
  type: TYPE_NORMAL
- en: Romain Guy and UI Toolkit Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More help for the budding UI toolkit came later, in 2007, in the form of an
    intern from France, Romain Guy.
  prefs: []
  type: TYPE_NORMAL
- en: Romain became a tech journalist in high school, writing articles on various
    programming languages, operating systems, and coding techniques. This freelance
    job gave him experience in, and access to, many of the popular platforms and languages
    of that era. He was introduced to operating systems like Linux, AmigaOS, and BeOS,
    and he became an expert in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Romain went to a university in France and majored in computer science. But that
    school leaned more heavily on leadership and project management skills than pure
    programming, and Romain preferred the programming part of software development.
    So he came to Silicon Valley.^([16](#c14-footnote-16))
  prefs: []
  type: TYPE_NORMAL
- en: Romain got an internship with Sun Microsystems,^([17](#c14-footnote-17)) where
    he spent a year working on Swing, the UI toolkit for the Java platform.
  prefs: []
  type: TYPE_NORMAL
- en: The following year, in April of 2007, Romain came back to the US for an internship
    at Google. He landed on the Google Books team, where he was asked to work on a
    desktop application related to Gmail. It wasn’t a topic that excited him, and
    he only lasted a week on that project. He knew people at Google like Bob Lee (who
    transferred to Android’s core libraries team around the same time), Dick Wall
    (who worked on Android developer relations), and Cédric Beust (who was writing
    the Android Gmail app). They convinced Romain to come over to the Android team,
    and convinced management that the team needed him. Cédric asked Steve Horowitz
    to pull strings, and between Steve and Andy, they made it happen.^([18](#c14-footnote-18))
    Romain transferred to the UI toolkit team, where he helped out Mike Cleron.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the summer, Romain flew back to France to pick up his degree
    and then returned to Google^([19](#c14-footnote-19)) to start a full-time job.
    He had gotten offers from both Sun and Google, but decided to join Google. “Sun
    had made me an offer that was much better than Google’s. I joined the Android
    team because I loved the vision, the reason why we were doing this. There were
    a lot of reasons for Google, but it was also the idea: it was a space that could
    use a good open source operating system. At that time, there was no such thing
    that was viable for consumers at scale.'
  prefs: []
  type: TYPE_NORMAL
- en: “Linux already had something. But to me this had a better chance because it
    was focused on a particular product. It was not a spec or just an idea of an operating
    system; it was also building the product. It was clearly a challenge, and chances
    are it would not succeed, but we had a shot at it. The best way to make it happen
    was to help.
  prefs: []
  type: TYPE_NORMAL
- en: “It was actually part of what made the job so fun in the early days. Until probably
    Gingerbread,^([20](#c14-footnote-20)) or maybe even ICS,^([21](#c14-footnote-21))
    it wasn’t clear it was successful enough to survive. Every release was not quite
    a ‘do-or-die,’ but it was ‘do-or-maybe you should be careful about what’s going
    to happen.’”
  prefs: []
  type: TYPE_NORMAL
- en: When Romain started as a full time employee, in October of 2007, the initial
    SDK was about to ship. There was still a lot of work to do on the platform to
    make it to 1.0\. One of the first things he worked on was making touch input functional,
    which had become a hard requirement for that first release.
  prefs: []
  type: TYPE_NORMAL
- en: He also spent significant time and effort making the toolkit code faster. “Mike
    asked me to improve performance of invalidating^([22](#c14-footnote-22)) and re-layout.^([23](#c14-footnote-23))
    Until then, `invalidate()`^([24](#c14-footnote-24)) was really dumb; it would
    just go up the hierarchy and mark everything invalid. If you did it again, it
    would go back up again. It was really slow. So I spent a lot of time adding all
    those dirty flags.^([25](#c14-footnote-25)) That made a huge difference.”
  prefs: []
  type: TYPE_NORMAL
- en: But to do this work, he needed a tool that didn’t exist.
  prefs: []
  type: TYPE_NORMAL
- en: There is a grand tradition on the Android team of having many small, single-purpose
    developer tools, each of which worked a bit differently than the others, and none
    of which worked together. This has changed over time, and most of these apps are
    now incorporated into the Android Studio IDE so that developers have consistent
    tools. But in the early days, the tools were written separately, one by one, by
    the developers who needed them.
  prefs: []
  type: TYPE_NORMAL
- en: For the view invalidation performance work, Romain needed a new tool. “I wrote
    ‘hierarchyviewer’ because it was really hard to know what was getting invalidated.
    So I wrote this viewer that would show me the tree of views and blink them a different
    color when they were marked dirty, when they would draw, and when there was a
    `requestLayout()`.^([26](#c14-footnote-26)) As I was making optimizations, I could
    see what was happening. It would blink less!”
  prefs: []
  type: TYPE_NORMAL
- en: Another UI performance project that Romain took on was ListView.
  prefs: []
  type: TYPE_NORMAL
- en: ListView is a container that holds (wait for it . . . ) a list of items. The
    trick with this element in particular is that it is, by its very nature, incredibly
    performance-sensitive. Its only purpose is to contain tons of data (images and
    text) and to be able to scroll through the items quickly. The key is “quickly.”
    As items are coming onto the screen, the UI toolkit has to create, size, and place
    all of these new items, which then disappear as soon as they scroll off the other
    edge of the screen. It’s a lot of effort to do all of this, and on that early
    hardware the toolkit couldn’t keep up with it, so the user experience was . .
    . not great.
  prefs: []
  type: TYPE_NORMAL
- en: When Romain inherited this widget from Mike Cleron, it was able to contain,
    render, and scroll items. But its performance was far from acceptable, so Romain
    put a huge amount of effort into optimizing it. Avoiding object and UI element
    creation was a general pattern of Android development at the time for performance
    reasons, and ListView was an easy place to see why that pattern evolved.
  prefs: []
  type: TYPE_NORMAL
- en: Launcher and Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like others on the team, Romain jumped into many other projects on Android in
    those early days (and beyond). Besides his core UI toolkit responsibilities, he
    took over the launcher application from Mike (who had started to lead the framework
    team and had other responsibilities beyond code), and also helped out on the Email^([27](#c14-footnote-27))
    app when the contractor working on it left. Fortunately, Romain had relevant experience
    from his time as a tech journalist. “I had written articles on how to implement
    the IMAP protocol, so I was not completely out of my league. But that was on top
    of everything else that we were doing . . . which was a little much.”
  prefs: []
  type: TYPE_NORMAL
- en: He also helped out with other apps. Since the platform was new, a lot of functionality
    was developed in response to application requirements. Applications needed new
    features from the platform, so they worked with the platform team to implement
    them.
  prefs: []
  type: TYPE_NORMAL
- en: One of the ongoing efforts for the apps teams at that time was performance.
    “Serving their needs was important, but also having them understand the cost of
    things. That’s why hierarchyviewer came to be, because apps were creating way
    too many views. View hierarchies were way too expensive for our devices. That
    was a way to show them, ‘You can see this monster tree that you’ve created, and
    this is very expensive for us.’ Despite all of the optimizations we had, that
    was very expensive. So it was a way to help them figure out how to optimize their
    code. That’s how I also came up with the `merge` tag, the `include` tag, and the
    `viewstub`,^([28](#c14-footnote-28)) to help them achieve what they need, but
    also reclaim some of that performance.”
  prefs: []
  type: TYPE_NORMAL
- en: Manifest Density
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After 1.0 shipped, there was still plenty of work to do to get the platform
    to the state the team originally envisioned. One of the projects that had begun
    early on but which wasn’t fully realized at 1.0 was support for different screen
    densities, which is described earlier in the Resources section of Chapter 13 (“Framework”).
    After 1.0, Romain took over the work begun earlier by Dianne and finished it off
    in time for the Eclair release,^([29](#c14-footnote-29)) in the Fall of 2009.
  prefs: []
  type: TYPE_NORMAL
- en: Screen density has a direct impact on the quality of the images on that screen;
    a screen with higher density can represent more information in the same space,
    leading to sharper, better images. Higher-density screens have resulted in higher-quality
    phone and laptop displays over the last several years. Higher-density camera sensors
    have also led to higher-quality photos, as the megapixel count of images produced
    from those sensors has soared.^([30](#c14-footnote-30))
  prefs: []
  type: TYPE_NORMAL
- en: The initial G1 device, and all other Android devices until the Droid, had a
    density of 160 pixels per inch (PPI), which meant that there were 160 distinct
    color values (vertically and horizontally) in every inch of screen real estate.
    The Droid had a density of 265 PPI. This higher density meant that more information
    could be represented, resulting in, say, smoother curved lines and text, or images
    with more detail. But developers needed a way to define their UIs to take advantage
    of these changes in density.
  prefs: []
  type: TYPE_NORMAL
- en: The system that Dianne, and then Romain, implemented allowed developers to define
    their UIs independent of the actual size of the pixels on a device, using the
    unit *dp* (*density-independent pixel*). The system would then scale these UIs
    appropriately based on the actual density of the device that the application was
    running on. This mechanism for handling screen density, along with related capabilities
    in the resource system for serving up different assets based on the density and
    the entire UI layout system for handling UI organization independent of screen
    sizes, were critical as Android matured. Android changed from a platform running
    on top of only one kind of device (the G1 and its follow-on devices at the same
    size and density) to a world full of all kinds of screen sizes and densities as
    manufacturers started to introduce vastly different formats for their customers.
  prefs: []
  type: TYPE_NORMAL
- en: Toolkit Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many pieces make up what the team calls the UI toolkit, since it’s basically
    the visual side of the entire framework. What really defined the work for the
    team at that time (Joe, Mike, Eric, Romain, and others) was coming up with the
    toolkit APIs and core functionality, and then working on performance, performance,
    and performance.^([31](#c14-footnote-31)) The UI for Android is basically everything
    that the user sees, so performance for this front line of the platform is even
    more important, because problems there are so very noticeable. So the team kept
    optimizing things . . . and to some extent, still does.
  prefs: []
  type: TYPE_NORMAL
