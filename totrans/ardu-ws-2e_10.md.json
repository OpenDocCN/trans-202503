["```\n// Listing 11-11 // Beginning of keypad configuration code\n#include <Keypad.h>\nconst byte ROWS = 4; // set display to four rows\nconst byte COLS = 4; // set display to four columns2 char keys[ROWS][COLS] = { {'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'}, {'*','0','#','D'}\n};3 byte rowPins[ROWS] = {9, 8, 7, 6}; 4 byte colPins[COLS] = {5, 4, 3, 2}; \nKeypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );5 // End of keypad configuration code\nvoid setup()\n{ Serial.begin(9600);\n} \nvoid loop(){ char key = keypad.getKey();  if (key){ Serial.print(key); }\n}\n```", "```\nswitch(xx)\n{ case 1: // do something when the value of xx is 1 break;  // finish and move on with sketch case 2: // do something when the value of xx is 2 break; case 3: // do something when the value of xx is 3 break; default: // do something if xx is not 1, 2 or 3 // default is optional\n}\n```", "```\n// Project 32 - Creating a Keypad-Controlled Lock\n// Beginning of necessary code\n#include <Keypad.h>\nconst byte ROWS = 4; // set display to four rows\nconst byte COLS = 4; // set display to four columns\nchar keys[ROWS][COLS] = { {'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'}, {'*','0','#','D'}\n};\nbyte rowPins[ROWS] = {9, 8, 7, 6}; \nbyte colPins[COLS] = {5, 4, 3, 2}; \nKeypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );\n// End of necessary code1 char PIN[6]={'1','2','3','4','5','6'}; // our secret number\nchar attempt[6]={0,0,0,0,0,0};\nint z=0;\nvoid setup(){ Serial.begin(9600);\n}\nvoid correctPIN()   // do this if the correct PIN is entered\n{ Serial.println(\"Correct PIN entered...\");\n}\nvoid incorrectPIN() // do this if an incorrect PIN is entered\n{ Serial.println(\"Incorrect PIN entered!\");\n}\nvoid checkPIN()\n{ int correct=0; 2   for (int i = 0;  i < 6 ;  i++ ) {\n// Goes step-by-step through the 6-character array. \n// If each char matches each char in the PIN, increments the \n// counter.\nif (attempt[i]==PIN[i]) { correct++; } } if (correct==6) {3     correctPIN(); }  else {4     incorrectPIN(); } for (int i=0; i<6; i++) // removes previously entered code attempt  { attempt[i]=0; }\n}\nvoid readKeypad()\n{ char key = keypad.getKey(); if (key != NO_KEY) {5     switch(key) { case '*': z=0; break; case '#': delay(100); // removes the possibility of switch bounce checkPIN(); break; default: attempt[z]=key; z++; } }\n}\nvoid loop()\n{6   readKeypad();\n}\n```"]