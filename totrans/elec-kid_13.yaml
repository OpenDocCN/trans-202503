- en: '![image](../images/common01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common01.jpg)'
- en: '10'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '10'
- en: CIRCUITS THAT MAKE CHOICES
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 做出选择的电路
- en: '[Chapter 9](ch09.xhtml#ch09) was all about ones and zeros, and you played with
    bits and bytes in a couple of projects. Now in this chapter, you’ll make circuits
    that actually use ones and zeros to make decisions. *Logic gates* are components
    that check for the voltages that represent those ones and zeros and output a voltage
    accordingly. I’ll show you a few types of logic gates and how you can use them
    to create a secret code detector.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.xhtml#ch09)讲述了零和一，且你在一些项目中玩弄了比特和字节。现在，在这一章中，你将制作实际使用零和一做出决定的电路。*逻辑门*是检查代表这些零和一的电压并相应输出电压的组件。我将向你展示几种类型的逻辑门，以及如何使用它们创建一个秘密代码探测器。'
- en: IT’S ONLY LOGICAL
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这完全符合逻辑
- en: '*Logic* is a way of reaching a conclusion based on pieces of information that
    you know to be true or false. For example, imagine you know the following statement
    is true, beyond a doubt:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*逻辑*是一种基于已知为真或假的信息得出结论的方法。例如，假设你知道以下陈述无疑是真的：'
- en: 'Statement 1: If there are oranges in your fridge AND you have an orange squeezer,
    THEN you’re able to make orange juice.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 声明1：如果冰箱里有橙子并且你有一个橙汁榨汁器，那么你能够制作橙汁。
- en: 'If you trust the preceding statement, then there are two conditions to check
    before you can make orange juice:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你相信前述声明，那么在你能够制作橙汁之前有两个条件需要检查：
- en: 'Condition 1: There are oranges in your fridge.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 条件1：冰箱里有橙子。
- en: 'Condition 2: You have an orange squeezer.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 条件2：你有一个橙汁榨汁器。
- en: If you check your kitchen and find that these conditions are true, then you
    can logically conclude that you can make orange juice.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查厨房并发现这些条件为真，那么你可以逻辑地得出结论：你可以制作橙汁。
- en: Computers use *Boolean logic*, which is a system of logic that works only with
    the values *true* and *false* to convert ones and zeros into actions. For a computer
    to know whether you can make orange juice or not, it would have to reach that
    conclusion through Boolean logic. Let’s try thinking like a computer!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机使用*布尔逻辑*，这是一种仅使用*真*和*假*的值来将零和一转换为动作的逻辑系统。为了让计算机知道你是否能够制作橙汁，它必须通过布尔逻辑得出结论。让我们试着像计算机一样思考吧！
- en: 'First, look for the conditions in Statement 1 that affect whether you can make
    orange juice or not. In this case, the conditions are the two phrases between
    “if” and “then,” joined by “and.” Assign them letters as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，查找在声明1中影响你是否能制作橙汁的条件。在这个例子中，条件是“if”和“then”之间由“and”连接的两个短语。将它们分别用字母表示，如下所示：
- en: There are oranges in your fridge. = A
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 冰箱里有橙子。 = A
- en: You have an orange squeezer. = B
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个橙汁榨汁器。 = B
- en: 'The conclusion is the statement after “then.” Give it a letter, too:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结论是“then”之后的陈述。也给它一个字母：
- en: You’re able to make orange juice. = Q
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你能够制作橙汁。 = Q
- en: 'With these letters, you could rewrite Statement 1 as “If A and B, then Q.”
    In Boolean logic shorthand, that looks like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些字母，你可以将声明1重写为“如果A和B，那么Q”。在布尔逻辑的简写中，表示为：
- en: A AND B = Q
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: A且B = Q
- en: This is a *logic equation*, where *AND* is an operator like addition or subtraction.
    When both statements on either side of AND are true, the conclusion Q is true.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个*逻辑方程*，其中*AND*是类似加法或减法的运算符。当AND两边的语句都为真时，结论Q为真。
- en: 'Given Condition 1 and Condition 2, A and B are both true. Substitute both into
    the equation to get:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 给定条件1和条件2，A和B都为真。将它们代入方程式得到：
- en: True AND True = Q
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 真且真 = Q
- en: Q = True
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Q = 真
- en: Because both A and B are true, then Q must be true. Time to make orange juice!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于A和B都为真，那么Q也必须为真。现在可以制作橙汁了！
- en: How a Computer Decides When It Can Make Orange Juice
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机如何判断何时可以制作橙汁
- en: '| **Condition A (There are oranges in your fridge.)** | **Condition B (You
    have an orange squeezer.)** | **Result Q (You’re able to make orange juice.)**
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **条件A（冰箱里有橙子。）** | **条件B（你有一个橙汁榨汁器。）** | **结果Q（你能够制作橙汁。）** |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| False | False | False |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 假 | 假 | 假 |'
- en: '| False | True | False |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 假 | 真 | 假 |'
- en: '| True | False | False |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 真 | 假 | 假 |'
- en: '| True | True | **TRUE!** |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 真 | 真 | **真！** |'
- en: MEET THE LOGIC GATES
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认识逻辑门
- en: Many of the circuits inside your computer are physical versions of logic equations,
    complete with smaller circuits called *logic gates*, which are physical logical
    operators. A logic gate takes ones and zeros—representing true and false, respectively—as
    inputs and then outputs a 1 or 0 based on the results of the equation inside.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你计算机中的许多电路是逻辑方程的物理版本，里面包含了更小的电路叫做*逻辑门*，它们是物理逻辑运算符。逻辑门接受1和0—分别代表真和假—作为输入，然后根据方程的结果输出1或0。
- en: You can make really awesome projects with logic gates yourself, too!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以自己使用逻辑门制作非常棒的项目！
- en: 'I remember the first time my dad told me about logic gates: I went straight
    to my room and spent hours trying to combine them on paper in different ways to
    add binary numbers. I hope you have as much fun with them as I did! Now, let’s
    look at how a few different logic gates work.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得第一次我爸爸跟我讲逻辑门的时候：我直接回到房间，花了几个小时在纸上尝试不同的方式组合它们来加二进制数字。我希望你能像我一样享受这个过程！现在，让我们看看一些不同的逻辑门是如何工作的。
- en: AND Gates Check for Two True Inputs
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与门检查两个输入是否为真
- en: The *AND gate* is the physical form of the AND operator you used to decide whether
    you were able to make orange juice. An AND gate has two or more inputs—A and B,
    for example—and one output—Q, for example. It checks whether A and B are both
    1, and if they are, then Q is 1; otherwise, the output is 0\. Q is 1 only if both
    A *and* B are 1; if one or both inputs are 0, the output is 0.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*与门* 是你用来判断是否能做橙汁的与运算符的物理形式。一个与门有两个或更多输入—例如A和B—以及一个输出—例如Q。它检查A和B是否都为1，如果是，那么Q为1；否则，输出为0。只有当A
    *和* B都为1时，Q才为1；如果一个或两个输入为0，输出就是0。'
- en: I find it helpful to write out the values of Q that result from different input
    combinations in a *truth table*. This truth table shows all possible input combinations
    for the AND gate and what the output will be for each. In a truth table, 0 stands
    for *false*, and 1 stands for *true*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现通过在*真值表*中写出不同输入组合对应的Q值很有帮助。这个真值表展示了与门的所有可能输入组合，以及每种组合的输出结果。在真值表中，0代表*假*，1代表*真*。
- en: '![image](../images/f0216-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0216-01.jpg)'
- en: OR Gates Check for One True Input
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 或门检查是否有一个输入为真
- en: The *OR gate* checks whether input A *or* input B is 1\. If either is 1 or both
    are 1, then the output Q is also 1\. But if both inputs are 0, then the output
    is 0.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*或门* 检查输入A *或* 输入B是否为1。如果其中任何一个为1，或者两个都是1，那么输出Q也是1。如果两个输入都是0，那么输出为0。'
- en: '![image](../images/f0217-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0217-01.jpg)'
- en: NOT Gates Flip Inputs
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 非门翻转输入
- en: 'The *NOT gate*, also called an *inverter*, has only one input and one output,
    and its function is very simple: the output is the opposite of the input. If the
    input is 1, then the output is 0\. If the input is 0, the output is 1.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*非门*，也叫*反向器*，只有一个输入和一个输出，它的功能非常简单：输出是输入的反面。如果输入是1，那么输出是0。如果输入是0，输出是1。'
- en: '![image](../images/f0217-02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0217-02.jpg)'
- en: A Bigger AND Gate
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更大的与门
- en: 'AND gates and OR gates can have more than two inputs. For example, here’s a
    4-input AND gate symbol:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与门和或门可以有多个输入。例如，这里是一个4输入与门的符号：
- en: '![image](../images/f0217-03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0217-03.jpg)'
- en: 'Because it’s an AND gate, the result will be 1 only if all four inputs are
    1; otherwise, it will be 0\. That is, the output Q is true (1) if all four inputs—A,
    B, C, and D—are true (1):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个与门，只有当四个输入都为1时，结果才会是1；否则，它将是0。也就是说，输出Q为真（1），当且仅当四个输入—A、B、C和D—都为真（1）时：
- en: Q = A AND B AND C AND D
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Q = A AND B AND C AND D
- en: 'We can also make a 4-input AND gate from three 2-input AND gates, like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过三个2输入与门来构建一个4输入与门，像这样：
- en: '![image](../images/f0218-01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0218-01.jpg)'
- en: HOW TO DRAW LOGIC CIRCUIT DIAGRAMS
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何绘制逻辑电路图
- en: You can use logic gates to build a circuit that checks for conditions and decides
    what to do based on them. For example, imagine you could deactivate your alarm
    system from [Chapter 1](ch01.xhtml#ch01) by entering a secret code. Then, you
    could leave the alarm system on while you’re gone, and if someone opened the door,
    they’d have to know the right code to turn the alarm off. With logic gates, a
    circuit can check easily whether the right code was entered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用逻辑门构建一个电路，检查条件并根据这些条件决定该做什么。例如，假设你能通过输入一个秘密代码来关闭你的报警系统。[第一章](ch01.xhtml#ch01)中提到的那样。然后，你可以在离开时保持报警系统开启，如果有人打开了门，他们必须知道正确的代码才能关闭报警系统。使用逻辑门，电路可以轻松检查是否输入了正确的代码。
- en: A Logic Equation for a Secret Code
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用逻辑方程制作一个秘密代码
- en: Let’s say the secret code is 1001, and when the secret code is detected, an
    LED should turn on to indicate success. When building logic circuits, it’s helpful
    to write the logic equation for your circuit before building, so let’s practice.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 假设秘密代码是1001，当检测到秘密代码时，LED应该亮起以指示成功。在构建逻辑电路时，提前写出电路的逻辑方程是有帮助的，因此我们来练习一下。
- en: First, think about what each 1 and each 0 in the secret code represents in terms
    of logic gates. In this case, you want the LED to turn on only when four conditions
    are true, and you can connect those conditions with AND operators as follows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，思考秘密代码中的每个1和0在逻辑门中的含义。在这种情况下，只有当四个条件都为真时，LED才会亮起，你可以通过AND运算符将这些条件连接起来，如下所示。
- en: Let’s represent the four bits in the secret code with the letters *W*, *X*,
    *Y*, and *Z*. Then, you can check each bit to see whether it’s the correct value,
    testing for W = 1, X = 0, Y = 0, and Z = 1.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用字母*W*、*X*、*Y*和*Z*表示秘密代码中的四个位。然后，你可以检查每个位的值，验证W = 1，X = 0，Y = 0，Z = 1是否成立。
- en: 'You’ll need to AND the four secret code bits together using a 4-input AND gate.
    But simply connecting W, X, Y, and Z straight to the AND gate would give this
    logic equation:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将四个秘密代码位通过一个4输入的AND门进行与运算。但是，简单地将W、X、Y和Z直接连接到AND门会得到这样的逻辑方程：
- en: Q = W AND X AND Y AND Z
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Q = W AND X AND Y AND Z
- en: This would test whether all the bits are 1 because Q = 1 only if W, X, Y, and
    Z are all 1\. Instead, you need to test for the secret code where W and Z are
    1, but X and Y are 0.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将测试所有位是否为1，因为只有当W、X、Y和Z都为1时，Q = 1。相反，你需要测试秘密代码，其中W和Z为1，但X和Y为0。
- en: 'Fortunately, in Boolean logic, you have only two options: 1 or 0 (true or false).
    If something is 0, then it is NOT 1; in words, if something is false, then it
    is NOT true. This means that if X = 0 (false), then NOT X = 1 (true). Knowing
    that, you can rewrite the equation as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在布尔逻辑中，你只有两个选项：1或0（真或假）。如果某个值是0，那它就不是1；用语言表达就是，如果某个值为假，那么它就不是真的。这意味着，如果X
    = 0（假），那么NOT X = 1（真）。知道这一点后，你可以将方程重写如下：
- en: Q = W AND (NOT X) AND (NOT Y) AND Z
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Q = W AND (NOT X) AND (NOT Y) AND Z
- en: This equation uses NOT on bits X and Y, which should be 0 for the secret code.
    The NOT will invert their values, changing 0 to 1 and 1 to 0.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程对X和Y位使用了NOT操作，这样它们应该是0才能得到秘密代码。NOT操作会反转它们的值，将0变为1，1变为0。
- en: Converting a Logic Equation into a Circuit Diagram
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将逻辑方程转化为电路图
- en: Now we’ll draw the secret code equation as a circuit. The final output will
    be a single 1 or 0\. You need a 4-input AND gate to test all four code bits at
    once, and you’re going to make this using three 2-input AND gates as explained
    earlier. Because you need to test whether the X and Y bits are 0, you’ll need
    to use a NOT gate for each to invert the 0 to 1.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把秘密代码方程画成电路。最终的输出将是一个1或0。你需要一个4输入的AND门来一次性测试所有四个位，并且你将使用之前解释的三个2输入的AND门来实现这一点。因为你需要测试X和Y位是否为0，所以你需要为每个位使用一个NOT门，将0反转为1。
- en: 'Here’s the final circuit:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的电路：
- en: '![image](../images/f0220-01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0220-01.jpg)'
- en: The first bit (W) should be a 1 and the second (X) should be a 0, so the second
    bit gets a NOT gate. The third bit (Y) has a NOT gate as well, and it goes into
    an AND gate with the fourth bit (Z).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个位（W）应该是1，第二个位（X）应该是0，因此第二个位需要一个NOT门。第三个位（Y）也需要一个NOT门，并且它将与第四个位（Z）一起输入到AND门中。
- en: The first AND gate should output 1 if it sees W = 1 and X = 0, and the second
    AND gate should output 1 if it sees Y = 0 and Z = 1\. If both of those AND gates
    output 1, then so will the third AND gate, which ultimately confirms that 1001
    was entered.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个AND门应该在W = 1和X = 0时输出1，第二个AND门应该在Y = 0和Z = 1时输出1。如果这两个AND门都输出1，那么第三个AND门也会输出1，最终确认输入的是1001。
- en: '**TRY IT OUT: DRAW MORE LOGICAL STATEMENTS AS CIRCUITS**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**试一试：将更多逻辑语句绘制为电路**'
- en: Now that you’ve seen the basics, transform a few logical statements of your
    own into logic circuits on paper. For example, how might you draw up plans for
    a “Can I Make Orange Juice?” decision maker? Create one based on the statements
    under “It’s Only Logical” on [page 214](ch10.xhtml#page_214).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了基本知识，尝试将一些逻辑语句转化为电路图。举个例子，你如何为“我能做橙汁吗？”决策器绘制计划？根据[第214页](ch10.xhtml#page_214)上“它只是逻辑”部分的语句来创建一个。
- en: USING LOGIC GATES IN REAL LIFE
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在现实生活中使用逻辑门
- en: When I learned about logic gates, I thought they’d be small two- and three-legged
    components. But logic gates come boxed inside integrated circuits (ICs). Each
    IC contains several gates, so even if you want to use just one, you’ll have to
    use an IC anyway.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我学习逻辑门时，我以为它们会是小型的两脚或三脚组件。但逻辑门通常被封装在集成电路（IC）中。每个IC包含几个逻辑门，因此即使你只需要一个，也必须使用集成电路。
- en: '![image](../images/f0221-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0221-01.jpg)'
- en: It’s also important to know that logic gate outputs don’t supply much current.
    Even if a logic gate outputs 5 V, that doesn’t mean that you can connect your
    5 V motor to it. The logic gate simply can’t give enough current for the motor
    to run.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要知道的是，逻辑门输出的电流非常有限。即使逻辑门输出5 V，也并不意味着你可以将一个5 V的电动机连接到它上面。逻辑门根本无法提供足够的电流来让电动机运行。
- en: 'Recall from [Chapter 7](ch07.xhtml#ch07) that a transistor needs only a little
    current flowing into its base to turn on and let a lot more current flow from
    its collector to emitter. When you want to use a logic gate to turn on a circuit
    or component that requires more current, you can connect the logic gate to a transistor.
    Do you remember the circuit from “[Project #14: Build a Circuit that Senses Touch](ch07.xhtml#ch07lev1sec02)”
    on [page 136](ch07.xhtml#page_136)? You can modify this circuit to turn on an
    LED from a logic gate, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下[第7章](ch07.xhtml#ch07)，晶体管只需要一点电流流入其基极就能打开，从而让更多电流从集电极流向发射极。当你想用逻辑门来打开一个需要更多电流的电路或组件时，你可以将逻辑门连接到晶体管。你还记得在[第7章](ch07.xhtml#ch07lev1sec02)的“[项目#14：构建一个触摸感应电路](ch07.xhtml#ch07lev1sec02)”中那个电路吗？你可以修改这个电路，让逻辑门点亮一个LED，像这样：
- en: '![image](../images/f0221-02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0221-02.jpg)'
- en: I’ll show you how to incorporate this into a project in the next section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一节中展示如何将这一点融入到一个项目中。
- en: '**MORE ABOUT CURRENT, COMPONENTS, AND TRANSISTORS**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多关于电流、组件和晶体管的内容**'
- en: You can easily replace the LED and resistor with something else that you want
    to control, like a motor, a fan, or a relay. But when doing this, be mindful of
    the current. How much current does your motor need, and how much current can the
    transistor handle?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地将LED和电阻替换为你想控制的其他设备，如电动机、风扇或继电器。但在做这些替换时，请留意电流。你的电动机需要多少电流，而晶体管能处理多少电流？
- en: Both values can be found in the components’ datasheets. For transistors, the
    value you are looking for is called *I*[C], or *collector current*. According
    to the datasheet of a BC547 transistor, its maximum collector current is 100 mA.
    That’s more than enough to power an LED, which usually uses about 15 to 20 mA
    at the most.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个值可以在组件的数据手册中找到。对于晶体管，你需要查找的值叫做 *I*[C]，即 *集电极电流*。根据BC547晶体管的数据手册，它的最大集电极电流是100
    mA。这足够为LED供电，而LED通常最多只需要15到20 mA。
- en: But what if you want to connect a motor? First, you’d need to find out how much
    current the motor needs, and you’ll find that in the motor’s datasheet. If a motor
    needs 500 mA, you’ll need to connect it to a transistor that can handle more than
    500 mA of current. For example, a PN2222 transistor can handle up to 600 mA, so
    it should be able to switch the motor on and off.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想连接一个电动机怎么办？首先，你需要找出电动机需要多少电流，这个信息可以在电动机的数据手册中找到。如果电动机需要500 mA，那么你需要将它连接到一个可以处理超过500
    mA电流的晶体管。例如，PN2222晶体管可以处理最高600 mA电流，所以它应该能够控制电动机的开关。
- en: '![image](../images/f0222-01.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0222-01.jpg)'
- en: 'PROJECT #21: A SECRET CODE CHECKER'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '项目 #21：秘密代码检查器'
- en: In this project, you’ll build a logic circuit that checks whether a set of four
    input bits matches a secret code. You’ll use four switches, inside one DIP switch,
    to set the code. If the input bits match the code, then the logic circuit should
    output a voltage, representing a 1; otherwise, it should output zero voltage,
    to indicate 0\. This final output will go to a transistor so you can use it to
    control something—like an alarm!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个逻辑电路，用来检查一组四个输入位是否与秘密代码匹配。你将使用四个开关，在一个DIP开关内部设置代码。如果输入的位与代码匹配，逻辑电路就应该输出一个电压，表示1；否则，它应该输出零电压，表示0。这一最终输出将接到一个晶体管上，这样你就可以用它来控制某些东西——比如一个报警器！
- en: '![image](../images/f0223-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0223-01.jpg)'
- en: The basic Secret Code Checker circuit turns on an LED when you input the right
    code. At the end of the project, I’ll show you how to use the Secret Code Checker
    to disarm your intruder alarm from [Chapter 1](ch01.xhtml#ch01).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的秘密代码检查器电路会在你输入正确的代码时点亮一个LED。在项目的最后，我会向你展示如何利用秘密代码检查器从[第1章](ch01.xhtml#ch01)中解除你的入侵者报警。
- en: 'Here’s the complete circuit diagram for this project:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本项目的完整电路图：
- en: '![image](../images/f0224-01.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0224-01.jpg)'
- en: Shopping List
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 购物清单
- en: '![image](../images/f0224-02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0224-02.jpg)'
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一款至少有30行的面包板**（Jameco #20601, Bitsbox #CN329）。'
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236)—you’ll need around 20 for this project.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **面包板跳线**（Jameco #2237044, Bitsbox #CN236）——你需要大约20根跳线用于这个项目。'
- en: '![image](../images/common-01.jpg) **A DIP switch** (Jameco #38820, Bitsbox
    #SW042) with four individual switches.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一款四个独立开关的DIP开关**（Jameco #38820, Bitsbox
    #SW042）。'
- en: '![image](../images/common-01.jpg) **A 74LS04 inverter IC with six NOT gates**
    (Jameco #46316, Bitsbox #QU108)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **一款带有六个NOT门的74LS04反相器集成电路**（Jameco #46316,
    Bitsbox #QU108）'
- en: '![image](../images/common-01.jpg) **A 74LS08 IC with four AND gates** (Jameco
    #46375, Bitsbox #QU109)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **一款带有四个与门的74LS08集成电路**（Jameco #46375, Bitsbox
    #QU109）'
- en: '![image](../images/common-01.jpg) **A general-purpose NPN transistor** (Jameco
    #254801, Bitsbox #QD011), such as BC547.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一款通用NPN晶体管**（Jameco #254801, Bitsbox #QD011），如BC547。'
- en: '![image](../images/common-01.jpg) **A standard LED** (Jameco #34761, Bitsbox
    #OP003)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **一款标准LED**（Jameco #34761, Bitsbox #OP003）'
- en: '![image](../images/common-01.jpg) **A 220 Ω resistor** (Jameco #690700, Bitsbox
    #CR25220R) to limit the current to the LED.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一款220Ω电阻**（Jameco #690700, Bitsbox #CR25220R），用于限制LED的电流。'
- en: '![image](../images/common-01.jpg) **Four 1 kΩ resistors** (Jameco #690865,
    Bitsbox #CR251K) to use as pull-down resistors.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **四个1kΩ电阻**（Jameco #690865, Bitsbox #CR251K），用作下拉电阻。'
- en: '![image](../images/common-01.jpg) **A 5 V DC wall adapter** (Jameco #2126125,
    Bitsbox #TF010) to power the circuit.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一款5V直流墙壁适配器**（Jameco #2126125, Bitsbox
    #TF010）为电路供电。'
- en: '![image](../images/common-01.jpg) **A DC barrel jack adapter** (Jameco #2227209,
    Bitsbox #CN424) to connect the wall adapter to the breadboard.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一款DC桶形插座适配器**（Jameco #2227209, Bitsbox
    #CN424）用于将墙壁适配器连接到面包板。'
- en: Tools
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 工具
- en: '![image](../images/f0225-01.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0225-01.jpg)'
- en: '![image](../images/common-01.jpg) **A screwdriver** that fits the screw terminal
    of the barrel jack adapter.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一把适配桶形插座适配器螺丝端子的螺丝刀**。'
- en: How to Use Other Voltages with a Breadboard
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何在面包板上使用其他电压
- en: You’ve used 9 V batteries for each circuit in this book so far, but most digital
    circuits need to use lower voltages. For example, a lot of ICs with logic gates
    inside use 5 V instead. But 5 V is not a standard battery value; there are 4.5
    V and 6 V batteries, but not 5 V.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你为本书中的每个电路使用了9伏电池，但大多数数字电路需要使用较低电压。例如，许多内部包含逻辑门的集成电路使用的是5伏电压。然而，5伏并不是标准的电池电压；虽然有4.5伏和6伏电池，但没有5伏电池。
- en: What can you do when your circuit requires 5 V? Say hello to the *wall adapter*
    and the *barrel jack adapter*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的电路需要5伏电压时，你该怎么办？向*墙壁适配器*和*桶形插座适配器*问好吧。
- en: '![image](../images/f0226-01.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0226-01.jpg)'
- en: Many electronic devices use wall adapters to recharge batteries or just to stay
    powered. The pronged side of a wall adapter plugs into a wall socket, and the
    other side plugs into something you want to power. Wall adapters come in many
    values, and this project uses a 5 V DC regulated adapter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 许多电子设备使用墙壁适配器来为电池充电或保持电力。墙壁适配器的一端插入墙壁插座，另一端插入你想要供电的设备。墙壁适配器有许多不同的电压，本项目使用的是5V直流稳压适配器。
- en: To supply power to a circuit, the wall adapter in this project needs to plug
    into a barrel jack adapter. The barrel jack adapter listed in this project’s Shopping
    List ([page 224](ch10.xhtml#page_224)) has two *screw terminals*, where you can
    plug in jumper wires that connect to the breadboard. You can connect any wall
    adapter with the standard round plug into this barrel jack adapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为电路供电时，本项目中的墙壁适配器需要插入一个桶形插座适配器。本项目购物清单中列出的桶形插座适配器（[第224页](ch10.xhtml#page_224)）有两个*螺丝端子*，你可以将跳线插入这些端子并连接到面包板。你可以将任何带有标准圆形插头的墙壁适配器插入这个桶形插座适配器。
- en: '**MAKING CIRCUITS MORE RELIABLE**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**使电路更可靠**'
- en: If a circuit needs an input voltage and you don’t connect the input to anything,
    then that input is *floating*. A floating input is unreliable because the circuit
    may see it as a 1 or a 0, and you can’t control which.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电路需要一个输入电压，但你没有连接任何东西到这个输入端，那么这个输入就是*悬空的*。悬空输入是不可靠的，因为电路可能会把它当作1或0，而你无法控制是哪一个。
- en: 'The individual switches on a DIP switch are either open or closed. When the
    switch is open, the input it controls will be floating if it’s not connected to
    anything else. To fix this, you can attach a *pull-down resistor* to each input
    on the logic gates, like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: DIP 开关上的每个开关要么是断开的，要么是闭合的。当开关断开时，如果没有连接到其他任何东西，控制的输入将会处于浮动状态。为了解决这个问题，你可以在每个逻辑门输入端接一个
    *下拉电阻*，如下所示：
- en: '![image](../images/f0227-01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0227-01.jpg)'
- en: Each pull-down resistor in this circuit diagram connects to a switch and a gate
    input on one side and to the negative battery terminal on the other. When a switch
    is open, the resistor “pulls” the gate input down to 0 V, which is a 0\. When
    a switch is closed, the gate input connects to the positive terminal and gets
    the positive supply voltage, which is a 1.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本电路图中的每个下拉电阻一端连接到开关和门输入，另一端连接到负电池端。当开关断开时，电阻将“拉”门输入至 0V（即 0）。当开关闭合时，门输入连接到正电源端，得到正电源电压（即
    1）。
- en: In this project’s circuit diagram on [page 224](ch10.xhtml#page_224), there
    are four switches with 1 kΩ pull-down resistors. All of them are shown as open,
    and all of the AND gate inputs would be 0 in that state.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目的电路图中（见 [第 224 页](ch10.xhtml#page_224)），有四个开关，每个开关都配有 1 kΩ 的下拉电阻。它们都显示为断开状态，在这种状态下，所有的与门输入都为
    0。
- en: 'Step 1: Place the Switches and Resistors'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 1：放置开关和电阻
- en: Plug your DIP switch in at the top of the breadboard, with one side of the switch
    on each side of the notch in the middle. Use jumper wires to connect the left
    side of each DIP switch to the positive supply rail on the left, and connect a
    1 kΩ resistor from the right side of each DIP switch to the negative supply rail
    on the right.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将 DIP 开关插入面包板的顶部，使开关的一侧位于中间缺口的两侧。使用跳线将每个 DIP 开关的左侧连接到左侧的正电源轨，将一个 1 kΩ 电阻从每个
    DIP 开关的右侧连接到右侧的负电源轨。
- en: '![image](../images/f0228-01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0228-01.jpg)'
- en: 'Step 2: Place the ICs'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 2：放置集成电路
- en: Place the IC with NOT gates, marked *74LS04*, in the middle of the breadboard
    and place the IC with AND gates, marked *74LS08*, farther down. For both ICs,
    point the rounded notch toward the DIP switch. Leave at least three rows at the
    bottom of the breadboard for the transistor.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将带有非门的 IC（标记为 *74LS04*）放置在面包板的中央，将带有与门的 IC（标记为 *74LS08*）放置在更远的位置。对于这两个 IC，将圆形缺口朝向
    DIP 开关。底部至少留出三行空白，用于放置晶体管。
- en: '![image](../images/f0229-01.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0229-01.jpg)'
- en: 'Step 3: Place the Transistor and LED'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 3：放置晶体管和 LED
- en: Plug your transistor into three rows at the bottom of the breadboard. If you
    used the BC547 transistor from this project’s Shopping List ([page 224](ch10.xhtml#page_224)),
    face the flat side left so that the collector is the upper pin, the base is the
    middle pin, and the emitter is the bottom pin. If you used a different NPN transistor,
    check its datasheet to see which pin is which.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的晶体管插入面包板底部的三行。如果你使用的是本项目购物单中列出的 BC547 晶体管（见 [第 224 页](ch10.xhtml#page_224)），则将平面朝左放置，使集电极为上引脚，基极为中引脚，发射极为下引脚。如果你使用的是其他
    NPN 晶体管，请查看其数据手册，确认各引脚的功能。
- en: Connect the LED’s short leg, the cathode, to the same row as the collector.
    Connect the LED’s long leg, the anode, to an empty row on the left side of the
    breadboard. Finally, connect the 220 Ω resistor from the LED’s anode to the positive
    supply rail.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将 LED 的短腿（阴极）连接到与晶体管集电极相同的一行。将 LED 的长腿（阳极）连接到面包板左侧的空行。最后，将 220 Ω 的电阻从 LED 的阳极连接到正电源轨。
- en: '![image](../images/f0230-01.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0230-01.jpg)'
- en: 'Step 4: Build the Logic Circuit'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 4：构建逻辑电路
- en: First, look at the following diagram to see where the AND and NOT gates are
    inside your ICs and to see the connections you need to make.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，查看下面的电路图，了解与门和非门在你的集成电路 (IC) 中的位置，并查看你需要进行的连接。
- en: '![image](../images/f0231-01.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0231-01.jpg)'
- en: 'Take four jumper wires and connect them from the switch outputs to the gate
    inputs as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 取四根跳线，将它们分别从开关输出连接到逻辑门的输入，如下所示：
- en: '![image](../images/common-01.jpg) The output from switch 1, the uppermost switch,
    goes to the AND gate input on pin 1 of the lower IC (74LS08).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 开关 1（最上面的开关）的输出接到下面 IC（74LS08）第 1 引脚的与门输入。'
- en: '![image](../images/common-01.jpg) The switch 2 output goes to the NOT gate
    input on pin 13 on the upper IC (74LS04).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 开关 2 的输出接到上面 IC（74LS04）第 13 引脚的非门输入。'
- en: '![image](../images/common-01.jpg) The switch 3 output goes to the NOT gate
    input on pin 11 on the upper IC.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 开关 3 的输出接到上面 IC 的第 11 引脚的非门输入。'
- en: '![image](../images/common-01.jpg) The switch 4 output goes to the AND gate
    input on pin 13 of the lower IC.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 开关4的输出连接到下方集成电路第13脚的与门输入。'
- en: '![image](../images/f0232-01.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0232-01.jpg)'
- en: 'Next, get two jumper wires to connect the outputs of the NOT gates to the AND
    gate inputs like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，拿两根跳线，将NOT门的输出连接到与门的输入，如下所示：
- en: '![image](../images/common-01.jpg) One jumper wire goes from pin 12 on the upper
    IC to pin 2 on the lower IC.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 一根跳线从上方集成电路的第12脚连接到下方集成电路的第2脚。'
- en: '![image](../images/common-01.jpg) The other jumper wire goes from pin 10 on
    the upper IC to pin 12 on the lower IC.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 另一根跳线从上方集成电路的第10脚连接到下方集成电路的第12脚。'
- en: 'Now, each output from the AND gates needs to go into the third AND gate, as
    follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个与门的输出都需要进入第三个与门，连接如下：
- en: '![image](../images/common-01.jpg) Connect one jumper wire from pin 3 to pin
    10 of the lower IC.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 将一根跳线从第3脚连接到下方集成电路的第10脚。'
- en: '![image](../images/common-01.jpg) Connect another jumper wire from pin 11 to
    pin 9 on the lower IC.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 将另一根跳线从第11脚连接到下方集成电路的第9脚。'
- en: '![image](../images/common-01.jpg) Finally, connect a jumper wire from the final
    output of the AND gate with the other side hanging loose for now.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) 最后，将一根跳线从与门的最终输出连接，另一端暂时悬空。'
- en: 'Your IC connections should look like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你的集成电路连接应如下所示：
- en: '![image](../images/f0233-01.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0233-01.jpg)'
- en: 'Step 5: Finish Wiring the Transistor'
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第5步：完成晶体管的接线
- en: Now, connect the output from the final AND gate—pin 8 of the lower IC—to the
    base of the transistor. This output will control whether the transistor allows
    current to pass through to the LED or not. Connect a jumper wire from the emitter
    of the transistor to the negative supply rail.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将最后一个与门的输出——下方集成电路的第8脚——连接到晶体管的基极。这个输出将控制晶体管是否允许电流通过到LED。将一根跳线从晶体管的发射极连接到负电源轨。
- en: '![image](../images/f0233-02.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0233-02.jpg)'
- en: '**PROTECTING YOUR COMPONENTS**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**保护你的元件**'
- en: The circuit for this project relies on the fact that gates supply only a tiny
    amount of current to the transistor base. Your transistor will be perfectly fine
    while you use your secret code checker, but to protect the transistor base from
    damage by larger currents in other circuits, you should place a resistor around
    1 to 10 kΩ between the transistor base and its current source—in this case, the
    AND gate output.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路依赖于门电路只向晶体管基极提供少量电流的事实。当你使用你的秘密代码检查器时，晶体管会完全正常工作，但为了保护晶体管基极免受其他电路中较大电流的损害，你应该在晶体管基极和电流源之间（在这个情况下是与门的输出）放置一个1到10
    kΩ的电阻。
- en: Transistors also should usually be protected in motor circuits, like the one
    in “[More About Current, Components, and Transistors](ch10.xhtml#ch10sb02)” on
    [page 222](ch10.xhtml#page_222). That circuit should work as is, but to be really
    careful, it’s good to connect a diode across the motor, with the cathode on the
    positive side. That should protect the transistor from any high-voltage spikes
    that might happen when the motor is switched off.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 晶体管通常也应该在电动机电路中受到保护，就像“[更多关于电流、元件和晶体管](ch10.xhtml#ch10sb02)”中的电路，位于[第222页](ch10.xhtml#page_222)。该电路应该可以正常工作，但为了更安全，最好在电动机两端并联一个二极管，阴极接在正极端。这样可以保护晶体管免受电动机关闭时可能发生的高压脉冲的损害。
- en: 'Step 6: Power and Test the Secret Code Checker'
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第6步：为秘密代码检查器供电并测试
- en: Connect jumper wires from pin 14 on both ICs to the positive supply rail and
    from pin 7 of both chips to the negative supply rail. Then, turn off all the switches
    on the DIP switch and connect your 5 V source, with plus to the positive supply
    on the left and minus to the negative supply on the right.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将跳线从两个集成电路的第14脚连接到正电源轨，从两个芯片的第7脚连接到负电源轨。然后，关闭DIP开关上的所有开关，连接你的5V电源，正极连接到左侧的正电源，负极连接到右侧的负电源。
- en: Use your barrel jack adapter with a couple of jumper wires to make this connection.
    The barrel jack adapter should have + and – markings to tell you which supply
    is which. Just loosen the screws on the adapter, insert a wire into each, and
    tighten the screws again. Follow the conventional color code by using a red wire
    for positive and a black wire for negative so you will be sure to connect them
    the correct way on your breadboard.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的圆形插孔适配器和几根跳线来完成这个连接。圆形插孔适配器应该有+和-的标记，告诉你哪一个是正极，哪一个是负极。只需松开适配器上的螺丝，将一根线插入每个端口，然后再拧紧螺丝。按照常规的颜色编码，使用红色线连接正极，黑色线连接负极，这样你就能确保它们正确地连接到你的面包板上。
- en: The LED should stay dark when the switches are off, but when you set the code
    to 1001 by switching on the top and bottom switches, it should light up.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当开关关闭时，LED应该保持暗淡，但当你通过打开顶部和底部开关将代码设置为1001时，它应该会亮起。
- en: '![image](../images/f0235-01.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0235-01.jpg)'
- en: 'Step 7: What If the LED Doesn’t Light Up?'
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤7：如果LED没有亮起怎么办？
- en: First, check that the two ICs have power. Do both ICs have pin 14 connected
    to the positive supply column and pin 7 connected to the negative supply column?
    If you find the ICs become too hot to touch, disconnect the 5 V power supply from
    the wall immediately and wait for the ICs to cool down. Then, make certain you
    have the supply connections the correct way before trying again. The wire plugged
    into the barrel jack adapter’s positive (+) terminal should be plugged into the
    positive supply column on the breadboard, and the wire in the barrel jack adapter’s
    negative (–) terminal should be plugged into the negative supply column.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查两个集成电路（IC）是否有电。两个IC的14号引脚是否连接到正极电源柱，7号引脚是否连接到负极电源柱？如果你发现集成电路变得过热，无法触碰，请立即断开5V电源并等待集成电路冷却下来。然后，确保你正确连接了电源，再次尝试。插入圆形插孔适配器正极（+）端子的线应该连接到面包板上的正极电源柱，而插入圆形插孔适配器负极（-）端子的线应该连接到负极电源柱。
- en: If the ICs are powered and the circuit still doesn’t work, then check the input
    values on the switches. Use a multimeter to measure the voltage from the negative
    supply rail to the pins on the AND and NOT gates that take inputs from the switches.
    You should get 5 V on pins 1 and 13 of the AND IC and 0 V on pins 11 and 13 of
    the NOT IC. Check that the output from each AND gate you’re using is 5 V, too;
    you should see 5 V on pins 3, 8, and 11\. If any AND gate in the IC doesn’t output
    5 V, then one of its inputs is 0 V. Figure out why it’s 0 V, and you should find
    the problem.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果IC已经通电，但电路仍然无法工作，那么检查开关的输入值。使用万用表测量从负极电源轨到与开关连接的与门（AND）和非门（NOT）引脚的电压。你应该在与门的1号和13号引脚上测得5V，在非门的11号和13号引脚上测得0V。检查你使用的每个与门的输出是否为5V；你应该在与门的3号、8号和11号引脚上看到5V。如果任何与门的输出不是5V，那么它的某个输入就是0V。找出为什么是0V，你应该能找到问题所在。
- en: '**TRY IT OUT: DISARM YOUR INTRUDER ALARM**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下：解除入侵警报**'
- en: Instead of an LED and a resistor, you can connect a relay to the Secret Code
    Checker and combine this project with the intruder alarm you built in [Chapter
    1](ch01.xhtml#ch01). Connect the 9 V battery to the intruder alarm through the
    relay so that when you input the right code, the power to the alarm is cut and
    the noise stops. Refer back to “[Meet the Relay](ch05.xhtml#ch05lev1sec04)” on
    [page 97](ch05.xhtml#page_97) to see how to connect a relay.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用一个继电器替代LED和电阻，将其连接到秘密代码检查器，并将这个项目与[第一章](ch01.xhtml#ch01)中构建的入侵警报结合起来。通过继电器将9V电池连接到入侵警报，这样当你输入正确的代码时，警报的电源被切断，噪音停止。请参考“[认识继电器](ch05.xhtml#ch05lev1sec04)”第[97页](ch05.xhtml#page_97)，了解如何连接继电器。
- en: Notice that the secret code checker, with its 5 V supply, is being used to control
    the completely separate intruder alarm circuit with a 9 V supply. Connecting two
    circuits with separate power supplies this way is okay because there’s no electrical
    connection between the two circuits. Relays are useful when you need to control
    a circuit with a different type of power supply!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，秘密代码检查器使用5V电源来控制完全独立的9V电源的入侵警报电路。以这种方式连接两个具有独立电源的电路是可以的，因为这两个电路之间没有电气连接。当你需要控制一个不同电源类型的电路时，继电器非常有用！
- en: 'Here’s the circuit:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是电路：
- en: '![image](../images/f0236-01.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0236-01.jpg)'
- en: 'And these are the components you’ll need:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你所需的组件：
- en: '![image](../images/common-02.jpg) **The circuit from “[Project #2: Intruder
    Alarm](ch01.xhtml#ch01lev1sec05)” on [page 11](ch01.xhtml#page_11)**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-02.jpg) **来自“[项目 #2: 入侵警报](ch01.xhtml#ch01lev1sec05)”的电路，见[第11页](ch01.xhtml#page_11)**'
- en: '![image](../images/common-02.jpg) **The circuit from “[Project #21: A Secret
    Code Checker](ch10.xhtml#ch10lev1sec05)” on [page 223](ch10.xhtml#page_223)**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-02.jpg) **“[项目 #21：秘密代码检查器](ch10.xhtml#ch10lev1sec05)”中的电路，见
    [第 223 页](ch10.xhtml#page_223)**'
- en: '![image](../images/common-02.jpg) **A 5 V relay** (Jameco #842996, Bitsbox
    #SW073)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-02.jpg) **一个 5 V 继电器**（Jameco #842996，Bitsbox #SW073）'
- en: NEGATIVE LOGIC GATES
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 负逻辑门
- en: AND, OR, and NOT are basic logic gates, and you can combine them to create new
    ones. Let’s look at two more gates that are created this way.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: AND、OR 和 NOT 是基本的逻辑门，你可以通过组合它们来创建新的逻辑门。让我们来看看通过这种方式创建的另外两个逻辑门。
- en: NAND Looks for One False Input
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: NAND 寻找一个错误的输入
- en: The *NAND gate* works like an AND gate with a NOT gate inverter on the output.
    The little circle on the output means NOT. That means the output from the NAND
    gate is 0 when both A and B are 1.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*NAND 门*的工作原理类似于一个带有输出反相器的 AND 门。输出上的小圆圈表示 NOT。这意味着当 A 和 B 都为 1 时，NAND 门的输出为
    0。'
- en: '![image](../images/f0237-01.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0237-01.jpg)'
- en: NOR Looks for Two False Inputs
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: NOR 寻找两个错误的输入
- en: The *NOR gate* works like an OR gate with an inverter on the output. The output
    is 1 when both A and B are 0.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*NOR 门*的工作原理类似于一个带有输出反相器的 OR 门。当 A 和 B 都为 0 时，输出为 1。'
- en: '![image](../images/f0238-01.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0238-01.jpg)'
- en: '**WHAT’S NEXT?**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**接下来是什么？**'
- en: In this chapter, you learned how to use logic gates to build circuits that “decide”
    things, like whether a code is correct or not. And at the end, you got to see
    some negative logic gates as well. Understanding how negative logic gates work
    is helpful, because they are often used in real-life circuits. In fact, you’ll
    use them in [Chapter 11](ch11.xhtml#ch11).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何使用逻辑门来构建“决策”电路，比如判断一个代码是否正确。最后，你还了解了一些负逻辑门。理解负逻辑门的工作原理非常有帮助，因为它们常常用于实际电路中。实际上，你将在[第
    11 章](ch11.xhtml#ch11)中使用它们。
- en: If you want to explore gates a bit further, I suggest you try combining some
    logic gates you’ve learned about on paper to create an *XOR gate*. An XOR gate
    gives out 1 only if the inputs are different from each other.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步探索逻辑门，我建议你尝试在纸上结合你学过的一些逻辑门来创建一个 *XOR 门*。XOR 门只有在输入不同的时候才会输出 1。
- en: '![image](../images/f0238-02.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0238-02.jpg)'
- en: By combining logic gates in different ways, you can create almost anything you
    can imagine. But that might be a bit hard to see right now, so in the next chapter,
    I’m going to show you some more building blocks you can create with logic gates.
    You’ll learn how to build your own memory circuit, and then you’ll build your
    own electronic coin tosser!
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以不同的方式组合逻辑门，你几乎可以创造出任何你能想象的东西。不过现在可能有些难以理解，因此在下一章，我将向你展示一些你可以用逻辑门创建的更多构建模块。你将学会如何构建自己的存储电路，然后你还将构建一个电子硬币投掷器！
