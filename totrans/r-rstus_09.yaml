- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 7 PARAMETERIZED REPORTING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Parameterized reporting* is a technique that allows you to generate multiple
    reports simultaneously. By using parameterized reporting, you can follow the same
    process to make 3,000 reports as you would to make one report. The technique also
    makes your work more accurate, as it avoids copy-and-paste errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Staff at the Urban Institute, a think tank based in Washington, DC, used parameterized
    reporting to develop fiscal briefs for all US states, as well as the District
    of Columbia. Each report required extensive text and multiple charts, so creating
    them by hand wasn’t feasible. Instead, employees Safia Sayed, Livia Mucciolo,
    and Aaron Williams automated the process. This chapter explains how parameterized
    reporting works and walks you through a simplified version of the code that the
    Urban Institute used.
  prefs: []
  type: TYPE_NORMAL
- en: Report Templates in R Markdown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’ve ever had to create multiple reports at the same time, you know how
    frustrating it can be, especially if you’re using the multi-tool workflow described
    in [Chapter 6](chapter6.xhtml). Making just one report can take a long time. Multiply
    that work by 10, 20, or, in the case of the Urban Institute team, 51, and it can
    quickly feel overwhelming. Fortunately, with parameterized reporting, you can
    generate thousands of reports at once using the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Make a report template in R Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  Add a parameter (for example, one representing US states) in the YAML of
    your R Markdown document to represent the values that will change between reports.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  Use that parameter to generate a report for one state, to make sure you
    can knit your document.
  prefs: []
  type: TYPE_NORMAL
- en: 4.  Create a separate R script file that sets the value of the parameter and
    then knits a report.
  prefs: []
  type: TYPE_NORMAL
- en: 5.  Run this script for all states.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll begin by creating a report template for one state. I’ve taken the code
    that the Urban Institute staff used to make their state fiscal briefs and simplified
    it significantly. All of the packages used are ones you’ve seen in previous chapters,
    with the exception of the urbnthemes package. This package contains a custom ggplot
    theme. It can be installed by running remotes::install_github("UrbanInstitute/urbnthemes")
    in the console. Instead of focusing on fiscal data, I’ve used data you may be
    more familiar with: COVID-19 rates from mid-2022\. Here’s the R Markdown document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]{r setup, include=FALSE}'
  prefs: []
  type: TYPE_NORMAL
- en: knitr::opts_chunk$set(
  prefs: []
  type: TYPE_NORMAL
- en: echo = FALSE,
  prefs: []
  type: TYPE_NORMAL
- en: warning = FALSE,
  prefs: []
  type: TYPE_NORMAL
- en: message = FALSE
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: library(tidyverse)
  prefs: []
  type: TYPE_NORMAL
- en: library(urbnthemes)
  prefs: []
  type: TYPE_NORMAL
- en: library(scales)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: cases <- tibble(state.name) %>%
  prefs: []
  type: TYPE_NORMAL
- en: rbind(state.name = "District of Columbia") %>%
  prefs: []
  type: TYPE_NORMAL
- en: left_join(
  prefs: []
  type: TYPE_NORMAL
- en: read_csv(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"https://data.rfortherestofus.com/united_states_covid19_cases_deaths_and_testing_by_state.csv",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: skip = 2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: by = c("state.name" = "State/Territory")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  prefs: []
  type: TYPE_NORMAL
- en: select(
  prefs: []
  type: TYPE_NORMAL
- en: total_cases = `Total Cases`,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: state.name,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cases_per_100000 = `Case Rate per 100000`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(case_rank = rank(-cases_per_100000, ties.method = "min"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: state_text <- if_else(params$state == "District of Columbia", str_glue(
  prefs: []
  type: TYPE_NORMAL
- en: '"the District of Columbia"), str_glue("state of {params$state}"))'
  prefs: []
  type: TYPE_NORMAL
- en: state_cases_per_100000 <- cases %>%
  prefs: []
  type: TYPE_NORMAL
- en: filter(state.name == params$state) %>%
  prefs: []
  type: TYPE_NORMAL
- en: pull(cases_per_100000) %>%
  prefs: []
  type: TYPE_NORMAL
- en: comma()
  prefs: []
  type: TYPE_NORMAL
- en: state_cases_rank <- cases %>%
  prefs: []
  type: TYPE_NORMAL
- en: filter(state.name == params$state) %>%
  prefs: []
  type: TYPE_NORMAL
- en: pull(case_rank)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]{r fig.height = 8}'
  prefs: []
  type: TYPE_NORMAL
- en: set_urbn_defaults(style = "print")
  prefs: []
  type: TYPE_NORMAL
- en: cases %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(highlight_state = if_else(state.name == params$state, "Y", "N")) %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(
  prefs: []
  type: TYPE_NORMAL
- en: x = cases_per_100000,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: y = state.name,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fill = highlight_state
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_col() +
  prefs: []
  type: TYPE_NORMAL
- en: scale_x_continuous(labels = comma_format()) +
  prefs: []
  type: TYPE_NORMAL
- en: theme(legend.position = "none") +
  prefs: []
  type: TYPE_NORMAL
- en: labs(
  prefs: []
  type: TYPE_NORMAL
- en: y = NULL,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: x = "Cases per 100,000"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The text and charts in the report come from the cases data frame, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you knit the document, you end up with the simple HTML file shown in [Figure
    7-1](chapter7.xhtml#fig7-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig7-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-1: The Alabama report generated via R Markdown'
  prefs: []
  type: TYPE_NORMAL
- en: You should recognize the R Markdown document’s YAML, R code chunks, inline code,
    and Markdown text from [Chapter 6](chapter6.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Defining Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In R Markdown, *parameters* are variables that you set in the YAML to allow
    you to create multiple reports. Take a look at these two lines in the YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This code defines a variable called state. You can use the state variable throughout
    the rest of the R Markdown document with the params$variable_name syntax, replacing
    variable_name with state or any other name you set in the YAML. For example, consider
    this inline R code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Any instance of the params$state parameter will be converted to "Alabama" when
    you knit it. This parameter and several others appear in the following code, which
    sets the first-level heading visible in [Figure 7-1](chapter7.xhtml#fig7-1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After knitting the document, you should see the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: In the state of Alabama, there were 26,573 cases per 100,000 people in the last
    seven days. This puts Alabama at number 18 of 50 states and the District of Columbia.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This text is automatically generated. The inline R code `r state_text` prints
    the value of the variable state_text, which is determined by a previous call to
    if_else(), shown in this code chunk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If the value of params$states is "District of Columbia", this code sets state_text
    equal to "the District of Columbia". If params$state isn’t "District of Columbia",
    then state_text gets the value "state of", followed by the state name. This allows
    you to put state_text in a sentence and have it work no matter whether the state
    parameter is a state or the District of Columbia.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Numbers with Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also use parameters to generate numeric values to include in the text.
    For example, to calculate the values of the state_cases_per_100000 and state_cases_rank
    variables dynamically, use the state parameter, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: First, this code filters the cases data frame (which contains data for all states)
    to keep only the data for the state in params$state. Then, the pull() function
    gets a single value from that data, and the comma() function from the scales package
    applies formatting to make state_cases_per_100000 display as 26,573 (rather than
    26573). Finally, the state_cases_per_100000 and state_case_rank variables are
    integrated into the inline R code.
  prefs: []
  type: TYPE_NORMAL
- en: Including Parameters in Visualization Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The params$state parameter is used in other places as well, such as to highlight
    a state in the report’s bar chart. To see how to accomplish this, look at the
    following section from the last code chunk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code creates a variable called highlight_state. Within the cases data
    frame, the code checks whether state.name is equal to params$state. If it is,
    highlight_state gets the value Y. If not, it gets N. Here’s what the relevant
    columns look like after you run these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Later, the ggplot code uses the highlight_state variable for the bar chart’s
    fill aesthetic property, highlighting the state in params$state in yellow and
    coloring the other states blue. [Figure 7-2](chapter7.xhtml#fig7-2) shows the
    chart with Alabama highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig7-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-2: Highlighting data in a bar chart using parameters'
  prefs: []
  type: TYPE_NORMAL
- en: As you’ve seen, setting a parameter in the YAML allows you to dynamically generate
    text and charts in the knitted report. But you’ve generated only one report so
    far. How can you create all 51 reports? Your first thought might be to manually
    update the YAML by changing the parameter’s value from "Alabama" to, say, "Alaska"
    and then knitting the document again. While you *could* follow this process for
    all states, it would be tedious, which is what you’re trying to avoid. Instead,
    you can automate the report generation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an R Script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To automatically generate multiple reports based on the template you’ve created,
    you’ll use an R script that changes the value of the parameters in the R Markdown
    document and then knits it. You’ll begin by creating an R script file named *render.R*.
  prefs: []
  type: TYPE_NORMAL
- en: Knitting the Document with Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your script needs to be able to knit an R Markdown document. While you’ve seen
    how to do this using the Knit button, you can do the same thing with code. Load
    the rmarkdown package and then use its render() function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This function generates an HTML document called *urban-covid-budget-report.xhtml*.
    By default, the generated file has the same name as the R Markdown (*.Rmd*) document,
    with a different extension. The output_file argument assigns the file a new name,
    and the params argument specifies parameters that will override those in the R
    Markdown document itself. For example, this code tells R to use Alaska for the
    state parameter and save the resulting HTML file as *Alaska.xhtml*.
  prefs: []
  type: TYPE_NORMAL
- en: This approach to generating reports works, but to create all 51 reports, you’d
    have to manually change the state name in the YAML and update the render() function
    before running it for each report. In the next section, you’ll update your code
    to make it more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Tibble with Parameter Data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To write code that generates all your reports automatically, first you must
    create a *vector* (in colloquial terms, a list of items) of all the state names
    and the District of Columbia. To do this, you’ll use the built-in dataset state.name,
    which has all 50 state names in a vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This code turns state.name into a tibble and then uses the rbind() function
    to add the District of Columbia to the list. The pull() function gets one single
    column and saves it as state. Here’s what the state vector looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Rather than use render() with the input and output_file arguments, as you did
    earlier, you can pass it the params argument to give it parameters to use when
    knitting. To do so, create a tibble with the information needed to render all
    51 reports and save it as an object called reports, which you’ll pass to the render()
    function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This code generates a tibble with 51 rows and 3 variables. In all rows, the
    input variable is set to the name of the R Markdown document. The value of output_file
    is set with str_glue() to be equal to the name of the state, followed by.*html*
    (for example, *Alabama.xhtml*).
  prefs: []
  type: TYPE_NORMAL
- en: 'The params variable is the most complicated of the three. It is what’s known
    as a *named list*. This data structure puts the data in the state: state_name
    format needed for the R Markdown document’s YAML. The map() function from the
    purrr package creates the named list, telling R to set the value of each row as
    state = "Alabama", then state = "Alaska", and so on, for all of the states. You
    can see these variables in the reports tibble:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The params variable shows up as <named list>, but if you open the tibble in
    the RStudio viewer (click **reports** in the Environment tab), you can see the
    output more clearly, as shown in [Figure 7-3](chapter7.xhtml#fig7-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig7-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-3: The named list column in the RStudio viewer'
  prefs: []
  type: TYPE_NORMAL
- en: This view allows you to see the named list in the params variable, with the
    state variable equal to the name of each state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created the reports tibble, you’re ready to render the reports.
    The code to do so is only one line long:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This pwalk() function (from the purrr package) has two arguments: a data frame
    or tibble (reports, in this case) and a function that runs for each row of this
    tibble, render().'
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You don’t include the open and closing parentheses when passing the render()
    function to pwalk().*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this code runs the render() function for each row in reports, passing
    in the values for input, output_file, and params. This is equivalent to entering
    code like the following to run the render() function 51 times (for 50 states plus
    the District of Columbia):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the full R script file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After running the pwalk(reports, render) code, you should see 51 HTML documents
    appear in the files pane in RStudio. Each document consists of a report for that
    state, complete with a customized graph and accompanying text.
  prefs: []
  type: TYPE_NORMAL
- en: Best Practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While powerful, parameterized reporting can present some challenges. For example,
    make sure to consider outliers in your data. In the case of the state reports,
    Washington, DC, is an outlier because it isn’t technically a state. The Urban
    Institute team altered the language in the report text so that it didn’t refer
    to Washington, DC, as a state by using an if_else() statement, as you saw at the
    beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Another best practice is to manually generate and review the reports whose parameter
    values have the shortest (Iowa, Ohio, and Utah in the state fiscal briefs) and
    longest (District of Columbia) text lengths. This way, you can identify places
    where the text length may have unexpected results, such as cut-off chart titles
    or page breaks disrupted by text running onto multiple lines. A few minutes of
    manual review can make the process of autogenerating multiple reports much smoother.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you re-created the Urban Institute’s state fiscal briefs using
    parameterized reporting. You learned how to add a parameter to your R Markdown
    document, then use an R script to set the value of that parameter and knit the
    report.
  prefs: []
  type: TYPE_NORMAL
- en: 'Automating report production can be a huge time-saver, especially as the number
    of reports you need to generate grows. Consider another project at the Urban Institute:
    making county-level reports. With over 3,000 counties in the United States, creating
    these reports by hand isn’t realistic. Not only that, but if the Urban Institute
    employees were to make their reports using SPSS, Excel, and Word, they would have
    to copy and paste values between programs. Humans are fallible, and mistakes occur,
    no matter how hard we try to avoid them. Computers, on the other hand, never make
    copy-and-paste errors. Letting computers handle the tedious work of generating
    multiple reports reduces the chance of error significantly.'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re starting out, parameterized reporting might feel like a heavy lift,
    as you have to make sure that your code works for every version of your report.
    But once you have your R Markdown document and accompanying R script file, you
    should find it easy to produce multiple reports at once, saving you work in the
    end.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data@Urban Team, “Iterated Fact Sheets with R Markdown,” Medium, July 24, 2018,
    *[https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data@Urban Team, “Using R Markdown to Track and Publish State Data,” Medium,
    April 21, 2021, *[https://urban-institute.medium.com/using-r-markdown-to-track-and-publish-state-data-d1291bfa1ec0](https://urban-institute.medium.com/using-r-markdown-to-track-and-publish-state-data-d1291bfa1ec0)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
