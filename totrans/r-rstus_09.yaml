- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 7 PARAMETERIZED REPORTING
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7 参数化报告
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: '*Parameterized reporting* is a technique that allows you to generate multiple
    reports simultaneously. By using parameterized reporting, you can follow the same
    process to make 3,000 reports as you would to make one report. The technique also
    makes your work more accurate, as it avoids copy-and-paste errors.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*参数化报告*是一种可以同时生成多个报告的技术。通过使用参数化报告，你可以按照相同的过程生成3,000份报告，和制作一份报告的过程一样。这项技术还使你的工作更加准确，因为它避免了复制粘贴错误。'
- en: Staff at the Urban Institute, a think tank based in Washington, DC, used parameterized
    reporting to develop fiscal briefs for all US states, as well as the District
    of Columbia. Each report required extensive text and multiple charts, so creating
    them by hand wasn’t feasible. Instead, employees Safia Sayed, Livia Mucciolo,
    and Aaron Williams automated the process. This chapter explains how parameterized
    reporting works and walks you through a simplified version of the code that the
    Urban Institute used.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 华盛顿特区的智库城市研究所的工作人员，使用了参数化报告来为所有美国各州以及哥伦比亚特区开发财政简报。每份报告都需要大量的文本和多个图表，因此手动创建这些报告是不现实的。相反，员工Safia
    Sayed、Livia Mucciolo和Aaron Williams自动化了这个过程。本章将解释参数化报告的工作原理，并带你走过城市研究所使用的代码的简化版本。
- en: Report Templates in R Markdown
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: R Markdown中的报告模板
- en: 'If you’ve ever had to create multiple reports at the same time, you know how
    frustrating it can be, especially if you’re using the multi-tool workflow described
    in [Chapter 6](chapter6.xhtml). Making just one report can take a long time. Multiply
    that work by 10, 20, or, in the case of the Urban Institute team, 51, and it can
    quickly feel overwhelming. Fortunately, with parameterized reporting, you can
    generate thousands of reports at once using the following workflow:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经需要同时创建多个报告，你会知道这有多么令人沮丧，尤其是当你使用[第6章](chapter6.xhtml)中描述的多工具工作流时。仅制作一份报告就可能需要很长时间。如果把这个工作量乘以10、20，或者像城市研究所团队一样，乘以51，那么它很快就会让人感到不堪重负。幸运的是，通过参数化报告，你可以使用以下工作流一次性生成成千上万份报告：
- en: 1.  Make a report template in R Markdown.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  在R Markdown中制作报告模板。
- en: 2.  Add a parameter (for example, one representing US states) in the YAML of
    your R Markdown document to represent the values that will change between reports.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  在R Markdown文档的YAML部分添加一个参数（例如，表示美国各州的参数），以表示在报告间变化的值。
- en: 3.  Use that parameter to generate a report for one state, to make sure you
    can knit your document.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  使用该参数生成一个州的报告，以确保你可以编织（knit）文档。
- en: 4.  Create a separate R script file that sets the value of the parameter and
    then knits a report.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  创建一个独立的R脚本文件，设置参数值并生成报告。
- en: 5.  Run this script for all states.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 5.  对所有州运行该脚本。
- en: 'You’ll begin by creating a report template for one state. I’ve taken the code
    that the Urban Institute staff used to make their state fiscal briefs and simplified
    it significantly. All of the packages used are ones you’ve seen in previous chapters,
    with the exception of the urbnthemes package. This package contains a custom ggplot
    theme. It can be installed by running remotes::install_github("UrbanInstitute/urbnthemes")
    in the console. Instead of focusing on fiscal data, I’ve used data you may be
    more familiar with: COVID-19 rates from mid-2022\. Here’s the R Markdown document:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从为一个州创建报告模板开始。我已经将城市研究所员工用于制作州财政简报的代码进行了大幅简化。所有使用的包都是你在前几章中见过的，唯一的例外是`urbnthemes`包。这个包包含了一个自定义的ggplot主题。你可以通过在控制台运行`remotes::install_github("UrbanInstitute/urbnthemes")`来安装它。我没有专注于财政数据，而是使用了你可能更熟悉的数据：2022年中期的COVID-19感染率。以下是R
    Markdown文档：
- en: '[PRE0]{r setup, include=FALSE}'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]{r setup, include=FALSE}'
- en: knitr::opts_chunk$set(
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: knitr::opts_chunk$set(
- en: echo = FALSE,
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: echo = FALSE,
- en: warning = FALSE,
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: warning = FALSE,
- en: message = FALSE
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: message = FALSE
- en: )
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE1]{r}'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]{r}'
- en: library(tidyverse)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: library(tidyverse)
- en: library(urbnthemes)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: library(urbnthemes)
- en: library(scales)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: library(scales)
- en: '[PRE2]{r}'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]{r}'
- en: cases <- tibble(state.name) %>%
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: cases <- tibble(state.name) %>%
- en: rbind(state.name = "District of Columbia") %>%
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: rbind(state.name = "哥伦比亚特区") %>%
- en: left_join(
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: left_join(
- en: read_csv(
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: read_csv(
- en: '"https://data.rfortherestofus.com/united_states_covid19_cases_deaths_and_testing_by_state.csv",'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"https://data.rfortherestofus.com/united_states_covid19_cases_deaths_and_testing_by_state.csv",'
- en: skip = 2
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: skip = 2
- en: ),
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ),
- en: by = c("state.name" = "State/Territory")
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: by = c("state.name" = "State/Territory")
- en: ) %>%
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ) %>%
- en: select(
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: select(
- en: total_cases = `Total Cases`,
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_cases = `总病例数`,
- en: state.name,
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: state.name,
- en: cases_per_100000 = `Case Rate per 100000`
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cases_per_100000 = `每10万人病例数`
- en: ) %>%
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ) %>%
- en: mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%
- en: mutate(case_rank = rank(-cases_per_100000, ties.method = "min"))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(case_rank = rank(-cases_per_100000, ties.method = "min"))
- en: '[PRE3]{r}'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]{r}'
- en: state_text <- if_else(params$state == "District of Columbia", str_glue(
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: state_text <- if_else(params$state == "District of Columbia", str_glue(
- en: '"the District of Columbia"), str_glue("state of {params$state}"))'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"the District of Columbia"), str_glue("state of {params$state}"))'
- en: state_cases_per_100000 <- cases %>%
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: state_cases_per_100000 <- cases %>%
- en: filter(state.name == params$state) %>%
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: filter(state.name == params$state) %>%
- en: pull(cases_per_100000) %>%
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: pull(cases_per_100000) %>%
- en: comma()
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: comma()
- en: state_cases_rank <- cases %>%
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: state_cases_rank <- cases %>%
- en: filter(state.name == params$state) %>%
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: filter(state.name == params$state) %>%
- en: pull(case_rank)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: pull(case_rank)
- en: '[PRE4]{r fig.height = 8}'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]{r fig.height = 8}'
- en: set_urbn_defaults(style = "print")
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: set_urbn_defaults(style = "print")
- en: cases %>%
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: cases %>%
- en: mutate(highlight_state = if_else(state.name == params$state, "Y", "N")) %>%
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(highlight_state = if_else(state.name == params$state, "Y", "N")) %>%
- en: mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%
- en: ggplot(aes(
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(
- en: x = cases_per_100000,
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x = cases_per_100000,
- en: y = state.name,
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: y = state.name,
- en: fill = highlight_state
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: fill = highlight_state
- en: )) +
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: )) +
- en: geom_col() +
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: geom_col() +
- en: scale_x_continuous(labels = comma_format()) +
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: scale_x_continuous(labels = comma_format()) +
- en: theme(legend.position = "none") +
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: theme(legend.position = "none") +
- en: labs(
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: labs(
- en: y = NULL,
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: y = NULL,
- en: x = "Cases per 100,000"
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x = "Cases per 100,000"
- en: )
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The text and charts in the report come from the cases data frame, shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 报告中的文本和图表来自名为 cases 的数据框，如下所示：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you knit the document, you end up with the simple HTML file shown in [Figure
    7-1](chapter7.xhtml#fig7-1).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编织文档时，你会得到如 [图 7-1](chapter7.xhtml#fig7-1) 所示的简单 HTML 文件。
- en: '![](../images/fig7-1.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig7-1.jpg)'
- en: 'Figure 7-1: The Alabama report generated via R Markdown'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-1：通过 R Markdown 生成的阿拉巴马州报告
- en: You should recognize the R Markdown document’s YAML, R code chunks, inline code,
    and Markdown text from [Chapter 6](chapter6.xhtml).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能从 [第六章](chapter6.xhtml) 中认出 R Markdown 文档的 YAML、R 代码块、内联代码和 Markdown 文本。
- en: Defining Parameters
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义参数
- en: 'In R Markdown, *parameters* are variables that you set in the YAML to allow
    you to create multiple reports. Take a look at these two lines in the YAML:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R Markdown 中，*参数* 是你在 YAML 中设置的变量，允许你创建多个报告。看看 YAML 中的这两行：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This code defines a variable called state. You can use the state variable throughout
    the rest of the R Markdown document with the params$variable_name syntax, replacing
    variable_name with state or any other name you set in the YAML. For example, consider
    this inline R code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了一个名为 state 的变量。你可以在 R Markdown 文档的其余部分使用这个 state 变量，语法为 params$variable_name，variable_name
    替换为 state 或者你在 YAML 中设置的任何其他名称。例如，考虑以下内联 R 代码：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Any instance of the params$state parameter will be converted to "Alabama" when
    you knit it. This parameter and several others appear in the following code, which
    sets the first-level heading visible in [Figure 7-1](chapter7.xhtml#fig7-1):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编织文档时，params$state 参数的任何实例都会被转换为 "Alabama"。这个参数和其他几个参数出现在以下代码中，用于设置第一级标题，在
    [图 7-1](chapter7.xhtml#fig7-1) 中可见：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After knitting the document, you should see the following text:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 编织文档后，你应该看到以下文本：
- en: In the state of Alabama, there were 26,573 cases per 100,000 people in the last
    seven days. This puts Alabama at number 18 of 50 states and the District of Columbia.
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在阿拉巴马州，过去七天内每 10 万人中有 26,573 例病例。这使得阿拉巴马州在 50 个州和哥伦比亚特区中排名第 18。
- en: 'This text is automatically generated. The inline R code `r state_text` prints
    the value of the variable state_text, which is determined by a previous call to
    if_else(), shown in this code chunk:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这段文本是自动生成的。内联 R 代码 `r state_text` 打印变量 state_text 的值，该值由之前的 if_else() 调用决定，代码片段如下所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the value of params$states is "District of Columbia", this code sets state_text
    equal to "the District of Columbia". If params$state isn’t "District of Columbia",
    then state_text gets the value "state of", followed by the state name. This allows
    you to put state_text in a sentence and have it work no matter whether the state
    parameter is a state or the District of Columbia.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 params$states 的值是 "District of Columbia"，这段代码将 state_text 设置为 "the District
    of Columbia"。如果 params$state 不是 "District of Columbia"，那么 state_text 会得到 "state
    of"，后跟州名。这样，你可以将 state_text 放入句子中，并且无论 state 参数是州名还是哥伦比亚特区，它都能正常工作。
- en: Generating Numbers with Parameters
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用参数生成数字
- en: 'You can also use parameters to generate numeric values to include in the text.
    For example, to calculate the values of the state_cases_per_100000 and state_cases_rank
    variables dynamically, use the state parameter, as shown here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用参数生成数字值并将其包含在文本中。例如，要动态计算 state_cases_per_100000 和 state_cases_rank 变量的值，可以使用
    state 参数，如下所示：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First, this code filters the cases data frame (which contains data for all states)
    to keep only the data for the state in params$state. Then, the pull() function
    gets a single value from that data, and the comma() function from the scales package
    applies formatting to make state_cases_per_100000 display as 26,573 (rather than
    26573). Finally, the state_cases_per_100000 and state_case_rank variables are
    integrated into the inline R code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这段代码过滤了 cases 数据框（它包含所有州的数据），只保留 params$state 所指定的州的数据。接着，pull() 函数从该数据中提取单一值，scales
    包中的 comma() 函数对其进行格式化，使 state_cases_per_100000 显示为 26,573（而不是 26573）。最后，state_cases_per_100000
    和 state_case_rank 变量被集成到内联 R 代码中。
- en: Including Parameters in Visualization Code
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在可视化代码中包含参数
- en: 'The params$state parameter is used in other places as well, such as to highlight
    a state in the report’s bar chart. To see how to accomplish this, look at the
    following section from the last code chunk:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: params$state 参数在其他地方也有使用，比如在报告的柱状图中突出显示某个州。要查看如何实现这一点，请看以下来自最后一个代码块的部分：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code creates a variable called highlight_state. Within the cases data
    frame, the code checks whether state.name is equal to params$state. If it is,
    highlight_state gets the value Y. If not, it gets N. Here’s what the relevant
    columns look like after you run these two lines:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个名为 highlight_state 的变量。在 cases 数据框中，代码检查 state.name 是否等于 params$state。如果相等，highlight_state
    的值为 Y；否则为 N。运行这两行代码后，相关列的情况如下所示：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Later, the ggplot code uses the highlight_state variable for the bar chart’s
    fill aesthetic property, highlighting the state in params$state in yellow and
    coloring the other states blue. [Figure 7-2](chapter7.xhtml#fig7-2) shows the
    chart with Alabama highlighted.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 后面，ggplot 代码使用 highlight_state 变量作为柱状图填充美学属性，用黄色突出显示 params$state 中的州，将其他州染成蓝色。[图
    7-2](chapter7.xhtml#fig7-2) 显示了突出显示 Alabama 的图表。
- en: '![](../images/fig7-2.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig7-2.jpg)'
- en: 'Figure 7-2: Highlighting data in a bar chart using parameters'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-2：使用参数在柱状图中突出显示数据
- en: As you’ve seen, setting a parameter in the YAML allows you to dynamically generate
    text and charts in the knitted report. But you’ve generated only one report so
    far. How can you create all 51 reports? Your first thought might be to manually
    update the YAML by changing the parameter’s value from "Alabama" to, say, "Alaska"
    and then knitting the document again. While you *could* follow this process for
    all states, it would be tedious, which is what you’re trying to avoid. Instead,
    you can automate the report generation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在 YAML 中设置参数允许你在编织报告时动态生成文本和图表。但到目前为止，你只生成了一个报告。那么如何生成所有 51 个报告呢？你可能会想到手动更新
    YAML，将参数的值从“Alabama”改为“Alaska”，然后重新编织文档。虽然你*可以*按照这个流程为所有州生成报告，但这样做会很繁琐，这正是你想避免的。相反，你可以自动化报告生成过程。
- en: Creating an R Script
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 R 脚本
- en: To automatically generate multiple reports based on the template you’ve created,
    you’ll use an R script that changes the value of the parameters in the R Markdown
    document and then knits it. You’ll begin by creating an R script file named *render.R*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了基于你创建的模板自动生成多个报告，你将使用一个 R 脚本，该脚本会更改 R Markdown 文档中参数的值，然后编织文档。你将首先创建一个名为 *render.R*
    的 R 脚本文件。
- en: Knitting the Document with Code
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用代码编织文档
- en: 'Your script needs to be able to knit an R Markdown document. While you’ve seen
    how to do this using the Knit button, you can do the same thing with code. Load
    the rmarkdown package and then use its render() function as shown here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你的脚本需要能够编织 R Markdown 文档。虽然你已经看到过如何使用 Knit 按钮做到这一点，但你也可以通过代码来完成相同的操作。加载 rmarkdown
    包，然后使用其 render() 函数，如下所示：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function generates an HTML document called *urban-covid-budget-report.xhtml*.
    By default, the generated file has the same name as the R Markdown (*.Rmd*) document,
    with a different extension. The output_file argument assigns the file a new name,
    and the params argument specifies parameters that will override those in the R
    Markdown document itself. For example, this code tells R to use Alaska for the
    state parameter and save the resulting HTML file as *Alaska.xhtml*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数生成一个名为*urban-covid-budget-report.xhtml*的HTML文档。默认情况下，生成的文件与R Markdown（*.Rmd*）文档同名，但扩展名不同。`output_file`参数为文件指定一个新名称，`params`参数指定会覆盖R
    Markdown文档中的参数。例如，这段代码告诉R使用阿拉斯加作为`state`参数，并将生成的HTML文件保存为*Alaska.xhtml*。
- en: This approach to generating reports works, but to create all 51 reports, you’d
    have to manually change the state name in the YAML and update the render() function
    before running it for each report. In the next section, you’ll update your code
    to make it more efficient.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种生成报告的方法有效，但要生成所有51个报告，您必须手动更改YAML中的州名并更新`render()`函数，然后为每个报告运行它。在下一节中，您将更新代码以提高效率。
- en: Creating a Tibble with Parameter Data
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建包含参数数据的Tibble
- en: 'To write code that generates all your reports automatically, first you must
    create a *vector* (in colloquial terms, a list of items) of all the state names
    and the District of Columbia. To do this, you’ll use the built-in dataset state.name,
    which has all 50 state names in a vector:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写生成所有报告的自动化代码，首先必须创建一个*向量*（通俗地说，就是一个项的列表），其中包含所有州名和哥伦比亚特区。为此，您将使用内置数据集`state.name`，它包含了所有50个州的名称，存储在一个向量中：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code turns state.name into a tibble and then uses the rbind() function
    to add the District of Columbia to the list. The pull() function gets one single
    column and saves it as state. Here’s what the state vector looks like:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将`state.name`转换为一个tibble，并使用`rbind()`函数将哥伦比亚特区添加到列表中。`pull()`函数获取单一列并将其保存为`state`。以下是`state`向量的样子：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Rather than use render() with the input and output_file arguments, as you did
    earlier, you can pass it the params argument to give it parameters to use when
    knitting. To do so, create a tibble with the information needed to render all
    51 reports and save it as an object called reports, which you’ll pass to the render()
    function, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前使用`render()`并传递`input`和`output_file`参数不同，您可以将`params`参数传递给它，以便在编织时使用这些参数。为此，创建一个包含渲染所有51个报告所需信息的tibble，并将其保存为名为`reports`的对象，然后将其传递给`render()`函数，如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This code generates a tibble with 51 rows and 3 variables. In all rows, the
    input variable is set to the name of the R Markdown document. The value of output_file
    is set with str_glue() to be equal to the name of the state, followed by.*html*
    (for example, *Alabama.xhtml*).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成一个包含51行和3个变量的tibble。在所有行中，输入变量被设置为R Markdown文档的名称。`output_file`的值通过`str_glue()`函数设置为等于州名，后跟.*html*（例如，*Alabama.xhtml*）。
- en: 'The params variable is the most complicated of the three. It is what’s known
    as a *named list*. This data structure puts the data in the state: state_name
    format needed for the R Markdown document’s YAML. The map() function from the
    purrr package creates the named list, telling R to set the value of each row as
    state = "Alabama", then state = "Alaska", and so on, for all of the states. You
    can see these variables in the reports tibble:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`params`变量是三者中最复杂的。它被称为*命名列表*。这种数据结构将数据以`state: state_name`的格式放入R Markdown文档的YAML中。`purrr`包中的`map()`函数创建命名列表，告诉R将每一行的值设置为`state
    = "Alabama"`，然后是`state = "Alaska"`，依此类推，直到所有州的名称。您可以在`reports` tibble中看到这些变量：'
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The params variable shows up as <named list>, but if you open the tibble in
    the RStudio viewer (click **reports** in the Environment tab), you can see the
    output more clearly, as shown in [Figure 7-3](chapter7.xhtml#fig7-3).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`params`变量显示为<命名列表>，但如果您在RStudio查看器中打开tibble（点击环境选项卡中的**reports**），您可以更清晰地看到输出，如[图7-3](chapter7.xhtml#fig7-3)所示。'
- en: '![](../images/fig7-3.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig7-3.jpg)'
- en: 'Figure 7-3: The named list column in the RStudio viewer'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-3：RStudio查看器中的命名列表列
- en: This view allows you to see the named list in the params variable, with the
    state variable equal to the name of each state.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图允许您在`params`变量中查看命名列表，并且`state`变量等于每个州的名称。
- en: 'Once you’ve created the reports tibble, you’re ready to render the reports.
    The code to do so is only one line long:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了`reports` tibble，就可以准备渲染报告。渲染报告的代码只有一行：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This pwalk() function (from the purrr package) has two arguments: a data frame
    or tibble (reports, in this case) and a function that runs for each row of this
    tibble, render().'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`pwalk()`函数（来自`purrr`包）有两个参数：一个数据框或tibble（在这里是`reports`）和一个对tibble每一行运行的函数（即`render()`）。
- en: NOTE
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*You don’t include the open and closing parentheses when passing the render()
    function to pwalk().*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*在将`render()`函数传递给`pwalk()`时，不要包含开闭括号。*'
- en: 'Running this code runs the render() function for each row in reports, passing
    in the values for input, output_file, and params. This is equivalent to entering
    code like the following to run the render() function 51 times (for 50 states plus
    the District of Columbia):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码会为报告中的每一行运行`render()`函数，并传入input、output_file和params的值。这相当于输入如下代码，执行`render()`函数51次（涵盖50个州和哥伦比亚特区）：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here’s the full R script file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的R脚本文件：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After running the pwalk(reports, render) code, you should see 51 HTML documents
    appear in the files pane in RStudio. Each document consists of a report for that
    state, complete with a customized graph and accompanying text.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`pwalk(reports, render)`代码后，你应该能在RStudio的文件面板中看到51个HTML文档。每个文档都包含该州的报告，附带定制的图表和相应的文本。
- en: Best Practices
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最佳实践
- en: While powerful, parameterized reporting can present some challenges. For example,
    make sure to consider outliers in your data. In the case of the state reports,
    Washington, DC, is an outlier because it isn’t technically a state. The Urban
    Institute team altered the language in the report text so that it didn’t refer
    to Washington, DC, as a state by using an if_else() statement, as you saw at the
    beginning of this chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管参数化报告功能强大，但也可能会带来一些挑战。例如，要确保考虑到数据中的离群值。在州报告的情况下，哥伦比亚特区是一个离群值，因为它 technically
    不是一个州。Urban Institute团队通过使用`if_else()`语句（如本章开头所示）修改了报告文本的语言，使其不再将哥伦比亚特区称为州。
- en: Another best practice is to manually generate and review the reports whose parameter
    values have the shortest (Iowa, Ohio, and Utah in the state fiscal briefs) and
    longest (District of Columbia) text lengths. This way, you can identify places
    where the text length may have unexpected results, such as cut-off chart titles
    or page breaks disrupted by text running onto multiple lines. A few minutes of
    manual review can make the process of autogenerating multiple reports much smoother.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个最佳实践是手动生成并审核那些参数值最短（例如州财政简报中的爱荷华州、俄亥俄州和犹他州）和最长（哥伦比亚特区）文本长度的报告。这样，你可以识别出可能会导致意外结果的地方，例如图表标题被截断或文本溢出导致页面断裂。花几分钟进行手动审查，可以使自动生成多个报告的过程更加顺畅。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you re-created the Urban Institute’s state fiscal briefs using
    parameterized reporting. You learned how to add a parameter to your R Markdown
    document, then use an R script to set the value of that parameter and knit the
    report.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你重新创建了Urban Institute的州财政简报，采用了参数化报告的方法。你学会了如何在R Markdown文档中添加一个参数，然后使用R脚本设置该参数的值并生成报告。
- en: 'Automating report production can be a huge time-saver, especially as the number
    of reports you need to generate grows. Consider another project at the Urban Institute:
    making county-level reports. With over 3,000 counties in the United States, creating
    these reports by hand isn’t realistic. Not only that, but if the Urban Institute
    employees were to make their reports using SPSS, Excel, and Word, they would have
    to copy and paste values between programs. Humans are fallible, and mistakes occur,
    no matter how hard we try to avoid them. Computers, on the other hand, never make
    copy-and-paste errors. Letting computers handle the tedious work of generating
    multiple reports reduces the chance of error significantly.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化报告生产可以节省大量时间，尤其是在你需要生成大量报告时。考虑Urban Institute的另一个项目：制作县级报告。美国有超过3000个县，手工制作这些报告不现实。而且，如果Urban
    Institute的员工使用SPSS、Excel和Word来制作报告，他们将不得不在程序之间复制粘贴值。人类是会犯错的，无论我们如何努力避免，错误总会发生。而计算机则不会发生复制粘贴错误。让计算机处理生成多个报告的繁琐工作，可以大大减少错误的发生几率。
- en: When you’re starting out, parameterized reporting might feel like a heavy lift,
    as you have to make sure that your code works for every version of your report.
    But once you have your R Markdown document and accompanying R script file, you
    should find it easy to produce multiple reports at once, saving you work in the
    end.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 刚开始时，参数化报告可能会让人觉得有些困难，因为你需要确保代码适用于报告的每个版本。但一旦你拥有了 R Markdown 文档和配套的 R 脚本文件，你会发现一次性生成多个报告变得很容易，最终能够节省大量工作量。
- en: Additional Resources
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外资源
- en: Data@Urban Team, “Iterated Fact Sheets with R Markdown,” Medium, July 24, 2018,
    *[https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)*.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Data@Urban 团队，“使用 R Markdown 创建迭代版数据报告，”Medium，2018年7月24日，*[https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)*。
- en: Data@Urban Team, “Using R Markdown to Track and Publish State Data,” Medium,
    April 21, 2021, *[https://urban-institute.medium.com/using-r-markdown-to-track-and-publish-state-data-d1291bfa1ec0](https://urban-institute.medium.com/using-r-markdown-to-track-and-publish-state-data-d1291bfa1ec0)*.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Data@Urban 团队，“使用 R Markdown 跟踪和发布州数据，”Medium，2021年4月21日，*[https://urban-institute.medium.com/using-r-markdown-to-track-and-publish-state-data-d1291bfa1ec0](https://urban-institute.medium.com/using-r-markdown-to-track-and-publish-state-data-d1291bfa1ec0)*。
