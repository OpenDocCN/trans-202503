["```\ndiffarray = []\n1 each key guess i of the secret key in range {0x00, 0x01, ..., 0xFE, 0xFF}:\n    zerosarray = new array\n    onesarray = new array\n    2 for each trace d in range {0,1, ..., D-1}:\n        3 calculate hypothetical output h = lookup_table[i XOR p[d]]\n\n        4 if the LSB of h == 0:\n            5 Append t[d] to zerosarray[]\n        else:\n            6 Append t[d] to onesarray[]\n\n    7 difference = mean(onesarray) â€“ mean(zerosarray)\n    append difference to diffarray[]\n```", "```\ndef measure_power(din):\n    #secret byte\n    skey = 0b10010111 # 0x97\n\n    #Calculate result\n    res = lookup[din ^ skey]\n```", "```\nBest guess from bit 0: 0x97\nBest guess from bit 1: 0x97\nBest guess from bit 2: 0x97\nBest guess from bit 3: 0x97\nBest guess from bit 4: 0x97\nBest guess from bit 5: 0x97\nBest guess from bit 6: 0x97\nBest guess from bit 7: 0x97\n```", "```\nsbox[guess ^ input_data[d]]\n```", "```\n#include <stdio.h>\n#include <stdint.h>\n#include \"aes.h\"\n#include \"hardware.h\"\n\nint main(void){\n    uint8_t key[16];\n    uint8_t ptdata[16];\n    uint8_t ctdata[16];\n    uint8_t i;\n    setup_hardware();\n    while(1){\n        //Read key\n        for(i = 0; i < 16; i++){\n            scanf(\"%02x\", key + i);\n        }\n\n        //Read plaintext\n        for(i = 0; i < 16; i++){\n            scanf(\"%02x\", ptdata + i);\n        }\n\n        //Do encryption\n        trigger_high();\n        aes_128(key, ptdata, ctdata);\n        trigger_low();\n //Return ciphertext\n        for(i = 0; i < 16; i++){\n            printf(\"%02x\", ctdata[i]);\n        }\n\n    };\n    return 0;\n}\n```", "```\n2b7e151628aed2a6abf7158809cf4f3c 6bc1bee22e409f96e93d7e117393172a\n```"]