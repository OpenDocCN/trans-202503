- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">3</samp> <samp class="SANS_Dogma_OT_Bold_B_11">USING
    ATTINY MICROCONTROLLERS</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: In your Arduino journey so far, you’ve likely most often used the microchip
    ATmega328P-PU. For smaller projects, however, you can save money and power by
    using smaller microcontrollers such as the ATtiny85\. In this chapter, you’ll
    learn how to configure the Arduino IDE for ATtiny microchips.
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up the Arduino IDE for your ATtiny85 and flashing an LED to demonstrate
    that the toolchain is working, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the ATtiny pin references for the Arduino environment and the functions
    available for ATtiny use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a reset button to ATtiny circuits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use port manipulation with ATtiny
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the ATtiny operating speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll also construct a quick-read thermometer and an Arduino programming shield
    that lets you easily upload code to ATtiny85 microcontrollers.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The ATtiny85 Microcontroller</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Figure 3-1](chapter3.xhtml#fig3-1) shows the compact ATtiny85 microcontroller.'
  prefs: []
  type: TYPE_NORMAL
- en: '![AN ATTINY85 MICROCONTROLLER IN A SOLDERLESS BREADBOARD](../images/fig3-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-1: The ATtiny85 microcontroller
    in through-hole packaging</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to size, there are several important differences between the ATtiny85
    and the usual ATmega328P-PU microcontrollers that affect their use in the Arduino
    environment, as demonstrated in [Figure 3-2](chapter3.xhtml#fig3-2) and [Table
    3-1](chapter3.xhtml#tab3-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig3-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-2: Pin diagrams for
    the ATtiny85, left, and the ATmega328P-PU, right.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 3-1:</samp> <samp class="SANS_Futura_Std_Book_11">Specifications
    for the ATtiny85 and the ATmega328P-PU</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_Futura_Std_Heavy_B_11">ATtiny85</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ATmega328P-PU</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Maximum processing speed</samp> | <samp
    class="SANS_Futura_Std_Book_11">20 MHz</samp> | <samp class="SANS_Futura_Std_Book_11">16
    MHz</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Number of digital pins</samp> | <samp
    class="SANS_Futura_Std_Book_11">Up to 5</samp> | <samp class="SANS_Futura_Std_Book_11">14</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Number of analog input pins</samp>
    | <samp class="SANS_Futura_Std_Book_11">Up to 3</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Flash memory</samp> | <samp class="SANS_Futura_Std_Book_11">8KB</samp>
    | <samp class="SANS_Futura_Std_Book_11">32KB</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Static random access memory (SRAM)</samp>
    | <samp class="SANS_Futura_Std_Book_11">512 bytes</samp> | <samp class="SANS_Futura_Std_Book_11">2KB</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: This table helps you determine which electronic components you can realistically
    use with your ATtiny85\. In short, the ATtiny lends itself to projects with a
    limited budget that require few input and output pins but that could benefit from
    increased energy efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">ATtiny Chips with the Arduino IDE</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The High-Low Tech group at the Massachusetts Institute of Technology first created
    the code to use ATtiny85 microcontrollers with the Arduino IDE. Before you implement
    this code, however, you’ll need to install ATtiny support on the Arduino IDE.
  prefs: []
  type: TYPE_NORMAL
- en: With an ATtiny85 on hand, open the Arduino IDE and then select **File** ![](../images/arr.png)
    **Preferences**. Once the Preferences dialog appears, click the small button to
    the right of the Additional Boards Manager URLs field. The Additional Boards Manager
    URLs dialog will appear, as shown in [Figure 3-3](chapter3.xhtml#fig3-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ARDUINO IDE’S ADDITIONAL BOARD MANAGER INPUT BOX](../images/fig3-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-3: The Arduino IDE
    Additional Boards Manager URLs dialog</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following URL into the field. If you already have other URLs in the
    box left over from previous projects, place a comma at the end of the last URL
    and enter this new line after the comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Click **OK** to close the additional URL dialog and then click **OK** to close
    the Preferences dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Close and reopen the IDE. If your computer is not connected to the internet,
    connect it now. Select **Tools** ![](../images/arr.png) **Boards Manager**. Once
    the Boards Manager opens on the left side of the IDE, enter **attiny** in the
    search box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ATtiny package will appear, as shown in [Figure 3-3](chapter3.xhtml#fig3-3).
    Click **Install** and then wait a few moments for the installation to complete.
    You can see the progress in the IDE output window at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, check that the installation was successful by selecting **Tools** ![](../images/arr.png)
    **Board** ![](../images/arr.png) **attiny** ![](../images/arr.png) **ATtiny25/45/85**,
    as shown in [Figure 3-4](chapter3.xhtml#fig3-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![SETTING THE BOARD TYPE TO ATTINY85 IN ARDUINO IDE](../images/fig3-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-4: Board menu in which
    the ATtiny85 is now available</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve configured the IDE, you’ll need to configure the *hardware programmer*,
    or the interface between the computer and the ATtiny85, using an Arduino Uno or
    compatible board. Open the Arduino IDE and select **File** ![](../images/arr.png)
    **Examples** ![](../images/arr.png) **11.ArduinoISP** ![](../images/arr.png) **ArduinoISP**,
    as shown in [Figure 3-5](chapter3.xhtml#fig3-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![LOADING THE ARDUINO AS AN ISP PROGRAMMER SKETCH IN ARDUINO IDE](../images/fig3-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-5: ArduinoISP sketch
    selection</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: After you upload this sketch to your Arduino Uno or compatible board, the board
    will act as a hardware programmer. You can always upload other sketches to the
    Uno, but if you want to upload a sketch to your ATtiny, you will need to upload
    the ArduinoISP sketch beforehand on the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check that your hardware and software environment is functioning with
    a typical sketch that blinks an LED.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #11: Building the “Hello,
    World” of Hardware</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This project won’t cause your ATtiny85 to print “Hello, world” to a screen
    but rather does the hardware equivalent: flashing an LED to demonstrate that the
    toolchain is working.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ATtiny85 microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 1 kΩ, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10 µF, 16 V electrolytic capacitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 3-6](chapter3.xhtml#fig3-6) on your
    solderless breadboard and connect the points labeled 5V, GND, RESET, and D10 through
    D13 to the Arduino’s respective pins.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #11](../images/fig3-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-6: The schematic for
    Project #11</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The connections to the Arduino’s SPI bus via D10 through D13, as well as the
    connection between the 10 µF capacitor and the Arduino’s reset pin, are required
    only for uploading each ATtiny project. Remove them once you’ve finished uploading
    the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll change the IDE settings to accommodate the hardware changes. Open
    the IDE and change the board type to **ATtiny25/45/85**, as was shown in [Figure
    3-4](chapter3.xhtml#fig3-4). Select **Tools** ![](../images/arr.png) **Clock**
    ![](../images/arr.png) **Internal 1 MHz**. Finally, change the programmer by selecting
    **Tools** ![](../images/arr.png) **Arduino as ISP**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter and upload the Project #11 sketch. The LED should start blinking
    with a delay of about one second, confirming that you have a working ATtiny development
    environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The physical pin 2 on the ATtiny85 is digital pin 3 in the Arduino environment,
    so the sketch declares pin 3 as an output ❶, turns it on ❷, and then turns it
    off after a delay ❸.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll now introduce three things you need to know before building the next project:
    the differences between Arduino Uno and ATtiny pin references, how to add a reset
    button to your ATtiny circuit, and the Arduino functions that are available to
    the ATtiny versions of Arduino projects.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Arduino Uno vs. ATtiny85 Pin References</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The reference numbers in the Arduino sketches for physical pins on the ATtiny85
    differ from those you’re used to with typical Arduino Uno and compatible boards.
    Thus, when you’re making your own ATtiny85-based projects using the Arduino environment,
    you’ll need to refer to [Table 3-2](chapter3.xhtml#tab3-2) to determine the ATtiny85’s
    physical pins and their matching pins in the Arduino Uno environment.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 3-2:</samp> <samp class="SANS_Futura_Std_Book_11">ATtiny85-to-Arduino
    Pin Reference</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ATtiny physical pin</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Arduino (1)</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Arduino
    (2)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 3 (D3)</samp> | <samp class="SANS_Futura_Std_Book_11">Analog pin 3 (A3)</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 4 (D4)</samp> | <samp class="SANS_Futura_Std_Book_11">Analog pin 2 (A2)</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 0 (D0)</samp> | <samp class="SANS_Futura_Std_Book_11">Pulse-width modulation
    (use</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">analogWrite(0)</samp><samp
    class="SANS_Futura_Std_Book_11">)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 1 (D1)</samp> | <samp class="SANS_Futura_Std_Book_11">Pulse-width modulation
    (use</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">analogWrite(1)</samp><samp
    class="SANS_Futura_Std_Book_11">)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 2 (D2)</samp> | <samp class="SANS_Futura_Std_Book_11">Analog pin 1 (A1)</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: The HIGH and LOW signals that appear on D0 through D2 while a sketch is uploading
    will trigger any connected external items, such as relays. In these cases, it’s
    better to upload the sketch to the microcontroller and then insert it into the
    final project.
  prefs: []
  type: TYPE_NORMAL
- en: As the ATtiny85 shares the same type of basic architecture with the ATmega328-type
    microcontrollers, you can use port manipulation as described in [Chapter 2](chapter2.xhtml)
    to control the I/O pins. The ATtiny’s I/O pins are on the least 4 bits of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> (bits 3 to 0) and match physical
    pins 2, 7, 6, and 5\. Just leave the higher 4 bits as 0 with your <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> functions.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding Reset Buttons to ATtiny85 Circuits</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with other Arduino and compatible boards, it’s possible to add a reset button
    to your ATtiny85 circuits. You’ll use this in the next project, and it may come
    in handy for easily restarting future projects.
  prefs: []
  type: TYPE_NORMAL
- en: An ATtiny85 reset button connects physical pin 1 and GND, along with a 10 kΩ
    pull-up resistor, as the circuit resets when pin 1 is connected to GND. [Figure
    3-7](chapter3.xhtml#fig3-7) shows the schematic.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR THE RESET BUTTON WITH ATTINY85](../images/fig3-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-7: The reset button
    schematic for the ATtiny85</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: When designing circuits that won’t connect to a host Arduino board during operation,
    place a 0.1 µF capacitor across the 5V and GND lines to maintain a smoother power
    supply.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Arduino Functions Available for the
    ATtiny85</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re familiar with the Arduino environment and want to get straight into
    your own ATtiny-based projects, note that there are fewer Arduino functions available
    for the ATtiny85 than on larger microcontrollers, but there are still plenty:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">analogRead()</samp>    Tells the
    ADC to return a value between 0 and 1,023 representing a voltage range of 0 to
    5 V DC
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">analogWrite()</samp>    Generates
    PWM output
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">delay()</samp>    Pauses operation
    of the sketch (in milliseconds)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">delayMicroseconds()</samp>    Pauses
    operation of the sketch (in microseconds)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">digitalWrite()</samp>    Turns
    digital output pins on or off
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">digitalRead()</samp>    Reads the
    status of digital input pin
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">micros()</samp>    Returns the
    number of microseconds since the sketch started operation
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">millis()</samp>    Returns the
    number of milliseconds since the sketch started operation
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pinMode()</samp>    Sets the status
    of the digital pins
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pulseIn()</samp>    Returns the
    length of a pulse measured on a digital input
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">shiftOut()</samp>    Shifts a byte
    of data out of a digital pin
  prefs: []
  type: TYPE_NORMAL
- en: If you’re unfamiliar with any of these functions, you can review my book *Arduino
    Workshop*, 2nd edition, or visit the Arduino language reference at [*https://<wbr>www<wbr>.arduino<wbr>.cc<wbr>/reference<wbr>/en<wbr>/*](https://www.arduino.cc/reference/en/).
  prefs: []
  type: TYPE_NORMAL
- en: You may also use various Arduino libraries when working with the ATtiny85\.
    However, if they’re designed to access GPIO pins, you’ll need to modify the library
    code to update them for ATtiny85 pin references. Some Arduino libraries may also
    require more memory than the ATtiny85 provides.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #12: Creating a Quick-Read
    Thermometer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you’ll use the popular TMP36 temperature sensor to create
    a thermometer that records and displays the temperature in three predetermined
    ranges: too cold, just right, and too hot. This also demonstrates how to use the
    analog input and digital output pins on your ATtiny85 in the Arduino environment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ATtiny85 microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10 kΩ, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One tactile button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 0.1 µF ceramic capacitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three LEDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A TMP36 analog temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assemble the circuit as shown in [Figure 3-8](chapter3.xhtml#fig3-8) on the
    solderless breadboard. This schematic shows only the final product, but you’ll
    first need to wire the connections to upload the sketch—you can refer to Project
    #11 to refresh your memory of how to do this. Use your Arduino Uno as a quick
    5 V power supply.'
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #12](../images/fig3-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-8: The schematic for
    Project #12</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve uploaded the sketch, remove the wires from the Arduino Uno’s D10
    through D13 pins and the RESET pin, but leave the 5V and GND to power the thermometer.
    When the sketch starts running, one of three LEDs should depict the temperature
    range set in the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The sketch defines the values for the readout LED pins and sets them to LOW
    ❶. You can set your own values for hot and cold ❷; a “normal” temperature will
    be above the <samp class="SANS_TheSansMonoCd_W5Regular_11">coldTemp</samp> value
    and below or equal to the <samp class="SANS_TheSansMonoCd_W5Regular_11">hotTemp</samp>
    value.
  prefs: []
  type: TYPE_NORMAL
- en: The sketch sets the digital pins to outputs ❸ and then loops, taking the value
    from the temperature sensor ❹ and converting it to degrees Celsius ❺. Finally,
    it determines the temperature to be cold ❻, normal ❼, or hot ❽ and turns on the
    appropriate LED.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Increasing the ATtiny85’s Speed</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ATtiny85 can operate at three different speeds (in the Arduino environment
    and otherwise): 1 MHz (the default speed), 8 MHz, or 16 MHz. So far, your projects
    have used the default speed, which requires the least power and also works well
    for battery-powered projects. For projects involving more computation, you’ll
    need to change the speed to 8 MHz or greater, which will use more power.'
  prefs: []
  type: TYPE_NORMAL
- en: In preparation for the next project, you’ll change the operating speed by using
    the IDE to burn a new *bootloader*—the software loaded in the microcontroller
    that enables it to receive code via the SPI or USB connection—to the ATtiny85\.
    This erases the sketch last uploaded and sets the speed of the oscillator inside
    the microcontroller, which determines the operation speed.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Oscillator Speed</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set up your circuit as you would to upload a sketch to your microcontroller.
    Next, open the IDE and select **Tools** ![](../images/arr.png) **Clock** ![](../images/arr.png)
    **Internal 16 MHz**, as shown in [Figure 3-9](chapter3.xhtml#fig3-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![CHANGING ATTINY85 CLOCK SPEED IN ARDUINO IDE](../images/fig3-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-9: Preparing to change
    the clock speed</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Next, select **Tools** ![](../images/arr.png) **Burn Bootloader**. The operation
    should complete after a few moments, as shown in [Figure 3-10](chapter3.xhtml#fig3-10).
  prefs: []
  type: TYPE_NORMAL
- en: '![ARDUINO IDE STATING THAT THE BOOTLOADER BURNING IS COMPLETED](../images/fig3-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-10: The Arduino IDE
    after completing the bootloader burn</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Your sketches should now operate at 16 MHz when uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Oscillator Accuracy</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The surrounding temperature can alter the accuracy of your microcontroller’s
    speed. This is generally not a problem when you’re simply using delays to blink
    LEDs or other simple tasks, but it can become an issue if you’re using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">micros()</samp>
    functions for more exact timing. For example, the speed can vary +/−10 percent
    with an external temperature of around 25°C.
  prefs: []
  type: TYPE_NORMAL
- en: The solution is to use an external crystal circuit, like the Arduino Uno and
    other boards do. You’ll need two 22 pF ceramic capacitors and an 8, 16, or 20
    MHz through-hole HC-49-type crystal like the one in [Figure 3-11](chapter3.xhtml#fig3-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![A THROUGH-HOLE HC-49-TYPE CRYSTAL](../images/fig3-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-11: A through-hole
    HC-49-type crystal</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*If you made the “breadboard Arduino” described in* Arduino Workshop*, 2nd
    edition, you’re familiar with this type of circuit.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-12](chapter3.xhtml#fig3-12) shows the crystal oscillator circuit
    addition to your ATtiny85.'
  prefs: []
  type: TYPE_NORMAL
- en: '![AN ATTINY85 CIRCUIT SHOWING AN EXTERNAL CRYSTAL SUB-CIRCUIT](../images/fig3-12.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-12: An ATtiny85 circuit
    with an external crystal subcircuit</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: When using an external crystal, don’t forget to set the oscillator speed to
    external and match the crystal frequency. The one drawback to implementing an
    external crystal is that it uses digital pins 2 and 3, meaning you can no longer
    use them for outputs or inputs.
  prefs: []
  type: TYPE_NORMAL
- en: The next project prepares you to use the ATtiny85 in compact Arduino-compatible
    projects on a regular basis in your own future work.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #13: Creating an ATtiny85
    Programming Shield</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This project creates a small shield you can use to upload sketches to your ATtiny
    microcontrollers using the Arduino Uno. The shield contains all the required circuitry,
    as well as two LEDs for quick prototyping or experimentation. You can then remove
    the microcontroller from the shield and use it for your own separate projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Project #13 PCB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 10 µF, 16 V electrolytic capacitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 5 mm LEDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 × 40 inline 2.54 mm header pins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An eight-pin IC socket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 3-13](chapter3.xhtml#fig3-13) shows the schematic for this project.'
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #13](../images/fig3-13.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-13: The schematic
    for Project #13</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To assemble the circuit, connect the parts as labeled on the PCB in [Figure
    3-14](chapter3.xhtml#fig3-14). Start with the resistors and then the IC socket.
    Next, fit the capacitor, taking note of the polarity as shown on the PCB. Then
    fit the LEDs, with their short legs matching the PCB’s square holes.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PCB FOR PROJECT #13](../images/fig3-14.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-14: The PCB for Project
    #13</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, trim the inline header pins so you have one six-pin and one five-pin
    length, and then drop them into an Arduino Uno, as shown in [Figure 3-15](chapter3.xhtml#fig3-15).
  prefs: []
  type: TYPE_NORMAL
- en: '![USING THE ARDUINO BOARD TO LINE UP PIN HEADERS FOR THE PROGRAMMING SHIELD](../images/fig3-15.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-15: Preparing the
    inline header pins</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Place the PCB on top of the headers and solder the pins as shown in [Figure
    3-16](chapter3.xhtml#fig3-16).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE COMPLETED SHIELD MOUNTED ON AN ARDUINO UNO](../images/fig3-16.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-16: The assembled
    shield</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You can now use this shield to easily upload sketches by removing the shield
    when uploading the Arduino as an ISP sketch and then inserting the shield when
    uploading the sketch for the ATtiny. This makes it faster and easier to set up
    ATtiny85-based projects in the future, allowing you to avoid manually wiring from
    the Uno to a solderless breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter showed you how to use ATtiny microcontrollers for smaller, simpler,
    and less expensive Arduino-compatible projects. The Arduino programming shield
    also gave you a faster way to upload code to the ATtiny.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to keep your Arduino running with a watchdog
    timer.
  prefs: []
  type: TYPE_NORMAL
