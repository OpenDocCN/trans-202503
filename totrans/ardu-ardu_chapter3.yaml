- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">3</samp> <samp class="SANS_Dogma_OT_Bold_B_11">USING
    ATTINY MICROCONTROLLERS</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">3</samp> <samp class="SANS_Dogma_OT_Bold_B_11">使用
    ATtiny 微控制器</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: In your Arduino journey so far, you’ve likely most often used the microchip
    ATmega328P-PU. For smaller projects, however, you can save money and power by
    using smaller microcontrollers such as the ATtiny85\. In this chapter, you’ll
    learn how to configure the Arduino IDE for ATtiny microchips.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在你的 Arduino 旅程中，你可能最常使用的是微芯片 ATmega328P-PU。然而，对于较小的项目，你可以通过使用像 ATtiny85
    这样的微控制器来节省成本和功耗。本章将教你如何为 ATtiny 微芯片配置 Arduino IDE。
- en: 'After setting up the Arduino IDE for your ATtiny85 and flashing an LED to demonstrate
    that the toolchain is working, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在为你的 ATtiny85 配置 Arduino IDE，并通过闪烁 LED 演示工具链正常工作后，你将学习如何：
- en: Understand the ATtiny pin references for the Arduino environment and the functions
    available for ATtiny use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 ATtiny 引脚参考及其在 Arduino 环境中的功能
- en: Add a reset button to ATtiny circuits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 ATtiny 电路添加重置按钮
- en: Use port manipulation with ATtiny
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ATtiny 进行端口操作
- en: Change the ATtiny operating speed
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 ATtiny 的操作速度
- en: You’ll also construct a quick-read thermometer and an Arduino programming shield
    that lets you easily upload code to ATtiny85 microcontrollers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将构建一个快速读取的温度计，并设计一个 Arduino 编程扩展板，让你轻松将代码上传到 ATtiny85 微控制器。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The ATtiny85 Microcontroller</samp>
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">ATtiny85 微控制器</samp>
- en: '[Figure 3-1](chapter3.xhtml#fig3-1) shows the compact ATtiny85 microcontroller.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-1](chapter3.xhtml#fig3-1) 展示了紧凑型的 ATtiny85 微控制器。'
- en: '![AN ATTINY85 MICROCONTROLLER IN A SOLDERLESS BREADBOARD](../images/fig3-1.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![ATtiny85 微控制器在无焊接面包板上的样子](../images/fig3-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-1: The ATtiny85 microcontroller
    in through-hole packaging</samp>'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-1：ATtiny85 微控制器的通孔封装</samp>
- en: In addition to size, there are several important differences between the ATtiny85
    and the usual ATmega328P-PU microcontrollers that affect their use in the Arduino
    environment, as demonstrated in [Figure 3-2](chapter3.xhtml#fig3-2) and [Table
    3-1](chapter3.xhtml#tab3-1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了尺寸外，ATtiny85 和常见的 ATmega328P-PU 微控制器之间还有一些重要的差异，这些差异影响它们在 Arduino 环境中的使用，正如在[图
    3-2](chapter3.xhtml#fig3-2)和[表 3-1](chapter3.xhtml#tab3-1)中所示。
- en: '![](../images/fig3-2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig3-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-2: Pin diagrams for
    the ATtiny85, left, and the ATmega328P-PU, right.</samp>'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-2：ATtiny85（左）和 ATmega328P-PU（右）的引脚图。</samp>
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 3-1:</samp> <samp class="SANS_Futura_Std_Book_11">Specifications
    for the ATtiny85 and the ATmega328P-PU</samp>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 3-1：</samp> <samp class="SANS_Futura_Std_Book_11">ATtiny85
    和 ATmega328P-PU 的规格</samp>
- en: '|  | <samp class="SANS_Futura_Std_Heavy_B_11">ATtiny85</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ATmega328P-PU</samp>
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_Futura_Std_Heavy_B_11">ATtiny85</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ATmega328P-PU</samp>
    |'
- en: '| --- | --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Maximum processing speed</samp> | <samp
    class="SANS_Futura_Std_Book_11">20 MHz</samp> | <samp class="SANS_Futura_Std_Book_11">16
    MHz</samp> |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">最大处理速度</samp> | <samp class="SANS_Futura_Std_Book_11">20
    MHz</samp> | <samp class="SANS_Futura_Std_Book_11">16 MHz</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Number of digital pins</samp> | <samp
    class="SANS_Futura_Std_Book_11">Up to 5</samp> | <samp class="SANS_Futura_Std_Book_11">14</samp>
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">数字引脚数量</samp> | <samp class="SANS_Futura_Std_Book_11">最多
    5</samp> | <samp class="SANS_Futura_Std_Book_11">14</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Number of analog input pins</samp>
    | <samp class="SANS_Futura_Std_Book_11">Up to 3</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">模拟输入引脚数量</samp> | <samp class="SANS_Futura_Std_Book_11">最多
    3</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Flash memory</samp> | <samp class="SANS_Futura_Std_Book_11">8KB</samp>
    | <samp class="SANS_Futura_Std_Book_11">32KB</samp> |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">闪存</samp> | <samp class="SANS_Futura_Std_Book_11">8KB</samp>
    | <samp class="SANS_Futura_Std_Book_11">32KB</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Static random access memory (SRAM)</samp>
    | <samp class="SANS_Futura_Std_Book_11">512 bytes</samp> | <samp class="SANS_Futura_Std_Book_11">2KB</samp>
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">静态随机存取内存（SRAM）</samp> | <samp class="SANS_Futura_Std_Book_11">512
    字节</samp> | <samp class="SANS_Futura_Std_Book_11">2KB</samp> |'
- en: This table helps you determine which electronic components you can realistically
    use with your ATtiny85\. In short, the ATtiny lends itself to projects with a
    limited budget that require few input and output pins but that could benefit from
    increased energy efficiency.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格帮助您确定哪些电子组件可以与ATtiny85一起实际使用。简而言之，ATtiny适合预算有限、需要较少输入输出引脚但能从提高能效中受益的项目。
- en: <samp class="SANS_Futura_Std_Bold_B_11">ATtiny Chips with the Arduino IDE</samp>
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用Arduino IDE的ATtiny芯片</samp>
- en: The High-Low Tech group at the Massachusetts Institute of Technology first created
    the code to use ATtiny85 microcontrollers with the Arduino IDE. Before you implement
    this code, however, you’ll need to install ATtiny support on the Arduino IDE.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 麻省理工学院的高低技术小组首先创建了在Arduino IDE中使用ATtiny85微控制器的代码。然而，在实现此代码之前，您需要在Arduino IDE中安装ATtiny支持。
- en: With an ATtiny85 on hand, open the Arduino IDE and then select **File** ![](../images/arr.png)
    **Preferences**. Once the Preferences dialog appears, click the small button to
    the right of the Additional Boards Manager URLs field. The Additional Boards Manager
    URLs dialog will appear, as shown in [Figure 3-3](chapter3.xhtml#fig3-3).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 手头有ATtiny85时，打开Arduino IDE，然后选择**文件** ![](../images/arr.png) **偏好设置**。当偏好设置对话框出现时，点击附加板管理器URLs字段右侧的小按钮。附加板管理器URLs对话框将出现，如[图3-3](chapter3.xhtml#fig3-3)所示。
- en: '![A SCREENSHOT OF ARDUINO IDE’S ADDITIONAL BOARD MANAGER INPUT BOX](../images/fig3-3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino IDE附加板管理器输入框的截图](../images/fig3-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-3: The Arduino IDE
    Additional Boards Manager URLs dialog</samp>'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-3：Arduino IDE附加板管理器网址对话框</samp>
- en: 'Enter the following URL into the field. If you already have other URLs in the
    box left over from previous projects, place a comma at the end of the last URL
    and enter this new line after the comma:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在字段中输入以下URL。如果您之前的项目中已经有其他URL，请在最后一个URL后加上逗号，并在逗号后输入这一新行：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Click **OK** to close the additional URL dialog and then click **OK** to close
    the Preferences dialog.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**关闭附加URL对话框，然后点击**确定**关闭偏好设置对话框。
- en: Close and reopen the IDE. If your computer is not connected to the internet,
    connect it now. Select **Tools** ![](../images/arr.png) **Boards Manager**. Once
    the Boards Manager opens on the left side of the IDE, enter **attiny** in the
    search box.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭并重新打开IDE。如果您的计算机未连接互联网，请现在连接。选择**工具** ![](../images/arr.png) **板管理器**。当板管理器在IDE的左侧打开时，在搜索框中输入**attiny**。
- en: 'The ATtiny package will appear, as shown in [Figure 3-3](chapter3.xhtml#fig3-3).
    Click **Install** and then wait a few moments for the installation to complete.
    You can see the progress in the IDE output window at the bottom of the screen:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ATtiny包将出现，如[图3-3](chapter3.xhtml#fig3-3)所示。点击**安装**，然后等待几秒钟安装完成。您可以在IDE的输出窗口底部看到进度：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, check that the installation was successful by selecting **Tools** ![](../images/arr.png)
    **Board** ![](../images/arr.png) **attiny** ![](../images/arr.png) **ATtiny25/45/85**,
    as shown in [Figure 3-4](chapter3.xhtml#fig3-4).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过选择**工具** ![](../images/arr.png) **板** ![](../images/arr.png) **attiny**
    ![](../images/arr.png) **ATtiny25/45/85**来检查安装是否成功，如[图3-4](chapter3.xhtml#fig3-4)所示。
- en: '![SETTING THE BOARD TYPE TO ATTINY85 IN ARDUINO IDE](../images/fig3-4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![在Arduino IDE中设置板类型为ATTINY85](../images/fig3-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-4: Board menu in which
    the ATtiny85 is now available</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-4：现在可以在板菜单中选择ATtiny85</samp>
- en: Now that you’ve configured the IDE, you’ll need to configure the *hardware programmer*,
    or the interface between the computer and the ATtiny85, using an Arduino Uno or
    compatible board. Open the Arduino IDE and select **File** ![](../images/arr.png)
    **Examples** ![](../images/arr.png) **11.ArduinoISP** ![](../images/arr.png) **ArduinoISP**,
    as shown in [Figure 3-5](chapter3.xhtml#fig3-5).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经配置好了IDE，接下来需要配置*硬件程序员*，即计算机与ATtiny85之间的接口，使用Arduino Uno或兼容的板子。打开Arduino
    IDE，选择**文件** ![](../images/arr.png) **示例** ![](../images/arr.png) **11.ArduinoISP**
    ![](../images/arr.png) **ArduinoISP**，如[图3-5](chapter3.xhtml#fig3-5)所示。
- en: '![LOADING THE ARDUINO AS AN ISP PROGRAMMER SKETCH IN ARDUINO IDE](../images/fig3-5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![在Arduino IDE中加载Arduino作为ISP程序员示例](../images/fig3-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-5: ArduinoISP sketch
    selection</samp>'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-5：选择ArduinoISP示例</samp>
- en: After you upload this sketch to your Arduino Uno or compatible board, the board
    will act as a hardware programmer. You can always upload other sketches to the
    Uno, but if you want to upload a sketch to your ATtiny, you will need to upload
    the ArduinoISP sketch beforehand on the Arduino.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在将这个示例程序上传到你的 Arduino Uno 或兼容板之后，该板将充当硬件编程器。你随时可以向 Uno 上传其他示例程序，但如果你想向 ATtiny
    上传程序，你需要先在 Arduino 上上传 ArduinoISP 示例程序。
- en: Let’s check that your hardware and software environment is functioning with
    a typical sketch that blinks an LED.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下你的硬件和软件环境是否正常工作，可以使用一个典型的示例程序来使 LED 闪烁。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #11: Building the “Hello,
    World” of Hardware</samp>'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #11：构建硬件的“Hello, World”程序</samp>'
- en: 'This project won’t cause your ATtiny85 to print “Hello, world” to a screen
    but rather does the hardware equivalent: flashing an LED to demonstrate that the
    toolchain is working.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目不会让你的 ATtiny85 在屏幕上打印“Hello, world”，而是做一个硬件等效的动作：闪烁 LED 来演示工具链的工作。
- en: 'You’ll need the following parts:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板和 USB 数据线
- en: An ATtiny85 microcontroller
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 ATtiny85 微控制器
- en: One 1 kΩ, 0.25 W, 1 percent resistor
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 1 kΩ, 0.25 W, 1% 的电阻
- en: One 10 µF, 16 V electrolytic capacitor
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 10 µF, 16 V 电解电容
- en: One LED
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 LED
- en: A solderless breadboard
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块无焊面包板
- en: Male-to-male jumper wires
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: Assemble the circuit as shown in [Figure 3-6](chapter3.xhtml#fig3-6) on your
    solderless breadboard and connect the points labeled 5V, GND, RESET, and D10 through
    D13 to the Arduino’s respective pins.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 3-6](chapter3.xhtml#fig3-6)所示，在无焊面包板上组装电路，并将标有 5V、GND、RESET 和 D10 到 D13
    的点连接到 Arduino 的相应引脚。
- en: '![THE SCHEMATIC FOR PROJECT #11](../images/fig3-6.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #11 的原理图](../images/fig3-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-6: The schematic for
    Project #11</samp>'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-6：项目 #11 的原理图</samp>'
- en: The connections to the Arduino’s SPI bus via D10 through D13, as well as the
    connection between the 10 µF capacitor and the Arduino’s reset pin, are required
    only for uploading each ATtiny project. Remove them once you’ve finished uploading
    the sketch.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 D10 到 D13 的连接到 Arduino 的 SPI 总线，以及 10 µF 电容与 Arduino 重置引脚之间的连接，仅在上传每个 ATtiny
    项目时需要。上传示例程序后，移除这些连接。
- en: Next, you’ll change the IDE settings to accommodate the hardware changes. Open
    the IDE and change the board type to **ATtiny25/45/85**, as was shown in [Figure
    3-4](chapter3.xhtml#fig3-4). Select **Tools** ![](../images/arr.png) **Clock**
    ![](../images/arr.png) **Internal 1 MHz**. Finally, change the programmer by selecting
    **Tools** ![](../images/arr.png) **Arduino as ISP**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要更改 IDE 设置以适应硬件的变化。打开 IDE 并将板卡类型更改为**ATtiny25/45/85**，如[图 3-4](chapter3.xhtml#fig3-4)所示。选择
    **工具** ![](../images/arr.png) **时钟** ![](../images/arr.png) **内部 1 MHz**。最后，通过选择
    **工具** ![](../images/arr.png) **Arduino 作为 ISP** 来更改编程器。
- en: 'Now enter and upload the Project #11 sketch. The LED should start blinking
    with a delay of about one second, confirming that you have a working ATtiny development
    environment.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '现在输入并上传项目 #11 的示例程序。LED 应该开始以大约一秒钟的延迟闪烁，确认你的 ATtiny 开发环境已经正常工作。'
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The physical pin 2 on the ATtiny85 is digital pin 3 in the Arduino environment,
    so the sketch declares pin 3 as an output ❶, turns it on ❷, and then turns it
    off after a delay ❸.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ATtiny85 的物理引脚 2 在 Arduino 环境中对应的是数字引脚 3，因此示例程序声明引脚 3 为输出❶，然后将其打开❷，再在延迟后关闭❸。
- en: 'I’ll now introduce three things you need to know before building the next project:
    the differences between Arduino Uno and ATtiny pin references, how to add a reset
    button to your ATtiny circuit, and the Arduino functions that are available to
    the ATtiny versions of Arduino projects.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将介绍你在构建下一个项目之前需要了解的三件事：Arduino Uno 和 ATtiny 引脚参考的差异、如何向 ATtiny 电路添加复位按钮，以及
    Arduino 函数如何在 ATtiny 版本的 Arduino 项目中使用。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Arduino Uno vs. ATtiny85 Pin References</samp>
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Arduino Uno 与 ATtiny85 引脚参考</samp>
- en: The reference numbers in the Arduino sketches for physical pins on the ATtiny85
    differ from those you’re used to with typical Arduino Uno and compatible boards.
    Thus, when you’re making your own ATtiny85-based projects using the Arduino environment,
    you’ll need to refer to [Table 3-2](chapter3.xhtml#tab3-2) to determine the ATtiny85’s
    physical pins and their matching pins in the Arduino Uno environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Arduino 环境中，ATtiny85 的物理引脚参考编号与您在典型的 Arduino Uno 和兼容板上使用的不同。因此，当您使用 Arduino
    环境制作基于 ATtiny85 的项目时，您需要参考[表 3-2](chapter3.xhtml#tab3-2)来确定 ATtiny85 的物理引脚及其在
    Arduino Uno 环境中的对应引脚。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 3-2:</samp> <samp class="SANS_Futura_Std_Book_11">ATtiny85-to-Arduino
    Pin Reference</samp>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 3-2：</samp> <samp class="SANS_Futura_Std_Book_11">ATtiny85
    与 Arduino 引脚参考</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ATtiny physical pin</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Arduino (1)</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Arduino
    (2)</samp> |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ATtiny 物理引脚</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Arduino
    (1)</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Arduino (2)</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 3 (D3)</samp> | <samp class="SANS_Futura_Std_Book_11">Analog pin 3 (A3)</samp>
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">数字引脚
    3 (D3)</samp> | <samp class="SANS_Futura_Std_Book_11">模拟引脚 3 (A3)</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 4 (D4)</samp> | <samp class="SANS_Futura_Std_Book_11">Analog pin 2 (A2)</samp>
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">数字引脚
    4 (D4)</samp> | <samp class="SANS_Futura_Std_Book_11">模拟引脚 2 (A2)</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 0 (D0)</samp> | <samp class="SANS_Futura_Std_Book_11">Pulse-width modulation
    (use</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">analogWrite(0)</samp><samp
    class="SANS_Futura_Std_Book_11">)</samp> |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">数字引脚
    0 (D0)</samp> | <samp class="SANS_Futura_Std_Book_11">脉宽调制（使用</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">analogWrite(0)</samp><samp
    class="SANS_Futura_Std_Book_11">）</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 1 (D1)</samp> | <samp class="SANS_Futura_Std_Book_11">Pulse-width modulation
    (use</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">analogWrite(1)</samp><samp
    class="SANS_Futura_Std_Book_11">)</samp> |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">数字引脚
    1 (D1)</samp> | <samp class="SANS_Futura_Std_Book_11">脉宽调制（使用</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">analogWrite(1)</samp><samp
    class="SANS_Futura_Std_Book_11">）</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Digital
    pin 2 (D2)</samp> | <samp class="SANS_Futura_Std_Book_11">Analog pin 1 (A1)</samp>
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">数字引脚
    2 (D2)</samp> | <samp class="SANS_Futura_Std_Book_11">模拟引脚 1 (A1)</samp> |'
- en: The HIGH and LOW signals that appear on D0 through D2 while a sketch is uploading
    will trigger any connected external items, such as relays. In these cases, it’s
    better to upload the sketch to the microcontroller and then insert it into the
    final project.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传程序时，D0 至 D2 上的 HIGH 和 LOW 信号会触发任何连接的外部设备，如继电器。在这种情况下，最好先将程序上传到微控制器，然后再将其插入最终项目中。
- en: As the ATtiny85 shares the same type of basic architecture with the ATmega328-type
    microcontrollers, you can use port manipulation as described in [Chapter 2](chapter2.xhtml)
    to control the I/O pins. The ATtiny’s I/O pins are on the least 4 bits of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> (bits 3 to 0) and match physical
    pins 2, 7, 6, and 5\. Just leave the higher 4 bits as 0 with your <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> functions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 ATtiny85 与 ATmega328 类型的微控制器具有相同的基本架构，因此您可以使用[第 2 章](chapter2.xhtml)中描述的端口操作来控制
    I/O 引脚。ATtiny 的 I/O 引脚位于 <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp>
    的最低 4 位（位 3 至 0），并与物理引脚 2、7、6 和 5 匹配。只需将更高的 4 位设置为 0，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> 函数即可。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding Reset Buttons to ATtiny85 Circuits</samp>
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">为 ATtiny85 电路添加复位按钮</samp>
- en: As with other Arduino and compatible boards, it’s possible to add a reset button
    to your ATtiny85 circuits. You’ll use this in the next project, and it may come
    in handy for easily restarting future projects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他Arduino和兼容板一样，你可以在ATtiny85电路中添加复位按钮。你将在下一个项目中使用这个按钮，它也可能在未来的项目中方便地帮助你进行重启。
- en: An ATtiny85 reset button connects physical pin 1 and GND, along with a 10 kΩ
    pull-up resistor, as the circuit resets when pin 1 is connected to GND. [Figure
    3-7](chapter3.xhtml#fig3-7) shows the schematic.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ATtiny85的复位按钮将物理引脚1与GND连接，并与一个10 kΩ的上拉电阻一起工作。当引脚1连接到GND时，电路会复位。[图3-7](chapter3.xhtml#fig3-7)显示了电路图。
- en: '![THE SCHEMATIC FOR THE RESET BUTTON WITH ATTINY85](../images/fig3-7.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![ATtiny85复位按钮电路图](../images/fig3-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-7: The reset button
    schematic for the ATtiny85</samp>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-7：ATtiny85复位按钮电路图</samp>
- en: When designing circuits that won’t connect to a host Arduino board during operation,
    place a 0.1 µF capacitor across the 5V and GND lines to maintain a smoother power
    supply.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计不会在运行过程中连接到主机Arduino板的电路时，可以在5V和GND之间放置一个0.1µF电容器，以保持更平稳的电源供应。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Arduino Functions Available for the
    ATtiny85</samp>
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">ATtiny85可用的Arduino函数</samp>
- en: 'If you’re familiar with the Arduino environment and want to get straight into
    your own ATtiny-based projects, note that there are fewer Arduino functions available
    for the ATtiny85 than on larger microcontrollers, but there are still plenty:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Arduino环境，并且想直接进入自己的基于ATtiny的项目，注意ATtiny85提供的Arduino函数比大型微控制器要少，但仍然有很多可用的函数：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">analogRead()</samp>    Tells the
    ADC to return a value between 0 and 1,023 representing a voltage range of 0 to
    5 V DC
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">analogRead()</samp>    告诉ADC返回一个0到1,023之间的值，表示0到5V直流电压范围
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">analogWrite()</samp>    Generates
    PWM output
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">analogWrite()</samp>    生成PWM输出
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">delay()</samp>    Pauses operation
    of the sketch (in milliseconds)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">delay()</samp>    暂停程序运行（以毫秒为单位）
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">delayMicroseconds()</samp>    Pauses
    operation of the sketch (in microseconds)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">delayMicroseconds()</samp>    暂停程序运行（以微秒为单位）
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">digitalWrite()</samp>    Turns
    digital output pins on or off
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">digitalWrite()</samp>    开启或关闭数字输出引脚
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">digitalRead()</samp>    Reads the
    status of digital input pin
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">digitalRead()</samp>    读取数字输入引脚的状态
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">micros()</samp>    Returns the
    number of microseconds since the sketch started operation
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">micros()</samp>    返回程序开始运行以来的微秒数
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">millis()</samp>    Returns the
    number of milliseconds since the sketch started operation
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">millis()</samp>    返回程序开始运行以来的毫秒数
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pinMode()</samp>    Sets the status
    of the digital pins
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pinMode()</samp>    设置数字引脚的状态
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pulseIn()</samp>    Returns the
    length of a pulse measured on a digital input
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pulseIn()</samp>    返回在数字输入引脚上测量到的脉冲宽度
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">shiftOut()</samp>    Shifts a byte
    of data out of a digital pin
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">shiftOut()</samp>    将一个字节的数据输出到数字引脚
- en: If you’re unfamiliar with any of these functions, you can review my book *Arduino
    Workshop*, 2nd edition, or visit the Arduino language reference at [*https://<wbr>www<wbr>.arduino<wbr>.cc<wbr>/reference<wbr>/en<wbr>/*](https://www.arduino.cc/reference/en/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些函数不熟悉，可以查阅我的书籍*Arduino工作坊*第二版，或者访问Arduino语言参考：[*https://<wbr>www<wbr>.arduino<wbr>.cc<wbr>/reference<wbr>/en<wbr>/*](https://www.arduino.cc/reference/en/)。
- en: You may also use various Arduino libraries when working with the ATtiny85\.
    However, if they’re designed to access GPIO pins, you’ll need to modify the library
    code to update them for ATtiny85 pin references. Some Arduino libraries may also
    require more memory than the ATtiny85 provides.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你在使用ATtiny85时也可以使用各种Arduino库。然而，如果这些库是为访问GPIO引脚设计的，你需要修改库代码，以便更新ATtiny85的引脚引用。一些Arduino库可能还需要比ATtiny85提供的更多内存。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #12: Creating a Quick-Read
    Thermometer</samp>'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#12：创建快速读取温度计</samp>
- en: 'In this project, you’ll use the popular TMP36 temperature sensor to create
    a thermometer that records and displays the temperature in three predetermined
    ranges: too cold, just right, and too hot. This also demonstrates how to use the
    analog input and digital output pins on your ATtiny85 in the Arduino environment.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，您将使用流行的TMP36温度传感器创建一个记录并显示三个预定温度范围的温度计：过冷、适宜和过热。这还展示了如何在Arduino环境中使用ATtiny85的模拟输入和数字输出引脚。
- en: 'You’ll need the following parts:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下零件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Arduino Uno或兼容板和USB电缆
- en: An ATtiny85 microcontroller
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个ATtiny85微控制器
- en: Three 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个1 kΩ、0.25 W、1%电阻
- en: One 10 kΩ, 0.25 W, 1 percent resistor
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个10 kΩ、0.25 W、1%电阻
- en: One tactile button
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个触觉按钮
- en: One 0.1 µF ceramic capacitor
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个0.1 µF陶瓷电容器
- en: Three LEDs
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个LED
- en: A TMP36 analog temperature sensor
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TMP36模拟温度传感器
- en: A solderless breadboard
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊面包板
- en: Male-to-male jumper wires
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: 'Assemble the circuit as shown in [Figure 3-8](chapter3.xhtml#fig3-8) on the
    solderless breadboard. This schematic shows only the final product, but you’ll
    first need to wire the connections to upload the sketch—you can refer to Project
    #11 to refresh your memory of how to do this. Use your Arduino Uno as a quick
    5 V power supply.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据无焊面包板上显示的[图3-8](chapter3.xhtml#fig3-8)组装电路。此原理图仅显示最终产品，但您首先需要连接线路以上传草图——您可以参考项目#11来复习如何操作。使用您的Arduino
    Uno作为快速5V电源。
- en: '![THE SCHEMATIC FOR PROJECT #12](../images/fig3-8.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![项目#12的原理图](../images/fig3-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-8: The schematic for
    Project #12</samp>'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-8：项目#12的原理图</samp>
- en: Once you’ve uploaded the sketch, remove the wires from the Arduino Uno’s D10
    through D13 pins and the RESET pin, but leave the 5V and GND to power the thermometer.
    When the sketch starts running, one of three LEDs should depict the temperature
    range set in the sketch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，从Arduino Uno的D10至D13引脚和RESET引脚中移除线路，但保留5V和GND以供电温度计。当草图开始运行时，三个LED中的一个应该表示草图中设置的温度范围。
- en: 'Let’s see how this works:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The sketch defines the values for the readout LED pins and sets them to LOW
    ❶. You can set your own values for hot and cold ❷; a “normal” temperature will
    be above the <samp class="SANS_TheSansMonoCd_W5Regular_11">coldTemp</samp> value
    and below or equal to the <samp class="SANS_TheSansMonoCd_W5Regular_11">hotTemp</samp>
    value.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 草图定义了读出LED引脚的值，并将它们设置为LOW ❶。您可以为热和冷设置自己的值 ❷；“正常”温度将高于<samp class="SANS_TheSansMonoCd_W5Regular_11">coldTemp</samp>值，并且低于或等于<samp
    class="SANS_TheSansMonoCd_W5Regular_11">hotTemp</samp>值。
- en: The sketch sets the digital pins to outputs ❸ and then loops, taking the value
    from the temperature sensor ❹ and converting it to degrees Celsius ❺. Finally,
    it determines the temperature to be cold ❻, normal ❼, or hot ❽ and turns on the
    appropriate LED.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 草图将数字引脚设置为输出 ❸，然后循环，从温度传感器中获取值 ❹ 并将其转换为摄氏度 ❺。最后，它确定温度为冷 ❻、正常 ❼ 或热 ❽ 并点亮相应的LED。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Increasing the ATtiny85’s Speed</samp>
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">增加ATtiny85的速度</samp>
- en: 'The ATtiny85 can operate at three different speeds (in the Arduino environment
    and otherwise): 1 MHz (the default speed), 8 MHz, or 16 MHz. So far, your projects
    have used the default speed, which requires the least power and also works well
    for battery-powered projects. For projects involving more computation, you’ll
    need to change the speed to 8 MHz or greater, which will use more power.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ATtiny85可以在Arduino环境和其他环境中以三种不同的速度运行：1 MHz（默认速度）、8 MHz或16 MHz。到目前为止，您的项目都使用了默认速度，这需要最少的功率，并且适用于电池供电项目。对于涉及更多计算的项目，您需要将速度更改为8
    MHz或更高，这将消耗更多电力。
- en: In preparation for the next project, you’ll change the operating speed by using
    the IDE to burn a new *bootloader*—the software loaded in the microcontroller
    that enables it to receive code via the SPI or USB connection—to the ATtiny85\.
    This erases the sketch last uploaded and sets the speed of the oscillator inside
    the microcontroller, which determines the operation speed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备下一个项目，您将使用IDE烧写一个新的*bootloader*——这是加载到ATtiny85微控制器中的软件，使其能够通过SPI或USB连接接收代码。这将擦除最后上传的草图并设置微控制器内部的振荡器速度，从而确定操作速度。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Oscillator Speed</samp>
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">振荡器速度</samp>
- en: Set up your circuit as you would to upload a sketch to your microcontroller.
    Next, open the IDE and select **Tools** ![](../images/arr.png) **Clock** ![](../images/arr.png)
    **Internal 16 MHz**, as shown in [Figure 3-9](chapter3.xhtml#fig3-9).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 按照上传草图到微控制器时的电路设置进行连接。接下来，打开IDE并选择 **工具** ![](../images/arr.png) **时钟** ![](../images/arr.png)
    **内部16 MHz**，如[图3-9](chapter3.xhtml#fig3-9)所示。
- en: '![CHANGING ATTINY85 CLOCK SPEED IN ARDUINO IDE](../images/fig3-9.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![在Arduino IDE中更改ATTINY85时钟速度](../images/fig3-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-9: Preparing to change
    the clock speed</samp>'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-9：准备更改时钟速度</samp>
- en: Next, select **Tools** ![](../images/arr.png) **Burn Bootloader**. The operation
    should complete after a few moments, as shown in [Figure 3-10](chapter3.xhtml#fig3-10).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择 **工具** ![](../images/arr.png) **烧录引导加载程序**。该操作应在几秒钟内完成，如[图3-10](chapter3.xhtml#fig3-10)所示。
- en: '![ARDUINO IDE STATING THAT THE BOOTLOADER BURNING IS COMPLETED](../images/fig3-10.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino IDE显示烧录引导加载程序已完成](../images/fig3-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-10: The Arduino IDE
    after completing the bootloader burn</samp>'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-10：烧录引导加载程序后Arduino IDE界面</samp>
- en: Your sketches should now operate at 16 MHz when uploaded.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，上传的草图应以16 MHz的速度运行。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Oscillator Accuracy</samp>
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">振荡器精度</samp>
- en: The surrounding temperature can alter the accuracy of your microcontroller’s
    speed. This is generally not a problem when you’re simply using delays to blink
    LEDs or other simple tasks, but it can become an issue if you’re using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">micros()</samp>
    functions for more exact timing. For example, the speed can vary +/−10 percent
    with an external temperature of around 25°C.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 环境温度会影响微控制器的速度精度。当你仅仅使用延时来闪烁LED或进行其他简单任务时，这通常不是问题，但如果你使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">micros()</samp> 函数进行更精确的计时时，温度变化可能会成为问题。例如，在外部温度约为25°C时，速度可能会变化±10%。
- en: The solution is to use an external crystal circuit, like the Arduino Uno and
    other boards do. You’ll need two 22 pF ceramic capacitors and an 8, 16, or 20
    MHz through-hole HC-49-type crystal like the one in [Figure 3-11](chapter3.xhtml#fig3-11).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用像Arduino Uno等板卡所使用的外部晶体电路。你需要两个22 pF的陶瓷电容和一个8、16或20 MHz的通孔型HC-49晶体，像[图3-11](chapter3.xhtml#fig3-11)所示的那种。
- en: '![A THROUGH-HOLE HC-49-TYPE CRYSTAL](../images/fig3-11.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![一个通孔型HC-49晶体](../images/fig3-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-11: A through-hole
    HC-49-type crystal</samp>'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-11：一个通孔型HC-49晶体</samp>
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*If you made the “breadboard Arduino” described in* Arduino Workshop*, 2nd
    edition, you’re familiar with this type of circuit.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你做过Arduino工作坊第二版中描述的“面包板Arduino”，你应该对这种电路类型很熟悉。*'
- en: '[Figure 3-12](chapter3.xhtml#fig3-12) shows the crystal oscillator circuit
    addition to your ATtiny85.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-12](chapter3.xhtml#fig3-12)显示了添加到ATtiny85的晶体振荡器电路。'
- en: '![AN ATTINY85 CIRCUIT SHOWING AN EXTERNAL CRYSTAL SUB-CIRCUIT](../images/fig3-12.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![显示外部晶体子电路的ATtiny85电路](../images/fig3-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-12: An ATtiny85 circuit
    with an external crystal subcircuit</samp>'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图3-12：带有外部晶体子电路的ATtiny85电路</samp>
- en: When using an external crystal, don’t forget to set the oscillator speed to
    external and match the crystal frequency. The one drawback to implementing an
    external crystal is that it uses digital pins 2 and 3, meaning you can no longer
    use them for outputs or inputs.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外部晶体时，不要忘记将振荡器速度设置为外部，并与晶体频率匹配。使用外部晶体的一个缺点是，它会占用数字引脚2和3，这意味着你不能再将它们用作输入或输出。
- en: The next project prepares you to use the ATtiny85 in compact Arduino-compatible
    projects on a regular basis in your own future work.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个项目将帮助你在日后的工作中定期使用ATtiny85进行紧凑的Arduino兼容项目。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #13: Creating an ATtiny85
    Programming Shield</samp>'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #13：创建ATtiny85编程扩展板</samp>'
- en: This project creates a small shield you can use to upload sketches to your ATtiny
    microcontrollers using the Arduino Uno. The shield contains all the required circuitry,
    as well as two LEDs for quick prototyping or experimentation. You can then remove
    the microcontroller from the shield and use it for your own separate projects.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目创建了一个小型屏蔽板，您可以通过 Arduino Uno 向 ATtiny 微控制器上传草图。该屏蔽板包含所有必需的电路，并配有两个 LED，用于快速原型设计或实验。然后，您可以将微控制器从屏蔽板上取下，单独使用它进行其他项目。
- en: 'You’ll need the following parts:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下部件：
- en: 'The Project #13 PCB'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '项目 #13 PCB'
- en: Two 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 1 kΩ, 0.25 W, 1% 的电阻
- en: A 10 µF, 16 V electrolytic capacitor
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 10 µF, 16 V 的电解电容
- en: Two 5 mm LEDs
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 5 mm 的 LED
- en: 1 × 40 inline 2.54 mm header pins
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 × 40 内联 2.54 mm 引脚头
- en: An eight-pin IC socket
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个八针 IC 插座
- en: '[Figure 3-13](chapter3.xhtml#fig3-13) shows the schematic for this project.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-13](chapter3.xhtml#fig3-13) 显示了本项目的原理图。'
- en: '![THE SCHEMATIC FOR PROJECT #13](../images/fig3-13.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #13 的原理图](../images/fig3-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-13: The schematic
    for Project #13</samp>'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-13：项目 #13 的原理图</samp>'
- en: To assemble the circuit, connect the parts as labeled on the PCB in [Figure
    3-14](chapter3.xhtml#fig3-14). Start with the resistors and then the IC socket.
    Next, fit the capacitor, taking note of the polarity as shown on the PCB. Then
    fit the LEDs, with their short legs matching the PCB’s square holes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要组装电路，请按照 [图 3-14](chapter3.xhtml#fig3-14) 上 PCB 上标记的方式连接各个元件。首先是电阻器，然后是 IC
    插座。接着安装电容，并注意 PCB 上标明的极性。然后安装 LED，确保其短脚与 PCB 上的方形孔对接。
- en: '![A PCB FOR PROJECT #13](../images/fig3-14.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #13 的 PCB](../images/fig3-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-14: The PCB for Project
    #13</samp>'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-14：项目 #13 的 PCB</samp>'
- en: Finally, trim the inline header pins so you have one six-pin and one five-pin
    length, and then drop them into an Arduino Uno, as shown in [Figure 3-15](chapter3.xhtml#fig3-15).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将内联引脚修剪成一个六针长度和一个五针长度，然后按 [图 3-15](chapter3.xhtml#fig3-15) 所示插入 Arduino Uno。
- en: '![USING THE ARDUINO BOARD TO LINE UP PIN HEADERS FOR THE PROGRAMMING SHIELD](../images/fig3-15.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Arduino 板对齐编程屏蔽板的引脚头](../images/fig3-15.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-15: Preparing the
    inline header pins</samp>'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-15：准备内联引脚头</samp>
- en: Place the PCB on top of the headers and solder the pins as shown in [Figure
    3-16](chapter3.xhtml#fig3-16).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将 PCB 放置在引脚头上方，并按照 [图 3-16](chapter3.xhtml#fig3-16) 所示焊接引脚。
- en: '![THE COMPLETED SHIELD MOUNTED ON AN ARDUINO UNO](../images/fig3-16.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![完成的屏蔽板安装在 Arduino Uno 上](../images/fig3-16.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 3-16: The assembled
    shield</samp>'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 3-16：已组装的屏蔽板</samp>
- en: You can now use this shield to easily upload sketches by removing the shield
    when uploading the Arduino as an ISP sketch and then inserting the shield when
    uploading the sketch for the ATtiny. This makes it faster and easier to set up
    ATtiny85-based projects in the future, allowing you to avoid manually wiring from
    the Uno to a solderless breadboard.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过在上传 Arduino 作为 ISP 程序时移除屏蔽板，然后在上传 ATtiny 程序时再插入屏蔽板，轻松上传草图。这样可以让您在未来更快速、更轻松地搭建基于
    ATtiny85 的项目，避免手动将 Uno 连接到无焊接面包板。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续进行</samp>
- en: This chapter showed you how to use ATtiny microcontrollers for smaller, simpler,
    and less expensive Arduino-compatible projects. The Arduino programming shield
    also gave you a faster way to upload code to the ATtiny.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您展示了如何使用 ATtiny 微控制器来构建更小、更简单且成本更低的 Arduino 兼容项目。Arduino 编程屏蔽板还为您提供了一个更快的方式，将代码上传到
    ATtiny。
- en: In the next chapter, you’ll learn how to keep your Arduino running with a watchdog
    timer.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用看门狗定时器保持 Arduino 持续运行。
