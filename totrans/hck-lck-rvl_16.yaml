- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">12</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EPIK
    FAIL, EXTREMISM RESEARCH, AND SQL DATABASES</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">12</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EPIK失败、极端主义研究与SQL数据库</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: On a Saturday morning in late October 2018 in Pittsburgh, Pennsylvania, Robert
    Bowers posted a message to the fascist-friendly social network Gab. “[Hebrew Immigrant
    Aid Society] likes to bring invaders in that kill our people,” he wrote. “I can’t
    sit by and watch my people get slaughtered. Screw your optics, I’m going in.”
    He was parroting the “great replacement” conspiracy theory, popularized in the
    US by former Fox News host Tucker Carlson, which claims that Jews are replacing
    white people with immigrants of color.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年10月下旬的一个星期六早晨，在宾夕法尼亚州匹兹堡，罗伯特·鲍威尔斯在亲法西斯社交网络Gab上发布了一条消息。“[希伯来移民援助协会]喜欢引进那些杀害我们人民的侵略者，”他说。“我不能袖手旁观，看着我的人民被屠杀。去你的视角，我要进去了。”他在模仿“伟大替代”阴谋论，这一理论在美国由前福克斯新闻主持人塔克·卡尔森推广，声称犹太人正在用有色移民取代白人。
- en: Armed with an AR-15 assault rifle and three Glock semi-automatic pistols, Bowers
    entered the Tree of Life Synagogue, where three different Jewish congregations
    were holding Shabbat services that morning, and committed the deadliest antisemitic
    terrorist attack in US history. He killed 11 people and wounded 6 others, including
    several Holocaust survivors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 拿着一把AR-15突击步枪和三把Glock半自动手枪，鲍威尔斯进入了“生命之树”犹太教堂，那里有三个不同的犹太教会正在举行周六安息日服务，他在这里发动了美国历史上最致命的反犹太恐怖袭击。他杀害了11人，另有6人受伤，其中包括几位大屠杀幸存者。
- en: That day, several companies kicked Gab off their platforms. GoDaddy, the registrar
    that Gab used to buy the domain gab.com, sent Gab a letter saying it had “discovered
    numerous instances of content on your site that both promotes and encourages violence
    against people.” Gab was down only for a few days, though, thanks in part to the
    domain name registrar and web hosting company Epik, which soon took over registration
    for gab.com.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那天，几家公司将Gab从他们的平台上踢了出去。GoDaddy，这家Gab曾用来购买gab.com域名的注册商，向Gab发送了一封信，称它“发现了你的网站上有大量内容，既宣传又鼓励对人们的暴力行为。”不过，Gab只下线了几天，这多亏了域名注册商和网站托管公司Epik，后者很快接管了gab.com的注册。
- en: In this chapter, you’ll learn about Epik, its extremist customers, and the 2021
    data breach that exposed hundreds of gigabytes of customer data. You’ll download
    and learn to work with some of the leaked data, most of which is in the format
    of structured query language, or SQL (often pronounced “sequel”). SQL is a popular
    database technology that many websites, online services, and local software use
    to store data. This chapter focuses on MySQL databases, which use the SQL software
    that Epik uses. You’ll also practice using database software called MariaDB, a
    community-maintained version of MySQL. Finally, you’ll learn to run a SQL server
    (software that allows you to host SQL databases), import the data, and write your
    own code to search it, skills that will prepare you for investigating your own
    SQL datasets in the future.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解Epik、它的极端主义客户，以及2021年泄露的数百GB客户数据的泄露事件。你将下载并学习如何处理其中的大部分数据，这些数据大多数是结构化查询语言（SQL）格式的（通常发音为“sequel”）。SQL是一种流行的数据库技术，许多网站、在线服务和本地软件都使用它来存储数据。本章重点介绍MySQL数据库，这是一种Epik使用的SQL软件。你还将练习使用名为MariaDB的数据库软件，它是MySQL的社区维护版本。最后，你将学习如何运行SQL服务器（用于托管SQL数据库的软件），导入数据，并编写自己的代码来搜索这些数据，这些技能将为你未来调查自己的SQL数据集做好准备。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Structure of SQL Databases</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">SQL数据库的结构</samp>
- en: I have briefly discussed SQL databases in previous chapters, including [Chapter
    10](chapter10.xhtml), where you converted CSVs into SQLite databases for BlueLeaks
    Explorer. There are many types of SQL databases, including PostgreSQL, Microsoft
    SQL Server, Oracle SQL, and the aforementioned MySQL and SQLite. While they’re
    all based on SQL, they have minor differences that mean they’re not entirely compatible
    with each other. SQL databases are popular; therefore, so are SQL data breaches.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在前几章中简要讨论了SQL数据库，包括[第10章](chapter10.xhtml)，你在这一章中将CSV文件转换成了BlueLeaks Explorer的SQLite数据库。SQL数据库有很多类型，包括PostgreSQL、Microsoft
    SQL Server、Oracle SQL，以及前面提到的MySQL和SQLite。虽然它们都基于SQL，但它们之间存在一些小的差异，导致它们并不完全兼容。SQL数据库很流行，因此SQL数据泄露也很常见。
- en: Some SQL database software is proprietary. For example, Microsoft SQL Server
    is the version of SQL that Microsoft products require, and it runs only on Windows.
    Oracle is another proprietary version of SQL; if you get a leaked Oracle database,
    you’ll need to use Oracle software to access it. PostgreSQL and MySQL are free
    and open source and run on Linux servers, making them popular and widely used
    in web development. SQLite is another free and open source version of SQL. It
    can’t handle huge databases, but it’s very simple and convenient for small ones—iPhone
    and Android apps frequently store their settings in a SQLite database, for example.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有些 SQL 数据库软件是专有的。例如，Microsoft SQL Server 是微软产品所需的 SQL 版本，并且只能在 Windows 上运行。Oracle
    是另一种专有的 SQL 版本；如果你获得了泄露的 Oracle 数据库，你需要使用 Oracle 软件来访问它。PostgreSQL 和 MySQL 是免费且开源的，能够在
    Linux 服务器上运行，这使得它们在 web 开发中非常受欢迎且广泛使用。SQLite 也是一个免费的开源 SQL 版本。它无法处理庞大的数据库，但对于小型数据库非常简单且方便——例如，iPhone
    和 Android 应用程序经常将其设置存储在 SQLite 数据库中。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Some datasets may require you to set up a SQL database server that you’re
    unfamiliar with, or figure out how to convert them into a type of SQL you already
    know, in order to analyze them. I once contributed to an investigation based on
    a leaked Chinese police database that revealed the suffocating surveillance of
    China’s Uyghur minority group in the Xinjiang region. It was an Oracle database,
    but it’s unclear whether the Chinese police paid for it or were pirating it. Because
    Oracle is proprietary and* *the investigating technologists didn’t have an Oracle
    license or experience with this version of SQL, they decided to convert it into
    a PostgreSQL database so they could more easily work with the data. Read the full
    report by Yael Grauer at* [https://theintercept.com/2021/01/29/china-uyghur-muslim-surveillance-police/](https://theintercept.com/2021/01/29/china-uyghur-muslim-surveillance-police/)*.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*某些数据集可能要求你搭建一个你不熟悉的 SQL 数据库服务器，或者需要弄清楚如何将它们转换成你已经知道的某种 SQL 类型，以便进行分析。我曾经参与过一项调查，调查内容基于一个泄露的中国警方数据库，揭示了中国新疆地区对维吾尔少数民族群体的压迫性监控。它是一个
    Oracle 数据库，但不清楚中国警方是否为此支付了费用，或者是盗版使用的。由于 Oracle 是专有软件，* *调查技术人员没有 Oracle 许可证，也没有使用这个版本
    SQL 的经验，他们决定将其转换为 PostgreSQL 数据库，以便更轻松地处理数据。阅读全文，请访问* [https://theintercept.com/2021/01/29/china-uyghur-muslim-surveillance-police/](https://theintercept.com/2021/01/29/china-uyghur-muslim-surveillance-police/)*。*'
- en: Next we’ll look at what relational databases are, how SQL servers typically
    work, and the terminology used to describe SQL databases and the data they contain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将探讨什么是关系型数据库，SQL 服务器通常是如何工作的，以及描述 SQL 数据库及其包含数据的术语。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Relational Databases</samp>
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">关系型数据库</samp>
- en: 'SQL databases are made up of tables, which you can think of as spreadsheets
    comprising a list of rows, with each row containing the same columns, or *fields*.
    SQL databases are useful because they’re *relational*, meaning that data in different
    tables can relate to each other. You saw this firsthand when working with BlueLeaks
    Explorer: the BlueLeaks folders had individual spreadsheets like *Documents.csv*
    and *DocumentCategory.csv*, but once you converted them into SQLite databases,
    you could rely on the relationship between the Documents and the DocumentCategory
    tables to browse BlueLeaks documents by category.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 数据库由表格组成，你可以把它们看作是包含行列表的电子表格，每一行包含相同的列，或者说是 *字段*。SQL 数据库非常有用，因为它们是 *关系型的*，意味着不同表格中的数据可以相互关联。你在使用
    BlueLeaks Explorer 时亲眼看到了这一点：BlueLeaks 文件夹中有单独的电子表格，比如 *Documents.csv* 和 *DocumentCategory.csv*，但一旦你将它们转换为
    SQLite 数据库，你就可以依赖 Documents 和 DocumentCategory 表之间的关系，根据类别浏览 BlueLeaks 文档。
- en: 'Let’s look at a simple example: a database that contains two related tables
    for books and authors. [Table 12-1](#tab12-1) shows the information stored in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的例子：一个包含两张关联表格的数据库，分别是书籍和作者。[表 12-1](#tab12-1) 显示了 <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    表中存储的信息。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-1:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 12-1：</samp> <samp class="SANS_Futura_Std_Book_11">作者</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">表</samp>
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> |'
- en: '[Table 12-2](#tab12-2) shows the information stored in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 12-2](#tab12-2) 显示了存储在 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    表中的信息。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-2:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 12-2:</samp> <samp class="SANS_Futura_Std_Book_11">书籍</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">表</samp>
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
- en: Each SQL database can contain multiple tables, and each table has a defined
    set of fields. For example, [Table 12-2](#tab12-2) has <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    fields.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 SQL 数据库可以包含多个表，并且每个表都有一组定义好的字段。例如，[表 12-2](#tab12-2) 具有 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">title</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    字段。
- en: Every table in a SQL database normally has a unique <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    field that *auto-increments*, meaning that when you add rows of data to the table,
    the first row is automatically given an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of 1, the second is given an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of 2, and so on, ensuring that no two rows ever have the same <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>.
    If [Table 12-1](#tab12-1) included two authors named Micah Lee, it would be clear
    in the database that they’re not the same person, because the ID for each row
    would be different.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 SQL 数据库中的表通常都有一个唯一的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    字段，该字段会 *自动递增*，意味着当你向表中添加数据行时，第一行会自动被赋予 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    值为 1，第二行赋予 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 值为 2，以此类推，从而确保每一行的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 都是唯一的。如果 [表 12-1](#tab12-1)
    包含两位名为 Micah Lee 的作者，在数据库中就能清楚地看出他们不是同一个人，因为每一行的 ID 值都会不同。
- en: 'In general, tables relate to each other using these unique ID numbers. Let’s
    say you’re browsing through the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table and come across *Contact: A Novel*. Who wrote it? According to the data
    in its row, the <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>. To find out who the
    author is, you’d look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table for the row with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> to find that it’s Carl
    Sagan.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，表格通过这些唯一的ID号码彼此关联。假设你正在浏览<samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>表格，遇到了*《联系方式：一部小说》*。谁写的？根据它所在行的数据，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>是<samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>。要找出作者是谁，你需要查看<samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>表格，找到<samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp>的行，发现作者是卡尔·萨根。
- en: This example deals with a small amount of data, but SQL databases can become
    huge and complicated. For example, instead of two authors, you might find a database
    with 10 million users and all sorts of tables that relate to it using a field
    called <samp class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp>.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子处理的是少量数据，但SQL数据库可能会变得庞大而复杂。例如，除了两个作者，你可能会遇到一个有1000万个用户的数据库，以及与之相关的各种表格，使用一个名为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp>的字段。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Clients and Servers</samp>
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">客户端和服务器</samp>
- en: 'Most types of SQL databases are *server* software, meaning you install a SQL
    server to hold all of the data. Other computers then use a SQL *client* to communicate
    with that server to search for, add, or update data. This communication is similar
    to how websites work: a web server has the software that runs the website, while
    a web browser (the client) connects to the server remotely to load web pages,
    submit forms, and so on. SQL clients communicate to servers using SQL queries,
    also known as *statements*. Similarly to English, SQL queries start with a *verb*
    that describes an action being taken and have *clauses* that further describe
    that action. All SQL queries end with semicolons (<samp class="SANS_TheSansMonoCd_W5Regular_11">;</samp>).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数类型的SQL数据库是*服务器*软件，这意味着你需要安装SQL服务器来保存所有数据。其他计算机则使用SQL*客户端*与该服务器通信，进行数据查询、添加或更新。这种通信类似于网站的工作方式：网站服务器运行网站软件，而网页浏览器（客户端）则通过远程连接到服务器，加载网页、提交表单等。SQL客户端通过SQL查询与服务器通信，也称为*语句*。类似于英语，SQL查询以描述执行动作的*动词*开始，并且有进一步描述该动作的*从句*。所有SQL查询都以分号(<samp
    class="SANS_TheSansMonoCd_W5Regular_11">;</samp>)结尾。
- en: Each SQL server can host multiple databases. For example, you could run 20 different
    WordPress websites on the same MySQL server by having each website use a different
    database. The Epik dataset includes data from nine different MySQL databases.
    If you downloaded them all, you could import all nine into the same MySQL server.
    Because much of the Epik data is in MySQL format, in Exercise 12-1 you’ll run
    a MySQL server in Docker. Once you have a server running, you’ll connect to it
    later using a client to import the data and begin your analysis.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SQL服务器可以托管多个数据库。例如，你可以在同一个MySQL服务器上运行20个不同的WordPress网站，通过让每个网站使用不同的数据库。Epik数据集包含来自九个不同MySQL数据库的数据。如果你下载了所有数据，你可以将这九个数据库导入同一个MySQL服务器。由于大部分Epik数据是MySQL格式，在练习12-1中，你将通过Docker运行一个MySQL服务器。一旦服务器启动，你将稍后通过客户端连接到它，导入数据并开始分析。
- en: 'In this chapter, you’ll try out two different MySQL clients: the web-based
    client Adminer and the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command line client, which allows you to interact with the database from the terminal.
    For MySQL, Adminer is more user-friendly for manually browsing a SQL database,
    but <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> is especially useful
    for working on remote servers and creating or restoring database backups. For
    a simpler introduction to working with clients, you’ll use Adminer in the first
    half of this chapter, then move on to the command line client. All clients interact
    with servers in the same way, sending SQL queries to the SQL server, which runs
    them and returns a response. Therefore, the skills you learn using Adminer will
    also apply to the CLI client.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将尝试两种不同的 MySQL 客户端：基于 Web 的客户端 Adminer 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    命令行客户端，后者允许你从终端与数据库进行交互。对于 MySQL，Adminer 更适合手动浏览 SQL 数据库，但 <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    对于在远程服务器上工作和创建或恢复数据库备份特别有用。为了更简单地介绍如何使用客户端，你将在本章的前半部分使用 Adminer，然后转向命令行客户端。所有客户端与服务器的交互方式相同，都是发送
    SQL 查询到 SQL 服务器，服务器执行并返回响应。因此，你在使用 Adminer 时学到的技能也适用于 CLI 客户端。
- en: SQL servers also normally have a system of users and permissions that allow
    you to grant a given user access to some databases but not others. The root user
    on MySQL and other databases has total access to every database on the server.
    When you’re researching a leaked database, it’s fine to run all of your searches
    as the root user since you’re typically the only person using that server. However,
    if you’re running a database that strangers online might use, such as a website
    powered by a SQL database, you should use non-root database users with restricted
    permissions. This way, if one of those strangers hacks your database, they’ll
    have access only to what that specific database user has permissions for.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 服务器通常也有用户和权限系统，允许你为某个用户授予访问某些数据库的权限，但不授予其他数据库的权限。MySQL 和其他数据库中的 root 用户对服务器上的所有数据库都有完全访问权限。当你在研究泄露的数据库时，可以以
    root 用户身份运行所有搜索，因为通常只有你一个人在使用该服务器。然而，如果你在运行一个可能被陌生人在线访问的数据库，例如由 SQL 数据库支持的网站，那么你应该使用具有受限权限的非
    root 数据库用户。这样，如果其中一个陌生人入侵了你的数据库，他们只能访问该特定数据库用户具有权限的内容。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Tables, Columns,
    and Types</samp>
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">表格、列和类型</samp>
- en: You can store only a single type of data in each column in a SQL table. For
    example, you can store strings, but not numerals, in the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    column of [Table 12-2](#tab12-2) (though you could get around this by storing
    a string representation of a number, like the string <samp class="SANS_TheSansMonoCd_W5Regular_11">'1'</samp>
    instead of the number <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 表格中的每一列只能存储一种数据类型。例如，你可以在 [表格 12-2](#tab12-2) 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    列中存储字符串，但不能存储数字（尽管你可以通过存储数字的字符串表示形式来绕过这一点，例如将字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">'1'</samp>
    存储为代替数字 <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>）。
- en: 'Data types differ slightly depending on the flavor of SQL you’re using. However,
    you’ll generally see types representing numbers, times, or strings of text. The
    following list includes some common SQL types that are all valid in MySQL:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型根据你使用的 SQL 版本略有不同。然而，你通常会看到表示数字、时间或文本字符串的类型。以下列表包含一些常见的 SQL 类型，这些类型在 MySQL
    中都是有效的：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">INT</samp> Integers or whole numbers
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">INT</samp> 整数或整数值
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DECIMAL</samp> Numbers with decimal
    places
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DECIMAL</samp> 带有小数位的数字
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DATE</samp> A specific date
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">日期</samp> 一个特定的日期
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DATETIME</samp> A specific date,
    along with the time of day
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DATETIME</samp> 特定日期及其时间
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">VARCHAR</samp> A string of characters
    of a specified length
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">VARCHAR</samp> 指定长度的字符字符串
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">TEXT</samp> Also a string of text
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">文本</samp> 也可以是一个文本字符串
- en: If [Table 12-2](#tab12-2) were stored in a MySQL database, <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    would be type <samp class="SANS_TheSansMonoCd_W5Regular_11">INT</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">title</samp> would be type <samp class="SANS_TheSansMonoCd_W5Regular_11">TEXT</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> would be type
    <samp class="SANS_TheSansMonoCd_W5Regular_11">INT</samp>. If you tried storing
    the string <samp class="SANS_TheSansMonoCd_W5Regular_11">"hola"</samp> in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> field, the SQL
    server would respond with an error message, because the data isn’t an integer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 [表 12-2](#tab12-2) 存储在 MySQL 数据库中，<samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    字段将是 <samp class="SANS_TheSansMonoCd_W5Regular_11">INT</samp> 类型，<samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    字段将是 <samp class="SANS_TheSansMonoCd_W5Regular_11">TEXT</samp> 类型，<samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    字段将是 <samp class="SANS_TheSansMonoCd_W5Regular_11">INT</samp> 类型。如果你尝试将字符串 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"hola"</samp> 存储到 <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    字段中，SQL 服务器会返回错误信息，因为数据类型不是整数。
- en: The simplest way to run a MariaDB server on your computer is by using Docker
    containers, like you did in Exercise 5-3 when you set up a local WordPress website
    as practice using Docker Compose. In the following exercises, you’ll get a MySQL
    server up and running, connect to your new server using MySQL clients, and practice
    using SQL.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的计算机上运行 MariaDB 服务器的最简单方法是使用 Docker 容器，就像你在练习 5-3 中通过 Docker Compose 设置本地
    WordPress 网站时做的那样。在接下来的练习中，你将启动 MySQL 服务器，使用 MySQL 客户端连接到新服务器，并练习使用 SQL。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-1: Create and Test a MySQL
    Server Using Docker and Adminer</samp>'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 12-1：使用 Docker 和 Adminer 创建并测试 MySQL
    服务器</samp>
- en: With Docker, you can quickly run different types of SQL servers on your computer,
    no matter what operating system you’re running. In this exercise, you’ll run a
    MariaDB server on your computer using Docker Compose. Once you have the server
    up and running, you’ll use the Adminer MySQL client to add the contents of [Tables
    12-1](#tab12-1) and [12-2](#tab12-2) to it as a test. You’ll move on to working
    with real leaked data later in the chapter, but you’ll start by experimenting
    with some simple example databases.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker，你可以在你的计算机上快速运行不同类型的 SQL 服务器，无论你使用的是哪个操作系统。在本练习中，你将使用 Docker Compose
    在你的计算机上运行 MariaDB 服务器。服务器启动并运行后，你将使用 Adminer MySQL 客户端将 [表 12-1](#tab12-1) 和 [12-2](#tab12-2)
    的内容添加到数据库中作为测试。你稍后会在本章中使用真实的泄露数据进行操作，但现在你将从实验一些简单的示例数据库开始。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Run the Server</samp>
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">运行服务器</samp>
- en: 'Create a folder for this chapter’s exercises and a *docker-compose.yaml* file
    in that folder. Type the following code into the file (or copy and paste it from
    [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-12<wbr>/docker<wbr>-compose<wbr>.yaml*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-12/docker-compose.yaml)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个文件夹用于本章的练习，并在该文件夹中创建一个 *docker-compose.yaml* 文件。将以下代码输入文件中（或者从 [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-12<wbr>/docker<wbr>-compose<wbr>.yaml*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-12/docker-compose.yaml)
    复制粘贴过来）：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The *docker-compose.yaml* file in Exercise 5-3 used a <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    service running MariaDB, and a <samp class="SANS_TheSansMonoCd_W5Regular_11">wordpress</samp>
    service running the WordPress container. In that case, <samp class="SANS_TheSansMonoCd_W5Regular_11">wordpress</samp>
    connected to <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp> to run queries
    in order to save and load website content. This code uses an <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp>
    service to likewise connect to the <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    service.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 5-3 中的 *docker-compose.yaml* 文件使用了一个运行 MariaDB 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    服务和一个运行 WordPress 容器的 <samp class="SANS_TheSansMonoCd_W5Regular_11">wordpress</samp>
    服务。在那个案例中，<samp class="SANS_TheSansMonoCd_W5Regular_11">wordpress</samp> 服务连接到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp> 服务以执行查询，进而保存和加载网站内容。这个代码使用了一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp> 服务，同样连接到 <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    服务。
- en: The code provides the version number of the Compose specification with which
    the file is written (<samp class="SANS_TheSansMonoCd_W5Regular_11">3.9</samp>).
    It then defines the two services and includes the version of the <samp class="SANS_TheSansMonoCd_W5Regular_11">mariadb</samp>
    container image that the <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    service runs. It sets the database root user’s password to <samp class="SANS_TheSansMonoCd_W5Regular_11">this-is-your-root-password</samp>
    (change this to a different password if you like). As noted earlier, you’ll work
    as the database’s root user throughout this chapter, since you’re the only one
    accessing this database. It publishes port 3306, meaning that you can connect
    to the server with a MySQL client on *localhost* at port 3306, and configures
    a volume to store all of MariaDB’s database files in a *db_data* folder. You’ll
    import several gigabytes of data into this database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码提供了 Compose 规范的版本号，该文件是用该版本编写的（<samp class="SANS_TheSansMonoCd_W5Regular_11">3.9</samp>）。接着，它定义了两个服务，并包含了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mariadb</samp> 容器镜像的版本，<samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    服务运行的是该镜像。它将数据库根用户的密码设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">this-is-your-root-password</samp>（如果需要，可以将其更改为其他密码）。如前所述，你将在本章中以数据库的根用户身份工作，因为只有你一个人访问该数据库。它发布了
    3306 端口，这意味着你可以通过 *localhost* 上的 MySQL 客户端连接到服务器，端口号为 3306，并且配置了一个卷，将 MariaDB
    的所有数据库文件存储在 *db_data* 文件夹中。你将把几个 GB 的数据导入到这个数据库中。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp> service runs
    the latest version of the <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp>
    container image. Adminer publishes port 8080, so you can load Adminer in a web
    browser at *http://<wbr>localhost:8080*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp> 服务运行的是最新版本的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp> 容器镜像。Adminer 发布了 8080 端口，因此你可以在浏览器中加载
    Adminer，地址为 *http://<wbr>localhost:8080*。
- en: 'Open a terminal, change to the folder for this chapter’s exercises, and start
    the containers with the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，切换到本章练习的文件夹，并使用以下命令启动容器：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first time you start the containers, your computer downloads the container
    images from Docker Hub, if you don’t already have them. After the containers start,
    you should see that a *db_data* folder containing all of the data stored in the
    database so far has been added to your *exercises* folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次启动容器时，如果你的电脑尚未下载这些容器镜像，它将从 Docker Hub 下载。当容器启动后，你应该会看到一个包含数据库当前所有数据的 *db_data*
    文件夹已被添加到你的 *exercises* 文件夹中。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Connect to the Database
    with Adminer</samp>
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">使用 Adminer 连接到数据库</samp>
- en: You just started two containers, one for your MySQL server and the other for
    your MySQL client, Adminer. Now you’ll connect to Adminer and use it to log in
    to your MySQL server. To access Adminer, open a browser and load *http://<wbr>localhost:8080*.
    You should see the Adminer login page shown in [Figure 12-1](#fig12-1). Here you
    can choose the type of database to which you’re connecting and what credentials
    you’ll use to log in. Keep System as MySQL, keep Server as db, set Username to
    **root**, and set Password to **this-is-your-root-password** (or whatever you
    used in your *docker-compose.yaml* file). Leave the Database field blank, since
    you haven’t imported any databases yet.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚启动了两个容器，一个用于 MySQL 服务器，另一个用于 MySQL 客户端 Adminer。现在你将连接到 Adminer 并使用它登录到 MySQL
    服务器。要访问 Adminer，请打开浏览器并加载 *http://<wbr>localhost:8080*。你应该会看到显示在 [图 12-1](#fig12-1)
    中的 Adminer 登录页面。在这里，你可以选择连接的数据库类型以及用于登录的凭据。将 System 保持为 MySQL，将 Server 设置为 db，将
    Username 设置为 **root**，并将 Password 设置为 **this-is-your-root-password**（或你在 *docker-compose.yaml*
    文件中使用的密码）。将数据库字段留空，因为你还没有导入任何数据库。
- en: 'Once you’ve logged in, you should see a list of default databases: <samp class="SANS_TheSansMonoCd_W5Regular_11">information_schema</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">performance_schema</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">sys</samp>. MariaDB uses these
    to store information it needs to run the database server, so in general, you shouldn’t
    touch them. Instead, you’ll create new databases and work with them.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你应该会看到一个默认数据库列表：<samp class="SANS_TheSansMonoCd_W5Regular_11">information_schema</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">performance_schema</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">sys</samp>。MariaDB 使用这些数据库来存储其运行数据库服务器所需的信息，因此通常情况下，你不应该修改它们。相反，你将创建新的数据库并与之进行交互。
- en: '![A screenshot of Adminer loaded in a web browser at http://localhost:8080.](Images/Figure12-1.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![在 http://localhost:8080 上加载的 Adminer 的截图。](Images/Figure12-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-1: The Adminer login
    page</samp>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 12-1：Adminer 登录页面</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Create a Test Database</samp>
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">创建测试数据库</samp>
- en: To test out your new MySQL server, you’ll create a brand-new database and enter
    [Tables 12-1](#tab12-1) and [12-2](#tab12-2). Click the **Create Database** link,
    enter **books** in the field that pops up, and click **Save**. Once you’ve created
    the books database, click the **Create Table** link. Under Table Name, enter **authors**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的新 MySQL 服务器，你将创建一个全新的数据库，并输入[表 12-1](#tab12-1)和[12-2](#tab12-2)。点击**创建数据库**链接，在弹出的字段中输入**books**，然后点击**保存**。一旦创建了
    books 数据库，点击**创建表**链接。在表名字段中输入**authors**。
- en: To add a column in Adminer, you enter its name under the Column Name header
    and choose a data type. To enter the first column from [Table 12-1](#tab12-1),
    create an **id** column and choose type **int** (short for “integer,” as mentioned
    earlier). Select the **AI** radio button, which sets this column to auto-increment.
    When you’ve finished, create the second column, **name**, with type **text**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Adminer 中添加列时，你需要在“列名”标题下输入列名，并选择数据类型。为了输入[表 12-1](#tab12-1)中的第一列，创建一个**id**列，并选择类型为**int**（如前所述，表示“整数”）。选中**AI**单选按钮，这样该列就会自动递增。完成后，创建第二列**name**，类型为**text**。
- en: '[Figure 12-2](#fig12-2) shows what the form should look like when you’ve finished.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-2](#fig12-2) 显示了完成后表单的样子。'
- en: '![A screenshot of creating the authors table in Adminer. The table name is
    authors, and there are two columns. The id column has type int, and the AI radio
    button is selected. The name column has type text and the AI radio button is not
    selected.](Images/Figure12-2.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![在 Adminer 中创建 authors 表的截图。表名为 authors，有两列。id 列的类型为 int，且选中了 AI 单选按钮。name
    列的类型为 text，且未选中 AI 单选按钮。](Images/Figure12-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-2: Creating the authors</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">table in Adminer</samp>'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 12-2：在 Adminer 中创建 authors
    表</samp>
- en: Click **Save** to finish creating the table in the database. Adminer should
    bring you to the structure page for your new table, showing you the two columns
    you just created. Your table should start out empty, without any rows.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存**完成表格在数据库中的创建。Adminer 应该会带你到新表的结构页面，显示你刚刚创建的两个列。你的表应该是空的，尚没有任何行数据。
- en: 'At the top of the window, you should see page navigation links (for example,
    MySQL▸db▸books in [Figure 12-2](#fig12-2)). Click **books** to return to the books
    database page, then click **Create Table** again to create [Table 12-2](#tab12-2),
    giving it the name **books**. Add the following columns:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口顶部，你应该能看到页面导航链接（例如，MySQL▸db▸books，见[图 12-2](#fig12-2)）。点击**books**返回到书籍数据库页面，然后再次点击**创建表**以创建[表
    12-2](#tab12-2)，并为其命名为**books**。添加以下列：
- en: An **id** column with type **int** and **AI** checked
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**id**列，类型为**int**，并选中**AI**选项
- en: A **title** column with type **text**
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**title**列，类型为**text**
- en: An **author_id** column
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**author_id**列
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Adminer is smart enough to determine on its own that the author_id column
    uses the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">int</samp> type
    and relates to the authors.id column, so it will automatically set the type to
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp>.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*Adminer 足够智能，可以自动判断 author_id 列使用的是 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">int</samp>
    类型，并与 authors.id 列相关联，因此它会自动将类型设置为 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp>。*'
- en: '[Figure 12-3](#fig12-3) shows what this form should look like once you’ve added
    these columns.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-3](#fig12-3) 显示了添加这些列后表单的样子。'
- en: '![A screenshot of creating the books table in Adminer. The table name is books,
    and there are three columns. The id column has type int, and the AI radio button
    is checked. The title column has type text and the author_id column has type authors;
    the AI button is not checked for either.](Images/Figure12-3.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![在 Adminer 中创建 books 表的截图。表名为 books，有三列。id 列的类型为 int，且选中了 AI 单选按钮。title 列的类型为
    text，author_id 列的类型为 authors；后两个列都未选中 AI 单选按钮。](Images/Figure12-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-3: Creating the books
    table in Adminer</samp>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 12-3：在 Adminer 中创建 books 表</samp>
- en: Click **Save**. You’ve now created a <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    database with two tables, <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>, but there isn’t
    any data in it yet.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **保存**。你现在已经创建了一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    数据库，包含两个表：<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">books</samp>，但其中还没有任何数据。
- en: Now that you have a MySQL database running on your computer and access to the
    Adminer MySQL client, you’re ready to run your own SQL queries. Your first queries
    will add the data from [Tables 12-1](#tab12-1) and [12-2](#tab12-2) into their
    corresponding MySQL tables.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在电脑上运行了一个 MySQL 数据库，并且可以访问 Adminer MySQL 客户端，你已经准备好运行自己的 SQL 查询。你的第一个查询将把
    [表格 12-1](#tab12-1) 和 [12-2](#tab12-2) 中的数据添加到相应的 MySQL 表中。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-2: Query Your SQL Database</samp>'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 12-2：查询你的 SQL 数据库</samp>
- en: In this exercise, you’ll learn the syntax of SQL queries. You’ll be using MySQL,
    but the syntax is nearly identical to that of all other types of SQL, so this
    section should give you a solid foundation for writing SQL queries in general.
    You’ll learn the different verbs and practice running SQL queries to add, update,
    delete, and most importantly, search the data in SQL databases.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将学习 SQL 查询的语法。你将使用 MySQL，但其语法与所有其他类型的 SQL 基本相同，因此本节应该为你编写 SQL 查询打下坚实的基础。你将学习不同的动词，并通过实践运行
    SQL 查询来添加、更新、删除，最重要的是，查询 SQL 数据库中的数据。
- en: Make sure that your Docker containers from Exercise 12-1 are up, then load Adminer
    in your web browser at *http://<wbr>localhost:8080*. Also make sure you’ve logged
    in to your MySQL server as the root user, using the same password from the previous
    exercise. When you’re ready, click the **books** database to begin.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在练习 12-1 中的 Docker 容器已启动，然后在浏览器中加载 Adminer，地址为 *http://<wbr>localhost:8080*。同时确保你已经以
    root 用户身份登录到 MySQL 服务器，使用的是上一个练习中的密码。当你准备好后，点击 **books** 数据库以开始。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">INSERT Statements</samp>
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">INSERT 语句</samp>
- en: So far the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> database
    you created in Exercise 12-1 includes the tables <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>, but those tables
    don’t have any rows.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你在练习 12-1 中创建的 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    数据库包含了 <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    表，但这些表中没有任何行。
- en: 'To add new rows to your tables, you use the <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    verb as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要向你的表格中添加新行，可以使用以下的 <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    动词：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Adminer, click the **SQL Command** link in the left sidebar. In the empty
    field that pops up, enter the following <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    queries:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Adminer 中，点击左侧边栏的 **SQL Command** 链接。在弹出的空白字段中，输入以下 <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    查询：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These commands insert all of the rows into the two tables in the database, one
    row at a time. The first two lines insert rows into the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table, just setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    field, while the last three lines insert rows into the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> fields. These
    <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> statements don’t specify
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> values because the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> field for both tables auto-increments,
    starting with <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令一次性将所有行插入到数据库中的两个表中。前两行将行插入到 <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    表中，仅设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 字段，而最后三行将行插入到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> 表中，设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> 字段。这些 <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    语句没有指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 值，因为两个表的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 字段会自动递增，从 <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    开始。
- en: While you don’t need to set the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    field when inserting into the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, you do need to set the <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    field manually, which is how you tell the database who the author of each book
    is. Since the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table
    started out empty, the author row for <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> should have an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> (as it was the first
    row added to the table), and the row for <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> should have an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>. When the code inserts
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    title, it sets <samp class="SANS_TheSansMonoCd_W5Regular_11">author"SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    and when it inserts the two books by Carl Sagan, it sets <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在插入到 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> 表时你不需要设置 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 字段，但你确实需要手动设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    字段，这样你就能告诉数据库每本书的作者是谁。由于 <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    表最初为空，因此 <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp> 的作者行应该有一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>（因为它是表中添加的第一行），而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> 的行应该有一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>。当代码插入
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    这一书名时，它将 <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> 设置为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，当它插入 Carl Sagan 的两本书时，它将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> 设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*In this chapter I write SQL keywords like <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">INSERT</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">WHERE</samp> in all
    caps, but doing so is just a popular convention. SQL keywords aren’t case sensitive,
    so you can use <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">insert</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">where</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">select</samp>,
    and so on if you prefer.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我将 SQL 关键字如 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">INSERT</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">WHERE</samp> 写成全大写，但这样做仅仅是一种流行的约定。SQL
    关键字不区分大小写，因此你也可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">insert</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">where</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">select</samp>
    等形式。*'
- en: '[Figure 12-4](#fig12-4) shows the process of inserting data into the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    tables by running these five <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    queries.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-4](#fig12-4) 显示了通过运行这五个 <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    查询将数据插入到 <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">books</samp> 表中的过程。'
- en: '![A screenshot of using the Adminer page to run SQL commands directly. The
    code box shows the five INSERT queries previously described, and below the box
    is an Execute button to run them.](Images/Figure12-4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Adminer 页面直接运行 SQL 命令的截图。代码框显示了之前描述的五个 INSERT 查询，框下方有一个执行按钮来运行它们。](Images/Figure12-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-4: Running INSERT
    queries in Adminer</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 12-4：在 Adminer 中运行 INSERT
    查询</samp>
- en: Once you’ve entered this series of SQL queries into Adminer, click **Execute**
    to run them, which should insert all of these rows into your database. Click **select**
    in the left sidebar to view the new data in the database. [Figure 12-5](#fig12-5)
    shows all of the rows in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    tables in Adminer.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将这一系列 SQL 查询输入到 Adminer 中，点击**执行**来运行它们，这应该会将所有这些行插入到你的数据库中。点击左侧边栏中的**选择**以查看数据库中的新数据。[图
    12-5](#fig12-5) 显示了 Adminer 中 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    表中的所有行。
- en: '![A screenshot of Adminer showing the three rows you just added to the books
    table, and the values of all of their columns.](Images/Figure12-5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Adminer 界面的截图，显示你刚刚添加到 books 表中的三行数据，以及它们所有列的值。](Images/Figure12-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-5: Viewing rows in
    the books table in Adminer</samp>'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 12-5：在 Adminer 中查看 books 表中的行</samp>
- en: Right above the table of data in [Figure 12-5](#fig12-5), you can see the line
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT * from 'books' LIMIT 50</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">(0.0002 s)</samp>, which is the
    SQL statement Adminer executed to retrieve this data from the MySQL database,
    followed by the amount of time it took for the query to run.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 12-5](#fig12-5) 的数据表格正上方，你可以看到这一行：<samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT
    * from 'books' LIMIT 50</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">(0.0002
    s)</samp>，这是 Adminer 执行的 SQL 语句，用于从 MySQL 数据库中检索这些数据，后面跟着查询执行所花费的时间。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">SELECT Statements</samp>
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">SELECT 语句</samp>
- en: While <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> statements
    add information to SQL databases, <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statements ask a database for specific information. When investigating leaked
    SQL databases, you’ll likely spend most of your time writing <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statements.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当 <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> 语句向 SQL 数据库添加信息时，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> 语句则是从数据库请求特定信息。在调查泄露的 SQL
    数据库时，你很可能会花费大部分时间编写 <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    语句。
- en: 'You can use a <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> statement
    to select all of the books by a certain author or, in the case of Epik data, all
    of the domain names registered by a specific person. Here’s the general syntax:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> 语句来选择某位作者的所有书籍，或者在
    Epik 数据的情况下，选择某个人注册的所有域名。以下是一般的语法：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When your SQL client runs a <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statement, the SQL server returns a table of data. To select everything in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table, click the **SQL
    Command** link in Adminer’s left sidebar and run the following query:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的 SQL 客户端运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> 语句时，SQL
    服务器将返回一个数据表。要选择 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> 表中的所有内容，请点击
    Adminer 左侧边栏中的 **SQL Command** 链接，并运行以下查询：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command uses an asterisk (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>)
    as a wildcard character, which means you’d like the response to include all columns.
    It also leaves out the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp>
    clause, so it will include all of the rows in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table without filtering them. [Figure 12-6](#fig12-6) shows these results in Adminer.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令使用星号 (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>) 作为通配符字符，这意味着你希望返回的数据包括所有列。它还省略了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> 子句，因此它将包含 <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    表中的所有行，而不对其进行过滤。[图 12-6](#fig12-6) 显示了 Adminer 中的这些结果。
- en: '![A screenshot from Adminer showing the results, formatted as a table, of running
    a SELECT query to retrieve all the data from the books table.](Images/Figure12-6.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![来自 Adminer 的截图，显示运行 SELECT 查询后，从 books 表中检索到的所有数据，格式化为表格。](Images/Figure12-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-6: Running a SELECT
    query in Adminer</samp>'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 12-6：在 Adminer 中运行 SELECT
    查询</samp>
- en: After running a <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    query, click Adminer’s **Export** link to export the data returned as a CSV spreadsheet.
    The options in the first drop-down menu are *open*, which allows you to open a
    CSV directly in your browser; *save*, used to download the CSV; and *gzip*, which
    lets you download a compressed version of the CSV. The three options in the second
    drop-down menu allow you to save the file with data separated by commas, semicolons,
    or tab characters.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> 查询后，点击 Adminer
    中的 **Export** 链接，将返回的数据导出为 CSV 电子表格。第一个下拉菜单中的选项有 *open*，允许你在浏览器中直接打开 CSV；*save*，用于下载
    CSV；以及 *gzip*，允许你下载压缩版的 CSV。第二个下拉菜单中的三个选项则允许你将文件保存为以逗号、分号或制表符分隔的数据。
- en: You can open spreadsheets created this way in software like Microsoft Excel
    or LibreOffice Calc and work with the data using that software. This makes it
    easier to share the data with colleagues or use advanced features like visualizing
    the data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在像 Microsoft Excel 或 LibreOffice Calc 这样的软件中打开通过这种方式创建的电子表格，并使用这些软件对数据进行操作。这使得与同事共享数据或使用高级功能（如可视化数据）变得更加容易。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Selecting Individual Fields</samp>
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You previously ran the <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT
    * FROM</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">table_name</samp>
    query to select all the columns in a table, but you can also choose only specific
    columns. Say you want to return only a list of titles in the table. Select the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> field alone with this
    query:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Instead of including all columns, this table includes only the book titles.
    The SQL server should return the results shown in [Table 12-3](#tab12-3). (For
    the remainder of this section, for simplicity’s sake, I’ll represent the information
    returned from SQL queries as tables in text rather than Adminer screenshots.)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-3:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> <samp class="SANS_Futura_Std_Book_11">Column
    in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp
    class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: When you’re working with larger databases, select only the columns you need
    so your queries will finish faster.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Sorting Results</samp>
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Use the <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER BY</samp> clause
    to sort the results of your queries. For example, to select all of the columns
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table, with
    the results sorted by the book title, run this query:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The results of this query will be ordered alphabetically by the title column,
    as shown in [Table 12-4](#tab12-4).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-4:</samp> <samp class="SANS_Futura_Std_Book_11">All
    Columns in the</samp> <samp class="mono">books</samp> <samp class="SANS_Futura_Std_Book_11">Table,
    Ordered by the</samp> <samp class="mono">title</samp> <samp class="SANS_Futura_Std_Book_11">Column</samp>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
- en: 'By default, results are sorted in ascending order: text fields are ordered
    alphabetically; number fields are ordered from smallest to largest; and date fields
    are ordered from earliest to latest. You can sort the results in descending order
    by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">DESC</samp> keyword.
    For example, use the following query to select all of the books, ordered by <samp
    class="SANS_TheSansMonoCd_W5Regular_11">title</samp> column in reverse alphabetical
    order:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also sort results by more than one column. For example, to first order
    the books by <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> (so
    the results will include all books by author 1 first, then by author 2, and so
    on), and then by <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> (so
    that within each author’s list of books, the books are sorted by title), run this
    query:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This should order the results first by <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>,
    then by <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>, as shown in
    [Table 12-5](#tab12-5).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-5:</samp> <samp class="SANS_Futura_Std_Book_11">All
    Columns in the</samp> <samp class="mono">books</samp> <samp class="SANS_Futura_Std_Book_11">Table,
    Ordered by</samp> <samp class="mono">author_id</samp> <samp class="SANS_Futura_Std_Book_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: In this case, all of the books by the author with <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> (Micah Lee) are shown
    first, and the books by the author with <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> (Carl Sagan) are shown
    next. The books for each author are then sorted alphabetically by <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Counting Rows in a Table</samp>
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'SQL databases have built-in functions you can run as part of your queries.
    For example, to find out how many rows are in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">COUNT()</samp> function:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After you run this command, the SQL server should return the results shown in
    [Table 12-6](#tab12-6).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-6:</samp> <samp class="SANS_Futura_Std_Book_11">Counting
    the Number of Rows in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">COUNT(*)</samp> |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: Selecting <samp class="SANS_TheSansMonoCd_W5Regular_11">COUNT(*)</samp> from
    a table is considerably faster than selecting all of the rows in that table and
    then counting them.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Filtering SELECT Results with
    WHERE Clauses</samp>
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You can also filter the results you get back using the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp>
    clause. For instance, to find the titles of books written by Micah Lee, run the
    following query:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The SQL server should return the results shown in [Table 12-7](#tab12-7).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-7:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> <samp class="SANS_Futura_Std_Book_11">of</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp class="SANS_Futura_Std_Book_11">Where</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">author</samp> <samp class="SANS_Futura_Std_Book_11">is</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: 'Similarly to Python <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements, the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> clause
    also supports parentheses and Boolean logic operators <samp class="SANS_TheSansMonoCd_W5Regular_11">AND</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">OR</samp>, as well as the comparison
    operators greater than (<samp class="SANS_TheSansMonoCd_W5Regular_11">></samp>),
    greater than or equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp>),
    less than (<samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp>), and less than
    or equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11"><=</samp>). For example,
    say you want to search for books with an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    between 10 and 100, including the number 10 but not the number 100\. Try that
    out with the following query:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can use the equals (<samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>)
    operator to search for exact strings. For example, run the following command to
    find all of the authors with the name Carl Sagan:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This search is case sensitive, so while it would find authors named Carl Sagan,
    it wouldn’t find authors named CARL SAGAN or carl sagan. For a case-insensitive
    search, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp> operator.
    Try running the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This command finds authors named Carl Sagan, CARL SAGAN, carl sagan, or any
    other capitalization.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp> operator supports
    the wildcard character, the percent sign (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>),
    which will match any characters. Querying the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table where <samp class="SANS_TheSansMonoCd_W5Regular_11">name LIKE ''%lee%''</samp>
    will search for rows where <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    contains any number of characters (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>),
    followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>, followed
    by any number of characters again (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>).
    For example, to find all of the authors with Lee in their names, run:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This query returns the row with the name <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp>, but it would also return Stan Lee, Lee Young-ae, and Andrea Leeds.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'To search just for people with the last name Lee, run this query:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this case, there’s only one wildcard character at the beginning of the string,
    followed by a space, followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>.
    This query will return Stan Lee, since this name matches any number of characters,
    followed by a space, followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>.
    However, it won’t return Lee Young-ae; this name matches any number of characters
    but has no space followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>,
    and it contains extra characters after <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Using logical operators, you can combine as many conditions as you want. For
    example, to look for books written by Carl Sagan that have the word *blue* in
    their titles, run this query:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You could expand on that query by running the following query to also check
    for books with *green* or *red* in their titles:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This query uses both the logical operators <samp class="SANS_TheSansMonoCd_W5Regular_11">AND</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">OR</samp>, as well as parentheses.
    When you run it, the SQL server will reject any rows where <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    isn’t <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> and where <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    doesn’t contain at least one of the strings <samp class="SANS_TheSansMonoCd_W5Regular_11">red</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">green</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">blue</samp>.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: This final query has multiple lines, with some of them indented. As your queries
    get longer, using whitespace like this can make your SQL queries easier to read.
    In general, I tend to write short queries on a single line and split longer queries
    into multiple lines. You’ll continue indenting your queries in the following sections.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a basic understanding of how to select data from a table
    in a SQL database. In the next section, you’ll learn to select data from multiple
    tables at once.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">JOIN Clauses</samp>
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because SQL databases are relational, you can select data from and receive results
    from columns from multiple tables simultaneously using <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>
    clauses. You can think of these clauses as the SQL server combining (joining)
    multiple tables into a single table, then selecting rows from that combined table.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: For example, say you want to write a single query that will return a table of
    book titles and their authors, relying on the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    field in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> field in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table. Run the query
    in [Listing 12-1](#list12-1) to select a table of results from columns in those
    two tables at once.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 12-1: Selecting from
    both the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">books</samp> and
    the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp> tables
    using the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">JOIN</samp> clause</samp>'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this query involves more than one table, you must specify the names of
    the columns you want to select in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">table_name.column_name</samp>.
    The SQL query selects the book title with <samp class="SANS_TheSansMonoCd_W5Regular_11">books.title</samp>
    and the author name with <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.name</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">FROM</samp> clause shows that
    this query is selecting *from* the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table and joining this table with the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table. The <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> clause explains
    how the two tables are related: the SQL server knows that a <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    row is related to an <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    row if the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    matches the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: When you run this query, the SQL database uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author"SANS_TheSansMonoCd_W5Regular_11">=</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp> relationship specified
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> clause to build
    the combined table shown in [Table 12-8](#tab12-8), from which it can then select
    rows.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-8:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp class="SANS_Futura_Std_Book_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> <samp class="SANS_Futura_Std_Book_11">Tables,
    Combined on</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">books.id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">books.author_id</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">books.title</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">authors.id</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">authors.name</samp> |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: Each row in this combined table includes all of the columns from both the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">books</samp> and the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    tables. First, notice that the value in each row for <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    is the same as the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    value. This is because of the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    relationship specified in the <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>
    clause. In each row, the books fields contain full rows from the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, and the authors fields contain full rows from the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table. Since Carl Sagan has two books in this database, his books take up two
    rows in the combined table.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> query in [Listing
    12-1](#list12-1) selects the columns <samp class="SANS_TheSansMonoCd_W5Regular_11">books.title</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.name</samp> from this
    combined table. This final result of the query should contain the information
    in [Table 12-9](#tab12-9).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-9:</samp> <samp class="SANS_Futura_Std_Book_11">Results
    from the Query in [Listing 12-1](#list12-1)</samp>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp> |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: The SQL server responds with a single table of rows that contains fields from
    both tables, based on the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    relationship specified in the <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>
    clause.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: The type of join described in this section is technically called an <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER
    JOIN</samp>, which is the default type of join in MySQL. In addition to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">INNER</samp> joins, however, you can also
    use <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">RIGHT</samp>
    joins.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using LEFT and RIGHT Joins</samp>
  id: totrans-206
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'There are two additional ways to join tables together in SQL: <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">RIGHT JOIN</samp>
    queries. Each time you join two tables, the table from which you’re selecting
    is the “left” table (<samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>,
    in the previous example). The table with which you’re joining is the “right” table
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>, in this case).
    <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT JOIN</samp> means that the
    combined table should contain all of the rows from the left table, but not necessarily
    all of the rows from the right table. As you might guess, <samp class="SANS_TheSansMonoCd_W5Regular_11">RIGHT
    JOIN</samp> means that the combined table should contain all the rows in the right
    table, but not necessarily those from the left. Finally, as you saw in the previous
    section, <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER JOIN</samp> means
    that the results should contain only rows where the relationship holds. That is,
    if there are any rows in the left table that don’t match any rows in the right
    table—and vice versa—based on the join relationship, then those rows won’t be
    included in the results.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate how this works, use the following query to add a row to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table, replacing
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Your Name</samp> with your
    own name:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now run the query in [Listing 12-2](#list12-2).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 12-2: Selecting from
    the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp> table
    and doing a <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">LEFT JOIN</samp>
    to the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">books</samp> table</samp>'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: This query is similar to the one in [Listing 12-1](#list12-1), but this time
    it selects from the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table (making it the left table) and joins it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table (making that the right table), using a <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp> instead of an <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER
    JOIN</samp>. The results of that query contain the information in [Table 12-10](#tab12-10).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-10:</samp> <samp class="SANS_Futura_Std_Book_11">Results
    from a</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT JOIN</samp> <samp
    class="SANS_Futura_Std_Book_11">Query, with the Left Table Containing More Rows</samp>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp> |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NULL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Your
    Name</samp> |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: '[Table 12-10](#tab12-10) has an extra row that the output of [Listing 12-1](#list12-1)
    didn’t have. In this row, the book <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    column is <samp class="SANS_TheSansMonoCd_W5Regular_11">NULL</samp>, a SQL term
    meaning “empty,” and the author <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column is your own name. Because this is a <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp>, the results include all rows from the left table (<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>),
    even though there aren’t any rows from the right table (<samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>)
    associated with it in the relationship.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: If you ran the same query as [Listing 12-2](#list12-2) but instead used an <samp
    class="SANS_TheSansMonoCd_W5Regular_11">INNER JOIN</samp> (or just a <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>,
    since inner joins are the default join type), the results wouldn’t include that
    last row. Your <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT JOIN</samp>
    results included all rows from the left table (<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>),
    including the extra author you added (your own name). But when you do an <samp
    class="SANS_TheSansMonoCd_W5Regular_11">INNER JOIN</samp>, the results include
    only rows from the left and right tables where a relationship holds. Since there
    aren’t any books with the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    set to your own <samp class="SANS_TheSansMonoCd_W5Regular_11">author.id</samp>,
    the relationship doesn’t hold, so the results don’t include that row.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Which type of <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> you
    need to use depends on the type of analysis you’re trying to do. <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER
    JOIN</samp> is a reasonable default, but if the SQL results you’re getting are
    missing data that you want, then you’ll probably want to use a <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp> instead.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using WHERE Clauses with Joins</samp>
  id: totrans-224
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As with other <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> statements,
    you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> clause
    along with <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> clauses to
    filter your results. To find all titles written by Carl Sagan without knowing
    what his <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> is in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table, run this query:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This query selects the column <samp class="SANS_TheSansMonoCd_W5Regular_11">books.title</samp>
    from the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table and
    joins it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table using the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    relationship. It then filters those results to only show the rows where <samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors.name</samp> is Carl Sagan. This
    query should return the results shown in [Table 12-11](#tab12-11).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-11:</samp> <samp class="SANS_Futura_Std_Book_11">Selecting
    from the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp
    class="SANS_Futura_Std_Book_11">Table Based on a Column in the Related</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: As with the other <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statement, you can also sort your results. If you wanted to sort these by title,
    you’d add <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER BY books.title</samp>
    to the query.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve now learned the trickiest parts of searching SQL databases for information.
    Next, we’ll discuss two more simple SQL verbs: <samp class="SANS_TheSansMonoCd_W5Regular_11">UPDATE</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">DELETE</samp>.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">UPDATE Statements</samp>
  id: totrans-235
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can update rows in a table using the <samp class="SANS_TheSansMonoCd_W5Regular_11">UPDATE</samp>
    verb, which uses this syntax:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For example, try updating this book’s title to include its subtitle by running
    the follow query:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This should have updated the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    of the book with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> from <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations: The Art of Analyzing Hacked and Leaked Data</samp>.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">DELETE Statements</samp>
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To delete rows in a table, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">DELETE</samp>
    verb, which takes the following syntax:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For example, you could delete the <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> book from the database by running this query (but
    don’t do this now, as you’ll want to keep this row for exercises later in the
    chapter):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this case, the condition is <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">=1</samp>, so this query finds any rows
    with an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of 1 and deletes
    them. Alternatively, if you wanted to delete all of the books with me as the author,
    the condition could be <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id=1</samp>.
    Or if you wanted to delete all of the books with *blue* in their titles, the condition
    could be <samp class="SANS_TheSansMonoCd_W5Regular_11">title LIKE '%blue%'</samp>.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Introducing the MySQL Command Line Client</samp>
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, you’ve run all of your SQL queries through Adminer for a simpler user
    experience as you learned the basics of SQL. MySQL clients like Adminer work well
    for everyday tasks like browsing data in databases, running individual queries,
    and quickly creating new tables. However, for some tasks, you’ll need to use the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> command line client.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: For example, later in this chapter, you’ll use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    client to import data from a SQL backup file from the Epik dataset into your MySQL
    server. SQL backup files are simply text files, generally with filenames that
    end in *.sql*, full of SQL queries—sometimes several gigabytes of SQL queries.
    To import the backup, the client runs each query in the file, one after the other.
    Adminer’s import feature allows you to upload a *.sql* file, but the Adminer Docker
    service has an upload limit of 128MB by default. The SQL backup from the Epik
    dataset you’ll work with later in this chapter is 1.2GB compressed, so it would
    be impossible to import it using Adminer. (Once you import it, however, you can
    use either client to run queries on the data.)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL command line client is also useful for working on remote servers,
    which I’ll discuss later in the chapter. After you SSH into a server on the cloud,
    you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> command
    to connect to the MySQL service and then run SQL queries there.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: The command line client isn’t ideal for all tasks. For example, if your query
    results include many columns, each line of output might be wider than your terminal
    window, causing the output to wrap, which makes it very difficult to read. Moreover,
    the command line client displays all the output in your terminal. If you’re running
    many queries, it might be cumbersome to scroll back through your terminal history
    to find specific results that you ran previously. For everyday queries, it’s easier
    to use a graphical client like Adminer.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: So far, you’ve seen SQL query results displayed in Adminer as HTML tables. If
    you run the same queries using the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    client, the data will be displayed as text in your terminal. You’ll test this
    in Exercise 12-3.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-3: Install and Test the
    Command Line MySQL Client</samp>'
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you’ll install and practice using the MariaDB command line
    client <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>, which has the
    same name and works in the same way as the official MySQL client.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening a terminal. If you’re using a Mac, install it in Homebrew
    by running this command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you’re using Linux or Windows with WSL, install it by running this command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can now use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command to connect to your MySQL database. To do so, run the following command:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-h</samp> argument (short
    for <samp class="SANS_TheSansMonoCd_W5Regular_11">--host</samp>) tells the client
    the IP address or hostname of the MySQL server to which you want to connect. In
    this case, the hostname is <samp class="SANS_TheSansMonoCd_W5Regular_11">localhost</samp>,
    since the server is running locally on your computer. The <samp class="SANS_TheSansMonoCd_W5Regular_11">--protocol</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">=tcp</samp> argument tells the MySQL client
    to connect to the server over the network, which is required when you’re running
    the server in a Docker container. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-u</samp>
    argument (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--user</samp>)
    tells the client that you’re logging in as the root user, in this case. Finally,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-p</samp> (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--password</samp>)
    tells the client that this user is protected with a password.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'After you run the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command, press ENTER. The MySQL client should prompt you to type the root user’s
    password:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Once you enter the correct password, you should end up in the MySQL shell:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: From here, you can run all the same SQL queries you did in Adminer. However,
    to work in the command line client, you’ll need to know a few additional queries.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">MySQL-Specific Queries</samp>
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Queries like <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> are typically nearly
    identical between different versions of SQL, but each version has unique queries
    for actions like returning a list of databases in the server or a list of tables
    in a database. To navigate around a MySQL server from the command line client,
    you’ll need to know the following MySQL-specific queries:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SHOW DATABASES;</samp> Shows a
    list of all of the databases on your MySQL server
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">USE *database_name*;</samp> Switches
    you into a specific database, so you can start running queries there
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SHOW TABLES;</samp> Shows a list
    of all of the tables in the currently selected database
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DESCRIBE TABLE *table_name*;</samp> Shows
    you the columns in a table
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: There are other MySQL-specific queries, but these are all you’ll need to know
    for the purposes of this book.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '> <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '*Technically, Adminer uses these queries too, but it runs them for you in the
    background. When you use the command line client, you have to run them yourself.
    For example, when Adminer showed you a list of databases, it ran <samp class="mono">SHOW
    DATABASES</samp>; for you in order to find the list; when you selected the <samp
    class="mono">books</samp> database, technically it ran <samp class="mono">USE
    books</samp>; for you.*'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test these queries. Run the following command to list all of the available
    databases on your MySQL server:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The result of this query lists all of the databases in this MySQL server. In
    this case, it lists the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    database you created in Exercise 12-1 and the four databases that come with MySQL
    by default.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> database:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After you run <samp class="SANS_TheSansMonoCd_W5Regular_11">USE books;</samp>,
    the prompt should change from <samp class="SANS_TheSansMonoCd_W5Regular_11">MariaDB
    [(none)]></samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">MariaDB [books]></samp>,
    letting you know which database is currently selected. When you run normal SQL
    queries with verbs like <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>, they’ll run in
    the currently selected database.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve selected a database, list all of its tables with the following
    command:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This database has two tables, <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>. List all of the
    columns in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This displays a table of data with each row representing a different column
    in the table that you’re describing, including all of the attributes of each column.
    For example, you can see that the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    column has the type of <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp>
    and is set to auto-increment.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'The queries you just ran return information about the MySQL server itself—what
    databases it contains, what tables those databases contain, and what columns are
    in each table. You can also query for the data stored in the database itself.
    For example, try running the following query to get a list of all of the books
    stored in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You can run any of the queries that you ran in Adminer using the CLI client,
    and the rows will be displayed in your terminal.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'At any point, you can run <samp class="SANS_TheSansMonoCd_W5Regular_11">exit</samp>
    to quit:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This will drop you back into your terminal.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: You’ve made it through the crash course on SQL and are ready to start tackling
    real data! In the rest of the chapter, you’ll learn more about Epik and its massive
    data breach, then download and analyze a MySQL database backup from the Epik dataset.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The History of Epik</samp>
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Epik, a Seattle-area company founded by Rob Monster in 2009, has long provided
    domain name and web hosting services to neo-Nazi and far-right websites. Its customers
    have included the notorious neo-Nazi website the Daily Stormer, the conspiracy
    website InfoWars, the Proud Boys hate group, and the Oath Keepers right-wing militia,
    which you learned about in [Chapter 6](chapter6.xhtml). After Gab moved to Epik,
    Monster baselessly claimed that much of the hate speech on Gab was posted by liberals
    who wanted to make the service look bad.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned in this chapter’s introduction, in October 2018, Robert Bowers
    posted a message to Gab shortly before committing the deadliest antisemitic terrorist
    attack in US history. GoDaddy deplatformed Gab, so it moved its domain hosting
    service to Epik. This wasn’t the only time that Epik helped save a far-right platform
    that was getting deplatformed after a mass shooting.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: In addition to helping save Gab, Epik started hosting the domain name for the
    far-right message board then known as 8chan (now rebranded as 8kun) after a similar
    mass shooting in 2019\. Patrick Crusius posted a manifesto to 8chan shortly before
    killing 23 people and injuring 23 more in a Walmart in El Paso, Texas, the deadliest
    anti-Latino terrorist attack in recent US history. Crusius’s manifesto also spouted
    the “great replacement” conspiracy theory. After the attack, Cloudflare suspended
    8chan’s service, but Epik was there to quickly bring the site back online.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Epik also handled domain hosting for Parler, the social media site discussed
    in the previous chapter, after various platforms banned it in the aftermath of
    the deadly January 6, 2021, attack on the US Capitol. Epik has since become a
    popular domain name registrar for far-right and conservative websites worried
    about getting deplatformed. America’s Frontline Doctors, the anti-vaccine disinformation
    group I discuss in the following chapter, has also registered its domains with
    Epik, though it’s not at risk of being deplatformed.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll learn about the history and motivation behind the Epik
    hack and the type of information this dataset contains.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Epik Hack</samp>
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'On September 1, 2021, less than a year before the US Supreme Court’s 2022 decision
    to overturn the constitutional right to abortion, the state of Texas passed the
    most restrictive abortion law in the US—more restrictive, at the time, than any
    law passed since the 1973 Supreme Court decision Roe v. Wade. The Texas Heartbeat
    Act banned abortions six weeks after pregnancy, before many people even realize
    they’re pregnant. The law is enforced by civil lawsuits: any member of the public
    who believes in forced birth can sue anyone who performs or facilitates abortions,
    creating a chilling effect for reproductive health care.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: An anti-abortion lobbyist group quickly set up a website by the name ProLifeWhistleblower.com,
    inviting the public to anonymously submit private details about people they believed
    were obtaining or facilitating abortions. GoDaddy kicked the group off its platform,
    citing a violation of its terms of service, so the site switched its domain hosting
    to Epik. Epik soon caved to public pressure and likewise stopped providing service,
    but this was enough to catch the attention of hackers.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: In September and October of 2021, in a series of hacks dubbed Operation Epik
    Fail, hackers identifying with Anonymous hacked Epik incredibly thoroughly, releasing
    hundreds of gigabytes of data on BitTorrent. DDoSecrets downloaded a copy of this
    data, added it to its leak archive, and also made it accessible to download from
    its public data server, rather than just using BitTorrent. Most data breaches
    expose a database, a collection of email, or a cache of documents. This breach
    included all of these, along with bootable disk images from Epik’s servers—essentially,
    the entire hard disks that powered its servers. You could use bootable disk images
    to run a snapshot of Epik’s complete servers in a virtual machine. With some work,
    this would allow you to rifle through *everything* hosted on these servers.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: The hackers published their leaks in three parts over the course of four weeks.
    In a press release accompanying the first data leak (see [Figure 12-7](#fig12-7)),
    they announced that they had released “a decade’s worth of data” from Epik. “This
    dataset is all that’s needed to trace the actual ownership and management of the
    fascist side of the Internet that has eluded researchers, activists, and, well,
    just about everybody,” the press release continued.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the press release that the hackers included with the Epik
    data. The release spells out “Operation EPIK FAIL” in text art.](Images/Figure12-7.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-7: The top of the</samp>
    <samp class="SANS_Futura_Std_Book_11">!README.TXT</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    included in the dataset, written by the Epik hackers</samp>'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s true: the Epik dataset includes 10 years of data from the company, including
    all of the data from nine MySQL databases. These databases include tables full
    of customers of various Epik products, like their domain name registrar; their
    service that protects websites against attacks, called BitMitigate; and their
    VPN service, called Anonymize. The databases also include information about domain
    name purchases, email forwarding for these domains, credit card transactions,
    customers’ passwords, and more.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The most important data in the Epik dataset, in my opinion, is the WHOIS privacy
    data containing information on the owners behind the domain names Epik hosts.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Epik’s WHOIS Data</samp>
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*WHOIS* (pronounced “who is”) data is the public ownership information you’re
    required to provide when buying a domain name. This generally includes contact
    details like names, email addresses, phone numbers, and physical addresses, along
    with the domain’s registrant contact, administrative contact, and technical contact
    (in many cases, the same person plays all three roles). Which organization keeps
    track of WHOIS records depends on the domain name in question, but the records
    are all public. A quick internet search should turn up plenty of online services
    that allow you to look up WHOIS data for any given domain. The <samp class="SANS_TheSansMonoCd_W5Regular_11">whois</samp>
    command line tool also lets you look up WHOIS data from a terminal.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Public WHOIS data creates a major privacy issue, since it allows anyone to easily
    discover not only the owner of a domain but also their PII. To combat this, many
    domain registrars offer WHOIS privacy services, where they’ll put their own information
    in the WHOIS record or just replace the owner name with something like REDACTED
    FOR PRIVACY on their customers’ behalf.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Epik runs a WHOIS privacy service, hiding the ownership information of many
    far-right domain names from the public. But the Epik dataset includes that hidden
    information. As long as a domain name was registered on Epik before September
    2021, when the hack occurred, you can use this dataset to look up its true owners.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the WHOIS ownership data associated with any domain name simply
    by running <samp class="SANS_TheSansMonoCd_W7Bold_B_11">whois</samp> <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11">domain_name</samp>
    in a terminal. This command will look up the public information, meaning that
    if a domain uses a WHOIS privacy service, you won’t get to see who actually owns
    it. For example, you would run the following command to find the ownership information
    about the Oath Keepers domain name, oathkeepers.org:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When I ran this command, I got the following output:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Public WHOIS data told me that oathkeepers.org was first registered on March
    1, 2009; it expires in 2032; and its current registrar was Epik. However, all
    the contact information for the person who registered it was listed as <samp class="SANS_TheSansMonoCd_W5Regular_11">REDACTED
    FOR PRIVACY</samp>, effectively hiding the domain ownership information from the
    public.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: If you search the Epik dataset for this domain name, however, as you’ll learn
    to do later in this chapter, you can find all the redacted site ownership details.
    When I searched the dataset, I found that the oathkeepers.org registrant organization
    is Oath Keepers, and the registrant name is Stewart Rhodes. As noted in [Chapter
    6](chapter6.xhtml), Rhodes is the Oath Keepers founder who was convicted of seditious
    conspiracy for his role in the January 6, 2021, attack and subsequently sentenced
    to 18 years in prison. The dataset also includes Rhodes’ phone number, email address,
    and a physical address in Granbury, Texas.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the administrator and technical contacts for this domain lists
    the company eJam Systems LLC, along with the name Edward Durfee, an email address
    at ejamsystems.com, a phone number, and a home address in Northvale, New Jersey.
    eJam Systems LLC appears to be a right-wing company, run by Edward Durfee, that
    did tech work for the Oath Keepers. None of this information was available in
    the WHOIS records, but now it’s all public, thanks to the Epik hack. If you check
    out the email in the *sentmail648* folder you imported in [Chapter 6](chapter6.xhtml),
    you’ll find messages from the address *oksupport@oathkeepers.org* all signed by
    Edward Durfee, IT Support.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-320
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In [Chapter 1](chapter1.xhtml), I discussed not revealing unnecessary PII.
    In this case, I believe that publishing Durfee’s name, the city he lives in, and
    the name of his company is in the public interest. Since he’s an organizer for
    the Oath Keepers, a group that attempted to subvert democracy, this makes him
    a legitimate target of reporting. There’s no public interest in publishing his
    home address, phone number, or email address, though.*'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: After the Epik hack, reporter Mikael Thalen wrote an article for the Daily Dot
    based on the leaked WHOIS data and focusing on Ali Alexander, one of the primary
    organizers on January 6 and a major activist in the Stop the Steal movement. Thalen
    used the Epik data to show that in the days following the riot, Alexander began
    turning on WHOIS privacy for over 100 domains he owned, nearly half of them connected
    to the election lie, such as stopthestealmovement.com and stopthestealnews.com.
    You can read Thalen’s reporting at [*https://<wbr>www<wbr>.dailydot<wbr>.com<wbr>/debug<wbr>/ali<wbr>-alexander<wbr>-epik<wbr>-hack<wbr>-web<wbr>-domains<wbr>-capitol<wbr>-riot<wbr>/*](https://www.dailydot.com/debug/ali-alexander-epik-hack-web-domains-capitol-riot/).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: In Exercise 12-4, you’ll download part of the Epik dataset and get ready to
    start exploring it yourself.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-4: Download and Extract
    Part of the Epik Dataset</samp>'
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Epik dataset is split into three folders: *EpikFail*, *EpikFailTheB:Sides*,
    and *EpikFailYouLostTheGame,* which you can download either using BitTorrent or
    from DDoSecrets’ public data server at [*https://<wbr>data<wbr>.ddosecrets<wbr>.com<wbr>/Epik<wbr>/*](https://data.ddosecrets.com/Epik/).
    Inside the first folder, *EpikFail*, are three subfolders: *emails*, *filesystems*,
    and *sql*. The *emails* folder contains email messages from a single email account
    related to Epik, while the *filesystems* folder contains all of the files taken
    from one of Epik’s Linux servers. The *sql* folder, by far the largest folder
    in the first part of the Epik dataset, contains backups of MySQL databases. For
    this exercise, you’ll download a single MySQL backup file, *api_system.sql.gz*,
    which takes only 1.2GB of disk space.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'On your *datasets* USB disk, create a new folder called *Epik* for the Epik
    dataset, and then download *api_system.sql.gz* from [*https://<wbr>data<wbr>.ddosecrets<wbr>.com<wbr>/Epik<wbr>/EpikFail<wbr>/sql<wbr>/api<wbr>_system<wbr>.sql<wbr>.gz*](https://data.ddosecrets.com/Epik/EpikFail/sql/api_system.sql.gz)
    and save it there. Now, open a terminal (if you’re in Windows, use an Ubuntu terminal)
    and change to the *Epik* folder on your *datasets* USB disk like so:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The file is a compressed backup of a MySQL database with the extension *.sql.gz*,
    meaning that it was compressed using GZIP discussed in [Chapter 11](chapter11.xhtml).
    To extract the *api_system.sql.gz* file, run the following command:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'SQL data compresses very well: the original *api_system.sql.gz* file is 1.2GB,
    but the extracted version, *api_system.sql*, is 20GB, taking up 16 times as much
    disk space.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve extracted the file, the next step is to import it into your
    MySQL database in Exercise 12-5.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-5: Import Epik Data into
    MySQL</samp>'
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Epik dataset includes nine separate MySQL databases. To keep things simple,
    the exercises in this chapter require you to import and explore data only in the
    *api_system.sql* database into your MySQL server. Each *.sql* file in the Epik
    dataset represents a full database containing several tables. In order to import
    one of these files into MySQL, first you’ll need to create a database for it.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Create a Database
    for api_system</samp>
  id: totrans-334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> command
    line client to create a new database called <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>.
    Prefixing your database title with <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_</samp>
    will help you keep it separate from other databases you might import in the future.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and run the following command to connect to your MySQL server
    as the root user:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After logging in with the root password, run this command to create the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Congrats, you’ve just created a new database!
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Import api_system
    Data</samp>
  id: totrans-341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The simplest way to import a MySQL backup into a MySQL client is to pipe the
    data into the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> program,
    by running the following command:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The problem is that you’d see no output—no progress bars or any other indication
    that it’s actually working. This is fine for small SQL backups that take a few
    seconds to import, but it might take hours or days to import large backups. To
    solve this problem, I use a simple program called <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>,
    which stands for “Pipe Viewer,” to display a progress bar. The <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    command is similar to the <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>
    command, but it also displays useful output so you can be sure your command is
    running.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using a Mac, install <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    in Homebrew by running the following command:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If you’re using Linux or Windows with WSL, install <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    by running the following command:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once you’ve installed <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>,
    make sure you’re in the *Epik* folder and run this command:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Just like <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    should load data from *api_system.sql* and pipe it into <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>,
    but this time it should show you a progress bar like this one, complete with the
    import speed and the estimated time that it will finish:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In this example, I had been running the import for 33 minutes and 47 seconds.
    It had progressed through 2.89GB of the data (14 percent) and estimated it would
    finish in 3 hours and 15 minutes, at a current speed of 587KB per second (though
    import speed varies greatly depending on which query is currently running). It
    took me a total of four hours to import *api_system.sql*.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the data from *api_system.sql* to finish importing before you move
    on to the next section. (It’s possible to run queries on the database before it’s
    fully imported, but you’ll only get results from the data that’s been imported
    so far.)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Exploring Epik’s SQL Database</samp>
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once *api_system.sql* has finished importing, it’s time to dive in and take
    a look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>
    database. With databases like this, a good tactic is to manually view each table
    and try to determine if it contains data worth exploring further. To begin my
    investigation, I looked at the first rows in each of the 49 tables in <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>,
    starting with the <samp class="SANS_TheSansMonoCd_W5Regular_11">backorder</samp>
    table and ending with the <samp class="SANS_TheSansMonoCd_W5Regular_11">whoisxmlapi_cache</samp>
    table. I tried to get a sense of what information that table held, if it was related
    to other tables in the database, and how many rows of data there were.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I’ll guide you through the tables that stood out to me in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database.
    You can use either Adminer or the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command line client: they both query the same SQL server and will receive the
    same tables of data in response. When your interest is piqued, you can try running
    your own queries as well. It’s good practice to refrain from running <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">UPDATE</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">DELETE</samp>
    queries in leaked databases that you’re investigating. However, <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    queries don’t modify anything in the database, so you can run as many as you want
    at any point, then continue following along when you’re done.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The domain Table</samp>
  id: totrans-358
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> table in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database
    has over 1.6 million rows in it and is clearly a list of domain names in Epik’s
    system. Count the number of rows in this table using the following query:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[Table 12-12](#tab12-12) shows the results from that query.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-12:</samp> <samp class="SANS_Futura_Std_Book_11">Counting
    the Rows in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp>
    <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">COUNT(*)</samp> |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1688005</samp> |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: Columns in the <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> table
    include <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    (the domain name, in all caps), <samp class="SANS_TheSansMonoCd_W5Regular_11">cr_date</samp>
    (presumably the domain name’s creation date), and <samp class="SANS_TheSansMonoCd_W5Regular_11">exp_date</samp>
    (presumably the domain name’s expiration date).
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'To look at the 10 most recently created domains in this table, run the following
    query:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This command uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER BY
    cr_date DESC</samp> clause to sort data returned by the <samp class="SANS_TheSansMonoCd_W5Regular_11">cr_date</samp>
    column, in descending order (from most recent to oldest, in this case). The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">LIMIT 10</samp> clause in the following
    line limits the results to only 10 rows; if you left that clause out, the command
    would return all 1.6 million rows.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 12-13](#tab12-13) shows the results from this query.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-13:</samp> <samp class="SANS_Futura_Std_Book_11">Selecting
    the Most Recently Created Domains</samp>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cr_date</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">exp_date</samp>
    |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803243</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAKEAPPLIANCESWORKAGAIN.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:41:52</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:41:52</samp> |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803233</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">BEREANBAPTISTPORTCHARLOTTE.ORG</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:33:26</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:33:26</samp> |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803213</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">WECONSIGNGUNS.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:32:04</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:32:04</samp> |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803223</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">WECONSIGNGUNS.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:32:04</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:32:04</samp> |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803183</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAINEANTIQUEMALL.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:29:42</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:29:42</samp> |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803203</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAINEANTIQUESTORE.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:29:42</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:29:42</samp> |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803193</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAINEANTIQUESHOP.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:29:42</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:29:42</samp> |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803173</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">WOOGITYBOOGITY.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:20:35</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:20:35</samp> |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803163</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NAMECAESAR.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:17:52</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:17:52</samp> |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803153</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SCENICBOATTOUR.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:17:11</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:17:11</samp> |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
- en: 'To search the list of Epik domains for ones containing specific keywords, use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp> operator in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> clause. For example,
    try using the following queries to search for domains that mention the word *Trump*,
    ordered by the most recently created domains:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As you learned earlier, using <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp>
    makes the search case insensitive, and <samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>
    characters are wildcards. Filtering the results by <samp class="SANS_TheSansMonoCd_W5Regular_11">name
    LIKE '%trump%'</samp> will display only results that include *trump* (regardless
    of capitalization) somewhere in their name.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: The query returns 413 results total. [Table 12-14](#tab12-14) shows the first
    10 results.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, many people used Epik to register Trump-related domain names. These
    results don’t include any ownership information for these domains, though. To
    find that missing information, let’s take a look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-14:</samp> <samp class="SANS_Futura_Std_Book_11">Domains
    That Include the Word</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">Trump</samp>
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cr_date</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">exp_date</samp>
    |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17802593</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMPISM.IO</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 23:45:44</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-28 23:45:44</samp> |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17750903</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMPWONINALANDSLIDE.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-23 08:52:33</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-23 08:52:33</samp> |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17750913</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DONALDTRUMPWONINALANDSLIDE.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-23 08:52:33</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-23 08:52:33</samp> |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17676023</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DUMP-TRUMP.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-22 21:38:40</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-22 21:38:40</samp> |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17694803</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMPBEEGIRLS.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-19 00:14:23</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2026-02-19 00:14:23</samp> |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17672243</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMP2020.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-17 17:43:32</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-17 17:43:32</samp> |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17661353</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">FANTRUMP.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-16 19:04:43</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-16 19:04:43</samp> |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17662513</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DONALDTRUMP.TRUTH</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-16 13:22:16</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-16 13:22:16</samp> |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17662433</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMP.TRUTH</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-16 13:22:13</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-16 13:22:13</samp> |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17615793</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">VOTELARATRUMP.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-14 17:38:12</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2023-02-14 17:38:12</samp> |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The privacy Table</samp>
  id: totrans-402
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp> table has 721,731
    rows of data. Like the <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp>
    table, it has a <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> column
    that lists domain names, but it also includes columns with all of the private
    WHOIS details. Relevant columns include <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">admin _name</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_address</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_phone</samp>,
    and other similar information. There are also numerous similar columns with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">tech_</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">bill_</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">reg_</samp> prefixes. The data
    in this table includes WHOIS data for the administrator contact, the technical
    contact, the billing contact, and the registrant contact. There’s also a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">date_add</samp> column with a timestamp,
    presumably noting when this domain was added to Epik’s system.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'I mentioned earlier that, in 2019, Patrick Crusius posted a manifesto to 8chan
    before killing 23 people and injuring 23 more in El Paso, Texas. In the aftermath
    of the terrorist attack, 8chan moved its domain name hosting to Epik. With that
    in mind, search the data for 8chan.co, 8chan’s domain name, to see who is behind
    the site:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[Table 12-15](#tab12-15) shows partial results from this query. The query selects
    all columns (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>), but I included
    only the <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_</samp> columns here
    because the <samp class="SANS_TheSansMonoCd_W5Regular_11">tech_</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">bill_</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">reg_</samp>
    columns all have the exact same data that appears in the <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_</samp>
    column.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: This domain was added to Epik’s system the night of August 4, 2019\. This was
    the day after Crusius posted his manifesto to 8chan and then went on his anti-Latino
    murder spree.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s public knowledge that Jim Watkins and his son, Ron Watkins, ran 8chan
    at the time (they are also behind today’s rebrand, 8kun). According to the HBO
    documentary miniseries *Q: Into the Storm*, directed and produced by Cullen Hoback,
    the pair are also by far the most likely people behind the QAnon conspiracy cult.
    Jim Watkins, an American, lived in the Philippines at the time of Crusius’s rampage.
    As you can see from the hidden WHOIS data, the admin address is for a property
    in the Philippines. This increases confidence that the data is authentic, and
    also gives key data points about Jim Watkins in case we wanted to research him
    further: an address and phone number.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-15:</samp> <samp class="SANS_Futura_Std_Book_11">Ownership
    Data for the Domain 8chan.co</samp>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">2429814</samp>
    |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8CHAN.CO</samp>
    |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">date_add</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-08-04
    23:01:11</samp> |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Loki
    Technology, Incorporated</samp> |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_name</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim
    Watkins</samp> |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp> |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_address</samp> | <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_city</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pasig</samp>
    |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_state</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">NCR</samp> |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_zip</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1600</samp>
    |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_country</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">PH</samp> |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_cc</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">PH</samp>
    |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_phone</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">+</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">63</samp><samp
    class="SANS_Futura_Std_Book_11">.</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp>
    |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
- en: 'Since Watkins runs a website popular among American terrorists and is likely
    one of the people behind QAnon, the next logical step is to check if he or his
    company, Loki Technology, owned any other domain names on Epik. To find out, try
    running this query in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>
    database:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This query searches for domains that list <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp>
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>, which
    is the administrator email address on 8chan.co. However, it returns just a single
    row for that domain. Run the following query, modified with the expression <samp
    class="SANS_TheSansMonoCd_W5Regular_11">admin_email LIKE ''%@nttec.com''</samp>
    to check for domains where <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp>
    is any email address at the nttec.com domain:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'However, this query has the same results. For your next query, switch tactics
    and search for domains that list <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org</samp>
    as anything mentioning Loki Technology, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org
    LIKE ''%Loki Technology%''</samp> expression. The expression includes wildcard
    characters, just in case Watkins listed his company slightly differently on different
    domains, like “Loki Technology, Inc.” instead of “Loki Technology, Incorporated”:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This query returns the same result. For a final query, search the domains that
    list <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_name</samp> as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp>, using <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp>
    to make the search case insensitive:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Unfortunately, all these queries return just one result: the 8chan.co row.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn about how I eventually found more information
    about domains owned by Jim Watkins in the Epik dataset, just not in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database. For
    now, let’s look at some final interesting tables in this database.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The hosting and hosting_server
    Tables</samp>
  id: totrans-434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp> table has
    3,934 rows and appears to show websites that Epik actually runs the servers for,
    not just the domain name registration. Columns include <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cr_date</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">username</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp> (in plaintext, though
    it’s not clear what these usernames and passwords are for), <samp class="SANS_TheSansMonoCd_W5Regular_11">plan</samp>
    (like silver, gold, or platinum), <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp>,
    and others. Run the following query to view the most recent rows:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Since the query uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER
    BY cr_date DESC</samp> clause, the results will be sorted from most recent to
    oldest. The <samp class="SANS_TheSansMonoCd_W5Regular_11">LIMIT 5</samp> clause
    means the results will include at most five rows. [Table 12-16](#tab12-16) shows
    the results from this query.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-16:</samp> <samp class="SANS_Futura_Std_Book_11">Recent
    Rows in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp>
    <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">domain</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cr_date</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">plan</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">server_id</samp> |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">33613</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">THELIBERATEDPRESS.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 18:08:06</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">bronze</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39573</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">REICKERTSPLUMBING.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 17:30:18</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">email</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39563</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">IANLAZAR.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 16:50:10</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">bronze</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39553</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">APAYWEEKLY.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 16:16:08</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sitebuilder-basic</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39543</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">BOUNCETHEBOX.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 15:24:08</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">silver</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
- en: I tried loading several of the domain names in this table in a browser. Some
    of them are down, while others appear to be websites for random businesses. I
    quickly noticed that the <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp>
    column implies a relationship with another table. I guessed the related table
    was most likely the <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp>
    table and began to run queries on that.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp> table
    has only six rows, each a different server that Epik uses to host websites. Run
    this query to see the data in this table:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[Table 12-17](#tab12-17) shows the query results.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-17:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">api_host</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">login_host</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">login_port</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">username</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">password</samp>
    |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">192.187.99.50</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2082</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">epikhost</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">204.12.206.186</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting5.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.193.70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting6.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">13</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.193.195</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting7.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">14</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.193.163</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting8.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.194.85</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting9.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
- en: The passwords in this table are all in plaintext. In fact, if you load *https://<wbr>hosting9<wbr>.epik<wbr>.com:2083*
    in Tor Browser, you’ll see the login page for cPanel, software that’s used to
    manage shared web hosting systems like this. The usernames and passwords in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp> table are
    likely the credentials to log in to this cPanel server—but don’t actually try
    this out. As noted earlier, it’s fine for you to see the passwords scattered across
    datasets, but actually attempting to log in to an account with them is illegal.
    In any case, Epik has probably changed its passwords since the data breach.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the recent websites in the <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp>
    table have a <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp> of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>. Check how many websites
    are hosted on that server by running a query to join it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp>
    table:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The result is 1,155, so that’s the number of websites the server with ID 23
    hosts.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 'What about the rest of the servers? The quickest way to figure out how many
    websites each server hosts is to use a <samp class="SANS_TheSansMonoCd_W5Regular_11">GROUP
    BY</samp> clause, like this:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This query groups by <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting.server_id</samp>,
    which means each row of the results will show the number of rows in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp> table with that <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp>.
    [Table 12-18](#tab12-18) shows the results of this query.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-18:</samp> <samp class="SANS_Futura_Std_Book_11">The
    Number of Websites Hosted on Each Server</samp>
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">server_id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">server_count</samp>
    |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">762</samp>
    |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">13</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1474</samp>
    |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">14</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">543</samp>
    |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1155</samp>
    |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
- en: While there’s always more to learn, you should now have the SQL skills to write
    powerful queries that can help you quickly find what you’re looking for, even
    in tables with millions of rows.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Working with Epik Data in the Cloud</samp>
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MySQL databases from Epik contain an overwhelming amount of data that’s
    useful for extremism research, and only a fraction of that data is in the *api_system.sql.gz*
    backup that you’ve imported for this chapter. Some of the other databases, such
    as *intrust.sql.gz*, contain even more interesting information. If you’re curious,
    I suggest downloading, importing, and investigating all nine MySQL databases from
    the Epik dataset.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these databases would likely take your computer days to finish importing
    and would require a large amount of disk space. It’s more convenient to download
    and work with databases like these on a server in the cloud rather than on your
    local computer. To do so, follow these steps:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Create a new VPS on a cloud service provider (making sure it has plenty of disk
    space) and SSH into it, like you did in Exercise 4-4.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use <samp class="SANS_TheSansMonoCd_W5Regular_11">wget</samp> to download just
    the compressed database backups, a total of 14GB, from [*https://<wbr>data<wbr>.ddosecrets<wbr>.com<wbr>/Epik<wbr>/EpikFail<wbr>/sql<wbr>/*](https://data.ddosecrets.com/Epik/EpikFail/sql/).
    Alternatively, using a CLI BitTorrent client, you could download the entire first
    part of the Epik dataset, which is 35GB of data, similar to what you did in Exercise
    4-5.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the compressed MySQL database backups as you did in Exercise 12-4\.
    By the time you’re done extracting these files, you’ll have 145GB of MySQL backup
    files.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install a MySQL server on your VPS. There are various ways of doing this, but
    one option is to install Docker on your VPS and run a MySQL server as you did
    in Exercise 12-3\. Since your VPS will be running Linux, just make sure to follow
    the Linux instructions there.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the command line MySQL client, create nine databases, one for each backup
    file. Next, using <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>, import all nine database
    backups as you did in Exercise 12-5\. This step will likely take your VPS several
    days to finish, but since the remote server is handling the import, this won’t
    disrupt other work on your computer.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are essentially the steps I followed when I investigated the Epik dataset
    at The Intercept. The downside to doing this all in the cloud is that you’ll need
    to pay a monthly bill to your hosting provider for the server that you’re using.
    However, once you have a remote MySQL server full of Epik databases, you can use
    a MySQL client to connect to it and run queries, which will allow you to analyze
    hundreds of gigabytes of leaked databases.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: The most useful part of the Epik dataset, in my opinion, is the fact that you
    can use it to peel back the curtain behind Epik’s WHOIS privacy service. You did
    this some in the “Exploring Epik’s SQL Database” section, but you looked only
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp> table of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database.
    But that isn’t the only place where you can find WHOIS privacy data.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: The nine different MySQL databases in the Epik leak appear to have lots of duplicate
    data. For example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_intrust</samp>
    database has a table called <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp>
    with all of the same columns as the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table. The <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp>
    table has 1.4 million rows of data, roughly twice as many as the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table, though many of the rows appear to contain similar data. In the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_whois</samp>
    database, there’s a table called <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    with similar columns and 1.3 million rows of data. All three tables have various
    duplicates of the same WHOIS data, so you may want to search them all before concluding
    that a domain name ownership isn’t in this dataset.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: In the “Exploring Epik’s SQL Database” section, you ran some queries in <samp
    class="SANS_TheSansMonoCd_W5Regular_11">epiktrust_api_system</samp> to find domains
    that Jim Watkins owns other than 8chan.co, but they fell short. If you import
    additional databases, can you find other domains he owns? When I ran similar queries
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_intrust</samp> database
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp> table,
    which has more data than the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epiktrust_api_system</samp>
    database, I got some hits. If you want to run this query yourself, you’ll need
    to first download and import the *intrust.sql* database into your MySQL server.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the query I ran to search the <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp>
    table in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail _intrust</samp>
    database for domains owned by Jim Watkins’s company:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[Table 12-19](#tab12-19) lists the truncated results of this query, showing
    only some of the columns. As you can see, Jim Watkins owns all of the domains
    listed in the results.'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the domain 5ch.net loaded a Japanese-language site called
    5channel. When I loaded 2ch.net, it failed with a “connection timed out” error
    from Cloudflare, and when I loaded bbspink.com, I got an “access denied” error
    from Cloudflare saying that the site blocks connections from the US. I connected
    to a VPN in Europe and tried again; this time, it redirected to 5ch.net. If you’d
    like, you can try the same steps yourself.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-19:</samp> <samp class="SANS_Futura_Std_Book_11">Other
    Domains Owned by Jim Watkins from the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_intrust</samp>
    <samp class="SANS_Futura_Std_Book_11">Database</samp>
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">domain</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">date_update</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">admin_org</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">admin_name</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">admin_email</samp>
    |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615894</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8CH.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:05</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615904</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8CHAN.CO</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:06</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615944</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">5CH.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:07</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615984</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2CH.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:08</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8616004</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">BBSPINK.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:09</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
- en: As you explore more databases, you’ll discover that writing SQL queries to find
    what you’re looking for takes some trial and error. Sometimes the results from
    one query will inform what you should search for next—as you’ve seen, I used the
    email that Watkins registered 8chan.co with to find his other domains, for example.
    When you don’t find what you’re looking for, tweak your queries to make them more
    broad, or search a different field that might give you similar information.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you’ve learned how to run your own MySQL server on your computer
    using Docker containers. You took a crash course in SQL, the language used to
    communicate with SQL servers, and were introduced to Epik, the online service
    provider for right-wing extremists and American terrorists who have committed
    mass murder. Finally, you downloaded a MySQL database backup from the 2021 Epik
    Fail dataset, imported it into your own local MySQL server, and ran SQL queries
    to begin investigating it yourself.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: This marks the conclusion of [Part IV](part4.xhtml), which has given you the
    foundational tools and techniques to explore almost any dataset you can get your
    hands on. [Part V](part5.xhtml), the final two chapters of the book, doesn’t include
    any exercises. Instead, it describes real data-driven investigations I’ve worked
    on in the past, shows you what code I wrote and why, and explains exactly how
    I used the skills I’ve taught you throughout this book to find revelations. I
    hope you’ll use these case studies as inspiration for your own future data-driven
    investigations.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
