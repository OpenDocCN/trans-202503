- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">12</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EPIK
    FAIL, EXTREMISM RESEARCH, AND SQL DATABASES</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: On a Saturday morning in late October 2018 in Pittsburgh, Pennsylvania, Robert
    Bowers posted a message to the fascist-friendly social network Gab. “[Hebrew Immigrant
    Aid Society] likes to bring invaders in that kill our people,” he wrote. “I can’t
    sit by and watch my people get slaughtered. Screw your optics, I’m going in.”
    He was parroting the “great replacement” conspiracy theory, popularized in the
    US by former Fox News host Tucker Carlson, which claims that Jews are replacing
    white people with immigrants of color.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with an AR-15 assault rifle and three Glock semi-automatic pistols, Bowers
    entered the Tree of Life Synagogue, where three different Jewish congregations
    were holding Shabbat services that morning, and committed the deadliest antisemitic
    terrorist attack in US history. He killed 11 people and wounded 6 others, including
    several Holocaust survivors.
  prefs: []
  type: TYPE_NORMAL
- en: That day, several companies kicked Gab off their platforms. GoDaddy, the registrar
    that Gab used to buy the domain gab.com, sent Gab a letter saying it had “discovered
    numerous instances of content on your site that both promotes and encourages violence
    against people.” Gab was down only for a few days, though, thanks in part to the
    domain name registrar and web hosting company Epik, which soon took over registration
    for gab.com.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn about Epik, its extremist customers, and the 2021
    data breach that exposed hundreds of gigabytes of customer data. You’ll download
    and learn to work with some of the leaked data, most of which is in the format
    of structured query language, or SQL (often pronounced “sequel”). SQL is a popular
    database technology that many websites, online services, and local software use
    to store data. This chapter focuses on MySQL databases, which use the SQL software
    that Epik uses. You’ll also practice using database software called MariaDB, a
    community-maintained version of MySQL. Finally, you’ll learn to run a SQL server
    (software that allows you to host SQL databases), import the data, and write your
    own code to search it, skills that will prepare you for investigating your own
    SQL datasets in the future.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Structure of SQL Databases</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have briefly discussed SQL databases in previous chapters, including [Chapter
    10](chapter10.xhtml), where you converted CSVs into SQLite databases for BlueLeaks
    Explorer. There are many types of SQL databases, including PostgreSQL, Microsoft
    SQL Server, Oracle SQL, and the aforementioned MySQL and SQLite. While they’re
    all based on SQL, they have minor differences that mean they’re not entirely compatible
    with each other. SQL databases are popular; therefore, so are SQL data breaches.
  prefs: []
  type: TYPE_NORMAL
- en: Some SQL database software is proprietary. For example, Microsoft SQL Server
    is the version of SQL that Microsoft products require, and it runs only on Windows.
    Oracle is another proprietary version of SQL; if you get a leaked Oracle database,
    you’ll need to use Oracle software to access it. PostgreSQL and MySQL are free
    and open source and run on Linux servers, making them popular and widely used
    in web development. SQLite is another free and open source version of SQL. It
    can’t handle huge databases, but it’s very simple and convenient for small ones—iPhone
    and Android apps frequently store their settings in a SQLite database, for example.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Some datasets may require you to set up a SQL database server that you’re
    unfamiliar with, or figure out how to convert them into a type of SQL you already
    know, in order to analyze them. I once contributed to an investigation based on
    a leaked Chinese police database that revealed the suffocating surveillance of
    China’s Uyghur minority group in the Xinjiang region. It was an Oracle database,
    but it’s unclear whether the Chinese police paid for it or were pirating it. Because
    Oracle is proprietary and* *the investigating technologists didn’t have an Oracle
    license or experience with this version of SQL, they decided to convert it into
    a PostgreSQL database so they could more easily work with the data. Read the full
    report by Yael Grauer at* [https://theintercept.com/2021/01/29/china-uyghur-muslim-surveillance-police/](https://theintercept.com/2021/01/29/china-uyghur-muslim-surveillance-police/)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next we’ll look at what relational databases are, how SQL servers typically
    work, and the terminology used to describe SQL databases and the data they contain.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Relational Databases</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'SQL databases are made up of tables, which you can think of as spreadsheets
    comprising a list of rows, with each row containing the same columns, or *fields*.
    SQL databases are useful because they’re *relational*, meaning that data in different
    tables can relate to each other. You saw this firsthand when working with BlueLeaks
    Explorer: the BlueLeaks folders had individual spreadsheets like *Documents.csv*
    and *DocumentCategory.csv*, but once you converted them into SQLite databases,
    you could rely on the relationship between the Documents and the DocumentCategory
    tables to browse BlueLeaks documents by category.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at a simple example: a database that contains two related tables
    for books and authors. [Table 12-1](#tab12-1) shows the information stored in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-1:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: '[Table 12-2](#tab12-2) shows the information stored in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-2:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: Each SQL database can contain multiple tables, and each table has a defined
    set of fields. For example, [Table 12-2](#tab12-2) has <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: Every table in a SQL database normally has a unique <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    field that *auto-increments*, meaning that when you add rows of data to the table,
    the first row is automatically given an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of 1, the second is given an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of 2, and so on, ensuring that no two rows ever have the same <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>.
    If [Table 12-1](#tab12-1) included two authors named Micah Lee, it would be clear
    in the database that they’re not the same person, because the ID for each row
    would be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, tables relate to each other using these unique ID numbers. Let’s
    say you’re browsing through the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table and come across *Contact: A Novel*. Who wrote it? According to the data
    in its row, the <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>. To find out who the
    author is, you’d look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table for the row with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> to find that it’s Carl
    Sagan.'
  prefs: []
  type: TYPE_NORMAL
- en: This example deals with a small amount of data, but SQL databases can become
    huge and complicated. For example, instead of two authors, you might find a database
    with 10 million users and all sorts of tables that relate to it using a field
    called <samp class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Clients and Servers</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Most types of SQL databases are *server* software, meaning you install a SQL
    server to hold all of the data. Other computers then use a SQL *client* to communicate
    with that server to search for, add, or update data. This communication is similar
    to how websites work: a web server has the software that runs the website, while
    a web browser (the client) connects to the server remotely to load web pages,
    submit forms, and so on. SQL clients communicate to servers using SQL queries,
    also known as *statements*. Similarly to English, SQL queries start with a *verb*
    that describes an action being taken and have *clauses* that further describe
    that action. All SQL queries end with semicolons (<samp class="SANS_TheSansMonoCd_W5Regular_11">;</samp>).'
  prefs: []
  type: TYPE_NORMAL
- en: Each SQL server can host multiple databases. For example, you could run 20 different
    WordPress websites on the same MySQL server by having each website use a different
    database. The Epik dataset includes data from nine different MySQL databases.
    If you downloaded them all, you could import all nine into the same MySQL server.
    Because much of the Epik data is in MySQL format, in Exercise 12-1 you’ll run
    a MySQL server in Docker. Once you have a server running, you’ll connect to it
    later using a client to import the data and begin your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll try out two different MySQL clients: the web-based
    client Adminer and the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command line client, which allows you to interact with the database from the terminal.
    For MySQL, Adminer is more user-friendly for manually browsing a SQL database,
    but <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> is especially useful
    for working on remote servers and creating or restoring database backups. For
    a simpler introduction to working with clients, you’ll use Adminer in the first
    half of this chapter, then move on to the command line client. All clients interact
    with servers in the same way, sending SQL queries to the SQL server, which runs
    them and returns a response. Therefore, the skills you learn using Adminer will
    also apply to the CLI client.'
  prefs: []
  type: TYPE_NORMAL
- en: SQL servers also normally have a system of users and permissions that allow
    you to grant a given user access to some databases but not others. The root user
    on MySQL and other databases has total access to every database on the server.
    When you’re researching a leaked database, it’s fine to run all of your searches
    as the root user since you’re typically the only person using that server. However,
    if you’re running a database that strangers online might use, such as a website
    powered by a SQL database, you should use non-root database users with restricted
    permissions. This way, if one of those strangers hacks your database, they’ll
    have access only to what that specific database user has permissions for.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Tables, Columns,
    and Types</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can store only a single type of data in each column in a SQL table. For
    example, you can store strings, but not numerals, in the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    column of [Table 12-2](#tab12-2) (though you could get around this by storing
    a string representation of a number, like the string <samp class="SANS_TheSansMonoCd_W5Regular_11">'1'</samp>
    instead of the number <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>).
  prefs: []
  type: TYPE_NORMAL
- en: 'Data types differ slightly depending on the flavor of SQL you’re using. However,
    you’ll generally see types representing numbers, times, or strings of text. The
    following list includes some common SQL types that are all valid in MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">INT</samp> Integers or whole numbers
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DECIMAL</samp> Numbers with decimal
    places
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DATE</samp> A specific date
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DATETIME</samp> A specific date,
    along with the time of day
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">VARCHAR</samp> A string of characters
    of a specified length
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">TEXT</samp> Also a string of text
  prefs: []
  type: TYPE_NORMAL
- en: If [Table 12-2](#tab12-2) were stored in a MySQL database, <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    would be type <samp class="SANS_TheSansMonoCd_W5Regular_11">INT</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">title</samp> would be type <samp class="SANS_TheSansMonoCd_W5Regular_11">TEXT</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> would be type
    <samp class="SANS_TheSansMonoCd_W5Regular_11">INT</samp>. If you tried storing
    the string <samp class="SANS_TheSansMonoCd_W5Regular_11">"hola"</samp> in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> field, the SQL
    server would respond with an error message, because the data isn’t an integer.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to run a MariaDB server on your computer is by using Docker
    containers, like you did in Exercise 5-3 when you set up a local WordPress website
    as practice using Docker Compose. In the following exercises, you’ll get a MySQL
    server up and running, connect to your new server using MySQL clients, and practice
    using SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-1: Create and Test a MySQL
    Server Using Docker and Adminer</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Docker, you can quickly run different types of SQL servers on your computer,
    no matter what operating system you’re running. In this exercise, you’ll run a
    MariaDB server on your computer using Docker Compose. Once you have the server
    up and running, you’ll use the Adminer MySQL client to add the contents of [Tables
    12-1](#tab12-1) and [12-2](#tab12-2) to it as a test. You’ll move on to working
    with real leaked data later in the chapter, but you’ll start by experimenting
    with some simple example databases.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Run the Server</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create a folder for this chapter’s exercises and a *docker-compose.yaml* file
    in that folder. Type the following code into the file (or copy and paste it from
    [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-12<wbr>/docker<wbr>-compose<wbr>.yaml*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-12/docker-compose.yaml)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The *docker-compose.yaml* file in Exercise 5-3 used a <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    service running MariaDB, and a <samp class="SANS_TheSansMonoCd_W5Regular_11">wordpress</samp>
    service running the WordPress container. In that case, <samp class="SANS_TheSansMonoCd_W5Regular_11">wordpress</samp>
    connected to <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp> to run queries
    in order to save and load website content. This code uses an <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp>
    service to likewise connect to the <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    service.
  prefs: []
  type: TYPE_NORMAL
- en: The code provides the version number of the Compose specification with which
    the file is written (<samp class="SANS_TheSansMonoCd_W5Regular_11">3.9</samp>).
    It then defines the two services and includes the version of the <samp class="SANS_TheSansMonoCd_W5Regular_11">mariadb</samp>
    container image that the <samp class="SANS_TheSansMonoCd_W5Regular_11">db</samp>
    service runs. It sets the database root user’s password to <samp class="SANS_TheSansMonoCd_W5Regular_11">this-is-your-root-password</samp>
    (change this to a different password if you like). As noted earlier, you’ll work
    as the database’s root user throughout this chapter, since you’re the only one
    accessing this database. It publishes port 3306, meaning that you can connect
    to the server with a MySQL client on *localhost* at port 3306, and configures
    a volume to store all of MariaDB’s database files in a *db_data* folder. You’ll
    import several gigabytes of data into this database.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp> service runs
    the latest version of the <samp class="SANS_TheSansMonoCd_W5Regular_11">adminer</samp>
    container image. Adminer publishes port 8080, so you can load Adminer in a web
    browser at *http://<wbr>localhost:8080*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal, change to the folder for this chapter’s exercises, and start
    the containers with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first time you start the containers, your computer downloads the container
    images from Docker Hub, if you don’t already have them. After the containers start,
    you should see that a *db_data* folder containing all of the data stored in the
    database so far has been added to your *exercises* folder.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Connect to the Database
    with Adminer</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You just started two containers, one for your MySQL server and the other for
    your MySQL client, Adminer. Now you’ll connect to Adminer and use it to log in
    to your MySQL server. To access Adminer, open a browser and load *http://<wbr>localhost:8080*.
    You should see the Adminer login page shown in [Figure 12-1](#fig12-1). Here you
    can choose the type of database to which you’re connecting and what credentials
    you’ll use to log in. Keep System as MySQL, keep Server as db, set Username to
    **root**, and set Password to **this-is-your-root-password** (or whatever you
    used in your *docker-compose.yaml* file). Leave the Database field blank, since
    you haven’t imported any databases yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve logged in, you should see a list of default databases: <samp class="SANS_TheSansMonoCd_W5Regular_11">information_schema</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">performance_schema</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">sys</samp>. MariaDB uses these
    to store information it needs to run the database server, so in general, you shouldn’t
    touch them. Instead, you’ll create new databases and work with them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of Adminer loaded in a web browser at http://localhost:8080.](Images/Figure12-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-1: The Adminer login
    page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Create a Test Database</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To test out your new MySQL server, you’ll create a brand-new database and enter
    [Tables 12-1](#tab12-1) and [12-2](#tab12-2). Click the **Create Database** link,
    enter **books** in the field that pops up, and click **Save**. Once you’ve created
    the books database, click the **Create Table** link. Under Table Name, enter **authors**.
  prefs: []
  type: TYPE_NORMAL
- en: To add a column in Adminer, you enter its name under the Column Name header
    and choose a data type. To enter the first column from [Table 12-1](#tab12-1),
    create an **id** column and choose type **int** (short for “integer,” as mentioned
    earlier). Select the **AI** radio button, which sets this column to auto-increment.
    When you’ve finished, create the second column, **name**, with type **text**.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-2](#fig12-2) shows what the form should look like when you’ve finished.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of creating the authors table in Adminer. The table name is
    authors, and there are two columns. The id column has type int, and the AI radio
    button is selected. The name column has type text and the AI radio button is not
    selected.](Images/Figure12-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-2: Creating the authors</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">table in Adminer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save** to finish creating the table in the database. Adminer should
    bring you to the structure page for your new table, showing you the two columns
    you just created. Your table should start out empty, without any rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the window, you should see page navigation links (for example,
    MySQL▸db▸books in [Figure 12-2](#fig12-2)). Click **books** to return to the books
    database page, then click **Create Table** again to create [Table 12-2](#tab12-2),
    giving it the name **books**. Add the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: An **id** column with type **int** and **AI** checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **title** column with type **text**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **author_id** column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Adminer is smart enough to determine on its own that the author_id column
    uses the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">int</samp> type
    and relates to the authors.id column, so it will automatically set the type to
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp>.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-3](#fig12-3) shows what this form should look like once you’ve added
    these columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of creating the books table in Adminer. The table name is books,
    and there are three columns. The id column has type int, and the AI radio button
    is checked. The title column has type text and the author_id column has type authors;
    the AI button is not checked for either.](Images/Figure12-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-3: Creating the books
    table in Adminer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save**. You’ve now created a <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    database with two tables, <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>, but there isn’t
    any data in it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a MySQL database running on your computer and access to the
    Adminer MySQL client, you’re ready to run your own SQL queries. Your first queries
    will add the data from [Tables 12-1](#tab12-1) and [12-2](#tab12-2) into their
    corresponding MySQL tables.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-2: Query Your SQL Database</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you’ll learn the syntax of SQL queries. You’ll be using MySQL,
    but the syntax is nearly identical to that of all other types of SQL, so this
    section should give you a solid foundation for writing SQL queries in general.
    You’ll learn the different verbs and practice running SQL queries to add, update,
    delete, and most importantly, search the data in SQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that your Docker containers from Exercise 12-1 are up, then load Adminer
    in your web browser at *http://<wbr>localhost:8080*. Also make sure you’ve logged
    in to your MySQL server as the root user, using the same password from the previous
    exercise. When you’re ready, click the **books** database to begin.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">INSERT Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: So far the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> database
    you created in Exercise 12-1 includes the tables <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>, but those tables
    don’t have any rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add new rows to your tables, you use the <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    verb as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In Adminer, click the **SQL Command** link in the left sidebar. In the empty
    field that pops up, enter the following <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These commands insert all of the rows into the two tables in the database, one
    row at a time. The first two lines insert rows into the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table, just setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    field, while the last three lines insert rows into the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> fields. These
    <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> statements don’t specify
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> values because the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> field for both tables auto-increments,
    starting with <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: While you don’t need to set the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    field when inserting into the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, you do need to set the <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    field manually, which is how you tell the database who the author of each book
    is. Since the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table
    started out empty, the author row for <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> should have an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> (as it was the first
    row added to the table), and the row for <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> should have an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>. When the code inserts
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    title, it sets <samp class="SANS_TheSansMonoCd_W5Regular_11">author"SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    and when it inserts the two books by Carl Sagan, it sets <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In this chapter I write SQL keywords like <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">INSERT</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">WHERE</samp> in all
    caps, but doing so is just a popular convention. SQL keywords aren’t case sensitive,
    so you can use <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">insert</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">where</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">select</samp>,
    and so on if you prefer.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-4](#fig12-4) shows the process of inserting data into the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    tables by running these five <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>
    queries.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of using the Adminer page to run SQL commands directly. The
    code box shows the five INSERT queries previously described, and below the box
    is an Execute button to run them.](Images/Figure12-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-4: Running INSERT
    queries in Adminer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve entered this series of SQL queries into Adminer, click **Execute**
    to run them, which should insert all of these rows into your database. Click **select**
    in the left sidebar to view the new data in the database. [Figure 12-5](#fig12-5)
    shows all of the rows in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    tables in Adminer.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of Adminer showing the three rows you just added to the books
    table, and the values of all of their columns.](Images/Figure12-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-5: Viewing rows in
    the books table in Adminer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Right above the table of data in [Figure 12-5](#fig12-5), you can see the line
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT * from 'books' LIMIT 50</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">(0.0002 s)</samp>, which is the
    SQL statement Adminer executed to retrieve this data from the MySQL database,
    followed by the amount of time it took for the query to run.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">SELECT Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> statements
    add information to SQL databases, <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statements ask a database for specific information. When investigating leaked
    SQL databases, you’ll likely spend most of your time writing <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> statement
    to select all of the books by a certain author or, in the case of Epik data, all
    of the domain names registered by a specific person. Here’s the general syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When your SQL client runs a <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statement, the SQL server returns a table of data. To select everything in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table, click the **SQL
    Command** link in Adminer’s left sidebar and run the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command uses an asterisk (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>)
    as a wildcard character, which means you’d like the response to include all columns.
    It also leaves out the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp>
    clause, so it will include all of the rows in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table without filtering them. [Figure 12-6](#fig12-6) shows these results in Adminer.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot from Adminer showing the results, formatted as a table, of running
    a SELECT query to retrieve all the data from the books table.](Images/Figure12-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-6: Running a SELECT
    query in Adminer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: After running a <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    query, click Adminer’s **Export** link to export the data returned as a CSV spreadsheet.
    The options in the first drop-down menu are *open*, which allows you to open a
    CSV directly in your browser; *save*, used to download the CSV; and *gzip*, which
    lets you download a compressed version of the CSV. The three options in the second
    drop-down menu allow you to save the file with data separated by commas, semicolons,
    or tab characters.
  prefs: []
  type: TYPE_NORMAL
- en: You can open spreadsheets created this way in software like Microsoft Excel
    or LibreOffice Calc and work with the data using that software. This makes it
    easier to share the data with colleagues or use advanced features like visualizing
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Selecting Individual Fields</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You previously ran the <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT
    * FROM</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">table_name</samp>
    query to select all the columns in a table, but you can also choose only specific
    columns. Say you want to return only a list of titles in the table. Select the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> field alone with this
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Instead of including all columns, this table includes only the book titles.
    The SQL server should return the results shown in [Table 12-3](#tab12-3). (For
    the remainder of this section, for simplicity’s sake, I’ll represent the information
    returned from SQL queries as tables in text rather than Adminer screenshots.)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-3:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> <samp class="SANS_Futura_Std_Book_11">Column
    in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp
    class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> |'
  prefs: []
  type: TYPE_TB
- en: When you’re working with larger databases, select only the columns you need
    so your queries will finish faster.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Sorting Results</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Use the <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER BY</samp> clause
    to sort the results of your queries. For example, to select all of the columns
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table, with
    the results sorted by the book title, run this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The results of this query will be ordered alphabetically by the title column,
    as shown in [Table 12-4](#tab12-4).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-4:</samp> <samp class="SANS_Futura_Std_Book_11">All
    Columns in the</samp> <samp class="mono">books</samp> <samp class="SANS_Futura_Std_Book_11">Table,
    Ordered by the</samp> <samp class="mono">title</samp> <samp class="SANS_Futura_Std_Book_11">Column</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'By default, results are sorted in ascending order: text fields are ordered
    alphabetically; number fields are ordered from smallest to largest; and date fields
    are ordered from earliest to latest. You can sort the results in descending order
    by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">DESC</samp> keyword.
    For example, use the following query to select all of the books, ordered by <samp
    class="SANS_TheSansMonoCd_W5Regular_11">title</samp> column in reverse alphabetical
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also sort results by more than one column. For example, to first order
    the books by <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp> (so
    the results will include all books by author 1 first, then by author 2, and so
    on), and then by <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> (so
    that within each author’s list of books, the books are sorted by title), run this
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This should order the results first by <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>,
    then by <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>, as shown in
    [Table 12-5](#tab12-5).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-5:</samp> <samp class="SANS_Futura_Std_Book_11">All
    Columns in the</samp> <samp class="mono">books</samp> <samp class="SANS_Futura_Std_Book_11">Table,
    Ordered by</samp> <samp class="mono">author_id</samp> <samp class="SANS_Futura_Std_Book_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">author_id</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact:
    A Novel</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale
    Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> |'
  prefs: []
  type: TYPE_TB
- en: In this case, all of the books by the author with <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> (Micah Lee) are shown
    first, and the books by the author with <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> (Carl Sagan) are shown
    next. The books for each author are then sorted alphabetically by <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Counting Rows in a Table</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'SQL databases have built-in functions you can run as part of your queries.
    For example, to find out how many rows are in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">COUNT()</samp> function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After you run this command, the SQL server should return the results shown in
    [Table 12-6](#tab12-6).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-6:</samp> <samp class="SANS_Futura_Std_Book_11">Counting
    the Number of Rows in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">COUNT(*)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> |'
  prefs: []
  type: TYPE_TB
- en: Selecting <samp class="SANS_TheSansMonoCd_W5Regular_11">COUNT(*)</samp> from
    a table is considerably faster than selecting all of the rows in that table and
    then counting them.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Filtering SELECT Results with
    WHERE Clauses</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You can also filter the results you get back using the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp>
    clause. For instance, to find the titles of books written by Micah Lee, run the
    following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The SQL server should return the results shown in [Table 12-7](#tab12-7).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-7:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp> <samp class="SANS_Futura_Std_Book_11">of</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp class="SANS_Futura_Std_Book_11">Where</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">author</samp> <samp class="SANS_Futura_Std_Book_11">is</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'Similarly to Python <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements, the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> clause
    also supports parentheses and Boolean logic operators <samp class="SANS_TheSansMonoCd_W5Regular_11">AND</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">OR</samp>, as well as the comparison
    operators greater than (<samp class="SANS_TheSansMonoCd_W5Regular_11">></samp>),
    greater than or equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp>),
    less than (<samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp>), and less than
    or equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11"><=</samp>). For example,
    say you want to search for books with an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    between 10 and 100, including the number 10 but not the number 100\. Try that
    out with the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the equals (<samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>)
    operator to search for exact strings. For example, run the following command to
    find all of the authors with the name Carl Sagan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This search is case sensitive, so while it would find authors named Carl Sagan,
    it wouldn’t find authors named CARL SAGAN or carl sagan. For a case-insensitive
    search, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp> operator.
    Try running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This command finds authors named Carl Sagan, CARL SAGAN, carl sagan, or any
    other capitalization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp> operator supports
    the wildcard character, the percent sign (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>),
    which will match any characters. Querying the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table where <samp class="SANS_TheSansMonoCd_W5Regular_11">name LIKE ''%lee%''</samp>
    will search for rows where <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    contains any number of characters (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>),
    followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>, followed
    by any number of characters again (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>).
    For example, to find all of the authors with Lee in their names, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This query returns the row with the name <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp>, but it would also return Stan Lee, Lee Young-ae, and Andrea Leeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'To search just for people with the last name Lee, run this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this case, there’s only one wildcard character at the beginning of the string,
    followed by a space, followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>.
    This query will return Stan Lee, since this name matches any number of characters,
    followed by a space, followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>.
    However, it won’t return Lee Young-ae; this name matches any number of characters
    but has no space followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>,
    and it contains extra characters after <samp class="SANS_TheSansMonoCd_W5Regular_11">lee</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using logical operators, you can combine as many conditions as you want. For
    example, to look for books written by Carl Sagan that have the word *blue* in
    their titles, run this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You could expand on that query by running the following query to also check
    for books with *green* or *red* in their titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This query uses both the logical operators <samp class="SANS_TheSansMonoCd_W5Regular_11">AND</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">OR</samp>, as well as parentheses.
    When you run it, the SQL server will reject any rows where <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id</samp>
    isn’t <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> and where <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    doesn’t contain at least one of the strings <samp class="SANS_TheSansMonoCd_W5Regular_11">red</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">green</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">blue</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: This final query has multiple lines, with some of them indented. As your queries
    get longer, using whitespace like this can make your SQL queries easier to read.
    In general, I tend to write short queries on a single line and split longer queries
    into multiple lines. You’ll continue indenting your queries in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a basic understanding of how to select data from a table
    in a SQL database. In the next section, you’ll learn to select data from multiple
    tables at once.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">JOIN Clauses</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because SQL databases are relational, you can select data from and receive results
    from columns from multiple tables simultaneously using <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>
    clauses. You can think of these clauses as the SQL server combining (joining)
    multiple tables into a single table, then selecting rows from that combined table.
  prefs: []
  type: TYPE_NORMAL
- en: For example, say you want to write a single query that will return a table of
    book titles and their authors, relying on the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    field in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> field in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table. Run the query
    in [Listing 12-1](#list12-1) to select a table of results from columns in those
    two tables at once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 12-1: Selecting from
    both the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">books</samp> and
    the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp> tables
    using the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">JOIN</samp> clause</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this query involves more than one table, you must specify the names of
    the columns you want to select in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">table_name.column_name</samp>.
    The SQL query selects the book title with <samp class="SANS_TheSansMonoCd_W5Regular_11">books.title</samp>
    and the author name with <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.name</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">FROM</samp> clause shows that
    this query is selecting *from* the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table and joining this table with the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table. The <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> clause explains
    how the two tables are related: the SQL server knows that a <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    row is related to an <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    row if the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    matches the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: When you run this query, the SQL database uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author"SANS_TheSansMonoCd_W5Regular_11">=</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp> relationship specified
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> clause to build
    the combined table shown in [Table 12-8](#tab12-8), from which it can then select
    rows.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-8:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp class="SANS_Futura_Std_Book_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> <samp class="SANS_Futura_Std_Book_11">Tables,
    Combined on</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">books.id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">books.author_id</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">books.title</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">authors.id</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">authors.name</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah
    Lee</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Carl
    Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: Each row in this combined table includes all of the columns from both the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">books</samp> and the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    tables. First, notice that the value in each row for <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    is the same as the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    value. This is because of the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    relationship specified in the <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>
    clause. In each row, the books fields contain full rows from the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table, and the authors fields contain full rows from the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table. Since Carl Sagan has two books in this database, his books take up two
    rows in the combined table.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> query in [Listing
    12-1](#list12-1) selects the columns <samp class="SANS_TheSansMonoCd_W5Regular_11">books.title</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.name</samp> from this
    combined table. This final result of the query should contain the information
    in [Table 12-9](#tab12-9).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-9:</samp> <samp class="SANS_Futura_Std_Book_11">Results
    from the Query in [Listing 12-1](#list12-1)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: The SQL server responds with a single table of rows that contains fields from
    both tables, based on the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    relationship specified in the <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>
    clause.
  prefs: []
  type: TYPE_NORMAL
- en: The type of join described in this section is technically called an <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER
    JOIN</samp>, which is the default type of join in MySQL. In addition to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">INNER</samp> joins, however, you can also
    use <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">RIGHT</samp>
    joins.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using LEFT and RIGHT Joins</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'There are two additional ways to join tables together in SQL: <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">RIGHT JOIN</samp>
    queries. Each time you join two tables, the table from which you’re selecting
    is the “left” table (<samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>,
    in the previous example). The table with which you’re joining is the “right” table
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>, in this case).
    <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT JOIN</samp> means that the
    combined table should contain all of the rows from the left table, but not necessarily
    all of the rows from the right table. As you might guess, <samp class="SANS_TheSansMonoCd_W5Regular_11">RIGHT
    JOIN</samp> means that the combined table should contain all the rows in the right
    table, but not necessarily those from the left. Finally, as you saw in the previous
    section, <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER JOIN</samp> means
    that the results should contain only rows where the relationship holds. That is,
    if there are any rows in the left table that don’t match any rows in the right
    table—and vice versa—based on the join relationship, then those rows won’t be
    included in the results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate how this works, use the following query to add a row to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table, replacing
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Your Name</samp> with your
    own name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now run the query in [Listing 12-2](#list12-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 12-2: Selecting from
    the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">authors</samp> table
    and doing a <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">LEFT JOIN</samp>
    to the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">books</samp> table</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This query is similar to the one in [Listing 12-1](#list12-1), but this time
    it selects from the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table (making it the left table) and joins it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    table (making that the right table), using a <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp> instead of an <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER
    JOIN</samp>. The results of that query contain the information in [Table 12-10](#tab12-10).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-10:</samp> <samp class="SANS_Futura_Std_Book_11">Results
    from a</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT JOIN</samp> <samp
    class="SANS_Futura_Std_Book_11">Query, with the Left Table Containing More Rows</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks, Leaks, and Revelations</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Micah Lee</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Carl Sagan</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NULL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Your
    Name</samp> |'
  prefs: []
  type: TYPE_TB
- en: '[Table 12-10](#tab12-10) has an extra row that the output of [Listing 12-1](#list12-1)
    didn’t have. In this row, the book <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    column is <samp class="SANS_TheSansMonoCd_W5Regular_11">NULL</samp>, a SQL term
    meaning “empty,” and the author <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column is your own name. Because this is a <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp>, the results include all rows from the left table (<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>),
    even though there aren’t any rows from the right table (<samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>)
    associated with it in the relationship.'
  prefs: []
  type: TYPE_NORMAL
- en: If you ran the same query as [Listing 12-2](#list12-2) but instead used an <samp
    class="SANS_TheSansMonoCd_W5Regular_11">INNER JOIN</samp> (or just a <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp>,
    since inner joins are the default join type), the results wouldn’t include that
    last row. Your <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT JOIN</samp>
    results included all rows from the left table (<samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>),
    including the extra author you added (your own name). But when you do an <samp
    class="SANS_TheSansMonoCd_W5Regular_11">INNER JOIN</samp>, the results include
    only rows from the left and right tables where a relationship holds. Since there
    aren’t any books with the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    set to your own <samp class="SANS_TheSansMonoCd_W5Regular_11">author.id</samp>,
    the relationship doesn’t hold, so the results don’t include that row.
  prefs: []
  type: TYPE_NORMAL
- en: Which type of <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> you
    need to use depends on the type of analysis you’re trying to do. <samp class="SANS_TheSansMonoCd_W5Regular_11">INNER
    JOIN</samp> is a reasonable default, but if the SQL results you’re getting are
    missing data that you want, then you’ll probably want to use a <samp class="SANS_TheSansMonoCd_W5Regular_11">LEFT
    JOIN</samp> instead.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using WHERE Clauses with Joins</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As with other <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> statements,
    you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> clause
    along with <samp class="SANS_TheSansMonoCd_W5Regular_11">JOIN</samp> clauses to
    filter your results. To find all titles written by Carl Sagan without knowing
    what his <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> is in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> table, run this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This query selects the column <samp class="SANS_TheSansMonoCd_W5Regular_11">books.title</samp>
    from the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table and
    joins it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    table using the <samp class="SANS_TheSansMonoCd_W5Regular_11">books.author_id</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">authors.id</samp>
    relationship. It then filters those results to only show the rows where <samp
    class="SANS_TheSansMonoCd_W5Regular_11">authors.name</samp> is Carl Sagan. This
    query should return the results shown in [Table 12-11](#tab12-11).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-11:</samp> <samp class="SANS_Futura_Std_Book_11">Selecting
    from the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> <samp
    class="SANS_Futura_Std_Book_11">Table Based on a Column in the Related</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">title</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Pale Blue Dot</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Contact: A Novel</samp> |'
  prefs: []
  type: TYPE_TB
- en: As with the other <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    statement, you can also sort your results. If you wanted to sort these by title,
    you’d add <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER BY books.title</samp>
    to the query.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve now learned the trickiest parts of searching SQL databases for information.
    Next, we’ll discuss two more simple SQL verbs: <samp class="SANS_TheSansMonoCd_W5Regular_11">UPDATE</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">DELETE</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">UPDATE Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can update rows in a table using the <samp class="SANS_TheSansMonoCd_W5Regular_11">UPDATE</samp>
    verb, which uses this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, try updating this book’s title to include its subtitle by running
    the follow query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This should have updated the <samp class="SANS_TheSansMonoCd_W5Regular_11">title</samp>
    of the book with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> from <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations: The Art of Analyzing Hacked and Leaked Data</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">DELETE Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To delete rows in a table, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">DELETE</samp>
    verb, which takes the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you could delete the <samp class="SANS_TheSansMonoCd_W5Regular_11">Hacks,
    Leaks, and Revelations</samp> book from the database by running this query (but
    don’t do this now, as you’ll want to keep this row for exercises later in the
    chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the condition is <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">=1</samp>, so this query finds any rows
    with an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of 1 and deletes
    them. Alternatively, if you wanted to delete all of the books with me as the author,
    the condition could be <samp class="SANS_TheSansMonoCd_W5Regular_11">author_id=1</samp>.
    Or if you wanted to delete all of the books with *blue* in their titles, the condition
    could be <samp class="SANS_TheSansMonoCd_W5Regular_11">title LIKE '%blue%'</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Introducing the MySQL Command Line Client</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, you’ve run all of your SQL queries through Adminer for a simpler user
    experience as you learned the basics of SQL. MySQL clients like Adminer work well
    for everyday tasks like browsing data in databases, running individual queries,
    and quickly creating new tables. However, for some tasks, you’ll need to use the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> command line client.
  prefs: []
  type: TYPE_NORMAL
- en: For example, later in this chapter, you’ll use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    client to import data from a SQL backup file from the Epik dataset into your MySQL
    server. SQL backup files are simply text files, generally with filenames that
    end in *.sql*, full of SQL queries—sometimes several gigabytes of SQL queries.
    To import the backup, the client runs each query in the file, one after the other.
    Adminer’s import feature allows you to upload a *.sql* file, but the Adminer Docker
    service has an upload limit of 128MB by default. The SQL backup from the Epik
    dataset you’ll work with later in this chapter is 1.2GB compressed, so it would
    be impossible to import it using Adminer. (Once you import it, however, you can
    use either client to run queries on the data.)
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL command line client is also useful for working on remote servers,
    which I’ll discuss later in the chapter. After you SSH into a server on the cloud,
    you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> command
    to connect to the MySQL service and then run SQL queries there.
  prefs: []
  type: TYPE_NORMAL
- en: The command line client isn’t ideal for all tasks. For example, if your query
    results include many columns, each line of output might be wider than your terminal
    window, causing the output to wrap, which makes it very difficult to read. Moreover,
    the command line client displays all the output in your terminal. If you’re running
    many queries, it might be cumbersome to scroll back through your terminal history
    to find specific results that you ran previously. For everyday queries, it’s easier
    to use a graphical client like Adminer.
  prefs: []
  type: TYPE_NORMAL
- en: So far, you’ve seen SQL query results displayed in Adminer as HTML tables. If
    you run the same queries using the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    client, the data will be displayed as text in your terminal. You’ll test this
    in Exercise 12-3.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-3: Install and Test the
    Command Line MySQL Client</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you’ll install and practice using the MariaDB command line
    client <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>, which has the
    same name and works in the same way as the official MySQL client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening a terminal. If you’re using a Mac, install it in Homebrew
    by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using Linux or Windows with WSL, install it by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command to connect to your MySQL database. To do so, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-h</samp> argument (short
    for <samp class="SANS_TheSansMonoCd_W5Regular_11">--host</samp>) tells the client
    the IP address or hostname of the MySQL server to which you want to connect. In
    this case, the hostname is <samp class="SANS_TheSansMonoCd_W5Regular_11">localhost</samp>,
    since the server is running locally on your computer. The <samp class="SANS_TheSansMonoCd_W5Regular_11">--protocol</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">=tcp</samp> argument tells the MySQL client
    to connect to the server over the network, which is required when you’re running
    the server in a Docker container. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-u</samp>
    argument (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--user</samp>)
    tells the client that you’re logging in as the root user, in this case. Finally,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-p</samp> (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--password</samp>)
    tells the client that this user is protected with a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you run the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command, press ENTER. The MySQL client should prompt you to type the root user’s
    password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you enter the correct password, you should end up in the MySQL shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: From here, you can run all the same SQL queries you did in Adminer. However,
    to work in the command line client, you’ll need to know a few additional queries.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">MySQL-Specific Queries</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Queries like <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp> are typically nearly
    identical between different versions of SQL, but each version has unique queries
    for actions like returning a list of databases in the server or a list of tables
    in a database. To navigate around a MySQL server from the command line client,
    you’ll need to know the following MySQL-specific queries:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SHOW DATABASES;</samp> Shows a
    list of all of the databases on your MySQL server
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">USE *database_name*;</samp> Switches
    you into a specific database, so you can start running queries there
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SHOW TABLES;</samp> Shows a list
    of all of the tables in the currently selected database
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">DESCRIBE TABLE *table_name*;</samp> Shows
    you the columns in a table
  prefs: []
  type: TYPE_NORMAL
- en: There are other MySQL-specific queries, but these are all you’ll need to know
    for the purposes of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '> <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Technically, Adminer uses these queries too, but it runs them for you in the
    background. When you use the command line client, you have to run them yourself.
    For example, when Adminer showed you a list of databases, it ran <samp class="mono">SHOW
    DATABASES</samp>; for you in order to find the list; when you selected the <samp
    class="mono">books</samp> database, technically it ran <samp class="mono">USE
    books</samp>; for you.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test these queries. Run the following command to list all of the available
    databases on your MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The result of this query lists all of the databases in this MySQL server. In
    this case, it lists the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>
    database you created in Exercise 12-1 and the four databases that come with MySQL
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: After you run <samp class="SANS_TheSansMonoCd_W5Regular_11">USE books;</samp>,
    the prompt should change from <samp class="SANS_TheSansMonoCd_W5Regular_11">MariaDB
    [(none)]></samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">MariaDB [books]></samp>,
    letting you know which database is currently selected. When you run normal SQL
    queries with verbs like <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>, they’ll run in
    the currently selected database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve selected a database, list all of its tables with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This database has two tables, <samp class="SANS_TheSansMonoCd_W5Regular_11">authors</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp>. List all of the
    columns in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This displays a table of data with each row representing a different column
    in the table that you’re describing, including all of the attributes of each column.
    For example, you can see that the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    column has the type of <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp>
    and is set to auto-increment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The queries you just ran return information about the MySQL server itself—what
    databases it contains, what tables those databases contain, and what columns are
    in each table. You can also query for the data stored in the database itself.
    For example, try running the following query to get a list of all of the books
    stored in the <samp class="SANS_TheSansMonoCd_W5Regular_11">books</samp> table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You can run any of the queries that you ran in Adminer using the CLI client,
    and the rows will be displayed in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'At any point, you can run <samp class="SANS_TheSansMonoCd_W5Regular_11">exit</samp>
    to quit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This will drop you back into your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve made it through the crash course on SQL and are ready to start tackling
    real data! In the rest of the chapter, you’ll learn more about Epik and its massive
    data breach, then download and analyze a MySQL database backup from the Epik dataset.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The History of Epik</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Epik, a Seattle-area company founded by Rob Monster in 2009, has long provided
    domain name and web hosting services to neo-Nazi and far-right websites. Its customers
    have included the notorious neo-Nazi website the Daily Stormer, the conspiracy
    website InfoWars, the Proud Boys hate group, and the Oath Keepers right-wing militia,
    which you learned about in [Chapter 6](chapter6.xhtml). After Gab moved to Epik,
    Monster baselessly claimed that much of the hate speech on Gab was posted by liberals
    who wanted to make the service look bad.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned in this chapter’s introduction, in October 2018, Robert Bowers
    posted a message to Gab shortly before committing the deadliest antisemitic terrorist
    attack in US history. GoDaddy deplatformed Gab, so it moved its domain hosting
    service to Epik. This wasn’t the only time that Epik helped save a far-right platform
    that was getting deplatformed after a mass shooting.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to helping save Gab, Epik started hosting the domain name for the
    far-right message board then known as 8chan (now rebranded as 8kun) after a similar
    mass shooting in 2019\. Patrick Crusius posted a manifesto to 8chan shortly before
    killing 23 people and injuring 23 more in a Walmart in El Paso, Texas, the deadliest
    anti-Latino terrorist attack in recent US history. Crusius’s manifesto also spouted
    the “great replacement” conspiracy theory. After the attack, Cloudflare suspended
    8chan’s service, but Epik was there to quickly bring the site back online.
  prefs: []
  type: TYPE_NORMAL
- en: Epik also handled domain hosting for Parler, the social media site discussed
    in the previous chapter, after various platforms banned it in the aftermath of
    the deadly January 6, 2021, attack on the US Capitol. Epik has since become a
    popular domain name registrar for far-right and conservative websites worried
    about getting deplatformed. America’s Frontline Doctors, the anti-vaccine disinformation
    group I discuss in the following chapter, has also registered its domains with
    Epik, though it’s not at risk of being deplatformed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll learn about the history and motivation behind the Epik
    hack and the type of information this dataset contains.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Epik Hack</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'On September 1, 2021, less than a year before the US Supreme Court’s 2022 decision
    to overturn the constitutional right to abortion, the state of Texas passed the
    most restrictive abortion law in the US—more restrictive, at the time, than any
    law passed since the 1973 Supreme Court decision Roe v. Wade. The Texas Heartbeat
    Act banned abortions six weeks after pregnancy, before many people even realize
    they’re pregnant. The law is enforced by civil lawsuits: any member of the public
    who believes in forced birth can sue anyone who performs or facilitates abortions,
    creating a chilling effect for reproductive health care.'
  prefs: []
  type: TYPE_NORMAL
- en: An anti-abortion lobbyist group quickly set up a website by the name ProLifeWhistleblower.com,
    inviting the public to anonymously submit private details about people they believed
    were obtaining or facilitating abortions. GoDaddy kicked the group off its platform,
    citing a violation of its terms of service, so the site switched its domain hosting
    to Epik. Epik soon caved to public pressure and likewise stopped providing service,
    but this was enough to catch the attention of hackers.
  prefs: []
  type: TYPE_NORMAL
- en: In September and October of 2021, in a series of hacks dubbed Operation Epik
    Fail, hackers identifying with Anonymous hacked Epik incredibly thoroughly, releasing
    hundreds of gigabytes of data on BitTorrent. DDoSecrets downloaded a copy of this
    data, added it to its leak archive, and also made it accessible to download from
    its public data server, rather than just using BitTorrent. Most data breaches
    expose a database, a collection of email, or a cache of documents. This breach
    included all of these, along with bootable disk images from Epik’s servers—essentially,
    the entire hard disks that powered its servers. You could use bootable disk images
    to run a snapshot of Epik’s complete servers in a virtual machine. With some work,
    this would allow you to rifle through *everything* hosted on these servers.
  prefs: []
  type: TYPE_NORMAL
- en: The hackers published their leaks in three parts over the course of four weeks.
    In a press release accompanying the first data leak (see [Figure 12-7](#fig12-7)),
    they announced that they had released “a decade’s worth of data” from Epik. “This
    dataset is all that’s needed to trace the actual ownership and management of the
    fascist side of the Internet that has eluded researchers, activists, and, well,
    just about everybody,” the press release continued.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the press release that the hackers included with the Epik
    data. The release spells out “Operation EPIK FAIL” in text art.](Images/Figure12-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 12-7: The top of the</samp>
    <samp class="SANS_Futura_Std_Book_11">!README.TXT</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    included in the dataset, written by the Epik hackers</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s true: the Epik dataset includes 10 years of data from the company, including
    all of the data from nine MySQL databases. These databases include tables full
    of customers of various Epik products, like their domain name registrar; their
    service that protects websites against attacks, called BitMitigate; and their
    VPN service, called Anonymize. The databases also include information about domain
    name purchases, email forwarding for these domains, credit card transactions,
    customers’ passwords, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: The most important data in the Epik dataset, in my opinion, is the WHOIS privacy
    data containing information on the owners behind the domain names Epik hosts.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Epik’s WHOIS Data</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*WHOIS* (pronounced “who is”) data is the public ownership information you’re
    required to provide when buying a domain name. This generally includes contact
    details like names, email addresses, phone numbers, and physical addresses, along
    with the domain’s registrant contact, administrative contact, and technical contact
    (in many cases, the same person plays all three roles). Which organization keeps
    track of WHOIS records depends on the domain name in question, but the records
    are all public. A quick internet search should turn up plenty of online services
    that allow you to look up WHOIS data for any given domain. The <samp class="SANS_TheSansMonoCd_W5Regular_11">whois</samp>
    command line tool also lets you look up WHOIS data from a terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: Public WHOIS data creates a major privacy issue, since it allows anyone to easily
    discover not only the owner of a domain but also their PII. To combat this, many
    domain registrars offer WHOIS privacy services, where they’ll put their own information
    in the WHOIS record or just replace the owner name with something like REDACTED
    FOR PRIVACY on their customers’ behalf.
  prefs: []
  type: TYPE_NORMAL
- en: Epik runs a WHOIS privacy service, hiding the ownership information of many
    far-right domain names from the public. But the Epik dataset includes that hidden
    information. As long as a domain name was registered on Epik before September
    2021, when the hack occurred, you can use this dataset to look up its true owners.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the WHOIS ownership data associated with any domain name simply
    by running <samp class="SANS_TheSansMonoCd_W7Bold_B_11">whois</samp> <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11">domain_name</samp>
    in a terminal. This command will look up the public information, meaning that
    if a domain uses a WHOIS privacy service, you won’t get to see who actually owns
    it. For example, you would run the following command to find the ownership information
    about the Oath Keepers domain name, oathkeepers.org:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'When I ran this command, I got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Public WHOIS data told me that oathkeepers.org was first registered on March
    1, 2009; it expires in 2032; and its current registrar was Epik. However, all
    the contact information for the person who registered it was listed as <samp class="SANS_TheSansMonoCd_W5Regular_11">REDACTED
    FOR PRIVACY</samp>, effectively hiding the domain ownership information from the
    public.
  prefs: []
  type: TYPE_NORMAL
- en: If you search the Epik dataset for this domain name, however, as you’ll learn
    to do later in this chapter, you can find all the redacted site ownership details.
    When I searched the dataset, I found that the oathkeepers.org registrant organization
    is Oath Keepers, and the registrant name is Stewart Rhodes. As noted in [Chapter
    6](chapter6.xhtml), Rhodes is the Oath Keepers founder who was convicted of seditious
    conspiracy for his role in the January 6, 2021, attack and subsequently sentenced
    to 18 years in prison. The dataset also includes Rhodes’ phone number, email address,
    and a physical address in Granbury, Texas.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the administrator and technical contacts for this domain lists
    the company eJam Systems LLC, along with the name Edward Durfee, an email address
    at ejamsystems.com, a phone number, and a home address in Northvale, New Jersey.
    eJam Systems LLC appears to be a right-wing company, run by Edward Durfee, that
    did tech work for the Oath Keepers. None of this information was available in
    the WHOIS records, but now it’s all public, thanks to the Epik hack. If you check
    out the email in the *sentmail648* folder you imported in [Chapter 6](chapter6.xhtml),
    you’ll find messages from the address *oksupport@oathkeepers.org* all signed by
    Edward Durfee, IT Support.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In [Chapter 1](chapter1.xhtml), I discussed not revealing unnecessary PII.
    In this case, I believe that publishing Durfee’s name, the city he lives in, and
    the name of his company is in the public interest. Since he’s an organizer for
    the Oath Keepers, a group that attempted to subvert democracy, this makes him
    a legitimate target of reporting. There’s no public interest in publishing his
    home address, phone number, or email address, though.*'
  prefs: []
  type: TYPE_NORMAL
- en: After the Epik hack, reporter Mikael Thalen wrote an article for the Daily Dot
    based on the leaked WHOIS data and focusing on Ali Alexander, one of the primary
    organizers on January 6 and a major activist in the Stop the Steal movement. Thalen
    used the Epik data to show that in the days following the riot, Alexander began
    turning on WHOIS privacy for over 100 domains he owned, nearly half of them connected
    to the election lie, such as stopthestealmovement.com and stopthestealnews.com.
    You can read Thalen’s reporting at [*https://<wbr>www<wbr>.dailydot<wbr>.com<wbr>/debug<wbr>/ali<wbr>-alexander<wbr>-epik<wbr>-hack<wbr>-web<wbr>-domains<wbr>-capitol<wbr>-riot<wbr>/*](https://www.dailydot.com/debug/ali-alexander-epik-hack-web-domains-capitol-riot/).
  prefs: []
  type: TYPE_NORMAL
- en: In Exercise 12-4, you’ll download part of the Epik dataset and get ready to
    start exploring it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-4: Download and Extract
    Part of the Epik Dataset</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Epik dataset is split into three folders: *EpikFail*, *EpikFailTheB:Sides*,
    and *EpikFailYouLostTheGame,* which you can download either using BitTorrent or
    from DDoSecrets’ public data server at [*https://<wbr>data<wbr>.ddosecrets<wbr>.com<wbr>/Epik<wbr>/*](https://data.ddosecrets.com/Epik/).
    Inside the first folder, *EpikFail*, are three subfolders: *emails*, *filesystems*,
    and *sql*. The *emails* folder contains email messages from a single email account
    related to Epik, while the *filesystems* folder contains all of the files taken
    from one of Epik’s Linux servers. The *sql* folder, by far the largest folder
    in the first part of the Epik dataset, contains backups of MySQL databases. For
    this exercise, you’ll download a single MySQL backup file, *api_system.sql.gz*,
    which takes only 1.2GB of disk space.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your *datasets* USB disk, create a new folder called *Epik* for the Epik
    dataset, and then download *api_system.sql.gz* from [*https://<wbr>data<wbr>.ddosecrets<wbr>.com<wbr>/Epik<wbr>/EpikFail<wbr>/sql<wbr>/api<wbr>_system<wbr>.sql<wbr>.gz*](https://data.ddosecrets.com/Epik/EpikFail/sql/api_system.sql.gz)
    and save it there. Now, open a terminal (if you’re in Windows, use an Ubuntu terminal)
    and change to the *Epik* folder on your *datasets* USB disk like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The file is a compressed backup of a MySQL database with the extension *.sql.gz*,
    meaning that it was compressed using GZIP discussed in [Chapter 11](chapter11.xhtml).
    To extract the *api_system.sql.gz* file, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'SQL data compresses very well: the original *api_system.sql.gz* file is 1.2GB,
    but the extracted version, *api_system.sql*, is 20GB, taking up 16 times as much
    disk space.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve extracted the file, the next step is to import it into your
    MySQL database in Exercise 12-5.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 12-5: Import Epik Data into
    MySQL</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Epik dataset includes nine separate MySQL databases. To keep things simple,
    the exercises in this chapter require you to import and explore data only in the
    *api_system.sql* database into your MySQL server. Each *.sql* file in the Epik
    dataset represents a full database containing several tables. In order to import
    one of these files into MySQL, first you’ll need to create a database for it.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Create a Database
    for api_system</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll use the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> command
    line client to create a new database called <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>.
    Prefixing your database title with <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_</samp>
    will help you keep it separate from other databases you might import in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and run the following command to connect to your MySQL server
    as the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After logging in with the root password, run this command to create the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Congrats, you’ve just created a new database!
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Import api_system
    Data</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The simplest way to import a MySQL backup into a MySQL client is to pipe the
    data into the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp> program,
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The problem is that you’d see no output—no progress bars or any other indication
    that it’s actually working. This is fine for small SQL backups that take a few
    seconds to import, but it might take hours or days to import large backups. To
    solve this problem, I use a simple program called <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>,
    which stands for “Pipe Viewer,” to display a progress bar. The <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    command is similar to the <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>
    command, but it also displays useful output so you can be sure your command is
    running.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using a Mac, install <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    in Homebrew by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using Linux or Windows with WSL, install <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you’ve installed <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>,
    make sure you’re in the *Epik* folder and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp>
    should load data from *api_system.sql* and pipe it into <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>,
    but this time it should show you a progress bar like this one, complete with the
    import speed and the estimated time that it will finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In this example, I had been running the import for 33 minutes and 47 seconds.
    It had progressed through 2.89GB of the data (14 percent) and estimated it would
    finish in 3 hours and 15 minutes, at a current speed of 587KB per second (though
    import speed varies greatly depending on which query is currently running). It
    took me a total of four hours to import *api_system.sql*.
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the data from *api_system.sql* to finish importing before you move
    on to the next section. (It’s possible to run queries on the database before it’s
    fully imported, but you’ll only get results from the data that’s been imported
    so far.)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Exploring Epik’s SQL Database</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once *api_system.sql* has finished importing, it’s time to dive in and take
    a look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>
    database. With databases like this, a good tactic is to manually view each table
    and try to determine if it contains data worth exploring further. To begin my
    investigation, I looked at the first rows in each of the 49 tables in <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>,
    starting with the <samp class="SANS_TheSansMonoCd_W5Regular_11">backorder</samp>
    table and ending with the <samp class="SANS_TheSansMonoCd_W5Regular_11">whoisxmlapi_cache</samp>
    table. I tried to get a sense of what information that table held, if it was related
    to other tables in the database, and how many rows of data there were.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I’ll guide you through the tables that stood out to me in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database.
    You can use either Adminer or the <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>
    command line client: they both query the same SQL server and will receive the
    same tables of data in response. When your interest is piqued, you can try running
    your own queries as well. It’s good practice to refrain from running <samp class="SANS_TheSansMonoCd_W5Regular_11">INSERT</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">UPDATE</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">DELETE</samp>
    queries in leaked databases that you’re investigating. However, <samp class="SANS_TheSansMonoCd_W5Regular_11">SELECT</samp>
    queries don’t modify anything in the database, so you can run as many as you want
    at any point, then continue following along when you’re done.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The domain Table</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> table in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database
    has over 1.6 million rows in it and is clearly a list of domain names in Epik’s
    system. Count the number of rows in this table using the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 12-12](#tab12-12) shows the results from that query.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-12:</samp> <samp class="SANS_Futura_Std_Book_11">Counting
    the Rows in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp>
    <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">COUNT(*)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1688005</samp> |'
  prefs: []
  type: TYPE_TB
- en: Columns in the <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> table
    include <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    (the domain name, in all caps), <samp class="SANS_TheSansMonoCd_W5Regular_11">cr_date</samp>
    (presumably the domain name’s creation date), and <samp class="SANS_TheSansMonoCd_W5Regular_11">exp_date</samp>
    (presumably the domain name’s expiration date).
  prefs: []
  type: TYPE_NORMAL
- en: 'To look at the 10 most recently created domains in this table, run the following
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This command uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER BY
    cr_date DESC</samp> clause to sort data returned by the <samp class="SANS_TheSansMonoCd_W5Regular_11">cr_date</samp>
    column, in descending order (from most recent to oldest, in this case). The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">LIMIT 10</samp> clause in the following
    line limits the results to only 10 rows; if you left that clause out, the command
    would return all 1.6 million rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 12-13](#tab12-13) shows the results from this query.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-13:</samp> <samp class="SANS_Futura_Std_Book_11">Selecting
    the Most Recently Created Domains</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cr_date</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">exp_date</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803243</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAKEAPPLIANCESWORKAGAIN.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:41:52</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:41:52</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803233</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">BEREANBAPTISTPORTCHARLOTTE.ORG</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:33:26</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:33:26</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803213</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">WECONSIGNGUNS.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:32:04</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:32:04</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803223</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">WECONSIGNGUNS.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:32:04</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:32:04</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803183</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAINEANTIQUEMALL.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:29:42</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:29:42</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803203</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAINEANTIQUESTORE.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:29:42</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:29:42</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803193</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MAINEANTIQUESHOP.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:29:42</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:29:42</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803173</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">WOOGITYBOOGITY.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:20:35</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:20:35</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803163</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NAMECAESAR.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:17:52</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:17:52</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17803153</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SCENICBOATTOUR.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-03-01 01:17:11</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-03-01 01:17:11</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'To search the list of Epik domains for ones containing specific keywords, use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp> operator in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">WHERE</samp> clause. For example,
    try using the following queries to search for domains that mention the word *Trump*,
    ordered by the most recently created domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: As you learned earlier, using <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp>
    makes the search case insensitive, and <samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>
    characters are wildcards. Filtering the results by <samp class="SANS_TheSansMonoCd_W5Regular_11">name
    LIKE '%trump%'</samp> will display only results that include *trump* (regardless
    of capitalization) somewhere in their name.
  prefs: []
  type: TYPE_NORMAL
- en: The query returns 413 results total. [Table 12-14](#tab12-14) shows the first
    10 results.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, many people used Epik to register Trump-related domain names. These
    results don’t include any ownership information for these domains, though. To
    find that missing information, let’s take a look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-14:</samp> <samp class="SANS_Futura_Std_Book_11">Domains
    That Include the Word</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">Trump</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">name</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cr_date</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">exp_date</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17802593</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMPISM.IO</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 23:45:44</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-28 23:45:44</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17750903</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMPWONINALANDSLIDE.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-23 08:52:33</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-23 08:52:33</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17750913</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DONALDTRUMPWONINALANDSLIDE.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-23 08:52:33</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-23 08:52:33</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17676023</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DUMP-TRUMP.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-22 21:38:40</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-22 21:38:40</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17694803</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMPBEEGIRLS.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-19 00:14:23</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2026-02-19 00:14:23</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17672243</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMP2020.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-17 17:43:32</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-17 17:43:32</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17661353</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">FANTRUMP.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-16 19:04:43</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-16 19:04:43</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17662513</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DONALDTRUMP.TRUTH</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-16 13:22:16</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-16 13:22:16</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17662433</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TRUMP.TRUTH</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-16 13:22:13</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2022-02-16 13:22:13</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">17615793</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">VOTELARATRUMP.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-14 17:38:12</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2023-02-14 17:38:12</samp> |'
  prefs: []
  type: TYPE_TB
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The privacy Table</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp> table has 721,731
    rows of data. Like the <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp>
    table, it has a <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> column
    that lists domain names, but it also includes columns with all of the private
    WHOIS details. Relevant columns include <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">admin _name</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_address</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_phone</samp>,
    and other similar information. There are also numerous similar columns with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">tech_</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">bill_</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">reg_</samp> prefixes. The data
    in this table includes WHOIS data for the administrator contact, the technical
    contact, the billing contact, and the registrant contact. There’s also a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">date_add</samp> column with a timestamp,
    presumably noting when this domain was added to Epik’s system.
  prefs: []
  type: TYPE_NORMAL
- en: 'I mentioned earlier that, in 2019, Patrick Crusius posted a manifesto to 8chan
    before killing 23 people and injuring 23 more in El Paso, Texas. In the aftermath
    of the terrorist attack, 8chan moved its domain name hosting to Epik. With that
    in mind, search the data for 8chan.co, 8chan’s domain name, to see who is behind
    the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 12-15](#tab12-15) shows partial results from this query. The query selects
    all columns (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>), but I included
    only the <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_</samp> columns here
    because the <samp class="SANS_TheSansMonoCd_W5Regular_11">tech_</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">bill_</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">reg_</samp>
    columns all have the exact same data that appears in the <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_</samp>
    column.'
  prefs: []
  type: TYPE_NORMAL
- en: This domain was added to Epik’s system the night of August 4, 2019\. This was
    the day after Crusius posted his manifesto to 8chan and then went on his anti-Latino
    murder spree.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s public knowledge that Jim Watkins and his son, Ron Watkins, ran 8chan
    at the time (they are also behind today’s rebrand, 8kun). According to the HBO
    documentary miniseries *Q: Into the Storm*, directed and produced by Cullen Hoback,
    the pair are also by far the most likely people behind the QAnon conspiracy cult.
    Jim Watkins, an American, lived in the Philippines at the time of Crusius’s rampage.
    As you can see from the hidden WHOIS data, the admin address is for a property
    in the Philippines. This increases confidence that the data is authentic, and
    also gives key data points about Jim Watkins in case we wanted to research him
    further: an address and phone number.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-15:</samp> <samp class="SANS_Futura_Std_Book_11">Ownership
    Data for the Domain 8chan.co</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">2429814</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8CHAN.CO</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">date_add</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-08-04
    23:01:11</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Loki
    Technology, Incorporated</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_name</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim
    Watkins</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_address</samp> | <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_city</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Pasig</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_state</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">NCR</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_zip</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1600</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_country</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">PH</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_cc</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">PH</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_phone</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">+</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">63</samp><samp
    class="SANS_Futura_Std_Book_11">.</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'Since Watkins runs a website popular among American terrorists and is likely
    one of the people behind QAnon, the next logical step is to check if he or his
    company, Loki Technology, owned any other domain names on Epik. To find out, try
    running this query in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp>
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This query searches for domains that list <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp>
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>, which
    is the administrator email address on 8chan.co. However, it returns just a single
    row for that domain. Run the following query, modified with the expression <samp
    class="SANS_TheSansMonoCd_W5Regular_11">admin_email LIKE ''%@nttec.com''</samp>
    to check for domains where <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_email</samp>
    is any email address at the nttec.com domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this query has the same results. For your next query, switch tactics
    and search for domains that list <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org</samp>
    as anything mentioning Loki Technology, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_org
    LIKE ''%Loki Technology%''</samp> expression. The expression includes wildcard
    characters, just in case Watkins listed his company slightly differently on different
    domains, like “Loki Technology, Inc.” instead of “Loki Technology, Incorporated”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This query returns the same result. For a final query, search the domains that
    list <samp class="SANS_TheSansMonoCd_W5Regular_11">admin_name</samp> as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp>, using <samp class="SANS_TheSansMonoCd_W5Regular_11">LIKE</samp>
    to make the search case insensitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, all these queries return just one result: the 8chan.co row.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn about how I eventually found more information
    about domains owned by Jim Watkins in the Epik dataset, just not in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database. For
    now, let’s look at some final interesting tables in this database.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The hosting and hosting_server
    Tables</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp> table has
    3,934 rows and appears to show websites that Epik actually runs the servers for,
    not just the domain name registration. Columns include <samp class="SANS_TheSansMonoCd_W5Regular_11">domain</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cr_date</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">username</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp> (in plaintext, though
    it’s not clear what these usernames and passwords are for), <samp class="SANS_TheSansMonoCd_W5Regular_11">plan</samp>
    (like silver, gold, or platinum), <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp>,
    and others. Run the following query to view the most recent rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Since the query uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">ORDER
    BY cr_date DESC</samp> clause, the results will be sorted from most recent to
    oldest. The <samp class="SANS_TheSansMonoCd_W5Regular_11">LIMIT 5</samp> clause
    means the results will include at most five rows. [Table 12-16](#tab12-16) shows
    the results from this query.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-16:</samp> <samp class="SANS_Futura_Std_Book_11">Recent
    Rows in the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp>
    <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">domain</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cr_date</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">plan</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">server_id</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">33613</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">THELIBERATEDPRESS.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 18:08:06</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">bronze</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39573</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">REICKERTSPLUMBING.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 17:30:18</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">email</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39563</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">IANLAZAR.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 16:50:10</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">bronze</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39553</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">APAYWEEKLY.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 16:16:08</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sitebuilder-basic</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">39543</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">BOUNCETHEBOX.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2021-02-28 15:24:08</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">silver</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: I tried loading several of the domain names in this table in a browser. Some
    of them are down, while others appear to be websites for random businesses. I
    quickly noticed that the <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp>
    column implies a relationship with another table. I guessed the related table
    was most likely the <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp>
    table and began to run queries on that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp> table
    has only six rows, each a different server that Epik uses to host websites. Run
    this query to see the data in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 12-17](#tab12-17) shows the query results.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-17:</samp> <samp class="SANS_Futura_Std_Book_11">The</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp> <samp class="SANS_Futura_Std_Book_11">Table</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">api_host</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">login_host</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">login_port</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">username</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">password</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">192.187.99.50</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2082</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">epikhost</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">204.12.206.186</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting5.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.193.70</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting6.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">13</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.193.195</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting7.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">14</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.193.163</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting8.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.214.194.85</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting9.epik.com</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2083</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">hostinge</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">redacted</samp> |'
  prefs: []
  type: TYPE_TB
- en: The passwords in this table are all in plaintext. In fact, if you load *https://<wbr>hosting9<wbr>.epik<wbr>.com:2083*
    in Tor Browser, you’ll see the login page for cPanel, software that’s used to
    manage shared web hosting systems like this. The usernames and passwords in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp> table are
    likely the credentials to log in to this cPanel server—but don’t actually try
    this out. As noted earlier, it’s fine for you to see the passwords scattered across
    datasets, but actually attempting to log in to an account with them is illegal.
    In any case, Epik has probably changed its passwords since the data breach.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the recent websites in the <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp>
    table have a <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp> of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp>. Check how many websites
    are hosted on that server by running a query to join it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting_server</samp>
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The result is 1,155, so that’s the number of websites the server with ID 23
    hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'What about the rest of the servers? The quickest way to figure out how many
    websites each server hosts is to use a <samp class="SANS_TheSansMonoCd_W5Regular_11">GROUP
    BY</samp> clause, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: This query groups by <samp class="SANS_TheSansMonoCd_W5Regular_11">hosting.server_id</samp>,
    which means each row of the results will show the number of rows in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">hosting</samp> table with that <samp class="SANS_TheSansMonoCd_W5Regular_11">server_id</samp>.
    [Table 12-18](#tab12-18) shows the results of this query.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-18:</samp> <samp class="SANS_Futura_Std_Book_11">The
    Number of Websites Hosted on Each Server</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">server_id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">server_count</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">762</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">13</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1474</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">14</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">543</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">23</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1155</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: While there’s always more to learn, you should now have the SQL skills to write
    powerful queries that can help you quickly find what you’re looking for, even
    in tables with millions of rows.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Working with Epik Data in the Cloud</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MySQL databases from Epik contain an overwhelming amount of data that’s
    useful for extremism research, and only a fraction of that data is in the *api_system.sql.gz*
    backup that you’ve imported for this chapter. Some of the other databases, such
    as *intrust.sql.gz*, contain even more interesting information. If you’re curious,
    I suggest downloading, importing, and investigating all nine MySQL databases from
    the Epik dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these databases would likely take your computer days to finish importing
    and would require a large amount of disk space. It’s more convenient to download
    and work with databases like these on a server in the cloud rather than on your
    local computer. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new VPS on a cloud service provider (making sure it has plenty of disk
    space) and SSH into it, like you did in Exercise 4-4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use <samp class="SANS_TheSansMonoCd_W5Regular_11">wget</samp> to download just
    the compressed database backups, a total of 14GB, from [*https://<wbr>data<wbr>.ddosecrets<wbr>.com<wbr>/Epik<wbr>/EpikFail<wbr>/sql<wbr>/*](https://data.ddosecrets.com/Epik/EpikFail/sql/).
    Alternatively, using a CLI BitTorrent client, you could download the entire first
    part of the Epik dataset, which is 35GB of data, similar to what you did in Exercise
    4-5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the compressed MySQL database backups as you did in Exercise 12-4\.
    By the time you’re done extracting these files, you’ll have 145GB of MySQL backup
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install a MySQL server on your VPS. There are various ways of doing this, but
    one option is to install Docker on your VPS and run a MySQL server as you did
    in Exercise 12-3\. Since your VPS will be running Linux, just make sure to follow
    the Linux instructions there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the command line MySQL client, create nine databases, one for each backup
    file. Next, using <samp class="SANS_TheSansMonoCd_W5Regular_11">pv</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mysql</samp>, import all nine database
    backups as you did in Exercise 12-5\. This step will likely take your VPS several
    days to finish, but since the remote server is handling the import, this won’t
    disrupt other work on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are essentially the steps I followed when I investigated the Epik dataset
    at The Intercept. The downside to doing this all in the cloud is that you’ll need
    to pay a monthly bill to your hosting provider for the server that you’re using.
    However, once you have a remote MySQL server full of Epik databases, you can use
    a MySQL client to connect to it and run queries, which will allow you to analyze
    hundreds of gigabytes of leaked databases.
  prefs: []
  type: TYPE_NORMAL
- en: The most useful part of the Epik dataset, in my opinion, is the fact that you
    can use it to peel back the curtain behind Epik’s WHOIS privacy service. You did
    this some in the “Exploring Epik’s SQL Database” section, but you looked only
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp> table of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_api_system</samp> database.
    But that isn’t the only place where you can find WHOIS privacy data.
  prefs: []
  type: TYPE_NORMAL
- en: The nine different MySQL databases in the Epik leak appear to have lots of duplicate
    data. For example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_intrust</samp>
    database has a table called <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp>
    with all of the same columns as the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table. The <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp>
    table has 1.4 million rows of data, roughly twice as many as the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table, though many of the rows appear to contain similar data. In the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_whois</samp>
    database, there’s a table called <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    with similar columns and 1.3 million rows of data. All three tables have various
    duplicates of the same WHOIS data, so you may want to search them all before concluding
    that a domain name ownership isn’t in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: In the “Exploring Epik’s SQL Database” section, you ran some queries in <samp
    class="SANS_TheSansMonoCd_W5Regular_11">epiktrust_api_system</samp> to find domains
    that Jim Watkins owns other than 8chan.co, but they fell short. If you import
    additional databases, can you find other domains he owns? When I ran similar queries
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_intrust</samp> database
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp> table,
    which has more data than the <samp class="SANS_TheSansMonoCd_W5Regular_11">privacy</samp>
    table in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epiktrust_api_system</samp>
    database, I got some hits. If you want to run this query yourself, you’ll need
    to first download and import the *intrust.sql* database into your MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the query I ran to search the <samp class="SANS_TheSansMonoCd_W5Regular_11">domains_whois</samp>
    table in the <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail _intrust</samp>
    database for domains owned by Jim Watkins’s company:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 12-19](#tab12-19) lists the truncated results of this query, showing
    only some of the columns. As you can see, Jim Watkins owns all of the domains
    listed in the results.'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the domain 5ch.net loaded a Japanese-language site called
    5channel. When I loaded 2ch.net, it failed with a “connection timed out” error
    from Cloudflare, and when I loaded bbspink.com, I got an “access denied” error
    from Cloudflare saying that the site blocks connections from the US. I connected
    to a VPN in Europe and tried again; this time, it redirected to 5ch.net. If you’d
    like, you can try the same steps yourself.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 12-19:</samp> <samp class="SANS_Futura_Std_Book_11">Other
    Domains Owned by Jim Watkins from the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">epikfail_intrust</samp>
    <samp class="SANS_Futura_Std_Book_11">Database</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">id</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">domain</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">date_update</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">admin_org</samp>
    | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">admin_name</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">admin_email</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615894</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8CH.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:05</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615904</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">8CHAN.CO</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:06</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615944</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">5CH.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:07</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8615984</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2CH.NET</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:08</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8616004</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">BBSPINK.COM</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2019-10-13 01:27:09</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Loki Technology, Incorporated</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Jim Watkins</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">domains@nttec.com</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: As you explore more databases, you’ll discover that writing SQL queries to find
    what you’re looking for takes some trial and error. Sometimes the results from
    one query will inform what you should search for next—as you’ve seen, I used the
    email that Watkins registered 8chan.co with to find his other domains, for example.
    When you don’t find what you’re looking for, tweak your queries to make them more
    broad, or search a different field that might give you similar information.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you’ve learned how to run your own MySQL server on your computer
    using Docker containers. You took a crash course in SQL, the language used to
    communicate with SQL servers, and were introduced to Epik, the online service
    provider for right-wing extremists and American terrorists who have committed
    mass murder. Finally, you downloaded a MySQL database backup from the 2021 Epik
    Fail dataset, imported it into your own local MySQL server, and ran SQL queries
    to begin investigating it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: This marks the conclusion of [Part IV](part4.xhtml), which has given you the
    foundational tools and techniques to explore almost any dataset you can get your
    hands on. [Part V](part5.xhtml), the final two chapters of the book, doesn’t include
    any exercises. Instead, it describes real data-driven investigations I’ve worked
    on in the past, shows you what code I wrote and why, and explains exactly how
    I used the skills I’ve taught you throughout this book to find revelations. I
    hope you’ll use these case studies as inspiration for your own future data-driven
    investigations.
  prefs: []
  type: TYPE_NORMAL
