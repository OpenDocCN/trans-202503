["```\n4 9 22\n```", "```\n4 9 54\n```", "```\n4 9 15\n```", "```\nint solve_t(int m, int n, int t)\n```", "```\nif (t == 0)\n  return 0;\n```", "```\nint first;\nif (t >= m)\n  first = solve_t(m, n, t - m);\nelse\n  first = -1;\n```", "```\nint second;\nif (t >= n)\n  second = solve_t(m, n, t - n);\nelse\n  second = -1;\n```", "```\nif (first == -1 && second == -1)\n  return -1;\n```", "```\nreturn max(first, second) + 1;\n```", "```\nint max(int v1, int v2) {\n  if (v1 > v2)\n    return v1;\n  else\n    return v2;\n}\n\nint solve_t(int m, int n, int t) {\n  int first, second;\n  if (t == 0)\n    return 0;\n  if (t >= m)\n  ❶ first = solve_t(m, n, t - m);\n   else\n     first = -1;\n   if (t >= n)\n  ➋ second = solve_t(m, n, t - n);\n   else\n    second = -1;\n  if (first == -1 && second == -1)\n  ➌ return -1;\n   else\n  ➍ return max(first, second) + 1;\n}\n```", "```\nvoid solve(int m, int n, int t) {\n  int result, i;\n❶ result = solve_t(m, n, t);\n   if (result >= 0)\n  ➋ printf(\"%d\\n\", result);\n   else {\n     i = t - 1;\n  ➌ result = solve_t(m, n, i);\n     while (result == -1) {\n       i--;\n     ➍ result = solve_t(m, n, i);\n     }\n  ➎ printf(\"%d %d\\n\", result, t - i);\n  }\n}\n```", "```\nint main(void) {\n  int m, n, t;\n  while (scanf(\"%d%d%d\", &m, &n, &t) != -1)\n    solve(m, n, t);\n  return 0;\n}\n```", "```\n4 2 88\n```", "```\n4 2 90\n```", "```\nunsigned long long total_calls;\n\nint solve_t(int m, int n, int t) {\n  int first, second;\n❶ total_calls++;\n   if (t == 0)\n     return 0;\n   if (t >= m)\n     first = solve_t(m, n, t - m);\n   else\n     first = -1;\n   if (t >= n)\n     second = solve_t(m, n, t - n);\n   else\n     second = -1;\n   if (first == -1 && second == -1)\n     return -1;\n   else\n     return max(first, second) + 1;\n}\n\n void solve(int m, int n, int t) {\n   int result, i;\n➋ total_calls = 0;\n   result = solve_t(m, n, t);\n   if (result >= 0)\n     printf(\"%d\\n\", result);\n   else {\n     i = t - 1;\n     result = solve_t(m, n, i);\n     while (result == -1) {\n       i--;\n       result = solve_t(m, n, i);\n      }\n      printf(\"%d %d\\n\", result, t - i);\n   }\n➌ printf(\"Total calls to solve_t: %llu\\n\", total_calls);\n }\n```", "```\n4 2 88\n4 2 90\n```", "```\n44\nTotal calls to solve_t: 2971215072\n45\nTotal calls to solve_t: 4807526975\n```", "```\n #define SIZE 10000\n\n void solve(int m, int n, int t) {\n   int result, i;\n❶ int memo[SIZE];\n   for (i = 0; i <= t; i++)\n     memo[i] = -2;\n   result = solve_t(m, n, t, memo);\n   if (result >= 0)\n     printf(\"%d\\n\", result);\n   else {\n     i = t - 1;\n     result = solve_t(m, n, i, memo);\n     while (result == -1) {\n       i--;\n       result = solve_t(m, n, i, memo);\n     }\n     printf(\"%d %d\\n\", result, t - i);\n   }\n }\n```", "```\n int solve_t(int m, int n, int t, int memo[]) {\n   int first, second;\n❶ if (memo[t] != -2)\n     return memo[t];\n   if (t == 0) {\n     memo[t] = 0;\n     return memo[t];\n   }\n   if (t >= m)\n     first = solve_t(m, n, t - m, memo);\n   else\n     first = -1;\n   if (t >= n)\n     second = solve_t(m, n, t - n, memo);\n   else\n     second = -1;\n   if (first == -1 && second == -1) {\n     memo[t] = -1;\n     return memo[t];\n   } else {\n     memo[t] = max(first, second) + 1;\n     return memo[t];\n   }\n }\n```", "```\n4 2 88\n4 2 90\n```", "```\n44\nTotal calls to solve_t: 88\n45\nTotal calls to solve_t: 90\n```", "```\nint solve_t(int m, int n, int t, int memo[]) {\n  int first, second;\n  if (memo[t] != -2)\n    return memo[t];\n  if (t == 0) {\n    memo[t] = 0;\n    return memo[t];\n  }\n  if (t >= m)\n ❶ first = solve_t(m, n, t - m, memo);\n  else\n    first = -1;\n  if (t >= n)\n ➋ second = solve_t(m, n, t - n, memo);\n  else\n    second = -1;\n  if (first == -1 && second == -1) {\n    memo[t] = -1;\n    return memo[t];\n  } else {\n    memo[t] = max(first, second) + 1;\n    return memo[t];\n  }\n}\n```", "```\n void solve(int m, int n, int t) {\n   int result, i, first, second;\n   int dp[SIZE];\n❶ dp[0] = 0;\n  for (i = 1; i <= t; i++) {\n➋ if (i >= m)\n   ➌ first = dp[i - m];\n   else\n     first = -1;\n➍ if (i >= n)\n     second = dp[i - n];\n   else\n     second = -1;\n   if (first == -1 && second == -1)\n  ➎ dp[i] = -1;\n   else\n  ➏ dp[i] = max(first, second) + 1;\n  }\n\n❼ result = dp[t];\n   if (result >= 0)\n     printf(\"%d\\n\", result);\n   else {\n     i = t - 1;\n     result = dp[i];\n     while (result == -1) {\n       i--;\n    ❽ result = dp[i];\n    }\n    printf(\"%d %d\\n\", result, t - i);\n  }\n}\n```", "```\n4 9 15\n```", "```\n1.75 2\n3 4.00\n2 2.50\n1 4\n```", "```\nCase 1:\nBuy 1 for $1.75\nBuy 4 for $5.00\n```", "```\ndouble solve_k(int num[], double price[], int num_schemes,\n               double unit_price, int num_apples)\n```", "```\n❶ double min(double v1, double v2) {\n     if (v1 < v2)\n       return v1;\n     else\n       return v2;\n  }\n\n  double solve_k(int num[], double price[], int num_schemes,\n                 double unit_price, int num_apples) {\n    double best, result;\n    int i;\n ➋ if (num_apples == 0)\n   ➌ return 0;\n    else {\n   ➍ result = solve_k(num, price, num_schemes, unit_price,\n                       num_apples - 1);\n   ➎ best = result + unit_price;\n      for (i = 0; i < num_schemes; i++)\n     ➏ if (num_apples - num[i] >= 0) {\n       ❼ result = solve_k(num, price, num_schemes, unit_price,\n                           num_apples - num[i]);\n       ❽ best = min(best, result + price[i]);\n       }\n          return best;\n    }\n}\n```", "```\n1.75 2\n4 3.00\n2 2.00\n3\n```", "```\nCase 1:\nBuy 3 for $3.00\n```", "```\ndouble solve(int num[], double price[], int num_schemes,\n             double unit_price, int num_apples) {\n  double best;\n  int i;\n❶ best = solve_k(num, price, num_schemes,\n                  unit_price, num_apples);\n➋ for (i = num_apples + 1; i < ???; i++)\n     best = min(best, solve_k(num, price, num_schemes,\n                              unit_price, i));\n   return best;\n}\n```", "```\n#define SIZE 200\n\ndouble solve(int num[], double price[], int num_schemes,\n             double unit_price, int num_apples) {\n  double best;\n  int i;\n  best = solve_k(num, price, num_schemes, unit_price, num_apples);\n  for (i = num_apples + 1; i < SIZE; i++)\n    best = min(best, solve_k(num, price, num_schemes,\n                             unit_price, i));\n  return best;\n}\n```", "```\n#define MAX_SCHEMES 20\n\nint main(void) {\n  int test_case, num_schemes, num_apples, more, i;\n  double unit_price, result;\n  int num[MAX_SCHEMES];\n  double price[MAX_SCHEMES];\n  test_case = 0;\n❶ while (scanf(\"%lf%d \", &unit_price, &num_schemes) != -1) {\n     test_case++;\n     for (i = 0; i < num_schemes; i++)\n    ➋ scanf(\"%d%lf \", &num[i], &price[i]);\n     printf(\"Case %d:\\n\", test_case);\n     more = get_number(&num_apples);\n ➌ while (more) {\n      result = solve(num, price, num_schemes, unit_price, num_apples);\n      printf(\"Buy %d for $%.2f\\n\", num_apples, result);\n      more = get_number(&num_apples);\n    }\n ➍ result = solve(num, price, num_schemes, unit_price, num_apples);\n    printf(\"Buy %d for $%.2f\\n\", num_apples, result);\n  }\n  return 0;\n}\n```", "```\nint get_number(int *num) {\n  int ch;\n  int ret = 0;\n  ch = getchar();\n❶ while (ch != ' ' && ch != '\\n') {\n     ret = ret * 10 + ch - '0';\n     ch = getchar();\n  }\n➋ *num = ret;\n➌ return ch == ' ';\n}\n```", "```\nint main(void) {\n  int test_case, num_schemes, num_apples, more, i;\n  double unit_price, result;\n  int num[MAX_SCHEMES];\n  double price[MAX_SCHEMES];\n❶ double memo[SIZE];\n   test_case = 0;\n   while (scanf(\"%lf%d \", &unit_price, &num_schemes) != -1) {\n     test_case++;\n     for (i = 0; i < num_schemes; i++)\n       scanf(\"%d%lf \", &num[i], &price[i]);\n     printf(\"Case %d:\\n\", test_case);\n  ➋ for (i = 0; i < SIZE; i++)\n    ➌ memo[i] = -1;\n      more = get_number(&num_apples);\n      while (more) {\n        result = solve(num, price, num_schemes, unit_price, num_apples, memo);\n        printf(\"Buy %d for $%.2f\\n\", num_apples, result);\n        more = get_number(&num_apples);\n    }\n    result = solve(num, price, num_schemes, unit_price, num_apples, memo);\n    printf(\"Buy %d for $%.2f\\n\", num_apples, result);\n  }\n  return 0;\n}\n```", "```\ndouble solve(int num[], double price[], int num_schemes,\n             double unit_price, int num_apples, double memo[]) {\n  double best;\n  int i;\n  best = solve_k(num, price, num_schemes, unit_price, num_apples, memo);\n  for (i = num_apples + 1; i < SIZE; i++)\n    best = min(best, solve_k(num, price, num_schemes, unit_price, i, memo));\n  return best;\n}\n```", "```\n double solve_k(int num[], double price[], int num_schemes,\n                double unit_price, int num_apples, double memo[]) {\n  double best, result;\n  int i;\n❶ if (memo[num_apples] != -1)\n     return memo[num_apples];\n   if (num_apples == 0) {\n     memo[num_apples] = 0;\n     return memo[num_apples];\n   } else {\n     result = solve_k(num, price, num_schemes, unit_price,\n                      num_apples - 1, memo);\n     best = result + unit_price;\n     for (i = 0; i < num_schemes; i++)\n       if (num_apples - num[i] >= 0) {\n         result = solve_k(num, price, num_schemes, unit_price,\n                          num_apples - num[i], memo);\n         best = min(best, result + price[i]);\n       }\n         memo[num_apples] = best;\n         return memo[num_apples];\n    }\n}\n```", "```\n3\nWWW\n2 5 1\nWWW\n5 7 8\n```", "```\n3\nWWW\n2 5 1\nLLL\n5 7 8\n```", "```\n3\nWWW\n2 5 1\nLLL\n4 7 8\n```", "```\n2\nWW\n6 2\nLL\n8 1\n```", "```\n4\nWLWW\n3 4 1 8\nWLLL\n5 1 2 3\n```", "```\n4\nWLWW\n3 4 1 8\nWLLL\n5 1 2 3\n```", "```\n3\nWWW\n2 5 1\nLLL\n4 7 8\n```", "```\n2\nWW\n6 2\nLL\n8 1\n```", "```\nint solve(char outcome1[], char outcome2[], int goals1[],\n          int goals2[], int i, int j)\n```", "```\n❶ int max(int v1, int v2) {\n     if (v1 > v2)\n       return v1;\n     else\n       return v2;\n  }\n\n  int solve(char outcome1[], char outcome2[], int goals1[],\n            int goals2[], int i, int j) {\n ➋ int first, second, third, fourth;\n ➌ if (i == 0 || j == 0)\n      return 0;\n ➍ if ((outcome1[i] == 'W' && outcome2[j] == 'L' &&\n        goals1[i] > goals2[j]) ||\n       (outcome1[i] == 'L' && outcome2[j] == 'W' &&\n        goals1[i] < goals2[j]))\n  ➎ first = solve(outcome1, outcome2, goals1, goals2, i - 1, j - 1) +\n             goals1[i] + goals2[j];\n   else\n     first = 0;\n➏ second = solve(outcome1, outcome2, goals1, goals2, i - 1, j - 1);\n❼ third = solve(outcome1, outcome2, goals1, goals2, i - 1, j);\n❽ fourth = solve(outcome1, outcome2, goals1, goals2, i, j - 1);\n❾ return max(first, max(second, max(third, fourth)));\n}\n```", "```\n #define SIZE 1000\n\n int main(void) {\n   int i, n, result;\n❶ char outcome1[SIZE + 1], outcome2[SIZE + 1];\n➋ int goals1[SIZE + 1], goals2[SIZE + 1];\n➌ scanf(\"%d \", &n);\n   for (i = 1; i <= n; i++)\n     scanf(\"%c\", &outcome1[i]);\n   for (i = 1; i <= n; i++)\n     scanf(\"%d \", &goals1[i]);\n   for (i = 1; i <= n; i++)\n     scanf(\"%c\", &outcome2[i]);\n   for (i = 1; i <= n; i++)\n     scanf(\"%d\", &goals2[i]);\n    result = solve(outcome1, outcome2, goals1, goals2, n, n);\n    printf(\"%d\\n\", result);\n    return 0;\n}\n```", "```\nint main(void) {\n  int i, j, n, result;\n  char outcome1[SIZE + 1], outcome2[SIZE + 1];\n  int goals1[SIZE + 1], goals2[SIZE + 1];\n  static int memo[SIZE + 1][SIZE + 1];\n  scanf(\"%d \", &n);\n  for (i = 1; i <= n; i++)\n    scanf(\"%c\", &outcome1[i]);\n  for (i = 1; i <= n; i++)\n    scanf(\"%d \", &goals1[i]);\n  for (i = 1; i <= n; i++)\n    scanf(\"%c\", &outcome2[i]);\n  for (i = 1; i <= n; i++)\n    scanf(\"%d\", &goals2[i]);\n  for (i = 0; i <= SIZE; i++)\n    for (j = 0; j <= SIZE; j++)\n      memo[i][j] = -1;\n  result = solve(outcome1, outcome2, goals1, goals2, n, n, memo);\n  printf(\"%d\\n\", result);\n  return 0;\n}\n```", "```\nint solve(char outcome1[], char outcome2[], int goals1[],\n          int goals2[], int i, int j, int memo[SIZE + 1][SIZE + 1]) {\n  int first, second, third, fourth;\n  if (memo[i][j] != -1)\n    return memo[i][j];\n  if (i == 0 || j == 0) {\n    memo[i][j] = 0;\n    return memo[i][j];\n  }\n  if ((outcome1[i] == 'W' && outcome2[j] == 'L' &&\n       goals1[i] > goals2[j]) ||\n      (outcome1[i] == 'L' && outcome2[j] == 'W' &&\n       goals1[i] < goals2[j]))\n    first = solve(outcome1, outcome2, goals1, goals2, i - 1, j - 1, memo) +\n            goals1[i] + goals2[j];\n  else\n    first = 0;\n  second = solve(outcome1, outcome2, goals1, goals2, i - 1, j - 1, memo);\n  third = solve(outcome1, outcome2, goals1, goals2, i - 1, j, memo);\n  fourth = solve(outcome1, outcome2, goals1, goals2, i, j - 1, memo);\n  memo[i][j] = max(first, max(second, max(third, fourth)));\n  return memo[i][j];\n}\n```", "```\nstatic int memo[SIZE + 1][SIZE + 1];\n```", "```\nstatic int dp[SIZE + 1][SIZE + 1];\n```", "```\nint solve(char outcome1[], char outcome2[], int goals1[],\n          int goals2[], int n) {\n  int i, j;\n  int first, second, third, fourth;\n  static int dp[SIZE + 1][SIZE + 1];\n  for (i = 0; i <= n; i++)\n    dp[0][i] = 0;\n  for (i = 0; i <= n; i++)\n    dp[i][0] = 0;\n ❶ for (i = 1; i <= n; i++)\n   ➋ for (j = 1; j <= n; j++) {\n        if ((outcome1[i] == 'W' && outcome2[j] == 'L' &&\n             goals1[i] > goals2[j]) ||\n            (outcome1[i] == 'L' && outcome2[j] == 'W' &&\n             goals1[i] < goals2[j]))\n         first = dp[i - 1][j - 1] + goals1[i] + goals2[j];\n       else\n         first = 0;\n       second = dp[i - 1][j - 1];\n       third = dp[i - 1][j];\n       fourth = dp[i][j - 1];\n       dp[i][j] = max(first, max(second, max(third, fourth)));\n     }\n➌ return dp[n][n];\n}\n```", "```\n4\nWLWW\n3 4 1 8\nWLLL\n5 1 2 3\n```", "```\nresult = solve(outcome1, outcome2, goals1, goals2, n);\n```", "```\nint solve(char outcome1[], char outcome2[], int goals1[],\n          int goals2[], int n) {\n   int i, j, k;\n   int first, second, third, fourth;\n   static int previous[SIZE + 1], current[SIZE + 1];\n❶ for (i = 0; i <= n; i++)\n  ➋ previous[i] = 0;\n  for (i = 1; i <= n; i++) {\n    for (j = 1; j <= n; j++) {\n      if ((outcome1[i] == 'W' && outcome2[j] == 'L' &&\n           goals1[i] > goals2[j]) ||\n          (outcome1[i] == 'L' && outcome2[j] == 'W' &&\n           goals1[i] < goals2[j]))\n         first = previous[j - 1] + goals1[i] + goals2[j];\n      else\n        first = 0;\n      second = previous[j - 1];\n      third = previous[j];\n      fourth = current[j - 1];\n      current[j] = max(first, max(second, max(third, fourth)));\n   }\n➌ for (k = 0; k <= SIZE; k++)\n  ➍ previous[k] = current[k];\n  }\n  return current[n];\n}\n```"]