- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technical Email Controls
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, we’ve performed phishing attacks and learned how to train users to notice
    them. We’ve also discussed how to respond when people fall victim to social engineering
    despite our training. This chapter covers the implementation of technical email
    controls to help provide a safety net for the organization and remove some of
    this burden from the user.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we’ll discuss email appliances and services that can filter and
    manage emails. But before we get into those, let’s look at the actual standards
    associated with the technical side of email controls.
  prefs: []
  type: TYPE_NORMAL
- en: Standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As email has evolved, so have the technologies to protect it. And as those
    technologies have evolved, so have the attack patterns, becoming, as with anything
    in the information security field, a continuous game of cat and mouse. Over time,
    security professionals have proposed, debated, and approved a variety of standards.
    When it comes to securing email, there are three major ones: *Domain Keys Identified
    Mail (DKIM)*, *Sender Policy Framework (SPF)*, and *Domain-based Message Authentication,
    Reporting, and Conformance (DMARC)*. We’ll discuss each of these in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What do these three standards do? A common misconception is that they protect
    your emails from incoming phishing or spoofing attempts. To some degree, they
    do, but it’s more accurate to describe them as protecting your *reputation*: if
    you send an email with these standards implemented, and the recipient domain is
    configured to check the associated records, they can detect attempts at spoofing
    your domain. While this may seem counterintuitive and unproductive, follow along
    through the remainder of this chapter to see how this might help you.'
  prefs: []
  type: TYPE_NORMAL
- en: In short, SPF checks whether a host or IP address is in the sender’s list, DKIM
    sends a digital signature, and DMARC implements both SPF and DKIM, in addition
    to checking alignment. DMARC also establishes reporting. SPF is considered the
    lowest of the security standards. The caveat is that the recipient must have their
    mail servers configured to check for guidance from the sender regarding the standards
    and then actually perform the actions.
  prefs: []
  type: TYPE_NORMAL
- en: “From” Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To grasp how these standards work, you need to understand the various types
    of From fields in an email. In addition to a Reply-to field, emails have From
    and MailFrom. The *From* field, also called *5322.From*, displays the sender.
    The *MailFrom* field, or *5321.MailFrom*, is the actual service that sent the
    email. For example, if I sent emails using MailChimp, my email address would be
    in the 5322.From field, and MailChimp’s server and address would be in the 5321.MailFrom
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The numbers attached to these fields come from the RFCs that they were defined
    in. Here’s another easy way to think about it: the 5321.MailFrom field is the
    equivalent of a return address on an envelope mailed using the postal service,
    while the 5322.From field is the equivalent of a return address at the top of
    a letter contained within the envelope.'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s cover these three standards in chronological order, beginning with
    DKIM.
  prefs: []
  type: TYPE_NORMAL
- en: Domain Keys Identified Mail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DKIM became an internet standard in 2011\. It seeks to authenticate emails and
    prevent spoofing by requiring senders to cryptographically sign parts of the email,
    including the 5322.From field. Seeing as an attacker probably won’t have access
    to the private key used to digitally sign the field, the email recipients can
    rapidly identify spoofing attempts.
  prefs: []
  type: TYPE_NORMAL
- en: The *DKIM header*, a field included in the email message, specifies where to
    get the public key that can verify the signature. The public key gets stored in
    a DNS TXT record using the DNS domain (`d=`) and selector (`s=`) tags you can
    find in the email message. The DKIM public key is the only part of the framework
    viewable to the general population, but finding it hinges upon knowing the selector,
    which you can do only if you received an email from the domain (or manage to brute-force
    it).
  prefs: []
  type: TYPE_NORMAL
- en: The DKIM process is as follows. First, you compose an email. As the email is
    sent, the private key associated with your DKIM entry creates two digital signatures
    that prove the authenticity of the email. One signature is for the DKIM header
    itself, and the other is for the body of the email. Each email has a unique pair
    of signatures. The signatures get placed in the header and sent along with the
    email. Once it’s received, and if the recipient mail server has DKIM configured,
    the server will verify the message’s authenticity by using the public key published
    to the DNS records. If the key is able to successfully decrypt the email, the
    email is authentic and wasn’t altered.
  prefs: []
  type: TYPE_NORMAL
- en: This said, DKIM isn’t often used for authentication. Instead, we mostly use
    it to verify the authenticity, and for something called DMARC alignment, discussed
    in “Domain-Based Message Authentication, Reporting, and Conformance” later in
    this chapter. One of the shortcomings of DKIM is that it’s effective only if both
    the sender and recipient implement it. Furthermore, even if your organization
    implements DKIM internally, it can protect your users only from external actors
    spoofing other internal employees, which is good for your reputation, but does
    little to achieve security otherwise. After all, actors might spoof a trusted
    third party. But as mentioned earlier, the recipient must have their mail servers
    configured to check the DKIM authentication, which is typically accomplished through
    implementing DMARC. In the absence of DMARC, authentication failures are still
    passed to the recipient.
  prefs: []
  type: TYPE_NORMAL
- en: 'DKIM was first introduced in RFC 6376\. Later, RFC 8301 amended it with the
    following specification regarding the type of encryption DKIM could use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two algorithms are defined by this specification at this time: rsa-sha1 and
    rsa-sha256\. Signers MUST sign using rsa-sha256\. Verifiers MUST be able to verify
    using rsa-sha256\. rsa-sha1 MUST NOT be used for signing or verifying.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In 2018, another RFC dealing with DKIM was released; RFC 8463 added a new signing
    algorithm, ed25519, which uses SHA-256 and Edwards-curve Digital Signature Algorithm
    (EdDSA) in place of an RSA key.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing DKIM
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For DKIM to be effective, you have to configure it not only in your DNS server
    but on the mail server as well. Otherwise, it acts as a deterrent at best. Let’s
    walk through configuring DKIM on a domain hosted through Google Workspace. Other
    mail servers have similar features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regular Gmail uses Google’s default DKIM keys, as do domains hosted in Workspace
    that do not have DKIM configured. You cannot set up your own DKIM for a Gmail
    account hosted at *gmail.com*, but you can for a domain using Workspace. According
    to Google’s support documents, if a user doesn’t set up their own DKIM public
    key, Google will use the following default one: `d=*.gappssmtp.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s set up our own private key. First, navigate to your Workspace administrator’s
    console as a Super Admin. Once you’re in the console, click **Authenticate email**,
    as shown in [Figure 11-1](#figure11-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<Google admin console''s "Settings for Gmail" page, including user settings,
    labs, hosts, default routing, authenticate email (outlined in red), and manage
    quarantines.>>](image_fi/500983c11/f11001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-1: Selecting the Authenticate email option'
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the DKIM authentication option and be prompted to select
    a domain to configure DKIM to support ([Figure 11-2](#figure11-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<Google admin console''s "Authenticate email" page listing DKIM authentication
    options, including domain selection. "Generate New Record" and "Stop Authentication"
    buttons shown.>>](image_fi/500983c11/f11002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-2: Beginning the DKIM configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Once you select Generate New Record, you will need to select a key length and
    the selector ([Figure 11-3](#figure11-3)). Note that some hosting providers and
    DNS platforms do not support 2,048-bit key lengths. Per Google, if this is the
    case, default back to 1,024-bit keys.
  prefs: []
  type: TYPE_NORMAL
- en: '![<<"Generate New Record" box shows option selections for the DKIM key bit
    length (2048) and prefix selector (google).>>](image_fi/500983c11/f11003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-3: Generating the DKIM record and RSA key'
  prefs: []
  type: TYPE_NORMAL
- en: From here, select the domain as appropriate and click **Generate New Record**.
    This will create the key (censored in [Figure 11-4](#figure11-4)). Open a new
    window to copy and paste this into DNS. Once this is complete, click **Start Authenticating**.
  prefs: []
  type: TYPE_NORMAL
- en: '![<<Google admin console''s "Authenticate email" page. Outlined in red: the
    selected domain (theosintion.com), the DNS Host name/TXT record name (partially
    censored by author), and the TXT record value (partially censored by author).>>](image_fi/500983c11/f11004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-4: DKIM record in Google Workspace'
  prefs: []
  type: TYPE_NORMAL
- en: After this stage, enter the cPanel, a common domain management tool used by
    many hosting providers. The cPanel should include a DNS Zone Editor, with a box
    that allows you to enter your public key into a TXT record ([Figure 11-5](#figure11-5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<DNS Zone Editor shows the fields Select domain, Create new record, and
    Manage DNS records, which includes the type, name, and value. Name and Value information
    is partially censored by author.>>](image_fi/500983c11/f11005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-5: Adding a DNS TXT record'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that these panels might limit you to 255 characters: too short for the
    2,048-bit-long key recommended by industry standards. (When this happened to me,
    I contacted support and asked them to manually enter the information on my behalf,
    which they reluctantly did.)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you save the key, propagating the record could take up to 48 hours. You’ll
    need to click Start Authentication on the dashboard to verify it after propagation
    is complete. Propagation typically takes 24–48 hours, but sometimes as long as
    72 hours, depending on the infrastructure and provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s another important consideration, discussed further in the next section:
    you must validate that your hosting and DNS provider supports concatenated DNS
    entries before using anything above a 1,024-bit RSA key. Essentially, certain
    providers impose limits on the number of characters that can be entered into a
    single entry in DNS. Your DMARC implementation will fail alignment if the provider
    does not support the concatenation, as DNS will interpret it as two unrelated
    TXT entries and fail to accomplish its purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: For setting up DKIM on other email providers, like Exchange, Office 365, and
    Sendmail, you can find links to several tutorials at [http://email-security.seosint.xyz/](http://email-security.seosint.xyz/).
  prefs: []
  type: TYPE_NORMAL
- en: Shortcomings of DKIM
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The encryption used in DKIM has at times included vulnerabilities. Until 2018,
    DKIM allowed the use of the SHA-1 algorithm for signing and verification. Yet
    the security community has known SHA-1 to be insecure since 2010, before the DKIM
    standard was even created. Researchers at CWI Amsterdam and Google have since
    successfully performed a collision attack on the protocol, at which point most
    parties in the cryptography and security communities deprecated it. The collision
    attack allowed the parties to take hashes of two files that didn’t match and produce
    the same hash from them, making it appear that they matched. All major web browser
    vendors announced they would stop accepting SHA-1 certificates in 2017\.
  prefs: []
  type: TYPE_NORMAL
- en: It’s true that creating a collision at the precise location within the process
    of DKIM operations would still require a lot of computational power, so only sophisticated
    and well-funded organizations, such as nation-states or large tech companies,
    could have the capabilities to perform such an attack. After all, Google was one
    of the two parties to produce the SHA-1 collision (and it’s unlikely that Google
    will be attempting to send unauthorized emails to your organization). But if you
    have the autonomy to do so, use the more secure SHA-256.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, vulnerabilities exist in RSA, used as the public-key infrastructure
    of the DKIM standard. As I mentioned earlier, Google’s DKIM tool supports two
    1,024-bit and 2,048-bit RSAs. The 2,048-bit RSA is the current industry minimum
    standard. There is significant debate as to whether RSA is secure, given mathematic,
    computational, and cryptographic advances since RSA’s introduction. Several academics
    and researchers have claimed to be able to crack RSA or reduce the RSA cryptosystem.
    Reducing the cryptosystem is a method of weakening its strength by identifying
    large prime numbers used and factorization.
  prefs: []
  type: TYPE_NORMAL
- en: Using 1,024-bit RSA is certainly a vulnerability on paper, while using 2,048-bit
    RSA is discouraged but not prohibited. Pragmatically, without massive computational
    resources or access to quantum computing facilities, neither 1,024- nor 2,048-bit
    RSA can be broken in less than two million years on a single system. Later versions
    of DKIM added Ed25519-SHA256 as an accepted algorithm, although it has not been
    widely adopted.
  prefs: []
  type: TYPE_NORMAL
- en: The final weakness in DKIM is not a vulnerability, but rather a shortcoming.
    DKIM is excellent to implement, and it can protect an organization’s reputation—but
    only if the recipient’s mail server is configured to check the DKIM signature
    and take action against emails claiming to come from a domain with DKIM enabled;
    otherwise, your organization’s reputation can still be damaged.
  prefs: []
  type: TYPE_NORMAL
- en: Sender Policy Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like DKIM, the Sender Policy Framework (SPF) seeks to prevent spoofing using
    DNS TXT records. In these TXT records, SPF defines the domains, lists of hosts,
    domains, and IP addresses, and IP addresses allowed to send emails from within
    a mail environment or on behalf of a domain.
  prefs: []
  type: TYPE_NORMAL
- en: While some sources describe SPF as authenticating the sender, it’s more appropriate
    to describe the framework as validating it; if configured to do so, the recipient
    will check the sender information from the 5322 and 5321 fields to authorize the
    senders, as defined in the SPF record. If the record is configured to *hard fail*,
    the email will fail, and if it’s configured to *soft fail*, the email will succeed.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, imagine that someone spoofs an email from a domain. The
    recipient checks the SPF record and observes that the sending domain has hard
    fails configured; also, the sender isn’t listed in the record. In addition, the
    SPF policy is set to pass. In that case, the email will fail to reach its destination.
    If there hadn’t been an SPF record, or if the policy was set to `none` or configured
    to soft fail, the email would have succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: Since SPF does not require cryptography, SPF and DKIM are complementary, not
    competitors. SPF is logic based, as it compares incoming values to a list. The
    host, domain, or IP address is either in the record or it isn’t. DKIM employs
    both logic and cryptography in the form of digital signatures. You can read more
    about SPF in RFC 7208, which introduced it in 2014\.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing SPF
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s implement SPF in Google Workspace. Begin by determining any service providers,
    such as Google or Outlook, and the associated domains allowed to send email on
    behalf of your organization. (You might specify those domains in the MX record.)
    If you’re running an internal mail server, like Exchange, also determine the network
    blocks authorized to email on behalf of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, for these domains and IP addresses, choose a policy for various situations:'
  prefs: []
  type: TYPE_NORMAL
- en: Pass (`+`) Allows all email to pass through (not recommended, unless for brief
    troubleshooting)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No policy (`?`), neutral Essentially means *no policy*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soft fail (`~`) Somewhere between fail and neutral; generally these emails are
    accepted but tagged
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hard fail (`-`) Rejects the email
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As backups, you might configure something like `+all` (not recommended, as it
    would allow all mail), `+mx` (allows emails from the host listed in the MX record;
    not recommended if using cloud email like Google or Office 365), or `+nostarch.com`
    (which would allow emails from *nostarch.com*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have this information, you’re ready to create the record. To start,
    navigate to the DNS editor for your hosting provider and create a new TXT record.
    Alternatively, edit any existing TXT records that have `v=spf1` in the body, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Set the time-to-live (TTL) value to the default of 14,400\. The *TTL value*
    is the time DNS recursive resolvers have to cache our SPF record before pulling
    down a new one (if it changed). Some things, like critical assets and load balancers,
    operate best with a very small TTL. Assets that should not change frequently or
    have redundancy built in (such as MX records) are recommended to have larger TTL
    values. This is to attempt to combat techniques like fast flux or dynamic DNS
    records commonly used in sophisticated phishing campaigns and attacks against
    social media sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then name the TXT record after the organization’s domain. For the actual text,
    enter `v=spf1`, followed by the mechanisms and the policy, as discussed earlier.
    To define these mechanisms, you’ll need to know the five types of fields allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ip4` IPv4 address or CIDR range'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ip6` IPv6 address'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`mx` The sender’s MX record in DNS'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`a` Address record for host in DNS'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`include` References the policy of another domain'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, build the string to input into DNS. Let’s say that you’ll allow hosts
    using *nostarch.com*’s MX record, in addition to MailChimp and a private, non-routable
    IP address range, with a hard fail. The text to enter into DNS would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You could write this record in an alternative way, as well. In Chapter 4, you
    learned that No Starch uses Google Workspace, so you could replace the `+mx` portion
    with Google’s servers (which can be found in the Workspace dashboard). To keep
    this to one line, you will remove the MailChimp SPF `include` mechanism. The alternative
    entry would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you paste this into the DNS record, allow up to 72 hours for it to propagate.
    It takes time for the various DNS servers on the internet to copy the updated
    information. This time is heavily dependent upon the TTL times, which direct servers
    to cache information for a period of seconds before refreshing. In my experience,
    SPF can become valid almost immediately, unlike DKIM. Whether you use Google as
    your mail provider or not, you can still use the Google Admin Toolbox Check MX
    site to validate the information provided. You can find the toolbox at [https://toolbox.googleapps.com/apps/checkmx/](https://toolbox.googleapps.com/apps/checkmx/).
    You can find instructions for configuring SPF on other platforms at [http://email-security.seosint.xyz/](http://email-security.seosint.xyz/).
  prefs: []
  type: TYPE_NORMAL
- en: Shortcomings of SPF
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Remember from Chapter 4 that SPF allows attackers to enumerate domains, IP addresses,
    and ranges of IP addresses that an organization either owns or uses. Attackers
    may also be able to tell if the target has hard fail or soft fail configured by
    checking the `-all` (hard fail), `~all`(soft fail), or `~?` (neutral) part of
    the TXT record. This information may influence their decision about whether to
    spoof your organization’s domain, or perhaps squat on something similar. A detail-oriented
    social engineer may even configure DKIM and SPF on their phishing domain to bypass
    any checks that an organization may have in place, should they actually be enforcing
    any policies.
  prefs: []
  type: TYPE_NORMAL
- en: SPF can also alert attackers to your working relationships with other organizations.
    If other domains need the authority to send emails on your behalf, you may need
    to create SPF records for them. Examples of domains that will need permission
    to send emails on an organization’s behalf are mailing lists like MailChimp, Mailgun,
    or Constant Contact. Also account for other providers that send emails on behalf
    of the organization, such as GoToMeeting or similar collaboration platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The final aspect of SPF is not a vulnerability, but rather a shortcoming. Like
    DKIM, SPF is good to implement, and it can protect an organization’s reputation,
    but only if the recipient mail server is configured to check for the SPF records
    and enforce the defined policy. Failure to do so, however, may damage your organization’s
    reputation.
  prefs: []
  type: TYPE_NORMAL
- en: Domain-Based Message Authentication, Reporting, and Conformance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'DMARC takes existing SPF and DKIM implementations and uses them to create a
    more robust solution for preventing spoofing, business email compromise, and reputational
    harm. First introduced as an internet standard in 2015 (RFC 7489), it seeks to
    overcome the limitations of both SPF and DKIM: it implements both of the earlier
    standards, but also reports successes and failures to the sending domain. DMARC
    checks an email’s *alignment*, or whether the 5322.Fromfield matches the authenticated
    domain names. In other words, it verifies that an email with a *From* field claiming
    to be from info@nostarch.com actually originated from that domain. An email can
    pass SPF and DKIM but fail in alignment.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is what happens when a communication uses DMARC. First, a user writes an
    email. The sending email server inserts a DKIM header into it, and then sends
    it to the recipient. From there, in order for the email to traverse an organization
    with an enforced DMARC policy implemented, two things must happen. First, the
    email must pass DKIM signature checks (5322.From, with validation using a public
    key contained in DNS). Second, it must pass SPF checks (5322.From) and TXT records.
    Depending on the outcome of those checks, the DMARC record will specify that the
    server should either accept or reject the email. Reporting will occur for failures.
    The email undergoes any processes or filters enacted by the recipient, and if
    everything passes, it arrives in the recipient’s inbox.
  prefs: []
  type: TYPE_NORMAL
- en: DMARC is widely used. Several compliance frameworks require it, along with US
    federal agencies, as directed by Department of Homeland Security Binding Operational
    Directive 18-01\. If you keep up with vendor marketing materials, you may recall
    the flood of vendors using this directive to sell DMARC and email security tools
    in 2017\. But these implementations are worthless without an enforced policy,
    or a technical configuration that directs actions to occur with minimal human
    intervention. Additionally, the recipient must actually check the records and
    enforce the policy they have in place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two RFCs exist to update DMARC: RFC 8553, which addresses using underscores
    in node names; and RFC 8616, which addresses the use of ASCII characters in SPF,
    DKIM, and DMARC when they don’t address internationally used characters.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing DMARC
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before you can implement DMARC, you have to implement SPF and DKIM. Then you’ll
    need to collect the information to put in the TXT record. You can find the full
    record format defined in Section 6.3 of RFC 7489, but you’ll need the following,
    at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: The version of DMARC (`v`) The version of DMARC in use. This is currently 1,
    indicated by `v=DMARC1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The policy (`p`) The policy to be applied for a given domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The subdomain policy (`sp`) Policy that is applicable only to subdomains of
    the sending domain, such as emails from info@us.nostarch.com but not info@nostarch.com.
    In the absence of an `sp` field or qualifier, the organization will enforce the
    main `p` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The percent of “bad emails” to apply the policy to (`pct`) A number between
    0 and 100 that determines the percentage of emails from a domain owner to apply
    the policy to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `rua` tag The email address to which the reports are sent. OSINT collectors
    can read and weaponize this, so an alias is recommended.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All fields in the DMARC record, aside from the version, require qualifiers.
    For example, the `policy` field takes either `none`, `quarantine`, or `reject`.
    The `none` qualifier takes no action, while `quarantine` redirects the email to
    be placed into spam folders or sent to administrators, and `reject` rejects the
    email.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also add forensic reporting options and an address for forwarding forensic
    reports. The forensic failure reporting tag (`fo`) determines which events will
    generate forensic reporting. It has four options: `0`, which creates a failure
    report if all mechanisms fail; `1`, which creates a failure report if any mechanisms
    fail; `d`, which creates a DKIM failure report if DKIM fails, regardless of alignment;
    and `s`, whichcreates a SPF failure report if SPF fails, regardless of alignment.
    The `ruf` tag specifies the email address to which the forensic reports are sent.
    Like the `rua` tag, OSINT collectors can read and weaponize this, so use an alias.'
  prefs: []
  type: TYPE_NORMAL
- en: Two additional fields, `adkim` and `aspf`, determine whether the owner requires
    alignment mode, which dictates the actions to take if the email fails SPF or DKIM.
    Both have possible values of `r` for relaxed and `s` for strict. Relaxed requires
    an exact match for the domain only, while strict requires a complete exact match
    to pass. Both values are optional and, by default, set to relaxed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This might seem like a lot of information. To put it to use, let’s configure
    a DMARC record for *nostarch.com*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This record has a quarantine policy for domains only. It applies to 95 percent
    of the emails, and any failure causes forensic reporting, with forensic reports
    going to soc@nostarch.com. You’ll set the email address to receive the general
    DMARC reports to dmarc@nostarch.com*.*
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve drafted this, you’d add it to a TXT record in *nostarch.com*’s DNS
    zone file with the name *dmarc* and a TTL of `14400`.
  prefs: []
  type: TYPE_NORMAL
- en: Shortcomings of DMARC
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Aside from the same information disclosures present in SPF, and the fact that
    your email recipients might not check for SPF or DKIM, DMARC itself introduces
    no significant issues or vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: That said, simply creating the DNS TXT records for DMARC does not immediately
    make you secure. For example, you could easily misconfigure your DMARC implementation.
    When you’re initially configuring DMARC, avoid rejecting emails, as that removes
    the ability for humans to review the email for validity and may cause business
    interruptions or misdirected communications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mitigating this is simple: start by setting the initial DMARC policy to `none`
    and review 100 percent of the emails (`p=none; pct=100;`). As time progresses,
    lower the `pct` field incrementally until you’re comfortable with the reports
    and the performance. Once you’ve attained a good level, change the review percentage
    to a manageable but realistic value. I recommend 60 to 85 percent for enterprises,
    depending on your resources. Then update the DMARC TXT record to reflect this
    (`p=quarantine; pct=75;`).'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that actors who use email to attempt to gain access to your organization’s
    enterprise may leverage tools to enhance their legitimacy, so don’t rely solely
    on SPF, DKIM, and DMARC. For example, if an actor compromises another organization
    with SPF, DKIM, and DMARC configured, and then sends your organization an email
    through legitimate channels, it will pass all checks associated with these three
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: Another threat vector not addressed by DMARC is encryption. The three standards
    do not provide a means to encrypt emails. Sure, DKIM uses cryptography, but only
    to sign emails. The next sections cover how to address this gap.
  prefs: []
  type: TYPE_NORMAL
- en: Opportunistic TLS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When originally designed, the SMTP, POP, and IMAP mail protocols didn’t include
    encryption. As attacks evolved, researchers created *Opportunistic Transport Layer
    Security (TLS)* to encrypt them. You’ll sometimes see it nicknamed *STARTTLS*,
    after the command used to start the service.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how STARTTLS works. First, the sending server connects to the receiving
    server as normal. It then requests Extended SMTP, which allows images and attachments.
    From here, the sender asks the recipient server if it supports STARTTLS. If the
    response is yes, the connection restarts and encrypts the email using the version
    of the SSL or TLS protocol agreed upon by both hosts. If the answer is no, the
    email proceeds unencrypted. Another variant, called *Enforced TLS*, won’t let
    the email send unless the connection is secured. The use of Enforced TLS is not
    widely adopted because of the possibility of mail being blocked for the inability
    to negotiate encryption.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest problem with STARTTLS is that it is *opportunistic,* which means
    it uses encryption only if available. In the absence of available encryption or
    support for it, the message will be sent in plaintext. Another problem with STARTTLS
    is that the encryption handshake itself occurs in plaintext, which enables would-be
    attackers to steal the session information or modify the messages via man-in-the-middle
    attacks. You can see both of these problems exploited in *STRIPTLS attacks,* whereby
    an attacker either disables the actual STARTTLS command or makes it appear as
    if TLS is unavailable. By configuring SMTP to require TLS for outgoing connections,
    you can mitigate STRIPTLS but might lose outgoing email services if you misconfigure
    the TLS or if the recipient is not configured to receive TLS emails/blocks the
    port.
  prefs: []
  type: TYPE_NORMAL
- en: Another mitigation of STRIPTLS exists in a subordinate function of Domain Name
    System Security Extensions (DNSSEC) called DNS-based Authentication of Named Entities
    (DANE). Implementing DANE requires organizations to create a DNS record that directs
    all communications on a specific port or protocol to negotiate the session using
    a public key placed into DNS. This could also be misused or collected as part
    of an OSINT effort, as with anything in public DNS entries, as an adversary can
    query DNS records and draw inferences from the entries. While this mitigation
    itself is simple to implement, DNSSEC overall is not, so we haven’t seen widespread
    adoption of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Around the same time that DANE was being developed, a different solution to
    the same problem (STRIPTLS) was being drafted: SMTP MTA Strict Transport Security
    (MTA-STS).'
  prefs: []
  type: TYPE_NORMAL
- en: MTA-STS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*SMTP MTA Strict Transport Security (MTA-STS)* is another way of implementing
    TLS for securing email communications. In this method, the two parties negotiate
    the TLS handshake using DNS TXT records, as well as files uploaded to specific
    directories in a predefined, publicly accessible subdomain of the sending domain.'
  prefs: []
  type: TYPE_NORMAL
- en: This standard applies to only SMTP traffic between mail servers. The communication
    between client and server is accomplished using HTTP Strict Transport Security
    (HSTS). Because of the complexity of implementing MTA-STS, I won’t walk through
    the process here. You can find links to tutorials at [http://email-security.seosint.xyz/](http://email-security.seosint.xyz/)*.*
  prefs: []
  type: TYPE_NORMAL
- en: TLS-RPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*SMTP TLS Reporting (TLS-RPT)* is a method of gathering statistics about potential
    failures when negotiating TLS and associated domains. Think of this as comparable
    to DMARC, if MTA-STS were the DKIM element. You can use this information for troubleshooting
    or threat intelligence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up TLS-RPT is relatively easy, as it merely requires a DNS TXT record
    with `_smtp._tls.``domain.tld` and a reporting address in the body. If an error
    occurs with an email using an encrypted method (DANE or MTA-STS), the reporting
    email will receive a notification. The following is an example for *nostarch.com*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The top line is the field name and TTL. The second line is the value. Here,
    we’ve set the TTL to 300 and reporting to [soc@nostarch.com](http://mailto:soc@nostarch.com).
  prefs: []
  type: TYPE_NORMAL
- en: Email Filtering Technologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final step to achieving email security Zen is using filtering technologies.
    This typically means hiring a vendor or service provider to receive your emails
    before you do. The vendor will scan them for patterns they observe across all
    clients, and check for SPF, DKIM, and DMARC, if configured. Email filtering isn’t
    perfect, but it does remove a lot of the burden from the technical staff. Keep
    in mind, though, that hiring a vendor will likely require you to make changes
    to your public DNS records, and you can discover these relationships using OSINT
    techniques, as discussed previously.
  prefs: []
  type: TYPE_NORMAL
- en: Many configurations and products are out there. When choosing a vendor, consider
    their throughput of emails per minute or second. Also decide whether you’d like
    to maintain the email filtering through software, an appliance, or a cloud service.
    Each option presents unique challenges, particularly with respect to implementation,
    support, availability, and reporting, and each offers different features. Email
    filtering may be easier to implement in cloud instances, as these would best protect
    the availability of email. However, any decision that requires configuration,
    especially beyond DNS records, might afford opportunities for failure, disruption,
    or poor security. If you choose to use a cloud provider, you’ll also be reliant
    upon the SLA and your contract with the vendor. That said, they do simplify the
    process; you’ll be responsible for just updating your MX record in the DNS zone
    file and selecting the proper options.
  prefs: []
  type: TYPE_NORMAL
- en: Some vendors will also maintain and manage your SPF, DKIM, and DMARC implementations
    for you. Weigh the risks of what could occur to disrupt the system against what
    you gain from using the system. Does the vendor provide you their threat intelligence?
    Is this the service that the vendor specializes in? What does the contract entail?
  prefs: []
  type: TYPE_NORMAL
- en: Other Protections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As security professionals, we must build our systems so that they can not only
    handle ordinary use, but also withstand abuse in a way that contains the actions
    long enough for us to detect and respond to them. This is the crux of Winn Schwartau’s
    book *Time Based Security* (Impact PR, 1999).
  prefs: []
  type: TYPE_NORMAL
- en: When securing your systems against phishing, consider implementing controls
    beyond those used solely for email. While we won’t discuss them in this chapter,
    implement malware protection, whether it’s antivirus, endpoint detection and response
    (EDR), or any other anti-malware product. Most malware finds its way into networks
    via email when users download it from a successful phish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two other technologies can prevent catastrophic outcomes from phishing: file
    integrity monitoring (FIM) and data loss prevention (DLP) systems. FIM monitors
    a set of files for modification. You could write a simple FIM solution that takes
    a cryptographic hash of every file and stores it somewhere. It would then validate
    that the files haven’t changed, and if they have, check whether the change was
    authorized. This is important for detecting malicious actors already in the network.
    If the file contents changed without authorization, this could indicate new applications
    running or being installed, ransomware, or someone tampering with important files.'
  prefs: []
  type: TYPE_NORMAL
- en: DLP aims to prevent users from emailing files outside the organization, uploading
    files to the public internet and file-sharing websites (like Google Drive, Box,
    and Dropbox), and saving data to unauthorized USB devices (if any at all). Many
    DLP solutions also have the capability to prevent users from sharing sensitive
    or regulated data like Payment Card Industry (PCI) data, PHI, and PII. This is
    important because it prevents users from handing over trade secrets, intellectual
    property, and crown jewels. It also takes away many of the reasons they would
    have to plug a USB drive into their workstations in the first place, reducing
    the likelihood of a successful baiting attack.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you took steps to make your organization a little safer. You
    learned about the three email security standards that aim to curb email spoofing,
    as well as the shortcomings of each. (If you’re like me, you’ve developed a special
    hatred of the letters *RFC*.)
  prefs: []
  type: TYPE_NORMAL
- en: Using the information in this chapter, you can apply the concepts and standards
    to your organization to create layers of defense. You may have to explain to management
    that SPF, DKIM, and DMARC aren’t absolute solutions to phishing, and that even
    when they’re in place, the organization should consider installing more controls,
    like email filtering solutions.
  prefs: []
  type: TYPE_NORMAL
- en: After the organization chooses the email filtering solution that best fits with
    its compliance needs and budget, take the time to properly implement the solution.
    Then test it with phishing simulations. If the simulations get caught, great.
    Next, you could release them from quarantine to test users. If the simulations
    make it through, work with the vendor to determine why and how to fix the problem.
  prefs: []
  type: TYPE_NORMAL
