- en: —10—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Picking Locks with Breadth-First Search
  prefs: []
  type: TYPE_NORMAL
- en: Frank, Socks, and Officer Notation huddled by the back gate of the prison’s
    outer wall. Despite its truly impressive coating of rust, the locked gate had
    resisted both of Frank’s attempts to kick it open. He had only succeeded in clouding
    the air with red dust and introducing Notation to at least six new Boolean curse
    words.
  prefs: []
  type: TYPE_NORMAL
- en: “So . . . that didn’t work,” supplied Socks. Frank ignored him and studied the
    locking mechanism. It was a standard carved keypad with buttons labeled 1, 2,
    3, A, B, and C in a single ordered row and an ENTER button beneath.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0071-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “We’ll have to do this the old-fashioned way,” said Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “Wasn’t kicking down the gate the old-fashioned way?” asked Notation.
  prefs: []
  type: TYPE_NORMAL
- en: Frank ignored her as well. “Socks, do you know any magic lock-picking spells?”
  prefs: []
  type: TYPE_NORMAL
- en: “No,” Socks protested loudly. “Those are illegal!”
  prefs: []
  type: TYPE_NORMAL
- en: “How about something to weaken the lock? Or maybe the hinges?” asked Frank.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0072-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “You want me to help you destroy property?” Socks looked aghast. “That’s worse
    than lock picking. Do you know how much trouble—”
  prefs: []
  type: TYPE_NORMAL
- en: “Search spells, then? The Spell of All Combinations or the Spell of Breadth-First
    Search?” Notation interrupted. She’d heard enough on the topic of proper and improper
    spellwork after Frank had casually inquired about the feasibility of replication
    spells on gold coins—a use of magic that fell firmly on the wrong side of both
    Socks’s and her own ethical line.
  prefs: []
  type: TYPE_NORMAL
- en: “I’ve used the Spell of Breadth-First Search a few times,” Socks answered. “My
    real expertise is binary search trees, but I’m familiar with a range of computational
    techniques. Once I—”
  prefs: []
  type: TYPE_NORMAL
- en: “Will breadth-first search work on the lock?” interrupted Frank. Over the years,
    Frank had worked cases with a handful of wizards of varying levels of respectability.
    He’d seen at least a dozen different lock-picking spells but had never seen a
    door opened with an explicit breadth-first search.
  prefs: []
  type: TYPE_NORMAL
- en: Notation smiled. “Definitely! It’s a bit abstract, but I saw a similar problem
    recently in my Police Algorithms course. When you think about it, a code lock
    is just a search problem; you enter a string of characters to open it. The search
    space is all possible strings that can be made from those characters. Every string
    is a valid search option, from a single character like 1 or A to complex sequences
    like ABC123CBA321\. The search target is the one string that opens the lock.”
  prefs: []
  type: TYPE_NORMAL
- en: “But we don’t even know how many characters we need,” protested Socks. “The
    lock could have a 30-character combination.”
  prefs: []
  type: TYPE_NORMAL
- en: “That’s why she suggested breadth-first search,” said Frank, thinking aloud
    as much as addressing Socks’s concern.
  prefs: []
  type: TYPE_NORMAL
- en: “I don’t understand,” said Socks.
  prefs: []
  type: TYPE_NORMAL
- en: Notation quickly picked up the explanation. “You see, breadth-first search expands
    outward from a starting point, exploring along a frontier of solutions. Naturally
    it will try the shorter solutions first.”
  prefs: []
  type: TYPE_NORMAL
- en: “Huh?” asked Socks, now looking confused to the point of panic. “I thought breadth-first
    search used magic lists. I’ve always used a magic list. Isn’t it just a magic
    list?”
  prefs: []
  type: TYPE_NORMAL
- en: “Yes,” agreed Notation. “Breadth-first search maintains a list of options to
    try next if the current option doesn’t work. The algorithm is basically a loop
    that keeps pulling options from the front of the list and adding new options to
    the back. On each iteration, we pick a new option to try from the *front* of the
    list. And, if that’s not what we want, we check if there are any new options reachable
    from the current one and add those unexplored options to the *back* of the list.
  prefs: []
  type: TYPE_NORMAL
- en: “You start at a single point in the search space, in this case at a password
    of length zero. Then for each password you try, you add new search possibilities
    to the end of the list. In this case, each time we try a password, we’ll add all
    single-character extensions to the list. For example, here we know the password
    can only contain the characters 1, 2, 3 and A, B, and C. Once we’ve tested 3A,
    we’ll add 3A1, 3A2, 3A3, 3AA, 3AB, and 3AC to the end of our list.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks screwed his face up in concentration, then asked, “How do we know which
    options to add?”
  prefs: []
  type: TYPE_NORMAL
- en: “Think of it like a tree of possibilities,” suggested Notation. “Each branch,
    or *node*, is a password from our list, like 3A. The neighboring options are the
    nodes under it—the passwords we would get by adding one more character to the
    end. Breadth-first search progresses down each level of the tree before moving
    onto the next.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0074-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Since we add the new, longer passwords to the *end* of our list, we try all
    the short stuff first,” Frank threw in. “Now, can you do it?”
  prefs: []
  type: TYPE_NORMAL
- en: “This isn’t a proper use of—”
  prefs: []
  type: TYPE_NORMAL
- en: “Come on! Really?” interrupted Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “It’s basically a lock-picking spell,” responded Socks.
  prefs: []
  type: TYPE_NORMAL
- en: “Yes. That’s exactly what it is!” shouted Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “Forget it,” said Notation, throwing her arms up in frustration. “If he doesn’t
    feel comfortable picking the lock, we’re not going to change his mind by yelling.”
    She turned and studied the stone wall itself, which stood at least 10 feet tall.
    After a moment she continued, “Frank, if you give me a boost, maybe I can climb
    over.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank gave the wall a skeptical look. Despite having been abandoned for years,
    the wall lacked the large cracks and rambling vines that often aid mountaineering
    efforts on old castle walls. The workmanship was impressive. Someone had taken
    real pride in building this wall; you could tell from the artistic way the metal
    spikes twisted as they jutted up. Those little details took effort.
  prefs: []
  type: TYPE_NORMAL
- en: “Maybe. It’s pretty high, though, and those spikes look awfully sharp,” he said.
  prefs: []
  type: TYPE_NORMAL
- en: “It’ll be just like the obstacle course at the academy,” said Notation. “Aside
    from the hard-packed ground, the lack of hand-holds, and the large metal spikes,
    that is.”
  prefs: []
  type: TYPE_NORMAL
- en: “Those’ll probably add some excitement,” Frank offered.
  prefs: []
  type: TYPE_NORMAL
- en: “Shut up and give me a boost, Frank.”
  prefs: []
  type: TYPE_NORMAL
- en: “No. No. I’ll do it,” said Socks hurriedly. “I’ll use the Spell of Breadth-First
    Search. I’ll need something for the list, though. A roll of parchment, perhaps?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank and Notation looked at each other. “No can do, kid. Use the ground; it’s
    muddy enough.”
  prefs: []
  type: TYPE_NORMAL
- en: “Oh. Yes. Of course.”
  prefs: []
  type: TYPE_NORMAL
- en: A few minutes later, the lock began to glow. “Here we go,” said Socks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The word ENTER glowed briefly, followed by a clicking noise. But the gate remained
    locked. The spell had tried the first password, which was nothing at all. Next
    a series of numbers and letters appeared in the mud:'
  prefs: []
  type: TYPE_NORMAL
- en: 1, 2, 3, A, B, C
  prefs: []
  type: TYPE_NORMAL
- en: Frank could picture the tree of possible passwords that the list represented.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0075-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An instant later, the number 1 glowed, followed by ENTER. Again the gate clicked,
    but didn’t open. The list on the ground changed, showing the new list of passwords
    to try, branching out to the third level of the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 2, 3, A, B, C
  prefs: []
  type: TYPE_NORMAL
- en: 11, 12, 13, 1A, 1B, 1C
  prefs: []
  type: TYPE_NORMAL
- en: But these were added to the end of the list. The search itself continued on
    the current level, trying 2.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0075-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The password 2 didn’t work, and the list grew again.
  prefs: []
  type: TYPE_NORMAL
- en: 3, A, B, C
  prefs: []
  type: TYPE_NORMAL
- en: 11, 12, 13, 1A, 1B, 1C
  prefs: []
  type: TYPE_NORMAL
- en: 21, 22, 23, 2A, 2B, 2C
  prefs: []
  type: TYPE_NORMAL
- en: Again the tree branched out with new possibilities, but the search still worked
    its way along the current level, trying all one-character passwords before moving
    deeper.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0076-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In other words, the search explored the full breadth of each level before moving
    on to deeper levels.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0076-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The search finished the first level, trying the passwords 3, A, B, and C, before
    Socks broke the silence. “This could take a while.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank nodded, eyes fixed on the ever-growing list of numbers. “Notation, why
    don’t you scout around the front?”
  prefs: []
  type: TYPE_NORMAL
- en: “Okay,” she agreed, her expression betraying great relief. Rookies didn’t tend
    to handle stakeouts well. Sitting still for hours on end with nothing to do wasn’t
    something you could teach at the academy, although Professor Cloud’s Philosophy
    of Law Enforcement lectures came close.
  prefs: []
  type: TYPE_NORMAL
- en: Five minutes after Notation left, the lock gave a loud click, and the gate swung
    open noisily on its well-rusted hinges. The list in the mud faded as the search
    algorithm completed.
  prefs: []
  type: TYPE_NORMAL
- en: “1111,” said Frank, without a trace of surprise. It often paid to keep the codes
    simple enough for the henchmen to remember.
  prefs: []
  type: TYPE_NORMAL
- en: He used a stick to write the code in a patch of mud and circled it twice. Even
    a rookie couldn’t miss the message. Then he turned to Socks. “Let’s go.”
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: BREADTH-FIRST SEARCH**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: Breadth-first search is an algorithm that explores search states in the order
    in which they are encountered. In other words, it always attempts to explore the
    oldest unsearched state first.
  prefs: []
  type: TYPE_NORMAL
- en: You can visualize breadth-first search as keeping a list (or, more formally,
    a *queue*) of known but unexplored states. At each step, the algorithm picks the
    next state to explore from the front of the queue. As the algorithm discovers
    new options, it adds them to the back of the queue, to make sure all previous
    options are explored before it moves on to new options.
  prefs: []
  type: TYPE_NORMAL
- en: It’s helpful to describe breadth-first search in terms of how it explores a
    graph. A graph is a data structure composed of individual *nodes*, with *edges*
    linking those nodes. If two nodes are connected by an edge, we say they are *neighbors*,
    which means you can move between those nodes. During your orientation, you studied
    at least one graph—the Kingdom Highway Map. This map represents each city as a
    node and the highways connecting them as edges. Make sure you own a good copy
    of that map. Criminals have a tendency to flee the city, and you’ll need to know
    to which neighboring cities they are most likely to go.
  prefs: []
  type: TYPE_NORMAL
- en: Searching the Kingdom Highway Map is a classic graph search problem. Our search
    states are the nodes of the graph—the cities on the map. Imagine that a crime
    has occurred in city A and it is your job to find the fleeing criminal.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0078-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Breadth-first search explores along an expanding frontier, checking each node
    *X* steps away from the initial node before proceeding to any nodes *X* + 1 steps
    away. After you explore city A, its two neighbors, B and D, are added to the back
    of the queue. No other cities were in the queue, so B is the next city you’ll
    visit.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0078-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If each node has many neighbors, maintaining the queue of nodes to explore can
    use a large amount of memory. This memory requirement can become expensive in
    large search problems. As an officer, you’ll want to invest in a number of good
    notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: At each step in breadth-first search, we test whether the current node is the
    target node. In this example, that means thoroughly checking the city for our
    criminal. If the current node isn’t the target node, we add only its previously
    unseen neighbors to the list. (A node that is *unseen* hasn’t been added to the
    list yet.) We thus avoid adding either nodes that we have already explored or
    unexplored nodes that are already on our list. In this case, for instance, after
    checking city B, we would not add A to our list again.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0079-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that checking whether a neighbor is unseen requires even more memory because
    we must keep track of previously seen nodes. However, the benefit is significant—we
    avoid loops through previously explored nodes. Again, carefully keeping track
    of your search can pay off significantly.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0079-02.jpg)![image](../images/f0080-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this particular example, we find our suspect hiding in city H. We can stop
    our search there and make the arrest.
  prefs: []
  type: TYPE_NORMAL
- en: In search problems where moving between any two neighboring nodes has the same
    cost (time, energy, etc.), breadth-first search is guaranteed to find a path with
    the least total cost. It accomplishes this by expanding outward from the starting
    node, exploring *every* node that is *X* steps away before exploring any state
    that is *X* + 1 steps away.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0080-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Breadth-first search can even be adapted to return the shortest path by keeping
    *back pointers*. Each node keeps track of the node that preceded it. Then, upon
    finding the goal state, you can trace the pointers backward to re-create the path.
  prefs: []
  type: TYPE_NORMAL
- en: However, keep in mind that this works only if each move between neighbors has
    the same cost. In the general case, minimizing the number of steps in the search
    space can be very different from minimizing the cost of the path to the goal.
    For example, if hikers want to minimize their energy expended (cost), they would
    prefer a longer route that avoids crossing a mountain range. While the mountain
    pass would be shorter, and arguably more scenic, it could require significantly
    more energy.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0081-01.jpg)'
  prefs: []
  type: TYPE_IMG
