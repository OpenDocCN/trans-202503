- en: —10—
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: —10—
- en: Picking Locks with Breadth-First Search
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用广度优先搜索开锁
- en: Frank, Socks, and Officer Notation huddled by the back gate of the prison’s
    outer wall. Despite its truly impressive coating of rust, the locked gate had
    resisted both of Frank’s attempts to kick it open. He had only succeeded in clouding
    the air with red dust and introducing Notation to at least six new Boolean curse
    words.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 弗兰克、袜子和符号站在监狱外墙的后门旁。尽管门上确实覆盖了一层令人印象深刻的锈迹，但这道锁门仍然抵抗了弗兰克两次试图踢开的努力。他只成功地将空气弄得一片红尘，还让符号学到了至少六个新的布尔逻辑咒语。
- en: “So . . . that didn’t work,” supplied Socks. Frank ignored him and studied the
    locking mechanism. It was a standard carved keypad with buttons labeled 1, 2,
    3, A, B, and C in a single ordered row and an ENTER button beneath.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “所以……那不行，”袜子补充道。弗兰克没理他，开始研究锁的机制。这是一个标准的刻花数字键盘，按钮上标有1、2、3、A、B和C，按键排列成一行，下面有一个ENTER键。
- en: '![image](../images/f0071-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0071-01.jpg)'
- en: “We’ll have to do this the old-fashioned way,” said Frank.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “我们得老式点做了，”弗兰克说。
- en: “Wasn’t kicking down the gate the old-fashioned way?” asked Notation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “踢开大门不是老式的方法吗？”符号问道。
- en: Frank ignored her as well. “Socks, do you know any magic lock-picking spells?”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 弗兰克同样没有理会她。“袜子，你知道什么魔法开锁法术吗？”
- en: “No,” Socks protested loudly. “Those are illegal!”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “不行，”袜子大声抗议。“这些是非法的！”
- en: “How about something to weaken the lock? Or maybe the hinges?” asked Frank.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “那要不试试弱化锁呢？或者也许是铰链？”弗兰克问道。
- en: '![image](../images/f0072-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0072-01.jpg)'
- en: “You want me to help you destroy property?” Socks looked aghast. “That’s worse
    than lock picking. Do you know how much trouble—”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “你要我帮你破坏财产？”袜子露出惊愕的表情。“那比开锁还要糟糕。你知道这会惹多大麻烦吗——”
- en: “Search spells, then? The Spell of All Combinations or the Spell of Breadth-First
    Search?” Notation interrupted. She’d heard enough on the topic of proper and improper
    spellwork after Frank had casually inquired about the feasibility of replication
    spells on gold coins—a use of magic that fell firmly on the wrong side of both
    Socks’s and her own ethical line.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “那是搜索法术吗？‘全组合法术’或‘广度优先搜索法术’？”符号打断道。自从弗兰克随意询问关于在金币上复制法术的可行性之后——这种魔法明显违反了袜子和她自己的伦理底线——她已经听够了关于正当与不正当法术的讨论。
- en: “I’ve used the Spell of Breadth-First Search a few times,” Socks answered. “My
    real expertise is binary search trees, but I’m familiar with a range of computational
    techniques. Once I—”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “我用过几次广度优先搜索法术，”袜子回答。“我真正擅长的是二叉搜索树，但我熟悉一系列计算技术。曾经有一次——”
- en: “Will breadth-first search work on the lock?” interrupted Frank. Over the years,
    Frank had worked cases with a handful of wizards of varying levels of respectability.
    He’d seen at least a dozen different lock-picking spells but had never seen a
    door opened with an explicit breadth-first search.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “广度优先搜索能在锁上起作用吗？”弗兰克打断道。多年来，弗兰克处理过几个不同程度尊重的巫师案件。他见过至少十几种不同的开锁法术，但从未见过通过明确的广度优先搜索打开门锁。
- en: Notation smiled. “Definitely! It’s a bit abstract, but I saw a similar problem
    recently in my Police Algorithms course. When you think about it, a code lock
    is just a search problem; you enter a string of characters to open it. The search
    space is all possible strings that can be made from those characters. Every string
    is a valid search option, from a single character like 1 or A to complex sequences
    like ABC123CBA321\. The search target is the one string that opens the lock.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 符号微笑着说：“当然！这有点抽象，但我最近在我的《警察算法》课程中看到过类似的问题。想一想，密码锁就是一个搜索问题；你输入一串字符来打开它。搜索空间是所有可以由这些字符组成的可能字符串。每个字符串都是一个有效的搜索选项，从一个字符如1或A到复杂的序列如ABC123CBA321。搜索目标是那个打开锁的字符串。”
- en: “But we don’t even know how many characters we need,” protested Socks. “The
    lock could have a 30-character combination.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “但是我们连需要多少个字符都不知道，”袜子抗议道。“那个锁可能有30个字符的组合。”
- en: “That’s why she suggested breadth-first search,” said Frank, thinking aloud
    as much as addressing Socks’s concern.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “这就是她建议使用广度优先搜索的原因，”弗兰克边思考边回答袜子的问题。
- en: “I don’t understand,” said Socks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “我不明白，”袜子说。
- en: Notation quickly picked up the explanation. “You see, breadth-first search expands
    outward from a starting point, exploring along a frontier of solutions. Naturally
    it will try the shorter solutions first.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 符号迅速接过了解释。“你看，广度优先搜索从一个起点开始向外扩展，在解的边界上进行探索。它自然会先尝试较短的解。”
- en: “Huh?” asked Socks, now looking confused to the point of panic. “I thought breadth-first
    search used magic lists. I’ve always used a magic list. Isn’t it just a magic
    list?”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯？”Socks困惑地问道，显得有些慌张。“我以为广度优先搜索使用的是魔法列表。我一直用的是魔法列表，不是就是魔法列表吗？”
- en: “Yes,” agreed Notation. “Breadth-first search maintains a list of options to
    try next if the current option doesn’t work. The algorithm is basically a loop
    that keeps pulling options from the front of the list and adding new options to
    the back. On each iteration, we pick a new option to try from the *front* of the
    list. And, if that’s not what we want, we check if there are any new options reachable
    from the current one and add those unexplored options to the *back* of the list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，”Notation同意道。“广度优先搜索会维护一个待尝试的选项列表，如果当前选项不起作用，我们就会从当前选项出发，寻找新的选项并将它们添加到*列表的末尾*。每次循环时，我们从*列表的前端*挑选一个新的选项尝试。如果那不是我们想要的，我们检查是否有任何新的选项可以从当前选项到达，并把这些未探索的选项添加到*列表的末尾*。”
- en: “You start at a single point in the search space, in this case at a password
    of length zero. Then for each password you try, you add new search possibilities
    to the end of the list. In this case, each time we try a password, we’ll add all
    single-character extensions to the list. For example, here we know the password
    can only contain the characters 1, 2, 3 and A, B, and C. Once we’ve tested 3A,
    we’ll add 3A1, 3A2, 3A3, 3AA, 3AB, and 3AC to the end of our list.”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “你从搜索空间的一个点开始，在这种情况下，从一个长度为零的密码开始。然后，对于每个尝试的密码，你在列表的末尾添加新的搜索可能性。在这种情况下，每次我们尝试一个密码时，我们会把所有的单字符扩展密码添加到列表的末尾。例如，这里我们知道密码只能包含字符1、2、3和A、B、C。一旦我们测试过3A，就会把3A1、3A2、3A3、3AA、3AB和3AC添加到我们的列表末尾。”
- en: Socks screwed his face up in concentration, then asked, “How do we know which
    options to add?”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Socks皱着脸集中注意力，然后问道，“我们怎么知道该加哪些选项？”
- en: “Think of it like a tree of possibilities,” suggested Notation. “Each branch,
    or *node*, is a password from our list, like 3A. The neighboring options are the
    nodes under it—the passwords we would get by adding one more character to the
    end. Breadth-first search progresses down each level of the tree before moving
    onto the next.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “把它当作一个可能性的树，”Notation建议道，“每个分支，或者说*节点*，都是我们列表中的一个密码，比如3A。它下面的相邻选项是那些通过在末尾加一个字符得到的密码。广度优先搜索会先遍历树的每一层，再移动到下一层。”
- en: '![image](../images/f0074-01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0074-01.jpg)'
- en: “Since we add the new, longer passwords to the *end* of our list, we try all
    the short stuff first,” Frank threw in. “Now, can you do it?”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “因为我们把新的、更长的密码添加到列表的*末尾*，所以我们会先尝试所有短的密码，”Frank补充道，“现在，你能做到吗？”
- en: “This isn’t a proper use of—”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “这不是一个合适的使用——”
- en: “Come on! Really?” interrupted Frank.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “来吧！真的吗？”Frank打断道。
- en: “It’s basically a lock-picking spell,” responded Socks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “这基本上就是一个开锁魔法，”Socks回答道。
- en: “Yes. That’s exactly what it is!” shouted Frank.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “对！完全是这个意思！”Frank喊道。
- en: “Forget it,” said Notation, throwing her arms up in frustration. “If he doesn’t
    feel comfortable picking the lock, we’re not going to change his mind by yelling.”
    She turned and studied the stone wall itself, which stood at least 10 feet tall.
    After a moment she continued, “Frank, if you give me a boost, maybe I can climb
    over.”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “算了，”Notation沮丧地举起双臂说道，“如果他不舒服开锁，我们大喊也改变不了他的想法。”她转身看着石墙，那面墙至少有10英尺高。过了一会儿，她继续说道，“Frank，如果你给我一个支撑，我也许可以爬过去。”
- en: Frank gave the wall a skeptical look. Despite having been abandoned for years,
    the wall lacked the large cracks and rambling vines that often aid mountaineering
    efforts on old castle walls. The workmanship was impressive. Someone had taken
    real pride in building this wall; you could tell from the artistic way the metal
    spikes twisted as they jutted up. Those little details took effort.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Frank怀疑地看了看墙壁。尽管这堵墙已经被废弃了多年，但墙面没有那种老旧城堡墙上常见的大裂缝和藤蔓，这些往往能帮助登山。工艺相当精湛。显然，有人对建造这堵墙投入了真心，你可以从金属尖刺的艺术性扭曲形状看出来，那些细节显示出不小的工夫。
- en: “Maybe. It’s pretty high, though, and those spikes look awfully sharp,” he said.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “也许吧。不过它挺高的，那些尖刺看起来非常锋利，”他说。
- en: “It’ll be just like the obstacle course at the academy,” said Notation. “Aside
    from the hard-packed ground, the lack of hand-holds, and the large metal spikes,
    that is.”
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “这就像是学院里的障碍赛道，”Notation说道，“除了坚硬的地面、没有把手的地方和那些大金属尖刺外。”
- en: “Those’ll probably add some excitement,” Frank offered.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “那些可能会增添些刺激感，”Frank插话道。
- en: “Shut up and give me a boost, Frank.”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “闭嘴，给我一个支撑，Frank。”
- en: “No. No. I’ll do it,” said Socks hurriedly. “I’ll use the Spell of Breadth-First
    Search. I’ll need something for the list, though. A roll of parchment, perhaps?”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “不，不。我来做，”Socks 急忙说道。“我会使用广度优先搜索法术。不过我需要一些东西来列出列表，可能需要一卷羊皮纸？”
- en: Frank and Notation looked at each other. “No can do, kid. Use the ground; it’s
    muddy enough.”
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Frank 和 Notation 互相看了一眼。“不行，小子。用地面吧，泥巴够多的。”
- en: “Oh. Yes. Of course.”
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，是的，当然。”
- en: A few minutes later, the lock began to glow. “Here we go,” said Socks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，锁开始发光。“来了，”Socks 说道。
- en: 'The word ENTER glowed briefly, followed by a clicking noise. But the gate remained
    locked. The spell had tried the first password, which was nothing at all. Next
    a series of numbers and letters appeared in the mud:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ENTER 这个词短暂发光，接着传来点击声。但大门依旧锁住。法术已经尝试了第一个密码，什么都没有。接下来，一系列的数字和字母出现在泥土中：
- en: 1, 2, 3, A, B, C
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 1, 2, 3, A, B, C
- en: Frank could picture the tree of possible passwords that the list represented.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Frank 能想象出这个列表所代表的可能密码树。
- en: '![image](../images/f0075-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0075-01.jpg)'
- en: An instant later, the number 1 glowed, followed by ENTER. Again the gate clicked,
    but didn’t open. The list on the ground changed, showing the new list of passwords
    to try, branching out to the third level of the tree.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一瞬间，数字 1 发光，随后是 ENTER。再次传来点击声，但大门没有打开。地上的列表发生了变化，显示了新的密码尝试列表，树的第三层被展开。
- en: 2, 3, A, B, C
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 3, A, B, C
- en: 11, 12, 13, 1A, 1B, 1C
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 11, 12, 13, 1A, 1B, 1C
- en: But these were added to the end of the list. The search itself continued on
    the current level, trying 2.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些条目被加到了列表的末尾。搜索仍然继续进行，保持在当前层级，尝试 2。
- en: '![image](../images/f0075-02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0075-02.jpg)'
- en: The password 2 didn’t work, and the list grew again.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 密码 2 没有成功，列表再次增长。
- en: 3, A, B, C
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 3, A, B, C
- en: 11, 12, 13, 1A, 1B, 1C
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 11, 12, 13, 1A, 1B, 1C
- en: 21, 22, 23, 2A, 2B, 2C
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 21, 22, 23, 2A, 2B, 2C
- en: Again the tree branched out with new possibilities, but the search still worked
    its way along the current level, trying all one-character passwords before moving
    deeper.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 树再次展开了新的可能性，但搜索仍然沿着当前层级前进，尝试所有单字符密码后再向更深层次移动。
- en: '![image](../images/f0076-01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0076-01.jpg)'
- en: In other words, the search explored the full breadth of each level before moving
    on to deeper levels.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，搜索在深入到更深层级之前，先探索了每个层级的所有可能。
- en: '![image](../images/f0076-02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0076-02.jpg)'
- en: The search finished the first level, trying the passwords 3, A, B, and C, before
    Socks broke the silence. “This could take a while.”
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索完成了第一层，尝试了密码 3、A、B 和 C，直到 Socks 打破了沉默。“这可能需要一段时间。”
- en: Frank nodded, eyes fixed on the ever-growing list of numbers. “Notation, why
    don’t you scout around the front?”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Frank 点点头，眼睛盯着不断增长的数字列表。“Notation，你去前面侦察一下如何？”
- en: “Okay,” she agreed, her expression betraying great relief. Rookies didn’t tend
    to handle stakeouts well. Sitting still for hours on end with nothing to do wasn’t
    something you could teach at the academy, although Professor Cloud’s Philosophy
    of Law Enforcement lectures came close.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “好的，”她同意道，表情显露出极大的宽慰。新手通常不太能应对守夜任务。连续几个小时坐着什么也不做，这不是在军校能学到的技能，尽管 Cloud 教授的《执法哲学》讲座差不多讲到了这个程度。
- en: Five minutes after Notation left, the lock gave a loud click, and the gate swung
    open noisily on its well-rusted hinges. The list in the mud faded as the search
    algorithm completed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Notation 离开后五分钟，锁发出了响亮的咔嚓声，大门在生锈的铰链上吱吱作响地打开了。泥土中的列表逐渐消失，搜索算法完成了。
- en: “1111,” said Frank, without a trace of surprise. It often paid to keep the codes
    simple enough for the henchmen to remember.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “1111，” Frank 说道，脸上毫无惊讶的表情。保持代码简单到足以让手下记住，通常是个明智的选择。
- en: He used a stick to write the code in a patch of mud and circled it twice. Even
    a rookie couldn’t miss the message. Then he turned to Socks. “Let’s go.”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 他用一根棍子在一片泥地上写下代码，并圈出了两次。即使是新手也不可能错过这个信息。然后他转向 Socks，说：“走吧。”
- en: '**POLICE ALGORITHMS 101: BREADTH-FIRST SEARCH**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**警察算法 101：广度优先搜索**'
- en: '***Excerpt from Professor Drecker’s Lecture***'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '***摘自 Drecker 教授的讲座***'
- en: Breadth-first search is an algorithm that explores search states in the order
    in which they are encountered. In other words, it always attempts to explore the
    oldest unsearched state first.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 广度优先搜索是一种按遇到的顺序探索搜索状态的算法。换句话说，它总是优先探索最早未搜索到的状态。
- en: You can visualize breadth-first search as keeping a list (or, more formally,
    a *queue*) of known but unexplored states. At each step, the algorithm picks the
    next state to explore from the front of the queue. As the algorithm discovers
    new options, it adds them to the back of the queue, to make sure all previous
    options are explored before it moves on to new options.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将广度优先搜索想象为保持一个已知但未探索状态的列表（或更正式地，*队列*）。在每一步中，算法从队列的前端选择下一个要探索的状态。随着算法发现新的选项，它会将它们添加到队列的后端，以确保在继续探索新的选项之前，所有先前的选项都已被探索。
- en: It’s helpful to describe breadth-first search in terms of how it explores a
    graph. A graph is a data structure composed of individual *nodes*, with *edges*
    linking those nodes. If two nodes are connected by an edge, we say they are *neighbors*,
    which means you can move between those nodes. During your orientation, you studied
    at least one graph—the Kingdom Highway Map. This map represents each city as a
    node and the highways connecting them as edges. Make sure you own a good copy
    of that map. Criminals have a tendency to flee the city, and you’ll need to know
    to which neighboring cities they are most likely to go.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以图的探索方式来描述广度优先搜索是非常有帮助的。图是一种数据结构，由单独的*节点*组成，*边*连接这些节点。如果两个节点通过一条边相连，我们说它们是*邻居*，这意味着你可以在这些节点之间移动。在你的培训过程中，你至少学习过一个图——《王国高速公路地图》。这张地图将每个城市表示为一个节点，将连接它们的高速公路表示为边。确保你拥有一份这张地图的好版本。罪犯有逃离城市的倾向，你需要知道他们最可能前往哪些邻近的城市。
- en: Searching the Kingdom Highway Map is a classic graph search problem. Our search
    states are the nodes of the graph—the cities on the map. Imagine that a crime
    has occurred in city A and it is your job to find the fleeing criminal.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索《王国高速公路地图》是一个经典的图搜索问题。我们的搜索状态是图中的节点——地图上的城市。想象一下，A市发生了一起犯罪，你的任务是找到逃跑的罪犯。
- en: '![image](../images/f0078-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0078-01.jpg)'
- en: Breadth-first search explores along an expanding frontier, checking each node
    *X* steps away from the initial node before proceeding to any nodes *X* + 1 steps
    away. After you explore city A, its two neighbors, B and D, are added to the back
    of the queue. No other cities were in the queue, so B is the next city you’ll
    visit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 广度优先搜索沿着不断扩展的边界进行探索，首先检查从初始节点出发的*X*步之内的每个节点，然后才会检查距离初始节点*X* + 1步之内的节点。在你探索完A市后，它的两个邻居B和D会被添加到队列的末尾。队列中没有其他城市，因此B是你下一个将要访问的城市。
- en: '![image](../images/f0078-02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0078-02.jpg)'
- en: If each node has many neighbors, maintaining the queue of nodes to explore can
    use a large amount of memory. This memory requirement can become expensive in
    large search problems. As an officer, you’ll want to invest in a number of good
    notebooks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个节点有许多邻居，维护待探索节点的队列可能会占用大量内存。在大型搜索问题中，这种内存需求可能变得非常昂贵。作为一名警官，你可能需要投资购买一些好的笔记本。
- en: At each step in breadth-first search, we test whether the current node is the
    target node. In this example, that means thoroughly checking the city for our
    criminal. If the current node isn’t the target node, we add only its previously
    unseen neighbors to the list. (A node that is *unseen* hasn’t been added to the
    list yet.) We thus avoid adding either nodes that we have already explored or
    unexplored nodes that are already on our list. In this case, for instance, after
    checking city B, we would not add A to our list again.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在广度优先搜索的每一步，我们都会测试当前节点是否是目标节点。在这个例子中，这意味着要彻底检查城市是否藏有我们的罪犯。如果当前节点不是目标节点，我们只会将其之前未见过的邻居添加到列表中。（*未见过*的节点是指还没有添加到列表中的节点。）因此，我们避免再次添加已经探索过的节点或已经在列表中的未探索节点。例如，在检查完B市之后，我们不会再次将A市添加到列表中。
- en: '![image](../images/f0079-01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0079-01.jpg)'
- en: Note that checking whether a neighbor is unseen requires even more memory because
    we must keep track of previously seen nodes. However, the benefit is significant—we
    avoid loops through previously explored nodes. Again, carefully keeping track
    of your search can pay off significantly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，检查一个邻居是否是未见过的节点需要更多的内存，因为我们必须追踪已见过的节点。然而，这种方法的好处是显著的——我们避免了对已探索节点的循环。再次强调，仔细追踪你的搜索过程可以带来显著的回报。
- en: '![image](../images/f0079-02.jpg)![image](../images/f0080-01.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0079-02.jpg)![image](../images/f0080-01.jpg)'
- en: In this particular example, we find our suspect hiding in city H. We can stop
    our search there and make the arrest.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个具体的例子中，我们发现我们的嫌疑人藏匿在H市。我们可以在这里停止搜索并进行逮捕。
- en: In search problems where moving between any two neighboring nodes has the same
    cost (time, energy, etc.), breadth-first search is guaranteed to find a path with
    the least total cost. It accomplishes this by expanding outward from the starting
    node, exploring *every* node that is *X* steps away before exploring any state
    that is *X* + 1 steps away.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在那些任何两个相邻节点之间的移动具有相同成本（时间、能量等）的搜索问题中，广度优先搜索能够确保找到具有最小总成本的路径。它通过从起始节点向外扩展，先探索*每一个*与起点相距*X*步的节点，才会探索与起点相距*X*
    + 1步的节点。
- en: '![image](../images/f0080-02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0080-02.jpg)'
- en: Breadth-first search can even be adapted to return the shortest path by keeping
    *back pointers*. Each node keeps track of the node that preceded it. Then, upon
    finding the goal state, you can trace the pointers backward to re-create the path.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 广度优先搜索甚至可以通过保持*回溯指针*来适应返回最短路径。每个节点都会记录前一个节点。然后，在找到目标状态后，可以通过回溯指针来重建路径。
- en: However, keep in mind that this works only if each move between neighbors has
    the same cost. In the general case, minimizing the number of steps in the search
    space can be very different from minimizing the cost of the path to the goal.
    For example, if hikers want to minimize their energy expended (cost), they would
    prefer a longer route that avoids crossing a mountain range. While the mountain
    pass would be shorter, and arguably more scenic, it could require significantly
    more energy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，记住这只适用于相邻节点之间的每一次移动具有相同成本的情况。在一般情况下，最小化搜索空间中的步骤数可能与最小化到目标路径的成本有很大不同。例如，如果远足者想要最小化他们的能量消耗（成本），他们可能会更倾向于选择一条更长的路线，以避开穿越山脉的路径。虽然山口的路线更短，且可以说更具观光价值，但它可能需要消耗更多的能量。
- en: '![image](../images/f0081-01.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0081-01.jpg)'
