- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Setting Up Vulnerable API Targets
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设置易受攻击的 API 目标
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll build your own API target lab to attack in subsequent
    chapters. By targeting a system you control, you’ll be able to safely practice
    your techniques and see their impacts from both the offensive and defensive perspectives.
    You’ll also be able to make mistakes and experiment with exploits you may not
    yet be comfortable with using in real engagements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将构建自己的 API 目标实验室，在随后的章节中进行攻击。通过针对你控制的系统，你可以安全地练习你的技术，并从进攻和防御的角度看到它们的影响。你还可以犯错，并尝试一些你可能在真实攻击中尚不熟悉的漏洞利用技术。
- en: You’ll be targeting these machines throughout the lab sections in this book
    to find out how tools work, discover API weaknesses, learn to fuzz inputs, and
    exploit all your findings. The lab will have vulnerabilities well beyond what
    is covered in this book, so I encourage you to seek them out and develop new skills
    through experimentation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本书的实验室部分针对这些机器进行攻击，了解工具的工作原理，发现 API 弱点，学习模糊测试输入，并利用所有的发现。实验室中的漏洞将远远超出本书的覆盖范围，因此我鼓励你去发现它们，并通过实验发展新的技能。
- en: This chapter walks you through setting up prerequisites in a Linux host, installing
    Docker, downloading and launching the three vulnerable systems that will be used
    as our targets, and finding additional resources for API hacking targets.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将引导你设置 Linux 主机中的先决条件，安装 Docker，下载并启动我们将用作目标的三个易受攻击的系统，并找到用于 API 黑客目标的其他资源。
- en: Creating a Linux Host
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 Linux 主机
- en: You’ll need a host system to be able to run vulnerable applications. For the
    sake of simplicity, I recommend keeping the vulnerable applications on different
    host systems. When they are hosted together, you could run into conflicts in the
    resources the applications use, and an attack on one vulnerable web app could
    affect the others. It is easier to be able to have each vulnerable app on its
    own host system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个主机系统来运行易受攻击的应用程序。为了简化操作，我建议将易受攻击的应用程序保存在不同的主机系统上。当它们托管在一起时，可能会出现应用程序使用的资源冲突，并且对一个易受攻击的
    Web 应用的攻击可能会影响到其他应用。将每个易受攻击的应用程序放在独立的主机系统上会更为简便。
- en: 'I recommend using a recent Ubuntu image hosted either on a hypervisor (such
    as VMware, Hyper-V, or VirtualBox) or in the cloud (such as AWS, Azure, or Google
    Cloud). The basics of setting up host systems and networking them together is
    beyond the scope of this book and is widely covered elsewhere. You can find many
    excellent free guides out there for setting up the basics of a home or cloud hacking
    lab. Here are a few I recommend:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐使用一个最近的 Ubuntu 镜像，它可以托管在虚拟化平台（如 VMware、Hyper-V 或 VirtualBox）上，或者托管在云端（如 AWS、Azure
    或 Google Cloud）。设置主机系统并将它们联网的基础知识超出了本书的范围，并且在其他地方有广泛的覆盖。你可以找到许多优秀的免费指南，帮助你设置家庭或云端的黑客实验室。以下是我推荐的一些：
- en: 'Cybrary, “Tutorial: Setting Up a Virtual Pentesting Lab at Home,” [https://www.cybrary.it/blog/0p3n/tutorial-for-setting-up-a-virtual-penetration-testing-lab-at-your-home](https://www.cybrary.it/blog/0p3n/tutorial-for-setting-up-a-virtual-penetration-testing-lab-at-your-home)'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cybrary，“教程：如何在家搭建虚拟渗透测试实验室”，[https://www.cybrary.it/blog/0p3n/tutorial-for-setting-up-a-virtual-penetration-testing-lab-at-your-home](https://www.cybrary.it/blog/0p3n/tutorial-for-setting-up-a-virtual-penetration-testing-lab-at-your-home)
- en: 'Black Hills Information Security, “Webcast: How to Build a Home Lab,” [https://www.blackhillsinfosec.com/webcast-how-to-build-a-home-lab](https://www.blackhillsinfosec.com/webcast-how-to-build-a-home-lab)'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Black Hills Information Security，“网络广播：如何搭建家庭实验室”，[https://www.blackhillsinfosec.com/webcast-how-to-build-a-home-lab](https://www.blackhillsinfosec.com/webcast-how-to-build-a-home-lab)
- en: Null Byte, “How to Create a Virtual Hacking Lab,” [https://null-byte.wonderhowto.com/how-to/hack-like-pro-create-virtual-hacking-lab-0157333](https://null-byte.wonderhowto.com/how-to/hack-like-pro-create-virtual-hacking-lab-0157333)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Null Byte，“如何创建一个虚拟黑客实验室”，[https://null-byte.wonderhowto.com/how-to/hack-like-pro-create-virtual-hacking-lab-0157333](https://null-byte.wonderhowto.com/how-to/hack-like-pro-create-virtual-hacking-lab-0157333)
- en: Hacking Articles, “Web Application Pentest Lab Setup on AWS,” [https://www.hackingarticles.in/web-application-pentest-lab-setup-on-aws](https://www.hackingarticles.in/web-application-pentest-lab-setup-on-aws)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hacking Articles，“在 AWS 上设置 Web 应用渗透测试实验室”，[https://www.hackingarticles.in/web-application-pentest-lab-setup-on-aws](https://www.hackingarticles.in/web-application-pentest-lab-setup-on-aws)
- en: Use these guides to set up your Ubuntu machine.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些指南来设置你的 Ubuntu 机器。
- en: Installing Docker and Docker Compose
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker 和 Docker Compose
- en: Once you’ve configured your host operating system, you can use Docker to host
    the vulnerable applications in the form of containers. Docker and Docker Compose
    will make it incredibly easy to download the vulnerable apps and launch them within
    a few minutes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置好了主机操作系统，就可以使用 Docker 将漏洞应用托管在容器中。Docker 和 Docker Compose 使得下载这些漏洞应用并在几分钟内启动它们变得异常简单。
- en: 'Follow the official instructions at [https://docs.docker.com/engine/install/ubuntu](https://docs.docker.com/engine/install/ubuntu)
    to install Docker on your Linux host. You’ll know that Docker Engine is installed
    correctly when you can run the hello-world image:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 按照官方指南 [https://docs.docker.com/engine/install/ubuntu](https://docs.docker.com/engine/install/ubuntu)
    在你的 Linux 主机上安装 Docker。你可以通过运行 hello-world 镜像来确认 Docker Engine 是否正确安装：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you can run the hello-world container, you have successfully set up Docker.
    Congrats! Otherwise, you can troubleshoot using the official Docker instructions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能成功运行 hello-world 容器，说明你已经成功设置了 Docker，恭喜！否则，你可以按照官方 Docker 指南进行故障排查。
- en: Docker Compose is a tool that will enable you to run multiple containers from
    a YAML file. Depending on your hacking lab setup, Docker Compose could allow you
    to launch your vulnerable systems with the simple command `docker-compose up`.
    The official documentation for installing Docker Compose can be found at [https://docs.docker.com/compose/install](https://docs.docker.com/compose/install).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 是一个工具，可以让你通过一个 YAML 文件运行多个容器。根据你的实验室设置，Docker Compose 允许你通过简单的命令
    `docker-compose up` 启动你的漏洞系统。关于安装 Docker Compose 的官方文档可以在 [https://docs.docker.com/compose/install](https://docs.docker.com/compose/install)
    查阅。
- en: Installing Vulnerable Applications
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装漏洞应用
- en: 'I have selected these vulnerable applications to run in the lab: OWASP crAPI,
    OWASP Juice Shop, OWASP DevSlop’s Pixi, and Damn Vulnerable GraphQL. These apps
    will help you develop essential API hacking skills such as discovering APIs, fuzzing,
    configuring parameters, testing authentication, discovering OWASP API Security
    Top 10 vulnerabilities, and attacking discovered vulnerabilities. This section
    describes how to set up these applications.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了以下这些漏洞应用程序在实验室中运行：OWASP crAPI、OWASP Juice Shop、OWASP DevSlop 的 Pixi 和 Damn
    Vulnerable GraphQL。这些应用将帮助你培养基本的 API 黑客技能，例如发现 API、模糊测试、配置参数、测试认证、发现 OWASP API
    安全 Top 10 漏洞，并攻击发现的漏洞。本节将介绍如何设置这些应用。
- en: The completely ridiculous API (crAPI)
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全荒谬的 API (crAPI)
- en: The completely ridiculous API, shown in [Figure 5-1](#figure5-1), is the vulnerable
    API developed and released by the OWASP API Security Project. As noted in the
    acknowledgments of this book, this project was led by Inon Shkedy, Erez Yalon,
    and Paulo Silva. The crAPI vulnerable API was designed to demonstrate the most
    critical API vulnerabilities. We will focus on hacking crAPI during most of our
    labs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 完全荒谬的 API，如 [图 5-1](#figure5-1) 所示，是由 OWASP API 安全项目开发并发布的漏洞 API。如本书致谢部分所述，该项目由
    Inon Shkedy、Erez Yalon 和 Paulo Silva 主导。crAPI 漏洞 API 的设计旨在展示最关键的 API 漏洞。我们将在大部分实验中专注于黑客攻击
    crAPI。
- en: '![Screenshot of the crAPI web interface showing an online shop page with two
    items for sale and an available balance of $100](image_fi/502444c05/F05001.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![crAPI 网络界面的截图，展示了一个在线商店页面，页面上有两个商品在售，且账户余额为 $100](image_fi/502444c05/F05001.png)'
- en: 'Figure 5-1: The crAPI shop'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：crAPI 商店
- en: 'Download and deploy crAPI ([https://github.com/OWASP/crAPI](https://github.com/OWASP/crAPI))
    by running the following commands from an Ubuntu terminal:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 Ubuntu 终端中运行以下命令，下载并部署 crAPI ([https://github.com/OWASP/crAPI](https://github.com/OWASP/crAPI))：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The crAPI application contains a modern web application, an API, and a Mail
    Hog email server. In this application, you can shop for vehicle parts, use the
    community chat feature, and link a vehicle to find local repair shops. The crAPI
    app was built with realistic implementations of the OWASP API Security Top 10
    vulnerabilities. You will learn quite a bit from this one.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: crAPI 应用包含一个现代化的 web 应用，一个 API 和一个 Mail Hog 邮件服务器。在这个应用中，你可以购买汽车配件、使用社区聊天功能，并将车辆与当地修理店进行关联。crAPI
    应用使用了 OWASP API 安全 Top 10 漏洞的真实实现，你将从中学到很多东西。
- en: OWASP DevSlop’s Pixi
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OWASP DevSlop 的 Pixi
- en: Pixi is a MongoDB, Express.js, Angular, Node (MEAN) stack web application that
    was designed with deliberately vulnerable APIs (see [Figure 5-2](#figure5-2)).
    It was created at OWASP DevSlop, an OWASP incubator project that highlights DevOps-related
    mistakes, by Nicole Becher, Nancy Gariché, Mordecai Kraushar, and Tanya Janca.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Pixi 是一个基于 MongoDB、Express.js、Angular、Node (MEAN) 技术栈的 Web 应用程序，设计时故意采用了易受攻击的
    API（参见 [图 5-2](#figure5-2)）。它是在 OWASP DevSlop 项目中创建的，这是一个展示与 DevOps 相关错误的 OWASP
    孵化项目，由 Nicole Becher、Nancy Gariché、Mordecai Kraushar 和 Tanya Janca 开发。
- en: '![Screenshot of Pixi’s login interface, with email and password fields](image_fi/502444c05/F05002.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Pixi 登录界面的截图，包含电子邮件和密码字段](image_fi/502444c05/F05002.png)'
- en: 'Figure 5-2: The Pixi landing page'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2：Pixi 登录页面
- en: You can think of the Pixi application as a social media platform with a virtual
    payment system. As an attacker, you’ll find Pixi’s user information, administrative
    functionality, and payment system especially interesting.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Pixi 应用程序看作是一个具有虚拟支付系统的社交媒体平台。作为攻击者，你会发现 Pixi 的用户信息、管理功能和支付系统特别有趣。
- en: 'Another great feature of Pixi is that it is very easy to get up and running.
    Run the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Pixi 的另一个优点是它非常容易启动和运行。运行以下命令：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then use a browser and visit *http://localhost:8000* to see the landing page.If
    Docker and Docker Compose have been set up, as described previously in this chapter,
    launching Pixi should really be as easy as that.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用浏览器访问 *http://localhost:8000* 查看登录页面。如果之前按照本章的描述设置了 Docker 和 Docker Compose，那么启动
    Pixi 应该就这么简单。
- en: OWASP Juice Shop
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OWASP Juice Shop
- en: OWASP Juice Shop, shown in [Figure 5-3](#figure5-3), is an OWASP flagship project
    created by Björn Kimminich. It’s designed to include vulnerabilities from both
    the OWASP Top 10 and OWASP API Security Top 10\. One awesome feature found in
    Juice Shop is that it tracks your hacking progress and includes a hidden scoreboard.
    Juice Shop was built using Node.js, Express, and Angular. It is a JavaScript application
    powered by REST APIs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP Juice Shop，如 [图 5-3](#figure5-3) 所示，是一个由 Björn Kimminich 创建的 OWASP 旗舰项目。它的设计包含了
    OWASP Top 10 和 OWASP API 安全 Top 10 中的漏洞。Juice Shop 的一个很棒的特点是它会跟踪你的黑客进展，并包含一个隐藏的得分板。Juice
    Shop 是使用 Node.js、Express 和 Angular 构建的，它是一个由 REST API 驱动的 JavaScript 应用程序。
- en: '![Screenshot of the OWASP Juice Shop web page with four items for sale: apple
    juice, apple pomace, banana juice, and carrot juice](image_fi/502444c05/F05003.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![OWASP Juice Shop 网页截图，显示四个待售商品：苹果汁、苹果渣、香蕉汁和胡萝卜汁](image_fi/502444c05/F05003.png)'
- en: 'Figure 5-3: The OWASP Juice Shop'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3：OWASP Juice Shop
- en: 'Of all the applications we’ll install, Juice Shop is currently the most supported,
    with over 70 contributors. To download and launch Juice Shop, run the following
    commands:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将安装的所有应用程序中，Juice Shop 是目前得到最多支持的，拥有超过 70 名贡献者。要下载并启动 Juice Shop，请运行以下命令：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Juice Shop and Damn Vulnerable GraphQL Application (DVGA) both run over port
    3000 by default. To avoid conflict, the `-p 80:3000` argument in the `docker-run`
    command sets Juice Shop up to run over port 80 instead.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Juice Shop 和 Damn Vulnerable GraphQL Application (DVGA) 默认都运行在 3000 端口。为了避免冲突，`-p
    80:3000` 参数会将 Juice Shop 配置为通过 80 端口运行。
- en: To access Juice Shop, browse to *http://localhost*. (On macOS and Windows, browse
    to *http://192.168.99.100* if you are using Docker Machine instead of the native
    Docker installation.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Juice Shop，浏览至 *http://localhost*。（在 macOS 和 Windows 上，如果你使用的是 Docker Machine
    而非本地 Docker 安装，则浏览至 *http://192.168.99.100*。）
- en: Damn Vulnerable GraphQL Application
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Damn Vulnerable GraphQL Application
- en: DVGA is a deliberately vulnerable GraphQL application developed by Dolev Farhi
    and Connor McKinnon. I’m including DVGA in this lab because of GraphQL’s increasing
    popularity and adoption by organizations such as Facebook, Netflix, AWS, and IBM.
    Additionally, you may be surprised by how often a GraphQL integrated development
    environment (IDE) is exposed for all to use. GraphiQL is one of the more popular
    GraphQL IDEs you will come across. Understanding how to take advantage of the
    GraphiQL IDE will prepare you to interact with other GraphQL APIs with or without
    a friendly user interface (see [Figure 5-4](#figure5-4)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: DVGA 是一个故意设计为易受攻击的 GraphQL 应用程序，由 Dolev Farhi 和 Connor McKinnon 开发。我将 DVGA 纳入本实验室，因为
    GraphQL 在 Facebook、Netflix、AWS 和 IBM 等组织中的普及和应用日益增加。此外，你可能会对 GraphQL 集成开发环境（IDE）被公开供所有人使用的频繁程度感到惊讶。GraphiQL
    是你会遇到的较为流行的 GraphQL IDE 之一。了解如何利用 GraphiQL IDE 将帮助你与其他 GraphQL API 进行交互，无论它们是否有友好的用户界面（参见
    [图 5-4](#figure5-4)）。
- en: '![Screenshot of the GraphiQL IDE](image_fi/502444c05/F05004.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![GraphiQL IDE 的截图](image_fi/502444c05/F05004.png)'
- en: 'Figure 5-4: The GraphiQL IDE web page hosted on port 5000'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4：托管在 5000 端口上的 GraphiQL IDE 网页
- en: 'To download and launch DVGA, run the following commands from your Ubuntu host
    terminal:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载并启动 DVGA，请从 Ubuntu 主机终端运行以下命令：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To access it, use a browser and visit *http://localhost:5000*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问它，请使用浏览器并访问 *http://localhost:5000*。
- en: Adding Other Vulnerable Apps
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加其他漏洞应用
- en: If you are interested in an additional challenge, you can add other machines
    to your API hacking lab. GitHub is a great source of deliberately vulnerable APIs
    to bolster your lab. [Table 5-1](#table5-1) lists a few more systems with vulnerable
    APIs you can easily clone from GitHub.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对额外的挑战感兴趣，可以将其他机器添加到你的 API 黑客实验室中。GitHub 是一个很好的来源，提供了故意存在漏洞的 API 来增强你的实验室。[表
    5-1](#table5-1) 列出了几个可以轻松从 GitHub 克隆的带有漏洞的系统。
- en: 'Table 5-1: Additional Systems with Vulnerable APIs'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-1：其他带有漏洞 API 的系统
- en: '| **Name** | **Contributor** | **GitHub URL** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **贡献者** | **GitHub 链接** |'
- en: '| --- | --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| VAmPI | Erev0s | [https://github.com/erev0s/VAmPI](https://github.com/erev0s/VAmPI)
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| VAmPI | Erev0s | [https://github.com/erev0s/VAmPI](https://github.com/erev0s/VAmPI)
    |'
- en: '| DVWS-node | Snoopysecurity | [https://github.com/snoopysecurity/dvws-node](https://github.com/snoopysecurity/dvws-node)
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| DVWS-node | Snoopysecurity | [https://github.com/snoopysecurity/dvws-node](https://github.com/snoopysecurity/dvws-node)
    |'
- en: '| DamnVulnerable MicroServices | ne0z | [https://github.com/ne0z/DamnVulnerableMicroServices](https://github.com/ne0z/DamnVulnerableMicroServices)
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| DamnVulnerable MicroServices | ne0z | [https://github.com/ne0z/DamnVulnerableMicroServices](https://github.com/ne0z/DamnVulnerableMicroServices)
    |'
- en: '| Node-API-goat | Layro01 | [https://github.com/layro01/node-api-goat](https://github.com/layro01/node-api-goat)
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| Node-API-goat | Layro01 | [https://github.com/layro01/node-api-goat](https://github.com/layro01/node-api-goat)
    |'
- en: '| Vulnerable GraphQL API | AidanNoll | [https://github.com/CarveSystems/vulnerable-graphql-api](https://github.com/CarveSystems/vulnerable-graphql-api)
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 漏洞 GraphQL API | AidanNoll | [https://github.com/CarveSystems/vulnerable-graphql-api](https://github.com/CarveSystems/vulnerable-graphql-api)
    |'
- en: '| Generic-University | InsiderPhD | [https://github.com/InsiderPhD/Generic-University](https://github.com/InsiderPhD/Generic-University)
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| Generic-University | InsiderPhD | [https://github.com/InsiderPhD/Generic-University](https://github.com/InsiderPhD/Generic-University)
    |'
- en: '| vulnapi | tkisason | [https://github.com/tkisason/vulnapi](https://github.com/tkisason/vulnapi)
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| vulnapi | tkisason | [https://github.com/tkisason/vulnapi](https://github.com/tkisason/vulnapi)
    |'
- en: Hacking APIs on TryHackMe and HackTheBox
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 TryHackMe 和 HackTheBox 上黑客攻击 API
- en: 'TryHackMe ([https://tryhackme.com](https://tryhackme.com)) and HackTheBox ([https://www.hackthebox.com](https://www.hackthebox.com))
    are web platforms that allow you to hack vulnerable machines, participate in capture-the-flag
    (CTF) competitions, solve hacking challenges, and climb hacking leaderboards.
    TryHackMe has some free content and much more content for a monthly subscription
    fee. You can deploy its prebuilt hacking machines over a web browser and attack
    them. It includes several great machines with vulnerable APIs:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: TryHackMe ([https://tryhackme.com](https://tryhackme.com)) 和 HackTheBox ([https://www.hackthebox.com](https://www.hackthebox.com))
    是允许你攻击漏洞机器、参加夺旗（CTF）比赛、解决黑客挑战并在黑客排行榜上攀升的网页平台。TryHackMe 提供了一些免费的内容，并且通过月度订阅可以解锁更多内容。你可以通过浏览器部署其预构建的黑客机器并进行攻击。它包括几台带有漏洞
    API 的优秀机器：
- en: Bookstore (free)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bookstore（免费）
- en: Carpe Diem 1 (free)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Carpe Diem 1（免费）
- en: 'ZTH: Obscure Web Vulns (paid)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ZTH：隐蔽 Web 漏洞（付费）
- en: 'ZTH: Web2 (paid)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ZTH：Web2（付费）
- en: GraphQL (paid)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL（付费）
- en: These vulnerable TryHackMe machines cover many of the basic approaches to hacking
    REST APIs, GraphQL APIs, and common API authentication mechanisms. If you’re new
    to hacking, TryHackMe has made deploying an attacking machine as simple as clicking
    Start Attack Box. Within a few minutes, you’ll have a browser-based attacking
    machine with many of the tools we will be using throughout this book.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些脆弱的 TryHackMe 机器涵盖了许多黑客攻击 REST API、GraphQL API 和常见 API 认证机制的基本方法。如果你是黑客新手，TryHackMe
    使得部署攻击机器变得像点击“开始攻击盒子”一样简单。几分钟之内，你将拥有一台基于浏览器的攻击机器，配备本书中将使用的许多工具。
- en: HackTheBox (HTB) also has free content and a subscription model but assumes
    you already have basic hacking skills. For example, HTB does not currently provide
    users with attacking machine instances, so it requires you to come prepared with
    your own attacking machine. In order to use HTB at all, you need to be able to
    take on its challenge and hack its invitation code process to gain entry.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: HackTheBox（HTB）也提供免费的内容和订阅模型，但假设你已经具备了基本的黑客技能。例如，HTB 当前不为用户提供攻击机器实例，因此需要你自己准备攻击机器。为了能够使用
    HTB，你需要能够接受其挑战，并通过破解邀请代码流程进入系统。
- en: The primary difference between the HTB free tier and its paid tier is access
    to vulnerable machines. With free access, you’ll have access to the 20 most recent
    vulnerable machines, which may include an API-related system. However, if you
    want access to HTB’s library of vulnerable machines with API vulnerabilities,
    you will need to pay for a VIP membership that lets you access its retired machines.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: HTB免费套餐与付费套餐的主要区别在于对脆弱机器的访问。通过免费访问，你将能够访问最近的20台脆弱机器，其中可能包括与API相关的系统。然而，如果你想访问HTB的脆弱机器库，尤其是具有API漏洞的机器，你将需要购买VIP会员，才能访问已退役的机器。
- en: The retired machines listed in [Table 5-2](#table5-2) all include aspects of
    API hacking.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表5-2](#table5-2)中列出的退役机器都包括API攻击方面的内容。
- en: 'Table 5-2: Retired Machines with API Hacking Components'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 表5-2：具有API攻击组件的退役机器
- en: '| Craft | Postman | Smasher2 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| Craft | Postman | Smasher2 |'
- en: '| JSON | Node | Help |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| JSON | Node | Help |'
- en: '| PlayerTwo | Luke | Playing with Dirty Socks |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| PlayerTwo | Luke | Playing with Dirty Socks |'
- en: HTB provides one of the best ways to improve your hacking skills and expand
    your hacking lab experience beyond your own firewall. Outside of the HTB machines,
    challenges such as Fuzzy can help you improve critical API hacking skills.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: HTB提供了提升黑客技能并扩展黑客实验室体验的最佳途径之一，超出了你自己防火墙的范围。除了HTB的机器，像Fuzzy这样的挑战可以帮助你提升关键的API攻击技能。
- en: Web platforms like TryHackMe and HackTheBox are great supplements to your hacking
    lab and will help boost your API hacking abilities. When you’re not out hacking
    in the real world, you should keep your skills sharp with CTF competitions like
    these.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 像TryHackMe和HackTheBox这样的网络平台是你黑客实验室的极好补充，并且能帮助提升你的API攻击能力。当你没有在现实世界中进行黑客攻击时，应该通过CTF竞赛来保持技能的锐利。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I guided you through setting up your own set of vulnerable
    applications that you can host in a home lab. As you learn new skills, the applications
    in this lab will serve as a place to practice finding and exploiting API vulnerabilities.
    With these vulnerable apps running in your home lab, you will be able to follow
    along with the tools and techniques used in the following chapters and lab exercises.
    I encourage you to go beyond my recommendations and learn new things on your own
    by expanding or adventuring beyond this API hacking lab.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我带领你设置了自己的一套脆弱应用程序，你可以在家庭实验室中托管这些应用程序。随着你学习新技能，这些应用程序将成为你练习发现和利用API漏洞的场所。通过在家庭实验室中运行这些脆弱应用，你将能够跟随接下来的章节和实验中的工具与技术。我鼓励你超越我的建议，独立探索和学习，通过扩展或冒险，超越这个API攻击实验室。
- en: 'Lab #2: Finding Your Vulnerable APIs'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验室#2：寻找你的脆弱API
- en: Let’s get your fingers on the keyboard. In this lab, we’ll use some basic Kali
    tools to discover and interact with the vulnerable APIs you just set up. We’ll
    search for the Juice Shop lab application on our local network using Netdiscover,
    Nmap, Nikto, and Burp Suite.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始动手操作吧。在这个实验中，我们将使用一些基础的Kali工具来发现并与刚才设置的脆弱API进行交互。我们将使用Netdiscover、Nmap、Nikto和Burp
    Suite在本地网络中搜索Juice Shop实验应用。
- en: 'Before powering up your lab, I recommend getting a sense of what devices can
    be found on your network. Use Netdiscover before starting up the vulnerable lab
    and after you have the lab started:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动实验室之前，我建议先了解一下你的网络中能找到哪些设备。在启动脆弱实验室之前，使用Netdiscover来扫描，等实验室启动后再继续使用：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should see a new IP address appear on the network. Once you’ve discovered
    the vulnerable lab IP, you can use ctrl-C to stop Netdiscover.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在网络上看到一个新的IP地址出现。发现脆弱实验室IP后，你可以使用ctrl-C来停止Netdiscover。
- en: 'Now that you have the IP address of the vulnerable host, find out what services
    and ports are in use on that virtual device with a simple Nmap command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经得到了脆弱主机的IP地址，使用一个简单的Nmap命令来查看该虚拟设备上正在使用的服务和端口：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can see that the targeted IP address has only port 3000 open (which matches
    up with what we’d expect based on our initial setup of Juice Shop). To find out
    more information about the target, we can add the `-sC` and `-sV` flags to our
    scan to run default Nmap scripts and to perform service enumeration:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，目标IP地址仅开放了3000端口（这与我们最初设置Juice Shop时的预期一致）。为了获取更多关于目标的信息，我们可以在扫描时加入`-sC`和`-sV`标志，运行默认的Nmap脚本并进行服务枚举：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By running this command, we learn that HTTP is running over port 3000\. We’ve
    found a web app titled “OWASP Juice Shop.” Now we should be able to use a web
    browser to access Juice Shop by navigating to the URL (see [Figure 5-5](#figure5-5)).
    In my case, the URL is *http://192.168.195.132:3000*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行此命令，我们得知 HTTP 正在 3000 端口上运行。我们找到了一款名为 "OWASP Juice Shop" 的 web 应用。现在，我们应该可以通过
    web 浏览器访问 Juice Shop，只需导航到该 URL（见 [图 5-5](#figure5-5)）。在我的案例中，URL 是 *http://192.168.195.132:3000*。
- en: '![Screenshot of the OWASP Juice Shop welcome page](image_fi/502444c05/F05005.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![OWASP Juice Shop 欢迎页面的截图](image_fi/502444c05/F05005.png)'
- en: 'Figure 5-5: OWASP Juice Shop'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-5：OWASP Juice Shop
- en: 'At this point, you can explore the web application with your web browser, see
    its various features, and find the fine juices of the Juice Shop. In general,
    click things and pay attention to the URLs these clicks generate for signs of
    APIs at work. A typical first step after exploring the web application is to test
    it for vulnerabilities. Use the following Nikto command to scan the web app in
    your lab:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以使用你的网页浏览器浏览该 web 应用，查看它的各种功能，并发现 Juice Shop 中的精华内容。一般来说，点击一些内容并留意这些点击生成的
    URL，以便找出正在工作的 API。探索完 web 应用后，一个典型的第一步是测试它的漏洞。使用以下 Nikto 命令扫描你实验室中的 web 应用：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Nikto highlights some juicy information, such as the *robots.txt* file and a
    valid entry for FTP. However, nothing here reveals that an API is at work.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto 会高亮一些有用的信息，比如 *robots.txt* 文件和有效的 FTP 条目。然而，这里没有任何迹象表明有 API 正在工作。
- en: Since we know that APIs operate beyond the GUI, it makes sense to begin capturing
    web traffic by proxying our traffic through Burp Suite. Make sure to set FoxyProxy
    to your Burp Suite entry and confirm that Burp Suite has the Intercept option
    switched on (see [Figure 5-6](#figure5-6)). Next, refresh the Juice Shop web page.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道 API 在 GUI 之外操作，接下来通过代理我们所有的流量并通过 Burp Suite 捕获网页流量是有意义的。确保将 FoxyProxy
    设置为你的 Burp Suite 入口，并确认 Burp Suite 的拦截选项已打开（见 [图 5-6](#figure5-6)）。接着，刷新 Juice
    Shop 的网页。
- en: '![Screenshot of an HTTP request in Burp Suite](image_fi/502444c05/F05006.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Burp Suite 中 HTTP 请求的截图](image_fi/502444c05/F05006.png)'
- en: 'Figure 5-6: An intercepted Juice Shop HTTP request'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-6：拦截到的 Juice Shop HTTP 请求
- en: Once you’ve intercepted a request with Burp Suite, you should see something
    similar to what’s shown in [Figure 5-6](#figure5-6). However, still no APIs! Next,
    slowly click **Forward** to send one automatically generated request after another
    to the web application and notice how the web browser’s GUI slowly builds.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你用 Burp Suite 拦截到请求，你应该能看到类似于 [图 5-6](#figure5-6) 中所示的内容。然而，仍然没有 API！接下来，慢慢点击
    **Forward** 按钮，将自动生成的请求一个接一个地发送到 web 应用，并注意到网页浏览器的 GUI 是如何逐步构建的。
- en: 'Once you start forwarding requests, you should see the following, indicating
    API endpoints:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始转发请求，你应该看到以下内容，指示 API 端点：
- en: '`GET /rest/admin/application-configuration`'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GET /rest/admin/application-configuration`'
- en: '`GET /api/Challenges/?name=Score%20Board`'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GET /api/Challenges/?name=Score%20Board`'
- en: '`GET /api/Quantitys/`'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GET /api/Quantitys/`'
- en: Nice! This short lab demonstrated how you can search for a vulnerable machine
    in your local network environment. We performed some basic usage of the tools
    we set up in Chapter 4 to help us find one of the vulnerable applications and
    capture some interesting-looking API requests being sent beyond what we can normally
    see in the web browser’s GUI.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！这个简短的实验展示了如何在本地网络环境中搜索一个易受攻击的机器。我们运用了第 4 章中设置的工具来帮助我们找到其中一个易受攻击的应用，并捕获一些看起来很有趣的
    API 请求，这些请求是在我们通常在 web 浏览器的 GUI 中无法看到的。
