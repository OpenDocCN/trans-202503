- en: '**6 Physics Libraries**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*A library implies an act of faith Which generations still in darkness hid
    Sign in their night, in witness of the dawn.*'
  prefs: []
  type: TYPE_NORMAL
- en: —Victor Hugo
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg327_Image_503.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Living root bridges (photo by Arshiya Urveeja Bose)**'
  prefs: []
  type: TYPE_NORMAL
- en: In the Indian state of Meghalaya, the Khasi and Jaiñtia peoples live in areas
    that experience some of the highest rainfall in the world. During the monsoon
    season, floods often make traveling between villages impossible. As a result,
    the ancient tradition of constructing living root bridges emerged. These bridges,
    like the double living root bridge in East Khasi shown here, are created by guiding
    and growing tree roots through bamboo, palm trunks, or steel scaffolding. They
    grow and become stronger as the roots interact with the environment, forming adaptive,
    springlike connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think about what you’ve accomplished so far in this book. You’ve done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learned about concepts from the world of physics (What is a vector? What is
    a force? What is a wave?)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understood the math and algorithms behind those concepts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implemented those algorithms in p5.js with an object-oriented approach, culminating
    in building simulations of autonomous steering agents
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These activities have yielded a set of motion simulations, allowing you to creatively
    define the physics of the worlds you build (whether realistic or fantastical).
    But, of course, you and I aren’t the first or only people to do this. The world
    of computer graphics and programming is full of prewritten code libraries dedicated
    to physics simulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just try searching *open source physics engine* and you could spend the rest
    of your day poring over a host of rich and complex codebases. This begs the question:
    If an existing code library takes care of physics simulation, why should you bother
    learning how to write any of the algorithms yourself? Here’s where the philosophy
    behind this book comes into play. While many libraries provide out-of-the-box
    physics to experiment with (super-awesome, sophisticated, and robust physics at
    that), there are several good reasons for learning the fundamentals from scratch
    before diving into such libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: First, without an understanding of vectors, forces, and trigonometry, it’s easy
    to get lost just reading the documentation of a library, let alone using it. Second,
    even though a library may take care of the math behind the scenes, it won’t necessarily
    simplify your code. A great deal of overhead may be required in understanding
    how a library works and what it expects from you code-wise. Finally, as wonderful
    as a physics engine might be, if you look deep down into your heart, you’ll likely
    see that you seek to create worlds and visualizations that stretch the limits
    of the imagination. A library may be great, but it provides only a limited set
    of features. It’s important to know when to live within those limitations in the
    pursuit of a creative coding project and when those limits will prove to be confining.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is dedicated to examining two open source physics libraries for
    JavaScript: Matter.js (*[https://brm.io/matter-js](https://brm.io/matter-js)*)
    and Toxiclibs.js (*[http://haptic-data.com/toxiclibsjs](http://haptic-data.com/toxiclibsjs)*).
    I don’t mean to imply that these are the only libraries you should use for any
    and all creative coding projects that could benefit from a physics engine (see
    “Other Physics Libraries” on [page 290](ch06.xhtml#common01) for alternatives,
    and check the book’s website for ports of the chapter’s examples to other libraries).
    However, both libraries integrate nicely with p5.js and will allow me to demonstrate
    the fundamental concepts behind physics engines and how they relate to and build
    upon the material I’ve covered so far.'
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the aim of this chapter isn’t to teach you the details of a specific
    physics library, but to provide you with a foundation for working with *any* physics
    library. The skills you acquire here will enable you to navigate and understand
    documentation, opening the door for you to expand your abilities with any library
    you choose.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Use a Physics Library?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’ve made the case for writing your own physics simulations (as you’ve learned
    to do in the previous chapters), but why use a physics library? After all, adding
    any external framework or library to a project introduces complexity and extra
    code. Is that additional overhead worth it? If you just want to simulate a circle
    falling down because of gravity, for example, do you really need to import an
    entire physics engine and learn its API? As the early chapters of this book hopefully
    demonstrated, probably not. Lots of scenarios like this are simple enough for
    you to get by writing the code yourself.
  prefs: []
  type: TYPE_NORMAL
- en: But consider another scenario. What if you want to have 100 circles falling?
    And what if they aren’t circles at all, but rather irregularly shaped polygons?
    And what if you want these polygons to bounce off one another in a realistic manner
    when they collide?
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that while I’ve covered motion and forces in detail, I’ve
    so far skipped over a rather important aspect of physics simulation: **collisions**.
    Let’s pretend for a moment that you aren’t reading a chapter about physics libraries
    and that I’ve decided right now to explain how to handle collisions in a particle
    system. I’d have to cover two distinct algorithms that address these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do I determine if two shapes are colliding (or intersecting)? This is known
    as **collision detection**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do I determine the shapes’ velocities after the collision? This is known
    as **collision resolution**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re working with simple geometric shapes, question 1 isn’t too tough.
    In fact, perhaps you’ve encountered it before. With two circles, for instance,
    you know they’re intersecting if the distance between their centers is less than
    the sum of their radii (see [Figure 6.1](ch06.xhtml#ch6fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg329_Image_504.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Two circles with radii *r*[1] and *r*[2] are colliding if the distance
    between them is less than *r*[1] + *r*[2].'
  prefs: []
  type: TYPE_NORMAL
- en: That’s easy enough, but how about calculating the circles’ velocities after
    the collision? This is where I’m going to stop the discussion. Why, you ask? It’s
    not that understanding the math behind collisions isn’t important or valuable.
    (In fact, I’m including additional examples on the website related to collisions
    without a physics library.) The reason for stopping is that life is short! (Let
    this also be a reason for you to consider going outside and frolicking for a bit
    before sitting down to write your next sketch.) You can’t expect to master every
    detail of physics simulation. And while you might enjoy learning about collision
    resolution for circles, it’s only going to make you want to work with rectangles
    next. And then with strangely shaped polygons. And then curved surfaces. And then
    swinging pendulums colliding with springy springs. And then, and then, and then
    . . .
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating complex features like collisions into a p5.js sketch while still
    having time to spend with friends and family—that’s the reason for this chapter.
    People have spent years developing solutions to these kinds of problems, and beautiful
    JavaScript libraries like Matter.js and Toxiclibs.js are the fruits of those efforts.
    You don’t need to reinvent the proverbial wheel, at least for now.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, if you find yourself describing an idea for a p5.js sketch and
    the word *collisions* comes up, then it’s likely time to learn to use a physics
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/zoom.jpg) **Other Physics Libraries**'
  prefs: []
  type: TYPE_NORMAL
- en: A multitude of other physics libraries are worth exploring alongside this chapter’s
    two case studies, each with unique strengths that may offer advantages in certain
    kinds of projects. In fact, when I first began writing this book, Matter.js didn’t
    exist, so the physics engine I initially used to demonstrate the examples was
    Box2D. It was (and likely still is) the most well-known physics engine of them
    all.
  prefs: []
  type: TYPE_NORMAL
- en: Box2D (*[https://box2d.org](https://box2d.org)*) began as a set of physics tutorials
    written in C++ by Erin Catto for the Game Developers Conference in 2006\. Since
    then, Box2D has evolved into a rich and elaborate open source physics engine.
    It’s been used for countless projects, most notably highly successful games such
    as the award-winning *Crayon Physics* and the runaway hit *Angry Birds*.
  prefs: []
  type: TYPE_NORMAL
- en: 'One important feature of Box2D is that it’s a true physics engine: it knows
    nothing about computer graphics and the world of pixels, and instead does all
    its measurements and calculations in real-world units like meters, kilograms,
    and seconds. It’s just that its “world” (a key term in Box2D) is a 2D plane with
    top, bottom, left, and right edges. You tell it things like “The gravity of the
    world is 9.81 newtons per kilogram, and a circle with a radius of 4 meters and
    a mass of 50 kilograms is located 10 meters above the world’s bottom.” Box2D will
    then tell you things like “One second later, the rectangle is at 5 meters from
    the bottom; two seconds later, it’s 10 meters below,” and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: While this provides for an amazingly accurate and robust physics engine (one
    that’s highly optimized and fast for C++ projects), it also necessitates lots
    of complicated code to translate back and forth between Box2D’s physics world
    and the world you want to draw—the pixel world of the graphics canvas. This creates
    a tremendous burden for the coder. I will, as best I can, continue to maintain
    a set of Box2D-compatible examples for this book (there are several JavaScript
    ports), but I believe the relative simplicity of working with a library like Matter.js
    that is native to JavaScript and uses pixels as the unit of measurement will make
    for a more intuitive and friendly bridge from my p5.js examples.
  prefs: []
  type: TYPE_NORMAL
- en: Another notable library is p5play (*[https://p5play.org](https://p5play.org)*),
    a project initiated by Paolo Pedercini and currently led by Quinton Ashley that
    was specifically designed for game development. It simplifies the creation of
    visual objects—known as sprites—and manages their interactions (namely, collisions
    and overlaps). As you may have guessed from the name, p5play is tailored to work
    seamlessly with p5.js. It uses Box2D under the hood for physics simulation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing the Matter.js Library**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a moment, I’ll turn to working with Matter.js, created by Liam Brummitt in
    2014\. But before you can use an external JavaScript library in a p5.js project,
    you need to import it into your sketch. As you’re already quite aware, I’m using
    the official p5.js web editor for developing and sharing this book’s code examples.
    The easiest way to add a library is to edit the *index.html* file that’s part
    of every new p5.js sketch created in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: To do that, first expand the file navigation bar on the left-hand side of the
    editor and select *index.html*, as shown in [Figure 6.2](ch06.xhtml#ch6fig2).
  prefs: []
  type: TYPE_NORMAL
- en: The file includes a series of `<script>` tags inside the HTML tags `<head>`
    and `</head>`. This is how JavaScript libraries are referenced in a p5.js sketch.
    It’s no different from including `sketch.js` or `particle.js` in the page’s `<body>`,
    only here, instead of keeping and editing a copy of the JavaScript code, the library
    is referenced with a URL of a **content delivery network (CDN)**. This is a type
    of server for hosting files. For JavaScript libraries that are used across hundreds
    of thousands of web pages accessed by millions upon millions of users, CDNs need
    to be pretty good at their job of serving up these libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg332_Image_505.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Accessing a sketch’s *index.html* file'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should already see a `<script>` tag referencing the CDN for p5.js (it may
    be a later version by the time you are reading this):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To use Matter.js, add another `<script>` tag referencing its CDN right below
    the one for p5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At the time of this writing, the most recent version of Matter.js is `0.19.0`,
    and that’s what I’ve referenced in this snippet. As Matter.js updates and new
    versions are released, it’s often a good idea to upgrade, but by referencing a
    specific version that you know works with your sketch, you don’t have to worry
    about new features of the library breaking your existing code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Matter.js Overview**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you use Matter.js (or any physics engine) in p5.js, your code ends up
    looking a bit different. Here’s a pseudocode generalization of all the examples
    in [Chapters 1](ch01.xhtml#ch01) through [5](ch05.xhtml#ch05):'
  prefs: []
  type: TYPE_NORMAL
- en: setup()
  prefs: []
  type: TYPE_NORMAL
- en: Create all the objects in the world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: draw()
  prefs: []
  type: TYPE_NORMAL
- en: Calculate all the forces in the world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply all the forces to the objects (*F* = *M* × *A*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the positions of all the objects based on their acceleration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw all the objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By contrast, here’s the pseudocode for a Matter.js example:'
  prefs: []
  type: TYPE_NORMAL
- en: setup()
  prefs: []
  type: TYPE_NORMAL
- en: Create all the objects in the world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: draw()
  prefs: []
  type: TYPE_NORMAL
- en: Draw all the objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This, of course, is the allure of a physics engine. I’ve eliminated all those
    painful steps of figuring out how the objects are moving according to velocity
    and acceleration. Matter.js is going to take care of this for me!
  prefs: []
  type: TYPE_NORMAL
- en: While there will be more details to reveal, the good news is that the simplicity
    of this pseudocode is an accurate reflection of the overall process. In this sense,
    Matter.js is a bit like a magic box. In `setup()`, I’m going to say to Matter,
    “Hello there. Here are all of the things I want in my world.” Then, in `draw()`,
    I’m going to politely ask Matter, “Oh, hello again. If it’s not too much trouble,
    I’d like to draw all of those things in my world. Could you please tell me where
    they are?”
  prefs: []
  type: TYPE_NORMAL
- en: 'The bad news: the process is not quite as simple as the pseudocode might lead
    you to believe. Actually making the stuff that goes into the Matter.js world requires
    several steps related to building and configuring different kinds of shapes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also necessary to learn to speak the language of Matter.js in terms of
    how the various forces and other parameters of the world are configured. Here
    are the core concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Engine:** The entity that manages the physics simulation itself. The engine
    holds on to the world of the simulation as well as various properties indicating
    how the world is updated over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bodies:** The primary elements in the world, corresponding to the physical
    objects being simulated. A body has a position and a velocity. Sound familiar?
    It’s basically another version of the class I’ve been building throughout [Chapters
    1](ch01.xhtml#ch01) through [5](ch05.xhtml#ch05). It also has geometry to define
    its shape. It’s important to note that *body* is a generic term that physics engines
    use to describe a *thing* in the world (similarly to the term *particle*); it
    isn’t related to an anthropomorphic body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composite:** A container that allows for the creation of complex entities
    (made up of multiple bodies). The world itself is an example of a composite, and
    every body created has to be added to the world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constraints:** Act as connections between bodies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the coming sections, I’ll walk through each of these elements in detail,
    building several examples along the way. But first, there’s one other important
    element to briefly discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vector:** Describes an entity with magnitude and direction using x- and y-components,
    defining positions, velocities, and forces in a Matter.js world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This brings us to an important crossroads. Any physics library is fundamentally
    built around vectors, and depending on how you spin it, that’s either a good thing
    or a bad thing. The good part is that you’ve just spent several chapters familiarizing
    yourself with what it means to describe motion and forces with vectors, so there’s
    nothing conceptually new for you to learn. The bad part—the part that makes a
    single tear fall from my eye—is that once you cross this threshold into the brave
    new world of physics libraries, you don’t get to use `p5.Vector` anymore.
  prefs: []
  type: TYPE_NORMAL
- en: It’s been great that p5.js has a built-in vector representation, but anytime
    you use a physics library, you’ll likely discover that it includes its own separate
    vector implementation, designed to be especially compatible with the rest of the
    library’s code. This makes sense. After all, why should Matter.js be expected
    to know about `p5.Vector` objects?
  prefs: []
  type: TYPE_NORMAL
- en: The upshot of all this is that while you won’t have to learn any new concepts,
    you do have to get used to new naming conventions and syntax. To illustrate, I’ll
    show you some now-familiar `p5.Vector` operations alongside the equivalent `Matter.Vector`
    code. First, how do you create a vector?
  prefs: []
  type: TYPE_NORMAL
- en: '| **p5.js** | **Matter.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: What about adding two vectors together?
  prefs: []
  type: TYPE_NORMAL
- en: '| **p5.js** | **Matter.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'That overwrites vector `a` with the result. Here’s how to put the result in
    a separate vector instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **p5.js** | **Matter.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: How about if you want to scale the vector (multiply by a scalar value)?
  prefs: []
  type: TYPE_NORMAL
- en: '| **p5.js** | **Matter.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Magnitude and normalize?
  prefs: []
  type: TYPE_NORMAL
- en: '| **p5.js** | **Matter.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the concepts are the same, but the specifics of the code are
    different. First, every method name is now preceded by `Matter.Vector`, which
    defines the **namespace** of the source code. This is common for JavaScript libraries;
    p5.js is unusual for not consistently using namespaces. For example, to draw a
    circle in p5.js, you call `circle()` rather than `p5.circle()`. The `circle()`
    function lives in the global namespace. This, in my view, is one of the features
    that makes p5.js special in terms of ease of use and beginner friendliness. However,
    it also means that for any code you write with p5.js, you can’t use `circle` as
    a variable name. Namespacing a library protects against these kinds of errors
    and naming conflicts, and it’s why you’ll see everything in Matter.js called with
    the `Matter` prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, unlike p5.js’s static and nonstatic versions of vector methods
    like `add()` and `mult()`, all vector methods in Matter.js are static. If you
    want to change a `Matter.Vector` while operating on it, you can add it as an optional
    argument: `Matter.Vector.add(a, b, a)` adds `a` and `b` and places the result
    in `a` (the third argument). You can also set an existing variable to the newly
    created vector object resulting from a calculation, as in `v = Matter.Vector.mult(v,
    2)`. However, this version still creates a new vector in memory rather than updating
    the old one.'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll cover more of the basics for working with `Matter.Vector` in this chapter,
    but for details, you can find the full documentation on the Matter.js website
    (*[https://brm.io/matter-js](https://brm.io/matter-js)*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Engine**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Many physics libraries include a *world* object to manage everything. The world
    is typically in charge of the coordinate space, keeping a list of all the bodies
    in the simulation, controlling time, and more. In Matter.js, the world is created
    inside an `Engine` object, the main controller of your physics world and simulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg336_Image_506.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the very first line of code creates an `Engine` variable and sets
    it equal to `Matter.Engine`. Here, I’m deciding to point the single keyword `Engine`
    to the `Engine` class namespaced inside Matter.js in order to make my code less
    verbose. This works because I know I won’t be using the word `Engine` for any
    other variables, nor does it conflict with something in p5.js. I’ll be doing this
    with `Vector`, `Bodies`, `Composite`, and more as I continue to build the examples.
    (But while the linked source code will always include all the aliases, I won’t
    always show them in the book text.)
  prefs: []
  type: TYPE_NORMAL
- en: 'When you call `create()` on `Engine`, Matter.js returns a new physics engine
    and world with a default gravity—a vector (0, 1) pointing down. You can change
    this default by accessing the `gravity` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg336_Image_507.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, gravity doesn’t have to be fixed for the duration of the simulation;
    you can adjust the gravity vector while your program is running. You can also
    turn gravity off altogether by setting it to a (0, 0) vector.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/zoom.jpg) **Object Destructuring**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object destructuring** in JavaScript is a technique for extracting properties
    from an object and assigning them to variables. In the case of Matter.js, the
    `Matter` object contains the `Engine` property. Normally, an alias for this property
    can be set with `let Engine = Matter.Engine`, but with destructuring, the alias
    can be created more concisely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Hold on. Did you catch that I snuck in a `const` here? I know I said back in
    [Chapter 0](ch00.xhtml#ch00) that I would use only `let` for variable declarations
    throughout this book. However, working with an external library is a really good
    time to dip your toe in the `const` waters. In JavaScript, `const` is used for
    declaring variables whose values should never be reassigned after initialization.
    In this case, I want to protect myself from accidentally overwriting the `Engine`
    variable later in the code, which would likely break everything!
  prefs: []
  type: TYPE_NORMAL
- en: 'With that out of the way, let’s look at how the destructuring syntax really
    shines when you need to create aliases to multiple properties of the same object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg337_Image_508.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This sets up `Engine` as an alias for `Matter.Engine`, and `Vector` as an alias
    for `Matter.Vector`, all in one statement. I’ll use this technique throughout
    the chapter’s examples.
  prefs: []
  type: TYPE_NORMAL
- en: Once the world is initialized, it’s time to put stuff in it—bodies!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bodies**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **body** is the primary element in the Matter.js world. It’s the equivalent
    of the `Vehicle` (née `Particle`, née `Mover`) class I built in previous chapters—the
    thing that moves around the space and experiences forces. A body can also be static
    (fixed and not moving).
  prefs: []
  type: TYPE_NORMAL
- en: 'Matter.js bodies are created using factory methods found in `Matter.Bodies`,
    with different methods available for creating different kinds of bodies. A **factory
    method** is a function that creates an object. While you’re probably more familiar
    with calling a constructor to create an object—for example, with `new Particle()`—you’ve
    seen factory methods before: `createVector()` is a factory method for creating
    a `p5.Vector` object. Whether an object is created from a constructor or a factory
    method is a matter of style and design choice by a library creator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All the factory methods for creating bodies can be found in the `Matter.Bodies`
    documentation page (*[https://brm.io/matter-js/docs/classes/Bodies.html](https://brm.io/matter-js/docs/classes/Bodies.html)*).
    I’ll start with the `rectangle()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg338_Image_509.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What luck! The `rectangle()` method signature is exactly the same as p5.js’s
    `rect()` function. In this case, however, the method isn’t *drawing* a rectangle
    but rather building the geometry for a `Body` object to store. (Note that calling
    `Bodies.rectangle()` works only if you first establish `Bodies` as an alias to
    `Matter.Bodies`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'A body has now been created with a position and a size, and a reference to
    it is stored in the variable `box`. Bodies have many more properties that affect
    their motion, however. For example, density ultimately determines that body’s
    mass. Friction and restitution (bounciness) affect how the body interacts when
    it comes into contact with other bodies. For most cases, the defaults are sufficient,
    but Matter.js does allow you to specify these properties by passing through an
    additional argument to the factory method in the form of a JavaScript **object
    literal**, a collection of key-value pairs separated by commas and enclosed in
    curly brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg338_Image_510.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each key in the object literal (for example, `friction`) serves as a unique
    identifier, and its value ( `0.5` ) is the data associated with that key. You
    can think of an object literal as a simple dictionary or lookup table—in this
    case, holding the desired settings for a new Matter.js body. Note, however, that
    while the `options` argument is useful for configuring the body, other initial
    conditions, such as linear or angular velocity, can be set via static methods
    of the `Matter.Body` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg338_Image_511.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a body and storing it in a variable isn’t enough. Any body must be
    explicitly added to the world in order for it to be simulated with physics. The
    physics world is a `Composite` object called `world` stored inside the `engine`
    itself. The `box` can be added to that world with the static `add()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg339_Image_512.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This extra step is easy to forget—it’s a mistake I’ve made on countless occasions.
    If you’re ever wondering why one of your objects doesn’t appear or move along
    with the world’s physics, always check that you’ve actually added it to the world!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing what you know about Matter.js so far, fill in the blank in the following
    code that demonstrates how to make a circular body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Render**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once a body is added to the world, Matter.js will always know it’s there, check
    it for collisions, and update its position appropriately, according to any forces
    in the environment. It’ll do all that without you having to lift a finger! But
    how do you draw the body?
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, I’ll show you how to query Matter.js for the position
    of the various bodies in order to render the world with p5.js. The way that works
    is fundamental to being able to control the look of your own animations. This
    is your time to shine: you can be the designer of your world, using your creativity
    and p5.js skills to visualize the bodies, while politely asking Matter.js to compute
    all the physics in the background.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, Matter.js does include a fairly simple and straightforward `Render`
    class, which is incredibly useful for quickly seeing and debugging the world you’ve
    designed. It provides ways to customize the *debug drawing* style, but I find
    the defaults perfectly adequate for quickly double-checking that I’ve configured
    a world correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to call `Matter.Render.create()` (or `Render.create()`, assuming
    an alias). This method expects an object with the desired settings for the renderer,
    which I’ll call `params`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg340_Image_513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that I’m storing a reference to the p5.js canvas in the `canvas` variable.
    This is necessary because I need to tell the renderer to draw in a specific canvas.
    Matter.js doesn’t know about p5.js, so the canvas it’s assigned is a native HTML5
    canvas, stored inside the `elt` property of a p5.js canvas object. The engine
    is the `engine` I previously created. The Matter.js default canvas dimensions
    are 800×600, so if I prefer a different size, I need to configure an `options`
    property with `width` and `height`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once I have a `render` object, I need to tell Matter.js to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg340_Image_514.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One more critical order of business remains: physics engines must be told to
    step forward in time. Since I’m using the built-in renderer, I can also use the
    built-in runner, which runs the engine at a default frame rate of 60 frames per
    second. The runner is also customizable, but the details aren’t terribly important
    since the goal here is to move toward using p5.js’s `draw()` loop instead (coming
    in the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg340_Image_515.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the Matter.js code all together, with an added `ground` object—another
    rectangular body. Note the use of the `{ isStatic: true }` option in the creation
    of the ground body to ensure that it remains in a fixed position. I’ll cover more
    details about static bodies in “Static Matter.js Bodies” on [page 307](ch06.xhtml#ch00lev1sec59).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg341_Image_516.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There’s no `draw()` function here, and all the variables are local to `setup()`.
    In fact, I’m not using any p5.js capabilities (beyond injecting a canvas onto
    the page). This is exactly what I want to tackle next!
  prefs: []
  type: TYPE_NORMAL
- en: '**Matter.js with p5.js**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Matter.js keeps a list of all bodies that exist in the world, and as you’ve
    just seen, it can handle drawing and animating them with the `Render` and `Runner`
    objects. (That list, incidentally, is stored in `engine.world.bodies`.) What I’d
    like to show you now, however, is a technique for keeping your own list(s) of
    Matter.js bodies, so you can draw them with p5.js.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, this approach may add redundancy and sacrifice a small amount of efficiency,
    but it more than makes up for that with ease of use and customization. With this
    methodology, you’ll be able to code as you’re accustomed to in p5.js, keeping
    track of which bodies are which and drawing them appropriately. Consider the file
    structure of the sketch shown in [Figure 6.3](ch06.xhtml#ch6fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg342_Image_517.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: The file structure of a typical p5.js sketch'
  prefs: []
  type: TYPE_NORMAL
- en: 'Structurally, this looks like just another p5.js sketch. There’s a main *sketch.js*
    file, as well as *box.js*. This sort of extra file is where I’d typically declare
    a class needed for the sketch—in this case, a `Box` class describing a rectangular
    body in the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg342_Image_518.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now I’ll write a *sketch.js* file that creates a new `Box` whenever the mouse
    is clicked and stores all the `Box` objects in an array. (This is the same approach
    I took in the particle system examples from [Chapter 4](ch04.xhtml#ch04).)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg343_Image_520.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right now, this sketch draws fixed boxes to the screen. Here’s the challenge:
    How can I instead draw boxes that experience physics (calculated with Matter.js)
    as soon as they appear, while changing the code as little as possible?'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll need three steps to accomplish this goal.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Add Matter.js to the p5.js Sketch**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As it stands, the sketch makes no reference to Matter.js. That clearly needs
    to change. Fortunately, this part isn’t too tough: I’ve already demonstrated all
    the elements needed to build a Matter.js world. (And don’t forget, in order for
    this to work, make sure the library is imported in *index.html.*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I need to add aliases for the necessary Matter.js classes and create
    an `Engine` object in `setup()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg344_Image_522.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, in `draw()`, I need to make sure to call one critical Matter.js method,
    `Engine.update()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg344_Image_523.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `Engine.update()` method advances the physics world one step forward in
    time. Calling it inside the p5.js `draw()` loop ensures that the physics will
    update at every frame of the animation. This mechanism takes the place of the
    built-in Matter.js `Runner` object I used in [Example 6.1](ch06.xhtml#ch6ex1).
    The `draw()` loop is the runner now!
  prefs: []
  type: TYPE_NORMAL
- en: Internally, when `Engine.update()` is called, Matter.js sweeps through the world,
    looks at all the bodies in it, and figures out what to do with them. Just calling
    `Engine.update()` on its own moves the world forward with default settings. However,
    as with `Render`, these settings are customizable and documented in the Matter.js
    documentation (*[https://brm.io/matter-js/docs/classes/Engine.html#method_update](https://brm.io/matter-js/docs/classes/Engine.html#method_update)*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Link Every Box Object with a Matter.js Body**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I’ve set up my Matter.js world; now I need to link each `Box` object in my p5.js
    sketch with a body in that world. The original `Box` class includes variables
    for position and width. What I now want to say is “I hereby relinquish command
    of this object’s position to Matter.js. I no longer need to keep track of anything
    related to position, velocity, or acceleration. Instead, I need to keep track
    of only the existence of a Matter.js body and have faith that the physics engine
    will do the rest.”
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg345_Image_524.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I don’t need `this.x` and `this.y` position variables anymore. The `Box` constructor
    takes in the starting x- and y-coordinates, passes them along to `Bodies.rectangle()`
    to create a new Matter.js body, and then forgets about them. As you’ll see, the
    body itself will keep track of its position behind the scenes. The body could
    technically keep track of its dimensions as well, but since Matter.js stores them
    as a list of vertices, it’s a bit more convenient to hold onto the width of the
    square in the `this.w` variable for when it comes time to draw the box.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3: Draw the Body**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Almost there. Before I introduced Matter.js into the sketch, drawing `Box`
    was easy. The object’s position was stored in the variables `this.x` and `this.y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg345_Image_525.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that Matter.js manages the object’s position, I can no longer use my own
    `x` and `y` variables to draw the shape. But fear not! The `Box` object has a
    reference to the Matter.js body associated with it, and that body knows its own
    position. All I need to do is politely ask the body, “Pardon me, where are you
    located?”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Just knowing the position of a body isn’t enough, however. The body is a square,
    so I also need to know its angle of rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once I have the position and angle, I can render the object by using the native
    p5.js `translate()`, `rotate()`, and `square()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg346_Image_526.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It’s important to note here that if you delete a `Box` object from the `boxes`
    array—perhaps when it moves outside the boundaries of the canvas or reaches the
    end of its life span, as demonstrated in [Chapter 4](ch04.xhtml#ch04)—you must
    also explicitly remove the body associated with that `Box` object from the Matter.js
    world. This can be done with a `removeBody()` method on the `Box` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg346_Image_527.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In `draw()`, you would then iterate over the array in reverse, just as in the
    particle system examples, and call both `removeBody()` and `splice()` to delete
    the object from the Matter.js world and your array of boxes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.2**'
  prefs: []
  type: TYPE_NORMAL
- en: Start with the code for [Example 6.2](ch06.xhtml#ch6ex2) and, using the methodology
    outlined in this chapter, add the code to implement Matter.js physics. Delete
    bodies that have left the canvas. The result should appear as in this image. Feel
    free to be creative in the way you draw the boxes!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg347_Image_528.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Static Matter.js Bodies**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the example I just created, the `Box` objects appear at the mouse position
    and fall downward because of the default gravity force. What if I want to add
    immovable boundaries to the world that will block the path of the falling `Box`
    objects? Matter.js makes this easy with the `isStatic` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg347_Image_529.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I’m still creating a body with the `Bodies.rectangle()` factory method, but
    setting the `isStatic` property ensures that the body will never move. I’ll incorporate
    this feature into the solution to [Exercise 6.2](ch06.xhtml#ch6exe2) by creating
    a separate `Boundary` class that links a p5.js rectangle to a static Matter.js
    body. For variety, I’ll also randomize the dimensions of each falling box. (See
    the online code for the changes to the `Box` class.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg348_Image_530.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Static bodies don’t incorporate material properties like `restitution` or `friction`.
    Make sure you set those in the dynamic bodies in your world.
  prefs: []
  type: TYPE_NORMAL
- en: '**Polygons and Groups of Shapes**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that I’ve demonstrated how easy it is to use a primitive shape like a rectangle
    or circle with Matter.js, let’s imagine that you want to create a more interesting
    body, such as the abstract character in [Figure 6.4](ch06.xhtml#ch6fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg349_Image_531.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: A compound body made up of multiple shapes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two strategies can be used to make such complex forms. The generic `Bodies.polygon()`
    method can create any regular polygon (pentagon, hexagon, and so on). Additionally,
    `Bodies.trapezoid()` makes a quadrilateral with at least one pair of parallel
    sides:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg349_Image_532.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A more general-purpose option is `Bodies.fromVertices()`. It builds a shape
    from an array of vectors, treating them as a series of connected vertices. I’ll
    encapsulate this logic in a `CustomShape` class.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg349_Image_533.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When creating a custom polygon in Matter.js, you must remember two important
    details. First, the vertices must be specified in clockwise order. For instance,
    [Figure 6.5](ch06.xhtml#ch6fig5) shows the five vertices used to create the bodies
    in [Example 6.4](ch06.xhtml#ch6ex4). Notice that the example added them to the
    `vertices` array in clockwise order from the top left.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg350_Image_535.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Vertices on a custom polygon oriented in clockwise order'
  prefs: []
  type: TYPE_NORMAL
- en: Second, each shape must be convex, not concave. As shown in [Figure 6.6](ch06.xhtml#ch6fig6),
    a **concave** shape has a surface that curves inward, whereas **convex** is the
    opposite. Every internal angle in a convex shape must be 180 degrees or less.
    Matter.js can work with concave shapes, but you need to build them out of multiple
    convex shapes (more about that in a moment).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg351_Image_536.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: A concave shape can be drawn with multiple convex shapes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the shape is built out of custom vertices, you can use p5.js’s `beginShape()`,
    `endShape()`, and `vertex()` functions when it comes time to actually draw the
    body. The `CustomShape` class *could* include an array to store the vertices’
    pixel positions, relative to (0, 0), for drawing purposes. However, it’s best
    to query Matter.js for the positions instead. This way, there’s no need to use
    `translate()` or `rotate()`, since the Matter.js body stores its vertices as absolute
    world positions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg351_Image_537.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Matter.js body stores the array of its vertex positions inside a `vertices`
    property. Notice that I can then use a `for...of` loop to cycle through the vertices
    between `beginShape()` and `endShape()`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.3**'
  prefs: []
  type: TYPE_NORMAL
- en: Using `Bodies.fromVertices()`, create your own polygon design (remember, it
    must be convex). Some possibilities are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg352_Image_538.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A custom shape built from an array of vertices will get you pretty far. However,
    the convex shape requirement does limit the range of possibilities. The good news
    is that you can eliminate this restriction by creating a **compound body** made
    up of multiple shapes! How about creating a delicious lollipop with a thin rectangle
    and a circle on top?
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll start by creating two individual bodies, one rectangle and one circle.
    Then I can join them by putting them in a `parts` array and passing the array
    to `Body.create()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg352_Image_539.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While this does create a compound body by combining two shapes, the code isn’t
    quite right. If you run it, you’ll see that both shapes are centered on the same
    (*x*, *y*) position, as in [Figure 6.7](ch06.xhtml#ch6fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg352_Image_540.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: A rectangle and a circle with the same (*x*, *y*) reference point'
  prefs: []
  type: TYPE_NORMAL
- en: Instead, I need to offset the center of the circle horizontally from the center
    of the rectangle, as in [Figure 6.8](ch06.xhtml#ch6fig8).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg353_Image_541.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: A circle placed relative to a rectangle with a horizontal offset'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll use half the width of the rectangle as the offset, so the circle is centered
    on the edge of the rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg353_Image_542.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Because the lollipop’s body has two parts, drawing it is a bit trickier. I could
    take multiple approaches. For example, I could use the body’s `vertices` array
    and draw the lollipop as a custom shape, much like [Example 6.4](ch06.xhtml#ch6ex4).
    (Every body stores an array of vertices, even if it wasn’t created with the `fromVertices()`
    method.) Since each part of the lollipop is a primitive shape, however, I’d prefer
    to separately translate to each part’s position and rotate by the collective body’s
    angle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg353_Image_543.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before moving on, I want to stress that what you draw in your canvas window
    doesn’t magically experience perfect physics just by the mere act of creating
    Matter.js bodies. The chapter’s examples have worked because I’ve been carefully
    matching the way I’ve drawn each p5.js body with the way I’ve defined the geometry
    of each Matter.js body. If you accidentally draw a shape differently, you won’t
    get an error—not from p5.js or from Matter.js. However, your sketch will look
    odd, and the physics won’t work correctly because the world you’re seeing won’t
    be aligned with the world as Matter.js understands it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate, let me return to [Example 6.5](ch06.xhtml#ch6ex5). A lollipop
    is a compound body consisting of two parts, a rectangle ( `this.part1` ) and a
    circle ( `this.part2` ). I’ve been drawing each lollipop by getting the positions
    for the two parts separately: `this.part1.position` and `this.part2.position`.
    However, the overall compound body also has a position, `this.body.position`.
    It would be tempting to use that as the position for drawing the rectangle, and
    to figure out the circle’s position manually using an offset. After all, that’s
    how I conceived of the compound shape to begin with (look back at [Figure 6.8](ch06.xhtml#ch6fig8)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg354_Image_545.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 6.9](ch06.xhtml#ch6fig9) shows the result of this change.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg355_Image_546.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: What happens when the shapes are drawn differently from their Matter.js
    configurations'
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, this new version may look fine, but if you look closer, the
    collisions are off and the shapes overlap in odd ways. This isn’t because the
    physics is broken; it’s because I’m not communicating properly between p5.js and
    Matter.js. It turns out the overall body position isn’t the center of the rectangle,
    but rather the center of mass between the rectangle and the circle. Matter.js
    is calculating the physics and managing collisions as before, but I’m drawing
    each body in the wrong place! (In the online version, you can toggle the correct
    and incorrect renderings by clicking the mouse.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.4**'
  prefs: []
  type: TYPE_NORMAL
- en: Make your own little alien being by using multiple shapes attached to a single
    body. Remember, you aren’t limited to using the basic shape-drawing functions
    in p5.js; you can use images and colors, add hair with lines, and more. Think
    of the Matter.js shapes as skeletons for your original fantastical design!
  prefs: []
  type: TYPE_NORMAL
- en: '**Matter.js Constraints**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A Matter.js **constraint** is a mechanism to connect one body to another, enabling
    simulations of swinging pendulums, elastic bridges, squishy characters, wheels
    spinning on an axle, and more. Constraints have three types: distance constraints
    and revolute constraints, both managed through the `Constraint` class, and mouse
    constraints, managed through the `MouseConstraint` class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distance Constraints**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A **distance constraint** is a connection of fixed length between two bodies,
    similar to a spring force connecting two shapes in [Chapter 3](ch03.xhtml#ch03).
    The constraint is attached to each body at a specified **anchor**, a point relative
    to the body’s center (see [Figure 6.10](ch06.xhtml#ch6fig10)). Depending on the
    constraint’s stiffness property, the “fixed” length can exhibit variability, much
    as a spring can be more or less rigid.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg356_Image_547.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: A constraint is a connection between two bodies at an anchor point
    for each body.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining a constraint uses a similar methodology as creating bodies, only you
    need to have two bodies ready to go. Let’s assume that two `Particle` objects
    each store a reference to a Matter.js body in a property called `body`. I’ll call
    them `particleA` and `particleB`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'I want to create a constraint between these particles. For that, I need to
    define a series of options that determine the constraint’s behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bodyA`: The first body that the constraint connects, establishing one end
    of the constraint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bodyB`: The second body that the constraint connects, forming the other end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pointA`: The position, relative to `bodyA`, where the constraint is anchored
    to the first body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pointB`: The position, relative to `bodyB`, where the constraint is anchored
    to the second body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length`: The resting or target length of the constraint. The constraint will
    attempt to maintain this length during the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stiffness`: A value from 0 to 1 that represents the rigidity of the constraint,
    with 1 being fully rigid and 0 being completely soft.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These settings get packaged up in an object literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Technically, the only required options are `bodyA` and `bodyB`, the two bodies
    connected by the constraint. If you don’t specify any additional options, Matter.js
    will choose defaults for the other properties. For example, it will use `(0, 0)`
    for each relative anchor point (the body’s center), set the `length` to the current
    distance between the bodies, and assign a default `stiffness` of `0.7`. Two other
    notable options I didn’t include are `damping` and `angularStiffness`. The `damping`
    option affects the constraint’s resistance to motion, with higher values causing
    the constraint to lose energy more quickly. The `angularStiffness` option controls
    the rigidity of the constraint’s angular motion, with higher values resulting
    in less angular flexibility between the bodies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the options are configured, the constraint can be created. As usual, this
    assumes another alias—`Constraint` is equal to `Matter.Constraint`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg357_Image_548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I can include a constraint to a class to encapsulate and manage the relationships
    among multiple bodies. Here’s an example of a class that represents a swinging
    pendulum (mirroring [Example 3.11](ch03.xhtml#ch3ex11) from [Chapter 3](ch03.xhtml#ch03)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg358_Image_550.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Example 6.6](ch06.xhtml#ch6ex6) uses a default `stiffness` of `0.7`. If you
    try a lower value, the pendulum will appear more like a soft spring.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.5**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simulation of a bridge by using constraints to connect a sequence of
    circles (or rectangles) as shown in the following image. Use the `isStatic` property
    to lock the endpoints in place. Experiment with different values to make the bridge
    more or less springy. The joints have no physical geometry, so in order for your
    bridge not to have holes, spacing between the nodes will be important.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg359_Image_551.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Revolute Constraints**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another kind of connection between bodies common to physics engines is a **revolute
    joint**. This type of constraint connects two bodies at a common anchor point,
    also known as a **hinge** (see [Figure 6.11](ch06.xhtml#ch6fig11)). While Matter.js
    doesn’t have a separate revolute constraint, you can make one with a regular `Constraint`
    of length 0\. This way, the bodies can rotate around a common anchor point.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg359_Image_552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: A revolute constraint is a connection between two bodies at a
    single anchor point, or hinge.'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the connected bodies. For a first example, I’d like
    to create a spinning rectangle (akin to a propeller or windmill) in a fixed position.
    For this case, I need only one body connected to a point. This simplifies the
    code since I don’t have to worry about collisions between the two bodies connected
    at a hinge.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg360_Image_553.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, I can create the constraint. With a `length` of `0`, it needs a `stiffness`
    of `1`; otherwise, the constraint may not be stable enough to keep the body connected
    at the anchor point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg360_Image_554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Putting the code together, I’ll write a sketch with a class called `Windmill`
    representing a rotating body. The sketch also includes a `Particle` class for
    dropping particles onto the windmill.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg360_Image_555.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice the line in this example representing the windmill stand. It isn’t part
    of the Matter.js physics world, and I never created a body for it. This illustrates
    an important point about working with a physics engine alongside p5.js: you can
    add elements to the canvas that contribute to the visual design without affecting
    the physics, as long as you don’t need those elements to participate in the simulation
    itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.6**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a vehicle that has revolute joints for its wheels. Consider the size
    and positioning of the wheels. How does changing the `stiffness` property affect
    their movement?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg362_Image_557.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Mouse Constraints**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before I introduce the `MouseConstraint` class, consider the following question:
    How do you set the position of a Matter.js body to the mouse position? More to
    the point, why would you need a constraint for this? After all, you have access
    to the body’s position, and you have access to the mouse’s position. What’s wrong
    with assigning one to the other?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: While this code will move the body, it will also have the unfortunate result
    of breaking the physics. Imagine you’ve built a teleportation machine that allows
    you to move instantly from your bedroom to your kitchen (good for late-night snacking).
    That’s easy enough to imagine, but now go ahead and rewrite Newton’s laws of motion
    to account for the possibility of teleportation. Not so easy anymore, is it?
  prefs: []
  type: TYPE_NORMAL
- en: Matter.js has the same problem. If you manually assign the position of a body,
    it’s like saying, “Teleport that body,” and Matter.js no longer knows how to compute
    the physics properly. However, Matter.js *does* allow you to tie a string around
    your waist and have a friend of yours stand in the kitchen and drag you there.
    Replace your friend with your mouse, and that’s what a mouse constraint is.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that the moment you click the mouse over a shape, the mouse attaches
    to that body with a string. Now you can move the mouse around, and it will drag
    the body around with it until you release the mouse. This works in a similar fashion
    as a revolute joint in that you can set the length of that “string” to 0, effectively
    moving a shape with the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can attach the mouse, however, you need to create a Matter.js `Mouse`
    object that listens for mouse interactions with the p5.js canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg363_Image_558.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, use the `mouse` object to create a `MouseConstraint`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will instantly allow you to interact with all Matter.js bodies via the
    mouse. You don’t need to explicitly attach the constraint to a particular body;
    any body you click will be constrained to the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also configure all the usual constraint variables by adding a `constraint`
    property to the options passed into the `MouseConstraint.create()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg363_Image_559.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here’s an example demonstrating a `MouseConstraint` with two `Box` objects.
    Static bodies act as walls around the borders of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg364_Image_560.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, you’ll see that the `stiffness` property of the constraint
    is set to `0.7`, giving a bit of elasticity to the imaginary mouse string. Other
    properties such as `angularStiffness` and `damping` can also influence the mouse’s
    interaction. What happens if you adjust these values?
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding More Forces**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In [Chapter 2](ch02.xhtml#ch02), I covered how to build an environment with
    multiple forces at play. An object might respond to gravitational attraction,
    wind, air resistance, and so on. Clearly, forces are at work in Matter.js as rectangles
    and circles spin and fly around the screen! But so far, I’ve demonstrated how
    to manipulate only a single global force: gravity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg364_Image_561.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If I want to use any of the [Chapter 2](ch02.xhtml#ch02) techniques with Matter.js,
    I need look no further than the trusty `applyForce()` method, which I wrote as
    part of the `Mover` class. It received a vector, divided it by mass, and accumulated
    it into the mover’s acceleration. With Matter.js, the same method exists, so I
    no longer need to write all the details myself! I can call it with the static
    `Body.applyForce()`. Here’s what that looks like in what’s now the `Box` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg364_Image_562.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the `Box` class’s `applyForce()` method receives a force vector and simply
    passes it along to Matter.js’s `applyForce()` method to apply it to the corresponding
    body. The key difference with this approach is that Matter.js is a more sophisticated
    engine than the examples from [Chapter 2](ch02.xhtml#ch02). The earlier examples
    assumed that the force was always applied at the mover’s center. Here, I’ve specified
    the exact position on the body where the force is applied. In this case, I’ve
    just applied it to the center as before by asking the body for its position, but
    this could be adjusted—for example, a force pushing at the edge of a box, causing
    it to spin across the canvas, much like dice tumbling when thrown.
  prefs: []
  type: TYPE_NORMAL
- en: How can I bring forces into a Matter.js-driven sketch? Say I want to use a gravitational
    attraction force. Remember the code from [Example 2.6](ch02.xhtml#ch2ex6) in the
    `Attractor` class?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: I can rewrite the exact same method by using `Matter.Vector` and incorporate
    it into a new `Attractor` class.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg365_Image_563.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to writing a custom `attract()` method for [Example 6.9](ch06.xhtml#ch6ex9),
    two other key elements are required for the sketch to behave more like the example
    from [Chapter 2](ch02.xhtml#ch02). First, remember that a Matter.js `Engine` has
    a default gravity pointing down. I need to disable it in `setup()` with a `(0,
    0)` vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg366_Image_565.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Second, bodies in Matter.js are created with a default air resistance that
    causes them to slow down as they move. I need to set this to `0` as well to simulate
    the bodies being in the vacuum of space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg366_Image_566.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is also a good time to revisit the concept of mass. Although I’m accessing
    the `mass` property of the body associated with the mover in the `attract()` method,
    I never explicitly set it. In Matter.js, the mass of a body is automatically calculated
    based on its size (area) and density. Larger bodies will therefore have a greater
    mass. To increase the mass relative to the size, you can try setting a `density`
    property in the `options` object (the default is `0.001`). For static bodies,
    such as the attractor, the mass is considered infinite. This is how the attractor
    stays locked in position despite the movers continuously knocking into it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.7**'
  prefs: []
  type: TYPE_NORMAL
- en: Incorporate `Body.applyForce()` into a new `spin()` method for [Example 6.7](ch06.xhtml#ch6ex7)’s
    `Windmill` class to simulate a motor continuously rotating the windmill.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg367_Image_567.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image](../images/pencil.jpg) **Exercise 6.8**'
  prefs: []
  type: TYPE_NORMAL
- en: Convert any of the steering behavior examples from [Chapter 5](ch05.xhtml#ch05)
    to Matter.js. What does flocking look like with collisions?
  prefs: []
  type: TYPE_NORMAL
- en: '**Collision Events**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This book isn’t called *The Nature of Matter.js*, so I’m not going to cover
    every possible feature of the Matter.js library. At this point, I’ve gone over
    the basics of creating bodies and constraints, and shown you some of what the
    library can do. With the skills you’ve gained, hopefully the learning process
    will be considerably less painful when it comes time to use an aspect of Matter.js
    that I haven’t addressed here. Before moving on, however, one more feature of
    the library is worth covering: collision events.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a question you’ve likely been wondering about: “What if I want something
    extra to happen when two bodies collide? I mean, don’t get me wrong—I’m thrilled
    that Matter.js is handling all the collisions behind the scenes. But if it’s taking
    care of the collisions for me, how am I supposed to know when they’re happening?”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your first thoughts to answer this question might be as follows: “Well, I know
    all the bodies in the system, and I know where they’re all located. I can just
    start comparing the bodies’ positions and see which ones are intersecting. Then
    I can do something extra for the bodies that are determined to be colliding.”'
  prefs: []
  type: TYPE_NORMAL
- en: That’s a nice thought, but hello? The whole point of using a physics engine
    like Matter.js is that it will take care of all that work for you. If you’re going
    to implement the computational geometry algorithms to test for intersection, you’re
    basically implementing your own Matter.js!
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, wanting to know when bodies are colliding is a pretty common problem,
    so Matter.js has anticipated it. It can alert you to moments of collision with
    an **event listener**. If you’ve worked with mouse or keyboard interaction in
    p5.js, you already have experience with event listeners. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg368_Image_568.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The global `mousePressed()` function in p5.js is executed whenever the mouse
    is clicked. This is known as a **callback**, a function that’s called back at
    a later time when an event occurs. Matter.js collision events operate in a similar
    fashion. Instead of p5.js just knowing to look for a function called `mousePressed()`
    when a mouse event occurs, however, you have to explicitly define the name for
    a Matter.js collision callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code specifies that a function named `handleCollisions` should be executed
    whenever a collision between two bodies starts. Matter.js also has events for
    `'collisionActive'` (executed over and over for the duration of an ongoing collision)
    and `'collisionEnd'` (executed when two bodies stop colliding), but for a basic
    demonstration, knowing when the collision begins is more than adequate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as `mousePressed()` is triggered when the mouse is clicked, `handleCollisions()`
    (or whatever you choose to name the callback function) is triggered when two shapes
    collide. It can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the function includes an `event` parameter. This is an object that
    includes all the data associated with a collision (or multiple collisions if more
    than one has occurred in that time step), such as which bodies are involved. Matter.js
    automatically creates this object and passes it along to the `handleCollisions()`
    callback every time a collision occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Say I have a sketch of `Particle` objects. Each stores a reference to a Matter.js
    body, and I want the particles to change color when they collide. Here’s the process
    to follow to make that happen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Event, could you tell me which two things collided?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what has collided here? Matter.js detects collisions between a pair of
    bodies. Any pair of colliding bodies will be in an array called `pairs` inside
    the `event` object. Inside `handleCollisions()`, I can use a `for...of` loop to
    iterate over those pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 2: Pair, could you tell me which two bodies you include?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each pair in the `pairs` array is an object with references to the two bodies
    involved in the collision, `bodyA` and `bodyB`. I’ll extract those bodies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 3: Bodies, could you tell me which particles you’re associated with?**'
  prefs: []
  type: TYPE_NORMAL
- en: Getting from the relevant Matter.js bodies to the `Particle` objects they’re
    associated with is a little harder. After all, Matter.js doesn’t know anything
    about my code. Sure, it’s doing all sorts of stuff to keep track of the relationships
    between bodies and constraints, but it’s up to me to manage my own objects and
    their associations with Matter.js elements. That said, every Matter.js body is
    instantiated with an empty object—`{ }`—called `plugin`, ready to store any custom
    data about that body. I can link the body to a custom object (in this case, a
    `Particle`) by storing a reference to that object in the `plugin` property.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the updated constructor in the `Particle` class where the body
    is made. Note that the body-making procedure has been expanded by one line of
    code to add a `particle` property inside `plugin`. It’s important to make sure
    you’re adding a new property to the existing `plugin` object (in this case, `plugin.particle
    = this`) rather than overwriting the `plugin` object (for example, with `plugin
    = this`). The latter could interfere with other features or customizations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg370_Image_569.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Later, in the `handleCollision()` callback function, that `Particle` object
    can be accessed from the `Body` via the `plugin`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg370_Image_570.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In most cases, you can’t assume that the objects that collided are all `Particle`
    objects. After all, the particle might have collided with a `Boundary` object
    (another kind of thing, depending on what’s in your world). You can check an object’s
    type with JavaScript’s `instanceof` operator, as I’ve done in this example.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.9**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simulation in which `Particle` objects disappear when they collide
    with one another. Where and how should you delete the particles? Can you have
    them shatter into smaller particles?
  prefs: []
  type: TYPE_NORMAL
- en: '**A Brief Interlude: Integration Methods**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Has this ever happened to you? You’re at a fancy cocktail party, regaling your
    friends with tall tales of your incredible software physics simulations. Suddenly,
    out of the blue, someone pipes up: “Enchanting! But what integration method are
    you using?”'
  prefs: []
  type: TYPE_NORMAL
- en: '*What?!* you think to yourself. *Integration?*'
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you’ve heard the term before. Along with differentiation, it’s one of
    the two main operations in calculus. Oh right, calculus.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve managed to get most of the way through this material related to physics
    simulation without really needing to dive into calculus. As I wrap up the first
    half of this book, however, it’s worth taking a moment to examine the calculus
    behind what I’ve been demonstrating and how it relates to the methodology in certain
    physics libraries (like Box2D, Matter.js, and the upcoming Toxiclibs.js). This
    way, you’ll know what to say at the next cocktail party when someone asks you
    about integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll begin with a question: “What does integration have to do with position,
    velocity, and acceleration?” To answer, I should first define **differentiation**,
    the process of finding a derivative. The **derivative** of a function is a measure
    of how a function changes over time. Consider position and its derivative. Position
    is a point in space, while velocity is the change in position over time. Therefore,
    velocity can be described as the derivative of position. And what’s acceleration?
    The change in velocity over time. Acceleration is the derivative of velocity.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integration**, the process of finding an integral, is the inverse of differentiation.
    For example, the **integral** of an object’s velocity over time tells us the object’s
    new position when that time period ends. Position is the integral of velocity,
    and velocity is the integral of acceleration.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the physics simulations in this book are founded on the notion of calculating
    acceleration based on forces, integration is needed to figure out the object’s
    location after a certain period of time (like one cycle of the `draw()` loop).
    In other words, you’ve been doing integration all along!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This methodology is known as **Euler integration**, or the Euler method (named
    for the mathematician Leonhard Euler, pronounced *Oiler*). It’s essentially the
    simplest form of integration and is very easy to implement in code—just two lines!
    However, while it’s computationally simple, it’s by no means the most accurate
    or stable choice for certain types of simulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why is Euler inaccurate? Think about it this way: when you bounce down a sidewalk
    on a pogo stick, does the pogo stick sit in one position at time equals 1 second,
    then disappear and suddenly reappear in a new position at time equals 2 seconds,
    and do the same thing for 3 seconds, and 4, and 5? No, of course not. The pogo
    stick moves continuously through time.'
  prefs: []
  type: TYPE_NORMAL
- en: But what’s happening in a p5.js sketch? A circle is at one position at frame
    0, another at frame 1, another at frame 2, and so on. Sure, at 30 frames per second,
    you see the *illusion* of motion. But a new position is computed only every *N*
    units of time, whereas the real world is perfectly continuous. This results in
    some inaccuracies, as shown in [Figure 6.12](ch06.xhtml#ch6fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg372_Image_571.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: The Euler approximation of a curve'
  prefs: []
  type: TYPE_NORMAL
- en: The “real world” is the smooth curve; the Euler simulation is the series of
    straight-line segments. One option to improve on Euler is to use smaller time
    steps—instead of once per frame, you could recalculate an object’s position 20
    times per frame. But this isn’t practical; the sketch might then run too slowly.
  prefs: []
  type: TYPE_NORMAL
- en: I still believe that Euler is the best method for learning the basics, and it’s
    also perfectly adequate for most of the projects you might want to make with p5.js.
    Anything lost in efficiency or inaccuracy is made up for in ease of use and understandability.
    For better accuracy, for example, the Box2D engine uses symplectic Euler, or semi-explicit
    Euler, a slight modification of Euler. Other engines use an integration method
    called Runge-Kutta (named for German mathematicians Carl Runge and Martin Kutta).
  prefs: []
  type: TYPE_NORMAL
- en: Another popular integration method used in physics libraries, including both
    Matter.js and Toxiclibs.js, is **Verlet integration**. A simple way to describe
    Verlet integration is to think of the typical motion algorithm without explicitly
    storing velocity. After all, you don’t really need to store the velocity; if you
    always know where an object was at one point in time and where it is now, you
    can extrapolate its velocity. Verlet integration does precisely this, calculating
    velocity on the fly while the program is running, instead of maintaining a separate
    velocity variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verlet integration is particularly well suited for particle systems, especially
    those with spring connections between the particles. Physics libraries hide the
    details from you so you don’t have to worry about how it all works, but if you’re
    interested in diving deeper into Verlet physics, I suggest reading the seminal
    paper on the topic, from which just about every Verlet computer graphics simulation
    is derived: “Advanced Character Physics” by Thomas Jakobsen (*[https://www.cs.cmu.edu/afs/cs/academic/class/15462-s13/www/lec_slides/Jakobsen.pdf](https://www.cs.cmu.edu/afs/cs/academic/class/15462-s13/www/lec_slides/Jakobsen.pdf)*).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Verlet Physics with Toxiclibs.js**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Around 2005, Karsten Schmidt began work on Toxiclibs, a sweeping and pioneering
    open source library for computational design, specifically built for the Java
    version of Processing. Though it hasn’t been actively maintained in more than
    10 years, the concepts and techniques that the library demonstrated can be found
    in countless creative coding projects today. Its website described it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Toxiclibs is an independent, open source library collection for computational
    design tasks with Java and Processing developed by Karsten “toxi” Schmidt. The
    classes are purposefully kept fairly generic in order to maximize reuse in different
    contexts ranging from generative design, animation, interaction/interface design,
    data visualization to architecture and digital fabrication, use as teaching tool
    and more.*'
  prefs: []
  type: TYPE_NORMAL
- en: Schmidt continues to contribute to the creative coding field through his recent
    project, [thi.ng](http://thi.ng) umbrella (*[https://thi.ng/umbrella](https://thi.ng/umbrella)*).
    This work can be considered an indirect successor to Toxiclibs, but with a much
    greater scope and detail. If you like this book, you might especially enjoy exploring
    [thi.ng](http://thi.ng) vectors (*[https://thi.ng/vectors](https://thi.ng/vectors)*),
    which provides more than 800 vector algebra functions using plain-vanilla JavaScript
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: While [thi.ng/umbrella](http://thi.ng/umbrella) may be a more modern and sophisticated
    approach, Toxiclibs remains a versatile tool, and I continue to use a version
    compatible with the latest version of Processing (4.3 as of the time of this writing).
    For this book, we should thank our lucky stars for Toxiclibs.js, a JavaScript
    adaptation of the library, created by Kyle Phillips (hapticdata). I’m going to
    cover only a few examples related to Verlet physics, but Toxiclibs.js includes
    a suite of other packages with functionality related to color, geometry, math,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: The examples I’m about to demonstrate could also be created using Matter.js,
    but I’ve decided to move to Toxiclibs.js for several reasons. The library holds
    a special place in my heart as a personal favorite, and it’s historically significant.
    I also believe that showing more than one physics library is important for providing
    a broader understanding of the tools and approaches available.
  prefs: []
  type: TYPE_NORMAL
- en: 'This switch from Matter.js to Toxiclibs.js raises an important question, though:
    How should you decide which library to use for a project? Matter.js, or Toxiclibs.js,
    or something else? If you fall into one of the following two categories, your
    decision is a bit easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '**My project involves collisions. I have circles, squares, and other strangely
    shaped objects that knock each other around and bounce off each other.** In this
    case, you’re going to want to use Matter.js, since Toxiclibs.js doesn’t handle
    rigid-body collisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My project involves lots of particles flying around the screen. Sometimes
    they attract each other. Sometimes they repel each other. And sometimes they’re
    connected with springs.** In this case, Toxiclibs.js is likely your best choice.
    It’s simpler to use in some ways than Matter.js and particularly well suited to
    connected systems of particles. It’s also high performance, because it gets to
    ignore all of the collision geometry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s a little chart that covers some of the features for each physics library:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Matter.js** | **Toxiclibs.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Rigid-body collisions | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| 3D physics | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Particle attraction and repulsion forces | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Spring connections (force based) | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Constraints (general-purpose connections) | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: 'All the documentation and downloads for the library files can be found at the
    Toxiclibs.js website (*[http://haptic-data.com/toxiclibsjs](http://haptic-data.com/toxiclibsjs)*).
    For the examples in this book, I’ll be working with a hosted CDN version of the
    library referenced in *index.html*, just as I demonstrated earlier for Matter.js.
    Here’s the `<script>` element to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'My overview of Matter.js focused on a few key features of that library: world,
    vector, body, constraint. This has given you a head start on understanding Toxiclibs.js
    as well, since it follows a similar structure. The following table shows the corresponding
    Toxiclibs.js features:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  **Matter.js**  | **Toxiclibs.js** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll discuss how some of these features translate to Toxiclibs.js before putting
    them together to create some interesting examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vectors**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we go again. Remember all that time spent learning the ins and outs of
    the `p5.Vector` class? Then remember how you had to revisit all those concepts
    with Matter.js and the `Matter.Vector` class? Well, it’s time to do it again,
    because Toxiclibs.js also includes its own vector classes. It has one for two
    dimensions and one for three: `Vec2D` and `Vec3D`. Both are found in the `toxi.geom`
    package and can be aliased in the same manner as `Vector` with Matter.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Once again, Toxiclibs.js vectors are conceptually the same as the p5.js vectors
    we know and love, but they have their own style and syntax. Here’s an overview
    of how some of the basic vector math operations from `p5.Vector` translate to
    `Vec2D` (I’m sticking with 2D to match the rest of this book, but I encourage
    you to explore 3D vectors as well).
  prefs: []
  type: TYPE_NORMAL
- en: '| **p5.Vector** | **Vec2D** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Notice in particular that Toxiclibs.js vectors are created by calling the `Vec2D`
    constructor with the `new` keyword, rather than by using a factory method like
    `Matter.Vector()` or `createVector()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Physics World**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The classes to describe the world and its particles and springs in Toxiclibs.js
    are found in `toxi.physics2d.` I’m also going to use a `Rect` object (to describe
    a generic rectangle boundary) and `GravityBehavior` to apply a global gravity
    force to the world. Including `Vec2D`, I now have all the following class aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg376_Image_572.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first step is to create the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg376_Image_573.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once I have the `VerletPhysics` world, I can set global properties. For example,
    if I want hard boundaries beyond which particles can’t travel, I can provide rectangular
    bounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg376_Image_573a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition, I can add gravity with the `GravityBehavior` object. A gravity
    behavior requires a vector—how strong and in what direction is the gravity?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg376_Image_573b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, to calculate the physics of the world and move the world’s objects
    around, I have to call the world’s `update()` method. Typically, this would happen
    once per frame in `draw()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg376_Image_574.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now all that remains is to populate the world.
  prefs: []
  type: TYPE_NORMAL
- en: '**Particles**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Toxiclibs.js equivalent of a Matter.js body—a thing that exists in the world
    and experiences physics—is a **particle**, as represented by the `VerletParticle2D`
    class. However, unlike Matter.js bodies, Toxiclibs.js particles don’t store geometry.
    They’re just points in space.
  prefs: []
  type: TYPE_NORMAL
- en: 'How should I integrate Toxiclibs.js particles into a p5.js sketch? In the Matter.js
    examples, I created my own class (called `Particle`) and included a reference
    to a Matter.js body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This technique was somewhat redundant, since Matter.js keeps track of the bodies
    in its world. However, it allowed me to manage which body is which (and therefore
    how each body should be drawn) without having to rely on iterating through Matter.js’s
    internal lists. I might take the same approach with Toxiclibs.js, making my own
    `Particle` class that stores a reference to a `VerletParticle2D` object. This
    way, I’ll be able to give the particles custom properties and draw them however
    I want. I’d probably write the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg377_Image_575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking over this code, you might first notice that drawing the particle is
    as simple as grabbing the `x` and `y` properties and using them with `circle()`.
    Second, you might notice that this `Particle` class doesn’t do much beyond storing
    a reference to a `VerletParticle2D` object. This hints at something important.
    Think back to the discussion of inheritance in [Chapter 4](ch04.xhtml#ch04), and
    then ask yourself: What is a `Particle` object other than an augmented `VerletParticle2D`
    object? Why bother making two objects—a `Particle` and a `VerletParticle2D`—for
    every one particle in the world, when I could simply extend the `VerletParticle2D`
    class to include the extra code needed to draw the particle?'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg378_Image_576.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, at the risk of blowing your mind, it turns out that the `VerletParticle2D`
    class is a subclass of `Vec2D`. This means that in addition to inheriting everything
    from `VerletParticle2D`, the `Particle` class has inherited all the `Vec2D` methods
    as well!
  prefs: []
  type: TYPE_NORMAL
- en: 'I can now create new particles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Just creating a particle isn’t enough, however. Just as in Matter.js, I have
    to explicitly add the new particle to the world. In Toxiclibs.js, this is done
    with the `addParticle()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the Toxiclibs.js documentation, you’ll see that `addParticle()`
    expects a `VerletParticle2D` object. But I’ve passed it a `Particle` object. Does
    that work?
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes! Remember one of the tenets of OOP: polymorphism. Here, because the `Particle`
    class extends `VerletParticle2D`, I can treat the particle in two ways: as a `Particle`
    or as a `VerletParticle2D`. This is an incredibly powerful feature of OOP. If
    you build custom classes that inherit from Toxiclibs.js classes, you can use the
    objects of those classes in conjunction with all the methods Toxiclibs.js has
    to offer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Springs**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In addition to the `VerletParticle2D` class, Toxiclibs.js has a set of classes
    that allow you to connect particles with spring forces. Toxiclibs.js has three
    types of springs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VerletSpring2D`: A springy connection between two particles. The spring’s
    properties can be configured in such a way as to create a stiff, stick-like connection
    or a highly elastic, stretchy connection. A particle can also be locked so that
    only one end of the spring can move.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VerletConstrainedSpring2D`: A spring whose maximum distance can be limited.
    This can help the whole spring system achieve better stability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VerletMinDistanceSpring2D`: A spring that enforces its rest length only if
    the current distance is less than its rest length. This is handy if you want to
    ensure that objects are at least a certain distance from each other, but you don’t
    care if the distance is bigger than the enforced minimum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheritance and polymorphism once again prove to be useful when making springs.
    A spring expects two `VerletParticle2D` objects when it’s created, but as before,
    two `Particle` objects will do, since `Particle` extends `VerletParticle2D`.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s some example code to create a spring. This snippet assumes the existence
    of two particles, `particle1` and `particle2`, and creates a connection between
    them with a given rest length and strength.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg379_Image_577.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just as with particles, in order for the connection to be part of the physics
    world, it must be explicitly added to the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'I have almost everything I need to build a simple first Toxiclibs.js example:
    two particles connected to form a springy pendulum. I want to add one more element,
    however: mouse interactivity.'
  prefs: []
  type: TYPE_NORMAL
- en: With Matter.js, I explained that the physics simulation breaks down if you manually
    override a body’s position by setting it to the mouse. With Toxiclibs.js, this
    isn’t a problem. If I want to, I can set a particle’s (*x*, *y*) position manually.
    However, before doing so, it’s generally a good idea to call the particle’s `lock()`
    method, which fixes the particle in place. This is identical to setting the `isStatic`
    property to `true` in Matter.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is to lock the particle temporarily so it stops responding to the
    world’s physics, alter its position, and then unlock it (with the `unlock()` method)
    so it can start moving again from its new location. For example, say I want to
    reposition a particle whenever the mouse is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg380_Image_578.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And with that, I’m ready to put all these elements together in a simple sketch
    with two particles connected by a spring. One particle is permanently locked in
    place, and the other can be moved by dragging the mouse. This example is virtually
    identical to [Example 3.11](ch03.xhtml#ch3ex11) from [Chapter 3](ch03.xhtml#ch03).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg380_Image_579.jpg)![Image](../images/pg381_Image_580.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, I’m continuing to visually represent the spring connecting
    the particles with a line. Keep in mind, however, that the behavior of the spring
    still exists, whether you choose to visually represent it or not. This can open
    up creative possibilities. For instance, you could decide to make the spring invisible
    or depict it in a completely different way, perhaps as a series of dots or a shape
    of your own invention.
  prefs: []
  type: TYPE_NORMAL
- en: '**Soft-Body Simulations**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Verlet physics is particularly well suited for a genre of computer graphics
    known as soft-body simulation. Unlike the **rigid-body** simulations of Matter.js,
    in which hard-edged boxes crash into one another and retain their shapes, **soft-body**
    simulations involve objects that can deform and change shape with physics. Soft
    bodies allow for more flexible, fluid, and organic movements. They can stretch,
    squish, and jiggle in response to forces and collisions, and they appear . . .
    well, soft.
  prefs: []
  type: TYPE_NORMAL
- en: One of the first popular examples of soft-body physics was *SodaConstructor*,
    a game created in the early 2000s. Players could construct and animate custom
    2D creatures built out of masses and springs. Other examples over the years have
    included games like *LocoRoco*, *World of Goo*, and more recently, *JellyCar*.
  prefs: []
  type: TYPE_NORMAL
- en: The basic building blocks of soft-body simulations are particles connected by
    springs—just like the pair particles in [Example 6.11](ch06.xhtml#ch6ex11). [Figure
    6.13](ch06.xhtml#ch6fig13) shows how to configure a network of particle-spring
    connections to make various forms.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg382_Image_581.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: Soft-body simulation designs'
  prefs: []
  type: TYPE_NORMAL
- en: As the figure shows, a string can be simulated by connecting a line of particles
    with springs; a blanket can be simulated by connecting a grid of particles with
    springs; and a cute, cuddly, squishy cartoon character can be simulated with a
    custom layout of particles connected with springs. It’s not much of a leap from
    one to another.
  prefs: []
  type: TYPE_NORMAL
- en: '**A String**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I’ll begin by simulating a *soft pendulum*—a bob hanging from a flexible string
    instead of a rigid arm. As it happens, Toxiclibs.js offers a convenient `ParticleString2D`
    class that creates a string of particles connected by springs in a single constructor
    call. However, for demonstration purposes, I’ll create my own particle string
    by using an array and a `for` loop. This way, you’ll gain a deeper understanding
    of the system, enabling you to create your own custom designs beyond a single
    string in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I need an array of particles. I’ll use the same `Particle` class built
    in [Example 6.11](ch06.xhtml#ch6ex11):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s say I want to have 20 particles, all spaced 10 pixels apart, as in
    [Figure 6.14](ch06.xhtml#ch6fig14).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg383_Image_582.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: Twenty particles all spaced 10 pixels apart'
  prefs: []
  type: TYPE_NORMAL
- en: 'I can loop from `i` equals `0` all the way up to `total`, creating new particles
    and setting each one’s `y` position to `i * 10`. The first particle is at (0,
    10), the second at (0, 20), the third at (0, 30), and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg383_Image_583.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even though it’s redundant, I’m adding the particles to both the Toxiclibs.js
    `physics` world and the `particles` array. This will help me manage the sketch
    (especially when I might have more than one string of particles).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the fun part: it’s time to connect all the particles. Particle index
    0 will be connected to particle 1, particle 1 to particle 2, 2 to 3, 3 to 4, and
    so on (see [Figure 6.15](ch06.xhtml#ch6fig15)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg384_Image_584.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: Each particle is connected to the next particle in the array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, particle `i` needs to be connected to particle `i+1` (except
    for when `i` represents the last element of the array):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg384_Image_585.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, what if I want the string to hang from a fixed point? I can lock one of
    the particles—perhaps the first, the last, or the middle one. I’ll go with the
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Finally, I need to draw the particles. Instead of drawing them as circles, however,
    I want to treat them as points in a line. For that, I can use `beginShape()`,
    `endShape()`, and `vertex()`, accessing the individual particle positions from
    the array. I’ll use the `show()` method to draw only the last particle as a circle,
    creating a bob at the end of the string.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg385_Image_586.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The full code available on the book’s website also demonstrates how to drag
    the bob particle with the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.10**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a hanging cloth simulation using particles and springs. You’ll need to
    connect each particle with its vertical and horizontal neighbors.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg386_Image_587.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**A Soft-Body Character**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that I’ve built a simple connected system—a single string of particles—I’ll
    expand on this idea to create a squishy, cute friend in p5.js, otherwise known
    as a **soft-body character**. The first step is to design a skeleton of connected
    particles. I’ll begin with a very simple design with only six vertices, as shown
    in [Figure 6.16](ch06.xhtml#ch6fig16). Each vertex (drawn as a dot) represents
    a `Particle` object, and each connection (drawn as a line) represents a `Spring`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg386_Image_588.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: A skeleton for a soft-body character. The vertices are numbered
    according to their positions in an array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating the particles is the easy part; it’s exactly the same as before! I’d
    like to make one change, though. Rather than having the `setup()` function add
    the particles and springs to the physics world, I’ll incorporate this responsibility
    into the `Particle` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg387_Image_589.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While it’s not strictly necessary, I’d also like to make a `Spring` class that
    inherits its functionality from `VerletSpring2D`. For this example, I want the
    resting length of the spring to always be equal to the distance between the skeleton’s
    particles when they’re first created. Additionally, I’m keeping the implementation
    simple here by hardcoding a uniform strength value of `0.01` in the `Spring` constructor.
    You may want to enhance the example with a more sophisticated design that sets
    varying degrees of springiness to the different parts of the soft-body character.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg387_Image_590.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that I have the `Particle` and `Spring` classes, I can assemble the character
    by adding a series of particles with hardcoded starting positions to a `particles`
    array, and a series of spring connections to a `springs` array.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg387_Image_591.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The beauty of this system is that you can easily expand it to create your own
    design by adding more particles and springs! However, there’s one major issue
    here: I’ve made connections only around the perimeter of the character. If I were
    to apply a force (like gravity) to the body, it would instantly collapse onto
    itself. This is where additional internal springs come into play, as shown in
    [Figure 6.17](ch06.xhtml#ch6fig17). They keep the character’s structure stable
    while still allowing it to move and squish in a realistic manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg388_Image_593.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Internal springs keep the structure from collapsing. This is just
    one possible design. Try others!'
  prefs: []
  type: TYPE_NORMAL
- en: The final example incorporates the additional springs from [Figure 6.17](ch06.xhtml#ch6fig17),
    a gravity force, and mouse interaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg389_Image_594.jpg)![Image](../images/pg390_Image_595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the soft-body character example, you’ll notice that I’m no longer drawing
    all the elements of the physics simulation on the canvas! The `show()` method
    of the particles isn’t called, and the internal springs that give the character
    its structure are not rendered with lines. In fact, the springs themselves are
    never referenced after `setup()`, since the character’s shape is constructed from
    its particle positions. As such, the springs array isn’t strictly needed in this
    example, although I do find it useful to have, considering it may be necessary
    for enhancing the sketch in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the drawing as its own problem, distinct from the character’s skeletal
    structure, also opens up possibilities for adding other design elements such as
    eyes or antennae. These creative enhancements don’t need to be directly connected
    to the physics of the character, although they can be if you choose to do so!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.11**'
  prefs: []
  type: TYPE_NORMAL
- en: Design your own soft-body character with additional vertices and connections.
    What other design elements can you add? What other forces and interactions can
    you incorporate?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg390_Image_596.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**A Force-Directed Graph**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Have you ever had the following thought? “I have a whole bunch of stuff I want
    to draw, and I want all that stuff to be spaced out evenly in a nice, neat, organized
    manner. Otherwise, I’ll have trouble sleeping at night.”
  prefs: []
  type: TYPE_NORMAL
- en: 'This isn’t an uncommon problem in computational design. One solution is a **force-directed
    graph**, a visualization of elements—let’s call them *nodes*—whose positions aren’t
    manually assigned. Instead, the nodes arrange themselves according to a set of
    forces. While any forces can be used, a classic approach uses spring forces: each
    node is connected to every other node with a spring, such that when the springs
    reach equilibrium, the nodes are evenly spaced (see [Figure 6.18](ch06.xhtml#ch6fig18)).
    Sounds like a job for Toxiclibs.js!'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg391_Image_597.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18: In this force-directed graph, clusters of particles are connected
    by spring forces.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a force-directed graph, I’ll first need a class to describe an individual
    node in the system. Because the term *node* is associated with the JavaScript
    framework Node.js, I’ll stick with the term *particle* to avoid any confusion,
    and I’ll continue using my `Particle` class from the earlier soft-body examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I’ll encapsulate a list of *N* particles into a new class called `Cluster`
    that represents the graph as a whole. The particles all start out near the center
    of the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg391_Image_598.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let’s assume that the `Cluster` class also has a `show()` method to draw all
    the particles in the cluster and that I’ll create a new `Cluster` object in `setup()`
    and render it in `draw()`. If I ran the sketch as is, nothing would happen. Why?
    Because I have yet to implement the whole force-directed graph part! I need to
    connect every single node to every other node with a spring. This is somewhat
    similar to creating a soft-body character, but rather than handcraft a skeleton,
    I want to write an algorithm to make all the connections automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'What exactly do I mean by that? Say I have five `Particle` objects: 0, 1, 2,
    3, and 4\. [Figure 6.19](ch06.xhtml#ch6fig19) illustrates the connections.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg392_Image_600.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.19: A network graph showing each of the five nodes connected to every
    other node'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice two important details about the list of connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No particle is connected to itself.** That is, 0 isn’t connected to 0, 1
    isn’t connected to 1, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connections aren’t repeated in reverse.** For example, if 0 is connected
    to 1, I don’t need to explicitly say that 1 is also connected to 0\. I already
    know this, based on the definition of how a spring works!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How do I write the code to make these connections for *N* particles? Look at
    the four columns illustrated in [Figure 6.19](ch06.xhtml#ch6fig19). They iterate
    all the connections starting from particles 0 up to 3\. This tells me that I need
    to access each particle in the list from 0 to *N* – 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg393_Image_601.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now look at the connections listed in [Figure 6.19](ch06.xhtml#ch6fig19). I
    need to connect node 0 to nodes 1, 2, and 3\. For node 1, I connect 2 and 3\.
    For node 2, only 3\. In general, for every node `i`, I need to iterate from `i
    + 1` all the way until the end of the array. I’ll use the counter variable `j`
    for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg393_Image_602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For every pair of particles `i` and `j`, I can then create a spring. I’ll go
    back to using `VerletSpring2D` directly, but you could also incorporate a custom
    `Spring` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg393_Image_603.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assuming those connections are made in the `Cluster` constructor, all that’s
    left is to create the cluster in `setup()` and call `show()` in the `draw()` loop!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg393_Image_604.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example illustrates a force-directed graph but does not involve any actual
    data! Here, the number of nodes in each cluster and the equilibrium length between
    the nodes are assigned randomly, and the spring strength has a constant value
    of `0.01`. In a real-world application, these values could be determined based
    on your specific data, hopefully resulting in a meaningful visualization of the
    relationships within the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.12**'
  prefs: []
  type: TYPE_NORMAL
- en: Design a cluster-like structure as a skeleton for a cute, cuddly, squishy creature.
    Add gravity and mouse interaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.13**'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the force-directed graph to have more than one `Cluster` object. Use
    a `VerletMinDistanceSpring2D` object to connect cluster to cluster. What kind
    of data might you visualize with this technique?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg394_Image_606.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Attraction and Repulsion Behaviors**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it came time to create an attraction example for Matter.js, I showed how
    the `Matter.Body` class includes an `applyForce()` method. All I then needed to
    do was calculate the attraction force *F[g]* = (*G* × *m*[1] × *m*[2]) ÷ *d*²
    as a vector and apply it to the body. Similarly, the Toxiclibs.js `VerletParticle2D`
    class also includes a method called `addForce()` that can apply any calculated
    force to a particle.
  prefs: []
  type: TYPE_NORMAL
- en: However, Toxiclibs.js takes this idea one step further by offering built-in
    functionality for common forces (called behaviors) such as attraction! For example,
    if you add an `AttractionBehavior` object to a particular `VerletParticle2D` object,
    all other particles in the physics world will experience an attraction force toward
    that particle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say I create an instance of my `Particle` class (which extends the `VerletParticle2D`
    class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now I can create an `AttractionBehavior` associated with that particle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the behavior is created with three arguments: a particle to assign
    it to, a distance, and a strength. The distance specifies the range within which
    the behavior will be applied. In this case, only particles within 20 pixels will
    experience the attraction force. The strength, of course, specifies how strong
    the force is.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in order for the force to be activated, the behavior needs to be added
    to the physics world:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now everything that lives in the physics simulation will always be attracted
    to that particle, as long as it’s within the distance threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AttractionBehavior` class is a very powerful tool. For example, even though
    Toxiclibs.js doesn’t automatically handle collisions like Matter.js does, you
    can create a collision-like simulation by adding an `AttractionBehavior` with
    a negative strength—a repulsive behavior—to each and every particle. If the force
    is strong and activated only within a short range (scaled to the particle’s radius),
    the result is much like a rigid-body collision. Here’s how to modify the `Particle`
    class to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg396_Image_607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I can now remake the attraction example from [Chapter 2](ch02.xhtml#ch02) with
    a single `Attractor` object that exerts an attraction behavior anywhere on the
    canvas. Even though the attractor is centered, I’m using a distance threshold
    of the full `width` to account for any movement of the attractor, and for particles
    located outside the canvas boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg397_Image_608.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just as discussed in “Spatial Subdivisions” on [page 275](ch05.xhtml#ch00lev2sec38),
    Toxiclibs.js projects with large numbers of particles interacting with one another
    can run very slowly because of the *N*² nature of the algorithm (every particle
    checking every other particle). To speed up the simulation, you could use the
    manual `addForce()` method in conjunction with a binning algorithm. Keep in mind,
    this would also require you to manually calculate the attraction force, as the
    built-in `AttractionBehavior` would no longer apply.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pencil.jpg) **Exercise 6.14**'
  prefs: []
  type: TYPE_NORMAL
- en: Use `AttractionBehavior` in conjunction with spring forces.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/bird.jpg) **The Ecosystem Project**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take your system of creatures from [Chapter 5](ch05.xhtml#ch05) and use a physics
    engine to drive their motion and behaviors. Here are some possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Matter.js to allow collisions between creatures. Consider triggering an
    event when two creatures collide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Matter.js to augment the design of your creatures. Build a skeleton with
    distance joints or make appendages with revolute joints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Toxiclibs.js to augment the design of your creature. Use a chain of Toxiclibs.js
    particles for tentacles or a mesh of springs as a skeleton.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Toxiclibs.js to add attraction and repulsion behaviors to your creatures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use spring (or joint) connections between objects to control their interactions.
    Create and delete these springs on the fly. Consider making these connections
    visible or invisible to the viewer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg398_Image_609.jpg)'
  prefs: []
  type: TYPE_IMG
