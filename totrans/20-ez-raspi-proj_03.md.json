["```\npi@raspberrypi:~ $ sudo apt update\npi@raspberrypi:~ $ sudo apt install build-essential python3\npython-dev python-smbus python3-pip git-core\n```", "```\npi@raspberrypi:~ $ cd ~/Desktop\npi@raspberrypi:~/Desktop $ mkdir Libraries\npi@raspberrypi:~/Desktop $ cd Libraries\npi@raspberrypi:~/Desktop/Libraries $\n```", "```\npi@raspberrypi:~/Desktop/Libraries $ git clone https://github.com/\nadafruit/Adafruit_Python_CharLCD.git\n```", "```\npi@raspberrypi:~/Desktop/Libraries $ cd Adafruit_Python_CharLCD\n```", "```\npi@raspberrypi:~/Desktop/Libraries/Adafruit_Python_CharLCD $ sudo\npython3 setup.py install\n```", "```\n➊ import Adafruit_CharLCD as LCD\n\n  #Raspberry Pi pin configuration\n➋ lcd_rs = 27\n  lcd_en = 22\n  lcd_d4 = 25\n  lcd_d5 = 24\n  lcd_d6 = 23\n  lcd_d7 = 18\n  lcd_backlight = 4\n\n  #define the LCD size\n➌ lcd_columns = 16\n  lcd_rows = 2\n\n  #initialize the LCD\n➍ lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, \n  lcd_d7, lcd_columns, lcd_rows, lcd_backlight)\n\n  #write your message\n➎ lcd.message('It works\\nYou rock!')\n```", "```\n  import Adafruit_CharLCD as LCD\n➊ import time\n\n  #Raspberry Pi pin configuration\n  lcd_rs = 27\n  lcd_en = 22\n  lcd_d4 = 25\n  lcd_d5 = 24\n  lcd_d6 = 23\n  lcd_d7 = 18\n  lcd_backlight = 4\n\n  #define the LCD size\n  lcd_columns = 16\n  lcd_rows = 2\n\n  #initialize the LCD\n  lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6,\n  lcd_d7, lcd_columns, lcd_rows, lcd_backlight)\n\n  #write your message\n➋ title = \"Don't forget!\"\n➌ reminder = \"You have a doctor appointment next Monday\"\n\n  #set the delay for scroll\n➍ delay = 0.3\n\n  #write a function to scroll the message\n➎ def scroll_message(reminder, delay):\n      padding = ' ' * lcd_columns\n      reminder_message = padding + reminder + ' '\n    ➏ for i in range(len(reminder_message)):\n          lcd.set_cursor(0, 1)\n          lcd.message(reminder_message[i:(i+lcd_columns)])\n          time.sleep(delay)\n\n➐ lcd.clear()\n  lcd.home()\n  lcd.message(title)\n\n  #scroll the message in an infinite loop\n➑ while True:\n      scroll_message(reminder, delay)\n```", "```\n    http://api.openweathermap.org/data/2.5/weather?q=*your_city*,\n    *your_country_code*&APPID=*your_unique_API_key*\n    ```", "```\n    http://api.openweathermap.org/data/2.5/weather?q=Porto,\n    PT&APPID=801d2603e9f2e1c70e042e4f5f6e0---\n    ```", "```\n    {\"coord\":{\"lon\":8.61,\"lat\":41.15},\"weather\":[{\"id\":802,\n    \"main\":\"Clouds\",\"description\":\"scattered clouds\",\"icon\":\"03d\"}],\n    \"base\":\"stations\",\"main\":{\"temp\":280.704,\"pressure\":1010.06,\n    \"humidity\":96,\"temp_min\":280.704,\"temp_max\":280.704,\n    \"sea_level\":1041.03,\"grnd_level\":1010.06},\"wind\":{\"speed\":1.01,\n    \"deg\":74.0017},\"clouds\":{\"all\":36},\"dt\":1487153693,\n    \"sys\":{\"message\":0.0042,\"country\":\"PT\",\"sunrise\":1487143701,\n    \"sunset\":1487182157},\"id\":2735943,\"name\":\"Porto\",\"cod\":200}\n    ```", "```\n{\n   \"coord\":{\n      \"lon\":-8.61,\n      \"lat\":41.15\n   },\n   \"weather\":[{\n         \"id\":803,\n         \"main\":\"Clouds\",\n         \"description\":\"broken clouds\",\n         \"icon\":\"04d\"\n      }\n   ],\n   \"base\":\"stations\",\n   \"main\":{\n      \"temp\":288.15,\n      \"pressure\":1020,\n      \"humidity\":93,\n      \"temp_min\":288.15,\n      \"temp_max\":288.15\n   },\n   \"visibility\":10000,\n   \"wind\":{\n      \"speed\":3.6,\n      \"deg\":230\n   },\n   \"clouds\":{\n      \"all\":75\n   },\n   \"dt\":1488726000,\n   \"sys\":{\n      \"type\":1,\n      \"id\":5959,\n      \"message\":0.002,\n      \"country\":\"PT\",\n      \"sunrise\":1488697277,\n      \"sunset\":1488738646\n   },\n   \"id\":2735943,\n   \"name\":\"Porto\",\n   \"cod\":200\n}\n```", "```\n➊ import requests\n➋ weather_data = requests.get('http://api.openweathermap.org/data/2.5/\n  weather?q=Porto,PT&APPID=801d2603e9f2e1c70e042e4f5f6e0---')\n➌ temp_max = weather_data.json().get('main').get('temp_max')\n  print(temp_max)\n```", "```\nweather_data.json().get('wind').get('speed')\n```", "```\nweather_data.json().get('name')\n```", "```\npi@raspberrypi:~ $ cd Desktop/Libraries\n```", "```\npi@raspberrypi:~/Desktop/Libraries $ git clone https://github.com/\nadafruit/Adafruit_Python_SSD1306.git\n```", "```\npi@raspberrypi:~/Desktop/Libraries $ cd adafruit/\nAdafruit_Python_SSD1306\npi@raspberrypi:~/Desktop/Libraries/adafruit/Adafruit_Python_SSD1306\n$ sudo python3 setup.py install\n```", "```\n➊ import time\n  import Adafruit_SSD1306\n  import requests\n\n  from PIL import Image\n  from PIL import ImageDraw\n  from PIL import ImageFont\n\n  #Raspberry Pi pin configuration\n➋ RST = 24\n\n➌ #128x32 display with hardware I2C\n  #disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n\n  #128x64 display with hardware I2C\n  disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)\n\n  #set your unique OpenWeatherMap.org URL\n➍ open_weather_map_url = 'http://api.openweathermap.org/data/2.5/\n  weather?q=Porto,PT&APPID=801d2603e9f2e1c70e042e4f5f6e0---'\n\n  #initialize display\n➎ disp.begin()\n\n  while True:\n      #clear display\n      disp.clear()\n      disp.display()\n\n      #create blank image for drawing\n      #make sure to create image with mode '1' for 1-bit color\n      width = disp.width\n      height = disp.height\n      image = Image.new('1', (width, height))\n\n      #get drawing object to draw on image\n      draw = ImageDraw.Draw(image)\n\n      #draw a black filled box to clear the image\n      draw.rectangle((0,0,width,height), outline=0, fill=0)\n\n      #define constants to define drawing area\n      padding = 2\n      top = padding\n\n      #move left to right, keeping track of the current x position\n      #for drawing text\n      x = padding\n\n      #load default font\n      font = ImageFont.load_default()\n\n      #openWeatherMap.org weather data request\n➏     weather_data = requests.get(open_weather_map_url)\n\n      #display location\n➐     location = weather_data.json().get('name') + ' - '\n  + weather_data.json().get('sys').get('country')\n      draw.text((x, top), location, font=font, fill=255)\n\n      #display description\n      description = 'Desc ' + weather_data.json().get('weather')[0]\n  .get('main')\n      draw.text((x, top+10), description,  font=font, fill=255)\n\n      raw_temperature = weather_data.json().get('main')\n  .get('temp')-273.15\n\n      #temperature in Celsius\n      temperature = 'Temp ' + str(raw_temperature) + '*C'\n\n      #uncomment for temperature in Fahrenheit\n      #temperature = 'Temp ' + str(raw_temperature*(9/5.0)+32) + '*F'\n      #display temperature\n      draw.text((x, top+20), temperature, font=font, fill=255)\n\n      #display pressure\n      pressure = 'Pres ' + str(weather_data.json().get('main')\n  .get('pressure')) + 'hPa'\n      draw.text((x, top+30), pressure, font=font, fill=255)\n\n      #display humidity\n      humidity = 'Humi ' + str(weather_data.json().get('main')\n  .get('humidity')) + '%'\n      draw.text((x, top+40), humidity, font=font, fill=255)\n\n      #display wind\n      wind = 'Wind ' + str(weather_data.json().get('wind')\n  .get('speed')) + 'mps ' + str(weather_data.json().get('wind')\n  .get('deg')) + '*'\n      draw.text((x, top+50), wind, font=font, fill=255)\n\n      #display image\n➑     disp.image(image)\n      disp.display()\n      time.sleep(10)\n```", "```\ndraw.text((x, top), location, font=font, fill=255)\n```", "```\n➊ from sense_hat import SenseHat\n  #uncomment the following line if you are using the emulator\n➋ #from sense_emu import SenseHat\n  sense = SenseHat()\n➌ sense.show_message('Hello World!', text_colour = [0, 0, 255])\n```", "```\nfrom sense_hat import SenseHat\n#uncomment the following line if you are using the emulator\n#from sense_emu import SenseHat\nsense = SenseHat()\n#set blue pixel\nsense.set_pixel(0, 1, 0, 0, 255)\n#set green pixel\nsense.set_pixel(7, 6, 0, 255, 0)\n#set pink pixel\nsense.set_pixel(2, 5, 255, 51, 153)\n```", "```\nfrom sense_hat import SenseHat\n#uncomment the following line if you are using the emulator\n#from sense_emu import SenseHat\nsense = SenseHat()\n\n#red color\nX = [255, 0, 0]\n\n#no color\nN = [0, 0, 0]\n\n#sad face array\nsad_face = [\nN, N, X, X, X, X, N, N,\nN, X, N, N, N, N, X, N,\nX, N, X, N, N, X, N, X,\nX, N, N, N, N, N, N, X,\nX, N, N, X, X, N, N, X,\nX, N, X, N, N, X, N, X,\nN, X, N, N, N, N, X, N,\nN, N, X, X, X, X, N, N\n]\n\nsense.set_pixels(sad_face)\n```", "```\n  from signal import pause\n\n  from sense_hat import SenseHatm\n  #uncomment the following line if you are using the emulator\n  #from sense_emu import SenseHat\n  sense = SenseHat()\n\n➊ def move_up(event):\n      print('joystick was moved up')\n\n  def move_down(event):\n      print('joystick was moved down')\n\n  def move_right(event):\n      print('joystick was moved right')\n\n  def move_left(event):\n      print('joystick was moved left')\n\n  def move_middle(event):\n      print('joystick was pressed')\n\n➋ sense.stick.direction_up = move_up\n  sense.stick.direction_down = move_down\n  sense.stick.direction_right = move_right\n  sense.stick.direction_left = move_left\n  sense.stick.direction_middle = move_middle\n\n  pause()\n```", "```\n  #based on raspberrypi.org Sense HAT Pong example\n\n  #import necessary libraries\n➊ from random import randint\n  from time import sleep\n\n  #use this line if you are using the Sense HAT board\n  from sense_hat import SenseHat\n  #uncomment the following line if you are using the emulator\n  #from sense_emu import SenseHat\n\n  #create an object called sense\n➋ sense = SenseHat()\n\n  #set bat position, random ball position, and velocity\n➌ y = 4\n➍ ball_position = [int(randint(2,6)), int(randint(1,6))]\n➎ ball_velocity = [1, 1]\n\n  #red color\n  X = [255, 0, 0]\n  #no color\n  N = [0, 0, 0]\n\n  #sad face array\n  sad_face = [\n  N, N, X, X, X, X, N, N,\n  N, X, N, N, N, N, X, N,\n  X, N, X, N, N, X, N, X,\n  X, N, N, X, N, N, N, X,\n  X, N, N, X, N, N, N, X,\n  X, N, X, N, N, X, N, X,\n  N, X, N, N, N, N, X, N,\n  N, N, X, X, X, X, N, N\n  ]\n\n  #draw bat at y position\n➏ def draw_bat():\n      sense.set_pixel(0, y, 0, 255, 0)\n      sense.set_pixel(0, y+1, 0, 255, 0)\n      sense.set_pixel(0, y-1, 0, 255, 0)\n\n  #move bat up\n➐ def move_up(event):\n      global y\n      if y > 1 and event.action=='pressed':\n          y -= 1\n\n  #move bat down\n  def move_down(event):\n      global y\n      if y < 6 and event.action=='pressed':\n          y += 1\n\n  #move ball to the next position\n➑ def draw_ball():\n      #ball displayed on current position\n      sense.set_pixel(ball_position[0], ball_position[1], 75, 0, 255)\n      #next ball position\n      ball_position[0] += ball_velocity[0]\n      ball_position[1] += ball_velocity[1]\n      #if ball hits ceiling, calculate next position\n      if ball_position[0] == 7:\n          ball_velocity[0] = -ball_velocity[0]\n      #if ball hits wall, calculate next position\n      if ball_position[1] == 0 or ball_position[1] == 7:\n          ball_velocity[1] = -ball_velocity[1]\n      #if ball reaches 0 position, player loses and game quits\n      if ball_position[0] == 0:\n          sleep(0.25)\n          sense.set_pixels(sad_face)\n          quit()\n      #if ball hits bat, calculate next ball position\n      if ball_position[0] == 1 and y - 1 <= ball_position[1] <= y+1:\n          ball_velocity[0] = -ball_velocity[0]\n\n  #when joystick moves up or down, trigger corresponding function\n➒ sense.stick.direction_up = move_up\n  sense.stick.direction_down = move_down\n\n  #run the game\n➓ while True:\n      sense.clear()\n      draw_bat()\n      draw_ball()\n      sleep(0.25)\n```", "```\n#move bat up\ndef move_up(event):\n    global y\n    if y > 1 and event.action=='pressed':\n        y -= 1\n```"]