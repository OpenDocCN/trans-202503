["```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<device-admin >\n    <uses-policies>\n        <limit-password />\n        <watch-login />\n        <reset-password />\n        <force-lock />\n        <wipe-data />\n        <expire-password />\n        <encrypted-storage />\n        <disable-camera />\n        <disable-keyguard-features />\n        <set-global-proxy />\n    </uses-policies>\n</device-admin>\n```", "```\nIntent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\nComponentName admin = new ComponentName(this, MyDeviceAdminReceiver.class);\nintent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, admin);\nintent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n                \"Required for corporate email access.\");\nstartActivityForResult(intent, REQUEST_CODE_ENABLE_ADMIN);\n```", "```\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<policies>\n  <admin name=\"com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver\">➊\n    <policies flags=\"28\" />\n  </admin>\n  <admin name=\"com.example.android.apis/com.example.android.apis.app.DeviceAdminSampleReceiver\">➋\n    <policies flags=\"1023\" />➌\n    <password-quality value=\"327680\" />➍\n    <min-password-length value=\"6\" />\n    <min-password-letters value=\"2\" />\n    <min-password-numeric value=\"2\" />\n    <max-time-to-unlock value=\"300000\" />\n    <max-failed-password-wipe value=\"100\" />\n    <encryption-requested value=\"true\" />\n    <disable-camera value=\"true\" />\n    <disable-keyguard-features value=\"1\" />\n</admin>\n<admin name=\"com.android.email/com.android.email.SecurityPolicy$PolicyAdmin\">➎\n  <policies flags=\"475\" />\n</admin>\n<password-owner value=\"10076\" />➏\n<active-password quality=\"327680\" length=\"6\"\n                 uppercase=\"0\" lowercase=\"3\"\n                 letters=\"3\" numeric=\"3\" symbols=\"0\" nonletter=\"3\" />➐\n</policies>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.example.deviceadmin\">\n    --*snip*--\n    <receiver android:name=\".MyDeviceAdminReceiver\"\n        android:label=\"@string/device_admin\"\n        android:description=\"@string/device_admin_description\"\n        android:permission=\"android.permission.BIND_DEVICE_ADMIN\">➊\n        <meta-data android:name=\"android.app.device_admin\"\n                   android:resource=\"@xml/device_admin_policy\" />➋\n        <intent-filter>\n           <action android:name=\"android.app.action.DEVICE_ADMIN_ENABLED\" />➌\n        </intent-filter>\n    </receiver>\n    --*snip*--\n</manifest>\n```", "```\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<device-owner package=\"com.example.deviceadmin\" name=\"Device Owner\" />\n```", "```\nservice racoon /system/bin/racoon➊\n    class main\n    socket racoon stream 600 system system➋\n    # IKE uses UDP port 500\\. Racoon will setuid to vpn after binding the port.\n    group vpn net_admin inet➌\n    disabled\n    oneshot\n\nservice mtpd /system/bin/mtpd➍\n    class main\n    socket mtpd stream 600 system system➎\n    user vpn\n    group vpn net_admin inet net_raw➏\n    disabled\n    oneshot\n```", "```\n# **cat /data/misc/vpn/state**\ntun0➊\n10.8.0.1/24➋\n192.168.1.0/24➌\n192.168.1.1➍\nexample.com➎\n```", "```\n# **ls -l /data/misc/keystore/user_0**\n-rw------- keystore keystore      980 1000_CACERT_cacert➊\n-rw------- keystore keystore       52 1000_LOCKDOWN_VPN➋\n-rw------- keystore keystore      932 1000_USRCERT_vpnclient➌\n-rw------- keystore keystore     1652 1000_USRPKEY_vpnclient➍\n-rw------- keystore keystore      116 1000_VPN_144965b85a6➎\n-rw------- keystore keystore       84 1000_VPN_145635c88c8➏\n-rw------- keystore keystore      116 1000_VPN_14569512c80➐\n```", "```\npsk-vpn|1|vpn1.example.com|test1|pass1234||||true|l2tpsecret|l2tpid|PSK|||➊\npptpvpn|0|vpn2.example.com|user1|password||||true||||||➋\ncertvpn|4|vpn3.example.com|user3|password||||true||||vpnclient|cacert|➌\n```", "```\n# **iptables -v -L n**\n--*snip*--\nChain fw_INPUT (1 references)\n target     prot opt in     out    source      destination\n RETURN     all  --  *      *      0.0.0.0/0   10.1.1.0/24➊\n RETURN     all  --  tun0   *      0.0.0.0/0   0.0.0.0/0➋\n RETURN     udp  --  *      *      11.22.33.44 0.0.0.0/0    udp spt:1701➌\n RETURN     tcp  --  *      *      11.22.33.44 0.0.0.0/0    tcp spt:1701\n RETURN     udp  --  *      *      11.22.33.44 0.0.0.0/0    udp spt:4500\n RETURN     tcp  --  *      *      11.22.33.44 0.0.0.0/0    tcp spt:4500\n RETURN     udp  --  *      *      11.22.33.44 0.0.0.0/0    udp spt:500\n RETURN     tcp  --  *      *      11.22.33.44 0.0.0.0/0    tcp spt:500\n RETURN     all  --  lo     *      0.0.0.0/0   0.0.0.0/0\n DROP       all  --  *      *      0.0.0.0/0   0.0.0.0/0➍\n\nChain fw_OUTPUT (1 references)\n target     prot opt in     out    source      destination\n RETURN     all  --  *      *      10.1.1.0/24 0.0.0.0/0➎\n RETURN     all  --  *      tun0   0.0.0.0/0   0.0.0.0/0➏\n RETURN     udp  --  *      *      0.0.0.0/0   11.22.33.44  udp dpt:1701➐\n RETURN     tcp  --  *      *      0.0.0.0/0   11.22.33.44  tcp dpt:1701\n RETURN     udp  --  *      *      0.0.0.0/0   11.22.33.44  udp dpt:4500\n RETURN     tcp  --  *      *      0.0.0.0/0   11.22.33.44  tcp dpt:4500\n RETURN     udp  --  *      *      0.0.0.0/0   11.22.33.44  udp dpt:500\n RETURN     tcp  --  *      *      0.0.0.0/0   11.22.33.44  tcp dpt:500\n RETURN     all  --  *      lo     0.0.0.0/0   0.0.0.0/0\n REJECT     all  --  *      *      0.0.0.0/0   0.0.0.0/0   reject-with icmp-port-unreachable➑\n--*snip*--\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.example.vpn\">\n    --*snip*--\n    <application android:label=\"@string/app\">\n         --*snip*--\n         <service android:name=\".MyVpnService\"\n                  android:permission=\"android.permission.BIND_VPN_SERVICE\">➊\n            <intent-filter>\n                <action android:name=\"android.net.VpnService\"/>➋\n            </intent-filter>\n        </service>\n    </application>\n</manifest>:\n```", "```\n# iptables -A OUTPUT -m owner --uid-owner 1234 -j DROP➊\n# iptables -A PREROUTING -t mangle -p tcp --dport 80 -j MARK --set-mark 0x1➋\n# ip rule add fwmark 0x1 table web➌\n# ip route add default via 1.2.3.4 dev em3 table web➍\n```", "```\n**# iptables -t mangle -L –n**\n--*snip*--\nChain st_mangle_OUTPUT (1 references)\ntarget     prot opt source               destination\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0           mark match 0x1➊\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0           owner UID match 1016➋\n--*snip*--\nst_mangle_tun0_OUTPUT  all  --  0.0.0.0/0           0.0.0.0/0           [goto] owner UID match\n0-99999➌\nst_mangle_tun0_OUTPUT  all  --  0.0.0.0/0           0.0.0.0/0           [goto] owner UID match\n1300000-1399999➍\nst_mangle_tun1_OUTPUT  all  --  0.0.0.0/0           0.0.0.0/0           [goto] owner UID match\n1000000-1099999➎\n\nChain st_mangle_tun0_OUTPUT (3 references)\ntarget     prot opt source               destination\nMARK       all  --  0.0.0.0/0            0.0.0.0/0           MARK and 0x0\nMARK       all  --  0.0.0.0/0            0.0.0.0/0           MARK set 0x3c➏\n\nChain st_mangle_tun1_OUTPUT (2 references)\ntarget     prot opt source               destination\nMARK       all  --  0.0.0.0/0            0.0.0.0/0           MARK and 0x0\nMARK       all  --  0.0.0.0/0            0.0.0.0/0           MARK set 0x3d➐\n```", "```\n# **ip rule ls**\n0:      from all lookup local\n100:    from all fwmark 0x3c lookup 60➊\n100:    from all fwmark 0x3d lookup 61➋\n--*snip*--\n# **ip route list table 60**\ndefault dev tun0 scope link➌\n# **ip route list table 61**\ndefault dev tun1 scope link➍\n```", "```\nnetwork={\n    ssid=\"psk-ap\"➊\n    key_mgmt=WPA-PSK➋\n    psk=\"password\"➌\n    priority=805➍\n}\n```", "```\nnetwork={\n    ssid=\"eap-ap\"\n    key_mgmt=WPA-EAP IEEE8021X➊\n    eap=PEAP➋\n    identity=\"android1\"➌\n    anonymous_identity=\"anon\"\n    password=\"password\"➍\n    ca_cert=\"keystore://CACERT_eapclient\"➎\n    phase2=\"auth=MSCHAPV2\"➏\n    proactive_key_caching=1\n}\n```", "```\nnetwork={\n    ssid=\"eap-ap\"\n    key_mgmt=WPA-EAP IEEE8021X\n    eap=TLS\n    identity=\"android1\"\n    ca_cert=\"keystore://CACERT_eapclient\"\n    client_cert=\"keystore://USRCERT_eapclient\"➊\n    engine_id=\"keystore\"➋\n    key_id=\"USRPKEY_eapclient\"➌\n    engine=1\n    priority=803\n    proactive_key_caching=1\n}\n```", "```\nnetwork={\n    ssid=\"eap-ap\"\n    key_mgmt=WPA-EAP IEEE8021X\n    eap=TTLS\n    identity=\"android1\"\n    anonymous_identity=\"anon\"\n    password=\"pasword\"➊\n    ca_cert=\"keystore://CACERT_eapclient\"➋\n    phase2=\"auth=GTC\"\n    proactive_key_caching=1\n}\n```", "```\nnetwork={\n    ssid=\"eap-ap\"\n    key_mgmt=WPA-EAP IEEE8021X\n    eap=PWD\n    identity=\"android1\"➊\n    password=\"password\"➋\n    proactive_key_caching=1\n}\n```", "```\nX509Certificate caCert = getCaCert();\nPrivateKey clientKey = getClientKey();\nX509Certificate clientCert = getClientCert();\n\nWifiEnterpriseConfig enterpriseConfig = new WifiEnterpriseConfig();\nenterpriseConfig.setCaCertificate(caCert);➊\nenterpriseConfig.setClientKeyEntry(clientKey, clientCert);➋\nenterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.TLS);➌\nenterpriseConfig.setPhase2Method(WifiEnterpriseConfig.Phase2.NONE);➍\nenterpriseConfig.setIdentity(\"android1\");➎\nWifiConfiguration config = new WifiConfiguration();\nconfig.enterpriseConfig = enterpriseConfig;➏\nconfig.SSID = \"\\\"eap-ap\\\"\";\nconfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);➐\nconfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);➑\n\nint netId = wm.addNetwork(config);➒\nif (netId != -1) {\n    boolean success = wm.saveConfiguration();➓\n}\n```"]