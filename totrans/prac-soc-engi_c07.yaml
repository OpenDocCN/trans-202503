- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phishing
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll create a phishing campaign. We’ll walk through the infrastructure
    you’ll need if you want to create an attack manually, and then discuss automated
    solutions, technical features like tracking pixels that you can add to your attack,
    and the factors you should consider before deployment to make your engagement
    successful. This chapter should help any social engineer get started with email-based
    attacks. It may also be a refresher for system administrators or an informative
    guide for someone coming from a Security Operations Center or compliance role.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Phishing Attack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The proper architecture to use for a phishing attack varies. The tools you’ll
    need all depend on the engagement’s scope, SOW, contract, and client’s desires.
    For example, if the client wants you to measure how many employees click a sketchy
    link in an email, all you need is a simple web server that captures HTTP GET requests
    and displays a 404 or Thank You page to the user. The responses will be stored
    in an Apache log.
  prefs: []
  type: TYPE_NORMAL
- en: From there, things get more complicated. Does the client want you to spoof or
    squat? You could *spoof* a legitimate domain, sending an email and manipulating
    the information displayed to the recipient to make it appear as if it came from
    a legitimate source, but spoofing is easy to detect.
  prefs: []
  type: TYPE_NORMAL
- en: '*Squatting*, a similar technique, is less risky, and you’re less likely to
    get caught. It involves registering a domain similar to the recipient’s, such
    as *.co.uk* to a company’s *.com* domain. This makes your emails appear to come
    from the legitimate domain—at least to those who don’t look too closely.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, do your clients want you to collect user credentials or other sensitive
    information, like password-reset questions? In that case, your email will have
    to link to a web page that asks for this information in a convincing way. Or do
    your clients want you to send malicious documents? If so, you’ll need to create
    those documents and find a place to host them without getting flagged by security
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Do they want you to use an automated phishing solution, like King Phisher or
    Gophish? If you phish regularly, you’ll likely already have an automated setup,
    but even if you do, you may need to make some changes or input your own email
    designs. The most successful social engineers understand both the technical aspects
    of the architecture and the human element that makes their attack succeed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll set up a sophisticated phishing attack designed to fool
    users and evade detection. By setting up your own VPS, email server, and landing
    page, you’ll be able to send emails that appear to come from a legitimate company
    email address. You’ll include a link in the body of the email that directs users
    to a web page, prompting them to enter their credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Secure VPS Instance for Phishing Landing Pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No matter what you do in your engagement, you’ll almost always need a VPS instance.
    Through a VPS, you’ll be able to host a landing page and run a mail server if
    you choose, all without linking your attack to your IP address.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, I’ll show you how to set up a secure VPS with DigitalOcean,
    a cloud infrastructure company that lets you use its services for security research.
    *Droplets,* which are DigitalOcean VPS instances, start at low monthly prices
    and come with backups, snapshots, storage volumes, DNS, a CDN, load balancing,
    one-click applications, and network firewalls. You can choose from a variety of
    Linux and BSD operating systems, containers, and preloaded apps like Node.js,
    LAMP, WordPress, GitLab, and Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Note that DigitalOcean has data centers in New York, San Francisco, Toronto,
    Bangalore, Amsterdam, Frankfurt, London, and Singapore. These locations can matter,
    because some regions filter certain content, and some companies filter traffic
    based on country. Additionally, if you are dealing with European citizens and
    their data, you should seek legal counsel regarding the EU GDPR.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you should set up your VPS with your domain and web server at least
    two weeks before the engagement. That’s because some mail server security platforms
    reject all mail from domains that are less than two weeks old.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a DigitalOcean Account and Droplet
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To set up a DigitalOcean droplet, you need to create an account. Navigate to
    [https://www.digitalocean.com/](https://www.digitalocean.com/) and follow the
    page’s sign-up instructions. I recommend enabling two-factor authentication for
    your account to prevent anyone from gaining access should they compromise your
    password.
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, select **Create**▶**Droplet**. Select your desired operating
    system. I recommend using either Kali or Debian Linux. Then size the droplet to
    determine the number of processors and the amount of RAM it should use. The more
    connections the droplet will have, the more processing power it will need. For
    a short engagement that targets, say, 150 users, the standard droplet should work
    without issue. Next, you can choose to use IPv6, private networking, backups,
    or your own RSA key. You can also add a hostname or spin up multiple droplets.
  prefs: []
  type: TYPE_NORMAL
- en: You should see the droplet’s IP address once it’s created. DigitalOcean will
    email you the initial root credential for the host, as well as the IP address.
    If you upload an SSH key pair, as described in the next section, you can use this
    information to log in. If you do not, DigitalOcean will email you a temporary
    root password, but you will be prompted to change it after your first login.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSH Key Pair to Secure the VPS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Having a strong authentication method is important, because this server is internet
    facing. When I used DigitalOcean to run *honeypots*—purposely vulnerable systems
    created with the aim of being attacked, allowing researchers to study the attackers’
    techniques and behavior, or alerting administrators of a system compromise—the
    hosts were hammered by scanners and would-be exploiters.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent attackers from brute-forcing your password, create an SSH key pair.
    Also known as an *RSA key pair*, an *SSH key pair* is a private and public RSA
    key used to log in. You will copy the private key (`id_rsa` by default) to your
    remote system and copy the public key (`id_rsa.pub` by default) to the *authorized_keys*
    file to allow the login to occur. SSH keys allow you to disable password authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, execute the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `ssh-keygen` command creates the key pair. By default, the keys appear in
    the */root/.ssh* directory on the VPS. You can choose to write the keys to a particular
    location by passing `-C /path/` to the `ssh-keygen` command, followed by the desired
    file path. You may also want to enter a passphrase with your SSH key to create
    a second authentication factor. You will be prompted to enter a passphrase while
    creating the key pair. If you don’t want to use one, press enter to continue.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to access the VPS key pair on the system you’ll use to control the
    VPS. To do this, use the Secure Copy Protocol (SCP) or an SCP client. If you’re
    on a Windows host, you could use *WinSCP*, which is a terminal emulator that allows
    Windows users to connect directly to Linux hosts over FTP, SSH, and Telnet. If
    you are on a Mac or Linux host, you can use an SCP client like the native terminal,
    iTerm2, Cyberduck, or Termius. This will allow you to move the RSA keys to and
    from the droplet. You can also use the SCP client later to move artifacts, such
    as files, to and from the droplet.
  prefs: []
  type: TYPE_NORMAL
- en: To copy the files using WinSCP, log in to the VPS using the credentials (password
    or RSA key pair) you created and drag and drop the files in either direction from
    within the GUI. You will need to ensure that you have the correct permissions
    for your file. Run the command `chmod 600``filename_of_private_key` to ensure
    you have the proper permissions set.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Windows Remote Access to the VPS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you have moved the RSA key to your workstation, install a client that will
    give you remote access to your VPS. You need remote access in order to set up
    the landing page and configure any additional services, such as mail servers,
    on the VPS.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, you can get remote access with the PuTTY tool. Download PuTTYgen
    from the PuTTY website, [https://www.putty.org/](https://www.putty.org/). Then,
    create a PuTTY Private Key (PPK) file to use in PuTTY and WinSCP by importing
    your RSA private key into the software. In the PuTTY Key Generator window, click
    **Generate** ([Figure 7-1](#figure7-1)).
  prefs: []
  type: TYPE_NORMAL
- en: Import the `id_rsa` key from the host into PuTTYgen. You should see the key
    generated in PPK format, as shown in [Figure 7-2](#figure7-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<PuTTY Key Generator window shows options to generate a public/private key
    pair, load an existing private key file, save the generated key, and select the
    key parameters and number of bits. “Generate” button highlighted.>>](image_fi/500983c07/f07001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-1: PuTTYgen'
  prefs: []
  type: TYPE_NORMAL
- en: '![<<PuTTY Key Generator window shows public key in PPK format for pasting into
    OpenSSH authorized_keys file.>>](image_fi/500983c07/f07002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-2: Creating a PPK'
  prefs: []
  type: TYPE_NORMAL
- en: Next, load the key into the PuTTY session. To do so, add your username or your
    droplet’s IP address into the **Host Name (or IP Address)** field ([Figure 7-3](#figure7-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<PuTTY Configuration window shows basic options for the PuTTY session. "root@127.0.1.1"
    listed in Host Name field and "22" listed in Port field. SSH connection type selected.
    BOOK saved session and Load button highlighted.>>](image_fi/500983c07/f07003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-3: PuTTY configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Then select **Connection**▶**SSH**▶**Auth** from the left pane ([Figure 7-4](#figure7-4)).
    Enter the file path to the PPK file in the **Private key file for authentication**
    field. Finally, click **Session** at the top of the left pane, and then give the
    instance a name and save it. To connect to the host, click **Open**.
  prefs: []
  type: TYPE_NORMAL
- en: '![<<PuTTY Configuration window shows options controlling SSH authentication,
    accessed from the Connection category under SSH and Auth (outlined in red). "Display
    pre-authentication banner (SSH-2 only)," "Attempt authentication using Pageant,"
    and "Attempt ''keyboard-interactive'' auth (SSH-2)" options are selected. File
    path field to upload private key file for authentication also outlined.>>](image_fi/500983c07/f07004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-4: Configuring PuTTY to use the PPK'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve configured PuTTY to use SSH keys, enter your passphrase, if
    you set one, to log in to the VPS. Update all packages and run any outstanding
    security updates to protect yourself against attacks on the public internet.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up macOS or Linux Remote Access to the VPS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you’re accessing the VPS from a macOS or Linux operating system, you’ll
    have to copy the RSA private key over first, either via SCP or copy and paste.
    You can do this from the terminal. Issue the following command to copy over the
    key (I’ve censored the IP address in this example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using a remote access tool like Termius, a paid solution that allows
    you to save SSH sessions, you won’t have to copy over the file, but you’ll need
    to copy and paste the contents of the file into your keychain. To accomplish this,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If using a terminal to connect via SSH, execute the following command to gain
    access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If everything runs properly, you will see a prompt on the VPS showing last login
    and any packages to be updated. If the key is not configured properly, you will
    see an error indicating what went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Password-Based Authentication
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’re connected, take steps to make sure your VPS remains secure.
    First, remove the ability to log in to the system itself using a password. (This
    won’t affect any web applications you install later.) Anyone who logs in to this
    VPS will need the RSA private key, which is extremely difficult (if not impossible)
    to brute-force, unlike passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the *authorized_keys* file contains the public key you created
    earlier by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open the *sshd_config* file in a text editor and change `#PasswordAuthentication
    yes` to `PasswordAuthentication no`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, then restart SSH. You will need to define the key in your `ssh`
    command to connect to the VPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then enter your passphrase if you’ve created one.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Firewall
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, you need a firewall to limit the ports on the VPS that an application
    can access, and the hosts that can access the VPS. This will keep vulnerability
    scanning bots and attackers from connecting with the VPS, preventing collateral
    damage. Install *Uncomplicated Firewall* (`ufw`) if it’s not already installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now make sure you can access the firewall by issuing `ufw enable`*.* The following
    steps create new rules to control the flow of data in and out of your VPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can run the firewall on a specific port, as opposed to all ports, by adding
    `port` `port_number` to the IP address for source or destination.
  prefs: []
  type: TYPE_NORMAL
- en: To set up the firewall, log in to DigitalOcean and navigate to the **Networking**
    menu along the left pane. Next, select **Firewalls**. If you already have a firewall
    connected to DigitalOcean, select it from the list, as shown in [Figure 7-5](#figure7-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<DigitalOcean web page displays Firewalls tab under the Networking menu.
    Shows an entry named "Web" with 0 droplets and 4 rules, created Just now.>>](image_fi/500983c07/f07005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-5: Setting up a DigitalOcean firewall'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have a firewall already, click the green **Create** button and
    choose **Firewall** from the drop-down. This should take you to a page, shown
    in [Figure 7-6](#figure7-6), that prompts you to create inbound rules. An *inbound
    rule* dictates how the VPS will interact with connections coming into it. An *outbound
    rule* dictates how the VPS will behave when trying to connect to other hosts,
    sometimes also referred to as *egress filtering*.
  prefs: []
  type: TYPE_NORMAL
- en: '![<<DigitalOcean screenshot of the Create Firewall page displays name (Book)
    and fields for inputting Inbound Rules for incoming traffic (Type, Protocol, Port
    Range, and Sources).>>](image_fi/500983c07/f07006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-6: Creating a DigitalOcean firewall'
  prefs: []
  type: TYPE_NORMAL
- en: Since you may use this host for phishing, you probably want the web server to
    be publicly accessible. Depending on your contract with the client, you may want
    to restrict this to hosts in their IP ranges. It’s also a good idea to limit IP
    ranges if you’re using the server to host malicious scripts for use in your phish.
    This would keep web crawlers and threat intelligence firms from spidering your
    website and finding it—a quick way to end up on blacklists and in threat intelligence
    feeds ingested by intrusion detection systems, SIEM programs, and other defensive
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: To give only a specific range of IP addresses access to your server, create
    an inbound rule for HTTP on TCP port 80 and HTTPS on TCP port 443 accepting inbound
    connections from **All IPv4** and **All IPv6** unless the preceding conditions
    apply. Make sure to create an inbound rule that lets you connect to the host using
    SSH from any IP addresses that you personally use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The system image from your VPS provider may not be fully up to date. To update
    a Linux system, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `apt-get update` command gives you a list of the updated packages, `apt-get
    upgrade` executes the updates, and `apt-get dist-upgrade` updates the kernel as
    well as software dependencies. The `-y` switch answers yes to most of the prompts
    you may receive.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an Email Platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have the VPS, you need to choose which service you’ll use to actually
    send your email. Although you could use a free email account from Yahoo! or Gmail,
    doing so might arouse suspicion if you’re posing as an authoritative figure. Free
    email accounts could work for certain attacks, such as ones targeting HR in which
    you pretend to be a hiring candidate. In most cases, though, it is better to use
    a domain that is not free, and so you’ll need to set up an email server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available services use several protocols to send mail, each with its strengths
    and weaknesses. In terms of choosing protocols, the blog post “Managed File Transfer
    and Network Solutions” by John Carl Villanueva ([https://jscape.com/blog/smtp-vs-imap-vs-pop3-difference/](https://jscape.com/blog/smtp-vs-imap-vs-pop3-difference/))
    is a comprehensive resource. Email protocols include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Mail Transfer Protocol (SMTP)**'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in RFC 5321\. Uses port 25 by default. It may also use port 587 and
    port 465\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Internet Message Access Protocol (IMAP)**'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in RFC 3501\. Uses port 143 (or 993 for SSL/TLS connections).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Post Office Protocol v3 (POP3)**'
  prefs: []
  type: TYPE_NORMAL
- en: Defined inRFC 1939\. Uses port 110 (or 995 for SSL/TLS connections).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you’re planning to spoof your email, you must use SMTP. POP3 and IMAP4 do
    not support spoofing but will work with squatting. If you have the autonomy to
    decide which email server to use for yourself, you can use one of a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dovecot**'
  prefs: []
  type: TYPE_NORMAL
- en: An open source IMAP and POP3 email server for Linux/Unix-like systems. It is
    lightweight, meaning it uses little memory and does not require a lot of processing.
    As with any software, you must maintain a secure configuration and keep the system
    up to date in order to remain secure. If you are doing sporadic, low volumes of
    phishing, this upkeep may not be worth the effort and time, even though the software
    is free. If you’re phishing from a large pool of domains, or sending emails multiple
    times per day, this may be a more economical solution. Since Dovecot does not
    support SMTP, it does not support spoofing. You can use Dovecot for squatting
    attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sendmail**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the original internet mail clients, first released in 1983\. It implements
    SMTP and is currently maintained by the Sendmail Consortium and Proofpoint, a
    phishing awareness and prevention company. The same considerations that are relevant
    to Dovecot exist with Sendmail. While Sendmail is open source software, its maintainers
    attempt to prevent phishing, which may make some social engineers uneasy. Since
    Sendmail uses SMTP, you can use it for either spoofing or squatting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud Email**'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft 365 is Microsoft’s cloud-based email service, and Google Workspace
    is Google’s cloud-based enterprise email. Both services charge per user, per month,
    or per year and are accessible from anywhere with an internet connection. Both
    services support SMTP, POP3, and IMAP4, although they default to IMAP. You can
    tie Microsoft 365 or Google Workspace to any domain you own, so they work for
    squatting but not spoofing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Google Mail (Gmail)**'
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, Google won’t let you send malware (even macro-enabled Office
    documents) via email or Google Drive. However, Google won’t shut you down if you
    phish. At the time of this writing, you can acquire access to Google Workspace
    for your domains through Namecheap, Bluehost, SiteGround, or GoDaddy for around
    $6 per user per month. Most phishing domains are used on a burn-and-churn basis,
    meaning they’re used for one instance of phishing per client. If you’re the only
    person doing the phishing, you need to pay for only one user. If this is the case,
    you will likely pay no more than $6 per client for a phishing engagement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When selecting one of these options, keep the following considerations in mind.
    First, spoofing is easy to catch, and many mail systems have logic in place to
    detect it. Moreover, several apps independent of the mail systems, like Exchange,
    Proofpoint, and Mimecast, can validate emails and thwart spoofing. On the other
    hand, even if your target implements anti-phishing tools like Sender Policy Framework
    (SPF), Domain Keys Identified Mail (DKIM), or Domain-based Message Authentication,
    Reporting, and Conformance (DMARC), you can still successfully perform typo and
    domain squatting. SPF, DKIM, and DMARC are technical solutions that aim to prevent
    spoofing. In reality, if implemented, they prevent other parties from spoofing
    your domain, so they are worth implementing for your reputation, but they do little
    to prevent the spoofing of your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Squatting can also bypass technologies, like Mimecast, that attempt to catch
    phishing emails by looking at statistics in the emails themselves, as well as
    age and reputation of the domain sending the email. If the sending domain does
    not have a bad reputation or use language consistent with phishing, you should
    be able to get through these filters unless administrators have set up any specific
    rules. Even if the target has SPF or another solution, sending the mail using
    cloud services such as Google Mail (for domains) and Microsoft 365 will often
    bypass their filters, since the mail servers for Google and Microsoft are almost
    universally trusted.
  prefs: []
  type: TYPE_NORMAL
- en: Third, automated phishing solutions have several methods to integrate into email
    services like Dovecot, Sendmail, or cloud providers. However, automated solutions
    may put code, watermarks, or signatures into the email that filters and other
    defensive technologies for mail can detect.
  prefs: []
  type: TYPE_NORMAL
- en: Before you configure a mail server, you need to create firewall rules in DigitalOcean
    for it and to update UFW in your droplet with information about the protocols
    (either SMTP, IMAP, or POP3) you’re using to allow the communications. Use the
    steps coming up in “Setting Up the Phishing and Infrastructure Web Server” to
    create the firewall rules for your mail server of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Purchasing Sending and Landing Page Domains
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, you need to purchase two domains: one to host the *landing page*, which
    is where you’ll redirect victims who click the link in your email, and one to
    host the site from which you’ll send the phishing email. The landing page domain
    can be cheap, like the 88-cent *.tech* or *.info* domains. You’ll apply a long
    subdomain name to the link, so making it look legitimate is less critical.'
  prefs: []
  type: TYPE_NORMAL
- en: The domain you’ll use to send the email needs to be one of the better-known
    top-level domains, like *.com*, *.net*, *.org*, *.io*, or *.us*. My main recommendation
    is to ensure that you buy one with domain privacy enabled, which *.us* domains
    don’t allow. *Domain privacy* is a service offered by domain registrars that allows
    you to put anonymized data as your domain’s WHOIS contact information. That way,
    people won’t be able to link you to the domain. Should anything occur that would
    require you to be notified, the registrar will act as an intermediary between
    you and the sender. You don’t want you or your employer’s names associated with
    a phishing domain, or threat intelligence professionals will dig relentlessly
    and enumerate all your domains and sites.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the domain you’ll be phishing from, attach it to the mail platform
    of your choice within your hosting platform and follow the prompts to gain access
    to it. If you are doing a more advanced phishing engagement, consider implementing
    a technical email control (such as SPF, DKIM, or DMARC) on your domain, since
    you’ll be squatting instead of spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the Phishing and Infrastructure Web Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have the VPS instance and email service, you must set up the web
    server that will receive incoming connections, collect credentials, host malicious
    scripts, and perform anything else you need to do to be successful for your particular
    attack. In this section, I’ll show you how to use Apache, a free and open source
    web server software package. Apache is well-documented and fairly simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Apache, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is complete, verify that Apache is in the UFW list of
    allowed processes/services by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you need to minimize the range of IP addresses that can access the Apache
    instance to prevent third parties from accessing your server. I recommend allowing
    the IP address from which you will be connecting to the VPS, any testing or quality
    assurance IP addresses, and the IP range of your target organization (ideally,
    provided in writing from your security point of contact in the contract). To restrict
    your server to this range, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the status by using the `ufw status` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the installation is complete, shut down Apache for the time being
    with these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can still make the configuration changes, bind domains, and perform other
    housekeeping tasks without Apache running. Shutting down Apache minimizes the
    possibility that the server will get picked up in security scans or spidering.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 8, you’ll clone a realistic landing page to host on this server.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Steps for Phishing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps discussed in this section are not mandatory for a good phish, but
    they provide services that clients may occasionally request.
  prefs: []
  type: TYPE_NORMAL
- en: Using Tracking Pixels to Measure How Often Your Email Is Opened
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are doing a nonautomated test, like the one described thus far in this
    chapter, you may need a means to see how many people open your email. You can
    easily accomplish this with *tracking pixels*, which are usually 1-pixel-by-1-pixel
    images that are unique to each user and rendered from a remote site that you own.
    You can then watch the access logs for instances of each ID connecting to the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML snippet to your email to set up a tracking pixel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the file that will monitor the tracking pixel, *tracker.php*. It should
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Tracking pixels are often used in marketing and sales. In phishing, they can
    create headaches and waste time for those perpetrating the attack. Automated solutions
    build them in. The number of emails opened is an overhyped metric in phishing.
    Having victims report that they received a phishing email or acted upon one is
    far more important than how many people open an email.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Phishing with Gophish
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An *automated phishing solution* is a service that lets you develop a phish
    and send it through an automated system, such as a built-in mail interface. The
    solution will often monitor information such as the number of times the phish
    was opened and by whom, the number of times a victim clicked a link in the email,
    and the time at which each event occurred. These services are convenient to use,
    and sometimes they’re the most economical option. However, because they’re well-known,
    phishes sent through them are likely to get caught and shut down.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I’ll show you how to send phishing emails with Gophish, an
    automated phishing utility written in the Go language. To use it, you need to
    have an SMTP server to send the mail through and a web server at which victims
    will land. Although you can create both of these within Gophish, doing so might
    increase your chances of detection. I suggest setting up these three firewall
    rules to prevent detection or collateral damage:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow port 3333/TCP (the port for the Gophish web admin interface) and port
    22 (the SSH port) from your network only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow port 80/TCP (the default port for your landing page, though you could
    use port 443 with an SSL/TLS certificate for more realism) from your network and
    the victim IP ranges only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow port 25/TCP (the port for SMTP traffic) in the outbound direction only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To set these rules in UFW, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s install Gophish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure Gophish to listen on the public or private IP address that you will
    use to connect to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Within *config.json*, change `admin_server listen_url` to the IP address of
    the VPS from which you’re administering the phish. Then change `phish_server listen_url`
    to the IP address or domain name to which you are sending victims:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you change the admin password after you log in. The default
    credentials for Gophish are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: I recommend going to the **Settings** menu on the left pane and changing your
    password immediately. Even if you’re the only one accessing Gophish, create a
    new user. If multiple people will log in to this account, you must create distinct
    users. To do this, click the **Users**tab, select **New User**, and then fill
    out the form on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need a place to send victims. You create this via the **Landing Pages**
    tab, under **New Landing Page** ([Figure 7-7](#figure7-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<GoPhish New Landing Page interface. Includes fields for page name, HTML,
    and redirection, "Import Site" button, and checkboxes to capture submitted data
    and passwords.>>](image_fi/500983c07/f07007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-7: Setting up a new landing page in Gophish'
  prefs: []
  type: TYPE_NORMAL
- en: You can build the landing page from scratch or copy and paste the HTML of another
    page into this.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you have to know who you’re pretending to be when you send the phishing
    emails, and which mail server (in `ip_address:port` format) needs to send the
    email. You can configure this in the **Sending Profiles** tab, under **New Sending
    Profile** ([Figure 7-8](#figure7-8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<GoPhish New Sending Profile interface. Input fields include Name, Interface
    Type, From, Host, Username, Password, and Email Headers. “Ignore Certificate Errors”
    checkbox is selected. Shows buttons for adding a customer header and sending a
    test email.>>](image_fi/500983c07/f07008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-8: Setting up a new sending profile in Gophish'
  prefs: []
  type: TYPE_NORMAL
- en: Now you know who is sending the email, how it’s getting to its destination,
    and what you want it to do, it’s time to create the actual email. One way to do
    this is to import an existing email—say, an email that Erica in HR got two weeks
    ago—and use it as a template. Gophish will use the format, style, and language
    of the email you import. You can configure this in the **Email Templates** tab
    under **New Template** ([Figure 7-9](#figure7-9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<GoPhish New Template interface. Includes fields for name, subject, and
    plaintext and HTML. "Add Tracking Image" checkbox is selected. Shows buttons for
    importing email and adding files.>>](image_fi/500983c07/f07009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-9: Setting up a new email template in Gophish'
  prefs: []
  type: TYPE_NORMAL
- en: You have everything you need. Let’s organize it into a *campaign*, which puts
    all the pieces you’ve worked on together to send to clients. You can configure
    this in the **Campaigns** tab, under **New Campaign**([Figure 7-10](#figure7-10))*.*
  prefs: []
  type: TYPE_NORMAL
- en: '![<<GoPhish New Campaign interface. Includes fields for name, email template,
    landing page, URL, launch date, send emails by, sending profile, and groups. "No
    profiles found!" red banner shown above fields and green “Launch Campaign” button
    shown below.>>](image_fi/500983c07/f07010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-10: Setting up a campaign in Gophish'
  prefs: []
  type: TYPE_NORMAL
- en: Once this form is complete, all you have to do is launch the campaign and wait
    for the results.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTTPS Support for Phishing Landing Pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some users look for the green padlock associated with HTTPS websites as a litmus
    test to see that a site was not part of a phishing attack. Attackers took notice
    and started to use HTTPS in their sites. Through the use of Let’s Encrypt, we
    can do the same for free and give our clients a more realistic experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s Encrypt is a free, automated, and open certificate authority (CA), run
    for the public’s benefit. It is a service provided by the Internet Security Research
    Group (ISRG) and is an excellent method for implementing HTTPS (for free!). Let’s
    install Let’s Encrypt for Gophish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once the installation is complete, follow the onscreen prompts to complete any
    verifications in DNS and finish the setup.
  prefs: []
  type: TYPE_NORMAL
- en: The process is similar if you’re manually setting up your phishing attack. (Note
    that the setup will not auto-renew. You will have to execute the script to renew
    this every three months, assuming you leave it up that long.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After this series of commands, you will be prompted to enter some information.
    Once all verifications have occurred, run this command to verify installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using URL Shorteners in Phishing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: URL shorteners (like *Bitly*) can make the landing page less obviously recognizable.
    When deciding whether to use them, consider the perceived level of difficulty
    of the phishing engagement and the maturity of the target organization. Some organizations
    attempt to filter shortened URLs from emails, and others train users to avoid
    these links. Whether to use shorteners is something to discuss with your security
    point of contact. If you choose to use them, understand that they may be stripped
    from the emails.
  prefs: []
  type: TYPE_NORMAL
- en: Using SpoofCard for Call Spoofing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only architecture you’ll need for a vishing attack is a call spoofing platform,
    and if it’s legal in your target’s area, a means to record the call.
  prefs: []
  type: TYPE_NORMAL
- en: '*SpoofCard* is a mobile application that allows you to spoof numbers, call
    them, record them, and even inject background noises into the call. The application
    itself is free, but you have to purchase credits to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: Timing and Delivery Considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve set up your attack, you need to actually deliver it. Before
    doing so, you should take into account two time-related factors.
  prefs: []
  type: TYPE_NORMAL
- en: The first is how much time you have between preparing the architecture and performing
    the engagement itself. The amount of time you put into the project will tell you
    how likely you are to be caught using technical controls such as email filters
    or threat intelligence feeds. A rushed project will likely be easy to detect,
    but if the client wants something more advanced, you need to have the time to
    do the appropriate research about company lingo and culture, as well as the technologies
    they use, so you can seem like an insider with authorized access when you send
    the campaign. The bottom line? Don’t rush if you don’t have to. Sometimes your
    clients will need you to move quickly, but this should be the exception, not the
    standard.
  prefs: []
  type: TYPE_NORMAL
- en: Second, choose the day and time to execute the engagement carefully. Choosing
    the proper moment takes research. For example, if you’re vishing, you could block
    your number and mute your line, and then call at the same time on the same day
    of the week every week for a few weeks before the engagement, to see who will
    answer. Also pay attention to whether you are performing your engagement during
    working hours. If you’re posing as an employee, regardless of whether you’re spoofing
    or squatting, what is that person’s work schedule and patterns? If, during a phishing
    engagement, you pose as a person who works 10-hour shifts from 6:00 AM to 5:00
    PM, Monday through Thursday, sending your email at 5:45 PM any day—or, worse,
    on Friday—is probably not a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'Case Study: The $25 Advanced Persistent Phish'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the story of how I phished an organization in a creative way and for
    a relatively small price. In doing so, I was able to send a high-quality phish,
    bypass the organization’s technical defenses, and make my way into the inboxes
    of unsuspecting employees.
  prefs: []
  type: TYPE_NORMAL
- en: On the scoping call for this engagement, my point of contact at the target company
    mentioned that the CEO was retiring within the next two weeks, and that the COO
    would be taking over. Based on this information, I devised a plan. When I shared
    my idea with the point of contact, he called me a devious madman and approved
    it. Time to get rolling on making this work!
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up my phishing attack, I followed the process described in this chapter.
    First, I spun up a DigitalOcean droplet. Because this was a short engagement with
    150 targets, I didn’t need a huge droplet with a lot of space or processing power,
    so I signed up for a $5 droplet. Since DigitalOcean bills by the hour, and the
    cost is paid at the end of the month, I had spent nothing so far. *Total cost:
    $0.*'
  prefs: []
  type: TYPE_NORMAL
- en: The schedule for this attack didn’t give me much time to collect OSINT using
    the methods discussed in Chapters 5 and 6. Instead, I dedicated my effort to enumerating
    the target company’s domains, recording names of pertinent employees, and finding
    direct quotes from the CEO and COO on the company website, in trade journals,
    and in press releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step was to buy the sending and landing page domains. The target domain
    had a *.com* top-level domain, so I bought the corresponding *.us* domain name.
    This cost about $12, because I had a promo code for the domain registration company
    Namecheap. Next, I bought something to the effect of *surveysofsatisfaction.life*
    for the web domain. The cheap domain cost me 88 cents. I subscribed to the Google
    apps for the email domain for $5 for the month. *Total cost: $17.88.*'
  prefs: []
  type: TYPE_NORMAL
- en: I configured the web domain to resolve to my droplet’s IP address. Then I installed
    a Let’s Encrypt TLS/HTTPS certificate on the domain for free. I used HTTrack to
    get a perfect clone of SurveyMonkey (as you’ll do in Chapter 8), then added a
    high-resolution logo from the target’s website to the page.
  prefs: []
  type: TYPE_NORMAL
- en: I configured the landing page to resolve to https://<target company name>.surveysofsatisfaction.life,
    making it seem like the target company had its own subdomain on the survey website.Once
    again, I used the SurveyMonkey and target company logo. I also added prompts for
    users to submit their email addresses and passwords, and then passed these credentials
    to the Apache log in an HTTP GET request.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a second page, I set up common password-reset questions: mother’s maiden
    name, first school, honeymoon location, and name of elementary school. I passed
    this information to the log in the same way.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I created a third page that said, “Sorry, this survey is closed” and
    started an infinite loop. The loop was initially a coding error, but I chose to
    leave it as a hint for the target employees that this wasn’t a legitimate survey.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I wrote the email using direct quotes from both the CEO and COO. I’d also
    uncovered a specific term, *Owner-Associates*, that the company used to refer
    to its employees, so I used that, too. I chose to send the phish posing as the
    COO. I was able to send him an email from a random account and got his email signature
    from his out-of-office reply.
  prefs: []
  type: TYPE_NORMAL
- en: 'The email said something to the effect of this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dear Owner-Associates:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you know, I will be replacing Steve as CEO next week after 37 years of dedicated,
    selfless, devoted service. These are enormous shoes to fill, but I will do my
    best. <Insert Direct Quote from COO here>.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Over the years, we have had ups and downs and seek to do better. I plan on <points
    taken from a press release>. As Steve says, <direct quote from the outgoing CEO’s
    media interviews about his retirement>.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As some of you know, I am committed to constant improvement of processes for
    the customers, partners, vendors, and most importantly, Owner-Associates. That’s
    why I have collaborated with HR to set up a SurveyMonkey survey to improve all
    aspects of <Company Name>. Please use the link below to complete this survey no
    later than close of business on Friday.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <Bitly Link to Web Domain>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <Signature stolen from out of office reply>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I confirmed with my point of contact that the phish looked acceptable and received
    the green light to go ahead. I sent the email from the Google apps in batches
    of about 10 to 20 at a time, every 5 to 10 minutes, so as to not set off any potential
    alarms. Though my emails were eventually blocked, I managed to send enough to
    receive numerous survey inputs from the target’s IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'I left the website up for a week, and then verified the information the following
    Monday and saw that I had received more input from employees. One employee had
    entered information multiple times with a new password. I coordinated with the
    point of contact to end the engagement. I preserved the droplet for another week
    in case he wanted any more information. I collected metrics, controlling for out-of-office
    replies and emails not sent (we’ll discuss collecting metrics in Chapter 9). Per
    the contract, I was not permitted to give him the passwords entered, only the
    names of the employees who entered their passwords. I took backups of the web
    pages and the Apache log for retention and deleted the droplet. A total of two
    weeks had elapsed. *Total cost: $22.88.*'
  prefs: []
  type: TYPE_NORMAL
- en: On the 29th day of the subscription, I logged in to the email from which I’d
    sent the phish to verify that nothing of value was in there and then canceled
    the service. An employee had added that email address to several highly sensitive
    emails and mailing lists. *Priceless.*I advised my point of contact immediately
    and forwarded the emails to him. I wrote up the report and then ended the engagement.
  prefs: []
  type: TYPE_NORMAL
- en: This great phish could have been disastrous if I were a true bad actor, and
    it cost me less than $25\.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the information I’ve provided, how could this attack have been mitigated
    or prevented?
  prefs: []
  type: TYPE_NORMAL
- en: The company should have trained all users on how to evaluate emails for suspicious
    context. Teach them to ask security for help when in doubt, especially when shortened
    URLs are involved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The company should have implemented Proofpoint or a similar solution to add
    the word *[External]* to the beginning of the subject line of the email.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The company should have trained employees to evaluate the URLs of the pages
    to which they navigate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better coordination could have occurred between the security and networking
    teams. Better communication could have prevented the networking lead from emailing
    the company about the email, thus drawing attention to the email instead of quietly
    removing it from the inbox queue before the email.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should have been a better incident response plan for social engineering
    attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Successful social engineering engagements require significant planning and technical
    setup. This chapter covered how to set up a phishing attack that collected user
    credentials without getting caught. You first set up a DigitalOcean droplet, secured
    the droplet, and configured the droplet’s firewall. You then learned about considerations
    for setting up a realistic email server.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have to make many decisions in the process of phishing. We discussed
    how best to select a domain for your email account, as well as for the landing
    page to which you’ll direct users. We also discussed add-ons like tracking pixels,
    automated phishing services, HTTPS support, and URL shorteners. Equally important
    on the nontechnical side, we discussed the timing of your attack.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll set up a realistic clone of a legitimate website
    that you could use to harvest user credentials and sensitive information—or for
    some other devious purpose.
  prefs: []
  type: TYPE_NORMAL
