- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Data Breaches and Bug Bounties
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据泄露和漏洞赏金
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: The real-world API breaches and bounties covered in this chapter should illustrate
    how actual hackers have exploited API vulnerabilities, how vulnerabilities can
    be combined, and the significance of the weaknesses you might discover.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的真实世界API泄露和漏洞赏金应该能展示实际黑客如何利用API漏洞，漏洞是如何组合的，以及你可能发现的弱点的重要性。
- en: Remember that an app’s security is only as strong as the weakest link. If you’re
    facing the best firewalled, multifactor-based, zero-trust app but the blue team
    hasn’t dedicated resources to securing their APIs, there is a security gap equivalent
    to the Death Star’s thermal exhaust port. Moreover, these insecure APIs and exhaust
    ports are often intentionally exposed to the outside universe, offering a clear
    pathway to compromise and destruction. Use common API weaknesses like the following
    to your advantage when hacking.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，一个应用的安全性只有在最薄弱环节的保护下才算强大。如果你面对的是防火墙最强、基于多因素认证的零信任应用，但蓝队并没有投入资源保护他们的API，那么就会有一个类似死星热排气口的安全漏洞。此外，这些不安全的API和排气口往往故意暴露给外界宇宙，为破坏和摧毁提供了明显的路径。在黑客攻击时，可以利用以下常见的API漏洞来获取优势。
- en: The Breaches
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泄露事件
- en: After a data breach, leak, or exposure, people often point fingers and cast
    blame. I like to think of them instead as costly learning opportunities. To be
    clear, a *data breach* refers to a confirmed instance of a criminal exploiting
    a system to compromise the business or steal data. A *leak* or *exposure* is the
    discovery of a weakness that could have led to the compromise of sensitive information,
    but it isn’t clear whether an attacker actually did compromise the data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据泄露、泄漏或曝光之后，人们经常相互指责并甩锅。我更喜欢将这些视为昂贵的学习机会。需要明确的是，*数据泄露*指的是犯罪分子利用系统漏洞来危害企业或窃取数据的已确认事件。*泄漏*或*曝光*则指的是发现了可能导致敏感信息泄露的漏洞，但尚不清楚是否真的有攻击者成功泄露了数据。
- en: When data breaches take place, attackers generally don’t disclose their findings,
    as the ones who brag online about the details of their conquests often end up
    arrested. The organizations that were breached also rarely disclose what happened,
    either because they are too embarrassed, they’re protecting themselves from additional
    legal recourse, or (in the worst case) they don’t know about it. For that reason,
    I will provide my own guess as to how these compromises took place.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据泄露发生时，攻击者通常不会披露他们的发现，因为那些在网上炫耀他们战利品细节的人通常会最终被逮捕。遭到攻击的组织也很少披露发生了什么，可能是因为他们太尴尬了，或者是为了保护自己免受额外的法律追诉，或者（在最糟糕的情况下）他们根本不知道发生了什么。因此，我将提供我自己对于这些数据泄露是如何发生的猜测。
- en: Peloton
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Peloton
- en: '**Data quantity:** More than three million Peloton subscribers'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据量：** 超过三百万个Peloton订阅用户'
- en: '**Type of data:** User IDs, locations, ages, genders, weights, and workout
    information'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据类型：** 用户ID、位置、年龄、性别、体重和锻炼信息'
- en: In early 2021, security researcher Jan Masters disclosed that unauthenticated
    API users could query the API and receive information for all other users. This
    data exposure is particularly interesting, as US president Joe Biden was an owner
    of a Peloton device at the time of the disclosure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年初，安全研究员Jan Masters披露了未经认证的API用户可以查询API并获取所有其他用户的信息。这一数据曝光特别有趣，因为美国总统乔·拜登在披露时正是Peloton设备的拥有者。
- en: 'As a result of the API data exposure, attackers could use three different methods
    to obtain sensitive user data: sending a request to the */stats/workouts/details*
    endpoint, sending requests to the */api/user/search* feature, and making unauthenticated
    GraphQL requests.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于API数据泄露，攻击者可以使用三种不同的方法获取敏感用户数据：向*/stats/workouts/details*端点发送请求、向*/api/user/search*功能发送请求，以及进行未经认证的GraphQL请求。
- en: The /stats/workouts/details Endpoint
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: /stats/workouts/details端点
- en: This endpoint is meant to provide a user’s workout details based on their ID.
    If a user wanted their data to be private, they could select an option that was
    supposed to conceal it. The privacy feature did not properly function, however,
    and the endpoint returned data to any consumer regardless of authorization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个端点旨在根据用户的ID提供他们的锻炼详细信息。如果用户希望他们的数据是私密的，他们可以选择一个应该隐藏数据的选项。然而，隐私功能并未正常运作，端点返回了数据给任何消费者，而不管是否授权。
- en: 'By specifying user IDs in the POST request body, an attacker would receive
    a response that included the user’s age, gender, username, workout ID, and Peloton
    ID, as well as a value indicating whether their profile was private:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 POST 请求体中指定用户 ID，攻击者将收到包含用户年龄、性别、用户名、锻炼 ID 和 Peloton ID 的响应，并且还会显示一个值，指示其个人资料是否为私密：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The IDs used in the attack could be brute-forced or, better yet, gathered by
    using the web application, which would automatically populate user IDs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击中使用的 ID 可以通过暴力破解获得，或者更好的是，可以通过使用 web 应用程序收集，这样应用程序会自动填充用户 ID。
- en: User Search
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户搜索
- en: User search features can easily fall prey to business logic flaws. A GET request
    to the */api/user/search/:<username>* endpoint revealed the URL that led to the
    user’s profile picture, location, ID, profile privacy status, and social information
    such as their number of followers. Anyone could use this data exposure feature.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用户搜索功能容易受到业务逻辑漏洞的影响。向 */api/user/search/:<username>* 端点发送 GET 请求时，会暴露出通向用户个人资料照片、位置、ID、隐私状态以及社交信息（如关注者数量）的
    URL。任何人都可以利用这一数据暴露功能。
- en: GraphQL
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GraphQL
- en: 'Several GraphQL endpoints allowed the attacker to send unauthenticated requests.
    A request like the following would provide a user’s ID, username, and location:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 几个 GraphQL 端点允许攻击者发送未经身份验证的请求。像以下这样的请求将提供用户的 ID、用户名和位置：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By using the `REDACTED`user ID as a payload position, an unauthenticated attacker
    could brute-force user IDs to obtain private user data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `REDACTED` 用户 ID 作为有效载荷位置，未经身份验证的攻击者可以暴力破解用户 ID，以获取私密用户数据。
- en: The Peloton breach is a demonstration of how using APIs with an adversarial
    mindset can result in significant findings. It also goes to show that if an organization
    is not protecting one of its APIs, you should treat this as a rallying call to
    test its other APIs for weaknesses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Peloton 数据泄露展示了使用 API 时抱有敌意心态可能导致的重大发现。它也表明，如果一个组织没有保护其某个 API，你应该将此视为一个号召，去测试其其他
    API 是否存在漏洞。
- en: USPS Informed Visibility API
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: USPS Informed Visibility API
- en: '**Data quantity:** Approximately 60 million exposed USPS users'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据量：**大约6000万暴露的 USPS 用户'
- en: '**Type of data:** Email, username, real-time package updates, mailing address,
    phone number'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据类型：**电子邮件、用户名、实时包裹更新、邮寄地址、电话号码'
- en: 'In November 2018, *KrebsOnSecurity* broke the story that the US Postal Service
    (USPS) website had exposed the data of 60 million users. A USPS program called
    Informed Visibility made an API available to authenticated users so that consumers
    could have near real-time data about all mail. The only problem was that any USPS
    authenticated user with access to the API could query it for any USPS account
    details. To make things worse, the API accepted wildcard queries. This means an
    attacker could easily request the user data for, say, every Gmail user by using
    a query like this one: */api/v1/find?email=*@gmail.com*.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年11月，*KrebsOnSecurity* 揭露了美国邮政服务（USPS）网站泄露了6000万用户的数据。USPS 的一个名为 Informed
    Visibility 的程序向经过身份验证的用户提供了一个 API，使消费者能够获取所有邮件的近实时数据。唯一的问题是，任何拥有 API 访问权限的 USPS
    身份验证用户都可以查询任意 USPS 账户的详细信息。更糟糕的是，API 允许通配符查询。这意味着攻击者可以轻松地通过以下查询请求例如所有 Gmail 用户的数据：*/api/v1/find?email=*@gmail.com*。
- en: 'Besides the glaring security misconfigurations and business logic vulnerabilities,
    the USPS API was also vulnerable to an excessive data exposure issue. When the
    data for an address was requested, the API would respond with all records associated
    with that address. A hacker could have detected the vulnerability by searching
    for various physical addresses and paying attention to the results. For example,
    a request like the following could have displayed the records of all current and
    past occupants of the address:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了明显的安全配置错误和业务逻辑漏洞外，USPS API 还存在过度数据暴露的问题。当请求一个地址的相关数据时，API 会返回与该地址相关的所有记录。黑客可以通过搜索各种物理地址并留意结果来发现这一漏洞。例如，以下请求可能会显示该地址的所有当前和过去居住者的记录：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An API with this sort of excessive data exposure might respond with something
    like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 具有这种过度数据暴露的 API 可能会返回类似如下的内容：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The USPS data exposure is a great example of why more organizations need API-focused
    security testing, whether that be through a bug bounty program or penetration
    testing. In fact, the Office of Inspector General of the Informed Visibility program
    had conducted vulnerability assessment a month prior to the release of the *KrebsOnSecurity*
    article. The assessors failed to mention anything about any APIs, and in the Office
    of Inspector General’s “Informed Visibility Vulnerability Assessment,” the testers
    determined that “overall, the IV web application encryption and authentication
    were secure” ([https://www.uspsoig.gov/sites/default/files/document-library-files/2018/IT-AR-19-001.pdf](https://www.uspsoig.gov/sites/default/files/document-library-files/2018/IT-AR-19-001.pdf)).
    The public report also includes a description of the vulnerability-scanning tools
    used in order to test the web application that provided the USPS testers with
    false-negative results. This means that their tools assured them that nothing
    was wrong when in fact there were massive problems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: USPS数据泄露是一个很好的例子，说明为什么更多的组织需要进行以API为中心的安全测试，无论是通过漏洞奖励计划还是渗透测试。事实上，信息可见性项目的监察长办公室在*《KrebsOnSecurity》*文章发布前一个月进行了漏洞评估。评估人员未提及任何关于API的内容，而在监察长办公室的“信息可见性漏洞评估”报告中，测试人员判断“整体上，IV网页应用程序的加密和身份验证是安全的”（[https://www.uspsoig.gov/sites/default/files/document-library-files/2018/IT-AR-19-001.pdf](https://www.uspsoig.gov/sites/default/files/document-library-files/2018/IT-AR-19-001.pdf)）。该公开报告还包括了描述所使用的漏洞扫描工具，这些工具用来测试网页应用程序，但却给USPS的测试人员带来了假阴性结果。这意味着，他们的工具向他们保证没有问题，实际上却存在严重的问题。
- en: If any security testing had focused on the API, the testers would have discovered
    glaring business logic flaws and authentication weaknesses. The USPS data exposure
    shows how APIs have been overlooked as a credible attack vector and how badly
    they need to be tested with the right tools and techniques.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何安全测试专注于API，测试人员将会发现明显的业务逻辑漏洞和身份验证弱点。USPS数据泄露展示了API作为一种攻击向量如何被忽视，以及它们多么急需用正确的工具和技术进行测试。
- en: T-Mobile API Breach
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: T-Mobile API数据泄露
- en: '**Data quantity:** More than two million T-Mobile customers'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据量：** 超过200万T-Mobile客户'
- en: '**Type of data:** Name, phone number, email, date of birth, account number,
    billing ZIP code'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据类型：** 姓名、电话号码、电子邮件、出生日期、账户号码、账单邮政编码'
- en: In August 2018, T-Mobile posted an advisory to its website stating that its
    cybersecurity team had “discovered and shut down an unauthorized access to certain
    information.” T-Mobile also alerted 2.3 million customers over text message that
    their data was exposed. By targeting one of T-Mobile’s APIs, the attacker was
    able to obtain customer names, phone numbers, emails, dates of birth, account
    numbers, and billing ZIP codes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年8月，T-Mobile在其官网发布了一则公告，称其网络安全团队“发现并关闭了对某些信息的未授权访问。”T-Mobile还通过短信通知了230万用户他们的数据遭到暴露。通过攻击T-Mobile的一个API，攻击者得以获取客户的姓名、电话号码、电子邮件、出生日期、账户号码和账单邮政编码。
- en: 'As is often the case, T-Mobile has not publicly shared the specific details
    of the breach, but we can go out on a limb and make a guess. One year earlier,
    a YouTube user discovered and disclosed an API vulnerability that may have been
    similar to the vulnerability that was exploited. In a video titled “T-Mobile Info
    Disclosure Exploit,” user “moim” demonstrated how to exploit the T-Mobile Web
    Services Gateway API. This earlier vulnerability allowed a consumer to access
    data by using a single authorization token and then adding any user’s phone number
    to the URL. The following is an example of the data returned from the request:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如常见的情况一样，T-Mobile没有公开泄露的具体细节，但我们可以大胆猜测。一年前，一名YouTube用户发现并公开了一个可能与被利用的漏洞相似的API漏洞。在一段名为“针对T-Mobile信息泄露漏洞利用”的视频中，用户“moim”演示了如何利用T-Mobile
    Web服务网关API。这个早期的漏洞允许消费者通过使用单一授权令牌，并在URL中添加任意用户的电话号码来访问数据。以下是请求返回的数据示例：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you look at the endpoint, I hope some API vulnerabilities are already coming
    to mind. If you can search for your own information using the `msisdn`parameter,
    can you use it to search for other phone numbers? Indeed, you can! This is a BOLA
    vulnerability. What’s worse, phone numbers are very predictable and often publicly
    available. In the exploit video, moim takes a random T-Mobile phone number from
    a dox attack on Pastebin and successfully obtains that customer’s information.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看这个端点时，我希望你已经开始联想到一些 API 漏洞。如果你能使用 `msisdn` 参数来查询自己的信息，你能否用它查询其他电话号码？实际上，你是可以的！这就是
    BOLA 漏洞。更糟糕的是，电话号码非常可预测，并且通常是公开的。在利用视频中，moim 从 Pastebin 上的一个信息泄露攻击中随机获取了一个 T-Mobile
    电话号码，并成功地获取了该客户的信息。
- en: This attack is only a proof of concept, but it has room for improvement. If
    you find an issue like this during an API test, I recommend working with the provider
    to obtain additional test accounts with separate phone numbers to avoid exposing
    actual customer data during your testing. Exploit the findings and then describe
    the impact a real attack could have on the client’s environment, particularly
    if an attacker brute-forces phone numbers and breaches a significant amount of
    client data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个攻击只是一个概念验证，但仍有改进的空间。如果你在进行 API 测试时发现类似的问题，我建议你与提供商合作，获取带有不同电话号码的额外测试账户，以避免在测试过程中暴露真实的客户数据。利用这些发现，然后描述一次真实攻击可能对客户环境造成的影响，特别是如果攻击者暴力破解电话号码并泄露大量客户数据。
- en: After all, if this API was the one responsible for the breach, the attacker
    could have easily brute-forced phone numbers to gather the 2.3 million that were
    leaked.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，如果这个 API 是导致数据泄露的罪魁祸首，攻击者本可以轻松地暴力破解电话号码，从而收集到那 230 万个泄露的电话号码。
- en: The Bounties
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 悬赏
- en: Not only do bug bounty programs reward hackers for finding and reporting weaknesses
    that criminals would have otherwise compromised, but their write-ups are also
    an excellent source of API hacking lessons. If you pay attention to them, you
    might learn new techniques to use in your own testing. You can find write-ups
    on bug bounty platforms such as HackerOne and Bug Crowd or from independent sources
    like Pentester Land, ProgrammableWeb, and APIsecurity.io.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞悬赏计划不仅奖励黑客发现并报告那些犯罪分子本可能利用的弱点，而且他们的报告也是学习 API 黑客技术的绝佳资源。如果你留心观察这些报告，可能会学到一些可以在自己测试中使用的新技巧。你可以在像
    HackerOne 和 Bug Crowd 这样的漏洞悬赏平台上找到这些报告，或者在独立的来源中找到，例如 Pentester Land、ProgrammableWeb
    和 APIsecurity.io。
- en: The reports I present here represent a small sample of the bounties out there.
    I selected these three examples to capture the diverse range of issues bounty
    hunters come across and the sorts of attacks they use. As you’ll see, in some
    instances these hackers dive deep into an API by combining exploit techniques,
    following numerous leads, and implementing novel web application attacks. You
    can learn a lot from bounty hunters.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里展示的报告仅代表其中一小部分悬赏内容。我选择了这三个例子，旨在展示漏洞猎人在捕获漏洞过程中遇到的多样问题和他们使用的攻击方式。正如你所看到的，在某些情况下，这些黑客通过结合利用技巧、追踪多个线索以及实施新颖的
    Web 应用攻击，深入挖掘了一个 API。你可以从漏洞猎人那里学到很多。
- en: The Price of Good API Keys
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优质 API 密钥的代价
- en: '**Bug bounty hunter:** Ace Candelario'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**漏洞猎人：** Ace Candelario'
- en: '**Bounty:** $2,000'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**悬赏：** $2,000'
- en: 'Candelario began his bug hunt by investigating a JavaScript source file on
    his target, searching it for terms such as *api*, *secret*, and *key* that might
    have indicated a leaked secret. Indeed, he discovered an API key being used for
    BambooHR human resources software. As you can see in the JavaScript, the key was
    base64 encoded:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Candelario 开始他的漏洞狩猎工作时，首先调查了目标网站上的一个 JavaScript 源文件，搜索其中可能暗示泄露密钥的词汇，比如 *api*、*secret*
    和 *key*。果然，他发现了一个用于 BambooHR 人力资源软件的 API 密钥。正如你所看到的，这个密钥是 base64 编码的：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Because the code snippet includes the HR software endpoint as well, any attacker
    who discovered this code could try to pass this API key off as their own parameter
    in an API request to the endpoint. Alternatively, they could decode the base64-encoded
    key. In this example, you could do the following to see the encoded credentials:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因为代码片段中也包含了 HR 软件的端点，所以任何发现该代码的攻击者都可能尝试将这个 API 密钥当作自己的参数，发送 API 请求到该端点。或者，他们也可以解码
    base64 编码的密钥。在这个例子中，你可以做以下操作来查看编码的凭证：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, you would likely already have a strong case for a vulnerability
    report. Still, you could go further. For example, you could attempt to use the
    credentials on the HR site to prove that you could access the target’s sensitive
    employee data. Candelario did so and used a screen capture of the employee data
    as his proof of concept.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到这时，你可能已经有了一个强有力的漏洞报告。尽管如此，你仍然可以进一步行动。例如，你可以尝试使用这些凭证访问 HR 网站，以证明你能够访问目标的敏感员工数据。Candelario
    就这样做，并使用员工数据的截图作为他的概念验证。
- en: Exposed API keys like this one are an example of a broken authentication vulnerability,
    and you’ll typically find them during API discovery. Bug bounty rewards for the
    discovery of these keys will depend on the severity of the attack in which they
    can be used.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的暴露 API 密钥是身份验证漏洞的一个例子，你通常会在 API 发现过程中找到它们。发现这些密钥的漏洞悬赏将取决于它们能用于的攻击严重性。
- en: '**Lessons Learned**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验教训**'
- en: Dedicate time to researching your target and discovering APIs.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花时间研究你的目标并发现 API。
- en: Always keep an eye out for credentials, secrets, and keys; then test what you
    can do with your findings.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时刻留意凭证、密钥和秘密信息，并测试你能利用这些发现做些什么。
- en: Private API Authorization Issues
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 私有 API 授权问题
- en: '**Bug bounty hunter:** Omkar Bhagwat'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**漏洞奖励猎人：** Omkar Bhagwat'
- en: '**Bounty:** $440'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**奖励：** $440'
- en: By performing directory enumeration, Bhagwat discovered an API and its documentation
    located at *academy.target.com/api/docs*. As an unauthenticated user, Omkar was
    able to find the API endpoints related to user and admin management. Moreover,
    when he sent a GET request for the */ping* endpoint, Bhagwat noticed that the
    API responded to him without using any authorization tokens (see [Figure 15-1](#figure15-1)).
    This piqued Bhagwat’s interest in the API. He decided to thoroughly test its capabilities.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行目录枚举，Bhagwat 发现了一个 API 及其文档，位于 *academy.target.com/api/docs*。作为一个未认证用户，Omkar
    能够找到与用户和管理员管理相关的 API 端点。此外，当他发送 GET 请求到 */ping* 端点时，Bhagwat 注意到该 API 在没有使用任何授权令牌的情况下响应了他（见
    [图 15-1](#figure15-1)）。这引起了 Bhagwat 对该 API 的兴趣，他决定彻底测试它的功能。
- en: '![Screenshot of API documentation for the /ping endpoint](image_fi/502444c15/F15001.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![API 文档中 /ping 端点的截图](image_fi/502444c15/F15001.png)'
- en: 'Figure 15-1: An example Omkar Bhagwat provided for his bug bounty write-up
    that demonstrates the API responding to his */ping* request with a “pong” response'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-1：Omkar Bhagwat 为漏洞奖励报告提供的示例，展示了 API 在回应他的 */ping* 请求时的 “pong” 响应
- en: While testing other endpoints, Bhagwat eventually received an API response containing
    the error “authorization parameters are missing.” He searched the site and found
    that many requests used an authorization Bearer token, which was exposed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试其他端点时，Bhagwat 最终收到了一条包含“授权参数丢失”的 API 响应。他搜索了该网站，发现许多请求都使用了暴露的授权 Bearer 令牌。
- en: By adding that Bearer token to a request header, Bhagwat was able to edit user
    accounts (see [Figure 15-2](#figure15-2)). He could then perform administrative
    functions, such as deleting, editing, and creating new accounts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将该 Bearer 令牌添加到请求头中，Bhagwat 能够编辑用户账户（见 [图 15-2](#figure15-2)）。他然后可以执行管理员操作，如删除、编辑和创建新账户。
- en: '![Screenshot of a POST request in Burp Suite submitting a token, ID, and username
    to the api/user/edit endpoint](image_fi/502444c15/F15002.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![在 Burp Suite 中提交令牌、ID 和用户名到 api/user/edit 端点的 POST 请求截图](image_fi/502444c15/F15002.png)'
- en: 'Figure 15-2: Omkar’s successful API request to edit a user’s account password'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-2：Omkar 成功的 API 请求，修改用户账户密码
- en: Several API vulnerabilities led to this exploitation. The API documentation
    disclosed sensitive information about how the API operated and how to manipulate
    user accounts. There is no business purpose to making this documentation available
    to the public; if it weren’t available, an attacker would have likely moved on
    to the next target without stopping to investigate.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 几个 API 漏洞导致了这一攻击。API 文档泄露了关于 API 操作和如何操作用户账户的敏感信息。公开这些文档没有任何商业目的；如果没有这些文档，攻击者可能会直接跳过此目标，继续寻找下一个目标。
- en: By thoroughly investigating the target, Bhagwat was able to discover a broken
    authentication vulnerability in the form of an exposed authorization Bearer token.
    Using the Bearer token and documentation, he then found a BFLA.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过彻底调查目标，Bhagwat 发现了一个暴露的授权 Bearer 令牌形式的身份验证漏洞。利用该 Bearer 令牌和文档，他接着发现了一个 BFLA。
- en: '**Lessons Learned**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验教训**'
- en: Launch a thorough investigation of a web application when something piques your
    interest.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当某个事物引起你的兴趣时，启动对Web应用程序的彻底调查。
- en: API documentation is a gold mine of information; use it to your advantage.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API文档是信息的宝藏，利用它对你有利。
- en: Combine your findings to discover new vulnerabilities.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的发现结合起来，发现新的漏洞。
- en: 'Starbucks: The Breach That Never Was'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Starbucks：从未发生的漏洞事件
- en: '**Bug bounty hunter:** Sam Curry'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**漏洞赏金猎人：** Sam Curry'
- en: '**Bounty:** $4,000'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**赏金：** $4,000'
- en: Curry is a security researcher and bug hunter. While participating in Starbucks’
    bug bounty program, he discovered and disclosed a vulnerability that prevented
    a breach of nearly 100 million personally identifiable information (PII) records
    belonging to Starbucks’ customers. According to the Net Diligence breach calculator,
    a PII data breach of this size could have cost Starbucks $100 million in regulatory
    fines, $225 million in crisis management costs, and $25 million in incident investigation
    costs. Even at a conservative estimate of $3.50 per record, a breach of that size
    could have resulted in a bill of around $350 million. Sam’s finding was epic,
    to say the least.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Curry是一个安全研究员和漏洞猎人。在参与Starbucks的漏洞赏金计划时，他发现并披露了一个漏洞，阻止了近1亿个Starbucks客户的个人身份信息（PII）记录泄露。根据Net
    Diligence的泄露计算器，这么大规模的PII数据泄露可能会让Starbucks支付1亿美元的监管罚款，2.25亿美元的危机管理费用，以及2500万美元的事件调查费用。即使按照每条记录3.50美元的保守估算，这样的泄露也可能导致大约3.5亿美元的费用。Sam的发现，至少可以说，是史诗般的。
- en: 'On his blog at [https://samcurry.net](https://samcurry.net), Curry provides
    a play-by-play of his approach to hacking the Starbucks API. The first thing that
    caught his interest was the fact that the Starbucks gift card purchase process
    included API requests containing sensitive information to the endpoint */bff/proxy*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的博客[https://samcurry.net](https://samcurry.net)上，Curry详细介绍了他入侵Starbucks API的过程。最吸引他注意的是，Starbucks的礼品卡购买过程包含了带有敏感信息的API请求，发送到`*/bff/proxy*`端点：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As Curry explains on his blog, *bff* stands for “backend for frontend,” meaning
    the application passes the request to another host to provide the functionality.
    In other words, Starbucks was using a proxy to transfer data between the external
    API and an internal API endpoint.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Curry在博客中解释的那样，*bff*代表“前端的后端”，意味着应用程序将请求传递给另一个主机以提供功能。换句话说，Starbucks使用了一个代理来在外部API和内部API端点之间传输数据。
- en: 'Curry attempted to probe this */bff/proxy/orchestra* endpoint but found it
    wouldn’t transfer user input back to the internal API. However, he discovered
    a */bff/proxy/user:id* endpoint that did allow user input to make it beyond the
    proxy:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Curry尝试探测这个`*/bff/proxy/orchestra*`端点，但发现它无法将用户输入转发到内部API。然而，他发现了一个`*/bff/proxy/user:id*`端点，该端点允许用户输入通过代理传输：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By using `..\` at the end of the path, Curry was attempting to traverse the
    current working directory and see what else he could access on the server. He
    continued to test for various directory traversal vulnerabilities until he sent
    the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在路径末尾使用`..\`，Curry试图遍历当前工作目录，并查看他可以访问服务器上的其他内容。他继续测试各种目录遍历漏洞，直到发送了以下内容：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This request resulted in a different error message:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求导致了一个不同的错误信息：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This sudden change in an error request meant Curry was onto something. He used
    Burp Suite Intruder to brute-force various directories until he came across a
    Microsoft Graph instance using */search/v1/accounts*. Curry queried the Graph
    API and captured a proof of concept that demonstrated he had access to an internal
    customer database containing IDs, usernames, full names, emails, cities, addresses,
    and phone numbers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误请求的突然变化意味着Curry发现了某些东西。他使用Burp Suite Intruder暴力破解不同的目录，直到他找到了一个使用*/search/v1/accounts*的Microsoft
    Graph实例。Curry查询了Graph API，并捕获了一个概念验证，证明他可以访问一个包含ID、用户名、全名、电子邮件、城市、地址和电话号码的内部客户数据库。
- en: Because he knew the syntax of the Microsoft Graph API, Curry found that he could
    include the query parameter `$count=true` to get a count of the number of entries,
    which came up to 99,356,059, just shy of 100 million.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因为他了解Microsoft Graph API的语法，Curry发现他可以通过添加查询参数`$count=true`来获取条目数，总数为99,356,059，接近100百万。
- en: Curry found this vulnerability by paying close attention to the API’s responses
    and filtering results in Burp Suite, allowing him to find a unique status code
    of 400 among all the standard 404 errors. If the API provider hadn’t disclosed
    this information, the response would have blended in with all the other 404 errors,
    and an attacker would likely have moved on to another target.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Curry 通过密切关注 API 的响应并在 Burp Suite 中过滤结果，找到了一个独特的 400 状态码，这在所有标准的 404 错误中是独一无二的。如果
    API 提供者没有披露这个信息，响应可能会与其他所有的 404 错误混合，攻击者很可能会转向另一个目标。
- en: By combining the information disclosure and security misconfiguration, he was
    able to brute-force the internal directory structure and find the Microsoft Graph
    API. The additional BFLA vulnerability allowed Curry to use administrative functionality
    to perform user account queries.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合信息泄露和安全配置错误，他能够暴力破解内部目录结构并找到 Microsoft Graph API。额外的 BFLA 漏洞使 Curry 能够使用管理功能执行用户账户查询。
- en: '**Lessons Learned**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验教训**'
- en: Pay close attention to subtle differences between API responses. Use Burp Suite
    Comparer or carefully compare requests and responses to identify potential weaknesses
    in an API.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密切关注 API 响应之间的细微差异。使用 Burp Suite Comparer 或仔细对比请求和响应，以识别 API 中的潜在弱点。
- en: Investigate how the application or WAF handles fuzzing and directory traversal
    techniques.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查应用程序或 WAF 如何处理模糊测试和目录遍历技术。
- en: Leverage evasive techniques to bypass security controls.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用回避技术绕过安全控制。
- en: An Instagram GraphQL BOLA
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个 Instagram GraphQL BOLA
- en: '**Bug bounty hunter:** Mayur Fartade'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞赏金猎人：** Mayur Fartade'
- en: '**Bounty:** $30,000'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**赏金：** $30,000'
- en: In 2021, Fartade discovered a severe BOLA vulnerability in Instagram that allowed
    him to send POST requests to the GraphQL API located at */api/v1/ads/graphql/*
    to view the private posts, stories, and reels of other users.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2021 年，Fartade 在 Instagram 上发现了一个严重的 BOLA 漏洞，使他能够向位于 */api/v1/ads/graphql/*
    的 GraphQL API 发送 POST 请求，查看其他用户的私密帖子、故事和短视频。
- en: 'The issue stemmed from a lack of authorization security controls for requests
    involving a user’s media ID. To discover the media ID, you could use brute force
    or capture the ID through other means, such as social engineering or XSS. For
    example, Fartade used a POST request like the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 问题源于缺乏针对涉及用户媒体 ID 请求的授权安全控制。要发现媒体 ID，可以使用暴力破解或通过其他方式获取 ID，如社交工程或 XSS。例如，Fartade
    使用了如下的 POST 请求：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By targeting the `MEDIA_ID` parameter and providing a null value for `access_token`,
    Fartade was able to view the details of other users’ private posts:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过针对 `MEDIA_ID` 参数并为 `access_token` 提供空值，Fartade 能够查看其他用户私密帖子的详细信息：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This BOLA allowed Fartade to make requests for information simply by specifying
    the media ID of a given Instagram post. Using this weakness, he was able to gain
    access to details such as likes, comments, and Facebook-linked pages of any user’s
    private or archived posts.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 BOLA 漏洞使 Fartade 仅通过指定给定 Instagram 帖子的媒体 ID 就能发起信息请求。利用这一弱点，他能够访问如喜欢、评论以及与
    Facebook 关联的任何用户私密或归档帖子等详细信息。
- en: '**Lessons Learned**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验教训**'
- en: Make an effort to seek out GraphQL endpoints and apply the techniques covered
    in this book; the payout could be huge.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 努力寻找 GraphQL 端点，并应用本书中涵盖的技术；回报可能非常丰厚。
- en: When at first your attacks don’t succeed, combine evasive techniques, such as
    by using null bytes with your attacks, and try again.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当第一次攻击失败时，结合回避技术，例如通过使用空字节与攻击一起使用，再次尝试。
- en: Experiment with tokens to bypass authorization requirements.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用令牌绕过授权要求。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter used API breaches and bug bounty reports to demonstrate how you
    might be able to exploit common API vulnerabilities in real-world environments.
    Studying the tactics of adversaries and bug bounty hunters will help you expand
    your own hacking repertoire to better help secure the internet. These stories
    also reveal how much low-hanging fruit is out there. By combining easy techniques,
    you can create an API hacking masterpiece.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用了 API 漏洞和漏洞赏金报告，展示了你如何在真实环境中利用常见的 API 漏洞。研究对手和漏洞赏金猎人的战术将有助于你拓展自己的黑客技能，从而更好地保护互联网安全。这些故事也揭示了网络中存在着大量的低悬果实。通过结合简单的技术，你可以创造出一个
    API 黑客杰作。
- en: Become familiar with the common API vulnerabilities, perform thorough analysis
    of endpoints, exploit the vulnerabilities you discover, report your findings,
    and bask in the glory of preventing the next great API data breach.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉常见的API漏洞，深入分析各个端点，利用你发现的漏洞进行攻击，报告你的发现，并沉浸在防止下一次重大API数据泄露的荣耀中。
