- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Breaches and Bug Bounties
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: The real-world API breaches and bounties covered in this chapter should illustrate
    how actual hackers have exploited API vulnerabilities, how vulnerabilities can
    be combined, and the significance of the weaknesses you might discover.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that an app’s security is only as strong as the weakest link. If you’re
    facing the best firewalled, multifactor-based, zero-trust app but the blue team
    hasn’t dedicated resources to securing their APIs, there is a security gap equivalent
    to the Death Star’s thermal exhaust port. Moreover, these insecure APIs and exhaust
    ports are often intentionally exposed to the outside universe, offering a clear
    pathway to compromise and destruction. Use common API weaknesses like the following
    to your advantage when hacking.
  prefs: []
  type: TYPE_NORMAL
- en: The Breaches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After a data breach, leak, or exposure, people often point fingers and cast
    blame. I like to think of them instead as costly learning opportunities. To be
    clear, a *data breach* refers to a confirmed instance of a criminal exploiting
    a system to compromise the business or steal data. A *leak* or *exposure* is the
    discovery of a weakness that could have led to the compromise of sensitive information,
    but it isn’t clear whether an attacker actually did compromise the data.
  prefs: []
  type: TYPE_NORMAL
- en: When data breaches take place, attackers generally don’t disclose their findings,
    as the ones who brag online about the details of their conquests often end up
    arrested. The organizations that were breached also rarely disclose what happened,
    either because they are too embarrassed, they’re protecting themselves from additional
    legal recourse, or (in the worst case) they don’t know about it. For that reason,
    I will provide my own guess as to how these compromises took place.
  prefs: []
  type: TYPE_NORMAL
- en: Peloton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Data quantity:** More than three million Peloton subscribers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Type of data:** User IDs, locations, ages, genders, weights, and workout
    information'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In early 2021, security researcher Jan Masters disclosed that unauthenticated
    API users could query the API and receive information for all other users. This
    data exposure is particularly interesting, as US president Joe Biden was an owner
    of a Peloton device at the time of the disclosure.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result of the API data exposure, attackers could use three different methods
    to obtain sensitive user data: sending a request to the */stats/workouts/details*
    endpoint, sending requests to the */api/user/search* feature, and making unauthenticated
    GraphQL requests.'
  prefs: []
  type: TYPE_NORMAL
- en: The /stats/workouts/details Endpoint
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This endpoint is meant to provide a user’s workout details based on their ID.
    If a user wanted their data to be private, they could select an option that was
    supposed to conceal it. The privacy feature did not properly function, however,
    and the endpoint returned data to any consumer regardless of authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'By specifying user IDs in the POST request body, an attacker would receive
    a response that included the user’s age, gender, username, workout ID, and Peloton
    ID, as well as a value indicating whether their profile was private:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The IDs used in the attack could be brute-forced or, better yet, gathered by
    using the web application, which would automatically populate user IDs.
  prefs: []
  type: TYPE_NORMAL
- en: User Search
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: User search features can easily fall prey to business logic flaws. A GET request
    to the */api/user/search/:<username>* endpoint revealed the URL that led to the
    user’s profile picture, location, ID, profile privacy status, and social information
    such as their number of followers. Anyone could use this data exposure feature.
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Several GraphQL endpoints allowed the attacker to send unauthenticated requests.
    A request like the following would provide a user’s ID, username, and location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By using the `REDACTED`user ID as a payload position, an unauthenticated attacker
    could brute-force user IDs to obtain private user data.
  prefs: []
  type: TYPE_NORMAL
- en: The Peloton breach is a demonstration of how using APIs with an adversarial
    mindset can result in significant findings. It also goes to show that if an organization
    is not protecting one of its APIs, you should treat this as a rallying call to
    test its other APIs for weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: USPS Informed Visibility API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Data quantity:** Approximately 60 million exposed USPS users'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Type of data:** Email, username, real-time package updates, mailing address,
    phone number'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In November 2018, *KrebsOnSecurity* broke the story that the US Postal Service
    (USPS) website had exposed the data of 60 million users. A USPS program called
    Informed Visibility made an API available to authenticated users so that consumers
    could have near real-time data about all mail. The only problem was that any USPS
    authenticated user with access to the API could query it for any USPS account
    details. To make things worse, the API accepted wildcard queries. This means an
    attacker could easily request the user data for, say, every Gmail user by using
    a query like this one: */api/v1/find?email=*@gmail.com*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the glaring security misconfigurations and business logic vulnerabilities,
    the USPS API was also vulnerable to an excessive data exposure issue. When the
    data for an address was requested, the API would respond with all records associated
    with that address. A hacker could have detected the vulnerability by searching
    for various physical addresses and paying attention to the results. For example,
    a request like the following could have displayed the records of all current and
    past occupants of the address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An API with this sort of excessive data exposure might respond with something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The USPS data exposure is a great example of why more organizations need API-focused
    security testing, whether that be through a bug bounty program or penetration
    testing. In fact, the Office of Inspector General of the Informed Visibility program
    had conducted vulnerability assessment a month prior to the release of the *KrebsOnSecurity*
    article. The assessors failed to mention anything about any APIs, and in the Office
    of Inspector General’s “Informed Visibility Vulnerability Assessment,” the testers
    determined that “overall, the IV web application encryption and authentication
    were secure” ([https://www.uspsoig.gov/sites/default/files/document-library-files/2018/IT-AR-19-001.pdf](https://www.uspsoig.gov/sites/default/files/document-library-files/2018/IT-AR-19-001.pdf)).
    The public report also includes a description of the vulnerability-scanning tools
    used in order to test the web application that provided the USPS testers with
    false-negative results. This means that their tools assured them that nothing
    was wrong when in fact there were massive problems.
  prefs: []
  type: TYPE_NORMAL
- en: If any security testing had focused on the API, the testers would have discovered
    glaring business logic flaws and authentication weaknesses. The USPS data exposure
    shows how APIs have been overlooked as a credible attack vector and how badly
    they need to be tested with the right tools and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: T-Mobile API Breach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Data quantity:** More than two million T-Mobile customers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Type of data:** Name, phone number, email, date of birth, account number,
    billing ZIP code'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In August 2018, T-Mobile posted an advisory to its website stating that its
    cybersecurity team had “discovered and shut down an unauthorized access to certain
    information.” T-Mobile also alerted 2.3 million customers over text message that
    their data was exposed. By targeting one of T-Mobile’s APIs, the attacker was
    able to obtain customer names, phone numbers, emails, dates of birth, account
    numbers, and billing ZIP codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'As is often the case, T-Mobile has not publicly shared the specific details
    of the breach, but we can go out on a limb and make a guess. One year earlier,
    a YouTube user discovered and disclosed an API vulnerability that may have been
    similar to the vulnerability that was exploited. In a video titled “T-Mobile Info
    Disclosure Exploit,” user “moim” demonstrated how to exploit the T-Mobile Web
    Services Gateway API. This earlier vulnerability allowed a consumer to access
    data by using a single authorization token and then adding any user’s phone number
    to the URL. The following is an example of the data returned from the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you look at the endpoint, I hope some API vulnerabilities are already coming
    to mind. If you can search for your own information using the `msisdn`parameter,
    can you use it to search for other phone numbers? Indeed, you can! This is a BOLA
    vulnerability. What’s worse, phone numbers are very predictable and often publicly
    available. In the exploit video, moim takes a random T-Mobile phone number from
    a dox attack on Pastebin and successfully obtains that customer’s information.
  prefs: []
  type: TYPE_NORMAL
- en: This attack is only a proof of concept, but it has room for improvement. If
    you find an issue like this during an API test, I recommend working with the provider
    to obtain additional test accounts with separate phone numbers to avoid exposing
    actual customer data during your testing. Exploit the findings and then describe
    the impact a real attack could have on the client’s environment, particularly
    if an attacker brute-forces phone numbers and breaches a significant amount of
    client data.
  prefs: []
  type: TYPE_NORMAL
- en: After all, if this API was the one responsible for the breach, the attacker
    could have easily brute-forced phone numbers to gather the 2.3 million that were
    leaked.
  prefs: []
  type: TYPE_NORMAL
- en: The Bounties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not only do bug bounty programs reward hackers for finding and reporting weaknesses
    that criminals would have otherwise compromised, but their write-ups are also
    an excellent source of API hacking lessons. If you pay attention to them, you
    might learn new techniques to use in your own testing. You can find write-ups
    on bug bounty platforms such as HackerOne and Bug Crowd or from independent sources
    like Pentester Land, ProgrammableWeb, and APIsecurity.io.
  prefs: []
  type: TYPE_NORMAL
- en: The reports I present here represent a small sample of the bounties out there.
    I selected these three examples to capture the diverse range of issues bounty
    hunters come across and the sorts of attacks they use. As you’ll see, in some
    instances these hackers dive deep into an API by combining exploit techniques,
    following numerous leads, and implementing novel web application attacks. You
    can learn a lot from bounty hunters.
  prefs: []
  type: TYPE_NORMAL
- en: The Price of Good API Keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Bug bounty hunter:** Ace Candelario'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bounty:** $2,000'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Candelario began his bug hunt by investigating a JavaScript source file on
    his target, searching it for terms such as *api*, *secret*, and *key* that might
    have indicated a leaked secret. Indeed, he discovered an API key being used for
    BambooHR human resources software. As you can see in the JavaScript, the key was
    base64 encoded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the code snippet includes the HR software endpoint as well, any attacker
    who discovered this code could try to pass this API key off as their own parameter
    in an API request to the endpoint. Alternatively, they could decode the base64-encoded
    key. In this example, you could do the following to see the encoded credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you would likely already have a strong case for a vulnerability
    report. Still, you could go further. For example, you could attempt to use the
    credentials on the HR site to prove that you could access the target’s sensitive
    employee data. Candelario did so and used a screen capture of the employee data
    as his proof of concept.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed API keys like this one are an example of a broken authentication vulnerability,
    and you’ll typically find them during API discovery. Bug bounty rewards for the
    discovery of these keys will depend on the severity of the attack in which they
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lessons Learned**'
  prefs: []
  type: TYPE_NORMAL
- en: Dedicate time to researching your target and discovering APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always keep an eye out for credentials, secrets, and keys; then test what you
    can do with your findings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private API Authorization Issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Bug bounty hunter:** Omkar Bhagwat'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bounty:** $440'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By performing directory enumeration, Bhagwat discovered an API and its documentation
    located at *academy.target.com/api/docs*. As an unauthenticated user, Omkar was
    able to find the API endpoints related to user and admin management. Moreover,
    when he sent a GET request for the */ping* endpoint, Bhagwat noticed that the
    API responded to him without using any authorization tokens (see [Figure 15-1](#figure15-1)).
    This piqued Bhagwat’s interest in the API. He decided to thoroughly test its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of API documentation for the /ping endpoint](image_fi/502444c15/F15001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-1: An example Omkar Bhagwat provided for his bug bounty write-up
    that demonstrates the API responding to his */ping* request with a “pong” response'
  prefs: []
  type: TYPE_NORMAL
- en: While testing other endpoints, Bhagwat eventually received an API response containing
    the error “authorization parameters are missing.” He searched the site and found
    that many requests used an authorization Bearer token, which was exposed.
  prefs: []
  type: TYPE_NORMAL
- en: By adding that Bearer token to a request header, Bhagwat was able to edit user
    accounts (see [Figure 15-2](#figure15-2)). He could then perform administrative
    functions, such as deleting, editing, and creating new accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of a POST request in Burp Suite submitting a token, ID, and username
    to the api/user/edit endpoint](image_fi/502444c15/F15002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-2: Omkar’s successful API request to edit a user’s account password'
  prefs: []
  type: TYPE_NORMAL
- en: Several API vulnerabilities led to this exploitation. The API documentation
    disclosed sensitive information about how the API operated and how to manipulate
    user accounts. There is no business purpose to making this documentation available
    to the public; if it weren’t available, an attacker would have likely moved on
    to the next target without stopping to investigate.
  prefs: []
  type: TYPE_NORMAL
- en: By thoroughly investigating the target, Bhagwat was able to discover a broken
    authentication vulnerability in the form of an exposed authorization Bearer token.
    Using the Bearer token and documentation, he then found a BFLA.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lessons Learned**'
  prefs: []
  type: TYPE_NORMAL
- en: Launch a thorough investigation of a web application when something piques your
    interest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API documentation is a gold mine of information; use it to your advantage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine your findings to discover new vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Starbucks: The Breach That Never Was'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Bug bounty hunter:** Sam Curry'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bounty:** $4,000'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Curry is a security researcher and bug hunter. While participating in Starbucks’
    bug bounty program, he discovered and disclosed a vulnerability that prevented
    a breach of nearly 100 million personally identifiable information (PII) records
    belonging to Starbucks’ customers. According to the Net Diligence breach calculator,
    a PII data breach of this size could have cost Starbucks $100 million in regulatory
    fines, $225 million in crisis management costs, and $25 million in incident investigation
    costs. Even at a conservative estimate of $3.50 per record, a breach of that size
    could have resulted in a bill of around $350 million. Sam’s finding was epic,
    to say the least.
  prefs: []
  type: TYPE_NORMAL
- en: 'On his blog at [https://samcurry.net](https://samcurry.net), Curry provides
    a play-by-play of his approach to hacking the Starbucks API. The first thing that
    caught his interest was the fact that the Starbucks gift card purchase process
    included API requests containing sensitive information to the endpoint */bff/proxy*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As Curry explains on his blog, *bff* stands for “backend for frontend,” meaning
    the application passes the request to another host to provide the functionality.
    In other words, Starbucks was using a proxy to transfer data between the external
    API and an internal API endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Curry attempted to probe this */bff/proxy/orchestra* endpoint but found it
    wouldn’t transfer user input back to the internal API. However, he discovered
    a */bff/proxy/user:id* endpoint that did allow user input to make it beyond the
    proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By using `..\` at the end of the path, Curry was attempting to traverse the
    current working directory and see what else he could access on the server. He
    continued to test for various directory traversal vulnerabilities until he sent
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This request resulted in a different error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This sudden change in an error request meant Curry was onto something. He used
    Burp Suite Intruder to brute-force various directories until he came across a
    Microsoft Graph instance using */search/v1/accounts*. Curry queried the Graph
    API and captured a proof of concept that demonstrated he had access to an internal
    customer database containing IDs, usernames, full names, emails, cities, addresses,
    and phone numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Because he knew the syntax of the Microsoft Graph API, Curry found that he could
    include the query parameter `$count=true` to get a count of the number of entries,
    which came up to 99,356,059, just shy of 100 million.
  prefs: []
  type: TYPE_NORMAL
- en: Curry found this vulnerability by paying close attention to the API’s responses
    and filtering results in Burp Suite, allowing him to find a unique status code
    of 400 among all the standard 404 errors. If the API provider hadn’t disclosed
    this information, the response would have blended in with all the other 404 errors,
    and an attacker would likely have moved on to another target.
  prefs: []
  type: TYPE_NORMAL
- en: By combining the information disclosure and security misconfiguration, he was
    able to brute-force the internal directory structure and find the Microsoft Graph
    API. The additional BFLA vulnerability allowed Curry to use administrative functionality
    to perform user account queries.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lessons Learned**'
  prefs: []
  type: TYPE_NORMAL
- en: Pay close attention to subtle differences between API responses. Use Burp Suite
    Comparer or carefully compare requests and responses to identify potential weaknesses
    in an API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigate how the application or WAF handles fuzzing and directory traversal
    techniques.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage evasive techniques to bypass security controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Instagram GraphQL BOLA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Bug bounty hunter:** Mayur Fartade'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bounty:** $30,000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2021, Fartade discovered a severe BOLA vulnerability in Instagram that allowed
    him to send POST requests to the GraphQL API located at */api/v1/ads/graphql/*
    to view the private posts, stories, and reels of other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The issue stemmed from a lack of authorization security controls for requests
    involving a user’s media ID. To discover the media ID, you could use brute force
    or capture the ID through other means, such as social engineering or XSS. For
    example, Fartade used a POST request like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'By targeting the `MEDIA_ID` parameter and providing a null value for `access_token`,
    Fartade was able to view the details of other users’ private posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This BOLA allowed Fartade to make requests for information simply by specifying
    the media ID of a given Instagram post. Using this weakness, he was able to gain
    access to details such as likes, comments, and Facebook-linked pages of any user’s
    private or archived posts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lessons Learned**'
  prefs: []
  type: TYPE_NORMAL
- en: Make an effort to seek out GraphQL endpoints and apply the techniques covered
    in this book; the payout could be huge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When at first your attacks don’t succeed, combine evasive techniques, such as
    by using null bytes with your attacks, and try again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experiment with tokens to bypass authorization requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter used API breaches and bug bounty reports to demonstrate how you
    might be able to exploit common API vulnerabilities in real-world environments.
    Studying the tactics of adversaries and bug bounty hunters will help you expand
    your own hacking repertoire to better help secure the internet. These stories
    also reveal how much low-hanging fruit is out there. By combining easy techniques,
    you can create an API hacking masterpiece.
  prefs: []
  type: TYPE_NORMAL
- en: Become familiar with the common API vulnerabilities, perform thorough analysis
    of endpoints, exploit the vulnerabilities you discover, report your findings,
    and bask in the glory of preventing the next great API data breach.
  prefs: []
  type: TYPE_NORMAL
