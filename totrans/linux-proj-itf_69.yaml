- en: Appendix E. Further Sources of Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aside from the material in this book, many other sources of information about
    Linux system programming are available. This appendix provides a short introduction
    to some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Manual pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Manual pages are accessible via the *man* command. (The command *man man* describes
    how to use *man* to read manual pages.) The manual pages are divided into numbered
    sections that categorize information as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Programs and shell commands*: commands executed by users at the shell prompt.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*System calls*: Linux system calls.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Library functions*: standard C library functions (as well as many other library
    functions).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Special files*: special files, such as device files.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*File formats*: formats of files such as the system password (`/etc/passwd`)
    and group (`/etc/group`) files.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Games*: games.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Overview, conventions, protocols, and miscellany*: overviews of various topics,
    and various pages on network protocols and sockets programming.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*System administration commands*: commands that are for use mainly by the superuser.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, there are manual pages in different sections with the same name.
    For example, there is a section 1 manual page for the *chmod* command and a section
    2 manual page for the *chmod()* system call. To distinguish manual pages with
    the same name, we enclose the section number in parentheses after the name—for
    example, *chmod(1)* and *chmod(2)*. To display the manual page from a particular
    section, we can insert the section number into the *man* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The manual pages for system calls and library functions are divided into a
    number of parts, which usually include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Name*: the name of the function, accompanied by a one-line description. The
    following command can be used to obtain a list of all manual pages whose one-line
    description contains the specified string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is useful if we can’t remember or don’t know exactly which manual page
    we’re looking for.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Synopsis*: the C prototype of the function. This identifies the type and order
    of the function’s arguments, as well as the type of value returned by the function.
    In most cases, a list of header files precedes the function prototype. These header
    files define macros and C types needed for use with this function, as well as
    the function prototype itself, and should be included in a program using this
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Description*: a description of what the function does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Return value*: a description of the range of values returned by the function,
    including how the function informs the caller of an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Errors*: a list of the possible *errno* values that are returned in the event
    of an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conforming to*: a description of the various UNIX standards to which the function
    conforms. This gives us an idea of how portable this function is to other UNIX
    implementations and also identifies Linux-specific aspects of the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bugs*: a description of things that are broken or that don’t work as they
    should.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Although some of the later commercial UNIX implementations have preferred more
    marketable euphemisms, from early times, the UNIX manual pages called a bug a
    bug. Linux continues the tradition. Sometimes these “bugs” are philosophical,
    simply describing ways in which things could be improved, or warning about special
    or unexpected (but otherwise intended) behaviors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Notes*: miscellaneous additional notes on the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*See also*: a list of manual pages for related functions and commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The manual pages describing the kernel and *glibc* APIs are available online
    at [http://www.kernel.org/doc/man-pages/](http://www.kernel.org/doc/man-pages/).
  prefs: []
  type: TYPE_NORMAL
- en: GNU *info* documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than using the traditional manual page format, the GNU project documents
    much of its software using *info* documents, which are hyperlinked documents that
    can be browsed using the *info* command. A tutorial on the use of *info* can be
    obtained using the command *info info*.
  prefs: []
  type: TYPE_NORMAL
- en: Although in many cases the information in manual pages and corresponding *info*
    documents is the same, sometimes the *info* documentation for the C library contains
    additional information not found in the manual pages or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reasons both manual pages and *info* documents exist, even though both may
    contain the same information, are somewhat religious. The GNU project prefers
    the *info* user interface, and so provides all documentation via *info*. However,
    users and programmers on UNIX systems have had a long history of using (and in
    many cases preferring) manual pages, so there is strong momentum in favor of upholding
    this format. The manual pages also tend to include more historical information
    (e.g., information about behavior changes across versions) than do the *info*
    documents.
  prefs: []
  type: TYPE_NORMAL
- en: The GNU C library (*glibc*) manual
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GNU C library includes a manual that describes the use of many of the functions
    in the library. The manual is available at [http://www.gnu.org/](http://www.gnu.org/).
    It is also provided with most distributions in both HTML format and *info* format
    (via the command *info libc*).
  prefs: []
  type: TYPE_NORMAL
- en: Books
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An extensive bibliography can be found at the end of this book, but a few books
    deserve special mention.
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the list are the books by the late W. Richard Stevens. *Advanced
    Programming in the UNIX Environment* ([Stevens, 1992]) provides detailed coverage
    of UNIX system programming, focusing on POSIX, System V, and BSD. A recent revision
    by Stephen Rago, [Stevens & Rago, 2005] updates the text for modern standards
    and implementations, and adds coverage of threads and a chapter on network programming.
    This book is a good place to look for an alternative viewpoint on many of the
    topics covered in this book. The two-volume *UNIX Network Programming* ([Stevens
    et al., 2004], [Stevens, 1999]) provides extremely detailed coverage of network
    programming and interprocess communication on UNIX systems.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stevens et al., 2004] is a revision by Bill Fenner and Andrew Rudoff of [Stevens,
    1998], the previous edition of Volume 1 of the *UNIX Network Programming*. While
    the revised edition covers several new areas, in most cases where we make reference
    to [Stevens et al., 2004], the same material can also be found in [Stevens, 1998],
    albeit under different chapter and section numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Advanced UNIX Programming* ([Rochkind, 1985]) was a good, brief, and sometimes
    humorous, introduction to UNIX (System V) programming. It is nowadays available
    in an updated and extended second edition ([Rochkind, 2004]).'
  prefs: []
  type: TYPE_NORMAL
- en: The POSIX threading API is thoroughly described in *Programming with POSIX Threads*
    ([*Butenhof*, 1996]).
  prefs: []
  type: TYPE_NORMAL
- en: '*Linux and the Unix Philosophy* ([Gancarz, 2003]) is a brief introduction to
    the philosophy of application design on Linux and UNIX systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Various books provide an introduction to reading and modifying the Linux kernel
    sources, including *Linux Kernel Development* ([Love, 2010]) and *Understanding
    the Linux Kernel* ([Bovet & Cesati, 2005]).
  prefs: []
  type: TYPE_NORMAL
- en: 'For more general background on UNIX kernels, *The Design of the UNIX Operating
    System* ([Bach, 1986]) remains very readable and contains material relevant to
    Linux. *UNIX Internals: The New Frontiers* ([Vahalia, 1996]) surveys kernel internals
    for more modern UNIX implementations.'
  prefs: []
  type: TYPE_NORMAL
- en: For writing Linux device drivers, the essential reference is *Linux Device Drivers*
    ([Corbet et al., 2005]).
  prefs: []
  type: TYPE_NORMAL
- en: '*Operating Systems: Design and Implementation* ([Tanenbaum & Woodhull, 2006])
    describes operating system implementation using the example of Minix. (See also
    [http://www.minix3.org/](http://www.minix3.org/).)'
  prefs: []
  type: TYPE_NORMAL
- en: Source code of existing applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Looking at the source code of existing applications can often provide good
    examples of how to use particular system calls and library functions. On Linux
    distributions employing the RPM Package Manager, we can find the package that
    contains a particular program (such as *ls*) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The corresponding source code package will have a name similar to the above,
    but with the suffix `.src.rpm`. This package will be on the installation media
    for the distribution or be available for download from the distributor’s web site.
    Once we obtain the package, we can install it using the *rpm* command, and then
    examine the source code, which is typically placed in some directory under `/usr/src`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On systems using the Debian package manager, the process is similar. We can
    determine the package that created a pathname (for the *ls* program, in this example)
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The Linux Documentation Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linux Documentation Project ([http://www.tldp.org/](http://www.tldp.org/))
    produces freely available documentation on Linux, including HOWTO guides and FAQs
    (frequently asked questions and answers) on various system administration and
    programming topics. The site also offers more extensive electronic books on a
    range of topics.
  prefs: []
  type: TYPE_NORMAL
- en: The GNU project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GNU project ([http://www.gnu.org/](http://www.gnu.org/)) provides an enormous
    quantity of software source code and associated documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Newsgroups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usenet newsgroups can often be a good source of answers to specific programming
    questions. The following newsgroups are of particular interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '*comp.unix.programmer* addresses general UNIX programming questions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*comp.os.linux.development.apps* addresses questions relating to application
    development specifically on Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*comp.os.linux.development.system* the Linux system development newsgroup,
    focuses on questions about modifying the kernel and developing device drivers
    and loadable modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*comp.programming.threads* discusses programming with threads, especially POSIX
    threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*comp.protocols.tcp-ip* discusses the TCP/IP networking protocol suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FAQs for many Usenet news groups can be found at [http://www.faqs.org/](http://www.faqs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before posting a question to a newsgroup, check the FAQ for the group (often
    posted regularly within the group itself) and to try a web search to find a solution
    to the question. The [http://groups.google.com/](http://groups.google.com/) web
    site provides a browser-based interface for searching old Usenet postings.
  prefs: []
  type: TYPE_NORMAL
- en: Linux kernel mailing list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Linux kernel mailing list (LKML) is the principal broadcast communication
    medium for the Linux kernel developers. It provides an idea of what’s going on
    in kernel development, and is a forum for submitting kernel bug reports and patches.
    (LKML is not a forum for system programming questions.) To subscribe to LKML,
    send an email message to [majordomo@vger.kernel.org](mailto:majordomo@vger.kernel.org)
    with the following message body as a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For information about the workings of the list server, send a message body containing
    just the word “help” to the same address.
  prefs: []
  type: TYPE_NORMAL
- en: To send a message to LKML, use the address [linux-kernel@vger.kernel.org](mailto:linux-kernel@vger.kernel.org).
    The FAQ and pointers to some searchable archives for this mailing list are available
    at [http://www.kernel.org/](http://www.kernel.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Web sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following web sites are of particular interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.kernel.org/](http://www.kernel.org/), *The Linux Kernel Archives*,
    contains the source code for all versions of the Linux kernel, past and present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.lwn.net/](http://www.lwn.net/), *Linux Weekly News*, provides daily
    and weekly columns on various Linux-related topics. A weekly kernel-development
    column summarizes traffic through LKML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.kernelnewbies.org/](http://www.kernelnewbies.org/), *Linux Kernel
    Newbies*, is a starting point for programmers who want to learn about and modify
    the Linux kernel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://lxr.linux.no/linux/](http://lxr.linux.no/linux/), *Linux Cross-reference*,
    provides browser access to various versions of the Linux kernel source code. Each
    identifier in a source file is hyperlinked to make it easy to find the definition
    and uses of that identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kernel source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If none of the preceding sources answer our questions, or if we want to confirm
    that documented information is true, then we can read the kernel source code.
    Although parts of the source code can be difficult to understand, reading the
    code of a particular system call in the Linux kernel source (or a library function
    in the GNU C library source) can often prove to be a surprisingly quick way to
    find the answer to a question.
  prefs: []
  type: TYPE_NORMAL
- en: If the Linux kernel source code has been installed on the system, it can usually
    be found in the directory `/usr/src/linux`. [Table E-1](ape.html#subdirectories_in_the_linux_kernel_sourc
    "Table E-1. Subdirectories in the Linux kernel source tree") provides summary
    information about some of the subdirectories under this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Table E-1. Subdirectories in the Linux kernel source tree
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Documentation` | Documentation of various aspects of the kernel |'
  prefs: []
  type: TYPE_TB
- en: '| `arch` | Architecture-specific code, organized into subdirectories—for example,
    `alpha`, `arm`, `ia64`, `sparc`, and `x86` |'
  prefs: []
  type: TYPE_TB
- en: '| `drivers` | Code for device drivers |'
  prefs: []
  type: TYPE_TB
- en: '| `fs` | File system-specific code, organized into subdirectories—for example,
    `btrfs`, `ext4`, `proc` (the `/proc` file system), and `vfat` |'
  prefs: []
  type: TYPE_TB
- en: '| `include` | Header files needed by kernel code |'
  prefs: []
  type: TYPE_TB
- en: '| `init` | Initialization code for the kernel |'
  prefs: []
  type: TYPE_TB
- en: '| `ipc` | Code for System V IPC and POSIX message queues |'
  prefs: []
  type: TYPE_TB
- en: '| `kernel` | Code related to processes, program execution, kernel modules,
    signals, time, and timers |'
  prefs: []
  type: TYPE_TB
- en: '| `lib` | General-purpose functions used by various parts of the kernel |'
  prefs: []
  type: TYPE_TB
- en: '| `mm` | Memory-management code |'
  prefs: []
  type: TYPE_TB
- en: '| `net` | Networking code (TCP/IP, UNIX and Internet domain sockets) |'
  prefs: []
  type: TYPE_TB
- en: '| `scripts` | Scripts to configure and build the kernel |'
  prefs: []
  type: TYPE_TB
