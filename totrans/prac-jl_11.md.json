["```\njulia> using Unitful\n\njulia> u\"1m\" + u\"1cm\"\n101//100 m\n\njulia> u\"1.0m\" + u\"1cm\"\n1.01 m\n\njulia> u\"1.0m/1s\"\n1.0 m s^-1\n```", "```\njulia> m = u\"m\";\n\njulia> 1m + u\"1km\"\n1001 m\n```", "```\njulia> earth_accel = \"9.8m/s^2\";\n\njulia> kg_weight_earth = uparse(\"kg * \" * earth_accel)\n9.8 kg m s^-2\n```", "```\njulia> using Unitful.DefaultSymbols\n\njulia> minute = u\"minute\"\n\njulia> 2s + 1minute\n62 s\n```", "```\njulia> typeof(1minute)\nQuantity{Int64, T, Unitful.FreeUnits{(minute,), T, nothing}}\n\njulia> typeof(minute)\nUnitful.FreeUnits{(minute,), T, nothing}\n```", "```\njulia> convert(Float64, u\"1m/100cm\")\n1.0\n```", "```\njulia> u\"1m / 100cm\"\n0.01 m cm^-1\n\njulia> typeof(u\"1m/100cm\")\nQuantity{Float64, NoDims, Unitful.FreeUnits{(cm^-1, m), NoDims, nothing}}\n```", "```\njulia> u\"1m / 2m\"\n0.5\n\njulia> typeof(u\"1m / 2m\")\nFloat64\n```", "```\njulia> u\"1m * 1m\"\n1 m^2\n\njulia> u\"1m * 100cm\"\n100 cm m\n```", "```\njulia> u\"1m * 100cm\" |> upreferred\n1//1 m^2\n```", "```\njulia> uconvert(u\"J\", u\"1erg\")\n1//10000000 J\n\njulia> uconvert(u\"kg\", u\"2slug\")\n29.187805874412728 kg\n```", "```\njulia> vi = 17u\"m/s\"\n17 m s^-1\n\njulia> vf = 17.0u\"m/s\"\n17.0 m s^-1\n\njulia> ustrip(v), ustrip(vf)\n(17, 17.0)\n```", "```\njulia> unit(vi)\nm s^-1\n```", "```\njulia> using Unitful, Latexify, UnitfulLatexify\n\njulia> 9.8u\"m/s^2\" |> latexify\nL\"$9.8\\;\\mathrm{m}\\,\\mathrm{s}^{-2}$\"\n```", "```\njulia> a = 0.0571u\"m/s^2\"\n\njulia> \"\"\"\n       a = $(latexify(a))\n\n       or\n\n       $(latexify(a; permode=:frac))\n\n       or\n\n       $(latexify(a; permode=:slash))\n\n       \"\"\" |> println\na = $0.0571\\;\\mathrm{m}\\,\\mathrm{s}^{-2}$\n\nor\n\n$0.0571\\;\\frac{\\mathrm{m}}{\\mathrm{s}^{2}}$\n\nor\n\n$0.0571\\;\\mathrm{m}\\,/\\,\\mathrm{s}^{2}$\n```", "```\njulia> using Plots, Unitful\njulia> mass = 6.3u\"kg\";\njulia> velocity = (0:0.05:1)u\"m/s\";\njulia> KE = mass .* velocity.^2 ./ 2;\njulia> plot(velocity, KE; xlabel=\"Velocity\", ylabel=\"KE\",\n       lw=3, legend=:topleft, label=\"Kinetic Energy\")\n```", "```\njulia> using Plots, Unitful, Latexify, UnitfulLatexify\n\njulia> plot(velocity, KE; xlabel=\"\\\\textrm{Velocity}\",\n       ylabel=\"\\\\textrm{KE}\", unitformat=latexroundunitlabel)\n```", "```\nusing Plots, LaTeXStrings, Latexify, UnitfulLatexify\n\nfunction plot_with_units(ux, uy; xl=\"\", yl=\"\", label=\"\",\n                         legend=:topleft, plotfile=\"plotfile\")\n\n    set_default(permode=:slash)\n    x = ustrip(ux); y = ustrip(uy)\n ➊ xlabel = L\"$\\textrm{%$xl}$ (%$(latexify(unit(eltype(ux)))))\"\n    ylabel = L\"$\\textrm{%$yl}$ (%$(latexify(unit(eltype(uy)))))\"\n\n    plot(x, y; xlabel, ylabel, lw=2, label, legend)\n ➋ savefig(plotfile * \".tex\")\n    savefig(plotfile * \".pdf\")\n\nend\n```", "```\npgfplotsx()\nplot_with_units(velocity, KE; xl=\"Velocity\", yl=\"K. E.\")\n```", "```\n   julia> using Measurements\n\n   julia> 92 ± 3\n   92.0 ± 3.0\n\n   julia> typeof(ans)\n   Measurement{Float64}\n\n➊ julia> 92.0f0 ± 3\n   92.0 ± 3.0\n\n   julia> typeof(ans)\n   Measurement{Float64}\n\n   julia> 92.0f0 ± 3f0\n   92.0 ± 3.0\n\n   julia> typeof(ans)\n   Measurement{Float32}\n\n   julia> big(1227.0) ± 2\n   1227.0 ± 2.0\n\n   julia> typeof(ans)\n   Measurement{BigFloat}\n```", "```\njulia> π ± 0.001\n3.1416 ± 0.001\n\njulia> π ± 0.01\n3.142 ± 0.01\n```", "```\njulia> m1 = 2.20394232 ± 0.00343\n2.2039 ± 0.0034\n\njulia> Measurements.value(m1)\n2.20394232\n\njulia> Measurements.uncertainty(m1)\n0.00343\n```", "```\njulia> emass = measurement(\"9.1093837015(28)e-31\")\n9.1093837015e-31 ± 2.8e-40\n```", "```\njulia> m1 = measurement(20394232, 0.00343)\n2.0394232e7 ± 0.0034\n```", "```\njulia> emass\n9.1093837015e-31 ± 2.8e-40\n\njulia> 2emass\n1.8218767403e-30 ± 5.6e-40\n\njulia> emass + emass\n1.8218767403e-30 ± 5.6e-40\n\njulia> emass/2\n4.5546918508e-31 ± 1.4e-40\n\njulia> emass/2emass\n0.5 ± 0.0\n```", "```\njulia> using Measurements, Unitful\n\njulia> mass = 6.3u\"kg\" ± 0.5u\"kg\"\n6.3 ± 0.5 kg\n\njulia> mass = 6.3u\"kg\"; mass = (1 ± 0.5/6.3) * mass\n6.3 ± 0.5 kg\n```", "```\njulia> using Plots\n\njulia> velocity = (0:0.05:1)u\"m/s\";\n\njulia> KE = mass .* velocity.^2 ./ 2;\n\njulia> plot(velocity, uconvert.(u\"J\", KE); xlabel=\"Velocity\", ylabel=\"K.E.\",\n       lw=2, legend=:topleft, label=\"Kinetic energy\")\n```", "```\njulia> using Oceananigans\n\njulia> grid = RectilinearGrid(size=(256, 32);\n              topology=(Periodic, Flat, Bounded),\n              extent=(256, 32))\n 256×1×32 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×3 halo\n|-- Periodic x ∈ [0.0, 256.0)     regularly spaced with Δx=1.0\n|-- Flat y\n-- Bounded  z ∈ [-32.0, 0.0]      regularly spaced with Δz=1.0\n```", "```\njulia> bc = FieldBoundaryConditions(\n               top=ValueBoundaryCondition(1.0),\n               bottom=ValueBoundaryCondition(20.0))\nOceananigans.FieldBoundaryConditions, with boundary conditions\n|-- west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n|-- east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n|-- south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n|-- north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n|-- bottom: ValueBoundaryCondition: 20.0\n|-- top: ValueBoundaryCondition: 1.0\n-- immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n```", "```\njulia> closure = ScalarDiffusivity(ν=0.05, κ=0.01)\n```", "```\njulia> buoyancy = SeawaterBuoyancy(equation_of_state=\n                  LinearEquationOfState(thermal_expansion=0.01,\n                  haline_contraction=0))\nSeawaterBuoyancy{Float64}:\n|-- gravitational_acceleration: 9.80665\n-- equation of state: LinearEquationOfState(thermal_expansion=0.01, haline_contraction=0.0)\n```", "```\njulia> model = NonhydrostaticModel(;\n                  grid, buoyancy, closure,\n                  boundary_conditions=(T=bc,), tracers=(:T, :S))\nNonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n|-- grid: 256×1×32 RectilinearGrid{Float64, Periodic, Flat, Bounded}\n ➊ on CPU with 3×0×3 halo\n|-- timestepper: QuasiAdamsBashforth2TimeStepper\n|-- tracers: (T, S)\n|-- closure: ScalarDiffusivity{ExplicitTimeDiscretization}\n    (ν=0.05, κ=(T=0.01, S=0.01))\n|-- buoyancy: SeawaterBuoyancy with g=9.80665 and\n    LinearEquationOfState(thermal_expansion=0.01, haline_contraction=0.0)\n    with -ĝ = ZDirection\n-- coriolis: Nothing\n```", "```\njulia> tper(x, y, z) = 0.1 * rand()\ntper (generic function with 1 method)\n\njulia> set!(model; T = tper)\n```", "```\njulia> simulation = Simulation(model; Δt=0.01, stop_time=1800)\nSimulation of NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n|-- Next time step: 10 ms\n|-- Elapsed wall time: 0 seconds\n|-- Wall time per iteration: NaN years\n|-- Stop time: 30 minutes\n|-- Stop iteration : Inf\n|-- Wall time limit: Inf\n|-- Callbacks: OrderedDict with 4 entries:\n|   |-- stop_time_exceeded => Callback of stop_time_exceeded on IterationInterval(1)\n|   |-- stop_iteration_exceeded => Callback of stop_iteration_exceeded on IterationInterval(1)\n|   |-- wall_time_limit_exceeded => Callback of wall_time_limit_exceeded on IterationInterval(1)\n|    -- nan_checker => Callback of NaNChecker for u on IterationInterval(100)\n|-- Output writers: OrderedDict with no entries\n-- Diagnostics: OrderedDict with no entries\n```", "```\njulia> simulation.output_writers[:velocities] =\n              JLD2OutputWriter(model, model.velocities,\n              filename=\"conv4.jld2\", schedule=TimeInterval(1))\n JLD2OutputWriter scheduled on TimeInterval(1 second):\n|-- filepath: ./conv4.jld2\n|-- 3 outputs: (u, v, w)\n|-- array type: Array{Float32}\n|-- including: [:grid, :coriolis, :buoyancy, :closure]\n-- max filesize: Inf YiB\n\njulia> simulation.output_writers[:tracers] =\n              JLD2OutputWriter(model, model.tracers,\n              filename=\"conv4T.jld2\", schedule=TimeInterval(1))\n JLD2OutputWriter scheduled on TimeInterval(1 second):\n|-- filepath: ./conv4T.jld2\n|-- 2 outputs: (T, S)\n|-- array type: Array{Float32}\n|-- including: [:grid, :coriolis, :buoyancy, :closure]\n-- max filesize: Inf YiB\n```", "```\njulia> run!(simulation)\n[ Info: Initializing simulation...\n[ Info:     ... simulation initialization complete (6.850 ms)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (80.507 ms).\n```", "```\njulia> using Plots\n\njulia> uF = model.velocities.u;\n\njulia> TF = model.tracers.T;\n\njulia> heatmap(interior(TF, 1:grid.Nx, 1, 1:grid.Nz)';\n               aspect_ratio=1, yrange=(0, 1.5grid.Nz))\n```", "```\njulia> simulation.stop_time+=10;\n\njulia> run!(simulation);\n```", "```\njulia> uF = FieldTimeSeries(\"conv4.jld2\", \"u\")\n256×1×32×1030 FieldTimeSeries{InMemory} located at\n    (Face, Center, Center) on CPU\n|-- grid: 256×1×32 RectilinearGrid{Float64, Periodic, Flat, Bounded}\n    on CPU with 3×0×3 halo\n|-- indices: (1:256, 1:1, 1:32)\n-- data: 256×1×32×1030 OffsetArray(::Array{Float64, 4},\n    1:256, 1:1, 1:32, 1:1030) with eltype Float64 with\n indices 1:256×1:1×1:32×1:1030\n    -- max=7.66057, min=-7.88889, mean=2.79295e-11\n```", "```\njulia> sizeof(uF)\n544\n```", "```\njulia> using Printf\n\njulia> i = 50;\n\njulia> h50 = heatmap(interior(uF[i], 1:grid.Nx, 1, 1:grid.Nz)';\n               aspect_ratio=1, yrange=(0, 1.5grid.Nz),\n               colorbar=:false, ylabel=\"z\",\n               annotations=[\n                  (0, uF.grid.Nz+15,\n                    text(\"Horizontal velocity at timestep $i\", 12, :left)),\n                  (0, uF.grid.Nz+5,\n                    text((@sprintf \"Max = %.3g\" maximum(uF[i])), 8, :left)),\n                  (100, uF.grid.Nz+5,\n                    text((@sprintf \"Min = %.3g\" minimum(uF[i])), 8, :left))],\n                  grid=false, axis=false)\n```", "```\nusing Oceananigans, Reel, Plots\n\nfunction heatmap_at_time(F, time, fmin, fmax, duration)\n    ts = F.times\n    time = time * ts[end]/duration\n    i = indexin(minimum(abs.(ts .- time)), abs.(ts .- time))[1] ➊\n    xr = yr = zr = 1\n    if F.grid.Nx > 1\n        xr = 1:F.grid.Nx\n    end\n    if F.grid.Ny > 1\n        yr = 1:F.grid.Ny\n    end\n    if F.grid.Nz > 1\n        zr = 1:F.grid.Nz\n    end\n    heatmap(interior(F[i], xr, yr, zr)'; aspect_ratio=1, yrange=(0, 1.5F.grid.Nz),\n            clim=(fmin, fmax)) ➋\nend\n\nuF = FieldTimeSeries(\"conv4.jld2\", \"u\")\nconst fmin = 0.5minimum(uF) ➌\nconst fmax = 0.5maximum(uF)\nconst duration = 30\n\nfunction plotframe(t, dt)\n    heatmap_at_time(uF, t, fmin, fmax, duration)\nend\n\nuMovie = roll(plotframe; fps=30, duration)\n\nwrite(\"uMovie.mp4\", uMovie)\n```", "```\nfunction pendulum!(du, u, p, t)\n    L, g = p\n    θ, ω = u\n    du[1] = ω\n    du[2] = -g/L * sin(θ)\nend\n```", "```\nusing DifferentialEquations\n\np = [1.0, 9.8]\n #    L    g   <- Parameters\n\nu0 = [deg2rad(5), 0]\n #    θ    ω   <- Initial conditions\n\ntspan = (0, 20)\n\nprob = ODEProblem(pendulum!, u0, tspan, p)\nsol5d = solve(prob)\n```", "```\nusing Plots\n\nplot(sol5d; idxs=1, lw=4, lc=:lightgrey, label=\"Numeric\",\n     legend=:outerright, title=\"Pendulum at θ0 = 5°\")\n\nL, g = p\n\nplot!(t -> u0[1]*cos(sqrt(g/L)*t); xrange=(0, 20),\n      ls=:dash, lc=:black, label=\"Analytic\")\n```", "```\ntspan = (0, 10)\nu0 = [π/4, 0]\nLt(t) = 1 - 0.999t/10\n```", "```\nfunction pendulum2!(du, u, p, t)\n    L, g = p\n    θ, ω = u\n    du[1] = ω\n ➊ du[2] = -g/L(t) * sin(θ)\nend\n```", "```\np = [Lt, 9.8]\nprob = ODEProblem(pendulum2!, u0, tspan, p)\nsolLt = solve(prob)\n```", "```\nplot(solLt; idxs=1, label=\"θ\", legend=:topleft, ylabel=\"θ\",\n  ➊ right_margin=13mm)\nplot!(twinx(), solLt; idxs=2, label=\"ω\", legend=:topright,\n      ylabel=\"ω\", ls=:dot)\n```", "```\nconst g = 9.8\ntspan = (0, 400)\nu0 = [π/32, 0]\nLt(t) =  1.0 + 0.1*cos(2*sqrt(g)*t)\n```", "```\nsolLt = solve(prob; reltol=1e-5)\n```", "```\nusing Measurements\n\nu0 = [π/2 ± deg2rad(1), 0]\n```", "```\nprob = ODEProblem(pendulum!, u0, tspan, p)\n\nsolM = solve(prob)\n\nplot(solM(0:0.1:5)[1, :]; legend=false, lw=2, ylabel=\"θ\", xlabel=\"t\")\n```"]