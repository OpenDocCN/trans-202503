["```\nawk '{ print NR\": \"$0 }' < inputfile\n```", "```\n   #!/bin/bash\n\n   # numberlines--A simple alternative to cat -n, etc.\n\n   for filename in \"$@\"\n   do\n     linecount=\"1\"\n➊   while IFS=\"\\n\" read line\n     do\n       echo \"${linecount}: $line\"\n➋     linecount=\"$(( $linecount + 1 ))\"\n➌   done < $filename\n   done\n   exit 0\n```", "```\n$ numberlines alice.txt\n1: Alice was beginning to get very tired of sitting by her sister on the\n2: bank, and of having nothing to do: once or twice she had peeped into the\n3: book her sister was reading, but it had no pictures or conversations in\n4: it, 'and what is the use of a book,' thought Alice 'without pictures or\n5: conversations?'\n6:\n7: So she was considering in her own mind (as well as she could, for the\n8: hot day made her feel very sleepy and stupid), whether the pleasure\n9: of making a daisy-chain would be worth the trouble of getting up and\n10: picking the daisies, when suddenly a White Rabbit with pink eyes ran\n11: close by her.\n```", "```\ncat -n filename | sort -rn | cut -c8-\n```", "```\n   #!/bin/bash\n   # toolong--Feeds the fmt command only those lines in the input stream\n   #   that are longer than the specified length\n\n   width=72\n\n   if [ ! -r \"$1\" ] ; then\n     echo \"Cannot read file $1\" >&2\n     echo \"Usage: $0 filename\" >&2\n     exit 1\n   fi\n\n➊ while read input\n   do\n     if [ ${#input} -gt $width ] ; then\n       echo \"$input\" | fmt\n     else\n       echo \"$input\"\n     fi\n➋ done < $1\n\n   exit 0\n```", "```\nvarlength=\"$(echo \"$var\" | wc -c)\"\n```", "```\nvarlength=\"$(echo \"$var\" | wc -c | sed 's/[^[:digit:]]//g')\"\n```", "```\n$ toolong ragged.txt\nSo she sat on, with closed eyes, and half believed herself in\nWonderland, though she knew she had but to open them again, and\nall would change to dull reality--the grass would be only rustling\nin the wind, and the pool rippling to the waving of the reeds--the\nrattling teacups would change to tinkling sheep-bells, and the\nQueen's shrill cries to the voice of the shepherd boy--and the\nsneeze\nof the baby, the shriek of the Gryphon, and all the other queer\nnoises, would change (she knew) to the confused clamour of the busy\nfarm-yard--while the lowing of the cattle in the distance would\ntake the place of the Mock Turtle's heavy sobs.\n```", "```\n   #!/bin/bash\n   # showfile--Shows the contents of a file, including additional useful info\n\n   width=72\n\n   for input\n   do\n     lines=\"$(wc -l < $input | sed 's/ //g')\"\n     chars=\"$(wc -c < $input | sed 's/ //g')\"\n     owner=\"$(ls -ld $input | awk '{print $3}')\"\n     echo \"-----------------------------------------------------------------\"\n     echo \"File $input ($lines lines, $chars characters, owned by $owner):\"\n     echo \"-----------------------------------------------------------------\"\n     while read line\n     do\n       if [ ${#line} -gt $width ] ; then\n         echo \"$line\" | fmt | sed -e '1s/^/ /' -e '2,$s/^/+ /'\n       else\n         echo \"  $line\"\n       fi\n➊   done < $input\n\n     echo \"-----------------------------------------------------------------\"\n\n➋ done | ${PAGER:more}\n\n   exit 0\n```", "```\necho \"$line\" | fmt | sed -e '1s/^/ /' -e '2,$s/^/+ /'\n```", "```\n$ showfile ragged.txt\n-----------------------------------------------------------------\nFile ragged.txt (7 lines, 639 characters, owned by taylor):\n-----------------------------------------------------------------\n  So she sat on, with closed eyes, and half believed herself in\n  Wonderland, though she knew she had but to open them again, and\n  all would change to dull reality--the grass would be only rustling\n+ in the wind, and the pool rippling to the waving of the reeds--the\n  rattling teacups would change to tinkling sheep-bells, and the\n  Queen's shrill cries to the voice of the shepherd boy--and the\n  sneeze\n  of the baby, the shriek of the Gryphon, and all the other queer\n+ noises, would change (she knew) to the confused clamour of the busy\n+ farm-yard--while the lowing of the cattle in the distance would\n+ take the place of the Mock Turtle's heavy sobs.\n```", "```\n   #!/bin/bash\n   # newquota--A frontend to quota that works with full-word flags a la GNU\n\n   # quota has three possible flags, -g, -v, and -q, but this script\n   #   allows them to be '--group', '--verbose', and '--quiet' too.\n\n   flags=\"\"\n   realquota=\"$(which quota)\"\n\n   while [ $# -gt 0 ]\n   do\n     case $1\n     in\n       --help)      echo \"Usage: $0 [--group --verbose --quiet -gvq]\" >&2\n                          exit 1 ;;\n       --group)     flags=\"$flags -g\";   shift ;;\n       --verbose)   flags=\"$flags -v\";   shift ;;\n       --quiet)     flags=\"$flags -q\";   shift ;;\n       --)          shift;               break ;;\n       *)           break;          # Done with 'while' loop!\n     esac\n\n   done\n\n➊ exec $realquota $flags \"$@\"\n```", "```\n$ newquota --verbose\nDisk quotas for user dtint (uid 24810):\n     Filesystem   usage   quota   limit   grace   files   quota   limit   grace\n           /usr  338262  614400  675840           10703  120000  126000\n$ newquota --quiet\n```", "```\n   #!/bin/bash\n\n   # mysftp--Makes sftp start up more like ftp\n\n   /bin/echo -n \"User account: \"\n   read account\n\n   if [ -z $account ] ; then\n     exit 0;       # Changed their mind, presumably\n   fi\n\n   if [ -z \"$1\" ] ; then\n     /bin/echo -n \"Remote host: \"\n     read host\n     if [ -z $host ] ; then\n       exit 0\n     fi\n   else\n     host=$1\n   fi\n\n   # End by switching to sftp. The -C flag enables compression here.\n\n➊ exec sftp -C $account@$host\n```", "```\n$ sftp\nusage: sftp [-1246Cpqrv] [-B buffer_size] [-b batchfile] [-c cipher]\n          [-D sftp_server_path] [-F ssh_config] [-i identity_file] [-l limit]\n          [-o ssh_option] [-P port] [-R num_requests] [-S program]\n          [-s subsystem | sftp_server] host\n       sftp [user@]host[:file ...]\n       sftp [user@]host[:dir[/]]\n       sftp -b batchfile [user@]host\n```", "```\n$ mysftp\nUser account: taylor\nRemote host: intuitive.com\nConnecting to intuitive.com...\ntaylor@intuitive.com's password:\nsftp> quit\n```", "```\n$ mysftp intuitive.com\nUser account: taylor\nConnecting to intuitive.com...\ntaylor@intuitive.com's password:\nsftp> quit\n```", "```\n   #!/bin/bash\n\n   # cgrep--grep with context display and highlighted pattern matches\n\n   context=0\n   esc=\"^[\"\n   boldon=\"${esc}[1m\" boldoff=\"${esc}[22m\"\n   sedscript=\"/tmp/cgrep.sed.$$\"\n   tempout=\"/tmp/cgrep.$$\"\n\n   function showMatches\n   {\n     matches=0\n\n➊   echo \"s/$pattern/${boldon}$pattern${boldoff}/g\" > $sedscript\n\n➋   for lineno in $(grep -n \"$pattern\" $1 | cut -d: -f1)\n     do\n       if [ $context -gt 0 ] ; then\n➌       prev=\"$(( $lineno - $context ))\"\n\n         if [ $prev -lt 1 ] ; then\n           # This results in \"invalid usage of line address 0.\"\n           prev=\"1\"\n         fi\n➍       next=\"$(( $lineno + $context ))\"\n\n         if [ $matches -gt 0 ] ; then\n           echo \"${prev}i\\\\\" >> $sedscript\n           echo \"----\" >> $sedscript\n         fi\n         echo \"${prev},${next}p\" >> $sedscript\n       else\n         echo \"${lineno}p\" >> $sedscript\n       fi\n       matches=\"$(( $matches + 1 ))\"\n     done\n\n     if [ $matches -gt 0 ] ; then\n       sed -n -f $sedscript $1 | uniq | more\n     fi\n   }\n\n➎ trap \"$(which rm) -f $tempout $sedscript\" EXIT\n\n   if [ -z \"$1\" ] ; then\n     echo \"Usage: $0 [-c X] pattern {filename}\" >&2\n     exit 0\n   fi\n\n   if [ \"$1\" = \"-c\" ] ; then\n     context=\"$2\"\n     shift; shift\n   elif [ \"$(echo $1|cut -c1-2)\" = \"-c\" ] ; then\n     context=\"$(echo $1 | cut -c3-)\"\n     shift\n   fi\n\n   pattern=\"$1\"; shift\n\n   if [ $# -gt 0 ] ; then\n     for filename ; do\n       echo \"----- $filename -----\"\n       showMatches $filename\n     done\n   else\n     cat - > $tempout      # Save stream to a temp file.\n     showMatches $tempout\n   fi\n\n   exit 0\n```", "```\n$ cgrep -c 1 teacup ragged.txt\n----- ragged.txt -----\nin the wind, and the pool rippling to the waving of the reeds--the\nrattling teacups would change to tinkling sheep-bells, and the\nQueen's shrill cries to the voice of the shepherd boy--and the\n```", "```\n   #!/bin/bash\n\n   # zcat, zmore, and zgrep--This script should be either symbolically\n   #   linked or hard linked to all three names. It allows users to work with\n   #   compressed files transparently.\n\n    Z=\"compress\";  unZ=\"uncompress\"  ;  Zlist=\"\"\n   gz=\"gzip\"    ; ungz=\"gunzip\"      ; gzlist=\"\"\n   bz=\"bzip2\"   ; unbz=\"bunzip2\"     ; bzlist=\"\"\n\n   # First step is to try to isolate the filenames in the command line.\n   #   We'll do this lazily by stepping through each argument, testing to\n   #   see whether it's a filename. If it is and it has a compression\n   #   suffix, we'll decompress the file, rewrite the filename, and proceed.\n   #   When done, we'll recompress everything that was decompressed.\n\n   for arg\n   do\n     if [ -f \"$arg\" ] ; then\n       case \"$arg\" in\n          *.Z) $unZ \"$arg\"\n               arg=\"$(echo $arg | sed 's/\\.Z$//')\"\n               Zlist=\"$Zlist \\\"$arg\\\"\"\n               ;;\n\n         *.gz) $ungz \"$arg\"\n               arg=\"$(echo $arg | sed 's/\\.gz$//')\"\n               gzlist=\"$gzlist \\\"$arg\\\"\"\n               ;;\n\n        *.bz2) $unbz \"$arg\"\n               arg=\"$(echo $arg | sed 's/\\.bz2$//')\"\n               bzlist=\"$bzlist \\\"$arg\\\"\"\n               ;;\n       esac\n     fi\n     newargs=\"${newargs:-\"\"} \\\"$arg\\\"\"\n   done\n\n   case $0 in\n      *zcat* ) eval cat $newargs                   ;;\n     *zmore* ) eval more $newargs                  ;;\n     *zgrep* ) eval grep $newargs                  ;;\n           * ) echo \"$0: unknown base name. Can't proceed.\" >&2\n               exit 1\n   esac\n\n   # Now recompress everything.\n\n   if [ ! -z \"$Zlist\"  ] ; then\n➊   eval $Z $Zlist\n   fi\n   if [ ! -z \"$gzlist\"] ; then\n➋   eval $gz $gzlist\n   fi\n   if [ ! -z \"$bzlist\" ] ; then\n➌   eval $bz $bzlist\n   fi\n\n   # And done!\n\n   exit 0\n```", "```\n$ ln -s zcat zmore\n$ ln -s zcat zgrep\n```", "```\n$ compress ragged.txt\n```", "```\n$ zcat ragged.txt.Z\nSo she sat on, with closed eyes, and half believed herself in\nWonderland, though she knew she had but to open them again, and\nall would change to dull reality--the grass would be only rustling\nin the wind, and the pool rippling to the waving of the reeds--the\nrattling teacups would change to tinkling sheep-bells, and the\nQueen's shrill cries to the voice of the shepherd boy--and the\nsneeze of the baby, the shriek of the Gryphon, and all the other\nqueer noises, would change (she knew) to the confused clamour of\nthe busy farm-yard--while the lowing of the cattle in the distance\nwould take the place of the Mock Turtle's heavy sobs.\n```", "```\n$ zgrep teacup ragged.txt.Z\nrattling teacups would change to tinkling sheep-bells, and the\n```", "```\n$ ls -l ragged.txt*\n-rw-r--r-- 1 taylor staff 443 Jul 7 16:07 ragged.txt.Z\n```", "```\n   #!/bin/bash\n\n   # bestcompress--Given a file, tries compressing it with all the available\n   #   compression tools and keeps the compressed file that's smallest,\n   #   reporting the result to the user. If -a isn't specified, bestcompress\n   #   skips compressed files in the input stream.\n\n   Z=\"compress\"     gz=\"gzip\"     bz=\"bzip2\"\n   Zout=\"/tmp/bestcompress.$$.Z\"\n   gzout=\"/tmp/bestcompress.$$.gz\"\n   bzout=\"/tmp/bestcompress.$$.bz\"\n   skipcompressed=1\n\n   if [ \"$1\" = \"-a\" ] ; then\n     skipcompressed=0 ; shift\n   fi\n\n   if [ $# -eq 0 ]; then\n     echo \"Usage: $0 [-a] file or files to optimally compress\" >&2\n     exit 1\n   fi\n\n   trap \"/bin/rm -f $Zout $gzout $bzout\" EXIT\n\n   for name in \"$@\"\n   do\n     if [ ! -f \"$name\" ] ; then\n       echo \"$0: file $name not found. Skipped.\" >&2\n       continue\n     fi\n\n     if [ \"$(echo $name | egrep '(\\.Z$|\\.gz$|\\.bz2$)')\" != \"\" ] ; then\n       if [ $skipcompressed -eq 1 ] ; then\n         echo \"Skipped file ${name}: It's already compressed.\"\n         continue\n       else\n         echo \"Warning: Trying to double-compress $name\"\n       fi\n     fi\n\n   # Try compressing all three files in parallel.\n➊   $Z  < \"$name\" > $Zout  &\n     $gz < \"$name\" > $gzout &\n     $bz < \"$name\" > $bzout &\n\n     wait  # Wait until all compressions are done.\n\n   # Figure out which compressed best.\n➋   smallest=\"$(ls -l \"$name\" $Zout $gzout $bzout | \\\n       awk '{print $5\"=\"NR}' | sort -n | cut -d= -f2 | head -1)\"\n\n     case \"$smallest\" in\n➌     1 ) echo \"No space savings by compressing $name. Left as is.\"\n           ;;\n       2 ) echo Best compression is with compress. File renamed ${name}.Z\n           mv $Zout \"${name}.Z\" ; rm -f \"$name\"\n           ;;\n       3 ) echo Best compression is with gzip. File renamed ${name}.gz\n           mv $gzout \"${name}.gz\" ; rm -f \"$name\"\n           ;;\n       4 ) echo Best compression is with bzip2\\. File renamed ${name}.bz2\n           mv $bzout \"${name}.bz2\" ; rm -f \"$name\"\n     esac\n\n   done\n\n   exit 0\n```", "```\n$ ls -l alice.txt\n-rw-r--r--  1 taylor  staff  154872 Dec  4  2002 alice.txt\n```", "```\n$ bestcompress alice.txt\nBest compression is with compress. File renamed alice.txt.Z\n```", "```\n$ ls -l alice.txt.Z\n-rw-r--r--  1 taylor  wheel  66287 Jul  7 17:31 alice.txt.Z\n```"]