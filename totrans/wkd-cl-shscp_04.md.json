["```\n   #!/bin/bash\n\n   # remember--An easy command line-based reminder pad\n\n   rememberfile=\"$HOME/.remember\"\n\n   if [ $# -eq 0 ] ; then\n     # Prompt the user for input and append whatever they write to\n     #   the rememberfile.\n     echo \"Enter note, end with ^D: \"\n➊   cat - >> $rememberfile\n   else\n     # Append any arguments passed to the script on to the .remember file.\n➋   echo \"$@\" >> $rememberfile\n   fi\n\n   exit 0\n```", "```\n   #!/bin/bash\n\n   # remindme--Searches a data file for matching lines or, if no\n   #   argument is specified, shows the entire contents of the data file\n\n   rememberfile=\"$HOME/.remember\"\n\n   if [ ! -f $rememberfile ] ; then\n     echo \"$0: You don't seem to have a .remember file. \" >&2\n     echo \"To remedy this, please use 'remember' to add reminders\" >&2\n     exit 1\n   fi\n\n   if [ $# -eq 0 ] ; then\n     # Display the whole rememberfile when not given any search criteria.\n➌   more $rememberfile\n   else\n     # Otherwise, search through the file for the given terms, and display\n     #   the results neatly.\n➍   grep -i -- \"$@\" $rememberfile | ${PAGER:-more}\n   fi\n\n   exit 0\n```", "```\ncat - >> $rememberfile\n```", "```\n$ remember Southwest Airlines: 800-IFLYSWA\n$ remember\nEnter note, end with ^D:\nFind Dave's film reviews at http://www.DaveOnFilm.com/\n^D\n```", "```\n$ remindme film reviews\nFind Dave's film reviews at http://www.DaveOnFilm.com/\n```", "```\n$ remindme 800\nSouthwest Airlines: 800-IFLYSWA\n```", "```\n   #!/bin/bash\n\n   # calc--A command line calculator that acts as a frontend to bc\n\n   scale=2\n\n   show_help()\n   {\n   cat << EOF\n     In addition to standard math functions, calc also supports:\n\n     a % b       remainder of a/b\n     a ^ b       exponential: a raised to the b power\n     s(x)        sine of x, x in radians\n     c(x)        cosine of x, x in radians\n     a(x)        arctangent of x, in radians\n     l(x)        natural log of x\n     e(x)        exponential log of raising e to the x\n     j(n,x)      Bessel function of integer order n of x\n     scale N     show N fractional digits (default = 2)\n   EOF\n   }\n\n   if [ $# -gt 0 ] ; then\n     exec scriptbc \"$@\"\n   fi\n\n   echo \"Calc--a simple calculator. Enter 'help' for help, 'quit' to quit.\"\n\n   /bin/echo -n \"calc> \"\n\n➊ while read command args\n   do\n     case $command\n     in\n       quit|exit) exit 0                                  ;;\n       help|\\?)   show_help                               ;;\n       scale)     scale=$args                             ;;\n       *)         scriptbc -p $scale \"$command\" \"$args\"   ;;\n     esac\n\n     /bin/echo -n \"calc> \"\n   done\n\n   echo \"\"\n\n   exit 0\n```", "```\n$ calc 150 / 3.5\n42.85\n$ calc\nCalc--a simple calculator. Enter 'help' for help, 'quit' to quit.\ncalc> help\n  In addition to standard math functions, calc also supports:\n\n  a % b       remainder of a/b\n  a ^ b       exponential: a raised to the b power\n  s(x)        sine of x, x in radians\n  c(x)        cosine of x, x in radians\n  a(x)        arctangent of x, in radians\n  l(x)        natural log of x\n  e(x)        exponential log of raising e to the x\n  j(n,x)      Bessel function of integer order n of x\n  scale N     show N fractional digits (default = 2)\ncalc> 54354 ^ 3\n160581137553864\ncalc> quit\n$\n```", "```\n   #!/bin/bash\n\n   # convertatemp--Temperature conversion script that lets the user enter\n   #   a temperature in Fahrenheit, Celsius, or Kelvin and receive the\n   #   equivalent temperature in the other two units as the output\n\n   if [ $# -eq 0 ] ; then\n     cat << EOF >&2\n   Usage: $0 temperature[F|C|K]\n   where the suffix:\n       F    indicates input is in Fahrenheit (default)\n       C    indicates input is in Celsius\n       K    indicates input is in Kelvin\n   EOF\n     exit 1\n   fi\n\n➊ unit=\"$(echo $1|sed -e 's/[-[:digit:]]*//g' | tr '[:lower:]' '[:upper:]' )\"\n➋ temp=\"$(echo $1|sed -e 's/[^-[:digit:]]*//g')\"\n\n   case ${unit:=F}\n   in\n   F ) # Fahrenheit to Celsius formula: Tc = (F - 32) / 1.8\n     farn=\"$temp\"\n➌   cels=\"$(echo \"scale=2;($farn - 32) / 1.8\" | bc)\"\n     kelv=\"$(echo \"scale=2;$cels + 273.15\" | bc)\"\n     ;;\n\n   C ) # Celsius to Fahrenheit formula: Tf = (9/5)*Tc+32\n     cels=$temp\n     kelv=\"$(echo \"scale=2;$cels + 273.15\" | bc)\"\n➍   farn=\"$(echo \"scale=2;(1.8 * $cels) + 32\" | bc)\"\n     ;;\n\n➎ K ) # Celsius = Kelvin - 273.15, then use Celsius -> Fahrenheit formula\n     kelv=$temp\n     cels=\"$(echo \"scale=2; $kelv - 273.15\" | bc)\"\n     farn=\"$(echo \"scale=2; (1.8 * $cels) + 32\" | bc)\"\n     ;;\n\n     *)\n     echo \"Given temperature unit is not supported\"\n     exit 1\n   esac\n\n   echo \"Fahrenheit = $farn\"\n   echo \"Celsius    = $cels\"\n   echo \"Kelvin     = $kelv\"\n\n   exit 0\n```", "```\n$ convertatemp 212\nFahrenheit = 212\nCelsius    = 100.00\nKelvin     = 373.15\n$ convertatemp 100C\nFahrenheit = 212.00\nCelsius    = 100\nKelvin     = 373.15\n$ convertatemp 100K\nFahrenheit = -279.67\nCelsius    = -173.15\nKelvin     = 100\n```", "```\n   #!/bin/bash\n\n   # loancalc--Given a principal loan amount, interest rate, and\n   #   duration of loan (years), calculates the per-payment amount\n\n   # Formula is M = P * ( J / (1 - (1 + J) ^ -N)),\n   #   where P = principal, J = monthly interest rate, N = duration (months).\n\n   # Users typically enter P, I (annual interest rate), and L (length, years).\n\n➊ . library.sh         # Start by sourcing the script library.\n\n   if [ $# -ne 3 ] ; then\n     echo \"Usage: $0 principal interest loan-duration-years\" >&2\n     exit 1\n   fi\n\n➋ P=$1 I=$2 L=$3\n   J=\"$(scriptbc -p 8 $I / \\( 12 \\* 100 \\) )\"\n   N=\"$(( $L * 12 ))\"\n   M=\"$(scriptbc -p 8 $P \\* \\( $J / \\(1 - \\(1 + $J\\) \\^ -$N\\) \\) )\"\n\n   # Now a little prettying up of the value:\n\n➌ dollars=\"$(echo $M | cut -d. -f1)\"\n   cents=\"$(echo $M | cut -d. -f2 | cut -c1-2)\"\n\n   cat << EOF\n   A $L-year loan at $I% interest with a principal amount of $(nicenumber $P 1 )\n   results in a payment of \\$$dollars.$cents each month for the duration of\n   the loan ($N payments).\n   EOF\n\n   exit 0\n```", "```\ndollars=\"$(echo $M | cut -d. -f1)\"\ncents=\"$(echo $M | cut -d. -f2 | cut -c1-2)\"\n```", "```\n$ loancalc 44900 4.75 4\nA 4-year loan at 4.75% interest with a principal amount of 44,900\nresults in a payment of $1028.93 each month for the duration of\nthe loan (48 payments).\n$ loancalc 44900 4.75 5\nA 5-year loan at 4.75% interest with a principal amount of 44,900\nresults in a payment of $842.18 each month for the duration of\nthe loan (60 payments).\n```", "```\n$ calc '(842.18 * 60) - (1028.93 * 48)'\n1142.16\n```", "```\n   #!/bin/bash\n\n   # addagenda--Prompts the user to add a new event for the agenda script\n\n   agendafile=\"$HOME/.agenda\"\n\n   isDayName()\n   {\n     # Return 0 if all is well, 1 on error.\n case $(echo $1 | tr '[[:upper:]]' '[[:lower:]]') in\n       sun*|mon*|tue*|wed*|thu*|fri*|sat*) retval=0 ;;\n       * ) retval=1 ;;\n     esac\n     return $retval\n   }\n\n   isMonthName()\n   {\n     case $(echo $1 | tr '[[:upper:]]' '[[:lower:]]') in\n       jan*|feb*|mar*|apr*|may|jun*)     return 0        ;;\n       jul*|aug*|sep*|oct*|nov*|dec*)    return 0        ;;\n       * ) return 1      ;;\n     esac\n   }\n\n➊ normalize()\n   {\n     # Return string with first char uppercase, next two lowercase.\n     /bin/echo -n $1 | cut -c1  | tr '[[:lower:]]' '[[:upper:]]'\n     echo  $1 | cut -c2-3| tr '[[:upper:]]' '[[:lower:]]'\n   }\n\n   if [ ! -w $HOME ] ; then\n     echo \"$0: cannot write in your home directory ($HOME)\" >&2\n     exit 1\n   fi\n\n   echo \"Agenda: The Unix Reminder Service\"\n   /bin/echo -n \"Date of event (day mon, day month year, or dayname): \"\n   read word1 word2 word3 junk\n\n   if isDayName $word1 ; then\n     if [ ! -z \"$word2\" ] ; then\n       echo \"Bad dayname format: just specify the day name by itself.\" >&2\n       exit 1\n     fi\n     date=\"$(normalize $word1)\"\n\n   else\n\n     if [ -z \"$word2\" ] ; then\n       echo \"Bad dayname format: unknown day name specified\" >&2\n       exit 1\n     fi\n\n     if [ ! -z \"$(echo $word1|sed 's/[[:digit:]]//g')\" ]  ; then\n       echo \"Bad date format: please specify day first, by day number\" >&2\n       exit 1\n     fi\n\n     if [ \"$word1\" -lt 1 -o \"$word1\" -gt 31 ] ; then\n       echo \"Bad date format: day number can only be in range 1-31\" >&2\n       exit 1\n     fi\n\n if [ ! isMonthName $word2 ] ; then\n       echo \"Bad date format: unknown month name specified.\" >&2\n       exit 1\n     fi\n\n     word2=\"$(normalize $word2)\"\n\n     if [ -z \"$word3\" ] ; then\n       date=\"$word1$word2\"\n     else\n       if [ ! -z \"$(echo $word3|sed 's/[[:digit:]]//g')\" ] ; then\n         echo \"Bad date format: third field should be year.\" >&2\n         exit 1\n       elif [ $word3 -lt 2000 -o $word3 -gt 2500 ] ; then\n         echo \"Bad date format: year value should be 2000-2500\" >&2\n         exit 1\n       fi\n       date=\"$word1$word2$word3\"\n     fi\n   fi\n\n   /bin/echo -n \"One-line description: \"\n   read description\n\n   # Ready to write to data file\n\n➋ echo \"$(echo $date|sed 's/ //g')|$description\" >> $agendafile\n\n   exit 0\n```", "```\n   #!/bin/sh\n\n   # agenda--Scans through the user's .agenda file to see if there\n   #   are matches for the current or next day\n\n   agendafile=\"$HOME/.agenda\"\n\n   checkDate()\n   {\n     # Create the possible default values that will match today.\n     weekday=$1   day=$2   month=$3   year=$4\n➌   format1=\"$weekday\"   format2=\"$day$month\"   format3=\"$day$month$year\"\n\n   # And step through the file comparing dates...\n\n   IFS=\"|\"       # The reads will naturally split at the IFS.\n\n   echo \"On the agenda for today:\"\n     while read date description ; do\n       if [ \"$date\" = \"$format1\" -o \"$date\" = \"$format2\" -o \\\n            \"$date\" = \"$format3\" ]\n       then\n         echo \" $description\"\n       fi\n     done < $agendafile\n   }\n\n   if [ ! -e $agendafile ] ; then\n     echo \"$0: You don't seem to have an .agenda file. \" >&2\n     echo \"To remedy this, please use 'addagenda' to add events\" >&2\n     exit 1\n   fi\n\n   # Now let's get today's date...\n\n➍ eval $(date '+weekday=\"%a\" month=\"%b\" day=\"%e\" year=\"%G\"')\n\n➎ day=\"$(echo $day|sed 's/ //g')\" # Remove possible leading space.\n\n   checkDate $weekday $day $month $year\n\n   exit 0\n```", "```\neval $(date \"+weekday=\\\"%a\\\" month=\\\"%b\\\" day=\\\"%e\\\" year=\\\"%G\\\"\")\n```", "```\n$ addagenda\nAgenda: The Unix Reminder Service\nDate of event (day mon, day month year, or dayname): 31 October\nOne-line description: Halloween\n$ addagenda\nAgenda: The Unix Reminder Service\nDate of event (day mon, day month year, or dayname): 30 March\nOne-line description: Penultimate day of March\n$ addagenda\nAgenda: The Unix Reminder Service\nDate of event (day mon, day month year, or dayname): Sunday\nOne-line description: sleep late (hopefully)\n$ addagenda\nAgenda: The Unix Reminder Service\nDate of event (day mon, day month year, or dayname): march 30 17\nBad date format: please specify day first, by day number\n$ addagenda\nAgenda: The Unix Reminder Service\nDate of event (day mon, day month year, or dayname): 30 march 2017\nOne-line description: Check in with Steve about dinner\n```", "```\n$ agenda\nOn the agenda for today:\n  Penultimate day of March\n  sleep late (hopefully)\n  Check in with Steve about dinner\n```", "```\n$ cat ~/.agenda\n14Feb|Valentine's Day\n25Dec|Christmas\n3Aug|Dave's birthday\n4Jul|Independence Day (USA)\n31Oct|Halloween\n30Mar|Penultimate day of March\nSun|sleep late (hopefully)\n30Mar2017|Check in with Steve about dinner\n```"]