- en: Chapter 3. Pipe Dreams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Apprentice Plumber’s Dilemma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The King, Scarlet, and Ruben made their way back from the Royal Bathroom, the
    King gleefully batting his string about like a big, beardy cat.
  prefs: []
  type: TYPE_NORMAL
- en: “All those waterworks for a string in a shower!” Scarlet said to the King. “I
    hope you’re feeling better now.”
  prefs: []
  type: TYPE_NORMAL
- en: “Much,” said the King, spinning the beads and trinkets on his string every which
    way.
  prefs: []
  type: TYPE_NORMAL
- en: “Speaking of waterworks,” said Ruben, “do you hear that?” And as they rounded
    the corner and reentered the King’s study, they found themselves ankle-deep in
    a miniature lake. There was water, water everywhere!
  prefs: []
  type: TYPE_NORMAL
- en: “The Mysterious Pipe!” cried the King. “Look!” And he pointed to the Mysterious
    Pipe, which was shaking violently and gushing a surprising amount of water from
    its narrow top.
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159983.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Check out the Flowmatic Something-or-Other!” said the King.
  prefs: []
  type: TYPE_NORMAL
- en: “That’s not terribly descriptive,” Ruben said.
  prefs: []
  type: TYPE_NORMAL
- en: “No, that’s what it’s called,” said the King. “The Flowmatic Something-or-Other™.”
  prefs: []
  type: TYPE_NORMAL
- en: “Found it!” said Scarlet, grabbing a square metal box labeled HIS MAJESTY’S
    FLOWMATIC SOMETHING-OR-OTHER™ on the back of the Pipe. She pried open the cover
    of the Flowmatic Something-or-Other to find a miniature Computing Contraption
    with its glowing `>>` IRB prompt.
  prefs: []
  type: TYPE_NORMAL
- en: “What do I do?” Scarlet asked the King.
  prefs: []
  type: TYPE_NORMAL
- en: “I seem to recall this program uses a `flowmatic_on` variable,” the King said.
    “Try turning it off.” He paused a moment. “Hey! I remembered the stuff we learned
    about variables!”
  prefs: []
  type: TYPE_NORMAL
- en: 'Scarlet flashed the King a thumbs-up, typed at the prompt, and pressed ENTER:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Mysterious Pipe shuddered once and sputtered, and the water stopped flowing.
  prefs: []
  type: TYPE_NORMAL
- en: “Whew!” said Ruben. “Nice work!” He peered over Scarlet’s shoulder at the screen.
    “How’d you do that? What’s `false`? It can’t be a string; there are no quotes
    around it. Is it also a variable?”
  prefs: []
  type: TYPE_NORMAL
- en: '“Nope!” said Scarlet. “But it’s built into Ruby just like numbers, strings,
    and variables are. It’s called a *Boolean*, and there are actually two of them:
    `true` and `false`. It looks like the Mysterious Pipe works when `flowmatic_on`
    is `true` and shuts off when it’s `false`.”'
  prefs: []
  type: TYPE_NORMAL
- en: “Then how was `flowmatic_on true` before?” Ruben asked.
  prefs: []
  type: TYPE_NORMAL
- en: “I don’t know!” said Scarlet. “Someone or something must have created that variable.”
  prefs: []
  type: TYPE_NORMAL
- en: “Well, it’s stopped leaking,” said the King, “but it’s not really fixed. It
    should work correctly even when `flowmatic_on` is `true`! After all, the Flowmatic
    supplies all the water to the castle; without it, there can be no Royal Baths,
    Royal Toothbrushings, or Royal Water Balloon Fights! We need the Mysterious Pipe
    and its Flowmatic to be on without leaking all over the place.”
  prefs: []
  type: TYPE_NORMAL
- en: '“What about this?” Ruben said, pointing to a line on the Computing Contraption
    just below the Flowmatic’s on/off control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: “The water must be coming into the Mysterious Pipe too fast,” said Scarlet.
  prefs: []
  type: TYPE_NORMAL
- en: “Gadzooks!” said the King. “The flow rate must be above 50!”
  prefs: []
  type: TYPE_NORMAL
- en: “What should we do?” asked Ruben.
  prefs: []
  type: TYPE_NORMAL
- en: The King thought for a minute. “I think it’s best that we do what should always
    be done in these situations,” he said. “We should call a professional. In this
    case, the Royal Plumber!”
  prefs: []
  type: TYPE_NORMAL
- en: Writing and Running Ruby Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the King calls the Royal Plumber, I’ll take a second to explain some more
    Ruby magic to you. Don’t worry, it won’t take but a minute.
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159985.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You see, you don’t always have to type commands into IRB one at a time. As mentioned
    in [Chapter 1](../Text/ch01.html "Chapter 1. What This Book’s About"), you can
    write a big block of Ruby code and save it as a Ruby *script*. Then, you can run
    your Ruby script in IRB! (This is a lot like running your code in the terminal
    with the `ruby` command, as we did in [Chapter 1](../Text/ch01.html "Chapter 1. What
    This Book’s About"), but IRB will stay open the whole time.) Just start IRB while
    you’re in the folder that contains your Ruby script, then type `load 'filename.rb'`.
    That’s exactly the same as typing everything in the file into IRB—but this way
    it’s easy to make changes and try again!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try this little guy on for size. Type the following code in your favorite
    text editor and save it as a file called flow.rb. (Look back at [Chapter 1](../Text/ch01.html
    "Chapter 1. What This Book’s About") if you need a reminder of how to do this,
    and don’t worry—we’ll cover the new `#{}` syntax in two shakes of a fox’s tail.)
  prefs: []
  type: TYPE_NORMAL
- en: flow.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open IRB, type **`load ''flow.rb''`**, and press ENTER, you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let’s walk through this line by line.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, `load ''flow.rb''` (it doesn’t matter if you use single or double quotes
    here) tells Ruby to look for a file called *flow.rb* in the current directory
    (a *directory* is just a fancy name for a folder on your computer). If Ruby finds
    *flow.rb* and there are no problems with the code in the file, Ruby will run that
    code just as if you’d typed it bit by bit into IRB. Next, you know what `flow_rate
    = 100` and `puts` do: the first one sets the `flow_rate` variable to the value
    `100`, and `puts` prints out the string you give it. (You also get a bonus `=>
    true` from Ruby, which lets you know that loading the file worked.) But you probably
    want to know: what’s this crazy-looking `#{flow_rate}` business?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, strings and variables are different things, but sometimes you might want
    to combine them—say, to print out a message displaying different values for the
    `flow_rate` variable. Rather than making us look up the value of that variable
    and type it into the string by hand every time we want to use it, Ruby lets us
    use `#{}` to say, “Hey! Just insert the value of this variable right into the
    string.” So when you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'One last thing: remember in [Chapter 2](../Text/ch02.html "Chapter 2. The King
    and His String") when Ruben said that strings with double quotes (`"`) were very
    slightly different from strings with single quotes (`''`)? Well, the `#{}` magic
    (called *string interpolation* if you want to be super fancy) is possible *only*
    with double-quoted strings; it can’t be done with single-quoted ones. (This is
    precisely what the King meant in [Chapter 2](../Text/ch02.html "Chapter 2. The
    King and His String") when he said you could put more complicated bits and trinkets
    on a double-quoted string than on a single-quoted string.)'
  prefs: []
  type: TYPE_NORMAL
- en: That’s really all I wanted to show you. And speaking of the King . . .
  prefs: []
  type: TYPE_NORMAL
- en: His Majesty’s Flow Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “Hello?” said the King. (He had been on hold for a while.) “Is this the Royal
    Plumber?”
  prefs: []
  type: TYPE_NORMAL
- en: “Chuff! Chuff! Chuff!” said the Royal Plumber.
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159987.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Oh dear,” said the King. “It sounds like the Royal Plumber has come down with
    a bad case of the Chuffs.”
  prefs: []
  type: TYPE_NORMAL
- en: “Chuffs?” said Scarlet.
  prefs: []
  type: TYPE_NORMAL
- en: “Chuff!” said the Royal Plumber.
  prefs: []
  type: TYPE_NORMAL
- en: “It’s a bit like a cold, but coughier and huffier,” said the King. “Royal Plumber,
    could you send down your Apprentice to help us with the Mysterious Pipe? It’s
    been overflowing terribly.”
  prefs: []
  type: TYPE_NORMAL
- en: “Chuff!” she said, and hung up.
  prefs: []
  type: TYPE_NORMAL
- en: “I think that was a yes,” said the King.
  prefs: []
  type: TYPE_NORMAL
- en: “I think so, too,” said Ruben. “It looks like the Apprentice is already here!”
  prefs: []
  type: TYPE_NORMAL
- en: The Apprentice to the Royal Plumber strolled into the King’s study carrying
    a large red toolbox. Ruben and Scarlet found his expression hard to read behind
    his dark rectangular sunglasses and heavy black beard. The name *Haldo* was stitched
    in red on the front of his coveralls.
  prefs: []
  type: TYPE_NORMAL
- en: “Haldo!” said the King.
  prefs: []
  type: TYPE_NORMAL
- en: “That’s me,” said Haldo. “I hear the Mysterious Pipe is on the fritz.”
  prefs: []
  type: TYPE_NORMAL
- en: “Definitely,” said Scarlet. “Can you help us fix it?”
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159989.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '“I think so,” said Haldo, “but I’m just the Apprentice, so it may take me a
    little while. Let’s see what’s what.” He walked over to the Flowmatic Something-or-Other
    and looked at the screen for a moment. “I seem to remember there’s an *instructions.rb*
    file in here somewhere.” He typed `load ''instructions.rb''`, and this is what
    came up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: “Huh!” said Ruben. “So the problem is that if the flow rate is too high or too
    low, we only get a message. Ruby doesn’t automatically correct the flow rate,
    so we can end up with a flood.”
  prefs: []
  type: TYPE_NORMAL
- en: “We can fix that!” said Scarlet. “We’ll write a Ruby program to check the flow
    rate. If the flow rate is too high, we’ll lower it, and if it’s too low, we’ll
    increase it!”
  prefs: []
  type: TYPE_NORMAL
- en: Haldo scratched his head. “Well, here’s the thing,” he said. “I think I know
    what we need to do, but I haven’t learned enough Ruby to enter the right commands.
    If you kids can give me a hand, though, I think we’ll be in business.”
  prefs: []
  type: TYPE_NORMAL
- en: “No problem,” said Ruben. “Making a Ruby program do different actions based
    on different conditions is something Scarlet and I know backward and forward.”
  prefs: []
  type: TYPE_NORMAL
- en: '“It’s called *control flow*,” said Scarlet, “and it’s not hard at all. Take
    a look!” She opened a new file in her text editor on the Computing Contraption,
    saved it as flowmatic_rules.rb, and typed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: “You’ve lost me,” said the King.
  prefs: []
  type: TYPE_NORMAL
- en: “We’ll take it slow,” said Scarlet. “First, we assign the variables `flowmatic_on`
    and `water_available` to `true`. Then, we have the `if`, which is a *conditional*,
    on the second line. It means that *if* the code that follows on the same line
    is `true`, then everything before `end` gets run.”
  prefs: []
  type: TYPE_NORMAL
- en: “And `&&` is just Ruby’s way of saying *and*,” said Ruben. “We already know
    that the fourth line sets the flow rate to 50, so together, the whole thing says,
    ‘If `flowmatic_on` is `true` *and* `water_available` is also `true`, this program
    will set the `flow_rate` variable to `50`. `end` just tells Ruby that if we’re
    not setting the flow rate to 50, we shouldn’t do anything—at least, not yet.”
  prefs: []
  type: TYPE_NORMAL
- en: “I see,” said Haldo. “And that’s just the very first of the instructions! Great
    work. But what happens if the Flowmatic *isn’t* on or there *isn’t* water available?”
  prefs: []
  type: TYPE_NORMAL
- en: '“Well, at the moment, nothing,” said Ruben. “But we can fix that.” He reached
    over and added to the *flowmatic_rules.rb* code in his text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '“I think I’m starting to get this,” said the King. “➊ is just what we had before.
    Then at ➋, we’re trying something new: `elsif`! Does `elsif` mean ‘if the first
    bit didn’t get run, try this next step’?”'
  prefs: []
  type: TYPE_NORMAL
- en: “That’s exactly it,” said Scarlet. “Don’t worry about the weird spelling, either!
    It’s just a shorter way of writing ‘else, if.’ And the `!` is just Ruby’s way
    of saying *not*. So if `flowmatic_on` happens to be `false`, `!flowmatic_on` will
    be `true`, and vice versa.”
  prefs: []
  type: TYPE_NORMAL
- en: '“And since there’s only one condition left—if the Flowmatic *is* on but there’s
    just no water—the program `puts` the ‘No water!’ message at ➌ using an `else`,
    which means: ‘If none of the other code was run, then run the code that follows,’”
    Ruben said.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159991.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “And all of that’s followed by an `end`, like before,” said Scarlet.
  prefs: []
  type: TYPE_NORMAL
- en: “Do you need to add the two spaces before the lines following `if`, `elsif`,
    and `else`?” asked the King.
  prefs: []
  type: TYPE_NORMAL
- en: “The *indentation*?” said Scarlet. “No, but it sure does look nice.”
  prefs: []
  type: TYPE_NORMAL
- en: '“That takes care of the first three instructions!” said Haldo. “And I think
    I’m getting the hang of this. Let’s see if I can rewrite the last two instructions
    in Ruby.” He added these lines to his *flowmatic_rules.rb* script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '“Okay, *this* I understand,” said the King. “The `>` means *greater than* and
    the `<` means *less than*, so that first bit at ➍ says: if the flow rate is above
    50, we show a ‘too high’ warning and then assign the variable `flow_rate` to 50\.
    The program then `puts` a new `flow_rate` value using string interpolation, like
    we saw before.”'
  prefs: []
  type: TYPE_NORMAL
- en: “But at ➎, the program checks if `flow_rate` is below 50\. If it is, we show
    a ‘too low’ warning and reset it to 50.
  prefs: []
  type: TYPE_NORMAL
- en: “At ➏, we have the `else`. If `flow_rate` isn’t greater than 50 or less than
    50, that means it’s *exactly* 50\. So, we just show the flow rate without changing
    the variable and `puts` it (thank goodness).” The King smiled, clearly pleased
    with himself.
  prefs: []
  type: TYPE_NORMAL
- en: “Perfect!” said Ruben. “You can also use `<=` for *less than or equal to* and
    `>=` for *greater than or equal to*, but we don’t need those quite yet, I don’t
    think.”
  prefs: []
  type: TYPE_NORMAL
- en: Improving flow_rate.rb with Fancier Logical Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ruben studied the screen for a moment. “You know,” he said, “I think you could
    replace the section from ➍ to ➏ with even less code. Check this out!”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: “What do those two vertical lines mean?” asked Haldo. “I haven’t seen those
    before.”
  prefs: []
  type: TYPE_NORMAL
- en: “Just like `&&` means *and* and `!` means *not*, `||` means *or*,” said Scarlet.
    “So we’re saying, ‘If the flow rate is less than 50 *or* it’s greater than 50,
    show a warning and reset it to 50; otherwise, just let us know it’s 50 (thank
    goodness).’
  prefs: []
  type: TYPE_NORMAL
- en: “That works pretty well,” she continued, “but we can make it even simpler.”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: “I know that `!` means *not*,” said the King, “so is it fair to guess that `!=`
    means *is not equal to*?”
  prefs: []
  type: TYPE_NORMAL
- en: “It’s not only fair, it’s right!” said Ruben. “You can use `!=` to mean *is
    not equal to* and `==` to mean *is equal to*. But be *really* careful not to mix
    up `=` and `==`. The first one is used to assign values to variables, and the
    second is used to check if two things are equal.”
  prefs: []
  type: TYPE_NORMAL
- en: “This is amazing,” said Haldo. “I think I’m really getting the hang of Ruby
    control flow. Is there anything else I should know?”
  prefs: []
  type: TYPE_NORMAL
- en: '“One more quick thing,” Scarlet said. “Because `if` followed by a negative
    condition appears all the time in programs, Ruby came up with another way to write
    it. Instead of always typing something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'you can instead type `unless`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: “And those two examples are exactly the same,” finished Scarlet. “But if you
    have `elsif`s and `else`s, it’s sometimes nicer-looking to just use `if`s.”
  prefs: []
  type: TYPE_NORMAL
- en: While Scarlet was talking, Haldo saved their finished *flowmatic_rules.rb* file
    and typed **`load 'flowmatic_rules.rb'`** at the IRB prompt. When he pressed ENTER,
    the Mysterious Pipe shuddered once, then began to gently vibrate. Ruben and Scarlet
    could hear water flowing through the castle walls, and not a drop was spilled
    anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: “Huzzah!” said the King. “I can’t thank you all enough! But I do wonder,” he
    continued, “how did the flow rate get set to 100 in the first place?”
  prefs: []
  type: TYPE_NORMAL
- en: “That, I’m not sure about,” said Haldo. “There must be another Ruby program
    in the castle that has access to the `flow_rate` variable and changed it.” He
    rummaged through his red toolbox and pulled out a flashlight. “I’ll look into
    it right away,” he said.
  prefs: []
  type: TYPE_NORMAL
- en: “Aren’t you going to take off your sunglasses?” asked Scarlet.
  prefs: []
  type: TYPE_NORMAL
- en: “No need,” said Haldo, and with that, he opened a small door on the same side
    of the room as the Mysterious Pipe and disappeared into the bowels of the castle,
    whistling as he went.
  prefs: []
  type: TYPE_NORMAL
- en: A Biggerish Project for You
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You’ve learned a lot in the last handful of pages, and now it’s time to put
    your newfound knowledge to the test! (Don’t worry: I have complete and utter faith
    in you.) Haldo—now the *Senior* Apprentice to the Royal Plumber, thanks to Ruben
    and Scarlet—needs your help. While he hasn’t tracked down the precise cause of
    the Mysterious Pipe’s overflow, he did briefly find himself in a small but tricky
    maze. He’s asked you to record his adventures in the maze, so let’s start by making
    a new file called maze.rb. (Peek back at [Chapter 1](../Text/ch01.html "Chapter 1. What
    This Book’s About") if you don’t remember how to do this, or ask your local adult
    for help.) Type the following into your file.'
  prefs: []
  type: TYPE_NORMAL
- en: maze.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program by typing **`ruby maze.rb`** in the terminal and pressing ENTER.
    You should see something like this (though your output will change depending on
    which direction you pick):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `print` command is new, but never fear: it’s almost exactly like `puts`,
    except it doesn’t add a new blank line after it prints out its text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This bit is also new:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What we’re doing here is setting a variable, `direction`, equal to calling the
    `gets` method and then the `chomp` method right after it. This is a fancy way
    of saying we’re `chomp`ing `gets`. `gets` is a built-in method (you can think
    of it as a Ruby command) that *gets* the most recent input the user typed; `chomp`
    removes anything extra from the end, like spaces or a blank line. This means that
    we’ve now taken whatever the user typed (from `gets.chomp`) and stored it in our
    `direction` variable.
  prefs: []
  type: TYPE_NORMAL
- en: After that, it’s all smooth sailing! You’ve seen string interpolation with `#{}`
    already, and everything after that is just checking to see what letter the user
    entered with `==` (is equal to) and using `if`, `elsif`, and `else` to control
    what message the user sees.
  prefs: []
  type: TYPE_NORMAL
- en: You can test out your maze program by typing **`ruby maze.rb`** from the command
    line or, after starting up IRB, **`load 'maze.rb'`**. You can keep rerunning it
    with different input to see what happens each time!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can go a bit further, though. (Don’t worry, it’s seriously a really small
    maze.) Here are a few ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: How might you add more directions, like NW, SW, NE, SE, up, or down?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How could you handle accepting lowercase letters for directions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A circle has 360 degrees, and turning right is the same as turning 90 degrees.
    What if you wanted to let your users enter a number so they could turn that many
    degrees? How could you use `<`, `<=`, `>`, `>=`, `==`, or `!=` to make this work?
    (This is a bit beyond where we already went, but you can do it! You wouldn’t be
    wandering around in a maze under a castle if you weren’t the adventurous type.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You Know This!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Control flow is tricky stuff, but doing that biggerish project proves you’ve
    gotten the hang of it. Let’s review some of the things we learned along the way.
  prefs: []
  type: TYPE_NORMAL
- en: We talked about *Booleans*, which can be `true` or `false`. They’re part of
    Ruby just like strings, numbers, and variables are, but they’re definitely not
    strings! Don’t put quotes around them, or they won’t work right.
  prefs: []
  type: TYPE_NORMAL
- en: 'We covered *scripts* and how you can run them in IRB using `load ''`*`script_name`*`.rb''`.
    (You can also run your Ruby programs outside of IRB entirely by typing `ruby`
    *`script_name`*`.rb` on the command line.) Remember: you need quotes if you’re
    loading a file in IRB, but you don’t need quotes if you’re typing on the command
    line! (Computers are very dumb and very picky.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We explained *string interpolation* using `#{}` and how you can use it to put
    the values of variables directly into your strings. This comes in handy a lot,
    and remember: you can only do string interpolation with double-quoted (`"`) strings.
    It doesn’t work with single quotes (`''`)!'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about control flow using `if`, `elsif`, `else`, and `unless`,
    and how to combine these with logical operators `&&` (and), `!` (not), and `||`
    (or), and comparison operators `<` (less than), `>` (greater than), `<=` (less
    than or equal to), `>=` (greater than or equal to), `==` (is equal to), and `!=`
    (is not equal to). Using all these together, we can see (for example) *if* one
    thing *and* another thing are `true`, determine *if* one thing is *less than*
    another thing, or say we should do something *unless* something *is not equal
    to* something else. (Whew!)
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s hard to believe, but this is pretty much everything computer programs
    do: compare values and test to see what is or isn’t true. Let’s take a minute
    to kick back, relax, and bask in the glow of all this Ruby know-how. (The next
    chapter’s gonna throw you for a bit of a loop.)'
  prefs: []
  type: TYPE_NORMAL
