- en: '**3**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3**'
- en: '**A BRIEF INTRODUCTION TO DYNAMIC ANALYSIS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态分析简要介绍**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In [Chapter 2](ch02.xhtml#ch02), you learned advanced static analysis techniques
    to disassemble the assembly code recovered from malware. Although static analysis
    can be an efficient way to gain useful information about malware by studying its
    different components on disk, it doesn’t allow us to observe malware behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.xhtml#ch02)中，您学习了高级静态分析技术来反汇编从恶意软件中恢复的汇编代码。虽然静态分析可以通过研究恶意软件在磁盘上的不同组件，作为一种高效的方法获取有用的信息，但它无法让我们观察到恶意软件的行为。
- en: In this chapter, you’ll learn about the basics of dynamic malware analysis.
    Unlike static analysis, which focuses on what malware looks like in file form,
    dynamic analysis consists of running malware in a safe, contained environment
    to see how it behaves. This is like introducing a dangerous bacterial strain into
    a sealed environment to see its effects on other cells.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习动态恶意软件分析的基本知识。与静态分析不同，静态分析侧重于恶意软件在文件形式下的表现，动态分析则包括在一个安全、受限的环境中运行恶意软件，以观察它的行为。这就像是将一种危险的细菌菌株引入一个封闭的环境，以观察它对其他细胞的影响。
- en: Using dynamic analysis, we can get around common static analysis hurdles, such
    as packing and obfuscation, as well as gain more direct insight into the purpose
    of a given malware sample. We begin by exploring basic dynamic analysis techniques,
    their relevance to malware data science, and their applications. We use open source
    tools like *[malwr.com](http://malwr.com)* to study examples of dynamic analysis
    in action. Note that this is a condensed survey of the topic and is not intended
    to be comprehensive. For a more complete introduction, check out *Practical Malware
    Analysis* (No Starch Press, 2012).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过动态分析，我们可以绕过常见的静态分析障碍，如打包和混淆，并获得更直接的关于某个恶意软件样本目的的洞察。我们从探索基本的动态分析技术、它们与恶意软件数据科学的关联以及它们的应用开始。我们使用开源工具，如*[malwr.com](http://malwr.com)*，来研究动态分析的实际应用示例。请注意，这只是对该主题的简要概述，并不打算全面涵盖。要了解更完整的介绍，请参考《实践恶意软件分析》（No
    Starch Press，2012）。
- en: '**Why Use Dynamic Analysis?**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为什么使用动态分析？**'
- en: To understand why dynamic analysis matters, let’s consider the problem of packed
    malware. Recall that packing malware refers to compressing or obfuscating a malware’s
    x86 assembly code to hide the malicious nature of the program. A packed malware
    sample unpacks itself when it infects a target machine so that the code can execute.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解动态分析为何重要，让我们考虑打包恶意软件的问题。回想一下，打包恶意软件是指压缩或混淆恶意软件的x86汇编代码，以隐藏程序的恶意性质。打包的恶意软件样本在感染目标机器时会自行解包，以便代码得以执行。
- en: We could try to disassemble a packed or obfuscated malware sample using the
    static analysis tools discussed in [Chapter 2](ch02.xhtml#ch02), but this is a
    laborious process. For example, with static analysis we’d first have to find the
    location of the obfuscated code in the malware file. Then we’d have to find the
    location of the deobfuscation subroutines that deobfuscate this code so that it
    can run. After locating the subroutines, we’d have to figure out how this deobfuscation
    procedure works in order to perform it on the code. Only then could we begin the
    actual process of reverse engineering the malicious code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试使用[第2章](ch02.xhtml#ch02)中讨论的静态分析工具来反汇编一个打包或混淆的恶意软件样本，但这是一个繁琐的过程。例如，在静态分析中，我们首先需要找到恶意软件文件中混淆代码的位置。然后，我们还需要找到解混淆子程序的位置，这些子程序能够解开这些混淆的代码，以便它可以运行。找到子程序后，我们还需要弄清楚这个解混淆过程是如何工作的，从而能在代码上执行它。只有这样，我们才能开始实际的恶意代码逆向工程过程。
- en: A simple yet clever alternative to this process is to execute the malware in
    a safe, contained environment called a *sandbox*. Running malware in a sandbox
    allows it to unpack itself as it would when infecting a real target. By simply
    running malware, we can find out what servers a particular malware binary connects
    to, what system configuration parameters it changes, and what device I/O (input/output)
    it attempts to perform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的一个简单而巧妙的替代方法是将恶意软件执行在一个安全、受限的环境中，称为*沙箱*。在沙箱中运行恶意软件可以让它像感染真实目标一样自行解包。通过简单地运行恶意软件，我们可以了解特定恶意软件二进制文件连接到哪些服务器，改变了哪些系统配置参数，以及它尝试执行哪些设备I/O（输入/输出）操作。
- en: '**Dynamic Analysis for Malware Data Science**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**恶意软件数据科学中的动态分析**'
- en: Dynamic analysis is useful not only for malware reverse engineering but also
    for malware data science. Because dynamic analysis reveals what a malware sample
    *does*, we can compare its actions to those of other malware samples. For example,
    because dynamic analysis shows what files malware samples write to disk, we can
    use this data to connect those malware samples that write similar filenames to
    disk. These kinds of clues help us categorize malware samples based on common
    traits. They can even help us identify malware samples that were authored by the
    same groups or are part of the same campaigns.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, dynamic analysis is useful for building machine learning–based
    malware detectors. We can train a detector to distinguish between malicious and
    benign binaries by observing their behaviors during dynamic analysis. For example,
    after observing thousands of dynamic analysis logs from both malware and benign
    files, a machine learning system can learn that when *msword.exe* launches a process
    named *powershell.exe*, this action is malicious, but that when *msword.exe* launches
    Internet Explorer, this is probably harmless. [Chapter 8](ch08.xhtml#ch08) will
    go into more detail about how we can build malware detectors using data based
    on both static and dynamic analysis. But before we create sophisticated malware
    detectors, let’s look at some basic tools for dynamic analysis.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic Tools for Dynamic Analysis**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find a number of free, open source tools for dynamic analysis online.
    This section focuses on *[malwr.com](http://malwr.com)* and CuckooBox. The *[malwr.com](http://malwr.com)*
    site has a web interface that allows you to submit binaries for dynamic analysis
    for free*.* CuckooBox is a software platform that lets you set up your own dynamic
    analysis environment so that you can analyze binaries locally. The creators of
    the CuckooBox platform also operate *[malwr.com](http://malwr.com)*, and *[malwr.com](http://malwr.com)*
    runs CuckooBox behind the scenes. Therefore, learning how to analyze results on
    *[malwr.com](http://malwr.com)* will allow you to understand CuckooBox results.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '*At print time,* [malwr.com](http://malwr.com)’*s CuckooBox interface was down
    for maintenance. Hopefully by the time you read this section the site will be
    back up. If not, the information provided in this chapter can be applied to output
    from your own CuckooBox instance, which you can set up by following the instructions
    at* [https://cuckoosandbox.org/](https://cuckoosandbox.org/).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '***Typical Malware Behaviors***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following are the major categories of actions a malware sample may take
    upon execution:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Modifying the file system** For example, writing a device driver to disk,
    changing system configuration files, adding new programs to the file system, and
    modifying registry keys to ensure the program auto-starts'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Modifying the Windows registry to change the system configuration** For example,
    changing firewall settings'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading device drivers** For example, loading a device driver that records
    user keystrokes'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载设备驱动程序** 例如，加载一个记录用户按键的设备驱动程序'
- en: '**Network actions** For example, resolving domain names and making HTTP requests'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络操作** 例如，解析域名和发起HTTP请求'
- en: We’ll examine these behaviors in more detail using a malware sample and analyzing
    its report on *[malwr.com](http://malwr.com)*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个恶意软件样本并分析其在* [malwr.com](http://malwr.com) *上的报告，进一步详细检查这些行为。
- en: '***Loading a File on [malwr.com](http://malwr.com)***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在[malwr.com](http://malwr.com)上加载文件***'
- en: To run a malware sample through *[malwr.com](http://malwr.com)*, navigate to
    *[https://malwr.com/](https://malwr.com/)* and then click the **Submit** button
    to upload and submit a binary for analysis. We’ll use a binary whose SHA256 hash
    starts with the characters *d676d95*, which you can find in the data directory
    accompanying this chapter. I encourage you to submit this binary to *[malwr.com](http://malwr.com)*
    and inspect the results yourself as we go. The submit page is shown in [Figure
    3-1](ch03.xhtml#ch03fig1).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在* [malwr.com](http://malwr.com) *上运行一个恶意软件样本，首先访问* [https://malwr.com/](https://malwr.com/)
    *，然后点击**提交**按钮上传并提交二进制文件进行分析。我们将使用一个SHA256哈希以*d676d95*开头的二进制文件，你可以在本章附带的数据目录中找到。我鼓励你将这个二进制文件提交到*
    [malwr.com](http://malwr.com) *并在我们继续时自己查看结果。提交页面如[图3-1](ch03.xhtml#ch03fig1)所示。
- en: '![image](../images/f0028-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0028-01.jpg)'
- en: '*Figure 3-1: The malware sample submission page*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-1：恶意软件样本提交页面*'
- en: After you submit your sample through this form, the site should prompt you to
    wait for analysis to complete, which typically takes about five minutes. When
    the results load, you can inspect them to understand what the executable did when
    it was run in the dynamic analysis environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提交样本后，网站应该提示你等待分析完成，这通常需要大约五分钟。当结果加载完成后，你可以查看它们，了解可执行文件在动态分析环境中运行时所做的操作。
- en: '***Analyzing Results on [malwr.com](http://malwr.com)***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在[malwr.com](http://malwr.com)上分析结果***'
- en: The results page for our sample should look something like [Figure 3-2](ch03.xhtml#ch03fig2).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的样本的结果页面应该类似于[图3-2](ch03.xhtml#ch03fig2)。
- en: '![image](../images/f0028-02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0028-02.jpg)'
- en: '*Figure 3-2: The top of the results page for a malware sample on* [malwr.com](http://malwr.com)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-2：恶意软件样本结果页面顶部* [malwr.com](http://malwr.com)'
- en: The results for this file illustrate some key aspects of dynamic analysis, which
    we’ll explore next.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的结果展示了动态分析的一些关键方面，我们接下来将深入探讨。
- en: '**Signatures Panel**'
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**签名面板**'
- en: The first two panels you’ll see on the results page are Analysis and File Details.
    These contain the time the file was run and other static details about the file.
    The panel I will focus on here is the Signatures panel, shown in [Figure 3-3](ch03.xhtml#ch03fig3).
    This panel contains high-level information derived from the file itself and its
    behavior when it was run in the dynamic analysis environment. Let’s discuss what
    each of these signatures means.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在结果页面上看到的前两个面板是分析和文件详情。这些面板包含文件运行的时间和文件的其他静态信息。我将在这里关注的是签名面板，如[图3-3](ch03.xhtml#ch03fig3)所示。这个面板包含了从文件本身以及它在动态分析环境中运行时的行为中提取的高级信息。接下来让我们讨论这些签名的含义。
- en: '![image](../images/f0029-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0029-01.jpg)'
- en: '*Figure 3-3: The* [malwr.com](http://malwr.com) *signatures that match the
    behavior of our malware sample*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-3：* [malwr.com](http://malwr.com) *与我们的恶意软件样本行为匹配的签名*'
- en: The first three signatures shown in the figure result from static analysis (that
    is, these are results from the properties of the malware file itself, not its
    actions). The first signature simply tells us that a number of antivirus engines
    on the popular antivirus aggregator *[VirusTotal.com](http://VirusTotal.com)*
    marked this file as malware. The second indicates that the binary contains compressed
    or encrypted data, a common sign of obfuscation. The third tells us that this
    binary was compressed with the popular UPX packer. Although these static indicators
    on their own don’t tell us what this file does, they do tell us that it’s likely
    malicious. (Note that the color doesn’t correspond to static versus dynamic categories;
    instead, it represents the severity of each rule, with red—the darker gray here—being
    more suspicious than yellow.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The next three signatures result from dynamic analysis of the file. The first
    signature indicates that the program attempts to identify the system’s hardware
    and operating system. The second indicates that the program uses a pernicious
    feature of Windows known as *Alternate Data Streams (ADS)*, which allows malware
    to hide data on disk such that it’s invisible when using standard file system
    browsing tools. The third signature indicates that the file changes the Windows
    registry so that when the system reboots, a program that it specified will automatically
    execute. This would restart the malware whenever the user reboots their system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, even at the level of these automatically triggered signatures,
    dynamic analysis adds significantly to our knowledge of the file’s intended behavior.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**Screenshots Panel**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Beneath the Signatures panel is the Screenshots panel. This panel shows a screenshot
    of the dynamic analysis environment desktop as the malware is running. [Figure
    3-4](ch03.xhtml#ch03fig4) shows an example of what this looks like.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0030-01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-4: A screen capture of our malware sample’s dynamic behavior*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the malware we’re dealing with is *ransomware*, which is a
    type of malware that encrypts a target’s files and forces them to pay up if they
    want to get their data back. By simply running our malware, we were able to uncover
    its purpose without resorting to reverse engineering.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**Modified System Objects Panel**'
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A row of headings under Screenshots shows the malware sample’s network activity.
    Our binary did not engage in any network communications, but if it had, we would
    see the hosts it contacted here. [Figure 3-5](ch03.xhtml#ch03fig5) shows the Summary
    panel.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0031-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-5: The Files tab of the Summary pane, showing which files our malware
    sample modified*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: This shows which system objects, like files, registry keys, and mutexes, the
    malware has modified.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the Files tab in [Figure 3-6](ch03.xhtml#ch03fig6), it’s clear that
    this ransomware malware has indeed encrypted the user files on disk.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0031-02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-6: File paths in the Files tab of the Summary pane, suggesting that
    our sample is ransomware*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: After each file path is a file with a *.locked* extension, which we can infer
    is the encrypted version of the file it has replaced.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at the Registry Keys tab, shown in [Figure 3-7](ch03.xhtml#ch03fig7).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0031-03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-7: The Registry Keys tab of the Summary pane, showing which registry
    keys our malware sample modified*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The registry is a database that Windows uses to store configuration information.
    Configuration parameters are stored as registry keys, and these keys have associated
    values. Similar to file paths on the Windows file system, registry keys are backslash
    delimited. *[Malwr.com](http://Malwr.com)* shows us what registry keys our malware
    modified. Although this isn’t shown in [Figure 3-7](ch03.xhtml#ch03fig7), if you
    view the complete report on *[malwr.com](http://malwr.com)*, you should see that
    one notable registry key our malware changed is `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run`,
    which is a registry key that tells Windows to run programs each time a user logs
    on. It’s very likely that our malware modifies this registry to tell Windows to
    restart the malware every time the system boots up, which ensures that the malware
    infection persists from reboot to reboot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The Mutexes tab in the *[malwr.com](http://malwr.com)* report contains the names
    of the mutexes the malware created, as shown in [Figure 3-8](ch03.xhtml#ch03fig8).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0032-01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-8: The Mutexes tab of the Summary pane, showing which mutexes our
    malware sample created*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Mutexes are lock files that signal that a program has taken possession of some
    resource. Malware often uses mutexes to prevent itself from infecting a system
    twice. It turns out that at least one mutex created (*CTF.TimListCache.FMPDefaultS-1-5-21-1547161642-507921405-839522115-1004MUTEX.DefaultS-1-5-21-1547161642-507921405-839522115-1004
    ShimCacheMutex*) is known by the security community to be associated with malware
    and may be serving this purpose here.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '**API Call Analysis**'
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Clicking the Behavioral Analysis tab on the left panel of the *[malwr.com](http://malwr.com)*
    UI, as shown in [Figure 3-9](ch03.xhtml#ch03fig9), should bring up detailed information
    about our malware binary’s behavior.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: This shows what API calls were made by each process launched by the malware,
    along with their arguments and return values. Perusing this information is time
    consuming and requires expert knowledge of Windows APIs. Although a detailed discussion
    of malware API call analysis is beyond the scope of this book, if you’re interested
    in learning more, you can look up individual API calls to discover their effects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0033-01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-9: The Behavioral Analysis pane of the* [malwr.com](http://malwr.com)
    *report for our malware sample, showing when API calls were made during the dynamic
    execution*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-9：我们恶意软件样本的*[malwr.com](http://malwr.com)*报告中的行为分析窗格，显示了动态执行过程中何时进行 API
    调用*'
- en: Although *[malwr.com](http://malwr.com)* is a great resource for dynamically
    analyzing individual malware samples, it isn’t great for performing dynamic analysis
    on large numbers of samples. Executing large numbers of samples in a dynamic environment
    is important for machine learning and data analysis because it identifies relationships
    between malware samples’ dynamic execution patterns. Creating machine learning
    systems that can detect instances of malware based on their dynamic execution
    patterns requires running thousands of malware samples.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 *[malwr.com](http://malwr.com)* 是一个出色的资源，可以用于动态分析单个恶意软件样本，但它并不适合对大量样本进行动态分析。在动态环境中执行大量样本对机器学习和数据分析至关重要，因为它能够识别恶意软件样本动态执行模式之间的关系。创建能够基于恶意软件动态执行模式检测恶意软件实例的机器学习系统需要运行数千个恶意软件样本。
- en: In addition to this limitation, *[malwr.com](http://malwr.com)* doesn’t provide
    malware analysis results in machine-parseable formats like XML or JSON. To address
    these issues you must set up and run your own CuckooBox. Fortunately, CuckooBox
    is free and open source. It also comes with step-by-step instructions for setting
    up your very own dynamic analysis environment. I encourage you to do so by going
    to *[http://cuckoosandbox.org/](http://cuckoosandbox.org/)*. Now that you understand
    how to interpret dynamic malware results from *[malwr.com](http://malwr.com)*,
    which uses CuckooBox behind the scenes, you’ll also know how to analyze CuckooBox
    results once you have CuckooBox up and running.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这一局限性，*[malwr.com](http://malwr.com)* 还不提供像 XML 或 JSON 这样的机器可解析格式的恶意软件分析结果。为了解决这些问题，你必须设置并运行自己的
    CuckooBox。幸运的是，CuckooBox 是免费的开源软件，并且提供了逐步的设置指南，可以帮助你搭建属于自己的动态分析环境。我鼓励你通过访问 *[http://cuckoosandbox.org/](http://cuckoosandbox.org/)*
    来进行设置。现在，既然你了解了如何解读来自 *[malwr.com](http://malwr.com)* 的动态恶意软件结果（该网站在后台使用 CuckooBox），你也将知道如何分析
    CuckooBox 的结果，一旦你成功搭建并运行了 CuckooBox。
- en: '**Limitations of Basic Dynamic Analysis**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**基础动态分析的局限性**'
- en: Dynamic analysis is a powerful tool, but it is no malware analysis panacea.
    In fact, it has serious limitations. One limitation is that malware authors are
    aware of CuckooBox and other dynamic analysis frameworks and attempt to circumvent
    them by making their malware fail to execute when it detects that it’s running
    in CuckooBox. The CuckooBox maintainers are aware that malware authors try to
    do this, so they try to get around attempts by malware to circumvent CuckooBox.
    This cat-and-mouse game plays out continuously such that some malware samples
    will inevitably detect that they are running in dynamic analysis environments
    and fail to execute when we try to run them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 动态分析是一个强大的工具，但它并不是恶意软件分析的万能药。事实上，它有着严重的局限性。一个局限性是恶意软件作者知道 CuckooBox 和其他动态分析框架，并试图通过让恶意软件在检测到运行在
    CuckooBox 中时无法执行来规避它们。CuckooBox 的维护者知道恶意软件作者会尝试这样做，所以他们会尽力应对恶意软件绕过 CuckooBox 的尝试。这种猫鼠游戏持续进行，以至于某些恶意软件样本不可避免地会检测到它们正在动态分析环境中运行，并在我们尝试运行它们时无法执行。
- en: Another limitation is that even without any circumvention attempts, dynamic
    analysis might not reveal important malware behaviors. Consider the case of a
    malware binary that connects back to a remote server upon execution and waits
    for commands to be issued. These commands may, for example, tell the malware sample
    to look for certain kinds of files on the victim host, to log keystrokes, or turn
    on the webcam. In this case, if the remote server sends no commands, or is no
    longer up, none of these malicious behaviors will be revealed. Because of these
    limitations, dynamic analysis is not a fix-all for malware analysis. In fact,
    professional malware analysts combine dynamic and static analysis to achieve the
    best possible results.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个局限性是，即使没有任何规避尝试，动态分析也可能无法揭示重要的恶意软件行为。考虑一个恶意软件二进制文件的情况，该文件在执行时会连接到远程服务器，并等待命令发布。这些命令可能会告诉恶意软件样本在受害主机上查找某些类型的文件、记录按键或打开摄像头。在这种情况下，如果远程服务器没有发送任何命令，或者已经无法连接，则这些恶意行为将不会被揭示。由于这些局限性，动态分析并不是解决所有问题的万能方法。事实上，专业的恶意软件分析师结合动态和静态分析，以获得最佳的分析结果。
- en: '**Summary**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter you ran dynamic analysis on a ransomware malware sample with
    *[malwr.com](http://malwr.com)* to analyze the results. You also learned about
    the advantages and shortcomings of dynamic analysis. Now that you’ve learned how
    to conduct basic dynamic analysis, you’re ready to dive into malware data science.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你通过*【malwr.com】(http://malwr.com)* 对勒索软件恶意样本进行了动态分析以分析结果。你还了解了动态分析的优缺点。现在，你已经掌握了基本的动态分析方法，准备深入学习恶意软件数据科学了。
- en: The remainder of this book focuses on performing malware data science on static
    analysis–based malware data. I’ll focus on static analysis because it’s simpler
    and easier to get good results with compared to dynamic analysis, making it a
    good starting place for getting your hands dirty with malware data science. However,
    in each subsequent chapter I’ll also explain how you can apply data science methods
    to dynamic analysis–based data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分将专注于对基于静态分析的恶意软件数据进行恶意软件数据科学分析。我将重点介绍静态分析，因为它相较于动态分析更简单，并且更容易获得好的结果，这使得它成为开始进行恶意软件数据科学的良好起点。然而，在每一章中，我也会解释如何将数据科学方法应用于基于动态分析的数据。
