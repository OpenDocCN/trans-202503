["```\ndef greeting():\n    print(\"Hello\")\n    print(\"Nice to meet you\")\n```", "```\ngreeting()\n```", "```\ngreeting()\ngreeting()\ngreeting()\n```", "```\nHello\nNice to meet you\nHello\nNice to meet you\nHello\nNice to meet you\n```", "```\ndef fancyGreeting(personName):\n    print(\"Hello, \" + personName)\n\nfancyGreeting(\"Mario\")\nfancyGreeting(\"Steve\")\n```", "```\nHello, Mario\nHello, Steve\n```", "```\nfancyGreeting()\n```", "```\n   Traceback (most recent call last):\n     File \"<pyshell#2>\", line 1, in <module>\n       fancyGreeting()\n➊ TypeError: fancyGreeting() takes exactly 1 argument (0 given)\n```", "```\n   import time\n\n➊ def helloAndGoodbye(personName, secsToWait):\n       print(\"Hello, \" + personName)\n       time.sleep(secsToWait)\n       print(\"Goodbye, \" + personName)\n\n➋ helloAndGoodbye(\"Mario\", 10)\n   helloAndGoodbye(\"Steve\", 23)\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n➊ def growTree(x, y, z):\n       # Creates a tree at the coordinates given\n       # Write your code to make a tree here\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   y = pos.y\n   z = pos.z\n\n➋ growTree(x + 1, y, z)\n```", "```\nname1 = input(\"Hello, what is your name?\")\nprint(\"Pleased to meet you, \" + name1)\nname2 = input(\"Hello, what is your name?\")\nprint(\"Pleased to meet you, \" + name2)\nname3 = input(\"Hello, what is your name?\")\nprint(\"Pleased to meet you, \" + name3)\n```", "```\ndef helloFriend():\n    name = input(\"Hello, what is your name?\")\n    print(\"Pleased to meet you, \" + name)\n\nhelloFriend()\nhelloFriend()\nhelloFriend()\n```", "```\nHello, what is your name? Craig\nPleased to meet you, Craig\nHello, what is your name? Still Craig\nPleased to meet you, Still Craig\nHello, what is your name? Craig again\nPleased to meet you, Craig again\n```", "```\nfrom mcpi.minecraft import Minecraft\nmc = Minecraft.create()\n\nimport time\n\npos = mc.player.getPos()\nx = pos.x\ny = pos.y\nz = pos.z\nmc.setBlock(x, y - 1, z, 103)\ntime.sleep(10)\n\npos = mc.player.getPos()\nx = pos.x\ny = pos.y - 1\nz = pos.z\nmc.setBlock(x, y, z, 103)\ntime.sleep(10)\n\npos = mc.player.getPos()\nx = pos.x\ny = pos.y - 1\nz = pos.z\nmc.setBlock(x, y, z, 103)\ntime.sleep(10)\n```", "```\n   def duplicateString(stringToDbl):\n➊     \"\"\" Prints a string twice on the same line.\n       stringToDbl argument should be a string \"\"\"\n       print(stringToDbl * 2)\n```", "```\nfrom mcpi.minecraft import Minecraft\nmc = Minecraft.create()\n\npos = mc.player.getPos()\nwidth = 10\nheight = 12\nlength = 13\nblock = 103\nmc.setBlocks(pos.x, pos.y, pos.z,\n             pos.x + width, pos.y + height, pos.z + length, block)\n```", "```\ndef calculateCookiePrice(cost):\n    price = cost + 2\n    price = price * 10\n    return price\n```", "```\npriceOfCookie = calculateCookiePrice(6)  # Value will be 80\n```", "```\ndef numberOfChickens():\n    return 5\n\ncoop = numberOfChickens()\nprint(numberOfChickens())\n```", "```\nextraChickens = 4 + numberOfChickens()  # Value of 9\n```", "```\ndef chickenNoise():\n    print(\"Cluck\")\n\nchickenNoise()\n```", "```\nmultipleNoises = chickenNoise() + \", Bork\"\n```", "```\nTraceback (most recent call last):\n  File \"<pyshell#3>\", line 1, in <module>\n    multipleNoises = chickenNoise + \", Bork\"\nTypeError: unsupported operand type(s) for +: 'function' and 'str'\n```", "```\ndef chickenNoise():\n    return \"Cluck\"\n\nmultipleNoises = chickenNoise() + \", Bork\"\nprint(multipleNoises)\n```", "```\nCluck, Bork\n```", "```\ndef melon():\n    \"\"\" Returns the value of the melon block \"\"\"\n    return 103\n```", "```\nfrom mcpi.minecraft import Minecraft\nmc = Minecraft.create()\n\n# Functions go here\n\nblock = melon()\npos = mc.player.getTilePos()\nmc.setBlock(pos.x, pos.y, pos.z, block)\n```", "```\ndef wordToNumber(numToConvert):\n    \"\"\" Converts a number written as a word to an integer \"\"\"\n    if numToConvert == \"one\":\n        numAsInt = 1\n    elif numToConvert == \"two\":\n        numAsInt = 2\n    elif numToConvert == \"three\":\n        numAsInt = 3\n    elif numToConvert == \"four\":\n        numAsInt = 4\n    elif numToConver == \"five\":\n        numAsInt = 5\n\n    return numAsInt\n```", "```\n➊ def chooseGreeting(metBefore):\n       \"\"\" Chooses a greeting depending on whether you've met someone before.\n       metBefore argument should be a Boolean value \"\"\"\n       if metBefore:\n➋         print(\"Nice to see you again\")\n       else:\n➌         print(\"Nice to meet you\")\n\n   chooseGreeting(True)\n   chooseGreeting(False)\n```", "```\nfrom mcpi.minecraft import Minecraft\nmc = Minecraft.create()\n\nblock = 35\nstate = 6\n# Creates a single block of pink wool\nmc.setBlock(10, 3, -4, block, state)\n\n# Creates a cuboid of pink wool\nmc.setBlocks(11, 3, -4, 20, 6, -8, block, state)\n```", "```\n   def getWoolState(color):\n       \"\"\" Takes a color as a string and returns the wool block state for\n       that color \"\"\"\n➊     if color == \"pink\":\n           blockState = 6\n       elif # Add elif statements for the other colors\n       # Return the blockState here\n\n➋ colorString = input(\"Enter a block color: \")\n   state = getWoolState(colorString)\n\n➌ pos = mc.player.getTilePos()\n   mc.setBlock(pos.x, pos,y, pos.z, 35, state)\n```", "```\ndef printMultiple(toPrint, repeats):\n    \"\"\" Prints a string a number of times determined by the repeats variable \"\"\"\n    count = 0\n    while count < repeats:\n        print(toPrint)\n        count += 1\n```", "```\n   def doubleUntilHundred(numberToDbl):\n       \"\"\" Doubles a number until it is greater than 100\\. Returns the number of\n       times the number was doubled \"\"\"\n       count = 0\n       while numToDbl < 100:\n           numberToDbl = numberToDbl * 2\n           count += 1\n➊     return count\n\n   print(doubleUntilHundred(2))\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n   import random\n\n   def randomBlockLocations(blockType, repeats):\n➊     count = 0\n➋     # Add the loop here\n       x = random.randint(-127, 127)\n       z = random.randint(-127, 127)\n➌     y = mc.getHeight(x, z)\n       mc.setBlock(x, y, z, blockType)\n       count += 1\n```", "```\n➊ eggs = 12\n\n   def increaseEggs():\n➋     eggs += 1\n       print(eggs)\n\n   increaseEggs()\n```", "```\nUnboundLocalError: local variable 'eggs' referenced before assignment\n```", "```\n   eggs = 12\n\n   def increaseEggs():\n➊     global eggs\n       eggs += 1\n       print(eggs)\n\n   increaseEggs()\n```", "```\n   eggs = 12\n\n   def increaseEggs():\n➊     eggs = 0\n       eggs += 1\n➋     print(eggs)\n\n   increaseEggs()\n➌ print(eggs)\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   import time\n\n   def calculateMove():\n       \"\"\" Changes the x and z variables for a block. If the block\n       in front of the block is less than 2 blocks higher, it will move\n       forward; otherwise it will try to move left, then backward,\n       then finally right. \"\"\"\n➊     # Create global variables here\n\n       currentHeight = mc.getHeight(x, z) - 1\n\n       forwardHeight = mc.getHeight(x + 1, z)\n       rightHeight = mc.getHeight(x, z + 1)\n       backwardHeight = mc.getHeight(x - 1, z)\n       leftHeight = mc.getHeight(x, z - 1)\n\n       if forwardHeight - currentHeight < 3:\n           x += 1\n       elif rightHeight - currentHeight < 3:\n           z += 1\n       elif leftHeight - currentHeight < 3:\n           z -= 1\n       elif backwardHeight - currentHeight < 3:\n           x -= 1\n\n       y = mc.getHeight(x, z)\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   z = pos.z\n   y = mc.getHeight(x, z)\n\n   while True:\n       # Calculate block movement\n       calculateMove()\n\n       # Place block\n       mc.setBlock(x, y, z, 103)\n\n       # Wait\n       time.sleep(1)\n\n       # Remove the block\n       mc.setBlock(x, y, z, 0)\n```"]