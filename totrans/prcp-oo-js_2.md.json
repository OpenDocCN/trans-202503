["```\n`function` add(num1, num2) {\n    `return` num1 `+` num2;\n}\n```", "```\n`var` add `=` `function`(num1, num2) {\n    `return` num1 `+` num2;\n};\n```", "```\n`var` result `=` add(5, 5);\n\n`function` add(num1, num2) {\n    `return` num1 `+` num2;\n}\n```", "```\n`// how the JavaScript engine interprets the code`\n`function` add(num1, num2) {\n    `return` num1 `+` num2;\n}\n\n`var` result `=` add(5, 5);\n```", "```\n`// error!`\n`var` result `=` add(5, 5);\n\n`var` add `=` `function`(num1, num2) {\n    `return` num1 `+` num2;\n};\n```", "```\n❶ `function` sayHi() {\n      console.log(`\"Hi!\"`);\n  }\n\n  sayHi();        `// outputs \"Hi!\"`\n\n❷ `var` sayHi2 `=` sayHi;\n\n  sayHi2();       `// outputs \"Hi!\"`\n```", "```\n`var` sayHi `=` `new` `Function`(`\"console.log(\\\"Hi!\\\");\"`);\n\nsayHi();        `// outputs \"Hi!\"`\n\n`var` sayHi2 `=` sayHi;\n\nsayHi2();       `// outputs \"Hi!\"`\n```", "```\n  `var` numbers `=` [ 1, 5, 8, 4, 7, 10, 2, 6 ];\n❶ numbers.sort(`function`(first, second) {\n      `return` first - second;\n  });\n\n  console.log(numbers);       `// \"[1, 2, 4, 5, 6, 7, 8, 10]\"`\n\n❷ numbers.sort();\n  console.log(numbers);       `// \"[1, 10, 2, 4, 5, 6, 7, 8]\"`\n```", "```\n`function` reflect(value) {\n    `return` value;\n}\n\nconsole.log(reflect(`\"Hi!\"`));        `// \"Hi!\"`\nconsole.log(reflect(`\"Hi!\"`, `25`));    `// \"Hi!\"`\nconsole.log(reflect.length);        `// 1`\n\nreflect `=` `function`() {\n    `return` arguments[0];\n};\n\nconsole.log(reflect(`\"Hi!\"`));        `// \"Hi!\"`\nconsole.log(reflect(`\"Hi!\"`, `25`));    `// \"Hi!\"`\nconsole.log(reflect.length);        `// 0`\n```", "```\n`function` sum() {\n\n    `var` result `=` `0`,\n        i `=` `0`,\n        len `=` arguments.length;\n\n    `while` (i `<` len) {\n        result `+=` arguments[i];\n        i`++`;\n    }\n\n    `return` result;\n}\n\nconsole.log(sum(`1`, `2`));         `// 3`\nconsole.log(sum(`3`, `4`, `5`, `6`));   `// 18`\nconsole.log(sum(`50`));           `// 50`\nconsole.log(sum());             `// 0`\n```", "```\n`function` sayMessage(message) {\n    console.log(message);\n}\n\n`function` sayMessage() {\n    console.log(\"D`efault` `message``\"``);`\n}\n\nsayMessage(`\"Hello!\"`);       `// outputs \"Default message\"`\n```", "```\n`var` sayMessage `=` `new` `Function`(`\"message\"`, `\"console.log(message);\"`);\n\nsayMessage `=` new Function(`\"console.log(\\\"Default message\\\");\"`);\n\nsayMessage(`\"Hello!\"`);       `// outputs \"Default message\"`\n```", "```\n`function` sayMessage(message) {\n\n    `if` (arguments.length `===` `0`) {\n        message `=` `\"Default message\"`;\n    }\n\n    console.log(message);\n}\n\nsayMessage(`\"Hello!\"`);       `// outputs \"Hello!\"`\n```", "```\n`var` person `=` {\n    name: `\"Nicholas\"`,\n    sayName: `function`() {\n        console.log(person.name);\n    }\n};\n\nperson.sayName();       `// outputs \"Nicholas\"`\n```", "```\n`var` person `=` {\n    name: `\"Nicholas\"`,\n    sayName: `function`() {\n        console.log(`this`.name);\n    }\n};\n\nperson.sayName();      `// outputs \"Nicholas\"`\n```", "```\n`function` sayNameForAll() {\n    console.log(`this`.name);\n}\n\n`var` person1 `=` {\n    name: `\"Nicholas\"`,\n    sayName: sayNameForAll\n};\n\n`var` person2 `=` {\n    name: `\"Greg\"`,\n    sayName: sayNameForAll\n};\n\n`var` name `=` `\"Michael\"`;\n\nperson1.sayName();      `// outputs \"Nicholas\"`\nperson2.sayName();      `// outputs \"Greg\"`\n\nsayNameForAll();        `// outputs \"Michael\"`\n```", "```\n`function` sayNameForAll(label) {\n    console.log(label `+` `\":\"` `+` `this`.name);\n}\n\n`var` person1 `=` {\n    name: `\"Nicholas\"`\n};\n\n`var` person2 `=` {\n    name: `\"Greg\"`\n};\n\n`var` name `=` `\"Michael\"`;\n\nsayNameForAll.call(`this`, `\"global\"`);        `// outputs \"global:Michael\"`\nsayNameForAll.call(person1, `\"person1\"`);    `// outputs \"person1:Nicholas\"`\nsayNameForAll.call(person2, `\"person2\"`);    `// outputs \"person2:Greg\"`\n```", "```\n`function` sayNameForAll(label) {\n    console.log(label `+` `\":\"` `+` `this`.name);\n}\n\n`var` person1 `=` {\n    name: `\"Nicholas\"`\n};\n\n`var` person2 `=` {\n    name: `\"Greg\"`\n};\n\n`var` name `=` `\"Michael\"`;\n\nsayNameForAll.apply(`this`, [`\"global\"`]);      `// outputs \"global:Michael\"`\nsayNameForAll.apply(person1, [`\"person1\"`]);  `// outputs \"person1:Nicholas\"`\nsayNameForAll.apply(person2, [`\"person2\"`]);  `// outputs \"person2:Greg\"`\n```", "```\n  `function` sayNameForAll(label) {\n      console.log(label `+` `\":\"` `+` `this`.name);\n  }\n\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n  `var` person2 `=` {\n      name: `\"Greg\"`\n  };\n\n  `// create a function just for person1`\n❶ `var` sayNameForPerson1 `=` sayNameForAll.bind(person1);\n  sayNameForPerson1(`\"person1\"`);       `// outputs \"person1:Nicholas\"`\n\n  `// create a function just for person2`\n❷ `var` sayNameForPerson2 `=` sayNameForAll.bind(person2, `\"person2\"`);\n  sayNameForPerson2();                `// outputs \"person2:Greg\"`\n\n  `// attaching a method to an object doesn't change 'this'`\n❸ person2.sayName `=` sayNameForPerson1;\n  person2.sayName(`\"person2\"`);         `// outputs \"person2:Nicholas\"`\n```"]