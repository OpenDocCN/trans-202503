- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: A FULLY FUNCTIONAL BATCH IMPROV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 15](chapter15.xhtml), I built a rudimentary version of *BatchImprov.bat*
    that shared a single joke, riddle, or pun. In later chapters, you learned several
    tools to enhance this process, such as reading files, loading arrays, and using
    a random number to select an arbitrary element from an array.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s put it all together into an enhanced bat file that first reads library
    files containing any number of jokes, riddles, and puns, and loads them into arrays.
    Then the BUI will randomly retrieve and share one example of the user’s requested
    humor before asking if they want another offering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with the data, here are the full contents of *BatJokes.txt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*BatRiddles.txt* similarly contains the riddles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The puns are formatted differently, so each record of *BatPuns.txt* doesn’t
    contain an answer delimited by a pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, place these three library files in the same directory as this version
    of *BatchImprov.bat*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Much of this bat file should look familiar, but plenty is new. I perform multiple
    calls to :LoadArray passing either joke, riddle, or pun as the argument. The routine,
    which is similar to some code in [Chapter 29](chapter29.xhtml), uses this text
    to find and read a specific file in the current directory and build appropriately
    named arrays.
  prefs: []
  type: TYPE_NORMAL
- en: An unartful coder might get this to work for the jokes before cloning it for
    the riddles and puns. Instead, I use common code where the first call populates
    the joke and jokeAns arrays and sets jokesTot to the total number of jokes loaded
    into the arrays, even though the actual variable name never appears in the bat
    file. I create the variable by resolving the parameter as part of %1sTot.
  prefs: []
  type: TYPE_NORMAL
- en: The second call similarly populates the riddle and riddleAns arrays, along with
    the riddlesTot variable. But the puns are formatted differently. Since there’s
    no pipe and no answer, there’s no second parameter and the code doesn’t populate
    the answer array. Instead, the same logic builds the pun array and sets punsTot
    to the number of puns in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove this later, but for testing purposes, I display the results
    of each load to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The cls command clears the screen before starting the user interface portion
    of the bat file.
  prefs: []
  type: TYPE_NORMAL
- en: The main logic under the :Again label is unchanged from the prior version of
    the bat file. The :Joke, :Riddle, and :Pun routines all retrieve a random number
    by calling :GetRandNbr. To get the total number of elements in the appropriate
    array, the routine resolves its parameter as part of !%1sTot!. The rest of the
    logic is similar to what you saw in [Chapter 21](chapter21.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: After getting a pointer for their array (or arrays), these routines look similar
    to their earlier counterparts except that these get their content from arrays.
    For example, !joke[%randNbr%]! resolves to a joke, and !jokeAns[%randNbr%]! resolves
    to its answer. (Delayed expansion is awesome.)
  prefs: []
  type: TYPE_NORMAL
- en: Now you can run *BatchImprov.bat* to retrieve multiple jokes, riddles, and puns.
    You can even add more content to the library files without changing the code.
    Better yet, use this as a template for your applications that use a BUI, arrays,
    delimited data files, and random numbers. Enjoy.
  prefs: []
  type: TYPE_NORMAL
