- en: '![image](../images/f085-01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f085-01.jpg)'
- en: '**4'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: 'Pebble Economy: Using Variables to Count Items**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 卵石经济学：使用变量来计数物品**
- en: In the previous chapter, you used some basic Twine techniques to add text effects,
    display a random selection from a list of book titles, and link to a menu of passage
    links. You learned about Boolean variables that have two different values, which
    you used with conditionals to make decisions in your game. You also learned how
    to use integer variables to assign different events to specific conditions. In
    this chapter, you’ll build on what you learned to create more complicated scripts
    and discover what variables are really capable of!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你使用了一些基本的Twine技巧来添加文本效果，从书名列表中随机选择一个并展示，以及链接到一个传送门菜单。你学习了布尔变量，它们有两种不同的值，并且你使用了条件语句在游戏中做决策。你还学习了如何使用整数变量将不同的事件分配给特定的条件。在这一章中，你将基于所学内容，创建更复杂的脚本，并发现变量真正的能力！
- en: This chapter is a short one. If it seems like a little too much to wrap your
    head around, don’t be afraid to skip it. Maybe you’ll come back to it when you
    have more experience scripting in Twine and want to try some more advanced stuff!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章内容比较简短。如果感觉有点难以理解，不要害怕跳过它。或许等你在Twine编程中积累更多经验后，再回来尝试一些更高级的内容！
- en: Counting Fairy Pebbles
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算仙女卵石
- en: Similar to regular numbers, you can use *integer* variables to add, subtract,
    and check how low or high their value is. You might also use an integer variable
    to count the number of cats the player has petted or to remember how many sandwiches
    the player has made for their picnic. Let’s explore how to keep track of the number
    of pebbles the player is carrying around using a game called *The Pebble Economy*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通数字类似，你可以使用*整数*变量来进行加法、减法，并检查它们的值是多高或多低。你也可以使用整数变量来计算玩家抚摸过的猫的数量，或者记住玩家为野餐制作了多少三明治。让我们来看看如何使用名为*《卵石经济学》*的游戏来追踪玩家携带的卵石数量。
- en: '![image](../images/f086-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f086-01.jpg)'
- en: '*The Pebble Economy* contains an example of how you might use integer variable
    numbers in Twine. In this short game, the player has to find enough pebbles to
    pay a fairy toll: it costs five pebbles to enter the Fairy Kingdom. Check out
    the game at *[https://nostarch.com/twinegames/](https://nostarch.com/twinegames/)*.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*《卵石经济学》*包含了一个关于如何在Twine中使用整数变量的例子。在这个小游戏中，玩家需要找到足够的卵石来支付仙女的通行费：进入仙女王国需要五颗卵石。你可以在
    *[https://nostarch.com/twinegames/](https://nostarch.com/twinegames/)* 上查看这个游戏。'
- en: '![image](../images/f087-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f087-01.jpg)'
- en: We’ll use the variable `$pebbles` to track the number of pebbles the player
    has found.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用变量`$pebbles`来追踪玩家找到的卵石数量。
- en: Each time the player searches for pebbles at the old creek, they find one, two,
    three, or zero pebbles (they find a weird frog instead), which are added to their
    total. We use `display` and `either` to randomly choose the passage the player
    sees, which determines the number of pebbles they find. As you learned in [Chapter
    3](ch03.xhtml), you can use `either` to choose a random passage and `display`
    to make the contents of that passage appear. Each passage gives the player a different
    number of pebbles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每次玩家在旧溪流处寻找卵石时，他们会找到一颗、两颗、三颗，或者零颗卵石（如果他们找到了一只奇怪的青蛙），这些卵石会被加入到他们的总数中。我们使用`display`和`either`来随机选择玩家看到的段落，从而决定他们找到多少颗卵石。正如你在[第三章](ch03.xhtml)中学到的，你可以使用`either`来选择一个随机段落，使用`display`来显示该段落的内容。每个段落都会给玩家不同数量的卵石。
- en: 'For example, we can use the following line to add two new pebbles the player
    has found in a passage to their total number of pebbles:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用以下代码，将玩家在某一段落中找到的两颗卵石添加到他们的卵石总数中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This line tells Twine to set `$pebbles` to the current value of `$pebbles` plus
    2\. So if the value of `$pebbles` was 2, this line’s value would increase to 4.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码告诉Twine将`$pebbles`设置为当前的`$pebbles`值加2。因此，如果`$pebbles`的值是2，这行代码将把值增加到4。
- en: 'To display the value of a variable, just enter its name in a sentence to show
    the player how many pebbles they have:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示变量的值，只需在句子中输入变量名，以向玩家展示他们有多少颗卵石：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This line displays the total number using the value stored in the `$pebbles`
    variable. The player should see “You have 4 pebbles,” “You have 10 pebbles,” or
    “You have 500 pebbles,” depending on how many pebbles the player has found up
    to that point.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码会显示出`$pebbles`变量中存储的总数。玩家应该看到“你有4颗卵石”，“你有10颗卵石”，或者“你有500颗卵石”，具体取决于玩家到那时为止找到的卵石数量。
- en: Using elseif to Check Integer Values
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`elseif`来检查整数值
- en: It makes sense to use `if` and `else` for Booleans because they’re either true
    or false, on or off. If they’re not one value, they must be the other. But integers
    can have more than two possibilities. For example, you might have enough pebbles
    to pay the toll. You might have no pebbles at all! Or you might have *some* pebbles
    but not enough! That’s three different conditions to check for, which means that
    using `if` and `else` alone isn’t going to cut it!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于布尔值，使用`if`和`else`是有意义的，因为它们要么为真，要么为假，要么开启，要么关闭。如果它们不是一个值，那肯定是另一个值。但整数可以有多种可能性。例如，你可能有足够的卵石来支付过路费，或者根本没有卵石！也可能你有*一些*卵石，但不足够！这就需要检查三种不同的条件，所以单独使用`if`和`else`是不够的！
- en: 'Fortunately, we can use `elseif` to keep track of a third value:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以使用`elseif`来跟踪第三个值：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `elseif` statement works like a regular `if` statement with an additional
    condition! In this example, Twine first checks whether `$pebbles` is greater than
    or equal to 5 using the hook `(if: $pebbles >= 5)`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`elseif`语句像常规的`if`语句一样工作，只不过它增加了一个额外的条件！在这个例子中，Twine首先使用钩子`(if: $pebbles >=
    5)`检查`$pebbles`是否大于或等于5。'
- en: 'If `$pebbles` is greater than or equal to 5, Twine displays “You have enough
    pebbles!” and that’s that. But if it isn’t, Twine tries the `elseif` hook `(elseif:
    $pebbles is 0)` to check if `$pebbles` is equal to 0\. If it is, Twine displays
    “You don’t have ANY pebbles!” to let the player know they need more pebbles.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '如果`$pebbles`大于或等于5，Twine会显示“You have enough pebbles!”（你有足够的卵石！），然后结束。如果不是，Twine会尝试`elseif`钩子`(elseif:
    $pebbles is 0)`，检查`$pebbles`是否等于0。如果是，Twine会显示“You don’t have ANY pebbles!”（你没有任何卵石！），告诉玩家他们需要更多卵石。'
- en: If neither condition is true, then Twine moves on to the `else` statement. The
    `else` part covers every possible case other than those covered by the `if` and
    `elseif`, which is when the player has 1, 2, 3, and 4 pebbles. We tell Twine to
    display `[You only have $pebbles pebbles!]`, where `$pebbles` represents the number
    of pebbles the player has.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个条件都不为真，那么Twine会继续执行`else`语句。`else`部分涵盖了除了`if`和`elseif`所涵盖的所有情况，这意味着玩家拥有1、2、3或4个卵石的情况。我们告诉Twine显示`[You
    only have $pebbles pebbles!]`，其中`$pebbles`表示玩家拥有的卵石数量。
- en: The Order of Things Is Important!
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 事情的顺序很重要！
- en: Keep in mind that the order in which you write your code is important. When
    Twine decides what code to execute, and in what order to do it, it reads from
    top to bottom, the same way you read a page in this book. When you write code
    for your games, make sure it’s written in the order that will make the most sense
    in Twine. For example, we write the `else` statement at the very end because we
    want Twine to do this only after checking the first two conditions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，写代码的顺序非常重要。当Twine决定执行哪些代码，并按什么顺序执行时，它是从上到下读取的，就像你读书页一样。当你为游戏编写代码时，确保它按照最合适的顺序写，以便在Twine中最容易理解。例如，我们把`else`语句写在最后，因为我们希望Twine在检查前两个条件后才执行这部分代码。
- en: 'But what if you want an additional condition? You might want to add an encouraging
    message if the player is *really* close to having enough pebbles for the toll.
    We can update the existing code with another `elseif` statement like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那如果你想要一个额外的条件呢？如果玩家*非常*接近拥有足够的卵石支付过路费，或许你希望添加一个鼓励性的消息。我们可以通过添加另一个`elseif`语句来更新现有代码，如下所示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now there’s a different message for the player when they have 3 or more pebbles.
    Notice that we put the `elseif` statement second from the top. That’s because
    if we put this `elseif` statement before the `if` statement, a player would see
    the “Almost there!” message even when they had 6 pebbles because 6 is *also* greater
    than or equal to 3\. But that doesn’t make sense, because the player already has
    enough pebbles to pay the toll! Only if the player *doesn’t* have at least 5 pebbles
    do we want Twine to check whether they have 3 or more.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当玩家拥有3个或更多卵石时，会显示不同的消息。注意，我们把`elseif`语句放在第二个位置。这是因为如果我们把这个`elseif`语句放在`if`语句之前，那么即使玩家有6个卵石，他们也会看到“Almost
    there!”（快到了！）的消息，因为6也*大于或等于*3。但这样不合逻辑，因为玩家已经有足够的卵石支付过路费了！只有在玩家*没有*至少5个卵石时，我们才希望Twine检查他们是否有3个或更多卵石。
- en: Twine always starts by checking the `if` case. Then it checks each of the `elseif`
    statements in order from top to bottom. You can write as many `elseif` statements
    as you want. As soon as Twine finds a condition that is true, Twine stops there
    and does what you told it to do in that case. If none of the `elseif` statements
    are true, *only then* does it check for the `else`. The `else` statement is Twine’s
    last resort.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Twine总是从检查`if`条件开始。然后，它会按从上到下的顺序检查每一个`elseif`语句。你可以写任意数量的`elseif`语句。只要Twine找到一个为真的条件，它就会停在那里并执行你在那个条件下指示的操作。如果没有任何`elseif`语句为真，*只有那时*它才会检查`else`。`else`语句是Twine的最后手段。
- en: Whenever code you’ve written doesn’t work the way you expected, read through
    your code from top to bottom to check that your conditions are in the right order.
    Perhaps Twine stopped before it got to the case you expected because an earlier
    condition was also true. Sometimes, simply rearranging the order in which Twine
    looks for conditions can solve a problem.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你写的代码没有按预期工作时，逐行阅读你的代码，检查条件是否按正确的顺序排列。也许Twine在检查你预期的条件之前就停止了，因为早前的某个条件也为真。有时，简单地调整Twine查找条件的顺序就能解决问题。
- en: String Variables
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串变量
- en: '*Strings* are a type of variable that contains text: a word, phrase, or sentence.
    Your Twine games are mostly text already, but sometimes you’ll need to keep track
    of a *particular* piece of text. For example, you can use string variables to
    keep track of whether the player put on a “red baseball cap” or a “plastic tiara”
    before leaving the house this morning.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*是一种包含文本的变量：一个词、短语或句子。你的Twine游戏大多是文字内容，但有时你需要跟踪一个*特定*的文本。例如，你可以使用字符串变量来记录玩家今天早上出门前是否戴上了“红色棒球帽”或“塑料王冠”。'
- en: '![image](../images/f090-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f090-01.jpg)'
- en: 'To see a string variable in action, enter the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看字符串变量的实际应用，请输入以下内容：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Try hitting play! Twine should print “The wind is so strong that your plastic
    baseball tiara is blown right off your head!” Try changing the description of
    the hat. The game should change to match what you typed!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试点击播放！Twine应该会打印出“风太大，把你的塑料棒球王冠吹得从你头上飞了！”试着改变帽子的描述，游戏应该会根据你输入的内容进行变化！
- en: The important thing is that you make sure there are quotes (`"`) on either side
    of the string. That’s how Twine knows where the string starts and stops. If it’s
    inside the quotes, it’s a string. If it’s outside, it’s code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要确保字符串两边有引号（`"`）。这就是Twine知道字符串开始和结束的方式。如果在引号内，那就是字符串；如果在引号外，那就是代码。
- en: Can you think of how this technique might be useful in a story? Maybe the game
    starts in the player’s bedroom, where a few of their favorite hats are hanging.
    Whatever hat they choose, you can set $hat to match the description of the hat.
    That way when the story mentions the player’s hat, it can mention the specific
    one that they chose!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想到这个技巧在故事中如何派上用场吗？也许游戏从玩家的卧室开始，那里挂着几顶他们最喜欢的帽子。无论他们选择哪顶帽子，你都可以将$hat设置为匹配所选帽子的描述。这样，当故事提到玩家的帽子时，就能提到他们具体选择的那顶！
- en: You could ask them to pick their favorite color. You could ask whether they’d
    like a pet cat or a pet dog. There’s a piece of code that will let the player
    type something in—you can ask them to name their pet, then refer to the pet by
    the name they chose! Read through the Twine wiki and see if you can figure out
    how.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以让他们挑选自己喜欢的颜色。你可以问他们是喜欢宠物猫还是宠物狗。有一段代码可以让玩家输入一些内容——你可以让他们给宠物起个名字，然后在故事中使用他们选择的名字来称呼宠物！阅读Twine的维基，看看你能否弄明白如何实现。
- en: A Note on Story Formats
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于故事格式的说明
- en: 'In this book, I use Twine 2’s default story format, which is Harlowe. Twine 2
    has two other story formats: Snowman and SugarCube. To change your game’s story
    format, click its name, and then choose Change Story Format. But keep in mind
    that all the hooks you’ve learned so far are specific to Harlowe. Other story
    formats can do the same things, but the code you’ll need to write will be a little
    different.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我使用的是Twine 2的默认故事格式Harlowe。Twine 2还有两种其他的故事格式：Snowman和SugarCube。要更改游戏的故事格式，点击其名称，然后选择“更改故事格式”。但请记住，至今你学到的所有钩子都是特定于Harlowe的。其他故事格式也能做相同的事情，但你需要编写的代码会略有不同。
- en: You’ll find plenty of information about story formats at [*http://twine2.neocities.org*](http://twine2.neocities.org)/
    and on Twine’s Help page.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[*http://twine2.neocities.org*](http://twine2.neocities.org)/和Twine的帮助页面找到大量关于故事格式的信息。
- en: '![image](../images/f091-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f091-01.jpg)'
- en: What You Learned
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: In this rather short chapter, you learned more about how variables work and
    how you can change what’s stored inside them. In particular, you learned that
    integer variables contain numbers and that string variables contain words or phrases.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一较短的章节中，你了解了变量是如何工作的，以及如何更改它们所存储的内容。特别是，你了解了整数变量存储的是数字，而字符串变量存储的是单词或短语。
- en: In the next and final chapter, I’ll show you more Twine games that you can play
    (created by people other than me!) as well as provide you with some challenges
    to try in your own game design practice.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的最后一章，我将向你展示更多可以玩的Twine游戏（由其他人制作！），并为你提供一些挑战，供你在自己的游戏设计实践中尝试。
- en: '![image](../images/f092-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f092-01.jpg)'
