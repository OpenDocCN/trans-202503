- en: '![image](../images/f085-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pebble Economy: Using Variables to Count Items**'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, you used some basic Twine techniques to add text effects,
    display a random selection from a list of book titles, and link to a menu of passage
    links. You learned about Boolean variables that have two different values, which
    you used with conditionals to make decisions in your game. You also learned how
    to use integer variables to assign different events to specific conditions. In
    this chapter, you’ll build on what you learned to create more complicated scripts
    and discover what variables are really capable of!
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is a short one. If it seems like a little too much to wrap your
    head around, don’t be afraid to skip it. Maybe you’ll come back to it when you
    have more experience scripting in Twine and want to try some more advanced stuff!
  prefs: []
  type: TYPE_NORMAL
- en: Counting Fairy Pebbles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to regular numbers, you can use *integer* variables to add, subtract,
    and check how low or high their value is. You might also use an integer variable
    to count the number of cats the player has petted or to remember how many sandwiches
    the player has made for their picnic. Let’s explore how to keep track of the number
    of pebbles the player is carrying around using a game called *The Pebble Economy*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f086-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The Pebble Economy* contains an example of how you might use integer variable
    numbers in Twine. In this short game, the player has to find enough pebbles to
    pay a fairy toll: it costs five pebbles to enter the Fairy Kingdom. Check out
    the game at *[https://nostarch.com/twinegames/](https://nostarch.com/twinegames/)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f087-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We’ll use the variable `$pebbles` to track the number of pebbles the player
    has found.
  prefs: []
  type: TYPE_NORMAL
- en: Each time the player searches for pebbles at the old creek, they find one, two,
    three, or zero pebbles (they find a weird frog instead), which are added to their
    total. We use `display` and `either` to randomly choose the passage the player
    sees, which determines the number of pebbles they find. As you learned in [Chapter
    3](ch03.xhtml), you can use `either` to choose a random passage and `display`
    to make the contents of that passage appear. Each passage gives the player a different
    number of pebbles.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use the following line to add two new pebbles the player
    has found in a passage to their total number of pebbles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This line tells Twine to set `$pebbles` to the current value of `$pebbles` plus
    2\. So if the value of `$pebbles` was 2, this line’s value would increase to 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the value of a variable, just enter its name in a sentence to show
    the player how many pebbles they have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This line displays the total number using the value stored in the `$pebbles`
    variable. The player should see “You have 4 pebbles,” “You have 10 pebbles,” or
    “You have 500 pebbles,” depending on how many pebbles the player has found up
    to that point.
  prefs: []
  type: TYPE_NORMAL
- en: Using elseif to Check Integer Values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It makes sense to use `if` and `else` for Booleans because they’re either true
    or false, on or off. If they’re not one value, they must be the other. But integers
    can have more than two possibilities. For example, you might have enough pebbles
    to pay the toll. You might have no pebbles at all! Or you might have *some* pebbles
    but not enough! That’s three different conditions to check for, which means that
    using `if` and `else` alone isn’t going to cut it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, we can use `elseif` to keep track of a third value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `elseif` statement works like a regular `if` statement with an additional
    condition! In this example, Twine first checks whether `$pebbles` is greater than
    or equal to 5 using the hook `(if: $pebbles >= 5)`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If `$pebbles` is greater than or equal to 5, Twine displays “You have enough
    pebbles!” and that’s that. But if it isn’t, Twine tries the `elseif` hook `(elseif:
    $pebbles is 0)` to check if `$pebbles` is equal to 0\. If it is, Twine displays
    “You don’t have ANY pebbles!” to let the player know they need more pebbles.'
  prefs: []
  type: TYPE_NORMAL
- en: If neither condition is true, then Twine moves on to the `else` statement. The
    `else` part covers every possible case other than those covered by the `if` and
    `elseif`, which is when the player has 1, 2, 3, and 4 pebbles. We tell Twine to
    display `[You only have $pebbles pebbles!]`, where `$pebbles` represents the number
    of pebbles the player has.
  prefs: []
  type: TYPE_NORMAL
- en: The Order of Things Is Important!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Keep in mind that the order in which you write your code is important. When
    Twine decides what code to execute, and in what order to do it, it reads from
    top to bottom, the same way you read a page in this book. When you write code
    for your games, make sure it’s written in the order that will make the most sense
    in Twine. For example, we write the `else` statement at the very end because we
    want Twine to do this only after checking the first two conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if you want an additional condition? You might want to add an encouraging
    message if the player is *really* close to having enough pebbles for the toll.
    We can update the existing code with another `elseif` statement like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now there’s a different message for the player when they have 3 or more pebbles.
    Notice that we put the `elseif` statement second from the top. That’s because
    if we put this `elseif` statement before the `if` statement, a player would see
    the “Almost there!” message even when they had 6 pebbles because 6 is *also* greater
    than or equal to 3\. But that doesn’t make sense, because the player already has
    enough pebbles to pay the toll! Only if the player *doesn’t* have at least 5 pebbles
    do we want Twine to check whether they have 3 or more.
  prefs: []
  type: TYPE_NORMAL
- en: Twine always starts by checking the `if` case. Then it checks each of the `elseif`
    statements in order from top to bottom. You can write as many `elseif` statements
    as you want. As soon as Twine finds a condition that is true, Twine stops there
    and does what you told it to do in that case. If none of the `elseif` statements
    are true, *only then* does it check for the `else`. The `else` statement is Twine’s
    last resort.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever code you’ve written doesn’t work the way you expected, read through
    your code from top to bottom to check that your conditions are in the right order.
    Perhaps Twine stopped before it got to the case you expected because an earlier
    condition was also true. Sometimes, simply rearranging the order in which Twine
    looks for conditions can solve a problem.
  prefs: []
  type: TYPE_NORMAL
- en: String Variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Strings* are a type of variable that contains text: a word, phrase, or sentence.
    Your Twine games are mostly text already, but sometimes you’ll need to keep track
    of a *particular* piece of text. For example, you can use string variables to
    keep track of whether the player put on a “red baseball cap” or a “plastic tiara”
    before leaving the house this morning.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f090-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To see a string variable in action, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Try hitting play! Twine should print “The wind is so strong that your plastic
    baseball tiara is blown right off your head!” Try changing the description of
    the hat. The game should change to match what you typed!
  prefs: []
  type: TYPE_NORMAL
- en: The important thing is that you make sure there are quotes (`"`) on either side
    of the string. That’s how Twine knows where the string starts and stops. If it’s
    inside the quotes, it’s a string. If it’s outside, it’s code.
  prefs: []
  type: TYPE_NORMAL
- en: Can you think of how this technique might be useful in a story? Maybe the game
    starts in the player’s bedroom, where a few of their favorite hats are hanging.
    Whatever hat they choose, you can set $hat to match the description of the hat.
    That way when the story mentions the player’s hat, it can mention the specific
    one that they chose!
  prefs: []
  type: TYPE_NORMAL
- en: You could ask them to pick their favorite color. You could ask whether they’d
    like a pet cat or a pet dog. There’s a piece of code that will let the player
    type something in—you can ask them to name their pet, then refer to the pet by
    the name they chose! Read through the Twine wiki and see if you can figure out
    how.
  prefs: []
  type: TYPE_NORMAL
- en: A Note on Story Formats
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, I use Twine 2’s default story format, which is Harlowe. Twine 2
    has two other story formats: Snowman and SugarCube. To change your game’s story
    format, click its name, and then choose Change Story Format. But keep in mind
    that all the hooks you’ve learned so far are specific to Harlowe. Other story
    formats can do the same things, but the code you’ll need to write will be a little
    different.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find plenty of information about story formats at [*http://twine2.neocities.org*](http://twine2.neocities.org)/
    and on Twine’s Help page.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f091-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this rather short chapter, you learned more about how variables work and
    how you can change what’s stored inside them. In particular, you learned that
    integer variables contain numbers and that string variables contain words or phrases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, I’ll show you more Twine games that you can play
    (created by people other than me!) as well as provide you with some challenges
    to try in your own game design practice.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f092-01.jpg)'
  prefs: []
  type: TYPE_IMG
