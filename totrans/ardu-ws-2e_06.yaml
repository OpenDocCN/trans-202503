- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Expanding Your Arduino
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展你的Arduino
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容：
- en: Learn about the broad variety of Arduino shields
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解各种Arduino扩展板
- en: Make your own Arduino shield using a ProtoShield
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ProtoShield制作自己的Arduino扩展板
- en: See how Arduino libraries can expand the available functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Arduino库如何扩展可用功能
- en: Use a memory card module to record data that can be analyzed in a spreadsheet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用存储卡模块记录可以在电子表格中分析的数据
- en: Build a temperature-logging device
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个温度记录设备
- en: Learn how to make a stopwatch using `micros()` and `millis()`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用`micros()`和`millis()`制作秒表
- en: Understand Arduino interrupts and their uses
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Arduino中断及其用途
- en: Another way to expand the capabilities of your Arduino is by using shields.
    A *shield* is a circuit board that connects via pins to the sockets on the sides
    of an Arduino. In the first project in this chapter, you’ll learn how to make
    your own shield. Over time, as you experiment with electronics and Arduino, you
    can make your circuits more permanent by building them onto a *ProtoShield*, a
    blank printed circuit board that you can use to mount custom circuitry.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展Arduino功能的另一种方式是使用扩展板。*扩展板*是通过引脚连接到Arduino两侧插座的电路板。在本章的第一个项目中，你将学习如何制作自己的扩展板。随着你在电子学和Arduino方面的实验，你可以通过将电路构建到*ProtoShield*上来使电路更加永久化，ProtoShield是一个空白的印刷电路板，你可以用它安装定制电路。
- en: Next, I’ll introduce a memory card module. We’ll use it in this chapter to create
    a temperature-logging device to record temperatures over time; the shield will
    be used to record data from the Arduino to be transferred elsewhere for analysis.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将介绍存储卡模块。我们将在本章中使用它来创建一个温度记录设备，用于记录随时间变化的温度；该扩展板将用于记录来自Arduino的数据，并将其转移到其他地方进行分析。
- en: You’ll learn about the functions `micros()` and `millis()`, which are very useful
    for keeping time, as you’ll see in the stopwatch project. Finally, we’ll examine
    interrupts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习`micros()`和`millis()`函数，这两个函数在计时方面非常有用，正如你在秒表项目中看到的那样。最后，我们将研究中断。
- en: Shields
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展板
- en: You can add functionality to your Arduino board by attaching shields. Hundreds
    of shields are available on the market, and they can be combined, or stacked,
    to work together. One popular project, for example, combines a GPS shield with
    a microSD memory card shield to create a device that logs and stores position
    over time, for example to record a car’s path of travel or the location of a new
    hiking trail. Other projects include Ethernet network adapters that let the Arduino
    access the internet ([Figure 7-1](#figure7-1)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过连接扩展板来为你的Arduino板添加功能。市场上有数百种扩展板，它们可以组合或堆叠在一起协同工作。例如，一个流行的项目将GPS扩展板与microSD存储卡扩展板结合在一起，创建一个记录和存储位置的设备，记录的内容可以是汽车的行驶轨迹或新的徒步旅行路径的位置。其他项目包括以太网适配器，允许Arduino连接互联网（[图7-1](#figure7-1)）。
- en: '![f07001](image_fi/500587c07/f07001.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![f07001](image_fi/500587c07/f07001.png)'
- en: 'Figure 7-1: An Ethernet shield on an Arduino Uno'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-1：Arduino Uno上的以太网扩展板
- en: GPS satellite receivers let you track the location of the Arduino ([Figure 7-2](#figure7-2)).
    MicroSD memory card interfaces let the Arduino store data on a memory card ([Figure
    7-3](#figure7-3)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GPS卫星接收器可以让你跟踪Arduino的位置（[图7-2](#figure7-2)）。MicroSD存储卡接口让Arduino将数据存储到存储卡上（[图7-3](#figure7-3)）。
- en: '[Figure 7-4](#figure7-4) shows a stack that includes an Arduino Uno, a microSD
    memory card shield to which data can be recorded, an Ethernet shield for connecting
    to the internet, and an LCD shield to display information.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-4](#figure7-4)显示了一个堆叠的组合，包括一个Arduino Uno，一个可以记录数据的microSD存储卡扩展板，一个用于连接互联网的以太网扩展板，以及一个用于显示信息的LCD扩展板。'
- en: '![f07002](image_fi/500587c07/f07002.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![f07002](image_fi/500587c07/f07002.png)'
- en: 'Figure 7-2: A GPS receiver shield (with separate GPS module)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-2：一个GPS接收器扩展板（带有单独的GPS模块）
- en: '![f07003](image_fi/500587c07/f07003.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![f07003](image_fi/500587c07/f07003.png)'
- en: 'Figure 7-3: A MicroSD card shield'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-3：MicroSD卡扩展板
- en: '![f07004](image_fi/500587c07/f07004.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![f07004](image_fi/500587c07/f07004.png)'
- en: 'Figure 7-4: Three stacked shields with an Arduino Uno'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-4：一个堆叠的扩展板组合，包含一个Arduino Uno
- en: ProtoShields
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ProtoShields
- en: You can buy a variety of shields online, or make your own using a ProtoShield.
    A ProtoShield is a blank circuit board that you can use to make your own permanent
    Arduino shields. ProtoShields come preassembled or in kit form, similar to the
    one shown in [Figure 7-5](#figure7-5).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在线购买各种扩展板，或者使用ProtoShield自己制作扩展板。ProtoShield是一个空白电路板，你可以用它制作自己的永久Arduino扩展板。ProtoShields有预组装版或套件形式，类似于[图7-5](#figure7-5)中展示的那种。
- en: A ProtoShield also makes a good base for a solderless breadboard, because it
    keeps a small circuit within the physical boundary of your Arduino creation (as
    shown in [Figure 7-6](#figure7-6)). Smaller solderless breadboards fit within
    the rows of sockets and can be temporarily mounted on the circuit board with Blu
    Tack reusable putty or mounted more permanently with double-sided tape. ProtoShields
    can also act as a more permanent foundation for circuits that have been tested
    on a breadboard.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ProtoShield还可以作为无焊接面包板的良好基础，因为它可以将小电路保持在你Arduino创作的物理边界内（如[图7-6](#figure7-6)所示）。较小的无焊接面包板适合放置在插座的行内，可以使用可重复使用的Blu
    Tack胶泥暂时固定在电路板上，或者使用双面胶带更加永久性地安装。ProtoShield还可以作为在面包板上测试过的电路的更永久性基础。
- en: '![f07005](image_fi/500587c07/f07005.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![f07005](image_fi/500587c07/f07005.png)'
- en: 'Figure 7-5: A ProtoShield kit'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-5：ProtoShield套件
- en: '![f07006](image_fi/500587c07/f07006.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f07006](image_fi/500587c07/f07006.png)'
- en: 'Figure 7-6: An example of small project mounted on a ProtoShield’s solderless
    breadboard'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-6：安装在ProtoShield无焊接面包板上的小项目示例
- en: Building custom circuits on a ProtoShield requires some forward planning. You
    have to design the circuit, make a schematic, and then plan the layout of the
    components as they will sit on the ProtoShield. Finally, you will solder the completed
    circuit onto your custom shield, but you should always test it first using a solderless
    breadboard to ensure that it works. Some ProtoShields come with a PDF schematic
    file that you can download and print, intended specifically for drawing your project
    schematic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在ProtoShield上构建自定义电路需要一些前期规划。你需要设计电路，制作原理图，然后规划组件在ProtoShield上的布局。最后，你将电路焊接到你的自定义Shield上，但你应该始终先使用无焊接面包板进行测试，以确保电路正常工作。有些ProtoShield附带PDF原理图文件，可以下载并打印，专门用于绘制你的项目原理图。
- en: 'Project #21: Creating a Custom Shield'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#21：创建自定义Shield
- en: In this project, you’ll create a custom shield containing two LEDs and current-limiting
    resistors. This custom shield will make it easy to experiment with LEDs on digital
    outputs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个包含两个LED和限流电阻的自定义Shield。这个自定义Shield将使你在数字输出上实验LED变得更加容易。
- en: The Hardware
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required for this project:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目所需的硬件如下：
- en: One blank Arduino ProtoShield with stacking headers
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空白Arduino ProtoShield，带有堆叠头
- en: Two LEDs of any color
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个任何颜色的LED
- en: Two 560 Ω resistors
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个560Ω电阻
- en: Two 10 kΩ resistors
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个10kΩ电阻
- en: Two push buttons
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个按键
- en: Two 100 nF capacitors
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个100nF电容
- en: The Schematic
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: The circuit schematic is shown in [Figure 7-7](#figure7-7).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 电路原理图见[图7-7](#figure7-7)。
- en: '![f07007](image_fi/500587c07/f07007.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![f07007](image_fi/500587c07/f07007.png)'
- en: 'Figure 7-7: Schematic for Project 21'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-7：项目21的原理图
- en: The Layout of the ProtoShield Board
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ProtoShield板的布局
- en: The next step is to learn the layout of the holes on the ProtoShield. The rows
    and columns of holes on the ProtoShield generally match those of a solderless
    breadboard. However, each ProtoShield may vary, so take the time to determine
    how the holes are connected. On the example ProtoShield shown in [Figure 7-8](#figure7-8),
    some holes are connected, as shown by the solid lines between the holes, but a
    lot of holes have been left unconnected. This design gives you a lot of flexibility
    in how you use your ProtoShield.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是了解ProtoShield上孔的布局。ProtoShield上的孔的行列通常与无焊接面包板的行列匹配。然而，每个ProtoShield可能有所不同，因此请花时间确定孔的连接方式。在[图7-8](#figure7-8)中展示的示例ProtoShield上，某些孔是连接的，正如孔之间的实线所示，但许多孔没有连接。这种设计为你使用ProtoShield提供了很大的灵活性。
- en: '![f07008](image_fi/500587c07/f07008.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![f07008](image_fi/500587c07/f07008.png)'
- en: 'Figure 7-8: A blank ProtoShield shown from above'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-8：从上方展示的空白ProtoShield
- en: 'Note the two groups of holes surrounded by rectangles along the top and bottom
    of the ProtoShield: this is where we solder the stackable headers that allow the
    ProtoShield to slot into the Arduino board.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意ProtoShield顶部和底部被矩形包围的两组孔：这是我们焊接堆叠头的位置，使ProtoShield能够插入Arduino板。
- en: The Design
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计
- en: You need to convert the circuit shown in [Figure 7-7](#figure7-7) into a physical
    layout that’s suitable for your ProtoShield. A good way to do this is to lay out
    your circuit using graph paper, as shown in [Figure 7-9](#figure7-9). You can
    then mark the connected holes on the graph paper and easily experiment until you
    find a layout that works for your particular ProtoShield. If you don’t have any
    graph paper, you can generate and print your own at [http://www.printfreegraphpaper.com/.](http://www.printfreegraphpaper.com/.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将图 [7-7](#figure7-7) 所示的电路转换为适合你 ProtoShield 的物理布局。一个很好的方法是使用图纸布局电路，如图 [7-9](#figure7-9)
    所示。然后，你可以在图纸上标记连接的孔，并轻松地进行实验，直到找到适合你特定 ProtoShield 的布局。如果你没有图纸，可以在 [http://www.printfreegraphpaper.com/.](http://www.printfreegraphpaper.com/.)
    上生成并打印自己的图纸。
- en: '![f07009](image_fi/500587c07/f07009.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![f07009](image_fi/500587c07/f07009.png)'
- en: 'Figure 7-9: Planning our custom shield'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-9：规划我们的定制扩展板
- en: After you’ve drawn a plan for your circuit, test-fit the components into the
    ProtoShield to make sure that they’ll fit and that they aren’t too crowded. If
    the ProtoShield has space for a reset button, always include one, because the
    shield will block access to your Arduino’s RESET button.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在你为电路绘制了计划图后，将元件进行测试安装，以确保它们能够安装进去且不会过于拥挤。如果 ProtoShield 上有空间放置复位按钮，最好添加一个，因为该扩展板会挡住你的
    Arduino 上的 RESET 按钮。
- en: Soldering the Components
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 焊接元件
- en: Once you’re satisfied with the layout of the circuit on your ProtoShield and
    you’ve tested the circuit to make sure it works, you can solder the components.
    Using a soldering iron is not that difficult, and you don’t need to buy an expensive
    soldering station for this type of work. A simple iron rated at 25 to 40 watts,
    like the one shown in [Figure 7-10](#figure7-10), should do the job.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对在 ProtoShield 上的电路布局感到满意，并且已经测试过电路以确保它正常工作，你就可以开始焊接元件了。使用焊接铁并不难，而且你不需要购买昂贵的焊接站来完成这类工作。一个额定功率为
    25 到 40 瓦的简单焊接铁，比如图 [7-10](#figure7-10) 中所示的那种，就足够用了。
- en: '![f07010](image_fi/500587c07/f07010.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f07010](image_fi/500587c07/f07010.png)'
- en: 'Figure 7-10: Soldering iron'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-10：焊接铁
- en: When soldering the components, you may need to bridge them together with a small
    amount of solder and wire cutoffs, as shown in [Figure 7-11](#figure7-11).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在焊接元件时，你可能需要使用少量的焊锡和剪下的导线将它们连接起来，如图 [7-11](#figure7-11) 所示。
- en: Check each solder connection as you go, because mistakes are easier to locate
    and repair *before* the project is finished. When the time comes to solder the
    four header sockets or header pins, keep them aligned by using an existing shield
    to hold the new pins, as shown in [Figure 7-12](#figure7-12).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行焊接时，检查每个焊接点，因为在项目完成*之前*，错误更容易被发现并修复。当需要焊接四个插座或插针时，可以通过使用现有的扩展板来保持它们对齐，如图
    [7-12](#figure7-12) 所示。
- en: '![f07011](image_fi/500587c07/f07011.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f07011](image_fi/500587c07/f07011.png)'
- en: 'Figure 7-11: A solder bridge'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-11：焊接桥
- en: '![f07012](image_fi/500587c07/f07012.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f07012](image_fi/500587c07/f07012.png)'
- en: 'Figure 7-12: Soldering header pins'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-12：焊接插针
- en: '[Figure 7-13](#figure7-13) shows the finished product: a custom Arduino shield
    with two LEDs and two buttons.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [7-13](#figure7-13) 显示了完成的产品：一个带有两个 LED 和两个按钮的定制 Arduino 扩展板。
- en: '![f07013](image_fi/500587c07/f07013.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f07013](image_fi/500587c07/f07013.png)'
- en: 'Figure 7-13: The completed custom shield'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-13：完成的定制扩展板
- en: Testing Your ProtoShield
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试你的 ProtoShield
- en: Before moving on, it’s a great idea to test your ProtoShield’s buttons and LEDs.
    The sketch in [Listing 7-1](#listing7-1) uses the two buttons to turn the LEDs
    on or off.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，最好先测试 ProtoShield 的按钮和 LED。图 [Listing 7-1](#listing7-1) 中的草图使用两个按钮来开关
    LED。
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 7-1: Testing the ProtoShield’s buttons and lights'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 7-1：测试 ProtoShield 的按钮和灯光
- en: Expanding Sketches with Libraries
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用库扩展草图
- en: Just as an Arduino shield can expand our hardware, a *library* can add useful
    functions to our sketches. These functions can allow us to use hardware specific
    to a manufacturer’s shield. Anyone can create a library, just as suppliers of
    various Arduino shields often write their own libraries to match their hardware.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Arduino 扩展板可以扩展我们的硬件一样，*库*可以为我们的草图添加有用的功能。这些功能允许我们使用特定制造商扩展板的硬件。任何人都可以创建库，就像各种
    Arduino 扩展板的供应商经常编写他们自己的库来匹配他们的硬件一样。
- en: The Arduino IDE already includes a set of preinstalled libraries. To include
    them in your sketches, choose **Sketch**▶**Include Library**. You should see the
    collection of preinstalled libraries with names such as Ethernet, LiquidCrystal,
    Servo, and so on. Many of these names will be self-explanatory. (If a library
    is required for a project in this book, it will be explained in detail in these
    pages.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE 已经包含了一些预安装的库。要在你的草图中使用它们，请选择 **Sketch**▶**Include Library**。你应该会看到一个包含
    Ethernet、LiquidCrystal、Servo 等名称的预安装库集合。这些名称大多数都是自解释的。（如果本书中的项目需要使用某个库，将在这些页面中详细说明。）
- en: 'If you buy a new piece of hardware, you’ll generally need to download and install
    its libraries from the hardware vendor’s site or from a provided link. There are
    two methods for installing an Arduino library: downloading the library in a ZIP
    file or using the Arduino Library Manager. Let’s see how both methods work by
    walking through a download of the library required by the microSD card shield
    ([Figure 7-3](#figure7-3)).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你购买了一件新硬件，通常需要从硬件供应商的站点或提供的链接下载并安装其库。有两种方法可以安装 Arduino 库：下载库的 ZIP 文件或使用 Arduino
    库管理器。我们通过演示下载 microSD 卡扩展板所需的库来看看这两种方法如何工作（[图 7-3](#figure7-3)）。
- en: Downloading an Arduino Library as a ZIP File
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载 Arduino 库作为 ZIP 文件
- en: 'First, let’s try downloading and installing a library in ZIP format. You’ll
    download the advanced library used by memory card modules to allow you to read
    and write data to microSD and SD cards:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来尝试下载并安装一个 ZIP 格式的库。你将下载一个用于存储卡模块的高级库，以便读取和写入 microSD 和 SD 卡的数据：
- en: Visit [https://github.com/greiman/SdFat/](https://github.com/greiman/SdFat/)
    and click **Code**. Make sure **HTTPS** is selected and then click **Download
    ZIP**, as demonstrated in [Figure 7-14](#figure7-14).![f07014](image_fi/500587c07/f07014.png)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://github.com/greiman/SdFat/](https://github.com/greiman/SdFat/) 并点击
    **Code**。确保选择了 **HTTPS**，然后点击 **Download ZIP**，如[图 7-14](#figure7-14)所示。![f07014](image_fi/500587c07/f07014.png)
- en: 'Figure 7-14: Library download page'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-14：库下载页面
- en: After a moment, the file *SdFat-master.zip* will appear in your *Downloads*
    folder, as shown in [Figure 7-15](#figure7-15). If you are using an Apple computer,
    the ZIP file may be extracted automatically.![f07015](image_fi/500587c07/f07015.png)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稍等片刻，*SdFat-master.zip* 文件将出现在你的 *Downloads* 文件夹中，如[图 7-15](#figure7-15)所示。如果你使用的是
    Apple 电脑，ZIP 文件可能会自动解压。![f07015](image_fi/500587c07/f07015.png)
- en: 'Figure 7-15: *Downloads* folder containing *SdFat-master.zip*'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-15：包含 *SdFat-master.zip* 的 *Downloads* 文件夹
- en: Open the Arduino IDE and choose **Sketch**▶**Include Library**▶**Add .ZIP Library**,
    as shown in [Figure 7-16](#figure7-16).![f07016](image_fi/500587c07/f07016.png)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Arduino IDE，选择 **Sketch**▶**Include Library**▶**Add .ZIP Library**，如[图 7-16](#figure7-16)所示。![f07016](image_fi/500587c07/f07016.png)
- en: 'Figure 7-16: Starting the library installation process'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-16：开始库安装过程
- en: You will be presented with a file manager dialog, as shown in [Figure 7-17](#figure7-17).
    Navigate to your *Downloads* folder (or wherever you saved the ZIP file) and click
    **Open**.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 系统将显示一个文件管理对话框，如[图 7-17](#figure7-17)所示。导航到你的 *Downloads* 文件夹（或你保存 ZIP 文件的位置），然后点击
    **Open**。
- en: '![f07017](image_fi/500587c07/f07017.png)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f07017](image_fi/500587c07/f07017.png)'
- en: 'Figure 7-17: Locating the ZIP file'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-17：定位 ZIP 文件
- en: The Arduino IDE will now take care of the library installation. After a few
    moments, you will be notified that the library has been installed by a message
    in the IDE output window, as shown in [Figure 7-18](#figure7-18).
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，Arduino IDE 将负责库的安装。片刻之后，IDE 输出窗口将显示一条消息，通知你库已安装，如[图 7-18](#figure7-18)所示。
- en: '![f07018](image_fi/500587c07/f07018.png)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f07018](image_fi/500587c07/f07018.png)'
- en: 'Figure 7-18: Arduino library installation success'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-18：Arduino 库安装成功
- en: You can verify that the SdFatlibrary has been installed and is available by
    searching through the IDE’s Library Manager. To do this, click the Library Manager
    icon in the vertical group on the left of the IDE, then search using the box at
    the top, or scroll down until you see your library. For example, in [Figure 7-19](#figure7-19)
    you can see that SdFat appears in the Library Manager.![f07019](image_fi/500587c07/f07019.png)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过 IDE 的库管理器来验证 SdFat 库是否已安装并可用。为此，点击 IDE 左侧垂直组中的库管理器图标，然后在顶部的搜索框中搜索，或向下滚动直到看到你的库。例如，在[图
    7-19](#figure7-19)中，你可以看到 SdFat 已出现在库管理器中。![f07019](image_fi/500587c07/f07019.png)
- en: 'Figure 7-19: Successful installation of the SdFat library'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-19：SdFat 库安装成功
- en: Importing an Arduino Library with Library Manager
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用库管理器导入 Arduino 库
- en: The alternative method of installing an Arduino library is via the Arduino IDE’s
    built-in Library Manager. This is a tool for accessing an online repository of
    libraries that are available for use by the wider public and have been personally
    approved by the Arduino team, or are just very popular. You will generally access
    the Library Manager when instructed to by a hardware supplier.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Arduino库的另一种方式是通过Arduino IDE的内置库管理器。这个工具用于访问一个在线的库仓库，这些库对公众开放，且经过Arduino团队的个人批准，或者是非常流行的。通常，在硬件供应商的指示下，你会使用库管理器。
- en: As an example, we’ll download the FastLED Arduino library, which is used by
    a popular type of RGB LED.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将下载FastLED Arduino库，它是用于流行类型RGB LED的库。
- en: To do this, open the Arduino IDE if you’ve not already done so, then open the
    Library Manager. Enter **FastLED** in the search box at the top of the manager,
    as shown in [Figure 7-20](#figure7-20). As you type, the manager will return libraries
    that match your search data, and you can see the required library has appeared.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，打开Arduino IDE（如果还没有打开的话），然后打开库管理器。在管理器顶部的搜索框中输入**FastLED**，如[图7-20](#figure7-20)所示。当你输入时，管理器会返回与你的搜索数据匹配的库，你会看到所需的库已经出现。
- en: '![f07020](image_fi/500587c07/f07020.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![f07020](image_fi/500587c07/f07020.png)'
- en: 'Figure 7-20: Searching the Library Manager'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-20：在库管理器中搜索
- en: Once the library is found and displayed in the Library Manager, move your mouse
    cursor over the library description. You may have the option to select a version
    number. Generally, the latest version is displayed by default, so you simply need
    to click **Install** and wait for installation to complete. Installation progress
    is shown in the output window, as shown in [Figure 7-21](#figure7-21).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在库管理器中找到并显示库，移动鼠标光标到库描述上。你可能会有选择版本号的选项。一般来说，默认会显示最新版本，你只需点击**安装**并等待安装完成。安装进度会在输出窗口中显示，如[图7-21](#figure7-21)所示。
- en: '![f07021](image_fi/500587c07/f07021.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![f07021](image_fi/500587c07/f07021.png)'
- en: 'Figure 7-21: Library installation process'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-21：库安装过程
- en: You can check that the library has been installed using the method described
    earlier in this chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用本章前面描述的方法检查库是否已安装。
- en: SD Memory Cards
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SD存储卡
- en: By using SD or microSD cards with your Arduino, you can capture data from many
    sources, such as the TMP36 temperature sensor we used in Chapter 4. You can also
    use the cards to store web server data or any files that your project might use.
    To record and store the data you collect, you can use a memory card like the one
    shown in [Figure 7-22](#figure7-22).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用SD或microSD卡与Arduino，你可以从许多来源捕获数据，例如我们在第4章中使用的TMP36温度传感器。你还可以使用这些卡片存储网页服务器数据或你的项目可能需要的任何文件。为了记录和存储你收集的数据，你可以使用像[图7-22](#figure7-22)所示的存储卡。
- en: '![f07022](image_fi/500587c07/f07022.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![f07022](image_fi/500587c07/f07022.png)'
- en: 'Figure 7-22: A microSD card with 16GB capacity'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-22：一张16GB容量的microSD卡
- en: Both microSD and SD memory cards are available to work with your Arduino.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: microSD和SD存储卡都可以与Arduino一起使用。
- en: Connecting the Card Module
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接卡模块
- en: Before you can use the memory card, you’ll need to connect six wires from the
    card reader module to your Arduino. Both card reader types (microSD and SD) will
    have the same pins, which should be labeled as shown in [Figure 7-23](#figure7-23).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用存储卡之前，你需要将六根电缆从卡片读取器模块连接到Arduino。两种卡片读取器类型（microSD和SD）都具有相同的引脚，这些引脚应该像[图7-23](#figure7-23)所示标记。
- en: '![f07027](image_fi/500587c07/f07027.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![f07027](image_fi/500587c07/f07027.png)'
- en: 'Figure 7-23: SD card module'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-23：SD卡模块
- en: Make the connections between your Arduino and the card reader as shown in [Table
    7-1](#table7-1).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[表7-1](#table7-1)所示，连接你的Arduino和卡片读取器。
- en: 'Table 7-1: Connections Between the Card Module and Arduino'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 表7-1：卡模块与Arduino之间的连接
- en: '| **Module pin label** | **To Arduino pin** | **Module pin functions** |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| **模块引脚标签** | **Arduino引脚** | **模块引脚功能** |'
- en: '| --- | --- | --- |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 5 V or Vcc | 5 V | Power |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 5 V 或 Vcc | 5 V | 电源 |'
- en: '| GND | GND | GND |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND | 地 |'
- en: '| CS | D10 | Chip select |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| CS | D10 | 芯片选择 |'
- en: '| MOSI | D11 | Data in from Arduino |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| MOSI | D11 | 数据输入到Arduino |'
- en: '| MISO | D12 | Data out to Arduino |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| MISO | D12 | 数据输出到Arduino |'
- en: '| SCK | D13 | Clock |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| SCK | D13 | 时钟 |'
- en: Testing Your SD Card
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试你的SD卡
- en: 'After you have finished connecting the card module to your Arduino—and you
    have a new or newly formatted card—now is the time to make sure the card is working
    correctly. To do so, follow these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在你完成将卡模块连接到Arduino后——并且你拥有一张新的或新格式化的卡——现在是时候确保卡片正常工作了。为此，按照以下步骤操作：
- en: Insert the memory card into the card module. Then connect the module to the
    Arduino and the Arduino to your PC via the USB cable.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内存卡插入卡模块，然后通过USB电缆将模块连接到Arduino，再将Arduino连接到你的电脑。
- en: Open the IDE and select **File**▶**Examples**▶**SdFat**▶**SdInfo**. This will
    load an example sketch.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDE并选择**文件**▶**示例**▶**SdFat**▶**SdInfo**。这将加载一个示例草图。
- en: Scroll down to line 36 in the sketch and change the value of `const int chipSelect`
    from `4` to `10`, as shown in [Figure 7-24](#figure7-24). This is necessary as
    the pin used varies depending on the SD card hardware. Now upload this sketch
    to your Arduino.![f07024](image_fi/500587c07/f07024.png)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到草图中的第36行，将`const int chipSelect`的值从`4`更改为`10`，如[图7-24](#figure7-24)所示。这是必要的，因为使用的引脚会根据SD卡硬件而有所不同。现在将这个草图上传到你的Arduino上。![f07024](image_fi/500587c07/f07024.png)
- en: 'Figure 7-24: Altering the test sketch'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7-24：修改测试草图
- en: Finally, open the Serial Monitor window, set it to 9,600 baud, press any key
    on the keyboard, and press enter. After a moment, you should see some data about
    the microSD card, as shown in [Figure 7-25](#figure7-25).
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开串口监视器窗口，将其设置为9,600波特率，按下键盘上的任意键，然后按回车键。片刻之后，你应该能看到一些关于microSD卡的数据，如[图7-25](#figure7-25)所示。
- en: '![f07025](image_fi/500587c07/f07025.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![f07025](image_fi/500587c07/f07025.png)'
- en: 'Figure 7-25: Results of a successful memory card test'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-25：成功的内存卡测试结果
- en: 'If the test results don’t appear in the Serial Monitor, try the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试结果没有出现在串口监视器中，请尝试以下方法：
- en: Remove the USB cable from your Arduino and remove and reinsert the microSD card.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Arduino中拔出USB电缆，取出并重新插入microSD卡。
- en: Make sure that the wiring connections match those in [Table 7-1](#table7-1).
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保接线连接与[表7-1](#table7-1)中的匹配。
- en: Check that the Serial Monitor baud rate is 9,600 and that a regular Arduino
    Uno–compatible board is being used. The Mega and some other board models have
    the SPI pins in different locations.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查串口监视器的波特率是否设置为9,600，并确保使用的是普通的Arduino Uno兼容板。Mega及其他一些板子上的SPI引脚位置不同。
- en: Reformat your memory card.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新格式化你的内存卡。
- en: Failing all else, try a new name-brand memory card.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其他方法都无效，尝试使用一个新的品牌内存卡。
- en: Finally, before either inserting your memory card or removing it, ensure the
    entire project is disconnected from the USB and/or power supply.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在插入或移除内存卡之前，确保整个项目已断开与USB和/或电源的连接。
- en: 'Project #22: Writing Data to the Memory Card'
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#22：向内存卡写入数据
- en: In this project, you’ll use a memory card to store data—specifically, a multiplication
    table.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用内存卡来存储数据——特别是乘法表。
- en: The Sketch
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'To write data to the memory card, connect your shield, insert a microSD card,
    and then enter and upload the following sketch:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要向内存卡写入数据，请连接你的扩展板，插入microSD卡，然后输入并上传以下草图：
- en: '[PRE1]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![f07026](image_fi/500587c07/f07026.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![f07026](image_fi/500587c07/f07026.png)'
- en: 'Figure 7-26: Output from Project 22'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-26：项目22的输出
- en: The sketch creates a text file called *DATA.TXT* on the microSD card, as shown
    in [Figure 7-26](#figure7-26).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图在microSD卡上创建一个名为*DATA.TXT*的文本文件，如[图7-26](#figure7-26)所示。
- en: Let’s review the `void loop()` section of the sketch to see how it created the
    text file. The code in `void loop()` between 1 and 2 creates and opens the file
    for writing. To write text to the file, we use `dataFile.print()` or `dataFile.println()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下草图中的`void loop()`部分，看看它是如何创建文本文件的。`void loop()`中1和2之间的代码用于创建并打开文件以供写入。要将文本写入文件，我们使用`dataFile.print()`或`dataFile.println()`。
- en: This code works in the same manner as, for example, `Serial.println()`, so you
    can write it in the same manner as you would to the Serial Monitor. At 1 we set
    the name of the created text file, which must be eight characters or less, followed
    by a dot, and then three characters, such as *DATA.TXT*.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的工作方式与`Serial.println()`类似，因此你可以像写入串口监视器那样写入它。在1处我们设置了创建的文本文件的名称，该名称必须是八个字符或更少，后跟一个点和三个字符，如*DATA.TXT*。
- en: At 3, we use `DEC` as the second parameter. This states that the variable is
    a decimal number and should be written to the text file as such. If we were writing
    a `float` variable instead, then we would use a digit for the number of decimal
    places to write (to a maximum of six).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在3中，我们使用`DEC`作为第二个参数。这表示该变量是十进制数字，并应以这种方式写入文本文件。如果我们要写入的是`float`变量，则需要使用一个数字来指定小数位数（最多六位）。
- en: When we’re finished writing data to the file, at 4, we use `dataFile.close()`
    to close the file for writing. If this step is not followed, the computer will
    not be able to read the created text file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成向文件写入数据时，在第 4 步，我们使用 `dataFile.close()` 来关闭文件。如果没有执行这一步，计算机将无法读取创建的文本文件。
- en: 'Project #23: Creating a Temperature-Logging Device'
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #23：创建一个温度记录设备'
- en: Now that you know how to record data, let’s measure and record the temperature
    every minute for 8 hours using our memory card setup from Project 22 and the TMP36
    temperature sensor circuit introduced in Chapter 4.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何记录数据，我们来使用第 22 章中的存储卡设置和第 4 章介绍的 TMP36 温度传感器电路，每分钟测量并记录 8 小时的温度。
- en: The Hardware
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件是必需的：
- en: One TMP36 temperature sensor
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 TMP36 温度传感器
- en: One breadboard
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: Various connecting wires
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Memory card and module
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储卡和模块
- en: Arduino and USB cable
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: Insert the microSD card into the shield, and then insert the shield into the
    Arduino. Connect the left (5 V) pin of the TMP36 to Arduino 5 V, the middle pin
    to analog, and the right pin to GND.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将 microSD 卡插入扩展板，然后将扩展板插入 Arduino。将 TMP36 的左侧（5 V）引脚连接到 Arduino 的 5 V，中央引脚连接到模拟输入，右侧引脚连接到
    GND。
- en: The Sketch
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE2]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The sketch will take a little more than 8 hours to complete, but you can alter
    this period by lowering the value in `delay(599900)`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图完成需要大约 8 小时，但您可以通过降低 `delay(599900)` 中的值来改变此时间。
- en: After the sketch has finished, remove the microSD card from the Arduino, insert
    it into your computer, and open the log file in a text editor, as shown in [Figure
    7-27](#figure7-27).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 完成草图后，从 Arduino 中取出 microSD 卡，插入计算机，并在文本编辑器中打开日志文件，如[图 7-27](#figure7-27)所示。
- en: '![f07031](image_fi/500587c07/f07031.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![f07031](image_fi/500587c07/f07031.png)'
- en: 'Figure 7-27: Results from Project 23'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-27：项目 23 的结果
- en: For more serious analysis of the captured data, delimit the lines of text written
    to the log file with spaces or colons so that the file can be easily imported
    into a spreadsheet. For example, you could import the file into OpenOffice Calc
    or Excel to produce a spreadsheet like the one shown in [Figure 7-28](#figure7-28).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对捕获的数据进行更为严谨的分析，可以用空格或冒号分隔写入日志文件的文本行，这样文件就可以轻松导入到电子表格中。例如，您可以将文件导入 OpenOffice
    Calc 或 Excel，生成类似于[图 7-28](#figure7-28)所示的电子表格。
- en: '![f07028](image_fi/500587c07/f07028.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![f07028](image_fi/500587c07/f07028.png)'
- en: 'Figure 7-28: Importing the data into a spreadsheet'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-28：将数据导入电子表格
- en: Then you can easily perform some statistical analysis of the data, as shown
    in [Figure 7-29](#figure7-29).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以轻松地对数据进行一些统计分析，如[图 7-29](#figure7-29)所示。
- en: The temperature examples can be hacked to suit your own data analysis projects.
    You can use these same concepts to record any form of data that can be generated
    by an Arduino system.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 温度示例可以根据您的数据分析项目进行修改。您可以使用相同的概念记录任何 Arduino 系统生成的数据。
- en: '![f07029](image_fi/500587c07/f07029.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![f07029](image_fi/500587c07/f07029.png)'
- en: 'Figure 7-29: Temperature analysis'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-29：温度分析
- en: Timing Applications with millis() and micros()
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 millis() 和 micros() 的计时应用
- en: Each time the Arduino starts running a sketch, it also records the passage of
    time using milliseconds and microseconds. A millisecond is one thousandth of a
    second (0.001), and a microsecond is one millionth of a second (0.000001). You
    can use these values to measure the passage of time when running sketches.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 每次 Arduino 开始运行草图时，它也会使用毫秒和微秒记录时间的流逝。1 毫秒是 1/1000 秒（0.001），1 微秒是 1/1000000 秒（0.000001）。您可以使用这些值来测量运行草图时的时间流逝。
- en: 'The following functions will access the time values stored in an `unsigned
    long` variable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将访问存储在 `unsigned long` 变量中的时间值：
- en: '[PRE3]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Due to the limitations of the `unsigned long` variable type (which stores only
    positive values), the value will reset to 0 after reaching 4,294,967,295, allowing
    for around 50 days of counting using `millis()` and 70 minutes using `micros()`.
    Furthermore, due to the limitations of the Arduino’s microprocessor, `micros()`
    values are always a multiple of four.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `unsigned long` 变量类型的限制（只能存储正值），当值达到 4,294,967,295 后将重置为 0，这意味着使用 `millis()`
    可以持续约 50 天的计时，而使用 `micros()` 则可以持续约 70 分钟。此外，由于 Arduino 微处理器的限制，`micros()` 值始终是
    4 的倍数。
- en: Let’s use these values to see how long it takes for the Arduino to turn a digital
    pin from low to high and vice versa. To do this, we’ll read `micros()` before
    and after a `digitalWrite()` function, find the difference, and display it in
    the Serial Monitor. The only required hardware is your Arduino and cable.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些值来看看Arduino将一个数字引脚从低电平转为高电平以及反向的时间。为此，我们将分别在`digitalWrite()`函数调用前后读取`micros()`的值，找出差值并在串口监视器中显示。所需的硬件只有你的Arduino和电缆。
- en: Enter and upload the sketch shown in [Listing 7-2](#listing7-2).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传[列表7-2](#listing7-2)中展示的草图。
- en: '[PRE4]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 7-2: Timing digital pin state change with `micros()`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-2：使用`micros()`定时数字引脚状态变化
- en: The sketch takes readings of `micros()` before and after the `digitalWrite(HIGH)`
    function call, at 1 and 2, and then it calculates the difference and displays
    it in the Serial Monitor at 3. This is repeated for the opposite function at 4.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图在`digitalWrite(HIGH)`函数调用前后，分别在1和2处读取`micros()`的值，然后计算它们的差值，并在3处显示在串口监视器中。对于相反的功能，这一过程在4处重复。
- en: Now open the Serial Monitor to view the results, shown in [Figure 7-30](#figure7-30).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开串口监视器查看结果，如[图7-30](#figure7-30)所示。
- en: '![f07030](image_fi/500587c07/f07030.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![f07030](image_fi/500587c07/f07030.png)'
- en: 'Figure 7-30: Output from [Listing 7-2](#listing7-2)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-30：[列表7-2](#listing7-2)的输出
- en: Because the resolution is 4 microseconds, if the value is 8 microseconds, we
    know that the duration is greater than 4 and less than or equal to 8.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 由于分辨率为4微秒，如果值为8微秒，我们知道持续时间大于4且小于或等于8。
- en: 'Project #24: Creating a Stopwatch'
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#24：创建一个秒表
- en: 'Now that we can measure the elapsed time between two events, we can create
    a simple stopwatch using an Arduino. Our stopwatch will use two buttons: one to
    start or reset the count and one to stop counting and show the elapsed time. The
    sketch will continually check each button’s status. When the start button is pressed,
    a `millis()` value will be stored, and when the stop button is pressed, a new
    `millis()` value will be stored. The custom function `displayResult()` will convert
    the elapsed time from milliseconds into hours, minutes, and seconds. Finally,
    the time will be displayed in the Serial Monitor.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测量两个事件之间的经过时间，接下来我们可以使用Arduino创建一个简单的秒表。我们的秒表将使用两个按钮：一个用于启动或重置计数，另一个用于停止计数并显示经过的时间。该草图将持续检查每个按钮的状态。当启动按钮被按下时，`millis()`值将被存储，当停止按钮被按下时，新的`millis()`值将被存储。自定义函数`displayResult()`将把经过的时间从毫秒转换为小时、分钟和秒。最后，时间将在串口监视器中显示。
- en: The Hardware
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Use the ProtoShield as described earlier in this chapter and the following
    additional hardware:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章前面描述的ProtoShield以及以下附加硬件：
- en: One breadboard
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Two push buttons (S1 and S2)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个按键（S1和S2）
- en: Two 10 kΩ resistors (R1 and R2)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个10 kΩ电阻（R1和R2）
- en: Various connecting wires
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Arduino and USB cable
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB电缆
- en: The Schematic
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: The circuit schematic is shown in [Figure 7-31](#figure7-31).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 电路原理图如[图7-31](#figure7-31)所示。
- en: '![f07035](image_fi/500587c07/f07035.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![f07035](image_fi/500587c07/f07035.png)'
- en: 'Figure 7-31: Schematic for Project 24'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-31：项目24的原理图
- en: The Sketch
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload this sketch:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传此草图：
- en: '[PRE5]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The basis for our stopwatch is simple. At 1, we set up the digital input pins
    for the start and stop buttons. At 3, if the start button is pressed, then the
    Arduino notes the value for `millis()` that we use to calculate the elapsed time
    once the stop button is pressed at 4. After the stop button is pressed, the elapsed
    time is calculated in the function `displayResult()` at 2 and shown in the Serial
    Monitor window.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的秒表的基本原理很简单。在1处，我们设置了用于启动和停止按钮的数字输入引脚。在3处，如果启动按钮被按下，Arduino将记录`millis()`的值，待停止按钮在4处按下后，我们使用该值来计算经过的时间。停止按钮按下后，经过的时间会在函数`displayResult()`中计算出来，在2处显示，并在串口监视器窗口中展示。
- en: You should see results like those in [Figure 7-32](#figure7-32) in the Serial
    Monitor.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在串口监视器中看到类似[图7-32](#figure7-32)中的结果。
- en: '![f07032](image_fi/500587c07/f07032.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![f07032](image_fi/500587c07/f07032.png)'
- en: 'Figure 7-32: Output from Project 24'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-32：项目24的输出
- en: Interrupts
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中断
- en: An *interrupt* in the Arduino world is basically a signal that allows a function
    to be called at any time within a sketch—for example, when a digital input pin’s
    state changes or a timer event is triggered. Interrupts are perfect for calling
    a function to interrupt the normal operation of a sketch, such as when a button
    is pressed. This type of function is often referred to as an *interrupt handler*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino中，*中断*基本上是一个信号，允许在程序中的任何时刻调用一个函数——例如，当数字输入引脚的状态发生变化，或触发计时器事件时。中断非常适合调用函数以中断程序的正常运行，例如当按钮被按下时。这类函数通常被称为*中断处理程序*。
- en: When an interrupt is triggered, the normal operation and running of your program
    is halted temporarily as the interrupt function is called and executed. Then,
    when the interrupt function exits, whatever was happening in the program continues
    exactly where it left off.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当中断被触发时，程序的正常操作和运行会暂时中止，直到中断函数被调用并执行完毕。然后，当中断函数退出时，程序会继续从中断前的状态恢复执行。
- en: 'Interrupt functions should be short and simple. They should exit quickly, and
    keep in mind that if the interrupt function does something that the main loop
    is already doing, then the interrupt function is going to temporarily override
    the main loop’s activity before the main loop resumes. For example, if the main
    loop is regularly sending *Hello* out the serial port and the interrupt function
    sends *---* when it is triggered, then you could see any of these come out the
    serial port: *H----ello*, *He----llo*, *Hel----lo*, *Hell----o*, or *Hello----*.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 中断函数应简短且简单。它们应该快速退出，并且要记住，如果中断函数执行的操作与主循环已经在做的操作相同，那么中断函数将暂时覆盖主循环的活动，直到主循环恢复。例如，如果主循环定期通过串口发送*Hello*，而中断函数在触发时发送*---*，那么你可能会在串口看到以下任何一种输出：*H----ello*、*He----llo*、*Hel----lo*、*Hell----o*或*Hello----*。
- en: The Arduino Uno offers two interrupts that are available using digital pins
    2 and 3\. When properly configured, the Arduino will monitor the voltage applied
    to the pins. When the voltage changes in a certain defined way (when a button
    is pressed, for example), an interrupt is triggered, causing a corresponding function
    to run—maybe something that sends “Stop Pressing Me!”
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Uno 提供了两个中断，可以通过数字引脚 2 和 3 使用。当正确配置时，Arduino 将监控应用到引脚的电压。当电压以某种特定方式变化时（例如，当按钮被按下时），中断被触发，导致相应的函数执行——可能是发送“Stop
    Pressing Me!”。
- en: Interrupt Modes
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中断模式
- en: 'One of four changes (or *modes*) can trigger an interrupt:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 四种变化（或*模式*）中的任意一种都可以触发一个中断：
- en: '`LOW` No current is applied to the interrupt pin.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LOW` 没有电流应用到中断引脚。'
- en: '`CHANGE` The current changes, either between on and off or between off and
    on.'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CHANGE` 电流发生变化，无论是开关之间变化，还是关闭与打开之间变化。'
- en: '`RISING` The current changes from off to on at 5 V.'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RISING` 电流从关闭状态变化为5V的开启状态。'
- en: '`FALLING` The current changes from on at 5 V to off.'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FALLING` 电流从5V的开启状态变化为关闭状态。'
- en: For example, to detect when a button attached to an interrupt pin has been pressed,
    you could use the `RISING` mode. Or, for example, if you had an electric trip
    wire running around your garden (connected between 5 V and the interrupt pin),
    then you could use the `FALLING` mode to detect when the wire has been tripped
    and broken.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要检测连接到中断引脚的按钮是否被按下，你可以使用`RISING`模式。或者，例如，如果你在花园里铺设了一条电动防护绳（连接在5V和中断引脚之间），你可以使用`FALLING`模式来检测当防护绳被触发并断开时。
- en: Configuring Interrupts
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置中断
- en: 'To configure interrupts, use the following in `void setup()`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置中断，请在`void setup()`中使用以下内容：
- en: '[PRE6]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `0` is for digital pin 2, `1` is for digital pin 3, `function` is the
    name of the function to call when the interrupt is triggered, and `mode` is one
    of the four modes that triggers the interrupt.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`0` 对应数字引脚 2，`1` 对应数字引脚 3，`function` 是在中断触发时要调用的函数名称，`mode` 是触发中断的四种模式之一。
- en: Activating or Deactivating Interrupts
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活或停用中断
- en: 'Sometimes you won’t want to use the interrupts within a sketch. You can deactivate
    a single interrupt using:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能不想在程序中使用中断。你可以通过以下命令停用单个中断：
- en: '[PRE7]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'where `pin` is the digital pin number used. Or you can deactivate them all
    using the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `pin` 是所用的数字引脚编号。或者，你也可以使用以下命令停用所有中断：
- en: '[PRE8]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And then reactivate them with this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过以下方式重新激活它们：
- en: '[PRE9]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Interrupts work quickly and they are very sensitive. These qualities make them
    useful for time-critical applications or for “emergency stop” buttons on projects.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 中断工作快速且非常敏感。这些特点使它们非常适合时间关键型应用或项目中的“紧急停止”按钮。
- en: 'Project #25: Using Interrupts'
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #25：使用中断'
- en: We’ll use the circuit from Project 24 to demonstrate the use of interrupts.
    Our example will blink the built-in LED every 500 milliseconds, during which time
    both interrupt pins will be monitored. When the button on interrupt 0 is pressed,
    the value for `micros()` will be displayed in the Serial Monitor, and when the
    button on interrupt 1 is pressed, the value for `millis()` will be displayed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用项目 24 中的电路来演示中断的使用。我们的示例将每 500 毫秒闪烁内置 LED，在此期间，将监控两个中断引脚。当按下中断 0 上的按钮时，`micros()`的值将在串口监视器中显示；当按下中断
    1 上的按钮时，`millis()`的值将显示出来。
- en: The Sketch
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE10]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This sketch will blink the onboard LED as shown in `void loop()` at 3. When
    interrupt 0 is triggered, the function `displayMicros()` at 1 will be called;
    when interrupt 1 is triggered, the function `displayMillis()` at 2 will be called.
    After either function has finished, the sketch resumes running the code in `void
    loop()`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图将根据`void loop()`中的代码以 3 的频率闪烁板载 LED。当中断 0 被触发时，将调用函数`displayMicros()`（见
    1）；当中断 1 被触发时，将调用函数`displayMillis()`（见 2）。无论哪个函数完成，草图都将恢复运行`void loop()`中的代码。
- en: Open the Serial Monitor window and press the two buttons to view the values
    for `millis()` and `micros()`, as shown in [Figure 7-33](#figure7-33).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 打开串口监视器窗口，按下两个按钮以查看`millis()`和`micros()`的值，如[图 7-33](#figure7-33)所示。
- en: '![f07033](image_fi/500587c07/f07033.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![f07033](image_fi/500587c07/f07033.png)'
- en: 'Figure 7-33: Output from Project 25'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-33：项目 25 输出
- en: Looking Ahead
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: This chapter has given you more tools and options that you can adapt to create
    and improve your own projects. In future chapters, we will work with more Arduino
    shields, use interrupts for timing projects, and use the memory card module in
    other data-logging applications.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为你提供了更多工具和选项，您可以根据需要进行调整，以创建和改进自己的项目。在未来的章节中，我们将使用更多的 Arduino 扩展板，利用中断进行定时项目，并在其他数据记录应用中使用存储卡模块。
