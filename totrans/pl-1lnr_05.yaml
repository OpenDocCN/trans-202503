- en: Chapter 6. Text Conversion and Substitution
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 章 文本转换与替换
- en: In this chapter, we’ll look at various one-liners that change, convert, and
    substitute text, including base64 encoding and decoding, URL escaping and unescaping,
    HTML escaping and unescaping, converting text case, and reversing lines. You’ll
    also get to know the `y`, `tr`, `uc`, `lc`, and `reverse` operators and string-escape
    sequences.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍各种单行命令，这些命令可以更改、转换和替换文本，包括 base64 编码和解码、URL 转义和反转义、HTML 转义和反转义、文本大小写转换以及反转行。你还将了解
    `y`、`tr`、`uc`、`lc` 和 `reverse` 操作符及字符串转义序列。
- en: 6.1 ROT13 a string
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1 对字符串进行 ROT13 编码
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This one-liner uses the `y` operator (also known as the `tr` operator) to do
    ROT13\. The operators `y` and `tr` perform string transliteration. Given `y/search/replace/`,
    the `y` operator transliterates all occurrences of the characters found in the
    `search` list with the characters in the corresponding positions in the `replace`
    list. The `y` and `tr` operators are often mistaken for taking a regular expression,
    but they don’t. They transliterate things and take a list of characters in both
    the `search` and `replace` parts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用 `y` 操作符（也叫做 `tr` 操作符）来执行 ROT13 编码。`y` 和 `tr` 操作符执行字符串转译。给定 `y/search/replace/`，`y`
    操作符将 `search` 列表中找到的所有字符转译为 `replace` 列表中对应位置的字符。`y` 和 `tr` 操作符通常会被误认为接受正则表达式，但它们并不接受。它们是进行字符转译，并接受
    `search` 和 `replace` 部分中的字符列表。
- en: 'In this one-liner, `A-Za-z` creates the following list of characters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个单行命令中，`A-Za-z` 会创建以下字符列表：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And `N-ZA-Mn-za-m` creates this list:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `N-ZA-Mn-za-m` 会创建以下列表：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that in the second list the uppercase and lowercase alphabets are offset
    by 13 characters. Now the `y` operator translates each character in the first
    list to a character in the second list, thus performing the ROT13 operation. (One
    fun fact about ROT13 is that applying it twice produces the same string; that
    is, ROT13(ROT13(*string*)) equals *string*.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在第二个列表中，大写字母和小写字母的偏移量为 13 个字符。现在，`y` 操作符将第一个列表中的每个字符转换为第二个列表中的字符，从而执行 ROT13
    操作。（关于 ROT13 的一个有趣事实是，应用两次 ROT13 操作会产生相同的字符串；也就是说，ROT13(ROT13(*string*)) 等于 *string*。）
- en: 'To ROT13 the whole file *bananas.txt* and print it to the screen, just do this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要对整个文件 *bananas.txt* 进行 ROT13 编码并将结果打印到屏幕上，只需执行以下操作：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also use Perl’s `-i` argument to do in-place replacement of the file.
    For example, to ROT13 *oranges.txt* in-place, write this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 Perl 的 `-i` 参数对文件进行原地替换。例如，要对 *oranges.txt* 进行 ROT13 编码并直接修改文件，请执行以下命令：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This one-liner first creates a backup file called *oranges.txt.bak* and then
    replaces the contents of *oranges.txt* with ROT13-ed text. The `.bak` part of
    the `-i` command creates the backup file. You can omit the `.bak` part of the
    command if you’re sure about the result, but I recommend always using `-i.bak`
    because one day you might make a mistake and mess up an important file. (I speak
    from experience.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令首先创建一个名为 *oranges.txt.bak* 的备份文件，然后用 ROT13 编码的文本替换 *oranges.txt* 的内容。`-i`
    命令的 `.bak` 部分创建了备份文件。如果你对结果非常确信，可以省略 `.bak` 部分，但我建议始终使用 `-i.bak`，因为有一天你可能会犯错，弄乱一个重要的文件。（我说的是亲身经历。）
- en: 6.2 Base64-encode a string
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2 对字符串进行 Base64 编码
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This one-liner uses the `MIME::Base64` module. It exports the `encode_base64`
    function, which takes a string and returns a base64-encoded version of it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用了 `MIME::Base64` 模块。它导出了 `encode_base64` 函数，该函数接受一个字符串并返回其 base64 编码版本。
- en: 'To base64-encode the whole file, use this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要对整个文件进行 base64 编码，请使用以下命令：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the `-0777` argument together with `-n` causes Perl to slurp the whole
    file into the `$_` variable. Next, the file is base64-encoded and printed. (If
    Perl didn’t slurp the entire file, it would be encoded line by line, and you’d
    end up with a mess.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-0777` 参数与 `-n` 一起使用，导致 Perl 将整个文件加载到 `$_` 变量中。接着，文件被 base64 编码并打印出来。（如果
    Perl 没有加载整个文件，它将逐行进行编码，结果会一团糟。）
- en: 6.3 Base64-decode a string
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.3 对字符串进行 Base64 解码
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `MIME::Base64` module also exports the `decode_base64` function, which takes
    a base64-encoded string and decodes it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`MIME::Base64` 模块还导出了 `decode_base64` 函数，该函数接受一个 base64 编码的字符串并进行解码。'
- en: The entire file can be decoded similarly with
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 整个文件也可以通过类似的方式进行解码：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 6.4 URL-escape a string
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.4 对字符串进行 URL 转义
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To use this one-liner, you need to install the `URI::Escape` module first by
    entering `cpan URI::Escape` in the shell. The module exports two functions: `uri_escape`
    and `uri_unescape`. The first function performs *URL escaping* (sometimes referred
    to as *URL encoding*), and the other does *URL unescaping* (or *URL decoding*).
    Now, to URL-escape a string, just call `uri_escape($string)` and you’re done!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这行代码，首先需要安装 `URI::Escape` 模块，可以通过在命令行输入 `cpan URI::Escape` 来安装。该模块导出了两个函数：`uri_escape`
    和 `uri_unescape`。第一个函数执行 *URL 转义*（有时称为 *URL 编码*），另一个执行 *URL 解转义*（或 *URL 解码*）。现在，要进行
    URL 转义，只需调用 `uri_escape($string)`，就完成了！
- en: The output of this one-liner is `http%3A%2F%2Fexample.com`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的输出是 `http%3A%2F%2Fexample.com`。
- en: 6.5 URL-unescape a string
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.5 对字符串进行URL解转义
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This one-liner uses the `uri_unescape` function from the `URI::Escape` module
    to perform URL unescaping. It unescapes the output of the previous one-liner to
    reverse the operation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码使用了来自`URI::Escape`模块的`uri_unescape`函数来执行URL解转义。它解转义之前的代码输出，逆转该操作。
- en: The output of this one-liner is `http://example.com`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的输出是 `http://example.com`。
- en: 6.6 HTML-encode a string
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.6 对字符串进行HTML编码
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This one-liner uses the `encode_entities` function from the `HTML::Entities`
    module to encode HTML entities. For example, you can turn `<` and `>` into `&lt;`
    and `&gt;`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码使用了来自`HTML::Entities`模块的`encode_entities`函数来编码HTML实体。例如，你可以将 `<` 和 `>` 转换为
    `&lt;` 和 `&gt;`。
- en: 6.7 HTML-decode a string
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.7 对字符串进行HTML解码
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This one-liner uses the `decode_entities` function from the `HTML::Entities`
    module. For example, you can turn `&lt;` and `&gt;` back into `<` and `>`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码使用了来自`HTML::Entities`模块的`decode_entities`函数。例如，你可以将 `&lt;` 和 `&gt;` 转换回
    `<` 和 `>`。
- en: 6.8 Convert all text to uppercase
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.8 将所有文本转换为大写
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This one-liner uses the `uc` function, which, by default, operates on the `$_`
    variable and returns an uppercase version of the text it contains.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码使用了 `uc` 函数，默认情况下它作用于 `$_` 变量，并返回它包含的文本的大写版本。
- en: 'You could do the same thing with the `-p` command-line option, which enables
    the automatic printing of the `$_` variable and modifies it in-place:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `-p` 命令行选项，它启用了 `$_` 变量的自动打印并对其进行就地修改：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or you can apply the `\U` escape sequence to string interpolation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以将 `\U` 转义序列应用到字符串插值中：
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This one-liner uppercases everything that follows it (or everything up to the
    first occurrence of `\E`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码会将其后的所有内容（或者直到第一次出现 `\E` 为止）转换为大写。
- en: 6.9 Convert all text to lowercase
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.9 将所有文本转换为小写
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This one-liner is similar to the previous one. The `lc` function converts the
    contents of `$_` to lowercase.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码与前一行类似，`lc` 函数将 `$_` 的内容转换为小写。
- en: 'You could also use the escape sequence `\L` and string interpolation:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用转义序列 `\L` 和字符串插值：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `\L` lowercases everything after it (or until the first instance of `\E`).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`\L` 会将其后的所有内容转换为小写（或者直到第一次出现 `\E` 为止）。
- en: 6.10 Uppercase only the first letter of each line
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.10 只将每行的第一个字母转换为大写
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This one-liner first lowercases the input with the `lc` function and then uses
    `ucfirst` to uppercase only the first character. For example, if you pass it a
    line that says *foo bar baz*, it produces the text *Foo bar baz*. Similarly, if
    you pass it a line *FOO BAR BAZ*, it lowercases the line first and then uppercases
    the first letter, producing *Foo bar baz* again.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码首先通过`lc`函数将输入转换为小写，然后使用`ucfirst`只将第一个字符转换为大写。例如，如果你传入一行文本 *foo bar baz*，它会输出
    *Foo bar baz*。类似地，如果传入一行 *FOO BAR BAZ*，它首先将整行转换为小写，然后再将第一个字母转为大写，最终输出 *Foo bar
    baz*。
- en: 'You can do the same thing using escape codes and string interpolation:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用转义码和字符串插值来做同样的事情：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: First `\L` lowercases the whole line and then `\u` uppercases the first character.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`\L`将整行转换为小写，然后`\u`将第一个字符转换为大写。
- en: 6.11 Invert the letter case
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.11 反转字母的大小写
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This one-liner changes the case of the letters: The capital letters become
    lowercase letters, and the lowercase letters become capital letters. For example,
    the text *Cows are COOL* becomes *cOWS ARE cool*. The transliteration operator
    `y` (explained in one-liner 6.1 on page 59) creates a mapping from capital letters
    `A-Z` to lowercase letters `a-z` and a mapping from lowercase letters `a-z` to
    capital letters `A-Z`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码会改变字母的大小写：大写字母变为小写字母，小写字母变为大写字母。例如，文本 *Cows are COOL* 会变成 *cOWS ARE cool*。转写操作符
    `y`（在第59页的6.1一行解释）创建了一个从大写字母 `A-Z` 到小写字母 `a-z` 的映射，以及从小写字母 `a-z` 到大写字母 `A-Z` 的映射。
- en: 6.12 Title-case each line
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.12 将每行转换为标题式大小写
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This one-liner attempts to title-case a string, meaning the first letter of
    each word is uppercased; for example, *This Text Is Written In Title Case*. This
    one-liner works by matching every word with `\w+` and replacing the matched word
    with `\u$1`, which uppercases the first letter of the word.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码尝试将字符串转换为标题大小写，意思是每个单词的第一个字母都大写；例如，*This Text Is Written In Title Case*。这行代码通过匹配每个单词`\w+`，并用`\u$1`替换匹配的单词，从而将单词的第一个字母大写。
- en: 6.13 Strip leading whitespace (spaces, tabs) from the beginning of each line
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.13 删除每行开头的空白字符（空格、制表符）
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This one-liner deletes all whitespace from the beginning of every line with
    the help of the substitution operator `s`. Given `s/regex/replace/`, it replaces
    the matched `regex` with the `replace` string. In this case, the `regex` is `^[
    \t]+`, which means “match one or more spaces or tabs at the beginning of the string,”
    and `replace` is empty, meaning “replace the matched part with an empty string.”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码利用替换操作符`s`删除每行开头的所有空白字符。`s/regex/replace/`表示将匹配的`regex`替换为`replace`字符串。在这个例子中，`regex`是`^[
    \t]+`，意思是“匹配字符串开头的一个或多个空格或制表符”，而`replace`为空，意味着“将匹配的部分替换为空字符串”。
- en: 'The regular expression class `[ \t]` can also be replaced by `\s+` to match
    any whitespace (including tabs and spaces):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式类`[ \t]`也可以用`\s+`替换，以匹配任何空白字符（包括制表符和空格）：
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 6.14 Strip trailing whitespace (spaces, tabs) from the end of each line
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.14 删除每行末尾的空白字符（空格、制表符）
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This one-liner deletes all whitespace from the end of each line. The `regex`
    of the `s` operator says “match one or more spaces or tabs at the end of the string.”
    The `replace` part is empty again, which means “erase the matched whitespace.”
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码删除每行末尾的所有空白字符。`s`操作符的正则表达式表示“匹配字符串末尾的一个或多个空格或制表符”。`replace`部分为空，这意味着“删除匹配的空白字符”。
- en: 'You can also achieve the same by writing:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过写成以下形式来实现相同的效果：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, you replace with `[ \t]+$` with `\s+`, as in one-liner 6.13.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以用`\s+`替换`[ \t]+$`，就像在单行代码6.13中一样。
- en: 6.15 Strip whitespace (spaces, tabs) from the beginning and end of each line
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.15 删除每行开头和结尾的空白字符（空格、制表符）
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This one-liner combines one-liners 6.13 and 6.14\. It specifies the global `/g`
    flag to the `s` operator because you want it to delete whitespace at the beginning
    *and* the end of the string. If you don’t specify this, it deletes whitespace
    only at the beginning (if there is whitespace) or only at the end (if there was
    no whitespace at the beginning).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码结合了单行代码6.13和6.14。它为`s`操作符指定了全局`/g`标志，因为你希望它删除字符串开头*和*结尾的空白字符。如果不指定这个标志，它只会删除开头的空白（如果有空白）或结尾的空白（如果开头没有空白）。
- en: 'You can also replace `[ \t]+$` with `\s+` and get the same results:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将`[ \t]+$`替换为`\s+`，得到相同的结果：
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Writing `\s+` is shorter than writing `[ \t]+`. And `s` stands for space, which
    makes it easier to remember.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 写`\s+`比写`[ \t]+`更简洁。而`s`代表空格，这使得它更容易记住。
- en: 6.16 Convert UNIX newlines to DOS/Windows newlines
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.16 将UNIX换行符转换为DOS/Windows换行符
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This one-liner substitutes the UNIX newline character `\012` (`LF`) for the
    Windows/DOS newline character `\015\012` (`CRLF`) on each line. One nice feature
    of `s/regex/replace/` is that it can take characters other than forward slashes
    as delimiters. Here, it uses vertical pipes to delimit `regex` from `replace`
    to improve readability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码将UNIX换行符`\012`（`LF`）替换为Windows/DOS换行符`\015\012`（`CRLF`）每一行。`s/regex/replace/`的一个优点是，它可以使用除正斜杠以外的其他字符作为分隔符。这里，使用竖线分隔`regex`和`replace`，以提高可读性。
- en: 'Newlines are usually represented as `\n` and carriage returns as `\r`, but
    across platforms, the meanings of the `\n` and `\r` sequences can vary. The UNIX
    newline character, however, is always available as `\012` (`LF`), and the carriage-return
    character represented by `\r` is always available as `\015` (`CR`). That’s why
    you use those numeric codes: Sometimes using the flexible sequence is preferable,
    but not here.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 换行符通常表示为`\n`，回车符表示为`\r`，但在不同平台上，`\n`和`\r`的含义可能有所不同。然而，UNIX换行符始终可以表示为`\012`（`LF`），而回车符表示为`\r`（`CR`）。这就是为什么你使用这些数字代码：有时使用灵活的序列更可取，但在这里并不适用。
- en: 6.17 Convert DOS/Windows newlines to UNIX newlines
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.17 将DOS/Windows换行符转换为UNIX换行符
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This one-liner works in the opposite direction from one-liner 6.16\. It takes
    Windows newlines (`CRLF`) and converts them to UNIX newlines (`LF`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码的作用与单行代码6.16相反。它将Windows换行符（`CRLF`）转换为UNIX换行符（`LF`）。
- en: 6.18 Convert UNIX newlines to Mac newlines
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.18 将UNIX换行符转换为Mac换行符
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Mac OS previously used `\015` (`CR`) as newlines. This one-liner converts UNIX’s
    `\012` (`LF`) to Mac OS’s `\015` (`CR`).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS以前使用`\015`（`CR`）作为换行符。这个单行命令将UNIX的`\012`（`LF`）转换为Mac OS的`\015`（`CR`）。
- en: 6.19 Substitute (find and replace) “foo” with “bar” on each line
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.19 在每一行中将“foo”替换为“bar”
- en: '[PRE31]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This one-liner uses the `s/regex/replace/` command to substitute the first occurrence
    of `foo` with `bar` on each line.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用`s/regex/replace/`命令，将每一行中第一次出现的`foo`替换为`bar`。
- en: 'To replace all `foo`s with `bar`s, add the global `/g` flag:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要将所有的`foo`替换为`bar`，请添加全局`/g`标志：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 6.20 Substitute (find and replace) “foo” with “bar” on lines that match “baz”
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.20 在匹配“baz”的行中将“foo”替换为“bar”
- en: '[PRE33]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This one-liner is roughly equivalent to
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令大致等价于
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This expanded code puts each line into the variable `$line` and then checks
    to see if a line in that variable matches `baz`. If so, it replaces `foo` with
    `bar` in that line.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展的代码将每一行放入变量`$line`中，然后检查该变量中的行是否与`baz`匹配。如果匹配，则将该行中的`foo`替换为`bar`。
- en: You could also write
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以这样写
- en: '[PRE35]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 6.21 Print paragraphs in reverse order
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.21 逆序打印段落
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This one-liner uses the `-00` argument discussed in one-liner 2.7 (page 14)
    to turn paragraph slurp mode on, meaning that Perl reads text paragraph by paragraph,
    rather than line by line. Next, it uses the `<>` operator to make Perl read the
    input from either standard input or files specified as arguments. Here, I’ve specified
    `file` as the argument so Perl will read `file` paragraph by paragraph (thanks
    to `-00`). Once Perl finishes reading the file, it returns all paragraphs as a
    list and calls `reverse` to reverse the order of the paragraph list. Finally,
    `print` prints the list of reversed paragraphs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用了在单行命令2.7（第14页）中讨论的`-00`参数，启用段落吸取模式，意味着Perl按段落读取文本，而不是按行读取。接着，它使用`<>`运算符让Perl从标准输入或指定的文件中读取输入。这里，我指定了`file`作为参数，因此Perl将按段落读取`file`（得益于`-00`）。一旦Perl读取完文件，它会将所有段落作为一个列表返回，并调用`reverse`来反转段落列表的顺序。最后，`print`打印反转后的段落列表。
- en: 6.22 Print all lines in reverse order
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.22 逆序打印所有行
- en: '[PRE37]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This one-liner evaluates the `reverse` operator in the scalar context. In the
    previous one-liner, you saw that evaluating `reverse` in the list context reverses
    the whole list, that is, the order of the elements. To do the same for scalar
    values such as `$_` that contain the whole line, you have to call `reverse` in
    the scalar context. Otherwise, it simply reverses a list with only one element,
    which is the same list! Once you’ve done that, you simply print the reversed line.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令在标量上下文中评估`reverse`运算符。在前面的单行命令中，你看到在列表上下文中评估`reverse`会反转整个列表，也就是元素的顺序。要对像`$_`这样的标量值（包含整行内容）执行相同的操作，你必须在标量上下文中调用`reverse`。否则，它只会反转一个包含单个元素的列表，也就是同样的列表！完成这个操作后，你只需打印反转后的行。
- en: Often you can drop the `$_` variable when using operators and Perl will still
    apply the function on the `$_` variable. In other words, you can rewrite the same
    one-liner as
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在使用运算符时，你可以省略`$_`变量，Perl 仍然会在`$_`变量上应用该函数。换句话说，你可以将相同的单行命令重写为
- en: '[PRE38]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Or you can substitute `-n` for `-p`, modify the `$_` variable, and set its
    value to reverse:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以将`-n`替换为`-p`，修改`$_`变量，并将其值设置为反转：
- en: '[PRE39]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You can also write this as
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以这样写
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here, `$_` is dropped because most Perl operators default to `$_` when not given
    an argument.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`$_`被省略了，因为大多数Perl运算符在没有给定参数时，默认使用`$_`。
- en: 6.23 Print columns in reverse order
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.23 逆序打印列
- en: '[PRE41]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This one-liner reverses the order of columns in a file. The `-a` command-line
    argument splits each line into columns at spaces and puts them in the `@F` array,
    which is then reversed and printed. This one-liner is similar to one-liner 4.4
    on page 32; I explained the `@{[ ... ]}` construct there. It simply lets you run
    code inside of double quotes. For example, given the following input file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令反转文件中列的顺序。`-a`命令行参数将每一行按空格分割成列，并将它们放入`@F`数组，然后反转并打印出来。这个单行命令类似于第32页上的单行命令4.4；我在那里解释了`@{[
    ... ]}`构造。它简单地让你在双引号内运行代码。例如，给定以下输入文件：
- en: '[PRE42]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'the one-liner reverses the order of the columns, and the output is the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令反转了列的顺序，输出如下：
- en: '[PRE43]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If the columns in your input are separated by any character other than a space,
    you can use the `-F` command-line argument to set a different delimiter. For example,
    given the following input file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入中的列是由空格以外的任何字符分隔的，你可以使用`-F`命令行参数来设置不同的分隔符。例如，给定以下输入文件：
- en: '[PRE44]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'you can add the `-F:` command-line argument to the one-liner like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样在单行命令中添加`-F:`命令行参数：
- en: '[PRE45]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'and it produces this output:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 它会产生如下输出：
- en: '[PRE46]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Notice, however, that the `:` characters are missing in this output. To get
    them back, you need to modify the one-liner a bit and set the `$"` variable to
    `":"`, as shown here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然而请注意，输出中缺少了`:`字符。要恢复它们，你需要稍微修改单行命令，并将`$"`变量设置为`":"`，如下所示：
- en: '[PRE47]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This produces the expected output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生预期的输出：
- en: '[PRE48]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `$"` variable changes the character that’s printed between array elements
    when an array is interpolated within a double-quoted string.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`$"`变量会改变在数组元素间插入的字符，当数组被插入到双引号字符串中时就是这样。'
