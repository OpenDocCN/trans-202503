- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">AFTERWORD</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ve learned the core of the JavaScript language, you’ve worked through the
    book’s three projects, and you’re wondering what to do now. The good news (or
    the bad news, depending on your outlook) is that the learning never stops. There
    are many different directions in which you can take your programming career. Here
    are some suggestions about possible next steps and tools and resources to explore.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Projects</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a fairly good understanding of how to set up a new JavaScript
    project at this point, so why not try building something new? One option would
    be to make your own game, using the techniques you learned in this book. Some
    relatively simple arcade games in a similar vein to *Pong* include *Snake*, *Space
    Invaders*, *Tetris*, and *Breakout*. Or you could try something completely different
    and make a word game, like *Wordle* or *Hangman*.
  prefs: []
  type: TYPE_NORMAL
- en: You could also try to build on what you learned in the book’s other projects
    by making your own musical creation or data visualization. On the music side,
    you might want to experiment with making a drum machine, or perhaps an endless
    music generator. You could also use your knowledge to add sound effects to one
    of your games. On the data visualization side, there are countless other APIs
    you can try out for fetching data from other services. As discussed in [Chapter
    15](chapter15.xhtml), many APIs require some sort of authentication, which isn’t
    feasible for browser-based applications; with Node.js, however, you can experiment
    with building your own backend applications as well.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you shouldn’t feel limited to the sorts of projects you worked through
    in this book. If there’s something that interests you, try to build it! If you’re
    not sure where to start, use Google to get some ideas. JavaScript is one of the
    most popular languages in the world, so chances are somebody has written up instructions
    on doing whatever it is you want to do.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Node.js</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book only explains how to write JavaScript for running in web browsers,
    but with Node.js you can also run JavaScript on backend web servers. Check out
    [*https://<wbr>nodejs<wbr>.dev<wbr>/en<wbr>/learn<wbr>/*](https://nodejs.dev/en/learn/)
    for a great guide to getting started with Node.js. Once you have a backend for
    your app, you can start to do more interesting things, such as storing data on
    the user’s behalf, accessing third-party authenticated HTTP APIs with a secret
    key, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Tools</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many tools of various kinds that will help you as you continue your
    programming journey. This section introduces a few of them, but it’s in no way
    comprehensive.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Git</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Git is a popular version control system that allows you to keep track of changes
    to your code and go back to earlier versions. When I first started programming,
    I would often find myself making changes to my code and breaking something, then
    not understanding how I had broken it and not being able to get back to the previous
    state. To avoid that, I started making backups of my code so I could go back to
    an earlier version. Git is a much better way to achieve the same goal. With Git,
    you make *commits* that store the state of your code at a particular point in
    time. Each commit builds on previous ones, while keeping track of what’s changed.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of online resources for learning Git. Many of them can be found
    at [*https://<wbr>git<wbr>-scm<wbr>.com<wbr>/doc*](https://git-scm.com/doc).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">GitHub</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have Git installed on your computer, using GitHub (the service from
    which we drew our data in [Chapter 15](chapter15.xhtml)) is a great next step.
    GitHub provides a way to upload and share your local Git repositories so they
    can be accessed anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub also gives you access to millions of open source repositories that you
    can *fork* (make your own copy of) and modify to your heart’s content. For example,
    to see all my public repositories, go to [*https://<wbr>github<wbr>.com<wbr>/skilldrick*](https://github.com/skilldrick).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">CodePen</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To share your projects with others, you’ll need a way to make them accessible
    via the web. You could set up your own web hosting, but a much easier option is
    using CodePen ([*https://<wbr>codepen<wbr>.io*](https://codepen.io)). This is
    also the tool used for hosting the companion resources for this book, available
    at [*https://<wbr>codepen<wbr>.io<wbr>/collection<wbr>/ZMjYLO*](https://codepen.io/collection/ZMjYLO).
  prefs: []
  type: TYPE_NORMAL
- en: With CodePen, you can create and share projects built using HTML, CSS, and JavaScript.
    The code is all viewable on the page in separate panels. For example, [Figure
    A-1](#figA-1) shows a sample Pen I put together that adds an extra exclamation
    mark every time you click the text. Check out the Pen online at [*https://<wbr>codepen<wbr>.io<wbr>/skilldrick<wbr>/pen<wbr>/abKaQpo*](https://codepen.io/skilldrick/pen/abKaQpo).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_A-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-1: A sample Pen on
    CodePen</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In the HTML panel, only the contents of the body element are needed. CodePen
    supplies the rest of the HTML structure automatically. You can also easily include
    external JavaScript libraries through the Settings dialog.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Glitch</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like CodePen, Glitch is a service that hosts your code for you and lets you
    share it with the world. What sets Glitch apart is its ability to run frontend
    *and* backend code. Instead of just providing panels for HTML, CSS, and JavaScript,
    Glitch allows you to define a full directory structure with all the files you
    need. You can even add a SQLite database to store data. Go to [*https://<wbr>glitch<wbr>.com*](https://glitch.com)
    to learn more, or check out [*https://<wbr>glitch<wbr>.new*](https://glitch.new)
    to choose from a list of starter apps.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Web Development</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this book’s focus is on JavaScript, along the way you also learned
    some general web development skills. If this has whetted your appetite, you may
    want to spend some more time learning about other aspects of web development.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">HTML and CSS</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTML is the language that the vast majority of web pages are written in, so
    it’s valuable to have a deeper understanding of its intricacies. To learn more,
    check out the MDN docs at [*https://<wbr>developer<wbr>.mozilla<wbr>.org<wbr>/HTML*](https://developer.mozilla.org/HTML).
    CSS is used for styling web pages, so if you want your pages to look nice, it’s
    essential to understand how it works. Learn more on MDN at [*https://<wbr>developer<wbr>.mozilla<wbr>.org<wbr>/CSS*](https://developer.mozilla.org/CSS).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">JavaScript Frameworks
    and Libraries</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Web development today is very complex, with web apps regularly containing thousands
    of lines of HTML, CSS, and JavaScript. To greatly reduce the amount of code needed
    to write a fully functional modern web app, many developers use JavaScript frameworks
    and libraries. Two of the most popular at the time of this writing are React and
    Vue.js. Knowledge of such tools isn’t necessary, but it can dramatically simplify
    the process of building complex websites and frontend applications. You can try
    out React and Vue.js in CodePen, or check out their websites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'React: [*https://<wbr>reactjs<wbr>.org*](https://reactjs.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vue.js: [*https://<wbr>vuejs<wbr>.org*](https://vuejs.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React on CodePen: [*https://<wbr>codepen<wbr>.io<wbr>/topic<wbr>/react<wbr>/templates*](https://codepen.io/topic/react/templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vue.js on CodePen: [*https://<wbr>codepen<wbr>.io<wbr>/topic<wbr>/vue<wbr>/templates*](https://codepen.io/topic/vue/templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Testing</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One essential tool for programmers is an automated testing framework. Automated
    tests are designed to run against your code regularly, to confirm it does what
    you expect it to do. A common problem when writing code is adding a new feature
    without realizing that the change breaks some other aspect of your program. By
    writing good tests and running them regularly, you can identify the moment something
    breaks, and fix it. You can also work on large refactors of your code with confidence,
    knowing that as long as the tests pass, it’s unlikely that you’ve broken anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a huge number of testing libraries and frameworks for JavaScript.
    One of the most popular at the time of this writing is Jest: check it out at [*https://<wbr>jestjs<wbr>.io*](https://jestjs.io).'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">More JavaScript!</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to deepen your JavaScript knowledge, there are many resources available
    to you. Here are a few recommendations of where to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MDN JavaScript Portal: [*https://<wbr>developer<wbr>.mozilla<wbr>.org<wbr>/JavaScript*](https://developer.mozilla.org/JavaScript)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Eloquent JavaScript*, 3rd edition, by Marijn Haverbeke (No Starch Press, 2018)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*JavaScript: The Definitive Guide*, 7th edition, by David Flanagan (O’Reilly
    Media, 2020)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Other Languages</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might decide at this point that you want to broaden your programming knowledge
    rather than dig deeper into JavaScript. Go for it! Every language you learn gives
    you valuable insights into programming in general, so this is actually a great
    way to get better at JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">TypeScript</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the problems that people have with JavaScript is its weak, dynamic typing,
    which allows values to be implicitly coerced to different data types depending
    on the surrounding code. For example, the + operator will convert a number operand
    to a string if the other operand is a string, while the - operator will convert
    a string operand to a number if the other operand is a number.
  prefs: []
  type: TYPE_NORMAL
- en: The TypeScript language is an attempt to add static typing to JavaScript. *Static
    typing* means that a variable of a certain type can only contain values of that
    type, and conversions between types must be explicit. TypeScript is syntactically
    a superset of JavaScript, which means that a valid JavaScript program is also
    a valid TypeScript program. TypeScript code can be converted to JavaScript using
    the TypeScript compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Using static types makes it impossible to write code with certain bugs. For
    example, in JavaScript you might take a value from a text box, assume that it’s
    a number, and add it to another number. Unfortunately, any value from a text box
    is treated as a string, so the other number will be implicitly converted to a
    string as well, and you’ll end up with the two strings concatenated. TypeScript
    doesn’t allow this. It knows that the value from the text box is a string, and
    it forces you to decide whether you want to convert both operands to strings for
    concatenation or convert both operands to numbers for addition.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of TypeScript is that it can sometimes be more difficult to write
    code that otherwise seems like it should work. This is sometimes known as *fighting
    the compiler*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to learn more, here are some books and other resources that can
    help you get started with TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The TypeScript Handbook: [*https://<wbr>www<wbr>.typescriptlang<wbr>.org<wbr>/docs<wbr>/handbook<wbr>/intro<wbr>.html*](https://www.typescriptlang.org/docs/handbook/intro.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Effective TypeScript* by Dan Vanderkam (O’Reilly Media, 2019)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learning TypeScript* by Josh Goldberg (O’Reilly Media, 2022)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Python</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is a scripting language, like JavaScript, but it has a different philosophy.
    The language takes a “batteries included” approach, meaning that its standard
    library comes fully featured with a wide array of functionality (JavaScript’s
    standard library, by comparison, is very limited). Like JavaScript, Python is
    dynamically typed, so the same variable can hold values of different data types.
    But whereas JavaScript is weakly typed, Python is *strongly typed*, meaning that
    there are no implicit coercions. Syntactically, Python looks very different, using
    indentation (which is required, not optional) rather than braces to define nested
    blocks of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python is a popular language of choice for web servers, as well as for scientific
    and numeric programming. If you’re looking to broaden your skills, it’s a good
    choice. The following book (in the same series as *JavaScript Crash Course*) is
    a great introduction to the language, and its projects highlight some of the areas
    in which Python shines:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Python Crash Course*, 3rd edition, by Eric Matthes (No Starch Press, 2023)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Rust</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the languages I’m most excited about today is Rust. Like TypeScript,
    it’s a statically typed language, but it has a much more powerful type system
    than most languages in use today. Rust aims to replace the older languages C and
    C++ for developing high-performance code.
  prefs: []
  type: TYPE_NORMAL
- en: C and C++ are both languages without *garbage collection*, the process that
    tells the computer which values and objects are no longer used, in order to free
    up the computer’s memory. Instead, C/C++ programmers must manually free data that
    is no longer in use—a process that’s error prone and can often lead to bugs. These
    languages are commonly used in performance-critical environments, and they don’t
    use garbage collection because it can reduce the performance of software. Rust
    avoids this problem with a compile-time *borrow checker*, which keeps track of
    which objects are in use at any given time, and by which parts of the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rust is also used heavily as a source language for compiling to WebAssembly,
    which is an exciting new technology for running extremely efficient and performant
    code in the browser. Here are some resources for learning more:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Rust Programming Language*, 2nd edition, by Steve Klabnik and Carol Nichols
    (No Starch Press, 2023)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rust and WebAssembly: [*https://<wbr>rustwasm<wbr>.github<wbr>.io<wbr>/docs<wbr>/book<wbr>/*](https://rustwasm.github.io/docs/book/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
