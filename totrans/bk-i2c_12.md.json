["```\n#dtparam=i2c_arm=on\n```", "```\ndtparam=i2c_vc=on\n```", "```\nmodprobe i2c-bcm2708 #Note:use i2c-bcm2835 on Pi zero W, 3, and 4\nmodprobe i2c-dev\n```", "```\ni2c-bcm2708\ni2c-dev\n```", "```\ndtoverlay=i2c1,pins_2_3\ndtoverlay=i2c3,pins_4_5\ndtoverlay=i2c4,pins_6_7\ndtoverlay=i2c5,pins_12_13\ndtoverlay=i2c6,pins_22_23\n```", "```\nenable_uart= 1\n```", "```\n`dtparam=i2c_arm_baudrate=``xxxxxx`\n```", "```\ndtoverlay=i2c3,pins_4_5\ndtparam=baudrate=`xxxxxx` #sets clock frequency for i2c-3\ndtoverlay=i2c4,pins_6_7\ndtparam=baudrate=`xxxxxx` #sets clock frequency for i2c-4\ndtoverlay=i2c5,pins_12_13\ndtparam=baudrate=`xxxxxx` #sets clock frequency for i2c-5\ndtoverlay=i2c6,pins_22_23\ndtparam=baudrate=`xxxxxx` #sets clock frequency for i2c-6\n```", "```\ndtoverlay=i2c-gpio,bus=`x`,i2c_gpio_sda=`y`,i2c_gpio_scl=`z`\n```", "```\n**ls /dev/i2c***\n```", "```\n/dev/i2c-1 /dev/i2c-6\n```", "```\n**sudo apt-get install i2c-tools libi2c-dev** \n```", "```\n**i2cget {-y}** `i2cbus` `device_address` **{**`register` **{**`mode`**}}**\n**i2cget -y** `i2cbus device_address register mode`\n```", "```\n**i2cset {-y}** `i2cbus` `device_address` `data_address` **{**`value`} **{**`mode`**}**\n```", "```\ni2cset -y `i2cbus` `device_address` `HOByte` `LOByte`\n```", "```\n**i2cdetect -l**\n```", "```\ni2c-1 i2c bcm2835 (i2c@7e804000) I2C adapter\n```", "```\n**i2cdetect -F** `bus`\n```", "```\nFunctionalities implemented by /dev/i2c-1:\nI2C                              yes\nSMBus Quick Command              yes\nSMBus Send Byte                  yes\nSMBus Receive Byte               yes\nSMBus Write Byte                 yes\nSMBus Read Byte                  yes\nSMBus Write Word                 yes\nSMBus Read Word                  yes\nSMBus Process Call               yes\nSMBus Block Write                yes\nSMBus Block Read                 no\nSMBus Block Process Call         no\nSMBus PEC                        yes\nI2C Block Write                  yes\nI2C Block Read                   yes\n```", "```\n**i2cdetect {-y} {-a} {-q|-r}** `bus` **{**`first last`**}**\n```", "```\n**i2cdetect 1**\n```", "```\n**i2cdetect -y 1**\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- 04 -- -- -- -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- 62 -- -- -- -- -- -- -- -- -- -- -- -- -- \n70: -- -- -- -- -- -- -- --\n```", "```\n**i2cdetect -y 1 0x60 0x67**\n```", "```\n`handle` = open( `busName`, O_RDWR );\n```", "```\n`result` = ioctl( `handle`, I2C_SLAVE, `i2cAddr` );\n```", "```\n`result` = read( `handle`, `buffer`, `bufferSize` );\n```", "```\n`result` = write( `handle`, `buffer`, `bufferSize` );\n```", "```\n// Listing9-1.cpp\n\n// Demonstrates reading from and\n// writing to an MCP4725 DAC.\n\n#include <unistd.h>        \n#include <fcntl.h>         \n#include <sys/ioctl.h>     \n#include <linux/i2c-dev.h> \n\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n#define ever ;;\n\n❶ #define i2cDevname      \"/dev/i2c-1\"\n//#define i2cAddr (0x60) // Adafruit MCP4725 address\n#define i2cAddr (0x62)   // SparkFun MCP4725 address\n\nint main()\n{\n    #define bufferSize (5)\n\n    static unsigned char buffer[bufferSize + 1];\n\n    // Open the I2C interface (i2c-1):\n\n ❷ int fd_i2c = open( i2cDevname, O_RDWR );\n\n    if( fd_i2c < 0 )\n    {\n        printf\n        ( \n            \"Error opening %s, terminating\\n\", \n            i2cDevname \n        );\n        return -1;\n    }\n\n    // Assign the device address of the MCP4725 to\n    // the open handle:\n\n  ❸ int result = ioctl( fd_i2c, I2C_SLAVE, i2cAddr );\n    if( result < 0 )\n    {\n        printf\n        ( \n            \"Error attaching MCP4725: %d, %s\\n\", \n            result, \n            strerror( result ) \n        );\n        return result;\n    }\n\n    // Just for fun, read the 5 data bytes from the\n    // MCP4725.\n\n  ❹ result=read( fd_i2c , buffer, bufferSize );\n    if( result < 0 )\n    {\n        printf\n        ( \n            \"Error reading from %s, terminating: %s\\n\", \n            i2cDevname, \n            strerror( errno )\n        );\n return -1;\n    }\n\n    printf( \"Data from DAC:\\n\" );\n    for ( int i = 0; i < bufferSize; i++ )\n    {\n        printf( \"0x%02x \", (int) buffer[i] );\n    }\n    printf( \"\\n\" );\n\n    // Continuously send a triangle wave to the \n    // MCP4725 until the user hits CTRL-C:\n\n    for(ever)\n    {\n        // Output the rising edge:\n\n        for( int i=0; i < 4095; ++i )\n        {\n            buffer[0] = (i >> 8) & 0xf; // HO 4 bits is first\n            buffer[1] = i & 0xff;       // LO byte is second\n\n            // Write the two bytes to the DAC:\n\n          ❺ result = write( fd_i2c, buffer, 2 );\n        }\n\n        // Output the falling edge:\n\n        for( int i=4095; i > 1; --i )\n        {\n            buffer[0] = (i >> 8) & 0xf; // HO 4 bits is first\n            buffer[1] = i & 0xff;       // LO byte is second\n\n            // Write the two bytes to the DAC:\n\n            result = write( fd_i2c, buffer, 2 );\n        }\n    }\n\n    return 0;\n}\n```", "```\n#include <linux/i2c.h>\n\nstatic inline __s32 i2c_smbus_access\n(\n    int file, \n    char read_write, \n    __u8 command,\n    int size, \n    union i2c_smbus_data *data\n){\n    struct i2c_smbus_ioctl_data args;\n\n    args.read_write = read_write;\n args.command = command;\n    args.size = size;\n    args.data = data;\n    return ioctl( file,I2C_SMBUS,&args );\n}\n```", "```\nstatic inline __s32 i2c_smbus_read_byte( int file )\n{\n    union i2c_smbus_data data;\n    if\n    ( \n        i2c_smbus_access\n        (\n            file,\n            I2C_SMBUS_READ,\n            0,\n            I2C_SMBUS_BYTE,\n            &data\n        )\n    ){\n        return -1;\n    }\n    return 0x0FF & data.byte;\n}\n```", "```\n**extern \"C\" { // Required for CPP compilation**\n **#include <linux/i2c-dev.h>**\n **#include <i2c/smbus.h>**\n **#include <sys/ioctl.h>**\n**}**\n```", "```\n__s32 i2c_smbus_write_quick( int file, __u8 value );\n```", "```\n__s32 i2c_smbus_read_byte( int file );\n```", "```\n// Listing9-2.cpp\n//\n// Demonstration of two consecutive \n// i2c_smbus_read_byte calls.\n//\n// gcc Listing9-2.c -li2c\n\n#include <unistd.h>             // Needed for I2C port\n#include <fcntl.h>              // Needed for I2C port\nextern \"C\"                      // Needed for C++ compiler\n{\n    #include <linux/i2c-dev.h>  // Needed for I2C port\n    #include <i2c/smbus.h>\n}\n#include <sys/ioctl.h>\n#include <stdio.h>\n\n#define i2cDevname      \"/dev/i2c-1\"\n#define i2cAddr (0x62)      // Adafruit MCP4725 address\n//#define i2cAddr (0x60)    // SparkFun MCP4725 address\n\nint main()\n{\n    unsigned char buffer[2];\n int file;\n\n    file = open( i2cDevname, O_RDWR );\n    ioctl( file, I2C_SLAVE, i2cAddr );\n    buffer[0] = i2c_smbus_read_byte( file );\n    buffer[1] = i2c_smbus_read_byte( file );\n    printf( \"Buffer[0,1]=%02x, %02x\\n\", buffer[0], buffer[1] );\n    return 0;\n\n}\n```", "```\nBuffer[0,1]=c0, c0\n```", "```\n__s32 i2c_smbus_write_byte( int `file`, __u8 `value` );\n```", "```\n__s32 i2c_smbus_read_byte_data( int `file`, __u8 `command` );\n```", "```\n// Listing9-3.cpp\n//\n// Demonstration of i2c_smbus_read_byte_data call.\n//\n// gcc listing-9-3.c -li2c\n\n#include <unistd.h>\n#include <fcntl.h>\nextern \"C\"                     // Needed for C++ compiler\n{\n    #include <linux/i2c-dev.h> // Needed for I2C port\n    #include <i2c/smbus.h>\n}\n#include <sys/ioctl.h>\n#include <stdio.h>\n\n#define i2cDevname      \"/dev/i2c-1\"\n#define i2cAddr (0x62)         // Adafruit MCP4725 address\n//#define i2cAddr (0x60)       // SparkFun MCP4725 address\n\nint main()\n{\n    unsigned char result;\n    int file;\n\n    file = open( i2cDevname, O_RDWR );\n    ioctl( file, I2C_SLAVE, i2cAddr );\n    result = i2c_smbus_read_byte_data( file, 0 );\n    printf( \"Result=%02x\\n\", result );\n    return 0;\n}\n```", "```\nstatic inline __s32 i2c_smbus_write_byte_data\n(\n    int file, \n    __u8 command,\n    __u8 value\n);\n```", "```\n__s32 i2c_smbus_read_word_data( int file, __u8 command );\n```", "```\ni2c_smbus_write_word_data( int file, __u8 command,__u16 value )\n```", "```\nstatic inline __s32 i2c_smbus_read_block_data\n(\n    int file, \n    __u8 command,\n    __u8 *values\n} \n```", "```\nstatic inline __s32 i2c_smbus_write_block_data\n(\n    int file, \n    __u8 command,\n    __u8 length, \n    const __u8 *values\n) \n```"]