["```\n#lang racket/gui\n\n(define frame\n  (new frame%\n       [label \"I'm a GUI!\"]\n       [width 300]\n       [height 200]))\n\n(send frame show #t)\n```", "```\n   #lang racket/gui\n\n   (define main-frame\n     (new frame%\n          [label \"I'm a GUI Too!\"]\n          [width 300]\n          [height 100]))\n\n   (define msg\n  ➊ (new message%\n       ➋ [parent main-frame]\n          [auto-resize #t]\n          [label \"Hi, there!\"]))\n\n➌ (new button%\n        [parent main-frame]\n        [label \"Click Me\"]\n     ➍ [callback (λ (button event)\n                   (send msg set-label \"You didn't say may I!\"))])\n\n   (send main-frame show #t)\n```", "```\n   #lang racket/gui\n\n   (define RADIUS 8) \n   (define DIAMETER (* 2 RADIUS))\n\n   (define loc-x RADIUS)\n   (define loc-y 35)\n\n   (define main-frame\n     (new frame%\n          [label \"I'm a GUI Too!\"]\n          [width 300]\n          [height 100]))\n\n   (define canvas\n     (new canvas% [parent main-frame]\n       ➊ [paint-callback\n           (λ (canvas dc)\n             (send dc set-smoothing 'smoothed)\n             (send dc set-text-foreground \"blue\")\n             (send dc draw-text \"Having a ball!\" 0 0)\n             (send dc set-brush \"red\" 'solid)\n             (send dc draw-ellipse (- loc-x RADIUS) (- loc-y RADIUS) DIAMETER DIAMETER))]))\n\n   (define timer\n   ➋ (new timer%\n       ➌ [notify-callback\n           (λ ()\n          ➍ (set! loc-x (add1 loc-x))\n          ➎ (send canvas refresh-now))]))\n\n   (send main-frame show #t)\n\n➏ (send timer start 50)\n```", "```\n> (send timer stop)\n> (send timer start 1000 #t)\n```", "```\n(define timer\n  (let ([delta 2])\n    (new timer%\n         [notify-callback\n          (λ ()\n            (cond [(<= loc-x RADIUS) (set! delta 2)]\n                  [(>= loc-x (- (send canvas get-width) RADIUS)) (set! delta -2)])\n            (set! loc-x (+ loc-x delta))\n            (send canvas refresh-now))])))\n```", "```\n#lang at-exp racket/gui \n(require infix plot)\n```", "```\n(define r 30)\n(define angle 0)\n\n(define (cycloid t) @${vector[r*(t - sin[t]),  r*(1-cos[t])]})\n(define (circle t) @${vector[r*angle + r*sin[t], r + r*cos[t]]})\n```", "```\n(define (line t)\n  (let ([x @${r*(t - sin[t])}]\n        [y @${r*(1 - cos[t])}]\n        [x0 (* r angle)]\n        [y0 r])\n    (lines (list (vector x0 y0) (vector x y))\n           #:width 2\n           #:color \"blue\")))\n\n(define (end-points t)\n  (let ([x @${r*(t - sin[t])}]\n        [y @${r*(1 - cos[t])}]\n        [x0 (* r angle)]\n        [y0 r])\n    (points (list (vector x0 y0) (vector x y))\n            #:size 10\n            #:sym 'fullcircle1\n            #:color \"red\"\n            #:fill-color \"red\")))\n```", "```\n(plot-decorations? #f)\n\n(define (cycloid-plot dc)\n  (plot/dc (list\n            (axes)\n            (parametric circle 0 (* 2 pi) #:color \"green\")\n         ➊ (parametric cycloid 0 angle #:color \"red\")\n         ➋ (line angle)\n         ➌ (end-points angle))\n        ➍ dc 10 25 300 150\n           #:x-min 0\n           #:x-max (* r 2 pi)\n           #:y-min 0\n           #:y-max (* r pi)))\n```", "```\n(define main-frame\n  (new frame%\n       [label \"The Plot Thickens\"]\n       [width 350]\n       [height 250]))\n\n(define canvas\n  (new canvas% [parent main-frame]\n       [paint-callback\n        (λ (canvas dc)\n          (send dc set-smoothing 'smoothed)\n       ➊ (cycloid-plot dc)\n          (send dc set-text-foreground \"blue\")\n          (send dc draw-text \"Animated Cycloid\" 10 180))]))\n\n(define timer\n  (new timer%\n       [notify-callback\n        (λ ()\n        ➋ (set! angle (+ 0.1 angle))\n        ➌ (when (> angle (* 2 pi)) (set! angle 0))\n           (send canvas refresh-now))]))\n\n(send main-frame show #t)\n\n(send timer start 10)\n```", "```\n#lang racket/gui\n(require math/matrix)\n\n(define selected-row -1)\n(define selected-col -1)\n(define show-card #t)\n```", "```\n(define card-names\n  #(\"01H\" \"02H\" \"03H\" \"04H\" \"05H\" \"06H\" \"07H\" \"08H\" \"09H\" \"10H\" \"11H\" \"12H\" \"13H\"\n    \"01C\" \"02C\" \"03C\" \"04C\" \"05C\" \"06C\" \"07C\" \"08C\" \"09C\" \"10C\" \"11C\" \"12C\" \"13C\"\n    \"01D\" \"02D\" \"03D\" \"04D\" \"05D\" \"06D\" \"07D\" \"08D\" \"09D\" \"10D\" \"11D\" \"12D\" \"13D\"\n    \"01S\" \"02S\" \"03S\" \"04S\" \"05S\" \"06S\" \"07S\" \"08S\" \"09S\" \"10S\" \"11S\" \"12S\" \"13S\"))\n\n(define card-deck \n  (for/vector ([card-name (in-vector card-names)]) \n    (read-bitmap (build-path \"Card PNGs\" (string-append card-name \".png\")))))\n\n(define card-width (send (vector-ref card-deck 0) get-width))\n(define card-height (send (vector-ref card-deck 0) get-height))\n```", "```\n(define (shuffle-deck)\n  (for ([i (in-range 52)])\n    (let ([j (random 52)]\n          [t (vector-ref card-deck i)])\n      (vector-set! card-deck i (vector-ref card-deck j))\n      (vector-set! card-deck j t))))\n```", "```\n(define display-matrix\n  (build-matrix SIZE SIZE (λ (r c) (+ (* r SIZE) c))))\n\n(define (get-card r c)\n  (vector-ref card-deck (matrix-ref display-matrix r c)))\n```", "```\n(define main-frame\n  (new frame%\n       [label \"Pick a Card\"]\n       [width 550]\n       [height 650]))\n\n(define main-panel (new horizontal-panel%\n                        [parent main-frame]))\n\n(define control-panel (new vertical-panel%\n                           [parent main-panel]\n                           [min-width 100]\n                           [stretchable-width 100]))\n\n(define MARGIN 10)     ; in pixels\n(define SIZE 5)        ; card rows and columns\n(define MSG-HEIGHT 20) ; height of msg label\n\n(define canvas\n  (new canvas%\n       [parent main-panel]\n       [min-width 400]\n       [paint-callback\n        (λ (canvas dc)\n          (send dc set-smoothing 'smoothed)\n          (for* ([r (in-range SIZE)] ; draw the cards\n                 [c (in-range SIZE)])\n            (send dc draw-bitmap (get-card r c)\n                  (+ MARGIN (* c (+ MARGIN card-width)))\n                  (+ MSG-HEIGHT MARGIN (* r (+ MARGIN card-height)))))\n       ➊ (when show-card ; draw red border on selected card\n            (let* ([off-x (/ MARGIN 2)]\n                   [off-y (+ off-x MSG-HEIGHT)])\n              (send dc set-pen \"red\" 3 'solid)\n              (send dc set-brush (new brush% [style 'transparent]))\n              (send dc draw-rectangle\n                    (+ off-x (* selected-col (+ MARGIN card-width)))\n                    (+ off-y (* selected-row (+ MARGIN card-height)))\n                    (+ card-width MARGIN) (+ card-height MARGIN))\n              (send dc set-pen \"black\" 2 'solid)))\n         )]))\n```", "```\n(define msg\n  (new message%\n       [parent control-panel]\n       [min-height MSG-HEIGHT]\n       [label \"Select again.\"]))\n```", "```\n(define arrow ; bitmap\n  (let* ([image (make-bitmap 50 40)]\n         [dc (new bitmap-dc% [bitmap image])]\n         [path (new dc-path%)])\n    (send dc set-brush (new brush% [color \"blue\"]))\n    (send path move-to  0 10)\n    (send path line-to 30 10)\n    (send path line-to 30  0)\n    (send path line-to 50 20)\n    (send path line-to 30 40)\n    (send path line-to 30 30)\n    (send path line-to  0 30)\n    (send path line-to  0 10)\n    (send dc draw-path path)\n    image))\n```", "```\n(define arrow ; bitmap\n  (let* ([image (make-bitmap 50 40)]\n         [dc (new bitmap-dc% [bitmap image])]\n         [path (new dc-path%)])\n    (send dc set-brush (new brush% [color \"blue\"]))\n    (send path move-to  0 10)\n    (send path\n          lines '(\n                 (30 . 10)\n                 (30 . 0)\n                 (50 . 20)\n                 (30 . 40)\n                 (30 . 30)\n                 ( 0 . 30)\n                 ( 0 . 10)))\n    (send dc draw-path path)\n    image))\n```", "```\n(define (gen-row-button r)\n  (new button%\n       [parent control-panel]\n       [label arrow]\n       [min-width 80]\n       [min-height 50]\n       [vert-margin (/ (+ MARGIN (- card-height 50)) 2)]\n       [callback (λ (button event)\n                   (select-row r))]))\n\n(for ([i (in-range SIZE)])\n  (gen-row-button i))\n```", "```\n(define (swap-cols c1 c2)\n  (let ([swap-matrix (make-swap c1 c2)])\n    (matrix* display-matrix swap-matrix)))\n```", "```\n(define (make-swap r1 r2)\n  (define (swap-func r c)\n    (cond [(= r r1) (if (= c r2) 1 0)]\n          [(= r r2) (if (= c r1) 1 0)]\n          [(= r c) 1]\n          [else 0]))\n  (build-matrix SIZE SIZE swap-func))\n```", "```\n (define (first-row-selection r)\n   (set! selected-col r)\n   (send msg set-label \"Select again.\")\n➊ (for ([i (in-range SIZE)])\n    (let ([j (random SIZE)]\n          [t (vector-ref card-deck i)])\n   ➋ (set! display-matrix (swap-cols i j))))\n➌ (set! display-matrix (matrix-transpose display-matrix))\n   (send canvas refresh-now))\n```", "```\n(define (show-selection r)\n  (send msg set-label \"Tada!\")\n  {set! selected-row r}\n  (set! show-card #t)\n  (send canvas refresh-now))\n```", "```\n(define (restart)\n  (shuffle-deck)\n  (send msg set-label \"Select a row.\")\n  (set! show-card #f)\n  (set! selected-row -1)\n  (set! selected-col -1)\n  (send canvas refresh-now))\n\n(restart)\n\n(send main-frame show #t)\n```", "```\n(define (select-row r)\n  (cond [(< selected-col 0) (first-row-selection r)]\n        [(< selected-row 0) (show-selection r)]\n        [else (send msg set-label \"Restart.\")]))\n```", "```\n(define (hanoi n f t)\n  (if (= 1 n) (list (list f t))\n      (let* ([u (- 3 (+ f t))] ; determine unused peg\n             [m1 (hanoi (sub1 n) f u)] ; move n-1 disks from f to u\n             [m2 (list f t)] ; move single disk from f to t\n             [m3 (hanoi (sub1 n) u t)]); move disks from u to t\n        (append m1 (cons m2 m3)))))\n```", "```\n#lang racket/gui\n\n(define MAX-DISKS 9)\n(define UNIT 15)\n(define PEG-X (+ (* 3 UNIT) (* MAX-DISKS (/ UNIT 2))))\n(define PEG-Y (* 2 UNIT))\n(define START-Y (+ PEG-Y (* UNIT MAX-DISKS)))\n(define PEG-DIST (* UNIT (add1 MAX-DISKS)))\n(define RADIUS (/ UNIT 2))\n(define ANIMATION-INTERVAL 1) ; ms\n(define MOVE-DIST 2)\n```", "```\n(define main-frame\n  (new frame%\n       [label \"Tower of Hanoi\"]\n       [width (+ (* 7 UNIT) (* 3 PEG-DIST))]))\n\n(define main-panel (new vertical-panel%\n                        [parent main-frame]))\n\n(define canvas\n  (new canvas%\n       [parent main-panel]\n       [min-height (+ START-Y UNIT)]\n       [paint-callback (λ (canvas dc) (update-canvas dc))]))\n\n(define control-panel1\n  (new horizontal-panel%\n       [parent main-panel]))\n\n(define control-panel2\n  (new horizontal-panel%\n       [parent main-panel]))\n```", "```\n(define num-disks 8)\n(define delta-x 0) \n(define delta-y 0)\n(define target-x 0) \n(define target-y 0)\n(define source-peg 0)\n(define dest-peg 0)\n(define current-disk 0)\n(define current-x 0)\n(define current-y 0)\n(define peg-disks (make-vector 3 0))\n(define move-list '())\n(define total-moves 0)\n(define move-num 0)\n(define in-motion #f)\n(define mode 'stoppd)\n```", "```\n(define btn-reset\n  (new button%\n       [parent control-panel1]\n       [label \"Reset\"]\n       [callback (λ (button event)\n                   (when (not in-motion) (reset)))]))\n```", "```\n(define text-disks\n  (new text-field%\n       [parent control-panel1]\n       [label \"Disks: \"]\n       [stretchable-width #f]\n       [init-value \"8\"]))\n```", "```\n(define slider-disks\n  (new slider%\n       [parent control-panel1]\n       [label #f]\n       [stretchable-width #f]\n       [min-width 100]\n       [style (list' horizontal 'plain)]\n       [min-value 1]\n       [max-value MAX-DISKS]\n       [init-value 8]\n       [callback (λ (slider event)\n                   (send text-disks\n                         set-value\n                         (number->string (send slider-disks get-value))))]))\n```", "```\n(define gauge\n  (new gauge%\n       [parent control-panel1]\n       [label \"Progress: \"]\n       [stretchable-width #f]\n       [min-width 100]\n       (range 100)))\n```", "```\n(new button%\n     [parent control-panel2]\n     [label \"Step\"]\n     [callback (λ (button event)\n                 (when (not in-motion)\n                   (when (equal? move-list '()) (reset))\n                   (set! in-motion #t)\n                   (set! mode 'step)\n                   (send msg set-label \"Running...\")\n                   (init-next-step)\n                   (send timer start ANIMATION-INTERVAL)))])\n```", "```\n(new button%\n     [parent control-panel2]\n     [label \"Solve\"]\n     [callback (λ (button event)\n                 (when (not in-motion)\n                   (let ([old num-disks]\n                         [new (validate-disks)])\n                  ➊ (when (or (equal? move-list '()) (not (= old new)))\n                       (set! num-disks new)\n                       (reset))\n                     (set! in-motion #t)\n                     (set! mode 'solve)\n                     (send msg set-label \"Running...\")\n                     (init-next-step)\n                     (send timer start ANIMATION-INTERVAL))))])\n```", "```\n(new button%\n     [parent control-panel2]\n     [label \"Pause\"]\n     [callback (λ (button event)\n                 (set! mode 'step))])\n```", "```\n(define msg\n  (new message%\n       [parent control-panel2]\n       [auto-resize #t]\n       [label \"Ready\"]))\n```", "```\n(define (disk-x n peg)\n  (let ([w (* (add1 n) UNIT)])\n    (- (+ PEG-X (* peg PEG-DIST)) (/ w 2) (/ UNIT -2))))\n\n(define (disk-y pos)\n  (- START-Y (* pos UNIT)))\n```", "```\n(define (make-gradient start stop c1 c2)\n  (new linear-gradient%\n       [x0 start] [y0 0]\n       [x1 stop] [y1 0]\n       [stops\n        (list (list 0   (make-object color% c1))\n              (list 0.5 (make-object color% c2))\n              (list 1   (make-object color% c1)))]))\n```", "```\n(define (draw-disk dc n peg pos)\n  (let* ([w (* (add1 n) UNIT)]\n         [x (disk-x n peg)]\n         [y (disk-y pos)])\n    (send dc set-brush\n          (new brush%\n               [gradient (make-gradient x (+ x w) \"Green\" \"GreenYellow\")]))\n    (send dc draw-rounded-rectangle x y w UNIT RADIUS)))\n```", "```\n(define (draw-peg-disks dc peg disks)\n  (define (loop disks pos)\n    (when (> pos 0)\n      (let ([n (first disks)]\n            [r (rest disks)])\n        (draw-disk dc n peg pos)\n        (loop r (sub1 pos)))))\n  (loop disks (length disks)))\n\n(define (draw-disks dc)\n  (for ([peg (in-range 3)])\n    (draw-peg-disks dc peg (vector-ref peg-disks peg))))\n```", "```\n(define (draw-base dc)\n  (for ([i (in-range 3)])\n    (let ([x (+ PEG-X (* i PEG-DIST))])\n      (send dc set-brush\n            (new brush%\n                 [gradient (make-gradient x (+ x UNIT) \"Chocolate\" \"DarkOrange\")]))\n      (send dc draw-rounded-rectangle x PEG-Y UNIT (+ UNIT (- START-Y PEG-Y)) RADIUS)))\n  (send dc set-brush (new brush% [color \"Chocolate\"]))\n  (send dc draw-rectangle UNIT START-Y (+ (* 4 UNIT) (* 3 PEG-DIST)) UNIT))\n```", "```\n(define (update-canvas dc)\n  (draw-base dc)\n  (draw-disks dc)\n  (when (current-disk . > . 0)\n    (let* ([w (* (add1 current-disk) UNIT)]\n           [x current-x]\n           [y current-y])\n      (send dc set-brush\n            (new brush%\n                 [gradient (make-gradient x (+ x w) \"Green\" \"GreenYellow\")]))\n      (send dc draw-rounded-rectangle x y w UNIT RADIUS))))\n```", "```\n  (define (reset)\n ➊ (set! num-disks (validate-disks))\n    (set! delta-x 0)\n    (set! delta-y 0)\n    (set! current-disk 0)\n ➋ (set! move-list (hanoi num-disks 0 2))\n    (set! total-moves (length move-list))\n    (set! move-num 0)\n ➌ (vector-set! peg-disks 0 (range 1 (+ 1 num-disks)))\n    (vector-set! peg-disks 1 '())\n ➍ (vector-set! peg-disks 2 '())\n    (send canvas refresh-now))\n\n➎ (define (init-next-step)\n    (let ([move (first move-list)])\n      (set! source-peg (first move))\n      (set! dest-peg (second move))\n      (set! delta-x 0)\n      (set! delta-y (- MOVE-DIST))\n      (set! target-y (/ UNIT 2))\n      (set! move-list (rest move-list))\n      (let* ([source-disks (vector-ref peg-disks source-peg)]\n             [pos (length source-disks)])\n        (set! current-disk (first source-disks))\n        (set! current-x (disk-x current-disk source-peg))\n        (set! current-y (disk-y pos))\n        (vector-set! peg-disks source-peg\n                     (rest source-disks)))))\n\n ➏ (define (validate-disks)\n     (let* ([disks-str (send text-disks get-value)]\n            [n (string->number disks-str)])\n       (if (and (integer? n) (< 0 n (add1 MAX-DISKS)))\n           (begin\n             (send slider-disks set-value n)\n             (send msg set-label \"  Ready\")\n             n)\n           (begin\n             (send text-disks set-value (number->string num-disks))\n             (send msg set-label \"  Disks out of range.\")\n             num-disks))))\n```", "```\n(define (update-progress)\n  (send gauge set-value (inexact->exact (floor (* 100 (/ move-num total-moves))))))\n\n(define (move-disk)\n  (cond [((abs delta-y) . > . 0)\n         (begin\n        ➊ (set! current-y (+ current-y delta-y))\n           (when ((abs (- target-y current-y)) . < . MOVE-DIST)\n             (set! current-y target-y)\n             (if (delta-y . < . 0) \n                 (begin ; was moving up\n                   (set! target-x (disk-x current-disk dest-peg))\n                   (set! delta-x (sgn (- dest-peg source-peg)))\n                   (set! delta-y 0))\n                 (begin ; was moving down\n                   (set! move-num (add1 move-num))\n                ➋ (vector-set! peg-disks dest-peg\n                        (cons current-disk (vector-ref peg-disks dest-peg)))\n                   (if (equal? mode 'step)\n                       (begin\n                         (send timer stop)\n                         (set! current-disk 0)\n                         (set! in-motion #f)\n                         (set! mode 'stopped)\n                         (send msg set-label \"Ready\")\n                         (set! delta-y 0))\n                       (if (> (length move-list) 0)\n                           (init-next-step)\n                           (begin\n                             (send timer stop)\n                             (send msg set-label \"Done!\")\n                             (set mode 'stopped)\n                             (set! in-motion #f)\n                             (set! delta-y 0))))))))]\n\n     ➌ [((abs delta-x) . > . 0)\n         (begin\n        ➍ (set! current-x (+ current-x delta-x))\n           (when ((abs (- target-x current-x)) . < . MOVE-DIST)\n             (set! current-x target-x)\n             (set! target-y (* PEG-DIST (- dest-peg source-peg)))\n             (set! delta-y MOVE-DIST)\n             (let ([tdisks (length (vector-ref peg-disks dest-peg))])\n               (set! target-y (disk-y (add1 tdisks))))\n             (set! delta-x 0)))]\n\n        [else (send timer stop)])\n\n➎ (update-progress)\n➏ (send canvas refresh-now))\n```", "```\n(define timer\n    (new timer% [notify-callback move-disk]))\n\n(reset)\n\n(send main-frame show #t)\n```"]