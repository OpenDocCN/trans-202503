- en: E
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: E
- en: Answers to Questions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的答案
- en: E.1 Answers to Questions in Chapter 1
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.1 第1章问题的答案
- en: '*cmd.exe*'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*cmd.exe*'
- en: '*ml64.exe*'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*ml64.exe*'
- en: Address, data, and control
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地址、数据和控制
- en: AL, AH, AX, and EAX
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AL、AH、AX 和 EAX
- en: BL, BH, BX, and EBX
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: BL、BH、BX 和 EBX
- en: SIL, SI, and ESI
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SIL、SI 和 ESI
- en: R8B, R8W, and R8D
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R8B、R8W 和 R8D
- en: FLAGS, EFLAGS, or RFLAGS
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FLAGS、EFLAGS 或 RFLAGS
- en: (a) 2, (b) 4, (c) 16, (d) 32, (e) 8
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 2, (b) 4, (c) 16, (d) 32, (e) 8
- en: Any 8-bit register and any constant that can be represented with 8 bits
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何 8 位寄存器和任何可以用 8 位表示的常量
- en: '32'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '32'
- en: '| **Destination** | **Constant size** |'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_TB
  zh: '| **目的地** | **常量大小** |'
- en: '| RAX | 32 |'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| RAX | 32 |'
- en: '| EAX | 32 |'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| EAX | 32 |'
- en: '| AX | 16 |'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| AX | 16 |'
- en: '| AL | 8 |'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| AL | 8 |'
- en: '| AH | 8 |'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| AH | 8 |'
- en: '| mem[32] | 32 |'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| mem[32] | 32 |'
- en: '| mem[64] | 32 |'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| mem[64] | 32 |'
- en: '64'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '64'
- en: Any memory operand will work, regardless of its size.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何内存操作数都可以工作，无论其大小如何。
- en: '`call`'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`call`'
- en: '`ret`'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ret`'
- en: Application binary interface
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序二进制接口
- en: (a) AL, (b) AX, (c) EAX, (d) RAX, (e) XMM0, (f) RAX
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) AL, (b) AX, (c) EAX, (d) RAX, (e) XMM0, (f) RAX
- en: RCX for integer operands, XMM0 for floating-point/vector operands
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RCX 用于整数操作数，XMM0 用于浮点/向量操作数
- en: RDX for integer operands, XMM1 for floating-point/vector operands
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RDX 用于整数操作数，XMM1 用于浮点/向量操作数
- en: R8 for integer operands, XMM2 for floating-point/vector operands
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R8 用于整数操作数，XMM2 用于浮点/向量操作数
- en: R9 for integer operands, XMM3 for floating-point/vector operands
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R9 用于整数操作数，XMM3 用于浮点/向量操作数
- en: '`dword` or `sdword`'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dword` 或 `sdword`'
- en: '`qword`'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`qword`'
- en: E.2 Answers to Questions in Chapter 2
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.2 第2章问题的答案
- en: 9 × 10³ + 3 × 10² + 8 × 10¹ + 4 × 10⁰ + 5 × 10^(-1) + 7 × 10^(-2) + 6 × 10^(-3)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 9 × 10³ + 3 × 10² + 8 × 10¹ + 4 × 10⁰ + 5 × 10^(-1) + 7 × 10^(-2) + 6 × 10^(-3)
- en: (a) 10, (b) 12, (c) 7, (d) 9, (e) 3, (f) 15
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 10, (b) 12, (c) 7, (d) 9, (e) 3, (f) 15
- en: (a) A, (b) E, (c) B, (d) D, (e) 2, (f) C, (g) CF, (h) 98D1
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) A, (b) E, (c) B, (d) D, (e) 2, (f) C, (g) CF, (h) 98D1
- en: (a) 0001_0010_1010_1111, (b) 1001_1011_1110_0111, (c) 0100_1010, (d) 0001_0011_0111_1111,
    (e) 1111_0000_0000_1101, (f) 1011_1110_1010_1101, (g) 0100_1001_0011_1000
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 0001_0010_1010_1111, (b) 1001_1011_1110_0111, (c) 0100_1010, (d) 0001_0011_0111_1111,
    (e) 1111_0000_0000_1101, (f) 1011_1110_1010_1101, (g) 0100_1001_0011_1000
- en: (a) 10, (b) 11, (c) 15, (d) 13, (e) 14, (f) 12
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 10, (b) 11, (c) 15, (d) 13, (e) 14, (f) 12
- en: (a) 16, (b) 64, (c) 128, (d) 32, (e) 4, (f) 8, (g) 4
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 16, (b) 64, (c) 128, (d) 32, (e) 4, (f) 8, (g) 4
- en: (a) 2, (b) 4, (c) 8, (d) 16
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 2, (b) 4, (c) 8, (d) 16
- en: (a) 16, (b) 256, (c) 65,636, (d) 2
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 16, (b) 256, (c) 65,636, (d) 2
- en: '4'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4'
- en: 0 through 7
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 0 到 7
- en: Bit 0
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 位 0
- en: Bit 31
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 位 31
- en: (a) 0, (b) 0, (c) 0, (d) 1
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 0, (b) 0, (c) 0, (d) 1
- en: (a) 0, (b) 1, (c) 1, (d) 1
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 0, (b) 1, (c) 1, (d) 1
- en: (a) 0, (b) 1, (c) 1, (d) 0
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 0, (b) 1, (c) 1, (d) 0
- en: '1'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1'
- en: AND
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AND
- en: OR
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OR
- en: NOT
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NOT
- en: XOR
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XOR
- en: '`not`'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`not`'
- en: '1111_1011'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1111_1011'
- en: '0000_0010'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '0000_0010'
- en: (a) and (c) and (e)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 和 (c) 和 (e)
- en: '`neg`'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`neg`'
- en: (a) and (c) and (d)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 和 (c) 和 (d)
- en: '`jmp`'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`jmp`'
- en: '*label:*'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*label:*'
- en: Carry, overflow, zero, and sign
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进位、溢出、零、符号
- en: JZ
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JZ
- en: JC
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JC
- en: JA, JAE, JBE, JB, JE, JNE (and the synonyms JNA, JNAE, JNB, JNBE, plus other
    synonyms)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JA, JAE, JBE, JB, JE, JNE（以及同义词 JNA、JNAE、JNB、JNBE，另有其他同义词）
- en: JG, JGE, JL, JLE, JE, JNE (and the synonyms JNG, JNGE, JNL, and JNLE)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JG、JGE、JL、JLE、JE、JNE（以及同义词 JNG、JNGE、JNL 和 JNLE）
- en: ZF = 1 if the result of the shift is 0.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果移位的结果为 0，则 ZF = 1。
- en: The HO bit shifted out of the operand goes into the carry flag.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从操作数中移出的 HO 位进入进位标志。
- en: If the next-to-HO bit is different from the HO bit *before* the shift, the OF
    will be set; otherwise, it is cleared, though only for 1-bit shifts.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果下一个 HO 位与移位前的 HO 位不同，OF 会被设置；否则，它会被清除，但仅适用于 1 位移位。
- en: The SF is set equal to the HO bit of the result.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SF 被设置为结果的 HO 位。
- en: ZF = 1 if the result of the shift is 0.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果移位的结果为 0，则 ZF = 1。
- en: The LO bit shifted out of the operand goes into the carry flag.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从操作数中移出的 LO 位进入进位标志。
- en: If the next-to-HO bit is different from the HO bit *before* the shift, the OF
    will be set; otherwise, it is cleared, but only for 1-bit shifts.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果下一个 HO 位与移位前的 HO 位不同，OF 会被设置；否则，它会被清除，但仅适用于 1 位移位。
- en: The SF is always clear after the SHR instruction because a 0 is always shifted
    into the HO bit of the result.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 SHR 指令之后，SF 始终被清除，因为一个 0 总是被移入结果的 HO 位。
- en: ZF = 1 if the result of the shift is 0.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果移位的结果为 0，则 ZF = 1。
- en: The LO bit shifted out of the operand goes into the carry flag.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从操作数中移出的 LO 位进入进位标志。
- en: The OF is always clear after SAR as it is impossible for the sign to change.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SAR 指令之后，OF 总是清除，因为符号不可能发生变化。
- en: The SF is set equal to the HO bit of the result, though technically it will
    never change.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SF 被设置为结果的 HO 位，尽管从技术上讲它永远不会改变。
- en: The HO bit shifted out of the operand goes into the carry flag.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从操作数中移出的 HO 位进入进位标志。
- en: It doesn’t affect the ZF.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它不会影响 ZF。
- en: The LO bit shifted out of the operand goes into the carry flag.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从操作数中移出的 LO 位进入进位标志。
- en: It doesn’t affect the sign flag.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它不会影响符号标志。
- en: Multiplication by 2
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 乘以 2
- en: Division by 2
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除以 2
- en: Multiplication and division
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 乘法和除法
- en: Subtract them and see if their difference is less than a small error value.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们相减并检查其差值是否小于一个小的误差值。
- en: A value that has a 1 bit in the HO mantissa position
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HO尾数位置上有1位的值
- en: '7'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '7'
- en: 30h through 39h
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 30h到39h
- en: Apostrophes and quotes
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撇号和引号
- en: UTF-8, UTF-16, and UTF-32
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UTF-8、UTF-16和UTF-32
- en: A scalar integer value that represents a single Unicode character
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个标量整数值，表示一个Unicode字符
- en: A block of 65,536 different Unicode characters
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一块65,536个不同的Unicode字符
- en: E.3 Answers to Questions in Chapter 3
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.3 第3章问题的答案
- en: RIP
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RIP
- en: Operation code, the numeric encoding for a machine instruction
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作码，机器指令的数字编码
- en: Static and scalar variables
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 静态和标量变量
- en: ±2GB
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ±2GB
- en: The address of the memory location to access
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问的内存位置的地址
- en: RAX
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RAX
- en: '`lea`'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lea`'
- en: The final address obtained after all addressing mode calculations are completed
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成所有寻址模式计算后获得的最终地址
- en: 1, 2, 4, or 8
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1、2、4或8
- en: 2GB total memory
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2GB总内存
- en: You can use the VAR[REG] addressing mode(s) to directly access elements of an
    array using a 64-bit register as an index into the array without first loading
    the address of the array into a separate base register.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用VAR[REG]寻址模式直接访问数组的元素，使用64位寄存器作为数组的索引，而无需首先将数组的地址加载到单独的基寄存器中。
- en: The `.data` section can hold initialized data values; the `.data?` section can
    contain only uninitialized variables.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.data`部分可以保存已初始化的数据值；`.data?`部分只能包含未初始化的变量。'
- en: '`.code` and `.const`'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.code` 和 `.const`'
- en: '`.data` and `.data?`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.data`和`.data?`'
- en: An offset into a particular section (for example, `.data`)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指向特定部分的偏移量（例如，`.data`）
- en: Use `some_ID` `label` `some_type` to inform MASM that the following data is
    of type `some_type` when, in fact, it could be another type.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`some_ID` `label` `some_type`来告知MASM以下数据的类型是`some_type`，尽管实际上它可能是另一种类型。
- en: MASM will combine them into a single section.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MASM将它们合并为一个单独的部分。
- en: Use the `align 8` statement.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`align 8`语句。
- en: Memory management unit
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存管理单元
- en: If `b` is at an address that is at the last byte in an MMU page and the next
    page is not readable, loading a word from the memory location starting with `b`
    will produce a general protection fault.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`b`位于MMU页的最后一个字节处且下一个页面不可读，从以`b`开头的内存位置加载一个字会产生一般保护错误。
- en: A constant expression plus the base address of a variable in memory
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个常量表达式加上变量在内存中的基地址
- en: To coerce the following operand type to a different type
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下操作数类型强制转换为另一种类型
- en: 'Little-endian values appear in memory with their LO byte at the lowest address
    and the HO byte at the highest address. Big-endian values are the opposite: their
    HO byte appears at the lowest address, and their LO byte appears at the highest
    address in memory.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小端值在内存中以其LO字节位于最低地址，HO字节位于最高地址的形式出现。大端值则相反：它们的HO字节出现在最低地址，LO字节出现在内存中的最高地址。
- en: '`xchg al, ah` or `xchg ah, al`'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`xchg al, ah` 或 `xchg ah, al`'
- en: '`bswap eax`'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bswap eax`'
- en: '`bswap rax`'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bswap rax`'
- en: (a) Subtract 8 from RSP, (b) Store the value in RAX at the location pointed
    at by RSP.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 从RSP中减去8，(b) 将RAX中的值存储到RSP指向的位置。
- en: (a) Load RAX from the 8 bytes pointed at by RSP, (b) Add 8 to RSP.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 从RSP指向的8个字节中加载RAX，(b) 将8加到RSP。
- en: Reverse
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反转
- en: Last in, first out
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后进先出
- en: Move the data to and from the stack using the `[RSP ±` `const``]` addressing
    mode.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`[RSP ± const]`寻址模式将数据从栈中移动进出。
- en: The Windows ABI requires the stack to be aligned on a 16-byte boundary; pushing
    RAX might make the stack aligned on an 8-byte (but not 16-byte) boundary.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows ABI要求栈在16字节边界上对齐；推送RAX可能会使栈在8字节（而不是16字节）边界上对齐。
- en: E.4 Answers to Questions in Chapter 4
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.4 第4章问题的答案
- en: '`imul` `reg``,` `constant`'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`imul` `reg``,` `constant`'
- en: '`imul` `destreg``,` `srcreg``,` `constant`'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`imul` `destreg``,` `srcreg``,` `constant`'
- en: '`imul` `destreg``,` `srcreg`'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`imul` `destreg``,` `srcreg`'
- en: A symbolic (named) constant for which MASM will substitute the literal constant
    for the name everywhere it appears in the source file
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个符号（命名）常量，MASM将在源文件中每次出现该名称时替换为文字常量。
- en: '`=`, `equ`, `textequ`'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`=`, `equ`, `textequ`'
- en: Text equates substitute a textual string that can be any text; numeric equates
    must be assigned a numeric constant value that can be represented with a 64-bit
    integer.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本等式替换为可以是任何文本的字符串；数值等式必须分配一个可以用64位整数表示的数值常量。
- en: Use the text delimiters `<` and `>` around the string literal; for example,
    `<"a long string">`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本分隔符`<`和`>`包围字符串字面量；例如，`<"a long string">`。
- en: An arithmetic expression whose value MASM can calculate during assembly
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MASM在汇编过程中可以计算的算术表达式
- en: '`lengthof`'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lengthof`。'
- en: The offset into the current section
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前段的偏移量。
- en: '`this` and `$`'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`this` 和 `$`。'
- en: Use the constant expression `$-startingLocation`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用常量表达式 `$-startingLocation`。
- en: 'Use a series of (numeric) equates, with each successive equate set to the value
    of the previous equate plus one; for example:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一系列（数字）等式，每个连续的等式的值设置为前一个等式的值加一；例如：
- en: '[PRE0]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using the `typedef` directive
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `typedef` 指令。
- en: A pointer is a variable in memory that holds the address of another object in
    memory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指针是内存中的一个变量，它保存另一个内存对象的地址。
- en: Load the pointer variable into a 64-bit register and use the register-indirect
    addressing mode to reference that address.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将指针变量加载到一个64位寄存器中，并使用寄存器间接寻址模式来引用该地址。
- en: Using a `qword` data declaration, or another data type that is 64 bits in size
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `qword` 数据声明，或其他64位大小的数据类型。
- en: The `offset` operator
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`offset` 操作符。'
- en: (a) Uninitialized pointers, (b) Using pointers to hold an illegal value, (c)
    Using a pointer after its storage has been freed (dangling pointers), (d) Failing
    to free storage after it is no longer being used (memory leak), (e) Accessing
    indirect data by using the wrong data type
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 未初始化的指针，(b) 使用指针保存非法值，(c) 在存储已被释放后使用指针（悬空指针），(d) 在不再使用存储后未释放存储（内存泄漏），(e)
    使用错误的数据类型访问间接数据。
- en: Using a pointer after its storage has been freed
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在存储已被释放后使用指针。
- en: Failing to free storage after you are done using it
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 未能在使用完存储后释放它。
- en: An aggregate type composed of smaller data objects
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由较小的数据对象组成的聚合类型。
- en: A sequence of characters ending with a 0 byte (or other 0 value)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个以0字节（或其他0值）结尾的字符序列。
- en: A string containing a length value as its first element
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个包含长度值作为第一个元素的字符串。
- en: A descriptor is a data type containing a pointer (to the character data), string
    length, and possibly other information that describes the string data.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述符是一种数据类型，包含一个指向字符数据的指针、字符串长度以及可能描述字符串数据的其他信息。
- en: A homogenous collection of data elements (all with the same type)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种同质的数据元素集合（所有元素类型相同）。
- en: The memory address of the first element of the array
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组第一个元素的内存地址。
- en: '`array byte 10 dup (?)` (as an example)'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`array byte 10 dup (?)`（作为示例）。'
- en: Simply fill in the initial values as the operand field of a byte, word, dword,
    or other data declaration directive. Also, you could use a sequence of one or
    more constant values as the `dup` operator operand; for example, `5 dup (2, 3)`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需将初始值填写为字节、字、双字或其他数据声明指令的操作数字段。此外，你还可以使用一个或多个常量值作为`dup`操作符的操作数；例如，`5 dup (2,
    3)`。
- en: (a) `base_address` `+` `index` `* 4` (4 is the element size), (b) `W[i,j] =`
    `base_address` `+ (i * 8 + j) * 2` (2 is the element size), (c) `R[i,j,k] =` `base_address`
    `+(((i * 4) + j) * 6 + k) * 8` (8 is the element size)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) `base_address` `+` `index` `* 4`（4是元素大小），(b) `W[i,j] =` `base_address` `+
    (i * 8 + j) * 2`（2是元素大小），(c) `R[i,j,k] =` `base_address` `+(((i * 4) + j) * 6
    + k) * 8`（8是元素大小）。
- en: An organization for multidimensional arrays where you store the elements of
    each row in the array in contiguous memory locations and then store each row,
    one after the other, in memory
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种多维数组的组织方式，在这种方式中，你将每一行的元素存储在连续的内存位置中，然后将每一行按顺序存储在内存中。
- en: An organization for multidimensional arrays where you store the elements of
    each column in the array in contiguous memory locations and then store each column,
    one after the other, in memory
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种多维数组的组织方式，在这种方式中，你将每一列的元素存储在连续的内存位置中，然后将每一列按顺序存储在内存中。
- en: '`W word 4 dup (8 dup (?))`'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`W word 4 dup (8 dup (?))`'
- en: A heterogeneous collection of data elements (each field could have different
    types)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种异质的数据元素集合（每个字段可能有不同的类型）。
- en: '`struct` and `ends`'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`struct` 和 `ends`。'
- en: The dot operator
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点操作符。
- en: A heterogeneous collection of data elements (each field could have different
    types); the offset of each field in the union begins at 0.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种异质的数据元素集合（每个字段可能有不同的类型）；联合体中每个字段的偏移量从0开始。
- en: '`union` and `ends`'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`union` 和 `ends`。'
- en: The fields of a record and struct appear at successive memory locations within
    the struct (each field has its own block of bytes); the fields of a union overlap
    one another, with each field beginning at offset zero in the union.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录和结构体的字段在结构体内按顺序出现在连续的内存位置（每个字段都有自己的字节块）；而联合体的字段彼此重叠，每个字段都从联合体中的偏移量零开始。
- en: An unnamed union whose fields are treated as fields of the enclosing struct
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个未命名的联合体，它的字段被视为外部结构体的字段。
- en: E.5 Answers to Questions in Chapter 5
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.5 第五章问题的答案。
- en: It pushes the return address onto the stack (the address of the next instruction
    after the call) and then jumps to the address specified by the operand.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将返回地址推送到栈上（调用后下一条指令的地址），然后跳转到操作数指定的地址。
- en: It pops a return address off the stack and moves the address into the RIP register,
    transferring control to the instruction just beyond the call to the current procedure.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它从栈中弹出一个返回地址，并将地址移动到 RIP 寄存器，将控制转移到调用当前过程后面的指令。
- en: After popping the return address, the CPU adds this value to RSP, removing that
    number of bytes of parameters from the stack.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出返回地址后，CPU 将此值加到 RSP 中，从栈中移除相应字节的参数。
- en: The address of the instruction just beyond the call to the procedure
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 紧接着调用过程指令的地址
- en: Namespace pollution occurs when so many symbols, identifiers, or names are defined
    in a source file that it becomes difficult to select new, unique names to use
    in that source file.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名空间污染发生在源文件中定义了太多符号、标识符或名称，以至于在该源文件中很难选择新的、唯一的名称。
- en: Put two colons after the name; for example, `id::`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称后加两个冒号；例如，`id::`。
- en: Use the `option noscoped` directive just before the procedure.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过程之前使用`option noscoped`指令
- en: Use the `push` instruction to save the register values on the stack upon entry
    into the procedure; then use the `pop` instruction to restore the register values
    immediately before returning from the procedure.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进入过程时使用`push`指令将寄存器值保存在栈上；然后使用`pop`指令在从过程返回之前立即恢复寄存器值。
- en: Code is difficult to maintain. (A secondary issue, though minor, is that it
    takes more space.)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码难以维护。（其次的问题，虽然不大，是它占用更多空间。）
- en: Performance—because you’re often preserving registers that don’t need to be
    preserved for the calling code
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能——因为你经常保存一些调用代码不需要保存的寄存器
- en: When the subroutine attempts to return, it uses the garbage you left on the
    stack as the return address, which usually produces undefined results (a program
    crash).
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当子程序尝试返回时，它会使用你在栈上留下的垃圾作为返回地址，这通常会产生未定义的结果（程序崩溃）。
- en: The subroutine uses whatever was on the stack prior to the call as the return
    address, with undefined results.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子程序使用调用前栈上任何存在的内容作为返回地址，结果是未定义的。
- en: A collection of data, including parameters, local variables, the return address,
    and other items, associated with the call (activation) of a procedure
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一组与过程调用（激活）相关的数据，包括参数、局部变量、返回地址和其他项目
- en: RBP
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RBP
- en: 8 bytes (64 bits)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 8 字节（64 位）
- en: '[PRE1]'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`and rsp, -16`'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`and rsp, -16`'
- en: The section of the source file (usually the body of a procedure) where the symbol
    is visible and usable in the program
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源文件中的一部分（通常是过程的主体），在程序中符号可见且可用
- en: From the moment storage is allocated for the variable to the point the system
    deallocates that storage
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从为变量分配存储空间开始，到系统释放该存储空间为止
- en: Variables whose storage is automatically allocated upon entry into a block of
    code (usually a procedure) and automatically deallocated upon exiting that block
    of code
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入代码块（通常是过程）时自动分配存储的变量，并在退出该代码块时自动释放该存储
- en: Upon entry into a procedure (or the block of code associated with that automatic
    variable)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入过程时（或与自动变量关联的代码块）
- en: Using `textequ` directives or the MASM local directive
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`textequ`指令或 MASM 本地指令
- en: '`var1`: –2; `local2`: –8 (MASM aligns variable on dword boundary); `dVar`:
    –9; `qArray`: –32 (base address of array is the lowest memory address); `rlocal`:
    –40 (base address of array is the lowest memory address); `ptrVar`: –48'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var1`: –2；`local2`: –8（MASM 将变量对齐到 dword 边界）；`dVar`: –9；`qArray`: –32（数组的基地址是最低的内存地址）；`rlocal`:
    –40（数组的基地址是最低的内存地址）；`ptrVar`: –48'
- en: '`option prologue:PrologueDef` and `option epilogue:EpilogueDef`. Should also
    supply `option prologue:none` and `option epilogue:none` to turn this off.'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`option prologue:PrologueDef` 和 `option epilogue:EpilogueDef`。还应该提供 `option
    prologue:none` 和 `option epilogue:none` 来关闭此功能。'
- en: Before MASM emits any code for the procedure, after all the local directives
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MASM 生成过程代码之前，在所有本地指令之后
- en: Wherever a `ret` instruction appears
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当出现`ret`指令的地方
- en: The actual parameter’s value
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际参数的值
- en: The memory address of the actual parameter’s value
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际参数值的内存地址
- en: RCX, RDX, R8, and R9 (or smaller subcomponents of these registers)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RCX, RDX, R8 和 R9（或这些寄存器的较小子组件）
- en: XMM0, XMM1, XMM2, or XMM3
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XMM0, XMM1, XMM2 或 XMM3
- en: On the stack, above the shadow locations (32 bytes) reserved for the arguments
    passed in the registers
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在栈上，位于为寄存器传递的参数预留的阴影位置（32 字节）之上
- en: Procedures are free to modify volatile registers without preserving their values;
    procedures must preserve the values of nonvolatile registers across a procedure
    invocation.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序可以自由修改易失性寄存器，而无需保留其值；但必须在过程调用之间保留非易失性寄存器的值。
- en: RAX, RCX, RDX, R8, R9, R10, R11, XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, and the
    HO 128 bits of all the YMM and ZMM registers
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RAX、RCX、RDX、R8、R9、R10、R11、XMM0、XMM1、XMM2、XMM3、XMM4、XMM5，以及所有YMM和ZMM寄存器的HO 128位
- en: RBX, RSI, RDI, RBP, RSP, R12, R13, R14, R15, and XMM6–XMM15\. Also, the direction
    flag must be clear upon return from a procedure.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RBX、RSI、RDI、RBP、RSP、R12、R13、R14、R15和XMM6–XMM15。并且，返回过程时方向标志必须被清除。
- en: Using positive offsets from the RBP register
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用来自RBP寄存器的正偏移量
- en: Storage reserved on the stack for parameters the caller passes in the RCX, RDX,
    R8 and R9 registers
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为调用者通过RCX、RDX、R8和R9寄存器传递的参数在栈上保留的存储空间
- en: 32 bytes
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 32字节
- en: 32 bytes
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 32字节
- en: 32 bytes
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 32字节
- en: '`parm1`: RBP + 16; `parm2`: RBP + 24; `parm3`: RBP + 32; `parm4`: RBP + 40'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`parm1`：RBP + 16；`parm2`：RBP + 24；`parm3`：RBP + 32；`parm4`：RBP + 40'
- en: '[PRE3]'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`lclVar1`: RBP – 1; `lclVar2`: RBP – 4 (aligned to 2-byte boundary); `lclVar3`:
    RBP – 8; `lclVar4`: RBP – 16'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lclVar1`：RBP – 1；`lclVar2`：RBP – 4（对齐到2字节边界）；`lclVar3`：RBP – 8；`lclVar4`：RBP
    – 16'
- en: By reference
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过引用
- en: Application binary interface
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序二进制接口
- en: In the RAX register
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在RAX寄存器中
- en: The address of a procedure passed as a parameter
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为参数传递的过程的地址
- en: Indirectly. Typically by using a `call` `parm` instruction, where `parm` is
    the procedural parameter, a qword variable containing the address of the procedure.
    You could also load the parameter value into a 64-bit register and indirectly
    call the procedure through that register.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 间接地。通常通过使用`call` `parm`指令，其中`parm`是过程参数，一个包含过程地址的qword变量。你也可以将参数值加载到一个64位寄存器中，通过该寄存器间接调用过程。
- en: Allocate local storage to hold the register values to preserve and move the
    register data into that storage upon procedure entry, and then move the data back
    into the registers just before returning from the procedure.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配本地存储空间以保存需要保留的寄存器值，并在过程入口时将寄存器数据移入该存储空间，然后在从过程返回前将数据移回寄存器。
- en: E.6 Answers to Questions in Chapter 6
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.6 第六章问题的答案
- en: AL for 8-bit operands, AX for 16-bit operands, EAX for 32-bit operands, and
    RAX for 64-bit operands
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于8位操作数使用AL，16位操作数使用AX，32位操作数使用EAX，64位操作数使用RAX
- en: '8-bit `mul` operation: 16 bits; 16-bit `mul` operation: 32 bits; 32-bit `mul`
    operation: 64 bits; 64-bit `mul` operator: 128 bits. The CPU put the products
    at AX for 8×8 products, DX:AX for 16×16 products, EDX:EAX for 32×32 products,
    and RDX:RAX for 64×64 products.'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 8位`mul`操作：16位；16位`mul`操作：32位；32位`mul`操作：64位；64位`mul`操作：128位。CPU将乘积存放在AX中用于8×8的乘积，DX:AX用于16×16的乘积，EDX:EAX用于32×32的乘积，RDX:RAX用于64×64的乘积。
- en: The quotient in AL, AX, EAX, or RAX and the remainder in AH, DX, EDX, or RDX
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 商存放在AL、AX、EAX或RAX中，余数存放在AH、DX、EDX或RDX中
- en: Sign-extend AX into DX.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将AX符号扩展到DX。
- en: Zero-extend EAX into EDX.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将EAX零扩展到EDX。
- en: A division by 0 and producing a quotient that will not fit into the accumulator
    register (AL, AX, EAX, or RAX)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除以0并产生一个无法适应累加器寄存器（AL、AX、EAX或RAX）的商
- en: By setting the carry and overflow flags
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置进位标志和溢出标志
- en: They scramble the flag; that is, they leave it in an undefined state.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们会打乱标志；也就是说，它们会将标志置于未定义的状态。
- en: The extended-precision `imul` instruction produces a 2 × *n*-bit result, uses
    implied operands (AL, AX, EAX, and RAX), and modifies the AH, DX, EDX, and RDX
    registers. Also, the extended-precision `imul` instruction does not allow constant
    operands, whereas the generic `imul` instruction does.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展精度的`imul`指令生成一个2 × *n*位的结果，使用隐式操作数（AL、AX、EAX和RAX），并修改AH、DX、EDX和RDX寄存器。此外，扩展精度的`imul`指令不允许常量操作数，而通用的`imul`指令则允许。
- en: '`cbw`, `cwd`, `cdq`, and `cqo`'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cbw`、`cwd`、`cdq`、`cqo`'
- en: They scramble all the flags, leaving them in an undefined state.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们会打乱所有标志，留下未定义的状态。
- en: It sets the zero flag if the two operands are equal.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果两个操作数相等，则设置零标志。
- en: It sets the carry flag if the first operand is less than the second operand.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一个操作数小于第二个操作数，则设置进位标志。
- en: The sign and overflow flags are different if the first operand is less than
    the second operand; they are the same if the first operand is greater than or
    equal to the second operand.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一个操作数小于第二个操作数，则符号标志和溢出标志不同；如果第一个操作数大于或等于第二个操作数，则它们相同。
- en: An 8-bit register or memory location
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个8位寄存器或内存位置
- en: They set the operand to 1 if the condition is true, or to false if the condition
    is not true.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果条件为真，它们将操作数设置为1；如果条件不为真，则设置为false。
- en: The `test` instruction is the same as the `and` instruction except it does not
    store the result to the destination (first) operand; it only sets the flags.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`test` 指令与 `and` 指令相同，唯一的不同是它不将结果存储到目标（第一个）操作数，而只是设置标志。'
- en: They both set the condition code flags the same way.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们都以相同的方式设置条件码标志。
- en: Supply the operand to be tested as the first (destination) operand and an immediate
    constant containing a single 1 bit in the bit position to test. After the test
    instruction, the zero flag will contain the state of the desired bit.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将要测试的操作数作为第一个（目标）操作数，并提供一个包含单个1位的立即常数，该位位于要测试的位位置。测试指令执行后，零标志将包含所需位的状态。
- en: 'The following are some possible, not the only, solutions:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些可能的解决方案，并非唯一解：
- en: '`x = x + y`'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = x + y`'
- en: '[PRE4]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`x = y – z`'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y – z`'
- en: '[PRE5]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`x = y * z`'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y * z`'
- en: '[PRE6]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`x = y + z * t`'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y + z * t`'
- en: '[PRE7]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`x = (y + z) * t`'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = (y + z) * t`'
- en: '[PRE8]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`x = -((x*y)/z)`'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = -((x*y)/z)`'
- en: '[PRE9]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`x = (y == z) && (t != 0)`'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = (y == z) && (t != 0)`'
- en: '[PRE10]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following are some possible, not the only, solutions:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些可能的解决方案，并非唯一解：
- en: '`x = x * 2`'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = x * 2`'
- en: '[PRE11]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`x = y * 5`'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y * 5`'
- en: '[PRE12]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is another solution:'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是另一种解决方案：
- en: '[PRE13]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`x = y * 8`'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y * 8`'
- en: '[PRE14]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`x = x /2`'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`x = x /2`'
- en: '[PRE15]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`x = y / 8`'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y / 8`'
- en: '[PRE16]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`x = z / 10`'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = z / 10`'
- en: '[PRE17]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`x = x + y`'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`x = x + y`'
- en: '[PRE18]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`x = y – z`'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y – z`'
- en: '[PRE19]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`x = y * z`'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y * z`'
- en: '[PRE20]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`x = y + z * t`'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y + z * t`'
- en: '[PRE21]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`x = (y + z) * t`'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = (y + z) * t`'
- en: '[PRE22]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`x = -((x * y)/z)`'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = -((x * y)/z)`'
- en: '[PRE23]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`x = x + y`'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`x = x + y`'
- en: '[PRE24]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`x = y – z`'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y – z`'
- en: '[PRE25]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`x = y * z`'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y * z`'
- en: '[PRE26]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`x = y + z * t`'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x = y + z * t`'
- en: '[PRE27]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`b = x < y`'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`b = x < y`'
- en: '[PRE28]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`b = x >= y && x < z`'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`b = x >= y && x < z`'
- en: '[PRE29]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: E.7 Answers to Questions in Chapter 7
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.7 第7章问题的答案
- en: Use the `lea` instruction or the `offset` operator.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lea` 指令或 `offset` 操作符。
- en: '`option noscoped`'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`option noscoped`'
- en: '`option scoped`'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`option scoped`'
- en: '`jmp` `reg`64 and `jmp` `mem`64'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`jmp` `reg`64 和 `jmp` `mem`64'
- en: A piece of code that maintains history information in variables or via the program
    counter
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 维护历史信息的代码段，无论是通过变量还是程序计数器
- en: If the second letter of the jump mnemonic is *n*, remove the *n*; otherwise,
    insert an *n* as the second character.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果跳转助记符的第二个字母是 *n*，则移除 *n*；否则，插入 *n* 作为第二个字符。
- en: '`jpo` and `jpe`'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`jpo` 和 `jpe`'
- en: A short code sequence used to extend the range of a jump or call instruction
    beyond the ±2GB range
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于扩展跳转或调用指令范围的短代码序列，超出 ±2GB 范围
- en: '`cmov``cc``reg``,` `src`, where `cc` is one of the conditional suffixes (which
    follow a conditional jump), `reg` is a 16-, 32-, or 64-bit register, and `src`
    is a source register or memory location that is the same size as `reg`.'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cmov``cc``reg``,` `src`，其中 `cc` 是条件后缀之一（紧随条件跳转之后），`reg` 是一个 16 位、32 位或 64
    位寄存器，`src` 是与 `reg` 相同大小的源寄存器或内存位置。'
- en: You can conditionally execute a large set of different types of instructions
    by using a conditional jump without the time penalty of a control transfer.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过使用条件跳转来有条件地执行一大组不同类型的指令，而无需控制转移的时间开销。
- en: The destination has to be a register, and 8-bit registers are not allowed.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标必须是寄存器，且不允许使用8位寄存器。
- en: Complete Boolean evaluation of an expression evaluates all components of the
    expression, even if it is not logically necessary to do so; short-circuit evaluation
    stops as soon as it determines that the expression must be true or false.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 布尔表达式的完全求值会评估表达式的所有组成部分，即使从逻辑上看不需要这样做；短路求值在确定表达式必须为真或假时会立即停止。
- en: '[PRE30]'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE33]'
- en: E.8 Answers to Questions in Chapter 8
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.8 第8章问题的答案
- en: 'You compute *x* = *y* + *z* as follows:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过以下方式计算 *x* = *y* + *z*：
- en: '[PRE34]'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You compute *x* = *y* – *z* as follows:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过以下方式计算 *x* = *y* – *z*：
- en: '[PRE37]'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The conversions are as follows:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换如下：
- en: '[PRE41]'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The conversions are as follows:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换如下：
- en: '[PRE45]'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The conversions are as follows:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换如下：
- en: '[PRE48]'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The conversions are as follows:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换如下：
- en: '[PRE50]'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE58]'
- en: E.9 Answers to Questions in Chapter 9
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.9 第9章问题的答案
- en: '[PRE59]'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '8'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '8'
- en: 'Call `qToStr` twice: once with the HO 64 bits and once with the LO 64 bits.
    Then concatenate the two strings.'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `qToStr` 两次：一次使用高64位，一次使用低64位。然后将两个字符串连接起来。
- en: '`fbstp`'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fbstp`'
- en: If the input value is negative, emit a hyphen (`-`) character and negate the
    value; then call the unsigned decimal conversion function. If the number is 0
    or positive, just call the unsigned decimal conversion function.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入值为负数，发出一个连字符（`-`）字符并取其负值；然后调用无符号十进制转换函数。如果数字为0或正数，仅调用无符号十进制转换函数。
- en: '[PRE60]'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE60]'
- en: It will produce the full string required; the `minDigits` parameter specifies
    the minimum string size.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将生成所需的完整字符串；`minDigits` 参数指定字符串的最小大小。
- en: '[PRE61]'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE61]'
- en: A string containing `fWidth` `#` characters.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个包含 `fWidth` 个 `#` 字符的字符串。
- en: '[PRE62]'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE62]'
- en: A character that separates a sequence of characters from other such sequences,
    such as beginning or ending a numeric string
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于分隔字符序列与其他此类序列的字符，例如开始或结束一个数字字符串
- en: Illegal character on input and numeric overflow during conversion
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入中的非法字符和转换过程中的数值溢出
- en: E.10 Answers to Questions in Chapter 10
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.10 第10章问题的答案
- en: The set of all possible input (parameter) values
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有可能的输入（参数）值的集合
- en: The set of all possible function output (return) values
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有可能的函数输出（返回）值的集合
- en: Computes AL = [RBX + AL × 1]
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 AL = [RBX + AL × 1]
- en: 'Byte values: domain is the set of all integers in the range 0 to 255, and the
    range is also the set of all integers in the range 0 to 255.'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字节值：域是从0到255的所有整数集合，范围也是从0到255的所有整数集合。
- en: 'The code implementing the functions is as follows:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现这些功能的代码如下：
- en: '[PRE63]'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Modifying input values that are out of a specific range so that they lie within
    the input domain of the function
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改输入值，使其位于函数的输入域内
- en: Main memory is so slow that it might be faster to compute the value than to
    look it up via a table.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主存储器非常慢，查找表中的值可能比计算值更快。
- en: E.11 Answers to Questions in Chapter 11
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.11 第11章问题的答案
- en: Use the `cpuid` instruction.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cpuid` 指令。
- en: Because Intel and AMD have different feature sets
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为Intel和AMD有不同的功能集
- en: EAX = 1
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EAX = 1
- en: ECX bit 20
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECX的第20位
- en: (a) `_TEXT`, (b) `_DATA`, (c) `_BSS`, (d) `CONST`
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) `_TEXT`，(b) `_DATA`，(c) `_BSS`，(d) `CONST`
- en: '`PARA` or 16 bytes'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PARA` 或 16字节'
- en: '[PRE67]'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_PRE
  zh: '[PRE67]'
- en: AVX/AVX2/AVX-256/AVX-512
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AVX/AVX2/AVX-256/AVX-512
- en: A data type within a SIMD register; typically, 1, 2, 4, or 8 bytes wide
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SIMD寄存器中的数据类型；通常为1、2、4或8字节宽
- en: Scalar instructions operate on a single piece of data; vector instructions operate,
    simultaneously, on two or more pieces of data.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标量指令对单一数据项进行操作；向量指令同时对两个或更多数据项进行操作。
- en: 16 bytes
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 16字节
- en: 32 bytes
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 32字节
- en: 64 bytes
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 64字节
- en: '`movd`'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movd`'
- en: '`movq`'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movq`'
- en: '`movaps`, `movapd`, and `movdqa`'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movaps`、`movapd` 和 `movdqa`'
- en: '`movups`, `movupd`, and `movdqu`'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movups`、`movupd` 和 `movdqu`'
- en: '`movhps` or `movhpd`'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movhps` 或 `movhpd`'
- en: '`movddup`'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movddup`'
- en: '`pshufb`'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pshufb`'
- en: '`pshufd`, though `pshufb` could also work'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pshufd`，不过`pshufb`也可以起作用'
- en: '`(v)pextrb`, `(v)pextrw`, `(v)pextrd`, or `(v)pextrq`'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(v)pextrb`、`(v)pextrw`、`(v)pextrd` 或 `(v)pextrq`'
- en: '`(v)pinsrb`, `(v)pinsrw`, `(v)pinsrd`, or `(v)pinsrq`'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(v)pinsrb`、`(v)pinsrw`、`(v)pinsrd` 或 `(v)pinsrq`'
- en: It takes the bits in the second operand, inverts them, and then logically ANDs
    these inverted bits with the first (destination) operand.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它获取第二操作数的位，反转它们，然后将这些反转的位与第一个（目标）操作数进行逻辑与运算。
- en: '`pslldq`'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pslldq`'
- en: '`pslrdq`'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pslrdq`'
- en: '`psllq`'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`psllq`'
- en: '`pslrq`'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pslrq`'
- en: The carry out of the HO bit is lost.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HO位的进位被丢失。
- en: In a vertical addition, the CPU sums values found in the same lane of two separate
    XMM registers; in a horizontal addition, the CPU sums values found in adjacent
    lanes of the same XMM register.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在垂直加法中，CPU将两个不同XMM寄存器相同通道中的值相加；在水平加法中，CPU将同一个XMM寄存器相邻通道中的值相加。
- en: In the destination XMM register, by storing 0FFh in the corresponding lane of
    the destination XMM register (0 for false)
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标XMM寄存器中，通过将0FFh存储到目标XMM寄存器的相应通道中（0表示假）
- en: Swap the operands of the `pcmpgtq` instruction.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交换 `pcmpgtq` 指令的操作数。
- en: It copies the HO bit of each byte in an XMM register into the corresponding
    bit position of a general-purpose 16-bit register; for example, bit 7 of lane
    0 goes into bit 0.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将每个字节的HO位从XMM寄存器复制到通用16位寄存器的相应位位置；例如，通道0的第7位进入第0位。
- en: (a) 4 on SSE, 8 on AVX2, (b) 2 on SSE, 4 on AVX2
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) SSE上为4，AVX2上为8，(b) SSE上为2，AVX2上为4
- en: '`and rax, -16`'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`and rax, -16`'
- en: '`pxor xmm0, xmm0`'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pxor xmm0, xmm0`'
- en: '`pcmpeqb xmm1, xmm1`'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pcmpeqb xmm1, xmm1`'
- en: '`include`'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`include`'
- en: E.12 Answers to Questions in Chapter 12
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.12 第12章问题的答案
- en: '`and`/`andn`'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`and`/`andn`'
- en: '`btr`'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`btr`'
- en: '`or`'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`or`'
- en: '`bts`'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bts`'
- en: '`xor`'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`xor`'
- en: '`btc`'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`btc`'
- en: '`test`/`and`'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`test`/`and`'
- en: '`bt`'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bt`'
- en: '`pext`'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pext`'
- en: '`pdep`'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pdep`'
- en: '`bextr`'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bextr`'
- en: '`bsf`'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bsf`'
- en: '`bsr`'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bsr`'
- en: Invert the register and use `bsf`.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反转寄存器并使用 `bsf`。
- en: Invert the register and use `bsr`.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反转寄存器并使用`bsr`。
- en: '`popcnt`'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`popcnt`'
- en: E.13 Answers to Questions in Chapter 13
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.13 第13章问题的答案
- en: Compile-time language
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译时语言
- en: During the assembly and compilation process
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在汇编和编译过程中
- en: '`echo` (or `%out`)'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`echo`（或 `%out`）'
- en: '`.err`'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.err`'
- en: The `=` directive
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`=` 指令'
- en: '`!`'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`!`'
- en: It replaces an expression with text representing the value of that compile-time
    expression.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用表示该编译时表达式值的文本替换表达式。
- en: It replaces a text symbol with the expansion of its text.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用文本符号的展开替换文本符号。
- en: It concatenates two or more textual strings at assembly time and stores the
    result into a text symbol.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在汇编时将两个或更多文本字符串连接起来，并将结果存储到文本符号中。
- en: It searches for a substring within a larger string in a MASM text object and
    returns the index of the substring into that object; 0 if the substring does not
    appear in the larger string.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在 MASM 文本对象中搜索一个子字符串，并返回该子字符串在该对象中的索引；如果子字符串没有出现在更大的字符串中，则返回 0。
- en: It returns the length of a MASM text string.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它返回一个 MASM 文本字符串的长度。
- en: It returns a substring from a larger MASM text string.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它从更大的 MASM 文本字符串中返回一个子字符串。
- en: '`if`, `elseif`, `else`, and `endif`'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`if`、`elseif`、`else` 和 `endif`'
- en: '`while`, `for`, `forc`, and `endm`'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`、`for`、`forc` 和 `endm`'
- en: '`forc`'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`forc`'
- en: '`macro`, `endm`'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`macro`、`endm`'
- en: Specify the macro’s name where you want the text expansion to occur.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定宏的名称，宏扩展将在该位置发生。
- en: As operands to the macro directive
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为宏指令的操作数
- en: Specify `:req` after the parameter name in the macro operand field.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在宏操作数字段的参数名称后指定 `:req`。
- en: Macro parameters are optional, by default, if they don’t have the `:req` suffix.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 宏参数是可选的，默认情况下，如果没有 `:req` 后缀。
- en: Use the `:vararg` suffix after the last macro parameter declaration.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个宏参数声明后使用 `:vararg` 后缀。
- en: Use conditional assembly directives such as `ifb` or `ifnb` to see if the actual
    macro argument is blank.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用条件汇编指令，如 `ifb` 或 `ifnb`，查看实际的宏参数是否为空。
- en: Use the `local` directive.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `local` 指令。
- en: '`exitm`'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`exitm`'
- en: Use `exitm <text>`.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `exitm <text>`。
- en: '`opattr`'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`opattr`'
- en: E.14 Answers to Questions in Chapter 14
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.14 第14章问题的答案
- en: Bytes, words, dwords, and qwords
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字节、字、双字和四字
- en: '`movs`, `cmps`, `scas`, `stos`, and `lods`'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movs`、`cmps`、`scas`、`stos` 和 `lods`'
- en: Bytes and words
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字节和字
- en: RSI, RDI, and RCX
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RSI、RDI 和 RCX
- en: RSI and RDI
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RSI 和 RDI
- en: RCX, RSI, and AL
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RCX、RSI 和 AL
- en: RDI and EAX
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RDI 和 EAX
- en: Dir = 0
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dir = 0
- en: Dir = 1
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dir = 1
- en: Clear the direction flag; alternatively, preserve its value.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除方向标志；或者保留其值。
- en: Clear
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除
- en: '`movs` and `stos`'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`movs` 和 `stos`'
- en: When the source and destination blocks overlap and the source address starts
    at a lower memory address than the destination block
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当源和目标块重叠，且源地址起始位置比目标块的内存地址更低时
- en: This is the default condition; you would also clear the direction flag when
    the source and destination blocks overlap and the source address starts at a higher
    memory address than the destination block.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是默认条件；当源地址和目标块重叠，且源地址起始位置比目标块的内存地址更高时，你还需要清除方向标志。
- en: Portions of the source block can be replicated in the destination block.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源块的部分内容可以在目标块中复制。
- en: '`repe`'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`repe`'
- en: Direction flag should be clear.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方向标志应清除。
- en: No, string instructions test RCX prior to the string operation when using a
    repeat prefix.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，字符串指令在使用重复前缀时，会在字符串操作之前测试 RCX。
- en: '`scasb`'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`scasb`'
- en: '`stos`'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stos`'
- en: '`lods` and `stos`'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lods` 和 `stos`'
- en: '`lods`'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lods`'
- en: Verify that the CPU supports SSE 4.2 instructions.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 CPU 是否支持 SSE 4.2 指令。
- en: '`pcmpistri` and `pcmpistrm`'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pcmpistri` 和 `pcmpistrm`'
- en: '`pcmpestri` and `pcmpestrm`'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pcmpestri` 和 `pcmpestrm`'
- en: RAX holds the `src1` length, and RDX holds the `src2` length.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RAX 存储 `src1` 长度，RDX 存储 `src2` 长度。
- en: Equal any, or possibly, equal range
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等于任何，或可能等于的范围
- en: Equal each
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等于每个
- en: Equal ordered
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等于已排序
- en: The `pcmp``X``str``Y` instructions always read 16 bytes of memory, even if the
    string is shorter than this, and there is the possibility of an MMU page fault
    when it reads data beyond the end of the string.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pcmp``X``str``Y` 指令总是读取 16 字节的内存，即使字符串长度不足，也有可能在读取字符串末尾超出时发生 MMU 页面错误。'
- en: E.15 Answers to Questions in Chapter 15
  id: totrans-482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.15 第15章问题的答案
- en: '`ifndef` and `endif`'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ifndef` 和 `endif`'
- en: The assembly of a source file plus any files it includes or indirectly includes
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 汇编源文件及其包含或间接包含的所有文件
- en: '`public`'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public`'
- en: '`extern` and `externdef`'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`extern` 和 `externdef`'
- en: '`externdef`'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`externdef`'
- en: '`abs`'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`abs`'
- en: '`proc`'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`proc`'
- en: '*nmake.exe*'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*nmake.exe*'
- en: 'Multiple blocks of the following form:'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个如下形式的块：
- en: '[PRE68]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: A dependent file is one that the current file depends on for its proper operation;
    the dependent file must be updated and built prior to the compilation and linking
    of the current file.
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖文件是当前文件正常操作所依赖的文件；该依赖文件必须在当前文件的编译和链接之前更新和构建。
- en: Delete old object and executable files, and delete other cruft.
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除旧的对象和可执行文件，并删除其他杂项文件。
- en: A collection of object files
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一组目标文件
- en: E.16 Answers to Questions in Chapter 16
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.16 第16章问题的答案
- en: '`/subsystem:console`'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/subsystem:console`'
- en: '[https://www.masm32.com/](https://www.masm32.com/)'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://www.masm32.com/](https://www.masm32.com/)'
- en: It slows the assembly process.
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会减慢汇编过程。
- en: '`/entry:``procedure_name`'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/entry:``procedure_name`'
- en: '`MessageBox`'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MessageBox`'
- en: Code that surrounds a call to a function and that changes the way you call the
    function (for example, parameter order and location)
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包围函数调用并改变你调用函数方式的代码（例如，参数顺序和位置）
- en: '`__imp_CreateFileA`'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`__imp_CreateFileA`'
- en: '`__imp_GetLastError`'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`__imp_GetLastError`'
