- en: '**10**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10**'
- en: '**SESSION HIJACKING**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话劫持**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: When a website successfully authenticates a user, the browser and the server
    open a session. A *session* is an HTTP conversation in which the browser sends
    a series of HTTP requests corresponding to user actions, and the web server recognizes
    them as coming from the same authenticated user without requiring the user to
    log back in for each request.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个网站成功验证用户身份时，浏览器和服务器会打开一个会话。*会话*是一个 HTTP 会话，其中浏览器发送一系列与用户操作对应的 HTTP 请求，web
    服务器识别它们来自同一个已验证的用户，而无需用户在每个请求中重新登录。
- en: If a hacker can access or forge session information that the browser sends,
    they can access any user’s account on your site. Thankfully, modern web servers
    contain secure session-management code, which makes it practically impossible
    for an attacker to manipulate or forge a session. However, even if there are no
    vulnerabilities in a server’s session-management capabilities, a hacker can still
    steal someone else’s valid session while it’s in progress; this is called *session
    hijacking*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果黑客能够访问或伪造浏览器发送的会话信息，他们就能够访问你网站上任何用户的账户。幸运的是，现代的网络服务器包含了安全的会话管理代码，这使得攻击者几乎不可能操控或伪造会话。然而，即便服务器的会话管理功能没有漏洞，黑客仍然可以在会话进行中窃取其他用户的有效会话；这被称为*会话劫持*。
- en: Session hijacking vulnerabilities are generally a bigger risk than the authentication
    vulnerabilities discussed in the previous chapter, because again, they allow an
    attacker to access any of your users’ accounts. This is such a tantalizing prospect
    that hackers have found many ways to hijack sessions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 会话劫持漏洞通常比前一章讨论的身份验证漏洞更具风险，因为它们允许攻击者访问任何用户的账户。这是一个极具诱惑力的前景，黑客们已经找到了许多劫持会话的方法。
- en: 'In this chapter, you’ll first look at how websites implement session management.
    Then you’ll learn about the three ways hackers hijack sessions: cookie theft,
    session fixation, and taking advantage of weak session IDs.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将首先了解网站如何实现会话管理。然后，你将了解黑客劫持会话的三种方式：窃取 Cookie、会话固定和利用弱会话 ID。
- en: '**How Sessions Work**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**会话的工作原理**'
- en: To understand how an attacker hijacks a session, you first need to understand
    what happens when a user and a web server open a session.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解攻击者如何劫持会话，首先你需要了解用户与 web 服务器打开会话时发生了什么。
- en: When a user authenticates themselves under HTTP, the web server assigns them
    a session identifier during the login process. The *session identifier (session
    ID)*—typically a large, randomly generated number—is the minimal information the
    browser needs to transmit with each subsequent HTTP request so the server can
    continue the HTTP conversation with the authenticated user. The web server recognizes
    the session ID supplied with each request, maps it to the appropriate user, and
    performs actions on their behalf.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在 HTTP 下进行身份验证时，web 服务器会在登录过程中为其分配一个会话标识符。*会话标识符（会话 ID）*—通常是一个大而随机生成的数字—是浏览器在每次随后的
    HTTP 请求中需要传输的最小信息，以便服务器能够继续与已验证的用户进行 HTTP 会话。web 服务器识别随每个请求提供的会话 ID，将其映射到相应的用户，并代表该用户执行操作。
- en: Note that the session ID must be a temporarily assigned value that’s different
    from the username. If the browser used a session ID that was simply the username,
    hackers could pretend to be any user they pleased. By design, only a very small
    minority of possible session IDs should correspond to a valid session on the server
    at any given time. (If this is not the case, the web server exhibits a weak session
    vulnerability, which we will discuss later in this chapter.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，会话 ID 必须是临时分配的值，并且与用户名不同。如果浏览器使用的会话 ID 仅仅是用户名，黑客就可以假装成任何他们想要的用户。设计上，只有极少数可能的会话
    ID 应该与服务器上有效的会话相对应。（如果不是这样，网络服务器就表现出一个弱会话漏洞，我们将在本章后面讨论这个问题。）
- en: Besides the username, the web server typically stores other *session state*
    alongside the session ID, containing relevant information about the user’s recent
    activity. The session state might, for example, contain a list of pages the user
    has visited, or the items currently sitting in their shopping basket.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户名外，web 服务器通常会将其他*会话状态*与会话 ID 一起存储，包含有关用户最近活动的相关信息。例如，会话状态可能包含用户访问过的页面列表，或当前放入购物车的商品。
- en: Now that we understand what happens when users and web servers open a session,
    let’s look at how websites implement these sessions. There are two common implementations,
    typically described as server-side sessions and client-side sessions. Let’s review
    how these methods work, so you can see where the vulnerabilities occur.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了当用户和 web 服务器打开会话时发生了什么，让我们来看看网站是如何实现这些会话的。通常有两种常见的实现方式，通常被描述为服务器端会话和客户端会话。让我们回顾一下这些方法是如何工作的，这样你就能看到漏洞发生的地方。
- en: '***Server-Side Sessions***'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***服务器端会话***'
- en: In a traditional model of session management, the web server keeps the session
    state in memory, and both the web server and browser pass the session identifier
    back and forth. This is called a *server-side session*. [Listing 10-1](ch10.xhtml#ch10list1)
    shows the Ruby on Rails implementation of server-side sessions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的会话管理模型中，web 服务器将会话状态保存在内存中，且 web 服务器和浏览器来回传递会话标识符。这被称为*服务器端会话*。[Listing
    10-1](ch10.xhtml#ch10list1) 展示了 Ruby on Rails 实现的服务器端会话。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 10-1: Ruby on Rails implements server-side sessions using the session
    ID (sid).*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 10-1: Ruby on Rails 使用会话 ID (sid) 实现服务器端会话。*'
- en: The session object is created at ❶, written to the server’s memory at ❷, and
    then reloaded from memory at ❸.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 会话对象在 ❶ 创建，写入服务器内存 ❷，然后从内存重新加载 ❸。
- en: 'Historically, web servers have experimented with transferring session IDs in
    multiple ways: either in the URL, as an HTTP header, or in the body of HTTP requests.
    By far, the most common (and reliable) mechanism the web development community
    has decided upon is to send session IDs as a session cookie. When using *session
    cookies*, the web server returns the session ID in the `Set-Cookie` header of
    the HTTP response, and the browser attaches the same information to subsequent
    HTTP requests using the `Cookie` header.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，web 服务器曾尝试过多种方式传递会话 ID：要么在 URL 中，要么作为 HTTP 头部，要么在 HTTP 请求的主体中。到目前为止，web
    开发社区普遍认同的最常见（且可靠）机制是将会话 ID 作为会话 cookie 发送。当使用*会话 cookies*时，web 服务器会在 HTTP 响应的
    `Set-Cookie` 头部返回会话 ID，浏览器则使用 `Cookie` 头部将相同的信息附加到随后的 HTTP 请求中。
- en: 'Cookies have been part of the HyperText Transfer Protocol since they were first
    introduced by Netscape in 1995\. Unlike HTTP-native authentication, they’re used
    by pretty much every website under the sun. (Because of European Union legislation,
    you’ll be well aware of this fact: websites are required by European law to inform
    you that they’re using cookies.)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 1995 年 Netscape 首次引入 cookies 以来，cookies 就一直是超文本传输协议的一部分。与 HTTP 原生身份验证不同，它们几乎被所有网站使用。（由于欧盟的立法，你应该对此非常了解：根据欧盟法律，网站必须通知你它们正在使用
    cookies。）
- en: Server-side sessions have been widely implemented and are generally very secure.
    They do have scalability limitations, however, because the web server has to store
    the session state in memory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端会话已被广泛实现，通常非常安全。然而，它们确实有扩展性限制，因为 web 服务器必须将会话状态保存在内存中。
- en: That means that at authentication time, only *one* of the web servers will know
    about the established session. If subsequent web requests for the same user gets
    directed to a *different* web server, the new web server needs to be able to recognize
    the returning user, so web servers need a way of sharing session information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在身份验证时，只有*一个* web 服务器会知道已经建立的会话。如果随后的相同用户的 web 请求被定向到*不同*的 web 服务器，新的 web
    服务器需要能够识别回访的用户，因此 web 服务器需要有一种共享会话信息的方式。
- en: Typically, this requires writing session state to a shared cache or to a database
    with every request, and having each web server read that cached session state
    when a new HTTP request comes through. Both of these are time- and resource-consuming
    operations that can limit the responsiveness of sites with large userbases, since
    each user added to the website adds a significant load to the session store.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这需要将会话状态写入共享缓存或数据库中，每次请求时，且每个 web 服务器在收到新的 HTTP 请求时都需要读取缓存的会话状态。这两者都是时间和资源消耗型的操作，可能会限制拥有大量用户群体的网站的响应能力，因为每增加一个用户，就会给会话存储带来显著的负担。
- en: '***Client-Side Sessions***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***客户端会话***'
- en: Because server-side sessions have proven difficult to scale for large sites,
    web server developers invented client-side sessions. A web server implementing
    *client-side sessions* passes all session state in the cookie, instead of passing
    back just the session ID in the `Set-Cookie` header. The server serializes session
    state to text before the session state is set in the HTTP header. Often, web servers
    encode the session state as JavaScript Object Notation (JSON)—and deserialize
    it when returning it to the server. [Listing 10-2](ch10.xhtml#ch10list2) shows
    an example of Ruby on Rails implementing a client-side session.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 10-2: Ruby on Rails code that stores session data as a client-side
    cookie*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: By using client-side sessions, a site’s web servers no longer have to share
    state. Each web server has everything it needs to reestablish the session with
    an incoming HTTP request. This is a great bonus when you’re trying to scale to
    thousands of simultaneous users!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Client-side sessions do create an obvious security problem, however. With a
    naive implementation of client-side sessions, a malicious user can easily manipulate
    the contents of a session cookie or even forge them entirely. This means the web
    server has to encode the session state in a way that prevents meddling.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: One popular way to secure client-side session cookies is to encrypt the serialized
    cookie before sending it to the client. The web server then decrypts the cookie
    when the browser returns it. This approach makes the session state entirely opaque
    on the client side. Any attempt to manipulate or forge the cookie will corrupt
    the encoded session and make the cookie unreadable. The server will simply log
    out the malicious user and redirect them to an error page.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Another, slightly more lightweight approach to securing session cookies is to
    add a digital signature to the cookie as it’s sent. A *digital signature* acts
    as a unique “fingerprint” for some input data—in this case, the serialized session
    state—that anyone can easily recalculate as long as they have the signing key
    originally used to generate the signature. Digitally signing cookies allows the
    web server to detect attempts to manipulate the session state, since it’ll calculate
    a different signature value and reject the session if there has been any tampering.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Signing cookies rather than encrypting them still allows a nosy user to read
    the session data in a browser debugger. Bear this in mind if you’re storing data
    about a user—like tracking information—that you might not want them to see!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '**How Attackers Hijack Sessions**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we’ve discussed sessions and how websites implement them, let’s look
    at how attackers hijack sessions. Attackers use three main methods to hijack sessions:
    cookie theft, session fixation, and taking advantage of weak session IDs.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '***Cookie Theft***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'With the use of cookies being so widespread nowadays, attackers normally achieve
    session hijacking by stealing the value of a `Cookie` header from an authenticated
    user. Attackers usually steal cookies by using one of three techniques: injecting
    malicious JavaScript into a site as the user interacts with it (cross-site scripting),
    sniffing network traffic in order to intercept HTTP headers (a man-in-the-middle
    attack), or triggering unintended HTTP requests to the site when they’ve already
    authenticated (cross-site request forgery).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 cookies 的广泛使用，攻击者通常通过窃取经过身份验证的用户的 `Cookie` 头的值来实现会话劫持。攻击者通常通过三种技术之一窃取 cookies：在用户与网站交互时注入恶意
    JavaScript（跨站脚本攻击）、嗅探网络流量以拦截 HTTP 头部（中间人攻击），或在用户已认证后触发意外的 HTTP 请求（跨站请求伪造）。
- en: Fortunately, modern browsers implement simple security measures that allow you
    to protect your session cookies against all three of these techniques. You can
    enable these security measures simply by adding keywords to the `Set-Cookie` header
    returned by the server, as shown in [Listing 10-3](ch10.xhtml#ch10list3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现代浏览器实现了简单的安全措施，可以保护您的会话 cookies 免受这三种技术的攻击。您只需通过向服务器返回的 `Set-Cookie` 响应头添加关键字，就可以启用这些安全措施，如[清单
    10-3](ch10.xhtml#ch10list3)所示。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 10-3: A session cookie appearing in an HTTP response that is protected
    from session hijacking by a combination of keyword instructions*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-3：通过关键字指令组合保护的会话 cookie 出现在 HTTP 响应中，防止会话劫持*'
- en: Let’s review the three techniques of cookie theft, as well as the keywords that
    can mitigate them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下三种 cookie 被盗的技术，以及可以缓解它们的关键字。
- en: '**Cross-Site Scripting**'
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击**'
- en: Attackers often use *cross-site scripting* (which we discussed in detail in
    [Chapter 7](ch07.xhtml#ch07)) to steal session cookies. An attacker will try to
    use JavaScript injected into a user’s browser to read the user’s cookies and send
    them to an external web server that the attacker controls. The attacker will then
    *harvest* these cookies as they appear in the web server’s log file, and then
    cut and paste the cookie values into a browser session—or more likely, add them
    to a script—to perform actions under the hacked user’s session.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通常使用*跨站脚本攻击*（我们在[第 7 章](ch07.xhtml#ch07)中详细讨论过）来窃取会话 cookie。攻击者会尝试利用注入到用户浏览器中的
    JavaScript 来读取用户的 cookies，并将它们发送到攻击者控制的外部 Web 服务器。攻击者随后会在 Web 服务器的日志文件中*收集*这些
    cookies，然后将 cookie 值复制粘贴到浏览器会话中——更可能的是，将它们添加到脚本中——以在被劫持用户的会话下执行操作。
- en: To defuse session hijacking via cross-site scripting, mark all cookies as `HttpOnly`
    in the `Set-Cookie` header. This tells the browser not to make cookies available
    to JavaScript code. Append the `HttpOnly` keyword to the `Set-Cookie` response
    header, as shown in [Listing 10-4](ch10.xhtml#ch10list4).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过跨站脚本攻击来防止会话劫持，请在 Set-Cookie 响应头中将所有 cookies 标记为 `HttpOnly`。这会告诉浏览器不要将 cookies
    提供给 JavaScript 代码。在 `Set-Cookie` 响应头中附加 `HttpOnly` 关键字，如[清单 10-4](ch10.xhtml#ch10list4)所示。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 10-4: Mark your cookies as HttpOnly to stop JavaScript from accessing
    them.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-4：将您的 cookies 标记为 HttpOnly，以防止 JavaScript 访问它们。*'
- en: There’s rarely a good reason to allow client-side JavaScript access to cookies,
    so there are very few downsides to this approach.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 允许客户端 JavaScript 访问 cookies 的理由非常少，因此这种方法几乎没有什么缺点。
- en: '**Man-in-the-Middle Attacks**'
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**中间人攻击**'
- en: 'An attacker can also steal cookies by using a *man-in-the-middle attack*: the
    attacker finds a way to sit between the browser and the web server and read network
    traffic as it passes back and forth. To protect against cookie theft via man-in-the-middle
    attacks, your website should use HTTPS. You’ll learn how to enable HTTPS in [Chapter
    13](ch13.xhtml#ch13).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以通过使用*中间人攻击*来窃取 cookies：攻击者找到一种方法，坐在浏览器和 Web 服务器之间，读取来回传输的网络流量。为了防止通过中间人攻击窃取
    cookies，您的网站应该使用 HTTPS。您将在[第 13 章](ch13.xhtml#ch13)中学习如何启用 HTTPS。
- en: After you’ve enabled HTTPS on the web server, you should mark your cookies as
    `Secure`, as shown in [Listing 10-5](ch10.xhtml#ch10list5), so the browser knows
    to never send unencrypted cookies over HTTP.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在您启用 Web 服务器上的 HTTPS 后，您应该将 cookies 标记为 `Secure`，如[清单 10-5](ch10.xhtml#ch10list5)所示，这样浏览器就会知道永远不会通过
    HTTP 发送未加密的 cookies。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 10-5: Marking your cookies as secure means adding the Secure keyword
    to the Set-Cookie response header.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-5：将 cookies 标记为 secure 意味着将 Secure 关键字添加到 Set-Cookie 响应头中。*'
- en: Most web servers are configured to respond to both HTTP and HTTPS, but will
    redirect HTTP URLs to the HTTPS equivalent. Marking your cookies as `Secure` will
    keep the browser from transmitting the cookie data until the redirect has occurred.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery**'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The final way an attacker can hijack sessions is via *cross-site request forgery*
    (detailed in [Chapter 8](ch08.xhtml#ch08)). An attacker using CSRF doesn’t need
    to get access to a user’s session cookie. Instead, they simply need to trick the
    victim into clicking a link to your site. If the user already has a session open
    on your site, the browser will send their session cookie along with the HTTP request
    triggered by the link, which might result in the user inadvertently performing
    a sensitive action (such as Liking an item the hacker is attempting to promote).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: To defuse CSRF attacks, mark your cookies with the `SameSite` attribute, which
    instructs the browser to send only session cookies with HTTP requests generated
    from *your* site. The browser will strip session cookies from other HTTP requests,
    like those generated by clicking a link in an email.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SameSite` attribute has two settings: `Strict` and `Lax`. The `Strict`
    setting, shown in [Listing 10-6](ch10.xhtml#ch10list6), has the advantage of stripping
    cookies from all HTTP requests triggered from external sites.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 10-6: The Strict setting will strip cookies from requests generated
    to your site from external sites.*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The `Strict` setting can prove annoying if a user shares your content via social
    media, because the setting forces anyone clicking their link to log in again to
    view the content. To solve this annoyance for your users, configure the browser
    to allow cookies only on `GET` requests by using the `SameSite=Lax` setting, as
    shown in [Listing 10-7](ch10.xhtml#ch10list7).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 10-7: The Lax setting allows for painless sharing of links on social
    media, while still defusing session-hijacking attacks via CSRF.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: This `SameSite=Lax` setting instructs the browser to attach cookies to inbound
    `GET` requests, while stripping them from other request types. Because websites
    usually perform sensitive actions (such as writing content or sending messages)
    through `POST`, `PUT`, or `DELETE` requests, an attacker can’t trick a victim
    into performing these types of sensitive actions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '***Session Fixation***'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the early history of the internet, many browsers didn’t implement cookies,
    so web servers found other ways to pass session IDs. The most popular way of doing
    this was by *URL rewriting*—appending the session ID to each URL the user visited.
    To this day, the *Java Servlet Specification* describes how developers can add
    session IDs to the end of the URL when cookies aren’t available. [Listing 10-8](ch10.xhtml#ch10list8)
    shows an example of a URL rewritten to include a session ID.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 10-8: An example of a URL passing the session ID 1234*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: All browsers have cookie support nowadays, so URL rewriting is an anachronism.
    However, legacy web stacks may be configured to still accept session IDs in this
    way, which introduces a couple of major security issues.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有浏览器都支持cookie，因此URL重写已经成为一种过时的做法。然而，遗留的网页堆栈可能仍然配置为接受这种方式的会话ID，这就引入了几个重大的安全问题。
- en: First, writing session IDs in the URL allows them to be leaked in log files.
    An attacker who gets access to your logs can hijack your users’ sessions simply
    by dropping these types of URLs in the browser.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将会话ID写入URL会导致它们在日志文件中泄漏。攻击者如果访问到你的日志文件，只需将这些类型的URL放入浏览器，就可以劫持用户的会话。
- en: The second issue is a vulnerability called *session fixation*. When web servers
    vulnerable to session fixation encounter an unknown session ID in a URL, they’ll
    ask the user to authenticate themselves, and then establish a session under the
    supplied session ID.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是一个名为*会话固定（session fixation）*的漏洞。当存在会话固定漏洞的网页服务器在URL中遇到一个未知的会话ID时，它们会要求用户进行身份验证，然后在提供的会话ID下建立一个会话。
- en: This allows a hacker to *fixate* the session ID ahead of time, sending victims
    tempting links (usually in unsolicited email or spam in a site’s comment sections)
    with the fixated session ID. Any user who clicks the link can have their session
    hijacked, because the attacker can simply use that same URL in their own browser,
    having fixed the session ID ahead of time. The act of clicking the link and logging
    it transforms the dummy session ID into a real session ID—one that the hacker
    knows.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得黑客能够*预先固定*会话ID，向受害者发送诱人的链接（通常是在未经请求的电子邮件或站点评论区的垃圾邮件中），链接中包含了固定的会话ID。任何点击该链接的用户都会被劫持会话，因为攻击者只需在自己的浏览器中使用相同的URL，在预先固定的会话ID下进行操作。点击链接并登录的动作会将虚假的会话ID转换为一个真实的会话ID——一个黑客已经知道的ID。
- en: If your web server supports URL rewriting as a means of session tracking, you
    should disable it with the relevant configuration options. It serves no purpose
    and exposes you to session fixation attacks. [Listing 10-9](ch10.xhtml#ch10list9)
    shows how to disable URL rewriting in version 7.0 of the popular Java web server
    Apache Tomcat by editing the *web.xml* config file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网页服务器支持将URL重写作为会话跟踪的方式，你应该通过相关的配置选项禁用它。它没有任何实际用途，并且使你暴露在会话固定攻击下。[列表 10-9](ch10.xhtml#ch10list9)展示了如何通过编辑*web.xml*配置文件来禁用Apache
    Tomcat 7.0版本中的URL重写。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 10-9: Specifying the session tracking to use the COOKIE mode in Apache
    Tomcat 7.0 will disable URL rewriting.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 10-9：指定使用COOKIE模式的会话跟踪，在Apache Tomcat 7.0中将禁用URL重写。*'
- en: '***Taking Advantage of Weak Session IDs***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***利用弱会话ID***'
- en: As we’ve already discussed, if an attacker gets access to a session ID, they
    can hijack a user’s session. They can do this by stealing a session cookie or
    by fixating a session ahead of time for servers that support URL rewriting. However,
    a more brute-force method is to simply *guess* the session ID. Because session
    IDs are typically just numbers, if these numbers are sufficiently small or predictable,
    an attacker can write a script to enumerate potential session IDs and test them
    against the web server until they find a valid session.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，如果攻击者获得了会话ID，他们可以劫持用户的会话。攻击者可以通过窃取会话cookie或通过预先为支持URL重写的服务器固定会话来实现这一点。然而，更为粗暴的方法是直接*猜测*会话ID。由于会话ID通常只是数字，如果这些数字足够小或可预测，攻击者可以编写脚本来枚举可能的会话ID，并与网页服务器进行测试，直到找到有效的会话。
- en: Genuinely random numbers are hard to generate in software. Most random number
    generation algorithms use environmental factors (such as the system’s clock time)
    as *seeds* to generate their random numbers. If an attacker can determine enough
    of the seed values (or reduce them to a reasonable number of potential values),
    they can enumerate potentially valid session IDs and test them against your server.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 生成真正的随机数在软件中是很困难的。大多数随机数生成算法使用环境因素（例如系统的时钟时间）作为*种子*来生成随机数。如果攻击者能够确定足够的种子值（或者将其减少到合理的潜在值范围），他们可以枚举可能的有效会话ID并与服务器进行测试。
- en: Early versions of the standard Apache Tomcat server were found to be vulnerable
    to this type of attack. Security researchers discovered that the seeds of the
    random session ID generation algorithm were the system time and the hashcode of
    an in-memory object. The researchers were able to use these seeds to narrow the
    potential input values in such a way that they could reliably guess session IDs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 早期版本的标准 Apache Tomcat 服务器被发现容易受到这种类型的攻击。安全研究人员发现，随机会话 ID 生成算法的种子是系统时间和内存中的对象的哈希码。研究人员能够利用这些种子来缩小潜在的输入值范围，从而可靠地猜测出会话
    ID。
- en: Consult your web server’s documentation and ensure that it uses large session
    IDs that can’t be guessed, generated by a strong random number generation algorithm.
    Because security researchers frequently discover weak session ID algorithms before
    attackers can exploit them, make sure to also stay on top of security advisories,
    which will tell you when you need to patch vulnerabilities in your web stack.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅你的 web 服务器文档，确保它使用无法猜测的大型会话 ID，这些 ID 应由强大的随机数生成算法生成。由于安全研究人员常常在攻击者利用之前发现弱的会话
    ID 算法，因此你还需要关注安全公告，及时了解何时需要修补 web 堆栈中的漏洞。
- en: '**Summary**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: When a website successfully authenticates a user, the browser and the server
    open a session between them. Session state can be stored on the server side, or
    stored on the client side as an encrypted or digitally signed cookie.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个网站成功验证用户身份时，浏览器和服务器之间会建立一个会话。会话状态可以存储在服务器端，或者以加密或数字签名的 cookie 形式存储在客户端。
- en: Hackers will attempt to steal your session cookies, so you should ensure they’re
    protected. To protect against session hijacking via cross-site scripting, make
    sure your cookies aren’t accessible to JavaScript code. To protect against session
    hijacking via man-in-the-middle attacks, make sure your cookies are passed only
    over HTTPS connections. To protect against session hijacking via cross-site request
    forgery, make sure to strip sensitive cross-site requests of cookies. You can
    add these protections by using the keywords `HttpOnly`, `SecureOnly`, and `SameSite`,
    respectively, when you write out your `Set-Cookie` header in the HTTP response.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客会尝试窃取你的会话 cookie，因此你应该确保它们得到保护。为了防止通过跨站脚本攻击（XSS）进行会话劫持，确保你的 cookie 对 JavaScript
    代码不可访问。为了防止通过中间人攻击（MITM）进行会话劫持，确保你的 cookie 仅通过 HTTPS 连接传递。为了防止通过跨站请求伪造（CSRF）进行会话劫持，确保在跨站请求中去除
    cookie。你可以通过在 HTTP 响应中的 `Set-Cookie` 头部使用 `HttpOnly`、`SecureOnly` 和 `SameSite`
    这几个关键词来添加这些保护。
- en: Older web servers may be vulnerable to session-fixation attacks, so be sure
    to disable URL rewriting as a way of passing session IDs. Occasionally, web servers
    are found to use guessable session IDs, so stay aware of security advisories for
    your software stack and patch it as required.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧的 web 服务器可能容易受到会话固定攻击，因此一定要禁用通过 URL 重写传递会话 ID 的方式。有时，web 服务器会使用可猜测的会话 ID，因此要时刻关注软件堆栈的安全公告，并根据需要进行修补。
- en: In the next chapter, you will look at how to correctly implement access control,
    so malicious users can’t access your content or perform actions they aren’t supposed
    to.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何正确实现访问控制，以便防止恶意用户访问你的内容或执行他们不应执行的操作。
