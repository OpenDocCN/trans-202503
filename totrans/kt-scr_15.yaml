- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: APPENDIX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/icon.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This appendix provides an overview of basic computing terms and concepts you’ll
    need to understand before creating programs and apps. It also walks you through
    setting up your computer so you can run the Kotlin code in projects throughout
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to programming, I recommend reviewing this appendix to be sure
    you have the necessary background knowledge and workspace setup.
  prefs: []
  type: TYPE_NORMAL
- en: Key Definitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I’ll introduce a few key terms that are fundamental to understanding
    what a computer program is and how it works. The code we write relies on a bigger
    ecosystem of software (other programs such as the operating system and the compiler)
    and hardware (the computer) to be able to run and generate the desired output.
  prefs: []
  type: TYPE_NORMAL
- en: An *operating system (OS)* is a software program that serves as an intermediary
    between computer hardware and user applications. Popular operating systems include
    Microsoft Windows, macOS, Linux, and Android, each tailored to specific devices
    and computing environments. An OS manages and controls various hardware resources—such
    as memory, processors, input/output devices, and storage—which provide a standardized
    interface for software programs to interact with the underlying hardware. It enables
    multiple applications to run concurrently, ensuring efficient and secure utilization
    of system resources.
  prefs: []
  type: TYPE_NORMAL
- en: A *computer program*, often referred to as *software* or an *app*, is a set
    of instructions that directs a computer to perform specific tasks. Programmers
    write these instructions to solve problems, automate processes, or execute desired
    computations. Once written, the program is typically translated into *machine
    code* or an *intermediate code* by a compiler or interpreter to make it executable
    on a computer. Examples of computer programs include word processors, web browsers,
    games, and operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: To write computer programs, we use a *programming language*, a set of rules
    and symbols that can be understood and executed by a computer system. Examples
    include Kotlin, Python, Java, C/C++, JavaScript, Rust, and Go. Programming languages
    differ in syntax (the rules for writing programs), semantics (the meaning and
    behavior of programs), and level of abstraction (how close the language is to
    the format that the hardware can follow). Each language has its advantages and
    limitations, making it more or less suitable for different tasks such as web development,
    system programming, data analysis, or artificial intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: A *library* is a collection of prewritten code modules or functions that programmers
    can use to perform common tasks. A *standard library* is an integral part of a
    programming language, bundled with its core distribution to provide the standardized
    functionality expected to be available on any system. It includes essential modules
    for tasks like input/output, data manipulation, printing, and networking. Libraries
    can facilitate reusing code, save time, and allow developers to build on existing
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: A *text editor* is a software application designed for creating, modifying,
    and formatting plain text files. Unlike word processors, which often include advanced
    formatting and layout features, text editors are focused on the fundamental task
    of working with unformatted text. Text editors are commonly used by software developers
    for writing code, as they provide a lightweight and distraction-free environment.
    Popular text editors include Notepad on Windows, TextEdit on macOS, and Vim on
    Linux. Also available are editors that have been customized for multiple platforms,
    such as Notepadd++ and Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: An *integrated development environment (IDE)* is a comprehensive software tool
    designed to streamline and enhance the process of software development. It typically
    provides a unified environment that integrates various essential tools and features,
    including a text editor, a debugger, a compiler, and build automation tools. Modern
    IDEs also include features such as syntax highlighting, code completion, and project
    management. Popular IDEs include Visual Studio Code, Eclipse, and IntelliJ IDEA,
    each catering to specific programming languages and development environments.
    We’ll use IntelliJ IDEA for completing all coding tasks in this book because it
    offers built-in support for Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: A *compiler* is a software tool that translates source code written in a high-level
    programming language into machine code or an intermediate code that can be executed
    directly by a computer or in various environments, such as the Java Virtual Machine
    (which we’ll discuss shortly). The compilation process involves several stages,
    including lexical analysis, syntax analysis, semantic analysis, optimization,
    and code generation.
  prefs: []
  type: TYPE_NORMAL
- en: '*Debugging* is the process of finding and fixing errors (bugs) in a computer
    program. It involves analyzing the code and using debugging tools and techniques
    to find the cause of unexpected or incorrect results. Debugging is a systematic
    and iterative task that requires technical skills, problem-solving abilities,
    and a good grasp of the software’s logic.'
  prefs: []
  type: TYPE_NORMAL
- en: The *Java Development Kit (JDK)* is a software development kit used by Java
    and Kotlin developers for building, testing, and deploying applications. The JDK
    includes a set of tools and utilities that facilitate programming, including a
    compiler, a debugger, and other development tools. It also includes the *Java
    Runtime Environment (JRE)*, which is necessary for running Java/Kotlin applications.
    The JRE lacks a compiler and thus is used only to run precompiled Java or Kotlin
    programs. To create new programs, you’ll need a JDK.
  prefs: []
  type: TYPE_NORMAL
- en: The *Java Virtual Machine (JVM)* is a crucial component of the JRE and the JDK,
    serving as an abstraction layer between Java/Kotlin applications and the underlying
    hardware and operating system. It enables the execution of Java *bytecode*, the
    compiled form of Java or Kotlin source code. The JVM provides platform independence,
    allowing Java/Kotlin programs to run on any device with a compatible JVM. It manages
    memory and security features, as well as provides an execution environment for
    compatible applications by interpreting bytecode or using just-in-time compilation
    for optimized performance.
  prefs: []
  type: TYPE_NORMAL
- en: An *executable file* is a stand-alone file that can run on a computer and perform
    certain tasks. An executable file contains the machine code that the computer’s
    hardware can understand and execute, as well as information about how the code
    and data are organized in memory. Unlike a text file, an executable file is not
    human readable, because it is compiled from other files, such as source code files
    written in languages like Fortran, C, or C++. Examples of executable files are
    EXE files on Windows and APP files on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow for Creating an App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a Kotlin app typically involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  **Set up the project.** Use an IDE like IntelliJ IDEA to create a new Kotlin
    project. Choose the target platform (such as the JVM) and build system (such as
    Maven or Gradle). A build system automates compiling, testing, and packaging code
    into an executable form. Most of the time, the IDE’s default choices work well.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  **Code in Kotlin.** Use Kotlin to write the app logic. The IDE will typically
    autosave the code file in a designated folder before running the code or exiting.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  **Build and compile.** Compile the Kotlin code into bytecode. You can choose
    to build and run at the same time or to just build the project to check for any
    build-time errors.
  prefs: []
  type: TYPE_NORMAL
- en: 4.  **Test.** Check the app’s quality and reliability with unit and integration
    testing. Unit testing ensures that each unit (for example, a function, a method,
    or a class) works as expected and promotes modular and clear code. Integration
    testing verifies the interactions and interfaces between components or systems
    in a larger app.
  prefs: []
  type: TYPE_NORMAL
- en: 5.  **Debug.** Use the IDE’s debugging tools to identify and fix any issues
    in the code. Set breakpoints, inspect variables, and step through the code to
    understand how it works. You can insert print statements in various code segments
    to ensure that the program logic is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 6.  **Deploy.** Package the compiled code and any resources into a deployable
    format. For this, you can create a Java Archive file from your app and its dependencies.
    A Java Archive (JAR) file is a collection of files that can be run as a Java application
    on a JVM.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Shop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can start working through the chapters in this book and building
    your own Kotlin applications, you’ll need to complete these three steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Download and Install IntelliJ IDEA'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to the IntelliJ IDEA download page (since the link to this page can change,
    find the current site with a quick internet search). Select the **Community Edition**,
    which is free to use for noncommercial purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Download the *.exe* file for Windows, the *.dmg* file for macOS, or the *.tar.gz*
    file for Linux. The file will be downloaded to your default download folder. Windows
    and Mac users can double-click the downloaded file to start the installation;
    the installation wizard will guide you through the process. Installing IntelliJ
    IDEA on a Linux device requires additional steps, depending on the type of Linux
    powering your device. You can look up installation instructions for your specific
    system online.
  prefs: []
  type: TYPE_NORMAL
- en: '### Step 2: Download and Set Up the JDK'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll need to install a JDK. I recommend using a version of the Azul
    Zulu JDK that comes bundled with the JavaFX graphics library, which will let you
    work on this book’s visualization projects without any further installation steps.
    I’ll guide you through this process and show you an example of how to do it on
    Windows devices. The steps for Mac devices should be very similar, but you can
    always look online for more detailed instructions if you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Find the Download Azul JDKs page via a quick internet search. Choose the latest
    Long-Term Support (LTS) version for Windows. Choose the type of device (CPU)—the
    most common type at the time of writing is x86-64-bit— and choose **JDK FX** as
    the Java package type.
  prefs: []
  type: TYPE_NORMAL
- en: WARNING
  prefs: []
  type: TYPE_NORMAL
- en: '*Be sure to choose JDK FX and and not just JDK as the package type or the installation
    won’t include JavaFX.*'
  prefs: []
  type: TYPE_NORMAL
- en: Select **.*****msi*** as the file type for downloading. Once you select the
    file type, the download process should start automatically, and the file should
    be saved in your default download folder.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, double-click the downloaded file to start the installation. The installation
    wizard will take you through the process. You don’t have to make any changes to
    the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: Another JDK package that comes bundled with JavaFX is BellSoft Liberica Full
    JDK. You can install it the same way. Alternatively, you can separately install
    the core Java SDK and OpenFX, an open source version of JavaFX. Refer to the respective
    websites for detailed instructions on the installation process and how to configure
    your IDE to use these installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Create a New Project'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’re now ready to create your very first “Hello, world!” app in Kotlin. For
    this, you’ll need to set up a new project. This section shows you how to proceed
    on a Windows device. The steps for other systems are very similar.
  prefs: []
  type: TYPE_NORMAL
- en: Launch IntelliJ IDEA by clicking the desktop icon or from the Start menu (you
    can use the search box to locate the program). In the left panel, Projects should
    be selected by default (if not, select this). Next, click the **New Project**
    button in the top right of the window. Your screen should now look similar to
    [Figure A-1](#figA-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/FigureA-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-1: Setting up a new Kotlin project'
  prefs: []
  type: TYPE_NORMAL
- en: Enter **HelloWorld** as the project name (no spaces), and then select **Kotlin**
    as the Language and **Maven** or **Gradle** as the Build system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must also select the JDK required for compiling and running your code.
    If the installed Azul Zulu JDK is not preselected, open the drop-down menu by
    clicking the downward-pointing triangle, navigate to the folder where the JDK
    is installed, and select that folder. The location of the JDK might look like
    this: *C:\Program Files\Zulu\zulu-xx* (the last two digits represent the version
    number).'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** to make the IDE configure a new Kotlin project for you. This
    should bring you to the next screen, which shows the newly created project “HelloWorld”
    in the left panel.
  prefs: []
  type: TYPE_NORMAL
- en: Expand the Project tree by repeatedly clicking **>** next to the project and
    its branch names until you see an empty folder named *kotlin*. Right-click ***kotlin***
    and select **New****Kotlin class/File****File**. Your screen should look similar
    to [Figure A-2](#figA-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/FigureA-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-2: Creating a Kotlin file'
  prefs: []
  type: TYPE_NORMAL
- en: Enter **HelloWorld** in the filename box and press ENTER (the IDE should add
    *.kt* as an extension to the filename). You should be taken to the IDE code editor
    window, as shown in [Figure A-3](#figA-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/FigureA-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-3: Starting to code in the code editor window'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re only a few steps away from writing and running your first Kotlin code.
    Enter the following lines of code in the code editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code creates the main() function, the entry point for any Kotlin program.
    We use the fun keyword to declare a function and define the function’s body within
    a pair of curly brackets.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the function, we use // to write a *comment*, a block of text that is
    ignored by the compiler but tells the human user what a particular line or block
    of code will do. Finally, we use the println() method, which is part of the standard
    Kotlin library, to print a message in the *console* (a text-based output window).
  prefs: []
  type: TYPE_NORMAL
- en: You can run this code by pressing SHIFT-F10 or by clicking the right-pointing
    green triangle next to Current File in the top panel. You can also use the Run
    menu to run this program. Why not try out all these options? Once you’ve run the
    program, the screen should look something like that shown in [Figure A-4](#figA-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/FigureA-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-4: Printing “Hello, world!” in Kotlin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the console along the bottom of the window. It displays the single line
    of output produced by this program: Hello, world!'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on successfully composing and running your first Kotlin application!
    You’re now ready to start exploring the world of Kotlin.
  prefs: []
  type: TYPE_NORMAL
