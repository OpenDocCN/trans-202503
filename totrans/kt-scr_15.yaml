- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: APPENDIX
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/icon.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/icon.jpg)'
- en: This appendix provides an overview of basic computing terms and concepts you’ll
    need to understand before creating programs and apps. It also walks you through
    setting up your computer so you can run the Kotlin code in projects throughout
    this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录提供了在创建程序和应用之前你需要了解的基本计算机术语和概念概览。它还将指导你如何设置计算机，以便你可以在本书中的项目中运行 Kotlin 代码。
- en: If you are new to programming, I recommend reviewing this appendix to be sure
    you have the necessary background knowledge and workspace setup.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是编程新手，建议你先浏览本附录，确保你拥有必要的背景知识和工作环境设置。
- en: Key Definitions
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键定义
- en: In this section, I’ll introduce a few key terms that are fundamental to understanding
    what a computer program is and how it works. The code we write relies on a bigger
    ecosystem of software (other programs such as the operating system and the compiler)
    and hardware (the computer) to be able to run and generate the desired output.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我将介绍一些基本术语，这些术语对于理解计算机程序是什么以及它是如何工作的至关重要。我们编写的代码依赖于一个更大的软件（操作系统和编译器等其他程序）和硬件（计算机）生态系统，才能运行并生成所需的输出。
- en: An *operating system (OS)* is a software program that serves as an intermediary
    between computer hardware and user applications. Popular operating systems include
    Microsoft Windows, macOS, Linux, and Android, each tailored to specific devices
    and computing environments. An OS manages and controls various hardware resources—such
    as memory, processors, input/output devices, and storage—which provide a standardized
    interface for software programs to interact with the underlying hardware. It enables
    multiple applications to run concurrently, ensuring efficient and secure utilization
    of system resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作系统（OS）*是一个软件程序，充当计算机硬件与用户应用程序之间的中介。常见的操作系统包括 Microsoft Windows、macOS、Linux
    和 Android，每个操作系统都针对特定的设备和计算环境进行定制。操作系统管理和控制各种硬件资源——如内存、处理器、输入/输出设备和存储——为软件程序提供与底层硬件交互的标准化接口。它使多个应用程序能够并行运行，确保系统资源的高效和安全使用。'
- en: A *computer program*, often referred to as *software* or an *app*, is a set
    of instructions that directs a computer to perform specific tasks. Programmers
    write these instructions to solve problems, automate processes, or execute desired
    computations. Once written, the program is typically translated into *machine
    code* or an *intermediate code* by a compiler or interpreter to make it executable
    on a computer. Examples of computer programs include word processors, web browsers,
    games, and operating systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*计算机程序*，通常称为*软件*或*应用程序*，是一组指令，指示计算机执行特定任务。程序员编写这些指令来解决问题、自动化流程或执行所需的计算。一旦编写完成，程序通常会通过编译器或解释器被翻译成*机器码*或*中间代码*，以便在计算机上执行。计算机程序的示例包括文字处理软件、网页浏览器、游戏和操作系统。'
- en: To write computer programs, we use a *programming language*, a set of rules
    and symbols that can be understood and executed by a computer system. Examples
    include Kotlin, Python, Java, C/C++, JavaScript, Rust, and Go. Programming languages
    differ in syntax (the rules for writing programs), semantics (the meaning and
    behavior of programs), and level of abstraction (how close the language is to
    the format that the hardware can follow). Each language has its advantages and
    limitations, making it more or less suitable for different tasks such as web development,
    system programming, data analysis, or artificial intelligence.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写计算机程序，我们使用*编程语言*，这是一组计算机系统能够理解和执行的规则与符号。示例包括 Kotlin、Python、Java、C/C++、JavaScript、Rust
    和 Go。编程语言在语法（编写程序的规则）、语义（程序的含义和行为）和抽象层次（语言与硬件可以遵循的格式之间的距离）上有所不同。每种语言都有其优缺点，使其在不同任务中（如网页开发、系统编程、数据分析或人工智能）更适合或不适合。
- en: A *library* is a collection of prewritten code modules or functions that programmers
    can use to perform common tasks. A *standard library* is an integral part of a
    programming language, bundled with its core distribution to provide the standardized
    functionality expected to be available on any system. It includes essential modules
    for tasks like input/output, data manipulation, printing, and networking. Libraries
    can facilitate reusing code, save time, and allow developers to build on existing
    solutions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*库* 是一组预先编写的代码模块或函数，程序员可以用它们来执行常见的任务。*标准库* 是编程语言的一个核心组成部分，通常与语言的核心分发包一起提供，以提供在任何系统上都能使用的标准化功能。它包括用于输入/输出、数据处理、打印和网络等任务的基本模块。库可以促进代码的重用，节省时间，并允许开发人员基于现有的解决方案进行构建。'
- en: A *text editor* is a software application designed for creating, modifying,
    and formatting plain text files. Unlike word processors, which often include advanced
    formatting and layout features, text editors are focused on the fundamental task
    of working with unformatted text. Text editors are commonly used by software developers
    for writing code, as they provide a lightweight and distraction-free environment.
    Popular text editors include Notepad on Windows, TextEdit on macOS, and Vim on
    Linux. Also available are editors that have been customized for multiple platforms,
    such as Notepadd++ and Sublime Text.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*文本编辑器* 是一种用于创建、修改和格式化纯文本文件的软件应用程序。与通常包含高级格式化和布局功能的文字处理器不同，文本编辑器专注于处理未格式化文本的基本任务。文本编辑器通常被软件开发人员用于编写代码，因为它们提供了一个轻量且无干扰的环境。流行的文本编辑器包括
    Windows 上的 Notepad、macOS 上的 TextEdit 和 Linux 上的 Vim。还有一些为多平台定制的编辑器，如 Notepad++
    和 Sublime Text。'
- en: An *integrated development environment (IDE)* is a comprehensive software tool
    designed to streamline and enhance the process of software development. It typically
    provides a unified environment that integrates various essential tools and features,
    including a text editor, a debugger, a compiler, and build automation tools. Modern
    IDEs also include features such as syntax highlighting, code completion, and project
    management. Popular IDEs include Visual Studio Code, Eclipse, and IntelliJ IDEA,
    each catering to specific programming languages and development environments.
    We’ll use IntelliJ IDEA for completing all coding tasks in this book because it
    offers built-in support for Kotlin.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成开发环境（IDE）* 是一种全面的软件工具，旨在简化和增强软件开发过程。它通常提供一个统一的环境，集成了多个必要的工具和功能，包括文本编辑器、调试器、编译器和构建自动化工具。现代
    IDE 还包括语法高亮、代码补全和项目管理等功能。流行的 IDE 包括 Visual Studio Code、Eclipse 和 IntelliJ IDEA，每种都针对特定的编程语言和开发环境。我们将在本书中完成所有编码任务时使用
    IntelliJ IDEA，因为它提供对 Kotlin 的内建支持。'
- en: A *compiler* is a software tool that translates source code written in a high-level
    programming language into machine code or an intermediate code that can be executed
    directly by a computer or in various environments, such as the Java Virtual Machine
    (which we’ll discuss shortly). The compilation process involves several stages,
    including lexical analysis, syntax analysis, semantic analysis, optimization,
    and code generation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译器* 是一种将用高级编程语言编写的源代码转换为机器代码或中间代码的软件工具，这些代码可以直接由计算机执行，或者在不同的环境中执行，如 Java
    虚拟机（我们稍后将讨论）。编译过程包括多个阶段，包括词法分析、语法分析、语义分析、优化和代码生成。'
- en: '*Debugging* is the process of finding and fixing errors (bugs) in a computer
    program. It involves analyzing the code and using debugging tools and techniques
    to find the cause of unexpected or incorrect results. Debugging is a systematic
    and iterative task that requires technical skills, problem-solving abilities,
    and a good grasp of the software’s logic.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*调试* 是查找并修复计算机程序中的错误（bug）过程。它涉及分析代码，并使用调试工具和技术找到意外或错误结果的原因。调试是一个系统的、迭代的任务，需要技术技能、解决问题的能力以及对软件逻辑的良好理解。'
- en: The *Java Development Kit (JDK)* is a software development kit used by Java
    and Kotlin developers for building, testing, and deploying applications. The JDK
    includes a set of tools and utilities that facilitate programming, including a
    compiler, a debugger, and other development tools. It also includes the *Java
    Runtime Environment (JRE)*, which is necessary for running Java/Kotlin applications.
    The JRE lacks a compiler and thus is used only to run precompiled Java or Kotlin
    programs. To create new programs, you’ll need a JDK.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Java开发工具包（JDK）* 是 Java 和 Kotlin 开发人员用来构建、测试和部署应用程序的软件开发工具包。JDK 包含一组有助于编程的工具和实用程序，包括编译器、调试器以及其他开发工具。它还包括
    *Java运行时环境（JRE）*，这是运行 Java/Kotlin 应用程序所必需的。JRE 没有编译器，因此只能用来运行预编译的 Java 或 Kotlin
    程序。要创建新的程序，你需要 JDK。'
- en: The *Java Virtual Machine (JVM)* is a crucial component of the JRE and the JDK,
    serving as an abstraction layer between Java/Kotlin applications and the underlying
    hardware and operating system. It enables the execution of Java *bytecode*, the
    compiled form of Java or Kotlin source code. The JVM provides platform independence,
    allowing Java/Kotlin programs to run on any device with a compatible JVM. It manages
    memory and security features, as well as provides an execution environment for
    compatible applications by interpreting bytecode or using just-in-time compilation
    for optimized performance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Java虚拟机（JVM）* 是 JRE 和 JDK 的关键组成部分，它充当 Java/Kotlin 应用程序与底层硬件和操作系统之间的抽象层。它使得
    Java *字节码*（Java 或 Kotlin 源代码的编译形式）的执行成为可能。JVM 提供平台独立性，使 Java/Kotlin 程序能够在任何支持
    JVM 的设备上运行。它管理内存和安全功能，并通过解释字节码或使用即时编译来优化性能，为兼容的应用程序提供执行环境。'
- en: An *executable file* is a stand-alone file that can run on a computer and perform
    certain tasks. An executable file contains the machine code that the computer’s
    hardware can understand and execute, as well as information about how the code
    and data are organized in memory. Unlike a text file, an executable file is not
    human readable, because it is compiled from other files, such as source code files
    written in languages like Fortran, C, or C++. Examples of executable files are
    EXE files on Windows and APP files on macOS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*可执行文件* 是一个独立的文件，可以在计算机上运行并执行特定任务。可执行文件包含计算机硬件可以理解和执行的机器代码，以及有关如何在内存中组织代码和数据的信息。与文本文件不同，可执行文件不可供人类阅读，因为它是从其他文件（如用
    Fortran、C 或 C++ 编写的源代码文件）编译而来的。可执行文件的例子有 Windows 系统上的 EXE 文件和 macOS 系统上的 APP 文件。'
- en: Workflow for Creating an App
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用程序的工作流程
- en: 'Creating a Kotlin app typically involves the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 Kotlin 应用程序通常包括以下步骤：
- en: 1.  **Set up the project.** Use an IDE like IntelliJ IDEA to create a new Kotlin
    project. Choose the target platform (such as the JVM) and build system (such as
    Maven or Gradle). A build system automates compiling, testing, and packaging code
    into an executable form. Most of the time, the IDE’s default choices work well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  **设置项目。** 使用像 IntelliJ IDEA 这样的 IDE 创建一个新的 Kotlin 项目。选择目标平台（例如 JVM）和构建系统（例如
    Maven 或 Gradle）。构建系统自动化了代码的编译、测试和打包为可执行形式。大多数时候，IDE 的默认选择已经足够。
- en: 2.  **Code in Kotlin.** Use Kotlin to write the app logic. The IDE will typically
    autosave the code file in a designated folder before running the code or exiting.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  **用 Kotlin 编写代码。** 使用 Kotlin 编写应用程序逻辑。在运行代码或退出之前，IDE 通常会将代码文件自动保存到指定的文件夹中。
- en: 3.  **Build and compile.** Compile the Kotlin code into bytecode. You can choose
    to build and run at the same time or to just build the project to check for any
    build-time errors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  **构建和编译。** 将 Kotlin 代码编译成字节码。你可以选择同时构建和运行，或者仅构建项目以检查任何构建时错误。
- en: 4.  **Test.** Check the app’s quality and reliability with unit and integration
    testing. Unit testing ensures that each unit (for example, a function, a method,
    or a class) works as expected and promotes modular and clear code. Integration
    testing verifies the interactions and interfaces between components or systems
    in a larger app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  **测试。** 通过单元测试和集成测试检查应用程序的质量和可靠性。单元测试确保每个单元（例如，函数、方法或类）按预期工作，并促进模块化和清晰的代码。集成测试验证组件或系统在更大应用中的交互和接口。
- en: 5.  **Debug.** Use the IDE’s debugging tools to identify and fix any issues
    in the code. Set breakpoints, inspect variables, and step through the code to
    understand how it works. You can insert print statements in various code segments
    to ensure that the program logic is working as expected.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 5. **调试。** 使用 IDE 的调试工具识别并修复代码中的问题。设置断点，检查变量，逐步执行代码以理解其工作原理。您可以在不同的代码段中插入打印语句，以确保程序逻辑按预期工作。
- en: 6.  **Deploy.** Package the compiled code and any resources into a deployable
    format. For this, you can create a Java Archive file from your app and its dependencies.
    A Java Archive (JAR) file is a collection of files that can be run as a Java application
    on a JVM.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 6. **部署。** 将编译后的代码和所有资源打包成可部署格式。为此，您可以从应用程序及其依赖项创建一个 Java 存档文件。Java 存档（JAR）文件是可以在
    JVM 上作为 Java 应用程序运行的文件集合。
- en: Setting Up Shop
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置商店
- en: Before you can start working through the chapters in this book and building
    your own Kotlin applications, you’ll need to complete these three steps.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本书的章节并构建自己的 Kotlin 应用程序之前，您需要完成这三步。
- en: 'Step 1: Download and Install IntelliJ IDEA'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：下载并安装 IntelliJ IDEA
- en: Go to the IntelliJ IDEA download page (since the link to this page can change,
    find the current site with a quick internet search). Select the **Community Edition**,
    which is free to use for noncommercial purposes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 IntelliJ IDEA 下载页面（由于此页面链接可能会更改，请通过快速的互联网搜索找到当前的网址）。选择 **Community Edition**，这是免费供非商业用途使用的版本。
- en: Download the *.exe* file for Windows, the *.dmg* file for macOS, or the *.tar.gz*
    file for Linux. The file will be downloaded to your default download folder. Windows
    and Mac users can double-click the downloaded file to start the installation;
    the installation wizard will guide you through the process. Installing IntelliJ
    IDEA on a Linux device requires additional steps, depending on the type of Linux
    powering your device. You can look up installation instructions for your specific
    system online.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Windows 的 *.exe* 文件、macOS 的 *.dmg* 文件，或 Linux 的 *.tar.gz* 文件。文件将下载到您的默认下载文件夹。Windows
    和 Mac 用户可以双击下载的文件以开始安装；安装向导将引导您完成过程。安装 IntelliJ IDEA 到 Linux 设备需要额外的步骤，具体取决于设备所使用的
    Linux 类型。您可以在线查找有关您特定系统的安装说明。
- en: '### Step 2: Download and Set Up the JDK'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '### 步骤 2：下载并设置 JDK'
- en: Next, you’ll need to install a JDK. I recommend using a version of the Azul
    Zulu JDK that comes bundled with the JavaFX graphics library, which will let you
    work on this book’s visualization projects without any further installation steps.
    I’ll guide you through this process and show you an example of how to do it on
    Windows devices. The steps for Mac devices should be very similar, but you can
    always look online for more detailed instructions if you need to.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要安装一个 JDK。我建议使用一个与 JavaFX 图形库捆绑在一起的 Azul Zulu JDK 版本，这将让您在本书的可视化项目中工作，而无需进行额外的安装步骤。我将引导您完成这一过程，并向您展示如何在
    Windows 设备上执行此操作的示例。对于 Mac 设备，步骤应该非常相似，但如果您需要，可以随时在线查找更详细的说明。
- en: Find the Download Azul JDKs page via a quick internet search. Choose the latest
    Long-Term Support (LTS) version for Windows. Choose the type of device (CPU)—the
    most common type at the time of writing is x86-64-bit— and choose **JDK FX** as
    the Java package type.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过快速的互联网搜索找到下载 Azul JDK 页面。选择最新的长期支持（LTS）版本以适应 Windows。选择设备类型（CPU）——在写作时最常见的类型是
    x86-64 位——并选择 **JDK FX** 作为 Java 包类型。
- en: WARNING
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*Be sure to choose JDK FX and and not just JDK as the package type or the installation
    won’t include JavaFX.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*确保选择 JDK FX，而不是仅选择 JDK 作为包类型，否则安装中将不包括 JavaFX。*'
- en: Select **.*****msi*** as the file type for downloading. Once you select the
    file type, the download process should start automatically, and the file should
    be saved in your default download folder.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **.*****msi*** 作为下载的文件类型。一旦选择了文件类型，下载过程应自动开始，文件将保存在您的默认下载文件夹中。
- en: Finally, double-click the downloaded file to start the installation. The installation
    wizard will take you through the process. You don’t have to make any changes to
    the default settings.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，双击下载的文件以开始安装。安装向导将引导您完成整个过程。您无需更改默认设置。
- en: Another JDK package that comes bundled with JavaFX is BellSoft Liberica Full
    JDK. You can install it the same way. Alternatively, you can separately install
    the core Java SDK and OpenFX, an open source version of JavaFX. Refer to the respective
    websites for detailed instructions on the installation process and how to configure
    your IDE to use these installations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与 JavaFX 一起捆绑的 JDK 包是 BellSoft Liberica Full JDK。你可以通过相同的方式进行安装。或者，你也可以单独安装核心的
    Java SDK 和 OpenFX，这是 JavaFX 的开源版本。有关安装过程的详细说明，以及如何配置你的 IDE 以使用这些安装，请参考相应的网站。
- en: 'Step 3: Create a New Project'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：创建新项目
- en: You’re now ready to create your very first “Hello, world!” app in Kotlin. For
    this, you’ll need to set up a new project. This section shows you how to proceed
    on a Windows device. The steps for other systems are very similar.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已准备好在 Kotlin 中创建你的第一个“Hello, world!”应用程序。为此，你需要设置一个新项目。本节将向你展示如何在 Windows
    设备上进行操作。其他系统的步骤非常相似。
- en: Launch IntelliJ IDEA by clicking the desktop icon or from the Start menu (you
    can use the search box to locate the program). In the left panel, Projects should
    be selected by default (if not, select this). Next, click the **New Project**
    button in the top right of the window. Your screen should now look similar to
    [Figure A-1](#figA-1).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击桌面图标或从开始菜单启动 IntelliJ IDEA（你可以使用搜索框定位该程序）。在左侧面板中，默认应选择“项目”（如果没有，选择它）。接下来，点击窗口右上角的**新建项目**按钮。你的屏幕现在应该类似于[图
    A-1](#figA-1)。
- en: '![](../images/FigureA-1.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-1.jpg)'
- en: 'Figure A-1: Setting up a new Kotlin project'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-1：设置一个新的 Kotlin 项目
- en: Enter **HelloWorld** as the project name (no spaces), and then select **Kotlin**
    as the Language and **Maven** or **Gradle** as the Build system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输入**HelloWorld**作为项目名称（不包含空格），然后选择**Kotlin**作为语言，**Maven**或**Gradle**作为构建系统。
- en: 'You must also select the JDK required for compiling and running your code.
    If the installed Azul Zulu JDK is not preselected, open the drop-down menu by
    clicking the downward-pointing triangle, navigate to the folder where the JDK
    is installed, and select that folder. The location of the JDK might look like
    this: *C:\Program Files\Zulu\zulu-xx* (the last two digits represent the version
    number).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须选择编译和运行代码所需的 JDK。如果安装的 Azul Zulu JDK 没有被预选中，点击下拉菜单旁的向下三角形，导航到 JDK 安装的文件夹，并选择该文件夹。JDK
    的位置可能类似于：*C:\Program Files\Zulu\zulu-xx*（最后两位数字表示版本号）。
- en: Click **Create** to make the IDE configure a new Kotlin project for you. This
    should bring you to the next screen, which shows the newly created project “HelloWorld”
    in the left panel.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**，让 IDE 为你配置一个新的 Kotlin 项目。这将带你进入下一个屏幕，在左侧面板中显示新创建的项目“HelloWorld”。
- en: Expand the Project tree by repeatedly clicking **>** next to the project and
    its branch names until you see an empty folder named *kotlin*. Right-click ***kotlin***
    and select **New****Kotlin class/File****File**. Your screen should look similar
    to [Figure A-2](#figA-2).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反复点击项目及其分支名称旁边的**>**，展开项目树，直到看到一个名为 *kotlin* 的空文件夹。右键点击 ***kotlin***，然后选择**新建****Kotlin
    类/文件****文件**。你的屏幕应该类似于[图 A-2](#figA-2)。
- en: '![](../images/FigureA-2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-2.jpg)'
- en: 'Figure A-2: Creating a Kotlin file'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-2：创建一个 Kotlin 文件
- en: Enter **HelloWorld** in the filename box and press ENTER (the IDE should add
    *.kt* as an extension to the filename). You should be taken to the IDE code editor
    window, as shown in [Figure A-3](#figA-3).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件名框中输入**HelloWorld**并按下回车键（IDE 应该会为文件名添加 *.kt* 作为扩展名）。你应该被带到 IDE 的代码编辑器窗口，如[图
    A-3](#figA-3)所示。
- en: '![](../images/FigureA-3.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-3.jpg)'
- en: 'Figure A-3: Starting to code in the code editor window'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-3：在代码编辑器窗口中开始编写代码
- en: 'You’re only a few steps away from writing and running your first Kotlin code.
    Enter the following lines of code in the code editor:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需几个步骤就能编写并运行你的第一个 Kotlin 代码。在代码编辑器中输入以下几行代码：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code creates the main() function, the entry point for any Kotlin program.
    We use the fun keyword to declare a function and define the function’s body within
    a pair of curly brackets.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了 main() 函数，它是任何 Kotlin 程序的入口点。我们使用关键字 fun 来声明一个函数，并在一对大括号内定义函数体。
- en: Inside the function, we use // to write a *comment*, a block of text that is
    ignored by the compiler but tells the human user what a particular line or block
    of code will do. Finally, we use the println() method, which is part of the standard
    Kotlin library, to print a message in the *console* (a text-based output window).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们使用 // 来编写*注释*，这是一个被编译器忽略的文本块，但它告诉人类用户某一行或代码块的作用。最后，我们使用println()方法，这是Kotlin标准库的一部分，用于在*控制台*（基于文本的输出窗口）中打印信息。
- en: You can run this code by pressing SHIFT-F10 or by clicking the right-pointing
    green triangle next to Current File in the top panel. You can also use the Run
    menu to run this program. Why not try out all these options? Once you’ve run the
    program, the screen should look something like that shown in [Figure A-4](#figA-4).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按 SHIFT-F10 或点击顶部面板中“当前文件”旁边的绿色右箭头来运行这段代码。你也可以使用运行菜单来运行这个程序。为什么不试试所有这些选项呢？运行程序后，屏幕应该会显示类似[图
    A-4](#figA-4)所示的内容。
- en: '![](../images/FigureA-4.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/FigureA-4.jpg)'
- en: 'Figure A-4: Printing “Hello, world!” in Kotlin'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-4：在 Kotlin 中打印“Hello, world！”
- en: 'Notice the console along the bottom of the window. It displays the single line
    of output produced by this program: Hello, world!'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意窗口底部的控制台。它显示了这个程序产生的单行输出：Hello, world!
- en: Congratulations on successfully composing and running your first Kotlin application!
    You’re now ready to start exploring the world of Kotlin.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你成功编写并运行了你的第一个 Kotlin 应用程序！现在你已经准备好开始探索 Kotlin 的世界了。
