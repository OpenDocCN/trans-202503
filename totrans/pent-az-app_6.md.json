["```\nPS C:\\> ➊ $keyvaults = Get-AzureRmKeyVault\nPS C:\\> foreach ($keyvault in $keyvaults)\n>> {\n>>     $vault = $keyvault.VaultName\n>>  ➋ $secrets = Get-AzureKeyVaultSecret –VaultName $vault\n>>     foreach ($secret in $secrets)\n>>     {\n>>         $value = Get-AzureKeyVaultSecret –VaultName $vault -Name $secret.Name\n>>      ➌ Write-Output \"$vault`: $($secret.Name) = $($value.SecretValueText)\"\n>>     }\n>> }\n\nshhh: BackendDbConStr = Server=mydb;Database=prod;User ID=admin;Password=1234\nshhh: password = MyB@dPassw0rd\n```", "```\n   PS C:\\> $keyvaults = Get-AzureRmKeyVault\n   PS C:\\> foreach($keyvault in $keyvaults)\n   >> {\n   >>     $vault = $keyvault.VaultName\n   >>  ➊ $keys = Get-AzureKeyVaultKey –VaultName $vault\n   >>     foreach ($key in $keys)\n   >>     {\n   >>         Write-Output $key\n   >>      ➋ Get-AzureKeyVaultKey –VaultName $vault -KeyName $key.Name\n   >>     }\n   >> }\n\n➌ Vault Name     : shhh\n➍ Name           : key1\n   Version        :\n   Id             : https://shhh.vault.azure.net:443/keys/key1\n   Enabled        : True\n➎ Expires        :\n   Not Before     :\n   Created        : 8/12/2018 4:54:07 AM\n   Updated        : 8/13/2018 6:09:15 AM\n   Purge Disabled : False\n➏ Tags           : Name       Value\n                    CreatedBy  Matt\n\n   Attributes : Microsoft.Azure.Commands.KeyVault.Models.KeyAttributes\n   Key        : {\"kid\":\"https://shhh.vault.azure.net/keys/key1/Version\",\n                 \"kty\":\"RSA\",➐\"key_ops\":[\"sign\",\"verify\",\"wrapKey\",\n                       \"unwrapKey\",\"encrypt\",\"decrypt\"],\"n\":\"4vaUgZCV3OG...\",\n                       \"e\":\"AQAB\"}\n   VaultName  : shhh\n   Name       : key1\n   Version    : ed2ebbdc51754d45b69bd6551d2d2052\n   Id         : https://shhh.vault.azure.net:443/keys/key1/Version\n```", "```\nPS C:\\temp> $keyvaults = Get-AzureRmKeyVault\nPS C:\\temp> foreach ($keyvault in $keyvaults)\n>> {\n>>     $vault = $keyvault.VaultName\n>>     $certs = Get-AzureKeyVaultCertificate –VaultName $vault\n>>     foreach ($cert in $certs)\n>>     {\n>>         $cn = $cert.Name\n>>      ➊  $c = Get-AzureKeyVaultCertificate –VaultName $vault -Name $cn\n>>         $x509 = $c.Certificate\n>>         Write-Output $c\n>>      ➋  $privkey = (Get-AzureKeyVaultSecret -VaultName $vault \n                   -Name $cn).SecretValueText\n>>         Write-Output \"Private Key:\"\n>>         Write-Output $privkey\n>>         Write-Output \"\"\n>>         Write-Output \"Exporting Public Key to $cn.cer...\"\n>>      ➌  Export-Certificate -Type CERT -Cert $x509 -FilePath \"$cn.cer\"\n>>         Write-Output \"Exporting Private Key to $cn.pfx...\"\n>>         $privbytes = [Convert]::FromBase64String($privkey)\n>>      ➍  [IO.File]::WriteAllBytes(\"$pwd\\$cn.pfx\", $privbytes)\n>>         Write-Output \"----------------------------------------------\"\n>>     }\n>> }\n\nName        : devcertificate\nCertificate : [Subject]\n                CN=test.burrough.org\n              [Issuer]\n                CN=test.burrough.org\n              [Serial Number]\n                72AF4152C9F54651B9AE039730FB1AAD\n              [Not Before]\n                8/13/2018 11:06:23 PM\n              [Not After]\n                8/13/2019 11:16:23 PM\n              [Thumbprint]\n                9C5A0E244E353369560EFBE4EDB015D3FDE54635\n\nId          : https://shhh.vault.azure.net:443/certificates/devcertificate/Id\nKeyId       : https://shhh.vault.azure.net:443/keys/devcertificate/Id\nSecretId    : https://shhh.vault.azure.net:443/secrets/devcertificate/Id\nThumbprint  : 9C5A0E244E353369560EFBE4EDB015D3FDE54635\nTags        :\nEnabled     : True\nCreated     : 8/14/2018 6:16:23 AM\nUpdated     : 8/14/2018 6:16:23 AM\n\nPrivate Key:\nMIIKTAIBAzCCCgwGCSqGSIb3DQEHAaCCCf0Eggn5MIIJ9TCCBhYGCSqGSIb3DQEHAaCCBgcEggYD\n--snip--\nExporting Public Key to devcertificate.cer...\nLastWriteTime : 8/14/2018 9:23:48 PM\nLength        : 834\nName          : devcertificate.cer\n\nExporting Private Key to devcertificate.pfx...\n----------------------------------------------\n```", "```\n$cred = Get-AutomationPSCredential -Name 'credential_name'\n$cred.GetNetworkCredential().username\n$cred.GetNetworkCredential().password\n```", "```\n➊ $cert = Get-AutomationCertificate -Name 'certificate_name'\n➋ $cert\n➌ $cert.PrivateKey.ToXmlString($true)\n➍ $cert.PublicKey.Key.ToXmlString($false)\n```", "```\nWrite-Output \"Hybrid Worker Computer Name: $env:COMPUTERNAME\"\nWrite-Output \"Worker running as: $(whoami)\"\nWrite-Output $host\n```"]