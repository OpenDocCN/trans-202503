["```\n[[test]]\nname = \"custom\"\npath = \"tests/custom.rs\"\nharness = false\n```", "```\n#[test]\nfn insert_just_one() {\n  let mut m = HashMap::new();\n  m.insert(42, ());\n  let full = m.table.buckets.iter().filter(Bucket::is_full).count();\n  assert_eq!(full, 1);\n}\n```", "```\nimpl RawTable {\n  #[cfg(test)]\n  pub(crate) fn buckets(&self) -> &[Bucket] {\n    &self.buckets\n  }\n}\n```", "```\nstruct BufWriter<T> {\n  #[cfg(test)]\n  write_through: usize,\n  // other fields...\n}\n\nimpl<T: Write> Write for BufWriter<T> {\n  fn write(&mut self, buf: &[u8]) -> Result<usize> {\n    // ...\n    if self.full() {\n      #[cfg(test)]\n      self.write_through += 1;\n      let n = self.inner.write(&self.buffer[..])?;\n    // ...\n  }\n}\n```", "```\n/// Completely frobnifies a number through I/O.\n///\n/// In this first example we hide the value generation.\n/// ```", "```\n///\n/// Here's an example that uses ? on multiple types\n/// and thus needs to declare the concrete error type,\n/// but we don't want to distract the user with that.\n/// We also hide the use that brings the function into scope.\n/// ```", "```\n///\n/// You could even replace an entire block of code completely,\n/// though use this _very_ sparingly:\n/// ```", "```\nfn frobnify(i: usize) -> std::io::Result<()> {\n```", "```\n```", "```\n```", "```\nlibfuzzer_sys::fuzz_target!(|data: &[u8]| {\n  if let Ok(s) = std::str::from_utf8(data) {\n      let _ = url::Url::parse(s);\n  }\n});\n```", "```\nlet mut x = 42;\nlet x: *mut i32 = &mut x;\nlet (x1, x2) = unsafe { (&mut *x, &mut *x) };\nprintln!(\"{} {}\", x1, x2);\n```", "```\nerror: Undefined Behavior: trying to reborrow for Unique at alloc1383, but parent tag <2772> does not have an appropriate item in the borrow stack\n --> src/main.rs:4:6\n  |\n4 | let (x1, x2) = unsafe { (&mut *x, &mut *x) };\n  |      ^^ trying to reborrow for Unique at alloc1383, but parent tag <2772> does not have an appropriate item in the borrow stack\n```", "```\nlet mut vs = Vec::with_capacity(4);\nlet start = std::time::Instant::now();\nfor i in 0..4 {\n  vs.push(i);\n}\nprintln!(\"took {:?}\", start.elapsed());\n```", "```\nlet mut vs = Vec::with_capacity(4);\nlet start = std::time::Instant::now();\nfor i in 0..4 {\n  black_box(vs.as_ptr());\n  vs.push(i);\n  black_box(vs.as_ptr());\n}\nprintln!(\"took {:?}\", start.elapsed());\n```", "```\nlet start = std::time::Instant::now();\nfor i in 0..1_000_000 {\n  println!(\"iteration {}\", i);\n  my_function();\n}\nprintln!(\"took {:?}\", start.elapsed());\n```"]