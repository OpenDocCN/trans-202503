- en: '11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NATURE BOX: MOTION-SENSING CAMERA'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: IN THIS CHAPTER, YOU’LL BUILD AND CODE A NATURE BOX CAMERA THAT CAN SNAP A PHOTO
    WHEN IT SENSES MOVEMENT. YOU’LL THEN PLACE THE NATURE BOX IN THE WILD TO PHOTOGRAPH
    LOCAL WILDLIFE. YOU NEVER KNOW—YOU MAY SNAP A BIRD, A BADGER, OR EVEN A FOX!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The box will contain a motion sensor. Whenever animals come close to it, the
    sensor triggers the built-in Pi Camera to take a photo. The Raspberry Pi then
    uploads each image to an online Dropbox folder for you to view and share with
    your friends. You can leave the camera running from morning to evening and see
    what kind of visitors you get ([Figure 11-1](ch11.xhtml#ch11fig01)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-1** Build a nature box that takes animal photos like this one.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: WHAT YOU’LL NEED
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few items you’ll need to complete the project:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi (You can build the nature box with any of the Pi models. The Pi
    2, 3 A+, and Zero W work well because they are small and can be hidden in a smaller
    space.)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pi Camera
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive infrared sensor (PIR)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear plastic box to hold the hardware
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropbox account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB portable battery
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drill
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SETTING UP THE PASSIVE INFRARED SENSOR
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A PIR ([Figure 11-2](ch11.xhtml#ch11fig02)) is more commonly referred to as
    a *movement detector*. It detects infrared light emitted from warm objects and
    bodies, such as humans, animals, and even vehicles; it measures changes in that
    light. You can write code to respond to the detection of certain levels of change
    and trigger events in response, such as turning on lights, sounding alarms, or
    opening doors automatically.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: As an object passes by the PIR, it emits heat that changes the surrounding temperature.
    This difference in the surrounding infrared radiation is picked up by the PIR
    and changes the internal voltage, which means it has detected something. Inside
    the sensor’s dome are small mirrors that help the PIR to detect changes in infrared
    light from as far away as 30 feet.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-2** A PIR'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Wiring the PIR
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You need just three wires to connect the PIR to the Raspberry Pi. Connect the
    VCC PIR pin, which provides power, to the 5V GPIO pin located at the top of the
    Pi’s board. The diagram in [Figure 11-3](ch11.xhtml#ch11fig03) uses the 5V pin,
    which is physical pin 2\. Connect the OUT pin to GPIO pin 4, which is physical
    pin 7, on the Pi. Then connect the ground (GND) pin on the PIR to a ground pin
    on the Pi.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-3** Wiring the PIR'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Testing the PIR
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s write a simple program to test that your PIR works correctly. Your body
    gives off heat, and when you move about, you disturb and move the heat surrounding
    your body. The code in [Listing 11-1](ch11.xhtml#ch11ex01) initializes the PIR
    and then checks for a change in heat. If the PIR detects a significant change,
    according to a threshold you’ll set, the program indicates that it has *seen you*.
    Open your Python editor and enter the code in [Listing 11-1](ch11.xhtml#ch11ex01).
    Save it as *PIR_test.py*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**LISTING 11-1** Detecting movement with the PIR'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Import the `time` module and the `RPi.GPIO` module to control and code the GPIO
    pins ❶. Because there are two GPIO pin numbering systems, define which one you’re
    using by setting the mode to `BCM`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Next, declare a variable to define the GPIO pin number you’re using to check
    for a response. This is the GPIO 4 pin that you connected to the PIR ❷. Tell the
    program to check for input on GPIO pin 4 by using `GPIO.IN`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Because this is a test program, print a line indicating that the sensor is ready
    to find you and then provide a short time delay before retrieving the data from
    the PIR. This gives you a moment to prepare before you move about or wave your
    hands, triggering the sensor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Then define a function that responds to any sensed movement or motion ❸. In
    this test program, the response is a simple statement indicating that you’ve been
    seen.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Next, the program tries to detect motion ❹. You use the `try` and `except` method
    to avoid causing an error if the PIR doesn’t work correctly or takes an odd data
    reading. This ensures that the program will continue to run if the PIR malfunctions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Then you take the reading from the PIR ❺. This code checks GPIO pin 4 to see
    whether the voltage is rising. If it is, something has triggered the PIR. So you
    use the `callback` method to run the function that responds to any sensed movement
    or motion ❸ and print `We see you`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: To keep the PIR from reading the same input multiple times, you add a 1-second
    delay ❻. This allows enough time for the PIR to reset before it checks for a change
    in temperature again. Remember that you’re looking for motion, not presence; therefore,
    the camera doesn’t have to be constantly active.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you need a way to stop the program. You add the `except` response,
    which checks whether any key on the keyboard has been pressed ❼. If it detects
    a keypress, it prints `Quit`, resets the GPIO pins, and stops the program.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Save the program and press **F5** to run it. Alternate between moving and staying
    still to make sure the PIR detects you. If you want, you can turn this into a
    game. Can you stand so still that you don’t trigger the PIR? Can you walk into
    a room without having the PIR spot you?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: SETTING UP THE PI CAMERA
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a working PIR that can detect motion, you can set up the Pi Camera to capture
    images of whatever triggers the sensor.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the Pi Camera
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you completed the Pi Camera projects in [Chapter 4](ch04.xhtml#ch04), you
    might already have the hardware set up. Use the ribbon cable to connect the camera
    to the Pi, as shown in [Figure 11-4](ch11.xhtml#ch11fig04), and remember to ensure
    that the Pi Camera is enabled in the Configuration tool. This requires you to
    restart the Raspberry Pi. If you get stuck or need more detailed instructions,
    refer to “Interfaces” on [page 16](ch01.xhtml#page_16).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-4** Setting up the Pi Camera'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New Folder to Store the Images
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To keep the nature box project organized, you’ll want to store the images and
    program files in one place. Create a new folder named *Nature_Box* by opening
    the terminal and entering the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Making a project folder will prevent your home folder from becoming cluttered
    with hundreds of images.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: WRITING THE TEST CODE
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the Pi Camera attached, you can now start a new Python file or adapt the
    code in [Listing 11-1](ch11.xhtml#ch11ex01) to make the camera take a picture
    each time the PIR senses movement. You can photograph birds, cats, or other native
    wildlife—maybe even a fox—as they move past your nature box setup. Enter the code
    in [Listing 11-2](ch11.xhtml#ch11ex02) and save it as *Cam_PIR.py*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**LISTING 11-2** Taking a picture whenever the PIR detects motion'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Edit the program code by importing the `sleep()` function from the `time` module
    and import the `picamera` class too ❶.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Then, to stop each new image from overwriting the previous one, create a variable
    to hold the current `Image_Number` ❷. Make this a global variable so you can use
    this data later in the main program function to save each file with a different
    name. Set the `Image_Number` variable to `0`, which means the first image taken
    will be named *Nature0.jpg*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Then add the `PiCamera()` function to the `camera` variable. Replace `time.sleep(2)`
    with the simpler code `sleep(2)` ❸. This is a better way of writing the code,
    as you have less text to type and therefore reduce the chance of an error. You
    can use this simpler code in your other programs and projects. It serves the same
    purpose: it pauses the program for 2 seconds, creating a small delay before the
    next line of code runs.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Next, within the `Motion_Sensing(PIR)` function, add the code to trigger the
    Pi Camera and take a picture. At ❹, you add the global variable you created at
    ❷. Then you set the camera resolution ❺ and add the code to capture the image
    ❻.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Note that the code that captures the image ❻ combines the string `"Nature"`
    and the `Image_Number` value ❷, which is currently set to `0`. This creates a
    file named *Nature0*, to which you add the *.jpg* file extension to save the image
    as *Nature0.jpg*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Then add a value of `1` to the current image value ❼, so the program will save
    the next file as *Nature1.jpg*, the following as *Nature2.jpg*, and so on until
    the program stops. You also change the final line from `time.sleep(1)` to `sleep(1)`
    ❽.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Save the program in the *Nature_Box* folder so all the images will be stored
    there, making it easy to access them later. Press **F5** to run the program. Each
    time something triggers the PIR, the Pi Camera will take a picture and save it
    in the folder. You could set up your nature box near your most prized possessions
    or chocolate stash. If anyone steals from you, you’ll have photographic evidence
    of the culprit.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: If the PIR triggers too easily, you can adjust its sensitivity. On warm days,
    tree branches can move infrared radiation around, which the PIR can pick up. If
    the box is near a road, cars driving past might alter the surrounding air.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: To avoid triggering the camera in those cases, locate the two small dials ([Figure
    11-5](ch11.xhtml#ch11fig05)) on the back of the PIR (they’re usually orange).
    One is the *Delay Time Adjust* dial, which changes how long it takes to reset
    the PIR each time it’s triggered. The other is the *Distance Adjust* dial, which
    increases or decreases the sensitivity; basically, it determines how much of a
    change in heat is required to trigger the PIR. Experiment with adjusting these
    dials to find the perfect settings for your nature box and your local environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-5** Adjusting the PIR sensitivity on the back of the PIR'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: RETRIEVING THE IMAGES FROM THE RASPBERRY PI
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you need to figure out how to retrieve your images. If you leave your hardware
    in the wild, you won’t be able to access the images until you collect your nature
    box. Depending on your setup or the type of wildlife you’re trying to monitor,
    you might want to leave it out for a few days. But waiting that long to view images
    isn’t ideal. The solution is to connect your nature box to the internet so that
    you can use the file-sharing website Dropbox and a simple Python program to upload
    each image in real time. You’ll be able to access the photos remotely by using
    a tablet, a laptop, or a mobile phone.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Dropbox Account
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you already have a Dropbox account, you can skip this step. If not, head
    over to the Dropbox website at [*https://www.dropbox.com/*](https://www.dropbox.com/)
    and register for a new account. Click **Create an account** and fill in the sign-up
    form ([Figure 11-6](ch11.xhtml#ch11fig06)). Alternatively, you can use your Google
    account details to sign up.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-6** Signing up or logging in to Dropbox'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve logged in, navigate to the Dropbox Developers page ([Figure 11-7](ch11.xhtml#ch11fig07))
    at [*https://www.dropbox.com/developers/*](https://www.dropbox.com/developers/)
    to create an app.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-7** Going to the Dropbox Developers page'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Create your app** option. Dropbox presents you with several options.
    When it prompts you to choose an API, select **Dropbox API**. Then select **App
    folder** as the access type. Name your app; I called mine *Nature Box*. Agree
    to the terms and conditions, and click the blue **Confirm** button to access the
    next page of configuration settings ([Figure 11-8](ch11.xhtml#ch11fig08)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **创建你的应用** 选项。Dropbox 会为你提供几个选项。当它提示你选择 API 时，选择 **Dropbox API**。然后选择 **应用文件夹**
    作为访问类型。为你的应用命名；我将其命名为 *Nature Box*。同意条款和条件，并点击蓝色的 **确认** 按钮以访问下一个配置设置页面（[图 11-8](ch11.xhtml#ch11fig08)）。
- en: '![Image](../images/11fig08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/11fig08.jpg)'
- en: '**FIGURE 11-8** Configuring your app’s settings'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 11-8** 配置应用程序的设置'
- en: Keep the Status row set to **Development**, and the Development users row set
    to **Only you**. This means only you will have permission to edit the app. You
    can also edit the app folder name.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 保持状态行设置为 **开发**，将开发用户行设置为 **仅限你**。这意味着只有你可以编辑该应用。你还可以编辑应用文件夹的名称。
- en: Ignore the App key and App secret rows; you don’t need these for this project.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略应用密钥和应用密钥行；此项目不需要这些。
- en: Select the **Generated access token** box to create a code that will enable
    your Raspberry Pi to send image files to the Dropbox app. You’ll need to use this
    token in your Python program later. Remember that this token keeps your account
    secure, so don’t share it with others.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **生成的访问令牌** 选项，生成一个代码，使你的 Raspberry Pi 能够将图像文件发送到 Dropbox 应用。稍后你需要在 Python
    程序中使用这个令牌。记住，这个令牌确保你的账户安全，因此不要与他人分享。
- en: With your Dropbox app set up, you can now use it to upload the nature box images.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好 Dropbox 应用后，你现在可以使用它上传自然盒子图像。
- en: Installing Dropbox for Python
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 Dropbox Python 库
- en: 'You need to install a Python Dropbox library so you can access your Dropbox
    app and folder from the Python program code. To install the required software,
    open the terminal and enter the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装一个 Python Dropbox 库，这样你就可以从 Python 程序代码访问你的 Dropbox 应用和文件夹。要安装所需的软件，请打开终端并输入以下命令：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, to make sure you’re using the newest updates, enter this command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了确保你使用的是最新的更新，输入以下命令：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a Test Program
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建测试程序
- en: Before you connect the PIR and Pi Camera to Dropbox, you need to create a simple
    program to test whether the Dropbox app and token are functioning correctly. But
    first, save a JPEG image in the *Nature_Box* folder to test with. In the program
    in [Listing 11-3](ch11.xhtml#ch11ex03), I’ve used an image of a cute squirrel
    ([Figure 11-9](ch11.xhtml#ch11fig09)) and named the file *squirrel.jpg*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将 PIR 和 Pi Camera 连接到 Dropbox 之前，你需要创建一个简单的程序来测试 Dropbox 应用和令牌是否正常工作。但首先，在
    *Nature_Box* 文件夹中保存一张 JPEG 图像以供测试。在[列表 11-3](ch11.xhtml#ch11ex03)中的程序里，我使用了一张可爱的松鼠图片（[图
    11-9](ch11.xhtml#ch11fig09)），并将文件命名为 *squirrel.jpg*。
- en: '![Image](../images/11fig09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/11fig09.jpg)'
- en: '**FIGURE 11-9** Saving an image in the *Nature_Box* folder'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 11-9** 将图像保存到 *Nature_Box* 文件夹'
- en: Open your Python editor, create a new file, and add the following code. Save
    it as *DB_uploader.py*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的 Python 编辑器，创建一个新文件，并添加以下代码。将其保存为 *DB_uploader.py*。
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**LISTING 11-3** Testing your Dropbox app and token'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 11-3** 测试你的 Dropbox 应用和令牌'
- en: Import the `dropbox` module ❶. Create a variable named `token`, and enter the
    app token you acquired earlier within quotation marks ❷. Next, create another
    variable named `dbx` to hold the `Dropbox` class ❸, which enables your Python
    program code to communicate with your Dropbox account.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `dropbox` 模块 ❶。创建一个名为 `token` 的变量，并将你之前获得的应用令牌用引号括起来 ❷。接下来，创建另一个名为 `dbx`
    的变量来存储 `Dropbox` 类 ❸，它使你的 Python 程序能够与你的 Dropbox 账户进行通信。
- en: Now you’re ready to locate and open the image file you want to upload ❹. Open
    the folder where the image is stored by using `with open`. Next, read from the
    file and use the Dropbox API to upload the image to your account ❺. Then print
    a short confirmation message ❻ so you know the file upload is complete.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你准备好定位并打开你想要上传的图像文件 ❹。通过使用 `with open` 打开图像存储的文件夹。接下来，从文件中读取并使用 Dropbox API
    上传图像到你的账户 ❺。然后打印一个简短的确认信息 ❻，以便你知道文件上传完成。
- en: Running the Program
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 运行程序
- en: Go to the Dropbox website, log in, and navigate to your app folder. Then return
    to your Raspberry Pi and run the test program. The test will attempt to upload
    your image file (in this example, the image of the squirrel), so check your Dropbox
    folder for the upload ([Figure 11-10](ch11.xhtml#ch11fig10)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Dropbox 网站，登录并导航到你的应用程序文件夹。然后返回到你的 Raspberry Pi，运行测试程序。测试将尝试上传你的图像文件（在此示例中是松鼠的图像），因此请检查你的
    Dropbox 文件夹以查看上传情况（[图 11-10](ch11.xhtml#ch11fig10)）。
- en: '![Image](../images/11fig10.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/11fig10.jpg)'
- en: '**FIGURE 11-10** The uploaded image in the *Nature_Box* folder'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 11-10** 上传到 *Nature_Box* 文件夹中的图像'
- en: CODING THE FINAL NATURE BOX
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写最终的自然盒子程序
- en: 'So far, you’ve created three separate programs: a first to test that the PIR
    is working correctly, a second to trigger the Pi Camera whenever the PIR senses
    motion, and a third to allow the Raspberry Pi to upload the images to your linked
    Dropbox folder. Now let’s combine everything you’ve learned so far in this chapter
    to make the final nature box program.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了三个独立的程序：第一个测试 PIR 是否正常工作，第二个在 PIR 检测到运动时触发 Pi Camera，第三个则允许 Raspberry
    Pi 将图像上传到你关联的 Dropbox 文件夹。现在，让我们将你本章所学的所有内容结合起来，制作最终的自然盒子程序。
- en: Setting Up the Final Program
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置最终程序
- en: Save and rename your previous *DB_uploader.py* file or start a new Python file
    and save it as *NatureBox.py*. Then enter the code in [Listing 11-4](ch11.xhtml#ch11ex04).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并重命名你之前的 *DB_uploader.py* 文件，或者开始一个新的 Python 文件并将其保存为 *NatureBox.py*。然后输入
    [Listing 11-4](ch11.xhtml#ch11ex04) 中的代码。
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**LISTING 11-4** Beginning the final nature box program'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 11-4** 开始最终的自然盒子程序'
- en: Import the `dropbox` module ❶, which lets you interact with Dropbox via the
    Python code. Also import the usual `sleep()` function to add small delays, then
    the `picamera` library, and finally the `Rpi.GPIO` module to control the PIR.
    Then you set the GPIO numbering system to `BCM`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `dropbox` 模块 ❶，该模块允许你通过 Python 代码与 Dropbox 进行交互。还需导入常用的 `sleep()` 函数以增加小的延迟，然后导入
    `picamera` 库，最后导入 `Rpi.GPIO` 模块以控制 PIR。接着，你需要将 GPIO 编号系统设置为 `BCM`。
- en: Combining the Camera and Sensor
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结合相机和传感器
- en: The next section of the code, shown in [Listing 11-5](ch11.xhtml#ch11ex05),
    combines the PIR code and the camera code, so when movement is sensed, the Pi
    Camera is triggered. It takes a picture and then creates and saves the image file.
    The first lines should be familiar to you because they’re from the *Cam_PIR.py*
    test program you created.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码部分，如[Listing 11-5](ch11.xhtml#ch11ex05)所示，结合了 PIR 代码和相机代码，所以当检测到运动时，Pi
    Camera 会被触发。它拍摄一张照片，然后创建并保存图像文件。前几行代码应该对你来说并不陌生，因为它们来自你创建的 *Cam_PIR.py* 测试程序。
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**LISTING 11-5** Capturing and saving an image'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 11-5** 捕捉并保存图像'
- en: Add a value of 1 to the image file variable ❶ (which you set to 0 earlier),
    so the first image saved is named *Nature1.jpg*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 给图像文件变量 ❶（你之前设置为 0）加 1，这样第一个保存的图像将命名为 *Nature1.jpg*。
- en: After the Pi Camera captures an image, it saves the image file, but not the
    filename. To save the filename as well, create a new variable named `pic` ❷ to
    hold the image’s filename as a string. This means the program can access it later
    when it’s selecting and uploading the image file to Dropbox.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pi Camera 捕捉图像后，它会保存图像文件，但不保存文件名。为了同时保存文件名，创建一个名为 `pic` ❷ 的新变量，将图像的文件名作为字符串存储。这意味着程序可以在稍后上传图像文件到
    Dropbox 时访问它。
- en: Creating the try and except
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 try 和 except
- en: Next, in [Listing 11-6](ch11.xhtml#ch11ex06), you use the `try` and `except`
    method. The `try` part attempts to run the section of code responsible for uploading
    the image files to Dropbox. If for some reason the nature box is unable to access
    Dropbox—say, because the site is unavailable or because the nature box is no longer
    online—the program will bypass this section by using the `except` part and continue
    to run without halting or causing an error.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 [Listing 11-6](ch11.xhtml#ch11ex06) 中，你将使用 `try` 和 `except` 方法。`try` 部分尝试运行负责将图像文件上传到
    Dropbox 的代码。如果由于某些原因自然盒子无法访问 Dropbox——比如网站不可用，或自然盒子不再在线——程序将通过 `except` 部分跳过这一部分并继续运行，而不会停止或产生错误。
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**LISTING 11-6** Saving the image filename'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 11-6** 保存图像文件名'
- en: Add your Dropbox token ❶ and assign it to a variable named `dbx` ❷, which you
    use to authenticate your account credentials and enable interaction with Dropbox.
    At ❸, open the image file that the camera just took by combining the folder location
    of the image and the `pic` variable, which holds the filename of the most recent
    image. The code `rb` opens the image as a binary file and reads the contents as
    bytes rather than strings. This is important because the file contains an image,
    not text. Then assign this data to a variable named `file`, as in the physical
    data that makes up the image in the file stored on your Raspberry Pi.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 添加你的Dropbox令牌❶并将其分配给一个名为`dbx`的变量❷，你用它来验证账户凭据并启用与Dropbox的交互。在❸处，通过将图片的文件夹位置和`pic`变量（它保存最新图片的文件名）结合起来，打开相机刚拍摄的图片。代码`rb`将图片作为二进制文件打开，并以字节形式读取其内容，而不是字符串。这一点很重要，因为文件包含的是图像，而不是文本。然后将这些数据赋值给一个名为`file`的变量，就像存储在树莓派上的文件中构成图像的实际数据。
- en: The program reads the bytes from `file` and tries to upload the data ❹. The
    code `'/Nature%s.jpg' %(Image_Number)` adds the filename to Dropbox, because the
    binary data you uploaded doesn’t contain a filename otherwise. The code `mute
    = True` prevents the user from being notified of the upload. You can imagine how
    distracting receiving hundreds of notifications about uploaded files would be.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 程序从`file`读取字节并尝试上传数据❹。代码`'/Nature%s.jpg' %(Image_Number)`将文件名添加到Dropbox，因为你上传的二进制数据本身不包含文件名。代码`mute
    = True`会防止用户收到上传通知。你可以想象，收到成百上千条上传文件的通知会是多么让人分心。
- en: 'After the upload, close the file: open files use processor resources and can
    slow your Raspberry Pi, especially if there are a lot of them. Finally, add the
    `except` section of the program’s `try` and `except` method ❺. If the program
    can’t upload the image, it responds by passing and printing a notification before
    looping back, resetting the PIR, and waiting for the sensor to be triggered again.
    The image is still saved in the *Nature_Box* folder on the Pi but just won’t be
    uploaded.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后，关闭文件：打开的文件会占用处理器资源，并且可能会减慢你的树莓派，尤其是在文件很多的情况下。最后，添加程序的`try`和`except`方法的`except`部分❺。如果程序无法上传图片，它会通过跳过并打印通知来响应，然后进入循环，重置PIR并等待传感器再次触发。图像仍然保存在树莓派的*Nature_Box*文件夹中，只是不会被上传。
- en: Running the Motion Sensor
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行运动传感器
- en: The final section of the program, shown in [Listing 11-7](ch11.xhtml#ch11ex07),
    is identical to the *PIR_test.py* program you created earlier. It tells the PIR
    to wait for an input and, upon receiving one, runs the `Motion_Sensing()` function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后部分，如[Listing 11-7](ch11.xhtml#ch11ex07)所示，与你之前创建的*PIR_test.py*程序完全相同。它指示PIR等待输入，并在接收到输入时运行`Motion_Sensing()`函数。
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**LISTING 11-7** Ending the program'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 11-7** 结束程序'
- en: 'Once you’ve copied the complete program, save and run it. Test that it’s working
    by moving around to trigger the PIR. Open your internet browser and navigate to
    your Dropbox folder to check out the uploaded images ([Figure 11-11](ch11.xhtml#ch11fig11)).
    Before you deploy your nature box into the wild, you can test your program in
    fun ways: compete with your friends to see who can walk into a room without triggering
    the sensor, or position your nature box at the front door and check to see who
    is knocking. Look for the evidence in the Dropbox folder before you decide to
    open the door!'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你复制了完整的程序，保存并运行它。通过四处移动触发PIR传感器来测试它是否工作。打开你的互联网浏览器并导航到你的Dropbox文件夹，查看上传的图片（[图11-11](ch11.xhtml#ch11fig11)）。在将你的自然盒子投入实际使用之前，你可以通过有趣的方式测试你的程序：和朋友竞争，看谁能不触发传感器进入房间，或者将你的自然盒子放在前门，检查是谁在敲门。在决定开门之前，可以先在Dropbox文件夹中寻找证据！
- en: '![Image](../images/11fig11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/11fig11.jpg)'
- en: '**FIGURE 11-11** Your photos should appear the Dropbox folder when you run
    the program.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 11-11** 当你运行程序时，你的照片应该出现在Dropbox文件夹中。'
- en: 'If the nature box doesn’t function correctly, consider the following common
    errors:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自然盒子没有正常工作，考虑以下常见错误：
- en: Is the Dropbox token used in your program correct?
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序中使用的Dropbox令牌是否正确？
- en: Is the Raspberry Pi connected to the internet? Otherwise, all image files will
    remain stored in the *Nature_Box* folder.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派是否已连接到互联网？否则，所有图像文件将保留在*Nature_Box*文件夹中。
- en: Do the folder names in the code match the actual folder names?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码中的文件夹名称是否与实际文件夹名称匹配？
- en: Do the filenames in the code match the actual filenames?
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码中的文件名是否与实际的文件名匹配？
- en: Is the PIR’s sensitivity adjusted so the proper amount of motion triggers it?
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR的灵敏度是否调整得当，以便适当的动作触发它？
- en: When uploading to Dropbox, you can’t overwrite the same file. Therefore, whenever
    you run the program again after the first time, make sure you’ve either moved
    the first batch of image files to a different folder or deleted them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: STARTING THE PROGRAM AUTOMATICALLY
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because you’ll set up the nature box outside, you won’t have a monitor attached
    to it. The program will need to execute whenever you plug power into the Raspberry
    Pi. Recall that I covered how to start programs automatically in [Chapters 7](ch07.xhtml#ch07),
    [9](ch09.xhtml#ch09), and [10](ch10.xhtml#ch10). Now you’ll do it again for the
    nature box program.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use cron to run the program automatically by creating instructions in
    the crontab file specifying what event you want to run and when you want to run
    it. Refer to [Chapter 9](ch09.xhtml#ch09) if you need a refresher on using cron.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and enter the following command to open the cron console:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The cron console presents you with three methods of editing the crontab file.
    Select option 2 and press ENTER to open the crontab file with the nano text editor.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll to the bottom of the text in the crontab file and locate the blank space.
    Then add the following code line to run the program automatically:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The command states that every time the Raspberry Pi reboots, it should run Python
    in super user mode, open the */home/pi/Nature_Box* folder, and execute your *NatureBox.py*
    program.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: If you named your code file something else, replace *NatureBox.py* with your
    filename. Also, check that the folder path is correct by opening the folder where
    your *NatureBox.py* program is stored and noting the file path.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The `&` at the end of the code line tells your program to run in the background,
    so you can do other tasks with your Raspberry Pi at the same time.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Once you have checked the command details and are confident they’re correct,
    press CTRL-X to save and exit the crontab file. Now, each time you turn on or
    reboot your Raspberry Pi, the crontab file will run, starting up the nature box.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to stop the program from automatically running, reopen the crontab
    file from the terminal and delete the line of code you added, like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then save the file and reboot.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'The nature box is designed to run without a monitor, so you don’t need the
    Raspberry Pi to boot to the desktop interface and display the background wallpaper
    and icons. Because you won’t see the desktop, you don’t need to load it. Instead,
    you can configure the Pi to boot to the command line. Open the terminal window
    and enter this command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Select the third option, **Boot Options**, and press ENTER. Then select the
    **B1 Desktop / CLI** option, followed by the **B1 Console** option. Click the
    **Save** option and then reboot your Raspberry Pi.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is set, select the **<Finish>** option and press ENTER: you’ll be
    prompted to save the config file and reboot. Press **Yes** to restart your Pi.
    As your Raspberry Pi boots up, the nature box will load. Before you place the
    box in the wild, run a quick test and check that it’s working and uploading images
    to your Dropbox account.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: PUTTING IT ALL TOGETHER
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have a working program, you can set up your box and then leave
    it in your garden, at a local park, or elsewhere. Using a plastic case for the
    box is ideal ([Figure 11-12](ch11.xhtml#ch11fig12)) because you can seal it with
    tape, and it will remain fairly watertight—although I don’t recommend that you
    lower the nature box into a pond or leave it out during a thunderstorm.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparing your nature box is fairly easy:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Use a drill to create a small hole for the camera lens to poke through.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a drill to create a larger hole so that the PIR can poke through. It’s best
    to drill a small hole to start with and then increase the size of the drill bit
    so that you don’t split the plastic. If you’re using a wooden box, this shouldn’t
    be an issue. The hole needs to be just big enough for the PIR to poke through.![Image](../images/11fig12.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 11-12** An example of the finished nature box'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use mounting putty or double-sided tape to secure the Pi Camera and PIR *inside*
    your box. Alternatively, the Pi Camera and some PIRs have small screw holes that
    you could use to mount them.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Happy nature hunting!
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WRAPPING UP
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Well done, excellent work–you now have a nature box that can sense movement,
    triggering the Pi Camera to take a picture. This image is then uploaded to your
    Dropbox account for you to view and share. Now try the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Use your setup in your bedroom to see who goes in and hopefully out.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place it near the cookie jar or your stash of chocolate to gather photographic
    evidence of who keeps stealing from you.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Purchase the Pi NoIR Camera, which can be used to take photos at night, in the
    dark.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
