- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 2 PRINCIPLES OF DATA VISUALIZATION
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: In the spring of 2021, nearly all of the American West was in a drought. Officials
    in Southern California declared a water emergency in April, citing unprecedented
    conditions. This probably didn’t come as news to residents of California and other
    western states. Drought conditions like those in the West in 2021 are becoming
    increasingly common, yet communicating the extent of the problem remains difficult.
    How can this data be presented in a way that is both accurate and compelling enough
    to get people to take notice?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization designers Cédric Scherer and Georgios Karamanis took on this
    challenge in the fall of 2021 to create a graph of US drought conditions over
    the last two decades for the magazine *Scientific American*. They turned to the
    ggplot2 package to transform dry data (pardon the pun) from the National Drought
    Center into a visually arresting and impactful visualization.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: This chapter delves into why the data visualization that Scherer and Karamanis
    created is effective and introduces you to the *grammar of graphics*, a theory
    to make sense of graphs that underlies the ggplot2 package. You’ll then learn
    how to use ggplot2 by re-creating the drought graph step-by-step. In the process,
    I’ll highlight some key principles of high-quality data visualization that you
    can use to improve your own work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The Drought Visualization
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other news organizations had relied on the same National Drought Center data
    in their stories, but Scherer and Karamanis visualized it so that it both grabs
    attention and communicates the scale of the phenomenon. [Figure 2-1](chapter2.xhtml#fig2-1)
    shows a section of the final visualization (due to space constraints, I could
    include only four regions). The graph makes apparent the increase in drought conditions
    over the last two decades, especially in California and the Southwest.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: To understand why this visualization is effective, let’s break it down. At the
    broadest level, the data visualization is notable for its minimalist aesthetic.
    For example, there are no grid lines and few text labels, as well as minimal text
    along the axes. Scherer and Karamanis removed what statistician Edward Tufte,
    in his 1983 book *The Visual Display of Quantitative Information* (Graphics Press),
    calls *chartjunk*. Tufte wrote that extraneous elements often hinder, rather than
    help, our understanding of charts (and researchers and data visualization designers
    have generally agreed).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Need proof that Scherer and Karamanis’s decluttered graph is better than the
    alternative? [Figure 2-2](chapter2.xhtml#fig2-2) shows a version with a few tweaks
    to the code to include grid lines and text labels on axes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-1.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-1: A section of the final drought visualization, with a few tweaks
    made to fit this book'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-2.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-2: The cluttered version of the drought visualization'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: It’s not just that this cluttered version looks worse; the clutter actively
    inhibits understanding. Rather than focusing on overall drought patterns (the
    point of the graph), our brains get stuck reading repetitive and unnecessary axis
    text.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: One of the best ways to reduce clutter is to break a single chart into a set
    of component charts, as Scherer and Karamanis have done (this approach, known
    as *faceting*, will be discussed further in “Faceting the Plot” on [page 36](#pg_36)).
    Each rectangle represents one region in one year. Filtering the larger chart to
    show the Southwest region in 2003 produces the graph shown in [Figure 2-3](chapter2.xhtml#fig2-3),
    where the x-axis indicates the week and the y-axis indicates the percentage of
    that region at different drought levels.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-3.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-3: A drought visualization for the Southwest in 2003'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Zooming in on a single region in a single year also makes the color choices
    more obvious. The lightest orange bars (lightest gray as printed here) show the
    percentage of the region that is abnormally dry, and the darkest purple bars (darkest
    gray as printed) show the percentage experiencing exceptional drought conditions.
    As you’ll see shortly, this range of colors was intentionally chosen to make differences
    in the drought levels visible to all readers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Despite the graph’s complexity, the R code that Scherer and Karamanis wrote
    to produce it is relatively simple, due largely to a theory called the *grammar
    of graphics*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The Grammar of Graphics
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working in Excel, you begin by selecting the type of graph you want to
    make. Need a bar chart? Click the bar chart icon. Need a line chart? Click the
    line chart icon. If you’ve only ever made charts in Excel, this first step may
    seem so obvious that you’ve never even given the data visualization process much
    thought, but in fact there are many ways to think about graphs. For example, rather
    than thinking of graph types as distinct, we can recognize and use their commonalities
    as the starting point for making them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: This approach to thinking about graphs comes from the late statistician Leland
    Wilkinson. For years, Wilkinson thought deeply about what data visualization is
    and how we can describe it. In 1999 he published a book called *The Grammar of
    Graphics* (Springer) that sought to develop a consistent way of describing all
    graphs. In it, Wilkinson argued that we should think of plots not as distinct
    types, à la Excel, but as following a grammar that we can use to describe *any*
    plot. Just as English grammar tells us that a noun is typically followed by a
    verb (which is why “he goes” works, while the opposite, “goes he,” does not),
    the grammar of graphics helps us understand why certain graph types “work.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Thinking about data visualization through the lens of the grammar of graphics
    helps highlight, for example, that graphs typically have some data that is plotted
    on the x-axis and other data that is plotted on the y-axis. This is the case whether
    the graph is a bar chart or a line chart, as [Figure 2-4](chapter2.xhtml#fig2-4)
    shows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-4.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-4: A bar chart and a line chart showing identical data'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: While the graphs look different (and would, to the Excel user, be different
    types of graphs), Wilkinson’s grammar of graphics emphasizes their similarities.
    (Incidentally, Wilkinson’s feelings on graph-making tools like Excel became clear
    when he wrote that “most charting packages channel user requests into a rigid
    array of chart types.”)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: When Wilkinson wrote his book, no data visualization tool could implement his
    grammar of graphics. This would change in 2010, when Hadley Wickham announced
    the ggplot2 package for R in the article “A Layered Grammar of Graphics,” published
    in the *Journal of Computational and* *Graphical Statistics*. By providing the
    tools to implement Wilkinson’s ideas, ggplot2 would come to revolutionize the
    world of data visualization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Working with ggplot
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ggplot2 R package (which I, like nearly everyone in the data visualization
    world, will refer to simply as *ggplot*) relies on the idea of plots having multiple
    layers. This section will walk you through some of the most important ones. You’ll
    begin by selecting variables to map to aesthetic properties. Then you’ll choose
    a geometric object to use to represent your data. Next, you’ll change the aesthetic
    properties of your chart (its color scheme, for example) using a scale_ function.
    Finally, you’ll use a theme_ function to set the overall look and feel of your
    plot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Mapping Data to Aesthetic Properties
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create a graph with ggplot, you begin by mapping data to aesthetic properties.
    All this really means is that you use elements like the x- or y-axis, color, and
    size (the so-called *aesthetic properties*) to represent variables. You’ll use
    the data on life expectancy in Afghanistan, introduced in [Figure 2-4](chapter2.xhtml#fig2-4),
    to generate a plot. To access this data, enter the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code first loads the tidyverse package, introduced in [Chapter 1](chapter1.xhtml),
    and then uses the read_csv() function to access data from the book’s website and
    assign it to the gapminder_10_rows object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting gapminder_10_rows tibble looks like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This output is a shortened version of the full gapminder data frame, which includes
    over 1,700 rows of data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Before making a chart with ggplot, you need to decide which variable to put
    on the x-axis and which to put on the y-axis. For data showing change over time,
    it’s common to put the date (in this case, year) on the x-axis and the changing
    value (in this case, lifeExp) on the y-axis. To do so, define the ggplot() function
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This function contains numerous arguments. Each argument goes on its own line,
    for the sake of readability, separated by commas. The data argument tells R to
    use the data frame gapminder_10_rows, and the mapping argument maps year to the
    x-axis and lifeExp to the y-axis.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数包含许多参数。每个参数单独占一行，以提高可读性，参数之间用逗号分隔。data 参数告诉 R 使用数据框 gapminder_10_rows，mapping
    参数将 year 映射到 x 轴，lifeExp 映射到 y 轴。
- en: Running this code produces the chart in [Figure 2-5](chapter2.xhtml#fig2-5),
    which doesn’t look like much yet.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码生成了[图 2-5](chapter2.xhtml#fig2-5)中的图表，虽然看起来还不怎么特别。
- en: '![](../images/fig2-5.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-5.jpg)'
- en: 'Figure 2-5: A blank chart that maps year values to the x-axis and life expectancy
    values to the y-axis'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：一个空白图表，将年份值映射到 x 轴，将预期寿命值映射到 y 轴
- en: Notice that the x-axis corresponds to year and the y-axis corresponds to lifeExp,
    and the values on both axes match the scope of the data. In the gapminder_10_rows
    data frame, the first year is 1952 and the last year is 1997\. The range of the
    x-axis has been created with this data in mind. Likewise, the values for lifeExp,
    which go from about 28 to about 42, will fit nicely on the y-axis.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，x 轴对应年份，y 轴对应预期寿命，并且两个轴上的数值与数据的范围相匹配。在 gapminder_10_rows 数据框中，第一年是 1952
    年，最后一年是 1997 年。x 轴的范围是根据这些数据创建的。同样，预期寿命（lifeExp）的数值从约 28 上升到约 42，能够很好地适配到 y 轴上。
- en: Choosing the Geometric Objects
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选择几何对象
- en: 'Axes are nice, but the graph is missing any type of visual representation of
    the data. To get this, you need to add the next ggplot layer: geoms. Short for
    *geometric objects*, *geoms* are functions that provide different ways of representing
    data. For example, to add points to the graph, you use geom_point():'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标轴很好，但图表缺乏任何类型的数据可视化表示。要获得这些，你需要添加下一个 ggplot 层：几何对象（geoms）。*几何对象*（*geoms*）是提供不同数据表示方式的函数。例如，要向图表中添加点，可以使用
    geom_point()：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now the graph shows that people in 1952 had a life expectancy of about 28 and
    that this value rose every year in the dataset (see [Figure 2-6](chapter2.xhtml#fig2-6)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表显示，1952 年的人均预期寿命约为 28 岁，并且数据集中的每一年这个值都有所上升（见[图 2-6](chapter2.xhtml#fig2-6)）。
- en: '![](../images/fig2-6.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-6.jpg)'
- en: 'Figure 2-6: The life expectancy chart with points added'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6：添加了点的预期寿命图表
- en: 'Say you change your mind and want to make a line chart instead. All you have
    to do is replace geom_point() with geom_line() like so:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你改变主意，想改为绘制线图。只需将 geom_point() 替换为 geom_line()，如下所示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Figure 2-7](chapter2.xhtml#fig2-7) shows the result.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-7](chapter2.xhtml#fig2-7) 显示了结果。'
- en: '![](../images/fig2-7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-7.jpg)'
- en: 'Figure 2-7: The same data as a line chart'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-7：相同数据的线图
- en: 'To really get fancy, you could add both geom_point() and geom_line() as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让图表更加精美，可以同时添加 geom_point() 和 geom_line()，如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code generates a line chart with points, as shown in [Figure 2-8](chapter2.xhtml#fig2-8).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成了带点的线图，如[图 2-8](chapter2.xhtml#fig2-8)所示。
- en: '![](../images/fig2-8.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-8.jpg)'
- en: 'Figure 2-8: The same data with both points and a line'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-8：包含点和线的相同数据
- en: 'You can swap in geom_col() to create a bar chart:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用 geom_col() 来创建一个条形图：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice in [Figure 2-9](chapter2.xhtml#fig2-9) that the y-axis range has been
    automatically updated, going from 0 to 40 to account for the different geom.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在[图 2-9](chapter2.xhtml#fig2-9)中，y 轴的范围已自动更新，从 0 到 40，以适应不同的几何对象（geom）。
- en: '![](../images/fig2-9.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-9.jpg)'
- en: 'Figure 2-9: The life expectancy data as a bar chart'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-9：以条形图表示的预期寿命数据
- en: As you can see, the difference between a line chart and a bar chart isn’t as
    great as the Excel chart-type picker might have you believe. Both can have the
    same underlying properties (namely, years on the x-axis and life expectancies
    on the y-axis). They simply use different geometric objects to visually represent
    the data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，线图和条形图之间的差异并不像 Excel 图表类型选择器所展示的那样大。两者都可以具有相同的基本属性（即，x 轴为年份，y 轴为预期寿命）。它们只是使用不同的几何对象来以可视化的方式展示数据。
- en: Many geoms are built into ggplot. In addition to geom_bar(), geom_point(), and
    geom_line(), the geoms geom_histogram(), geom_boxplot(), and geom_area() are among
    the most commonly used. To see all geoms, visit the ggplot documentation website
    at *[https://ggplot2.tidyverse.org/reference/index.xhtml#geoms](https://ggplot2.tidyverse.org/reference/index.xhtml#geoms)*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 许多几何对象已内置于 ggplot 中。除了 geom_bar()、geom_point() 和 geom_line()，geom_histogram()、geom_boxplot()
    和 geom_area() 是最常用的几何对象。要查看所有几何对象，请访问 ggplot 文档网站：[https://ggplot2.tidyverse.org/reference/index.xhtml#geoms](https://ggplot2.tidyverse.org/reference/index.xhtml#geoms)。
- en: Altering Aesthetic Properties
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before we return to the drought data visualization, let’s look at a few additional
    layers you can use to alter the bar chart. Say you want to change the color of
    the bars. In the grammar of graphics approach to chart-making, this means mapping
    some variable to the aesthetic property of fill. (For a bar chart, the aesthetic
    property of color would change only the outline of each bar.) In the same way
    that you mapped year to the x-axis and lifeExp to the y-axis, you can map fill
    to a variable, such as year:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Figure 2-10](chapter2.xhtml#fig2-10) shows the result. Now the fill is darker
    for earlier years and lighter for later years (as also indicated by the legend,
    added to the right of the plot).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-10: The same chart, now with added colors'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the fill colors, use a new scale layer with the scale_fill_viridis_c()
    function (the c at the end of the function name refers to the fact that the data
    is continuous, meaning it can take any numeric value):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This function changes the default palette to one that is colorblind-friendly
    and prints well in grayscale. The scale_fill_viridis_c() function is just one
    of many that start with scale_ and can alter the fill scale. [Chapter 11](chapter11.xhtml)
    of *ggplot2: Elegant Graphics for Data Analysis*, 3rd edition, discusses various
    color and fill scales. You can read it online at *[https://ggplot2-book.org/scales-colour.xhtml](https://ggplot2-book.org/scales-colour.xhtml)*.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Setting a Theme
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The final layer we’ll look at is the theme layer, which allows you to change
    the overall look and feel of your plots (including their background and grid lines).
    As with the scale_ functions, a number of functions also start with theme_. Add
    theme_minimal() as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This theme starts to declutter the plot, as you can see in [Figure 2-11](chapter2.xhtml#fig2-11).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-11: The same chart with theme_minimal() added'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, you should see why Hadley Wickham described the ggplot2 package as
    using a layered grammar of graphics. It implements Wilkinson’s theory by creating
    multiple layers: first, variables to map to aesthetic properties; second, geoms
    to represent the data; third, the scale_ function to adjust aesthetic properties;
    and finally, the theme_ function to set the plot’s overall look and feel.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: You could still improve this plot in many ways, but instead let’s return to
    the drought data visualization by Scherer and Karamanis. By walking through their
    code, you’ll learn about making high-quality data visualization with ggplot and
    R.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Re-creating the Drought Visualization
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The drought visualization code relies on a combination of ggplot fundamentals
    and some lesser-known tweaks that make it really shine. To understand how Scherer
    and Karamanis made their data visualization, we’ll start with a simplified version
    of their code, then build it up layer by layer, adding elements as we go.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you’ll import the data. Scherer and Karamanis did a bunch of data wrangling
    on the raw data, but I’ve saved the simplified output for you. Because it’s in
    JavaScript Object Notation (JSON) format, Scherer and Karamanis use the import()
    function from the rio package, which simplifies the process of importing JSON
    data:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将导入数据。Scherer 和 Karamanis 对原始数据进行了大量的数据整理，但我为您保存了简化的输出。由于它是 JavaScript 对象表示法（JSON）格式，Scherer
    和 Karamanis 使用 rio 包中的 `import()` 函数，这简化了导入 JSON 数据的过程：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*JSON* is a common format for data used in web applications, though it’s far
    less common in R, where it can be complicated to work with. Luckily, the rio package
    simplifies its import.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*JSON* 是用于 Web 应用程序的数据的常见格式，尽管在 R 中使用得较少，且处理起来可能比较复杂。幸运的是，rio 包简化了它的导入。'
- en: Plotting One Region and Year
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绘制一个区域和年份
- en: Scherer and Karamanis’s final plot consists of many years and regions. To see
    how they created it, we’ll start by looking at just the Southwest region in 2003.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Scherer 和 Karamanis 的最终图表包含多个年份和区域。为了了解他们是如何创建的，我们将首先查看 2003 年的西南地区。
- en: 'First, you need to create a data frame. You’ll use the filter() function twice:
    the first time to keep only data for the Southwest region, and the second time
    to keep only data from 2003\. In both cases, you use the following syntax:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个数据框。您将使用 `filter()` 函数两次：第一次仅保留西南地区的数据，第二次仅保留 2003 年的数据。在这两种情况下，您使用以下语法：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This tells R to keep only observations where variable_name is equal to some
    value. The code starts with the dm_perc_cat_hubs_raw data frame before filtering
    it and then saving it as a new object called southwest_2003:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 R 仅保留变量名称等于某个值的观察。代码从 `dm_perc_cat_hubs_raw` 数据框开始，然后对其进行过滤，并将其保存为一个名为 southwest_2003
    的新对象：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To take a look at this object and see the variables you have to work with,
    enter southwest_2003 in the console, which should return this output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个对象并查看您可以使用的变量，请在控制台中输入 southwest_2003，这应该会返回以下输出：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The date variable represents the start date of the week in which the observation
    took place. The hub variable is the region, and category is the level of drought:
    a value of D0 indicates the lowest level of drought, while D5 indicates the highest
    level. The percentage variable is the percentage of that region in that drought
    category, ranging from 0 to 1. The year and week variables are the observation
    year and week number (beginning with week 1). The max_week variable is the maximum
    number of weeks in a given year.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 日期变量表示观察发生的周的开始日期。hub 变量是区域，category 是干旱水平：D0 表示最低的干旱水平，而 D5 表示最高的干旱水平。percentage
    变量是该区域在该干旱类别中的百分比，范围从 0 到 1。year 和 week 变量分别是观察的年份和周数（从第 1 周开始）。max_week 变量是给定年份的最大周数。
- en: 'Now you can use this southwest_2003 object for your plot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用这个 southwest_2003 对象进行绘图：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The ggplot() function tells R to put week on the x-axis and percentage on the
    y-axis, as well as to use the category variable for the fill color. The geom_col()
    function creates a bar chart in which each bar’s fill color represents the percentage
    of the region at each drought level for that particular week, as shown in [Figure
    2-12](chapter2.xhtml#fig2-12).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ggplot()` 函数告诉 R 将周数放在 x 轴上，将百分比放在 y 轴上，并使用类别变量作为填充颜色。`geom_col()` 函数创建一个条形图，其中每个条形的填充颜色表示该特定周该区域在每个干旱水平下的百分比，如
    [图 2-12](chapter2.xhtml#fig2-12) 所示。'
- en: '![](../images/fig2-12.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-12.jpg)'
- en: 'Figure 2-12: One year (2003) and region (Southwest) of the drought visualization'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-12：干旱可视化的一个年份（2003）和区域（西南）
- en: The colors, which include bright pinks, blues, greens, and reds (displayed in
    grayscale here), don’t match the final version of the plot, but you can start
    to see the outlines of Scherer and Karamanis’s data visualization.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些颜色，包括明亮的粉色、蓝色、绿色和红色（在这里以灰度显示），与图表的最终版本不匹配，但您可以开始看到 Scherer 和 Karamanis 数据可视化的轮廓。
- en: Changing Aesthetic Properties
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改美学属性
- en: 'Scherer and Karamanis next selected different fill colors for their bars. To
    do so, they used the scale_fill_viridis_d() function. The *d* here means that
    the data to which the fill scale is being applied has discrete categories (D0,
    D1, D2, D3, D4, and D5):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Scherer 和 Karamanis 为他们的条形图选择了不同的填充颜色。为此，他们使用了 `scale_fill_viridis_d()`
    函数。这里的 *d* 表示填充比例应用于具有离散类别的数据（D0、D1、D2、D3、D4 和 D5）：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: They used the argument option = "rocket" to select the rocket palette, whose
    colors range from cream to nearly black. You could use several other palettes
    within the scale_fill_viridis_d() function; see them at *[https://sjmgarnier.github.io/viridisLite/reference/viridis.xhtml](https://sjmgarnier.github.io/viridisLite/reference/viridis.xhtml)*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 他们使用了参数 option = "rocket" 来选择 rocket 配色方案，该方案的颜色范围从奶油色到接近黑色。你还可以在 scale_fill_viridis_d()
    函数中使用其他多个配色方案；可以在 *[https://sjmgarnier.github.io/viridisLite/reference/viridis.xhtml](https://sjmgarnier.github.io/viridisLite/reference/viridis.xhtml)*
    查看它们。
- en: Then they used the direction = -1 argument to reverse the order of fill colors
    so that darker colors mean higher drought conditions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他们使用 direction = -1 参数反转了填充颜色的顺序，使得颜色越深表示干旱条件越严重。
- en: 'Scherer and Karamanis also tweaked the appearance of the x- and y-axes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Scherer 和 Karamanis 还调整了 x 轴和 y 轴的外观：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: On the x-axis, they removed both the axis title (“week”) using name = NULL and
    the axis labels (the weeks numbered 0 to 50) with guide = "none". On the y-axis,
    they removed the title and text showing percentages using labels = NULL, which
    functionally does the same thing as guide = "none". They also moved the axis lines
    themselves to the right side using position = "right". These axis lines are apparent
    only as tick marks at this point but will become more visible later. [Figure 2-13](chapter2.xhtml#fig2-13)
    shows the result of these tweaks.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 x 轴上，他们通过使用 name = NULL 移除了轴标题（“week”）和通过 guide = "none" 移除了轴标签（编号为 0 到 50
    的周数）。在 y 轴上，他们通过 labels = NULL 移除了标题和显示百分比的文本，实际上这与 guide = "none" 起到了相同的作用。他们还通过
    position = "right" 将轴线本身移到了右侧。此时这些轴线仅作为刻度标记出现，但稍后会变得更加明显。[图 2-13](chapter2.xhtml#fig2-13)
    展示了这些调整的结果。
- en: '![](../images/fig2-13.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-13.jpg)'
- en: 'Figure 2-13: The 2003 drought data for the Southwest with adjustments to the
    x- and y-axes'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-13：带有 x 轴和 y 轴调整的 2003 年西南部干旱数据
- en: Up to this point, we’ve focused on one of the single plots that make up the
    larger data visualization. But the final product that Scherer and Karamanis made
    is actually 176 plots visualizing 22 years and 8 regions. Let’s discuss the ggplot
    feature they used to create all of these plots.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经关注了组成较大数据可视化的单个图表。但 Scherer 和 Karamanis 实际上制作了 176 个图表，展示了 22 年和 8
    个区域的数据。接下来，我们将讨论他们用来创建所有这些图表的 ggplot 特性。
- en: Faceting the Plot
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对图表进行分面
- en: 'One of ggplot’s most useful capabilities is *faceting* (or, as it’s more commonly
    known in the data visualization world, *small multiples*). Faceting uses a variable
    to break down a single plot into multiple plots. For example, think of a line
    chart showing life expectancy by country over time; instead of multiple lines
    on one plot, faceting would create multiple plots with one line per plot. To specify
    which variable to put in the rows and which to put in the columns of your faceted
    plot, you use the facet_grid() function, as Scherer and Karamanis did in their
    code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot 最有用的功能之一就是 *分面*（或在数据可视化领域更常见的术语 *小型多图*）。分面使用一个变量将单个图表拆分为多个图表。例如，想象一下一个显示各国预期寿命随时间变化的折线图；与其在一个图表中绘制多条线，分面会创建多个图表，每个图表显示一条线。为了指定要放在分面图表的行和列中的变量，使用
    facet_grid() 函数，就像 Scherer 和 Karamanis 在他们的代码中做的那样：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Scherer and Karamanis put year in rows and hub (region) in columns. The switch
    = "y" argument moves the year label from the right side (where it appears by default)
    to the left. With this code in place, you can see the final plot coming together
    in [Figure 2-14](chapter2.xhtml#fig2-14).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Scherer 和 Karamanis 将年份放在行中，将区域（hub）放在列中。switch = "y" 参数将年份标签从右侧（默认显示的位置）移动到左侧。将此代码应用后，你可以在[图
    2-14](chapter2.xhtml#fig2-14)中看到最终的图表效果。
- en: '![](../images/fig2-14.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-14.jpg)'
- en: 'Figure 2-14: The faceted version of the drought visualization'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-14：干旱可视化的分面版本
- en: Incredibly, the broad outlines of the plot took just 10 lines of code to create.
    The rest of the code falls into the category of small polishes. That’s not to
    minimize how important small polishes are (very) or the time it takes to create
    them (a lot). It does show, however, that a little bit of ggplot goes a long way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 难以置信的是，图表的轮廓只用了 10 行代码就创建出来了。其余的代码属于小幅修饰的范畴。这并不是说小幅修饰不重要（非常重要），或者它们的创建过程不费时（其实非常费时）。然而，这也显示出，即便是少量的
    ggplot 代码，也能起到很大的作用。
- en: Adding Final Polishes
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加最终修饰
- en: Now let’s look at a few of the small polishes that Scherer and Karamanis made.
    The first is to apply a theme. They used theme_light(), which removes the default
    gray background and changes the font to Roboto using the base_family argument.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The theme_light() function is what’s known as a *complete theme*, one that changes
    the overall look and feel of a plot. The ggplot package has multiple complete
    themes that you can use (they’re listed at *[https://ggplot2.tidyverse.org/reference/index.xhtml#themes](https://ggplot2.tidyverse.org/reference/index.xhtml#themes)*).
    Individuals and organizations also make their own themes, as you’ll do in [Chapter
    3](chapter3.xhtml). For a discussion of which themes you might consider using,
    see my blog post at *[https://rfortherestofus.com/2019/08/themes-to-improve-your-ggplot-figures](https://rfortherestofus.com/2019/08/themes-to-improve-your-ggplot-figures)*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Scherer and Karamanis didn’t stop by simply applying theme_light(). They also
    used the theme() function to make additional tweaks to the plot’s design:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The code in the theme() function does many different things, but let’s look
    at a few of the most important. First, it moves the legend from the right side
    (the default) to the top of the plot ❷. Then, the angle = 0 argument rotates the
    year text in the columns from vertical to horizontal ❸. Without this argument,
    the years would be much less legible.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: The theme() function also makes the distinctive axis lines and ticks that appear
    on the right side of the final plot ❶. Calling element_blank() removes all grid
    lines ❹. Finally, this code removes the borders and gives each individual plot
    a transparent background ❺.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be thinking, *Wait. Didn’t the individual plots have a gray background
    behind them?* Yes, dear reader, they did. Scherer and Karamanis made these with
    a separate geom, geom_rect():'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: They also set some additional aesthetic properties specific to this geom—xmin,
    xmax, ymin, and ymax—which determine the boundaries of the rectangle it produces.
    The result is a gray background behind each small multiple, as shown in [Figure
    2-15](chapter2.xhtml#fig2-15).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-15.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-15: The faceted version of the drought visualization with a gray background
    behind each small multiple'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Scherer and Karamanis made some tweaks to the legend. Previously you
    saw a simplified version of the scale_fill_viridis_d() function. Here’s a more
    complete version:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The name argument sets the legend title, and the labels argument specifies the
    labels that show up in the legend. [Figure 2-16](chapter2.xhtml#fig2-16) shows
    the result of these changes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig2-16.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-16: The drought visualization with changes to the legend text'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Rather than D0, D1, D2, D3, and D4, the legend text now reads Abnormally Dry,
    Moderate Drought, Severe Drought, Extreme Drought, and Exceptional Drought—much
    more user-friendly categories.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The Complete Visualization Code
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While I’ve shown you a nearly complete version of the code that Scherer and
    Karamanis wrote, I made some small changes to make it easier to understand. If
    you’re curious, the full code is here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There are a few additional tweaks to color and spacing, but most of the code
    reflects what you’ve seen so far.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be thinking that ggplot is the solution to all of your data visualization
    problems. And yes, you have a new hammer, but not everything is a nail. If you
    look at the version of the data visualization that appeared in *Scientific American*
    in November 2021, you’ll see that some of its annotations aren’t visible in our
    re-creation. That’s because they were added in post-production. While you could
    have found ways to create them in ggplot, it’s often not the best use of your
    time. Get yourself 90 percent of the way there with ggplot and then use Illustrator,
    Figma, or a similar tool to finish your work.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Even so, ggplot is a very powerful hammer, used to make plots that you’ve seen
    in the *New York Times*, FiveThirtyEight, the BBC, and other well-known news outlets.
    Although it’s not the only tool that can generate high-quality data visualizations,
    it makes the process straightforward. The graph by Scherer and Karamanis shows
    this in several ways:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: It strips away extraneous elements, such as grid lines, to keep the focus on
    the data itself. Complete themes such as theme_light() and the theme() function
    allowed Scherer and Karamanis to create a decluttered visualization that communicates
    effectively.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses well-chosen colors. The scale_fill_viridis_d() function allowed them
    to create a color scheme that demonstrates differences between groups, is colorblind-friendly,
    and shows up well when printed in grayscale.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses faceting to break down data from two decades and eight regions into
    a set of graphs that come together to create a single plot. With a single call
    to the facet_grid() function, Scherer and Karamanis created over 100 small multiples
    that the tool automatically combined into a single plot.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning to create data visualizations in ggplot involves a significant time
    investment. But the long-term payoff is even greater. Once you learn how ggplot
    works, you can look at others’ code and learn how to improve your own. By contrast,
    when you make a data visualization in Excel, the series of point-and-click steps
    disappears into the ether. To re-create a visualization you made last week, you’ll
    need to remember the exact steps you used, and to make someone else’s data visualization,
    you’ll need them to write up their process for you.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Because code-based data visualization tools allow you to keep a record of the
    steps you made, you don’t have to be the most talented designer to make high-quality
    data visualizations with ggplot. You can study others’ code, adapt it to your
    own needs, and create your own data visualization that not only is beautiful but
    also communicates effectively.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Will Chase, “The Glamour of Graphics,” online course, accessed November 6, 2023,
    *[https://rfortherestofus.com/courses/glamour/](https://rfortherestofus.com/courses/glamour/)*.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kieran Healy, *Data Visualization: A Practical Introduction* (Princeton, NJ:
    Princeton University Press, 2018), *[https://socviz.co](https://socviz.co)*.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cédric Scherer, *Graphic Design with ggplot2* (Boca Raton, FL: CRC Press, forthcoming).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen, *ggplot2: Elegant
    Graphics for Data Analysis*, 3rd ed. (New York: Springer, forthcoming), *[https://ggplot2-book.org](https://ggplot2-book.org)*.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Claus Wilke, *Fundamentals of Data Visualization* (Sebastopol, CA: O’Reilly
    Media, 2019), *[https://clauswilke.com/dataviz/](https://clauswilke.com/dataviz/)*.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
