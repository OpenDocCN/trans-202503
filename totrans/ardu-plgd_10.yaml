- en: '**9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9'
- en: THE SQUARE-WAVE GENERATOR**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 方波发生器**
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: '*Signal generators*, also called waveform generators or function generators,
    create an alternating current (AC) voltage that can be used in a variety of electronic
    tests and diagnostic procedures. A *square-wave generator* like the one you will
    build in this chapter (shown in [Figure 9-1](ch09.xhtml#ch09fig9-1)) is an electronic
    lab instrument that creates a continuous sequence of equally spaced pulses of
    electricity that are on for a certain amount of time, switch off for an equal
    duration, and switch back on again, repeatedly.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*信号发生器*，也叫波形发生器或函数发生器，产生交流（AC）电压，可用于各种电子测试和诊断程序。像你将在本章中构建的*方波发生器*（如[图9-1](ch09.xhtml#ch09fig9-1)所示）是一种电子实验室仪器，它产生一系列等间隔的电脉冲，这些脉冲在一定时间内保持开启，随后关闭相同的时长，再次开启，循环往复。'
- en: '![image](../images/fig9_1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_1.jpg)'
- en: '*Figure 9-1: The completed Square-Wave Generator*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-1：完成的方波发生器*'
- en: '**Why Build a Square-Wave Generator?**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为什么要构建方波发生器？**'
- en: 'Signal generators like this one are frequently used to perform diagnostic jobs,
    from evaluating the frequency response of components and subsystems to providing
    stimulus to systems under development. Some specific uses for signal generators
    include:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的信号发生器常用于执行诊断任务，从评估组件和子系统的频率响应到为正在开发的系统提供激励信号。信号发生器的一些具体用途包括：
- en: • Observing the integrity of an amplifier, attenuator, or other device
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 观察放大器、衰减器或其他设备的完整性
- en: • Measuring timing characteristics of a circuit
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 测量电路的时间特性
- en: • Simulating real-world on/off events
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 模拟现实世界的开/关事件
- en: The signal generator part of this project is primarily a square-wave generator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的信号发生器部分主要是方波发生器。
- en: '***What Is a Square Wave?***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***什么是方波？***'
- en: What’s a square wave and what’s it good for, you ask? A *square wave* is an
    electrical signal that starts at zero voltage, rises to some level (its *amplitude*),
    stays at that level for some duration, returns to zero, and then repeats the process
    in a symmetric pattern.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你问，什么是方波，它有什么用？*方波*是一种电信号，从零电压开始，升高到某个电平（其*幅度*），在该电平上保持一段时间，回到零电压，然后以对称的模式重复这一过程。
- en: The square wave is one of the fundamental wave forms in electronics, and it
    is in many respects the most useful, in part because it has both a DC component
    and an AC component. The DC component is the fact that it stays at a certain voltage
    for a period of time and then almost instantaneously transitions to a different
    level. The AC component is that it repeats this transition at a regular period.
    [Figure 9-2](ch09.xhtml#ch09fig9-2) shows a square wave.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 方波是电子学中最基本的波形之一，并且在许多方面是最有用的，部分原因是它同时具有直流成分和交流成分。直流成分指的是它在一段时间内保持在某个电压水平，然后几乎瞬间过渡到另一个电平。交流成分则是它以规律的周期重复这种过渡。[图9-2](ch09.xhtml#ch09fig9-2)展示了一个方波。
- en: '![image](../images/fig9_2.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_2.jpg)'
- en: '*Figure 9-2: A typical square wave*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-2：典型的方波*'
- en: The square wave has an amplitude and a period. The *period* of the wave is the
    duration of a complete cycle, and it could be in seconds, minutes, milliseconds,
    microseconds, and so on. The *frequency* is how many cycles occur in a certain
    period of time (one second is the accepted standard) and is therefore the reciprocal
    of the period. For a period of *T*, the formula to determine the frequency is
    *f* = 1/*T*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 方波有一个幅度和周期。*周期*是一个完整周期的持续时间，单位可以是秒、分钟、毫秒、微秒等。*频率*是指在一定时间内（标准单位为一秒）发生的周期数，因此是周期的倒数。对于周期*T*，计算频率的公式为*f*
    = 1/*T*。
- en: '***Why Square Waves Are Useful***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***方波的应用价值***'
- en: Square waves are particularly useful when developing and testing electronic
    products. For example, the clock in a microcontroller system is essentially a
    square wave. In some diagnostic and test procedures, the microcontroller’s internal
    clock can be disconnected and replaced by an external signal generated by a signal
    generator—in this case, a square wave or sine wave work equally well. You can
    then test the microcontroller at different frequencies. For certain processors,
    it’s often valuable to slow a processor clock during testing to see exactly where
    software glitches occur.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 方波在开发和测试电子产品时特别有用。例如，微控制器系统中的时钟本质上就是一个方波。在一些诊断和测试过程中，可以断开微控制器的内部时钟，并用信号发生器生成的外部信号替代——在这种情况下，方波或正弦波都能很好地工作。你可以在不同频率下测试微控制器。对于某些处理器，通常在测试过程中减慢处理器时钟是很有价值的，这样可以准确地看到软件故障发生的位置。
- en: Other uses include sending a signal into a device being tested in order to tune
    the circuit to the proper value or checking a device’s frequency response or integrity.
    A square-wave generator can also act as a pulse generator to test a variety of
    digital circuits. You will find this application useful in the Ballistic Chronograph
    in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他用途包括向被测试的设备发送信号，以便将电路调节到正确的值，或者检查设备的频率响应或完整性。方波发生器也可以作为脉冲发生器，用于测试各种数字电路。你会发现在[第8章](ch08.xhtml#ch08)的弹道计时仪中，这个应用非常有用。
- en: Because a square wave’s voltage starts at zero and rises almost instantly, it
    can also be used as a switching voltage to turn circuits off and on at the frequency
    of the square wave. The frequency of the Square-Wave Generator in this chapter
    ranges from 1 kHz to around 30 MHz (with the divider switch included, it can go
    down to 100 Hz). This frequency range can be varied via a potentiometer, so you
    can turn things on and off at different rates. This allows the Square-Wave Generator
    to simulate almost any repetitive switching action, which is useful for cycling
    things on and off for life-test applications, too.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于方波的电压从零开始并几乎瞬间上升，它也可以作为开关电压，在方波的频率下开关电路。在本章中的方波发生器的频率范围从1 kHz到约30 MHz（包括分频开关后，可以降到100
    Hz）。通过电位器可以调节这个频率范围，因此你可以以不同的速率开关设备。这使得方波发生器几乎可以模拟任何重复的开关操作，这对于进行寿命测试应用时开关设备也非常有用。
- en: '**OTHER USEFUL WAVEFORMS**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他有用的波形**'
- en: A square wave is only one common type of waveform, though. Probably the most
    common is the *sine wave*, or sinusoidal wave, in which the wave is a continuous
    curve and one cycle represents 360 degrees. Yet another wave type frequently encountered
    in electronics is the triangle wave. Both are depicted in [Figure 9-3](ch09.xhtml#ch09fig9-3).
    The amplitude and period of a sine wave and a triangle wave are measured the same
    way as for a square wave.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 方波只是常见波形中的一种。最常见的波形可能是*正弦波*，即正弦波形，其中波形是一个连续的曲线，一个周期代表360度。另一种在电子学中经常遇到的波形是三角波。[图
    9-3](ch09.xhtml#ch09fig9-3)中展示了这两种波形。正弦波和三角波的振幅和周期的测量方式与方波相同。
- en: '![image](../images/fig9_3.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_3.jpg)'
- en: '*Figure 9-3: A sine wave (top) and a triangle wave (bottom)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-3：正弦波（上）和三角波（下）*'
- en: Each of these waveforms has specific characteristics that make them useful in
    different applications. Sine waves and triangle waves are both important in electronic
    music projects, for example. This project, however, focuses on the square wave,
    and as you progress through this chapter, you will see it can be applied in a
    variety of ways.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些波形各自具有特定的特点，使它们在不同的应用中发挥作用。例如，正弦波和三角波在电子音乐项目中都很重要。然而，本项目聚焦于方波，随着你在本章的学习进展，你会发现它可以以多种方式应用。
- en: '***A Frequency Counter***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***一个频率计***'
- en: In addition to providing a signal generator, this project includes a *frequency
    counter*, which reads wave frequencies, so you can display the generator’s output
    frequency on a digital readout. You can also use the frequency counter as a separate
    instrument on its own to measure frequency from an outside source and display
    it. This project also displays the period, or impulse time, of the wave.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供信号发生器，本项目还包括一个*频率计*，它可以读取波形频率，因此你可以在数字读数上显示发生器的输出频率。你还可以将频率计作为独立仪器，测量来自外部源的频率并显示它。这个项目还显示波形的周期或脉冲时间。
- en: In operation, the frequency counter receives an AC input signal and counts each
    pulse. After a certain number of pulses have been counted, the counter compares
    this against a clock signal, sometimes referred to as a *time base*, and displays
    the number of pulses per unit time—for example, pulses or cycles per second.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作过程中，频率计接收一个交流输入信号并计算每个脉冲。计算了一定数量的脉冲后，计数器将其与一个时钟信号进行比较，这个时钟信号有时被称为*时间基准*，并显示单位时间内的脉冲数量——例如，每秒的脉冲数或周期数。
- en: To assure accuracy, the counter compares the pulses against a clock, usually
    one that is crystal-based. For instruments that require the utmost accuracy, the
    crystal-clock assembly is a precision subsystem often placed in a temperature-controlled
    environment. The frequency counter in this project uses the 16 MHz crystal on
    the Arduino Pro Mini. In fact, the Pro Mini has most of the circuitry to implement
    a complete frequency counter with few additional components. It includes the clock
    registers for counting and just about everything else a frequency counter needs
    with no external components.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保准确性，计数器将脉冲与时钟进行比较，通常时钟是基于晶体的。对于需要最高精度的仪器，晶体时钟组件是一个精密的子系统，通常放置在温控环境中。这个项目中的频率计使用的是Arduino
    Pro Mini上的16 MHz晶体。实际上，Pro Mini几乎具备了实现完整频率计所需的大部分电路，所需的额外组件非常少。它包括用于计数的时钟寄存器以及几乎所有频率计所需的其他组件，无需外部组件。
- en: '**NOTE**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Professional laboratory and desktop instruments selling for hundreds (or thousands)
    of dollars often provide a very wide frequency range, from under 1 Hz to several
    GHz, and offer anywhere from 6- to 10-digit precision. Their displays can be switched
    to read frequency or time (the time between pulses), too*.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*专业的实验室和台式仪器，售价几百（或几千）美元，通常提供非常宽的频率范围，从低于1 Hz到几GHz，并且提供从6位到10位的精度。它们的显示器还可以切换为读取频率或时间（脉冲间的时间）*。'
- en: To do all of this, the Square-Wave Generator takes advantage of the Arduino
    AT328 16 MHz, 5V Pro Mini, which is a smaller, lower-priced version of the Arduino
    Nano. The generator also includes special circuitry to divide a signal’s frequency,
    allowing you to provide an output of very low frequencies at one end and allowing
    the frequency counter to read very high frequencies—above what the Pro Mini can
    normally handle—at the other.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这一切，方波发生器利用了Arduino AT328 16 MHz，5V Pro Mini，它是Arduino Nano的一个更小、更便宜的版本。发生器还包含了特殊电路来分频，使你能够在一端提供非常低频率的输出，并允许频率计读取非常高的频率——超出了Pro
    Mini通常能够处理的范围——在另一端。
- en: '**Shortcomings of the Square-Wave Generator**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**方波发生器的不足之处**'
- en: While this project produces a square-wave generator and a frequency counter
    that perform well in many applications, it has shortcomings compared with professional
    laboratory and bench instruments. The generator has a less than 1 percent frequency
    error, which is good for hobby projects but doesn’t match the tolerances of laboratory-grade
    and direct-digital-synthesizer (DDS) generator units. Those units often have errors
    measured in the part-per million (PPM) range. And the frequency counter uses the
    time base of the Arduino, which, while accurate, doesn’t match higher-priced units
    with crystal ovens and other special circuitry.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个项目制作了一个方波发生器和一个在许多应用中表现良好的频率计，但与专业实验室和台式仪器相比，它仍有一些缺点。发生器的频率误差不到1%，这对于爱好者项目来说是足够的，但无法达到实验室级别和直接数字合成器（DDS）发生器单元的容差。这些单元的误差通常以百万分之一（PPM）来衡量。而频率计使用的是Arduino的时间基准，尽管它准确，但无法与高价单元中的晶体烤箱和其他特殊电路相匹配。
- en: This generator also doesn’t offer the resolution of multiple digits. Many lab
    and bench instruments have resolutions that go into as many as 10 digits. That
    said, the instrument has worked well for me in a broad variety of Arduino and
    other projects, where a greater resolution wasn’t required.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个发生器也没有提供多个数字的分辨率。许多实验室和台式仪器的分辨率可以达到多达10位数字。尽管如此，这个仪器在我进行的各种Arduino和其他项目中表现得很好，而这些项目并不需要更高的分辨率。
- en: '**Required Tools**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**所需工具**'
- en: Drill and drill bits
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 电钻和钻头
- en: Keyhole saw
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 锯孔锯
- en: Soldering iron and solder
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 烙铁和焊锡
- en: File
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 锉刀
- en: '**Parts List**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**零件清单**'
- en: 'In addition to the Arduino Pro Mini, you’ll need a Linear Technology oscillator
    chip and a small handful of other components. Here’s the complete parts list:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Arduino Pro Mini之外，你还需要一个线性技术公司的振荡器芯片和一些其他小组件。以下是完整的零件清单：
- en: One Arduino Pro Mini or clone (There are several available, and some have different
    pinouts—particularly for pins A4 and A5\. [Figure 9-4](ch09.xhtml#ch09fig9-4)
    shows the pinout for the particular clone that I used. Other units with different
    pinouts will work, but the connections on the shield may have to be changed.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Arduino Pro Mini或克隆板（有几种可用，且一些具有不同的引脚配置，尤其是A4和A5引脚。[图9-4](ch09.xhtml#ch09fig9-4)显示了我使用的特定克隆板的引脚配置。其他具有不同引脚配置的单元也可以使用，但可能需要更改屏蔽板上的连接。）
- en: '![image](../images/fig9_4.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_4.jpg)'
- en: '*Figure 9-4: Pinout of the Deek-Robot Pro Mini Arduino clone*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-4：Deek-Robot Pro Mini Arduino clone的引脚配置图*'
- en: One LTC1799 oscillator chip and breadboard-compatible adapter board, like the
    5-SOT-23 adapter board shown in [Figure 9-5](ch09.xhtml#ch09fig9-5) (See “[Using
    SOICs](ch00.xhtml#ch00lev1sec7)” on [page 20](ch00.xhtml#page_20) for tips on
    how to use a surface mount chip like this.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个LTC1799振荡器芯片和面包板兼容适配器板，类似于[图9-5](ch09.xhtml#ch09fig9-5)所示的5-SOT-23适配器板（有关如何使用这种表面贴装芯片的提示，请参见[使用SOIC](ch00.xhtml#ch00lev1sec7)页面20）
- en: '![image](../images/fig9_5.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_5.jpg)'
- en: '*Figure 9-5: This adapter board has a complete variable frequency oscillator
    (1 KHz to 30 KHz) and CMOS buffer circuit*.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-5：此适配器板包含一个完整的可调频率振荡器（1 KHz到30 KHz）和CMOS缓冲电路*。'
- en: One 250-kilohm carbon potentiometer
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个250千欧的碳质电位器
- en: Two 0.1 μF ceramic capacitors
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 两个0.1 μF陶瓷电容
- en: One LM7805 voltage regulator
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个LM7805电压调节器
- en: Two SPDT center-off toggle switches
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 两个SPDT中间开关
- en: Two SPDT toggle switches
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 两个SPDT拨动开关
- en: One HCT4017 decade counter IC, like the CD4017 B shown in [Figure 9-6](ch09.xhtml#ch09fig9-6)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个HCT4017十进制计数器IC，类似于[图9-6](ch09.xhtml#ch09fig9-6)所示的CD4017 B
- en: '![image](../images/fig9_6.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_6.jpg)'
- en: '*Figure 9-6: The CD4017 B is a CMOS counter/divider comprising a 5-stage Johnson
    counter with 10 decoded outputs. It is used here as a divide-by-10 counter*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-6：CD4017 B是一个CMOS计数器/分频器，由一个5级Johnson计数器和10个解码输出组成。在此作为10分频计数器使用*。'
- en: One 1 μF electrolytic capacitor
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个1 μF电解电容
- en: One 10 μF electrolytic capacitor
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个10 μF电解电容
- en: One 20×4 LCD
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个20×4 LCD
- en: One I²C adapter, if not included with the LCD
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个I²C适配器（如果LCD未包含该适配器）
- en: One PCB shield (See “[Downloads](ch01.xhtml#ch01lev1sec3)” on [page 262](ch09.xhtml#page_262)
    if you don’t want to design your own.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个PCB屏蔽板（如果不想自己设计，请参见[下载](ch01.xhtml#ch01lev1sec3)页面262上的[页面262](ch09.xhtml#page_262)）
- en: One Hammond 1595C sloped front enclosure (or equivalent)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Hammond 1595C斜面前端外壳（或同等产品）
- en: One battery holder
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个电池座
- en: One knob
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个旋钮
- en: Four 4-40×1/2-inch screws and washers
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 四个4-40×1/2英寸的螺丝和垫圈
- en: Eight 4-40 nuts
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 八个4-40螺母
- en: One piece of double-sided foam tape
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一块双面泡沫胶带
- en: One 9V battery
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个9V电池
- en: Assorted 28- or 30-gauge hook-up wires
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 各种28或30号连接线
- en: (Optional) Four banana plug jacks *or* three BNC connectors
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: （可选）四个香蕉插头插座 *或* 三个BNC连接器
- en: (Optional) One 3.5 mm jack
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: （可选）一个3.5毫米插孔
- en: (Optional) One 9V, 100 mA, 110V wall power supply (for more information see
    “[Battery Power](ch09.xhtml#ch09lev2sec10)” on [page 278](ch09.xhtml#page_278))
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: （可选）一个9V, 100 mA, 110V墙壁电源适配器（更多信息请参见[电池电源](ch09.xhtml#ch09lev2sec10)页面278）
- en: Note that I elected to use banana plug jacks for the I/O on the front panel,
    though this is a bit old fashioned and probably not the best practice. You could
    replace the two output connectors with a BNC connector as is used in the pH meter
    project, which is a little more pricey and eliminates the need for a ground, as
    the BNC connector has a center conductor and a shielded ground surrounding it.
    The banana jacks have only one conductor each.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我选择在前面板上使用香蕉插头插座，尽管这有点过时，可能不是最佳做法。你可以用BNC连接器替换两个输出连接器，就像pH计项目中使用的那样，虽然价格稍贵，但它消除了对接地的需求，因为BNC连接器有一个中心导体和一个围绕它的屏蔽地。香蕉插座每个只有一个导体。
- en: '**Downloads**'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**下载**'
- en: '**Sketch** *SquareWave.ino*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**草图** *SquareWave.ino*'
- en: '**Front panel template** *SquareWaveEnclosure.pdf*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**前面板模板** *SquareWaveEnclosure.pdf*'
- en: '**PCB foil pattern** *Generator.pcb*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**PCB铜箔图案** *Generator.pcb*'
- en: '**The Schematic**'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**原理图**'
- en: The Square-Wave Generator circuit in [Figure 9-7](ch09.xhtml#ch09fig9-7) doesn’t
    call for a lot of different components. However, before you start building, note
    that the Arduino Pro Mini has a very different pin configuration than the Nano.
    It is also worth noting that there are many versions of the Pro Mini available,
    so check the pinout of the version you buy. The particular Arduino I suggest in
    the parts list has the pinout detailed in [Figure 9-4](ch09.xhtml#ch09fig9-4).
    Read “[Important Notes on the Pro Mini](ch09.xhtml#ch09lev1sec7)” on [page 263](ch09.xhtml#page_263)
    for a description of key differences.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-7](ch09.xhtml#ch09fig9-7)中的方波发生器电路所需的元件并不多。然而，在开始构建之前，请注意，Arduino Pro Mini的引脚配置与Nano有很大不同。还需要注意的是，Pro
    Mini有许多版本可供选择，因此购买时要检查所选版本的引脚排列。建议在零件清单中列出的特定Arduino，其引脚排列在[图9-4](ch09.xhtml#ch09fig9-4)中有详细说明。有关主要差异的描述，请参见[“关于Pro
    Mini的重要说明”](ch09.xhtml#ch09lev1sec7)（第263页）。'
- en: 'In the schematic, notice the switches: SW1, SW2, SW3, and SW4\. SW2 provides
    the divide-by-10 display. SW3 allows you to use the frequency counter with an
    external source instead of the signal generator. SW1 connects the 1, 10, 100 divider
    for the master clock (the switch has a center-off position that doesn’t have a
    connection) for the LTC1799 oscillator. SW4 is the power switch; its center is
    off, and the other two positions are for either external supply or battery.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在原理图中，请注意开关：SW1、SW2、SW3和SW4。SW2提供了10倍分频显示功能。SW3允许你使用外部信号源代替信号发生器与频率计连接。SW1连接主时钟的1、10、100分频器（该开关具有一个中位“关”位置，处于此位置时没有连接）供LTC1799振荡器使用。SW4是电源开关；其中心位置为关，另外两个位置用于外部电源或电池。
- en: '![image](../images/fig9_7.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_7.jpg)'
- en: '*Figure 9-7: Schematic of the Square-Wave Generator*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-7：方波发生器原理图*'
- en: '**Important Notes on the Pro Mini**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于Pro Mini的重要说明**'
- en: Before you build the breadboard, note that one major pinout difference among
    Pro Mini boards is the placement of pins A4, A5, A6, and A7\. Some versions locate
    all four analog inputs on the short side of the board, while the Deek-Robot used
    in this project splits them (see [Figure 9-8](ch09.xhtml#ch09fig9-8)). It places
    A4 and A5 near the other analog pins, but not in line with them, and A6 and A7
    are on the short side of the board. Pins A4 and A5 are used to drive the I²C bus
    for the display.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在搭建面包板之前，请注意，Pro Mini板之间的一个主要引脚差异是A4、A5、A6和A7的布局。一些版本将所有四个模拟输入放置在板子的短边上，而本项目使用的Deek-Robot则将它们分开（见[图9-8](ch09.xhtml#ch09fig9-8)）。它将A4和A5放置在其他模拟引脚附近，但不与它们对齐，A6和A7则位于板子的短边。引脚A4和A5用于驱动显示器的I²C总线。
- en: There are some other minor differences between the Pro Mini and the Arduino
    Nano, but one of the most prominent is that the Pro Mini does not include a USB
    interface, so you have to program it using an external serial interface of some
    kind. There are several serial adapters on the market using FTDI technology. (*FTDI*
    is an abbreviation for *Future Technology Devices International*, a privately
    held Scottish semiconductor device company specializing in USB technology.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Pro Mini和Arduino Nano之间有一些其他的小差异，但最显著的一点是Pro Mini没有USB接口，因此你必须使用外部串口接口进行编程。市场上有几种基于FTDI技术的串口适配器。(*FTDI*是*Future
    Technology Devices International*的缩写，是一家专注于USB技术的苏格兰半导体公司。)
- en: An alternative to using FTDI-based, purpose-built serial adapters is to use
    another microprocessor board to program the Pro Mini. I use an Arduino Uno clone
    to program my Pro Mini because it’s inexpensive, it allows me to remove the processor
    chip so I don’t end up programming both boards, and it’s easy to use. I use a
    simple breadboard setup to do the programming. Go to “[Uploading Sketches to Your
    Arduino](ch00.xhtml#ch00lev1sec3)” on [page 5](ch00.xhtml#page_5) for connection
    details.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于FTDI的专用串口适配器的替代方案是使用另一块微处理器板来为Pro Mini编程。我使用一块Arduino Uno克隆板来为Pro Mini编程，因为它价格便宜，允许我移除处理器芯片，这样就不会编程两个板子，而且使用起来很方便。我使用一个简单的面包板设置进行编程。有关连接详情，请参见[“上传草图到你的Arduino”](ch00.xhtml#ch00lev1sec3)（第5页）上的内容。
- en: '![image](../images/fig9_8.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_8.jpg)'
- en: '*Figure 9-8: The Deek-Robot Pro Mini next to a centimeter ruler. The pinout
    is a little different from similar Arduino clones. For example, pin A4 is the
    unmarked pad between A2 and A3, while A5 is the one between A3 and VCC*.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-8：Deek-Robot Pro Mini与一把厘米标尺放在一起。其引脚排列与类似的Arduino克隆板略有不同。例如，引脚A4是A2和A3之间未标记的焊盘，而A5是A3和VCC之间的焊盘*。'
- en: '**How the Square-Wave Generator Was Developed**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**方波发生器的开发过程**'
- en: This project was developed to solve a need that emerged when creating the Ballistic
    Chronograph in [Chapter 8](ch08.xhtml#ch08). While developing the chronograph,
    I needed some way to test it to assure it worked properly without using a weapon
    with live ammunition and shooting holes in my shop.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是为了应对在创建[第8章](ch08.xhtml#ch08)中的弹道计时器时出现的一个需求。开发计时器时，我需要一种方法来测试它，确保它正常工作，而不需要使用带有实弹的武器，也不需要在我的车间里打洞。
- en: The Square-Wave Generator was my solution to the problem. With it and a small
    handful of other parts, I was able to simulate the signal the chronograph should
    receive as a projectile breaks a sequence of light beams. I decided to start with
    the time it took a projectile to travel an arbitrary distance of 3 inches, which
    turned out to be somewhere between 50 and 1,000 microseconds, depending on the
    speed of the projectile. I then used the Square-Wave Generator to generate a signal
    at frequencies between 20,000 Hz and 1,000 Hz, the reciprocals of those times.
    Once I figured out what I needed for the chronograph, the Square-Wave Generator
    project took on a life of its own, and the final version is what you see in this
    chapter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 方波发生器是我解决问题的方法。通过它和一些其他的小零件，我能够模拟出当一个弹丸打破一系列光束时，计时器应接收的信号。我决定从弹丸在3英寸（约7.62厘米）距离内所需的时间开始，这个时间在50到1,000微秒之间，具体取决于弹丸的速度。然后，我使用方波发生器生成频率在20,000
    Hz到1,000 Hz之间的信号，这些频率是这些时间的倒数。一旦我弄清楚了计时器需要什么，方波发生器项目便发展出了它自己的生命，最终版本就是你在本章看到的样子。
- en: '***Deciding How to Generate Signals***'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***决定如何生成信号***'
- en: First, I looked for an easy way to satisfy my timing requirements. There were
    several DDS (direct digital synthesis) products and boards that would have easily
    solved the problem, but all of the solutions I found were a little pricier than
    I was hoping, and many had other shortcomings. Abandoning the DDS, I looked at
    several alternatives, some bringing me back to my old Radio Amateur days. One
    solution was to use a crystal oscillator and divide a fundamental frequency to
    achieve frequencies near the ones I needed. This presented several problems, not
    the least of which being that the circuit would likely need several divider chips.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我寻找了一种简单的方法来满足我的时间要求。有几款DDS（直接数字合成）产品和板卡可以轻松解决这个问题，但我找到的所有解决方案都比我期望的要贵一些，而且很多还有其他缺点。在放弃DDS后，我查看了几种替代方案，其中一些让我回到了我的旧无线电爱好者时代。一种解决方案是使用晶体振荡器并通过分频器将基本频率分割，从而获得接近我需要的频率。这带来了几个问题，其中一个最大的就是电路可能需要多个分频芯片。
- en: Another solution was to create my own variable frequency oscillator (VFO) from
    scratch. While a possibility, that solution entailed more design work than I was
    prepared to do at the time, so I went back to the data sheets.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是从零开始创建我自己的可调频率振荡器（VFO）。虽然这也是一个可行的选择，但这一解决方案需要比我当时准备做的更多的设计工作，所以我又回去查阅了数据表。
- en: 'I found that Linear Technology’s LTC1799 single-chip precision oscillator had
    just about what the doctor ordered—and more. According to the data sheet, this
    chip provides a square-wave signal from 1 KHz to 33 MHz with a single variable
    resistor and a switch to divide the fundamental oscillator frequency by 1, 10,
    or 100\. It boasts good stability, too: nominally, it has less than 1 percent
    error. And it was a lot less pricey than the DDS solutions at just under $4.00.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现Linear Technology的LTC1799单芯片精密振荡器几乎完全符合要求——而且还多了一些。根据数据表，这款芯片提供从1 KHz到33
    MHz的方波信号，只需一个可调电阻和一个开关来将基本振荡器频率分频1、10或100倍。它的稳定性也相当好：名义上误差不到1%。而且，它的价格远低于DDS解决方案，仅为不到4美元。
- en: The final part of the problem was to see what frequency the generator was creating.
    Without an external frequency counter or a calibrated oscilloscope, it would be
    extremely difficult to get even a close approximation of the frequency generated.
    So the project mushroomed to include a built-in frequency counter. Because the
    counter was there anyway, I included a switch to allow me to use the frequency
    counter as a stand-alone instrument.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的最后一部分是要查看发生器生成的频率。如果没有外部频率计或经过校准的示波器，即使是接近的频率也很难获得。因此，项目扩展到了包含一个内建频率计。由于频率计反正已经在了，我还加了一个开关，允许我将频率计作为独立的仪器使用。
- en: '***Planning How to Display the Frequency***'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***如何规划显示频率***'
- en: Now I could generate square waves, but there were still some other problems
    to be addressed. For example, how would I read the frequency from the outside?
    I could mark the potentiometer positions with calibrations—as many generators
    of yore have done—but that is at best a clumsy and inaccurate approach in today’s
    digital age. A built-in frequency counter and bright display seemed most practical.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以生成方波了，但仍然有一些其他问题需要解决。例如，我该如何读取外部频率呢？我可以通过标记电位器位置来进行校准——就像许多旧式发生器所做的那样——但在今天的数字时代，这种方法充其量也只是笨拙且不准确。内置的频率计数器和亮显示器似乎是最实用的选择。
- en: I went back to the drawing board—and to the Arduino Library. I found several
    approaches to Arduino frequency counters online, including at least two separate
    frequency counter libraries. The simplest and most convenient library for this
    application was *FreqCount.h*, developed by Paul Stoffregen. How I used this library
    is discussed more under “[The Sketch](ch01.xhtml#ch01lev1sec8)” on [page 271](ch09.xhtml#page_271).
    For more information on the library itself or to get the latest updates, you can
    go to *[https://github.com/PaulStoffregen/FreqCount/](https://github.com/PaulStoffregen/FreqCount/)*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我回到了绘图板——并且回到了Arduino库。我在网上找到了几种Arduino频率计数器的实现方式，包括至少两个独立的频率计数器库。对于这个应用来说，最简单和最方便的库是*FreqCount.h*，由Paul
    Stoffregen开发。我如何使用这个库将在“[草图](ch01.xhtml#ch01lev1sec8)”中进一步讨论，见[第271页](ch09.xhtml#page_271)。有关该库的更多信息或获取最新更新，您可以访问*[https://github.com/PaulStoffregen/FreqCount/](https://github.com/PaulStoffregen/FreqCount/)。
- en: A preliminary breadboard prototype indicated that the frequency counter worked
    well. I put the breadboard together using a 20×4 LCD display using the I²C interconnect.
    After labeling the display with the word *Frequency* and displaying the frequency
    in Hz under that, I still had two lines of 20 characters left (see [Figure 9-9](ch09.xhtml#ch09fig9-9)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 初步的面包板原型表明频率计数器工作良好。我使用一个20×4的LCD显示器，并通过I²C接口将其连接起来，制作了面包板。在显示器上标注了*Frequency*字样，并在其下方显示了频率（以Hz为单位），我仍然剩下两行20个字符（见[图9-9](ch09.xhtml#ch09fig9-9)）。
- en: '![image](../images/fig9_9.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_9.jpg)'
- en: '*Figure 9-9: The display of the Square-Wave Generator, showing the frequency
    and the impulse time*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-9：方波发生器的显示，显示频率和脉冲时间*'
- en: Waste not, I always say. Because at least two of the projects I planned to use
    the Square-Wave Generator with required evenly spaced pulses (more or less a pulse
    generator), I decided to use the second two lines of the display to indicate the
    time of the impulse. Calculating the time in the sketch would be relatively easy,
    as the time (in seconds) is a function of the frequency (*T* = 1/*f*).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我常说“浪费不得”。因为我计划使用方波发生器的至少两个项目需要均匀间隔的脉冲（差不多就是一个脉冲发生器），我决定使用显示器的后两行来指示脉冲的时间。在草图中计算时间相对容易，因为时间（以秒为单位）是频率的函数（*T*
    = 1/*f*）。
- en: '**Signal Integrity**'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**信号完整性**'
- en: Without getting involved with the higher math of signal composition, a square
    wave can be thought of as an infinite series of sine wave harmonics added together.
    As the frequency increases, so does the complexity and fragility of the waveform.
    If you connect your breadboard circuit to an oscilloscope, you can observe this
    yourself.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不深入信号组合的高级数学，方波可以被认为是无限多个正弦波谐波相加的结果。随着频率的增加，波形的复杂性和脆弱性也在增加。如果你将面包板电路连接到示波器，你可以亲自观察到这一点。
- en: This project was initially developed as a square-wave generator/frequency counter
    that could operate in the area of 1,000 Hz to 1 MHz. This generator does its job
    with panache, but the fundamental oscillator chip has a range far in excess of
    that.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目最初是作为一个方波发生器/频率计数器开发的，能够在1,000 Hz到1 MHz的范围内工作。这个发生器表现得非常出色，但其基本的振荡器芯片的工作范围远远超出了这个范围。
- en: In developing the project, I had two options. The first was to intentionally
    limit the device’s performance to the area that was initially proposed or to extend
    it closer to the limits of the oscillator and suffer some degradation at the higher
    end. I selected the latter. While the square wave starts rounding off at around
    15 MHz or so, the performance at the lower—and intended—frequencies is not impacted
    whatsoever. [Figure 9-10](ch09.xhtml#ch09fig9-10) shows four oscilloscope traces
    at different frequencies to demonstrate.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发这个项目时，我有两个选择。第一个是故意将设备的性能限制在最初提出的范围内，或者将其扩展到接近振荡器的极限，并在高频段遭受一些退化。我选择了后者。虽然方波在大约
    15 MHz 时开始变得不规则，但在较低频率——即原定频率——下的性能完全不受影响。[图 9-10](ch09.xhtml#ch09fig9-10) 显示了不同频率下的四个示波器波形图，以作示范。
- en: At 1 kHz, the wave pattern is close to perfect, as you can see from the display
    on my older analog oscilloscope (see [Figure 9-10A](ch09.xhtml#ch09fig9-10)).
    In [Figure 9-10B](ch09.xhtml#ch09fig9-10), at 5 MHz, the edges of the square wave
    are compromised a very small amount, showing a slight overshoot on the rising
    edge. When the frequency is increased to 12 MHz, the signal begins to look a little
    ragged, with even more distortion (see [Figure 9-10C](ch09.xhtml#ch09fig9-10)).
    Some of the distortions of the wave are a result of tuning, or stray capacitive
    and inductive effects, by certain components used in the construction. This is
    an avoidable phenomenon, and I mention it primarily so you’re aware of the shape
    of the waveform. I suspect that most of your applications for the generator will
    be in the lower-frequency area, at less than 1 MHz, where the wave pattern produced
    is as good as it gets. Further, I have used the generator in higher frequencies,
    and the slightly distorted waveform had virtually no effect on the result.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1 kHz 时，波形几乎完美无缺，你可以从我的老式模拟示波器的显示屏上看到这一点（见[图 9-10A](ch09.xhtml#ch09fig9-10)）。在[图
    9-10B](ch09.xhtml#ch09fig9-10)中，5 MHz 时，方波的边缘有一点点妥协，显示出上升沿有轻微的超调。当频率提高到 12 MHz
    时，信号开始显得有些凌乱，失真更严重（见[图 9-10C](ch09.xhtml#ch09fig9-10)）。波形的一些失真是由调谐或某些元件的寄生电容和电感效应引起的。这是一个可以避免的现象，我之所以提到它，主要是让你了解波形的形状。我怀疑你大多数应用这个发生器的场景会是在低频区，低于
    1 MHz，在这个频率范围内产生的波形可以说是最完美的。此外，我也在更高频率下使用过该发生器，稍微失真的波形几乎对结果没有影响。
- en: '![image](../images/fig9_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_10.jpg)'
- en: '*Figure 9-10: Four oscilloscope traces showing the output of the Square-Wave
    Generator at 1 kHz (A), 5 MHz (B), 12 MHz (C), and 20 MHz (D). It quickly becomes
    apparent that the square-wave signal starts to lose integrity at around 12 MHz*.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-10：四个示波器波形图，显示了方波发生器在 1 kHz (A)、5 MHz (B)、12 MHz (C) 和 20 MHz (D) 下的输出。很快就能看出，方波信号在约
    12 MHz 时开始失去完整性*。'
- en: While the waves continue to distort at frequencies above 20 MHz (see [Figure
    9-10D](ch09.xhtml#ch09fig9-10)), they are fully recognizable as square waves and
    remain useful. At 30 MHz—the extent of the range of the Square-Wave Generator
    as built—the signal trace looks increasingly like a sine wave, but for most test
    purposes, it is still totally valid.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当频率超过 20 MHz 时，波形继续失真（见[图 9-10D](ch09.xhtml#ch09fig9-10)），但它们仍然可以完全识别为方波，并且仍然有效。在
    30 MHz——方波发生器的工作范围极限——下，信号波形看起来越来越像正弦波，但对于大多数测试目的来说，它仍然完全有效。
- en: '**LISTENING TO SQUARE WAVES**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**听方波**'
- en: An interesting experiment that will provide you with some idea of the harmonics
    present in a square wave is to set the Square-Wave Generator to the audible range
    of the frequency spectrum and plug its output into the input of an amplifier and
    loudspeaker. Listen to the quality of the sound. The “fuzz” you hear is a result
    of rich harmonics produced by the square wave, which essentially comprises a composite
    of all other sine waves within the frequency limit.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的实验，可以让你了解方波中存在的谐波，就是将方波发生器设置为可听频率范围，并将其输出连接到放大器和扬声器的输入。仔细聆听声音的质量。你听到的“噪音”是方波产生的丰富谐波的结果，这些谐波本质上由频率范围内所有其他正弦波的合成组成。
- en: '**Fine-tuning with a Decade Counter**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用十进制计数器进行微调**'
- en: In designing the system, there were a couple final additions I settled on to
    add utility and improve performance. The frequency counter, as put together, had
    a frequency range of about 100 Hz to around 10 MHz tops. The LTC1799 oscillator
    offered a frequency range from 1 kHz to about 30 MHz, and for most applications,
    that would be far more than adequate. But there were some applications I had in
    mind that would need an AC source down to about 100 Hz.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计系统时，我最终决定添加一些功能，以提高系统的实用性和性能。频率计数器组装完成后，频率范围大约为100 Hz到最大约10 MHz。LTC1799振荡器的频率范围从1
    kHz到约30 MHz，对于大多数应用来说，这已经足够。但我考虑到的一些应用需要一个低至100 Hz的交流信号源。
- en: 'Well, there turned out to be a way to kill both birds, so to speak, with one
    chip: a divide-by-10 counter—in this case, an HCT4017 or CD4017 decade counter
    and a couple of switches.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，结果证明有一种方法可以用一颗芯片“杀死两只鸟”：一个除以10的计数器——在这个例子中，是一个HCT4017或CD4017十进制计数器和几个开关。
- en: The decade counter accepts an AC signal, counts to 10, and then starts over.
    By looking at one of the counter outputs, it essentially divides by 10.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制计数器接受一个交流信号，计数到10，然后重新开始。通过查看其中一个计数器输出，它基本上是除以10的。
- en: It was possible to feed the output of the oscillator through the divide-by-10
    counter and show output frequency on the LCD, while the actual output frequency
    would be 10 times the frequency shown. This workaround lets the Square-Wave Generator
    show frequencies well above 10 MHz on the LCD as long as you can mentally move
    the decimal point over one place. On the flip side, the switch (SW2) could be
    moved to take the output of the oscillator divided by 10 directly so that it could
    output a minimum output frequency as low as 100 Hz, or 1 kHz/10.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将振荡器的输出信号送入除以10的计数器，并在LCD上显示输出频率，而实际输出频率将是显示频率的10倍。这个变通方法允许方波发生器在LCD上显示高于10
    MHz的频率，只要你能在脑中将小数点向右移动一位。另一方面，开关（SW2）可以被移动，以直接获取振荡器的输出，除以10，使得最小输出频率可低至100 Hz，或者是1
    kHz/10。
- en: '**The Oscillator in Detail**'
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**振荡器详细信息**'
- en: The oscillator part of this project is pretty much self-contained in the LTC1799
    and requires only an external variable resistor, a bypass capacitor, and a switch
    used to divide the fundamental oscillator frequency by 1, 10, or 100 times. The
    value that the frequency is divided by depends on what you’re connecting to pin
    4\. When you connect pin 4, or the DIV pin, of the LTC1799 to GND, the frequency
    is divided by 1; when pin 4 is left floating or open, the frequency is divided
    by 10; and when pin 4 is connected to 5V, the frequency is divided by 100\. This
    allows the unit to cover a range of frequencies from 1 kHz to 30 MHz.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的振荡器部分几乎完全由LTC1799单芯片完成，只需要一个外部可变电阻、一个旁路电容和一个用来将基本振荡器频率除以1、10或100倍的开关。频率除以多少，取决于你连接到4脚的组件。当将LTC1799的4脚或DIV脚连接到地（GND）时，频率除以1；当4脚悬空或开路时，频率除以10；当4脚连接到5V时，频率除以100。这样，设备可以覆盖从1
    kHz到30 MHz的频率范围。
- en: Also, while I have chosen to use a 250-kilohm potentiometer between pins 1 and
    3 of the LTC1799, any potentiometer between 3 kilohms and 1 megaohm is acceptable.
    The frequency decreases as this resistor value increases, and vice versa.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然我选择在LTC1799的1脚和3脚之间使用一个250千欧的电位器，但任何3千欧到1兆欧之间的电位器都是可以接受的。当电阻值增加时，频率会降低，反之亦然。
- en: According to the manufacturer, the LTC1799 outputs a fairly crisp square wave
    throughout its frequency range. As frequencies increase, however, there are a
    variety of considerations that impact the integrity of the wave. These include
    stray capacitances and inductances due to the layout of the circuit, such as the
    output position, the hookup of the variable potentiometer, the switch, and other
    components. Because most applications I had in mind were in the lower end of the
    frequency spectrum offered by the LTC1799, I did not pay strict attention to the
    layout and thus probably have somewhat compromised integrity at the higher frequencies.
    See [Figure 9-10](ch09.xhtml#ch09fig9-10) for actual signal traces.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 根据制造商的说法，LTC1799在其频率范围内输出的方波相当清晰。然而，随着频率的增加，有许多因素会影响波形的完整性。这些因素包括由于电路布局引起的寄生电容和电感，如输出位置、可调电位器的连接、开关和其他元件。由于我考虑的大多数应用位于LTC1799提供的频率范围的低端，因此我没有严格关注布局，因此在较高频率下可能会出现某些完整性问题。请参阅[图9-10](ch09.xhtml#ch09fig9-10)查看实际信号轨迹。
- en: '**The Breadboard**'
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: As in virtually all of my Arduino projects, somewhere during the design process,
    I end up making a breadboard layout. [Figure 9-11](ch09.xhtml#ch09fig9-11) shows
    the prototype for the Square-Wave Generator.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我几乎所有的Arduino项目一样，在设计过程中，我总会制作一个面包板布局。[图9-11](ch09.xhtml#ch09fig9-11)展示了方波生成器的原型。
- en: '![image](../images/fig9_11.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9_11.jpg)'
- en: '*Figure 9-11: The breadboard for the Square-Wave Generator*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-11：方波生成器的面包板*'
- en: Wiring the breadboards for testing posed no difficulty, with the exception that
    the oscillator became a little squirrely at the higher frequencies when using
    longer interconnect leads.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试接线面包板并不困难，唯一的例外是，当使用较长的互联导线时，振荡器在较高频率下会变得有些不稳定。
- en: 'Here are the connections:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是连接方式：
- en: Connect all of the red positive rails together and blue negative rails together.
    Be careful not to connect the red and blue rails under any circumstances.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有的红色正极轨道和蓝色负极轨道连接在一起。务必小心，绝不要将红色轨道和蓝色轨道连接在一起。
- en: Insert the LTC1799 oscillator module as close as possible to one end of the
    breadboard. See the far left-hand side of [Figure 9-11](ch09.xhtml#ch09fig9-11).
    The oscillator has to be mounted on an adapter board so it will fit in the 0.100
    centers of the breadboard, as shown in [Figure 9-12](ch09.xhtml#ch09fig9-12).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LTC1799振荡器模块尽可能靠近面包板的一端插入。请参见[图9-11](ch09.xhtml#ch09fig9-11)的最左侧。振荡器必须安装在适配板上，以便其适应面包板的0.100英寸间距，如[图9-12](ch09.xhtml#ch09fig9-12)所示。
- en: Insert the Arduino Pro Mini into the breadboard. Connect the 5V terminal of
    the Pro Mini to the red positive rails of the breadboard.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Arduino Pro Mini插入面包板。将Pro Mini的5V端子连接到面包板的红色正极轨道。
- en: Connect the GND of the Pro Mini to the blue negative rails.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Pro Mini的GND连接到蓝色负极轨道。
- en: Insert the HCT4017 decade counter into the breadboard. (It’s immediately to
    the left of the LCD in [Figure 9-11](ch09.xhtml#ch09fig9-11).)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将HCT4017十进制计数器插入面包板。（它位于[图9-11](ch09.xhtml#ch09fig9-11)中的LCD左侧。）
- en: Insert the LTC1799 on its adapter board into the breadboard.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LTC1799和其适配板插入面包板。
- en: Connect one end of the three-position (center-off) switch SW1 to ground. Connect
    the other end to VCC, and connect the center pin of the switch to pin 4 of the
    LTC1799.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三位置（中断）开关SW1的一端连接到地。将另一端连接到VCC，并将开关的中间引脚连接到LTC1799的第4引脚。
- en: Connect one end of switch SW2 to pin 6 of the LTC1799 adapter board (or pin
    5 of the LTC1799).
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将开关SW2的一端连接到LTC1799适配板的第6引脚（或LTC1799的第5引脚）。
- en: Connect one end of the potentiometer R1 to pin 3 of the LTC1799\. Connect pin
    1 of the LTC1799 to the red positive rail along with the other side of the potentiometer
    and the wiper, or the center pin of the potentiometer.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电位器R1的一端连接到LTC1799的第3引脚。将LTC1799的第1引脚与电位器的另一端及其滑动端（即电位器的中间引脚）一起连接到红色正极轨道。
- en: Pin 6 of the LTC1799 will be the output of the oscillator, which will go to
    pin 14 of the HCT4017 and to one leg of switch SW2.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LTC1799的第6引脚将是振荡器的输出，连接到HCT4017的第14引脚和开关SW2的一只脚。
- en: Capacitor C1 should have been installed on the adapter board as described.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电容器C1应如描述那样安装在适配板上。
- en: Connect pins 13 and 15 of the HCT4017 to ground.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将HCT4017的13引脚和15引脚连接到地。
- en: Connect the other end of switch SW2 to pin 12 of the HCT4017 (CD4017).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将开关SW2的另一端连接到HCT4017（CD4017）的第12引脚。
- en: '![image](../images/fig9_12.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/fig9_12.jpg)'
- en: '*Figure 9-12: The SOIC has been soldered to an adaptor board, which will fit
    into the 0.100-inch centers of the breadboard. The chip includes only 5 pins,
    but I used a 6-pin adapter*.'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图9-12：SOIC已焊接到适配板上，这样它就可以适配面包板的0.100英寸间距。该芯片只有5个引脚，但我使用了一个6引脚适配器*。'
- en: Connect the center of switch SW2 to an empty row on the breadboard. (I used
    one between the Pro Mini and the HCT4017).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将开关SW2的中心连接到面包板上的空行。（我使用的是Pro Mini和HCT4017之间的一行）。
- en: Connect one end of switch SW3 to the same empty row you used in step 8, which
    should be connected to the center of switch SW2.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将开关SW3的一端连接到你在第8步中使用的相同空行，该行应与开关SW2的中心相连。
- en: Connect the center of switch SW3 to digital pin 5 (D5) on the Pro Mini.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将开关SW3的中心连接到Pro Mini的数字引脚5（D5）。
- en: Pin 3 of switch SW3 will serve as the input if you use the breadboard in the
    frequency-counter-only mode.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在仅使用频率计模式下使用面包板，则开关SW3的第3引脚将作为输入。
- en: '**NOTE**'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*SW4, the AC/battery on/off switch, does not need to be configured in the breadboard,
    as the circuit can receive power from the computer while programming the Arduino.
    The LM7805 is not used in the breadboard configuration for the same reason*.'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check your LCD. If it includes the I²C subassembly board soldered to it, you’re
    okay to continue. Otherwise, solder the I²C board to the display as described
    in “[Affixing the I²C Board to the LCD](ch00.xhtml#ch00lev1sec2)” on [page 3](ch00.xhtml#page_3).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your LCD is ready, you will need four male-to-female connector wires to
    hook it up. (In the finished version, you can make a small wire harness for it,
    including wires for VCC, GND, SCL, and SDA.) I usually color code these with red
    and black for positive and ground, green for SCL, and yellow for SDA. Plug the
    VCC wire into the red positive rail, the negative into the blue negative rail,
    SDA to A4 on the Pro Mini, and SCL to A5 on the Pro Mini.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, build your programming circuit or plug in your FTDI adapter, load the
    sketch onto the Pro Mini, and you’re all set to go.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '**The Sketch**'
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Square-Wave Generator sketch simplified somewhat as I iterated on the project.
    The result is a mercifully compact program, thanks to the integration of the LTC1799
    and the *FreqCount.h* library (available from the Library Manager section of the
    Arduino IDE).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The sketch starts by including three libraries: *FreqCount.h* for the frequency
    counter and two others for working with the LCD. To add *FreqCount.h* to your
    Arduino IDE, go to **Sketch ▸ Include Library ▸ Manage Libraries…** and install
    the FreqCount library from the Library Manager. The `setup()` section prepares
    the LCD and starts the frequency counter. The `loop()` section fetches the frequency,
    calculates the impulse width, and displays both.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino doesn’t actually have anything to do with generating the signal—that’s
    all done at the oscillator and subsequently in the divider. The Arduino’s function
    is to look at the signal and read out the frequency.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '*Although pin 5 on the Arduino is connected to the LTC1799 oscillator, I do
    not set it as an analog input in this sketch. That is apparently taken care of
    in the FreqCount library. See “Frequency Input Pin” at* [https://www.pjrc.com/teensy/td_libs_FreqCount.html](https://www.pjrc.com/teensy/td_libs_FreqCount.html)
    *for various Arduino models. Incidentally, using this library renders analog pins
    3, 9, 10, and 11 unusable as analog outputs (PWM)*.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**The Shield**'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this project, I developed a small PCB shield to hold the various components.
    Although the shield could probably have been designed to use only a single layer,
    I elected to use a two-layer board. First, it greatly reduced layout time, and
    second, because I was producing another two-layer board at the same time, I could
    expose and etch them both at once with little additional effort. (It’s more efficient
    to etch multiple boards simultaneously, when you can.) [Figure 9-13](ch09.xhtml#ch09fig9-13)
    shows the top and bottom foil patterns of the shield.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig9_13.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-13: Top (left) and bottom (right) foil pattern for the Square-Wave
    Generator’s PCB shield*'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Assembling the components on the shield requires special attention to the bypass
    capacitor. The shorter the leads of the 0.1 μF capacitor from pin 1 of the LTC1799
    oscillator to ground, the better the oscillator works. I actually soldered the
    capacitor directly to the chip-mounting board.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-13](ch09.xhtml#ch09fig9-13) shows the component placement on the
    shield. Notice that the HCT4017 (CD 4017)is located beneath the Pro Mini; the
    PCB was designed this way to conserve space and hold high-frequency traces to
    a minimum length.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: As in other projects, it’s necessary to populate the headers for the Pro Mini
    only where they actually connect to the board, in addition to a header at pin
    1 to simplify aligning the Pro Mini on the shield. The LM7805 voltage regulator
    requires no heat sink.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building the Square-Wave Generator was relatively straightforward, but note
    that I did not take particular care with wiring the leads for switch SW1, which
    provided the divider for the oscillator, or with the placing and wiring of the
    potentiometer. Shortening these wires—and perhaps adjusting the placement of the
    parts themselves—probably would have improved the integrity of the waveform somewhat
    at higher frequencies. [Figure 9-14](ch09.xhtml#ch09fig9-14) shows the inside
    of my Square-Wave Generator; if you look carefully, you can see my hand-scribbled
    notations as to where things are located.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig9_14.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-14: Everything fit easily in the slope-panel enclosure. The LCD was
    held in place with four screws, and the shield was mounted on top of the LCD with
    double-sided foam adhesive. The switches, I/O jacks, and potentiometer were soldered
    by hand*.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '***Preparing the Enclosure***'
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, mark the front of the enclosure for the following holes:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: • Two to aid in cutting out the space for the LCD
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: • Four for mounting holes for the LCD
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: • Four for the banana jacks
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: • Four for the switches
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: • One for the potentiometer
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the Hammond 1595C sloped-front enclosure I recommend in “[Parts
    List](ch01.xhtml#ch01lev1sec2)” on [page 260](ch09.xhtml#page_260) or an equivalent,
    you can follow the template in [Figure 9-15](ch09.xhtml#ch09fig9-15). Just locate
    the PDF of the drawing in this book’s resource files, print it out, lay it over
    the front of the enclosure, and carefully center punch for the holes. I also use
    a fine-tip Sharpie marker to indicate locations and to draw on the enclosure.
    Excess marker can be easily cleaned with isopropyl alcohol.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-16](ch09.xhtml#ch09fig9-16) shows how to use the radius of the enclosure
    to determine the measurement for the display.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig9_15.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-15: The drilling template for the Square-Wave Generator*'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig9_16.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-16: The LCD is placed using the radius of the enclosure*.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'I drilled the holes in the following order:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Carefully drill 1/2-inch holes at the corners of the cutout for the LCD. If
    you mark the centers of the holes correctly, the edge of the display will be tangential
    to the outer diameter of the hole. You can then draw lines connecting the edges
    of the holes to use as a guide to cut out the display.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cut out the display using a keyhole saw or saber saw. The enclosure is made
    of a relatively soft ABS plastic, so you should have no difficulty making the
    cut.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clean debris from the cutout with a file if necessary, and check that the display
    fits.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drill the four mounting holes (labeled A in [Figure 9-15](ch09.xhtml#ch09fig9-15))
    for the display.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drill four 5/16-inch holes for the banana jacks (labeled B).
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drill four 1/4-inch holes for the switches (labeled C). It’s a good idea to
    identify the switch locations with a permanent marker on the inside of the enclosure
    to simplify wiring them.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drill a 9/32-inch hole for the potentiometer (labeled D).
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate a position you like for the 3.5 mm power jack that is 3/4 inches from
    the edge of the enclosure and 1/2 inches from the bottom. Drill a 1/4-inch hole
    for a 3.5 mm jack there.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mount the LCD with four 4-40 screws. Some LCDs have a protrusion on one side
    for the backlight. If yours does, you will have to raise the LCD off the surface
    of the enclosure to accommodate the backlight section on the right-hand edge (when
    looking at the LCD with the connections at the top). I simply put 4-40 nuts on
    the back of the screws to leave space. If a single nut is not enough (4-40 nuts
    can have different thicknesses), include a washer. Then, fasten the display to
    the enclosure. If your display does not include the protrusion, then just fasten
    the display to the case.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mount the banana plug jacks and switches in the enclosure. It is sometimes easier
    to solder wires onto the switches and jacks to minimize damage to the enclosure
    from accidental contact with the soldering iron.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Wiring the Electronics***'
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before mounting the PCB shield in the enclosure, solder the components to it,
    and solder all the wires for the LCD, the potentiometer, the switches, the power
    jack, and the banana jacks. You may find it helpful to solder the wires to the
    switches and jacks first. When in doubt, leave some extra length on the wires,
    but abide by the axiom, “If it’s too short, you can always splice it; if it’s
    too long, you won’t know what to do with it.” I suggest using male and female
    headers for the LCD to make hookup easier.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: I mounted the shield directly to the rear of the LCD using double-sided foam
    tape. This, however, could have contributed to the distortion of the waveform
    at higher frequencies. You might prefer to mount the module as far from the display
    as possible. The front of the enclosure needs no special treatment other than
    the placement of the labels at your discretion.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '**Design Notes and Mods**'
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I toyed with several iterations of the Square-Wave Generator before arriving
    at the version described in this chapter. Along the way, I tweaked some aspects
    and considered other changes. While the ideas in this section didn’t make it into
    this project, you may enjoy trying them yourself.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '***Displaying Frequency in Other Units***'
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The sketch displays the square-wave frequency in Hz, as most of the applications
    I have planned are in the area of 100 Hz to 10 kHz. But if you find yourself using
    the device a lot in higher frequencies, looking at six or seven integers can be
    confusing. Never fear: it’s easily possible to change the sketch to show the frequency
    in kHz or even MHz by simply truncating the display.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'To truncate the display, simply add a comma and the number of digits you want
    it to show. For example, to change from Hz to kHz, change these lines in the sketch:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(freq);
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(10, 1);
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Hz");
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'to these lines:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(freq/1000);
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(10, 1);
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("kHz");
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to reduce the number of digits appearing in the readout, change
    this line:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(freq/1000);
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'to this:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(freq/1000,3);
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: You can change `3` to the number of digits you want.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '***Reading External Input Frequencies***'
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The schematic and the finished project include a switch to change from generating
    pulses to reading the frequency of an external input. The switch (SW3) brings
    the input jack directly to the input (pin 5) of the Arduino, where the oscillator
    would normally connect. I have used this very successfully for a variety of applications,
    particularly when I wanted a quick frequency reading somewhere outside my shop.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: There is no circuitry to protect the processor, so just be careful. The unit
    is meant to use inputs that are standard TTL levels—0 to 5V. The Arduino is relatively
    sensitive and can detect signals at somewhat lower levels. If you plan, however,
    to use it with very low-level inputs—that is, less than 0.5V—then you should build
    some kind of prescaler or preamp circuit.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to use the Square-Wave Generator as an independent frequency counter,
    you might want to consider using a preamp to provide the amplification and prevent
    damage to the processor. A simple one appears in [Figure 9-17](ch09.xhtml#ch09fig9-17),
    using one-sixth of a 74HC14 Hex Schmitt-trigger inverter.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig9_17.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-17: Optional preamp/buffer for input to frequency counter*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Using a preamp will help protect the input of the Arduino because the output
    of the preamp will be limited to the supply voltage.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '***Battery Power***'
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While this project was initially designed for use with an external power supply,
    it can be easily converted to battery power. The total current drain with the
    LCD backlight lit is just under 100 mA. The capacity of a zinc manganese battery
    is approximately 500 mA hours. Thus, you can expect a life of about 5 hours. Alkaline
    batteries will tend to do better.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: To accommodate the battery power, I simply replaced the power switch with one
    that had a center-off position. I wired one outer terminal to the AC-based power
    jack, the other outer terminal to the positive terminal of the battery, and the
    center terminal to the positive rail on the PCB shield. The negative terminal
    of the battery goes to ground. That configuration is shown in the current schematic.
    If you use the enclosure I suggest, a battery should fit conveniently. You can
    use double-sided adhesive to attach a battery holder.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
