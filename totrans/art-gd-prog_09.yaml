- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Working with Sound
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 处理声音
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 71: Playing a Sound File'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 71：播放声音文件
- en: One *displays* an image but *plays* a sound; why is that? Whatever the reason,
    Processing has no standard facility for displaying audio. It *does* have some
    libraries for that purpose, however, most importantly Minim. (We used a library
    in Sketch 50.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面*显示*的是图像，但*播放*的是声音；这是为什么呢？无论原因是什么，Processing 并没有标准的音频显示功能。不过，它确实有一些库可以实现这一目的，最重要的就是
    Minim。（我们在草图 50 中使用了一个库。）
- en: Using Minim, this sketch will play an MP3 or WAV sound file using the standard
    PC sound interface. Adding to this, if the user presses the A key, the sound will
    move toward the left speaker, and if they press the D key (which is to the right
    of the A key), the sound will move toward the right speaker.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Minim，这个草图将通过标准的 PC 音频接口播放一个 MP3 或 WAV 格式的声音文件。除此之外，如果用户按下 A 键，声音将会朝左扬声器移动；如果他们按下
    D 键（在 A 键的右边），声音将会朝右扬声器移动。
- en: 'The first statement in the program 1 indicates that we want to access the Minim
    library:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中的第一条语句 1 表示我们想要访问 Minim 库：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then we need to create a single instance of the Minim library. The Minim library
    is a class, and it contains functions that can load and play sound files. Define
    a variable named `minim` of type `Minim`, and initialize it in the `setup()` function
    3 as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要创建一个 Minim 库的单一实例。Minim 库是一个类，包含了能够加载和播放声音文件的函数。定义一个名为 `minim` 的 `Minim`
    类型的变量，并在 `setup()` 函数 3 中初始化它，如下所示：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now declare a sound player variable 2:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在声明一个声音播放器变量 2：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Assign it a sound file as read from an MP3 file using the `Minim` function
    `loadFile()` 4:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Minim` 函数 `loadFile()` 4 将其分配为从 MP3 文件读取的声音文件：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can play this file using the PC sound hardware by using the `play()` function
    5, a part of the `AudioPlayer`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `play()` 函数 5，通过计算机的音频硬件播放该文件，这是 `AudioPlayer` 的一部分：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To change the balance (pan) of the sound in stereo speakers, the user presses
    the A (left) and D (right) keys. Each key press adds a small value to or subtracts
    one from the `pan` variable, which is then used to set the balance 6:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改变立体声扬声器中声音的平衡（声道），用户按下 A（左）和 D（右）键。每按一次键，就会向 `pan` 变量添加一个小值，或从中减去一个小值，然后用这个变量来设置平衡
    6：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For other effects, there are a variety of functions that control the sound
    display, including the getting and setting of pan/balance, gain, and volume: `getBalance()`,
    `getVolume()`, `getGain()`. Documentation for Minim can move around the web, but
    in 2022 it’s found at [http://code.compartmental.net/2007/03/27/minim-an-audio-library-for-processing/](http://code.compartmental.net/2007/03/27/minim-an-audio-library-for-processing/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他效果，控制声音显示的函数种类繁多，包括获取和设置平衡/声道、增益和音量的函数：`getBalance()`、`getVolume()`、`getGain()`。Minim
    的文档可能会在网上有所变动，但在 2022 年可以在 [http://code.compartmental.net/2007/03/27/minim-an-audio-library-for-processing/](http://code.compartmental.net/2007/03/27/minim-an-audio-library-for-processing/)
    找到。
- en: 'Sketch 72: Displaying a Sound’s Volume'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 72：显示声音的音量
- en: Sketch 71 does not have a very visually interesting display. Its display is
    auditory, and while that is in keeping with its primary function, the Processing
    language usually creates more graphical output. One obvious way to accomplish
    this is to display the volume of a sound visually, as numbers on a dial or, as
    in this sketch, as the height of vertical bars.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 草图 71 的显示效果并不特别引人注目。它的显示是听觉上的，虽然这与其主要功能相符，但 Processing 语言通常会生成更多图形输出。一种显而易见的方法是通过视觉方式显示声音的音量，像是通过表盘上的数字，或者像本草图一样，通过垂直条形的高度。
- en: 'To make this sketch work, we must get numerical values for the sound that we
    read from the file. The `AudioInput` component class of `Minim` allows a connection
    to the current record source device for the computer. For this sketch to function
    properly, the user needs to set the source device to monitor the sound as it plays.
    For example, if the sound input is a file, we could use this code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个草图正常工作，我们必须获取从文件中读取的声音的数值。`Minim` 的 `AudioInput` 组件类允许与计算机当前的录音源设备建立连接。为了让这个草图正常运行，用户需要将源设备设置为监控正在播放的声音。例如，如果声音输入来自一个文件，我们可以使用如下代码：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Assuming this is true, the sketch uses a variable of the `AudioInput` type
    (named `in` 1) and initializes it using `getLineIn()` 2:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这一点成立，草图使用 `AudioInput` 类型的变量（命名为 `in` 1），并通过 `getLineIn()` 2 来初始化它：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the variable `in` can access the functions belonging to `AudioInput`, which
    include the ability to get individual data values. Sound on a computer consists
    of sampled voltages that have been rescaled to a convenient range. Thus, an audio
    value is a number, normally between −1 and +1, that represents the volume. We
    can access each of the stereo channels: the left channel is `in.left`, and the
    right is `in.right` (these are of type `AudioBuffer`, which is just an array of
    real numbers). The `get()` function allows access to the numerical values:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This gets the first value in the buffer, which could be positive or negative,
    so for display purposes it is better to use the value `abs(in.left.get(128))*2`
    4, which is simply the magnitude of the value shifted to the range 0 to 2\. Now
    this number can represent the height of a rectangle 6, proportional to the sound
    volume:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The same process works for both the left and right channels.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The total duration of a sound loaded into the variable player is `player.duration()`;
    the current position, assuming that it is playing, is `player.position()`. When
    the sound is over, `player.length() <= player.position()`, and the `Minim` specification
    says that it is important to close and stop `Minim` to ensure that resources are
    given back to the system (via `in.close(); minim.stop();` ). In the sketch, the
    `stop()` function 7 does this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The sketch also displays a numerical value for the sound data. A real number
    potentially has a lot of digits, most of which are not really important. To print
    only two decimal places, as in the sketch, multiply the value by 100 and then
    convert it to an integer. This removes the remaining fractional part (all other
    digits to the right). Then convert this back to real and divide by 100 5:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Sketch 73: Bouncing a Ball with Sound Effects'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In movies, animations, theater, and computer games, a sound effect is (usually)
    a short piece of audio that indicates that something has happened. A telephone
    ringing, the smack of a bat hitting a baseball, and the splash of a stone falling
    into a lake are all examples of sound effects. This sketch will illustrate the
    use of a sound effect in a simple simulation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Sketch 28 simulated a bouncing ball. It looks nice, but it would be better as
    an animation if a sound accompanied each bounce. Sound is an important cue to
    humans, and a sound effect lends realism to the graphics. It does not have to
    be accurate; it just has to be some click or bump noise that corresponds to the
    event. Beginning with the code from Sketch 28, we’ll add an `AudioPlayer` object
    from the Minim library to play a short MP3 file when the ball strikes a side of
    the window.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: To create the sound effect, we’ll save the sound of a thump (such as a ball
    bouncing on the floor or a cup being set down on a table) using a PC microphone
    and a freely available sound editor/capture tool such as Audacity ([https://www.audacityteam.org/](https://www.audacityteam.org/))
    or GoldWave ([http://www.goldwave.ca/](http://www.goldwave.ca/)). This sketch
    assumes the sound is saved as *click.mp3*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建声音效果，我们将使用 PC 麦克风和免费提供的声音编辑/捕捉工具（例如 Audacity ([https://www.audacityteam.org/](https://www.audacityteam.org/))
    或 GoldWave ([http://www.goldwave.ca/](http://www.goldwave.ca/))）保存一个重击声（例如，球弹到地板上或杯子放在桌子上的声音）。这个示例假设声音已经保存为
    *click.mp3*。
- en: After the initialization of `Minim` 1, an `AudioPlayer` (the variable `player`)
    reads the MP3 file. When the ball strikes a side of the window, as detected by
    the functions `xbounce()`2 and `ybounce()` 5, the ball changes direction and we
    play the sound with a call to `player.play()` 3.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Minim` 初始化后 1，`AudioPlayer`（变量 `player`）读取 MP3 文件。当球击中窗口的某一侧时，`xbounce()`2
    和 `ybounce()`5 函数检测到这一点，球改变方向，然后通过调用 `player.play()` 3 播放声音。
- en: We have to rewind the sound file each time before it is played to make sure
    it starts from the beginning. The `rewind()` 4 function within `AudioPlayer` does
    this.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每次播放声音文件之前，我们必须倒带文件，确保它从头开始播放。`AudioPlayer` 内的 `rewind()` 函数完成了这个操作。
- en: 'Sketch 74: Mixing Two Sounds'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 74：混合两种声音
- en: In the process of sound mixing, we assign each of a number of sound sources
    to different output levels or volumes. In live music concerts, this makes the
    sound of each instrument audible at the proper volume level. We also do this when
    recording multiple sources of sound, such as microphones, guitars, and other instruments,
    which need to have their volume levels adjusted so that no one component overwhelms
    the total. Mixers have been around for a long time, and most have sliding controls
    to adjust volume levels of multiple sound signals. This sketch will use the slider
    control developed in Sketch 43 to adjust the volume of two different sound files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在声音混音的过程中，我们将多个声音源分配到不同的输出级别或音量。在现场音乐会中，这可以使每个乐器的声音以适当的音量级别听到。我们在录制多个声音源时也会这么做，例如麦克风、吉他和其他乐器，这些音源的音量需要调整，以确保没有一个元素的音量压过整体的声音。混音器已经存在很长时间了，大多数混音器都有滑动控制来调整多个声音信号的音量。这个示例将使用在示例
    43 中开发的滑动控制来调整两个不同声音文件的音量。
- en: The sketch begins by declaring two `AudioPlayer` variables 1, one for each sound,
    loading the sound files 2, and starting to play them both 3. Next we create two
    slider controls; one is control A, having position and control variables beginning
    with “a” (`asliderX`, `asliderY`, `avalue`) and the other is control B (`bsliderX`,
    `bsliderY`, and so on). The value of slider A is used to set the volume of the
    first of the sound files being played (by `playera`), and slider B controls the
    volume of the other (`playerb`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 示例首先声明了两个 `AudioPlayer` 变量 1，一个用于每个声音，加载声音文件 2，并开始播放它们 3。接下来，我们创建两个滑动控制；一个是控制
    A，具有以“a”开头的位置和控制变量（`asliderX`，`asliderY`，`avalue`），另一个是控制 B（`bsliderX`，`bsliderY`
    等）。滑动控制 A 的值用于设置第一个声音文件（由 `playera` 播放）的音量，滑动控制 B 控制另一个文件（由 `playerb` 播放）的音量。
- en: 'We set the output level by calling the `Minim` function `setGain()`. This function
    has a parameter that represents the value of the gain (proportional to volume).
    The units on gain are decibels (dB) and they begin at −80 and end at +14 for a
    total range of 94 dB units. The total range of the slider values is 1,000\. Thus,
    the gain for `playera` is set using the following call 4:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用 `Minim` 函数 `setGain()` 来设置输出级别。这个函数有一个参数表示增益的值（与音量成正比）。增益的单位是分贝（dB），范围从
    −80 到 +14，总共 94 dB 的范围。滑动控制的总范围是 1,000。因此，`playera` 的增益通过以下调用 4 设置：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the slider value is at the minimum of 0, the gain will be 0/1,000 * 94 −
    80 = 0 − 80 = −80\. If the slider value is at the maximum of 1,000, the gain will
    be 1,000/1,000 * 94 − 80 = 94 − 80 = 14\. That the gain values have the correct
    output for the extreme values supports the idea that the mapping is correct. The
    dB scale is logarithmic, though, so this is an approximation of the truth.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果滑动控制的值为最小值 0，增益将为 0/1,000 * 94 − 80 = 0 − 80 = −80。若滑动控制的值为最大值 1,000，增益将为
    1,000/1,000 * 94 − 80 = 94 − 80 = 14。增益值在极值下正确输出，这支持了映射是正确的观点。不过，dB（分贝）刻度是对数的，因此这是对真实值的近似。
- en: When the sketch is executing, the two sound files will play. Sliding the top
    slider right will increase the volume of the *sounda.mp3* file, and sliding the
    lower slider will control the volume of the *soundb.mp3* file. The idea is to
    find relative levels that sound right.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当草图执行时，两个声音文件将播放。将上方滑块向右滑动将增加*sounda.mp3*文件的音量，而滑动下方滑块将控制*soundb.mp3*文件的音量。其目的是找到听起来合适的相对音量。
- en: 'Sketch 75: Displaying Audio Waveforms'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 75：显示音频波形
- en: Most computer-based sound editors display a graphical rendering of the audio
    signal and allow the user to “grab” parts of it with the mouse and move or delete
    them. This graphical display is actually a plot of audio volume versus time. Some
    music players display such a plot in real time, as the music is playing. That’s
    exactly what this sketch will do. It draws the plot of whatever sound the computer
    is playing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数基于计算机的声音编辑器显示音频信号的图形渲染，并允许用户用鼠标“抓取”其中的部分并移动或删除它们。这个图形显示实际上是音频音量与时间的关系图。一些音乐播放器实时显示这种图表，在音乐播放时展示。这正是这个草图将要做的。它绘制计算机播放的任何声音的图表。
- en: Drawing this requires the ability to get the sound data as numbers in real time.
    A bit of error does not matter, because this is not a scientific tool, so it’s
    possible to use some of the code from Sketch 72, which also displayed an audio
    visualization. Here we will fill a sound buffer and then play it as sound data
    until the data is finished.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制这一点需要能够实时获取声音数据作为数字。稍微的误差并不重要，因为这不是一个科学工具，所以可以使用草图72中的部分代码，该代码也显示了音频可视化。在这里，我们将填充一个声音缓冲区，然后将其作为声音数据播放，直到数据播放完毕。
- en: 'Audio is represented as a set of consecutive numerical values that can reasonably
    be stored in an array (a buffer). There are usually two channels (stereo), and
    any value from a buffer can be retrieved using the `in.left_get()` or `in.right_get()`
    functions, specifying which sample is wanted. For example, the program gets a
    data point from the left channel using a call to `left_get()` 3 and uses this
    value to represent all levels in the current buffer. This is just *one* data point
    from many samples, and it is possible to specify the buffer size when the `getLineIn()`
    call is made. The system plays sound from this buffer and refills it whenever
    it needs more data. We specify a size of 1,024 samples per buffer 1:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 音频以一组连续的数值表示，这些数值可以合理地存储在数组（缓冲区）中。通常有两个通道（立体声），并且可以通过`in.left_get()`或`in.right_get()`函数检索缓冲区中的任何值，指定所需的样本。例如，程序通过调用`left_get()`
    3获取左通道的数据点，并使用此值表示当前缓冲区中的所有级别。这只是*一个*数据点，来自许多样本，并且在调用`getLineIn()`时可以指定缓冲区的大小。系统从这个缓冲区播放声音，并在需要更多数据时重新填充它。我们指定每个缓冲区1包含1,024个样本：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If the window is 512 pixels wide, there is 1 pixel for every 2 samples, its
    height being the value retrieved using the call to `get()`. Assuming that the
    value of a data element is between −1 and +1, we draw the 1,024 data points as
    a line from (`i, datai`) to (`i+1, datai+1`) for all `i` between 0 and 1,023 by
    twos 2. This is illustrated in [Figure 75-1](#figure75-1).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果窗口宽度为512像素，则每2个样本对应1个像素，其高度是通过调用`get()`获取的值。假设数据元素的值在-1到+1之间，我们将1,024个数据点绘制为从（`i,
    datai`）到（`i+1, datai+1`）的线条，其中所有`i`在0到1,023之间，每次跳2个2。这在[图 75-1](#figure75-1)中进行了说明。
- en: '![f075001](Images/f075001.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![f075001](Images/f075001.png)'
- en: 'Figure 75-1: Scaling samples and plotting them as lines'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 75-1：缩放样本并将其绘制为线条
- en: 'In other words, we have the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们得到如下内容：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We do this in the `draw()` function so it will refresh every 10th of a second
    and display an animated version of the audio. We scale the data by multiplying
    by 100, giving a total height of 200 pixels, and then translate it to the vertical
    center of the window by adding this value to the data point.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`draw()`函数中执行此操作，这样它每秒刷新10次并显示音频的动画版本。我们通过乘以100来缩放数据，使总高度为200像素，然后通过将该值加到数据点上将其平移到窗口的垂直中心。
- en: 'Sketch 76: Controlling a Graphic with Sound'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 76：通过声音控制图形
- en: PC-based music players frequently offer a set of visualizers that present abstract
    moving images that change in coordination with the music, as shown in [Figure
    76-1](#figure76-1). Sketch 75 is a visualizer that displays the actual signal,
    which can be useful for signal analysis and editing, but the purpose of music
    player visualizations is to entertain by presenting interesting images. This sketch
    represents one attempt to implement such a visualizer.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 PC 的音乐播放器通常会提供一组可视化工具，展示与音乐同步变化的抽象动态图像，如[图 76-1](#figure76-1)所示。草图 75 是一个显示实际信号的可视化工具，这对于信号分析和编辑非常有用，但音乐播放器可视化的目的是通过呈现有趣的图像来娱乐用户。这个草图展示了实现这样一个可视化工具的尝试。
- en: '![f076001](Images/f076001.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f076001](Images/f076001.png)'
- en: 'Figure 76-1: An example visualizer'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 76-1：一个示例可视化工具
- en: There are many ways to control images using music, but the underlying idea is
    to pull numbers from the sound data and use them as parameters to some graphical
    model so the display reacts to the actual sound. Beyond the raw sound data points
    described in the previous sketch, we want to measure values that indicate changes
    in the sound so that the display is dynamic. The difference between two consecutive
    values is one measure. These numbers would tend to be similar to each other, so
    two values at a fixed time from each other might give a better range of numbers.
    Another idea would be to use the difference between the left and right channels.
    More complicated measurements include the difference between a data value and
    the average for a short time or the difference between the maximum and minimum
    values over a time period.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用音乐控制图像有很多方式，但其基本思路是从声音数据中提取数字，并将其作为参数应用于某个图形模型，从而使显示响应实际的声音。除了前面草图中描述的原始声音数据点，我们还希望测量能够表示声音变化的数值，这样显示效果才会动态变化。两个连续值之间的差异是一种衡量标准。这些数字通常会相似，因此两个固定时间间隔内的数值可能会提供更好的数值范围。另一个思路是使用左右声道之间的差异。更复杂的测量包括数据值与短时间内平均值之间的差异，或者一段时间内最大值与最小值之间的差异。
- en: Once we decide which measurements to use, what will we use the values for? This
    depends on the visual effect we desire. They could represent x, y positions, colors,
    speed, or even shape parameters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们决定使用哪些测量值，我们将如何使用这些数值？这取决于我们想要的视觉效果。它们可以表示 x、y 位置、颜色、速度，甚至是形状参数。
- en: 'This sketch will use ellipses as the basis for the display. The data from the
    left and right channels of the current buffer will define the width and height
    parameters of an ellipse to be drawn at the center of the screen. The size of
    the ellipse will increase by five pixels for each frame, so it will grow from
    the center outwards 2. The color of the ellipse will be related to the difference
    between the current left data value and the corresponding left data value from
    the previous buffer 4; this means that color is a function of variation over time.
    By drawing each ellipse with a transparency (alpha) value of 30, we can make the
    colors blend into each other. Because we’re using transparency, we should display
    the largest ellipses first, and then smaller ones, or the smaller ones could be
    overwhelmed by ones drawn above them. We must maintain a set of parameters for
    these ellipses so that we can display all of them correctly each iteration, and
    we do this by saving them in a set of arrays: `colors`, `hsize`, and `vsize` for
    the ellipse color and size.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本草图将使用椭圆作为显示的基础。当前缓冲区左右声道的数据将定义在屏幕中央绘制椭圆的宽度和高度参数。椭圆的大小将在每一帧增加五个像素，因此它将从中心向外增长
    2。椭圆的颜色将与当前左声道数据值与前一个缓冲区相应的左声道数据值之间的差异 4 相关联；这意味着颜色是时间变化的函数。通过为每个椭圆绘制一个透明度（alpha）值为
    30 的颜色，我们可以让这些颜色相互融合。由于使用了透明度，我们应该先绘制最大的椭圆，然后再绘制较小的椭圆，否则较小的椭圆可能会被上面的椭圆遮挡。我们必须为这些椭圆维护一组参数，以便每次迭代都能正确显示它们，我们通过将它们保存在一组数组中来做到这一点：`colors`、`hsize`
    和 `vsize` 用于椭圆的颜色和大小。
- en: Start the program and then play a sound file with another program on your PC.
    The sketch extracts the numeric parameters from the sound 3 and displays the corresponding
    ellipses each frame 1. The visual is surprisingly interesting given the simplicity
    of the method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 启动程序后，再用 PC 上的另一个程序播放一个声音文件。该草图从声音 3 中提取数值参数，并在每一帧 1 中显示相应的椭圆。考虑到方法的简单性，视觉效果出奇地有趣。
- en: 'Sketch 77: Positional Sound'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 77：位置声音
- en: Because humans have two ears, we can roughly identify the location of a sound.
    We do this partly by using the difference in time of arrival and the volume of
    the sound at each ear. A sound is louder in the ear that is nearest to the source,
    and we can use this fact to simulate positional sound using a computer. In this
    sketch, we’ll play a sound and let the user select a listening position in the
    center of the sketch window. The user can move about, changing the angle they
    are facing with the A and D keys and stepping forward and backward using W and
    S.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因为人类有两只耳朵，我们大致可以识别声音的位置。我们部分是通过声音到达每只耳朵的时间差和声音的音量来实现的。声音在靠近源头的耳朵中会更响，我们可以利用这一事实，通过计算机模拟位置音效。在这个示例中，我们将播放一个声音，并让用户在窗口中央选择一个听音位置。用户可以移动，使用A和D键改变朝向，使用W和S键向前或向后移动。
- en: When the user is facing exactly toward or away from a sound source, the loudness
    in each ear should be about equal. When they are facing so that the left ear is
    pointing to the source, the volume in the left ear is loudest and in the right
    ear it is the quietest, and vice versa when the right ear is facing the sound.
    With this in mind, we can map volumes from loudest in the left to equal to loudest
    in the right as a function of the way the listener is facing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户正对着或背对着声音源时，两只耳朵的音量应该差不多。用户面对声音源时，如果左耳朝向源，左耳的音量最大，右耳的音量最小；反之亦然，如果右耳朝向声音源时。考虑到这一点，我们可以根据用户的朝向来调整左右耳音量的大小，从最响的左耳到最响的右耳。
- en: Imagine an angle made between the listener’s position, the source position,
    and the x-axis, labeled θ in [Figure 77-1](#figure77-1). The angle that the listener
    is facing combines with the angle between the listener and the object to determine
    how loud the sound will seem in each ear, and thus determines how loud we should
    play the sound from each speaker to simulate positional sound.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个由听者的位置、声音源的位置和x轴之间形成的角度，如图[77-1](#figure77-1)所示。听者的朝向角度与听者与物体之间的角度结合，决定了每只耳朵听到的声音有多大，从而决定了我们应该如何调节每只扬声器播放的音量，以模拟位置音效。
- en: '![f077001](Images/f077001.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![f077001](Images/f077001.png)'
- en: 'Figure 77-1: Geometry of positional audio'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 77-1：位置音频的几何图形
- en: 'The angle θ is determined using trigonometry as the arctangent of the difference
    in x over the difference in y 3, or the following, where the `atan2` function
    handles the case where the angle is vertical:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 角度θ是通过三角函数计算的，它是x差与y差的反正切，或者以下公式，`atan2`函数处理角度为垂直时的情况：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The difference between the facing angle and θ (theta) defines an angle that
    controls the volume between two stereo channels being played, via the `setPan()`
    function. A parameter of −1 means full left channel, 0 means a balance, and +1
    means full right. A bit of fiddling on paper shows that a 0-degree angle to the
    source should correspond to a pan of 0, 90 degrees has a pan of −1, 180 degrees
    has a pan of 0, and 270 degrees has a pan of +1\. These are the extreme points
    of the function `-sin(facing-theta)`, so this value is passed to `setPan()`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 朝向角度与θ（theta）之间的差值定义了一个角度，这个角度控制通过`setPan()`函数在两个立体声通道间的音量。参数−1表示全左声道，0表示平衡，+1表示全右声道。稍微在纸上推算一下，可以得出：与声音源的角度为0度时，对应的pan值为0，90度时pan值为−1，180度时pan值为0，270度时pan值为+1。这些是`-sin(facing-theta)`函数的极值点，因此这个值将传递给`setPan()`。
- en: In summary, the sound file (a simple tone) starts playing 1; the sound source
    is initially located at (200, 200) 2, and the user is initially at (300, 200)
    but can rotate and move. The volume of the sound played in each speaker is set
    by determining the angle θ, computing `delta = facing-theta`, and setting the
    pan to `–sin(delta`) 4.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，声音文件（一个简单的音调）开始播放1；声音源初始位置在(200, 200) 2，用户初始位置在(300, 200)，但可以旋转和移动。每只扬声器播放的音量通过确定角度θ，计算`delta
    = facing-theta`，并将平衡设置为`–sin(delta)` 4来设置。
- en: 'Sketch 78: Synthetic Sounds'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 78：合成声音
- en: This sketch will implement a small sound synthesizer. It will only have eight
    keys, more like a child’s toy piano, but it will be functional and can serve as
    the basis for more complex sound synthesis projects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将实现一个小型的声音合成器。它只有八个键，更像是一个儿童玩具钢琴，但它是功能性的，并且可以作为更复杂的声音合成项目的基础。
- en: '`Minim` provides a type (a class) named `AudioOutput` that allows us to display
    signals, not just sound files, on the PC hardware. It allows the playing of a
    note, although not exactly musical notes as normally understood. A note in this
    context is a digital audio signal having a specific frequency.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Minim`提供了一种类型（类），名为`AudioOutput`，它允许我们在PC硬件上显示信号，而不仅仅是声音文件。它允许播放一个音符，尽管这些音符不完全是通常理解的音乐音符。在这个上下文中，音符是具有特定频率的数字音频信号。'
- en: 'The name of the `AudioOutput` variable in the sketch is `out`, and it is initialized
    1 as the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 草图中`AudioOutput`变量的名称是`out`，它初始化为如下所示：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This call allocates a new instance of `AudioOut` that is accessible from the
    variable `out`. To play a note, call the `playNote()` function 2:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用分配了一个新的`AudioOut`实例，可以通过变量`out`访问。要播放一个音符，调用`playNote()`函数：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This sends a sine wave with a frequency of 440 Hz (the musical note A) to the
    sound card. `playNote()` can be called with nearly any frequency, because the
    “notes” are just snippets of a sine wave.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将频率为440 Hz（音符A）的正弦波发送到声卡。`playNote()` 可以用几乎任何频率调用，因为“音符”只是正弦波的片段。
- en: 'Unfortunately, the `AudioOutput` object likes to impose a specified duration
    on a note, so the note plays for what the system believes to be a single unit
    of time. To imitate a musical instrument played by a human who can vary the duration,
    we need to call `playNote()` with more parameters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`AudioOutput`对象倾向于为音符指定一个持续时间，所以音符会播放系统认为的一个单位时间。为了模仿人类演奏的乐器，可以变化持续时间，我们需要使用更多参数来调用`playNote()`：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, 0 is the time until the note is to be played (immediately),
    1,000 is the duration, and the final parameter is the frequency; 1,000 units is
    a long time.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，0是音符播放的时间（立即），1,000是持续时间，最后一个参数是频率；1,000单位是一个很长的时间。
- en: The sketch displays a simple piano image with labeled keys. When the user clicks
    the mouse on one of the graphical piano keys, the program plays that note 2; the
    value of the x position of the mouse tells us what the note is (in `mousePressed()`).
    When the mouse button is released, the program creates a new `AudioOutput` 3 so
    that the old note stops playing and a new one can start (in `mouseReleased()`).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 草图显示一个简单的钢琴图像，并标注了钢琴键。当用户点击图形钢琴键之一时，程序播放该音符；鼠标的x位置值告诉我们音符是什么（在`mousePressed()`中）。当鼠标按钮释放时，程序创建一个新的`AudioOutput`，以便停止播放旧的音符并开始播放新的音符（在`mouseReleased()`中）。
- en: 'Sketch 79: Recording and Saving Sound'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图79：录制和保存声音
- en: This sketch captures the audio currently playing on the computer and saves it
    in a file in *.wav* format. This would permit recording sound from Skype calls,
    websites, and podcasts, to name a few.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图捕获当前在计算机上播放的音频，并将其保存为*.wav*格式的文件。这允许录制来自Skype通话、网站和播客的声音，仅举几例。
- en: In Sketches 75 and 76 we used `Minim` and an `AudioInput` object to access the
    currently playing sound for visualization. In this case, the next step is to create
    an `AudioRecorder`, which takes as a parameter an input from which we can collect
    sound; that is, the `AudioInput` object connected to the currently playing sound.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图75和76中，我们使用了`Minim`和`AudioInput`对象来访问当前播放的声音进行可视化。在这种情况下，下一步是创建一个`AudioRecorder`，它接受一个输入作为参数，我们可以从中收集声音；也就是说，连接到当前播放声音的`AudioInput`对象。
- en: 'An `AudioInput` has three functions (methods) of importance:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioInput` 有三个重要的功能（方法）：'
- en: '`beginRecord()` Start saving audio samples.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`beginRecord()` 开始保存音频样本。'
- en: '`endRecord()` Stop saving the audio samples.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`endRecord()` 停止保存音频样本。'
- en: '`save()` Store the saved samples as an audio file.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`save()` 将保存的样本作为音频文件存储。'
- en: How much audio data we can save depends on the memory available on the computer.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以保存的音频数据量取决于计算机上的可用内存。
- en: The sketch opens a window and displays the playing sound signal as in Sketch
    75\. If the user types the R character 2 (handled by `keyReleased()`), we call
    `beginRecord()` and start saving data. When the user types Q 3, we call `endRecord()`
    and the recording stops. If the user types S, we call `save()` 4.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 草图打开一个窗口，并显示播放的声音信号，类似于草图75。如果用户按下R字符（由`keyReleased()`处理），我们调用`beginRecord()`并开始保存数据。当用户按下Q时，我们调用`endRecord()`，录音停止。如果用户按下S，我们调用`save()`。
- en: 'We specify the file used to save the data as a parameter on the creation of
    the `AudioRecorder` 1:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在创建`AudioRecorder`时将用于保存数据的文件指定为一个参数：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, `input` is the already existing `AudioInput` object, *processing.wav*
    is the file where we’ll save the sound data, and the final parameter represents
    whether or not the recording is buffered, which is to say whether the data is
    saved in memory or written directly to the file. If it’s not buffered, the system
    opens the file when recording begins. Otherwise the system opens the file when
    we write the data.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`input`是已经存在的`AudioInput`对象，*processing.wav*是我们将保存声音数据的文件，最后一个参数表示录音是否被缓冲，也就是说，数据是保存在内存中，还是直接写入文件。如果没有缓冲，系统会在录音开始时打开文件。否则，系统会在写入数据时打开文件。
- en: A small change to this code would allow the user to save to a different file
    each time they start and stop recording. This could be useful for voice recording,
    such as reading scripts or reading books to tape.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对这段代码稍作修改，就能让用户在每次开始和停止录音时保存到不同的文件中。这对于语音录音可能很有用，比如读脚本或读书籍到磁带中。
