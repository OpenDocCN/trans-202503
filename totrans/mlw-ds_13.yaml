- en: AN OVERVIEW OF DATASETS AND TOOLS
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集和工具概述
- en: '![image](../images/common01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'All data and code for this book are available for download at *[http://www.malwaredatascience.com/](http://www.malwaredatascience.com/)*.
    Be warned: there is Windows malware in the data. If you unzip the data on a machine
    with an antivirus engine running on it, many of the malware examples will likely
    get deleted or quarantined.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的所有数据和代码都可以在 *[http://www.malwaredatascience.com/](http://www.malwaredatascience.com/)*
    下载。请注意：数据中包含Windows恶意软件。如果你在安装了杀毒引擎的机器上解压数据，许多恶意软件示例可能会被删除或隔离。
- en: '**NOTE**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We have modified a few bytes in each malware executable so as to disable it
    from executing. That being said, you can’t be too careful about where you store
    it. We recommend storing it on a non-Windows machine that’s isolated from your
    home or business network.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们已修改了每个恶意软件可执行文件中的几个字节，以禁用其执行。话虽如此，你仍然需要小心存储位置。我们建议将其存储在与家庭或企业网络隔离的非Windows机器上。*'
- en: Ideally, you should only experiment with the code and data within an isolated
    virtual machine. For convenience, we’ve provided a VirtualBox Ubuntu instance
    at *[http://www.malwaredatascience.com/](http://www.malwaredatascience.com/)*
    that has the data and code preloaded onto it, along with all the necessary open
    source libraries.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你应该只在一个隔离的虚拟机中实验代码和数据。为了方便起见，我们提供了一个预加载数据和代码的VirtualBox Ubuntu实例，地址是 *[http://www.malwaredatascience.com/](http://www.malwaredatascience.com/)*，并且安装了所有必需的开源库。
- en: '**Overview of Datasets**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**数据集概述**'
- en: Now let’s walk through the datasets that accompany each chapter of this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来逐步了解本书每一章附带的数据集。
- en: '***Chapter 1: Basic Static Malware Analysis***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第1章：基本的静态恶意软件分析***'
- en: Recall that in [Chapter 1](ch01.xhtml#ch01) we walk through basic static analysis
    of a malware binary called *ircbot.exe*. This malware is an *implant*, meaning
    it hides on users’ systems and waits for commands from an attacker, allowing the
    attacker to collect private data from a victim’s computer or achieve malicious
    ends like erasing the victim’s hard drive. This binary is available in the data
    accompanying this book at *ch1/ircbot.exe*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在[第1章](ch01.xhtml#ch01)中，我们演示了一个名为 *ircbot.exe* 的恶意软件二进制文件的基本静态分析。这个恶意软件是一个*植入程序*，意味着它会隐藏在用户的系统上，等待攻击者的命令，从而允许攻击者收集受害者计算机的私人数据或达到恶意目的，比如擦除受害者的硬盘。这个二进制文件可以在本书附带的数据中找到，路径为
    *ch1/ircbot.exe*。
- en: We also use an example of *fakepdfmalware.exe* in this chapter (located at *ch1/fakepdfmalware.exe*).
    This is a malware program that has an Adobe Acrobat/PDF desktop icon to trick
    users into thinking they’re opening a PDF document when they’re actually running
    the malicious program and infecting their systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们还使用了一个名为 *fakepdfmalware.exe* 的示例（位于 *ch1/fakepdfmalware.exe*）。这是一个恶意程序，具有Adobe
    Acrobat/PDF桌面图标，旨在欺骗用户以为他们正在打开PDF文档，而实际上是在运行恶意程序并感染他们的系统。
- en: '***Chapter 2: Beyond Basic Static Analysis: x86 Disassembly***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第2章：超越基本静态分析：x86反汇编***'
- en: 'In this chapter we explore a deeper topic in malware reverse engineering: analyzing
    x86 disassembly. We reuse the *ircbot.exe* example from [Chapter 1](ch01.xhtml#ch01)
    in this chapter.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了恶意软件逆向工程的一个更深层次的主题：分析x86反汇编。在本章中，我们重新使用了[第1章](ch01.xhtml#ch01)中的
    *ircbot.exe* 示例。
- en: '***Chapter 3: A Brief Introduction to Dynamic Analysis***'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第3章：动态分析简要介绍***'
- en: For our discussion of dynamic malware analysis in [Chapter 3](ch03.xhtml#ch03),
    we experiment with a ransomware example stored in the path *ch3/d676d9dfab6a4242258362b8ff579cfe6e5e6db3f0cdd3e0069ace50f80af1c5*
    in the data accompanying this book. The filename corresponds to the file’s SHA256
    cryptographic hash. There’s nothing particularly special about this ransomware,
    which we got by searching *[VirusTotal.com](http://VirusTotal.com)*’s malware
    database for examples of ransomware.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论[第3章](ch03.xhtml#ch03)中的动态恶意软件分析时，我们使用了存储在路径 *ch3/d676d9dfab6a4242258362b8ff579cfe6e5e6db3f0cdd3e0069ace50f80af1c5*
    下的勒索病毒示例，这些数据附带在本书中。文件名对应文件的SHA256加密哈希。这个勒索病毒并没有什么特别之处，我们通过在 *[VirusTotal.com](http://VirusTotal.com)*
    的恶意软件数据库中搜索勒索病毒示例获取了它。
- en: '***Chapter 4: Identifying Attack Campaigns Using Malware Networks***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第4章：使用恶意软件网络识别攻击活动***'
- en: '[Chapter 4](ch04.xhtml#ch04) introduces the application of network analysis
    and visualization to malware. To demonstrate these techniques, we use a set of
    high-quality malware samples used in high-profile attacks, focusing our analysis
    on a set of malware samples likely produced by a group within the Chinese military
    known to the security community as *Advanced Persistent Threat 1* (or *APT1* for
    short).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 4 章](ch04.xhtml#ch04) 介绍了网络分析和可视化在恶意软件中的应用。为了展示这些技术，我们使用了一组用于高调攻击的高质量恶意软件样本，并将分析重点放在由中国军事团体生产的恶意软件样本上，该团体在安全界被称为
    *高级持续性威胁 1*（简称 *APT1*）。'
- en: 'These samples and the APT1 group that generated them were discovered and made
    public by cybersecurity firm Mandiant. In its report (excerpted here) titled “APT1:
    Exposing One of China’s Cyber Espionage Units” (*[https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf](https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf)*),
    Mandiant found the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样本和生成它们的 APT1 组由网络安全公司 Mandiant 发现并公开。在其报告中（摘录如下）标题为“APT1：揭露中国的网络间谍单位” (*[https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf](https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf)*)，Mandiant
    发现了以下内容：
- en: Since 2006, Mandiant has observed APT1 compromise 141 companies spanning 20
    major industries.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自 2006 年以来，Mandiant 观察到 APT1 入侵了 141 家跨越 20 个主要行业的公司。
- en: APT1 has a well-defined attack methodology, honed over years and designed to
    steal large volumes of valuable intellectual property.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APT1 拥有明确的攻击方法论，这一方法论经过多年的打磨，旨在窃取大量有价值的知识产权。
- en: Once APT1 has established access, they periodically revisit the victim’s network
    over several months or years and steal broad categories of intellectual property,
    including technology blueprints, proprietary manufacturing processes, test results,
    business plans, pricing documents, partnership agreements, and emails and contact
    lists from victim organizations’ leadership.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦 APT1 建立了访问权限，他们会定期在几个月或几年的时间内重新访问受害者的网络，窃取广泛类别的知识产权，包括技术蓝图、专有制造工艺、测试结果、商业计划、定价文件、合作协议，以及受害组织领导层的电子邮件和联系人列表。
- en: 'APT1 uses some tools and techniques that we have not yet observed being used
    by other groups including two utilities designed to steal email: GETMAIL and MAPIGET.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APT1 使用了一些我们尚未观察到其他组织使用的工具和技术，其中包括两个用于窃取电子邮件的工具：GETMAIL 和 MAPIGET。
- en: APT1 maintained access to victim networks for an average of 356 days.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APT1 平均在受害者网络中保持访问权限的时间为 356 天。
- en: The longest time period APT1 maintained access to a victim’s network was 1,764
    days, or four years and ten months.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APT1 保持对某一受害者网络访问的最长时间为 1,764 天，即四年十个月。
- en: Among other large-scale thefts of intellectual property, we have observed APT1
    stealing 6.5TB of compressed data from a single organization over a ten-month
    time period.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其他大规模知识产权盗窃事件中，我们观察到 APT1 在十个月的时间里，从一个单一的组织窃取了 6.5TB 的压缩数据。
- en: In the first month of 2011, APT1 successfully compromised at least 17 new victims
    operating in 10 different industries.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 2011 年的第一个月，APT1 成功地入侵了至少 17 个新的受害者，这些受害者来自 10 个不同的行业。
- en: As this excerpt of the report shows, the APT1 samples were used for high-stakes,
    nation state–level espionage. These samples are available in the data accompanying
    this book at *ch4/data/APT1_MALWARE_FAMILIES*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本报告的摘录所示，APT1 样本被用于高风险的国家级间谍活动。这些样本可以在本书随附的数据中找到，位置为 *ch4/data/APT1_MALWARE_FAMILIES*。
- en: '***Chapter 5: Shared Code Analysis***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第 5 章：共享代码分析***'
- en: '[Chapter 5](ch05.xhtml#ch05) reuses the APT1 samples used in [Chapter 4](ch04.xhtml#ch04).
    For convenience, these samples are also located in the [Chapter 5](ch05.xhtml#ch05)
    directory, at *ch5/data/APT1_MALWARE_FAMILIES*.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 5 章](ch05.xhtml#ch05) 重用了在[第 4 章](ch04.xhtml#ch04)中使用的 APT1 样本。为了方便起见，这些样本也位于
    [第 5 章](ch05.xhtml#ch05) 目录下，位于 *ch5/data/APT1_MALWARE_FAMILIES*。'
- en: '***Chapter 6: Understanding Machine Learning–Based Malware Detectors and Chapter
    7: Evaluating Malware Detection Systems***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第 6 章：理解基于机器学习的恶意软件检测器，第 7 章：评估恶意软件检测系统***'
- en: These conceptual chapters don’t require any sample data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念章节不需要任何样本数据。
- en: '***Chapter 8: Building Machine Learning Detectors***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第 8 章：构建机器学习检测器***'
- en: '[Chapter 8](ch08.xhtml#ch08) explores building machine learning–based malware
    detectors and uses 1,419 sample binaries as a sample dataset for training your
    own machine learning detection system. These binaries are located at *ch8/data/benignware*
    for the benign samples and *ch8/data/malware* for the malware samples.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.xhtml#ch08)探讨了如何构建基于机器学习的恶意软件检测器，并使用了1,419个示例二进制文件作为训练你自己的机器学习检测系统的样本数据集。这些二进制文件位于*ch8/data/benignware*文件夹中，良性样本存储在那里，恶意软件样本存储在*ch8/data/malware*文件夹中。'
- en: The dataset contains 991 benignware samples and 428 malware samples, and we
    got this data from *[VirusTotal.com](http://VirusTotal.com)*. These samples are
    representative, in the malware case, of the kind of malware observed on the internet
    in 2017 and, in the benignware case, of the kind of binaries users uploaded to
    *[VirusTotal.com](http://VirusTotal.com)* in 2017.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集包含991个良性文件样本和428个恶意软件样本，我们从*[VirusTotal.com](http://VirusTotal.com)*获取了这些数据。这些样本具有代表性，在恶意软件的情况下，代表了2017年互联网上观察到的恶意软件类型，在良性文件的情况下，代表了用户在2017年上传到*[VirusTotal.com](http://VirusTotal.com)*的二进制文件类型。
- en: '***Chapter 9: Visualizing Malware Trends***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第9章：恶意软件趋势的可视化***'
- en: '[Chapter 9](ch09.xhtml#ch09) explores data visualization and uses the sample
    data in the file *ch9/code/malware_data.csv*. Of the 37,511 data rows in the file,
    each row shows a record of an individual malware file, when it was first seen,
    how many antivirus products detected it, and what kind of malware it is (for example,
    Trojan horse, ransomware, and so on). This data was collected from *[VirusTotal.com](http://VirusTotal.com)*.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.xhtml#ch09)探讨了数据可视化，并使用了文件*ch9/code/malware_data.csv*中的示例数据。该文件中共有37,511行数据，每一行都记录了一个恶意软件文件的相关信息，包括首次出现时间、多少款杀毒软件检测到了它，以及它属于什么类型的恶意软件（例如，特洛伊木马、勒索软件等）。这些数据来自*[VirusTotal.com](http://VirusTotal.com)*。'
- en: '***Chapter 10: Deep Learning Basics***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第10章：深度学习基础***'
- en: This chapter introduces deep neural networks and doesn’t use any sample data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了深度神经网络，并未使用任何样本数据。
- en: '***Chapter 11: Building a Neural Network Malware Detector with Keras***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第11章：使用Keras构建神经网络恶意软件检测器***'
- en: This chapter walks through building a neural network malware detector for detecting
    malicious and benign HTML files. Benign HTML files are from legitimate web pages,
    and the malicious web pages are from websites that attempt to infect victims via
    their web browsers. We got both of these datasets from *[VirusTotal.com](http://VirusTotal.com)*
    using a paid subscription that allows access to millions of sample malicious and
    benign HTML pages.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讲解了如何构建一个神经网络恶意软件检测器，用于检测恶意和良性HTML文件。良性HTML文件来自合法的网页，恶意网页来自那些通过浏览器尝试感染受害者的网站。我们通过付费订阅从*[VirusTotal.com](http://VirusTotal.com)*获取了这两个数据集，订阅使我们能够访问数百万个恶意和良性HTML页面的样本。
- en: All the data is stored at the root directory *ch11/data/html*. The benignware
    is stored at *ch11/data/html/benign_files*, and the malware is stored at *ch11/data/html/malicious_files*.
    Additionally, within each of these directories are the subdirectories *training*
    and *validation*. The *training* directories contain the files we train the neural
    network on in the chapter, and the *validation* directories contain the files
    we test the neural network on to assess its accuracy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据都存储在根目录*ch11/data/html*中。良性文件存储在*ch11/data/html/benign_files*中，恶意软件文件存储在*ch11/data/html/malicious_files*中。此外，在这些目录中还有子目录*training*和*validation*。*training*目录包含我们在本章中用来训练神经网络的文件，*validation*目录包含我们用来测试神经网络准确性的文件。
- en: '***Chapter 12: Becoming a Data Scientist***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第12章：成为数据科学家***'
- en: '[Chapter 12](ch12.xhtml#ch12) discusses how to become a data scientist and
    doesn’t use any sample data.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[第12章](ch12.xhtml#ch12)讨论了如何成为数据科学家，并未使用任何样本数据。'
- en: '**Tool Implementation Guide**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工具实现指南**'
- en: Although all the code in this book is *sample code*, intended to demonstrate
    the ideas in the book and not be taken whole cloth and used in the real world,
    some of the code we provide can be used as a tool in your own malware analysis
    work, particularly if you’re willing to extend it for your own purposes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书中的所有代码都是*示例代码*，旨在展示书中的思想，而不是完全复制并应用于现实世界，但我们提供的一些代码可以作为你自己恶意软件分析工作中的工具，尤其是如果你愿意为自己的目的扩展它的话。
- en: '**NOTE**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Intended as examples and starting places for full-fledged malware data science
    tools, these tools are not robustly implemented. They have been tested on Ubuntu
    17 and are expected to work on this platform, but with a bit of work around installing
    the right requirements, you should be able to get the tools to work on other platforms
    like macOS and other flavors of Linux fairly easily.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些工具旨在作为完整恶意软件数据科学工具的示例和起点，并未经过强健的实现。它们已在Ubuntu 17上进行测试，预计在该平台上能正常工作，但通过一些安装正确依赖项的工作，您应该能相对轻松地让这些工具在其他平台（如macOS和其他Linux发行版）上运行。*'
- en: In this section, we walk through the nascent tools provided in this book in
    the order in which they appear.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将按照它们出现的顺序，逐步介绍本书中提供的初步工具。
- en: '***Shared Hostname Network Visualization***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***共享主机名网络可视化***'
- en: A shared hostname network visualization tool is given in [Chapter 4](ch04.xhtml#ch04)
    and is located at *ch4/code/listing-4-8.py*. This tool extracts hostnames from
    target malware files and then shows connections between the files based on common
    hostnames contained in them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](ch04.xhtml#ch04)中提供了一个共享主机名网络可视化工具，位于*ch4/code/listing-4-8.py*。该工具从目标恶意软件文件中提取主机名，然后根据它们共享的主机名显示文件之间的连接。
- en: The tool takes a directory of malware as its input and then outputs three GraphViz
    files that you can then visualize. To install the requirements for this tool,
    run the command `run bash install_requirements.sh` in the *ch4/code* directory.
    [Listing A-1](appendix.xhtml#applist1) shows the “help” output from the tool,
    after which we discuss what the parameters mean.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具接受恶意软件目录作为输入，然后输出三个GraphViz文件，您可以用它们进行可视化。要安装此工具的依赖项，请在*ch4/code*目录中运行命令`run
    bash install_requirements.sh`。[清单 A-1](appendix.xhtml#applist1)展示了该工具的“帮助”输出，之后我们将讨论这些参数的含义。
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing A-1: Help output from the shared hostname network visualization tool
    given in [Chapter 4](ch04.xhtml#ch04)*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 A-1：来自[第 4 章](ch04.xhtml#ch04)的共享主机名网络可视化工具的帮助输出*'
- en: 'As shown in [Listing A-1](appendix.xhtml#applist1), the shared hostname visualization
    tool requires four command line arguments: `target_path` ➊, `output_file` ➋, `malware_projection`
    ➌, and `hostname_projection` ➍. The parameter `target_path` is the path to the
    directory of malware samples you’d like to analyze. The `output_file` parameter
    is a path to the file where the program will write a GraphViz *.dot* file representing
    the network that links malware samples to the hostnames they contain.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如[清单 A-1](appendix.xhtml#applist1)所示，共享主机名可视化工具需要四个命令行参数：`target_path` ➊、`output_file`
    ➋、`malware_projection` ➌和`hostname_projection` ➍。参数`target_path`是您希望分析的恶意软件样本的目录路径。`output_file`参数是程序将写入表示将恶意软件样本与其包含的主机名连接的网络的GraphViz
    *.dot* 文件的文件路径。
- en: The `malware_projection` and `hostname_projection` parameters are also file
    paths and specify the locations where the program will write *.dot* files that
    represent these derived networks (for more on network projections, see [Chapter
    4](ch04.xhtml#ch04)). Once you’ve run the program, you can use the GraphViz suite
    discussed in [Chapters 4](ch04.xhtml#ch04) and [5](ch05.xhtml#ch05) to visualize
    the networks. For example, you could use the command `fdp malware_projection.dot
    -Tpng -o malware_``projection``.png` to generate a file like the *.png* file rendered
    in [Figure A-1](appendix.xhtml#appfig1) on your own malware datasets.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`malware_projection`和`hostname_projection`参数也是文件路径，并指定程序将写入表示这些派生网络的*.dot*文件的位置（有关网络投影的更多信息，请参见[第
    4 章](ch04.xhtml#ch04)）。运行程序后，您可以使用在[第 4 章](ch04.xhtml#ch04)和[第 5 章](ch05.xhtml#ch05)中讨论的GraphViz工具集来可视化这些网络。例如，您可以使用命令`fdp
    malware_projection.dot -Tpng -o malware_``projection``.png`，生成类似[图 A-1](appendix.xhtml#appfig1)中的*.png*文件，用于您自己的恶意软件数据集。'
- en: '![image](../images/f0226-01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0226-01.jpg)'
- en: '*Figure A-1: Sample output from the shared hostname visualization tool given
    in [Chapter 4](ch04.xhtml#ch04)*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-1：来自[第 4 章](ch04.xhtml#ch04)的共享主机名可视化工具的示例输出*'
- en: '***Shared Image Network Visualization***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***共享图像网络可视化***'
- en: We present a shared image network visualization tool in [Chapter 4](ch04.xhtml#ch04),
    which is located at *ch4/code/listing-4-12.py*. This program shows network relationships
    between malware samples based on embedded images they share.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 4 章](ch04.xhtml#ch04)中介绍了一个共享图像网络可视化工具，位于*ch4/code/listing-4-12.py*。该程序显示基于恶意软件样本共享的嵌入图像之间的网络关系。
- en: The tool takes a directory of malware as its input and then outputs three GraphViz
    files that you can then visualize. To install the requirements for this tool,
    run the command `run bash install_requirements.sh` in the *ch4/code* directory.
    Let’s discuss the parameters in the “help” output from the tool (see [Listing
    A-2](appendix.xhtml#applist2)).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具将恶意软件目录作为输入，然后输出三个GraphViz文件，您可以使用这些文件进行可视化。要安装此工具的依赖项，请在*ch4/code*目录下运行命令`run
    bash install_requirements.sh`。让我们来讨论一下工具“帮助”输出中的参数（参见[清单 A-2](appendix.xhtml#applist2)）。
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing A-2: Help output from the shared resource network visualization tool
    given in [Chapter 4](ch04.xhtml#ch04)*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 A-2：来自共享资源网络可视化工具的帮助输出，见[第4章](ch04.xhtml#ch04)*'
- en: 'As shown in [Listing A-2](appendix.xhtml#applist2), the shared image relationships
    visualization tool requires four command line arguments: `target_path` ➊, `output_file`
    ➋, `malware_projection` ➌, and `resource_projection` ➍. Much like in the shared
    hostname program, here `target_path` is the path to the directory of malware samples
    you’d like to analyze, and `output_file` is a path to the file where the program
    will write a GraphViz *.dot* file representing the bipartite graph that links
    malware samples to the images they contain (bipartite graphs are discussed in
    [Chapter 4](ch04.xhtml#ch04)). The `malware_projection` and `resource_projection`
    parameters are also file paths and specify the locations where the program will
    write *.dot* files that represent these networks.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如[清单 A-2](appendix.xhtml#applist2)所示，共享图像关系可视化工具需要四个命令行参数：`target_path` ➊，`output_file`
    ➋，`malware_projection` ➌，和`resource_projection` ➍。与共享主机名程序类似，这里`target_path`是您希望分析的恶意软件样本目录的路径，`output_file`是程序将写入GraphViz
    *.dot*文件的文件路径，该文件表示连接恶意软件样本与其包含的图像之间的二分图（二分图在[第4章](ch04.xhtml#ch04)中讨论）。`malware_projection`和`resource_projection`参数也是文件路径，指定程序将写入表示这些网络的*.dot*文件的位置。
- en: As with the shared hostname program, once you’ve run the program, you can use
    the GraphViz suite to visualize the networks. For example, you could use the command
    `fdp resource_projection.dot -Tpng -o resource_``projection``.png` on your own
    malware datasets to generate a file like the *.png* file rendered in [Figure 4-12](ch04.xhtml#ch04fig12)
    on [page 55](ch04.xhtml#page_55).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与共享主机名程序一样，运行程序后，您可以使用GraphViz工具套件来可视化这些网络。例如，您可以在自己的恶意软件数据集上使用命令`fdp resource_projection.dot
    -Tpng -o resource_``projection``.png`来生成一个文件，就像在[第4-12图](ch04.xhtml#ch04fig12)中渲染的*.png*文件一样，见[第55页](ch04.xhtml#page_55)。
- en: '***Malware Similarity Visualization***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***恶意软件相似性可视化***'
- en: In [Chapter 5](ch05.xhtml#ch05), we discuss malware similarity and shared code
    analysis and visualization. The first sample tool we provide is given in *ch5/code/listing_5_1.py*.
    This tool takes a directory containing malware as its input and then visualizes
    shared code relationships between the malware samples in the directory. To install
    the requirements for this tool, run the command `run bash install_requirements.sh`
    in the *ch5/code* directory. [Listing A-3](appendix.xhtml#applist3) shows the
    help output for the tool.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.xhtml#ch05)中，我们讨论了恶意软件相似性、共享代码分析和可视化。我们提供的第一个示例工具位于*ch5/code/listing_5_1.py*。该工具将包含恶意软件的目录作为输入，并可视化该目录中恶意软件样本之间的共享代码关系。要安装此工具的依赖项，请在*ch5/code*目录下运行命令`run
    bash install_requirements.sh`。[清单 A-3](appendix.xhtml#applist3)显示了该工具的帮助输出。
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing A-3: Help output from the malware similarity visualization tool given
    in [Chapter 5](ch05.xhtml#ch05)*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 A-3：来自恶意软件相似性可视化工具的帮助输出，见[第5章](ch05.xhtml#ch05)*'
- en: 'When you run this shared code analysis tool from the command line, you need
    to pass in two command line arguments: `target_directory` ➊ and `output_dot_file`
    ➋. You can use the optional argument, `jaccard_index_threshold` ➌, to set the
    threshold the program uses with the Jaccard index similarity between two samples
    to determine whether or not to create an edge between those samples. The Jaccard
    index is discussed in detail in [Chapter 5](ch05.xhtml#ch05).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从命令行运行此共享代码分析工具时，您需要传入两个命令行参数：`target_directory` ➊和`output_dot_file` ➋。您可以使用可选参数`jaccard_index_threshold`
    ➌来设置程序使用的Jaccard指数相似性阈值，用于判断两个样本之间是否创建边。Jaccard指数在[第5章](ch05.xhtml#ch05)中有详细讨论。
- en: '[Figure A-2](appendix.xhtml#appfig2) shows sample output from this tool once
    you’ve rendered the `output_dot_file` with the command `fdp output_dot_file.dot
    -Tpng -o similarity_network.png`. This is the shared code network inferred by
    the tool for the APT1 malware samples we just described.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 A-2](appendix.xhtml#appfig2)显示了在使用命令`fdp output_dot_file.dot -Tpng -o similarity_network.png`生成`output_dot_file`后，该工具的示例输出。这是该工具为我们刚刚描述的APT1恶意软件样本推断的共享代码网络。'
- en: '![image](../images/f0228-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0228-01.jpg)'
- en: '*Figure A-2: Sample output from the malware similarity analysis tool given
    in [Chapter 5](ch05.xhtml#ch05)*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-2：在[第 5 章](ch05.xhtml#ch05)中给出的恶意软件相似性分析工具的示例输出*'
- en: '***Malware Similarity Search System***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***恶意软件相似性搜索系统***'
- en: The second code-sharing estimation tool we provide in [Chapter 5](ch05.xhtml#ch05)
    is given in *ch5/code/listing_5_2.py*. This tool allows you to index thousands
    of samples in a database and then perform a similarity search on them with a query
    malware sample, which lets you find malware samples that likely share code with
    that sample. To install the requirements for this tool, run the command `run bash
    install_requirements.sh` in the *ch5/code* directory. [Listing A-4](appendix.xhtml#applist4)
    shows the help output for the tool.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 5 章](ch05.xhtml#ch05)中提供的第二个代码共享估算工具位于*ch5/code/listing_5_2.py*。该工具允许您将成千上万的样本索引到数据库中，然后使用查询的恶意软件样本对它们进行相似性搜索，从而找到可能与该样本共享代码的恶意软件样本。要安装该工具的依赖项，请在*ch5/code*目录中运行命令`run
    bash install_requirements.sh`。[列表 A-4](appendix.xhtml#applist4)展示了该工具的帮助输出。
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing A-4: Help output from the malware similarity search system given in
    [Chapter 5](ch05.xhtml#ch05)*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 A-4：在[第 5 章](ch05.xhtml#ch05)中给出的恶意软件相似性搜索系统的帮助输出*'
- en: This tool has four modes in which it can be run. The first mode, `LOAD` ➊, loads
    malware into the similarity search database and takes a path as its parameter,
    which should point to a directory with malware in it. You can run `LOAD` multiple
    times and add new malware to the database each time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具有四种运行模式。第一种模式，`LOAD` ➊，将恶意软件加载到相似性搜索数据库中，并将路径作为其参数，该路径应指向一个包含恶意软件的目录。您可以多次运行`LOAD`，每次都向数据库添加新的恶意软件。
- en: The second mode, `SEARCH` ➋, takes the path to an individual malware file as
    its parameter and then searches for similar samples in the database. The third
    mode, `COMMENT` ➌, takes a malware sample path as its argument and then prompts
    you to enter a short textual comment about that sample. The advantage of using
    the `COMMENT` feature is that when you search for samples similar to a query malware
    sample, you see the comments corresponding to the similar sample, thus enriching
    your knowledge of the query sample.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种模式，`SEARCH` ➋，将单个恶意软件文件的路径作为参数，然后在数据库中搜索相似的样本。第三种模式，`COMMENT` ➌，将恶意软件样本路径作为参数，并提示您输入关于该样本的简短文本评论。使用`COMMENT`功能的好处是，当您搜索与查询的恶意软件样本相似的样本时，您可以看到与相似样本对应的评论，从而丰富您对查询样本的了解。
- en: The fourth mode, `wipe` ➍, deletes all the data in the similarity search database,
    in case you want to start over and index a different malware dataset. [Listing
    A-5](appendix.xhtml#applist5) shows some sample output from a `SEARCH` query,
    giving you a flavor for what the output from this tool looks like. Here we’ve
    indexed the APT1 samples described previously using the `LOAD` command and have
    subsequently searched the database for samples similar to one of the APT1 samples.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第四种模式，`wipe` ➍，删除相似性搜索数据库中的所有数据，以防您想重新开始并索引不同的恶意软件数据集。[列表 A-5](appendix.xhtml#applist5)展示了一个`SEARCH`查询的示例输出，帮助您了解该工具的输出格式。在这里，我们使用`LOAD`命令索引了之前描述的APT1样本，随后在数据库中搜索与其中一个APT1样本相似的样本。
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing A-5: Sample output for the malware similarity search system given
    in [Chapter 5](ch05.xhtml#ch05)*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 A-5：在[第 5 章](ch05.xhtml#ch05)中给出的恶意软件相似性搜索系统的示例输出*'
- en: '***Machine Learning Malware Detection System***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***机器学习恶意软件检测系统***'
- en: The final tool you can use in your own malware analysis work is the machine
    learning malware detector used in [Chapter 8](ch08.xhtml#ch08), which can be found
    at *ch8/code/complete_detector.py*. This tool allows you to train a malware detection
    system on malware and benignware and then use this system to detect whether a
    new sample is malicious or benign. You can install the requirements for this tool
    by running the command `bash install.sh` in the *ch8/code* directory. [Listing
    A-6](appendix.xhtml#applist6) shows the help output for this tool.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你在自己的恶意软件分析工作中可以使用的最终工具是第 [8 章](ch08.xhtml#ch08) 中使用的机器学习恶意软件检测器，位于 *ch8/code/complete_detector.py*。该工具允许你在恶意软件和良性软件上训练恶意软件检测系统，然后使用该系统来检测新样本是恶意还是良性。你可以通过在
    *ch8/code* 目录下运行 `bash install.sh` 命令来安装该工具的依赖项。[列表 A-6](appendix.xhtml#applist6)
    显示了此工具的帮助输出。
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing A-6: Help output for the machine learning malware detection tool given
    in [Chapter 8](ch08.xhtml#ch08)*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 A-6：第 [8 章](ch08.xhtml#ch08) 中提供的机器学习恶意软件检测工具的帮助输出*'
- en: This tool has three modes in which it can be run. The `evaluate` mode ➍, tests
    the accuracy of the system on the data you select for training and evaluating
    the system. You can invoke this mode by running `python complete_``detector.py
    –malware_paths <path to directory with malware in it> --``benignware``_paths <path
    to directory with benignware in it> --evaluate`. This command will invoke a `matplotlib`
    window showing your detector’s ROC curve (ROC curves are discussed in [Chapter
    7](ch07.xhtml#ch07)). [Figure A-3](appendix.xhtml#appfig3) shows some sample output
    from `evaluate` mode.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具有三种模式可供运行。`evaluate` 模式 ➍ 测试你选择的用于训练和评估系统的数据上的系统准确性。你可以通过运行 `python complete_detector.py
    –malware_paths <包含恶意软件的目录路径> --benignware_paths <包含良性软件的目录路径> --evaluate` 来启动此模式。此命令将调用一个
    `matplotlib` 窗口，显示检测器的 ROC 曲线（ROC 曲线在 [第 7 章](ch07.xhtml#ch07) 中有讨论）。[图 A-3](appendix.xhtml#appfig3)
    显示了 `evaluate` 模式的示例输出。
- en: '![image](../images/f0231-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0231-01.jpg)'
- en: '*Figure A-3: Sample output from the malware detection tool provided in [Chapter
    8](ch08.xhtml#ch08), run in* evaluate *mode*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-3：第 [8 章](ch08.xhtml#ch08) 中提供的恶意软件检测工具在 evaluate *模式下的示例输出*'
- en: Training mode trains a malware detection model and saves it to disk. You can
    invoke this mode by running `python complete_detector.py –malware_paths` ➊ `<path
    to directory with malware in it> --benignware_paths` ➋ `<path to directory with
    benignware in it>`. Note that the only difference between this command invocation
    and the invocation of `evaluate` mode is that we’ve left off the `--evaluate`
    flag. The result of this command is that it generates a model that it saves to
    a file called *saved_detector.pkl*, which is saved in your current working directory.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 训练模式用于训练恶意软件检测模型并将其保存到磁盘。你可以通过运行 `python complete_detector.py –malware_paths`
    ➊ `<包含恶意软件的目录路径> --benignware_paths` ➋ `<包含良性软件的目录路径>` 来启动此模式。请注意，这个命令调用与 `evaluate`
    模式的调用唯一不同之处在于我们没有添加 `--evaluate` 标志。此命令的结果是它生成一个模型，并将其保存到名为 *saved_detector.pkl*
    的文件中，该文件保存在当前工作目录。
- en: The third mode, `scan` ➌, loads *saved_detector.pkl* and then scans a target
    file, predicting whether it’s malicious or not. Make sure you have run training
    mode before running a scan. You can run a scan by running `python complete_detector.py
    –scan_file_path <PE EXE file>` in the directory where you trained the system.
    The output will be a probability that the target file is malicious.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种模式，`scan` ➌，加载 *saved_detector.pkl*，然后扫描目标文件，预测它是否为恶意文件。请确保在运行扫描之前已运行过训练模式。你可以在训练系统的目录中运行
    `python complete_detector.py –scan_file_path <PE EXE 文件>` 来进行扫描。输出将是目标文件是否恶意的概率。
