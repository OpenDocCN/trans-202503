- en: A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A
- en: Jargon
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 行话
- en: This was never intended to be a technical book for engineers who love all the
    geeky details. Instead, it’s supposed to be a book for everyone who is interested
    in the meteoric rise of a business and technology, and of the people behind that
    effort.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书从来不是为那些喜欢所有技术细节的工程师而写的技术书籍。相反，它是一本面向所有对商业和技术的迅猛崛起，以及背后努力的人们感兴趣的读者的书。
- en: But when these people write code and create highly technical things that lead
    to that result, it’s difficult to not get lost in the techy weeds every now and
    then. So when I’m explaining, for example, that Ficus Kirkpatrick enjoyed working
    on drivers at the lower levels of the system, or that Brian Swetland worked on
    the kernel at Danger and Android, or that the engineers at Be and PalmSource were
    creating a platform and APIs for software developers, it’s necessary to use terms
    that might lose or confuse the non-engineers in the audience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当这些人编写代码并创造出带来这些结果的高度技术性内容时，很难避免偶尔会陷入技术细节的困扰。所以，当我解释，比如 Ficus Kirkpatrick
    喜欢在系统的低层工作，或者 Brian Swetland 曾在 Danger 和 Android 上工作过内核，或者 Be 和 PalmSource 的工程师们为软件开发者创造了一个平台和
    API 时，使用一些术语是有必要的，尽管这些术语可能会让非工程师的听众感到困惑或迷失。
- en: In an attempt to keep the techy noise to a minimum, I’m cramming many of the
    explanations of that stuff into this appendix. Hopefully this brief section will
    help explain the salient terms and, more important, how the different pieces of
    the system relate to each other.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽量减少技术性噪音，我把许多相关的解释压缩到了这个附录中。希望这一简短的部分能够帮助解释重要的术语，更重要的是，解释系统中不同部分之间是如何相互关联的。
- en: First, a System Overview
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先，系统概述
- en: It is typical in my industry, when discussing platform software, to end up at
    the whiteboard drawing what we call a “layer cake diagram,” which shows the relationship
    of the various components of the system to each other. This diagram typically
    shows the components going down toward the hardware. At the top of the diagram,
    we see the pieces that users interact with, and at the bottom we see the components
    that talk directly to the hardware. All the pieces in between are layers of software
    written by the engineers to get from the higher-level user actions (for example,
    clicking a button) to the hardware (for example, displaying the button in a pressed
    state, launching an application, firing the nukes, whatever).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的行业中，讨论平台软件时，通常会画出我们称之为“层状图”的白板图，这个图显示了系统中各个组件之间的关系。这个示意图通常展示了从硬件到各个组件的层级结构。在图的顶部，我们看到用户交互的部分，而在底部，我们看到直接与硬件通信的组件。中间的所有部分是由工程师编写的软件层，目的是将用户的高层操作（例如，点击按钮）传递到硬件（例如，显示按钮的按下状态、启动应用程序、启动核弹等）。
- en: 'Here’s a (very simplified) diagram for the Android operating system:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个（非常简化的）Android 操作系统示意图：
- en: '![b01001](image_fi/502680b01/b01001.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![b01001](image_fi/502680b01/b01001.png)'
- en: There’s actually nothing specific to Android here; this is a very typical view
    of most operating systems. Android obviously has elements that are unique to that
    OS, which are explained elsewhere. But in general, the Android platform is similar
    to most other operating systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里其实并没有什么特别针对 Android 的内容；这是一种典型的操作系统视图。Android 显然有一些独特的元素，这些元素在其他地方有解释。但总体而言，Android
    平台与大多数其他操作系统相似。
- en: Let’s walk through the diagram from the top to the bottom to talk about what
    these pieces are and how they work together.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上到下看一下这个示意图，讨论这些部分是什么，它们如何协同工作。
- en: Apps
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用
- en: The *apps* on Android are the main entry points for users. Users launch apps
    from their icons, they interact with the buttons, lists, and other pieces inside
    of apps, they click on links in apps that launch other apps, and so on. This is
    basically the world in which users live, interacting with the apps directly, while
    accessing all of the platform functionality only indirectly, through what these
    apps expose.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Android 上的*应用*是用户的主要入口点。用户从应用图标启动应用，点击按钮、列表以及应用中的其他组件，点击应用中的链接以启动其他应用，等等。这基本上是用户所处的世界，直接与应用进行交互，而所有平台功能的访问则是间接的，通过这些应用暴露的接口来实现。
- en: Note that the system-provided functionality of the home screen, the navigation
    bar, the status bar, and the lock screen are all considered apps. Even though
    they are provided by the platform (either Android itself, or in some cases by
    a manufacturer like Samsung, which provides its own system apps), they’re still
    just apps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，系统提供的主屏幕、导航栏、状态栏和锁屏等功能都被视为应用程序。即使它们是由平台提供的（无论是Android本身，还是某些情况下由像三星这样的制造商提供的系统应用程序），它们仍然只是应用程序。
- en: APIs
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API
- en: '*Application programming interfaces (APIs)* are the pieces of functionality
    in the platform that applications interact with. The platform APIs are the functions,
    variables, and other code pieces that are public-facing in the platform. For example,
    if an application needs to compute a square root, they might call a square root
    API function provided by the platform. Or if the application wants to display
    a button to the user, they might use a button API to handle its functionality
    and visuals.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用程序编程接口（APIs）*是平台中应用程序与之交互的功能模块。平台API是平台中公开的函数、变量及其他代码片段。例如，如果应用程序需要计算平方根，它们可能会调用平台提供的平方根API函数。或者，如果应用程序想要向用户显示一个按钮，它们可能会使用按钮API来处理按钮的功能和视觉效果。'
- en: The APIs are the tip of the iceberg for the platform. Although there are thousands
    of APIs in Android, they are really just the entry point to the platform functionality,
    most of which is embedded in the code that implements these APIs. So, for example,
    an application may create a button by calling a couple of API functions to do
    that, but under the hood the platform is doing a lot of work to satisfy all of
    the details that a button entails (including how to display it, how to handle
    click events on the screen, and how to draw the text for the button’s label).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: API是平台的冰山一角。虽然Android中有成千上万的API，但它们其实只是平台功能的入口点，其中大多数功能嵌入在实现这些API的代码中。所以，举个例子，应用程序可能通过调用几个API函数来创建一个按钮，但在幕后，平台会做很多工作来处理按钮涉及的所有细节（包括如何显示按钮、如何处理点击事件以及如何绘制按钮的标签文本）。
- en: Framework
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框架
- en: The *framework* is the large layer of system software that handles all the functionality
    exposed through the public APIs. That is, the framework is responsible for both
    the APIs as well as the implementation of those APIs. In the previous example,
    this is where the button functionality lives, among other bits. The framework
    encompasses, really, everything that the entire platform is capable of, like location
    services, data storage, telephony, graphics, UI, and, well, everything. The UI
    toolkit for Android is a subset of framework functionality that is specific to
    user interface APIs and implementation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*框架*是处理所有通过公共API暴露功能的大层次系统软件。也就是说，框架既负责API，也负责这些API的实现。在前面的示例中，这里就是按钮功能所在的地方，当然还有其他部分。框架涵盖了平台能够做的所有事情，比如位置服务、数据存储、电话服务、图形、用户界面，简而言之，几乎所有内容。Android的UI工具包是框架功能的一个子集，专门针对用户界面API及其实现。'
- en: System
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统
- en: The system piece in the diagram above denotes software that is running that
    is not directly accessible by applications, but that is responsible for the device's
    overall functionality. For example, on Android, the *window manager* is responsible
    for displaying applications in their own windows and navigating between those
    windows as different applications are launched. There is also a service running
    that handles low-memory situations by killing applications that have not been
    used recently so that more recently used applications can have the memory they
    need. All of those things are running indirectly, on the user’s behalf.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上图中的系统部分表示正在运行的软件，它不能被应用程序直接访问，但它负责设备的整体功能。例如，在Android中，*窗口管理器*负责将应用程序显示在各自的窗口中，并在不同的应用程序启动时进行窗口切换。还有一个服务在运行，它通过杀死那些最近未被使用的应用程序来处理低内存情况，以便为最近使用的应用程序腾出所需的内存。所有这些操作间接地为用户执行。
- en: The system calls public APIs for various pieces of necessary framework functionality,
    but the system may also call functions in the framework directly (which is why
    it is shown in the diagram beside, rather than on top of, the APIs layer).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用公共API来实现各种必要的框架功能，但系统也可能直接调用框架中的函数（这就是为什么在图中它显示在API层旁边，而不是位于其上方）。
- en: Kernel
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内核
- en: The *kernel*, with its device drivers, is the lowest level of software running
    on the device. It handles the fundamental capabilities of the device that the
    overall system needs. For example, each application runs in a *process*; the management
    of the many processes running on the device (isolating them from each other and
    scheduling time for them to run on the CPU) is the kernel's responsibility. The
    kernel is also responsible for loading and executing the drivers on the system.
    All of the software we’ve talked about so far is generic to any device, but drivers
    are specific to particular pieces of hardware. For example, to receive clicks
    on a button, a piece of hardware in the device is able to turn touches on the
    screen into information about where those touches occurred. A driver in the kernel
    does this, routing the information from hardware-specific data into events that
    are then sent into the framework for processing. Similarly, there are drivers
    for storage, sensors, display, camera, and any other hardware that a device may
    have. The kernel loads these drivers when the device boots and communicates to
    these pieces of hardware through the drivers when necessary.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*内核*，以及它的设备驱动程序，是运行在设备上的最低层软件。它处理设备的基本功能，是整个系统所需要的。例如，每个应用程序运行在一个 *进程* 中；管理设备上运行的多个进程（将它们相互隔离，并为它们分配
    CPU 运行时间）是内核的职责。内核还负责加载和执行系统上的驱动程序。我们目前讨论的所有软件都适用于任何设备，但驱动程序是特定于某些硬件的。例如，要接收按钮上的点击，设备中的某个硬件能够将触摸屏上的触摸转换为触摸发生的位置信息。内核中的驱动程序完成这个工作，将硬件特定的数据转化为事件，然后将这些事件发送到框架中进行处理。同样，设备可能有用于存储、传感器、显示、相机等硬件的驱动程序。内核在设备启动时加载这些驱动程序，并在需要时通过驱动程序与硬件进行通信。'
- en: Platform
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台
- en: 'Finally, I use the term *platform* to encompass everything here except the
    applications. It’s a very generic term, and I use it broadly to refer to everything
    that Android provides for application developers and for users. The platform software
    for Android is all of the stuff that provides facilities for developers writing
    applications as well as everything that the device needs overall to display the
    basic UI and functionality to users. So when I talk about the platform team on
    Android, it’s basically everyone that works on all of the stuff above other than
    the applications: the engineers working on the kernel, the framework, the system
    software, and the APIs.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我使用 *平台* 这个术语来包含除应用程序外的所有内容。这是一个非常通用的术语，我广泛地用它来指代 Android 为应用开发者和用户提供的一切。Android
    的平台软件包括所有为开发者编写应用程序提供功能的内容，以及设备所需的所有内容，用以展示基本的 UI 和功能。因此，当我谈论 Android 平台团队时，基本上指的是除了应用程序以外，负责上述所有内容的团队：包括负责内核、框架、系统软件和
    API 的工程师。
- en: Other Geeky Terms
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他技术术语
- en: In addition to everything that fit conveniently in the previous diagram, a few
    other technical terms used in the book are also worth explaining. I’m sure I’ll
    miss a few. If only there were some kind of “search engine” capability on the
    internet so that readers could easily look up terms that I inadvertently forgot
    to include. . . .
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面图表中便利地呈现的所有内容之外，书中还使用了一些其他技术术语，也值得解释。我相信我可能会遗漏一些。如果网络上有某种“搜索引擎”功能，读者可以轻松查找我不小心忘记提到的术语，那该多好啊……
- en: Changelist
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Changelist
- en: '*Changelist (CL)* refers to the code change required to fix a bug, implement
    a new feature, update the docs—whatever. A CL can be as little as a one-line fix
    or as much as thousands of lines of code to implement a large swath of new APIs
    and capabilities. Peer developers far prefer the former because one-liners are
    easy to review and approve. Woe be unto the developer that leans on their team
    to review a 10,000-line CL when everyone is under the gun already to deliver their
    own fixes and features.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Changelist (CL)* 指的是修复 bug、实现新功能、更新文档等所需的代码更改。一个 CL 可以是简单的一行修复，也可以是数千行代码，来实现一大堆新的
    API 和功能。同行开发者更喜欢前者，因为一行代码容易审查和批准。对于那些依赖团队审查 10,000 行 CL 的开发者来说，运气不佳，因为大家都忙于交付自己的修复和功能。'
- en: Changelist is apparently a term used primarily by Google engineering. Other
    software systems use terms like *patch* or *PR* (pull request) to mean the same
    thing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Changelist 显然是一个主要由 Google 工程团队使用的术语。其他软件系统使用类似 *补丁* 或 *PR*（拉取请求）这样的术语来表示相同的意思。
- en: Emulator
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟器
- en: An *emulator* is a software program that mimics a hardware device. Developers
    use emulators (in particular, they use the Android emulator) to make it easier
    to run and test their programs on the host computer they are using to write their
    applications. Instead of requiring a physical device to test an app (and perhaps
    to suffer delays downloading the program to the device every time it is recompiled),
    they can simply run a virtual device on their powerful desktop computer instead.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*仿真器*是一个模拟硬件设备的软件程序。开发者使用仿真器（特别是Android仿真器）来简化在他们用于编写应用程序的主机计算机上运行和测试程序的过程。与每次重新编译程序时都需要将其下载到物理设备并可能面临延迟不同，开发者可以直接在强大的桌面计算机上运行虚拟设备。'
- en: There is a difference between an *emulator* and a *simulator*; an emulator actually
    mimics everything happening on a real device, down to the CPU and the instructions
    running on it. A simulator is usually a simpler (and, often, faster) program because
    it does not bother emulating everything on a device, but rather just enough to
    make it work essentially like a device. A simulator is good enough for testing
    basic functionality of a program but might miss out on enough important details
    (such as how the hardware sensors work), so a developer is better off using an
    emulator or a real device to validate the actual functionality in the real world.
    Android had a simulator in the very early days, but eventually stopped maintaining
    it and switched to having only an emulator.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*仿真器*和*模拟器*之间存在差异；仿真器实际上模拟了真实设备上发生的一切，包括CPU和其运行的指令。模拟器通常是一个更简单（且通常更快速）的程序，因为它并不模拟设备上的所有内容，而是仅仅模拟足够的部分，使其基本上像设备一样运行。模拟器足以测试程序的基本功能，但可能会忽略一些重要细节（如硬件传感器的工作方式），因此开发者最好使用仿真器或真实设备来验证实际功能。Android在早期有一个模拟器，但最终停止了对其的维护，转而仅保留了仿真器。'
- en: IDE
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE
- en: An *IDE (integrated development environment)* is a suite of tools that programmers
    use for writing, building, running, debugging, and testing their applications.
    This includes things like a text editor—which is usually knowledgeable about the
    language(s) that programmers use, with shortcuts for formatting and highlighting
    code written in that language, plus other features like code completion and linking—as
    well as a compiler for building the application. For example, Android Studio (the
    IDE provided to developers by the Android team) includes a large and growing suite
    of tools, including various editors (for Java, XML, and C/C++), the compiler for
    building the code into an Android application, a debugger for stepping through
    the program as it runs on a device, and various other specific utilities for analyzing
    performance, monitoring memory usage, and building UI assets.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*IDE（集成开发环境）*是一套程序员用于编写、构建、运行、调试和测试应用程序的工具。这包括像文本编辑器这样的工具——通常了解程序员所使用的编程语言，并具备格式化和高亮显示该语言编写的代码的快捷方式，以及其他如代码补全和链接等功能——还有用于构建应用程序的编译器。例如，Android
    Studio（Android团队为开发者提供的IDE）包括一套庞大且不断增长的工具，其中包括各种编辑器（用于Java、XML和C/C++），用于将代码构建为Android应用的编译器，一个用于在设备上逐步执行程序的调试器，以及其他分析性能、监控内存使用和构建UI资源的特定工具。'
- en: Java ME/J2ME
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java ME/J2ME
- en: Java ME (or J2ME,^([1](#b01-footnote-1)) during the early days of Android development)
    is short for Java Platform, Micro Edition, a software platform for early mobile
    devices. Java ME used the Java programming language and provided functionality
    that application developers needed to write apps for those devices.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Java ME（或在Android开发早期阶段的J2ME，^([1](#b01-footnote-1))）是Java平台微型版（Java Platform,
    Micro Edition）的缩写，是早期移动设备的一个软件平台。Java ME使用Java编程语言，并提供了应用程序开发者所需的功能，用于为这些设备编写应用。
- en: 'J2ME promised something in the mobile space that developers desperately wanted:
    a common platform that would allow them to write applications for many different
    devices, as opposed to having to re-tune their apps for vastly different hardware.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: J2ME在移动领域承诺了开发者迫切需要的一项功能：一个通用平台，使他们能够为许多不同的设备编写应用程序，而不必为截然不同的硬件重新调整应用。
- en: However, unlike the desktop or server versions of Java, Java ME came in a large
    variety of versions, called *profiles*, which meant that the capabilities of any
    particular implementation of Java ME on a device did not necessarily match that
    of another device, so Java ME developers had to deal with device variety issues
    after all.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与桌面或服务器版本的 Java 不同，Java ME 有多种版本，称为*配置文件*，这意味着任何特定实现的 Java ME 在设备上的功能未必与另一设备相同，因此
    Java ME 开发者最终仍需处理设备多样性的问题。
- en: OEM
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OEM
- en: An *OEM (original equipment manufacturer)* is a company that makes the actual
    hardware.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*OEM（原始设备制造商）*是指制造实际硬件的公司。'
- en: 'Object-Oriented Programming: Classes, Fields, and Methods'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向对象编程：类、字段和方法
- en: The software used to write the Android platform, and to write Android applications,
    uses an approach called *object-oriented programming (OOP)*. Most popular/modern
    languages use a similar approach, including Java, C++, Kotlin, and more. In an
    OOP system, there are functional blocks called *classes* that present an API for
    doing a particular set of things. For example, Android has a `String` class for
    performing operations on text strings.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编写 Android 平台和 Android 应用程序的软件，采用了名为*面向对象编程（OOP）*的方法。大多数流行的现代语言也使用类似的方法，包括
    Java、C++、Kotlin 等。在 OOP 系统中，有一些称为*类*的功能模块，提供一套特定功能的 API。例如，Android 有一个 `String`
    类，用于执行文本字符串的操作。
- en: Each class may contain a set of *fields* or *properties*, which hold values.
    For example, a `String` object might hold the value of a text string, such as
    `"I want a sandwich."`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类可能包含一组*字段*或*属性*，用于保存值。例如，`String` 对象可能保存一个文本字符串的值，例如 `"I want a sandwich."`
- en: Each class may also contain a set of *methods* or *functions* that perform operations
    on that class (and potentially on other classes as well). For example, Android’s
    `String` class has a method named `toUpperCase()`, which does exactly what it
    says. So our sandwich string from before, if called with `toUpperCase()`, would
    return a value of `"I WANT A SANDWICH."`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类还可能包含一组*方法*或*函数*，对该类（以及可能对其他类）执行操作。例如，Android 的 `String` 类有一个名为 `toUpperCase()`
    的方法，正如其名称所示，它将返回一个大写字母的字符串。所以，之前的三明治字符串，如果调用 `toUpperCase()`，将返回值 `"I WANT A SANDWICH."`
- en: Classes, with their various methods and fields, can be bundled together to create
    a *library*. The classes, fields, and methods in that library represent the API
    of that library, which applications (or other libraries) can call from their code
    to perform the operations that the library’s API offers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 类及其各种方法和字段可以捆绑在一起创建一个*库*。该库中的类、字段和方法代表该库的 API，应用程序（或其他库）可以从它们的代码中调用这些 API，执行库所提供的操作。
- en: SDK
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SDK
- en: An *SDK (software development kit)* contains the pieces a programmer needs to
    write programs for a given platform. This includes the APIs they can call to perform
    functionality on the platform as well as the libraries that implement those APIs.
    Using an SDK, a programmer can write their application. Then using tools (usually
    supplied with the SDK), they can build the application (compile it into a form
    that is understandable by devices running the platform). Finally, they can run
    and debug their program on a device (or emulator) that is compatible with their
    compiled application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*SDK（软件开发工具包）*包含了程序员编写特定平台程序所需的组件。它包括程序员可以调用的平台功能的 API 以及实现这些 API 的库。通过使用
    SDK，程序员可以编写应用程序。然后使用工具（通常随 SDK 一起提供），他们可以构建应用程序（将其编译成设备可理解的格式）。最后，他们可以在与编译后应用程序兼容的设备（或模拟器）上运行和调试程序。
- en: Toolkit
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具包
- en: '*Toolkit* overlaps in meaning, and usage, with framework, library, and APIs.
    In general, toolkit is used to mean a framework that is specific to user interface
    (UI) components. On Android, the toolkit is synonymous with the *UI* *toolkit*,
    or the APIs and implementation for the user interface technology of Android. It
    is considered a part of the overall Android framework, specifically the subset
    of the framework that deals with most of the visual aspects of the framework.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*工具包*在含义和使用上与框架、库和 API 有重叠。通常，工具包指的是专门用于用户界面（UI）组件的框架。在 Android 中，工具包与*UI工具包*同义，指的是
    Android 用户界面技术的 API 和实现。它被视为整体 Android 框架的一部分，特别是该框架中处理大部分视觉方面的子集。'
- en: View
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图
- en: All UI platforms have the concept of some kind of UI element, for things like
    buttons, or checkboxes, or sliders, or text, or containers of all of these objects.
    But the way that they refer to those things differs between platforms, so it’s
    confusing to tell what platform developers are talking about because they use
    different terms. Java’s Swing toolkit called them *components*, some platforms
    call them *elements* or *widgets*. On Android, UI elements are referred to as
    *Views*, named for the class that all of these elements inherit from (View). The
    container of Views (including other containers) is a view called ViewGroup. Finally,
    a *View hierarchy* is, well, it’s what it sounds like; a hierarchy of Views and
    ViewGroups, descending from the top-level parent ViewGroup, with its set of children,
    and down into any ViewGroups contained therein with their child Views, and so
    on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 UI 平台都有某种 UI 元素的概念，比如按钮、复选框、滑块、文本或包含所有这些对象的容器。但是，它们对这些元素的称呼在不同平台之间有所不同，因此很难判断开发者在谈论哪个平台，因为他们使用了不同的术语。Java
    的 Swing 工具包称这些为*组件*，一些平台称其为*元素*或*小部件*。在 Android 中，UI 元素被称为*视图*（Views），这一名称来源于所有这些元素继承自的类（View）。视图的容器（包括其他容器）被称为
    ViewGroup。最后，*视图层次结构*，如其名称所示，是指视图和 ViewGroup 的层次结构，从顶级父视图 ViewGroup 开始，包含它的子视图，再到其中包含的任何
    ViewGroup 及其子视图，依此类推。
