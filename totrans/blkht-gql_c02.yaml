- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up a GraphQL Security Lab
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, you’ll begin building your GraphQL dojo: a security testing
    lab environment equipped with GraphQL hacking tools, as well as an intentionally
    vulnerable server that you can use to safely test newly acquired offensive GraphQL
    skills.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to set up a hacking lab with the right tools becomes more
    important than usual when you are testing an application whose underlying technologies
    haven’t been around for many years. Seasoned technologies have gone through many
    iterations of security reviews and research. With newer technologies, it may take
    some time for similar knowledge bases to develop, and for security testing methodologies
    to circulate in the security community.
  prefs: []
  type: TYPE_NORMAL
- en: This lack of a knowledge base can pose problems. Imagine that you’re conducting
    a penetration test when you discover a server running an application you’ve never
    seen before. You might start researching the software and looking for known application
    vulnerabilities or publicly available exploits on websites such as the Exploit
    Database ([https://exploit-db.com](https://exploit-db.com)). However, the situation
    could become more complex when the application is using a new framework, such
    as GraphQL. Testing the application would require knowledge of not only the framework
    but also how to retool with the relevant penetration testing tools, a time-consuming
    task when you’re in the midst of a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: The dedicated lab you’ll build in this chapter will support your hands-on hacking
    throughout this book so that the next time you run into GraphQL in the wild, you’ll
    be ready to use the right tools to search and find vulnerabilities. Tinkering
    in a lab has a lot of other benefits too, such as providing practical experience
    through experimentation. The best way to learn about hacking is by getting your
    hands dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Taking Security Precautions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should follow a few guidelines whenever you’re building a hacking lab on
    personal equipment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Avoid connecting the lab directly to the public internet.** Hacking lab environments
    typically involve installing vulnerable code or outdated software. These could
    pose risks to your network, your computer, and your data if they become accessible
    from the internet. You don’t want internet bots to deploy malware on your computer
    or use it as a launchpad to attack others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work through the lab only on trusted local networks.** Anyone on the same
    network as you can also attack the lab. For this reason, we recommend working
    through the book only when you’re connected to networks you trust.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy the lab in a virtual environment by using a hypervisor, such as Oracle
    VirtualBox.** For VirtualBox ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)),
    choose the platform package for your main computer’s operating system. If you
    are running Linux, choose a package for the Linux distribution you are using from
    the list located at [https://www.virtualbox.org/wiki/Linux_Downloads](https://www.virtualbox.org/wiki/Linux_Downloads).
    VirtualBox currently supports all major distributions, such as Ubuntu, Debian,
    and Fedora. Separating the hacking lab environment from your primary operating
    system is generally a good idea, as it prevents software conflicts that could
    potentially break other software on your computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make use of the virtual machine snapshot mechanism of your chosen hypervisor.**
    This allows you to take *snapshots* (versions at a specified point in time) of
    the virtual machine and restore it to its original state, in case it happens to
    break in the future. Think of this as clicking the Save button in a video game
    so that you can resume your game later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these best practices in mind, let’s get our hands dirty and our lab up
    and running!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kali
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Kali* is a Linux distribution created for penetration testing. Based on Debian,
    it was designed by Offensive Security ([https://offensive-security.com](https://offensive-security.com)).
    We’ll use Kali as the base operating system for our GraphQL hacking lab because
    it comes bundled with some of the libraries, dependencies, and tools we’ll need.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find Kali virtual machine images for the VMware Workstation and Oracle
    VirtualBox hypervisors at [https://www.kali.org/get-kali](https://www.kali.org/get-kali).
    Pick the hypervisor of your choice and follow the official installation instructions
    provided by Offensive Security: [https://www.kali.org/docs/installation](https://www.kali.org/docs/installation).'
  prefs: []
  type: TYPE_NORMAL
- en: After completing the installation process, you should see the Kali login screen
    shown in [Figure 2-1](#figure2-1). Kali ships with a default user account named
    *kali* whose password is *kali*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/F02001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-1: The Kali Linux login screen'
  prefs: []
  type: TYPE_NORMAL
- en: After logging in to Kali, you need to make sure it is up to date. Open Kali’s
    **Applications** menu and, in the search bar, enter **terminal emulator** ([Figure
    2-2](#figure2-2)). Click the corresponding application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/F02002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-2: The Kali Applications menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use a few commands to update your software repositories and upgrade your
    installed package. In the terminal window, enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From this point on, we will use our Kali machine for all tasks we cover in the
    book. We recommend keeping the terminal window open, as you’ll need it for additional
    installations very soon.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Web Clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 1, we mentioned that GraphQL APIs can be queried using a variety
    of specialized utilities, such as GraphiQL Explorer, or simple command line–based
    HTTP clients, such as cURL. These tools all make HTTP requests under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll install and use two web clients: cURL and Altair. These will allow you
    to experiment with crafting and sending GraphQL queries using both command line
    tools and those with graphical interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: Querying from the Command Line with cURL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most popular command line HTTP clients, cURL, can make HTTP requests
    just like any graphical web browser. As such, you can use it to query GraphQL
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: As a hacker, you should become comfortable with operating from the command line.
    Aside from allowing you to automate repetitive tasks more easily, knowing your
    way around the command line gives you the ability to work efficiently when you
    might not have access to graphical interfaces, such as during a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and install cURL. Open the terminal and enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify that cURL was installed and is functioning correctly by issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you see a “Hello!” message, it means cURL successfully sent an HTTP GET request
    to the application and received a response.
  prefs: []
  type: TYPE_NORMAL
- en: Querying from a GUI with Altair
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Chapter 1, we queried GraphQL APIs by using GraphiQL Explorer, leveraging
    its auto-completion features. While GraphiQL is a very useful tool, it won’t always
    be available to you during a penetration test. To overcome this, you can install
    graphical GraphQL clients locally on your computer. These clients have the capability
    to connect to remote GraphQL servers and return results similarly to the way GraphiQL
    Explorer would. If you provide the remote server address to the graphical client,
    it will take care of the integration with GraphQL behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: One of these tools, Altair, is available as a web browser plug-in, as well as
    a local desktop application. Both versions provide the same functionality, and
    there is no downside to choosing either. In this book, we will be using the desktop
    application. However, if you’d like, you can install the browser plug-in for Firefox
    through the add-ons store, which you can find by entering `about:addons` in the
    browser’s address bar.
  prefs: []
  type: TYPE_NORMAL
- en: The Altair desktop client is available for macOS, Linux, and Windows at [https://altair.sirmuel.design/#download](https://altair.sirmuel.design/#download),
    as shown in [Figure 2-3](#figure2-3). Choose the icon that represents the operating
    system you are running. For Kali, you will want to install the Linux version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Altair to the *Desktop* directory in Kali. You should see a file with
    the extension *AppImage* after the download is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](image_fi/502840c02/f02003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-3: The available Altair Desktop client versions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to change the permissions on the downloaded file to be able to
    run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we can execute the file. It should load the client, as shown in [Figure
    2-4](#figure2-4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After you’ve set the right permissions, you should also be able to run the application
    directly by clicking the Altair Desktop icon located on your Kali Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now verify that the client is working as expected. Open it and, in the
    Enter URL address bar, enter ***http://lab.blackhatgraphql.com/graphql***. This
    will ensure that any query we execute will be sent directly to this address. Now,
    in the left-side Query pane, remove the existing code comments (lines that start
    with the `#` symbol) and enter the following query instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](image_fi/502840c02/f02004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-4: The Altair Desktop client for Linux'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click **Send Request**. You should see output similar to that in [Figure
    2-5](#figure2-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/f02005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-5: A GraphQL response in the Altair Desktop client'
  prefs: []
  type: TYPE_NORMAL
- en: Altair is a powerful tool; it will provide us with query auto-completion suggestions,
    as well as schema documentation, historical records of executed queries, and other
    features, such as setting custom HTTP headers and saving queries to a collection,
    making our lives much easier. To learn more about the advanced features of Altair,
    refer to the official documentation page at [https://altair.sirmuel.design/docs/features](https://altair.sirmuel.design/docs/features).
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Vulnerable GraphQL Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the client utilities needed to query any GraphQL server, the
    next step is to install a vulnerable GraphQL server, which we’ll use as our target
    throughout the book. We will use this vulnerable server in our deeper exploration
    of GraphQL in Chapter 3 and throughout the penetration testing exercises in Chapters
    4 through 9.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Docker* ([https://www.docker.com](https://www.docker.com)) is a tool for deploying
    and managing containers. *Containers* are units of software that package up code
    and its dependencies so an application can run reliably in various environments.
    Docker is available on Windows, macOS, and Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use Docker to deploy the application we’ll attack throughout this book.
    Let’s install it from the Kali software repositories by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to make sure the Docker process will automatically start upon
    system reboot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, make sure Docker was successfully installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Deploying the Damn Vulnerable GraphQL Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our target application must be able to simulate common GraphQL application vulnerabilities.
    To achieve this, we will use the *Damn Vulnerable GraphQL Application (DVGA)*,
    a GraphQL application with design- and configuration-level vulnerabilities deliberately
    built in. We developed DVGA in February 2021 to educate users about attacking
    and defending applications backed by GraphQL, and it has since become the de facto
    target application in the GraphQL security space for learning how to hack GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: DVGA is vulnerable to a variety of issues, including DoS, information disclosure,
    code execution, authentication bypass, Structured Query Language (SQL) injection,
    broken authorization, and more. It offers multiple working modes tailored to both
    beginners and experts and includes built-in functionality to restore itself in
    case it breaks. We will go into more detail about how to use it in Chapters 3
    and 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DVGA code is open source and can be found on GitHub at [https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application](https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application).
    Let’s use Git to clone the DVGA repository and use Docker to deploy it. First,
    make sure you have Git installed with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, clone the DVGA repository from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then build the DVGA Docker image with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, start the DVGA container with the following command. Note that you
    will want to run this specific command if your DVGA happens to crash at any point
    throughout the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, verify that the container is running by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: At this point, the target application should be up and running. Verify this
    by opening a web browser and entering ***http://localhost:5013*** in the address
    bar. You should be able to access the application shown in [Figure 2-6](#figure2-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/F02006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-6: The Damn Vulnerable GraphQL Application'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, DVGA resembles Pastebin ([https://pastebin.com](https://pastebin.com)),
    a web application that allows clients to submit random text snippets (such as
    source code or other text) and share them with others. These text snippets are
    also called *pastes*, a term we will use throughout this book as we walk through
    penetration-testing scenarios using DVGA. Pastes can have metadata, such as titles,
    content, author information, and so on. You will be able to see this information
    when we run queries against DVGA. [Figure 2-7](#figure2-7) shows an example of
    a paste in DVGA.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/F02007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-7: A sample paste in DVGA'
  prefs: []
  type: TYPE_NORMAL
- en: You can see the title and content of the paste, as well as its author (Darcee)
    and some metadata about them, such as their internet protocol (IP) address (215.0.2.85)
    and web browser (Mozilla/5.0).
  prefs: []
  type: TYPE_NORMAL
- en: Testing DVGA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have a target application in your lab environment, verify that
    the application is up and its GraphQL API is accessible on the network with a
    simple GraphQL query. For this, we’ll use the Altair client we installed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Altair client and enter ***http://localhost:5013/graphql*** in the
    address bar. Next, enter the following GraphQL query in the left pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This query should result in output similar to that shown in [Figure 2-8](#figure2-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/f02008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-8: The DVGA response in Altair'
  prefs: []
  type: TYPE_NORMAL
- en: Names in GraphQL are case-sensitive, so make sure you follow the capitalization
    in `systemHealth`; otherwise, this query will result in an error.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GraphQL Hacking Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 1, we highlighted the differences between REST and GraphQL APIs.
    These differences required the security industry to build GraphQL support into
    existing tools. In some cases, hackers also created new tools designed exclusively
    for penetration testing GraphQL applications. The hacking tools we will install
    in the lab and use in our hacking exercises in later chapters are capable of security-testing
    GraphQL applications.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Burp Suite* is application security testing software by PortSwigger ([https://portswigger.net](https://portswigger.net))
    that proxies traffic between your web browser and the target application, allowing
    you to intercept, modify, and replay requests coming in and out of your computer.
    In our GraphQL security lab, we’ll use Burp Suite to manually interact with our
    target by observing and modifying GraphQL queries before they are sent to the
    target server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Newer versions of Kali should have Burp Suite installed by default. Let’s verify
    this by opening the terminal and entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now we’ll open Burp Suite and check that it can successfully intercept traffic.
    In the Kali Applications menu’s search bar, enter **Burp Suite** and click the
    application. If this is the first time you’ve loaded the application, read the
    Terms and Conditions and click **I Accept**.
  prefs: []
  type: TYPE_NORMAL
- en: Create a temporary project by selecting the **Temporary Project** radio button,
    and click **Next**. Burp Suite will ask which configuration file to load for the
    project. Choose **Use Burp Defaults** and click **Start Burp**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s ensure that Burp Suite can proxy HTTP traffic to DVGA. Click **Proxy**▶**Intercept**▶**Open
    Browser**. In the browser, enter ***http://localhost:5013/graphiql*** and press
    ENTER. This will initiate a GET request to DVGA, which Burp Suite should automatically
    intercept.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite should now highlight the **Intercept** tab (typically in orange),
    indicating it has intercepted the outgoing request. You should see an in-flight
    HTTP GET request, similar to the one shown in [Figure 2-9](#figure2-9).
  prefs: []
  type: TYPE_NORMAL
- en: This request has yet to leave your web browser. Burp Suite allows you to make
    modifications to it before sending it to the server. Go ahead and click the **Intercept
    Is On** button. This will unblock the request and send it to DVGA.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve verified that Burp Suite is installed and configured and can intercept
    traffic going from your browser to DVGA. Great work! Burp Suite is so feature
    rich that an entire book can be written on it. To learn more about this tool,
    we recommend referencing its official documentation ([https://portswigger.net/burp/documentation/desktop/penetration-testing](https://portswigger.net/burp/documentation/desktop/penetration-testing)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502840c02/f02009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-9: Intercepting a request in Burp Suite'
  prefs: []
  type: TYPE_NORMAL
- en: Clairvoyance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Chapter 1, we introduced GraphQL schemas, which represent the structure of
    the application’s data model. Developers who want to interact with a GraphQL API
    will need to know what data they can access, as well as what queries or mutations
    the API supports. GraphQL exposes this schema information through the introspection
    query.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, *introspection* is a feature in GraphQL that allows it to describe
    its own data to the client. [Listing 2-1](#listing2-1) shows a basic *introspection
    query* that returns a list of all the available queries from the schema. We’ll
    cover these queries in more detail in Chapter 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 2-1: A basic introspection query'
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, companies that allow clients to perform introspection queries
    against their GraphQL APIs are making a security trade-off. Information about
    the various fields and objects that the backend application supports can only
    aid threat actors and increase their chances of successfully finding vulnerabilities.
    As such, production-grade implementations will often disable introspection. This
    means you may be required to test GraphQL applications in production setups that
    don’t allow introspection queries to be executed. In these situations, figuring
    out how to properly construct queries may pose a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: This is where *Clairvoyance* comes to the rescue. This Python-based reconnaissance
    tool for GraphQL APIs, developed by Nikita Stupin ([@_nikitastupin](http://www.twitter.com/@_nikitastupin))
    and Ilya Tsaturov ([@itsaturov](http://www.twitter.com/@itsaturov)), allows you
    to discover schema information when introspection is disabled. It works by abusing
    a GraphQL feature called *field suggestions*. Essentially, it reconstructs the
    underlying schema by sending queries crafted from a dictionary of common English
    words and observing the server’s responses. We’ll go into more detail about field
    suggestions and how they help us extract information about GraphQL schemas in
    Chapter 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and install Clairvoyance. Open the terminal and enter the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify that Clairvoyance is able to run by passing the `-h` flag to
    the Clairvoyance script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: InQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Until recently, not many resources for GraphQL security testing were publicly
    available, even as GraphQL adoption increased. To fill this gap, the security
    firm Doyensec developed *Introspection GraphQL* (*InQL)*.
  prefs: []
  type: TYPE_NORMAL
- en: This security testing tool, based on Python, relies on the introspection query.
    InQL can export any information it finds about the GraphQL schema to a variety
    of formats, making the application’s schema easier to read and understand. InQL
    also can perform other tasks, such as detecting potential DoS conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s install InQL. Open the terminal and enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the installation succeeded and that InQL is able to run by passing
    it the `-h` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you see similar output, InQL was successfully installed. We’ll use the tool
    in penetration testing exercises later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Graphw00f
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Over the years, the GraphQL community has developed GraphQL server implementations
    in many programming languages, such as graphql-php for PHP, and Graphene and Ariadne
    for Python. For us hackers, it’s crucial to identify the technologies that our
    target server is running behind the scenes. Once we gather this information, we’ll
    be able to tailor attacks to the technology we’re facing, increasing our overall
    chances of success.
  prefs: []
  type: TYPE_NORMAL
- en: '*Graphw00f* is a Python-based GraphQL security tool that we developed to identify
    a GraphQL API’s specific implementation. We built it primarily because GraphQL
    doesn’t generally advertise the type of engine it’s using under the hood. We wondered
    whether you could identify the implementation solely based on API responses; it
    turns out you can. Graphw00f manages to fingerprint the implementation by sending
    a mix of valid and malformed queries to the server and observing the subtle differences
    in the returned error messages. It can currently fingerprint over 24 implementations,
    including the majority of the popular GraphQL servers in use today.'
  prefs: []
  type: TYPE_NORMAL
- en: This implementation information is especially interesting because not all of
    the available GraphQL implementations available today support the same security
    features out of the box. For example, some implementations offer external libraries
    for implementing authorization controls, while others do not. Identifying the
    backend technology gives us these additional data points to guide our testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Graphw00f, open the terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that Graphw00f can successfully start by using the `-h` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: BatchQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*BatchQL* is a GraphQL security auditing script written in Python and developed
    by the security firm Assetnote. The tool is named after a GraphQL feature called
    *batching* that allows clients to send multiple queries in a single HTTP request.
    You’ll learn more about batch queries in later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'BatchQL attempts to identify flaws in GraphQL implementations related to the
    following vulnerability classes: DoS, CSRF, and information disclosure. Install
    it by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that BatchQL is working properly by passing it the `-h` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Nmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Developed by Gordon Lyon (also known as “Fyodor”), Nmap is the Swiss Army knife
    of port scanning. It’s also one of the oldest security tools out there today,
    created in September 1997\. (It’s quite amazing that it has remained the de facto
    port-scanning tool decades later.)
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use Nmap’s port-scanning capability and its custom scripting engine, called
    the *Nmap Scripting Engine (NSE)*. NSE uses scripts written in the Lua language
    to extend Nmap into a full-blown vulnerability-assessment tool. We’ll leverage
    this functionality to scan for GraphQL servers and find vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali comes bundled with Nmap by default. Verify that you have it installed
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, download the *nmap-graphql-introspection-nse* Lua script for Nmap and
    place it in the NSE *scripts* folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now verify that Nmap can find and read the script by passing it the `--script-help`
    command argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Commix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Command Injection Exploiter (Commix)* is an open source project written in
    Python and developed by Anastasios Stasinopoulos. Commix attempts to find and
    exploit command injection vulnerabilities in an automated fashion by fuzzing various
    parts of an HTTP request, such as query parameters or the request body, using
    specialized payloads. The tool is also capable of exploiting these vulnerabilities
    and can spawn a custom interactive shell, which penetration testers can use to
    gain a foothold in remote servers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Commix should be preinstalled in Kali by default, but to ensure that it is
    indeed available and working properly, run the following set of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: graphql-path-enum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Written in Rust and developed by dee_see ([@dee_see](http://www.twitter.com/@dee_see)),
    *graphql-path-enum* is a security testing tool that finds various ways to construct
    queries that reach a specific piece of data. By doing so, it arms hackers with
    information that could assist them in identifying authorization flaws. We’ll discuss
    GraphQL authorization vulnerabilities in Chapter 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install graphql-path-enum by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that it can successfully run with its new permissions by passing it
    the `-h` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: EyeWitness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*EyeWitness* is a web-scanning tool developed by Chris Truncer and Rohan Vazarkar
    that is capable of capturing screenshots of target web applications. When scanning
    many websites in a penetration test, you’ll often find it useful to visually identify
    what’s running on them. EyeWitness achieves this using a command line–based web
    browser (also called a *headless browser*) under the hood, which allows it to
    load dynamic web content, such as content loaded dynamically using JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install EyeWitness with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: GraphQL Cop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We developed GraphQL Cop, a dedicated GraphQL security auditing utility based
    on Python. GraphQL Cop audits GraphQL servers for information disclosure and DoS-based
    vulnerabilities. In later chapters, we will use this tool to check whether GraphQL
    servers are protected against common attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install GraphQL Cop with the following set of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: CrackQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We developed CrackQL, a specialized brute-forcing tool for GraphQL that uses
    GraphQL language features to better optimize brute-force attacks against API actions
    that may require authentication. We will use this tool in Chapter 7, when we perform
    dictionary-based attacks against our GraphQL target. Install CrackQL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve installed all of these tools, we highly encourage you to take a
    snapshot of your Kali virtual machine to ensure that its state is saved. You’ll
    then be able to restore it should it break in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s summarize what you currently have in your lab: graphical and command
    line HTTP clients that can interact with GraphQL, a working Docker environment
    for deploying containers, and the DVGA target application.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter briefly discussed how these tools work under the hood and the needs
    they fill, such as information gathering, server fingerprinting, network and application
    scanning, vulnerability assessments, and GraphQL auditing. You’ll explore their
    use in more depth in the remaining chapters.
  prefs: []
  type: TYPE_NORMAL
- en: This lab is an essential part of this book, but it might also prove valuable
    for your next real-world penetration test. We encourage you to keep an eye on
    the Black Hat GraphQL GitHub repository ([https://github.com/dolevf/Black-Hat-GraphQL.git](https://github.com/dolevf/Black-Hat-GraphQL.git)),
    where we maintain a list of current and future GraphQL security tools to help
    you keep your lab up to date.
  prefs: []
  type: TYPE_NORMAL
