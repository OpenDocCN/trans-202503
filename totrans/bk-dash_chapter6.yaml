- en: '<samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">INVESTMENT
    PORTFOLIO: BUILDING LARGER APPS</samp>'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">投资组合：构建更大的应用</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: In this chapter we’ll show you how to create an investment portfolio app that
    explores how asset allocation affects a portfolio’s return. We’ll start with an
    introduction to asset allocation and why it’s an important concept in investing.
    We’ll then create a dashboard to explore a dataset detailing annual returns for
    cash, stocks, and bonds since 1929\. The app will show you how interactive dashboards
    created with Dash really help bring data to life.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向你展示如何创建一个投资组合应用，探索资产配置如何影响投资组合的回报。我们将首先介绍资产配置及其为何是投资中的一个重要概念。接着，我们将创建一个仪表板，探索一个包含自
    1929 年以来现金、股票和债券年回报数据集的应用。这个应用将展示如何使用 Dash 创建的交互式仪表板真正使数据生动起来。
- en: This app contains more lines of code than the app in [Chapter 5](chapter5.xhtml).
    We’ll introduce ways to organize larger apps and offer some tips and tricks for
    maintaining and debugging large apps. We also cover some advanced callback techniques.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用包含的代码行数比 [第5章](chapter5.xhtml) 的应用要多。我们将介绍如何组织更大的应用，并提供一些维护和调试大型应用的技巧和窍门。我们还将介绍一些高级回调技巧。
- en: 'By the end of this chapter, you’ll know how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将知道如何：
- en: Structure a larger project to make it easier to maintain and debug
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化一个更大的项目，使其更易于维护和调试
- en: Include FontAwesome icons in your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用中包含 FontAwesome 图标
- en: 'Use new Dash Core components: <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Markdown</samp>'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的 Dash 核心组件：<samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Markdown</samp>
- en: 'Use new Dash Bootstrap components: <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">InputGroup</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">Table</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Tabs</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Tooltip</samp>'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的 Dash Bootstrap 组件：<samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">InputGroup</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">Table</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Tabs</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Tooltip</samp>
- en: Use Plotly Graph Objects to make color-coded figures
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Plotly 图形对象制作颜色编码的图形
- en: We’ll also cover some advanced callback techniques, such as using callbacks
    with multiple inputs and outputs, getting data from components without triggering
    a callback, and synchronizing components using callbacks. Before we get to the
    code, though, you’ll need a little background on asset allocation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍一些高级回调技巧，例如使用多个输入和输出的回调、在不触发回调的情况下从组件获取数据，以及通过回调同步组件。然而，在进入代码之前，你需要了解一些关于资产配置的背景知识。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Asset Allocation</samp>
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">资产配置</samp>
- en: One of the primary goals in investing is to obtain the highest returns with
    the lowest risk of loss. *Asset allocation* is the strategy of dividing an investment
    portfolio among different categories of assets such as stocks, bonds, and cash.
    The objective is to reduce risk through diversification. Historically, the returns
    of these asset classes do not move in unison. For example, when stocks are down,
    bonds are often up. Having both classes in your portfolio can reduce risk since
    they offset each other.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 投资的主要目标之一是以最低的风险获得最高的回报。*资产配置*是将投资组合分配到不同资产类别（如股票、债券和现金）中的策略。其目的是通过多样化来降低风险。从历史上看，这些资产类别的回报并不是同步变化的。例如，当股票下跌时，债券通常会上涨。在你的投资组合中同时拥有这两种资产类别可以减少风险，因为它们相互抵消。
- en: The amount to allocate to each asset class depends on your goals, time horizon,
    and risk tolerance. For example, stocks are more volatile than bonds or cash but
    typically have higher returns in the long run. If you are investing for a retirement
    that’s decades in the future, you may be comfortable allocating more of your portfolio
    to stocks since you have time to wait out the inevitable ups and downs of the
    market. That said, it’s hard to know ahead of time how you’ll feel when you see
    the balance in your account decline, and it’s not uncommon for people to panic
    when they see their stocks drop and sell them at the bottom of the market, locking
    in those losses. Having other assets that don’t decline at the same time as stocks
    can help you stick with your long-term strategy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个资产类别的配置比例取决于你的目标、时间范围和风险承受能力。例如，股票比债券或现金波动性更大，但通常长期回报更高。如果你是为几十年后的退休做投资，可能会更倾向于将更多的资金配置到股票上，因为你有足够的时间等待市场的起伏。然而，提前很难预测，当你看到账户余额下降时，你会有什么感受。在股票下跌时，很多人会恐慌并在市场底部卖出，从而锁定亏损。拥有其他资产，这些资产与股票不同步下跌，可以帮助你坚持长期的投资策略。
- en: There are risks in being too conservative as well. If you have too much allocated
    to cash, you are at risk of not having enough funds at retirement. However, for
    short-term goals such as being able to cover unexpected living expenses, it’s
    appropriate to hold cash.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 过于保守也有风险。如果你过多地配置现金，你就有可能在退休时没有足够的资金。然而，对于短期目标，例如能够应对突如其来的生活开支，持有现金是合适的。
- en: If you are new to investing and this isn’t making much sense, playing with the
    app can help clarify these concepts. That’s one of the great things about data
    visualization. With a glance at the color-coded graph, you can see how stocks,
    bonds, and cash have performed over time. This app will analyze and graphically
    depict how asset allocation affects your chosen portfolio, allowing you to tweak
    your allocation ratios to see how portfolios with various allocations perform
    over time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是投资新手，且这部分内容还不太明白，尝试使用该应用程序可以帮助你澄清这些概念。这就是数据可视化的一个优点。通过一眼望去的颜色编码图表，你可以看到股票、债券和现金的表现如何随时间变化。这个应用将分析并图形化地展示资产配置如何影响你选择的投资组合，允许你调整配置比例，查看不同配置下投资组合随时间的表现。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Download and Run the App</samp>
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">下载并运行应用</samp>
- en: First let’s take a look at the finished app. You’ll find the full code at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash).
    Download and run it locally using the instructions in [Chapter 2](chapter2.xhtml),
    or see it live at [*https://<wbr>wealthdashboard<wbr>.app*](https://wealthdashboard.app).
    [Figure 6-1](chapter6.xhtml#fig6-1) shows a screenshot of the app.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下完成的应用程序。你可以在[*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)找到完整的代码。按照[第2章](chapter2.xhtml)中的说明下载并在本地运行，或者在[*https://<wbr>wealthdashboard<wbr>.app*](https://wealthdashboard.app)上查看实时版本。[图6-1](chapter6.xhtml#fig6-1)展示了应用程序的截图。
- en: '![](../images/Figure6-1.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-1: Screenshot of the
    Asset Allocation Visualizer app</samp>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-1：资产配置可视化应用的截图</samp>
- en: You can see there are a lot more elements in this app than in our previous Dash
    apps. Try using the app to see how it functions. Enter different numbers in the
    input fields. Move the sliders to select different asset allocations. See what
    your investment returns would be if you put all your money in cash, or stocks,
    or bonds, or various combinations of the three. Use the radio buttons to select
    different time periods to see how your portfolio would have performed if you had
    started investing at the height of the dot-com bubble or the depths of the Great
    Depression.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这个应用包含了比我们之前的 Dash 应用更多的元素。试着使用这个应用，看看它是如何运作的。输入不同的数字到输入框中，移动滑块选择不同的资产配置。看看如果你把所有的钱都投入现金、股票、债券或它们的各种组合，投资回报会是多少。使用单选按钮选择不同的时间段，看看如果你在互联网泡沫的高峰期或大萧条的低谷开始投资，你的投资组合会有怎样的表现。
- en: Notice how the components in the app interact and how the pie chart, line chart,
    tables, and results fields update. You’ll learn how to do this in the “Dash Callbacks”
    section later in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意观察应用中各个组件是如何互动的，以及饼图、折线图、表格和结果字段如何更新。你将在本章后面的“Dash 回调”部分学习如何实现这些功能。
- en: Also, take note of the layout design. This app has sliders, input fields, and
    checklist options on the left side and output in the form of a pie chart, line
    chart, and summary table on the right. You will learn how to do this later in
    this chapter, in the “Layout and Styling” section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意布局设计。该应用程序的左侧有滑块、输入字段和复选框选项，右侧则以饼图、折线图和汇总表格的形式显示输出。你将在本章的“布局和样式”部分学到如何实现这一点。
- en: <samp class="SANS_Futura_Std_Bold_B_11">App Structure</samp>
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">应用程序结构</samp>
- en: One remarkable thing about Dash is how easy it is to make visual, interactive
    apps with just a few lines of code. The first two apps in this book are good examples,
    and you can see more in the Dash tutorial and in the Dash Enterprise App Gallery.
    However, when you start making your own apps, you’ll find it’s easy for the code
    to grow and become hundreds or even thousands of lines long as you add more features
    and components and build multipage apps. This chapter’s app has about 700 lines
    of code, and it is still relatively simple.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Dash的一个显著特点是，使用极少的代码就可以轻松创建视觉交互式应用程序。本书中的前两个应用程序就是很好的示例，你可以在Dash教程和Dash企业应用程序库中看到更多示例。然而，当你开始创建自己的应用程序时，你会发现，随着你添加更多的功能和组件并构建多页面应用程序，代码容易膨胀，可能会有数百甚至上千行。本章中的应用程序大约有700行代码，但它仍然相对简单。
- en: When you start working with larger apps, you’ll quickly understand why structuring
    your app is important. In small apps, it can be convenient to do things like define
    components directly in the layout or even in a callback, but as you add more features,
    this method can make your layout huge and difficult to manage, change, and debug.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始处理更大的应用程序时，你会很快理解为什么结构化应用程序如此重要。在小型应用程序中，像在布局中直接定义组件甚至在回调函数中定义组件这样的做法可能很方便，但随着功能的增加，这种方法会使得布局变得庞大，难以管理、修改和调试。
- en: In larger apps, we might separate sections into their own files. In this app,
    since it’s still relatively small, we keep all the code in one file but organize
    it so that related elements are grouped together. For example, we have different
    sections for figures, tables, tabs, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Markdown</samp>
    components. Each component is either defined in a function or assigned a variable
    name. Because the components are structured in this way, they become building
    blocks that we can then place in the layout as and when we need them by using
    a function call or calling the variable name. This organization also makes it
    easy to reuse these components in other apps. We split out the helper functions
    that do the data wrangling, such as calculating the investment returns, into their
    own section too. We’re able to keep the layout section concise at only 30 lines
    of code because of the way we structured the components. The last section has
    the app callbacks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在较大的应用程序中，我们可能会将不同的部分分离到各自的文件中。在这个应用程序中，由于它仍然相对较小，我们将所有代码保持在一个文件中，但组织得当，使得相关的元素能够分组在一起。例如，我们有不同的部分分别用于图表、表格、标签页和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Markdown</samp>组件。每个组件要么在一个函数中定义，要么被分配给一个变量名。由于组件是以这种方式组织的，它们成为了构建块，我们可以通过函数调用或调用变量名，在布局中随时需要时放置它们。这种组织方式还使得在其他应用程序中重用这些组件变得容易。我们还将处理数据的辅助函数，如计算投资回报率，分离到自己的部分中。由于我们对组件进行了结构化，因此能够让布局部分保持简洁，只有30行代码。最后一部分是应用程序的回调函数。
- en: There are many ways to structure an app. You could, for instance, put some sections
    in different modules and import them into the main app. For multipage apps, it’s
    standard practice to have each page in a different module. You will see examples
    of this in [Chapter 7](chapter7.xhtml). The important thing is to have a consistent
    method of organizing and structuring your app that works for you and makes sense
    for the project. For this app, given the size and that it’s a single-page app,
    we prefer to keep everything together.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化应用程序的方式有很多种。例如，你可以将某些部分放在不同的模块中并将其导入主应用程序。对于多页面应用程序，标准做法是将每个页面放在不同的模块中。你将在[第七章](chapter7.xhtml)中看到相关示例。重要的是要有一种一致的方式来组织和结构化你的应用程序，这种方式对你来说有效，并且符合项目的需求。对于这个应用程序，考虑到它的规模并且它是一个单页面应用程序，我们更倾向于将所有内容放在一起。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the Project</samp>
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置项目</samp>
- en: As usual, we’ll open with importing the libraries and managing the data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将从导入库文件和管理数据开始。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Importing the Libraries</samp>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">导入库文件</samp>
- en: We start by importing the modules we use in the app ([Listing 6-1](chapter6.xhtml#List6-1)).
    New to this app are the <samp class="SANS_TheSansMonoCd_W5Regular_11">data_table</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.graph_objects</samp>
    modules.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入应用中使用的模块（[清单 6-1](chapter6.xhtml#List6-1)）。这个应用中新加入的模块包括 <samp class="SANS_TheSansMonoCd_W5Regular_11">data_table</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.graph_objects</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html,
    dash_table, Input, Output, State, callback_context</samp>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html,
    dash_table, Input, Output, State, callback_context</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.graph_objects as
    go</samp>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.graph_objects as
    go</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-1: The import section
    of</samp> <samp class="SANS_Futura_Std_Book_11">app.py</samp>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-1: </samp><samp class="SANS_Futura_Std_Book_11">app.py</samp>
    的导入部分'
- en: We use <samp class="SANS_TheSansMonoCd_W5Regular_11">data_table</samp> to display
    results and source data. We use <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp> in our
    callbacks, and we use Plotly Graph Objects rather than Plotly Express to create
    the figures. We will discuss each of these in more detail later.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">data_table</samp> 来显示结果和源数据。在我们的回调函数中使用了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>，并且我们使用
    Plotly Graph Objects 而不是 Plotly Express 来创建图表。我们稍后会更详细地讨论这些内容。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Adding the Stylesheets</samp>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">添加样式表</samp>
- en: 'Next we will add the Bootstrap CSS and the FontAwesome icons as external stylesheets.
    In [Chapter 5](chapter5.xhtml) we added the <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>
    theme to the app, and in this app we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">SPACELAB</samp>
    theme, like so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加 Bootstrap CSS 和 FontAwesome 图标作为外部样式表。在[第 5 章](chapter5.xhtml)中，我们已将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp> 主题添加到应用中，而在这个应用中，我们使用的是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SPACELAB</samp> 主题，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB,
    dbc.icons.FONT_AWESOME])</samp>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB,
    dbc.icons.FONT_AWESOME])</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">SPACELAB</samp> theme provides
    us with the fonts, color palette, shapes, and sizes of the page elements you see
    in [Figure 6-1](chapter6.xhtml#fig6-1).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">SPACELAB</samp> 主题为我们提供了页面元素的字体、配色方案、形状和大小，这些内容在[图
    6-1](chapter6.xhtml#fig6-1)中可以看到。
- en: The FontAwesome library has an extensive collection of icons to help make an
    app more eye-catching. [Figure 6-2](chapter6.xhtml#fig6-2) shows the FontAwesome
    icons we use in the app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: FontAwesome 库拥有丰富的图标集合，有助于让应用程序更具吸引力。[图 6-2](chapter6.xhtml#fig6-2)展示了我们在应用中使用的
    FontAwesome 图标。
- en: '![](../images/Figure6-2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-2: The FontAwesome
    icons we use in the app</samp>'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-2: 我们在应用中使用的 FontAwesome
    图标</samp>'
- en: The Dash Bootstrap Components library has a module with the URLs for the FontAwesome
    and Bootstrap icons plus the URLs for various Bootstrap themes. This makes it
    easier to add them to your app. For example, you can specify the theme as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.themes.SPACELAB</samp> rather than
    [*https://<wbr>cdn<wbr>.jsdelivr<wbr>.net<wbr>/npm<wbr>/bootswatch@5<wbr>.1<wbr>.3<wbr>/dist<wbr>/spacelab<wbr>/bootstrap<wbr>.min<wbr>.css*](https://cdn.jsdelivr.net/npm/bootswatch@5.1.3/dist/spacelab/bootstrap.min.css).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Dash Bootstrap 组件库包含了一个模块，提供了 FontAwesome 和 Bootstrap 图标的 URL 以及各种 Bootstrap
    主题的 URL。这使得将它们添加到应用中变得更加简单。例如，你可以指定主题为 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.themes.SPACELAB</samp>，而不是[*https://<wbr>cdn<wbr>.jsdelivr<wbr>.net<wbr>/npm<wbr>/bootswatch@5<wbr>.1<wbr>.3<wbr>/dist<wbr>/spacelab<wbr>/bootstrap<wbr>.min<wbr>.css*](https://cdn.jsdelivr.net/npm/bootswatch@5.1.3/dist/spacelab/bootstrap.min.css)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Management</samp>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据管理</samp>
- en: The data source for this app comes from Professor Aswath Damodaran, who teaches
    corporate finance and valuation at the Stern School of Business at New York University.
    It includes the returns for three asset classes—cash, bonds, and stocks—represented
    by the three-month US Treasury Bill, the 10-year US Treasury Bond, and the S&P
    500\. You can learn more about this data at [*http://<wbr>people<wbr>.stern<wbr>.nyu<wbr>.edu<wbr>/adamodar<wbr>/New<wbr>_Home<wbr>_Page<wbr>/data<wbr>.xhtml*](http://people.stern.nyu.edu/adamodar/New_Home_Page/data.xhtml).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的数据来源于 Aswath Damodaran 教授，他在纽约大学斯特恩商学院教授企业财务和估值课程。数据包括三个资产类别的回报——现金、债券和股票——分别由三个月期的美国国库券、十年期的美国国债和标准普尔500指数代表。你可以在
    [*http://<wbr>people<wbr>.stern<wbr>.nyu<wbr>.edu<wbr>/adamodar<wbr>/New<wbr>_Home<wbr>_Page<wbr>/data<wbr>.xhtml*](http://people.stern.nyu.edu/adamodar/New_Home_Page/data.xhtml)
    了解更多关于这些数据的信息。
- en: 'We’ve downloaded the data and saved it as an Excel spreadsheet named *historic.csv*
    in the *assets* folder. Here we include the data in our app:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已下载数据并将其保存为名为 *historic.csv* 的 Excel 表格，保存在 *assets* 文件夹中。这里我们在应用程序中包含了这些数据：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.read_csv("assets/historic.csv")</samp>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.read_csv("assets/historic.csv")</samp>
- en: 'Next we take some steps to make the app easier to maintain over time. First
    we make the start and end years of the data series global variables, since we
    use these dates in numerous places in the app. Now when we update the app annually
    with new data, we don’t have to make any changes to the code for the new dates:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们采取一些步骤，使应用程序在长期内更易于维护。首先，我们将数据系列的开始和结束年份设置为全局变量，因为我们在应用程序的多个地方使用这些日期。现在，当我们每年用新数据更新应用程序时，就不需要修改代码中的新日期：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">MAX_YR = df.Year.max()</samp>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">MAX_YR = df.Year.max()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">MIN_YR = df.Year.min()</samp>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">MIN_YR = df.Year.min()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">START_YR = 2007</samp>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">START_YR = 2007</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">START_YR</samp> is the default
    starting year for the investment period when the app first runs. Rather than hardcoding
    “2007” into various places in the app, we use this global variable. If you decide
    you want a different start year, you only need to change it in this one line of
    code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">START_YR</samp> 是应用程序首次运行时投资周期的默认起始年份。与其在应用程序的多个地方硬编码“2007”，我们使用这个全局变量。如果你决定更改起始年份，只需在这一行代码中修改即可。
- en: 'We also make the colors global variables. We use custom colors for the stocks,
    bonds, and cash in the graphs, picked to match our Bootstrap theme. If you want
    to change to a different Bootstrap theme, you can update the graph colors by changing
    the color numbers here in the <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS</samp>
    dictionary, and the colors will be updated throughout the app:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将颜色设置为全局变量。我们在图表中为股票、债券和现金使用自定义颜色，这些颜色与我们的 Bootstrap 主题相匹配。如果你想切换到其他 Bootstrap
    主题，你可以通过更改 <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS</samp> 字典中的颜色值来更新图表颜色，颜色会在整个应用程序中更新：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "cash": "#3cb521",</samp>'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "cash": "#3cb521",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "bonds": "#fd7e14",</samp>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "bonds": "#fd7e14",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "stocks": "#446e9b",</samp>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "stocks": "#446e9b",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "inflation": "#cd0200",</samp>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "inflation": "#cd0200",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "background": "whitesmoke",</samp>'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "background": "whitesmoke",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
- en: 'Using this dictionary also makes the code more readable and self-documenting,
    since you can specify a color like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个字典还可以使代码更具可读性和自文档性，因为你可以像这样指定颜色：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS["stocks"]</samp>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS["stocks"]</samp>
- en: 'rather than like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是像这样：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">"#446e9b"</samp>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">"#446e9b"</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Layout and Styling</samp>
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">布局和样式</samp>
- en: In this section we’ll separate out all components and figures to modularize
    them so that we can add them to the layout wherever we like, as mentioned at the
    start of the chapter. The main layout comprises only about 30 lines of the app’s
    700 lines of code. To keep it this short we define the components and figures
    in another section of the app and give them variable names that we can call in
    the layout section. Structuring the layout in this way clarifies the app structure
    and simplifies design changes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将所有组件和图形分离出来进行模块化，以便可以将它们添加到布局的任何位置，正如章节开头所提到的那样。主要布局仅包含约30行代码，而应用程序总共有700行代码。为了保持简洁，我们在应用的其他部分定义组件和图形，并为它们赋予可调用的变量名，方便在布局部分调用。以这种方式构建布局可以清晰化应用结构，并简化设计变更。
- en: '[Listing 6-2](chapter6.xhtml#List6-2) shows the <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>
    code for the main layout.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6-2节](chapter6.xhtml#List6-2)展示了 <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>
    代码，用于定义主要布局。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           dbc.Col(</samp>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              html.H2(</samp>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              html.H2(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 "Asset Allocation
    Visualizer",</samp>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 "资产配置可视化工具",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 className="text-center
    bg-primary text-white p-2",</samp>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 className="text-center
    bg-primary text-white p-2",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           )</samp>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         ),</samp>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           [</samp>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(tabs, width=12,
    lg=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5, className="mt-4 border"),</samp>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(tabs, width=12,
    lg=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5, className="mt-4 border"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 [</samp>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dcc.Graph(id="allocation_pie_chart",
    className="mb-2"),</samp>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dcc.Graph(id="allocation_pie_chart",
    className="mb-2"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dcc.Graph(id="returns_chart",
    className="pb-4"),</samp>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dcc.Graph(id="returns_chart",
    className="pb-4"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">  html.Hr(),</samp>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">  html.Hr(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    html.Div(id="summary_table"),</samp>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    html.Div(id="summary_table"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    html.H6(datasource_text,
    className="my-2"),</samp>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    html.H6(datasource_text,
    className="my-2"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ],</samp>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 width=12,</samp>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 width=12,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 lg=7,</samp>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 lg=7,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 className=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"pt-4",</samp>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 className=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"pt-4",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           ],</samp>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           className="ms-1",</samp>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           className="ms-1",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Row(dbc.Col(footer)),</samp>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Row(dbc.Col(footer)),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">fluid=True,</samp>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">fluid=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-2: Layout code</samp>'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-2：布局代码</samp>
- en: The entire app content is wrapped in a <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp>,
    the most basic layout element in Bootstrap that’s required when using the rows
    and columns grid system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 整个应用程序的内容被包裹在一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp>
    中，这是Bootstrap中最基本的布局元素，使用行和列网格系统时是必需的。
- en: The first row ❶ of the layout defines the blue header bar, shown in [Figure
    6-3](chapter6.xhtml#fig6-3), which is defined as a Bootstrap row with one column
    that spans the entire width of the screen.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 布局的第一行❶定义了蓝色的头部栏，如[图 6-3](chapter6.xhtml#fig6-3)所示，该栏被定义为一个包含单列的Bootstrap行，该列跨越整个屏幕宽度。
- en: '![](../images/Figure6-3.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-3: Header bar of the
    Asset Allocation Visualizer app</samp>'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-3：资产配置可视化器应用的头部栏</samp>
- en: We style the header using Bootstrap utility classes. We use <samp class="SANS_TheSansMonoCd_W5Regular_11">text-center</samp>
    to center the text, <samp class="SANS_TheSansMonoCd_W5Regular_11">bg-primary</samp>
    to set the background to the <samp class="SANS_TheSansMonoCd_W5Regular_11">SPACELAB</samp>
    theme’s primary color, <samp class="SANS_TheSansMonoCd_W5Regular_11">text-white</samp>
    to set the text color, and <samp class="SANS_TheSansMonoCd_W5Regular_11">p-2</samp>
    to add padding. To see all the Bootstrap utility classes available for styling
    your app, see the Dash Bootstrap cheat sheet at [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Bootstrap实用类来样式化头部。我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">text-center</samp>
    来使文本居中，<samp class="SANS_TheSansMonoCd_W5Regular_11">bg-primary</samp> 设置背景为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SPACELAB</samp> 主题的主色，<samp class="SANS_TheSansMonoCd_W5Regular_11">text-white</samp>
    设置文本颜色，<samp class="SANS_TheSansMonoCd_W5Regular_11">p-2</samp> 添加内边距。要查看所有可用于样式化应用程序的Bootstrap实用类，请参阅Dash
    Bootstrap备忘单，链接为[*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com)。
- en: The second row ❷ has two columns and contains the main content of the app, shown
    in [Figure 6-4](chapter6.xhtml#fig6-4). The left column contains the user input
    control panel tabs. The right column has the primary outputs, which are the pie
    chart, line chart, and summary table visualizations. There is a lot of information
    in this row. If the screen were static, someone viewing it on a small screen would
    have to zoom in and do a lot of scrolling to see the information. The good news
    is that Bootstrap can easily make our apps responsive to the size of the device
    being used. We simply set screens that are smaller than tablet size to show just
    one column at a time, and screens that are larger to show the two columns side
    by side.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行❷有两列，包含应用程序的主要内容，如[图 6-4](chapter6.xhtml#fig6-4)所示。左侧列包含用户输入控制面板选项卡，右侧列包含主要输出，即饼图、折线图和汇总表格的可视化效果。这一行有很多信息。如果屏幕是静态的，视图者在小屏幕上查看时需要放大并进行大量滚动才能看到完整信息。好消息是，Bootstrap可以轻松地使我们的应用程序响应设备的大小。我们只需设置小于平板大小的屏幕一次只显示一列，而较大的屏幕则显示两列并排显示。
- en: '![](../images/Figure6-4.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-4: The main content
    of the resultant app</samp>'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-4：生成应用程序的主要内容</samp>
- en: 'Since Bootstrap rows have 12 columns, we make the row span the full screen
    by setting the width to 12\. Then, on large screens, we set the first column to
    a width of 5 and the second column to a width of 7 so that they will show side
    by side. Here is a simplified example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Bootstrap 的行有 12 列，我们通过将宽度设置为 12 来使行跨越整个屏幕。然后，在大屏幕上，我们将第一列的宽度设置为 5，第二列的宽度设置为
    7，使它们并排显示。以下是一个简化的示例：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Col("column 1", width=12,
    lg=5),</samp>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Col("列 1", width=12,
    lg=5),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Col("column 2", width=12,
    lg=7)</samp>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Col("列 2", width=12,
    lg=7)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: At the bottom we place the footer, shown in [Figure 6-5](chapter6.xhtml#fig6-5).
    For consistency, it’s styled the same as the header. A website’s footer is located
    at the bottom of every page and commonly includes secondary information such as
    contact information, legal notices, and a sitemap.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部我们放置页脚，如[图 6-5](chapter6.xhtml#fig6-5)所示。为了保持一致性，它的样式与头部相同。网站的页脚位于每个页面的底部，通常包括次要信息，如联系信息、法律声明和网站地图。
- en: '![](../images/Figure6-5.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-5: The app’s footer</samp>'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-5：应用程序的页脚</samp>
- en: Finally, we set the property <samp class="SANS_TheSansMonoCd_W5Regular_11">fluid=True</samp>
    ❸. This makes the content span the width of the *viewport*, which is the area
    of a web page visible to the user and which varies with the device. The viewport
    is smaller on phones and tablets than on a computer screen, so setting <samp class="SANS_TheSansMonoCd_W5Regular_11">fluid=True</samp>
    allows the app to have a responsive design that accommodates this. More on this
    topic shortly. That’s it for the main layout!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置了属性 <samp class="SANS_TheSansMonoCd_W5Regular_11">fluid=True</samp> ❸。这使得内容跨越整个*视口*的宽度，视口是用户在网页上可见的区域，并且会随着设备的不同而变化。在手机和平板电脑上，视口比在计算机屏幕上要小，因此设置
    <samp class="SANS_TheSansMonoCd_W5Regular_11">fluid=True</samp> 使应用程序具有响应式设计，可以适应这种差异。稍后会进一步讨论这个话题。至此，主要布局部分就完成了！
- en: <samp class="SANS_Futura_Std_Bold_B_11">Components</samp>
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">组件</samp>
- en: Now we’ll describe in more detail how to define each component we added to the
    layout. You’ll notice the app has different *tabs* which define different panes
    for content, such as the tutorial (the Learn tab), the app controls (the Play
    tab), and the data (the Results tab). If you click between the tabs, you’ll see
    that only the content in the first column changes; the second column, which displays
    the graphs and summary table, always stays the same when you are just switching
    tabs.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更详细地描述如何定义我们添加到布局中的每个组件。你会注意到应用程序有不同的*标签*，它们定义了不同的内容窗格，例如教程（“学习”标签）、应用程序控制（“播放”标签）和数据（“结果”标签）。如果你在标签之间切换，你会看到只有第一列的内容发生变化；第二列显示的是图表和摘要表，当你只是切换标签时，它始终保持不变。
- en: 'The Play tab is the busiest, and we’ll look over each of the following elements
    in detail:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: “播放”标签是最忙碌的，我们将详细查看以下每个元素：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Markdown</samp> for formatting
    and displaying the intro text
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Markdown</samp> 用于格式化和显示简介文本
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Card</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>
    components for setting the asset allocation percentages
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Card</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>
    组件用于设置资产分配百分比
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroupText</samp> for
    making the form for entering the numeric data
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroupText</samp> 用于创建输入数字数据的表单
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tooltip</samp> for displaying
    additional data on hover
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tooltip</samp>用于悬停显示附加数据
- en: In the Results tab, we use <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    to display the source data and results for visualization.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Results”标签中，我们使用<samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>来显示源数据和可视化结果。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Tabs</samp>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">标签</samp>
- en: In Dash, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Tabs</samp> component
    provides a convenient way to separate content into different panes. A user can
    click a tab to view the pane, and the best part is that the component automatically
    handles this navigation for us. All we need to do is define what content goes
    in each tab. [Figure 6-6](chapter6.xhtml#fig6-6) shows the tabs in our app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dash中，<samp class="SANS_TheSansMonoCd_W5Regular_11">Tabs</samp>组件提供了一种方便的方式将内容分隔到不同的面板中。用户可以点击标签查看相应的面板，最棒的是，组件会自动为我们处理这种导航。我们需要做的就是定义每个标签内的内容。[图6-6](chapter6.xhtml#fig6-6)展示了我们应用程序中的标签。
- en: '![](../images/Figure6-6.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-6: The Asset Allocation
    Visualizer tabs</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-6：资产配置可视化器标签</samp>
- en: The Learn tab has some text. The Play tab is the main control panel for the
    app, which allows the user to input their choices. The Results tab contains tables
    with details of the annual returns of the portfolio and the source data. This
    is the data that’s visualized in the second column.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: “Learn”标签包含一些文本。“Play”标签是应用程序的主要控制面板，允许用户输入他们的选择。“Results”标签包含包含投资组合年回报和源数据的表格。这些数据在第二列中进行了可视化。
- en: 'In <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>, we included
    these tabs by simply including the variable name <samp class="SANS_TheSansMonoCd_W5Regular_11">tabs</samp>
    in the first column of the second row:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在<samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>中，我们通过简单地在第二行的第一列中包含变量名<samp
    class="SANS_TheSansMonoCd_W5Regular_11">tabs</samp>来包含这些标签：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--snip--</samp>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--省略--</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dbc.Row(</samp>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      [</samp>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        dbc.Col(tabs, width=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">12, lg=5, className="mt-4 border"),</samp>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        dbc.Col(tabs, width=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">12, lg=5, className="mt-4 border"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--snip--</samp>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--省略--</samp>
- en: We define our <samp class="SANS_TheSansMonoCd_W5Regular_11">tab</samp>s as shown
    in [Listing 6-3](chapter6.xhtml#List6-3).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了如[清单6-3](chapter6.xhtml#List6-3)所示的<samp class="SANS_TheSansMonoCd_W5Regular_11">tab</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">tabs = dbc.Tabs(</samp>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">tabs = dbc.Tabs(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Tab(learn_card, tab_id="tab1",
    label="Learn"),</samp>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Tab(learn_card, tab_id="tab1",
    label="Learn"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tab(</samp>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tab(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             [asset_allocation_text,
    slider_card, input_groups,</samp>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             [asset_allocation_text,
    slider_card, input_groups,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             time_period_card],</samp>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             time_period_card],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             tab_id="tab-2",</samp>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             tab_id="tab-2",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             label=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Play",</samp>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             label=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Play",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             className="pb-4",</samp>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             className="pb-4",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Tab([results_card, data_source_card],</samp>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Tab([results_card, data_source_card],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             tab_id="tab-3", label="Results"),</samp>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             tab_id="tab-3", label="结果"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="tabs",</samp>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="tabs",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">active_tab="tab-2",</samp>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">active_tab="tab-2",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-3: Defining the tabs</samp>'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-3：定义标签</samp>
- en: 'We create a <samp class="SANS_TheSansMonoCd_W5Regular_11">tab</samp>s container
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tabs</samp> component,
    which holds our three separate <samp class="SANS_TheSansMonoCd_W5Regular_11">Tab</samp>
    panes. We give each <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tab</samp>
    the content to display, an ID, and a label that will be displayed on the screen.
    Take a look at the second <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tab</samp>
    ❶, which is the Play tab depicted in [Figure 6-7](chapter6.xhtml#fig6-7), and
    you’ll see that the <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    property includes a list of variable names that correspond to components we’ve
    defined separately in the components section of the code. <samp class="SANS_TheSansMonoCd_W5Regular_11">asset</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">allocation_text</samp> contains the text
    of the introduction. <samp class="SANS_TheSansMonoCd_W5Regular_11">slider</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">card</samp> contains the two <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>.<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp>s where the user can set
    the allocation percentage between cash, stocks, and bonds. <samp class="SANS_TheSansMonoCd_W5Regular_11">input_groups</samp>
    defines the area for entering all user input: the starting dollar amount, number
    of years, and starting year. We use this input for calculating the investment
    returns. <samp class="SANS_TheSansMonoCd_W5Regular_11">time</samp>_<samp class="SANS_TheSansMonoCd_W5Regular_11">period</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">card</samp> allows the user to select
    certain interesting periods, like the dot-com bubble or the Great Depression.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tabs</samp> 组件创建一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">tab</samp>s 容器，包含三个独立的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Tab</samp>
    面板。我们为每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tab</samp> 提供要显示的内容、ID
    和屏幕上显示的标签。请看第二个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tab</samp> ❶，也就是[图
    6-7](chapter6.xhtml#fig6-7)中展示的播放标签，你会看到 <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    属性包含一个变量名列表，这些变量对应着我们在代码的组件部分单独定义的组件。<samp class="SANS_TheSansMonoCd_W5Regular_11">asset</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">allocation_text</samp> 包含了介绍文本。<samp class="SANS_TheSansMonoCd_W5Regular_11">slider</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">card</samp> 包含两个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>.<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp>，用户可以通过它们设置现金、股票和债券之间的分配百分比。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">input_groups</samp> 定义了输入区域，用于输入所有用户数据：起始金额、年份和起始年份。我们使用这些输入来计算投资回报。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">time</samp>_<samp class="SANS_TheSansMonoCd_W5Regular_11">period</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">card</samp> 允许用户选择一些有趣的历史时期，比如互联网泡沫或大萧条。
- en: '![](../images/Figure6-7.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-7: The full content
    of the Play tab</samp>'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-7：播放标签的完整内容</samp>
- en: Now try moving the <samp class="SANS_TheSansMonoCd_W5Regular_11">asset_allocation_text</samp>
    variable name to the last item in the list. When you run the app with that change,
    you’ll see the intro text is moved to the bottom of the tab screen. This shows
    how easy it is to make design changes when using this technique for structuring
    the app. In the next section we’ll discuss in more detail how each section is
    defined.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试将 <samp class="SANS_TheSansMonoCd_W5Regular_11">asset_allocation_text</samp>
    变量名移动到列表中的最后一项。当你运行带有这个更改的应用时，你会看到介绍文本被移到标签屏幕的底部。这展示了使用这种结构化应用的技巧时，进行设计更改是多么简单。在下一节中，我们将更详细地讨论每个部分是如何定义的。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">active_tab</samp> property
    ❷ specifies the default tab to show when the app starts. By setting it to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">2</samp>, we ensure that the app always
    opens on the Play tab.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">active_tab</samp> 属性 ❷ 指定了应用启动时要显示的默认标签页。通过将其设置为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>，我们确保应用始终在“播放”标签页打开。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Card Containers and
    Sliders</samp>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">卡片容器与滑块</samp>
- en: A Bootstrap <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Card</samp> is
    a convenient container for related content. It’s typically a bordered box with
    padding and has options for headers, footers, and other content. We can also use
    Bootstrap utility classes to style and position cards easily.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Card</samp> 是一个方便的容器，用于存放相关内容。它通常是一个带有内边距的边框框，具有标题、页脚和其他内容的选项。我们还可以使用Bootstrap实用类来轻松地为卡片添加样式和定位。
- en: We use <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Card</samp> in several
    places in the app, but we’ll just examine the code for the card shown in [Figure
    6-8](chapter6.xhtml#fig6-8) as a representative example.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用中多个地方使用了<samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Card</samp>，但我们将仅检查[图6-8](chapter6.xhtml#fig6-8)中显示的卡片代码作为示例。
- en: '![](../images/Figure6-8.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-8: An example dbc.Card</samp>'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-8：一个示例 dbc.Card</samp>
- en: '[Listing 6-4](chapter6.xhtml#List6-4) shows the code for the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>
    component shown in [Figure 6-6](chapter6.xhtml#fig6-6).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表6-4](chapter6.xhtml#List6-4) 显示了[图6-6](chapter6.xhtml#fig6-6)中显示的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 组件代码。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">slider_card = dbc.Card(</samp>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">slider_card = dbc.Card(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H4("First set cash
    allocation %:", className="card-title"),</samp>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H4("首先设置现金分配百分比：",
    className="card-title"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Slider(</samp>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Slider(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="cash",</samp>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="cash",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         marks={i: f"{i}%" for
    i in range(0, 101, 10)},</samp>'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         marks={i: f"{i}%" for
    i in range(0, 101, 10)},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=0,</samp>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=100,</samp>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=100,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         step=5,</samp>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         step=5,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">10,</samp>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">10,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         included=False,</samp>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         included=False,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H4("Then set stock
    allocation % ", className="card-title mt-3",),</samp>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H4("然后设置股票分配百分比", className="card-title
    mt-3",),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div("(The rest will
    be bonds)", className="card-title"),</samp>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div("(其余将是债券)", className="card-title"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Slider(</samp>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Slider(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="stock_bond",</samp>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="stock_bond",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         marks={i: f"{i}%" for
    i in range(0, 91, 10)},</samp>'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         marks={i: f"{i}%" for
    i in range(0, 91, 10)},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=0,</samp>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=90,</samp>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=90,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         step=5,</samp>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         step=5,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=50,</samp>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=50,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         included=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">False,</samp>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         included=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">False,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   body=True,</samp>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   body=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-4: The allocation
    slider card</samp>'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-4: 分配滑块卡片</samp>'
- en: For the slider label, we use the Dash component <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H4</samp>
    to set a level 4 heading and the Bootstrap class <samp class="SANS_TheSansMonoCd_W5Regular_11">card-title</samp>
    to set consistent spacing for the selected theme.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于滑块标签，我们使用 Dash 组件 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H4</samp>
    设置一个 4 级标题，并使用 Bootstrap 类 <samp class="SANS_TheSansMonoCd_W5Regular_11">card-title</samp>
    来为所选主题设置一致的间距。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp> is a Dash Core
    component. In [Chapter 5](chapter5.xhtml) we saw <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>,
    which allows the user to select the start and end values of a range. <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>
    is similar, but only allows you to select a single value. We give the slider an
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> that we can reference
    in a callback, and we set the initial settings for <samp class="SANS_TheSansMonoCd_W5Regular_11">marks</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    to select on the slider. These are the defaults you see when the app starts.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp> 是 Dash 核心组件。在
    [第 5 章](chapter5.xhtml)中，我们看到了 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>，它允许用户选择一个范围的起始值和结束值。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp> 类似，但只允许选择一个单一的值。我们给滑块指定一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，以便在回调中引用，并为 <samp class="SANS_TheSansMonoCd_W5Regular_11">marks</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">min</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">step</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    设置初始值，这些值将用于选择滑块上的值。这些就是你在应用启动时看到的默认值。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">included</samp> property sets
    the style of the slider rail. By default, the sections of the slider rail before
    the slider handle are highlighted. However, for our use we are specifying a discrete
    value, so it makes sense to only highlight the value and not a range. We do this
    by setting <samp class="SANS_TheSansMonoCd_W5Regular_11">included=False</samp>.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">included</samp> 属性设置滑块轨道的样式。默认情况下，滑块手柄前面的滑轨部分会被高亮显示。然而，在我们的应用中，我们指定了一个离散值，因此合理的做法是只高亮显示该值，而不是一个范围。我们通过将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">included=False</samp> 来实现这一点。
- en: Look for other cards in the app and you will see that they are constructed in
    a similar way but hold different components, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Markdown</samp>.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中查找其他卡片，你会看到它们以类似的方式构建，但包含不同的组件，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Markdown</samp>。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Input Containers</samp>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">输入容器</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp> component
    handles user input, and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>
    is a container that enhances <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp>
    with more features, such as icons, text, buttons, and dropdown menus.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp> 组件处理用户输入，而 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp> 是一个容器，通过增加更多功能来增强
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp>，例如图标、文本、按钮和下拉菜单。
- en: '[Figure 6-9](chapter6.xhtml#fig6-9) shows how we use <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>
    in our app to create a form with the variable name <samp class="SANS_TheSansMonoCd_W5Regular_11">input_groups</samp>.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-9](chapter6.xhtml#fig6-9) 展示了我们如何在应用程序中使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>
    创建一个表单，变量名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">input_groups</samp>。'
- en: '![](../images/Figure6-9.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-9: Input form</samp>'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-9：输入表单</samp>
- en: 'Each line is one <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp>
    item, so here we have five items together in one container. In this case, rather
    than use a <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> as a container,
    we use an <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> container,
    simply because it doesn’t have a border and padding by default. Here’s the containing
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行是一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup</samp> 项目，所以这里我们将五个项目放在一个容器中。在这种情况下，我们不是使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 作为容器，而是使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    容器，简单的原因是它默认没有边框和内边距。以下是包含的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">input_groups = html.Div(</samp>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">input_groups = html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [start_amount, start_year,
    number_of_years, end_amount, rate_of_return],</samp>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [start_amount, start_year,
    number_of_years, end_amount, rate_of_return],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4 p-4",</samp>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4 p-4",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: 'We define each <samp class="SANS_TheSansMonoCd_W5Regular_11">InputGroup</samp>
    item separately and add it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    container. Each item is quite similar, so we will just look at a couple of them
    in detail. Here we define the second item, the “Start Year”:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">InputGroup</samp> 项目单独定义并添加到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> 容器中。每个项目都非常相似，所以我们只需详细查看其中几个。这里我们定义了第二个项目，即“开始年份”：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">start_year = dbc.InputGroup(</samp>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">start_year = dbc.InputGroup(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.InputGroupText("Start
    Year"),</samp>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.InputGroupText("开始年份"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Input(</samp>
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Input(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="start_yr",</samp>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="start_yr",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         placeholder=f"min {MIN_YR}  max
    {MAX_YR}",</samp>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         placeholder=f"最小 {MIN_YR}  最大
    {MAX_YR}",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         type="number",</samp>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         type="number",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">MIN_YR,</samp>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">MIN_YR,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=MAX_YR,</samp>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=MAX_YR,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=START_YR,</samp>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=START_YR,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mb-3",</samp>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mb-3",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: You use the <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroupText</samp>
    component to add text before, after, or on both sides of an input field. This
    makes forms look more attractive. For example, here we use <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroupText("Start
    Year")</samp> to display the text “Start Year” before the <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp>.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroupText</samp>
    组件在输入字段的前后或两侧添加文本。这使得表单看起来更加美观。例如，这里我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroupText("开始年份")</samp>
    在 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp> 前面显示文本“开始年份”。
- en: We set <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>,
    props of <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp>, to give
    an accepted range of values, and <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    to only accept numbers; this helps with data validation. For the values for <samp
    class="SANS_TheSansMonoCd_W5Regular_11">min</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">MIN_YR</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">MAX_YR</samp> global variables we discussed
    earlier. The <samp class="SANS_TheSansMonoCd_W5Regular_11">placeholder</samp>
    will show helpful information about the valid range if the input field is empty.
    Because we use our global variables when we update the datafile, we won’t have
    to make any changes to this component for the new date range.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了 <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>，这是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Input</samp> 的属性，用于限定有效值范围，并将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp> 设置为只接受数字；这样有助于数据验证。对于
    <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    的值，我们使用了之前讨论过的全局变量 <samp class="SANS_TheSansMonoCd_W5Regular_11">MIN_YR</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">MAX_YR</samp>。如果输入字段为空，<samp class="SANS_TheSansMonoCd_W5Regular_11">placeholder</samp>
    会显示有效范围的提示信息。因为我们在更新数据文件时使用了全局变量，所以当日期范围发生变化时，我们不需要对该组件做任何更改。
- en: 'The last two <samp class="SANS_TheSansMonoCd_W5Regular_11">InputGroup</samp>
    items are not actually used for input, but rather to show some results. We set
    <samp class="SANS_TheSansMonoCd_W5Regular_11">disabled=True</samp> so that nothing
    can be entered, and we set the background color to gray to differentiate the items.
    In the callback we’ll update this field with the investment results. It may seem
    odd to use an input component as an output field, but doing it like this gives
    the group a consistent look. Plus, in the future we may decide to allow input
    data here. For example, the user could enter the ending dollar amount and see
    how much would need to be invested, and for how long, to reach that goal in different
    market conditions. The code for the <samp class="SANS_TheSansMonoCd_W5Regular_11">rate_of_return</samp>
    input group looks like this:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的两个 <samp class="SANS_TheSansMonoCd_W5Regular_11">InputGroup</samp> 项目实际上并不是用于输入，而是用来显示一些结果。我们设置了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">disabled=True</samp>，这样就无法输入任何内容，并且我们将背景颜色设置为灰色以区分这些项目。在回调中，我们会用投资结果更新这个字段。虽然使用输入组件作为输出字段可能显得有些奇怪，但这样做能够保持该组的一致性。再者，未来我们可能会决定允许在这里输入数据。例如，用户可以输入最终的美元金额，并查看在不同的市场条件下需要投资多少，投资多长时间，才能达到这个目标。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">rate_of_return</samp> 输入组的代码如下：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">rate_of_return =</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup(</samp>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">rate_of_return =</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.InputGroup(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.InputGroupText(</samp>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.InputGroupText(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         "Rate of Return(CAGR)",</samp>
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         "回报率（CAGR）",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="tooltip_target",</samp>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="tooltip_target",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         className="text-decoration-underline",</samp>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         className="text-decoration-underline",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Input(id="cagr", disabled=True,
    className="text-black"),</samp>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Input(id="cagr", disabled=True,
    className="text-black"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Tooltip(cagr_text, target="tooltip_target")</samp>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dbc.Tooltip(cagr_text, target="tooltip_target")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mb-3",</samp>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mb-3",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Tool Tips</samp>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">工具提示</samp>
- en: '*Tool tips* are textual hints that appear when the user hovers their mouse
    over a component, as shown in [Figure 6-10](chapter6.xhtml#fig6-10). To add them
    we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tooltip</samp> component
    and style it with Bootstrap. You just need to specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">Tooltip</samp>’s
    <samp class="SANS_TheSansMonoCd_W5Regular_11">target id</samp>—no callback required!
    We use this in the app to provide a definition of CAGR, since it’s a term many
    people are not familiar with. The snippet at the end of the preceding section
    shows the code for the <samp class="SANS_TheSansMonoCd_W5Regular_11">Tooltip</samp>
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">rate_of_return</samp> input
    group.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*工具提示* 是当用户将鼠标悬停在组件上时出现的文本提示，如[图 6-10](chapter6.xhtml#fig6-10)所示。为了添加它们，我们使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Tooltip</samp> 组件，并使用 Bootstrap
    样式进行样式设置。你只需要指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">Tooltip</samp> 的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">target id</samp>，无需回调！我们在应用中使用它来提供CAGR的定义，因为很多人不熟悉这个术语。前一部分末尾的代码片段展示了在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">rate_of_return</samp> 输入组中的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Tooltip</samp> 的代码。'
- en: '![](../images/Figure6-10.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-10: Tool tip example</samp>'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-10: 工具提示示例</samp>'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Tables</samp>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据表</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp> is an interactive
    table for viewing, editing, and exploring large datasets. This app uses only a
    small portion of its capabilities, so be sure to check out the Dash documentation
    to see more examples of how to use this powerful tool. We use a <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    to show the <samp class="SANS_TheSansMonoCd_W5Regular_11">total</samp>_<samp class="SANS_TheSansMonoCd_W5Regular_11">returns</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">table</samp> in the Results tab, shown
    in [Figure 6-11](chapter6.xhtml#fig6-11).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp> 是一个用于查看、编辑和探索大型数据集的交互式表格。这个应用仅使用了它的一小部分功能，因此一定要查看Dash文档，了解更多关于如何使用这个强大工具的示例。我们使用一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp> 来展示[结果](chapter6.xhtml#fig6-11)标签中的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">total</samp>_<samp class="SANS_TheSansMonoCd_W5Regular_11">returns</samp>_<samp
    class="SANS_TheSansMonoCd_W5Regular_11">table</samp>，如[图 6-11](chapter6.xhtml#fig6-11)所示。
- en: '![](../images/Figure6-11.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-11: The full Results
    tab</samp>'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-11: 完整的结果标签</samp>'
- en: '[Listing 6-5](chapter6.xhtml#List6-5) shows the code for the <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-5](chapter6.xhtml#List6-5)显示了 <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    的代码。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">total_returns_table = dash_table.DataTable(</samp>
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">total_returns_table = dash_table.DataTable(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="total_returns",</samp>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="total_returns",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   columns=[{"id": "Year", "name":
    "Year", "type": "text"}]</samp>'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   columns=[{"id": "Year", "name":
    "Year", "type": "text"}]</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   + [</samp>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   + [</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">{"id":
    col, "name": col, "type": "numeric", "format": {"specifier": "$,.0f"}}</samp>'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">{"id":
    col, "name": col, "type": "numeric", "format": {"specifier": "$,.0f"}}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">for
    col in ["Cash", "Bonds", "Stocks", "Total"]</samp>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">for
    col in ["Cash", "Bonds", "Stocks", "Total"]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   page_size=15,</samp>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   page_size=15,</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   style_table={"overflowX":
    "scroll"},</samp>'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   style_table={"overflowX":
    "scroll"},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-5: Code for the DataTable
    shown in [Figure 6-11](chapter6.xhtml#fig6-11)</samp>'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 6-5: [图 6-11](chapter6.xhtml#fig6-11)中显示的DataTable代码</samp>'
- en: Like other elements in our app, we assign the <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    to a variable to make it easy to call in the layout.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们应用中的其他元素一样，我们将<samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>分配给一个变量，以便在布局中轻松调用。
- en: 'We use the following component properties to define our table:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下组件属性来定义我们的表格：
- en: The table <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> is <samp class="SANS_TheSansMonoCd_W5Regular_11">"total_returns"</samp>;
    we use this to identify this component in a callback.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格的<samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>是<samp class="SANS_TheSansMonoCd_W5Regular_11">"total_returns"</samp>；我们用它来在回调中标识这个组件。
- en: The column <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> matches the
    column name of our pandas DataFrame, which is what we use to update the data in
    the cells of the table.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列的<samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>与我们的pandas DataFrame中的列名匹配，这是我们用来更新表格单元格数据的依据。
- en: The column <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> is the
    text displayed in the column header.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列的<samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>是显示在列标题中的文本。
- en: The column <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp> sets the
    data type to either <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">numeric</samp>.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列的<samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>设置数据类型为<samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>或<samp
    class="SANS_TheSansMonoCd_W5Regular_11">numeric</samp>。
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">"format": {"specifier": "$,.0f"}</samp>
    formats the cells with a dollar sign (<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>)
    and zero (<samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>) decimals so
    that the data is displayed in whole dollars. Note that the data <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    must be <samp class="SANS_TheSansMonoCd_W5Regular_11">numeric</samp> for the formatting
    to be applied correctly.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">"format": {"specifier": "$,.0f"}</samp>将单元格格式化为带有美元符号（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$</samp>）和零（<samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>）小数的形式，以便数据以整美元显示。请注意，数据的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">type</samp>必须是<samp class="SANS_TheSansMonoCd_W5Regular_11">numeric</samp>，以便正确应用格式化。'
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">page_size</samp> prop controls
    the table height and adds the pagination buttons at the bottom of the table. We
    set it to <samp class="SANS_TheSansMonoCd_W5Regular_11">15</samp> to display 15
    rows per page. The <samp class="SANS_TheSansMonoCd_W5Regular_11">style_table={"overflowX":
    "scroll"}</samp> syntax controls the width by adding a scroll bar if the table
    would otherwise overflow the parent container.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">page_size</samp>属性控制表格高度，并在表格底部添加分页按钮。我们将其设置为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">15</samp>，以便每页显示15行。<samp class="SANS_TheSansMonoCd_W5Regular_11">style_table={"overflowX":
    "scroll"}</samp>语法通过在表格溢出父容器时添加滚动条来控制表格宽度。'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Content Tables</samp>
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">内容表格</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Table</samp> component
    is a great way to style basic HTML tables with a Bootstrap theme. HTML tables
    are convenient when you have just a few items to display, and they can contain
    other Dash components such as <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button</samp> as content.
    It’s not possible to do that today with a Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Table</samp>组件是用Bootstrap主题样式化基本HTML表格的好方法。当你只需要显示少量项目时，HTML表格非常方便，并且它们可以包含其他Dash组件，如<samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>或<samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button</samp>作为内容。今天使用Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>是无法做到这一点的。
- en: We use a <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Table</samp> in the
    app for the summary table shown in [Figure 6-12](chapter6.xhtml#fig6-12). This
    allows us to include Dash components and use the FontAwesome icons in the summary
    table.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用中使用<samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Table</samp>来显示[图6-12](chapter6.xhtml#fig6-12)中的汇总表格。这使我们能够在汇总表中包含Dash组件并使用FontAwesome图标。
- en: '![](../images/Figure6-12.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-12: Summary table
    from the Asset Allocation Visualizer app</samp>'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-12：资产配置可视化应用中的汇总表格</samp>
- en: '[Listing 6-6](chapter6.xhtml#List6-6) shows a portion of the code, but the
    big picture is that we create this table with a function.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-6](chapter6.xhtml#List6-6) 显示了部分代码，但大致思路是通过一个函数创建这个表格。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def make_summary_table(dff):</samp>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def make_summary_table(dff):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Create new dataframe with
    info to include in the table</samp>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 创建一个包含表格信息的新 DataFrame</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df_table = pd.DataFrame(…)</samp>
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df_table = pd.DataFrame(…)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dbc.Table.from_dataframe
    (df_table, bordered=True, hover=True)</samp>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dbc.Table.from_dataframe
    (df_table, bordered=True, hover=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-6: An excerpt from
    the summary table code</samp>'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-6：摘要表格代码的摘录</samp>
- en: We’ll use this function in a callback later in the chapter. The function argument
    is a DataFrame created from the user’s input. Then we make another DataFrame that
    contains only the information we want to display in the summary table. We use
    the dash-bootstrap-components helper function <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Table.from_dataframe()</samp>
    to build the HTML table.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章稍后使用这个函数。该函数的参数是根据用户输入创建的 DataFrame。然后，我们创建另一个 DataFrame，只包含我们想要在摘要表中显示的信息。我们使用
    dash-bootstrap-components 的辅助函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Table.from_dataframe()</samp>
    来构建 HTML 表格。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Markdown Text</samp>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Markdown 文本</samp>
- en: '*Markdown* is a markup language for formatting text for web pages, and it is
    one of the most popular ways to add and format text with boldface, italics, headers,
    lists, and more. To learn more about Markdown syntax, check out the tutorial at
    [*https://<wbr>commonmark<wbr>.org<wbr>/help*](https://commonmark.org/help).'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '*Markdown* 是一种用于格式化网页文本的标记语言，是添加和格式化文本（如粗体、斜体、标题、列表等）最流行的方式之一。要了解更多关于 Markdown
    语法的信息，请查看教程 [*https://<wbr>commonmark<wbr>.org<wbr>/help*](https://commonmark.org/help)。'
- en: We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Markdown</samp>
    component to add formatted text to apps. In this app, we use it to add the description
    of asset allocation shown in [Figure 6-13](chapter6.xhtml#fig6-13). Markdown syntax
    uses <samp class="SANS_TheSansMonoCd_W5Regular_11">**</samp> to highlight some
    text and <samp class="SANS_TheSansMonoCd_W5Regular_11">></samp> to format the
    text as a blockquote.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Markdown</samp> 组件将格式化的文本添加到应用程序中。在这个应用程序中，我们用它来添加在
    [图 6-13](chapter6.xhtml#fig6-13) 中显示的资产配置描述。Markdown 语法使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">**</samp>
    来突出显示某些文本，使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">></samp> 来将文本格式化为引用块。
- en: '![](../images/Figure6-13.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-13: Adding text with
    Markdown</samp>'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-13：使用 Markdown 添加文本</samp>
- en: 'Here’s the code for the <samp class="SANS_TheSansMonoCd_W5Regular_11">Markdown</samp>
    component:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Markdown</samp> 组件的代码：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">asset_allocation_text = dcc.Markdown(</samp>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">asset_allocation_text = dcc.Markdown(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   " ""</samp>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   " ""</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">> **Asset allocation** is one
    of the main factors that drive portfolio risk and returns. Play with the app and
    see for yourself!</samp>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">> **资产配置** 是影响投资组合风险和回报的主要因素之一。玩一玩这个应用程序，亲自体验一下吧！</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">> Change the allocation to cash,
    bonds and stocks on the sliders and see how your portfolio performs over time
    in the graph.</samp>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">> 在滑块上更改现金、债券和股票的配置，看看您的投资组合如何随着时间的推移在图表中表现。</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Try entering different time
    periods and dollar amounts too.</samp>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   尝试输入不同的时间段和金额。</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">" ""</samp>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">" ""</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: We need to take one more step to make the blockquote appear the way it does
    in the app. A *blockquote* is typically an extended quote from a different source,
    but it can also be used to repeat or highlight certain content. A blockquote usually
    has an additional margin or padding, or other formatting to make it stand out,
    which is why we chose it for this particular situation.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要进行最后一步，使块引用在应用程序中显示出正确的样式。*blockquote* 通常是来自其他来源的扩展引用，但它也可以用来重复或突出某些内容。块引用通常会有额外的边距、内边距或其他格式，使它更突出，这也是我们在这种特定情况下选择它的原因。
- en: 'The default style for a blockquote in Bootstrap is:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 中块引用的默认样式是：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">blockquote {</samp>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">blockquote {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin: 0 0 1rem;</samp>'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin: 0 0 1rem;</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
- en: 'This gives no margin on the top or the right, and just <samp class="SANS_TheSansMonoCd_W5Regular_11">1rem</samp>
    on the bottom. (A *rem* is the font size of the root element and is often 16 pixels.)
    This doesn’t really make the text stand out, so we add a little more margin and
    some color, like so:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这在顶部和右侧没有设置边距，底部只有 <samp class="SANS_TheSansMonoCd_W5Regular_11">1rem</samp>
    的边距。（*rem* 是根元素的字体大小，通常为 16 像素。）这并没有使文本突出，所以我们增加了一些边距和颜色，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">blockquote {</samp>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">blockquote {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   border-left: 4px var(--bs-primary)
    solid;</samp>'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   border-left: 4px var(--bs-primary)
    solid;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   padding-left: 1rem;</samp>'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   padding-left: 1rem;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-top: 2rem;</samp>'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-top: 2rem;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-bottom: 2rem;</samp>'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-bottom: 2rem;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-left: 0rem;</samp>'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-left: 0rem;</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
- en: 'This adds a left border that is four pixels wide and matches the color to the
    header and footer. It also adds a little more margin and padding. Here’s a CSS
    trick that comes in handy when you use Bootstrap: instead of specifying a color
    using a hex number, like #446e9b, you can use a Bootstrap color name, like this:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">var(--bs-primary)</samp>. This code
    will match the color to the Bootstrap theme’s “primary” color. If you change the
    Bootstrap theme in the app, this blockquote’s left margin color will update automatically
    to the primary color of that theme, to keep everything in the app looking consistent.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '这为左侧添加了一个 4 像素宽的边框，并将颜色与页眉和页脚的颜色匹配。它还增加了一些额外的边距和内边距。以下是一个在使用 Bootstrap 时非常实用的
    CSS 小技巧：与其使用十六进制颜色值（例如 #446e9b），不如使用 Bootstrap 的颜色名称，像这样：<samp class="SANS_TheSansMonoCd_W5Regular_11">var(--bs-primary)</samp>。这段代码会将颜色与
    Bootstrap 主题的“主要”颜色匹配。如果你更改了应用程序中的 Bootstrap 主题，这段引用框的左侧边距颜色会自动更新为该主题的主色，以保持应用程序内的一致性。'
- en: This custom CSS is saved in a file named *mycss.css* in the *assets* folder.
    You can name the file anything you like as long as it has the *.css* extension,
    and Dash will automatically include this custom CSS in the app.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义 CSS 保存在名为 *mycss.css* 的文件中，文件位于 *assets* 文件夹里。你可以随意命名这个文件，只要它具有 *.css*
    扩展名，Dash 会自动将这个自定义 CSS 包含到应用中。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Pie Chart Using Plotly Graph Objects</samp>
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用 Plotly 图形对象的饼图</samp>
- en: This is a very brief introduction to creating figures with Plotly Graph Objects,
    which provides more sophisticated options for creating graphs and charts than
    the simpler Plotly Express. The app’s pie chart, shown in [Figure 6-14](chapter6.xhtml#fig6-14),
    updates the asset allocation in real time as the user moves the slider handles.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简要的介绍，展示了如何使用 Plotly 图形对象创建图形，Plotly 图形对象提供了比简单的 Plotly Express 更复杂的图表创建选项。该应用程序的饼图，如[图
    6-14](chapter6.xhtml#fig6-14)所示，会随着用户移动滑块，实时更新资产配置。
- en: '![](../images/Figure6-14.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-14: Example of a Plotly
    pie chart</samp>'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-14: Plotly 饼图示例</samp>'
- en: Rather than using Plotly Express to make the figures, like we did in previous
    chapters, here we use Plotly Graph Objects. Plotly Express preconfigures many
    of the common parameters so that you can make charts quickly and with less code.
    However, when you want to do more customization, you may prefer to use Plotly
    Graph Objects instead. [Listing 6-7](chapter6.xhtml#List6-7) shows the code for
    creating the pie chart.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在前几章中使用 Plotly Express 制作图形不同，这里我们使用 Plotly Graph Objects。Plotly Express
    预先配置了许多常用参数，方便您快速制作图表，并且代码量较少。然而，当您想进行更多自定义时，可能更倾向于使用 Plotly Graph Objects。[列表
    6-7](chapter6.xhtml#List6-7) 显示了创建饼图的代码。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def make_pie(slider_input, title):</samp>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def make_pie(slider_input, title):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig = go.Figure(</samp>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig = go.Figure(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      data=[</samp>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      data=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         go.Pie(</samp>❶
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         go.Pie(</samp>❶
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">labels=["Cash",
    "Bonds", "Stocks"],</samp>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">labels=["现金",
    "债券", "股票"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">values=slider_input,</samp>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">values=slider_input,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">textinfo="label+</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">percent",</samp>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">textinfo="label+</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">percent",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">textposition="inside",</samp>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">textposition="inside",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">marker={"colors":
    [COLORS["cash"], COLORS["bonds"], COLORS["stocks"]]},</samp> ❷'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">marker={"colors":
    [COLORS["cash"], COLORS["bonds"], COLORS["stocks"]]},</samp> ❷'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">sort=False,</samp> ❸
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">sort=False,</samp> ❸
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">hoverinfo="none",</samp>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">hoverinfo="none",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         )</samp>
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.update_layout(</samp>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.update_layout(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">title_text=title,</samp>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">title_text=title,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">title_x=0.5,</samp>
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">title_x=0.5,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">margin=dict(b=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">25, t=75, l=35, r=25),</samp>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">margin=dict(b=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">25, t=75, l=35, r=25),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">height=325,</samp>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">height=325,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">paper_bgcolor=COLORS["background"],</samp>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">paper_bgcolor=COLORS["background"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return fig</samp>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return fig</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-7: Creating a Plotly
    Graph Objects pie chart</samp>'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">第6-7节：创建Plotly Graph Objects饼图</samp>
- en: To create our pie chart, we start by creating a graph instance with <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">go.Figure</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">Figure</samp> syntax here refers
    to one of the primary classes defined in the <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.graph_objects</samp>
    module (typically imported as <samp class="SANS_TheSansMonoCd_W5Regular_11">go</samp>),
    and represents the entire figure. We use this class because instances of the class
    come bundled with many convenient methods for manipulating their attributes, including
    <samp class="SANS_TheSansMonoCd_W5Regular_11">.update.layout()</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">.add.trace()</samp>. In fact, Plotly Express
    functions use graph objects and return a <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.graph_objects.Figure</samp>
    instance.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的饼图，我们首先使用<samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">go.Figure</samp>来创建一个图形实例。这里的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Figure</samp>语法指的是在<`samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.graph_objects</samp>模块中定义的主要类之一（通常导入为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">go</samp>），表示整个图形。我们使用这个类，因为它的实例内置了许多方便的操作方法，包括<samp
    class="SANS_TheSansMonoCd_W5Regular_11">.update.layout()</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">.add.trace()</samp>。实际上，Plotly
    Express函数使用图形对象，并返回一个<samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.graph_objects.Figure</samp>实例。
- en: The pie chart object in Plotly Graph Objects is <samp class="SANS_TheSansMonoCd_W5Regular_11">go.Pie</samp>
    ❶, and it allows us to easily set custom colors for each segment. Note that here
    we are using the <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS</samp> dictionary
    as a global variable ❷ rather than setting colors for the <samp class="SANS_TheSansMonoCd_W5Regular_11">marker</samp>
    directly. This means that if we decide to change the colors later, we only have
    to update the code in the <samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS</samp>
    dictionary and not the code in this figure. In our app we want the color for each
    asset to stay the same, even if the values change. We do this by setting <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sort=False</samp> ❸. (The default is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp> and will sort the values in
    descending order, so the largest value will always have the same color.)
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Graph Objects中的饼图对象是<samp class="SANS_TheSansMonoCd_W5Regular_11">go.Pie</samp>
    ❶，它使我们可以轻松为每个分段设置自定义颜色。请注意，这里我们使用的是<samp class="SANS_TheSansMonoCd_W5Regular_11">COLORS</samp>字典作为全局变量
    ❷，而不是直接为<samp class="SANS_TheSansMonoCd_W5Regular_11">marker</samp>设置颜色。这意味着如果我们之后决定更改颜色，只需更新<samp
    class="SANS_TheSansMonoCd_W5Regular_11">COLORS</samp>字典中的代码，而不必修改图形中的代码。在我们的应用中，我们希望每个资产的颜色保持不变，即使其值发生变化。我们通过设置<samp
    class="SANS_TheSansMonoCd_W5Regular_11">sort=False</samp> ❸来实现这一点。（默认值是<samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>，会按降序排列值，因此最大值将始终具有相同的颜色。）
- en: As with the table in [Listing 6-6](chapter6.xhtml#List6-6), we create this pie
    chart in a function so that we can update it in a callback. The input arguments
    are the values of the sliders and the title.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 和[第6-6节](chapter6.xhtml#List6-6)中的表格一样，我们在一个函数中创建这个饼图，以便可以在回调中更新它。输入参数是滑块的值和标题。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Line Chart Using Plotly Graph Objects</samp>
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用Plotly Graph Objects的折线图</samp>
- en: We will again use Plotly Graph Objects for our line chart, to allow us to customize
    the colors and markers for each trace—which would be fairly verbose using Plotly
    Express.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用Plotly Graph Objects来创建我们的折线图，这样可以为每个轨迹定制颜色和标记——而使用Plotly Express则会显得非常冗长。
- en: 'Again, we create the line chart in a function and input a DataFrame as the
    argument. This DataFrame is based on user selections: the asset allocation, time
    period, starting amount, and number of years. You will learn how this DataFrame
    is created in a callback later in this chapter. [Figure 6-15](chapter6.xhtml#fig6-15)
    shows the line chart.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们在一个函数中创建折线图，并将一个DataFrame作为参数输入。这个DataFrame是基于用户选择的数据：资产配置、时间段、起始金额和年份数。稍后你将在本章的回调部分学习如何创建这个DataFrame。[图6-15](chapter6.xhtml#fig6-15)展示了折线图。
- en: '![](../images/Figure6-15.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-15.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-15: Example of a Plotly
    line chart</samp>'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-15：Plotly 折线图示例</samp>
- en: '[Listing 6-8](chapter6.xhtml#List6-8) gives the code for the line chart.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-8](chapter6.xhtml#List6-8) 给出了折线图的代码。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def make_line_chart(dff):</samp>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def make_line_chart(dff):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   start = dff.loc[1, "Year"]</samp>
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   start = dff.loc[1, "Year"]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   yrs = dff["Year"].size - 1</samp>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   yrs = dff["Year"].size - 1</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dtick = 1 if yrs <</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">16 else 2 if yrs in range(16, 30) else
    5</samp>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dtick = 1 if yrs <</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">16 else 2 if yrs in range(16, 30) else
    5</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig = go.Figure()</samp> ❶
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig = go.Figure()</samp> ❶
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.add_trace(</samp>
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.add_trace(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">go.Scatter(</samp>
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">go.Scatter(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">x=dff["Year"],</samp>
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">x=dff["Year"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">y=dff["all_cash"],</samp>
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">y=dff["all_cash"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">name="All
    Cash",</samp>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">name="All
    Cash",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">marker_color=COLORS["cash"],</samp>
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">marker_color=COLORS["cash"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.add_trace(</samp>
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.add_trace(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">go.Scatter(</samp>
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">go.Scatter(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">x=dff["Year"],</samp>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">x=dff["Year"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">y=dff["all_bonds"],</samp>
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">y=dff["all_bonds"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">name="All
    Bonds (10yr T.Bonds)",</samp>
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">name="All
    Bonds (10yr T.Bonds)",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">marker_color=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">COLORS["bonds"],</samp>
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">marker_color=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">COLORS["bonds"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # For brevity, the traces for
    "All Stocks", "My Portfolio", and "Inflation" are excluded</samp>
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 为简洁起见，"All Stocks"、"My Portfolio"
    和 "Inflation" 的数据被省略</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.update_layout(</samp>
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig.update_layout(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">title=f"Returns
    for {yrs} years starting {start}",</samp>
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">title=f"Returns
    for {yrs} years starting {start}",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">template="none",</samp>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">template="none",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">showlegend=True,</samp>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">showlegend=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">legend=dict(x=0.01,
    y=0.99),</samp>
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">legend=dict(x=0.01,
    y=0.99),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">height=400,</samp>
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">height=400,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">margin=dict(l=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">40, r=10, t=60, b=55),</samp>
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">margin=dict(l=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">40, r=10, t=60, b=55),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">yaxis=dict(tickprefix="$",
    fixedrange=True),</samp>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">yaxis=dict(tickprefix="$",
    fixedrange=True),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">xaxis=dict(title="Year
    Ended", fixedrange=True, dtick=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">dtick),</samp>
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">xaxis=dict(title="年度结束",
    fixedrange=True, dtick=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">dtick),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return fig</samp>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return fig</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-8: Creating a Plotly
    Graph Objects line chart</samp>'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-8：创建 Plotly Graph Objects
    线图</samp>
- en: By using <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_objects</samp>
    we can easily customize each trace (which in this case is a line). We start by
    creating the figure with <samp class="SANS_TheSansMonoCd_W5Regular_11">fig=go.Figure()</samp>
    ❶, and then add each trace to the chart separately using <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.add_trace()</samp>.
    For this function, the <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp> attributes are the
    data for the x-axis and y-axis of the figure. The <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    data for every trace is <samp class="SANS_TheSansMonoCd_W5Regular_11">Years</samp>
    and comes from the <samp class="SANS_TheSansMonoCd_W5Regular_11">Year</samp> column
    of the DataFrame. The <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp> data
    is contained in corresponding columns in the DataFrame. For example, the data
    for the “All Cash” line is in the DataFrame column <samp class="SANS_TheSansMonoCd_W5Regular_11">dff["all_cash"]</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> attribute will show
    in the legend and on hover for each trace. The <samp class="SANS_TheSansMonoCd_W5Regular_11">marker_color</samp>
    attribute sets the color of each trace. There are many other attributes for customizing
    the trace, and you can see them in the Plotly documentation.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">graph_objects</samp>，我们可以轻松地自定义每个轨迹（在此情况下为线条）。我们从使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">fig=go.Figure()</samp> ❶ 创建图形开始，然后使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.add_trace()</samp> 分别将每个轨迹添加到图表中。对于这个函数，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>
    属性是图形的 x 轴和 y 轴数据。每个轨迹的 <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    数据是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Years</samp>，它来自 DataFrame 的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Year</samp> 列。<samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>
    数据包含在 DataFrame 的相应列中。例如，“All Cash” 线的数据在 DataFrame 列 <samp class="SANS_TheSansMonoCd_W5Regular_11">dff["all_cash"]</samp>
    中。<samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 属性将在图例和悬停时显示。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">marker_color</samp> 属性设置每个轨迹的颜色。还有许多其他用于自定义轨迹的属性，可以在
    Plotly 文档中查看。
- en: 'We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout()</samp>
    method to customize the positioning and configuration of the non-data parts of
    the figure, such as setting the title, height, and margins. The <samp class="SANS_TheSansMonoCd_W5Regular_11">yaxis</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">xaxis</samp> attributes need
    a little more explanation:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout()</samp>
    方法自定义图形中非数据部分的位置和配置，例如设置标题、高度和边距。<samp class="SANS_TheSansMonoCd_W5Regular_11">yaxis</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">xaxis</samp> 属性需要更多解释：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">tickprefix=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>
    adds a dollar sign to the labels on the y-axis.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">tickprefix=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>
    为 y 轴的标签添加美元符号。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fixedrange</samp>=<samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    disables the zoom for both the x-axis and y-axis. This prevents unintended zooming
    on touchscreens; it can be annoying when you’re trying to scroll the page and
    end up zooming in on the figure instead.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fixedrange</samp>=<samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    禁用 x 轴和 y 轴的缩放。这可以防止在触摸屏上不小心缩放；当你试图滚动页面却意外放大图形时，这种行为会让人很烦。
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">dtict</samp>=<samp class="SANS_TheSansMonoCd_W5Regular_11">dict</samp>
    is used to set the step between the labels on the x-axis. You can see how the
    labels change when the user selects different time periods. We calculate it like
    this:'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dtict</samp>=<samp class="SANS_TheSansMonoCd_W5Regular_11">dict</samp>
    用于设置 x 轴标签之间的步长。你可以看到，当用户选择不同的时间段时，标签如何变化。我们这样计算：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dtick = 1 if yrs < 16 else 2 if
    yrs in range(16, 30) else 5</samp>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dtick = 1 if yrs < 16 else 2 if
    yrs in range(16, 30) else 5</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Callbacks</samp>
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 回调</samp>
- en: Now comes the fun part. Callbacks make the app interactive. The callback functions
    are called automatically whenever an input component’s property changes. We’ll
    start with a simple callback that updates the pie chart based on the values of
    the two sliders.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是有趣的部分。回调使得应用程序变得互动。每当输入组件的属性发生变化时，回调函数会自动被调用。我们将从一个简单的回调开始，该回调根据两个滑块的值更新饼图。
- en: Next we will show how to use <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    to get data without triggering a callback.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将展示如何使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 获取数据，而不触发回调。
- en: We’ll then discuss a callback that synchronizes components by using the same
    parameters as both inputs and outputs.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将讨论一个回调，通过使用相同的参数作为输入和输出来同步组件。
- en: Finally, we’ll show a callback with many inputs and outputs, and show how to
    use functions within the callback to make a large callback more manageable.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将展示一个包含多个输入和输出的回调，并展示如何在回调中使用函数，使得大型回调更加易于管理。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Interactive Figures</samp>
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">交互式图形</samp>
- en: 'Let’s start with the callback that updates the pie chart. Here’s the definition:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从更新饼图的回调开始。这里是定义：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("allocation_pie_chart",
    "figure"),</samp>
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("allocation_pie_chart",
    "figure"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("stock_bond", "value"),</samp>
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("stock_bond", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("cash", "value"),</samp>
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("cash", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: 'First we have the <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    of the callback, which updates the pie chart by updating the figure property of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>. You can find this
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> in the <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是回调的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>，它通过更新 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> 的 figure 属性来更新饼图。你可以在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp> 中找到这个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="allocation_pie_chart",
    className="mb-2")</samp>
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="allocation_pie_chart",
    className="mb-2")</samp>
- en: We then define the inputs for the callback, which are the value property of
    the slider with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id "stock_bond"</samp>
    and the value property of the slider with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id
    "cash"</samp>.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义回调的输入，这些输入包括滑块的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id "stock_bond"</samp>
    的值属性和滑块的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id "cash"</samp> 的值属性。
- en: Next we have the callback function, shown in [Listing 6-9](chapter6.xhtml#List6-9).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是回调函数，如[清单 6-9](chapter6.xhtml#List6-9)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_pie(stocks, cash):</samp>
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_pie(stocks, cash):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   bonds = 100 - stocks - cash</samp>
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   bonds = 100 - stocks - cash</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   slider_input = [cash, bonds,
    stocks]</samp>
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   slider_input = [cash, bonds,
    stocks]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if stocks >= 70:</samp>
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if stocks >= 70:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      investment_style = "Aggressive"</samp>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      investment_style = "激进型"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif stocks <= 30:</samp>
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif stocks <= 30:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      investment_style = "Conservative"</samp>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      investment_style = "保守型"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      investment_style = "Moderate"</samp>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      investment_style = "中等风险"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   figure = make_pie(slider_input,
    investment_style + " Asset Allocation")</samp>
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   figure = make_pie(slider_input,
    investment_style + " 资产配置")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return figure</samp>
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return figure</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-9: The update_pie()</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">callback function</samp>'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-9：update_pie()</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">回调函数</samp>
- en: We first calculate the percentage of bonds based on what the user selected for
    cash and stocks on the slider, using the operation <samp class="SANS_TheSansMonoCd_W5Regular_11">bonds</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100
    –</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">stocks – cash</samp>.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先根据用户在滑块上选择的现金和股票比例，计算债券的百分比，使用公式 <samp class="SANS_TheSansMonoCd_W5Regular_11">bonds</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100
    –</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">stocks – cash</samp>。
- en: Next we update the text for the title of the pie chart. Our rule of thumb is
    that portfolios with more than 70 percent allocated to stocks have an “Aggressive”
    investment style, portfolios with less than 30 percent allocated to stocks are
    “Conservative,” and everything else is “Moderate.” This title is updated dynamically
    as the user moves the sliders. We pass this title as an attribute to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">make_pie()</samp> function.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们更新饼图的标题文本。我们的经验法则是，股票占比超过 70% 的投资组合为“激进型”投资风格，股票占比低于 30% 的投资组合为“保守型”，其他则为“中等风险”型。这个标题会随着用户移动滑块而动态更新。我们将这个标题作为属性传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">make_pie()</samp> 函数。
- en: Finally, we create the figure by calling our function <samp class="SANS_TheSansMonoCd_W5Regular_11">make_pie()</samp>,
    defined in [Listing 6-7](chapter6.xhtml#List6-7). By using a function to create
    the figure, we reduce the amount of code contained in the callback and can use
    the function in other callbacks as well. The result, more readable and maintainable
    code.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过调用我们在[清单 6-7](chapter6.xhtml#List6-7)中定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">make_pie()</samp>
    函数来创建图表。通过使用函数来创建图表，我们减少了回调函数中的代码量，并且可以在其他回调中重复使用该函数。结果是，代码更加可读和易于维护。
- en: Now you can go back to the app, see how moving the sliders updates the pie chart,
    and know how this is accomplished.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以回到应用程序，查看移动滑块是如何更新饼图的，并了解这一过程是如何实现的。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callbacks Using State</samp>
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">使用状态的回调函数</samp>
- en: 'The second callback synchronizes the two sliders using one-way synchronization:
    one slider is used to update the value of a different slider. The <samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>
    slider will update the <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp>
    slider, but the <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp>
    slider won’t update the <samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>
    slider. We update the <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp>
    slider component after the user selects the cash allocation on the <samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>
    slider:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个回调通过单向同步将两个滑块同步：一个滑块用来更新另一个滑块的值。<samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>
    滑块会更新 <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp> 滑块，但 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp> 滑块不会更新 <samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>
    滑块。在用户选择了 <samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp> 滑块上的现金分配后，我们更新
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp> 滑块组件：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("stock_bond", "max"),</samp>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("stock_bond", "max"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("stock_bond", "marks"),</samp>
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("stock_bond", "marks"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("stock_bond", "value"),</samp>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("stock_bond", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("cash", "value"),</samp>
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("cash", "value"),</samp>
- en: ❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">State("stock_bond", "value"),</samp>
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: ❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">State("stock_bond", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"> )</samp>
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"> )</samp>
- en: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_stock_slider(cash,
    initial_stock_value):</samp>
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_stock_slider(cash,
    initial_stock_value):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max_slider = 100 - int(cash)</samp>
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max_slider = 100 - int(cash)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   stocks = min(max_slider, initial_stock_value)</samp>
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   stocks = min(max_slider, initial_stock_value)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Formats the slider scale</samp>
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 格式化滑块刻度</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if max_slider > 50:</samp>
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if max_slider > 50:</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      marks_slider = {i: f"{i}%"
    for i in range(0, max_slider +</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">1,
    10)}</samp>'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      marks_slider = {i: f"{i}%"
    for i in range(0, max_slider +</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">1,
    10)}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif max_slider <= 15:</samp>
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif max_slider <= 15:</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      marks_slider = {i: f"{i}%"
    for i in range(0, max_slider + 1, 1)}</samp>'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      marks_slider = {i: f"{i}%"
    for i in range(0, max_slider + 1, 1)}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      marks_slider = {i: f"{i}%"
    for i in range(0, max_slider + 1, 5)}</samp>'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      marks_slider = {i: f"{i}%"
    for i in range(0, max_slider + 1, 5)}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return max_slider, marks_slider,
    stocks</samp>
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return max_slider, marks_slider,
    stocks</samp>
- en: We’re using <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> ❶ in
    the function definition because we need to know the current input value on the
    slider in order to calculate the new output value. <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    does not trigger a callback; its purpose is to provide the current value (the
    state) of the property at the time the callback is triggered.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在函数定义中使用了<samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> ❶，因为我们需要知道当前滑块的输入值，以便计算新的输出值。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 不会触发回调；它的作用是提供回调触发时该属性的当前值（即状态）。
- en: At ❷ we begin the callback function. When the user selects the cash allocation,
    we alter the amount that can be allocated to either stocks or bonds. For example,
    if the user changes cash to 20 percent, stocks can be a maximum of 80 percent,
    so we need to update the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp>
    slider from wherever it’s currently at to the new max of 80 percent.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在❷处我们开始回调函数。当用户选择现金分配时，我们会调整可以分配给股票或债券的金额。例如，如果用户将现金更改为20％，股票的最大比例为80％，因此我们需要将<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp>滑块的值从当前值更新为新的最大值80％。
- en: We also update the scale on the slider by updating the marks. Notice how the
    stock allocation percentage slider scale goes up by tens in the top half of [Figure
    6-16](chapter6.xhtml#fig6-16) and by single digits in the bottom half.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过更新标记来更新滑块上的刻度。请注意，股票分配百分比滑块的刻度在[图6-16](chapter6.xhtml#fig6-16)的上半部分按十进制递增，而在下半部分按单个数字递增。
- en: '![](../images/Figure6-16.png)'
  id: totrans-442
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure6-16.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-16: The cash and stock
    allocation sliders before (top) and after (bottom) updating the scale</samp>'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-16：更新前（上）和更新后（下）的现金和股票分配滑块</samp>
- en: 'We calculate the slider marks based on the maximum value of the slider. For
    example, in the bottom set of sliders, the cash allocation is 95 percent, so the
    maximum for the stock allocation is 5 percent. This means the <samp class="SANS_TheSansMonoCd_W5Regular_11">max_slider</samp>
    value is <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp> in the function
    that creates the slider marks:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据滑块的最大值计算滑块的标记。例如，在底部的一组滑块中，现金分配为95％，因此股票分配的最大值为5％。这意味着<samp class="SANS_TheSansMonoCd_W5Regular_11">max_slider</samp>的值在创建滑块标记的函数中为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">5</samp>：
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">marks_slider = {i: f"{i}%" for
    i in range(0, max_slider + 1)}</samp>'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">marks_slider = {i: f"{i}%" for
    i in range(0, max_slider + 1)}</samp>'
- en: 'which is a more compact way of writing it than this:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 这比以下写法更简洁：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">marks_slider={</samp>
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">marks_slider={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      0: ''0%'',</samp>'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      0: ''0%'',</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      1: ''1%'',</samp>'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      1: ''1%'',</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      2: ''2%'',</samp>'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      2: ''2%'',</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      3: ''3%'',</samp>'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      3: ''3%'',</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      4: ''4%'',</samp>'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      4: ''4%'',</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      5: ''5%''</samp>'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      5: ''5%''</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
- en: Now you can go back to the app and see how moving the <samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>
    slider updates the <samp class="SANS_TheSansMonoCd_W5Regular_11">"max"</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"marks"</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">"value"</samp>
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp> slider.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以返回应用程序，查看如何移动<samp class="SANS_TheSansMonoCd_W5Regular_11">"cash"</samp>滑块更新<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"max"</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">"marks"</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"value"</samp>，同时更新<samp class="SANS_TheSansMonoCd_W5Regular_11">"stock_bond"</samp>滑块。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Circular Callbacks
    and Synchronizing Components</samp>
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">循环回调与同步组件</samp>
- en: Dash also allows two-way synchronization of components. For example, if you
    would like a user to be able to set a certain value *either* by entering a number
    into an input box *or* by moving a slider handle, it’s necessary to have these
    values match. In this case, the slider updates the input box and the input box
    updates the slider. This is an example of a *circular callback*.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: Dash还允许组件的双向同步。例如，如果你希望用户能够通过输入框输入一个数字*或者*通过移动滑块来设置某个值，就需要确保这两个值匹配。在这种情况下，滑块更新输入框，输入框也会更新滑块。这就是一个*循环回调*的例子。
- en: We use circular callbacks in our app to synchronize some components in the control
    panel. Recall that the user can enter a starting year and number of years into
    input boxes to calculate investment returns, but can also select a certain interesting
    time period, like the Great Depression, from a list. This callback keeps these
    three inputs synchronized. When you select the Great Depression from the list,
    it changes the start year in the input box to 1929 and the planning time to 20
    years to highlight how long it took for stocks to recover. If the user then enters
    2010 into the input box, it’s no longer the Great Depression period, so that radio
    button is deselected.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序中使用循环回调来同步控制面板中的某些组件。回想一下，用户可以在输入框中输入起始年份和年数来计算投资回报，但也可以从列表中选择某个有趣的时间段，如大萧条。这个回调函数可以保持这三个输入同步。当你从列表中选择大萧条时，它会将输入框中的起始年份更改为1929年，并将计划时长更改为20年，以突出显示股票恢复所需的时间。如果用户随后在输入框中输入2010年，这就不再是大萧条时期，因此该单选按钮会被取消选中。
- en: 'Now let’s take a closer look at this callback:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更详细地查看这个回调函数：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("planning_time", "value"),</samp>
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("planning_time", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("start_yr", "value"),</samp>
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("start_yr", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("time_period", "value"),</samp>
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("time_period", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("planning_time", "value"),</samp>
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("planning_time", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("start_yr", "value"),</samp>
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("start_yr", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("time_period", "value"),</samp>
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("time_period", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: Notice that under the <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback</samp>
    decorator function, the three outputs are exactly the same as the three inputs.
    This makes it possible to synchronize the values of these three components. [Listing
    6-10](chapter6.xhtml#List6-10) shows the callback function.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback</samp> 装饰器函数下，三个输出与三个输入完全相同。这使得同步这三个组件的值成为可能。[清单6-10](chapter6.xhtml#List6-10)展示了回调函数。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_time_period(planning_time,
    start_yr, period_number):</samp>
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_time_period(planning_time,
    start_yr, period_number):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   " ""syncs inputs and selected
    time periods" ""</samp>
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   " ""同步输入和选择的时间段" ""</samp>
- en: ❶<samp class="SANS_TheSansMonoCd_W5Regular_11"> ctx = callback_context</samp>
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: ❶<samp class="SANS_TheSansMonoCd_W5Regular_11"> ctx = callback_context</samp>
- en: ❷<samp class="SANS_TheSansMonoCd_W5Regular_11"> input_id = ctx.triggered[0]["prop_id"].split(".")[0]</samp>
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: ❷<samp class="SANS_TheSansMonoCd_W5Regular_11"> input_id = ctx.triggered[0]["prop_id"].split(".")[0]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if input_id ==</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"time_period":</samp>
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if input_id ==</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"time_period":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      planning_time = time_period_data[period_number]["planning_time"]</samp>
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      planning_time = time_period_data[period_number]["planning_time"]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start_yr = time_period_data[period_number]["start_yr"]</samp>
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start_yr = time_period_data[period_number]["start_yr"]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if input_id in ["planning_time",
    "start_yr"]:</samp>
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if input_id in ["planning_time",
    "start_yr"]:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      period_number = None</samp>
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      period_number = None</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return planning_time, start_yr,
    period_number</samp>
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return planning_time, start_yr,
    period_number</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-10: The callback
    function for synchronization</samp>'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单6-10：用于同步的回调函数</samp>
- en: 'To update the output properly, the callback must know which of the three inputs
    triggered the callback, which we can find out using another advanced callback
    feature: <samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>
    ❶. This is a global variable that’s only available inside a Dash callback. One
    of the attributes of <samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>
    is called <samp class="SANS_TheSansMonoCd_W5Regular_11">triggered</samp> and is
    a list of changed properties. We parse this list to find the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    of the triggering input ❷.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确更新输出，回调必须知道是哪个输入触发了回调，我们可以使用另一个高级回调功能来查找：<samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>
    ❶。这是一个只在 Dash 回调内可用的全局变量。<samp class="SANS_TheSansMonoCd_W5Regular_11">callback_context</samp>
    的一个属性叫做 <samp class="SANS_TheSansMonoCd_W5Regular_11">triggered</samp>，它是一个已更改属性的列表。我们解析这个列表以查找触发输入的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> ❷。
- en: Next we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">input_id</samp>
    to update different things depending on which input triggered the callback. If
    it’s triggered by the user selecting a time period, we update the input boxes
    for the year and planning time. If it’s triggered by the user entering something
    in the input boxes, we deselect the time period radio button. This keeps the UI
    synchronized.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">input_id</samp> 来更新不同的内容，具体取决于哪个输入触发了回调。如果是用户选择了时间周期触发的，我们会更新年和规划时间的输入框。如果是用户在输入框中输入内容触发的，我们会取消选择时间周期单选按钮。这保持了UI的同步。
- en: Note that in order to have synced components like this, it’s necessary to have
    the inputs and outputs in the same callback, which we’ll cover next.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了实现像这样的同步组件，必须将输入和输出放在同一个回调中，接下来我们将讨论这一点。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callbacks with Multiple
    Inputs and Multiple Outputs</samp>
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">具有多个输入和多个输出的回调</samp>
- en: One of the current limitations of Dash is that it does not allow for multiple
    callbacks to update the same output. Currently the only available solution is
    to include all the inputs that update an output in the same callback. The downside
    to this approach is that the callbacks can become huge and complex, which can
    make them difficult to understand, maintain, and debug. The strategy to deal with
    this is to make separate functions for each process in the callback. You can see
    an example of this in the callback in [Listing 6-11](chapter6.xhtml#List6-11).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 当前的一个限制是，它不允许多个回调更新相同的输出。当前唯一可行的解决方案是将所有更新输出的输入包含在同一个回调中。这样做的缺点是回调可能变得庞大而复杂，这可能使得它们难以理解、维护和调试。应对这一问题的策略是为回调中的每个过程创建独立的函数。你可以在
    [列表 6-11](chapter6.xhtml#List6-11) 的回调中看到这一做法的示例。
- en: This callback is the workhorse of the app. Anytime any input changes in the
    sliders or input boxes, this callback is triggered to update the total returns
    table, line chart, summary table, ending amount, and rate of return. Wow. If we
    included the code for all that in this callback it would be hundreds of lines
    long. Instead, it’s 15 lines (not including comments and whitespace). We can make
    it so concise because we create and call functions that handle the specific changes
    required. [Listing 6-11](chapter6.xhtml#List6-11) shows the full callback.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 这个回调是应用程序的核心。每当滑块或输入框中的任何输入发生变化时，都会触发这个回调，更新总回报表格、折线图、摘要表格、期末金额和回报率。哇。如果我们将所有这些代码都包含在这个回调中，它将有数百行长。而现在，它只有15行（不包括注释和空白）。我们之所以能做到这么简洁，是因为我们创建并调用了处理特定变化的函数。[列表
    6-11](chapter6.xhtml#List6-11) 显示了完整的回调。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("total_returns", "data"),</samp>
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("total_returns", "data"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("returns_chart", "figure"),</samp>
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("returns_chart", "figure"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("summary_table", "children"),</samp>
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("summary_table", "children"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("ending_amount", "value"),</samp>
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("ending_amount", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("cagr", "value"),</samp>
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("cagr", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("stock_bond", "value"),</samp>
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("stock_bond", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("cash", "value"),</samp>
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("cash", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("starting_amount", "value"),</samp>
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("starting_amount", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("planning_time", "value"),</samp>
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("planning_time", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("start_yr", "value"),</samp>
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("start_yr", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_totals(stocks, cash,
    start_bal, planning_time, start_yr):</samp>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_totals(stocks, cash,
    start_bal, planning_time, start_yr):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Set defaults for invalid
    inputs</samp>
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 设置无效输入的默认值</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   start_bal = 10 if start_bal
    is None else start_bal</samp>
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   start_bal = 10 if start_bal
    is None else start_bal</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   planning_time = 1 if planning_time
    is None else planning_time</samp>
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   planning_time = 1 if planning_time
    is None else planning_time</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   start_yr = MIN_YR if start_yr
    is None else int(start_yr)</samp>
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   start_yr = MIN_YR if start_yr
    is None else int(start_yr)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Calculate valid planning
    time start yr</samp>
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 计算有效的计划时间起始年份</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max_time = MAX_YR + 1 - start_yr</samp>
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max_time = MAX_YR + 1 - start_yr</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   planning_time = min(max_time,
    planning_time)</samp>
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   planning_time = min(max_time,
    planning_time)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if start_yr +</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">planning_time > MAX_YR:</samp>
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if start_yr +</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">planning_time > MAX_YR:</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">start_yr
    = min(df.iloc[-planning_time, 0], MAX_YR) # 0 is Year column</samp>'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">start_yr
    = min(df.iloc[-planning_time, 0], MAX_YR) # 0 是年份列</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Create investment returns
    dataframe</samp>
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 创建投资回报数据框</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dff = backtest(stocks, cash,
    start_bal, planning_time, start_yr)</samp>
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dff = backtest(stocks, cash,
    start_bal, planning_time, start_yr)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Create data for DataTable</samp>
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 为数据表创建数据</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data = dff.to_dict("records")</samp>
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data = dff.to_dict("records")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig = make_line_chart(dff)</samp>
    ❶
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   fig = make_line_chart(dff)</samp>
    ❶
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   summary_table =</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">make_summary_table(dff)</samp> ❷
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   summary_table =</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">make_summary_table(dff)</samp> ❷
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Format ending balance</samp>
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 格式化期末余额</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ending_amount = f"${dff['Total'].iloc[-1]:0,.0f}"</samp>
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ending_amount = f"${dff['Total'].iloc[-1]:0,.0f}"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Calculate cagr</samp>
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 计算年复合增长率（CAGR）</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ending_cagr = cagr(dff["Total"])</samp>
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ending_cagr = cagr(dff["Total"])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return data, fig, summary_table,
    ending_amount, ending_cagr</samp>
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return data, fig, summary_table,
    ending_amount, ending_cagr</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-11: The full callback
    for updating multiple outputs</samp>'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 6-11：更新多个输出的完整回调函数</samp>
- en: The lines at ❶ and ❷ are examples of where we use two functions that we described
    in the “Line Chart Using Plotly Graph Objects” and “Content Tables” sections earlier
    in the chapter. The first function makes the line chart and the second function
    makes the summary table. We use the two functions <samp class="SANS_TheSansMonoCd_W5Regular_11">backtest()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">cagr()</samp> to calculate the
    investment returns. Those aren’t discussed in detail in this chapter, but you
    can see them in the helper function section in the code on GitHub.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 和 ❷ 这两行是我们在本章前面“使用 Plotly 图形对象绘制折线图”和“内容表格”部分中提到的两个函数的例子。第一个函数绘制折线图，第二个函数生成总结表格。我们使用这两个函数
    <samp class="SANS_TheSansMonoCd_W5Regular_11">backtest()</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">cagr()</samp>
    来计算投资回报。尽管本章未对这两个函数做详细讨论，但你可以在 GitHub 上的代码中的辅助函数部分看到它们。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: 'We’ll wrap up this chapter with a summary of the strategies for structuring
    larger apps:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过总结构建大型应用的策略来结束本章内容：
- en: Use global variables for constant app data such as thematic app colors and startup
    defaults.
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全局变量存储常量应用数据，例如主题应用颜色和启动默认值。
- en: Assign variable names to components to make them easier to call in the layout.
    This also means we use reuse the components in other apps, like building blocks.
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为组件分配变量名，以便在布局中更容易调用。这也意味着我们可以像积木一样在其他应用中重用这些组件。
- en: Organize code to keep similar elements together; for example, have discrete
    sections for visuals such as tables, graphs, and inputs.
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织代码，保持相似的元素在一起；例如，将视觉元素（如表格、图表和输入框）分成独立的部分。
- en: Use functions to bundle logic to make the code easier to read and understand.
    This is especially useful in callbacks with multiple inputs and outputs.
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数将逻辑打包，使代码更容易阅读和理解。这在回调函数中处理多个输入和输出时尤其有用。
- en: When developing large apps or adding new features to an existing app, it can
    be helpful to first create a stand-alone minimal working example of the new feature.
    This smaller version is much easier to debug, since you don’t have to search through
    hundreds or thousands of lines of code to find the source of the error.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发大型应用或为现有应用添加新功能时，首先创建一个独立的最小工作示例会很有帮助。这个小版本更容易调试，因为你不必在成百上千行的代码中搜索错误源。
- en: In the next chapter you will learn even more techniques for structuring apps,
    such as using multiple files and reusable components.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习更多构建应用的技巧，例如使用多个文件和可重用组件。
