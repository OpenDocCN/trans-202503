- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Data Buses
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据总线
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将
- en: Learn about the I²C bus
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解I²C总线
- en: See how to use an EEPROM and a port expander on the I²C bus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何在I²C总线上使用EEPROM和端口扩展器
- en: Learn about the SPI bus
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解SPI总线
- en: Find out how to use a digital rheostat on the SPI bus
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何在SPI总线上使用数字电位器
- en: An Arduino communicates with other devices via a *data bus*, a system of connections
    that allows two or more devices to exchange data in an orderly manner. A data
    bus can provide a connection between the Arduino and various sensors, I/O expansion
    devices, and other components.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino通过*数据总线*与其他设备进行通信，数据总线是一种连接系统，允许两个或多个设备按顺序交换数据。数据总线可以为Arduino和各种传感器、I/O扩展设备以及其他组件之间提供连接。
- en: The two major buses of most importance to the Arduino are the *Serial Peripheral
    Interface (SPI)* bus and the *Inter-Integrated Circuit (I*^(*2*)*C)* bus. Many
    useful sensors and external devices communicate using these buses.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Arduino使用的两个主要总线是*串行外设接口（SPI）*总线和*集成电路互联（I²C）*总线。许多有用的传感器和外部设备都使用这些总线进行通信。
- en: The I²C Bus
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I²C总线
- en: The I²C bus, also known as the *Two-Wire Interface (TWI)* bus, is a simple and
    easy-to-use data bus. Data is transferred between devices and the Arduino through
    two wires, known as *SDA* and *SCL* (the data line and clock line, respectively).
    In the case of the Arduino Uno, the SDA pin is A4 and the SCL pin is A5, as shown
    in [Figure 19-1](#figure19-1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: I²C总线，也称为*双线接口（TWI）*总线，是一种简单易用的数据总线。数据通过两根线在设备和Arduino之间传输，这两根线分别是*SDA*（数据线）和*SCL*（时钟线）。在Arduino
    Uno中，SDA引脚是A4，SCL引脚是A5，如[图19-1](#figure19-1)所示。
- en: Some newer R3 boards also have dedicated I²C pins at the upper-left corner for
    convenient access, as shown in [Figure 19-2](#figure19-2). If you use these two
    pins, you cannot use the A4 and A5 pins for other purposes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较新的R3板还在左上角有专用的I²C引脚，便于访问，如[图19-2](#figure19-2)所示。如果使用这两个引脚，您不能将A4和A5引脚用于其他用途。
- en: '![f19001](image_fi/500587c19/f19001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f19001](image_fi/500587c19/f19001.png)'
- en: 'Figure 19-1: The I ²C bus connectors on the Arduino Uno'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-1：Arduino Uno上的I²C总线连接器
- en: '![f19002](image_fi/500587c19/f19002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![f19002](image_fi/500587c19/f19002.png)'
- en: 'Figure 19-2: Additional dedicated I ²C pins'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-2：额外专用的I²C引脚
- en: As the six pins used for reprogramming the USB interface microcontroller take
    up the space normally used for pin labeling, you can see the labels on the rear
    of the Arduino, as shown in [Figure 19-3](#figure19-3).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用于重新编程USB接口微控制器的六个引脚占用了通常用于引脚标签的位置，您可以在Arduino的背面看到标签，如[图19-3](#figure19-3)所示。
- en: '![f19003](image_fi/500587c19/f19003.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![f19003](image_fi/500587c19/f19003.png)'
- en: 'Figure 19-3: Labels for additional dedicated I ²C pins'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-3：额外专用I²C引脚的标签
- en: On the I²C bus, the Arduino is the *main device*, and each IC out on the bus
    is a *secondary*. Each secondary has its own address, a hexadecimal number that
    allows the Arduino to address and communicate with each device. Each device usually
    has a range of 7-bit I²C bus addresses to choose from, which is detailed in the
    manufacturer’s data sheet. The particular addresses available are determined by
    wiring the IC pins a certain way.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在I²C总线上，Arduino是*主设备*，总线上每个IC都是*从设备*。每个从设备都有自己的地址，这是一个十六进制数字，允许Arduino寻址并与每个设备通信。每个设备通常有一系列7位I²C总线地址可供选择，详细信息可以在制造商的数据表中找到。具体可用的地址由IC引脚的连接方式决定。
- en: 'To use the I²C bus, you’ll need to use the Wire library (included with the
    Arduino IDE):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用I²C总线，您需要使用Wire库（Arduino IDE中包含的库）：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, in `void setup()`, activate the bus with this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`void setup()`中，使用以下代码激活总线：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Data is transmitted along the bus 1 byte at a time. To send a byte of data
    from the Arduino to a device on the bus, three functions are required:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数据通过总线一次传输1字节。为了从Arduino向总线上某个设备发送一个字节的数据，需要三个函数：
- en: 'The first function initiates communication with the following line of code
    (where `address` is the secondary device’s bus address in hexadecimal—for example
    `0x50`):'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个函数通过以下代码行启动通信（其中`address`是次设备的总线地址，采用十六进制格式——例如`0x50`）：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The second function sends 1 byte of data from the Arduino to the device addressed
    by the previous function (where `data` is a variable containing 1 byte of data;
    you can send more than 1 byte, but you’ll need to use one `Wire.write()` call
    for each byte):'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个函数将1字节数据从Arduino发送到前一个函数中所指定的设备（其中`data`是包含1字节数据的变量；您可以发送多个字节，但每个字节都需要使用一次`Wire.write()`调用）：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, once you have finished sending data to a particular device, use this
    to end the transmission:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，一旦完成向特定设备发送数据，使用此命令结束传输：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To request that data from an I²C device be sent to the Arduino, start with
    `Wire.beginTransmission(``address``)`, followed by the this code (where `x` is
    the number of bytes of data to request):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要请求将数据从 I²C 设备发送到 Arduino，首先使用 `Wire.beginTransmission(``address``)`，然后是以下代码（其中
    `x` 是要请求的字节数）：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, use the following function to store each incoming byte into a variable:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下函数将每个传入的字节存储到变量中：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then finalize the transaction with `Wire.endTransmission()`. We’ll put these
    functions to use in the next project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 `Wire.endTransmission()` 完成事务。我们将在下一个项目中使用这些功能。
- en: 'Project #54: Using an External EEPROM'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #54：使用外部 EEPROM'
- en: In Chapter 18, we used the Arduino’s internal EEPROM to prevent the erasure
    of variable data caused by a board reset or power failure. The Arduino’s internal
    EEPROM stores only 1,024 bytes of data. To store more data, you can use external
    EEPROMs, as you’ll see in this project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 18 章中，我们使用了 Arduino 内部的 EEPROM 来防止由于板重置或断电导致的变量数据丢失。Arduino 内部的 EEPROM 只存储
    1,024 字节的数据。为了存储更多的数据，你可以使用外部 EEPROM，如本项目所示。
- en: '![f19004](image_fi/500587c19/f19004.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![f19004](image_fi/500587c19/f19004.png)'
- en: 'Figure 19-4: Microchip Technology’s 24LC512 EEPROM'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-4：Microchip Technology 的 24LC512 EEPROM
- en: For our external EEPROM, we’ll use the Microchip Technology 24LC512 EEPROM,
    which can store 64KB (65,536 bytes) of data ([Figure 19-4](#figure19-4)). It’s
    available from retailers such as Digi-Key (part number 24LC512-I/P-ND) and PMD
    Way (part number 24LC512A).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的外部 EEPROM，我们将使用 Microchip Technology 的 24LC512 EEPROM，它可以存储 64KB（65,536
    字节）的数据（[图 19-4](#figure19-4)）。它可以从像 Digi-Key（零件号 24LC512-I/P-ND）和 PMD Way（零件号
    24LC512A）等零售商处购买。
- en: The Hardware
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建此项目所需的材料：
- en: Arduino and USB cable
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: One Microchip Technology 24LC512 EEPROM
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Microchip Technology 24LC512 EEPROM
- en: One breadboard
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Two 4.7 kΩ resistors
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 4.7 kΩ 电阻
- en: One 100 nF ceramic capacitor
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 100 nF 陶瓷电容
- en: Various connecting wires
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: The Schematic
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: For the circuit, connect one 4.7 kΩ resistor between 5 V and SCL and the other
    between 5 V and SDA, as shown in [Figure 19-5](#figure19-5).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于电路，将一个 4.7 kΩ 电阻连接在 5 V 和 SCL 之间，另一个连接在 5 V 和 SDA 之间，如 [图 19-5](#figure19-5)
    所示。
- en: '![f19005](image_fi/500587c19/f19005.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![f19005](image_fi/500587c19/f19005.png)'
- en: 'Figure 19-5: Schematic for Project 54'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-5：项目 54 的原理图
- en: The bus address for the 24LC512 EEPROM IC is partially determined by the way
    it is wired into the circuit. The last 3 bits of the bus address are determined
    by the status of pins A2, A1, and A0\. When these pins are connected to GND, their
    values are `0`; when they are connected to 5 V, their values are `1`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 24LC512 EEPROM IC 的总线地址部分由它在电路中的连接方式决定。总线地址的最后 3 位由 A2、A1 和 A0 引脚的状态决定。当这些引脚连接到
    GND 时，它们的值为 `0`；当它们连接到 5 V 时，它们的值为 `1`。
- en: The first 4 bits are preset as `1010`. Therefore, in our circuit, since A0,
    A1, and A2 are connected directly to GND, the bus address is represented as `1010000`
    in binary, which is `0x50` in hexadecimal. This means that we can use `0x50` as
    the bus address in the sketch.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 前 4 位预设为 `1010`。因此，在我们的电路中，由于 A0、A1 和 A2 直接连接到 GND，总线地址在二进制中表示为 `1010000`，即十六进制表示为
    `0x50`。这意味着我们可以在草图中使用 `0x50` 作为总线地址。
- en: The Sketch
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: Although our external EEPROM can store up to 64KB of data, our sketch is intended
    to demonstrate just a bit of its use, so we’ll store and retrieve bytes only in
    the EEPROM’s first 20 memory positions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的外部 EEPROM 可以存储最多 64KB 的数据，但我们的草图仅用于演示它的部分功能，因此我们只会在 EEPROM 的前 20 个存储位置存储和读取字节。
- en: 'Enter and upload the following sketch:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s walk through the sketch. At 1, we activate the library and define the
    I²C bus address for the EEPROM as `chip1`. At 2, we start the Serial Monitor and
    then the I²C bus. The two custom functions `writeData()` and `readData()` are
    included to save you time and give you some reusable code for future work with
    this EEPROM IC. We’ll use them to write and read data, respectively, from the
    EEPROM.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来一步步分析草图。在 1 处，我们激活库并定义 EEPROM 的 I²C 总线地址为 `chip1`。在 2 处，我们启动串口监视器，然后启动 I²C
    总线。包括两个自定义函数 `writeData()` 和 `readData()`，它们可以节省你的时间，并为将来使用该 EEPROM IC 提供一些可重复使用的代码。我们将分别使用它们来写入和读取数据。
- en: The function `writeData()` at 3 initiates transmission with the EEPROM, sends
    the address of where to store the byte of data in the EEPROM using the next two
    `Wire.write()` function calls, sends a byte of data to be written, and then ends
    transmission.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`writeData()`函数在第3步启动与EEPROM的传输，使用接下来的两个`Wire.write()`函数调用发送存储数据字节的EEPROM地址，发送要写入的字节数据，然后结束传输。'
- en: The function `readData()` at 4 operates the I²C bus in the same manner as `writeData()`.
    First, however, it sets the address to read from, and then instead of sending
    a byte of data to the EEPROM, it uses `Wire.requestFrom()` to read the data at
    5. Finally, the byte of data sent from the EEPROM is received into the variable
    `result` and becomes the return value for the function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`readData()`函数在第4步以与`writeData()`相同的方式操作I²C总线。然而，它首先设置要读取的地址，然后不是向EEPROM发送数据字节，而是使用`Wire.requestFrom()`来读取第5步中的数据。最后，从EEPROM发送的数据字节被接收到变量`result`中，并成为函数的返回值。'
- en: Running the Sketch
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行草图
- en: In `void loop()`, the sketch loops 20 times and writes a value to the EEPROM
    each time. Then it loops again, retrieving the values and displaying them in the
    Serial Monitor, as shown in [Figure 19-6](#figure19-6).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`void loop()`中，草图循环执行20次，每次写入一个值到EEPROM中。然后它再循环一次，检索这些值并在串口监视器中显示，如[图19-6](#figure19-6)所示。
- en: '![f19006](image_fi/500587c19/f19006.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![f19006](image_fi/500587c19/f19006.png)'
- en: 'Figure 19-6: Results of Project 54'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-6：项目54的结果
- en: 'Project #55: Using a Port Expander IC'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#55：使用端口扩展器IC
- en: A *port expander* is another useful IC that is controlled via I²C. It’s designed
    to offer more digital output pins. In this project, we’ll use the Microchip Technology
    MCP23017 16-bit port expander IC ([Figure 19-7](#figure19-7)), which has 16 digital
    outputs to add to your Arduino. It is available from retailers such as Digi-Key
    (part number MCP23017-E/SP-ND) and PMD Way (part number MCP23017A).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*端口扩展器*是另一个有用的IC，通过I²C进行控制。它旨在提供更多的数字输出引脚。在这个项目中，我们将使用Microchip Technology的MCP23017
    16位端口扩展器IC（[图19-7](#figure19-7)），它有16个数字输出，可以增加到Arduino上。它可以从Digi-Key（零件号MCP23017-E/SP-ND）和PMD
    Way（零件号MCP23017A）等零售商购买。
- en: '![f19007](image_fi/500587c19/f19007.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f19007](image_fi/500587c19/f19007.png)'
- en: 'Figure 19-7: Microchip Technology’s MCP23017 port expander IC'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-7：Microchip Technology的MCP23017端口扩展器IC
- en: In this project, we’ll connect the MCP23017 to an Arduino and demonstrate how
    to control the 16 port expander outputs with the Arduino. Each of the port expander’s
    outputs can be treated like a regular Arduino digital output.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将MCP23017连接到Arduino，并演示如何使用Arduino控制16个端口扩展器输出。每个端口扩展器的输出都可以像常规的Arduino数字输出一样使用。
- en: The Hardware
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这个项目所需的材料：
- en: Arduino and USB cable
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB电缆
- en: One breadboard
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Various connecting wires
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接电线
- en: One Microchip Technology MCP20317 port expander IC
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗Microchip Technology的MCP20317端口扩展器IC
- en: Two 4.7 kΩ resistors
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个4.7 kΩ的电阻
- en: (Optional) An equal number of 560 Ω resistors and LEDs
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）相同数量的560 Ω电阻和LED
- en: The Schematic
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: '[Figure 19-8](#figure19-8) shows the basic schematic for an MCP23017\. As with
    the EEPROM from Project 54, we can set the I²C bus address by using a specific
    wiring order. With the MCP23017, we connected pins 15 through 17 to GND to set
    the address to `0x20`.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[图19-8](#figure19-8)展示了MCP23017的基本电路图。与项目54中的EEPROM一样，我们可以通过特定的接线顺序来设置I²C总线地址。在MCP23017中，我们将引脚15到17连接到GND，将地址设置为`0x20`。'
- en: 'When you’re working with the MCP23017, it helps to have the pinout diagram
    from the IC’s data sheet, as shown in [Figure 19-9](#figure19-9). Note that the
    16 outputs are divided into two banks: GPA7 through GPA0 on the right and GPB0
    through GPB7 on the left. We’ll connect LEDs via 560 Ω resistors from some or
    all of the outputs to demonstrate when the outputs are being activated.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用MCP23017时，查看IC数据手册中的引脚图非常有帮助，如[图19-9](#figure19-9)所示。请注意，16个输出被分成两个部分：右侧为GPA7到GPA0，左侧为GPB0到GPB7。我们将通过560
    Ω的电阻将LED连接到某些或所有的输出端，以演示输出端何时被激活。
- en: '![f19008](image_fi/500587c19/f19008.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![f19008](image_fi/500587c19/f19008.png)'
- en: 'Figure 19-8: Schematic for Project 55'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-8：项目55的电路图
- en: '![f19009](image_fi/500587c19/f19009.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![f19009](image_fi/500587c19/f19009.png)'
- en: 'Figure 19-9: Pinout diagram for MCP23017'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-9：MCP23017的引脚图
- en: The Sketch
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To use the MCP23017, we need the lines listed in `void setup()` from 1 through
    2. To turn on and off the outputs on each bank, we send 1 byte representing each
    bank in order; that is, we send a value for bank GPA0 through GPA7 and then a
    value for GPB0 through GPB7.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 MCP23017，我们需要在 `void setup()` 中列出的第 1 行到第 2 行。为了开启或关闭每个银行的输出，我们按顺序发送 1 字节代表每个银行；也就是说，我们首先发送代表
    GPA0 到 GPA7 的值，然后发送代表 GPB0 到 GPB7 的值。
- en: When setting individual pins, you can think of each bank as a binary number
    (as explained in “A Quick Course in Binary” in Chapter 6 on page 104). Thus, to
    turn on pins 1 through 4, you would send the number `11110000` in binary (`240`
    in decimal), inserted into the `Wire.write()` function shown at 3 for bank GPA0
    through GPA7 or 4 for bank GPB0 through GPB7.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置单个引脚时，你可以将每个银行看作一个二进制数字（如第 6 章第 104 页的“二进制简明教程”所解释）。因此，要打开引脚 1 到 4，你将发送二进制数
    `11110000`（十进制为 `240`），并将其插入到 `Wire.write()` 函数中，分别用于银行 GPA0 到 GPA7 或 GPB0 到 GPB7。
- en: Hundreds of devices use the I²C bus for communication. Now that you know the
    basics of how to use this bus, you can use any of these devices with an Arduino
    board.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 数百个设备使用 I²C 总线进行通信。现在你已经了解了如何使用这条总线的基本知识，你可以使用任何这些设备与 Arduino 板进行连接。
- en: The SPI Bus
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI 总线
- en: 'The SPI bus differs from the I²C bus in that it can be used to send data to
    and receive data from a device simultaneously and at different speeds, depending
    on the microcontroller used. Communication, however, is also main/secondary: the
    Arduino acts as the main and determines which secondary device it will communicate
    with at any one time.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SPI 总线与 I²C 总线的不同之处在于，它可以同时向设备发送和接收数据，并且可以根据所使用的微控制器以不同的速度进行传输。通信模式仍然是主/从：Arduino
    作为主设备，决定与哪个从设备进行通信。
- en: Pin Connections
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引脚连接
- en: 'Each SPI device uses four pins to communicate with a main: *MOSI* (main out,
    secondary in), *MISO* (main in, secondary out), *SCK* (serial clock), and *SS*
    or *CS* (secondary select or chip select). These SPI pins are connected to the
    Arduino as shown in [Figure 19-10](#figure19-10).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 SPI 设备使用四个引脚与主设备进行通信：*MOSI*（主设备输出，次设备输入）、*MISO*（主设备输入，次设备输出）、*SCK*（串行时钟）和
    *SS* 或 *CS*（次设备选择或芯片选择）。这些 SPI 引脚按照 [图 19-10](#figure19-10) 中所示的方式连接到 Arduino。
- en: '![f19010](image_fi/500587c19/f19010.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![f19010](image_fi/500587c19/f19010.png)'
- en: 'Figure 19-10: SPI pins on an Arduino Uno'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-10：Arduino Uno 上的 SPI 引脚
- en: A typical single Arduino-to-SPI device connection is shown in [Figure 19-11](#figure19-11).
    Arduino pins D11 through D13 are reserved for SPI, but the SS pin can use any
    other digital pin (often D10 is used because it’s next to the SPI pins).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 19-11](#figure19-11) 所示，典型的 Arduino 到 SPI 设备连接。Arduino 的 D11 到 D13 引脚保留给
    SPI，但 SS 引脚可以使用任何其他数字引脚（通常使用 D10，因为它靠近 SPI 引脚）。
- en: '![f19011](image_fi/500587c19/f19011.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![f19011](image_fi/500587c19/f19011.png)'
- en: 'Figure 19-11: Typical Arduino-to-SPI device connection'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-11：典型的 Arduino 到 SPI 设备连接
- en: Implementing the SPI
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现 SPI
- en: 'Now let’s examine how to implement the SPI bus in a sketch. Before doing this,
    however, we’ll run through the functions used. First, include the SPI library
    (included with the Arduino IDE software):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在草图中实现 SPI 总线。在此之前，我们先回顾一下所用到的函数。首先，包含 SPI 库（随 Arduino IDE 软件一起提供）：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, you need to choose a pin to be used for SS and set it as a digital output
    in `void setup()`. Because we’re using only one SPI device in our example, we’ll
    use D10 and set it to `HIGH` first, because most SPI devices have an “active low”
    SS pin (this means the pin is connected to GND to be set to `HIGH`, and vice versa):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要选择一个引脚作为 SS 引脚，并在 `void setup()` 中将其设置为数字输出。由于在我们的示例中仅使用一个 SPI 设备，我们将使用
    D10 并首先将其设置为 `HIGH`，因为大多数 SPI 设备的 SS 引脚是“低有效”（这意味着将引脚连接到 GND 就会设置为 `HIGH`，反之亦然）：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the function to activate the SPI bus:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是激活 SPI 总线的函数：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we need to tell the sketch which way to send and receive data. Some
    SPI devices require that their data be sent with the most significant bit first,
    and some want the MSB last. (Again, see “A Quick Course in Binary” in Chapter
    6 for more on MSB.) Therefore, in `void setup()`, we use the following function
    after `SPI.begin()`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要告诉草图如何发送和接收数据。一些 SPI 设备要求先发送最高有效位（MSB），而一些设备要求最低有效位（LSB）先发送。（关于 MSB 的更多内容，请参见第
    6 章的“二进制简明教程”）。因此，在 `void setup()` 中，我们在 `SPI.begin()` 后使用以下函数：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, `order` is either `MSBFIRST` or `MSBLAST`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`order` 是 `MSBFIRST` 或 `MSBLAST`。
- en: Sending Data to an SPI Device
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 SPI 设备发送数据
- en: 'To send data to an SPI device, we first set the SS pin to `LOW`, which tells
    the SPI device that the main (the Arduino) wants to communicate with it. Next,
    we send bytes of data to the device with the following line, as often as necessary—that
    is, you use this once for each byte you are sending:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要向 SPI 设备发送数据，首先我们将 SS 引脚设置为 `LOW`，这告诉 SPI 设备主设备（Arduino）想要与它通信。接下来，我们通过以下代码行向设备发送字节数据，按需重复——即，每发送一个字节时都使用此代码：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After you’ve finished communicating with the device, set the SS pin to `HIGH`
    to tell the device that the Arduino has finished communicating with it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在与设备通信完成后，将 SS 引脚设置为 `HIGH`，告诉设备 Arduino 已经与其通信完成。
- en: Each SPI device requires a separate SS pin. For example, if you had two SPI
    devices, the second SPI device’s SS pin could be D9 and connected to the Arduino
    as shown in [Figure 19-12](#figure19-12).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 SPI 设备需要一个独立的 SS 引脚。例如，如果你有两个 SPI 设备，第二个 SPI 设备的 SS 引脚可以是 D9，并按照 [图 19-12](#figure19-12)
    所示连接到 Arduino。
- en: '![f19012](image_fi/500587c19/f19012.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![f19012](image_fi/500587c19/f19012.png)'
- en: 'Figure 19-12: Two SPI devices connected to one Arduino'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-12：两个 SPI 设备连接到一个 Arduino
- en: 'When communicating with secondary device #2, you would use the D9 (instead
    of the D10) SS pin before and after communication.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '与第二个设备 #2 通信时，你需要使用 D9（而不是 D10）SS 引脚，通信前后均需如此。'
- en: Project 56 demonstrates using the SPI bus with a digital rheostat.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 项目 56 演示了如何使用 SPI 总线与数字电位器进行通信。
- en: 'Project #56: Using a Digital Rheostat'
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #56：使用数字电位器'
- en: 'In simple terms, a *rheostat* device is similar to the potentiometers we examined
    in Chapter 4, except the rheostat has two pins: one for the wiper and one for
    the return current. In this project, you’ll use a digital rheostat to set the
    resistance in the sketch instead of physically turning a potentiometer knob or
    shaft yourself. Rheostats are often the basis of volume controls in audio equipment
    that use buttons rather than dials, such as a car stereo. The tolerance of a rheostat
    is much larger than that of a normal fixed-value resistor—in some cases, around
    20 percent larger.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，*电位器* 设备类似于我们在第 4 章中研究的可调电阻，但电位器有两个引脚：一个用于滑片，一个用于回流电流。在本项目中，你将使用数字电位器在草图中设置电阻，而不是亲自转动电位器旋钮或轴。电位器通常是音频设备中音量控制的基础，这些设备使用按钮而不是旋钮，例如汽车音响。电位器的公差比普通固定电阻的公差要大——在某些情况下，大约大
    20%。
- en: '![f19013](image_fi/500587c19/f19013.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![f19013](image_fi/500587c19/f19013.png)'
- en: 'Figure 19-13: Microchip Technology’s MCP4162 digital rheostat'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-13：Microchip Technology 的 MCP4162 数字电位器
- en: For Project 56, we will use the Microchip Technology MCP4162 shown in [Figure
    19-13](#figure19-13). The MCP4162 is available in various resistance values; this
    example uses the 10 kΩ version. It is available from retailers such as Digi-Key
    (part number MCP4162-103E/P-ND) and element14 (part number 1840698). The resistance
    can be adjusted in 257 steps; each step has a resistance of around 40 Ω. To select
    a particular step, we send 2 bytes of data to a command byte (which is 0) and
    the value byte (which is between 0 and 256). The MCP4162 uses nonvolatile memory,
    so when the power is disconnected and then reconnected, the last value selected
    is still in effect.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于项目 56，我们将使用 [图 19-13](#figure19-13) 中显示的 Microchip Technology MCP4162。MCP4162
    提供多种电阻值；此示例使用 10 kΩ 版本。它可从 Digi-Key（零件号 MCP4162-103E/P-ND）和 element14（零件号 1840698）等零售商处购买。电阻值可以通过
    257 个步骤调整；每个步骤的电阻约为 40 Ω。要选择特定步骤，我们将 2 字节的数据发送到命令字节（值为 0）和数值字节（值介于 0 和 256 之间）。MCP4162
    使用非易失性存储器，因此当断电并重新连接电源后，最后选择的值仍然有效。
- en: We’ll control the brightness of an LED using the rheostat.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用电位器控制 LED 的亮度。
- en: The Hardware
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成此项目所需的内容：
- en: Arduino and USB cable
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 数据线
- en: One breadboard
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: Various connecting wires
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接电线
- en: One Microchip Technology MCP4162 digital rheostat
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 Microchip Technology MCP4162 数字电位器
- en: One 560 Ω resistor
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 560 Ω 电阻
- en: One LED
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 LED
- en: The Schematic
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: '[Figure 19-14](#figure19-14) shows the schematic. The pin numbering on the
    MCP4162 starts at the top left of the package. Pin 1 is indicated by the indented
    dot to the left of the Microchip logo on the IC (see [Figure 19-13](#figure19-13)).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-14](#figure19-14) 显示了电路图。MCP4162 的引脚编号从封装的左上角开始。引脚 1 由位于 IC 上 Microchip
    标志左侧的凹点表示（见 [图 19-13](#figure19-13)）。'
- en: '![f19014](image_fi/500587c19/f19014.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![f19014](image_fi/500587c19/f19014.png)'
- en: 'Figure 19-14: Schematic for Project 56'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-14：项目 56 的电路图
- en: The Sketch
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let’s walk through the code. First, we set up the SPI bus at 1 and 2. At 3,
    we set the byte direction to suit the MPC4162\. To make setting the resistance
    easier, we use the custom function at 4, which accepts the resistance step (0
    through 255) and passes it to the MCP4162\. Finally, the sketch uses two loops
    to move the rheostat through all the stages, from 0 to the maximum at 5 and then
    back to 0 at 6. This last piece should make the LED increase and decrease in brightness,
    fading up and down for as long as the sketch is running.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来一步步解析代码。首先，我们在1和2设置SPI总线。在3处，我们设置字节方向以适配MPC4162。为了简化电阻设置，我们在4处使用自定义函数，该函数接受电阻步长（从0到255）并将其传递给MCP4162。最后，代码使用两个循环将电位器通过所有阶段，从0到最大值在5处，再从最大值回到0在6处。最后这段代码应该使LED的亮度增减，随程序运行时LED的亮度不断变化。
- en: Looking Ahead
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: In this chapter, you learned about and experimented with two important Arduino
    communication methods. Now you’re ready to interface your Arduino with a huge
    variety of sensors, more advanced components, and other items as they become available
    on the market. One of the most popular components today is a real-time clock IC
    that allows your projects to keep and work with time—and that’s the topic of Chapter
    20. So let’s go!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解并实验了两种重要的Arduino通信方法。现在你已经准备好将Arduino与各种传感器、更高级的组件以及其他市面上出现的设备进行连接。其中，今天最流行的组件之一是实时时钟集成电路（IC），它让你的项目能够保持时间并与之交互——这也是第20章的主题。那么，开始吧！
