- en: '7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starfield Light Effect Box by Adam Wolf
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll make a decorative display box with a starfield light
    effect.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0133-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: 'The starfield effect is one of the earliest computer effects demos: stars are
    rendered on a screen and blurred to make it look like you’re flying through them.
    Stars far away move slowly, and those close to you zoom by. Many people know of
    this effect from the Windows 3.1 screensaver, but it’s been around since at least
    the late ’70s. In this project, we’ll create a starfield demo using a 32 × 32
    LED matrix, with a SmartMatrix SD Shield to act as intermediate hardware between
    the microcontroller and the LEDs. This shield microcontroller handles most of
    the complexity involved in driving all those LEDs.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve mounted the matrix in a shadow box with a black diffuser. I call it a
    Bowman Box, after Dave Bowman from *2001: A Space Odyssey*.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**GET THE PARTS**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’ve done my best to make the code and explanation for this project easy to
    adapt to any LED matrix, but you’ll find this project easiest if you use the SmartMatrix
    SD Shield and a SmartMatrix SD Shield–compatible LED matrix.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**Components**'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '*If you change the project to have more of the LEDs on at once, you’ll have
    to either find a switch rated for more current or plug the power supply into the
    board directly.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 32 × 32 RGB LED matrix (Adafruit P/N 1484 or SparkFun P/N 12584; must be compatible
    with the SmartMatrix SD Shield that plugs directly into a Hub75 connector)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5 V 4A+ wall power adapter (Adafruit P/N 1466; must have the standard 2.1 mm
    center-positive connector)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SmartMatrix SD Shield (available from the manufacturer or Adafruit P/N 1902;
    v3 is the latest version as of this writing)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teensy 3.1 or 3.2 (Adafruit P/N 2756; this is a small, inexpensive, and really
    powerful microcontroller board)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MicroUSB cable
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline power switch with 2.1 mm connectors (Adafruit P/N 1125 or SparkFun P/N
    11705)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadow box (8 × 8 inches)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diffuser (a piece of translucent material that can help diffuse the light, filling
    in the gap between LEDs; I used a piece of thin black felt, but you could use
    tissue paper, plastic, or even something smeared on the glass)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Optional) Cardboard (to get everything to fit snugly in the shadow box)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Soldering iron and solder
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagonal cutters
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wire strippers
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small screwdriver
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scissors
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handsaw, drill, or file
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Black marker
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BUILD IT**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, you’ll assemble the SmartMatrix SD Shield according to the manufacturer’s
    instructions and connect it to the LED matrix. You’ll then need to sandwich the
    diffuser between the LED display and the shadow box glass. After checking that
    everything fits nicely into the shadow box, you’ll take the box’s back off again,
    cut a small notch for the power cord, upload the program, and reassemble everything.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '*If you need instructions on soldering, see the appendix.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '**Assemble the SmartMatrix SD Shield.** Go to the manufacturer’s site at *[http://docs.pixelmatix.com/](http://docs.pixelmatix.com/)*
    and navigate to the SmartMatrix Shield section. Find the SmartMatrix SD v3 section,
    and click **Kit Assembly** in the menu on the left. This should take you to your
    shield’s assembly instructions. Read and carefully follow the manufacturer’s instructions—this
    requires a lot of soldering—and then double-check your work.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**组装 SmartMatrix SD Shield。** 访问制造商网站 *[http://docs.pixelmatix.com/](http://docs.pixelmatix.com/)*
    并导航到 SmartMatrix Shield 部分。找到 SmartMatrix SD v3 部分，然后在左侧菜单中点击 **Kit Assembly**。这应该会带你到
    Shield 的组装说明。阅读并仔细遵循制造商的说明——这需要大量的焊接——然后仔细检查你的工作。'
- en: With your shield finished, plug it into the LED panel, in the input connector,
    as shown in [Figure 7-1](ch07.xhtml#ch07fig1).
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你的 Shield 完成后，将其插入 LED 面板的输入连接器中，如 [图 7-1](ch07.xhtml#ch07fig1) 所示。
- en: '![image](../images/f0136-01.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0136-01.jpg)'
- en: '**FIGURE 7-1:** An assembled SmartMatrix SD Shield plugged into an LED display'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 7-1：** 组装好的 SmartMatrix SD Shield 插入 LED 显示屏'
- en: The Smart Matrix SD Shield uses a Teensy 3.1 or 3.2 microcontroller board. We’ll
    program the Teensy in Arduino, which works on Windows, macOS, and Linux.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Smart Matrix SD Shield 使用 Teensy 3.1 或 3.2 微控制器板。我们将在 Arduino 中编程 Teensy，Arduino
    支持 Windows、macOS 和 Linux 系统。
- en: '**Set up the Teensy.** Download the latest version of the Arduino IDE from
    *[https://www.arduino.cc/](https://www.arduino.cc/)*, install Teensyduino from
    *[https://www.pjrc.com/teensy/teensyduino.html](https://www.pjrc.com/teensy/teensyduino.html)*,
    and then install the SmartMatrix3 library from the IDE’s Library Manager. Connect
    the Teensy to your computer with a microUSB cable and connect the display to power.
    Go to **Tools** ▸ **Board** and choose **Teensy 3.2/3.1**.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置 Teensy。** 从 *[https://www.arduino.cc/](https://www.arduino.cc/)* 下载最新版本的
    Arduino IDE，从 *[https://www.pjrc.com/teensy/teensyduino.html](https://www.pjrc.com/teensy/teensyduino.html)*
    安装 Teensyduino，然后通过 IDE 的库管理器安装 SmartMatrix3 库。使用 microUSB 电缆将 Teensy 连接到计算机，并将显示器连接到电源。进入
    **工具** ▸ **板** 并选择 **Teensy 3.2/3.1**。'
- en: '**Test the Teensy.** Load the *FeatureDemo* example by going to **File** ▸
    **Examples** ▸ **SmartMatrix3** ▸ **FeatureDemo**. Upload the sketch to the Teensy,
    and you should see the Teensyduino Uploader appear and send the sketch to the
    Teensy. If you’ve never used a Teensy before, you may notice that it looks different
    from the standard Arduino IDE, but the Teensy part all happens automatically so
    you don’t need to do anything extra.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试 Teensy。** 通过进入 **文件** ▸ **示例** ▸ **SmartMatrix3** ▸ **FeatureDemo** 来加载
    *FeatureDemo* 示例。将代码上传到 Teensy，Teensyduino Uploader 应该会出现并将代码发送到 Teensy。如果你以前从未使用过
    Teensy，可能会发现它看起来不同于标准的 Arduino IDE，但 Teensy 部分会自动完成，因此你无需额外操作。'
- en: If you have everything working, you should see a demo play out on the Teensy
    that goes through all the different features of the SmartMatrix3 library. You’ll
    see different colors, moving shapes, and scrolling text. This indicates that the
    computer, the LED panel, the SmartMatrix SD Shield, and the Teensy are all working.
    Now let’s finish the enclosure.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该会看到一个演示在 Teensy 上播放，展示 SmartMatrix3 库的各种功能。你会看到不同的颜色、移动的形状和滚动的文本。这表明计算机、LED
    面板、SmartMatrix SD Shield 和 Teensy 都在正常工作。现在让我们完成外壳部分。
- en: '**Cut the diffuser.** Take the back off the shadow box and measure the inner
    dimensions. Use scissors to cut your diffuser material, as shown in [Figure 7-2](ch07.xhtml#ch07fig2).
    You can match the inner dimensions of your shadow box exactly, or you can cut
    them slightly bigger so you can glue the edges to the sides of the box.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**切割扩散器。** 拆下影像盒的背面并测量内部尺寸。用剪刀裁剪扩散器材料，如 [图 7-2](ch07.xhtml#ch07fig2) 所示。你可以精确匹配影像盒的内部尺寸，或者稍微切大一些，这样你可以将边缘粘贴到盒子的侧面。'
- en: '![image](../images/f0137-01.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0137-01.jpg)'
- en: '**FIGURE 7-2:** Cutting the diffuser'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 7-2：** 切割扩散器'
- en: If you’re a little off, it’s probably okay! The rest of the inside of the box
    will be black, so any gaps won’t be noticeable.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果尺寸稍微偏差一点，可能也没关系！盒子内部的其余部分是黑色的，所以任何缝隙都不会太显眼。
- en: '**Test-fit the display into the shadow box.** Clean any smudges off the glass
    of the shadow box and then, with the glass side of the box facing down on a table,
    place the diffuser in the box and against the glass. Then place the display, LEDs
    down, on the diffuser. Screw the little magnetic screws into the corners of the
    LED panel, if you have them. Check to make sure that the back of the shadow box
    still fits on, as shown in [Figure 7-3](ch07.xhtml#ch07fig3).'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the fit is too tight, try removing any black velvety material on the back
    of the shadow box or taking the magnetic screws off the LED panel frame. If the
    fit is too loose, you can use some cardboard as a shim to keep everything in place.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f0138-01.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 7-3:** Testing how everything fits in the shadow box'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Cut a notch in the back of the shadow box.** Remove the back of the shadow
    box again. Plug the 2.1 mm inline switch power plug into the DC power connector
    of the SmartMatrix SD Shield. The cable should just reach outside of the box.
    Cut a small notch, about 3/4 inch deep by 1/4 inch wide, in the back of the shadow
    box to feed the power cord through, as shown in [Figure 7-4](ch07.xhtml#ch07fig4).
    I suggest you cut the notch in the middle of an edge or at a corner. You can make
    this notch with many different tools, like a handsaw, a drill, a file, or even
    needle-nose pliers.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0138-02.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 7-4:** The back of the shadow box with the notch cut out for the power
    cord'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your shadow box has a velvety backing, you’ll need to cut a slit in that,
    too, and be sure it aligns with the notch you cut in the back. Finally, touch
    up any scuff marks with a black marker.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Assemble it.** Now reattach the back of your shadow box. Everything should
    be nice and snug. If not, use some cardboard as shims and spacers. Any minor cosmetic
    issues will be easy to ignore once you get the stars zooming past. On that note,
    take the back off again so we can access the Teensy for programming!'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’d like to go directly to the next step, skip ahead to “[Code It](ch07.xhtml#lev97)”
    on [page 140](ch07.xhtml#page_140). If you’re curious about how the starfield
    effect works, read on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**GENERATING THE STARFIELD EFFECT**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: We need to create the effect of zooming through a bunch of stars. The stars
    that are close should be brighter and move faster than the stars that are far
    away. All of the stars should move radially out from the center.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: To make the starfield effect in software, we’ll create a list of stars and randomly
    distribute them as points in 3D space with a coordinate system. We’ll represent
    each point as three coordinate values, like (*x*, *y*, *z*), where *x* represents
    the horizontal axis, *y* represents the vertical axis, and *z* represents depth.
    You can imagine *z* as the distance from you—the higher the *z* value, the farther
    away the point will appear. Our *eye*, the default point in the 3D space, is at
    the origin, or (0, 0, 0).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Once we’ve completed our list of randomly placed stars, we have to overcome
    the problem of drawing a point in 3D space on a 2D display. Imagine drawing a
    region of space as a four-sided pyramid with the top and bottom cut off. This
    is called a *view frustum* and is illustrated here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了随机放置的星星列表，我们就得克服在2D显示器上绘制3D空间中的点的问题。想象一下把空间区域画成一个四面体，上面和下面被切掉了。这就是所谓的*视锥体*，如图所示。
- en: '![image](../images/f0139-01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0139-01.jpg)'
- en: The yellow square represents our display, with one LED per unit in *x* and *y*.
    This means that a point at (0, 0, 0) is in the middle of the display, a point
    at (–8, –8, 0) is in the middle of the lower-left corner, and a point at (8, 8,
    0) is in the middle of the top-right corner of the LED panel.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 黄色的方块代表我们的显示屏，每个单位在*x*和*y*上都有一个LED。这意味着坐标为(0, 0, 0)的点位于显示器的中间，坐标为(–8, –8, 0)的点位于左下角的中间，坐标为(8,
    8, 0)的点位于LED面板的右上角中间。
- en: We also need to account for the *z* distance. A point at (8, 8, 100) shouldn’t
    be drawn in the middle of the top-right corner of our LED panel. It should be
    closer to the middle of the display than the point (8, 8, 0), because it is farther
    away from the camera. In other words, the x- and y-coordinates need to move closer
    to the eye as the z-coordinate gets bigger.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要考虑*z*距离。坐标为(8, 8, 100)的点不应该绘制在LED面板右上角的中间。它应该比坐标(8, 8, 0)更靠近显示器的中间，因为它离相机更远。换句话说，随着z坐标变大，x和y坐标需要向眼睛移动。
- en: To translate from 3D coordinates to our 2D coordinates, we divide each of the
    x- and y-coordinates by *z*. Try thinking about the 2D coordinates as percentages
    of the total frame size at that particular depth (or *z*). Dividing the x- and
    y-coordinates by *z* gets us a 45-degree angle on our frustum edges, so that for
    every step in *z*, we can see an additional step in *x* and *y*. We can experiment
    with different factors, like dividing by double *z*, or dividing by half of *z*,
    and that changes the slope of the edges of our view frustum.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将3D坐标转换为2D坐标，我们将每个x和y坐标除以*z*。可以把2D坐标看作是在特定深度（或*z*）下总框架大小的百分比。将x和y坐标除以*z*，我们得到的是视锥体边缘的45度角，这样对于每一步的*z*，我们就可以看到在*x*和*y*上的额外一步。我们可以尝试不同的因子，比如将其除以2倍的*z*，或者将其除以*z*的一半，这会改变视锥体边缘的坡度。
- en: 'In my Bowman Box, stars at any distance are drawn by a single LED, but the
    brightness of the LED is relative to the distance: the stars that are the farthest
    away from us are at the minimum brightness, and the stars that are at the front
    of the frustum in the very center are at the maximum brightness. To make it simpler
    in the program, we scale based only on the z-value.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的Bowman Box中，任何距离的星星都是由一个LED绘制的，但LED的亮度与距离成正比：距离我们最远的星星亮度最小，位于圆锥体最前面中心的星星亮度最大。为了简化程序，我们仅根据z值进行缩放。
- en: Phew! The programming is much shorter than the explanation! Now that we know
    how to draw the stars on our display, we need to move! We want to fly through
    the stars, but instead of moving the eye forward in *z*, we’re going to move all
    the stars toward the eye in *z*. It makes the programming easier. Once a star
    advances past our eye, we certainly can’t see it anymore, so we’ll recreate it
    back at the maximum distance away from us.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！编程比解释短得多！现在我们知道如何在显示器上绘制星星，我们需要移动！我们想要穿越星星，但不是让眼睛在*z*轴上向前移动，而是让所有星星在*z*轴上朝着眼睛移动。这样做让编程更简单。一旦星星超过了我们的视线，我们当然看不见它了，所以我们会在距离我们最远的地方重新创建它。
- en: '**CODE IT**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程它**'
- en: If you want to skip past all the explanation of the code and how it works, you
    can simply download the code at *[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*
    and upload it to your project. The full code is shown in [Listing 7-1](ch07.xhtml#ch07list1).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跳过所有关于代码和它如何工作的解释，你可以直接下载代码到*[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*并将其上传到你的项目中。完整的代码可以在[清单
    7-1](ch07.xhtml#ch07list1)中查看。
- en: '**LISTING 7-1:** The starfield effect code'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 7-1：** 星域效果代码'
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you’re reading this sketch, there are a few things to notice. Arduino sketches
    run the `setup()` function first, and then repeatedly run the `loop()` function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读这个草图时，有几件事需要注意。Arduino草图首先运行`setup()`函数，然后反复运行`loop()`函数。
- en: The blocks of code at ➊ and ➏ are taken directly from the SmartMatrix examples
    that come with the IDE, and are used to set up the SmartMatrix library.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ➊和➏处的代码块直接来自与IDE一起提供的SmartMatrix示例，用于设置SmartMatrix库。
- en: We’ve used a *struct*, which is a grouping of variables to store some of the
    information in our sketch. Structs can make it easier to see the intent of your
    code by grouping related information together. We make a bunch of star structs
    at the beginning of the program. When a star has advanced behind our eye or outside
    our viewing range, we randomize that star’s coordinates and then set it far away
    from us so we can encounter it again ➋. This lets us reuse the structs rather
    than needing an infinite quantity.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: We want the origin of the stars to be in the middle of the display, but the
    SmartMatrix library sets the origin at the bottom-left corner, so next we adjust
    for that when we display the stars ➌.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: We also need a random-number generator to place the stars in random positions.
    The Arduino doesn’t have a real random-number generator, so we initialize the
    system by reading a disconnected pin at ➍ to get different pseudorandom numbers
    each time. Reading a disconnected pin is not a very good “random seed,” so if
    you run it multiple times you may see it start up the same way. There are ways
    to make this more random, but we’ve kept it simple for clarity.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Because normally new stars show up only at the back, when we first initialize
    the position of the stars, we scatter them throughout the z-axis ➎.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you’ve connected the power supply to the power switch, and then turn
    the switch on. Upload the code to your Teensy, make sure everything uploaded properly,
    and reattach the back on your shadow box.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Congratulations! You should now have a beautiful LED matrix mounted in a nice
    box. You can improve and expand this project in many ways. But remember that in
    our project, the majority of the LEDs are off at any time. If you change the project
    and turn a lot more LEDs on at the same time, you’ll need to be careful with power.
    The inline switch is not rated to carry enough current to light the whole screen
    on full brightness, but you can remove it and plug the power supply into the board
    directly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: As a further upgrade, I’ve considered adding an accelerometer so I can steer
    by moving the frame, changing the angle and the speed as I fly through the stars.
    I might even add colored stars—not bright rainbow ones, but slightly red and slightly
    blue stars, to represent planets and nebulas. The sky’s the limit! Try a few things
    out and see which effect suits you best.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
