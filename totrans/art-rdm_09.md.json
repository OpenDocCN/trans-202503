["```\nfrom sklearn.linear_model import Lasso\nfrom scipy.fftpack import dct, idct\n```", "```\n> python3 cs_signal.py 0.2 minstd 65536\n```", "```\nrate = 4096\ndur = 1.0\nf0,f1,f2 = 261.63, 329.63, 392.0\nsamples  = np.sin(2*np.pi*np.arange(rate*dur)*f0/rate)\nsamples += np.sin(2*np.pi*np.arange(rate*dur)*f1/rate)\nsamples += np.sin(2*np.pi*np.arange(rate*dur)*f2/rate)\n```", "```\nnsamp = int(frac*len(samples))\nu = np.arange(0, len(samples), int(len(samples)/nsamp))\nbu = samples[u]\nr = np.argsort(rng.random(len(samples)))[:nsamp]\nbr = samples[r]\n```", "```\nD = dct(np.eye(len(samples)))\nU = D[u,:]\nR = D[r,:]\n```", "```\nlu = Lasso(alpha=0.01, max_iter=6000)\nlu.fit(U, bu)\nsu = lu.coef_\nlr = Lasso(alpha=0.01, max_iter=6000)\nlr.fit(R, br)\nsr = lr.coef_\n```", "```\nru = idct(su.reshape((len(samples),1)), axis=0)\nrr = idct(sr.reshape((len(samples),1)), axis=0)\n```", "```\nWriteOutputWav(samples, \"original.wav\")\nWriteOutputWav(rr, \"recon_random.wav\")\nWriteOutputWav(ru, \"recon_uniform.wav\")\n```", "```\n> python3 cs_image.py\n\ncs_image <image> <output> <fraction> <alpha> [ <kind> | <kind> <seed> ]\n\n  <image>    - source image (RGB or grayscale)\n  <output>   - output directory (overwrittten)\n  <fraction> - fraction of image to sample\n  <alpha>    - L1 lambda coefficient\n  <kind>     - randomness source\n  <seed>     - seed value\n```", "```\n> pip3 install scikit-image\n```", "```\nsimg = np.array(Image.open(sname).convert(\"RGB\"))\ngrayscale = False\nif (np.array_equal(simg[:,:,0],simg[:,:,1])):\n    grayscale = True\n```", "```\nrow, col, _ = simg.shape\nmask = np.zeros(row*col, dtype=\"uint8\")\nM = int(fraction*row*col)\nk = np.argsort(rng.random(row*col))[:M]\nmask[k] = 1\n```", "```\ndef CS(simg, mask, fraction, alpha, rng):\n    row, col = simg.shape\n    f = simg.ravel()\n    N = len(f)\n    k = np.where(mask != 0)[0]\n    y = f[k]\n    D = dct(np.eye(N))\n    A = D[k, :]\n    seed = int(10000000*rng.random())\n    lasso = Lasso(alpha=alpha, max_iter=6000, tol=1e-4, random_state=seed)\n    lasso.fit(A, y.reshape((len(k),)))\n    r = idct(lasso.coef_.reshape((N, 1)), axis=0) r = (r - r.min()) / (r.max() - r.min())\n    oimg = (255*r).astype(\"uint8\").reshape((row,col))\n    return oimg\n```", "```\n> python3 cs_image.py images/peppers.png peppers 0.1 0.001 mt19937 66\n```"]