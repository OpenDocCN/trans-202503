["```\n7\n3\n5\n1\n9\n7\n2\n3\n```", "```\nint solve_ij(int cost[], int n, int i, int j,\n             int memo[SIZE + 1][SIZE + 1])\n```", "```\n#define SIZE 1000\n\nint min(int v1, int v2) {\n  if (v1 < v2)\n    return v1;\n  else\n    return v2;\n}\n\nint solve_ij(int cost[], int n, int i, int j, int memo[SIZE + 1][SIZE + 1]) {\n  int first, second;\n❶ if (memo[i][j] != -2)\n     return memo[i][j];\n➋ if (i ==  2 && j == 1) {\n     memo[i][j] = 0;\n     return memo[i][j];\n  }\n➌ if (i - j >= 1 && j >= 2)\n     first = solve_ij(cost, n, i - j, j - 1, memo);\n   else\n     first = -1;\n➍ if (i + j <= n)\n     second = solve_ij(cost, n, i + j, j, memo);\n   else\n     second = -1;\n➎ if (first == -1 && second == -1) {\n     memo[i][j] = -1;\n     return memo[i][j];\n   } else if (second == -1) {\n     memo[i][j] = first + cost[i];\n     return memo[i][j];\n   } else if (first == -1) {\n     memo[i][j] = second + cost[i];\n     return memo[i][j];\n   } else {\n     memo[i][j] = min(first, second) + cost[i];\n     return memo[i][j];\n   }\n}\n```", "```\nint solve(int cost[], int n) {\n  int i, j, best, result;\n❶ static int memo[SIZE + 1][SIZE + 1];\n   for (i = 1; i <= SIZE; i++)\n     for (j = 1; j <= SIZE; j++)\n       memo[i][j] = -2;\n➋ best = -1;\n➌ for (j = 1; j <= n; j++) {\n     result = solve_ij(cost, n, n, j, memo);\n     if (result != -1) {\n       if (best == -1)\n      ➍ best = cost[2] + result;\n       else\n      ➎ best = min(best, cost[2] + result);\n    }\n  }\n  return best;\n}\n```", "```\nint main(void) {\n  int i, n;\n  int cost[SIZE + 1];\n  scanf(\"%d \", &n);\n  for (i = 1; i <= n; i++)\n    scanf(\"%d\", &cost[i]);\n  printf(\"%d\\n\", solve(cost, n));\n  return 0;\n}\n```", "```\nint solve(int cost[], int n, int i, int j,\n          int memo[SIZE + 1][SIZE + 1]) {\n  int first, second;\n  if (memo[i][j] != -2)\n    return memo[i][j];\n  if (i == n) {\n    memo[i][j] = 0;\n    return memo[i][j];\n  }\n❶ if (i + j + 1 <= n)\n     first = solve(cost, n, i + j + 1, j + 1, memo);\n   else\n     first = -1;\n➋ if (i - j >= 1)\n     second = solve(cost, n, i - j, j, memo);\n   else\n     second = -1;\n   if (first == -1 && second == -1) {\n     memo[i][j] = -1;\n     return memo[i][j];\n   } else if (second == -1) {\n     memo[i][j] = cost[i + j + 1] + first;\n     return memo[i][j];\n   } else if (first == -1) {\n     memo[i][j] = cost[i - j] + second;\n     return memo[i][j];\n   } else {\n     memo[i][j] = min(cost[i + j + 1] + first, cost[i - j] + second);\n     return memo[i][j];\n  }\n}\n```", "```\nint main(void) {\n  int i, j, n, result;\n  int cost[SIZE + 1];\n  static int memo[SIZE + 1][SIZE + 1];\n  scanf(\"%d \", &n);\n  for (i = 1; i <= n; i++)\n    scanf(\"%d\", &cost[i]);\n  for (i = 1; i <= SIZE; i++)\n    for (j = 1; j <= SIZE; j++)\n      memo[i][j] = -2;\n  result = cost[2] + solve(cost, n, 2, 1, memo);\n  printf(\"%d\\n\", result);\n  return 0;\n}\n```", "```\nfor (j = n; j >= 1; j--)\n  for (i = 1; i < n; i++) {\n    code to fill in dp[i][j]\n}\n```", "```\n7 4 3\nxxyzxyz\nxxyz\n```", "```\nint solve_ijk(char a[], char b[], int i, int j, int k,\n              int memo[MAX_A][MAX_B][MAX_K + 1])\n```", "```\n#define MAX_A 1000\n#define MAX_B 200\n#define MAX_K 200\n#define MOD 1000000007\n\nint solve_ijk(char a[], char b[], int i, int j, int k,\n              int memo[MAX_A][MAX_B][MAX_K + 1]) {\n  int total, q;\n  if (memo[i][j][k] != -1)\n    return memo[i][j][k];\n❶ if (j == 0 && k == 1 && a[i] == b[j]) {\n     memo[i][j][k] = 1;\n     return memo[i][j][k];\n  }\n➋ if (i == 0 || j == 0 || k == 0) {\n     memo[i][j][k] = 0;\n     return memo[i][j][k];\n  }\n➌ if (a[i] != b[j]) {\n     memo[i][j][k] = 0;\n     return memo[i][j][k];\n   }\n   total = 0;\n➍ for (q = 0; q < i; q++)\n  ➎ total = (total + solve_ijk(a, b, q, j - 1, k - 1, memo)) % MOD;\n➏ total = (total + solve_ijk(a, b, i - 1, j - 1, k, memo)) % MOD;\n   memo[i][j][k] = total;\n   return memo[i][j][k];\n}\n```", "```\nint solve(char a[], char b[], int a_length, int b_length,\n          int num_substrings) {\n  int i, j, k, result;\n  static int memo[MAX_A][MAX_B][MAX_K + 1];\n  for (i = 0; i < a_length; i++)\n    for (j = 0; j < b_length; j++)\n      for (k = 0; k <= num_substrings; k++)\n        memo[i][j][k] = -1;\n  result = 0;\n  for (i = 0; i < a_length; i++) {\n    result = result + solve_ijk(a, b, i, b_length - 1, num_substrings, memo);\n    result = result % MOD;\n  }\n  return result;\n}\n```", "```\nint main(void) {\n  int a_length, b_length, num_substrings;\n  char a[MAX_A + 1], b[MAX_B + 1];\n  scanf(\"%d%d%d\", &a_length, &b_length, &num_substrings);\n  scanf(\"%s\", a);\n  scanf(\"%s\", b);\n  printf(\"%d\\n\", solve(a, b, a_length, b_length, num_substrings));\n  return 0;\n}\n```", "```\nfor (q = 0; q < i; q++)\n  total = (total + solve_ijk(a, b, q, j - 1, k - 1, memo)) % MOD;\n```", "```\ntypedef struct pair {\n  int end_at_i;\n  int total;\n} pair;\n```", "```\npair solve(char a[], char b[], int i, int j, int k,\n           pair memo[MAX_A][MAX_B][MAX_K + 1]) {\n  int total, end_at_i;\n  if (memo[i][j][k].total != -1)\n    return memo[i][j][k];\n  if (j == 0 && k == 1) {\n ❶ if (a[i] != b[j]) {\n      if (i == 0)\n        total = 0;\n      else\n     ➋ total = solve(a, b, i - 1, j, k, memo).total;\n   ➌ memo[i][j][k] = (pair){0, total};\n    } else {\n      if (i == 0)\n        total = 1;\n      else\n        total = 1 + solve(a, b, i - 1, j, k, memo).total;\n      memo[i][j][k] = (pair){1, total};\n    }\n    return memo[i][j][k];\n  }\n  if (i == 0 || j == 0 || k == 0) {\n    memo[i][j][k] = (pair){0, 0};\n    return memo[i][j][k];\n  }\n  if (a[i] != b[j])\n    end_at_i = 0;\n  else {\n  ➍ end_at_i = (solve(a, b, i - 1, j - 1, k - 1, memo).total +\n              ➎ solve(a, b, i - 1, j - 1, k, memo).end_at_i);\n     end_at_i = end_at_i % MOD;\n  }\n➏ total = (end_at_i + solve(a, b, i - 1, j, k, memo).total) % MOD;\n   memo[i][j][k] = (pair){end_at_i, total};\n   return memo[i][j][k];\n}\n```", "```\nint main(void) {\n  int a_length, b_length, num_substrings, i, j, k, result;\n  char a[MAX_A + 1];\n  char b[MAX_B + 1];\n  static pair memo[MAX_A][MAX_B][MAX_K + 1];\n  scanf(\"%d%d%d\", &a_length, &b_length, &num_substrings);\n  scanf(\"%s\", a);\n  scanf(\"%s\", b);\n  for (i = 0; i < a_length; i++)\n    for (j = 0; j < b_length; j++)\n      for (k = 0; k <= num_substrings; k++)\n        memo[i][j][k] = (pair){-1, -1};\n  result = solve(a, b, a_length - 1, b_length - 1, num_substrings, memo).total;\n  printf(\"%d\\n\", result);\n  return 0;\n}\n```"]