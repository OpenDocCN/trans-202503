- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: User Environments
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户环境
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This book’s primary focus is on the parts of the Linux system that normally
    underlie server processes and interactive user sessions. But eventually, the system
    and the user have to meet somewhere. Startup files play an important role at this
    point, because they set defaults for the shell and other interactive programs.
    They determine how the system behaves when a user logs in.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的主要内容聚焦于 Linux 系统中通常支持服务器进程和交互式用户会话的部分。但最终，系统和用户必须在某个地方相遇。启动文件在这一点上起着重要作用，因为它们为
    shell 和其他交互式程序设置默认值。它们决定了用户登录时系统的行为。
- en: Most users don’t pay close attention to their startup files, touching them only
    when they want to add something for convenience, such as an alias. Over time,
    the files become cluttered with unnecessary environment variables and tests that
    can lead to annoying (or quite serious) problems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户并不会密切关注自己的启动文件，只有在想要添加一些方便的内容（例如别名）时才会修改它们。随着时间的推移，这些文件会被不必要的环境变量和测试混杂，可能会导致令人烦恼（甚至相当严重）的错误。
- en: If you’ve had your Linux machine for a while, you might have noticed that your
    home directory accumulates a bafflingly large array of startup files over time.
    These are sometimes called *dot files* because they nearly always start with a
    dot (*.*), excluding them from the default display of `ls` and most file managers.
    Many of these are automatically created when you first run a program, and you’ll
    never need to change them. This chapter primarily covers shell startup files,
    which are the ones you’re most likely to modify or rewrite from scratch. Let’s
    first look at how much care you need to take when working on these files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用 Linux 一段时间，你可能注意到，随着时间的推移，你的主目录会累积一堆令人困惑的启动文件。这些文件有时被称为 *dot 文件*，因为它们几乎总是以一个点（*.*）开头，这使得它们不会出现在
    `ls` 和大多数文件管理器的默认显示中。这些文件中的许多在你第一次运行程序时会自动创建，你也永远不需要修改它们。本章主要讨论的是 shell 启动文件，这些文件是你最可能修改或从头编写的。首先，让我们看看在处理这些文件时你需要多么小心。
- en: 13.1 Guidelines for Creating Startup Files
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.1 创建启动文件的指南
- en: When designing startup files, keep the user in mind. If you’re the only user
    on a machine, you don’t have much to worry about, because any errors affect only
    you and they’re easy enough to fix. However, if you’re creating startup files
    meant to be the defaults for all new users on a machine or network, or if you
    think that someone might copy your files for use on a different machine, this
    process becomes considerably more critical. If you make an error in a startup
    file and distribute it to 10 users, you might end up fixing this error 10 times.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计启动文件时，要考虑到用户。如果你是机器上唯一的用户，你无需太多担心，因为任何错误只会影响你，而且修复起来相对简单。然而，如果你正在创建启动文件，目的是作为所有新用户在一台机器或网络上的默认文件，或者如果你认为有人可能会将你的文件复制到其他机器使用，那么这个过程就变得非常重要。如果你在启动文件中犯了一个错误，并将其分发给了
    10 个用户，那么你可能需要修复 10 次这个错误。
- en: 'Keep two essential goals in mind when creating startup files for other users:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在为其他用户创建启动文件时，记住两个基本目标：
- en: Simplicity Keep the number of startup files small, and keep the files as short
    and simple as possible so that they’re easy to modify but hard to break. Each
    item in a startup file is just one more thing that can break.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简洁性：保持启动文件数量尽可能少，且尽量使文件简短而简单，这样它们便于修改，同时不容易出错。每个启动文件中的项目都可能成为导致问题的因素。
- en: Readability Use extensive comments in files so that the users get a good picture
    of what each part of a file does.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可读性：在文件中使用大量注释，让用户清楚地了解文件中每一部分的作用。
- en: 13.2 When to Alter Startup Files
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.2 何时修改启动文件
- en: 'Before making a change to a startup file, ask yourself whether you really should
    be making it. Here are some good reasons for changing startup files:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改启动文件之前，问问自己是否真的应该这么做。以下是更改启动文件的一些合理理由：
- en: You want to change the default prompt.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要更改默认提示符。
- en: You need to accommodate some critical locally installed software. (Consider
    using wrapper scripts first, though.)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要适应一些关键的本地安装软件。（不过，可以先考虑使用包装脚本。）
- en: Your existing startup files are broken.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的现有启动文件已损坏。
- en: If everything in your Linux distribution works, be careful. Sometimes the default
    startup files interact with other files in */etc*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Linux 发行版一切正常，要小心。有时，默认的启动文件与 */etc* 中的其他文件会相互作用。
- en: That said, you probably wouldn’t be reading this chapter if you weren’t interested
    in changing the defaults, so let’s examine what’s important.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果你不想改变默认设置，你可能不会阅读这一章，因此让我们来看看重要的内容。
- en: 13.3 Shell Startup File Elements
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.3 Shell 启动文件元素
- en: What goes into a shell startup file? Some things might seem obvious, such as
    the command path and a prompt setting. But what exactly *should* be in the path,
    and what does a reasonable prompt look like? And how much is too much to put in
    a startup file?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 启动文件中应该包含什么？一些内容看起来可能显而易见，例如命令路径和提示符设置。但到底*应该*在路径中包含什么？合理的提示符应该是什么样的？启动文件中放入多少内容算是过多？
- en: This section discusses the essentials of a shell startup file—from the command
    path, prompt, and aliases through the permissions mask.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了 shell 启动文件的基本内容——从命令路径、提示符、别名到权限掩码。
- en: 13.3.1  The Command Path
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.3.1  命令路径
- en: 'The most important part of any shell startup file is the command path. The
    path should cover the directories that contain every application of interest to
    a regular user. At the very least, the path should contain these components, in
    order:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 shell 启动文件中最重要的部分是命令路径。路径应该涵盖包含每个普通用户感兴趣的应用程序的目录。至少，路径应该按顺序包含以下组件：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This order ensures that you can override standard default programs with site-specific
    variants located in */usr/local*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个顺序确保你可以使用位于*/usr/local*中的特定站点变体来覆盖标准的默认程序。
- en: Most Linux distributions install executables for nearly all packaged user software
    in */usr/bin*. Some are occasional differences that have crept in over the years,
    such as putting games in */usr/games* and graphical applications in a separate
    location, so check your system’s defaults first. And make sure that every general-use
    program on the system is available through one of the directories just listed.
    If not, your system is probably getting out of control. Don’t change the default
    path in your user environment to accommodate every new software installation directory.
    A cheap way to accommodate separate installation directories is to use symbolic
    links in */usr/local/bin*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版将几乎所有打包的用户软件的可执行文件安装在*/usr/bin*中。随着时间的推移，也有一些偶尔的差异，例如将游戏放在*/usr/games*，将图形应用程序放在单独的位置，因此首先检查系统的默认设置。并确保系统上每个通用程序都可以通过刚才列出的某个目录访问。如果不能，那么你的系统可能已经失控。不要为了适应每个新的软件安装目录而改变用户环境中的默认路径。一个廉价的解决方案是使用符号链接将其指向*/usr/local/bin*。
- en: 'Many users create a *bin* directory of their own to store shell scripts and
    programs, so you may want to add this to the front of the path:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 许多用户会创建自己的 *bin* 目录来存储 shell 脚本和程序，因此你可能想将其添加到路径的最前面：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you’re interested in systems utilities (such as `sysctl`, `fdisk`, and `lsmod`),
    add the *sbin* directories to your path:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对系统工具（如`sysctl`、`fdisk`和`lsmod`）感兴趣，可以将 *sbin* 目录添加到你的路径中：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 13.3.2  The Manual Page Path
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.3.2  手册页路径
- en: The traditional manual page path was determined by the `MANPATH` environment
    variable, but you shouldn’t set it because doing so overrides the system defaults
    in */etc/manpath.config*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的手册页路径是由`MANPATH`环境变量决定的，但你不应该设置它，因为这样会覆盖系统默认的*/etc/manpath.config*。
- en: 13.3.3  The Prompt
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.3.3  提示符
- en: Experienced users tend to avoid long, complicated, useless prompts. In comparison,
    many administrators and distributions drag everything into a default prompt. Even
    many shell default prompts are cluttered or otherwise mostly useless. For example,
    the default `bash` prompt contains the shell name and version number. Your choice
    should reflect your users’ needs; place the current working directory, hostname,
    and username in the prompt if it really helps.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 经验丰富的用户倾向于避免冗长、复杂且无用的提示符。相比之下，许多管理员和发行版将所有内容都拖入默认提示符中。即使是许多 shell 默认提示符也杂乱无章或大多数情况下毫无用处。例如，默认的`bash`提示符包含了
    shell 的名称和版本号。你的选择应反映用户的需求；如果对用户有帮助，可以在提示符中放置当前工作目录、主机名和用户名。
- en: 'Above all, avoid characters that mean something significant to the shell, such
    as these:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，避免使用对 shell 来说具有特殊意义的字符，例如以下这些：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This simple prompt setting for `bash` ends with the customary `$` (the traditional
    `csh` prompt ends with `%`):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的`bash`提示符设置以传统的 `$` 结束（传统的 `csh` 提示符以 `%` 结束）：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `\u` is an expression that the shell evaluates to the current username
    (see the PROMPTING section of the bash(1) manual page). Other popular expressions
    include:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`\u` 是 shell 会评估为当前用户名的表达式（请参阅 bash(1) 手册页中的 PROMPTING 部分）。其他常用的表达式包括：'
- en: '`\h` The hostname (the short form, without domain names).'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\h` 主机名（简短形式，不带域名）。'
- en: '`\!` The history number.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\!` 历史编号。'
- en: '`\w` The current directory. Because this can become long, you can limit the
    display to just the final component by using `\W` instead.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\w` 当前目录。由于这可能变得很长，你可以通过使用`\W`来限制显示只显示最后一个组件。'
- en: '`\$` `$` if running as a user account; `#` if root.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\$` 如果作为用户账户运行，则为`$`；如果为root用户，则为`#`。'
- en: 13.3.4  Aliases
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.3.4  别名
- en: 'Among the stickier points of contemporary user environments is the role of
    *aliases*, a shell feature that substitutes one string for another before executing
    a command. Aliases can be efficient shortcuts that save some typing. However,
    they have several drawbacks:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当代用户环境中的一些棘手问题之一是*别名*的角色，这是一个在执行命令之前将一个字符串替换为另一个字符串的shell功能。别名可以是节省打字的有效快捷方式。然而，它们也有几个缺点：
- en: It can be tricky to manipulate arguments.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作参数可能会很棘手。
- en: They are confusing; a shell’s built-in `which` command can tell you if something
    is an alias, but it won’t tell you where it was defined.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们容易让人困惑；shell的内置`which`命令可以告诉你某个东西是否是别名，但它不会告诉你它是在哪里定义的。
- en: They are frowned upon in subshells and noninteractive shells; they aren’t passed
    onto child shells.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在子shell和非交互式shell中，它们不受欢迎；它们不会传递给子shell。
- en: One classic mistake when defining an alias is to add extra arguments to an existing
    command—for example, aliasing `ls` to `ls -F`. At best, this can make it difficult
    to remove the `-F` argument when you don’t want it. At worst, it can have severe
    consequences for the user who does not understand that they’re not using the default
    arguments.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 定义别名时一个经典的错误是为现有命令添加额外的参数——例如，将`ls`别名为`ls -F`。充其量，这会使你在不需要时很难移除`-F`参数。最糟糕的是，它可能会对不理解自己没有使用默认参数的用户造成严重后果。
- en: Given these disadvantages, you should probably avoid aliases whenever possible;
    it’s easier to write a shell function or an entirely new shell script. A computer
    can start and execute shells so quickly that the difference between an alias and
    an entirely new command should be unnoticeable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些缺点，你应该尽可能避免使用别名；编写一个shell函数或一个全新的shell脚本要更容易。计算机可以非常快速地启动并执行shell，因此别名和全新命令之间的差异应该是不可察觉的。
- en: That said, aliases do come in handy when you wish to alter a part of the shell’s
    environment. You can’t change an environment variable with a shell script, because
    scripts run as subshells. (But you can instead define shell functions to perform
    this task.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，当你希望更改shell环境的一部分时，别名确实会派上用场。你不能通过shell脚本来更改环境变量，因为脚本作为子shell运行。（但是，你可以定义shell函数来执行这个任务。）
- en: 13.3.5  The Permissions Mask
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.3.5  权限掩码
- en: 'As described in Chapter 2, a shell’s built-in `umask` (permissions mask) facility
    sets your default permissions. Include the `umask` command in one of your startup
    files to make certain that any program you run creates files with your desired
    permissions. There are two reasonable choices:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如第2章所述，shell的内置`umask`（权限掩码）功能设置了你的默认权限。在你的启动文件中包含`umask`命令，以确保你运行的任何程序创建的文件具有你期望的权限。有两种合理的选择：
- en: '`077` This mask is the most restrictive permissions mask; it doesn’t give any
    other users access to new files and directories. This is often appropriate on
    a multi-user system where you don’t want other users to look at any of your files.
    However, when set as the default, this mask can sometimes lead to problems when
    your users want to share files but don’t understand how to set permissions correctly.
    (Inexperienced users have a tendency to set files to a world-writable mode.)'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`077` 这个掩码是最严格的权限掩码；它不允许其他用户访问新创建的文件和目录。这通常适用于多用户系统，在这种系统中，你不希望其他用户查看你的任何文件。然而，作为默认设置时，当你的用户希望共享文件但不理解如何正确设置权限时，这个掩码有时会导致问题。（缺乏经验的用户往往会将文件设置为世界可写模式。）'
- en: '`022` This mask gives other users read access to new files and directories.
    This can be a good choice on a single-user system because many daemons that run
    as pseudo-users won’t be able to see files and directories created with the more
    restrictive `077` umask.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`022` 这个掩码允许其他用户读取新创建的文件和目录。在单用户系统上，这可能是一个不错的选择，因为许多以伪用户身份运行的守护进程将无法看到使用更严格的`077`
    umask创建的文件和目录。'
- en: 13.4 Startup File Order and Examples
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.4 启动文件顺序和示例
- en: 'Now that you know what to put into shell startup files, it’s time to see some
    specific examples. Surprisingly, one of the most difficult and confusing parts
    of creating startup files is determining which of several possible startup files
    to use. This section covers the two most popular Unix shells: `bash` and `tcsh`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了应该把什么内容放入 shell 启动文件中，接下来是一些具体的示例。令人惊讶的是，创建启动文件时最困难和最令人困惑的部分之一是确定使用多个可能的启动文件中的哪一个。本节将介绍两种最流行的
    Unix shell：`bash` 和 `tcsh`。
- en: 13.4.1  The bash Shell
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.4.1  bash Shell
- en: In `bash`, you can choose from the startup filenames *.bash_profile*, *.profile*,
    *.bash_login*, and *.bashrc*. Which one is appropriate for your command path,
    manual page path, prompt, aliases, and permissions mask? The answer is that you
    should have a *.bashrc* file accompanied by a *.bash_profile* symbolic link pointing
    to *.bashrc* because there are a few different kinds of `bash` shell instance
    types.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `bash` 中，你可以选择启动文件名 *.bash_profile*、*.profile*、*.bash_login* 和 *.bashrc*。哪个文件适合你的命令路径、手册页路径、提示符、别名和权限掩码呢？答案是，你应该有一个
    *.bashrc* 文件，并附带一个指向 *.bashrc* 的 *.bash_profile* 符号链接，因为 `bash` shell 实例类型有几种不同的选择。
- en: The two main shell instance types are interactive and noninteractive, but we’re
    interested only in interactive shells, because noninteractive shells (such as
    those that run shell scripts) usually don’t read any startup files. Interactive
    shells are those you use to run commands from a terminal, such as the ones you’ve
    seen in this book, and they can be classified as *login* or *non-login*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 两种主要的 shell 实例类型是交互式和非交互式，但我们只关心交互式 shell，因为非交互式 shell（例如运行 shell 脚本时）通常不会读取任何启动文件。交互式
    shell 是你用来从终端运行命令的 shell，就像本书中提到的那些，它们可以分为 *登录* 或 *非登录*。
- en: Login Shells
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 登录 shell
- en: Traditionally, a login shell is what you get when you first log in to a system
    with the terminal using a program such as */bin/login*. Logging in remotely with
    SSH also gives you a login shell. The basic idea is that the login shell is an
    initial shell. You can tell if a shell is a login shell by running `echo $0`;
    if the first character is a `-`, the shell’s a login shell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，登录 shell 是你通过终端登录系统时获得的 shell，通常使用如 */bin/login* 的程序。通过 SSH 远程登录也会提供登录 shell。基本思想是登录
    shell 是一个初始 shell。你可以通过运行 `echo $0` 来判断一个 shell 是否是登录 shell；如果第一个字符是 `-`，则该 shell
    是登录 shell。
- en: When `bash` runs as a login shell, it runs */etc/profile*. Then it looks for
    a user’s *.bash_profile*, *.bash_login*, and *.profile* files, running only the
    first one that it sees.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `bash` 作为登录 shell 运行时，它会运行 */etc/profile*。然后，它会查找用户的 *.bash_profile*、*.bash_login*
    和 *.profile* 文件，并只运行它看到的第一个文件。
- en: As strange as it sounds, it’s possible to run a noninteractive shell as a login
    shell to force it to run startup files. To do so, start the shell with the `-l`
    or `--login` option.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很奇怪，但实际上你可以通过将非交互式 shell 作为登录 shell 来强制其运行启动文件。为此，可以使用 `-l` 或 `--login` 选项启动
    shell。
- en: Non-Login Shells
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 非登录 shell
- en: A non-login shell is an additional shell that you run after you log in. It’s
    simply any interactive shell that’s not a login shell. Windowing system terminal
    programs (`xterm`, GNOME Terminal, and so on) start non-login shells unless you
    specifically ask for a login shell.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 非登录 shell 是你登录后运行的附加 shell。它只是任何非登录 shell 的交互式 shell。窗口系统终端程序（如 `xterm`、GNOME
    Terminal 等）通常会启动非登录 shell，除非你特别要求使用登录 shell。
- en: Upon starting up as a non-login shell, `bash` runs */etc/bash.bashrc* and then
    runs the user’s *.bashrc*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `bash` 启动为非登录 shell 时，它会运行 */etc/bash.bashrc*，然后运行用户的 *.bashrc* 文件。
- en: The Consequences of Two Kinds of Shells
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 两种 shell 的后果
- en: The reasoning behind the two different startup files is that in the old days,
    users logged in through a traditional terminal with a login shell, and then started
    non-login subshells with windowing systems or the `screen` program. For the non-login
    subshells, it was deemed a waste to repeatedly set the user environment and run
    a bunch of programs that had already been run. With login shells, you could run
    fancy startup commands in a file such as *.bash_profile*, leaving only aliases
    and other “lightweight” things to your *.bashrc*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 两种不同启动文件背后的原因是，在早期，用户通过传统终端登录系统时会使用登录 shell，然后使用窗口系统或 `screen` 程序启动非登录子 shell。对于非登录子
    shell，反复设置用户环境和运行已经运行过的一堆程序被认为是一种浪费。对于登录 shell，你可以在如 *.bash_profile* 这样的文件中运行一些复杂的启动命令，仅将别名和其他“轻量级”内容留给
    *.bashrc*。
- en: Nowadays, most desktop users log in through a graphical display manager (you’ll
    learn more about these in the next chapter). Most of these start with one noninteractive
    login shell in order to preserve the login versus non-login model. When they do
    not, you need to set up your entire environment (path, manual path, and so on)
    in your *.bashrc*, or you’ll never see any of your environment in your terminal
    window shells. However, you *also* need a *.bash_profile* if you ever want to
    log in on the console or remotely, because those login shells don’t ever bother
    with *.bashrc*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，大多数桌面用户通过图形显示管理器登录（你将在下一章了解更多关于这些的信息）。其中大多数以一个非交互式登录 Shell 启动，以保持登录与非登录模型的区分。如果它们没有这样做，你需要在你的
    *.bashrc* 中设置整个环境（路径、手册路径等），否则你将无法在终端窗口的 Shell 中看到任何环境变量。然而，如果你希望通过控制台或远程登录，你*还需要*一个
    *.bash_profile*，因为那些登录 Shell 根本不会处理 *.bashrc*。
- en: Example .bashrc
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例 .bashrc
- en: 'In order to satisfy both non-login and login shells, how would you create a
    *.bashrc* that can also be used as your *.bash_profile*? Here’s one very elementary
    (yet perfectly sufficient) example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了同时满足非登录和登录 Shell，如何创建一个 *.bashrc* 也可以作为你的 *.bash_profile* 使用？这里有一个非常基础（但完全足够）的示例：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this startup file, the path has `$HOME/bin` at the front so that executables
    there take precedence over the system versions. If you need the system executables,
    add `/sbin` and `/usr/sbin`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个启动文件中，路径将 `$HOME/bin` 放在最前面，以便那里可执行的文件优先于系统版本。如果你需要使用系统可执行文件，可以添加 `/sbin`
    和 `/usr/sbin`。
- en: 'As described earlier, you can share this *.bashrc* file with *.bash_profile*
    via a symbolic link, or you can make the relationship even clearer by creating
    *.bash_profile* as this one-liner:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你可以通过符号链接将这个 *.bashrc* 文件与 *.bash_profile* 共享，或者你可以通过创建如下的一行命令，使得它们的关系更加清晰：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Checking for Login and Interactive Shells
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查登录和交互式 Shell
- en: 'With a *.bashrc* matching your *.bash_profile*, you don’t normally run extra
    commands for login shells. However, if you want to define different actions for
    login and non-login shells, you can add the following test to your *.bashrc*,
    which checks the shell’s `$-` variable for an `i` character:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与你的 *.bash_profile* 匹配的 *.bashrc* 时，通常不需要为登录 Shell 运行额外的命令。然而，如果你想为登录和非登录
    Shell 定义不同的操作，你可以在 *.bashrc* 中添加以下测试，它会检查 Shell 的 `$-` 变量中是否包含 `i` 字符：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 13.4.2  The tcsh Shell
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.4.2  tcsh Shell
- en: The standard `csh` on virtually all Linux systems is `tcsh`, an enhanced C shell
    that popularized features such as command-line editing and multimode filename
    and command completion. Even if you don’t use `tcsh` as the default new user shell
    (`bash` should be the default), you should still provide `tcsh` startup files
    in case your users happen to come across `tcsh`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有 Linux 系统上的标准 `csh` 都是 `tcsh`，这是一种增强版的 C shell，流行的特性包括命令行编辑和多模式的文件名和命令补全。即使你不使用
    `tcsh` 作为默认的新用户 Shell（`bash` 应该是默认的），你仍然应该提供 `tcsh` 启动文件，以防用户遇到 `tcsh`。
- en: You don’t have to worry about the difference between login shells and non-login
    shells in `tcsh`. Upon startup, `tcsh` looks for a *.tcshrc* file. Failing this,
    it looks for the `csh` shell’s *.cshrc* startup file. The reason for this order
    is that you can use the *.tcshrc* file for `tcsh` extensions that don’t work in
    `csh`. You should probably stick to using the traditional *.cshrc* instead of
    *.tcshrc*; it’s highly unlikely that anyone will ever use your startup files with
    `csh`. And if a user actually does come across `csh` on some other system, your
    *.cshrc* will work.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tcsh` 中，你不必担心登录 Shell 和非登录 Shell 之间的区别。启动时，`tcsh` 会查找一个 *.tcshrc* 文件。如果没有找到，它会查找
    `csh` shell 的 *.cshrc* 启动文件。这样做的顺序是因为你可以使用 *.tcshrc* 文件来扩展 `tcsh`，而这些扩展在 `csh`
    中不可用。你应该坚持使用传统的 *.cshrc* 文件，而不是 *.tcshrc*；几乎不可能有人会在 `csh` 中使用你的启动文件。如果某个用户在其他系统上遇到
    `csh`，你的 *.cshrc* 将可以正常工作。
- en: Example .cshrc
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例 .cshrc
- en: 'Here is a sample *.cshrc* file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 *.cshrc* 文件：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 13.5 Default User Settings
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.5 默认用户设置
- en: The best way to write startup files and choose defaults for new users is to
    experiment with a new test user on the system. Create the test user with an empty
    home directory and refrain from copying your own startup files to the test user’s
    directory. Write the new startup files from scratch.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 编写启动文件并为新用户选择默认设置的最佳方法是在系统上实验一个新的测试用户。创建测试用户时，使用一个空的家目录，并避免将自己的启动文件复制到测试用户的目录中。重新编写新的启动文件。
- en: When you think you have a working setup, log in as the new test user in all
    possible ways (on the console, remotely, and so on). Make sure that you test as
    many things as possible, including the windowing system operation and manual pages.
    When you’re happy with the test user, create a second test user, copying the startup
    files from the first test user. If everything still works, you now have a new
    set of startup files that you can distribute to new users.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你认为配置已经正常时，尝试以所有可能的方式登录新测试用户（在控制台上、远程登录等）。确保测试尽可能多的功能，包括窗口系统操作和手册页。当你对测试用户满意后，创建第二个测试用户，将第一个测试用户的启动文件复制过去。如果一切正常，你现在拥有了一组可以分发给新用户的启动文件。
- en: This section outlines reasonable defaults for new users.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述了新用户的合理默认设置。
- en: 13.5.1  Shell Defaults
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.5.1  Shell 默认设置
- en: 'The default shell for any new user on a Linux system should be `bash` because:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux 系统上的新用户，默认的 shell 应该是 `bash`，因为：
- en: Users interact with the same shell that they use to write shell scripts. (For
    many reasons, which I won’t expand upon here, `csh` is a notoriously bad scripting
    tool—don’t even think about it.)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户与他们用于编写 shell 脚本的相同 shell 进行交互。（由于种种原因，我在这里不展开讨论，`csh` 是一个臭名昭著的糟糕脚本工具——甚至不要考虑它。）
- en: '`bash` is the default on Linux distributions.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bash` 是 Linux 发行版的默认 shell。'
- en: '`bash` uses the GNU readline library to accept input, and therefore its interface
    is identical to that of many other tools.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bash` 使用 GNU readline 库来接收输入，因此它的界面与许多其他工具的界面相同。'
- en: '`bash` gives you fine, easy-to-understand control over I/O redirection and
    file handles.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bash` 为你提供了精细、易于理解的 I/O 重定向和文件句柄控制。'
- en: However, many seasoned Unix wizards use a shell such as `csh` or `tcsh` simply
    because it’s what they’re most familiar with, and they can’t bear to switch. Of
    course, you can choose any shell you like, but choose `bash` if you don’t have
    any preference, and use `bash` as the default shell for any new user on the system.
    (Users can change their shell with the `chsh` command to suit their individual
    preference.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多经验丰富的 Unix 专家使用 `csh` 或 `tcsh` 等 shell，仅仅是因为他们最熟悉这种 shell，无法忍受切换。当然，你可以选择任何你喜欢的
    shell，但如果没有特别偏好，建议选择 `bash`，并将其设置为新用户的默认 shell。（用户可以通过 `chsh` 命令更改其 shell 以适应个人喜好。）
- en: 13.5.2  Editor
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.5.2  编辑器
- en: On traditional systems, the default editor is `vi` or `emacs`. These are the
    only editors virtually guaranteed to exist (or at least be available) on nearly
    any Unix system, which means they’ll cause the least trouble in the long run for
    a new user. However, Linux distributions often configure `nano` to be the default
    editor, because it’s easier for beginners to use.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统系统中，默认编辑器是 `vi` 或 `emacs`。这些编辑器几乎可以保证在几乎所有 Unix 系统上都能找到（或者至少可用），这意味着它们对于新用户来说会在长期内造成最少的麻烦。然而，Linux
    发行版通常将 `nano` 配置为默认编辑器，因为它对初学者更友好。
- en: As with shell startup files, avoid large default editor startup files. A little
    `set` `showmatch` in the *.exrc* startup file (to have `vi` show matching parentheses)
    never hurt anyone, but steer clear of anything that significantly changes the
    editor’s behavior or appearance, such as the `showmode` feature, auto-indentation,
    and wrap margins.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与 shell 启动文件一样，避免使用过大的默认编辑器启动文件。在 *.exrc* 启动文件中加入少量的 `set` `showmatch`（让 `vi`
    显示匹配的括号）不会对任何人造成困扰，但避免任何显著改变编辑器行为或外观的设置，如 `showmode` 特性、自动缩进和换行边距等。
- en: 13.5.3  Pager
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.5.3  分页程序
- en: The pager is a program, such as `less`, that shows text one page at a time.
    It’s perfectly reasonable to set the default `PAGER` environment variable to `less`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 分页程序是一个程序，比如 `less`，它一次显示一页文本。将默认的 `PAGER` 环境变量设置为 `less` 是完全合理的。
- en: 13.6 Startup File Pitfalls
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.6 启动文件的陷阱
- en: 'Avoid these pitfalls in startup files:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在启动文件中出现以下陷阱：
- en: Don’t put any kind of graphical command in a shell startup file. Not all shells
    run in graphical environments.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在 shell 启动文件中放入任何图形化命令。并不是所有的 shell 都在图形环境中运行。
- en: Don’t set the `DISPLAY` environment variable in a shell startup file. We haven’t
    looked at graphical environments yet, but this can cause your graphical session
    to misbehave.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在 shell 启动文件中设置 `DISPLAY` 环境变量。我们还没有涉及图形环境，但这可能会导致你的图形会话出现问题。
- en: Don’t set the terminal type in a shell startup file.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在 shell 启动文件中设置终端类型。
- en: Don’t skimp on descriptive comments in default startup files.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在默认的启动文件中省略描述性的注释。
- en: Don’t run commands in a startup file that print to the standard output.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在启动文件中运行会输出到标准输出的命令。
- en: Never set `LD_LIBRARY_PATH` in a shell startup file (see Section 15.1.3).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在 shell 启动文件中设置`LD_LIBRARY_PATH`（参见第15.1.3节）。
- en: 13.7 Further Startup Topics
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.7 进一步的启动话题
- en: Because this book deals only with the underlying Linux system, we won’t cover
    windowing environment startup files. This is a large issue indeed, because the
    display manager that logs you in to a modern Linux system has its own set of startup
    files, such as *.xsession*, *.xinitrc*, and the endless combinations of GNOME-
    and KDE-related items.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因为本书仅涉及基础的 Linux 系统，我们不会讨论窗口环境的启动文件。这确实是一个大问题，因为现代 Linux 系统的显示管理器有自己的一套启动文件，比如*.xsession*、*.xinitrc*，以及与
    GNOME 和 KDE 相关的无尽组合。
- en: The windowing choices may seem bewildering, and there is no one common way to
    start a windowing environment in Linux. The next chapter describes some of the
    many possibilities. However, when you determine what your system does, you might
    get a little carried away with the files that relate to your graphical environment.
    That’s fine, but don’t carry it over to new users. The same tenet of keeping things
    simple in shell startup files works wonders for GUI startup files, too. In fact,
    you probably don’t need to change your GUI startup files at all.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口环境的选择可能让人感到困惑，并且在 Linux 中没有统一的方式来启动窗口环境。下一章将描述一些可能的选择。然而，当你了解了系统的工作方式后，你可能会对与图形环境相关的文件过于着迷。没问题，但不要将其强加给新用户。在
    shell 启动文件中保持简单的原则同样适用于 GUI 启动文件。实际上，你可能根本不需要更改你的 GUI 启动文件。
