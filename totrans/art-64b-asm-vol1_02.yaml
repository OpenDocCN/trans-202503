- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hello, World of Assembly Language
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This chapter is a “quick-start” chapter that lets you begin writing basic assembly
    language programs as rapidly as possible. By the conclusion of this chapter, you
    should understand the basic syntax of a Microsoft Macro Assembler (MASM) program
    and the prerequisites for learning new assembly language features in the chapters
    that follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic syntax of a MASM program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Intel central processing unit (CPU) architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting aside memory for variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using machine instructions to control the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking a MASM program with C/C++ code so you can call routines in the C Standard
    Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing some simple assembly language programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.1 What You’ll Need
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll need a few prerequisites to learn assembly language programming with
    MASM: a 64-bit version of MASM, plus a text editor (for creating and modifying
    MASM source files), a linker, various library files, and a C++ compiler.'
  prefs: []
  type: TYPE_NORMAL
- en: Today’s software engineers drop down into assembly language only when their
    C++, C#, Java, Swift, or Python code is running too slow and they need to improve
    the performance of certain modules (or functions) in their code. Because you’ll
    typically be interfacing assembly language with C++, or other high-level language
    (HLL) code, when using assembly in the real world, we’ll do so in this book as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason to use C++ is for the C Standard Library. While different individuals
    have created several useful libraries for MASM (see [http://www.masm32.com/](http://www.masm32.com/)
    for a good example), there is no universally accepted standard set of libraries.
    To make the C Standard Library immediately accessible to MASM programs, this book
    presents examples with a short C/C++ main function that calls a single external
    function written in assembly language using MASM. Compiling the C++ main program
    along with the MASM source file will produce a single executable file that you
    can run and test.
  prefs: []
  type: TYPE_NORMAL
- en: Do you need to know C++ to learn assembly language? Not really. This book will
    spoon-feed you the C++ you’ll need to run the example programs. Nevertheless,
    assembly language isn’t the best choice for your first language, so this book
    assumes that you have some experience in a language such as C/C++, Pascal (or
    Delphi), Java, Swift, Rust, BASIC, Python, or any other imperative or object-oriented
    programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Setting Up MASM on Your Machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MASM is a Microsoft product that is part of the Visual Studio suite of developer
    tools. Because it’s Microsoft’s tool set, you need to be running some variant
    of Windows (as I write this, Windows 10 is the latest version; however, any later
    version of Windows will likely work as well). Appendix C provides a complete description
    of how to install Visual Studio Community (the “no-cost” version, which includes
    MASM and the Visual C++ compiler, plus other tools you will need). Please refer
    to that appendix for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Setting Up a Text Editor on Your Machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio includes a text editor that you can use to create and edit MASM
    and C++ programs. Because you have to install the Visual Studio package to obtain
    MASM, you automatically get a production-quality programmer’s text editor you
    can use for your assembly language source files.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can use any editor that works with straight ASCII files (UTF-8
    is also fine) to create MASM and C++ source files, such as Notepad++ or the text
    editor available from [https://www.masm32.com/](https://www.masm32.com/). Word
    processing programs, such as Microsoft Word, are not appropriate for editing program
    source files.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 The Anatomy of a MASM Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A typical (stand-alone) MASM program looks like [Listing 1-1](#listing1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-1: Trivial shell program'
  prefs: []
  type: TYPE_NORMAL
- en: A typical MASM program contains one or more *sections* representing the type
    of data appearing in memory. These sections begin with a MASM statement such as
    `.code` or `.data`. Variables and other memory values appear in a *data* section.
    Machine instructions appear in procedures that appear within a *code* section.
    And so on. The individual sections appearing in an assembly language source file
    are optional, so not every type of section will appear in a particular source
    file. For example, [Listing 1-1](#listing1-1) contains only a single code section.
  prefs: []
  type: TYPE_NORMAL
- en: The `.code` statement is an example of an assembler *directive*—a statement
    that tells MASM something about the program but is not an actual x86-64 machine
    instruction. In particular, the `.code` directive tells MASM to group the statements
    following it into a special section of memory reserved for machine instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Running Your First MASM Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A traditional first program people write, popularized by Brian Kernighan and
    Dennis Ritchie’s *The C Programming Language* (Prentice Hall, 1978) is the “Hello,
    world!” program. The whole purpose of this program is to provide a simple example
    that someone learning a new programming language can use to figure out how to
    use the tools needed to compile and run programs in that language.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, writing something as simple as a “Hello, world!” program is a
    major production in assembly language. You have to learn several machine instruction
    and assembler directives, not to mention Windows system calls, to print the string
    “Hello, world!” At this point in the game, that’s too much to ask from a beginning
    assembly language programmer (for those who want to blast on ahead, take a look
    at the sample program in Appendix C).
  prefs: []
  type: TYPE_NORMAL
- en: However, the program shell in [Listing 1-1](#listing1-1) is actually a complete
    assembly language program. You can compile (*assemble*) and run it. It doesn’t
    produce any output. It simply returns back to Windows immediately after you start
    it. However, it does run, and it will serve as the mechanism for showing you how
    to assemble, link, and run an assembly language source file.
  prefs: []
  type: TYPE_NORMAL
- en: 'MASM is a traditional *command line assembler*, which means you need to run
    it from a Windows *command line prompt* (available by running the *cmd.exe* program).
    To do so, enter something like the following into the command line prompt or shell
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command tells MASM to assemble the *programShell.asm* program (where I’ve
    saved [Listing 1-1](#listing1-1)) to an executable file, link the result to produce
    a console application (one that you can run from the command line), and begin
    execution at the label `main` in the assembly language source file. Assuming that
    no errors occur, you can run the resulting program by typing the following command
    into your command prompt window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Windows should immediately respond with a new command line prompt (as the `programShell`
    application simply returns control back to Windows after it starts running).
  prefs: []
  type: TYPE_NORMAL
- en: 1.6 Running Your First MASM/C++ Hybrid Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book commonly combines an assembly language module (containing one or more
    functions written in assembly language) with a C/C++ main program that calls those
    functions. Because the compilation and execution process is slightly different
    from a stand-alone MASM program, this section demonstrates how to create, compile,
    and run a hybrid assembly/C++ program. [Listing 1-2](#listing1-2) provides the
    main C++ program that calls the assembly language module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-2: A sample C/C++ program, *listing1-2.cpp*, that calls an assembly
    language function'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 1-3](#listing1-3) is a slight modification of the stand-alone MASM
    program that contains the `asmFunc()` function that the C++ program calls.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-3: A MASM program, *listing1-3.asm*, that the C++ program in [Listing
    1-2](#listing1-2) calls'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 1-3](#listing1-3) has three changes from the original *programShell.asm*
    source file. First, there are two new statements: the `option` statement and the
    `public` statement.'
  prefs: []
  type: TYPE_NORMAL
- en: The `option` statement tells MASM to make all symbols case-sensitive. This is
    necessary because MASM, by default, is case-insensitive and maps all identifiers
    to uppercase (so `asmFunc()` would become `ASMFUNC()`). C++ is a case-sensitive
    language and treats `asmFunc()` and `ASMFUNC()` as two different identifiers.
    Therefore, it’s important to tell MASM to respect the case of the identifiers
    so as not to confuse the C++ program.
  prefs: []
  type: TYPE_NORMAL
- en: '*The `public` statement declares that the `asmFunc()` identifier will be visible
    outside the MASM source/object file. Without this statement, `asmFunc()` would
    be accessible only within the MASM module, and the C++ compilation would complain
    that `asmFunc()` is an undefined identifier.'
  prefs: []
  type: TYPE_NORMAL
- en: The third difference between [Listing 1-3](#listing1-3) and [Listing 1-1](#listing1-1)
    is that the function’s name was changed from `main()` to `asmFunc()`. The C++
    compiler and linker would get confused if the assembly code used the name `main()`,
    as that’s also the name of the C++ `main()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile and run these source files, you use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `ml64` command uses the `` `/c` option, which stands for *compile-only*,
    and does not attempt to run the linker (which would fail because *listing1-3.asm*
    is not a stand-alone program). The output from MASM is an object code file (*listing1-3.obj*),
    which serves as input to the Microsoft Visual C++ (MSVC) compiler in the next
    command. ``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]*'
  prefs: []
  type: TYPE_NORMAL
