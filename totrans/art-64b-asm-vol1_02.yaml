- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Hello, World of Assembly Language
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 汇编语言的 Hello, World
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter is a “quick-start” chapter that lets you begin writing basic assembly
    language programs as rapidly as possible. By the conclusion of this chapter, you
    should understand the basic syntax of a Microsoft Macro Assembler (MASM) program
    and the prerequisites for learning new assembly language features in the chapters
    that follow.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个“快速入门”章节，旨在让你尽可能快速地开始编写基础的汇编语言程序。在本章结束时，你应该理解 Microsoft Macro Assembler
    (MASM) 程序的基本语法，以及学习后续章节中新汇编语言特性的前提条件。
- en: 'This chapter covers the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Basic syntax of a MASM program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MASM 程序的基本语法
- en: The Intel central processing unit (CPU) architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔中央处理器（CPU）架构
- en: Setting aside memory for variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为变量分配内存
- en: Using machine instructions to control the CPU
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用机器指令控制 CPU
- en: Linking a MASM program with C/C++ code so you can call routines in the C Standard
    Library
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 MASM 程序与 C/C++ 代码链接，以便你能够调用 C 标准库中的例程
- en: Writing some simple assembly language programs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一些简单的汇编语言程序
- en: 1.1 What You’ll Need
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 你需要准备的
- en: 'You’ll need a few prerequisites to learn assembly language programming with
    MASM: a 64-bit version of MASM, plus a text editor (for creating and modifying
    MASM source files), a linker, various library files, and a C++ compiler.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习使用 MASM 编写汇编语言程序，你需要一些先决条件：64 位版本的 MASM，文本编辑器（用于创建和修改 MASM 源文件）、链接器、各种库文件，以及
    C++ 编译器。
- en: Today’s software engineers drop down into assembly language only when their
    C++, C#, Java, Swift, or Python code is running too slow and they need to improve
    the performance of certain modules (or functions) in their code. Because you’ll
    typically be interfacing assembly language with C++, or other high-level language
    (HLL) code, when using assembly in the real world, we’ll do so in this book as
    well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如今的软件工程师只有在 C++、C#、Java、Swift 或 Python 代码运行过慢时，才会转向汇编语言，他们需要提升代码中某些模块（或函数）的性能。由于你在实际应用中通常会将汇编语言与
    C++ 或其他高级语言（HLL）代码接口，因此本书也会这样操作。
- en: Another reason to use C++ is for the C Standard Library. While different individuals
    have created several useful libraries for MASM (see [http://www.masm32.com/](http://www.masm32.com/)
    for a good example), there is no universally accepted standard set of libraries.
    To make the C Standard Library immediately accessible to MASM programs, this book
    presents examples with a short C/C++ main function that calls a single external
    function written in assembly language using MASM. Compiling the C++ main program
    along with the MASM source file will produce a single executable file that you
    can run and test.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用 C++ 的理由是 C 标准库。虽然不同的人为 MASM 创建了几个有用的库（例如 [http://www.masm32.com/](http://www.masm32.com/)
    提供了一个很好的例子），但没有公认的标准库集。为了使 C 标准库能够立即在 MASM 程序中使用，本书提供了带有简短 C/C++ 主函数的示例，该主函数调用一个用
    MASM 编写的汇编语言外部函数。将 C++ 主程序与 MASM 源文件一起编译，将生成一个可执行文件，你可以运行并进行测试。
- en: Do you need to know C++ to learn assembly language? Not really. This book will
    spoon-feed you the C++ you’ll need to run the example programs. Nevertheless,
    assembly language isn’t the best choice for your first language, so this book
    assumes that you have some experience in a language such as C/C++, Pascal (or
    Delphi), Java, Swift, Rust, BASIC, Python, or any other imperative or object-oriented
    programming language.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 学习汇编语言需要了解 C++ 吗？其实不需要。本书会为你提供运行示例程序所需的 C++ 知识。不过，汇编语言并不是你的第一门语言的最佳选择，因此本书假设你已经有一些
    C/C++、Pascal（或 Delphi）、Java、Swift、Rust、BASIC、Python 或任何其他命令式或面向对象编程语言的经验。
- en: 1.2 Setting Up MASM on Your Machine
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 在你的计算机上设置 MASM
- en: MASM is a Microsoft product that is part of the Visual Studio suite of developer
    tools. Because it’s Microsoft’s tool set, you need to be running some variant
    of Windows (as I write this, Windows 10 is the latest version; however, any later
    version of Windows will likely work as well). Appendix C provides a complete description
    of how to install Visual Studio Community (the “no-cost” version, which includes
    MASM and the Visual C++ compiler, plus other tools you will need). Please refer
    to that appendix for more details.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MASM 是微软的产品，属于 Visual Studio 开发工具套件的一部分。由于它是微软的工具集，你需要运行某个版本的 Windows（截至写作时，Windows
    10 是最新版本；但任何更新版本的 Windows 也可能可以运行）。附录 C 提供了如何安装 Visual Studio Community（“免费版”，包括
    MASM 和 Visual C++ 编译器，以及你将需要的其他工具）的完整描述。请参阅该附录以获取更多详情。
- en: 1.3 Setting Up a Text Editor on Your Machine
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 在你的机器上设置文本编辑器
- en: Visual Studio includes a text editor that you can use to create and edit MASM
    and C++ programs. Because you have to install the Visual Studio package to obtain
    MASM, you automatically get a production-quality programmer’s text editor you
    can use for your assembly language source files.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio包括一个文本编辑器，你可以用来创建和编辑MASM和C++程序。因为你必须安装Visual Studio软件包来获得MASM，所以你自动得到了一个生产级程序员文本编辑器，可以用来编辑你的汇编语言源文件。
- en: However, you can use any editor that works with straight ASCII files (UTF-8
    is also fine) to create MASM and C++ source files, such as Notepad++ or the text
    editor available from [https://www.masm32.com/](https://www.masm32.com/). Word
    processing programs, such as Microsoft Word, are not appropriate for editing program
    source files.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以使用任何可以处理纯ASCII文件（UTF-8也可以）的编辑器来创建MASM和C++源文件，比如Notepad++或者来自[https://www.masm32.com/](https://www.masm32.com/)的文本编辑器。文字处理程序，如Microsoft
    Word，不适合编辑程序源文件。
- en: 1.4 The Anatomy of a MASM Program
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4 MASM程序的结构
- en: A typical (stand-alone) MASM program looks like [Listing 1-1](#listing1-1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的（独立的）MASM程序如下所示：[清单1-1](#listing1-1)。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 1-1: Trivial shell program'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 清单1-1：简单的Shell程序
- en: A typical MASM program contains one or more *sections* representing the type
    of data appearing in memory. These sections begin with a MASM statement such as
    `.code` or `.data`. Variables and other memory values appear in a *data* section.
    Machine instructions appear in procedures that appear within a *code* section.
    And so on. The individual sections appearing in an assembly language source file
    are optional, so not every type of section will appear in a particular source
    file. For example, [Listing 1-1](#listing1-1) contains only a single code section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的MASM程序包含一个或多个*区段*，表示内存中出现的数据类型。这些区段以MASM语句开头，例如`.code`或`.data`。变量和其他内存值出现在*数据*区段中。机器指令出现在*代码*区段内的过程里，等等。汇编语言源文件中出现的各个区段是可选的，因此某个源文件中不一定会包含每一种类型的区段。例如，[清单1-1](#listing1-1)只包含一个单独的代码区段。
- en: The `.code` statement is an example of an assembler *directive*—a statement
    that tells MASM something about the program but is not an actual x86-64 machine
    instruction. In particular, the `.code` directive tells MASM to group the statements
    following it into a special section of memory reserved for machine instructions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`.code`语句是一个汇编器*指令*的例子——这是一条告诉MASM程序某些信息的语句，但并不是实际的x86-64机器指令。特别地，`.code`指令告诉MASM将其后的语句分组到一个为机器指令保留的特殊内存区段中。'
- en: 1.5 Running Your First MASM Program
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.5 运行你的第一个MASM程序
- en: A traditional first program people write, popularized by Brian Kernighan and
    Dennis Ritchie’s *The C Programming Language* (Prentice Hall, 1978) is the “Hello,
    world!” program. The whole purpose of this program is to provide a simple example
    that someone learning a new programming language can use to figure out how to
    use the tools needed to compile and run programs in that language.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的第一个程序，受到Brian Kernighan和Dennis Ritchie的*《C程序设计语言》*（普伦蒂斯·霍尔出版社，1978年）的推广，是“Hello,
    world！”程序。这个程序的唯一目的是提供一个简单的示例，供学习新编程语言的人用来弄清楚如何使用编译和运行该语言程序所需的工具。
- en: Unfortunately, writing something as simple as a “Hello, world!” program is a
    major production in assembly language. You have to learn several machine instruction
    and assembler directives, not to mention Windows system calls, to print the string
    “Hello, world!” At this point in the game, that’s too much to ask from a beginning
    assembly language programmer (for those who want to blast on ahead, take a look
    at the sample program in Appendix C).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，编写像“Hello, world！”这样简单的程序在汇编语言中是一项大工程。你必须学习几条机器指令和汇编器指令，更不用说Windows系统调用了，才能打印字符串“Hello,
    world！”在这个阶段，对初学汇编语言的程序员来说，这实在是要求太高了（对于那些想快速前进的人，可以查看附录C中的示例程序）。
- en: However, the program shell in [Listing 1-1](#listing1-1) is actually a complete
    assembly language program. You can compile (*assemble*) and run it. It doesn’t
    produce any output. It simply returns back to Windows immediately after you start
    it. However, it does run, and it will serve as the mechanism for showing you how
    to assemble, link, and run an assembly language source file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[清单1-1](#listing1-1)中的程序外壳实际上是一个完整的汇编语言程序。你可以编译（*汇编*）并运行它。它不会产生任何输出，启动后会立即返回到Windows。但是，它确实能运行，并且将作为展示如何汇编、链接和运行汇编语言源文件的机制。
- en: 'MASM is a traditional *command line assembler*, which means you need to run
    it from a Windows *command line prompt* (available by running the *cmd.exe* program).
    To do so, enter something like the following into the command line prompt or shell
    window:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: MASM 是一个传统的 *命令行汇编器*，这意味着您需要从 Windows *命令行提示符*（通过运行 *cmd.exe* 程序获得）中运行它。为此，请在命令行提示符或
    shell 窗口中输入类似以下的内容：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command tells MASM to assemble the *programShell.asm* program (where I’ve
    saved [Listing 1-1](#listing1-1)) to an executable file, link the result to produce
    a console application (one that you can run from the command line), and begin
    execution at the label `main` in the assembly language source file. Assuming that
    no errors occur, you can run the resulting program by typing the following command
    into your command prompt window:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令告诉 MASM 汇编 *programShell.asm* 程序（我将 [清单 1-1](#listing1-1) 保存到其中）为一个可执行文件，将结果链接为一个控制台应用程序（可以从命令行运行的程序），并在汇编语言源文件中的
    `main` 标签处开始执行。假设没有发生错误，您可以通过在命令提示符窗口中键入以下命令来运行生成的程序：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Windows should immediately respond with a new command line prompt (as the `programShell`
    application simply returns control back to Windows after it starts running).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 应立即响应一个新的命令行提示符（因为 `programShell` 应用程序在开始运行后会将控制权交还给 Windows）。
- en: 1.6 Running Your First MASM/C++ Hybrid Program
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6 运行您的第一个 MASM/C++ 混合程序
- en: This book commonly combines an assembly language module (containing one or more
    functions written in assembly language) with a C/C++ main program that calls those
    functions. Because the compilation and execution process is slightly different
    from a stand-alone MASM program, this section demonstrates how to create, compile,
    and run a hybrid assembly/C++ program. [Listing 1-2](#listing1-2) provides the
    main C++ program that calls the assembly language module.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书通常将一个汇编语言模块（包含一个或多个用汇编语言编写的函数）与一个调用这些函数的 C/C++ 主程序结合在一起。由于编译和执行过程与独立的 MASM
    程序略有不同，本节将演示如何创建、编译并运行一个混合汇编/C++ 程序。[清单 1-2](#listing1-2) 提供了调用汇编语言模块的主要 C++ 程序。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 1-2: A sample C/C++ program, *listing1-2.cpp*, that calls an assembly
    language function'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-2：一个示例 C/C++ 程序，*listing1-2.cpp*，调用一个汇编语言函数
- en: '[Listing 1-3](#listing1-3) is a slight modification of the stand-alone MASM
    program that contains the `asmFunc()` function that the C++ program calls.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-3](#listing1-3) 是对独立 MASM 程序的轻微修改，包含 C++ 程序调用的 `asmFunc()` 函数。'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 1-3: A MASM program, *listing1-3.asm*, that the C++ program in [Listing
    1-2](#listing1-2) calls'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-3：一个 MASM 程序，*listing1-3.asm*，是 C++ 程序 [清单 1-2](#listing1-2) 中调用的程序
- en: '[Listing 1-3](#listing1-3) has three changes from the original *programShell.asm*
    source file. First, there are two new statements: the `option` statement and the
    `public` statement.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-3](#listing1-3) 与原始 *programShell.asm* 源文件相比有三个变化。首先，新增了两个语句：`option`
    语句和 `public` 语句。'
- en: The `option` statement tells MASM to make all symbols case-sensitive. This is
    necessary because MASM, by default, is case-insensitive and maps all identifiers
    to uppercase (so `asmFunc()` would become `ASMFUNC()`). C++ is a case-sensitive
    language and treats `asmFunc()` and `ASMFUNC()` as two different identifiers.
    Therefore, it’s important to tell MASM to respect the case of the identifiers
    so as not to confuse the C++ program.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`option` 语句告诉 MASM 使所有符号区分大小写。这是必要的，因为 MASM 默认情况下是不区分大小写的，并将所有标识符映射为大写字母（因此
    `asmFunc()` 会变成 `ASMFUNC()`）。C++ 是一种区分大小写的语言，将 `asmFunc()` 和 `ASMFUNC()` 视为两个不同的标识符。因此，告诉
    MASM 尊重标识符的大小写非常重要，以避免与 C++ 程序混淆。'
- en: '*The `public` statement declares that the `asmFunc()` identifier will be visible
    outside the MASM source/object file. Without this statement, `asmFunc()` would
    be accessible only within the MASM module, and the C++ compilation would complain
    that `asmFunc()` is an undefined identifier.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*`public` 语句声明 `asmFunc()` 标识符将在 MASM 源/目标文件外部可见。如果没有这个语句，`asmFunc()` 只会在 MASM
    模块内部可访问，C++ 编译时会抱怨 `asmFunc()` 是一个未定义的标识符。'
- en: The third difference between [Listing 1-3](#listing1-3) and [Listing 1-1](#listing1-1)
    is that the function’s name was changed from `main()` to `asmFunc()`. The C++
    compiler and linker would get confused if the assembly code used the name `main()`,
    as that’s also the name of the C++ `main()` function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-3](#listing1-3) 与 [清单 1-1](#listing1-1) 之间的第三个区别是函数的名称从 `main()` 改为了
    `asmFunc()`。如果汇编代码使用 `main()` 这个名称，C++ 编译器和链接器会感到困惑，因为 `main()` 也是 C++ 的主函数名称。'
- en: 'To compile and run these source files, you use the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和运行这些源文件，您可以使用以下命令：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `ml64` command uses the `` `/c` option, which stands for *compile-only*,
    and does not attempt to run the linker (which would fail because *listing1-3.asm*
    is not a stand-alone program). The output from MASM is an object code file (*listing1-3.obj*),
    which serves as input to the Microsoft Visual C++ (MSVC) compiler in the next
    command. ``
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`ml64` 命令使用 `` `/c` 选项，表示*仅编译*，并不会尝试运行链接器（因为 *listing1-3.asm* 不是独立程序，所以链接器运行会失败）。MASM
    的输出是一个目标代码文件（*listing1-3.obj*），它作为下一个命令中 Microsoft Visual C++（MSVC）编译器的输入。``'
- en: '[PRE6]*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]*'
