["```\nimport urllib, requests, json\nbase = \"https://nominatim.openstreetmap.org/search.php\"\nf = {\"q\": \"Portland OR\", \"polygon_geojson\":1, \"format\":\"json\"}\nq = urllib.parse.urlencode(f)\nresp = requests.get(\"%s?%s\" % (base, q))\nresp_data = json.loads(resp.text)[0]\n```", "```\ncity_gj = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n      {\n          \"type\": \"Feature\",\n          \"geometry\": resp_data[\"geojson\"],\n          \"properties\": {\n            \"name\": \"City Boundary\"\n          }\n      }\n  ]\n}\n```", "```\nfrom shapely.geometry import GeometryCollection, shape\ncity_shape = GeometryCollection(\n    [shape(f[\"geometry\"]).buffer(0) for f in city_gj[\"features\"]]\n)\ncity_shape = [geom for geom in city_shape][0]\n```", "```\nimport pandas as pd\nstations_df = pd.read_csv(\"station_addresses_portland.csv\", names=[\n    \"name\", \"street\", \"city\", \"state\", \"zip\"\n])\nstations_df[\"addr\"] = stations_df.apply(row_to_str, axis=1)\n```", "```\nimport geocoder\ndef locate(addr):\n  ❶ g = geocoder.osm(addr)\n    data = g.json\n  ❷ if data is None:\n        return None\n  ❸ return {\n        \"address\": data[\"address\"],\n        \"lat\": data[\"lat\"],\n        \"lon\": data[\"lng\"],\n        \"osm_id\": data[\"osm_id\"]\n    }\n```", "```\nimport geopandas as gpd\nlocations = stations_df[\"addr\"].apply(locate)\nlocations = [a for a in list(locations) if a is not None]\nloc_df = pd.DataFrame(locations)\ngeo_df = gpd.GeoDataFrame(\n    loc_df,\n    geometry=gpd.points_from_xy(loc_df.lat, loc_df.lon)\n)\n```", "```\nimport numpy as np\nfrom geovoronoi import voronoi_regions_from_coords\npoints = np.array([[p.y, p.x] for p in list(geo_df[\"geometry\"])])\npoly_shapes, pts, poly_to_pt = voronoi_regions_from_coords(\n    points, city_shape\n)\n```", "```\nwinning = 0\nwinner = -1\n❶ for i in range(len(poly_shapes)):\n    ps = poly_shapes[i]\n    if ps.area == winning:\n      ❷ if isinstance(winning, int):\n            winner = [winner, i]\n        elif isinstance(winning, list):\n            winner.append(i)\n  ❸ elif ps.area > winning:\n        winner = i\n        winning = ps.area\n```", "```\npython Emergency_service_poc.py\n```"]