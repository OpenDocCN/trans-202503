- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protecting Salary Data with Views
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this project, you’ll use views to hide sensitive salary data in an employee
    table. The company in question has one database user from each department (Human
    Resources, Marketing, Accounting, Technology, and Legal) who is allowed access
    to most employee data. However, only users from Human Resources should be able
    to access the employees’ salaries.
  prefs: []
  type: TYPE_NORMAL
- en: Views can hide sensitive data, but they can also be used to simplify access
    to a complex query, or to select just the relevant data in a table—for example,
    to show just the table’s rows for a particular department.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the employee Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating your `business` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an `employee` table that stores information about each employee
    in the company, including full name, job title, and salary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Since you created the `employee_id` column as `auto_increment`, you don’t need
    to provide an `employee_id` value when inserting new rows into the `employee`
    table. MySQL keeps track of that for you, and makes sure that the `employee_id`
    value gets higher with each row you insert. Add the following data to your table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, query the table to see the inserted rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `employee` table data looks good, but you want to hide the `salary` column
    from everyone except the Human Resources user so that coworkers can’t access one
    another’s sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of allowing all database users to access the `employee` table, you’ll
    let them access a view called `v_employee` that has the columns from the `employee`
    table minus the `salary` column. As discussed in [Chapter 10](c10.xhtml), a view
    is a virtual table based on a query. Create the view like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ve left out the `salary` column from the `select` statement, so it shouldn’t
    appear in your result once you query your view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As expected, the `v_employee` view contains every column except for `salary`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll change the permissions of the `employee` database to allow Human
    Resources to make changes in the underlying `employee` table. Since `v_employee`
    is a view, the changes to `employee` will be immediately reflected there.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling Permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To adjust the permissions in your database, you’ll use the `grant` command,
    which grants privileges to MySQL database users and controls which users can access
    which tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have one database user per department: `accounting_user`, `marketing_user`,
    `legal_user`, `technology_user`, and `hr_user`. Grant access to the `employee`
    table to only `hr_user` by entering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ve granted `hr_user` the ability to select, delete, insert, and update
    rows in the `employee` table in the `business` database. You won’t grant that
    access to the users from other departments. For example, if `accounting_user`
    tries to query the `employee` table, they’ll get the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you’ll grant select access to your `v_employee` view to your users from
    all of your departments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: All of your departments’ users can select from the `v_employee` view to access
    the employee data they need.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, you can grant privileges using the `root` superuser account
    that was created when you installed MySQL (see [Chapter 1](c01.xhtml)). In a live
    production environment, your DBA would typically create other accounts rather
    than using `root`, which has all privileges and can do anything. In a professional
    setting, very few people know the `root` password. A DBA can also define permissions
    to a *role* and then add or remove users as members of that role, but a detailed
    discussion of roles is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Using MySQL Workbench to Test User Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll use MySQL Workbench with this project and connect as `root` to create
    the database, tables, and departments’ users. Then, you’ll create separate connections
    as `hr_user` and `accounting_user` to see how their access differs.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a connection for the `root` user, using the password that you
    created when you installed MySQL. To create the connection, click the `+` icon
    next to the text MySQL Connections on the Welcome to MySQL Workbench screen, as
    shown in [Figure 18-1](#figure18-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-1: Creating a MySQL Workbench connection'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Setup New Connection window will open, as shown in [Figure 18-2](#figure18-2).
    Here, enter a connection name (I chose to give the connection the same name as
    the user: `root`) and enter `root` as the username.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-2: Creating a MySQL Workbench connection for `root`'
  prefs: []
  type: TYPE_NORMAL
- en: To save the connection, click **OK**. Now you can log in as `root` in the future
    simply by clicking the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Since `root` is a superuser account that has all privileges and can grant privileges
    to other users, you’ll use this connection to run the script to create the database,
    tables, view, and users for your departments. [Figure 18-3](#figure18-3) shows
    the end of that script, but you’ll need to run the full one at [https://github.com/ricksilva/mysql_cc/blob/main/chapter_18.sql](https://github.com/ricksilva/mysql_cc/blob/main/chapter_18.sql).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-3: Creating tables, view, and users and granting access using MySQL
    Workbench'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve run the script to create usernames for your departments, you’ll
    create MySQL Workbench connections for `hr_user` and `accounting_user`. [Figure
    18-4](#figure18-4) shows how to set up a new connection for `hr_user`.
  prefs: []
  type: TYPE_NORMAL
- en: To create the connection for `hr_user`, you entered a connection name and username
    of `hr_user`. You’ll create a connection for `accounting_user` the same way, using
    `accounting_user` for both the connection name and username.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-4: Creating a MySQL Workbench connection for `hr_user`'
  prefs: []
  type: TYPE_NORMAL
- en: Now you have three connections in MySQL Workbench that you can use, as shown
    in [Figure 18-5](#figure18-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-5: MySQL Workbench connections for `root`, `hr_user`, and `accounting_user`'
  prefs: []
  type: TYPE_NORMAL
- en: The connections appear with the names you used when you created them. You can
    log in to MySQL as each user by clicking the corresponding connection.
  prefs: []
  type: TYPE_NORMAL
- en: You can also open multiple connections at once. Open a connection as `hr_user`,
    then click the home icon at the top left to return to the welcome screen. From
    here, open another connection as `accounting_user` by clicking its connection.
  prefs: []
  type: TYPE_NORMAL
- en: You now should see two tabs in MySQL Workbench, labeled `hr_user` and `accounting_user`,
    as shown in [Figure 18-6](#figure18-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-6: You can have multiple connections open in MySQL Workbench.'
  prefs: []
  type: TYPE_NORMAL
- en: Simply click the appropriate tab to run queries as that user. Click the `hr_user`
    tab to query the `employee` table as `hr_user` ([Figure 18-7](#figure18-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-7: Querying the `employee` table as `hr_user`'
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the `accounting_user` tab and query the `employee` table again, as
    shown in [Figure 18-8](#figure18-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-8: The `accounting_user` cannot view the `employee` table.'
  prefs: []
  type: TYPE_NORMAL
- en: Because you as `root` haven’t granted access on the `employee` table to `accounting_user`,
    the error `SELECT command denied` is returned. The `accounting_user` can, however,
    select from the `v_employee` view, so the user can see employee data without the
    salaries ([Figure 18-9](#figure18-9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c18/f18009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-9: The `accounting_user` is able to query the `v_employee` view.'
  prefs: []
  type: TYPE_NORMAL
- en: Your other database users have the same privileges as `accounting_user`, meaning
    they can’t query the `employee` table either, because you haven’t granted them
    access.
  prefs: []
  type: TYPE_NORMAL
- en: An Alternative Approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s another way to hide data from particular users. MySQL allows you to
    grant permissions at the column level; for example, you could grant the `select`
    privilege on all the columns in the `employee` table except for `salary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This allows `technology_user` to select any or all of the `employee_id`, `first_name`,
    `last_name`, `department`, or `job_title` columns from the table, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since you haven’t granted select access on the `salary` column, MySQL will
    prevent `technology_user` from selecting that column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If `technology_user` tries to select all columns using the `*` wildcard, they
    will receive the same error message, because they cannot return the `salary` column.
    For this reason, I don’t favor this approach, as it can lead to confusion. It’s
    more straightforward to allow users to access all permissible tables through a
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you used a view to hide salary information from particular
    users. This technique could be used to hide any kind of sensitive data in your
    tables. You also learned how granting and revoking privileges for database users
    can help to create secure databases by exposing certain pieces of data to specific
    users.
  prefs: []
  type: TYPE_NORMAL
- en: With these three projects under your belt, you’ll be able to build your own
    databases, load data from files, create triggers to maintain the quality of your
    data, and use views to protect sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck on the next stage of your MySQL journey!
  prefs: []
  type: TYPE_NORMAL
