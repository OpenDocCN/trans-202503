- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I²C On Common Single-Board Computers
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Several common single-board computers provide at least one I²C port for interfacing
    with I²C peripherals. While some low-end boards might use a software implementation
    (or a quasi-hardware implementation, like that of the ATtiny84), I²C support is
    near universal on most hobbyist-level and professional SBCs. This chapter provides
    a brief introduction to the I²C implementations found on many common SBCs.
  prefs: []
  type: TYPE_NORMAL
- en: The list of SBCs in this chapter is far from exhaustive and focuses on more
    commonly used, low-cost SBCs. I intend not to provide low-level details of the
    I²C interfaces on these SBCs but to give an overview of the various boards that
    support I²C communications. I include links to the various web pages (see “For
    More Information” at the end of this chapter) that describe each of these boards
    in more detail for those who are interested in following up on them.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, many new single-board computers that support the I²C interface will
    appear after this book’s publication. The online chapters (available at [https://bookofi2c.randallhyde.com](https://bookofi2c.randallhyde.com))
    will include continuously updated information on many new SBCs that do not appear
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 The Arduino Family
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Arduino family is one of the more popular choices for connecting I²C devices.
    Whenever someone exhausts the limited I/O ports (analog or digital) on the Arduino
    board or wants to connect something that doesn’t have a simple digital or analog
    interface (such as a thermocouple or a small display), the I²C interface often
    provides the solution.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino is not a single computer board. True, when most people use the term
    *Arduino*, they’re probably referring to the Arduino Uno Rev3 SBC. However, a
    wide variety of Arduino boards exists with many different types of I²C interfaces
    on them.
  prefs: []
  type: TYPE_NORMAL
- en: First, Arduino^® is a registered trademark of Arduino. However, the Arduino
    design is open source and open hardware, so there are many different single-board
    computers out there that are, more or less, compatible with the Arduino system.
    This book will adopt the attitude that any SBC you can program using the Arduino
    IDE and Arduino libraries is an Arduino or, more correctly, is *Arduino compatible*.
    For example, because you typically program it using the Arduino IDE, this book
    considers the SparkFun ATTO84 board used in Chapter 3 (see section 3.2, “Basic
    ATtiny84 and ATtiny85 Hardware,” in Chapter 3) as Arduino compatible even though
    it lacks many of the features found on common Arduino-compatible devices, including
    a fully supported hardware I²C interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because a large number of Arduino-compatible boards is available, discussing
    “the I²C port on an Arduino” as though it were a standard connection is difficult.
    I²C ports on Arduino-class devices may differ from one another in the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Some ports are 3.3 V; some are 5 V.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different Arduino-class devices can have zero, one, two, or more hardware I²C
    ports available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some devices might not support hardware-based peripheral mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some devices might not support multiple controllers on the same I²C bus.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some devices might not support other I²C bus features, such as clock stretching.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bottom line is that you must look carefully at the documentation for your
    particular “Arduino” board to determine which I²C features it supports (if it
    supports I²C at all).
  prefs: []
  type: TYPE_NORMAL
- en: Even from Arduino, you have a wide variety of Arduino models to choose from.
    The following subsections describe some popular models and their support for I²C.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.1 The Arduino Uno Rev3 and Leonardo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Uno Rev3 is the classic Arduino unit. It has a 16-MHz, 8-bit ATmega328P
    with the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: 5-V operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Arduino pinout and expansion bus (for shields)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single I²C interface (5 V)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 32-KB flash ROM for program storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2-KB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1-KB EEPROM (nonvolatile storage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 6-1](#figure6-1) shows the location of the I²C lines on the Arduino
    bus.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-1: Arduino Uno Rev3 (and Leonardo) pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Leonardo uses (mostly) the same CPU and pinouts that the Arduino
    Uno Rev3 uses. The major difference is that the Leonardo was the first Arduino
    to include a built-in USB port that could be programmed to act as a keyboard or
    other USB device; it also has an ATmega32u4 with 2.5-KB RAM. Of course, the Uno
    Rev3 (versus the original Uno) also has a built-in USB, so there is little benefit
    to the Leonardo over the Uno Rev3 (though the Leonard does have more analog I/O
    pins). See “For More Information” for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Arduino pinouts appearing in this chapter come from the Arduino
    website ([https://www.arduino.cc](https://www.arduino.cc)). These images are covered
    under the Creative Commons 4.0 license (free to use with attribution). See [https://www.arduino.cc/en/Main/FAQ](https://www.arduino.cc/en/Main/FAQ)
    and [https://www.arduino.cc/en/Trademark/HomePage](https://www.arduino.cc/en/Trademark/HomePage)
    for more legal rigmarole from Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.2 The Arduino Nano
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Arduino Nano uses the same CPU as that of the Arduino Uno Rev3, which means
    their tech specs are the same, but the Arduino Nano is packaged into a much smaller
    footprint for use in space-critical applications. [Figure 6-2](#figure6-2) shows
    the pinouts for the Nano.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-2: Arduino Nano pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Nano uses pins A4 and A5 for the SDA and SCL lines, respectively;
    these are the standard pins for I²C on many Arduino units.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.3 The Arduino Micro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Arduino Micro is another small form factor Arduino unit. It has a slightly
    beefier CPU than that of the Nano:'
  prefs: []
  type: TYPE_NORMAL
- en: ATmega32U4 CPU at 16 MHz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 32-KB flash for program storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.5-KB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1-KB EEPROM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 6-3](#figure6-3) shows the Arduino Micro pinouts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-3: Arduino Micro pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The I²C bus appears on pins D2 (SDA) and D3 (SCL).
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.4 The Arduino Nano Every
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Arduino Nano Every is a much beefier version of the Nano (and Micro) while
    still using a compact form factor. The Arduino Nano Every has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: ATMega4809 at 20 MHz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5-V operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 48-KB flash storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6-KB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256-byte EEPROM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 6-4](#figure6-4) shows the Arduino Nano Every pinouts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-4: Arduino Nano Every pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The Nano Every supports a single I²C port on pins D18 (PA2) and D19 (PA3).
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.5 The Arduino Mega 2560 Rev3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Arduino Mega 2560 Rev3 (or just “Arduino Mega”) is physically the largest
    of the common Arduino boards. It has the following feature set:'
  prefs: []
  type: TYPE_NORMAL
- en: 5-V operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8-bit CPU running at 16 MHz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mega expansion shield capabilities (which is mostly an upwards-compatible variant
    of the standard Arduino Shield connections)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single I²C interface (5 V)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256-KB flash ROM for program storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8-KB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4-KB EEPROM (nonvolatile storage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of the large number of I/O pins, the Arduino Mega board is laid out
    differently from the Uno. However, most standard Uno shields will fit on the corresponding
    connectors on the Mega board (see [Figure 6-5](#figure6-5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-5: Arduino Mega 2560 Rev3 pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno Rev3 is upwards compatible with the Arduino Mega 2560 Rev3’s
    bus. Therefore, the I²C pins appear at the same physical locations as they do
    on the Uno Rev3; however, note that electrically, these signals appear on the
    D20 and D21 signals rather than on the D18 and D19 signals of the Rev3.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.6 The Arduino Zero
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Arduino Zero is a high-performance, 32-bit board based on the ARM Cortex
    M0+. It has 256KB of flash memory for program storage and 32KB of RAM (no EEPROM).
    Electrically, there is one huge difference between the Arduino Zero and its 8-bit
    brothers: all pins on the Zero are 3.3 V, including its I²C pins. See [Figure
    6-6](#figure6-6) for the Arduino Zero pinouts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-6: Arduino Zero pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The pins on the board are laid out to be physically compatible with the Arduino
    Uno. However, keep in mind they are not *electrically* compatible, as they are
    3.3-V logic.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.7 The Arduino Due
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Arduino Due is currently the highest-performance official Arduino board.
    It has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: 32-bit CPU at 84 MHz, based on the Atmel SAM3X8E ARM Cortex M3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 512-KB flash memory for program storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 96-KB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Massive number of I/O pins (comparable to Mega 2560)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.3-V operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 6-7](#figure6-7) provides the pinouts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-7: Arduino Due pinouts'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Due is basically the 32-bit version of the Arduino Mega 2560 (but
    with 3.3-V pins). It drops four ADC inputs and replaces them with DAC and CANBUS
    ports.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.8 Other Arduino-Brand Single-Board Computers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section has covered the main SBCs available from Arduino. However, this
    chapter ignores several additional boards intended for the Internet of Things
    (IoT), and Arduino is constantly producing new products. Visit its website at
    [https://www.arduino.cc](https://www.arduino.cc) to check out the latest offerings.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Adafruit Single-Board Computers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adafruit produces many SBCs that provide I²C capability and Arduino compatibility.
    Perhaps number one on this list is the Adafruit Metro 328 ([https://www.adafruit.com/product/50](https://www.adafruit.com/product/50)),
    which is a clone of an Arduino Uno with a few improvements. Adafruit also provides
    several small form factor Arduino IDE–compatible boards. Here are some of the
    SBCs Adafruit offered as this chapter was being written. You can find technical
    information for each at the links provided:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adafruit Metro Mini 328: a “stick of gum”-sized version of the Metro 328: [https://www.adafruit.com/product/2590](https://www.adafruit.com/product/2590)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit METRO M0 Express: a 32-bit version of the Metro 328: [https://www.adafruit.com/product/3505](https://www.adafruit.com/product/3505)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit Metro M4 Express AirLift and Metro M4 Feat: 32-bit versions (AirLift
    has built-in Wi-Fi) and high speed (120 MHz) with hardware floating-point support:
    [https://www.adafruit.com/product/4000](https://www.adafruit.com/product/4000)
    and [https://www.adafruit.com/product/3382](https://www.adafruit.com/product/3382)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit Grand Central M4 Express: similar to the Arduino Due with a high-performance,
    32-bit CPU and lots of I/O pins: [https://www.adafruit.com/product/4064](https://www.adafruit.com/product/4064)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arduino Pro Mini 328: another small unit (3.3-V and 5-V versions): [https://www.adafruit.com/product/2378](https://www.adafruit.com/product/2378)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit FLORA, GEMMA M0, and Circuit Playground (or Circuit Playground Express)
    Miniature wearable electronic platform devices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Circuit Playground Express: [https://www.adafruit.com/product/3333](https://www.adafruit.com/product/3333)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Circuit Playground Classic: [https://www.adafruit.com/product/3000](https://www.adafruit.com/product/3000)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flora: [https://www.adafruit.com/product/659](https://www.adafruit.com/product/659)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gemma v2: [https://www.adafruit.com/product/1222](https://www.adafruit.com/product/1222)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gemma M0: [https://www.adafruit.com/product/3501](https://www.adafruit.com/product/3501)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit Trinket M0: a very small form factor, 32-bit SBC: [https://www.adafruit.com/product/3500](https://www.adafruit.com/product/3500)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit ItsyBitsy M0 Express and ItsyBitsy 32u4: modern versions of the Trinket
    with lots of I/O pins: [https://www.adafruit.com/product/3727](https://www.adafruit.com/product/3727)
    and [https://www.adafruit.com/product/3677](https://www.adafruit.com/product/3677)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit Bluefruit LE Micro: a mini-SBC with built-in Bluetooth: [https://www.adafruit.com/product/2661](https://www.adafruit.com/product/2661)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of the wide variety of available boards, this chapter doesn’t include
    the pinouts for each of these boards. See the Adafruit website for that information.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these SBCs, Adafruit offers a large line of Adafruit Feather
    SBCs. See section 7.1.2, “I²C on the Feather Bus,” in Chapter 7 for more information
    about the Feather bus.
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit is constantly creating new SBCs that support the I²C bus, particularly
    Feather-based units. Almost all Adafruit SBCs fully support I²C in hardware. By
    the time you’re reading this, Adafruit has probably introduced many other boards
    that do not appear here, and no doubt I’ve missed a few while fishing for information
    on the Adafruit website. Visit [https://www.adafruit.com/category/17](https://www.adafruit.com/category/17)
    to check out any new Arduino IDE–compatible units Adafruit may have developed.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 SparkFun Single-Board Computers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SparkFun is the “little brother” to Adafruit. Both companies cater to electronics
    and software hobbyists and makers by supplying a wide variety of SBCs and modules
    that plug into those SBCs. Whereas Adafruit is famous for its Feather modules,
    SparkFun is known for the creation of the Qwiic (“quick”) bus based on I²C technology.
    SparkFun provides a wide variety of SBCs that support I²C, quite often using a
    Qwiic connector. The following are some of its most recent offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SparkFun RedBoard: SparkFun’s variant of the Arduino Uno: [https://www.sparkfun.com/products/13975](https://www.sparkfun.com/products/13975)
    and [https://www.sparkfun.com/products/15123](https://www.sparkfun.com/products/15123)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun Qwiic Pro Micro, USB-C: small form factor Arduino-compatible module:
    [https://www.sparkfun.com/products/15795](https://www.sparkfun.com/products/15795)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun RedBoard Turbo: 32-bit Cortex M0+ (ARM) variant of the RedBoard: [https://www.sparkfun.com/products/14812](https://www.sparkfun.com/products/14812)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun Pro nRF52840 Mini: a mini board with Bluetooth capabilities: [https://www.sparkfun.com/products/15025](https://www.sparkfun.com/products/15025)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun Thing Plus, ESP32 WROOM: an ESP-32–based module that supports Bluetooth
    and Wi-Fi: [https://www.sparkfun.com/products/15663](https://www.sparkfun.com/products/15663)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun RedBoard Artemis Nano: a small-footprint, high-performance SBC with
    four on-board I²C ports: [https://www.sparkfun.com/products/15443](https://www.sparkfun.com/products/15443)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun RedBoard Artemis: a high-performance, 32-bit CPU with up to six independent
    I²C buses in an Arduino Uno form factor: [https://www.sparkfun.com/products/15444](https://www.sparkfun.com/products/15444)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun RedBoard Artemis ATP: a mega-footprint version of the Artemis with
    up to six I²C buses: [https://www.sparkfun.com/products/15442](https://www.sparkfun.com/products/15442)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun Thing Plus, Artemis: an Artemis module in a Feather form factor (see
    section 7.1.2, “I²C on the Feather Bus,” in Chapter 7) that supports two I²C buses:
    [https://www.sparkfun.com/products/15574](https://www.sparkfun.com/products/15574)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun Thing Plus, SAMD51: Cortex M4 (ARM)-based high-performance module
    in a very small footprint: [https://www.sparkfun.com/products/14713](https://www.sparkfun.com/products/14713)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FreeSoC2 Development Board: Freescale Cortex M3 (ARM)-based board: [https://www.sparkfun.com/products/13714](https://www.sparkfun.com/products/13714)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun RED-V RedBoard: a RISC-V–based Arduino Uno form factor board. Note
    that this board is not programmed using the Arduino IDE (at least, as this was
    being written): [https://www.sparkfun.com/products/15594](https://www.sparkfun.com/products/15594)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun RED-V Thing Plus: small form factor version of the RED-V: [https://www.sparkfun.com/products/15799](https://www.sparkfun.com/products/15799)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SparkFun Edge Development Board, Apollo3 Blue: a Cortex M4–based development
    module for edge (AI) computing: [https://www.sparkfun.com/products/15170](https://www.sparkfun.com/products/15170)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alchitry Au FPGA Development Board: not a single-board *computer* at all. This
    is a Field Programmable Gate Array (FPGA) module with I²C support. Two versions
    are available: Alchitry Au (Gold) at [https://www.sparkfun.com/products/16527](https://www.sparkfun.com/products/16527)
    and Alchitry Cu (Copper) at [https://www.sparkfun.com/products/16526](https://www.sparkfun.com/products/16526).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of the wide variety of available boards, this chapter will not include
    the pinouts for each of these boards. See the SparkFun website for that information.
    For more on the Qwiic bus in this book, see section 7.2, “I²C on the SparkFun
    Qwiic Bus,” in Chapter 7.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, you can expect that this list has expanded since this chapter was
    written. Visit the SparkFun website ([https://www.sparkfun.com](https://www.sparkfun.com))
    to check out what is currently available.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 The Teensy Family
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Teensy series from PJRC is a popular set of microcontroller boards that
    you can program using the Arduino IDE with a set of libraries that PJRC provides.
    The Teensy series is popular with designers who want to program high-performance
    embedded systems using very small (dare I say, *teensy*) MCU modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'As this was being written, PJRC was selling eight different SBC modules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Teensy 2.0: based on an 8-bit CPU (soon to be deprecated). Provides a single
    I²C port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy++ 2.0: an expanded (I/O) version of the Teensy 2.0 (also soon to be
    deprecated). Provides a single I²C port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy LC: a low-cost, 32-bit version of the Teensy, 3.3 V only. Provides two
    I²C ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy 3.2: a 32-bit, Cortex M4 (ARM) CPU running at 72 MHz (overclockable
    to 96 MHz), 3.3 V with 5-V–tolerant pins. About the size of two postage stamps.
    Provides two I²C ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy 3.5: a 32-bit, Cortex M4 CPU running at 120 MHz, 3.3 V with 5-V–tolerant
    pins. About the size of a big stick of gum. Provides three I²C ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy 3.6: a 32-bit, Cortex M4 CPU running at 180 MHz, 3.3 V only (no 5-V–tolerant
    pins). About the size of a big stick of gum. Provides four I²C ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy 4.0: a 32-bit, Cortex M7 (ARM) CPU running at 600 MHz (overclockable
    to 1 GHz), 3.3 V only. About the size of two postage stamps. Provides three I²C
    ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teensy 4.1: a 32-bit, Cortex M7 (ARM) CPU running at 600 MHz (overclockable
    to 1 GHz), 3.3V only. Expanded I/O version of Teensy 4.0 with Ethernet and SD
    card support. About the size of a big stick of gum. Provides three I²C ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Teensy I²C interfaces are hardware controlled. With Teensy-specific library
    code, you can operate these I²C interfaces at 400 MHz. Read about these SBCs at
    [https://www.pjrc.com/store/index.xhtml](https://www.pjrc.com/store/index.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 6.5 Other Arduino-Compatible Single-Board Computers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because the Arduino design is open source and open hardware, many different
    companies produce Arduino-compatible boards. You can find some Chinese knock-offs
    for less than $10 online if you look hard enough. One vendor to look at is Seeed
    Studio, which is advertising Arduino-compatible boards for less than $8 on its
    website as I was writing this ([https://www.seeedstudio.com/Seeeduino-V4-2-p-2517.xhtml](https://www.seeedstudio.com/Seeeduino-V4-2-p-2517.xhtml)).
    Seeed Studio also promotes the Grove interconnection bus (see section 7.4, “I²C
    on the Seeed Studio Grove Bus,” in Chapter 7), which has a large ecosystem of
    sensors and other devices that connect to Grove-compatible boards.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re interested in other sources of Arduino-compatible boards, check out
    the following Wikipedia page that lists Arduinos and Arduino-compatible devices:
    [https://en.wikipedia.org/wiki/List_of_Arduino_boards_and_compatible_systems](https://en.wikipedia.org/wiki/List_of_Arduino_boards_and_compatible_systems).'
  prefs: []
  type: TYPE_NORMAL
- en: Many various boards are compatible with the Arduino IDE that cover many different
    performance levels, memory capabilities, and I/O capabilities. Almost all Arduino-compatible
    boards include at least one hardware I²C interface, as I²C is one of the most
    common ways to expand the I/O capabilities of an Arduino device.
  prefs: []
  type: TYPE_NORMAL
- en: 6.6 The Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the Arduino SBCs, the Raspberry Pi is perhaps the next most popular SBC
    used for interfacing to real-world devices via I²C. [Figure 6-8](#figure6-8) shows
    the pins on the Raspberry Pi GPIO connector where the *hardware* I²C pins are
    located. I emphasize hardware because the Pi also supports software-controlled
    I²C ports (more about that a little later).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-8: GPIO pinouts on the Raspberry Pi (40-pin connector). This image
    is copyrighted by the Raspberry Pi Foundation. Use here is allowed by the Creative
    Commons 4.0 license.'
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi is a 3.3-V device. Therefore, you must connect only 3.3-V I²C
    devices to the Pi’s GPIO connector. Connecting 5-V devices could damage the Raspberry
    Pi. If you need to use 5-V devices with the Pi, be sure to use a level converter,
    such as the TXB0104 Bi-Directional Level Shifter ([https://www.adafruit.com/product/1875](https://www.adafruit.com/product/1875)).
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of known issues with the Raspberry Pi I²C interface. In particular,
    it does not support (at least at the time of writing) hardware clock stretching,
    so you cannot connect devices that add wait states by stretching the clock. However,
    you can specify a lower clock frequency; in some cases, this will solve the problem.
    It is also possible to use a software-based I²C system (using a pair of the GPIO
    pins as SDA and SCL). Software-based solutions can support clock stretching. See
    [https://github.com/fivdi/i2c-bus/blob/master/doc/raspberry-pi-software-i2c.md](https://github.com/fivdi/i2c-bus/blob/master/doc/raspberry-pi-software-i2c.md)
    for details on setting up a software-based I²C port on the Raspberry Pi. Also
    see [https://forums.raspberrypi.com/viewtopic.php?t=302381](https://forums.raspberrypi.com/viewtopic.php?t=302381)
    for information concerning clock stretching on the Pi 4.
  prefs: []
  type: TYPE_NORMAL
- en: 6.7 The Raspberry Pi Pico
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In 2021, the Raspberry Pi folks introduced their own embedded microcontroller,
    the RP2040, along with a small single-board computer, the Raspberry Pi Pico. This
    device was built to compete with the likes of Arduino boards in small, real-time
    embedded applications. The RP2040 has the following feature set:'
  prefs: []
  type: TYPE_NORMAL
- en: Dual-core Arm Cortex M0+ at 133 MHz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 264KB of on-chip RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for up to 16MB of off-chip flash memory via a dedicated QSPI bus (the
    Pico board provides 2MB of flash ROM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DMA controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpolator and integer divider peripherals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 30 GPIO pins, 4 of which can be used as analog inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two UARTs, two SPI controllers, and two I²C controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16 PWM channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One USB 1.1 controller and PHY, with host and device support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eight Raspberry Pi Programmable I/O (PIO) state machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB mass-storage boot mode with UF2 support, for drag-and-drop programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost of only $4 at the time of writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi Pico supports two independent I²C ports, which can be assigned
    to any pair of digital I/O pins on the device (see [Figure 6-9](#figure6-9)).
    The Raspberry Pi Pico is a 3.3-V device, which means you can connect only 3.3-V
    I²C devices to the Pico’s I²C pins. Connecting 5-V devices could damage the Raspberry
    Pi Pico. If you need to use 5-V devices with the Pico, use a level converter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-9: GPIO pinouts on the Raspberry Pi Pico (40-pin header). This image
    is copyrighted by the Raspberry Pi Foundation. Use here is allowed by the Creative
    Commons 4.0 license.'
  prefs: []
  type: TYPE_NORMAL
- en: Although the Raspberry Pi Pico isn’t the speediest little board around (the
    Teensy 4.*x* probably holds that honor among the more popular low-cost boards),
    at 133 MHz, it’s no sloth. Furthermore, unlike most Arduino-class SBCs, the Pico
    actually has two CPU cores on board, which you can program using the Pico SDK
    (C/C++) or Micro Python. At the time of writing, some enterprising individuals
    had actually hacked the Arduino IDE to program the Pico. Shortly afterward, Arduino
    provided official support ([https://www.tomshardware.com/news/raspberry-pi-pico-arduino-official](https://www.tomshardware.com/news/raspberry-pi-pico-arduino-official)).
  prefs: []
  type: TYPE_NORMAL
- en: 6.8 The BeagleBone Black
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The BeagleBone Black is a low-cost, open source, and open hardware alternative
    to the Raspberry Pi. Technically, it provides three separate I²C interfaces, although
    only one pair of lines (I2C2) is available in the standard (default) configuration.
    The SCL and SDA lines appear on pins 19 and 20, respectively, of the P9 connector
    on the BeagleBone Black (see [Figure 6-10](#figure6-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the Raspberry Pi, the BeagleBone Black seems to support clock stretching
    just fine. The I²C interface(s) can run at 100 kHz or 400 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-10: P9 pinouts on BeagleBone Black'
  prefs: []
  type: TYPE_NORMAL
- en: 6.9 The PINE A64 and ROCKPro64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PINE A64 and ROCKPro64 SBCs were an attempt to make a very low-cost, 64-bit,
    Raspberry Pi–like system. The original Pine A64 sold for $15\. The ROCKPro64 was
    a higher-end unit featuring on-board EMMC (flash) memory, six compute cores, USB-C/3.0,
    a PCI-e slot, and much more. Both boards include a 40-pin connector that is compatible
    with the Raspberry Pi GPIO connector, including the I²C interface.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the PINE64 products, visit [https://www.pine64.org](https://www.pine64.org).
  prefs: []
  type: TYPE_NORMAL
- en: 6.10 The Onion Omega
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Onion Omega series is composed of some very tiny, low-cost SBCs running
    Linux variants. The Onion Omega2+ features an MT7688 SoC that incorporates a 580-MHz
    MIPS CPU, Wi-Fi, and 10/100 Mbs Ethernet. It includes 128MB of DDR2 DRAM memory
    and 32MB of on-board flash storage—and it supports I²C. A typical Onion Omega2+
    module sells for under $15, though the purchase of other modules in the system
    might raise the price depending on what features you add.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Onion Omega2+ modules are very small (about 1 inch × 1.7 inches,
    or 2.5 cm × 4.4 cm), the actual system size is a bit larger because the Onion
    system consists of a series of stackable modules. For example, to gain easy access
    to the I²C pins, you’ll likely want to use an Onion Dock module (though this is
    optional, as the Omega Onion2+ module has some breadboard-friendly I²C pins that
    you can wire directly into a circuit). The Omega2 pinout appears in [Figure 6-11](#figure6-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c06/f06011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-11: Onion Omega2+ pinout'
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Onion products at [https://onion.io/omega2](https://onion.io/omega2).
    SparkFun sells the Onion Omega line; visit its site at [https://www.sparkfun.com/search/results?term=onion](https://www.sparkfun.com/search/results?term=onion).
  prefs: []
  type: TYPE_NORMAL
- en: 6.11 The STM32 Single-Board Computer Family
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: STMicroelectronics produces a wide set of development boards for its ARM microcontrollers.
    These SBCs provide different evaluation environments for CPUs operating at different
    speeds and with varying amount of I/O. Many of the units are programmable using
    the Arduino IDE, although STMicroelectronics provides its own development software
    for more professional use, as well as the MBED real-time operating system running
    on various STM32 boards.
  prefs: []
  type: TYPE_NORMAL
- en: Although the list of STMicroelectronics boards is too long to include here,
    the following sections provide details on a few of the boards used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 6.11.1 STM32F767/Nucleo-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The STM32F767/Nucleo-144 is based on an ARM Cortex M7 at 216 MHz. It comes with
    2-MB flash memory, 512-KB RAM, USB and Ethernet interfaces, and other I/O. It
    provides a set of headers that are compatible with Arduino Uno V3 (though 3.3
    V only).
  prefs: []
  type: TYPE_NORMAL
- en: Because the STM32F767/Nucleo-144 provides a (3.3 V) set of connections that
    is mostly compatible with Arduino Uno, you can find the I²C pins in the usual
    place, which turns out to be pins PB8 (SCL) and PB9 (SDA) on the device (also
    corresponding to Arduino A4 and A5 pins). For more information on this board,
    see [https://www.st.com/en/evaluation-tools/nucleo-f767zi.xhtml](https://www.st.com/en/evaluation-tools/nucleo-f767zi.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 6.11.2 STM32F746G-Disco
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The STM32F746G-Disco (as in discovery kit, not disco music) is another 216-MHz,
    M7 device with an Arduino-compatible pinout (though still only 3.3 V), a color
    LCD display, Ethernet, USB, audio, camera interface, and other I/O. As it contains
    an Arduino-compatible shield connector, you can find the I²C pins in the usual
    place. For more information, visit the STMicroelectronics website for this module
    at [https://www.st.com/en/evaluation-tools/32f746gdiscovery.xhtml](https://www.st.com/en/evaluation-tools/32f746gdiscovery.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 6.11.3 STM32 Boards Galore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: STMicroelectronics makes a wide variety of evaluation boards with different
    amounts and types of I/O. If you’re interested in these boards, visit the product
    evaluation website at [https://www.st.com/en/evaluation-tools/mcu-mpu-eval-tools.xhtml#products](https://www.st.com/en/evaluation-tools/mcu-mpu-eval-tools.xhtml#products).
  prefs: []
  type: TYPE_NORMAL
- en: 6.12 The NetBurner MOD54415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the SBCs appearing in this chapter could probably be labeled hobbyist,
    discovery, or evaluation devices. Although plenty of real-world professional systems
    use these boards, professional embedded engineers might question the pedigree
    of such SBCs. Personally, I avoid religious or elitist arguments about what is
    “professional” and what is “hobbyist.” If a board does the job, that’s a sufficient
    argument for using it. Nevertheless, a big world exists beyond Arduino and Raspberry
    Pi single-board computers, and I would be remiss not to mention at least one example
    of a serious SBC commonly used in real-world professional embedded applications.
  prefs: []
  type: TYPE_NORMAL
- en: One such board is the NetBurner MOD54415 SBC, a small board built around a 250-MHz
    Coldfire CPU running the µC/OS real-time operating system (NetBurner also has
    the MODM7AE70, a Cortex M7 variant running at 300 MHz). The well-written TCP/IP
    stack and the use of an RTOS differentiate the NetBurner offerings from many of
    the hobbyist-level products. I’ll provide several programming examples using the
    MOD54415 later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on NetBurner products, see [https://www.netburner.com](https://www.netburner.com).
  prefs: []
  type: TYPE_NORMAL
- en: 6.13 I²C on the Personal Computer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although most PCs (Windows, macOS, and Linux) support I²C communication for
    internal reasons (for example, SMBus for power management and VESA E-DDC on displays),
    few user programs have access to these I²C controllers. Even if they did, you
    couldn’t easily attach I²C peripherals to these buses. Wouldn’t it be nice if
    there were an I²C port on your PC to interface to I²C peripherals directly?
  prefs: []
  type: TYPE_NORMAL
- en: Well, there are several ways to do this. Of course, you could use an Arduino
    or other SBC as a coprocessor connected to a PC to handle I²C communications.
    However, that’s a lot of work. Another way to do this is to grab a Bus Pirate
    or I²C Driver device (see section 4.3, “The I²C Driver,” and section 4.4, “The
    Bus Pirate”). These devices allow you to send commands from the PC to an I²C bus
    using various commands (from a terminal window with the Bus Pirate or from an
    application with the I²C Driver). While using these devices makes it possible
    to control I²C from a PC application, it’s not very convenient.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, FTDI ([https://www.ftdichip.com](https://www.ftdichip.com)) has
    created an IC that does most of the work for you. The folks at Adafruit have built
    a little board with this chip on it to allow you to control I²C from a PC’s USB
    port. This device is the Adafruit FT232H Breakout – General Purpose USB to GPIO,
    SPI, I2C – USB C & Stemma QT/Qwiic ([https://www.adafruit.com/product/2264](https://www.adafruit.com/product/2264)).
    As its name suggests, it connects the USB to the I²C bus, to the SPI bus, or to
    generic GPIO pins. Along with some libraries that FTDI provides, you can easily
    control I²C peripherals directly from a PC application.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the FT232H Breakout, Adafruit sells a little board, the Adafruit
    MCP2221A Breakout – General Purpose USB to GPIO ADC I2C – Stemma QT/Qwiic ([https://www.adafruit.com/product/4471](https://www.adafruit.com/product/4471))
    that is also capable of driving an I²C bus from a USB. While it doesn’t provide
    as many GPIO pins as the FT232H Breakout, it is about half the price. It also
    includes a Qwiic connector (*Stemma QT* in Adafruit-speak) for easy connection
    to Qwiic-compatible devices.
  prefs: []
  type: TYPE_NORMAL
- en: 6.14 Chapter Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter provided a generic overview of numerous hobbyist- and professional-level
    SBCs that support I²C communication and concluded with a brief mention of controller
    I²C devices using a traditional PC. Its list of SBCs is by no means exhaustive.
    If you want more information about the products this chapter discusses, see the
    web links associated with each item. To delve into the many SBCs not discussed
    here, see “For More Information” next.
  prefs: []
  type: TYPE_NORMAL
