["```\n\n      #include <avr/interrupt.h>\n\n```", "```\n\n      EICRA = 0b0000\n      `abcd` \n      ;\n\n```", "```\n\n      EICRA = 0b00000011; // INT0 rising edge\n\n```", "```\n\n      EIMSK = 0b000000\n      `ab` \n      ;\n\n```", "```\n\n      EIMSK = 0b00000001;\n\n```", "```\n\n      sei();\n\n```", "```\n\n      #include <avr/interrupt.h> // Enable the interrupt library\n\n      EICRA = 0b0000\n      `abcd` \n      ;        // Determine which state changes the interrupt pin responds to\n\n      EIMSK = 0b000000\n      `ab` \n      ;        // Turn on the required interrupt\n\n      sei();    // Enable interrupts in your code\n\n```", "```\n\n      ISR (INT\n      `x` \n      _vect)\n\n      {\n\n      // Code to be executed when an interrupt is triggered\n\n      EIFR =\n      `y` \n      ;\n\n      }\n\n```", "```\n\n      EIFR =\n      `y` \n      ;\n\n```", "```\n\n      EIFR &= ~(1<<0); // Set interrupt flag register for INT0 to zero\n\n      EIFR &= ~(1<<1); // Set interrupt flag register for INT1 to zero\n\n```", "```\n\n      // Project 22 - Experimenting with Rising Edge Interrupts\n\n      // Blink PORTB. If button pressed, turn on PORTB for 2 seconds.\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      #include <avr/interrupt.h>\n\n      ISR (INT0_vect)\n\n      {                     // Code to be executed when interrupt is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(2000);\n\n      ❶ PORTB = 0b00000000;\n\n      ❷ EIFR = 0b00000001; // Clear external interrupt flag register\n\n      }\n\n      void startInt0()\n\n      {\n\n      // Initialize interrupt 0 (PD2/INT0/pin 4)\n\n      // Rising edge (LOW to HIGH at pin 4)\n\n      ❸ EICRA = 0b00000011;\n\n      // Turn on interrupt INT0\n\n      ❹ EIMSK = 0b00000001;\n\n      // Turn on global interrupt enable flag in order for interrupts to be processed\n\n      sei();\n\n      }\n\n      int main(void)\n\n      {\n\n      // Declare global variables\n\n      // Set up GPIO pins etc.\n\n      ❺ DDRB = 0b11111111; // Set PORTB register as outputs\n\n      ❻ DDRD = 0b00000000; // Set PORTD pins 4 and 5 as inputs\n\n      // Initialize interrupt\n\n      startInt0();\n\n      for(;;)\n\n      ❼ {\n\n      // Blink LED connected to PB7 (pin 10)\n\n      PORTB = 0b00000001;\n\n      _delay_ms(50);\n\n      PORTB = 0b00000000;\n\n      _delay_ms(50);\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n      // Project 23 - Experimenting with Falling Edge Interrupts\n\n      // Blink PORTB. If button is pressed, turn on PORTB for 2 seconds.\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      #include <avr/interrupt.h>\n\n      ISR (INT0_vect) {     // Code to be executed when interrupt is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(2000);\n\n      PORTB = 0b00000000;\n\n      EIFR = 0b00000001;\n\n      }\n\n      void startInt0()\n\n      {\n\n      // Initialize interrupt 0 (PD2/INT0/pin 4)\n\n      // Falling edge (HIGH to LOW at pin 4)\n\n      ❶ EICRA = 0b00000010;\n\n      // Turn on interrupt INT0\n\n      EIMSK = 0b00000001;\n\n      // Turn on global interrupt enable flag for interrupts to be processed\n\n      sei();\n\n      }\n\n      int main(void)\n\n      {\n\n      // Declare global variables\n\n      // Set up GPIO pins etc.\n\n      DDRB = 0b11111111; // Set PORTB register as outputs\n\n      DDRD = 0b00000000; // Set PORTD pins 4 and 5 as inputs\n\n      // Initialize interrupt\n\n      startInt0();\n\n      for(;;)\n\n      {\n\n      PORTB = 0b00000001;\n\n      _delay_ms(50);\n\n      PORTB = 0b00000000;\n\n      _delay_ms(50);\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n      // Project 24 - Experimenting with Two Interrupts\n\n      // PORTB blinks, INT0 rising interrupt, INT1 falling interrupt\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      #include <avr/interrupt.h>\n\n      ISR (INT0_vect)\n\n      {                     // Code to be executed when interrupt INT0 is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(1000);\n\n      PORTB = 0b00000000;\n\n      EIFR &= ~(1<<0);   // Set interrupt flag register for INT0 to zero\n\n      }\n\n      ISR (INT1_vect)\n\n      {                     // Code to be executed when interrupt INT1 is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(2000);\n\n      PORTB = 0b00000000;\n\n      EIFR &= ~(1<<1);   // Set interrupt flag register for INT1 to zero\n\n      }\n\n      void startInts()\n\n      {\n\n      // Initialize interrupt 0 (PD2/INT0/pin 4)\n\n      // Rising edge (LOW to HIGH at pin 4)\n\n      // Initialize interrupt 1 (PD3/INT1/pin 5)\n\n      // Falling edge (HIGH to LOW at pin 5)\n\n      ❶ EICRA = 0b00001011;\n\n      // Turn on interrupts INT0 and INT1\n\n      ❷ EIMSK = 0b00000011;\n\n      // Turn on global interrupt enable flag for interrupts to be processed\n\n      sei();\n\n      }\n\n      int main(void)\n\n      {\n\n      // Declare global variables\n\n      // Set up GPIO pins etc.\n\n      ❸ DDRB = 0b11111111; // Set PORTB register as outputs\n\n      ❹ DDRD = 0b00000000; // Set PORTD pins 4 and 5 as inputs\n\n      // Initialize interrupts\n\n      startInts();\n\n      for(;;)\n\n      ❺ {\n\n      PORTB = 0b00000001;\n\n      _delay_ms(50);\n\n      PORTB = 0b00000000;\n\n      _delay_ms(50);\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n     #include <avr/interrupt.h>\n\n```", "```\n\n     PCICR = 0b00000\n     `xyz` \n     ;\n\n```", "```\n\n     PCICR = 0b00000101;\n\n```", "```\n\n     PCMSK0 = 0b00000010; // We'll use PCINT1 (pin 15) for bank 0 ...\n\n     PCMSK1 = 0b00000001; // and use PCINT8 (pin 23) for bank 1 ...\n\n     PCMSK2 = 0b10000000; // and use PCINT23 (pin 13) for bank 2\n\n```", "```\n\n     sei();\n\n```", "```\n\n     ISR (PCINT\n     `x` \n     _vect)\n\n     {\n\n     // Code to be executed when interrupt is triggered\n\n     EIFR &= ~(1<<\n     `x` \n     ); // Set interrupt flag register to zero\n\n     }\n\n```", "```\n\n     PCIFR =\n     `y` \n     ;\n\n```", "```\n\n      // Project 25 - Experimenting with Pin-Change Interrupts\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      #include <avr/interrupt.h>\n\n      ISR (PCINT0_vect)\n\n      {   // Code to be executed when PCI bank 0 PCINT1 pin 15 is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(1000);\n\n      PORTB = 0b00000000;\n\n      PCIFR = 0b00000001;\n\n      }\n\n      ISR (PCINT1_vect)\n\n      {   // Code to be executed when PCI bank 1 PCINT8 pin 23 is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(2000);\n\n      PORTB = 0b00000000;\n\n      PCIFR = 0b00000010;\n\n      }\n\n      ISR (PCINT2_vect)\n\n      {   // Code to be executed when PCI bank 2 PCINT23 pin 13 is triggered\n\n      PORTB = 0b11111111;\n\n      _delay_ms(3000);\n\n      PORTB = 0b00000000;\n\n      PCIFR = 0b00000100;\n\n      }\n\n      void startInts()\n\n      {\n\n      ❶ PCICR = 0b00000111;  // Activate all three PCIs\n\n      PCMSK0 = 0b00000010; // We'll use PCINT1 (pin 15) for bank 0 ...\n\n      PCMSK1 = 0b00000001; // and use PCINT8 (pin 23) for bank 1 ...\n\n      PCMSK2 = 0b10000000; // and use PCINT23 (pin 13) for bank 2\n\n      sei();\n\n      }\n\n      int main(void)\n\n      {\n\n      // Set up GPIO pins etc.\n\n      ❷ DDRB = 0b11111101;  // Set up PORTB register (pin 15 input, rest outputs)\n\n      DDRC = 0b00000000;  // Set up PORTC register (all inputs)\n\n      DDRD = 0b01111111;  // Set up PORTD register (pin 13 input, rest outputs)\n\n      // Initialize interrupts\n\n      startInts();\n\n      for(;;)\n\n      {\n\n      // Blink LED connected to PB7 (pin 10)\n\n      ❸ PORTB = 0b00000001;\n\n      _delay_ms(50);\n\n      PORTB = 0b00000000;\n\n      _delay_ms(50);\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n      // Project 26 - Creating an Up/Down Counter Using Interrupts\n\n      #include <avr/io.h>\n\n      #include <stdlib.h>\n\n      #include <util/delay.h>\n\n      #include <avr/interrupt.h>\n\n      #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      ❶ volatile uint8_t i = 100; // Initial value for counter\n\n      void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data frame format to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      void USARTSendByte(uint8_t u8Data)\n\n      {\n\n      // Wait while previous byte is sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = u8Data;\n\n      }\n\n      void sendString(char myString[])\n\n      {\n\n      uint8_t a = 0;\n\n      while (myString[a])\n\n      {\n\n      USARTSendByte(myString[a]);\n\n      a++;\n\n      }\n\n      }\n\n      ❷ ISR (INT0_vect)\n\n      {                   // Code to be executed when interrupt INT0 is triggered\n\n      i = i - 1;       // Subtract one from the counter\n\n      EIFR &= ~(1<<0); // Set interrupt flag register for INT0 to zero\n\n      }\n\n      ❸ ISR (INT1_vect)\n\n      {                   // Code to be executed when interrupt INT1 is triggered\n\n      i = i + 1;       // Add one to the counter\n\n      EIFR &= ~(1<<1); // Set interrupt flag register for INT1 to zero\n\n      }\n\n      ❹ void startInts()\n\n      {\n\n      // Initialize interrupt 0 (PD2/INT0/pin 4)\n\n      // Rising edge (LOW to HIGH at pin 4)\n\n      // Initialize interrupt 1 (PD3/INT1/pin 5)\n\n      // Rising edge (LOW to HIGH at pin 5)\n\n      EICRA = 0b00001111;\n\n      // Turn on interrupts INT0 and INT1\n\n      EIMSK = 0b00000011;\n\n      // Turn on global interrupt enable flag\n\n      sei();\n\n      }\n\n      int main(void)\n\n      {\n\n      char a[10] = \"Count - \"; // Make sure you have \" instead of ”\n\n      char s[10] = \"\";         // For our itoa() conversion used in the main loop\n\n      char newline[] = \"\\r\\n\";\n\n      // Set up pins 4 and 5 as inputs for INT0 and INT1\n\n      DDRD = 0b00000000;\n\n      // Initialize interrupts\n\n      startInts();\n\n      // Initialize USART\n\n      USARTInit();\n\n      for(;;)\n\n      {\n\n      // Send the value of our counter to the USART for display on the PC\n\n      itoa(i, s, 10);\n\n      sendString(a);\n\n      sendString(s);\n\n      sendString(newline);\n\n      _delay_ms(1000);\n\n      }\n\n      return 0;\n\n      }\n\n```"]