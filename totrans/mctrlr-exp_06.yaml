- en: '**6 NipPEr Is a buTt liCkeR**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6 NipPEr 是个舔屁股的家伙**'
- en: In this chapter, we’ll discuss a buffer overflow vulnerability in a Dish Network
    smart-card, which was the subject of the famous lawsuit between EchoStar and NDS.
    The first public explanation of this bug was a short forum post, NipperClauz (2000),
    but thanks to the trial, we have far more detailed documentation in the form of
    a secret NDS internal tech report, Mordinson (1998).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Dish Network智能卡中的缓冲区溢出漏洞，该漏洞曾是EchoStar与NDS之间著名诉讼的主题。这个漏洞的首次公开解释是一篇简短的论坛帖子，NipperClauz（2000），但由于审判的原因，我们通过一份秘密的NDS内部技术报告Mordinson（1998）获得了更详细的文档。
- en: First, let’s set the stage. This smart-card was used in North America for Dish
    Network’s satellite TV service, where it would calculate a short-lived decryption
    key for the receiver. The chip inside is an ST16CF54 chip from ST Microelectronics,
    then known as SGS Thomson. The instruction set is mostly compatible with Motorola
    6805, except for the additional instructions TSA (`0x9E`) and MUL (`0x42`). The
    chip contains 16kB of user ROM, 8kB of system ROM, 4kB of EEPROM/OTP, and 480
    bytes of SRAM. The user ROM was developed by Nagra while the system ROM was developed
    by SGS Thomson.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设定场景。此智能卡曾在北美用于Dish Network的卫星电视服务，它将为接收器计算一个短时有效的解密密钥。芯片内部是STMicroelectronics的ST16CF54芯片，当时称为SGS
    Thomson。指令集大部分与摩托罗拉6805兼容，除了额外的指令TSA（`0x9E`）和MUL（`0x42`）。该芯片包含16kB的用户ROM、8kB的系统ROM、4kB的EEPROM/OTP和480字节的SRAM。用户ROM由Nagra开发，而系统ROM由SGS
    Thomson开发。
- en: '[Figure 6.1](ch06.xhtml#ch6fig1) shows the memory layout of the chip, and [Figure
    6.2](ch06.xhtml#ch6fig2) the EEPROM layout. Note that the EEPROM is mirrored to
    three additional address ranges, such that each EEPROM byte can be read from four
    unique addresses. A similar mirroring effect, sometimes called ghosting, will
    become very important later in this chapter, just as it was in [Chapter 5](ch05.xhtml#ch05).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6.1](ch06.xhtml#ch6fig1)显示了芯片的内存布局，[图6.2](ch06.xhtml#ch6fig2)显示了EEPROM的布局。请注意，EEPROM被镜像到三个额外的地址范围，因此每个EEPROM字节可以从四个独特的地址中读取。类似的镜像效应，有时称为幽灵效应，稍后在本章中将变得非常重要，就像在[第五章](ch05.xhtml#ch05)中一样。'
- en: EEPROM patches consist of a single byte for the patch number, and a byte pair
    for the handler address of that patch. They are called before sensitive functions
    in a switch table, but there is no mechanism for patching ROM bugs that are not
    preceded by calls to the patch handler.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: EEPROM补丁由一个补丁编号的单字节和一个补丁处理程序地址的字节对组成。它们会在开关表中的敏感功能之前被调用，但没有补丁处理程序调用前无法修补ROM错误的机制。
- en: '![Image](../images/f0064-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0064-01.jpg)'
- en: 'Figure 6.1: ST16CF54 Memory Map'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：ST16CF54内存映射
- en: '![Image](../images/f0064-02.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0064-02.jpg)'
- en: 'Figure 6.2: Nagra1/Rom3 EEPROM Map'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：Nagra1/Rom3 EEPROM映射
- en: '![Image](../images/f0065-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0065-01.jpg)'
- en: 'Figure 6.3: Delayered ST16CF54A'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：去除延迟的ST16CF54A
- en: A treasure trove of documentation for this card can be found in Guy (2000b),
    and an annotated disassembly of the complete ROM is available in Guy (2000a).
    The only public documentation used to be a three-page marketing brief, but a copy
    of the real datasheet was exposed in court records in STMicro (1996). It is complete
    except for a missing companion document that describes the system ROM.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这张卡的文档宝库可以在Guy（2000b）中找到，完整ROM的注释反汇编版本可以在Guy（2000a）中获得。唯一的公开文档曾经是一个三页的营销简报，但在STMicro（1996）的法庭记录中曝光了真实的数据手册副本。除了缺少描述系统ROM的附带文档外，它是完整的。
- en: '**The Bug**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**漏洞**'
- en: The bug itself is an overflow in a statically allocated byte buffer that first
    holds the incoming APDU packet, and is later reused for the outgoing reply. That
    much is a textbook buffer overflow, but there are a few complications to work
    around.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞本身是一个静态分配的字节缓冲区溢出，它首先保存传入的APDU数据包，随后被重新用于传出的回复。这是一个典型的缓冲区溢出，但有一些复杂的情况需要绕过。
- en: First, the buffer sits at `0x019C`, where it is the very last thing in SRAM.
    Smart-card packets can be up to 255 bytes long, but there are only 100 bytes before
    SRAM ends at `0x01FF`. After that, the official memory map shows a large gap before
    the system ROM.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，缓冲区位于`0x019C`，它是SRAM中的最后一项。智能卡数据包最大可以达到255字节长，但在SRAM结束（`0x01FF`）之前，只有100字节。之后，官方内存映射显示系统ROM之前有一个较大的空白区域。
- en: The trick here, which makes the bug exploitable, is that SRAM is ghosted in
    memory. Past the end of SRAM and 132 bytes into our 100-byte buffer, a write to
    `0x0220` is the same as a write to `0x0020` or a write to `0x0420`. So even though
    the buffer that we are overflowing comes *after* global variables and the call
    stack, we can use the ghosting effect to loop back to the beginning of memory
    and corrupt useful things.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的技巧使得该漏洞可被利用，原因在于SRAM在内存中有幽灵效应。超出SRAM末尾132字节并进入我们100字节缓冲区时，写入`0x0220`的效果与写入`0x0020`或`0x0420`相同。因此，尽管我们溢出的缓冲区在全局变量和调用栈之后，我们仍然可以利用幽灵效应从内存的开头开始循环，并破坏有用的数据。
- en: There is no ghosting effect for the registers that sit from `0x00` to `0x1F`,
    so we won’t need to carefully choose those values in the same way that we’ll try
    to preserve SRAM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从`0x00`到`0x1F`的寄存器，没有幽灵效应，因此我们不需要像尝试保护SRAM一样仔细选择这些值。
- en: One other effect worth watching is that a global variable early in SRAM holds
    the index into the receive buffer. The packet is received one byte at a time;
    when that variable is overwritten, the target location will jump for the rest
    of the byte copies. This is useful for shaving some bytes off of the packet, but
    if you ignore it, your exploit will go off the rails and land in the wrong location.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得关注的效果是，SRAM中较早位置的全局变量保存了接收缓冲区的索引。数据包是逐字节接收的；当该变量被覆盖时，目标位置将在其余字节拷贝时发生跳转。这对于削减数据包的字节数很有用，但如果忽略它，漏洞可能会失效，导致程序崩溃或调整UART时序。
- en: '![Image](../images/f0067-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0067-01.jpg)'
- en: 'Figure 6.4: Forum Posting of NipperClauz (2000)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：NipperClauz（2000）论坛帖子
- en: '**NipperClauz Exploit**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**NipperClauz 漏洞**'
- en: Now that we’ve covered the theory, let’s dig into the first public example,
    NipperClauz (2000). The forum posting is reproduced in [Figure 6.4](ch06.xhtml#ch6fig4),
    and in this section we’ll disassemble it to understand how it works.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经覆盖了理论部分，接下来深入探讨第一个公开示例，NipperClauz（2000）。论坛帖子在[图6.4](ch06.xhtml#ch6fig4)中重现，在本节中我们将对其进行反汇编，理解它是如何工作的。
- en: These first three bytes are the transaction header, where `0xC4` is the length.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这前三个字节是事务头，其中`0xC4`表示长度。
- en: '![Image](../images/f0068-01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0068-01.jpg)'
- en: After that, we have many lines of counting bytes that look like garbage, sometimes
    interrupted by a more meaningful byte. Many of these bytes don’t matter, but the
    latter ones do overwrite global variables, and having the wrong value there might
    break the exploit by crashing the application or adjusting UART timing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之后是很多看似无意义的字节计数行，有时被更有意义的字节打断。这些字节大部分无关紧要，但后面的字节确实会覆盖全局变量，若这些变量的值错误，可能会导致漏洞失效，甚至导致应用崩溃或调整UART时序。
- en: Shellcode begins halfway through line 35, and it calls back into the ROM’s function
    for transmitting a byte at `0x42d7` to remain quite short.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Shellcode从第35行中间开始，它回调ROM中的字节传输函数，地址是`0x42d7`，以保持较短的长度。
- en: '![Image](../images/f0068-02.jpg)![Image](../images/f0069-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0068-02.jpg)![Image](../images/f0069-01.jpg)'
- en: The exploit ends with some filler and a checksum byte.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞的结束部分包含一些填充和一个校验字节。
- en: '![Image](../images/f0069-02.jpg)![Image](../images/f0069-03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0069-02.jpg)![Image](../images/f0069-03.jpg)'
- en: '**NDS Headend Exploit**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**NDS 主机端漏洞**'
- en: Appendix F of Mordinson (1998) describes a different exploit for the same bug.
    The following is the original exploit from that report in the `nasm` assembler
    format, with minor changes to comments.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Mordinson（1998）附录F描述了相同漏洞的另一种利用方式。以下是该报告中的原始漏洞代码，采用`nasm`汇编格式，注释做了些微的修改。
- en: Note how clean the comments are, explaining nearly every instruction and providing
    the exact address at which it is loaded into memory. Rather than call back into
    the ROM’s function for transmitting a byte, it instead implements its own function
    for this at `0x01c8`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意评论的清晰度，几乎解释了每一条指令，并提供了加载到内存中的确切地址。它没有调用ROM中用于传输字节的函数，而是实现了自己的传输函数，地址是`0x01c8`。
- en: '![Image](../images/f0070-01.jpg)![Image](../images/f0071-01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0070-01.jpg)![Image](../images/f0071-01.jpg)'
- en: '**A Modern Exploit in Go**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Go语言中的现代漏洞**'
- en: Both of those exploits will successfully dump the card’s EEPROM. This book is
    about writing exploits, not running them, so I ordered a dozen satellite receivers
    and assorted card collections until I found some that were vulnerable. In this
    section, we’ll cover Goodspeed (2022), my exploit for the cards, which runs on
    modern computers with USB smart-card adapters, dumping not just the EEPROM but
    also the user ROM and what SRAM it doesn’t corrupt.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个漏洞都可以成功地转储卡片的EEPROM。本书的内容是编写漏洞，而不是运行漏洞，因此我订购了十几个卫星接收器和各种卡片，直到我找到一些易受攻击的卡片。在本节中，我们将介绍Goodspeed（2022），我为这些卡片编写的漏洞，它可以在现代计算机上运行，配合USB智能卡适配器，不仅转储EEPROM，还包括用户ROM和它没有损坏的SRAM。
- en: To get your own card, simply collect a bunch of them and then read the Answer
    To Reset (ATR) of the cards. You’re looking for one whose ROM reads as `DNASP003`
    (meaning ROM3) and whose EEPROM version reads as `Rev272` or earlier. A few of
    my cards falsely present a later EEPROM revision to pretend that they have been
    patched, so don’t always believe the version number when it tells you the card
    is not vulnerable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得你自己的卡片，只需收集一堆卡片，然后读取卡片的复位应答（ATR）。你要找的是那些ROM显示为`DNASP003`（表示ROM3）并且其EEPROM版本显示为`Rev272`或更早的卡片。我的一些卡片错误地显示了较新的EEPROM版本，以假装它们已经被修补，因此不要总是相信版本号告诉你卡片不是易受攻击的。
- en: These cards have already been hacked for TV piracy, of course. Hacked cards
    can also be recognized when the electronic serial number disagrees with the printed
    serial number.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些卡片当然已经被破解用于电视盗版。被破解的卡片也可以通过电子序列号与打印的序列号不一致来识别。
- en: The first complication is that the Headend and NipperClauze exploits dump back
    all EEPROM in a single transaction. Smart-card transactions have a one byte length
    field and a checksum, so the response is a lot more data than the length field
    ought to allow and the checksum is always wrong. That wasn’t a problem when these
    were written in the Nineties, but modern smart-card adapters use USB instead of
    a serial port. USB’s smart-card standard (CCID) abstracts away packets, requiring
    that all lengths and checksums be correct.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个复杂问题是，Headend和NipperClauze漏洞会在一次交易中转储所有EEPROM。智能卡交易有一个字节的长度字段和一个校验和，因此响应数据比长度字段应允许的更多，并且校验和总是错误的。当这些漏洞是在90年代编写时，这并不是问题，但现代智能卡适配器使用USB而不是串口。USB的智能卡标准（CCID）抽象了数据包，要求所有长度和校验和都正确。
- en: To solve this, I reduced my transactions to 64 bytes and wrote shellcode that
    accepts a base address for the dump. Like the other exploits, mine does not support
    clean continuation. I found it convenient to avoid continuation hassles by simply
    resetting the card for every transaction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我将交易缩减为64字节，并编写了一个接受转储基础地址的shellcode。像其他漏洞一样，我的代码不支持干净的续传。我发现通过在每次交易时重置卡片来避免续传的麻烦是很方便的。
- en: '![Image](../images/f0073-01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0073-01.jpg)'
- en: 'Figure 6.5: Revision 369 EEPROM Dump'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：修订版369 EEPROM转储
- en: You will note that my shellcode does not include the three byte header or one
    byte footer of the other examples. This is because the PCSC daemon automatically
    applies the header and checksum to the transaction. As the shellcode dumps just
    64 bytes per execution, the start address must be written into the `ld a, (target+1,
    x)` instruction in the loop, where `0xFFFF` sits in the listing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我的shellcode没有包括其他示例中的三个字节的头部或一个字节的尾部。这是因为PCSC守护进程会自动将头部和校验和应用到交易中。由于shellcode每次执行只转储64字节，因此必须将起始地址写入循环中的`ld
    a, (target+1, x)`指令中，其中`0xFFFF`位于清单中。
- en: To transmit a reply back to the host, the shellcode jumps into a user ROM function
    at `0x757f`. This is the normal function that the ROM uses for transmitting its
    messages, which is a little smaller than reusing the function for transmitting
    a byte, as the NipperClauz shellcode does. It’s also smaller than implementing
    a completely custom transmitting function, as in the Headend exploit.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将回复传回主机，shellcode跳转到`0x757f`的用户ROM函数。这是ROM用于传输消息的正常函数，比像NipperClauz shellcode那样重新利用传输一个字节的函数要小一点。它也比实现一个完全自定义的传输函数要小，正如Headend漏洞所做的那样。
- en: '![Image](../images/f0074-01.jpg)![Image](../images/f0075-01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0074-01.jpg)![Image](../images/f0075-01.jpg)'
