["```\ntr '[a-zA-Z]' '[n-za-mN-ZA-M]'\n```", "```\n$ echo \"So two people walk into a bar...\" | tr '[a-zA-Z]' '[n-za-mN-ZA-M]'\nFb gjb crbcyr jnyx vagb n one...\n```", "```\n$ echo 'Fb gjb crbcyr jnyx vagb n one...' | tr '[a-zA-Z]' '[n-za-mN-ZA-M]'\nSo two people walk into a bar...\n```", "```\n$ echo HAL | tr '[a-zA-Z]' '[b-zaB-ZA]'\nIBM\n```", "```\ntestit=\"$(echo $@ | sed 's/[^[:alpha:]]//g' | tr '[:upper:]' '[:lower:]')\"\nbackward=\"$(echo $testit | rev)\"\n\nif [ \"$testit\" = \"$backward\" ] ; then\n  echo \"$@ is a palindrome\"\nelse\n  echo \"$@ is not a palindrome\"\nfi\n```", "```\n   #!/bin/bash\n   # unscramble--Picks a word, scrambles it, and asks the user to guess\n   #   what the original word (or phrase) was\n\n   wordlib=\"/usr/lib/games/long-words.txt\"\n\n   scrambleword()\n   {\n     # Pick a word randomly from the wordlib and scramble it.\n     #   Original word is $match, and scrambled word is $scrambled.\n\n     match=\"$(➊randomquote $wordlib)\"\n\n     echo \"Picked out a word!\"\n\n     len=${#match}\n     scrambled=\"\"; lastval=1\n\n     for (( val=1; $val < $len ; ))\n     do\n➋     if [ $(($RANDOM % 2)) -eq 1 ] ; then\n         scrambled=$scrambled$(echo $match | cut -c$val)\n       else\n         scrambled=$(echo $match | cut -c$val)$scrambled\n       fi\n       val=$(( $val + 1 ))\n     done\n   }\n\n   if [ ! -r $wordlib ] ; then\n     echo \"$0: Missing word library $wordlib\" >&2\n     echo \"(online: http://www.intuitive.com/wicked/examples/long-words.txt\" >&2\n     echo \"save the file as $wordlib and you're ready to play!)\" >&2\n     exit 1\n   fi\n\n   newgame=\"\"; guesses=0; correct=0; total=0\n\n➌ until [ \"$guess\" = \"quit\" ] ; do\n\n     scrambleword\n echo \"\"\n     echo \"You need to unscramble: $scrambled\"\n\n     guess=\"??\" ; guesses=0\n     total=$(( $total + 1 ))\n\n➍ while [ \"$guess\" != \"$match\" -a \"$guess\" != \"quit\" -a \"$guess\" != \"next\" ]\n     do\n       echo \"\"\n       /bin/echo -n \"Your guess (quit|next) : \"\n       read guess\n\n       if [ \"$guess\" = \"$match\" ] ; then\n         guesses=$(( $guesses + 1 ))\n         echo \"\"\n         echo \"*** You got it with tries = ${guesses}! Well done!! ***\"\n         echo \"\"\n         correct=$(( $correct + 1 ))\n       elif [ \"$guess\" = \"next\" -o \"$guess\" = \"quit\" ] ; then\n         echo \"The unscrambled word was \\\"$match\\\". Your tries: $guesses\"\n       else\n         echo \"Nope. That's not the unscrambled word. Try again.\"\n         guesses=$(( $guesses + 1 ))\n       fi\n     done\n   done\n\n   echo \"Done. You correctly figured out $correct out of $total scrambled words.\"\n\n   exit 0\n```", "```\n$ unscramble\nPicked out a word!\n\nYou need to unscramble: ninrenoccg\n\nYour guess (quit|next) : concerning\n\n*** You got it with tries = 1! Well done!! ***\n\nPicked out a word!\n\nYou need to unscramble: esivrmipod\n\nYour guess (quit|next) : quit\nThe unscrambled word was \"improvised\". Your tries: 0\nDone. You correctly figured out 1 out of 2 scrambled words.\n```", "```\n   #!/bin/bash\n   # hangman--A simple version of the hangman game. Instead of showing a\n   #   gradually embodied hanging man, this simply has a bad-guess countdown.\n   #   You can optionally indicate the initial distance from the gallows as\n   #   the only argument.\n\n   wordlib=\"/usr/lib/games/long-words.txt\"\n   empty=\"\\.\"      # We need something for the sed [set] when $guessed=\"\".\n   games=0\n\n   # Start by testing for our word library datafile.\n\n   if [ ! -r \"$wordlib\" ] ; then\n     echo \"$0: Missing word library $wordlib\" >&2\n     echo \"(online: http://www.intuitive.com/wicked/examples/long-words.txt\" >&2\n     echo \"save the file as $wordlib and you're ready to play!)\" >&2\n     exit 1\n   fi\n\n   # The big while loop. This is where everything happens.\n\n   while [ \"$guess\" != \"quit\" ] ; do\n     match=\"$(randomquote $wordlib)\"      # Pick a new word from the library.\n\n     if [ $games -gt 0 ] ; then\n       echo \"\"\n       echo \"*** New Game! ***\"\n     fi\n\n     games=\"$(( $games + 1 ))\"\n     guessed=\"\" ; guess=\"\" ; bad=${1:-6}\n     partial=\"$(echo $match | sed \"s/[^$empty${guessed}]/-/g\")\"\n\n     # The guess > analyze > show results > loop happens in this block.\n\n     while [ \"$guess\" != \"$match\" -a \"$guess\" != \"quit\" ] ; do\n\n       echo \"\"\n       if [ ! -z \"$guessed\" ] ; then # Remember, ! –z means \"is not empty\".\n         /bin/echo -n \"guessed: $guessed, \"\n       fi\n       echo \"steps from gallows: $bad, word so far: $partial\"\n\n       /bin/echo -n \"Guess a letter: \"\n       read guess\n       echo \"\"\n       if [ \"$guess\" = \"$match\" ] ; then   # Got it!\n         echo \"You got it!\"\n       elif [ \"$guess\" = \"quit\" ] ; then   # You're out? Okay.\n         exit 0\n       # Now we need to validate the guess with various filters.\n➊     elif [ $(echo $guess | wc -c | sed 's/[^[:digit:]]//g') -ne 2 ] ; then\n         echo \"Uh oh: You can only guess a single letter at a time\"\n➋     elif [ ! -z \"$(echo $guess | sed 's/[[:lower:]]//g')\" ] ; then\n         echo \"Uh oh: Please only use lowercase letters for your guesses\"\n➌     elif [ -z \"$(echo $guess | sed \"s/[$empty$guessed]//g\")\" ] ; then\n         echo \"Uh oh: You have already tried $guess\"\n       # Now we can actually see if the letter appears in the word.\n➍     elif [ \"$(echo $match | sed \"s/$guess/-/g\")\" != \"$match\" ] ; then\n         guessed=\"$guessed$guess\"\n➎     partial=\"$(echo $match | sed \"s/[^$empty${guessed}]/-/g\")\"\n         if [ \"$partial\" = \"$match\" ] ; then\n           echo \"** You've been pardoned!! Well done! The word was \\\"$match\\\".\"\n           guess=\"$match\"\n         else\n           echo \"* Great! The letter \\\"$guess\\\" appears in the word!\"\n         fi\n       elif [ $bad -eq 1 ] ; then\n         echo \"** Uh oh: you've run out of steps. You're on the platform...\"\n         echo \"** The word you were trying to guess was \\\"$match\\\"\"\n         guess=\"$match\"\n       else\n         echo \"* Nope, \\\"$guess\\\" does not appear in the word.\"\n         guessed=\"$guessed$guess\"\n         bad=$(( $bad - 1 ))\n       fi\n     done\n   done\n   exit 0\n```", "```\n$ hangman\n\nsteps from gallows: 6, word so far: -------------\nGuess a letter: e\n\n* Great! The letter \"e\" appears in the word!\n\nguessed: e, steps from gallows: 6, word so far: -e--e--------\nGuess a letter: i\n\n* Great! The letter \"i\" appears in the word!\n\nguessed: ei, steps from gallows: 6, word so far: -e--e--i-----\nGuess a letter: o\n\n* Great! The letter \"o\" appears in the word!\n\nguessed: eio, steps from gallows: 6, word so far: -e--e--io----\nGuess a letter: u\n\n* Great! The letter \"u\" appears in the word!\n\nguessed: eiou, steps from gallows: 6, word so far: -e--e--iou---\nGuess a letter: m\n\n* Nope, \"m\" does not appear in the word.\n\nguessed: eioum, steps from gallows: 5, word so far: -e--e--iou---\nGuess a letter: n\n\n* Great! The letter \"n\" appears in the word!\n\nguessed: eioumn, steps from gallows: 5, word so far: -en-en-iou---\nGuess a letter: r\n\n* Nope, \"r\" does not appear in the word.\n\nguessed: eioumnr, steps from gallows: 4, word so far: -en-en-iou---\nGuess a letter: s\n\n* Great! The letter \"s\" appears in the word!\n\nguessed: eioumnrs, steps from gallows: 4, word so far: sen-en-ious--\nGuess a letter: t\n\n* Great! The letter \"t\" appears in the word!\n\nguessed: eioumnrst, steps from gallows: 4, word so far: sententious--\nGuess a letter: l\n\n* Great! The letter \"l\" appears in the word!\n\nguessed: eioumnrstl, steps from gallows: 4, word so far: sententiousl-\nGuess a letter: y\n\n** You've been pardoned!! Well done! The word was \"sententiously\".\n\n*** New Game! ***\n\nsteps from gallows: 6, word so far: ----------\nGuess a letter: quit\n```", "```\n   #!/bin/bash\n   # states--A state capital guessing game. Requires the state capitals\n   #   data file state.capitals.txt.\n\n   db=\"/usr/lib/games/state.capitals.txt\"     # Format is State[tab]City.\n\n   if [ ! -r \"$db\" ] ; then\n     echo \"$0: Can't open $db for reading.\" >&2\n     echo \"(get state.capitals.txt\" >&2\n     echo \"save the file as $db and you're ready to play!)\" >&2\n     exit 1\n   fi\n\n   guesses=0; correct=0; total=0\n\n   while [ \"$guess\" != \"quit\" ] ; do\n\n     thiskey=\"$(randomquote $db)\"\n\n     # $thiskey is the selected line. Now let's grab state and city info, and\n     #   then also have \"match\" as the all-lowercase version of the city name.\n\n➊   state=\"$(echo $thiskey | cut -d\\   -f1 | sed 's/-/ /g')\"\n     city=\"$(echo $thiskey | cut -d\\   -f2 | sed 's/-/ /g')\"\n     match=\"$(echo $city | tr '[:upper:]' '[:lower:]')\"\n\n     guess=\"??\" ; total=$(( $total + 1 )) ;\n\n     echo \"\"\n     echo \"What city is the capital of $state?\"\n\n     # Main loop where all the action takes place. Script loops until\n     #   city is correctly guessed or the user types \"next\" to\n     #   skip this one or \"quit\" to quit the game.\n\n     while [ \"$guess\" != \"$match\" -a \"$guess\" != \"next\" -a \"$guess\" != \"quit\" ]\n     do\n       /bin/echo -n \"Answer: \"\n       read guess\n       if [ \"$guess\" = \"$match\" -o \"$guess\" = \"$city\" ] ; then\n         echo \"\"\n         echo \"*** Absolutely correct! Well done! ***\"\n         correct=$(( $correct + 1 ))\n         guess=$match\n       elif [ \"$guess\" = \"next\" -o \"$guess\" = \"quit\" ] ; then\n         echo \"\"\n         echo \"$city is the capital of $state.\" # What you SHOULD have known :)\n       else\n         echo \"I'm afraid that's not correct.\"\n       fi\n     done\n\n   done\n\n   echo \"You got $correct out of $total presented.\"\n   exit 0\n```", "```\n$ states\n\nWhat city is the capital of Indiana?\nAnswer: Bloomington\nI'm afraid that's not correct.\nAnswer: Indianapolis\n\n*** Absolutely correct! Well done! ***\n\nWhat city is the capital of Massachusetts?\nAnswer: Boston\n\n*** Absolutely correct! Well done! ***\n\nWhat city is the capital of West Virginia?\nAnswer: Charleston\n\n*** Absolutely correct! Well done! ***\n\nWhat city is the capital of Alaska?\nAnswer: Fairbanks\nI'm afraid that's not correct.\nAnswer: Anchorage\nI'm afraid that's not correct.\nAnswer: Nome\nI'm afraid that's not correct.\nAnswer: Juneau\n\n*** Absolutely correct! Well done! ***\n\nWhat city is the capital of Oregon?\nAnswer: quit\n\nSalem is the capital of Oregon.\nYou got 4 out of 5 presented.\n```", "```\n   #!/bin/bash\n   # isprime--Given a number, ascertain whether it's a prime. This uses what's\n   #   known as trial division: simply check whether any number from 2 to (n/2)\n   #   divides into the number without a remainder.\n\n     counter=2\n   remainder=1\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: isprime NUMBER\" >&2\n     exit 1\n   fi\n\n   number=$1\n\n   # 3 and 2 are primes, 1 is not.\n\n   if [ $number -lt 2 ] ; then\n     echo \"No, $number is not a prime\"\n     exit 0\n   fi\n\n   # Now let's run some calculations.\n\n➊ while [ $counter -le $(expr $number / 2) -a $remainder -ne 0 ]\n   do\n     remainder=$(expr $number % $counter)  # '/' is divide, '%' is remainder\n     # echo \"  for counter $counter, remainder = $remainder\"\n     counter=$(expr $counter + 1)\n   done\n\n   if [ $remainder -eq 0 ] ; then\n     echo \"No, $number is not a prime\"\n   else\n     echo \"Yes, $number is a prime\"\n   fi\n   exit 0\n```", "```\nwhile [ 2 -le 38 -a 1 -ne 0 ]\n```", "```\n$ isprime 77\nNo, 77 is not a prime\n$ isprime 771\nNo, 771 is not a prime\n$ isprime 701\nYes, 701 is a prime\n```", "```\n$ isprime 77\n  for counter 2, remainder = 1\n  for counter 3, remainder = 2\n  for counter 4, remainder = 1\n  for counter 5, remainder = 2\n  for counter 6, remainder = 5\n  for counter 7, remainder = 0\nNo, 77 is not a prime\n```", "```\n   #!/bin/bash\n   # rolldice--Parse requested dice to roll and simulate those rolls.\n   #   Examples: d6 = one 6-sided die\n   #             2d12 = two 12-sided dice\n   #             d4 3d8 2d20 = one 4-side die, three 8-sided, and two 20-sided dice\n\n   rolldie()\n   {\n     dice=$1\n     dicecount=1\n     sum=0\n\n     # First step: break down arg into MdN.\n\n➊   if [ -z \"$(echo $dice | grep 'd')\" ] ; then\n       quantity=1\n       sides=$dice\n     else\n       quantity=$(echo $dice | ➋cut -dd -f1)\n       if [ -z \"$quantity\" ] ; then       # User specified dN, not just N.\n         quantity=1\n       fi\n       sides=$(echo $dice | cut -dd -f2)\n     fi\n     echo \"\" ; echo \"rolling $quantity $sides-sided die\"\n     # Now roll the dice...\n\n     while [ $dicecount -le $quantity ] ; do\n➌     roll=$(( ( $RANDOM % $sides ) + 1 ))\n       sum=$(( $sum + $roll ))\n       echo \" roll #$dicecount = $roll\"\n       dicecount=$(( $dicecount + 1 ))\n     done\n\n     echo I rolled $dice and it added up to $sum\n   }\n\n   while [ $# -gt 0 ] ; do\n     rolldie $1\n     sumtotal=$(( $sumtotal + $sum ))\n     shift\n   done\n\n   echo \"\"\n   echo \"In total, all of those dice add up to $sumtotal\"\n   echo \"\"\n   exit 0\n```", "```\n$ rolldice 2d6\nrolling 2 6-sided die\n  roll #1 = 6\n  roll #2 = 2\nI rolled 2d6 and it added up to 8\nIn total, all of those dice add up to 8\n$ rolldice 2d6\nrolling 2 6-sided die\n  roll #1 = 4\n  roll #2 = 2\nI rolled 2d6 and it added up to 6\nIn total, all of those dice add up to 6\n```", "```\n$ rolldice 5d6\nrolling 5 6-sided die\n  roll #1 = 2\n  roll #2 = 1\n  roll #3 = 3\n  roll #4 = 5\n  roll #5 = 2\nI rolled 5d6 and it added up to 13\nIn total, all of those dice add up to 13\n```", "```\n$ rolldice 2d18 1d37 1d3\nrolling 2 18-sided die\n  roll #1 = 16\n  roll #2 = 14\nI rolled 2d18 and it added up to 30\nrolling 1 37-sided die\n  roll #1 = 29\nI rolled 1d37 and it added up to 29\nrolling 1 3-sided die\n  roll #1 = 2\nI rolled 1d3 and it added up to 2\nIn total, all of those dice add up to 61\n```", "```\n   #!/bin/bash\n   # aceyduecey: Dealer flips over two cards, and you guess whether the\n   #   next card from the deck will rank between the two. For example,\n   #   with a 6 and an 8, a 7 is between the two, but a 9 is not.\n\n   function initializeDeck\n   {\n       # Start by creating the deck of cards.\n\n       card=1\n       while [ $card –le 52 ]         # 52 cards in a deck. You knew that, right?\n       do\n➊       deck[$card]=$card\n         card=$(( $card + 1 ))\n       done\n   }\n\n   function shuffleDeck\n   {\n # It's not really a shuffle. It's a random extraction of card values\n       #   from the 'deck' array, creating newdeck[] as the \"shuffled\" deck.\n\n       count=1\n\n       while [ $count != 53 ]\n       do\n         pickCard\n➋       newdeck[$count]=$picked\n         count=$(( $count + 1 ))\n       done\n   }\n\n➌ function pickCard\n   {\n       # This is the most interesting function: pick a random card from\n       #   the deck. Uses the deck[] array to find an available card slot.\n\n       local errcount randomcard\n\n       threshold=10      # Max guesses for a card before we fall through\n       errcount=0\n\n       # Randomly pick a card that hasn't already been pulled from the deck\n       #   a max of $threshold times. Fall through on fail (to avoid a possible\n       #   infinite loop where it keeps guessing the same already dealt card).\n\n➍   while [ $errcount -lt $threshold ]\n       do\n         randomcard=$(( ( $RANDOM % 52 ) + 1 ))\n         errcount=$(( $errcount + 1 ))\n\n         if [ ${deck[$randomcard]} -ne 0 ] ; then\n           picked=${deck[$randomcard]}\n           deck[$picked]=0    # Picked--remove it.\n           return $picked\n         fi\n       done\n\n       # If we get here, we've been unable to randomly pick a card, so we'll\n       #   just step through the array until we find an available card.\n\n       randomcard=1\n\n➎   while [ ${newdeck[$randomcard]} -eq 0 ]\n       do\n         randomcard=$(( $randomcard + 1 ))\n       done\n\n       picked=$randomcard\n       deck[$picked]=0      # Picked--remove it.\n\n       return $picked\n   }\n\n function showCard\n   {\n      # This uses a div and a mod to figure out suit and rank, though\n      #   in this game, only rank matters. Still, presentation is\n      #   important, so this helps make things pretty.\n\n      card=$1\n\n      if [ $card -lt 1 -o $card -gt 52 ] ; then\n        echo \"Bad card value: $card\"\n        exit 1\n      fi\n\n      # div and mod -- see, all that math in school wasn't wasted!\n\n➏    suit=\"$(( ( ( $card - 1) / 13 ) + 1))\"\n      rank=\"$(( $card % 13))\"\n\n      case $suit in\n        1 ) suit=\"Hearts\"   ;;\n        2 ) suit=\"Clubs\"    ;;\n        3 ) suit=\"Spades\"   ;;\n        4 ) suit=\"Diamonds\" ;;\n        * ) echo \"Bad suit value: $suit\"\n            exit 1\n\n      esac\n\n      case $rank in\n        0 ) rank=\"King\"    ;;\n        1 ) rank=\"Ace\"     ;;\n        11) rank=\"Jack\"    ;;\n        12) rank=\"Queen\"   ;;\n      esac\n\n      cardname=\"$rank of $suit\"\n   }\n\n➐ function dealCards\n   {\n       # Acey Deucey has two cards flipped up...\n\n       card1=${newdeck[1]}    # Since deck is shuffled, we take\n       card2=${newdeck[2]}    #   the top two cards from the deck\n       card3=${newdeck[3]}    #   and pick card #3 secretly.\n\n       rank1=$(( ${newdeck[1]} % 13 ))  # And let's get the rank values\n       rank2=$(( ${newdeck[2]} % 13 ))  #   to make subsequent calculations easy.\n       rank3=$(( ${newdeck[3]} % 13 ))\n\n       # Fix to make the king: default rank = 0, make rank = 13.\n\n       if [ $rank1 -eq 0 ] ; then\n         rank1=13;\n       fi\n if [ $rank2 -eq 0 ] ; then\n         rank2=13;\n       fi\n       if [ $rank3 -eq 0 ] ; then\n         rank3=13;\n       fi\n\n       # Now let's organize them so that card1 is always lower than card2.\n\n➑     if [ $rank1 -gt $rank2 ] ; then\n         temp=$card1; card1=$card2; card2=$temp\n         temp=$rank1; rank1=$rank2; rank2=$temp\n       fi\n\n       showCard $card1 ; cardname1=$cardname\n       showCard $card2 ; cardname2=$cardname\n\n       showCard $card3 ; cardname3=$cardname # Shhh, it's a secret for now.\n\n➒     echo \"I've dealt:\" ; echo \"   $cardname1\" ; echo \"   $cardname2\"\n   }\n\n   function introblurb\n   {\n   cat << EOF\n\n   Welcome to Acey Deucey. The goal of this game is for you to correctly guess\n   whether the third card is going to be between the two cards I'll pull from\n   the deck. For example, if I flip up a 5 of hearts and a jack of diamonds,\n   you'd bet on whether the next card will have a higher rank than a 5 AND a\n   lower rank than a jack (that is, a 6, 7, 8, 9, or 10 of any suit).\n\n   Ready? Let's go!\n\n   EOF\n   }\n\n   games=0\n   won=0\n\n   if [ $# -gt 0 ] ; then    # Helpful info if a parameter is specified\n     introblurb\n   fi\n\n   while [ /bin/true ] ; do\n\n     initializeDeck\n     shuffleDeck\n     dealCards\n\n     splitValue=$(( $rank2 - $rank1 ))\n\n     if [ $splitValue -eq 0 ] ; then\n       echo \"No point in betting when they're the same rank!\"\n       continue\n     fi\n\n     /bin/echo -n \"The spread is $splitValue. Do you think the next card will \"\n     /bin/echo -n \"be between them? (y/n/q) \"\n     read answer\n\n     if [ \"$answer\" = \"q\" ] ; then\n       echo \"\"\n       echo \"You played $games games and won $won times.\"\n       exit 0\n     fi\n\n     echo \"I picked: $cardname3\"\n\n     # Is it between the values? Let's test. Remember, equal rank = lose.\n\n➓   if [ $rank3 -gt $rank1 -a $rank3 -lt $rank2 ] ; then # Winner!\n       winner=1\n     else\n       winner=0\n     fi\n\n     if [ $winner -eq 1 -a \"$answer\" = \"y\" ] ; then\n       echo \"You bet that it would be between the two, and it is. WIN!\"\n       won=$(( $won + 1 ))\n     elif [ $winner -eq 0 -a \"$answer\" = \"n\" ] ; then\n       echo \"You bet that it would not be between the two, and it isn't. WIN!\"\n       won=$(( $won + 1 ))\n     else\n       echo \"Bad betting strategy. You lose.\"\n     fi\n\n     games=$(( $games + 1 )) # How many times do you play?\n\n   done\n\n   exit 0\n```", "```\n$ aceydeucey intro\n\nWelcome to Acey Deucey. The goal of this game is for you to correctly guess\nwhether the third card is going to be between the two cards I'll pull from\nthe deck. For example, if I flip up a 5 of hearts and a jack of diamonds,\nyou'd bet on whether the next card will have a higher rank than a 5 AND a\nlower rank than a jack (that is, a 6, 7, 8, 9, or 10 of any suit).\n\nReady? Let's go!\n\nI've dealt:\n   3 of Hearts\n   King of Diamonds\nThe spread is 10\\. Do you think the next card will be between them? (y/n/q) y\nI picked: 4 of Hearts\nYou bet that it would be between the two, and it is. WIN!\n\nI've dealt:\n   8 of Clubs\n   10 of Hearts\nThe spread is 2\\. Do you think the next card will be between them? (y/n/q) n\nI picked: 6 of Diamonds\nYou bet that it would not be between the two, and it isn't. WIN!\n\nI've dealt:\n   3 of Clubs\n   10 of Spades\nThe spread is 7\\. Do you think the next card will be between them? (y/n/q) y\nI picked: 5 of Clubs\nYou bet that it would be between the two, and it is. WIN!\n\nI've dealt:\n   5 of Diamonds\n   Queen of Spades\nThe spread is 7\\. Do you think the next card will be between them? (y/n/q) q\n\nYou played 3 games and won 3 times.\n```"]