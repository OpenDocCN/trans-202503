- en: '4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Color-Coded LED Watch by John Baichtal
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll make a watch that displays the time using color.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0081-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With digital clocks found on phones, microwaves, and even coffee makers, you
    might think making another is redundant. On the other hand, how often have you
    needed to know the time while on an important phone call, on a hike, or just nowhere
    near your kitchen? There is still a place for the portable watch, and to modernize
    it I’ve come up with a solution: a custom digital timepiece featuring an intriguingly
    cryptic display.'
  prefs: []
  type: TYPE_NORMAL
- en: With this project you’ll make your own watch using a pair of eight-dot NeoPixel
    LED strips to convey the time with *colors*. It may not be immediately clear how
    you’d tell the time with colors, but stick around and you’ll find out. The brains
    for our watch will be an Arduino, which simplifies certain parts of displaying
    the time but also presents special challenges.
  prefs: []
  type: TYPE_NORMAL
- en: '**GET THE PARTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll need the following parts to build this project.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*See “[Getting Started with the Arduino and the Arduino IDE](intro.xhtml#lev17)”
    on [page 15](intro.xhtml#page_15) for setup instructions.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Components**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arduino Pro Mini (SparkFun P/N 11113; extra headers are available as P/N 00116.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTDI Basic Breakout (SparkFun P/N 09716; this is a programming dongle necessary
    to program the Arduino Pro Mini.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 NeoPixel strips (Adafruit P/N 1426 or SparkFun P/N 12661; this is an eight-LED
    RGB strip.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DS1307 RTC Breakout Board (SparkFun P/N 12708; other options are Adafruit P/N
    255 or Adafruit P/N 3013.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 470 Ω resistor (SparkFun P/N 10969 is a good multipack)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enclosure (My enclosure was 85 mm × 55 mm on its largest side and 30 mm deep;
    find it by searching online for its P/N, WCAH2855\. A similar part is the classic
    3 × 2 × 1 project enclosure from RadioShack, P/N 2701801.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch band (Any generic nylon or rubber watch band should do the trick. I used
    a knockoff iWatch band from Amazon.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 V battery pack and battery (A standard 9 V connector with wire leads; I’m
    using Jameco P/N 109154\. You can also get the SparkFun P/N 00091 snap connector
    and cut off the plug.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button (I used a panel-mount momentary button from SparkFun, P/N 11992\. The
    smaller, the better. You can swap out the button for a switch if you want to keep
    the display going until you turn it off.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screws (I used M2 × 10 mm screws and nuts from HobbyKing, P/N HA0506.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The small Arduino we use here offers the same Arduino experience without all
    the bells and whistles so that it will fit in a small enclosure. For instance,
    you can’t program it via USB, and you’ll need a FTDI Breakout (such as SparkFun
    P/N 09716) to program it. Before you begin building this project, see “[Arduino
    Boards Without a Built-in USB Connection](intro.xhtml#introsb1)” on [page 21](intro.xhtml#page_21)
    for information about how to set up the Arduino Pro Mini and FTDI.
  prefs: []
  type: TYPE_NORMAL
- en: When choosing an enclosure, keep in mind that the LED strips and the 9 V battery
    are the main limitations on dimensions. You may also want a clip to keep the battery
    from rolling around inside the enclosure box, though mine was so densely packed
    nothing could move around.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tools**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Soldering iron and solder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dremel or similar rotary tool, with cutting and drilling implements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Optional) Spray paint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INTRODUCING THE REAL-TIME CLOCK MODULE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It turns out that keeping accurate time isn’t something Arduinos do well. They
    can keep track of time from second to second fairly well, thanks to the timing
    crystal built into the board, but they must use their own internal memory to retain
    this information, so when the memory fills up your clock stops working. Another
    problem arises when the Arduino loses power—you lose the time and have to reset
    it when you start the Arduino up again. The solution to these challenges lies
    in an add-on board called a *Real-Time Clock (RTC)* module.
  prefs: []
  type: TYPE_NORMAL
- en: The RTC consists of a dedicated timekeeping chip and a battery backup, so it
    can retain the time even when the main project powers down. It keeps track of
    the time so your Arduino doesn’t have to.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 4-1](ch04.xhtml#ch04fig1) shows the DS1307 RTC module sold by Adafruit
    Industries. It accurately computes calendars up to the year 2100 with leap year
    factored in, and communicates with the Arduino through a two-wire interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0084-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-1:** Adafruit’s DS1307 breakout board helps your Arduino keep time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS: COLOR-CODING THE LEDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With only a small watch face to utilize, we are limited to just two eight-LED
    strips to show the time. I devised a system—shown in [Figure 4-2](ch04.xhtml#ch04fig2)—that
    uses the color of the LEDs to convey the information. I selected five colors to
    stand in for numbers, listed in [Table 4-1](ch04.xhtml#ch04tab1).
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 4-1:** Number codes for the colors'
  prefs: []
  type: TYPE_NORMAL
- en: '| **COLOR** | **VALUE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Black | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Blue | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Red | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Yellow | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| Green | 5 |'
  prefs: []
  type: TYPE_TB
- en: The top LED strip will indicate the hour, and the bottom strip the minutes.
    As mentioned, each strip will have eight LEDs. Each LED’s position in that strip
    will be the *multiplier* that you apply to the number associated with the color
    in [Table 4-1](ch04.xhtml#ch04tab1). For example, the seventh LED lit up yellow
    (4) would be 4 × 7, so would mean 28 minutes if it’s lit in the bottom strip.
  prefs: []
  type: TYPE_NORMAL
- en: You could use more or fewer colors, but I decided to use only four (plus black)
    for simplicity’s sake. I wanted my clock to use the same colors manufacturers
    use to color-code resistors—in their world, 0 is black, 1 is brown, 2 is red,
    and so on. However, brown doesn’t show up well as visible light, so I substituted
    blue. Ultimately it doesn’t matter what colors you choose for each time. If it
    makes sense to you, go for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than use more colors to display larger times, we’ll light up a *second*
    LED on the bottom strip, and you can add the two bottom-strip numbers in your
    head to arrive at the time. Remember, the top strip will indicate the hour, and
    the bottom strip the minutes. Say it’s 7:56 AM, or 756\. To indicate this time,
    I could light up a blue LED in position #7 on the top bar, and yellow #4 (16)
    and green #8 (40) on the bottom bar. [Figure 4-2](ch04.xhtml#ch04fig2) shows how
    it should look. Refer to [Table 4-1](ch04.xhtml#ch04tab1) if you’re not sure how
    I arrived at these numbers. This will be a good test of your mental arithmetic
    skills.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0085-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-2:** The color and position of the LEDs indicate the time. This
    simulated display shows 7:56 AM.'
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILD IT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The watch consists of the electronics and the enclosure that holds them. We’ll
    work on the two parts simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you need instructions on soldering, see the appendix.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solder the NeoPixel strips.** Solder a couple of short wires connecting the
    two NeoPixel strips in series, as seen in [Figure 4-3](ch04.xhtml#ch04fig3). Connect
    the pin marked Dout, or Data out, to the pin marked Din, or Data in, shown with
    an orange wire in [Figure 4-3](ch04.xhtml#ch04fig3). Connect the remaining two
    pins, 4-7VDC (red) and GND (gray), to their mates on the other strip. Note that
    there are two GND pins and either one can be used.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0085-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-3:** Solder the LED strips together.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Drill the enclosure.** Once you have the LED strips wired up, place them
    on top of the enclosure and mark their mounting holes with a permanent marker
    for drilling; you should also indicate where the wires will enter the enclosure.
    While you’re at it, mark where you want the power button to go.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have the enclosure marked, drill the holes. You may also want to consider
    how you intend to wear the watch. If you’re using a wrist strap, you’ll need to
    figure out how to attach the strap to the enclosure. [Figure 4-4](ch04.xhtml#ch04fig4)
    shows my enclosure with the holes drilled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f0086-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-4:** Drill holes into the enclosure.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Paint the enclosure.** You may want to paint the enclosure if the black finish
    is getting you down. [Figure 4-5](ch04.xhtml#ch04fig5) shows my enclosure being
    painted. I’m going for a military-esque olive drab.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0086-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-5:** Customize the plain black box with a splash of color.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Wire the RTC to the Arduino.** While the paint is drying, begin soldering
    the guts. Start with the RTC module, and wire it up to the Arduino Pro Mini; use
    [Figure 4-6](ch04.xhtml#ch04fig6) as a reference. Connect 5V on the RTC to the
    Arduino’s VCC pin (shown as a red wire in [Figure 4-6](ch04.xhtml#ch04fig6)) and
    the GND to the Arduino’s GND pin, shown as a black wire. Connect SCL, the serial
    clock shown as a green wire, to pin A5 of the Arduino, and connect SDA, in yellow,
    to pin A4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0087-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-6:** Connect the RTC to the Arduino.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*The FTDI board is not shown in the wiring diagrams, but you should have already
    attached it to your Pro Mini. If you haven’t done that yet, see “[Arduino Boards
    Without a Built-in USB Connection](intro.xhtml#introsb1)” on [page 21](intro.xhtml#page_21).*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Attach the LED strips to the enclosure.** Once the paint is dry, you can
    attach the LED strips to the enclosure using M2 screws. Note that the specific
    orientation of the strips with regards to your viewing angle affects whether you
    get an accurate reading. *Both LED strips must be oriented the same way*. In the
    photo of my prototype on page 81, you can see that I had one strip inverted from
    the other. However, this proved to be a problem and I fixed it in the final design.
    Make sure you orient the strips the way they’re shown in the wiring diagrams.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Connect the LED strips to the Arduino.** Attach the strips’ power, GND, and
    data wires to the Arduino as shown in [Figure 4-7](ch04.xhtml#ch04fig7).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0087-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-7:** Attach the NeoPixel strips to the Arduino.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Data, shown as a yellow wire, connects to pin 6 on the Arduino with a 470 Ω
    resistor, which protects the strips from power spikes. Power (red) and GND (black)
    connect to +5V and GND, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Install the button or switch.** Wire up the button and secure it to the enclosure
    using the panel-mount hardware that came with it. Connect one lead of the button
    to the red wire of the battery pack, shown in [Figure 4-8](ch04.xhtml#ch04fig8).
    Connect the second lead of the button, shown in purple, to the RAW pin of the
    Arduino. The GND wire of the battery pack connects to the GND of the Arduino.
    You can also swap in a switch, which will require you to manually turn on and
    off the display. This does not require a modification to the code—the LEDs update
    once a second as long as they and the rest of the project are powered.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0088-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-8:** Install the button and solder its leads to the Arduino.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Attach the watch strap.** Attach the strap. I used my Dremel to mill down
    a slot between the enclosure mouth and the lid, allowing me to “trap” the strap
    once the lid was secured. [Figure 4-9](ch04.xhtml#ch04fig9) shows the band’s installation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0089-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 4-9:** Strap it!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**CODE IT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s examine the Arduino code for this project. You’ll find this listed as
    *led_watch.ino* in the book’s resources at *[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*.
    [Listing 4-1](ch04.xhtml#ch04list1) sets up the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 4-1:** Libraries and declarations'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We start with library declarations ➊. Then we initialize the RTC ➋ and the NeoPixel
    strips ➌. The button/switch needs no declaration, as it merely connects power
    to the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t yet installed the libraries, you’ll have to do that before the
    code will run. You can find information on downloading and installing the NeoPixel
    and RTC libraries from their respective product pages at *[https://www.adafruit.com/](https://www.adafruit.com/)*.
    You should have the Wire library installed already, as it comes with the Arduino
    software.
  prefs: []
  type: TYPE_NORMAL
- en: Next let’s delve into the heart of the code with [Listing 4-2](ch04.xhtml#ch04list2),
    which initializes the arrays that keep track of which colors correspond to the
    different times.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 4-2:** Initializing the arrays'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There are 60 entries—one for each minute in an hour—but for the sake of space,
    I’ve included only three here as examples. The watch displays the hour using the
    same array, so 7 AM has the same color coding as 7 minutes after the hour. Partly
    for whimsy and partly for debugging purposes, I made 0 all red. This way you can
    see when the hour strikes, and it also tells you the code works if you happen
    to be working on the project around the start of the hour.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 4-3](ch04.xhtml#ch04list3) defines the `setup()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 4-3:** The `setup()` function'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This block of code begins Wire ➊, a library for governing serial communications,
    and activates the RTC ➋. If the RTC chip doesn’t respond, the Arduino sends an
    error message ➌ to the serial monitor. The script then adjusts the RTC’s time
    to match the date and time when the sketch was compiled ➍.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 4-4](ch04.xhtml#ch04list4) consists of the `loop()` function, which
    contains the code that controls the activation of the LED strips.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 4-4:** The activation loop'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The sketch launches the instant you power up the Arduino (by pressing the button
    or hitting the switch). The loop reads the time from the RTC and then lights up
    the LEDs with whatever color is appropriate, displaying them as long as the board
    is powered. Each LED has a number (0–7 for hours and 8–15 for minutes), and receives
    color data from the array at the beginning of the sketch. If you use a switch
    instead of a button, it will keep the LEDs lit continuously, and the time will
    update every second.
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you complete the physical build and upload the code, your watch is done!
    It may not be a precision instrument, but it will certainly start a conversation
    or two.
  prefs: []
  type: TYPE_NORMAL
