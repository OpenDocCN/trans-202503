["```\n   // A simple Fraction class\n\n   #ifndef FRACTION_H\n   #define FRACTION_H\n   class Fraction {\n❶ public:\n       Fraction();               // Default constructor\n       ~Fraction();              // Destructor\n       void get();               // Get user's values\n       void display();           // Display fraction\n       void add_integer(int x);  // Add x to fraction\n❷ private:\n       int numerator;\n       int denominator;\n  };\n  #endif\n```", "```\n// A simple Fraction class\n\n#ifndef FRACTION_H\n#define FRACTION_H\nstruct Fraction {\npublic:\n    Fraction();               // Default constructor\n    ~Fraction();              // Destructor\n    void get();               // Get user's values\n    void display();           // Display fraction void add_integer(int x);  // Add x to fraction\nprivate:\n    int numerator;\n    int denominator;\n};\n#endif\n```", "```\n// Get a fraction from the user and add 1.\n\n#include \"fraction.h\"\n\nint main(void)\n{\n ❶ Fraction my_fraction;\n\n ❷ my_fraction.display();\n    my_fraction.get();\n    my_fraction.add_integer(1);\n    my_fraction.display();\n\n    return 0;\n}\n```", "```\n$ g++ -S -Wall -O0 -fno-unwind-tables -fno-asynchronous-unwind-tables\n      -fno-exceptions inc_fraction.cpp\n```", "```\n        .arch armv8-a\n        .file   \"inc_fraction.cpp\"\n        .text\n        .align   2\n        .global  main\n        .type    main, %function\nmain:\n     ❶ stp      x29, x30, [sp, -48]!\n        mov      x29, sp\n        str      x19, [sp, 16]\n     ❷ add      x0, sp, 40\n     ❸ bl       _ZN8FractionC1Ev          /// Construct my_fraction\n        add      x0, sp, 40\n     ❹ bl       _ZN8Fraction7displayEv\n        add      x0, sp, 40\n        bl       _ZN8Fraction3getEv\n        add      x0, sp, 40\n        mov      w1, 1\n     ❺ bl       _ZN8Fraction11add_integerEi\n        add      x0, sp, 40\n        bl       _ZN8Fraction7displayEv\n        mov      w19, 0\n        add      x0, sp, 40\n     ❻ bl       _ZN8FractionD1Ev         /// Destruct my_fraction\n        mov      w0, w19\n        ldr      x19, [sp, 16]\n        ldp      x29, x30, [sp], 48\n        ret\n        .size    main, .-main\n        .ident   \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n        .section         .note.GNU-stack,\"\",@progbits\n```", "```\n   // A simple Fraction class\n\n   #include \"fraction.h\"\n   #include <iostream>\n❶ using namespace std;\n\n❷ Fraction::Fraction()\n   {\n    ❸ numerator = 0;\n       denominator = 1;\n   }\n\n   Fraction::~Fraction() {}\n   // Nothing to do for this object\n\n   void Fraction::get()\n   {\n    ❹ cout << \"Enter numerator: \";\n    ❺ cin >> numerator;\n\n       cout << \"Enter denominator: \";\n       cin >> denominator;\n\n       if (denominator == 0) {\n           cout << \"WARNING: Setting 0 denominator to 1\\n\";\n           denominator = 1;\n       }\n   }\n\n   void Fraction::display()\n   {\n       cout << numerator << '/' << denominator << '\\n';\n   }\n\n   void Fraction::add_integer(int x)\n   {\n       numerator += x * denominator;\n   }\n```", "```\n        .arch armv8-a\n        .file   \"fraction.cpp\"\n        .text\n        .section        .rodata       /// For operating system\n        .align   3\n        .type    _ZStL19piecewise_construct, %object\n        .size    _ZStL19piecewise_construct, 1\n_ZStL19piecewise_construct:\n        .zero    1\n     ❶ .local   _ZStL8__ioinit\n     ❷ .comm    _ZStL8__ioinit,1,8\n```", "```\n        .text\n        .align  2\n .global _ZN8FractionC2Ev\n        .type   _ZN8FractionC2Ev, %function\n_ZN8FractionC2Ev:\n        sub     sp, sp, #16\n     ❶ str      x0, [sp, 8]                    /// Save this pointer\n        ldr     x0, [sp, 8]\n     ❷ str      wzr, [x0]                      /// numerator = 0;\n        ldr     x0, [sp, 8]\n        mov     w1, 1\n     ❸ str      w1, [x0, 4]                    /// denominator = 1;\n        nop\n        add     sp, sp, 16\n        ret\n        .size   _ZN8FractionC2Ev, .-_ZN8FractionC2Ev\n        .global _ZN8FractionC1Ev\n        .set    _ZN8FractionC1Ev,_ZN8FractionC2Ev\n```", "```\nFraction::Fraction(int numerator, int denominator) {\n    this->numerator = numerator;\n    this->denominator = denominator;\n}\n```", "```\n        .align  2\n        .global _ZN8FractionD2Ev\n        .type   _ZN8FractionD2Ev, %function\n_ZN8FractionD2Ev:\n        sub     sp, sp, #16\n        str     x0, [sp, 8]\n        nop\n        add     sp, sp, 16\n        ret\n        .size   _ZN8FractionD2Ev, .-_ZN8FractionD2Ev\n        .global _ZN8FractionD1Ev\n        .set    _ZN8FractionD1Ev,_ZN8FractionD2Ev\n```", "```\n        .section          .rodata\n        .align   3\n        .LC0:\n        .string  \"Enter numerator: \"\n        .align   3 \n.LC1:\n        .string  \"Enter denominator: \"\n        .align   3\n.LC2:\n        .string  \"WARNING: Setting 0 denominator to 1\"\n        .text\n        .align   2\n        .global  _ZN8Fraction3getEv\n        .type    _ZN8Fraction3getEv, %function\n_ZN8Fraction3getEv:\n        stp      x29, x30, [sp, -32]!\n        mov      x29, sp\n        str      x0, [sp, 24]\n        adrp     x0, .LC0\n        add      x1, x0, :lo12:.LC0\n      ❶ adrp     x0, :got:_ZSt4cout         /// From global library\n        ldr      x0, [x0, #:got_lo12:_ZSt4cout]\n        bl       _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n        ldr      x0, [sp, 24]\n        mov      x1, x0\n      ❷ adrp     x0, :got:_ZSt3cin          /// From global library\n        ldr      x0, [x0, #:got_lo12:_ZSt3cin]\n        bl       _ZNSirsERi\n        adrp     x0, .LC1\n        add      x1, x0, :lo12:.LC1\n        adrp     x0, :got:_ZSt4cout\n        ldr      x0, [x0, #:got_lo12:_ZSt4cout]\n        bl       _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n        ldr      x0, [sp, 24]\n        add      x0, x0, 4\n        mov      x1, x0\n        adrp     x0, :got:_ZSt3cin\n        ldr      x0, [x0, #:got_lo12:_ZSt3cin]\n        bl       _ZNSirsERi\n        ldr      x0, [sp, 24]\n        ldr      w0, [x0, 4]\n        cmp      w0, 0                       /// Check for 0 denominator\n        bne      .L5\n        adrp     x0, .LC2\n        add      x1, x0, :lo12:.LC2\n        adrp     x0, :got:_ZSt4cout\n        ldr      x0, [x0, #:got_lo12:_ZSt4cout]\n        bl       _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n        ldr      x0, [sp, 24]\n        mov      w1, 1\n        str      w1, [x0, 4] .L5:\n        nop\n        ldp      x29, x30, [sp], 32\n        ret\n        .size    _ZN8Fraction3getEv, .-_ZN8Fraction3getEv\n```", "```\n        .align   2\n        .global _ZN8Fraction7displayEv\n        .type   _ZN8Fraction7displayEv, %function\n_ZN8Fraction7displayEv:\n        stp     x29, x30, [sp, -32]!\n        mov     x29, sp\n        str     x0, [sp, 24]\n        ldr     x0, [sp, 24]\n        ldr     w0, [x0]\n        mov     w1, w0\n        adrp    x0, :got:_ZSt4cout\n        ldr     x0, [x0, #:got_lo12:_ZSt4cout]\n      ❶ bl      _ZNSolsEi\n        mov     w1, 47          /// '/' character\n      ❷ bl      _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c\n        mov     x2, x0\n        ldr     x0, [sp, 24]\n        ldr     w0, [x0, 4]\n        mov     w1, w0\n        mov     x0, x2\n        bl      _ZNSolsEi\n        mov     w1, 10          /// '/ n'   character\n        bl      _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c\n        nop\n        ldp     x29, x30, [sp], 32\n        ret\n        .size   _ZN8Fraction7displayEv, .-_ZN8Fraction7displayEv\n```", "```\n        .align  2\n        .global _ZN8Fraction11add_integerEi\n        .type   _ZN8Fraction11add_integerEi, %function\n_ZN8Fraction11add_integerEi:\n        sub     sp, sp, #16\n      ❶ str     x0, [sp, 8]\n        str     w1, [sp, 4]\n        ldr     x0, [sp, 8]\n        ldr     w1, [x0]\n        ldr     x0, [sp, 8]\n        ldr     w2, [x0, 4]\n        ldr     w0, [sp, 4]\n        mul     w0, w2, w0\n        add     w1, w1, w0\n        ldr     x0, [sp, 8]\n        str     w1, [x0]\n        nop\n        add     sp, sp, 16\n        ret\n        .size   _ZN8Fraction11add_integerEi, .-_ZN8Fraction11add_integerEi\n```", "```\n// A simple Fraction class\n\n#ifndef FRACTION_DFLT_H\n#define FRACTION_DFLT_H\nclass Fraction {\npublic:\n ❶ Fraction() = default;     // Tell compiler to generate default\n    ~Fraction() = default;    //   constructor and destructor\n    void get();               // Get user's values\n    void display();           // Display fraction\n    void add_integer(int x);  // Add x to fraction\nprivate:\n ❷ int numerator {};\n    int denominator {1};\n};\n#endif\n```", "```\nint numerator = 0;\nint numerator = {};\n```", "```\n// A simple Fraction class\n\n#include \"fraction_dflt.h\"\n#include <iostream>\n using namespace std;\n\nvoid Fraction::get()\n{\n    cout << \"Enter numerator: \";\n    cin >> numerator;\n\n    cout << \"Enter denominator: \";\n    cin >> denominator;\n\n    if (denominator == 0) {\n        cout << \"WARNING: Setting 0 denominator to 1\\n\";\n        denominator = 1;\n    }\n}\n\nvoid Fraction::display()\n{\n    cout << numerator << '/' << denominator << '\\n';\n}\n\nvoid Fraction::add_integer(int x)\n{\n    numerator += x * denominator;\n}\n```", "```\n   // Get a fraction from the user and add 1.\n\n❶ #include \"fraction_dflt.h\"\n\n   int main(void)\n   {\n       Fraction my_fraction;\n\n       my_fraction.display();\n       my_fraction.get();\n       my_fraction.add_integer(1);\n       my_fraction.display();\n\n       return 0;\n   }\n```", "```\n       .arch armv8-a\n       .file   \"inc_fraction_dflt.cpp\"\n       .text\n       .align  2\n       .global main\n       .type   main, %function\nmain:\n     ❶ stp     x29, x30, [sp, -32]!\n       mov     x29, sp\n     ❷ str     wzr, [sp, 24]                  /// int numerator {};\n       mov     w0, 1\n       str     w0, [sp, 28]                    /// int denominator {1};\n       add     x0, sp, 24\n       bl      _ZN8Fraction7displayEv\n       add     x0, sp, 24\n       bl      _ZN8Fraction3getEv\n       add     x0, sp, 24\n       mov     w1, 1\n       bl      _ZN8Fraction11add_integerEi\n       add     x0, sp, 24\n       bl      _ZN8Fraction7displayEv\n       mov     w0, 0\n       ldp     x29, x30, [sp], 32\n       ret\n       .size   main, .-main\n       .ident  \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n       .section       .note.GNU-stack,\"\",@progbits\n```", "```\n// The Fraction class with two constructors\n\n#ifndef FRACTION_2_H\n#define FRACTION_2_H\nclass Fraction {\npublic:\n     Fraction() = default;    // Tell compiler to generate default\n  ❶ Fraction(int n) : numerator{n} {};  // Allow setting numerator\n\n    ~Fraction() = default;\n    void get();               // Get user's values\n    void display();           // Display fraction\n    void add_integer(int x);  // Add x to fraction\nprivate:\n  ❷ int numerator {123};     // Weird values so we can see\n     int denominator {456};   //   what the compiler is doing\n};\n#endif\n```", "```\n// Get two fractions from the user and increment each by 1.\n\n#include \"fraction_2.h\"\n\nint main(void)\n{\n    Fraction x;\n    x.display();\n    x.get();\n    x.add_integer(1);\n    x.display(); \n  ❶ Fraction y(78);\n    y.display();\n    y.get();\n    y.add_integer(1);\n    y.display();\n\n    return 0;\n}\n```", "```\n           .arch armv8-a\n           .file   \"inc_fractions.cpp\"\n           .text\n         ❶ .section .text._ZN8FractionC2Ei,\"axG\",@progbits,_ZN8FractionC5Ei,comdat\n           .align  2\n         ❷ .weak   _ZN8FractionC2Ei    /// Define label once\n           .type   _ZN8FractionC2Ei, %function\n❸ _ZN8FractionC2Ei:\n           sub     sp, sp, #16\n           str     x0, [sp, 8]\n           str     w1, [sp, 4]         /// Save n\n           ldr     x0, [sp, 8]\n         ❹ ldr     w1, [sp, 4]\n           str     w1, [x0]            /// Initialize numerator\n           ldr     x0, [sp, 8]\n         ❺ mov     w1, 456             /// Initialize denominator\n           str     w1, [x0, 4]\n           nop\n           add     sp, sp, 16\n           ret\n           .size   _ZN8FractionC2Ei, .-_ZN8FractionC2Ei\n           .weak   _ZN8FractionC1Ei\n           .set    _ZN8FractionC1Ei,_ZN8FractionC2Ei\n           .text\n           .align  2\n           .global main\n           .type   main, %function\n    main:\n           stp     x29, x30, [sp, -32]!\n           mov     x29, sp\n           mov     w0, 123\n           str     w0, [sp, 24] mov     w0, 456\n           str     w0, [sp, 28]\n           add     x0, sp, 24\n           bl      _ZN8Fraction7displayEv\n           add     x0, sp, 24\n           bl      _ZN8Fraction3getEv\n           add     x0, sp, 24\n           mov     w1, 1\n           bl      _ZN8Fraction11add_integerEi\n           add     x0, sp, 24\n           bl      _ZN8Fraction7displayEv\n           add     x0, sp, 16\n         ❻ mov     w1, 78               /// Constant supplied in main\n           bl     _ZN8FractionC1Ei\n           add    x0, sp, 16\n           bl     _ZN8Fraction7displayEv\n           add    x0, sp, 16\n           bl     _ZN8Fraction3getEv\n           add    x0, sp, 16\n           mov    w1, 1\n           bl     _ZN8Fraction11add_integerEi\n           add    x0, sp, 16\n           bl     _ZN8Fraction7displayEv\n           mov    w0, 0\n           ldp    x29, x30, [sp], 32\n           ret\n           .size  main, .-main\n           .ident \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n           .section       .note.GNU-stack,\"\",@progbits\n```", "```\n   // A simple Fraction class\n\n   #include \"fraction_dflt.h\"\n   // Use the following C functions.\n❶  extern \"C\" {\n        #include \"write_str.h\"\n        #include \"write_char.h\"\n        #include \"get_int.h\"\n        #include \"put_int.h\"\n   }\n   // Use char arrays because write_str is a C function.\n   char num_msg[] = \"Enter numerator: \";\n   char den_msg[] = \"Enter denominator: \";\n\n   void Fraction::get()\n   {\n       write_str(num_msg);\n       numerator = get_int();\n       write_str(den_msg); \n       denominator = get_int();\n   }\n\n   void Fraction::display()\n   {\n       put_int(numerator);\n       write_char('/');\n       put_int(denominator);\n       write_char('\\n');\n   }\n\n   void Fraction::add_integer(int x)\n   {\n       numerator += x * denominator;\n   }\n```", "```\n        .arch armv8-a\n        .file   \"fraction_asm.cpp\"\n        .text\n        .global num_msg\n        .data\n        .align  3\n        .type   num_msg, %object\n        .size   num_msg, 18\nnum_msg:\n        .string \"Enter numerator: \"\n        .global den_msg\n        .align  3\n        .type   den_msg, %object\n        .size   den_msg, 20\nden_msg:\n        .string \"Enter denominator: \"\n        .text\n        .align  2\n        .global _ZN8Fraction3getEv\n        .type   _ZN8Fraction3getEv, %function\n_ZN8Fraction3getEv:\n        stp     x29, x30, [sp, -32]!\n        mov     x29, sp\n        str     x0, [sp, 24]\n        adrp    x0, num_msg\n        add     x0, x0, :lo12:num_msg\n      ❶ bl      write_str \n        bl      get_int\n        mov     w1, w0\n        ldr     x0, [sp, 24]\n        str     w1, [x0]\n        adrp    x0, den_msg\n        add     x0, x0, :lo12:den_msg\n        bl      write_str\n        bl      get_int\n        mov     w1, w0\n        ldr     x0, [sp, 24]\n        str     w1, [x0, 4]\n        nop\n        ldp     x29, x30, [sp], 32\n        ret\n        .size   _ZN8Fraction3getEv, .-_ZN8Fraction3getEv\n--snip--\n```"]