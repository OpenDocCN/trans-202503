- en: Chapter 7. The Magic of Methods and Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 方法与区块的魔力
- en: A Method to the Madness
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 疯狂中的方法
- en: “I think that’s the last of it!” Squeaky Jim said, sweeping a pile of stray
    hash into his dustpan. “That was some mid-morning rush!”
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “我想这就是最后一份了！”嘎吱吉姆说，一边把一堆散乱的哈希倒进了簸箕。“真是个忙碌的上午高峰！”
- en: “I’ll say,” said Big Hank. He hefted a huge green compost bag onto his shoulder
    and grinned at the King, Scarlet, and Ruben. “Thanks for all your help today!
    We’d have been in a terrible pickle if you all hadn’t been here to lend a hand.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “我同意，”大汉克说。他把一个巨大的绿色堆肥袋扛到肩上，朝国王、斯卡莱特和鲁本笑了笑。“感谢今天所有的帮助！要不是你们在这里帮忙，我们可真麻烦了。”
- en: “Our pleasure!” said Ruben, who was packing three to-go boxes of hash and eggs.
    “The food here is terrific!”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “我们乐意效劳！”鲁本说，他正打包三盒哈希蛋。 “这里的食物真棒！”
- en: “Definitely!” said Scarlet. “Will you be okay for the lunch crowd? We had a
    lot of fun, and we can help some more if you need it.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “当然见过！”斯卡莱特说。“午餐高峰时你们还好吗？我们玩得很开心，如果你们需要帮助，我们还可以再帮忙。”
- en: Hank laughed as he tossed bag after bag into the kitchen’s enormous compost
    bin. “The Hashery is more of a breakfast and brunch operation,” he said. “The
    lunch crowd is usually pretty thin. I think we’ll be okay.” He dusted his hands
    off and looked around. “What are you up to for the rest of the day?”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 汉克笑着把一袋又一袋的东西扔进厨房那巨大的堆肥桶。“哈希瑞更像是一个早餐和早午餐的地方，”他说。“午餐高峰时客人通常不多。我想我们会没问题的。”他擦了擦手，看了看四周。“今天剩下的时间你打算做什么？”
- en: “Well,” the King said, “since we’ve come down this way, I was thinking we could—”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”国王说，“既然我们已经来到这里，我在想我们可以——”
- en: “Hang on a second. What’s this?” Scarlet interrupted, pulling a handful of what
    had appeared to be stray hash out of Squeaky Jim’s dustpan.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下。这是什么？”斯卡莱特打断了他，一边从嘎吱吉姆的簸箕里拿出一把看似散落的哈希。
- en: Squeaky Jim bent down to look at it. “Mostly mud,” he said.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 嘎吱吉姆弯下腰去看。“大部分是泥土，”他说。
- en: “But what are these little red needles?” she asked. “And this shiny green thing?”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “但是这些小红针是什么？”她问。“还有这个闪亮的绿色东西？”
- en: The King pulled a small magnifying glass from his kingly robe and leaned in
    to get a better look.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 国王从他的王袍里拿出一只小放大镜，凑近了点，想看得更清楚。
- en: “Aha! I’ve seen those red needles before,” said the King. “Those come from the
    Carmine Pines.” He examined the shiny green thing for a minute. “But this,” he
    said, stroking his fluffy white beard, “this is something I’ve never come across
    in all my years of kinging about.”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “啊哈！我见过这些红色的针刺，”国王说。“它们来自卡尔迈恩松。”他仔细观察了那块闪亮的绿色物体。“不过这个，”他说，一边抚摸着自己蓬松的白胡子，“这个是我多年来做国王从未遇见过的。”
- en: “It looks like a scale,” Ruben said. “Like from a fish or a lizard!”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “它看起来像是鳞片，”鲁本说。“像是鱼或者蜥蜴的！”
- en: “Sweet corn muffins!” said the King. “You’re right! But it’s too big to be from
    any normal fish or lizard. Where could it have come from?”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “甜玉米松饼！”国王说。“你说得对！但它太大，不能来自任何普通的鱼类或蜥蜴。它到底来自哪里呢？”
- en: “One thing at a time,” Scarlet said. “What are the Carmine Pines?”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “一步一步来，”斯卡莱特说。“卡尔迈恩松是什么？”
- en: “The Carmine Pines are a vast red forest on the eastern edge of the kingdom,”
    the King replied. “Only a few minutes’ walk from here, in fact.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “卡尔迈恩松是王国东部的一片广袤的红色森林，”国王回答道。“事实上，就在这里走几分钟就能到了。”
- en: Scarlet turned the scale over in her palm. “Have you ever seen anything like
    this, Hank? Jim?”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 斯卡莱特把鳞片翻转在手心里。“你们见过这样的东西吗，汉克？吉姆？”
- en: “Never,” said Jim, and Hank shook his head.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “永远不会，”吉姆说，汉克摇了摇头。
- en: Scarlet thought for a moment. “If this might be a clue to why the Hashery computer
    malfunctioned, we should investigate,” she said. “The sooner, the better!”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 斯卡莱特想了想。“如果这可能是哈希瑞计算机故障的线索，我们应该调查一下，”她说。“越早越好！”
- en: The King nodded vigorously. “This way,” he said. He turned to Big Hank and Squeaky
    Jim. “Thanks again for a lovely meal, guys!” he said. “I’ll be in again tomorrow!”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 国王用力点了点头。“这边，”他说。他转向大汉克和嘎吱吉姆。“再次感谢你们美味的午餐，伙计们！”他说。“明天我还会再来的！”
- en: “Our pleasure, Your Majesty!” Hank smiled, and he and Squeaky Jim bowed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我们乐意效劳，陛下！”汉克笑着说，他和嘎吱吉姆鞠了个躬。
- en: Waving goodbye to Hank and Jim, the King, Ruben, and Scarlet stepped out of
    the Hashery and into the bright, late-mid-morning light.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 国王、鲁本和斯卡莱特挥手告别了汉克和吉姆，走出哈希瑞，走进明亮的上午光线中。
- en: “Right over there!” said the King, standing on tiptoe and pointing. The red
    treetops of the Carmine Pines were visible less than a mile away.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “就在那里！”国王踮起脚尖指着说。卡尔迈恩松的红色树顶在不到一英里的地方可见。
- en: “Well, let’s get going,” Ruben said. “There’s still plenty of day left, and
    it’ll only take a few minutes.” With that, the three of them set out toward the
    forest.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，我们出发吧，”鲁本说道。“还有大把时间，只需要几分钟。”说完，他们三人朝森林出发。
- en: “You know,” Scarlet said after a while, “I don’t think these Ruby malfunctions
    have been accidents at all.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “你知道，”Scarlet过了一会儿说，“我觉得这些Ruby故障根本不是偶然发生的。”
- en: “Really?” asked the King.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “真的吗？”国王问。
- en: “Think about it!” said Scarlet. “Your string goes missing, the Mysterious Pipe
    overflows, the Loop goes crazy, and the Hashery’s Computing Contraption goes haywire—all
    in the same day?”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “想一想！”Scarlet说道。“你的字符串丢了，神秘管道溢出，循环出了问题，而Hashery的计算装置也坏了——这一切竟然是在同一天发生的？”
- en: “Well, the string bit might have been my fault,” the King said, sheepishly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，那个绳子的部分可能是我搞错了，”国王不好意思地说道。
- en: “Either way, I think Scarlet’s on to something,” Ruben said. “I think this is
    . . . SABOTAGE!”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “不管怎样，我觉得Scarlet说的有道理，”鲁本说。“我觉得这……是*破坏行为*！”
- en: “Great coats! Sabotage?” said the King. “Who would do such a thing?”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “天哪！破坏？”国王说道。“谁会做出这样的事？”
- en: “I don’t know,” replied Scarlet, “but one way or another, we’ll find out!”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “我不知道，”Scarlet回答，“但不管怎么说，我们会弄明白的！”
- en: After a few more minutes of walking, the trio arrived at the edge of the Carmine
    Pines. Enormous pine trees towered over them, their red needles glinting in the
    sun.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 又走了几分钟，三人终于到达了卡尔曼松树林的边缘。巨大的松树高耸入云，红色的针叶在阳光下闪闪发光。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160019.png.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160019.png.jpg)'
- en: Scarlet reached up with one hand and pulled down a handful of needles. She dug
    through her pocket with her other hand and pulled out the needles she’d found
    in Jim’s dustpan. The King examined both with his magnifying glass for nearly
    a minute.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Scarlet伸手抓起一把针。她用另一只手翻找口袋，从中拿出了她在Jim的簸箕里找到的针。国王拿着放大镜检查了这两根针，足足看了快一分钟。
- en: “Absolutely the same,” he said at last. “These needles are from the Pines, all
    right!”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “完全一样，”他最后说道。“这些针确实是松树的针！”
- en: “You were right!” said Ruben. “But what do we do now that we’re here?”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “你说得对！”鲁本说。“但是既然我们已经到了这里，接下来该做什么？”
- en: “I imagine we’ll ask for a bit of help from someone who knows the area,” the
    King said.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我们会向一个了解这里情况的人求助，”国王说。
- en: “How?” asked Scarlet and Ruben together.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “怎么回事？”Scarlet和鲁本异口同声地问道。
- en: “With a Computing Contraption, of course!” said the King.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，借助计算装置！”国王说道。
- en: Scarlet looked around. “But we’re in the middle of the forest!” she said. “There
    are no Computing Contraptions between here and the Hashery.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Scarlet四下看看。“但是我们现在在森林里！”她说道。“这里到Hashery之间根本没有计算装置。”
- en: “Computing Contraptions are everywhere in the kingdom,” the King said. “You
    just have to know where to look.” He reached up and pulled on the lowest branch
    of a nearby tree, and a cleverly hidden Computing Contraption swung out from inside
    the tree’s trunk.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “计算装置在王国的每个角落都有，”国王说道。“你只需要知道该在哪里找。”他伸手拉了拉一棵附近树的最低枝条，一台巧妙隐藏在树干里的计算装置随之从树里摇了出来。
- en: “Wow!” said Ruben. “Now what?”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “哇！”鲁本说。“那现在怎么办？”
- en: “Well, I imagine we’ll need to use Ruby to figure out who lives here in the
    Pines,” the King said. “Even if we don’t find the owner of our shiny green scale,
    we might at least find someone to help us out.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，我想我们得用Ruby来查找住在松树林里的人，”国王说道。“即使我们找不到我们那根闪闪发光的绿色鳞片的主人，至少我们可能会找到可以帮忙的人。”
- en: “Perfect!” said Scarlet. “So there’s a directory of people who live in the Kingdom
    stored in each Computing Contraption?”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “完美！”Scarlet说道。“那么每个计算装置里都有一个储存着王国居民目录的数据库？”
- en: “Well, yes,” said the King, rubbing his head. “But here’s the rub. I don’t know
    much about Ruby, but I *do* recall hearing once that there’s actually no built-in
    method to get a list of all those people.”
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，是的，”国王揉了揉头。“但是有个问题，我对Ruby不太了解，但我*确实*记得曾经听说过，实际上没有内建方法来获取所有那些人的列表。”
- en: Ruben sat down on a flat rock. “No method!” he said. “How are we supposed to
    find someone to help us if Ruby doesn’t have a built-in method for it?”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本坐在一块平坦的岩石上。“没有方法！”他说。“如果Ruby没有内建方法，我们怎么能找到人来帮忙呢？”
- en: Scarlet thought for a minute. “Well,” she said, “I *think* it’s possible to
    write our very own Ruby methods, but I’ve never actually seen it done before.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Scarlet思考了一会儿。“嗯，”她说，“我*认为*我们是可以自己编写Ruby方法的，不过我以前从没见过这样做。”
- en: “Write our own Ruby methods?” asked the King. “That would be marvelous! Are
    you sure it’s possible?”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “编写我们自己的Ruby方法？”国王问。“那太棒了！你确定这可能吗？”
- en: “Of course it’s possible!” cried a nearby voice. The King and Scarlet both jumped,
    and Ruben nearly fell off his rock. They all turned in the direction of the voice
    to see, standing only a few yards away from them . . . a knight, with sword drawn!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “当然有可能！”一个附近的声音喊道。国王和斯嘉丽都吓了一跳，鲁本差点从岩石上掉下来。他们都转过身，朝着声音的方向看去，看到离他们只有几步远的地方站着……一个骑士，拔出了剑！
- en: “Agh!” Ruben shouted, and tried to hide behind his rock.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “啊！”鲁本喊道，试图躲到岩石后面。
- en: “What in the name of midnight snack marzipan is the meaning of this?” demanded
    the King.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “这到底是怎么回事，午夜小吃马尔济潘有什么关系？”国王质问道。
- en: The knight froze, then hastily pushed her visor up on her helmet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 骑士停住了，随即匆忙把头盔的面甲推了上去。
- en: “Your Majesty!” she cried, and bowed deeply. “A bajillion apologies! I didn’t
    recognize you with my visor down.” She quickly slid her sword back into its scabbard.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “陛下！”她喊道，并深深鞠了一躬。“非常抱歉！我没认出您来，因为我的面甲盖住了脸。”她迅速将剑收回剑鞘。
- en: “A lady knight!” said Scarlet.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “一位女骑士！”斯嘉丽说道。
- en: “No, just a knight,” said the King. “After all, if she were a man, you wouldn’t
    say, ‘A man knight,’ would you?”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “不，只是个骑士。”国王说道。“毕竟，如果她是个男的，你不会说‘一个男骑士’吧？”
- en: “I suppose not,” admitted Scarlet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “我想不是。”斯嘉丽承认道。
- en: “Who are you?” Ruben asked.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “你是谁？”鲁本问。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160021.png.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160021.png.jpg)'
- en: The knight stood tall and proudly put her hands on her hips. “I’m the Off-White
    Knight!” she replied.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 骑士挺直了腰背，自豪地把手放在臀部。“我是Off-White骑士！”她回答道。
- en: “Off-white?” asked the King. “Your armor is more of an eggshell color, I think.”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “Off-white？”国王问道。“我觉得你的盔甲更像是蛋壳色。”
- en: “Maybe an ecru,” Scarlet said, squinting.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “也许是米色。”斯嘉丽眯着眼说。
- en: “I think that’s a large bird,” said the King.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “我觉得那是一只大鸟。”国王说。
- en: “Enough tomfoolery!” said the knight. “I am the *Off-White* Knight, and now
    it’s time for you to DEFEND yourselves!”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “够了，别再闹了！”骑士说道。“我是*Off-White*骑士，现在是你们自卫的时候了！”
- en: “Agh!” shouted Ruben again, covering his head with his hands.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “啊！”鲁本又喊道，双手抱头。
- en: The knight tried to scratch her head, but ended up scratching the outside of
    her helmet. “Why are you cowering like that?” she asked.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 骑士试图挠头，却不小心刮到了头盔的外部。“你为什么那样缩着身子？”她问道。
- en: “Aren’t you going to slay us?” Ruben asked.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “你们不打算把我们杀掉吗？”鲁本问道。
- en: The Off-White Knight laughed. “Heavens, no!” she said. “In fact, it’s my knightly
    duty to help anyone in the Carmine Pines who needs assistance, so I’ll show you
    how to write your own Ruby methods.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那位Off-White骑士笑了。“天哪，绝对不是！”她说。“事实上，作为骑士，我的职责就是帮助卡门松树林中需要帮助的人，所以我来教你们如何编写自己的Ruby方法。”
- en: “But it’s daytime,” said the King.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “但这是白天。”国王说道。
- en: Ruben and Scarlet gave each other a knowing look.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本和斯嘉丽交换了一个心照不宣的眼神。
- en: Defining Your Own Methods
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义你自己的方法
- en: The Off-White Knight cleared her throat. “Yes. Well,” she said, “what I was
    trying to say was that you certainly *can* define your own Ruby methods. You simply
    need to use the special words `def` and `end`.” She walked up to the cleverly
    disguised Computing Contraption and began typing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Off-White骑士清了清嗓子。“是的。嗯，”她说，“我想说的是，你完全可以定义你自己的Ruby方法。你只需要使用特殊的词汇`def`和`end`。”她走到那个巧妙伪装的计算装置旁，开始打字。
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '“You start by typing `def`, which is short for *define*, because you’re defining
    a brand-new method. Next, you type the name of your method, which is `simon_says`
    in this case. Then you put the *parameters* next, in between parentheses. For
    this method, we have just one parameter: `phrase`.”'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “你先输入`def`，这是*define*的缩写，因为你在定义一个全新的方法。接下来，输入方法的名字，在这个例子中是`simon_says`。然后在括号之间输入*参数*，这个方法只有一个参数：`phrase`。”
- en: “The what now?” asked the King, rubbing his head with both hands.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “什么？”国王一边揉着头，一边问道。
- en: “The parameters,” said the Off-White Knight. “They’re sort of like placeholders
    or nicknames for the information you’ll give your method when you call it.”
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “参数。”Off-White骑士说道。“它们就像占位符或你在调用方法时给方法传递的信息的昵称。”
- en: “Let me get this straight,” said the King. “When you write out what a method
    does using `def` and `end`, that’s called *defining* the method.”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: “让我弄明白。”国王说道。“当你用`def`和`end`写出一个方法做什么的时候，那叫做*定义*这个方法。”
- en: “That’s right,” said the knight.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “没错。”骑士说。
- en: “And when you actually use the method somewhere, that’s *calling* the method.”
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “当你在某个地方实际使用方法时，那就是*调用*该方法。”
- en: '“Indeed!” said the knight. “Sometimes we say *invoke* instead of *call*, but
    they mean exactly the same thing. You define a method so Ruby knows what it does,
    and you call the method when you want to use it. Calling a method looks like this,”
    she continued, and typed some more:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “的确！”骑士说，“有时候我们说*调用*而不是*调用*，但它们的意思完全一样。你定义一个方法，让Ruby知道它做什么，而你在需要使用时调用这个方法。调用一个方法看起来是这样的，”她继续说，并输入更多内容：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: “I’m a bit fuzzy right now,” said the King.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “我现在有点模糊了，”国王说。
- en: “You’re a bit fuzzy all the time,” said the Off-White Knight, eyeing the King’s
    fluffy beard.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “你总是有点模糊，”灰白骑士说，盯着国王蓬松的胡子。
- en: “Yes, yes,” said the King, “but I’m also still confused. Could you go over calling
    the method a bit?”
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，是的，”国王说，“但是我仍然有些困惑。你能再讲讲如何调用方法吗？”
- en: “Of course!” said the knight. “When we defined the `simon_says` method earlier,
    we just told Ruby what code to run whenever we use the name `simon_says`. We can
    then use that code by writing the method name and putting in our own bit of information—the
    string `'Prepare for battle!'`—where we had the `phrase` parameter before. Like
    I said, `phrase` is just like a placeholder that sits between the parentheses
    until we’re ready to use the method with `'Prepare for battle!'`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”骑士说，“当我们之前定义`print_sum`方法时，我们只是告诉Ruby每当我们使用`simon_says`这个名字时运行什么代码。然后我们可以通过写方法名并插入自己的信息——字符串`‘Prepare
    for battle!’`——来使用这段代码，就像之前`phrase`参数一样。正如我所说，`phrase`就像一个占位符，直到我们准备好使用带有`‘Prepare
    for battle!’`的方法时，它才出现在括号之间。”
- en: “What about the parentheses around `'Prepare for battle!'`?” Ruben asked. “I’ve
    seen Ruby methods get called without parentheses before.”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “那‘Prepare for battle!’周围的括号呢？”Ruben问，“我之前看到过没有括号的Ruby方法调用。”
- en: “You’re right!” said the knight. “The parentheses are optional; you usually
    use them when you define the method, but you can use them or skip them when you
    call the method. It’s all the same to Ruby!”
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “你说得对！”骑士说，“括号是可选的；你通常在定义方法时使用它们，但在调用方法时，你可以选择使用或省略它们。对Ruby来说都是一样的！”
- en: return Versus puts
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: return与puts
- en: “All right, I understand defining and calling now,” said the King. “But what’s
    this `return` business, and how is it different from `puts`? Don’t they both print
    things on the screen?”
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “好的，我现在明白定义和调用了，”国王说，“但这个`return`是怎么回事，它和`puts`有什么不同呢？它们不都是把东西打印到屏幕上吗？”
- en: “Aha!” said the Off-White Knight. “A lot of people find this very confusing,
    but I think I can show you the difference between `return` and `puts` with just
    a couple of examples.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “啊哈！”灰白骑士说，“很多人觉得这很混淆，但我想我可以通过几个例子向你展示`return`和`puts`之间的区别。”
- en: '“Here we define a method called `print_sum` that prints the sum of two numbers
    with `puts`,” she said:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “这里我们定义了一个叫做`print_sum`的方法，它用`puts`打印两个数字的和，”她说：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “Next, we’ll define a second method that *returns* the sum.”
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “接下来，我们将定义第二个方法，它*返回*和。”
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: “Do you see the difference between the `print_sum` and `return_sum` methods
    we defined?” the knight asked. “One `puts`, the other `return`s.” Scarlet, Ruben,
    and the King all nodded.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “你看我们定义的`print_sum`和`return_sum`方法的区别了吗？”骑士问，“一个是`puts`，另一个是`return`。”Scarlet、Ruben和国王都点了点头。
- en: “Perfect!” said the Off-White Knight. “Let’s see what that really means for
    what our Ruby code does. First, we’ll call our `print_sum` method.”
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “完美！”灰白骑士说，“让我们看看这对我们Ruby代码的实际意义。首先，我们调用我们的`print_sum`方法。”
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '“See that?” said the knight. “`puts` will print something on the screen for
    you—in this case, it added `2` and `3` and printed the result `5` to the screen—but
    it won’t *do* anything with the value of `5`: it produces `nil` after doing the
    printing! When we check out the value of `sum`, we see that it’s `nil`.”'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “看到了吗？”骑士说，“`puts`会在屏幕上打印某些东西——在这种情况下，它加了`2`和`3`，并把结果`5`打印到屏幕上——但它不会*做*任何事与值`5`：它在打印后产生`nil`！当我们检查`sum`的值时，我们看到它是`nil`。”
- en: '“Now let’s call our `return_sum` method.” She typed some more:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “现在让我们调用我们的`return_sum`方法。”她继续输入：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160023.png.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160023.png.jpg)'
- en: “*Now* I understand,” said the King. “Printing something just makes that value
    appear on the screen, but *returning* it lets you store that value in a variable,
    as we did with `sum`.”
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “*现在*我明白了，”国王说，“打印某个东西只是让该值出现在屏幕上，但*返回*它则让你将该值存储在变量中，就像我们对`sum`所做的那样。”
- en: “You’ve got it!” said the knight. “A method is just like a little machine. Things
    go into it and things come out. The things that go into a method when you call
    it are its *arguments*, and the thing that comes out is its *return value*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “你明白了！”骑士说。“一个方法就像一个小机器。东西进入它，东西从它出来。进入方法的东西在你调用时是它的*参数*，出来的东西是它的*返回值*。”
- en: “If a method doesn’t have a specific return value, it returns `nil`. You know
    how you always see `=> nil` when you `puts` or `print` something? That’s because
    although the `puts` and `print` methods write text on the screen, they don’t have
    a return value, so they *return* `nil`.”
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “如果一个方法没有特定的返回值，它会返回`nil`。你知道每次你`puts`或`print`一些东西时，看到`=> nil`吗？那是因为尽管`puts`和`print`方法在屏幕上写入文本，它们没有返回值，所以它们*返回*`nil`。”
- en: “Hang on a moment,” said the King. “If a method can automatically return `nil`
    when it has no other value to return, why can’t we automatically return other
    values?”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，”国王说。“如果一个方法在没有其他返回值时能自动返回`nil`，为什么我们不能自动返回其他值呢？”
- en: Understanding Method Arguments
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解方法参数
- en: “We can!” said the Off-White Knight. “Whenever you’re in a method definition,
    Ruby automatically returns the last bit of Ruby code that gets run. If you want
    to save some typing, you can leave off the `return` keyword if the last thing
    in your method is the return value, and Ruby will automatically return it for
    you.”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “我们可以！”白骑士说。“每当你在方法定义中，Ruby会自动返回最后执行的Ruby代码。如果你想省点打字，可以省略`return`关键字，只要方法的最后一行是返回值，Ruby会自动为你返回它。”
- en: '“Awesome!” said Ruben “Anything that saves us some typing is good. Now, just
    to back up a second to the difference between parameters and arguments: parameters
    are the handy names you put between parentheses in your method *definition* to
    let your method know what kinds of information it will get, and the arguments
    are the information you actually give to your method when you *call* it,” Ruben
    said.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”鲁本说。“任何能节省我们打字的方式都很好。现在，稍微回顾一下参数和参数之间的区别：参数是在方法*定义*中括号之间的便捷名称，用来告诉方法它将获得哪种类型的信息，而参数则是你在*调用*方法时实际传递给它的信息。”鲁本说道。
- en: '“Quite right!” said the Off-White Knight. “Hang on, let me give you another
    example.” She typed furiously into the Computing Contraption, narrating all the
    while. “Let’s define a method called `add_things` with the parameters `thing_one`
    and `thing_two` and `return` their sum. That’d look like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确！”白骑士说道。“等一下，让我再给你一个例子。”她愤怒地敲击着计算机装置，同时叙述着。“我们来定义一个叫做`add_things`的方法，它有`thing_one`和`thing_two`两个参数，并返回它们的和。它看起来应该是这样的：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: “Next, we’ll *call* the method with the arguments `3` and `7`. The return value
    is `10`.”
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “接下来，我们将*调用*这个方法，传入参数`3`和`7`。返回值是`10`。”
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '“That’s great,” said Scarlet, “but what happens if you want to sometimes pass
    an argument to a method, and sometimes not? If you don’t pass the right number
    of arguments, Ruby throws an error!” She typed into the Computing Contraption:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “太好了，”斯嘉丽说，“但是如果你想要有时候传递一个参数给方法，有时候又不传，怎么办？如果你没有传递正确数量的参数，Ruby会抛出一个错误！”她在计算机装置上敲打：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: “Yeah!” said Ruben. “Here, Ruby’s saying that it got zero arguments, but it
    expected one.”
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “是的！”鲁本说。“这里，Ruby说它得到了零个参数，但它期望得到一个。”
- en: '“Great point!” said the Off-White Knight. “In that case, you can use *optional*
    or *default* parameters. Those are special parameters that come with a placeholder
    value, and if you don’t give Ruby arguments for those parameters when you call
    the method, Ruby inserts the placeholders instead. Let me define a method like
    that for you,” she said, and began typing at the Computing Contraption once more:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “很好的观点！”白骑士说。“在这种情况下，你可以使用*可选*或*默认*参数。那些是带有占位符值的特殊参数，如果你在调用方法时没有给Ruby传递这些参数，Ruby会插入占位符。让我为你定义一个这样的函数。”她说道，开始再次在计算机装置上敲击键盘：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '“See the equal sign?” she said. “That tells the method to use that string if
    it’s not told otherwise. Now, without any arguments, the method will use the default
    name,” she said. “Let’s try calling it!” She typed some more:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “看到等号了吗？”她说。“这告诉方法，如果没有其他指示，就使用这个字符串。现在，如果没有任何参数，方法将使用默认的名称，”她说。“我们来试试调用它！”她继续敲击键盘：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “Wow!” said Ruben. “You didn’t pass any arguments at all, so the default one
    was used automatically.”
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “哇！”鲁本说。“你根本没传任何参数，所以默认值被自动使用了。”
- en: '“That’s right,” said the knight. “And again, because Ruby is super flexible,
    you don’t even need the parentheses to show that you’re calling a method!” She
    typed even more:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”骑士说道。“而且，因为 Ruby 非常灵活，你甚至不需要括号就能表明你在调用一个方法！”她又输入了更多代码：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “That looks a little *too* magical to me,” said the King. “If there were lots
    of code floating around, how would I immediately know the difference between a
    method with no parentheses and a plain old variable?”
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “这看起来有点*太*神奇了，”国王说道。“如果有很多代码在运行，我怎么才能立刻区分没有括号的方法和普通的变量？”
- en: “That’s a good point,” said the Off-White Knight. She tried to wipe the sweat
    from her brow, but accidentally knocked her visor down instead. “I often use the
    parentheses, because they make it clear I’m using a method and not something else,
    like a variable.”
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: “这个观点很不错，”米白骑士说道。她试图擦去额头上的汗水，却不小心把面罩拉下来了。“我经常使用括号，因为它能清楚地表明我在使用一个方法，而不是其他东西，比如一个变量。”
- en: '“Now, let’s say you *do* want to use your own name,” she continued, struggling
    to push her visor back up. “You just pass it in—with or without parentheses—like
    this.” She typed a few more lines:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，假设你*确实*想用你自己的名字，”她继续说道，努力把面罩推回去。“你只需要传递它——带括号或不带括号——像这样。”她又输入了几行代码：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: “Whew!” said the Off-White Knight. “Let me take a break for just a second. My
    gauntlets are tired.”
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: “呼！”米白骑士说道。“让我休息一下，手套太累了。”
- en: What Is nil?
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nil 是什么？
- en: “Of course,” said the King. “I’m still a bit hung up on `nil`, though,” he said.
    “What *is* it?”
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”国王说道。“不过，我还是有点困惑 `nil`，”他说。“它*到底*是什么？”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160025.png.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160025.png.jpg)'
- en: “I think I know the answer to that one,” Ruben said. “`nil` is Ruby’s way of
    saying ‘nothing at all.’ When Ruby wants to express the idea of ‘nothing’ or ‘no
    value,’ it uses `nil`.”
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我知道答案了，”鲁本说道。“`nil` 是 Ruby 表达‘什么都没有’的一种方式。当 Ruby 想表达‘什么都没有’或者‘没有值’时，它使用 `nil`。”
- en: “Is `nil true` or `false`?” asked the King.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: “`nil` 是 `true` 还是 `false`？”国王问道。
- en: “Neither!” said Ruben. “It’s its very own thing. But it *is* one of two *falsey*
    values in Ruby—the other is `false`.”
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: “没有！”鲁本说。“它是它自己的东西。但它*确实*是 Ruby 中两个*假值*之一——另一个是 `false`。”
- en: “What do you mean by ‘falsey’?” asked the King.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: “你说的‘falsey’是什么意思？”国王问道。
- en: '“I mean that if you use `nil` in an `if` statement, it will be the opposite
    of `true`,” Ruben said. “This should look familiar.” He typed into the Computing
    Contraption:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: “我的意思是，如果你在 `if` 语句中使用 `nil`，它将是 `true` 的反面，”鲁本说道。“这应该很熟悉。”他在计算装置中输入了代码：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: “Your code didn’t print anything on the screen!” said the King.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: “你的代码没有在屏幕上打印任何东西！”国王说道。
- en: Ruben nodded. “That’s because Ruby will never treat `if nil` as a true condition.
    To Ruby, saying ‘if nothing’ and ‘if false’ are the same, so it will never run
    the code between `if nil` and `end`.” He thought for a moment. “Remember the `if`
    statement?” he asked.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本点了点头。“这是因为 Ruby 永远不会将 `if nil` 当作一个 `true` 条件。对 Ruby 来说，说‘if nothing’和‘if
    false’是一样的，所以它永远不会执行 `if nil` 和 `end` 之间的代码。”他想了想。“记得 `if` 语句吗？”他问道。
- en: The King nodded vigorously. “As if it were only yesterday!” he said.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 国王用力点了点头。“就像是昨天一样！”他说。
- en: “It was today,” said Ruben.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: “是今天，”鲁本说道。
- en: “Tomato, tomato,” said the King, pronouncing the word the same way both times.
    Ruben and Scarlet looked at each other and shrugged.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: “番茄，番茄，”国王说道，两次发音完全一样。鲁本和斯嘉丽互相看了看，然后耸了耸肩。
- en: '“Anyway,” said Ruben, “The `if` statement takes a bit of Ruby code and does
    one thing if that code is `true` and something else if it’s `false`. `nil` is
    always treated like `false` in `if` statements, so to make something happen if
    a value is `nil`, you might think you have to do this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: “总之，”鲁本说道，“`if` 语句会获取一段 Ruby 代码，如果这段代码是 `true` 就做一件事，如果是 `false` 就做另一件事。`nil`
    在 `if` 语句中总是被当作 `false` 来处理，因此，如果你想在一个值是 `nil` 时执行某些操作，你可能会认为需要这样做：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '“But there’s a piece of built-in Ruby code we’ve already seen that means the
    same thing as ‘if not’: `unless`!” Ruben typed some more:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: “不过我们已经见过一段内置的 Ruby 代码，它和‘if not’的意思完全一样：`unless`！”鲁本又输入了一些代码：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: “`unless` has the exact same meaning as ‘if not.’ When we say ‘Stay up late
    *if* you’re *not* sleepy,’ that means the same thing as ‘Stay up late *unless*
    you’re sleepy,’” Ruben explained.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: “`unless` 和 ‘if not’ 的含义完全相同。当我们说‘如果不困就熬夜’，这和‘除非困了就熬夜’的意思是一样的，”鲁本解释道。
- en: “I’ve seen this before!” said the King. “We use `unless` in Ruby anytime we’d
    otherwise use `if` and `!`.”
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: “我以前见过这个！”国王说道。“我们在 Ruby 中使用 `unless`，每当我们本该使用 `if` 和 `!` 时。”
- en: '“Right!” said Ruben. “Both `false` and `nil` will behave the same way when
    used in an `if` or `unless` statement, but it’s important to remember that `nil`’s
    not the exact same thing as `false`.” He continued typing:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: “对！”鲁本说。“`false` 和 `nil` 在 `if` 或 `unless` 语句中表现相同，但记住 `nil` 和 `false` 并不完全一样。”他继续输入：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '“Did you see that `=> nil` at the end of the `unless` example?” the Off-White
    Knight asked. “That’s what I was talking about. `nil` is the return value of `puts`.
    Check it out!” She reached over Ruben’s head and typed some more:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “你看到 `unless` 示例末尾的 `=> nil` 吗？”白色骑士问。“那就是我说的。`nil` 是 `puts` 的返回值。看一下！”她伸手越过鲁本的头，继续输入：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: “One last thing about `nil`,” said the knight. “Not only is it *not* the same
    thing as `false`, it’s *not* the same thing as zero! Zero is a number; `nil` is
    simply nothing at all.”
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: “关于 `nil` 还有最后一件事，”骑士说。“它不仅 *不是* 和 `false` 一样，它 *也不是* 和零一样！零是一个数字；`nil` 只是根本什么也不是。”
- en: “I think I’ve got it now,” said the King.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: “我现在明白了，”国王说。
- en: Splat Parameters
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Splat 参数
- en: '“Right,” said the knight. “Then we’re on to more method magic! I showed you
    how to make a method take an optional argument, but Ruby also lets you tell a
    method to take *any number* of arguments. *Splat parameters* are the way to tell
    a Ruby method, ‘Hey, I’m going to pass you a whole list of things to use. I don’t
    know how many, so just deal with whatever number I send!’” The knight flexed her
    fingers a few times. “They work like this,” she said, and began typing:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: “对，”骑士说，“那么我们进入更多方法魔法！我已经告诉你如何让一个方法接收一个可选参数，但 Ruby 还允许你告诉方法接收 *任意数量* 的参数。*Splat
    参数* 就是告诉 Ruby 方法：‘嘿，我会传给你一个完整的东西列表。我不知道有多少个，所以你就处理我传给你的任何数量吧！’”骑士活动了几下手指。“它们是这么工作的，”她说，然后开始输入：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: “You can think of the asterisk (`*`) in our first line as a little splat mark
    that tells the method to take the whole messy bucket of arguments, no matter how
    many, and do something with them,” the Off-White Knight said.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: “你可以把我们第一行中的星号（`*`）看作是一个小的 splat 标记，它告诉方法接收所有的参数，无论有多少，并对它们做一些操作。”白色骑士说。
- en: “I see the little splat next to the parameter name,” said the King, “but not
    in the method body and not when you call the method. Is the `*` only used when
    you define the method and only between the parentheses?”
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: “我看到了参数名旁边的小星号，”国王说，“但在方法体内看不到，也没有在调用方法时看到。`*` 是不是只在定义方法时使用，并且只在圆括号之间？”
- en: '“Exactly,” said the knight. “Ruby is very smart—you only have to tell it something
    once! As I mentioned,” the Off-White Knight continued, “Ruby realizes that the
    last thing that appears in your method body is probably the thing you want to
    return. So, as I mentioned earlier, if you want to save some typing, you can leave
    off the `return` keyword if the last thing in your method is the return value.
    Ruby does it automatically! That means that this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: “正是如此，”骑士说。“Ruby 很聪明——你只需要告诉它一次！正如我提到的，”白色骑士继续道，“Ruby 会自动意识到方法体内最后出现的内容可能就是你想返回的东西。所以，如我之前提到的，如果你想省略一些输入，当方法的最后一行是返回值时，你可以省略
    `return` 关键字。Ruby 会自动处理！这意味着，像这样：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: is exactly the same as this!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 完全等同于这个！
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: “Wonderful!” said Scarlet. “I’ll definitely remember that trick when writing
    my own methods.”
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”斯嘉丽说，“我肯定会记住这个技巧，等写我自己的方法时用上。”
- en: “And now,” said the Off-White Knight, pulling her sword out of its scabbard,
    “it’s time for you to YIELD!”
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，”白色骑士说着，拔出剑，“是时候让你执行 YIELD 了！”
- en: “Agh!” shouted Ruben, covering his head with his hands again.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “啊！”鲁本喊道，再次用手捂住了头。
- en: Block Methods
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块方法
- en: The Off-White Knight struggled to get her sword back into its scabbard. “You
    really should do something about that cowering habit,” she said. “What I was saying
    is, you need to use the `yield` keyword when you write your own Ruby methods that
    take blocks.”
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 白色骑士费力地将剑重新插回鞘中。“你真的应该改掉那个畏缩的习惯，”她说。“我刚才说的是，当你写自己的 Ruby 方法并且接收块时，你需要使用 `yield`
    关键字。”
- en: “Oh,” Ruben said, slowly putting his hands down again.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，”鲁本说，慢慢地又把手放了下来。
- en: “Wait, you can write your own Ruby methods that take blocks?” Scarlet asked.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，你可以写自己的 Ruby 方法来接收块吗？”斯嘉丽问。
- en: '“Of course!” said the knight. “You’d write it like so,” she said, and typed
    in the Computing Contraption:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”骑士说。“你会像这样写，”她说着，在计算装置中输入：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: “First,” said the knight, “we define a method, `my_block_method`, using `def`.
    Next, we use the `yield` keyword to tell the method to let the code inside the
    block run; when you call the method with a block, whatever happens in the block
    is what the method does! Let’s look at some examples.”
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “首先，”骑士说道，“我们定义一个方法，`my_block_method`，使用 `def`。接下来，我们使用 `yield` 关键字告诉方法让块中的代码运行；当你调用这个方法并传入一个块时，块中的内容就是方法执行的内容！让我们来看几个例子。”
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '“Here, we’re calling `my_block_method` and passing in a block that just adds
    `1 + 1`, so `my_block_method` returns `2`. We can also do other things, like print
    text:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: “这里，我们调用 `my_block_method` 并传入一个块，块中只是加了 `1 + 1`，所以 `my_block_method` 返回 `2`。我们还可以做其他的事情，比如打印文本：”
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: “`my_block_method` lets the code in the block run, so it prints out `Hello from
    the block!` We see the `nil` because `puts` prints out text on the screen, but
    the value it returns is `nil`,” the knight explained.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: “`my_block_method` 让块中的代码运行，所以它打印出了 `Hello from the block!` 我们看到 `nil` 是因为 `puts`
    在屏幕上打印文本，但它返回的值是 `nil`，”骑士解释道。
- en: “What’s a block, again?” the King asked.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “块是什么来着？”国王问。
- en: “A block is just a bit of Ruby code between curly brackets or between `do` and
    `end`,” said the knight. “You’ve probably seen built-in methods like `each` that
    use blocks, but now you can create your own methods that use blocks!”
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: “块只是一些 Ruby 代码，放在大括号之间，或者放在 `do` 和 `end` 之间，”骑士说道，“你可能见过像 `each` 这样的内建方法使用块，但现在你也可以创建你自己的方法来使用块了！”
- en: “That’s amazing!” said Scarlet. “But can you use splat parameters and blocks
    together?”
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”Scarlet说道，“但你能把 splat 参数和块一起使用吗？”
- en: “You can!” said the knight. “You can pass regular, default, *and* splat arguments
    to any method you write, and they can be in any order.”
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: “你可以的！”骑士说道，“你可以将常规参数、默认参数、*和* splat 参数传递给你写的任何方法，并且它们可以按任何顺序出现。”
- en: The knight cracked her knuckles and typed into the Computing Contraption, explaining
    as she went along. “Let’s build a little something we can use to quickly and easily
    introduce ourselves,” she said. “After all, we knights are always having to go
    around introducing ourselves as we sally forth into a new town.”
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 骑士伸了伸手指，打了个响指，开始在计算装置上输入，并一边解释：“让我们来构建一个我们可以用来快速轻松自我介绍的小工具，”她说道，“毕竟，我们骑士总是得到处去新城镇时介绍自己。”
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: “We’re not done yet,” said the knight, “but let’s go over this. First, I defined
    the `all_about_me` method to take three parameters. We see a regular old `name`
    parameter and an `age` parameter, which defaults to `100` if no age is passed
    in when the method is called.”
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “我们还没完，”骑士说道，“但让我们来回顾一下。首先，我定义了 `all_about_me` 方法，接受三个参数。我们看到一个普通的 `name` 参数和一个
    `age` 参数，如果没有传入年龄，默认值是 `100`。”
- en: “But you could have written the `age` parameter with its default first, then
    the `name` one,” Ruben said.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: “但是你本来可以先写上带默认值的 `age` 参数，再写 `name` 参数，”Ruben说道。
- en: “You got it,” said the knight. “Finally, the `*pets` splat parameter! That can
    come in any order with respect to the regular or default parameters, but we happened
    to put it at the end.”
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: “你明白了，”骑士说道，“终于，`*pets` splat 参数！它可以与常规或默认参数按任何顺序出现，不过我们正好把它放在了最后。”
- en: “I get that part,” said the King, “but what’s this `block_given?` business?”
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: “我明白这部分了，”国王说道，“但是 `block_given?` 是怎么回事？”
- en: “That’s a built-in Ruby method,” said the knight. “It returns `true` if the
    method was passed a block as an argument and `false` otherwise. I wrote the `all_about_me`
    method so it `yield`s to the block if there is one, sending the list of pets to
    the block; otherwise, it just uses `puts` to print out the pets. Don’t worry if
    `block_given?` doesn’t make perfect sense now—we’ll be seeing more of it later
    on.”
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: “那是一个 Ruby 内建方法，”骑士说道，“如果方法接收到了块作为参数，它会返回 `true`，否则返回 `false`。我写了 `all_about_me`
    方法，它会在传入块时 `yield` 给块，传递宠物列表给块；否则，它只是用 `puts` 打印出宠物列表。如果 `block_given?` 现在还不完全明白也没关系——我们稍后会看到更多。”
- en: “Why is it `yield pets` and not just `yield`?” Scarlet asked.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么是 `yield pets` 而不是仅仅 `yield`？”Scarlet问道。
- en: “An excellent question,” said the knight. “Earlier, we just wanted to let the
    block handle everything that was passed to our method, so we simply typed `yield`.
    Now, though, we want our block to care only about `pets`, so we specifically give
    only our list of pets to the block.”
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: “这是个很好的问题，”骑士说道，“之前我们只是想让块处理传给我们方法的所有内容，所以我们简单地写了 `yield`。但现在，我们希望块只关注 `pets`，所以我们特意只将宠物列表传给块。”
- en: The knight’s fingers moved again across the Computing Contraption, giving their
    newly defined method a try.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 骑士的手指再次在计算装置上移动，试验着他们新定义的方法。
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: “That’s me!” said Ruben. “That’s amazing. What else can we do?”
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: “那是我！”鲁本说道，“太棒了。我们还能做什么？”
- en: '“Well,” said the Off-White Knight, “We can use that block I mentioned earlier!
    Look what happens if we pass a block to our method, then refer to the pets we
    pass in with `pets`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”白色骑士说道，“我们可以使用我之前提到的那个块！看看如果我们把一个块传递给我们的方法，然后通过 `pets` 引用我们传递的宠物会发生什么：”
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: “This looks a lot like the last example,” said Scarlet. “But the block is pretty
    tricky. What’s it doing?”
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: “这看起来和上一个例子很像，”红衣骑士说道，“但是这个块挺复杂的。它在做什么？”
- en: '“I’ll walk you through it! First, `{ |pets| puts pets}` would simply tell Ruby:
    ‘Hey, block! I’m going to pass you a variable, `pets`, and you should print it
    out.’”'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: “我来给你们讲解！首先，`{ |pets| puts pets}` 只是告诉 Ruby：‘嘿，块！我要传给你一个变量 `pets`，你应该把它打印出来。’”
- en: “But then `all_about_me` would just print out the array elements, and it wouldn’t
    look very nice,” Scarlet said.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: “但是然后，`all_about_me` 只会打印出数组的元素，看起来不太好看，”红衣骑士说道。
- en: “Exactly!” said the knight. “So I’m also using a built-in Ruby method, `join`.
    Ruby array elements can be `join`ed to make strings, so I’m using `join` to turn
    the array of pets into a string with `' and '` in the middle.”
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”骑士说道，“所以我也在使用一个内建的 Ruby 方法，`join`。Ruby 数组的元素可以通过 `join` 方法连接成字符串，所以我正在用
    `join` 把宠物数组转化成一个字符串，中间用 `' and '` 连接。”
- en: “Could you show us another example?” Ruben asked.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: “你能给我们看一个别的例子吗？”鲁本问道。
- en: '“Sure,” said the knight. “Here’s one where we can use `join` to turn an array
    of numbers into a string with `''plus''` between each number:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”骑士说道，“这里有一个例子，我们可以用 `join` 把一个数字数组转换成一个字符串，每个数字之间加上 `'plus'`：”
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: “There’s always something new to discover in Ruby,” marveled the King.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: “Ruby 总是有新东西可以发现，”国王惊叹道。
- en: Into the Dagron’s Lair
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入达戈龙的巢穴
- en: “Speaking of discoveries,” said Scarlet, “that reminds me!” She rummaged around
    in her pockets. “Have you ever seen anything like this before?” She held out the
    glittering green scale for the Off-White Knight to examine.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: “说到发现，”红衣骑士说道，“这让我想起来了！”她在口袋里翻找。“你以前见过这样的东西吗？”她拿出了那片闪闪发光的绿色鳞片，让白色骑士检查。
- en: “Great googly moogly!” said the Off-White Knight. “That scale looks like it
    belongs to the Dagron!”
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: “天啊！”白色骑士说道，“这片鳞片看起来像是达戈龙的！”
- en: “You mean the *dragon*,” Ruben offered.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: “你是说那只 *龙*？”鲁本猜测。
- en: “No, the Dagron,” said the Off-White Knight. “That’s her name. Though she *is*
    a dragon.”
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: “不，达戈龙，”白色骑士说道，“那是她的名字。虽然她确实是一条龙。”
- en: “A lady dragon!” said Ruben.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: “一只母龙！”鲁本说道。
- en: “No, just a dragon,” said the Off-White Knight. “If she were a man, would you
    call her a man dragon?”
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: “不，只是一条龙，”白色骑士说道，“如果她是个男人，你会称她为‘男人龙’吗？”
- en: “I guess not,” admitted Ruben. He looked around nervously. “But there’s really
    a dragon in the Carmine Pines?”
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: “我猜不是，”鲁本承认道。他紧张地四处张望。“但是在卡尔敏松林里真有龙吗？”
- en: “Not to worry,” said the knight. “The Dagron is a very powerful dragon, but
    she’s also wise and well mannered. In fact, I’m surprised you found one of her
    scales anywhere trouble’s been brewing. That doesn’t sound like the Dagron I know.”
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: “别担心，”骑士说道，“达戈龙是一只非常强大的龙，但她也非常聪明且有礼貌。事实上，我很惊讶你在麻烦发生的地方找到了她的一片鳞片。这听起来不像是我认识的达戈龙。”
- en: “Well, it *sounds* like we’d best find her and ask what’s going on,” said the
    King. “Lead the way, madam knight!”
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，*听起来*我们最好去找她问问发生了什么，”国王说道，“带路吧，女士骑士！”
- en: “To the Dagron!” said the Off-White Knight, flipping her visor down over her
    eyes. “This way!” The knight set off deeper into the forest, and the King, Scarlet,
    and Ruben followed.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: “去找达戈龙！”白色骑士说着，把面罩拉下来遮住了眼睛。“这边！”骑士朝森林深处走去，国王、红衣骑士和鲁本跟在后面。
- en: After walking for a few minutes, they began to hear a low, rhythmic *whooshing*
    sound, like someone squeezing bellows on a fire.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 走了几分钟后，他们开始听到低沉而有节奏的 *呼呼声*，就像有人在用风箱给火加油。
- en: “What’s that?” Ruben whispered.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: “那是什么？”鲁本低声问。
- en: “The Dagron!” whispered the knight. “Here she is!” And before they knew it,
    they found themselves in front of an enormous dragon curled up in a shining green
    circle, asleep.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: “达戈龙！”骑士低声说。“她在这里！”他们还没反应过来，便发现自己站在一只庞大的龙面前，这只龙蜷缩在一个闪闪发光的绿色圈子里，正在睡觉。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160027.png.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160027.png.jpg)'
- en: “Dagron!” the knight called, pushing her visor up on her helmet.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: “达戈龙！”骑士喊道，把面罩推上她的头盔。
- en: The Dagron didn’t open her eyes. “Yes?” she boomed, a thin plume of smoke rising
    from her right nostril.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 达戈龙没有睁开眼睛。“是吗？”她吼道，一股细细的烟雾从她的右鼻孔冒了出来。
- en: “I’ve brought some guests to see you, including the King!”
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The Dagron’s eyes flashed open, focusing immediately on the four of them. The
    Dagron unfurled herself and reared up to her full height; her head nearly reached
    the tops of the pines around her.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: “Your Majesty!” said the Dagron, and she bowed so low that her head nearly brushed
    the earth.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: “Madame Dagron,” said the King. “We’ve come with a somewhat . . . unusual question.”
    The King nodded toward Scarlet. “Does this belong to you?”
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Scarlet pulled the scale from her pocket and held it out to the Dagron. The
    Dagron stared at it for a few seconds, then shook her head slowly.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: “I don’t think that’s one of mine,” said the Dagron, “but I *do* have a great
    many scales. If you’d like, you can check to see if I’m missing one.”
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: The group spent almost an hour examining the Dagron, looking for a loose or
    missing scale. Scarlet and Ruben searched high and low. The Off-White Knight quested
    mightily. The King took a short nap beneath a tall red pine.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: “Well, there’s no doubt about it,” Scarlet finally said, holding the mystery
    scale near the tip of the Dagron’s tail. “This is definitely *not* one of the
    Dagron’s.” She put the scale in her pocket and sat glumly next to Ruben on a rock.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: “Though I’m pleased not to be a suspect in these strange goings-on,” said the
    Dagron, “I *am* sorry to disappoint you.” She thought for a moment. “While I’m
    not certain I can help, I may know someone who can.”
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Scarlet perked up. “Who?” she asked.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: “Wherefore the Wand’ring Minstrel,” said the Dagron. “He frolics and sings all
    throughout the Carmine Pines and has been almost everywhere in the kingdom. If
    anything strange is going on, I’m sure he’d know about it.”
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Ruben jumped off his rock. “Can you take us to him?” he asked.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: “Certainly,” said the Dagron. “It may take us a while to find him, though.”
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Scarlet stood and dusted herself off. “Actually, I’ll bet we can find him pretty
    quickly,” she said. “Now that we know how to define our own Ruby methods, I might
    know *just* the thing!”
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: You Know This!
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Between defining your own methods, creating your own methods that use blocks,
    and learning about things like splat and default arguments, your head’s probably
    feeling pretty full! Let’s take some time to review what we talked about in this
    chapter.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you learned how to write your own methods. We start our method definition
    with `def`, followed by the name of the method and then a list of parameters between
    parentheses. Finally, we type whatever code we want our method to perform and
    then finish it all up with `end`, like so:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You also learned that methods can have *default* or *optional* parameters.
    If we provide an argument to a method that takes an optional parameter, the method
    will use that argument; otherwise, it’ll use whatever its default is:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we want a method that takes any number of arguments, we can use *splat parameters*
    by putting an asterisk (`*`) before our parameter name:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Speaking of `nil`, you learned that methods that don’t have an explicit *return
    value* will return `nil`, which is Ruby’s way of saying “nothing at all.” Remember,
    returning a value is different from just printing it on the screen!
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 说到`nil`，你已经学到没有显式*返回值*的方法会返回`nil`，这是 Ruby 表示“什么都没有”的方式。记住，返回一个值与仅仅在屏幕上打印它是不同的！
- en: '[PRE31]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In fact, when it comes to return values, it’s more common to leave off the
    `return` and let Ruby automatically return the result of the last bit of code
    it runs. So while you *can* write this:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，谈到返回值时，更常见的做法是省略`return`，让 Ruby 自动返回它运行的最后一段代码的结果。所以虽然你*可以*写成这样：
- en: '[PRE32]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It’s much better Ruby style to write this:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 用这种方式写会更符合 Ruby 风格：
- en: '[PRE33]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Finally, we saw that if we want to define a method that takes a block, we just
    need to use the handy `yield` keyword. We can `yield` without parameters to give
    control over to the block, or we can pass parameters in order to give the block
    arguments to work with.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到如果要定义一个接受块的方法，只需要使用方便的`yield`关键字。我们可以不带参数地`yield`，将控制权交给块，或者传递参数，以便给块提供可操作的参数。
- en: '[PRE34]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You learned a lot in this chapter, but keep in mind: if you’re ever curious
    about what a method does or what arguments it expects, you can always look up
    the Ruby documentation at *[http://ruby-doc.org/](http://ruby-doc.org/)*. Just
    make sure to ask your local adult before going online!'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这一章学到了很多东西，但请记住：如果你对某个方法的功能或它期望的参数有疑问，你随时可以查阅 Ruby 文档，地址是 *[http://ruby-doc.org/](http://ruby-doc.org/)*。只要上网之前请确保先问问身边的大人！
- en: Speaking of looking up new things, we’ll be covering a bit of new Ruby code
    in the next chapter—specifically, how to organize, create, and control our very
    own Ruby objects.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 说到查找新内容，我们将在下一章介绍一些新的 Ruby 代码——具体来说，如何组织、创建和控制我们自己的 Ruby 对象。
