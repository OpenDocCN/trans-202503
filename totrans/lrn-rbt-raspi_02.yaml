- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: ELECTRONICS BASICS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 电子学基础
- en: ELECTRONICS IS THE SCIENCE OF CONTROLLING AND MANIPULATING ELECTRICAL ENERGY
    TO DO SOMETHING USEFUL. IT’S ABOUT MAKING ELECTRONIC COMPONENTS LIKE LIGHTS, SENSORS,
    AND MOTORS DO EXACTLY WHAT YOU WANT THEM TO DO.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 电子学是控制和操作电能以完成有用工作的科学。它是关于使电子元件，如灯光、传感器和马达，做出你想要它们做的事情。
- en: Many innovations stem from the different fields of electronics. Most interesting
    for us is the branch of *robotics* . To make your own robots, you’ll need to understand
    the basics of electronics and bend this knowledge to your will! In this chapter,
    I’ll give you your first taste of electronics in the form of two projects. You’ll
    program an LED (light-emitting diode) to blink at regular intervals, and then
    wire up a button to print a message to your terminal when it’s pressed. You’ll
    be blinking LEDs and controlling the physical world in no time at all!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多创新都源自电子学的不同领域。对我们来说，最有趣的是*机器人学*这一分支。要制作自己的机器人，你需要了解电子学的基础知识，并将这些知识运用自如！在这一章中，我将通过两个项目让你初步接触电子学。你将编程控制一个LED（发光二极管）按一定间隔闪烁，然后连接一个按钮，使其在按下时向终端打印信息。你很快就能让LED闪烁并控制物理世界了！
- en: WHAT IS ELECTRICITY?
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是电力？
- en: 'Electricity is everywhere in our day-to-day lives: electric currents are used
    to power electrical components and appliances, like the lights in your house,
    your TV screen, your toaster, and the motors of a Raspberry Pi robot. But what
    actually *is* electricity?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 电力无处不在，贯穿我们日常生活的方方面面：电流被用来为电器和家电提供动力，比如家中的灯光、电视屏幕、烤面包机，以及树莓派机器人的马达。那么，电力到底*是什么*呢？
- en: 'Electricity starts with *atoms*. Everything in the world is made out of billions
    of tiny atoms—even you! And as you may have learned in science class, atoms themselves
    are composed of three particles: *protons*, *neutrons*, and *electrons*. The protons
    and neutrons sit together in the center of the atom to form the atom’s *nucleus*,
    and the electrons orbit that nucleus, as shown in [Figure 2-1](ch02.xhtml#ch02fig1).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 电力从*原子*开始。世界上万物都是由数十亿个微小的原子组成的——包括你！正如你在科学课上学到的，原子本身由三种粒子组成：*质子*、*中子*和*电子*。质子和中子一起位于原子的中心，形成原子的*原子核*，而电子则围绕这个原子核运动，正如在[图
    2-1](ch02.xhtml#ch02fig1)中所示。
- en: '![image](../images/f030-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f030-01.jpg)'
- en: '**FIGURE 2-1** A diagram of an atom'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-1** 一个原子的示意图'
- en: Protons and electrons each have *electric charge*, which is a fundamental property
    of matter. Protons are positively charged, and electrons are negatively charged.
    Neutrons have no charge; that is, they are neutral. You may have heard the saying
    “opposites attract,” and that applies here. Because protons and electrons have
    opposite charges, they are attracted to each other and stay together, forming
    the atoms that make up everything around you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 质子和电子各自带有*电荷*，这是物质的基本属性。质子带正电，电子带负电。中子没有电荷；也就是说，它们是中性的。你可能听过“异性相吸”这句话，这在这里也适用。因为质子和电子的电荷相反，它们互相吸引并保持在一起，形成了构成你周围一切的原子。
- en: Atoms come in many different arrangements called *elements*. Each element is
    defined by the number of protons, electrons, and neutrons each atom contains.
    For example, the element copper usually has 29 protons and 35 neutrons, while
    gold has 79 protons and 118 neutrons. All metals, like copper, gold, and iron,
    are made out of collections of atoms all pressed up against each other. Some of
    these materials are *conductive*, which means that, when given energy, the electrons
    from one atom can move to the next atom. This causes a *flow of charge* in the
    material, known as an electric *current*. The number of electrons flowing through
    a point in a material at any given second is the size of the electric current,
    which is measured in *amperes (A)*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 原子有许多不同的排列方式，叫做*元素*。每种元素由原子中所含的质子、电子和中子数量来定义。例如，铜元素通常有29个质子和35个中子，而金元素则有79个质子和118个中子。所有金属，如铜、金和铁，都是由原子集合压在一起组成的。某些材料是*导电*的，这意味着当给予能量时，一个原子的电子可以移动到下一个原子。这会导致物质中产生*电荷流动*，也就是我们所说的电*流*。通过材料中某一点的电子流量的大小称为电流，单位为*安培（A）*。
- en: For an electric current to flow, there must be a complete *circuit*. A circuit
    is a closed path, like a loop, around which an electric current moves. The circuit
    must be made of conductive material for the electricity to move through, and any
    gap in the circuit means the electricity cannot flow.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要使电流流动，必须有一个完整的*电路*。电路是一个封闭的路径，就像一个环路，电流在其中流动。电路必须由导电材料构成，电流才能通过，如果电路中有任何间隙，电流就无法流动。
- en: The circuit needs a source of energy to “push” the electric current around.
    This can be a battery, a solar panel, electrical mains, or any number of things.
    Crucially, these sources provide a *potential difference*, known as a *voltage*.
    A voltage simply pushes electrons through a conductor, such as copper wire, and
    the strength of a voltage is measured in *volts* *(**V**)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 电路需要一个能“推动”电流流动的能量来源。这个来源可以是电池、太阳能电池板、电网或其他任何东西。关键是，这些来源提供了*势差*，也就是*电压*。电压简单地推动电子通过导体（如铜线），而电压的强度是以*伏特*（*V*）为单位的。
- en: Power sources have a positive and negative terminal. In a simple circuit, like
    the one shown in [Figure 2-2](ch02.xhtml#ch02fig2), the terminals of a battery
    could be connected by a thick copper wire. Electrons are negatively charged and
    are therefore attracted to the positive terminal of the battery, so they travel
    through the circuit from the negative end to the positive end, pushed along by
    the voltage.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 电源有正极和负极。在简单的电路中，就像[图 2-2](ch02.xhtml#ch02fig2)所示，电池的正负极可以通过一根粗铜线连接。电子带负电，因此被电池的正极吸引，它们沿着电路从负端流向正端，电压推动着它们流动。
- en: '![image](../images/f031-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f031-01.jpg)'
- en: '**FIGURE 2-2** A circuit showing the flow of charge around a thick wire connected
    to the positive and negative terminals of a battery'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-2** 显示电荷流经连接电池正负极的粗铜线的电路。'
- en: Although the electrons flow from *negative to positive*, it is convention to
    think of the current flowing from *positive to negative*. The battery in this
    circuit has a fixed voltage. If this voltage is increased, more electrons would
    be pushed around the circuit and the current would be larger. Conversely, if this
    voltage is decreased, fewer electrons would be pushed around the circuit and the
    current would be smaller.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管电子是从*负极到正极*流动的，但通常我们习惯认为电流是从*正极到负极*流动的。电路中的电池有一个固定的电压。如果这个电压增加，更多的电子会被推动穿过电路，电流也会变大。相反，如果电压减少，推动穿过电路的电子会更少，电流也会变小。
- en: Resistance
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 电阻
- en: 'Now that you have an understanding of circuits, we need to add another ingredient
    into the mix: *resistance*. Resistance simply reduces current. Outside the laboratory
    every material has some amount of resistance, which is measured in *ohms (Ω)*.
    One way to think about resistance is to imagine a water pipe. The water flowing
    through the pipe is like electric current flowing through a copper wire. Imagine
    the water pipe has one end higher than the other. The water at the higher end
    of the pipe has more energy (potential energy) than water at the lower end. If
    the pipe is level, no water will flow. If the pipe is slightly sloping, a small
    flow will occur. The actual amount that flows depends on both the difference in
    height of the ends above ground and how wide the pipe is. The height difference
    of the pipe is like potential difference, or voltage.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了电路的基本概念，我们需要加入另一个元素：*电阻*。电阻简单来说就是减少电流的流动。除了实验室外，所有材料都有一定的电阻，电阻的单位是*欧姆（Ω）*。我们可以通过想象一根水管来理解电阻。流经水管的水就像流经铜线的电流。假设水管的一端比另一端高，水管高端的水比低端的水有更多的能量（势能）。如果水管是水平的，水就不会流动；如果水管略微倾斜，就会有小的水流。实际流量取决于水管两端的高度差和水管的宽度。水管的高度差就像电压（势差）。
- en: 'Resistance, on the other hand, is like something squeezing the pipe and affecting
    how wide it is: the more it is squeezed, the less water is able to flow through
    it (see [Figure 2-3](ch02.xhtml#ch02fig3)). This translates to less electric current
    flowing through the circuit.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，电阻就像是压缩水管，影响水管的宽度：越是压缩，能流过的水就越少（参见[图 2-3](ch02.xhtml#ch02fig3)）。这就意味着电流通过电路的量会减少。
- en: '![image](../images/f032-01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f032-01.jpg)'
- en: '**FIGURE 2-3** Resistance reduces the amount of current that can flow through
    a circuit.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-3** 电阻减少了电流通过电路的量。'
- en: 'Therefore, three ingredients make up an electric circuit: voltage, current,
    and resistance. They all seem to be pretty closely connected, right? You may even
    think that there must be a certain *mathematical* connection or *law* relating
    to them—and you’d be right.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，电路由三个要素组成：电压、电流和电阻。它们似乎都紧密相连，对吧？你甚至可能认为它们之间一定有某种*数学*关系或*定律*，你是对的。
- en: Ohm’s Law of Electricity
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 欧姆定律
- en: '*Ohm’s law* deals with the relationship between voltage, current, and resistance.
    It states that the *voltage across a conductor is proportional to the current
    running through it*.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*欧姆定律*处理的是电压、电流和电阻之间的关系。它指出，*导体两端的电压与通过它的电流成正比*。'
- en: 'Let’s break this down to see what it means. In a circuit, voltage is simply
    equal to current multiplied by resistance. We use *V* to stand for voltage, *I*
    for current, and *R* for resistance. So, the equation for voltage is written as
    follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下，看看这意味着什么。在电路中，电压等于电流乘以电阻。我们用*V*表示电压，用*I*表示电流，用*R*表示电阻。所以，电压的方程式写作如下：
- en: '![Image](../images/f033-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f033-01.jpg)'
- en: 'As with any mathematical equation, you can rearrange it to work out the equations
    for the other terms. For example, from Ohm’s law we know that the current in a
    circuit is equal to the voltage divided by the resistance. When you rearrange
    the equation for current and resistance, you get the following equations:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 和任何数学方程式一样，你可以重新排列方程式来求解其他项的方程式。例如，根据欧姆定律，我们知道电路中的电流等于电压除以电阻。当你重新排列电流和电阻的方程时，你会得到以下方程：
- en: '![Image](../images/f033-02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f033-02.jpg)'
- en: '*R* = ![Image](../images/f033-03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*R* = ![图片](../images/f033-03.jpg)'
- en: If all of this is a little confusing, don’t worry! As you make your own circuits,
    it will become easier to understand. Now that we have covered some of the basics
    of electricity and electronics, let’s get making!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些内容有些让你感到困惑，不用担心！当你制作自己的电路时，这些内容会变得更容易理解。现在我们已经讲解了一些电力和电子学的基础知识，接下来就让我们开始制作吧！
- en: 'MAKING AN LED BLINK: RASPBERRY PI GPIO OUTPUT'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作LED闪烁：树莓派GPIO输出
- en: Just as “Hello, world!” is a traditional first program, making an LED blink
    is a traditional first electronics project since it very neatly demonstrates using
    the GPIO pins as outputs. This project will be your introduction to using your
    Pi’s GPIO pins. Before we begin, you might have some questions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 就像“Hello, world!”是传统的第一个程序一样，制作LED闪烁也是传统的第一个电子项目，因为它非常巧妙地展示了如何使用GPIO引脚作为输出。这个项目将是你使用树莓派GPIO引脚的入门介绍。在我们开始之前，你可能会有一些问题。
- en: First, what is an LED? Short for *light-emitting diode*, an LED is a component
    that gives off light when an electric current is passed through it. LEDs are the
    modern equivalent of an old light bulb, but they use less power, don’t get hot,
    and have a longer life.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，什么是LED？LED是*发光二极管*（light-emitting diode）的缩写，LED是当电流通过时会发光的元件。LED是现代版的老式灯泡，但它们耗电更少、不发热且使用寿命更长。
- en: The Parts List
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部件清单
- en: 'For your first foray into electronics, you’re going to need a few extra things
    besides the Raspberry Pi you set up previously. Here’s what you’ll need for this
    project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在你初次涉足电子学时，除了你之前设置的树莓派外，还需要一些额外的东西。以下是这个项目所需的材料：
- en: '**NOTE**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For guidance about where to buy and source these parts, check the Introduction.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于如何购买和获取这些部件的指导，请参阅介绍部分。*'
- en: A breadboard
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: An LED (color of your choice)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED（你选择的颜色）
- en: An appropriate resistor
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个合适的电阻
- en: Jumper wires
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: Before we wire these components up, I’ll explain a little more about how they
    work and why you need them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们接线这些组件之前，我会再稍微解释一下它们是如何工作的，以及你为什么需要它们。
- en: Breadboard
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 面包板
- en: An electronics *breadboard* allows you to connect electronic components without
    having to fuse them together permanently (something that is called *soldering*;
    see “How to Solder” on [page 204](bm04.xhtml#page_204)). This means you can quickly
    prototype circuits by inserting components into a breadboard’s holes. The space
    between the holes of a breadboard is standardized (2.54 mm/0.1 inches), so all
    breadboard-friendly components should fit with no trouble. Breadboards come in
    several sizes with different numbers of holes (also known as *points*). I would
    recommend a 400-point breadboard, like the one in [Figure 2-4](ch02.xhtml#ch02fig4).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 电子 *面包板* 允许你连接电子元件，而无需将它们永久连接在一起（这叫做 *焊接*；参见[第 204 页](bm04.xhtml#page_204)的《如何焊接》）。这意味着你可以通过将元件插入面包板的孔来快速原型电路。面包板孔之间的间距是标准化的（2.54
    mm/0.1 英寸），因此所有适合面包板的元件都应该能轻松安装。面包板有几种不同大小，孔的数量也不同（也称为 *接点*）。我推荐使用一个 400 接点的面包板，像[图
    2-4](ch02.xhtml#ch02fig4)中展示的那样。
- en: '![image](../images/f034-01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f034-01.jpg)'
- en: '**FIGURE 2-4** A 400-point breadboard and a diagram of how the rows and columns
    are connected to each other'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-4** 一个 400 接点的面包板及其行列连接示意图'
- en: You can see in [Figure 2-4](ch02.xhtml#ch02fig4) how the rows and columns of
    the breadboard are internally connected with metal strips. So, if you put one
    component into a row and put something else into the same row, for example, they
    will be connected in a circuit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 2-4](ch02.xhtml#ch02fig4)中，你可以看到面包板的行和列是如何通过金属条相互连接的。因此，如果你将一个元件放入一行，并将另一个元件放入同一行，例如，它们将在电路中相互连接。
- en: LEDs
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: LED
- en: LEDs come in all different shapes, sizes, and colors. Fortunately, they are
    also incredibly cheap. When bought in bulk they are quite literally *pennies*
    each. Make sure that your LED has two legs that can be arranged to fit in your
    breadboard, as shown in [Figure 2-5](ch02.xhtml#ch02fig5).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: LED 有各种不同的形状、大小和颜色。幸运的是，它们也非常便宜。当大宗购买时，它们每个的价格简直就是 *几分钱*。确保你的 LED 有两个脚，可以安排以适应你的面包板，如[图
    2-5](ch02.xhtml#ch02fig5)所示。
- en: '![image](../images/f035-01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f035-01.jpg)'
- en: '**FIGURE 2-5** A blue LED'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-5** 一款蓝色 LED'
- en: Feel free to buy an LED in any color you wish—I have gone for blue. Make sure
    to check the voltage specification for the LED you buy. You need to make sure
    that the voltage required to light up the LED is less than 3.3 V. This is often
    referred to as the *forward voltage*. You can usually find this information in
    the online listing for your LED. The forward voltage of my LED is 2.5 V. The Raspberry
    Pi’s GPIO pins work at 3.3 V, so if your LED has a forward voltage of 5 V, for
    example, your Pi won’t be able to light it up!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随便购买任何你喜欢颜色的 LED——我选择了蓝色。确保检查你购买的 LED 的电压规格。你需要确保点亮 LED 所需的电压小于 3.3 V。这通常被称为
    *正向电压*。你通常可以在 LED 的在线清单中找到这些信息。我的 LED 的正向电压是 2.5 V。树莓派的 GPIO 引脚工作在 3.3 V，如果你的
    LED 正向电压是 5 V，例如，你的树莓派将无法点亮它！
- en: You also need to find out the forward current of your LED. The *forward current*
    is the recommended current to run through your component. My LED has a recommended
    forward current of 30 mA (*milliamps* are one thousandth of an amp), which is
    the equivalent of 0.03 A. If you provide less current than recommended, your LED
    won’t be very bright; if you provide too much current, it might blow up (you’ll
    hear a small pop when this happens). This information will also most likely be
    in the LED’s internet listing or packaging. If you aren’t sure about the specifics
    of your LED, don’t worry—small, cheap ones are usually just fine for our use.
    If you have no information about your LED, just assume that the forward voltage
    is around 2 V and the forward current is about 20 mA.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要查明 LED 的正向电流。*正向电流*是推荐通过元件的电流。我这款 LED 的推荐正向电流是 30 mA（*毫安*是安培的千分之一），也就是 0.03
    A。如果你提供的电流低于推荐值，LED 将不会很亮；如果电流过大，它可能会烧坏（当发生这种情况时，你会听到一声小爆炸）。这些信息通常也可以在 LED 的互联网清单或包装上找到。如果你不确定你的
    LED 具体的参数，别担心——小巧便宜的 LED 通常都可以满足我们的需求。如果你没有任何关于 LED 的信息，可以假设其正向电压约为 2 V，正向电流约为
    20 mA。
- en: Resistors
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 电阻器
- en: To avoid overloading our LEDs, we’ll use a *resistor*. Every material has resistance,
    but resistor components are designed specifically to create pure resistance in
    circuits.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免 LED 过载，我们将使用一个 *电阻器*。每种材料都有电阻，而电阻器组件则专门设计用来在电路中产生纯粹的电阻。
- en: LEDs, and most components, are quite sensitive to the amount of current that
    flows through them. If you were to connect an LED directly to a battery and create
    a circuit without a resistor, the amount of current that would flow through the
    LED could be large enough to cause it to overheat. A resistor lowers the current
    through the LED to prevent this from happening.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: LEDs和大多数组件对通过它们的电流非常敏感。如果你将LED直接连接到电池并创建一个没有电阻的电路，LED通过的电流可能会大到导致它过热。电阻器会降低LED中的电流，防止这种情况发生。
- en: Resistors come in different values denoted by colored bands, which you can see
    in [Figure 2-6](ch02.xhtml#ch02fig6). Take a look at the resistor guide on [page
    202](bm03.xhtml#page_202) to learn what these bands mean and how to read them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻器有不同的值，用彩色带表示，你可以在[图2-6](ch02.xhtml#ch02fig6)中看到。请查看[第202页](bm03.xhtml#page_202)的电阻器指南，了解这些带子的含义以及如何读取它们。
- en: '![image](../images/f036-01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f036-01.jpg)'
- en: '**FIGURE 2-6** A resistor'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-6** 一个电阻器'
- en: 'To find out what resistor you need, you’ll have to apply Ohm’s law! From the
    equation you saw earlier, you know that resistance is equal to the voltage divided
    by the current, or *R = V/I*. In our case, the voltage is the difference between
    the voltage the Pi supplies, 3.3 V, and the forward voltage of the LED: it is
    the total source volts *minus* the LED volts. For me, that is 3.3 V – 3 V = 0.3
    V. You should use *your* forward voltage here instead, or 2 V if you don’t know
    it.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出你需要的电阻器，你需要应用欧姆定律！根据你之前看到的公式，你知道电阻等于电压除以电流，或*R = V/I*。在我们的例子中，电压是Pi提供的电压3.3
    V与LED的正向电压之间的差值：即总电压*减去*LED电压。对于我来说，就是3.3 V – 3 V = 0.3 V。你应该使用*你*自己的正向电压，或者如果你不知道，可以用2
    V。
- en: The current is the forward current of your LED. For me that is 0.03 A. Make
    sure that this value is in amps, not milliamps!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 电流是LED的正向电流。对于我来说，这是0.03 A。确保这个值是以安培为单位，而不是毫安！
- en: '**NOTE**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*I recommend buying a selection of resistors, which are normally organized
    into something that looks like a book. That way, you’ll have a resistor for every
    occasion and won’t have to buy them individually.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*我建议购买一些电阻器，它们通常被组织成类似书本的形状。这样，你就会有适合各种情况的电阻器，而不必单独购买它们。*'
- en: 'I can work out the value of the resistor I need to lower the current to 0.03
    A by simply calculating the following equation: 0.3 / 0.03 = 10\. This means that
    I will need a resistor of approximately 10 Ω. Often you won’t be able to find
    a resistor value for the specific number you’ve calculated. That’s okay: in most
    cases, you can simply use the nearest valued resistor you can find. For my LED
    I was lucky and had a resistor that matched the value I needed exactly. I am using
    the 10 Ω resistor pictured in [Figure 2-6](ch02.xhtml#ch02fig6).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以通过简单地计算以下公式，算出我需要的电阻值，以将电流降低到0.03 A：0.3 / 0.03 = 10。这意味着我需要一个大约10 Ω的电阻。通常你不会找到一个电阻值正好等于你计算出的数值。没关系：在大多数情况下，你可以直接使用你能找到的最接近的电阻值。对于我的LED，我很幸运，正好有一个与我所需值匹配的电阻。我正在使用[图2-6](ch02.xhtml#ch02fig6)中显示的10
    Ω电阻。
- en: 'If you’re still unsure about the forward voltage and forward current of your
    LED, just err on the side of caution and fit a sensibly large resistor of at least
    100 Ω into your circuit. If the LED is too dim, downsize the resistor until you
    get to a suitable level of brightness (dim enough to not hurt your eyes is a good
    rule of thumb). Don’t try to do this the other way around: you can’t unexplode
    an LED!'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然不确定你的LED的正向电压和正向电流，可以采取保守的做法，在电路中安装一个至少100 Ω的合理大小的电阻。如果LED太暗，可以逐渐减小电阻，直到达到合适的亮度（足够暗以不伤害眼睛是一个好的经验法则）。不要尝试反过来做：你无法让LED复原！
- en: Jumper Wires
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳线
- en: Finally, you’ll need some wires to connect everything up. Specifically, you’ll
    need *jumper wires*, which are breadboard-friendly wires that allow you to connect
    things to the Pi’s GPIO pins. You can see some examples of jumper wires in [Figure
    2-7](ch02.xhtml#ch02fig7).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一些电线来连接所有部件。具体来说，你需要*跳线*，这些是适合面包板使用的电线，允许你将元件连接到Pi的GPIO引脚。你可以在[图2-7](ch02.xhtml#ch02fig7)中看到一些跳线的示例。
- en: '![image](../images/f037-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f037-01.jpg)'
- en: '**FIGURE 2-7** A collection of jumper wires'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-7** 一组跳线'
- en: The ends of jumper wires are either *male* or *female*. A male end (often abbreviated
    as M) has a wire sticking out of it that you can insert into a breadboard’s holes.
    A female end (abbreviated as F) instead has a hole into which you place a wire.
    I would recommend buying a variety so that you have a jumper wire for all situations.
    We’ll be using a lot of these throughout the book! In [Figure 2-7](ch02.xhtml#ch02fig7),
    you can see my collection of M-M, M-F, and F-F jumper wires. For making an LED
    blink, we’ll need two M-F jumper wires.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线的两端可以是 *公头* 或 *母头*。公头端（通常缩写为 M）有一根突出的小线，可以插入面包板的孔中。母头端（缩写为 F）则有一个孔，可以将线插入其中。我建议购买各种类型的跳线，以便应对各种情况。我们在本书中将使用大量这些跳线！在
    [图 2-7](ch02.xhtml#ch02fig7) 中，你可以看到我收集的 M-M、M-F 和 F-F 类型的跳线。为了让 LED 闪烁，我们需要两根
    M-F 跳线。
- en: Wiring Up Your LED
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接 LED 的电路
- en: Now that you’ve collected your parts, it’s time to wire up your LED and create
    your first circuit! You’ll wire up your circuit as shown in [Figure 2-8](ch02.xhtml#ch02fig8),
    so you can use this diagram as a reference as you go through the instructions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经收集好了所有零件，是时候将 LED 接入电路并创建你的第一个电路了！你将按照 [图 2-8](ch02.xhtml#ch02fig8) 中所示的方式连接电路，因此可以在完成步骤时参考这个示意图。
- en: '![image](../images/f038-01.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f038-01.jpg)'
- en: '**FIGURE 2-8** Breadboard diagram for wiring up an LED'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-8** 用于连接 LED 的面包板示意图'
- en: 'Depending on the breadboard you have, your circuit may look slightly different.
    To make sure your connections are correct, follow these instructions:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你使用的面包板，电路的外观可能会略有不同。为了确保连接正确，请按照以下步骤操作：
- en: Insert the LED into the breadboard so that each leg is in a dif­ferent row.
    If you put the LED’s legs into the same row, they’ll be connected to each other,
    but won’t be connected to anything else. LEDs have a positive and negative side,
    which you need to align with the flow of the current. The long leg of the LED
    is the positive side—called the *anode*. The short leg is the negative side—the
    *cathode*. The LED bulb will usually be flat on the side of the cathode as an
    extra indicator.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LED 插入面包板，确保每根引脚位于不同的行中。如果将 LED 的引脚插入同一行，它们将相互连接，但不会连接到任何其他元件。LED 有正负极，必须按照电流的流向进行连接。LED
    的长腿是正极——称为 *阳极*；短腿是负极——称为 *阴极*。LED 灯泡的阴极侧通常是平的，作为额外的标识。
- en: Insert one leg of your resistor into the same row on the breadboard as your
    LED’s shorter leg. Putting the resistor leg in the same row as your LED connects
    the two in a circuit. Connect the other leg of the resistor to any of the other
    points of the board.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电阻的一端插入与 LED 短腿相同的面包板行中。将电阻的引脚放入与 LED 短腿相同的行中，即可将两者连接在电路中。将电阻的另一端连接到面包板上的任意其他点。
- en: Now, with your Raspberry Pi turned off, insert the male end of one of your M-F
    jumper wires into the breadboard, in the same row as the long leg of your LED.
    Locate physical pin 7 on your Raspberry Pi, also known as the *GPIO/BCM 4* pin
    (see “Raspberry Pi GPIO Diagram” on [page 200](bm02.xhtml#page_200) for an image
    of this), and connect the female end of the wire to it.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，确保树莓派关闭，将一根 M-F 跳线的公头端插入面包板，插入的位置应该与 LED 的长腿在同一行。找到树莓派上的物理引脚 7，也就是 *GPIO/BCM
    4* 引脚（请参见 [第 200 页](bm02.xhtml#page_200) 的“树莓派 GPIO 图”了解此引脚的图示），并将跳线的母头端连接到它。
- en: THE VARIOUS NAMES OF GPIO PINS
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GPIO 引脚的各种名称
- en: 'The Raspberry Pi’s GPIO pins can have several names. First, you can refer to
    the pins from their physical numbers—that is, how they are laid out. However,
    the processor on the Raspberry Pi does not understand this numbering and has its
    own name for the GPIO pins, sometimes referred to as the BCM numbering of the
    pins. In our case, you have wired up your LED to physical pin 7: that’s BCM pin
    4! See “Raspberry Pi GPIO Diagram” on [page 200](bm02.xhtml#page_200) for a diagram
    of the GPIO pins and some further explanation.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 树莓派的 GPIO 引脚有几种不同的名称。首先，你可以根据引脚的物理编号来参考它们——即它们的排列方式。然而，树莓派上的处理器并不理解这种编号方式，而是为
    GPIO 引脚指定了自己的一套名称，这种编号方式通常称为 BCM 编号。以我们为例，你已经将 LED 连接到物理引脚 7：这实际上是 BCM 引脚 4！请参见
    [第 200 页](bm02.xhtml#page_200) 的“树莓派 GPIO 图”获取 GPIO 引脚的示意图及更多解释。
- en: Finally, insert the male end of your other M-F jumper wire into the row of the
    breadboard that contains only one leg of the resistor and none of the LED’s legs.
    Then connect the female end to physical pin 6 on your Raspberry Pi. This is one
    of the *ground* pins. You can think of ground as the negative terminal of a battery.
    It is just the lower side of a voltage.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将另一根M-F跳线的公头插入面包板中，只包含一个电阻引脚且不包含LED引脚的那一行。然后将母头连接到树莓派的物理引脚6。这是一个*接地*引脚。你可以将接地看作是电池的负极端。它只是电压的低电位一侧。
- en: Programming Your Raspberry Pi to Blink Your LED
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编程你的树莓派来使你的LED闪烁
- en: '**NOTE**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When you power on your Raspberry Pi, your LED may be off, on, or even dimly
    lit. Don’t worry! Your LED is fine in any of these states. You haven’t yet instructed
    the pin to be a certain state, so your pin isn’t quite sure what to do yet.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你开启树莓派时，LED可能是关闭的、开启的，或者甚至微弱亮起。别担心！你的LED在这些状态下都没问题。你还没有指示引脚为某个特定状态，所以引脚现在还不确定该做什么。*'
- en: You should now have your circuit wired up, so boot up your Rasp­berry Pi and
    log in. It’s time to write a program to blink that LED!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经将电路连接好，启动树莓派并登录。是时候编写程序让LED闪烁了！
- en: 'From the terminal, navigate from the home directory into the folder you created
    in [Chapter 1](ch01.xhtml#ch01) with the command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端，使用以下命令从主目录导航到你在[第一章](ch01.xhtml#ch01)中创建的文件夹：
- en: pi@raspberrypi:~ $ cd robot
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~ $ cd robot
- en: 'Now you’ll create a new file and write a Python program to control your LED.
    Pick whatever name you like for your file, but ensure your filename ends with
    *.py*. I’ve called mine *blink.py*. The following command creates a new file and
    opens the Nano text editor:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将创建一个新文件，并编写一个Python程序来控制你的LED。你可以为文件选择任何你喜欢的名称，但确保文件名以*.py*结尾。我将它命名为*blink.py*。以下命令将创建一个新文件并打开Nano文本编辑器：
- en: pi@raspberrypi:~/robot $ nano blink.py
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~/robot $ nano blink.py
- en: You’ll now find yourself in a Nano text editor identical to the one you came
    across in [Chapter 1](ch01.xhtml#ch01).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在会看到一个与[第一章](ch01.xhtml#ch01)中相同的Nano文本编辑器。
- en: Enter the code in [Listing 2-1](ch02.xhtml#ch02list1) to instruct your LED to
    flash on and off (the numbers in circles don’t actually appear in the program,
    but we’ll be using them for reference).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输入[清单 2-1](ch02.xhtml#ch02list1)中的代码，指示你的LED闪烁开关（圆圈中的数字在程序中并不会实际出现，但我们将用它们做参考）。
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**LISTING 2-1** Program to blink an LED'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 2-1** 用于使LED闪烁的程序'
- en: This eight-line Python program is easy to understand when you look at it one
    line at a time, so let’s break it down.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段八行的Python程序当你一行一行看时很容易理解，因此让我们逐行分析。
- en: Python is an *interpreted* programming language, meaning when this code is run,
    your Raspberry Pi (or any other computer) will execute your program line by line,
    starting at the top and moving down in a logical manner. That means the order
    of your code matters.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种*解释型*编程语言，意味着当这段代码运行时，你的树莓派（或任何其他计算机）将按行执行程序，从顶部开始，按逻辑顺序逐行进行。这意味着代码的顺序很重要。
- en: Python comes with all sorts of built-in abilities. For example, in [Chapter
    1](ch01.xhtml#ch01) you *printed* text to the terminal, a capability Python has
    by default. There are hundreds of other things Python can do, but some abilities
    need to be imported from external sources. For example, Python is not able to
    control your Pi’s GPIO pins on its own, so we import a library called GPIO Zero
    ➊. In programming, a *library* is a collection of functions a program can use.
    By importing a library, we bring these functions into the current program for
    our own use. The GPIO Zero library was created by the Raspberry Pi Foundation
    to give programmers a simple GPIO interface in Python. Importing this library
    enables your program to control your Pi’s GPIO pins! Note that it’s actually called
    `gpiozero` in the programming language, though, as we can’t include spaces in
    library names and the convention is to use lowercase.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Python自带了各种内建功能。例如，在[第一章](ch01.xhtml#ch01)中，你*打印*了文本到终端，这是Python默认具备的功能。Python还可以做成百上千的其他事情，但有些功能需要从外部源导入。例如，Python本身不能控制你树莓派的GPIO引脚，所以我们导入了一个叫做GPIO
    Zero的库 ➊。在编程中，*库*是一个程序可以使用的函数集合。通过导入库，我们将这些函数带入当前程序供我们使用。GPIO Zero库是由树莓派基金会创建的，目的是为程序员提供一个简单的GPIO接口。导入这个库使你的程序能够控制树莓派的GPIO引脚！请注意，尽管在编程语言中它实际上叫做`gpiozero`，因为我们不能在库名中使用空格，而且惯例是使用小写字母。
- en: On the next line we import the `time` library, which allows your Python program
    to control timings. For example, you’ll be able to pause the code, which will
    be very useful in our case!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们导入了 `time` 库，它允许你的 Python 程序控制时间。例如，你可以暂停代码，这在我们的案例中非常有用！
- en: Next, we make a variable ➋. In programming, *variables* are names used to store
    information to be referenced and manipulated in a program. They provide a way
    of labeling data, and they make code simpler, easier to understand, and more efficient.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个变量 ➋。在编程中，*变量*是用于存储信息的名称，这些信息可以在程序中被引用和操作。它们提供了一种为数据贴标签的方式，使代码更简单、更易理解、更高效。
- en: In this case, we’ve created a variable called `led` that references the LED
    software from the GPIO Zero library. We give the `LED()` function the value `4`
    in parentheses to show that we are referring to an LED on GPIO/BCM pin 4\. When
    we call `led` later in the program, the Pi knows we mean this pin.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们创建了一个名为 `led` 的变量，引用了来自 GPIO Zero 库的 LED 软件。我们在括号中给 `LED()` 函数传入值 `4`，表示我们指的是
    GPIO/BCM 引脚 4 上的 LED。当我们在程序中稍后调用 `led` 时，树莓派就知道我们指的是这个引脚。
- en: 'Then we begin a `while` loop ➌, which is a *conditional* *statement* that will
    keep running the code inside it until the condition is no longer met. In simple
    English, we’re telling the loop: while this condition is true, keep running the
    code. In this case, the condition is simply `True`. The `True` condition will
    always be true and will never be false, so the `while` loop will go around and
    around indefinitely. This is useful to us, as we’ll be able to write the code
    to make the LED flash once, and the loop will take care of making the LED flash
    over and over again.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们开始一个 `while` 循环 ➌，这是一个 *条件* *语句*，它会持续运行其中的代码，直到条件不再满足。用简单的语言来说，我们在告诉循环：只要条件为真，就继续运行代码。在这个例子中，条件就是
    `True`。`True` 条件始终为真，永远不会为假，因此 `while` 循环将不断地循环下去。这对我们很有用，因为我们可以编写代码使 LED 闪烁一次，而循环会继续处理让
    LED 不断闪烁的任务。
- en: 'Within the `while` loop, you also come across a key structural feature of Python:
    *indentation*. Python knows that all the code indented by the same number of spaces
    belongs to the same group of code, known as a *block*. The four lines following
    the `while` loop are indented four spaces each; as long as the condition is true,
    the loop will run that whole block of code.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `while` 循环内部，你会遇到 Python 的一个关键结构特征：*缩进*。Python 知道，所有缩进相同数量空格的代码属于同一代码块，称为
    *块*。`while` 循环后的四行代码每行缩进了四个空格；只要条件为真，循环就会运行整个代码块。
- en: You can create indentation in different ways. Some people use two spaces, four
    spaces, or a TAB. You can use any method you like as long as you stay consistent
    throughout your Python program. I’m a TAB person myself.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过不同的方式来创建缩进。有些人使用两个空格、四个空格或 TAB 键。你可以使用任何你喜欢的方法，只要在整个 Python 程序中保持一致。我个人喜欢使用
    TAB 键。
- en: At ➍, you switch the LED on using the command `led.on()`. Remember that `led`
    refers to the pin we connected the LED to and now we’re telling that pin to be
    “on.” The dot (`.`) separates the thing we’re talking about, in this case the
    LED, from what we’re asking it to do, in this case be turned on. Turning on a
    GPIO pin is also known as bringing that pin *high*, since the Raspberry Pi will
    apply a voltage of 3.3 V across your circuit when this line of code runs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➍ 处，使用命令 `led.on()` 将 LED 打开。记住，`led` 是我们连接 LED 的引脚，现在我们在告诉那个引脚“开”。点号（`.`）将我们要操作的对象（此例中为
    LED）与我们要求它执行的操作（此例中为打开）分开。打开 GPIO 引脚也叫做将引脚设置为 *高电平*，因为当这行代码运行时，树莓派会在电路中施加 3.3V
    的电压。
- en: Next we use a `sleep()` statement ➎ to tell your program to pause for whatever
    number of seconds you give to it in parentheses. In this case, we entered a value
    of `1`, so the program sleeps for just 1 second. After this, you switch the LED
    off using the command `led.off()` ➏. Repeat the `sleep()` statement at ➐ to make
    the program wait for another second before looping back around again to the start
    of the `while` loop. This sequence of on-wait-off-wait continues indefinitely.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `sleep()` 语句 ➎ 来告诉程序暂停指定的秒数。在这个例子中，我们输入了 `1`，因此程序会暂停 1 秒。之后，使用命令 `led.off()`
    ➏ 将 LED 关闭。重复在 ➐ 处的 `sleep()` 语句，使程序在再次回到 `while` 循环的开始之前等待另一秒。这个开-等-关-等的过程将无限循环下去。
- en: Once you’ve finished entering the code for your program, you can exit the Nano
    text editor and save your work. To do this, press CTRL-X. You will then be asked
    whether you would like to save the changes you have made. Press the Y key to say
    yes. Nano will then prompt you for the filename you would like to write to, which
    in our case should be *blink.py* or the filename you entered when you opened the
    Nano editor. Press ENTER to confirm the filename.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了程序代码的输入，可以退出Nano文本编辑器并保存你的工作。操作方法是按下CTRL-X。然后会提示你是否保存你所做的更改。按下Y键表示保存。Nano会提示你输入文件名，应该是*blink.py*，或者是你打开Nano编辑器时输入的文件名。按下ENTER键确认文件名。
- en: 'Running Your Program: Make Your LED Blink'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序：让你的LED闪烁
- en: 'Now that you understand how your program works, it’s time to run it. You’ll
    follow the same process to execute your program as you did for the *helloworld.py*
    program you created in [Chapter 1](ch01.xhtml#ch01). Enter the following code
    into the Raspberry Pi’s prompt:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了程序的工作原理，是时候运行它了。你将按照与在[第一章](ch01.xhtml#ch01)中创建*helloworld.py*程序时相同的过程来执行程序。在树莓派的提示符下输入以下代码：
- en: pi@raspberrypi:~/robot $ python3 blink.py
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~/robot $ python3 blink.py
- en: Your LED should now start to blink on and off at regular intervals (see [Figure
    2-9](ch02.xhtml#ch02fig9)). Congratulations, you’ve just successfully interfaced
    your Raspberry Pi with the outside world!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你的LED现在应该会按规律闪烁（见[图2-9](ch02.xhtml#ch02fig9)）。恭喜你，你已经成功地将树莓派与外部世界连接起来！
- en: '![image](../images/f042-01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f042-01.jpg)'
- en: '**FIGURE 2-9** A happily blinking LED connected to the Raspberry Pi'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-9** 一只高兴的闪烁LED连接到树莓派上'
- en: To kill your program and stop the blinking LED, press CTRL-C.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止你的程序并让LED停止闪烁，按下CTRL-C。
- en: 'TROUBLESHOOTING GUIDE: WHY ISN’T THE LED BLINKING?'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除指南：为什么LED不闪烁？
- en: If your LED isn’t blinking, don’t panic. You can likely fix your circuit with
    a little troubleshooting. First, check whether your LED is inserted with the legs
    the right way around. Because LEDs are a form of *diode*, current flows through
    them only in one direction, so if you have your LED in the wrong way it won’t
    light up! Instead, it’ll just do nothing. Go back to the instructions and make
    sure you followed them accurately.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的LED没有闪烁，不要惊慌。你可能通过一些故障排除就能修复电路。首先，检查一下你的LED是否正确插入。因为LED是一种*二极管*，电流只能朝一个方向流动，所以如果LED插反了，它就不会亮！它会什么也不做。回去查看说明，确保你按照要求正确连接了。
- en: If this doesn’t fix your problem, check the rest of your circuit. Is everything
    connected properly? Are all of the wires firmly in place? Check that you have
    wired up your circuit to the correct pins of your Pi’s GPIO port—this is an easy
    mistake to make!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这没有解决你的问题，检查一下电路的其余部分。所有连接都正确吗？所有的电线都牢固吗？检查一下你是否将电路接到了树莓派GPIO端口的正确引脚上——这是一个很容易犯的错误！
- en: If you’re convinced that your circuit is sound and your LED and resistor are
    appropriate (as explained in the parts list), then you may have a software issue.
    When you ran the program, did it crash? Did you get an error message? You may
    have made an error when copying the code from this book. Go back and check, or
    grab the code files from [*https://nostarch.com/raspirobots/*](https://nostarch.com/raspirobots/)
    and run the *blink.py* file from there instead.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确信电路没有问题，并且你的LED和电阻是合适的（如零件列表中所述），那么可能是软件问题。当你运行程序时，它崩溃了吗？出现错误信息了吗？你可能在从本书中复制代码时犯了个错误。回去检查一下，或者从[*https://nostarch.com/raspirobots/*](https://nostarch.com/raspirobots/)获取代码文件，然后运行那里的*blink.py*文件。
- en: 'The GPIO Zero library is included by default in all new Raspbian releases,
    but if you are running an older version of Raspbian, you may need to install the
    library manually. To do this, enter the command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO Zero库在所有新的Raspbian版本中默认包含，但如果你使用的是旧版本的Raspbian，你可能需要手动安装该库。为此，输入以下命令：
- en: pi@raspberrypi:~/robot $ sudo apt-get update
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~/robot $ sudo apt-get update
- en: 'followed by the command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下命令：
- en: pi@raspberrypi:~/robot $ sudo apt-get install python3-gpiozero python-gpiozero
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~/robot $ sudo apt-get install python3-gpiozero python-gpiozero
- en: 'Challenge Yourself: Change the Timing'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 挑战自己：改变闪烁的时间
- en: Take a look at the code you used to make your LED blink. What would happen if
    you modified some of it? For example, you could experiment by changing the timing
    of the `sleep()` statements and seeing what different patterns you can make! Play
    around a bit to see what effects your changes have.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下你用来让LED闪烁的代码。如果你修改其中的一些代码，会发生什么呢？例如，你可以尝试改变`sleep()`语句的时间，看看能做出什么不同的模式！多试试，看看你的修改带来了哪些效果。
- en: '**NOTE**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you want to shut down your Raspberry Pi, you should do so safely in software
    before yanking out the power cord. To commence a power down sequence, use the
    command `**sudo shutdown now**`. Wait a few seconds before pulling out the power
    cord. Or, choose the shutdown option in the main menu from the GUI if you’re using
    a directly connected screen.*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想关闭你的树莓派，应该先通过软件安全关闭，然后再拔掉电源线。要开始关机序列，使用命令`**sudo shutdown now**`。等几秒钟再拔掉电源线。如果你使用的是直接连接的显示器，也可以在图形界面的主菜单中选择关机选项。*'
- en: 'INPUT FROM A BUTTON: RASPBERRY PI GPIO INPUT'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按钮的输入：树莓派GPIO输入
- en: Blinking an LED is the perfect first experiment for the world of electronics
    and physical computing with your Raspberry Pi, but it demonstrates only the *output*
    aspect of what the Pi’s GPIO pins can do. GPIO pins can also take *input*, meaning
    they can take data from the outside world and react to it. In this section you’ll
    wire a button up to your Raspberry Pi and write a program that is triggered whenever
    that button is pressed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让LED闪烁是进行树莓派电子学和物理计算的完美入门实验，但它只展示了树莓派GPIO引脚的*输出*功能。GPIO引脚还可以接受*输入*，这意味着它们可以接收来自外部世界的数据并做出反应。在这一部分，你将为树莓派接上一个按钮，并编写一个程序，使其在按钮被按下时触发。
- en: Explaining the Parts List
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配件清单说明
- en: The projects in this book build upon each other, so in addition to your Raspberry
    Pi and breadboard, for this project you’ll need a button and two M-F jumper wires.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的项目是循序渐进的，因此，除了树莓派和面包板外，本项目还需要一个按钮和两根M-F跳线。
- en: Buttons come in hundreds of different shapes, sizes, and varieties. For this
    project, you’ll need to acquire a breadboard-friendly *momentary push button*,
    like the one shown in [Figure 2-10](ch02.xhtml#ch02fig10).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮有成百上千种不同的形状、大小和种类。在这个项目中，你需要获取一个适合面包板使用的*瞬时按钮*，就像[图 2-10](ch02.xhtml#ch02fig10)所示的那样。
- en: '![image](../images/f044-01.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f044-01.jpg)'
- en: '**FIGURE 2-10** A four-legged momentary push button and a diagram of the leg
    pairs'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-10** 四脚瞬时按钮及其腿部对的示意图'
- en: 'Buttons are often referred to as *switches*, and most have either two or four
    legs that connect to the points of a breadboard. The function of a momentary switch
    is simple: when the button is pressed, the contacts inside the button join together
    and complete the circuit. When the button is released, the contacts inside are
    separated, so the circuit is incomplete and no current flows. That means your
    circuit is connected only while the button is pressed; that’s why it’s called
    “momentary”!'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮通常被称为*开关*，大多数按钮有两个或四个脚，连接到面包板的各个点。瞬时开关的功能很简单：当按钮被按下时，按钮内部的接触点会连接在一起，从而完成电路。当按钮松开时，内部的接触点会分开，电路就不再完整，电流也就无法流动。这意味着你的电路只有在按钮被按下时才会连接，这就是为什么它被称为“瞬时”的原因！
- en: For buttons with two legs, it’s obvious that when the button is pressed both
    sides are connected. For buttons with four legs, it’s a little bit more complicated.
    The legs are set up in pairs, so you only actually need to worry about two of
    them. Usually, opposite legs, like the ones indicated in [Figure 2-10](ch02.xhtml#ch02fig10),
    are coupled, which means only one leg of each pair needs to be connected to the
    circuit. If you are unsure of which legs are pairs, check your button’s specification.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有两个脚的按钮，当按钮被按下时，两个脚会连接在一起，这一点很明显。对于四脚按钮，情况就复杂一些。按钮的脚是成对排列的，因此你实际上只需要关心其中的两根。通常，像[图
    2-10](ch02.xhtml#ch02fig10)中所示的那样，按钮的对立两根脚是连接在一起的，这意味着每对中的一根脚只需要连接到电路上。如果你不确定哪些脚是成对的，请查看按钮的规格。
- en: Wiring Up Your Button
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 接线你的按钮
- en: With your parts ready, you can now wire up your button. Use the breadboard diagram
    in [Figure 2-11](ch02.xhtml#ch02fig11) as a reference.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好配件后，你现在可以接线按钮了。请参考[图 2-11](ch02.xhtml#ch02fig11)中的面包板示意图进行连接。
- en: '![image](../images/f045-01.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f045-01.jpg)'
- en: '**FIGURE 2-11** Breadboard diagram for wiring up a button'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-11** 接线按钮的面包板示意图'
- en: 'If you’ve just finished the previous project and still have an LED wired up
    to your Pi, feel free to take the circuit apart or wire up your button on a different
    part of your breadboard—just make sure that you use different rows of the breadboard
    for each project. Once you’re ready to set up your next circuit, follow these
    instructions:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚完成前一个项目并且仍然将 LED 连线到你的 Pi，可以随意拆开电路或将按钮接入面包板的不同部分——只要确保每个项目使用不同的面包板行。一旦准备好设置下一个电路，请按照以下说明操作：
- en: Insert your push button into your breadboard and ensure that each leg is in
    its own row. You’ll need to insert the button with two legs on either side of
    the row divider in the middle of your breadboard to accomplish this.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的按钮插入面包板，并确保每个引脚都位于它自己的行中。你需要将按钮插入，使得两个引脚分别位于面包板中间行分隔器的两侧。
- en: With your Raspberry Pi turned off, use a jumper wire to connect one leg on one
    side of the divider to the ground pin on your Raspberry Pi (physical pin 6).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 关闭的情况下，使用跳线将分隔器一侧的一个引脚连接到 Raspberry Pi 上的地线引脚（物理引脚 6）。
- en: Use another jumper wire to connect the other leg on the same side of the divider
    to pin 11 (BCM pin 17) on your Raspberry Pi. Check the pinout on [page 201](bm02.xhtml#page_201)
    if you’re not sure which pin is which.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用另一根跳线将分隔器同一侧的另一个引脚连接到 Raspberry Pi 上的引脚 11（BCM 引脚 17）。如果你不确定哪个引脚是哪个，可以查看[第
    201 页](bm02.xhtml#page_201)的引脚图。
- en: With your Pi setup like mine in [Figure 2-12](ch02.xhtml#ch02fig12), you now
    need to write a program to take input from the button when it is pressed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Pi 设置与[图 2-12](ch02.xhtml#ch02fig12)中的我的设置相同的情况下，现在你需要编写一个程序，当按钮被按下时，从按钮获取输入。
- en: '![image](../images/f046-01.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f046-01.jpg)'
- en: '**FIGURE 2-12** The complete button and breadboard setup'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-12** 完整的按钮和面包板设置'
- en: WARNING
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Once you are finished, you should have a circuit set up like the one shown in
    [Figure 2-11](ch02.xhtml#ch02fig11). Take care that the wiring is correct. There
    is very little resistance in the switch and it will electrically connect two things
    very closely. A wrong connection can be dangerous to your Pi!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该会有一个像[图 2-11](ch02.xhtml#ch02fig11)中所示的电路设置。请确保接线正确。开关的电阻非常小，它会非常紧密地连接两个电路。错误的连接可能会对你的
    Pi 造成危险！
- en: Programming Your Raspberry Pi to Display Input from Your Button
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编程你的 Raspberry Pi 以显示按钮的输入
- en: 'From the terminal, make sure you’re in the folder you created in [Chapter 1](ch01.xhtml#ch01).
    If you just completed the previous mini-project you most likely already are, but
    if not, just navigate from the home directory into the *robot* directory with
    this command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端中，确保你处于[第 1 章](ch01.xhtml#ch01)中创建的文件夹。 如果你刚完成之前的迷你项目，你很可能已经处于该文件夹中，但如果不是，可以使用以下命令从主目录进入*robot*目录：
- en: pi@raspberrypi:~ $ cd robot
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~ $ cd robot
- en: 'Now create a new Python program to get input from your button in Nano. I’ve
    created one and called it *button.py* as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个新的 Python 程序，以便从 Nano 中的按钮获取输入。我创建了一个名为*button.py*的程序，如下所示：
- en: pi@raspberrypi:~ $ cd robot
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~ $ cd robot
- en: You’ll find yourself in a familiar blank Nano interface. Enter the code in [Listing
    2-2](ch02.xhtml#ch02list2) to get your button working.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一个熟悉的空白 Nano 界面。输入[清单 2-2](ch02.xhtml#ch02list2)中的代码，来使你的按钮正常工作。
- en: '[PRE1]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**LISTING 2-2** A program to take input from the button'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 2-2** 获取按钮输入的程序'
- en: We import the GPIO Zero library in exactly the same way as we did for the blinking
    LED project ➊. All of the electronics projects in this book will use this library,
    so you can expect to see this line in all the programs in this book!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以与闪烁 LED 项目 ➊ 完全相同的方式导入 GPIO Zero 库。本书中的所有电子项目都会使用此库，所以你可以在本书中的所有程序中看到这一行！
- en: We then create a variable called `button` ➋, assigning some button software
    from the GPIO Zero library to that variable and making sure to specify in the
    parentheses that the button is connected to BCM pin 17.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个名为`button`的变量 ➋，将来自 GPIO Zero 库的按钮软件分配给该变量，并确保在括号中指定按钮连接到 BCM 引脚 17。
- en: We then start a `while` loop as we did in our LED program, but unlike our previous
    program, the first line in this block starts an `if`/`else` statement. In programming,
    `if` statements are conditional statements that activate some code when a condition
    is satisfied. Our `if` statement almost directly translates into English as “if
    the button is pressed, do the following” ➌. While the `if` statement is true,
    the indented line ➍ is executed and a string of text is printed to the terminal,
    telling us the button has been pressed.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们像在LED程序中那样开始一个`while`循环，但与之前的程序不同，这个代码块中的第一行是一个`if`/`else`语句。在编程中，`if`语句是条件语句，当满足某个条件时激活某段代码。我们的`if`语句几乎可以直接翻译为英文“如果按钮被按下，执行以下操作”
    ➌。当`if`语句为真时，缩进的行 ➍ 会被执行，并在终端打印一串文本，告诉我们按钮已被按下。
- en: Usually, but not always, when there is a conditional `if` statement, there is
    often an `else` statement, because if the button isn’t pressed, something *else*
    must happen! The `else` statement ➎ can be translated into English as “if anything
    else, do the following.” The indented block of code following the `else` statement
    is then executed and prints to the terminal that the button hasn’t been pressed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，虽然不是总是如此，当有条件的`if`语句时，通常会有一个`else`语句，因为如果按钮没有被按下，必须发生某些*其他*事情！`else`语句 ➎
    可以翻译为英文“如果发生其他情况，执行以下操作。”然后，`else`语句后的缩进代码块被执行，并在终端打印出按钮没有被按下。
- en: 'Because the `if`/`else` statements are in a `while` loop whose condition is
    `True`, the code continues to run forever unless the program is stopped. Once
    you have finished entering your program, you can exit the Nano text editor as
    usual: press CTRL+X, save the changes you have made by pressing the Y key at the
    prompt and then press ENTER to confirm the filename as *button.py*.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`if`/`else`语句位于一个条件为`True`的`while`循环中，所以代码会无限运行，除非程序被停止。一旦完成输入程序，你可以像平常一样退出Nano文本编辑器：按CTRL+X，在提示符下按Y键保存更改，然后按ENTER确认文件名为*button.py*。
- en: 'Running Your Program: Get Input from Your Button'
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序：获取来自按钮的输入
- en: 'To run your program, simply enter the following into the terminal:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的程序，只需在终端输入以下内容：
- en: pi@raspberrypi:~/robot $ python3 button.py
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~/robot $ python3 button.py
- en: You should now see the statement `Button is not pressed!` repeatedly in the
    terminal. When you press your button, the statement `Button is pressed!` should
    be printed to your terminal.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该会看到“按钮没有被按下！”这一语句在终端中反复出现。当你按下按钮时，“按钮已被按下！”的语句应当被打印到终端。
- en: pi@raspberrypi:~/robot $ python3 button.py
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: pi@raspberrypi:~/robot $ python3 button.py
- en: Button is not pressed!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮没有被按下！
- en: Button is not pressed!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮没有被按下！
- en: Button is pressed!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮已被按下！
- en: 'TROUBLESHOOTING GUIDE: WHY ISN’T THE BUTTON WORKING?'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除指南：为什么按钮没有工作？
- en: Just as in the previous mini-project, if your button isn’t working, don’t worry!
    First, check your circuit. Is everything wired up correctly? Are the wires firmly
    in the breadboard? Have you connected your button in the right way? If your switch
    is slightly different from my model, have you looked into the details of how it
    is different? If you think that your circuit is okay, you may have made an error
    when copying the code from this book. Go back and check, or grab the code files
    from *[https://nostarch.com/raspirobots/](https://nostarch.com/raspirobots/)*.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在之前的迷你项目中一样，如果你的按钮没有工作，不要担心！首先检查电路。所有接线正确吗？电线牢固地插入了面包板吗？你把按钮接对了吗？如果你的开关与我的型号稍有不同，你是否查看了它与我模型的差异？如果你认为电路没有问题，可能是你在从本书复制代码时犯了错误。回去检查，或者从*[https://nostarch.com/raspirobots/](https://nostarch.com/raspirobots/)*下载代码文件。
- en: To kill your program, press CTRL-C.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止你的程序，请按CTRL-C。
- en: 'Challenge Yourself: Combine Your Button and LED Programs'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 挑战自己：将按钮和LED程序结合起来
- en: See if you can combine both of the mini-projects in this chapter. Try to create
    a program that flashes an LED when the button is held down, or a program that
    keeps the LED turned on until the button is pressed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你能否将本章中的两个迷你项目结合起来。尝试创建一个程序，当按住按钮时闪烁LED，或者一个程序，直到按钮被按下，LED保持开启。
- en: SUMMARY
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you’ve had your first taste of electronics in the form of two
    mini-projects. You’ve learned a lot of theory and fundamentals, all of which are
    going to come in handy as you build your robot over the next chapters. I’ve also
    introduced some key programming techniques and concepts—we’ll be using plenty
    of `if`/`else` statements and loops in the future.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，你通过两个小项目初步接触了电子学。你学到了很多理论和基础知识，这些都将在接下来的章节中帮助你构建机器人。我还介绍了一些关键的编程技巧和概念——未来我们会大量使用`if`/`else`语句和循环。
- en: In the next chapter I’ll guide you through the process of making your first
    robot. We’ll cover the materials and tools you’ll need as well as the construction
    process itself.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我将带你完成制作第一个机器人的过程。我们将涵盖你需要的材料和工具，以及具体的构建过程。
