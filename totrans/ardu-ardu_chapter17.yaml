- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">17</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ARDUINO-TO-RS232
    COMMUNICATION</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">17</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ARDUINO与RS232通信</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: The RS232 data bus is a popular wired method for electronic devices to communicate
    with one another. It was originally devised in the late 1960s and is still used
    today in industrial programmable logic controllers (PLCs) and applications that
    require reliable wired point-to-point data transfer. It’s also often used to interface
    computers with older devices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: RS232数据总线是一种常用的有线方式，用于电子设备之间的通信。它最初是在1960年代末期发明的，至今仍广泛应用于工业可编程逻辑控制器（PLC）和需要可靠有线点对点数据传输的应用中。它也常用于将计算机与旧设备连接。
- en: 'This chapter shows you how to interface an Arduino with the RS232 bus for data
    transmission and remote-control applications. You’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向你展示如何将Arduino与RS232总线进行数据传输和远程控制应用的接口。你将学到：
- en: Add an RS232 interface to your Arduino using a board or shield
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开发板或扩展板为你的Arduino添加RS232接口
- en: Build a PC-to-Arduino remote control that operates via RS232
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个通过RS232工作的PC到Arduino的远程控制
- en: Set up communication over RS232 between two Arduino boards
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在两块Arduino板之间设置RS232通信
- en: You can use the projects in this chapter as the framework for your own future
    Arduino-to-RS232 communication needs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将本章中的项目作为框架，用于未来Arduino与RS232通信的需求。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The RS232 Bus</samp>
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">RS232总线</samp>
- en: The RS232 bus was originally designed to allow connections between data terminals
    and modems that would then be connected to remote mainframes and minicomputers.
    The standard evolved over time, with each version being noted by a letter suffix,
    such as RS232-C. For the purposes of this chapter, I’ll refer to all versions
    of the standard as RS232.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: RS232总线最初是为了实现数据终端与调制解调器之间的连接，调制解调器再连接到远程主机和小型计算机。该标准随着时间的推移不断发展，每个版本通过字母后缀进行标注，如RS232-C。为了本章的目的，我将所有版本的标准统称为RS232。
- en: Though the RS232 bus is an older technology, there are still many reasons to
    use it, including interfacing with older hardware and creating long, reliable
    wired data connections between devices such as your Arduino and a PC. RS232 data
    lines can stretch up to 15 meters in length before reliability becomes an issue,
    though you can extend the possible length over 15 meters by reducing the data
    speed. The examples in this chapter use 9,600 bps, but in your own projects, you
    can use lower speeds supported by the Arduino if you want.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管RS232总线是一项较老的技术，但仍然有许多使用它的理由，包括与旧硬件接口以及在设备之间建立长距离、可靠的有线数据连接，如Arduino与PC之间。RS232数据线的长度可以延伸到15米，超出此长度时，可靠性可能会成为问题，尽管你可以通过降低数据传输速率来延长超过15米的距离。本章中的示例使用9600
    bps，但在你自己的项目中，如果需要，可以使用Arduino支持的更低速度。
- en: RS232 is a serial data bus that operates in a similar manner to the Arduino’s
    serial port (usually found on pins D0 and D1). The basic RS232 connection has
    a TX (transmit) and RX (receive) wire, along with a common ground. The full RS232
    standard has additional lines used for telephony, controlling data start/stop,
    and sending status between two devices, but you won’t use these lines in this
    chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: RS232是一种串行数据总线，其工作方式与Arduino的串行端口（通常位于D0和D1引脚）类似。基本的RS232连接有TX（发送）和RX（接收）线路，以及一个共同地线。完整的RS232标准还包括用于电话、控制数据开始/停止和设备间发送状态的额外线路，但在本章中你不需要使用这些线路。
- en: Although the RS232 bus sends sequential bits of data representing ones and zeros,
    the signal type is different from the TTL serial used with Arduino. For example,
    [Figure 17-1](chapter17.xhtml#fig17-1) shows data sent from an Arduino’s serial
    port. You can see that the ones (known as *marks* in RS232 parlance) are at 5
    V, while the zeros (*spaces*) are at 0 V.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管RS232总线按顺序传送表示1和0的数据位，但其信号类型不同于Arduino使用的TTL串行。例如，[图17-1](chapter17.xhtml#fig17-1)展示了从Arduino串口发送的数据。你可以看到，1（在RS232术语中称为*标记*）是5V，而0（*空格*）是0V。
- en: '![AN IMAGE OF TTL LOGIC DATA CAPTURED FROM AN OSCILLOSCOPE](../images/fig17-1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![来自示波器的TTL逻辑数据图像](../images/fig17-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-1: Time to live (TTL)
    logic data from the Arduino serial port</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图17-1：来自Arduino串口的生存时间（TTL）逻辑数据</samp>
- en: Now consider the same piece of data being sent along RS232, as shown in [Figure
    17-2](chapter17.xhtml#fig17-2). RS232 requires marks to be a negative voltage
    and spaces to be a positive voltage.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑沿 RS232 发送的相同数据，如[图 17-2](chapter17.xhtml#fig17-2)所示。RS232 要求标记是负电压，空格是正电压。
- en: '![AN IMAGE OF RS232 LOGIC DATA CAPTURED FROM AN OSCILLOSCOPE](../images/fig17-2.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![从示波器捕获的 RS232 逻辑数据图像](../images/fig17-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-2: RS232 logic data
    from an RS232 port</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-2：来自 RS232 端口的 RS232 逻辑数据</samp>
- en: Using opposite voltages for marks and spaces clearly defines the 2 bits, avoiding
    potential confusion and thus increasing data accuracy. For each byte of data sent,
    RS232 includes a start bit and a stop bit on the ends of each 8 bits of data.
    (Later in this chapter, I’ll show you how to change the number of bits sent for
    each transmission.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相反的电压表示标记和空格可以清晰地定义 2 位数据，避免潜在的混淆，从而提高数据的准确性。每发送一个字节的数据，RS232 会在每 8 位数据的两端包含一个起始位和一个停止位。（在本章后面，我会向你展示如何更改每次传输时发送的位数。）
- en: The voltages for a mark can range from 3 V to 15 V DC and for a space between
    −3 V and −15 V DC. Though long cables mean greater variation in signal voltage—the
    longer the cable, the larger the voltage drop, because of the wire’s resistance—the
    wide voltage range between marks and spaces means the length of the RS232 cable
    affects signal integrity less. If the surrounding electrical environment is noisy,
    there is less chance of confusion between a mark and a space.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 标记的电压范围可以从 3 V 到 15 V DC，而空格的电压范围则在 −3 V 到 −15 V DC 之间。虽然较长的电缆意味着信号电压会有更大的波动——电缆越长，电压降越大，因为电缆的电阻——但标记和空格之间的宽电压范围意味着
    RS232 电缆的长度对信号完整性的影响较小。如果周围的电气环境噪声较大，标记与空格之间发生混淆的几率较小。
- en: The increased voltage required for the RS232 signals is generated by a TTL-to-RS232
    serial converter IC, the MAX3232, found on RS232 shields and modules for Arduino.
    This IC uses a charge-pump circuit to convert the 5 V DC to +/−10 V DC or more,
    but with a reduced current. Therefore, you don’t need a separate dual-rail power
    supply to use RS232 and the Arduino.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: RS232 信号所需的增加电压由 TTL 至 RS232 串行转换器 IC（MAX3232）生成，该 IC 存在于 Arduino 的 RS232 扩展板和模块上。该
    IC 使用电荷泵电路将 5 V DC 转换为 +/−10 V DC 或更高电压，但电流较小。因此，使用 RS232 和 Arduino 时无需单独的双轨电源。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Connecting to RS232</samp>
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">连接 RS232</samp>
- en: There are several easy ways to interface your Arduino with an RS232 connection
    on a device or PC. Whichever interface device you use will have a nine-pin connector
    for RS232 and a way to electrically connect the onboard MAX3232 IC to the Arduino’s
    TX/RX serial pins.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种简便的方法可以将 Arduino 与设备或 PC 上的 RS232 连接进行接口。无论你使用哪种接口设备，它都会有一个九针连接器用于 RS232，并且有一种方法可以将板载的
    MAX3232 IC 与 Arduino 的 TX/RX 串行引脚电气连接起来。
- en: The most convenient interfacing method is to use an RS232 shield for Arduino
    (PMD Way part 954042), as shown in [Figure 17-3](chapter17.xhtml#fig17-3). The
    shield has a convenient switch that selects between RS232 use and Arduino-to-PC
    communication; you turn the switch off when uploading sketches and on when using
    RS232.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最方便的接口方式是使用 Arduino 的 RS232 扩展板（PMD Way 部件 954042），如[图 17-3](chapter17.xhtml#fig17-3)所示。该扩展板具有一个方便的开关，用于选择
    RS232 使用和 Arduino 与 PC 之间的通信；上传程序时关闭开关，使用 RS232 时打开开关。
- en: '![A PHOTO OF AN RS232 SHIELD FOR ARDUINO](../images/fig17-3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino 的 RS232 扩展板照片](../images/fig17-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-3: An RS232 shield
    for Arduino</samp>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-3：Arduino 的 RS232 扩展板</samp>
- en: A more compact alternative to the RS232 shield for Arduino, especially useful
    when making smaller Arduino-based circuits, is the RS232-to-TTL module shown in
    [Figure 17-4](chapter17.xhtml#fig17-4).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Arduino 的 RS232 扩展板的更紧凑替代方案，特别适用于制作较小的 Arduino 基础电路，是 RS232 至 TTL 模块，如[图
    17-4](chapter17.xhtml#fig17-4)所示。
- en: '![A PHOTO OF AN RS232 MODULE FOR ARDUINO](../images/fig17-4.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino 的 RS232 模块照片](../images/fig17-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-4: An RS232-to-TTL
    module</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-4：RS232 至 TTL 模块</samp>
- en: 'This module connects to the Arduino using the inline header pins: connect V[CC]
    and GND to Arduino 5V and GND, module TXD to Arduino RX (D0), and module RXD to
    Arduino TX (D1). The projects in this chapter use the RS232 shield for Arduino,
    but you could use the module instead for the same projects.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块通过内联针脚连接到Arduino：将V[CC]和GND连接到Arduino的5V和GND，将模块TXD连接到Arduino的RX（D0），将模块RXD连接到Arduino的TX（D1）。本章的项目使用Arduino的RS232扩展板，但你也可以使用本模块来完成相同的项目。
- en: For this chapter, you’ll also need an RS232 cable to bridge the Arduino and
    RS232 hardware with a device or computer. Based on the standard connector on RS232
    shields and modules and the standard PC RS232 socket (shown at the top of [Figure
    17-5](chapter17.xhtml#fig17-5)), you’ll need a double-ended nine-pin female cable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你还需要一根RS232电缆，将Arduino与RS232硬件连接到设备或计算机。基于RS232扩展板和模块上的标准连接器以及标准PC的RS232插座（如[图17-5](chapter17.xhtml#fig17-5)顶部所示），你将需要一根双头九针母头电缆。
- en: '![A PHOTO OF AN RS232 SERIAL PORT ON THE REAR OF A DESKTOP COMPUTER](../images/fig17-5.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![台式电脑后面板的RS232串口照片](../images/fig17-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-5: The back of a
    desktop PC showing an RS232 socket</samp>'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图17-5：显示RS232插座的台式电脑背面</samp>
- en: If you’re using a Mac or laptop computer or if your PC doesn’t have an RS232
    port, you’ll need a USB-to-RS232 cable such as PMD Way part 514539A, as shown
    in [Figure 17-6](chapter17.xhtml#fig17-6).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Mac或笔记本电脑，或者PC没有RS232端口，你将需要一根USB到RS232电缆，比如PMD Way的514539A，如[图17-6](chapter17.xhtml#fig17-6)所示。
- en: '![A PHOTO OF AN RS232-TO-USB CONVERTER CABLE](../images/fig17-6.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![RS232到USB转换器电缆的照片](../images/fig17-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-6: A USB-to-RS232
    cable</samp>'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图17-6：USB到RS232电缆</samp>
- en: The RS232 connectors on your PC or Arduino shield are the nine-pin variety with
    two rows of pins, in either a male or female configuration. When working with
    old devices with 25-pin connectors, you should be able to buy a converter plug
    or cable like the one shown in [Figure 17-7](chapter17.xhtml#fig17-7) from the
    supplier of your other RS232 gear.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你PC或Arduino扩展板上的RS232连接器是九针型，有两排针脚，无论是公头还是母头配置。当使用带有25针连接器的旧设备时，你应该能从其他RS232设备供应商处购买到像[图17-7](chapter17.xhtml#fig17-7)所示的转换插头或电缆。
- en: '![A PHOTO OF A DB9-TO-DB25 CONVERTER CABLE](../images/fig17-7.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![DB9到DB25转换器电缆的照片](../images/fig17-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-7: A DB9-to-DB25
    serial cable</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图17-7：DB9到DB25串口电缆</samp>
- en: Once you’ve collected the required hardware, you’re ready to set up and test
    a PC-to-Arduino connection via RS232.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你收集了所需的硬件，你就可以开始设置并测试通过RS232进行的PC到Arduino的连接。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Testing Arduino-to-PC Connections via
    USB</samp>
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">通过USB测试Arduino与PC的连接</samp>
- en: To test your Arduino-to-PC connection, upload [Listing 17-1](#LiT-17-1) to your
    Arduino board.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试Arduino与PC的连接，请将[清单17-1](#LiT-17-1)上传到你的Arduino板。
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 17-1: Testing the Arduino-to-PC
    connection</samp>'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单17-1：测试Arduino与PC的连接</samp>
- en: Next, remove the USB cable from the Arduino and then connect the RS232 shield
    or module as described in the previous section. Reconnect the Arduino to USB or
    external power and then open your terminal software. As in previous chapters,
    the projects in this chapter use the free terminal emulator CoolTerm by Roger
    Meier, which you can download at [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，拔下Arduino上的USB电缆，然后按照上一节描述连接RS232扩展板或模块。重新将Arduino连接到USB或外部电源，然后打开终端软件。与之前的章节一样，本章的项目使用的是Roger
    Meier提供的免费终端模拟器CoolTerm，你可以在[*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org)下载。
- en: Once you have opened the terminal software, click **Options**. You should be
    presented with a menu of serial port options, as shown in [Figure 17-8](chapter17.xhtml#fig17-8).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端软件后，点击**选项**。你应该会看到一个串口选项菜单，如[图17-8](chapter17.xhtml#fig17-8)所示。
- en: '![A SCREENSHOT OF THE COOLTERM OPTIONS MENU](../images/fig17-8.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![CoolTerm选项菜单的截图](../images/fig17-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-8: The CoolTerm options
    menu</samp>'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图17-8：CoolTerm选项菜单</samp>
- en: Choose your serial port (for example, COM1) from the Port drop-down menu and
    ensure the rest of the serial port settings match those shown in the figure. Click
    **OK** to close the menu and then click **Connect** to begin data transfer from
    the Arduino to the PC via RS232\. The PC should repeatedly receive the word “Hello”
    and display it on the terminal window, as shown in [Figure 17-9](chapter17.xhtml#fig17-9).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从端口下拉菜单中选择您的串口（例如 COM1），并确保其他串口设置与图中所示相匹配。点击**确定**关闭菜单，然后点击**连接**开始通过 RS232
    从 Arduino 向 PC 传输数据。PC 应该会不断接收到“Hello”这个词，并在终端窗口中显示，如[图 17-9](chapter17.xhtml#fig17-9)所示。
- en: '![A SCREENSHOT OF THE RESULTS OF LISTING 17-1 IN THE COOLTERM WINDOW](../images/fig17-9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![在 CoolTerm 窗口中列出 17-1 结果的截图](../images/fig17-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-9: The results of
    [Listing 17-1](#LiT-17-1) in the CoolTerm window</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-9：[列出 17-1](#LiT-17-1)
    在 CoolTerm 窗口中的结果</samp>
- en: You can use this simple setup to capture data from your Arduino over a longer
    distance than is possible using USB cables. In CoolTerm, press CTRL-R to start
    recording any output received to a text file, and press CTRL-SHIFT-R to stop recording.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这个简单的设置，通过 RS232 连接在比使用 USB 电缆更远的距离上捕获来自 Arduino 的数据。在 CoolTerm 中，按 CTRL-R
    开始记录接收到的任何输出到文本文件，按 CTRL-SHIFT-R 停止记录。
- en: Keep your hardware connected; you’ll use it in the following project to make
    a PC-to-Arduino remote control over RS232.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 保持硬件连接；您将在接下来的项目中使用它来实现 PC 到 Arduino 的远程控制，使用 RS232 进行通信。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #49: Creating a PC-to-Arduino
    Remote Control</samp>'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #49：创建一个 PC 到 Arduino 的远程控制</samp>'
- en: This project demonstrates the basic framework to remotely control your Arduino
    over RS232 to control devices connected to digital outputs, request information
    from sensors, or even add computer control to your Arduino projects with PC-based
    software that writes to the serial port.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了一个基本框架，通过 RS232 远程控制 Arduino 来控制连接到数字输出的设备、请求传感器的信息，甚至使用 PC 软件通过串口写入的方式将计算机控制加入到
    Arduino 项目中。
- en: 'You’ll need the following parts:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下零件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容的板子和 USB 电缆
- en: An RS232 shield or module for Arduino
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于 Arduino 的 RS232 扩展板或模块
- en: A nine-pin cable for PC-to-RS232 connection
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于 PC 与 RS232 连接的九针电缆
- en: 'To assemble the project, connect the Arduino to the RS232 hardware and PC as
    described in the previous section. Uploaded the sketch for Project #49, open the
    CoolTerm software, and click **Connect** to begin data communication between the
    Arduino and the PC via RS232.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '为了组装这个项目，请按照上一节所述将 Arduino 连接到 RS232 硬件和 PC。上传项目 #49 的草图，打开 CoolTerm 软件，然后点击**连接**开始通过
    RS232 在 Arduino 和 PC 之间进行数据通信。'
- en: Press **0** or **1** on the PC keyboard to request the values of the Arduino’s
    analog inputs 0 and 1, respectively, and turn the onboard LED on and off by pressing
    **2** and **3**. If any other key is pressed, the terminal should display the
    error message <samp class="SANS_TheSansMonoCd_W5Regular_11">Unrecognized command</samp>,
    as shown in [Figure 17-10](chapter17.xhtml#fig17-10).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按**0**或**1**键请求 Arduino 的模拟输入 0 和 1 的值，分别按**2**和**3**键打开和关闭板载 LED。如果按下其他键，终端应显示错误信息<samp
    class="SANS_TheSansMonoCd_W5Regular_11">未识别的命令</samp>，如[图 17-10](chapter17.xhtml#fig17-10)所示。
- en: '![A SCREENSHOT OF THE RESULTS OF PROJECT #49 IN THE COOLTERM WINDOW](../images/fig17-10.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #49 在 CoolTerm 窗口中的结果截图](../images/fig17-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-10: Example output
    from Project #49</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-10：项目 #49 的示例输出</samp>'
- en: 'Let’s see how this works:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Starting at ❶, the sketch creates four custom functions to be called upon receiving
    a matching command. The sketch then initializes the Arduino serial port ❷ and
    sets the onboard LED pin to output and turns it off.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从❶开始，草图创建了四个自定义函数，用于在接收到匹配命令时调用。然后草图初始化 Arduino 串口 ❷，并将板载 LED 引脚设置为输出并将其关闭。
- en: In the main loop, the Arduino waits for a character of text to come in from
    the RS232 connection via serial ❸ and then acts on this character using a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> function ❹. If the
    character falls outside of the range of choices, the sketch sends an error message
    back to the PC ❺. The actions in this sketch are simply demonstrations, and you
    can replace the contents with your own requirements.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在主循环中，Arduino等待通过串口连接从RS232接收到一个字符❸，然后使用<samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>函数❹对该字符进行处理。如果该字符不在选择范围内，程序会将错误信息发送回PC❺。这个示例中的操作仅用于演示，你可以根据自己的需求替换其中的内容。
- en: 'This project demonstrates that you can control or monitor any Arduino operation
    with a PC over an RS232 connection. You could also write your own custom PC software
    for remote control. Any code that can write to a COM: or serial port on the machine
    can control the Arduino, and any code that can receive text from the serial port
    can act upon it.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了你可以通过RS232连接使用PC控制或监视任何Arduino操作。你也可以编写自己的定制PC软件进行远程控制。任何可以写入COM:或串口的代码都可以控制Arduino，而任何能够从串口接收文本的代码都可以对其进行操作。
- en: 'In the next project, I’ll show you how to set up communication between two
    Arduinos via RS232\. Since RS232 is an extension of the Arduino’s serial communication,
    two Arduinos can communicate with each other using RS232\. However, the RS232
    cable required for this purpose is slightly different than a normal cable: the
    TX and RX data lines need to be crossed over. That is, the TX pin on one end of
    the cable needs to be connected to the RX pin at the other end, and vice versa.
    Otherwise, you’d be trying to connect the TX pins of the two Arduinos, which won’t
    work.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，我将展示如何通过RS232设置两个Arduino之间的通信。由于RS232是Arduino串行通信的扩展，两个Arduino可以通过RS232互相通信。然而，所需的RS232电缆与普通电缆稍有不同：TX和RX数据线需要交叉连接。也就是说，一端的TX针脚需要连接到另一端的RX针脚，反之亦然。否则，你将试图连接两个Arduino的TX针脚，这是不行的。
- en: The solution to this problem is to use a *crossover*, or *null modem*, cable,
    which has the internal wiring required for direct RS232-to-RS232-device communication,
    such as PMD Way part 6045480L15 shown in [Figure 17-11](chapter17.xhtml#fig17-11).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是使用*交叉*电缆，或*无调制解调器*电缆，它具有直接RS232到RS232设备通信所需的内部接线，示例中使用的是PMD Way部件6045480L15，如[图17-11](chapter17.xhtml#fig17-11)所示。
- en: '![A PHOTO OF THE RS232 CROSSOVER/NULL-MODEM CABLE](../images/fig17-11.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![RS232交叉/无调制解调器电缆的照片](../images/fig17-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-11: An RS232 crossover
    cable</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图17-11：RS232交叉电缆</samp>
- en: 'If you’re experimenting over just a short distance, you can instead just use
    jumper wires to connect between the two RS232 shields or modules for Arduino:
    just connect the TX and RX on one side to the RX and TX on the other, and connect
    GND across the two.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是进行短距离实验，可以直接使用跳线在两个RS232保护板或Arduino模块之间连接：只需将一侧的TX和RX分别连接到另一侧的RX和TX，再将GND连接起来即可。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #50: Enabling Arduino-to-Arduino
    Communication</samp>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#50：启用Arduino到Arduino的通信</samp>
- en: This project demonstrates how one Arduino talks to another over RS232\. One
    Arduino board with a BMP180 temperature sensor will send the current temperature
    to another Arduino board via RS232, and the I²C LCD connected to the receiving
    Arduino will display the value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了一个Arduino如何通过RS232与另一个Arduino进行通信。一块带有BMP180温度传感器的Arduino板会通过RS232将当前温度发送到另一块Arduino板，接收Arduino上的I²C
    LCD会显示该值。
- en: 'You’ll need the following parts for this project:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下部件来完成这个项目：
- en: Two Arduino Uno or compatible boards and USB cables
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两块Arduino Uno或兼容的开发板和USB线
- en: Two RS232 shields or modules for Arduino
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个RS232保护板或模块用于Arduino
- en: A nine-pin RS232 crossover cable
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根九针RS232交叉电缆
- en: A solderless breadboard
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个免焊面包板
- en: Various jumper wires
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A BMP180 temperature and air pressure sensor board
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个BMP180温度和气压传感器板
- en: A PCF8574 LCD module
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PCF8574 LCD模块
- en: One Arduino will act as the transmitter board, the other as the receiver board.
    To assemble the hardware, attach an RS232 shield or module to each Arduino, then
    connect both via the crossover cable or jumper wires. Add the BMP180 sensor to
    the transmitter board, as shown in the schematic in [Figure 17-12](chapter17.xhtml#fig17-12).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一块 Arduino 将充当发射器板，另一块将充当接收器板。要组装硬件，将 RS232 扩展板或模块连接到每块 Arduino，然后通过交叉电缆或跳线将它们连接起来。将
    BMP180 传感器添加到发射器板，如 [图 17-12](chapter17.xhtml#fig17-12) 中的原理图所示。
- en: '![THE SCHEMATIC DIAGRAM FOR A BMP180 SENSOR TO AN ARDUINO](../images/fig17-12.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![BMP180 传感器与 Arduino 的原理图](../images/fig17-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-12: The connection
    diagram for a BMP180 sensor to a transmitter Arduino</samp>'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-12：BMP180 传感器与发射器 Arduino
    的连接图</samp>
- en: Next, add the LCD module to the receiver board, as shown in [Figure 17-13](chapter17.xhtml#fig17-13).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 LCD 模块添加到接收器板，如 [图 17-13](chapter17.xhtml#fig17-13) 所示。
- en: '![THE SCHEMATIC DIAGRAM FOR AN I2C LCD TO AN ARDUINO](../images/fig17-13.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![I2C LCD 与 Arduino 连接的原理图](../images/fig17-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-13: The connection
    diagram for an LCD to a receiver Arduino</samp>'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-13：LCD 与接收器 Arduino 的连接图</samp>
- en: If you haven’t used the BMP180 sensor before, install the library as described
    in [Chapter 10](chapter10.xhtml), and install the I²C LCD as described in [Chapter
    13](chapter13.xhtml).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有使用过 BMP180 传感器，请按照 [第 10 章](chapter10.xhtml) 中的说明安装库，并按照 [第 13 章](chapter13.xhtml)
    中的说明安装 I²C LCD。
- en: Now that the Arduinos are connected, if you’re using the RS232 shields, be sure
    they’re switched on. To power the project, you can use either USB cables or external
    power if there’s a distance between the PC and Arduinos.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Arduino 已连接，如果你使用的是 RS232 扩展板，请确保它们已经开启。为了为项目供电，如果 PC 和 Arduino 之间有距离，可以使用
    USB 电缆或外部电源。
- en: Next, enter and upload the transmitter sketch to the transmitter Arduino and
    then the receiver sketch to the receiver Arduino. A moment or two after this,
    the LCD should display the current temperature on the LCD, an example of which
    is shown in [Figure 17-14](chapter17.xhtml#fig17-14).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将发射器草图输入并上传到发射器 Arduino，然后将接收器草图上传到接收器 Arduino。稍等片刻，LCD 屏幕应该会显示当前温度，显示内容的示例如
    [图 17-14](chapter17.xhtml#fig17-14) 所示。
- en: '![A PHOTO OF THE TEMPERATURE DISPLAYED ON AN LCD: “TEMP (C)=26”](../images/fig17-14.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![LCD 上显示的温度照片：“TEMP (C)=26”](../images/fig17-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 17-14: Example output
    from Project #50</samp>'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 17-14：项目 #50 的示例输出</samp>'
- en: 'Let’s see how this works, starting with the transmitter sketch:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从发射器草图开始，看看它是如何工作的：
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The transmitter sketch includes and initializes the BMP180 library and then
    creates a variable to store the temperature ❶. It starts the serial and the BMP180
    ❷. The loop takes a temperature reading from the BMP180 ❸ and then sends the text
    to the receiving Arduino, starting with the description <samp class="SANS_TheSansMonoCd_W5Regular_11">Temp
    (C)</samp> = and followed by the value for the temperature. This is followed by
    <samp class="SANS_TheSansMonoCd_W5Regular_11">\n</samp>, which tells the receiving
    Arduino to add a new line. There’s a small delay before the process repeats.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器草图包含并初始化了 BMP180 库，并创建一个变量来存储温度 ❶。它启动了串口和 BMP180 ❷。循环从 BMP180 获取温度读取 ❸，然后将文本发送到接收
    Arduino，文本以描述 <samp class="SANS_TheSansMonoCd_W5Regular_11">Temp (C)</samp> =
    开头，后面跟着温度的数值。接着是 <samp class="SANS_TheSansMonoCd_W5Regular_11">\n</samp>，它告诉接收
    Arduino 添加一个新行。然后稍作延迟，过程重复。
- en: 'Now let’s examine the receiver sketch:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下接收器的草图：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The receiver sketch is tasked with displaying the line of serial data received
    over RS232 on the LCD. It includes and initializes the LCD library and I²C bus
    and then creates three required variables: <samp class="SANS_TheSansMonoCd_W5Regular_11">length</samp>,
    the number of characters that fit on one line of the LCD; <samp class="SANS_TheSansMonoCd_W5Regular_11">endOfLine</samp>,
    which holds a newline character; and a character array <samp class="SANS_TheSansMonoCd_W5Regular_11">buffer</samp>,
    which holds incoming data from the RS232 bus.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器草图的任务是将通过 RS232 接收到的串行数据行显示在 LCD 上。它包含并初始化了 LCD 库和 I²C 总线，然后创建了三个必要的变量：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">length</samp>，表示 LCD 每行可显示的字符数；<samp class="SANS_TheSansMonoCd_W5Regular_11">endOfLine</samp>，保存换行符；以及字符数组
    <samp class="SANS_TheSansMonoCd_W5Regular_11">buffer</samp>，用于保存来自 RS232 总线的接收数据。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the sketch
    sets up serial communications, activates the I²C bus, and initializes the LCD
    for use by turning on the backlight and setting the cursor to the top left of
    the display. In the main loop, if incoming characters are detected, the LCD cursor
    is reset to the top left with <samp class="SANS_TheSansMonoCd_W5Regular_11">lcd.home();</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">lcd.setCursor(0, 0);</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.readBytesUntil()</samp>
    function captures up to 16 inbound characters from serial, until the newline character
    is received. The sketch stores these characters in the array buffer. Finally,
    it displays the characters of the buffer array on the LCD. The process repeats
    whenever new data is received from the transmitter Arduino.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在<samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>中，草图设置了串行通信，激活了I²C总线，并初始化了LCD的使用，通过开启背光并将光标设置到显示屏的左上角来实现。在主循环中，如果检测到传入的字符，LCD光标会通过<samp
    class="SANS_TheSansMonoCd_W5Regular_11">lcd.home();</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">lcd.setCursor(0,
    0);</samp>重置到左上角。<samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.readBytesUntil()</samp>函数会捕获最多16个来自串行的数据字符，直到接收到换行符。草图将这些字符存储在数组缓冲区中。最后，它会在LCD上显示缓冲区数组的字符。每当从发射端Arduino接收到新数据时，这个过程会重复。
- en: For more permanent projects that involve two Arduino boards at a distance from
    one another, the simple demonstration in this project provides an ideal framework
    for reliable data transmission. For a challenge, you might create a project in
    which two Arduinos “talk” to each other by sending random data or sensor values.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于涉及两个Arduino板在彼此之间的距离的更长期项目，本项目中的简单演示为可靠的数据传输提供了理想的框架。作为挑战，您可以创建一个项目，在其中两个Arduino通过发送随机数据或传感器值“对话”。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Other RS232 Data Configurations</samp>
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">其他RS232数据配置</samp>
- en: Up until now in this chapter, you’ve used a default 9,600 bps for data speed
    and 8 bits in each piece of data sent, with no parity and 1 stop bit. (This is
    often written as “8, None, 1” after the speed in device specification sheets or
    user manuals.) However, in future projects, you may want to work with devices
    that use a different data speed or method of sending and receiving data. For example,
    an old terminal might use 7 bits instead of 8, and 2 stop bits instead of 1.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，您使用了默认的9,600 bps数据速率，每个数据单元为8位，无校验和1个停止位。（在设备规格表或用户手册中，这通常写作“8, None,
    1”在速率后面。）然而，在未来的项目中，您可能需要使用不同数据速率或发送接收数据的方式。例如，一台旧终端可能使用7位而非8位，使用2个停止位而不是1个。
- en: 'To solve this problem, you can modify the <samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.begin()</samp>
    function’s parameters used in the projects in this chapter. Set the first parameter
    to the data speed you require and the second parameter as the new data configuration:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，您可以修改本章中项目中使用的<samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.begin()</samp>函数的参数。将第一个参数设置为您需要的数据速率，将第二个参数设置为新的数据配置：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the second parameter, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">X</samp>
    stands for the requisite number of data bits, which can fall between 5 and 8;
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Y</samp> stands for parity,
    which can be <samp class="SANS_TheSansMonoCd_W5Regular_11">N</samp> for none,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">E</samp> for even, or <samp class="SANS_TheSansMonoCd_W5Regular_11">O</samp>
    for odd; and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Z</samp> stands
    for the number of stop bits, which can be 1 or 2.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个参数中，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">X</samp>代表所需的数据位数，可以在5到8之间；<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Y</samp>代表奇偶校验，可以是<samp class="SANS_TheSansMonoCd_W5Regular_11">N</samp>表示无，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">E</samp>表示偶数，或<samp class="SANS_TheSansMonoCd_W5Regular_11">O</samp>表示奇数；<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Z</samp>代表停止位的数量，可以是1或2。
- en: 'For example, to start the serial (and thus RS232) at 4,800 bps with 7-bit data,
    no parity, and 1 stop bit, use the following function in your sketch:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要以4,800 bps的速度启动串行通信（即RS232），使用7位数据，无校验和1个停止位，请在您的草图中使用以下函数：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This may come in handy if you decide to interface any vintage equipment with
    your Arduino. For some retro computing fun, keep an eye out on eBay or computer
    marketplaces for old computer terminals or printers. For example, check out the
    Arduino-controlled RS232 to parallel printer interface at [*https://<wbr>hackaday<wbr>.io<wbr>/project<wbr>/18140<wbr>-serial<wbr>-to<wbr>-parallel<wbr>-printer<wbr>-interface*](https://hackaday.io/project/18140-serial-to-parallel-printer-interface).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定将任何复古设备与Arduino连接，这可能会派上用场。为了体验一些复古计算乐趣，可以留意eBay或计算机市场，寻找旧的计算机终端或打印机。例如，看看这个Arduino控制的RS232到并行打印机接口：[*https://<wbr>hackaday<wbr>.io<wbr>/project<wbr>/18140<wbr>-serial<wbr>-to<wbr>-parallel<wbr>-printer<wbr>-interface*](https://hackaday.io/project/18140-serial-to-parallel-printer-interface)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: You learned how to communicate between a PC and Arduino via RS232 and between
    Arduinos via RS232\. You now have the tools to harness the RS232 bus for remote
    control, data communication between Arduinos, and data capture to a PC for analysis
    and to communicate with RS232-based devices with an Arduino.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何通过RS232在PC和Arduino之间进行通信，以及在多个Arduino之间通过RS232进行通信。现在你具备了利用RS232总线进行远程控制、Arduino间的数据通信、以及将数据捕捉到PC中进行分析的工具，同时还可以通过Arduino与基于RS232的设备进行通信。
- en: In the next chapter, you’ll learn how to use an Arduino to communicate with
    other devices using another data bus, the RS485 data bus.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用Arduino通过另一种数据总线——RS485数据总线，与其他设备进行通信。
