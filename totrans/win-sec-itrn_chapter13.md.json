["```\nPS> **$credout = New-LsaCredentialHandle -Package \"NTLM\"**\n**-UseFlag Outbound -UserName $env:USERNAME -Domain $env:USERDOMAIN**\nPS> **$client = New-LsaClientContext -CredHandle $credout**\nPS> **$negToken = $client.Token**\nPS> **Format-LsaAuthToken -Token $negToken**\n<NTLM NEGOTIATE>\nFlags: Unicode, Oem, RequestTarget, NTLM, AlwaysSign, ExtendedSessionSecurity,\nVersion, Key128Bit, Key56Bit\nVersion: 10.0.XXXXX.XX \n```", "```\nPS> **Format-LsaAuthToken -Token $client.Token -AsBytes**\n          00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n❶ 00000000: 4E 54 4C 4D 53 53 50 00 01 00 00 00 07 82 08 A2  - NTLMSSP.........\n00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n00000020: 0A 00 BA 47 00 00 00 0F                          - ...G.... \n```", "```\nPS> **$credin = New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Inbound**\nPS> **$server = New-LsaServerContext -CredHandle $credin**\nPS> **Update-LsaServerContext -Server $server -Token $client.Token**\nPS> **$challengeToken = $server.Token**\nPS> **Format-LsaAuthToken -Token $server.Token**\n<NTLM CHALLENGE>\nFlags     : Unicode, RequestTarget, NTLM, AlwaysSign, TargetTypeDomain,\nExtendedSessionSecurity, TargetInfo, Version, Key128Bit, Key56Bit\nTargetName: DOMAIN\nChallenge : D568EB90F6A283B8\nReserved  : 0000000000000000\nVersion   : 10.0.XXXXX.XX\n=> Target Info\nNbDomainName - DOMAIN\nNbComputerName - GRAPHITE\nDnsDomainName - domain.local\nDnsComputerName - GRAPHITE.domain.local\nDnsTreeName - domain.local\nTimestamp - 5/1 4:21:17 PM \n```", "```\nPS> **Update-LsaClientContext -Client $client -Token $server.Token**\nPS> **$authToken = $client.Token**\nPS> **Format-LsaAuthToken -Token $client.Token**\n<NTLM AUTHENTICATE>\nFlags      : Unicode, RequestTarget, NTLM, AlwaysSign, ExtendedSessionSecurity,\nTargetInfo, Version, Key128Bit, Key56Bit\nDomain     : GRAPHITE\nUserName   : user\nWorkstation: GRAPHITE\nLM Response: 000000000000000000000000000000000000000000000000 ❶\n<NTLMv2 Challenge Response>\nNT Response          : 532BB4804DD9C9DF418F8A18D67F5510 ❷\nChallenge Verison    : 1\nMax Challenge Verison: 1\nReserved 1           : 0x0000\nReserved 2           : 0x00000000\nTimestamp            : 5/1 5:14:01 PM\nClient Challenge     : 0EC1FF45C43619A0 ❸\nReserved 3           : 0x00000000\nNbDomainName - DOMAIN\nNbComputerName - GRAPHITE\nDnsDomainName - domain.local\nDnsComputerName - GRAPHITE.domain.local\nDnsTreeName - domain.local\nTimestamp - 5/1 5:14:01 PM\nFlags - MessageIntegrity ❹\nSingleHost - Z4 0x0 - Custom Data: 0100000000200000 Machine ID: 5FB8... ❺\nChannelBinding - 00000000000000000000000000000000 ❻\nTargetName -\n</NTLMv2 Challenge Response>\nMIC        : F0E95DBEB53C885C0619FB61C5AF5956 ❼ \n```", "```\nNT Response: 96018E031BBF1666211D91304A0939D27EA972776C6C0191 \n```", "```\nLM Response: CB00748C3F04CB5700000000000000000000000000000000 \n```", "```\nPS> **Update-LsaServerContext -Server $server -Token $client.Token**\nPS> **if ((Test-LsaContext $client) -and (Test-LsaContext $server)) {**\n    **Use-NtObject($token = Get-LsaAccessToken $server) {**\n        **Get-NtLogonSession -Token $token**\n    **}**\n**}**\nLogonId           UserName       LogonType SessionId\n-------           --------       --------- ---------\n00000000-0057D74A GRAPHITE\\user  Network   0 \n```", "```\nPS> **function Get-Md5Hmac {**\n❶ **Param(**\n **$Key,**\n **$Data**\n **)**\n\n **$algo = [System.Security.Cryptography.HMACMD5]::new($Key)**\n **if ($Data -is [string]) {**\n **$Data = [System.Text.Encoding]::Unicode.GetBytes($Data)**\n **}**\n❷ **$algo.ComputeHash($Data)**\n**}** \n```", "```\nPS> **function Get-NtOwfv2 {**\n **Param(**\n **$Password,**\n **$UserName,**\n **$Domain**\n **)**\n\n❶ **$key = Get-MD4Hash -String $Password**\n❷ **Get-Md5Hmac -Key $key -Data ($UserName.ToUpperInvariant() + $Domain)**\n**}**\n\n❸ PS> **$key = Get-NtOwfv2 -Password \"pwd\" -UserName $authToken.UserName**\n**-Domain $authToken.Domain**\nPS> **$key | Out-HexDump**\n❹ D6 B7 52 89 D4 54 09 71 D9 16 D5 23 CD FB 88 1F \n```", "```\nPS> **function Get-NtProofStr {**\n **Param(**\n **$Key,**\n **$ChallengeToken,**\n **$AuthToken**\n **)**\n\n❶ **$data = $ChallengeToken.ServerChallenge**\n **$last_index = $AuthToken.NtChallengeResponse.Length - 1**\n **$data += $AuthToken.NtChallengeResponse[16..$last_index]**\n❷ **Get-Md5Hmac -Key $Key -Data $data**\n**}**\nPS> **$proof = Get-NtProofStr -Key $key -ChallengeToken $ChallengeToken**\n**-AuthToken $AuthToken**\nPS> **$proof | Out-HexDump**\n❸ 53 2B B4 80 4D D9 C9 DF 41 8F 8A 18 D6 7F 55 10 \n```", "```\nPS> **function Get-Mic {**\n **Param(**\n **$Key,**\n **$Proof,**\n **$NegToken,**\n **$ChallengeToken,**\n **$AuthToken**\n **)**\n\n❶ **$session_key = Get-Md5Hmac -Key $Key -Data $Proof**\n\n **$auth_data = $AuthToken.ToArray()**\n❷ **[array]::Clear($auth_data, $AuthToken.MessageIntegrityCodeOffset, 16)**\n❸ **$data = $NegToken.ToArray() + $ChallengeToken.ToArray() + $auth_data**\n❹ **Get-Md5Hmac -Key $session_key -Data $data**\n**}**\nPS> **$mic = Get-Mic -Key $key -Proof $proof -NegToken $NegToken**\n**-ChallengeToken $ChallengeToken -AuthToken $AuthToken**\nPS> **$mic | Out-HexDump**\n❺ F0 E9 5D BE B5 3C 88 5C 06 19 FB 61 C5 AF 59 56 \n```", "```\nPS> **$credout = New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Outbound** \n```", "```\n<NTLM NEGOTIATE>\nFlags: Unicode, Oem, RequestTarget, NTLM, OemDomainSupplied,\nOemWorkstationSupplied, AlwaysSign, ExtendedSessionSecurity, Version,\nKey128Bit, Key56Bit\n❶ Domain: DOMAIN\nWorkstation: GRAPHITE\nVersion: 10.0.XXXXX.XX\n\n<NTLM CHALLENGE>\n❷ Flags     : Unicode, RequestTarget, NTLM, LocalCall,...\nTargetName: DOMAIN\nChallenge : 9900CFB9C182FA39\n❸ Reserved  : 5100010000000000\nVersion   : 10.0.XXXXX.XX\n`--snip--`\n\n<NTLM AUTHENTICATE>\n❹ Flags      : Unicode, RequestTarget, NTLM, LocalCall,...\n❺ LM Response:\nNT Response:\nVersion    : 10.0.XXXXX.XX\nMIC        : 34D1F09E07EF828ABC2780335EE3E452\n\nPS> **Get-NtLogonSession -Token $token**\nLogonId           UserName       LogonType         SessionId\n-------           --------       ---------         ---------\n❻ 00000000-000A0908 GRAPHITE\\user  Interactive       2\n\nPS> **Get-NtTokenId -Authentication**\nLUID\n----\n❼ 00000000-000A0908 \n```", "```\nPS> **$cout = New-LsaCredentialHandle -Package NTLM -UseFlag Outbound** \n**-ReadCredential**\nPS> UserName: **admin**\nPS> Domain: **GRAPHITE**\nPS> Password: ************ \n```", "```\nPS> **$credout = Invoke-NtToken -System {**\n    **New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Outbound**\n**}** \n```", "```\nPS> **$password = Read-Host -AsSecureString -Prompt \"Password\"**\nPS> **$new_token = Get-NtToken -Logon -LogonType NewCredentials**\n**-User \"Administrator\" -Domain \"GRAPHITE\" -SecurePassword $password**\nPS> **$credout = Invoke-NtToken $new_token {**\n    **New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Outbound**\n**}** \n```", "```\nPS> **$client = New-LsaClientContext -CredHandle $credout -RequestAttribute** \n**Integrity** \n```", "```\n<NTLM AUTHENTICATE>\n❶ Flags      : Unicode, RequestTarget, Signing, NTLM, AlwaysSign,\nExtendedSessionSecurity, TargetInfo, Version,\nKey128Bit, KeyExchange, Key56Bit\n`--snip--`\n</NTLMv2 Challenge Response>\n❷ Session Key: 5B13E92C08E140D37E156D2FE4B0EAB9\nVersion    : 10.0.18362.15\nMIC        : 5F5E9B1F1556ADA1C07E83A715A7809F \n```", "```\n$session_key = Get-Md5Hmac -Key $Key -Data $Proof\n**if ($authToken.EncryptedSessionKey.Count -gt 0) {**\n    **$session_key = Unprotect-RC4 -Key $session_key**\n**-Data $AuthToken.EncryptedSessionKey**\n**}** \n```", "```\n❶ PS> **$server = New-LsaServerContext -CredHandle $credin**\nPS> **Update-LsaServerContext $server $client**\nPS> **Update-LsaClientContext $client $server**\nPS> **Update-LsaServerContext $server $client**\nPS> **$msg = $(0, 1, 2, 3)**\n❷ PS> **$sig = Get-LsaContextSignature -Context $client -Message $msg**\nPS> **$sig | Out-HexDump**\n01 00 00 00 A7 6F 57 90 8B 90 54 2B 00 00 00 00\n\n❸ PS> **Test-LsaContextSignature -Context $server -Message $msg -Signature $sig**\nTrue\n\n❹ PS> **Test-LsaContextSignature -Context $server -Message $msg -Signature $sig**\nFalse \n```", "```\nPS> **$server.SessionKey | Out-HexDump**\nF3 FA 3A E0 8D F7 EE 34 75 C5 00 9F BF 77 0E E1\nPS> **$client.SessionKey | Out-HexDump**\nF3 FA 3A E0 8D F7 EE 34 75 C5 00 9F BF 77 0E E1 \n```", "```\nPS> **$client = New-LsaClientContext -CredHandle $credout -Target \"HTTP/localhost\"** \n```", "```\nTargetName - HTTP/localhost \n```", "```\nPS> **$server.ClientTargetName**\nHTTP/localhost \n```", "```\nPS> **$client = New-LsaClientContext -CredHandle $credout -ChannelBinding @(1, 2, 3)**\nPS> **$server = New-LsaServerContext -CredHandle $credin -ChannelBinding @(1, 2, 3)** \n```", "```\nChannelBinding - BAD4B8274DC394EDC375CA8ABF2D2AEE \n```", "```\nPS> **function Get-BindingHash {**\n    **Param(**\n         **[byte[]]$ChannelBinding**\n    **)**\n    **$stm = [System.IO.MemoryStream]::new()**\n    **$writer = [System.IO.BinaryWriter]::new($stm)**\n    **$writer.Write(0) # dwInitiatorAddrType**\n    **$writer.Write(0) # cbInitiatorLength**\n    **$writer.Write(0) # dwAcceptorAddrType**\n    **$writer.Write(0) # cbAcceptorLength**\n    **$writer.Write($ChannelBinding.Count) # cbApplicationDataLength**\n    **$writer.Write($ChannelBinding) # Application Data**\n    **[System.Security.Cryptography.MD5Cng]::new().ComputeHash($stm.ToArray())**\n**}**\nPS> **Get-BindingHash -ChannelBinding @(1, 2, 3) | Out-HexDump**\nBA D4 B8 27 4D C3 94 ED C3 75 CA 8A BF 2D 2A EE \n```", "```\nImport-Module NtObjectManager\nfunction Get-SocketClient {\n    param(\n        [Parameter(Mandatory)]\n        $Socket\n    )\n\n    $Socket.Client.NoDelay = $true\n    $stream = $Socket.GetStream()\n    $reader = [System.IO.StreamReader]::new($stream)\n    $writer = [System.IO.StreamWriter]::new($stream)\n    $writer.AutoFlush = $true\n    return @{\n        Reader = $reader\n        Writer = $writer\n    }\n}\n\nfunction Send-Message {\n    param(\n        [Parameter(Mandatory)]\n        $Client,\n        [Parameter(Mandatory)]\n        $Message\n    )\n\n    Write-Verbose \"Sending Message\"\n    Format-HexDump -Byte $Message -ShowAll | Write-Verbose\n    $text = [System.Convert]::ToBase64String($Message)\n    $Client.Writer.WriteLine($text)\n}\n\nfunction Receive-Message {\n    param(\n        [Parameter(Mandatory)]\n        $Client\n    )\n\n    $text = $Client.Reader.ReadLine()\n    $ba = [System.Convert]::FromBase64String($text)\n    Write-Verbose \"Received Message\"\n    Format-HexDump -Byte $ba -ShowAll | Write-Verbose\n\n    Write-Output -NoEnumerate $ba\n}\n\nfunction Send-TextMessage {\n    param(\n        [Parameter(Mandatory)]\n        $Client,\n        [Parameter(Mandatory)]\n        $Message,\n        [Parameter(Mandatory)]\n        $Context\n    )\n\n    $bytes = [System.Text.Encoding]::UTF8.GetBytes($Message)\n    $enc = Protect-LsaContextMessage -Context $Context -Message $bytes\n    Send-Message -Client $Client -Message $enc.Message\n    Send-Message -Client $Client -Message $enc.Signature\n}\n\nfunction Receive-TextMessage {\n    param(\n        [Parameter(Mandatory)]\n        $Client,\n        [Parameter(Mandatory)]\n        $Context\n    )\n\n    $msg = Receive-Message -Client $Client\n    if ($msg.Length -eq 0) {\n        return \"\"\n    }\n\n    $sig = Receive-Message -Client $Client\n    if ($sig.Length -eq 0) {\n        return \"\"\n    }\n\n    $dec = Unprotect-LsaContextMessage -Context $Context -Message $msg -Signature $sig\n    [System.Text.Encoding]::UTF8.GetString($dec)\n}\n\nExport-ModuleMember -Function 'Get-SocketClient', 'Send-Message',\n'Receive-Message', 'Send-TextMessage', 'Receive-TextMessage' \n```", "```\n❶ param(\n    [switch]$Global,\n    [int]$Port = 6543\n)\n\n❷ Import-Module \"$PSScriptRoot\\network_protocol_common.psm1\"\n$socket = $null\n$listener = $null\n$context = $null\n$credin = $null\n\ntry {\n  ❸ $Address = if ($Global) {\n        [ipaddress]::Any\n    } else {\n        [ipaddress]::Loopback\n    }\n\n  ❹ $listener = [System.Net.Sockets.TcpListener]::new($Address, $port)\n    $listener.Start()\n    $socket = $listener.AcceptTcpClient()\n    $client = Get-SocketClient -Socket $socket\n    Write-Host \"Connection received from $($socket.Client.RemoteEndPoint)\"\n\n  ❺ $credin = New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Inbound\n    $context = New-LsaServerContext -CredHandle $credin\n-RequestAttribute Confidentiality\n\n  ❻ $neg_token = Receive-Message -Client $client\n    Update-LsaServerContext -Server $context -Token $neg_token\n    Send-Message -Client $client -Message $context.Token.ToArray()\n    $auth_token = Receive-Message -Client $client\n    Update-LsaServerContext -Server $context -Token $auth_token\n\n    if (!(Test-LsaContext -Context $context)) {\n        throw \"Authentication didn't complete as expected.\"\n    }\n\n  ❼ $target = \"BOOK/$($socket.Client.LocalEndPoint.Address)\"\n    if ($context.ClientTargetName -ne $target) {\n        throw \"Incorrect target name specified: $($context.ClientTargetName).\"\n    }\n\n    $user = Use-NtObject($token = Get-LsaAccessToken -Server $context) {\n        $token.User\n    }\n    Write-Host \"User $user has authenticated.\"\n  ❽ Send-TextMessage -Client $client -Message \"OK\" -Context $context\n\n  ❾ $msg = Receive-TextMessage -Client $client -Context $context\n    while($msg -ne \"\") {\n        Write-Host \"> $msg\"\n        $reply = \"User {0} said: {1}\" -f $user, $msg.ToUpper()\n        Send-TextMessage -Client $client -Message $reply -Context $context\n        $msg = Receive-TextMessage -Client $client -Context $context\n    }\n} catch {\n    Write-Error $_\n} finally {\n    if ($null -ne $socket) {\n        $socket.Close()\n    }\n    if ($null -ne $listener) {\n        $listener.Stop()\n    }\n    if ($null -ne $context) {\n        $context.Dispose()\n    }\n    if ($null -ne $credin) {\n        $credin.Dispose()\n    }\n} \n```", "```\n❶ param(\n    [ipaddress]$Address = [ipaddress]::Loopback,\n    [int]$Port = 6543\n)\n\nImport-Module \"$PSScriptRoot\\network_protocol_common.psm1\"\n\n$socket = $null\n$context = $null\n$credout = $null\n\ntry {\n  ❷ $socket = [System.Net.Sockets.TcpClient]::new()\n    $socket.Connect($Address, $port)\n    $client = Get-SocketClient -Socket $socket\n    Write-Host \"Connected to server $($socket.Client.RemoteEndPoint)\"\n\n  ❸ $credout = New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Outbound\n    $context = New-LsaClientContext -CredHandle $credout\n-RequestAttribute Confidentiality -Target \"BOOK/$Address\"\n    Send-Message -Client $client -Message $context.Token.ToArray()\n    $chal_token = Receive-Message -Client $client\n    Update-LsaClientContext -Client $context -Token $chal_token\n    Send-Message -Client $client -Message $context.Token.ToArray()\n\n    if (!(Test-LsaContext -Context $context)) {\n        throw \"Authentication didn't complete as expected.\"\n    }\n\n  ❹ $ok_msg = Receive-TextMessage -Client $client -Context $context\n    if ($ok_msg -ne \"OK\") {\n        throw \"Failed to authenticate.\"\n    }\n\n  ❺ $msg = Read-Host -Prompt \"MSG\"\n    while($msg -ne \"\") {\n        Send-TextMessage -Client $client -Context $context -Message $msg\n        $recv_msg = Receive-TextMessage -Client $client -Context $context\n        Write-Host \"> $recv_msg\"\n        $msg = Read-Host -Prompt \"MSG\"\n    }\n\n} catch {\n    Write-Error $_\n} finally {\n    if ($null -ne $socket) {\n        $socket.Close()\n    }\n    if ($null -ne $context) {\n        $context.Dispose()\n    }\n    if ($null -ne $credout) {\n        $credout.Dispose()\n    }\n} \n```", "```\nPS> **.\\network_protocol_server.ps1** \n```", "```\nPS> **.\\network_protocol_client.ps1**\nConnected to server 127.0.0.1:6543\nMSG: **Hello**\n> User GRAPHITE\\user said: HELLO\nMSG: \n```", "```\nConnection received from 127.0.0.1:60830\nUser GRAPHITE\\user has authenticated.\n> Hello \n```", "```\nPS> **.\\network_protocol_server.ps1 -Port 11111** \n```", "```\nPS> **$VerbosePreference = \"Continue\"**\nPS> **.\\network_protocol_client.ps1**\nVERBOSE: Importing function 'Get-SocketClient'.\nVERBOSE: Importing function 'Receive-Message'.\nVERBOSE: Importing function 'Receive-TextMessage'.\nVERBOSE: Importing function 'Send-Message'.\nVERBOSE: Importing function 'Send-TextMessage'.\nConnected to server 127.0.0.1:6543\nVERBOSE: Sending Message\nVERBOSE:           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 4E 54 4C 4D 53 53 50 00 01 00 00 00 B7 B2 08 E2  - NTLMSSP.........\n00000010: 09 00 09 00 2D 00 00 00 05 00 05 00 28 00 00 00  - ....-.......(...\n`--snip--` \n```"]