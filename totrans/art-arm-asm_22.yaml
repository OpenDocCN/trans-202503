- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: B GLOSSARY
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AARCH64
  prefs: []
  type: TYPE_NORMAL
- en: The 64-bit variant of the ARM architecture. Also known as ARM64.
  prefs: []
  type: TYPE_NORMAL
- en: address
  prefs: []
  type: TYPE_NORMAL
- en: The numeric index associated with a memory location.
  prefs: []
  type: TYPE_NORMAL
- en: address bus
  prefs: []
  type: TYPE_NORMAL
- en: A set of electronic signals that hold a binary address of a memory element.
  prefs: []
  type: TYPE_NORMAL
- en: address space layout randomization (ASLR)
  prefs: []
  type: TYPE_NORMAL
- en: The use of random load addresses for program modules (to reduce the possibility
    of hacks and exploits in the code).
  prefs: []
  type: TYPE_NORMAL
- en: alternate half-precision control bit (AHP)
  prefs: []
  type: TYPE_NORMAL
- en: A bit in the floating-point control register that selects an alternative half-precision
    format (different from the IEEE half-precision format).
  prefs: []
  type: TYPE_NORMAL
- en: application binary interface (ABI)
  prefs: []
  type: TYPE_NORMAL
- en: A set of rules that allows interaction between programming languages and systems.
    Includes rules for passing parameters, data types, and other features.
  prefs: []
  type: TYPE_NORMAL
- en: ARM
  prefs: []
  type: TYPE_NORMAL
- en: Advanced RISC machines (originally an acronym for Acorn RISC machine).
  prefs: []
  type: TYPE_NORMAL
- en: ASCII
  prefs: []
  type: TYPE_NORMAL
- en: American Standard Code for Information Interchange (a standardized character
    set).
  prefs: []
  type: TYPE_NORMAL
- en: assembler
  prefs: []
  type: TYPE_NORMAL
- en: A compiler for an assembly language.
  prefs: []
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: .bss
  prefs: []
  type: TYPE_NORMAL
- en: A block started by a symbol; a data area in the program containing uninitialized
    data (that usually doesn’t consume space in the executable file).
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: cache
  prefs: []
  type: TYPE_NORMAL
- en: The high-speed memory sitting between the CPU and main memory to improve system
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: control bus
  prefs: []
  type: TYPE_NORMAL
- en: A set of electronic signals from the CPU that control activities such as reading,
    writing, and generating wait states.
  prefs: []
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: data bus
  prefs: []
  type: TYPE_NORMAL
- en: A set of electronic signals from the CPU that transfer data between CPU and
    external devices (such as memory or I/O).
  prefs: []
  type: TYPE_NORMAL
- en: default NaN enable (DN)
  prefs: []
  type: TYPE_NORMAL
- en: When default NaN is enabled (FPSCR[25]), any operation that generates a NaN
    result returns the default NaN value.
  prefs: []
  type: TYPE_NORMAL
- en: denormalized numbers
  prefs: []
  type: TYPE_NORMAL
- en: Floating-point numbers with an exponent of 0 and no implied HO mantissa bit.
    Denormalized numbers offer less precision than normalized numbers, but the alternative
    is setting the value to 0 upon underflow.
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: effective address (EA)
  prefs: []
  type: TYPE_NORMAL
- en: The final memory address computed for an addressing mode (generally involving
    addition, subtraction, and shifting).
  prefs: []
  type: TYPE_NORMAL
- en: equate
  prefs: []
  type: TYPE_NORMAL
- en: An assembler directive that associates a value with a symbolic name.
  prefs: []
  type: TYPE_NORMAL
- en: '### F'
  prefs: []
  type: TYPE_NORMAL
- en: facade code
  prefs: []
  type: TYPE_NORMAL
- en: The code around a call to a function to modify the behavior of that function
    (such as adjusting input and output values, checking for range limits, and other
    such operations).
  prefs: []
  type: TYPE_NORMAL
- en: flags
  prefs: []
  type: TYPE_NORMAL
- en: Boolean variables that indicate the state of a system. Generally, this term
    is associated with the condition code flags in the PSTATE register.
  prefs: []
  type: TYPE_NORMAL
- en: floating-point status and control register
  prefs: []
  type: TYPE_NORMAL
- en: The FPSCR contains the status flags that are set by floating-point operations,
    and it contains the status flags that control the operation of various floating-point
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: floating-point unit (FPU)
  prefs: []
  type: TYPE_NORMAL
- en: The (optional on some CPUs) hardware that is responsible for computing floating-point
    arithmetic operations.
  prefs: []
  type: TYPE_NORMAL
- en: frame pointer
  prefs: []
  type: TYPE_NORMAL
- en: A special register used to access parameters, local variables, and other items
    in an activation record.
  prefs: []
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gas
  prefs: []
  type: TYPE_NORMAL
- en: GNU assembler.
  prefs: []
  type: TYPE_NORMAL
- en: general-purpose registers
  prefs: []
  type: TYPE_NORMAL
- en: Special memory cells accessible to user applications, used for most integer
    and address calculations on ARM CPUs.
  prefs: []
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: high-level language (HLL)
  prefs: []
  type: TYPE_NORMAL
- en: Programming language that allows developers to create software that is independent
    of the underlying machine architecture.
  prefs: []
  type: TYPE_NORMAL
- en: high-order (HO)
  prefs: []
  type: TYPE_NORMAL
- en: Most significant.
  prefs: []
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: idiom
  prefs: []
  type: TYPE_NORMAL
- en: A peculiarity of an instruction or operation. For example, shifting a binary
    number one bit position to the left is the same as multiplying by 2.
  prefs: []
  type: TYPE_NORMAL
- en: input/output (I/O)
  prefs: []
  type: TYPE_NORMAL
- en: Data provided to a CPU from outside sources (inputs) or presented to the outside
    world by the CPU (outputs).
  prefs: []
  type: TYPE_NORMAL
- en: integrated development environment (IDE)
  prefs: []
  type: TYPE_NORMAL
- en: Generally consists of two or more programs combined into a single tool. At the
    very least, an IDE will include a text editor and a compiler. Most IDEs also include
    a debugger, build (make) system, and other file management tools.
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: last in, first out (LIFO)
  prefs: []
  type: TYPE_NORMAL
- en: An access mechanism whereby the last object inserted into a list will be the
    first object removed from the list. CPU stacks use this mechanism to preserve
    and restore data and return addresses.
  prefs: []
  type: TYPE_NORMAL
- en: ld
  prefs: []
  type: TYPE_NORMAL
- en: A linker program (loader).
  prefs: []
  type: TYPE_NORMAL
- en: lexically scoped symbols
  prefs: []
  type: TYPE_NORMAL
- en: Symbols that are visible only within a particular block where they are defined.
    For example, in an HLL, symbols defined within a function or procedure are local
    to that function/procedure and are not visible outside it.
  prefs: []
  type: TYPE_NORMAL
- en: link register (LR)
  prefs: []
  type: TYPE_NORMAL
- en: Holds the return address after a bl instruction so the target (of bl) function
    or procedure can return to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: low-order (LO)
  prefs: []
  type: TYPE_NORMAL
- en: Least significant.
  prefs: []
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: machine code
  prefs: []
  type: TYPE_NORMAL
- en: The binary instruction encoding for each assembly language instruction.
  prefs: []
  type: TYPE_NORMAL
- en: manifest constant
  prefs: []
  type: TYPE_NORMAL
- en: A symbolic name in a program that is textually replaced by its associated value.
  prefs: []
  type: TYPE_NORMAL
- en: memory management unit (MMU)
  prefs: []
  type: TYPE_NORMAL
- en: The hardware in the CPU that controls access to memory (protection) and remaps
    memory addresses (typically to allow safe multitasking).
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: natural boundary
  prefs: []
  type: TYPE_NORMAL
- en: An object’s address that is a multiple of that object’s size.
  prefs: []
  type: TYPE_NORMAL
- en: nonvolatile registers
  prefs: []
  type: TYPE_NORMAL
- en: Registers that must be preserved across a function call.
  prefs: []
  type: TYPE_NORMAL
- en: not a number (NaN)
  prefs: []
  type: TYPE_NORMAL
- en: A special floating-point value that represents an illegal result (other than
    infinity) from a floating-point operation.
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: operating system (OS)
  prefs: []
  type: TYPE_NORMAL
- en: The software that controls computer operations, such as scheduling tasks, executing
    applications, and providing access to I/O devices.
  prefs: []
  type: TYPE_NORMAL
- en: operation code (opcode)
  prefs: []
  type: TYPE_NORMAL
- en: A numeric value that encodes a machine instruction.
  prefs: []
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: position-independent executables (PIE)
  prefs: []
  type: TYPE_NORMAL
- en: Code that can execute at any address in memory without modification (relocation).
  prefs: []
  type: TYPE_NORMAL
- en: processor state register (PSTATE)
  prefs: []
  type: TYPE_NORMAL
- en: A special register that holds the condition code flags, interrupt masks, and
    other miscellaneous processor control bits.
  prefs: []
  type: TYPE_NORMAL
- en: program counter
  prefs: []
  type: TYPE_NORMAL
- en: A special register that holds the memory address of the currently executing
    instruction.
  prefs: []
  type: TYPE_NORMAL
- en: program-counter relative (PC-relative) addressing
  prefs: []
  type: TYPE_NORMAL
- en: Memory addresses based on an offset from the current instruction.
  prefs: []
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: reduced instruction set computer (RISC)
  prefs: []
  type: TYPE_NORMAL
- en: Read as “reduced-instruction set computer” (not “reduced instruction-set computer”).
    In a RISC machine, the CPU designer creates instructions that do as little as
    possible in order to simplify the hardware needed to implement those instructions.
    In theory, this allows the designer to create faster CPUs at a lower cost (though
    the Intel x86 series demonstrates that non-RISC CPUs can have these attributes).
  prefs: []
  type: TYPE_NORMAL
- en: registers
  prefs: []
  type: TYPE_NORMAL
- en: Specialized memory components built directly into the CPU and accessible by
    most machine instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '### S'
  prefs: []
  type: TYPE_NORMAL
- en: single instruction, multiple data (SIMD)
  prefs: []
  type: TYPE_NORMAL
- en: A SIMD instruction operates on multiple pieces of data concurrently. For example,
    a SIMD add instruction may perform as many as 16 different addition operations
    in parallel. Though SIMD instructions are more difficult to use than single-instruction,
    single-data instructions (for example, typical ARM assembly instructions), they
    have the potential for executing application much faster.
  prefs: []
  type: TYPE_NORMAL
- en: stack pointer register (SP)
  prefs: []
  type: TYPE_NORMAL
- en: A special register that references a hardware stack in memory.
  prefs: []
  type: TYPE_NORMAL
- en: subnormal
  prefs: []
  type: TYPE_NORMAL
- en: '*See* denormalized numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: system bus
  prefs: []
  type: TYPE_NORMAL
- en: A collection of electronic signals comprising the address, data, and control
    buses.
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: token
  prefs: []
  type: TYPE_NORMAL
- en: A string of characters that has special meaning to a compiler. Examples include
    operators, reserved words, identifiers, literal constants, and other punctuation.
  prefs: []
  type: TYPE_NORMAL
- en: trampoline
  prefs: []
  type: TYPE_NORMAL
- en: '*See* veneer.'
  prefs: []
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: veneer
  prefs: []
  type: TYPE_NORMAL
- en: A special code sequence to extend the range of a control-transfer instruction
    beyond the normal displacement allowed by an instruction; also known as a *trampoline*.
  prefs: []
  type: TYPE_NORMAL
- en: volatile registers
  prefs: []
  type: TYPE_NORMAL
- en: Registers that don’t have to be preserved across a function call.
  prefs: []
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WZR
  prefs: []
  type: TYPE_NORMAL
- en: 32-bit zero register.
  prefs: []
  type: TYPE_NORMAL
- en: X
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XZR
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit zero register.
  prefs: []
  type: TYPE_NORMAL
