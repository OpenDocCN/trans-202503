- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Disclosed Vulnerabilities and Exploits
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 已披露的漏洞和漏洞利用
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter is dedicated to exploring real-world hacking reports. These previously
    discovered GraphQL vulnerabilities and exploits will reinforce some of this book’s
    lessons and hopefully inspire you to conduct your own security research.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门探讨实际的黑客报告。这些之前发现的GraphQL漏洞和漏洞利用将加深你对本书内容的理解，并希望能激发你进行自己的安全研究。
- en: 'Throughout the book, you’ve learned about many approaches to testing GraphQL
    APIs in a lab environment. But in real-world scenarios, you might run into vulnerabilities
    that are unique to the application against which you are performing a test. In
    this chapter, you will discover how specific some vulnerabilities can be. Whenever
    you learn a new technology, reviewing publicly available hacking reports has numerous
    advantages. This chapter will be useful because you’ll discover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，你学习了许多在实验室环境中测试GraphQL API的方法。但在实际场景中，你可能会遇到一些独特的漏洞，这些漏洞只出现在你测试的特定应用程序中。在本章中，你将发现一些漏洞可能非常具体。每当你学习一种新技术时，回顾公开可用的黑客报告有很多好处。本章将非常有用，因为你将发现以下内容：
- en: New hacking techniques from others in the community
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自社区其他成员的新黑客技术
- en: Other hackers’ approaches to the process of publicly disclosing vulnerabilities,
    including the technical depth of their reports as well as how to communicate with
    external companies, gauge a vulnerability’s severity, and demonstrate its practical
    business impact
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他黑客公开披露漏洞的方式，包括他们报告的技术深度，以及如何与外部公司沟通、评估漏洞的严重性，并展示其对业务的实际影响。
- en: Ways to identify the software weaknesses that companies care the most about
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别公司最关心的软件弱点的方法
- en: The design and implementation of real-life GraphQL applications, and the types
    of vulnerabilities that companies deal with on a regular basis in their production
    environments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现实世界中GraphQL应用的设计与实现，以及公司在生产环境中经常处理的漏洞类型
- en: Companies’ approaches to vulnerability mitigation, as finding a long-term mitigation
    strategy for a software security flaw is just as important as knowing how to break
    software
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司在漏洞缓解方面的做法，因为为软件安全缺陷找到一个长期的缓解策略和知道如何破解软件一样重要。
- en: As you’ll see, whenever you learn something new, there’s a good chance someone
    else has already done work that could give you a head start.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每当你学到新东西时，很可能有人已经做过相关工作，能为你提供一个良好的起点。
- en: Denial of Service
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拒绝服务（Denial of Service）
- en: In this section, we’ll review publicly disclosed reports that had DoS impacts
    on the APIs of numerous companies (some of which may even be familiar to you).
    Remember from Chapter 5 that DoS vulnerabilities are quite common in GraphQL because
    of the power of the query language. Let’s explore just how much of an impact these
    issues can have on a server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾公开披露的报告，这些报告对多个公司的API造成了DoS影响（其中一些公司可能你已经熟悉）。记住在第5章提到，GraphQL中的DoS漏洞非常常见，因为查询语言的强大功能。让我们来探讨这些问题对服务器的影响有多大。
- en: A Large Payload (HackerOne)
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大负载（HackerOne）
- en: HackerOne’s bug bounty platform uses GraphQL extensively in its production environment.
    In addition to hosting the bug bounty programs of other companies, it runs its
    own program, which hackers can use to disclose security issues identified in the
    platform.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne的漏洞悬赏平台在其生产环境中广泛使用GraphQL。除了托管其他公司的漏洞悬赏项目外，它还运行自己的项目，黑客可以用它来披露在平台上发现的安全问题。
- en: In May 2020, one hacker disclosed such a vulnerability ([https://hackerone.com/reports/887321](https://hackerone.com/reports/887321)).
    They identified that, despite the HackerOne documentation indicating the existence
    of a character limit on the API’s query inputs, this limit wasn’t enforced in
    practice.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年5月，一位黑客披露了这样的一个漏洞（[https://hackerone.com/reports/887321](https://hackerone.com/reports/887321)）。他们发现，尽管HackerOne文档中指出API查询输入有字符限制，但实际上并未执行该限制。
- en: 'To test the vulnerability, the hacker coded a Python-based exploit (included
    in the report) that does the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试该漏洞，黑客编写了一个基于Python的漏洞利用代码（已包含在报告中），其功能如下：
- en: Sets some necessary HTTP request information, such as cookies and authorization
    headers.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一些必要的HTTP请求信息，如cookies和授权头。
- en: Initializes an empty string variable, `a`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个空字符串变量，`a`。
- en: Performs a `for` loop 15,000 times and adds a character string to `a`, effectively
    creating a string of 15,000 characters.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`for`循环15,000次，并将字符字符串添加到`a`中，有效地创建了一个包含15,000个字符的字符串。
- en: Performs another `for` loop 50 times to send a mutation query that uses the
    `CreateStructuredScope` field. This field uses the constructed payload from the
    previous step 10 times, effectively providing a value to the field’s `instruction`
    argument containing 150,000 characters.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再执行一次`for`循环50次，发送一个使用`CreateStructuredScope`字段的突变查询。该字段使用上一步构造的负载10次，实际上为字段的`instruction`参数提供了一个包含150,000个字符的值。
- en: Outputs the amount of time it takes the server to return a response to a client
    query. This value is used as an indicator of the query’s possible performance
    impact on the server. The slower the response time, the more obvious it becomes
    that server performance degrades.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出服务器返回响应所需的时间。这一值用于指示查询可能对服务器性能的影响。响应时间越慢，服务器性能退化的迹象就越明显。
- en: 'The following is a snippet of the mutation used in the exploit. The large payload
    constructed by the exploit replaces the `$instruction` placeholder as part of
    the mutation:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是利用此漏洞时使用的突变片段。攻击者构建的大负载替换了突变中的`$instruction`占位符：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Sending this mutation to the server proved impactful. After the hacker sent
    a few of these requests, the GraphQL server started running into difficulties,
    returning the HTTP server errors *500 Internal Server Error*, *502 Bad Gateway*,
    and *504* *Gateway Timeout*, effectively causing a DoS. HTTP response codes at
    the 500 level are server-side errors that indicate something went wrong, either
    with the proxy or with the server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 向服务器发送此突变请求证明具有影响。黑客发送了几次此类请求后，GraphQL服务器开始遇到困难，返回HTTP服务器错误*500 Internal Server
    Error*、*502 Bad Gateway*和*504 Gateway Timeout*，有效地造成了DoS。500级别的HTTP响应代码表示服务器端错误，表明代理或服务器出现问题。
- en: Remember that DoS vulnerabilities don’t necessarily need to knock a server completely
    offline to be effective. They can also consume a lot of resources, causing a visible
    performance degradation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，DoS漏洞不一定需要完全使服务器离线才能有效。它们也可以消耗大量资源，导致显著的性能下降。
- en: HackerOne granted the hacker a bounty of $2,500 for responsibly disclosing this
    report.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne为黑客提供了2,500美元的奖励，感谢其负责任地披露了此报告。
- en: Regular Expressions (CS Money)
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式（CS Money）
- en: One form of DoS not covered in Chapter 5 uses regular expressions (regex). *Regular
    expression DoS (ReDoS)* exhausts a server by forcing it to process a malicious
    regex pattern whose evaluation consumes significant time and resources. These
    vulnerabilities aren’t API specific, although they can exist in all API technologies,
    including REST, SOAP, and GraphQL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第五章未覆盖的一种DoS形式使用正则表达式（regex）。*正则表达式DoS（ReDoS）*通过迫使服务器处理一个恶意的正则表达式模式来耗尽服务器资源，该模式的评估会消耗大量时间和资源。这些漏洞并非特定于API，尽管它们可以存在于所有API技术中，包括REST、SOAP和GraphQL。
- en: 'ReDoS vulnerabilities can happen in various ways:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ReDoS漏洞可以通过多种方式发生：
- en: The client provides a malicious regex pattern as input to the server.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端向服务器提供一个恶意的正则表达式模式作为输入。
- en: The server contains a regex logic pattern that could result in infinite evaluation
    when a matching input is provided, and a client provides such an input. If the
    input is abnormally large, ReDoS could occur.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器包含一个正则表达式逻辑模式，当提供匹配的输入时，可能导致无限评估，而客户端提供了这样的输入。如果输入异常庞大，可能会导致ReDoS。
- en: 'Here is an example of a regex pattern that could be vulnerable to ReDoS: `(a+)+`.
    This pattern can match against any string containing any number of the letter
    `a`, such as `aaaaaaaaaaaaaaaaaaaa`. If a client sent a large payload of 100,000
    `a` characters, the server might slow down while the pattern is being evaluated.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可能容易受到ReDoS攻击的正则表达式模式示例：`(a+)+`。该模式可以匹配包含任意数量字母`a`的任何字符串，例如`aaaaaaaaaaaaaaaaaaaa`。如果客户端发送一个包含100,000个`a`字符的大型负载，服务器在评估该模式时可能会变得缓慢。
- en: You can use online regex testing websites such as [https://regex101.com](https://regex101.com)
    to see how a particular expression behaves in practice, as shown in [Figure 10-1](#figure10-1).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用在线正则表达式测试网站，如[https://regex101.com](https://regex101.com)，来查看某个特定表达式在实践中的表现，如[图10-1](#figure10-1)所示。
- en: '![](image_fi/502840c10/f10001.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c10/f10001.png)'
- en: 'Figure 10-1: The online regular expression tester at [https://regex101.com](https://regex101.com)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1：在线正则表达式测试工具[https://regex101.com](https://regex101.com)
- en: 'In October 2020, an ethical hacker who goes by the handle of mvm reported a
    ReDoS vulnerability in a GraphQL API to CS Money’s bug bounty program ([https://hackerone.com/reports/1000567](https://hackerone.com/reports/1000567)).
    The hacker found that the GraphQL `search` object takes a `q` (query) argument.
    In their testing, they inserted a Unicode null value (`\u0000`) as its value:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 2020 年 10 月，一位名为 mvm 的道德黑客向 CS Money 的漏洞赏金计划报告了一个 GraphQL API 的 ReDoS 漏洞（[https://hackerone.com/reports/1000567](https://hackerone.com/reports/1000567)）。该黑客发现，GraphQL
    的 `search` 对象接受一个 `q`（查询）参数。在他们的测试中，他们将一个 Unicode 空值（`\u0000`）作为参数值插入：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In response to this query, the GraphQL API server returned an interesting error
    that revealed some information critical to identifying the existence of the ReDoS
    vulnerability:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个查询的响应中，GraphQL API 服务器返回了一个有趣的错误，揭示了识别 ReDoS 漏洞存在的一些关键信息：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the string supplied through the `q` argument was inserted into
    regex-matching logic on the server, indicated by the preceding `(?=.*` string
    in the response. The server might use this argument to search for relevant data
    in a database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`q` 参数中提供的字符串被插入到服务器上的正则匹配逻辑中，响应中以 `(?=.*` 字符串为前缀。服务器可能使用此参数在数据库中搜索相关数据。
- en: 'Conveniently, the server had query tracing enabled through its extensions.
    *Query tracing* allows GraphQL servers to return response metadata useful for
    debugging and provides information about the query’s performance. The tracing
    information in the response disclosed three informative fields to the client (`startTime`,
    `endTime`, and `duration`), revealing the amount of time it took the server to
    process the query:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，服务器通过其扩展启用了查询追踪。*查询追踪* 允许 GraphQL 服务器返回有助于调试的响应元数据，并提供有关查询性能的信息。响应中的追踪信息向客户端披露了三个重要字段（`startTime`、`endTime`
    和 `duration`），揭示了服务器处理查询所需的时间：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These fields also go to show how sometimes innocent-looking information can
    assist us during a penetration test. Always look at the details.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段还表明，有时候看似无害的信息也能在渗透测试中帮助我们。时刻留意细节。
- en: 'After identifying the potential vulnerability, the hacker then used a malicious
    regex pattern and set it as the value of the `q` argument:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在识别潜在漏洞后，黑客使用了一个恶意的正则表达式模式，并将其设置为 `q` 参数的值：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This pattern will match against any character in the ranges `a` to `z`, `A`
    to -`Z`, and `0` to `9`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式将匹配从 `a` 到 `z`、`A` 到 `Z` 以及 `0` 到 `9` 范围内的任何字符。
- en: The most important takeaway here is that this pattern would most likely match
    against many strings in the application’s backend database, causing the server
    to process (and possibly return) a lot of data. In their report, the hacker shared
    a proof-of-concept cURL command that uses the GraphQL query. They showed that,
    by running it 100 times, they were able to completely take down the GraphQL server.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最重要的启示是，这种模式很可能会与应用程序后端数据库中的多个字符串匹配，从而导致服务器处理（并可能返回）大量数据。在他们的报告中，黑客分享了一个使用
    GraphQL 查询的概念验证 cURL 命令。他们展示了，通过执行该命令 100 次，完全使 GraphQL 服务器瘫痪。
- en: As you can see, malicious payloads can take down servers. We highly discourage
    sending malicious payloads to a company’s production APIs without an explicit
    authorization from the company, as they can negatively impact business if the
    company isn’t equipped to handle malicious payloads.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，恶意载荷可以使服务器瘫痪。我们强烈反对在没有公司明确授权的情况下向公司的生产 API 发送恶意载荷，因为如果公司未准备好处理恶意载荷，这可能会对业务产生负面影响。
- en: The company granted a bounty of $250 for this report.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 公司为此报告提供了 250 美元的赏金。
- en: A Circular Introspection Query (GitLab)
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环内省查询（GitLab）
- en: The following vulnerability was reported to GitLab in July 2019 ([https://gitlab.com/gitlab-org/gitlab/-/issues/30096](https://gitlab.com/gitlab-org/gitlab/-/issues/30096)).
    This vulnerability abuses the circular relationship between the `type` and `field`
    fields in GraphQL’s introspection query.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下漏洞在 2019 年 7 月被报告给 GitLab（[https://gitlab.com/gitlab-org/gitlab/-/issues/30096](https://gitlab.com/gitlab-org/gitlab/-/issues/30096)）。该漏洞利用了
    GraphQL 内省查询中 `type` 和 `field` 字段之间的循环关系。
- en: 'The reporter, who goes by the handle freddd, identified that it was possible
    to trigger a DoS condition by using the `__schema` meta-field to call `types`,
    followed by a recursive call to `fields` and `type`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 报告者 freddd 发现，通过使用 `__schema` 元字段调用 `types`，然后递归调用 `fields` 和 `type`，可以触发 DoS
    条件：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This query relies on introspection being enabled on the API. When introspection
    is disabled, it’s typically not possible to call the `__schema` meta-field directly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询依赖于 API 上启用了自省功能。当自省被禁用时，通常无法直接调用`__schema`元字段。
- en: Although GitLab had implemented query complexity checks to mitigate circular
    query-based DoS attacks, the control didn’t apply to the introspection query,
    effectively leaving it unintentionally vulnerable.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 GitLab 已实施查询复杂度检查，以缓解基于循环查询的 DoS 攻击，但该控制未应用于自省查询，导致其无意中暴露出漏洞。
- en: Exploiting this vulnerability also didn’t require the hacker to be authenticated
    to the GraphQL API. The absence of authentication makes it more severe, as it
    lowers the barrier to entry when it comes to who can exploit it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个漏洞也不需要黑客在 GraphQL API 上进行身份验证。缺乏身份验证使得这个漏洞更加严重，因为它降低了可以利用该漏洞的门槛。
- en: Aliases for Field Duplication (Magento)
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字段重复的别名（Magento）
- en: Magento, one of the most popular ecommerce platforms on the internet, uses GraphQL,
    and in April 2021, the platform was impacted by a DoS vulnerability. Using field
    duplication, an attacker could exhaust server resources without being authenticated.
    (Magento allows unauthenticated clients to use certain GraphQL objects and requires
    a valid, authenticated session for others.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 是互联网上最流行的电子商务平台之一，使用 GraphQL，并且在 2021 年 4 月，平台受到了一次 DoS 漏洞的影响。利用字段重复，攻击者可以在未进行身份验证的情况下消耗服务器资源。（Magento
    允许未认证的客户端使用某些 GraphQL 对象，而对于其他对象则需要有效的身份验证会话。）
- en: 'We, the authors of this book, identified that Magento did not protect itself
    against malicious queries that repeated fields many times. We used the following
    query as a proof of concept:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们，这本书的作者，发现 Magento 没有保护自己免受重复字段恶意查询的影响。我们使用以下查询作为概念验证：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This query used GraphQL aliases as a way to batch repeat queries in a single
    HTTP request, a technique that allowed the attacker to send the server very complex
    queries. It effectively exhausted the server’s resources because of the absence
    of security controls, such as query cost limits.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询使用了 GraphQL 别名来将重复查询批量处理为单个 HTTP 请求，这种技术允许攻击者向服务器发送非常复杂的查询。由于缺乏查询成本限制等安全控制，它有效地消耗了服务器的资源。
- en: Magento has since introduced many GraphQL security features into its platform,
    such as GraphQL query complexity limits and query depth analysis. [Figure 10-2](#figure10-2)
    shows the default values for the security controls Magento implemented in its
    API.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，Magento 在其平台中引入了许多 GraphQL 安全功能，如 GraphQL 查询复杂度限制和查询深度分析。[图 10-2](#figure10-2)
    显示了 Magento 在其 API 中实现的安全控制的默认值。
- en: '![](image_fi/502840c10/f10002.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c10/f10002.png)'
- en: 'Figure 10-2: Magento’s default values for query complexity and query depth
    controls'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2：Magento 的查询复杂度和查询深度控制的默认值
- en: As you can see, Magento has implemented a `queryComplexity` value of `300` and
    a `queryDepth` value of `20`, which means that a query cannot exceed a complexity
    level beyond 300, and a circular query cannot exceed 20 levels of nesting.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Magento 已实现 `queryComplexity` 值为 `300` 和 `queryDepth` 值为 `20`，这意味着查询的复杂度不能超过
    300，而循环查询的嵌套层数不能超过 20 层。
- en: Array-Based Batching for Field Duplication (WPGraphQL)
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于数组的字段重复批处理（WPGraphQL）
- en: This vulnerability is quite similar to the previous field duplication vulnerability
    we discussed. In April 2021, WPGraphQL, a GraphQL plug-in for WordPress ([https://www.wpgraphql.com](https://www.wpgraphql.com)),
    suffered a DoS vulnerability due to a lack of proper security controls and an
    insecure default configuration.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞与我们之前讨论的字段重复漏洞非常相似。2021 年 4 月，WPGraphQL（一个用于 WordPress 的 GraphQL 插件，网址：[https://www.wpgraphql.com](https://www.wpgraphql.com)）因缺乏适当的安全控制和不安全的默认配置而遭遇
    DoS 漏洞。
- en: The WPGraphQL plug-in provides a production-ready GraphQL API for any WordPress
    content management system and is available through the WordPress plug-in marketplace.
    [Figure 10-3](#figure10-3) shows this plug-in.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: WPGraphQL 插件为任何 WordPress 内容管理系统提供了一个生产就绪的 GraphQL API，并通过 WordPress 插件市场提供。[图
    10-3](#figure10-3) 展示了这个插件。
- en: By default, WPGraphQL effectively made any WordPress instance with the plug-in
    vulnerable to DoS. First, it allowed clients to use array-based batching to batch
    multiple queries in a single request. In addition, the plug-in had limited security
    controls in place to protect against malicious queries. Third, because WordPress
    is a blogging platform that often serves unauthenticated clients (for example,
    blog readers), certain sections of the API’s functionalities were accessible without
    special permissions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WPGraphQL 使得任何安装了该插件的 WordPress 实例都容易受到 DoS 攻击。首先，它允许客户端使用基于数组的批处理，将多个查询合并到一个请求中。此外，该插件在防止恶意查询方面的安全控制非常有限。第三，由于
    WordPress 是一个博客平台，通常会为未经认证的客户端（例如博客读者）提供服务，因此 API 的某些功能可以在没有特殊权限的情况下访问。
- en: '![](image_fi/502840c10/f10003.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c10/f10003.png)'
- en: 'Figure 10-3: The WPGraphQL plug-in for WordPress'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3：WordPress 的 WPGraphQL 插件
- en: 'We found this vulnerability ourselves and published the following exploit code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己发现了这个漏洞，并发布了以下的利用代码：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This code sets two variables that essentially define the complexity of a single
    HTTP request: `FORCE_MULTIPLIER` is an integer variable that duplicates a selection
    set of fields, and `CHAINED_REQUESTS` holds the number of elements the exploit
    will add into the batched array.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码设置了两个变量，基本上定义了单个HTTP请求的复杂度：`FORCE_MULTIPLIER` 是一个整数变量，它会重复选择集中的字段，而 `CHAINED_REQUESTS`
    则表示该漏洞将向批处理数组中添加的元素数量。
- en: Next, a `queries` variable is set to an empty array. This variable will hold
    the full malicious payload that will eventually be sent to WPGraphQL. The code
    then creates a special query that will be duplicated by the integer value assigned
    to the `FORCE_MULTIPLIER` variable and crafts this into a query JSON object for
    the HTTP request. Next, a loop runs *N* number of times, where *N* is the value
    of `CHAINED_REQUESTS`. If `CHAINED_REQUESTS` is set to `100`, the loop will run
    100 times and create an array containing 100 elements. Lastly, the exploit sends
    the HTTP request and calculates how long it takes the server to respond to the
    expensive query.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`queries` 变量被设置为一个空数组。这个变量将保存最终发送给 WPGraphQL 的完整恶意载荷。代码随后创建了一个特殊查询，该查询将被
    `FORCE_MULTIPLIER` 变量分配的整数值重复，并将其构造成一个用于 HTTP 请求的查询 JSON 对象。接下来，一个循环执行 *N* 次，其中
    *N* 是 `CHAINED_REQUESTS` 的值。如果 `CHAINED_REQUESTS` 设置为 100，循环将执行 100 次，并创建一个包含
    100 个元素的数组。最后，漏洞会发送 HTTP 请求并计算服务器处理这个昂贵查询所需的时间。
- en: In short, if both `FORCE_MULTIPLIER` and `CHAINED_REQUESTS` are set to `100`,
    the final array will include 100 queries that each contain 100 duplicated fields.
    Imagine how expensive such a query might be to process if these two variables
    were set to 10,000.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果 `FORCE_MULTIPLIER` 和 `CHAINED_REQUESTS` 都设置为 `100`，最终的数组将包含 100 个查询，每个查询都包含
    100 个重复的字段。如果这两个变量设置为 10,000，想象一下处理这样一个查询会有多么昂贵。
- en: Circular Fragments (Agoo)
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环片段（Agoo）
- en: We discovered a circular fragment vulnerability in May 2022 in a Ruby-based
    GraphQL server implementation named *Agoo*. Identified by CVE-2022-30288, the
    vulnerability stems from the absence of validations checks on incoming queries
    at the Agoo server level. This failure to validate means the server isn’t spec
    compliant. It also means that queries sent to an Agoo server can take it down
    in several ways. Let’s explore how we were able to do this with circular fragments.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 2022 年 5 月发现了一个 Ruby 基于 GraphQL 的服务器实现 *Agoo* 中的循环片段漏洞。该漏洞被标识为 CVE-2022-30288，问题出在
    Agoo 服务器层面没有对传入查询进行验证检查。缺乏验证意味着该服务器不符合规范，也意味着发送到 Agoo 服务器的查询可能通过多种方式将其摧毁。让我们看看如何利用循环片段来做到这一点。
- en: 'As a first step, we wanted to check whether introspection was enabled by default,
    so we ran the following query:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们想检查是否默认启用了 introspection（自省），所以我们执行了以下查询：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This query is simple; it returns the name of all the directives in the schema.
    This is a pretty good query to use when you don’t yet know what operations the
    GraphQL server supports.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询很简单；它返回架构中所有指令的名称。当你还不清楚GraphQL服务器支持哪些操作时，这是一个非常好的查询。
- en: 'Next, we built a circular query using fragments that reference the query:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用引用查询的片段构建了一个循环查询：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We created two fragments on the `__Schema` type. The first fragment `A` uses
    the `directives` top-level field with the `name` field. It then calls (or imports)
    fragment `B` at ❷. Fragment `B` contains `...A` at ❸, which calls fragment `A`
    again. At this point, we have two circular fragments. Now, to get them executed,
    we need to use either of them inside a query. At ❶, you can see how we use fragment
    `A` by calling `...A` inside the `__schema` meta-field.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`__Schema`类型上创建了两个片段。第一个片段`A`使用了`directives`顶层字段，并带有`name`字段。然后，在❷处调用（或导入）片段`B`。片段`B`在❸处包含`...A`，这再次调用片段`A`。此时，我们得到了两个循环片段。现在，为了执行它们，我们需要在查询中使用其中一个。在❶处，你可以看到我们如何通过在`__schema`元字段中调用`...A`来使用片段`A`。
- en: At this point, the cyclical condition starts, and never ends! Running this query
    against Agoo will freeze the server, and it will no longer be able to serve queries.
    The only way to recover it is by restarting Agoo’s server process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，循环条件开始，且永无止境！对Agoo运行此查询将导致服务器冻结，并且将无法继续处理查询。唯一的恢复方法是重新启动Agoo的服务器进程。
- en: Some of these DoS vulnerabilities were found in big-name products that have
    been using GraphQL for quite some time, proving that no one is immune to vulnerabilities.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些拒绝服务（DoS）漏洞出现在一些大品牌的产品中，这些产品已经使用GraphQL一段时间，证明没有人能够免疫漏洞。
- en: Broken Authorization
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权破坏
- en: In this section, we’ll explore vulnerabilities that impacted authorization controls
    in GraphQL APIs. These types of issues can eventually lead to data disclosure
    and allow unauthorized access to sensitive information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨影响GraphQL API授权控制的漏洞。这类问题最终可能导致数据泄露，并允许未经授权访问敏感信息。
- en: Allowing Data Access to Deactivated Users (GitLab)
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许已停用用户访问数据（GitLab）
- en: In a publicly disclosed vulnerability reported to GitLab in August 2021, a hacker
    who goes by the handle Joaxcar was able to access data by using a deactivated
    user account to authenticate to the GraphQL API and perform actions that shouldn’t
    have been allowed ([https://hackerone.com/reports/1192460](https://hackerone.com/reports/1192460)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在2021年8月向GitLab报告的一个公开漏洞中，一名黑客（化名Joaxcar）利用已停用的用户账户，通过身份验证GraphQL API，执行了不该被允许的操作
    ([https://hackerone.com/reports/1192460](https://hackerone.com/reports/1192460))。
- en: Deactivated user accounts should have their access denied until they are reactivated
    by the application’s maintainer. While the user is deactivated, the application
    should reject the user’s access attempts, whether directly through the console
    or through API keys, even if they have active API keys.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 已停用的用户账户应在重新激活之前被拒绝访问。即使用户有有效的API密钥，只要用户被停用，应用程序也应拒绝其访问尝试，无论是通过控制台直接访问还是通过API密钥。
- en: To understand the risk this poses, imagine that an employee goes on vacation
    and that the security team’s policy is to disable all employee accounts until
    they return to the office. Now imagine that the employee’s password was leaked
    to the internet, and a threat actor is in possession of these credentials. In
    the vulnerability scenario we’re describing here, the threat actor would be able
    to call the application even though the user’s account is disabled. This shouldn’t
    happen with proper authentication and authorization controls.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一风险，假设某个员工去度假，而安全团队的政策是在员工返回办公室之前禁用所有员工账户。现在，假设该员工的密码泄露到互联网上，且有威胁行为者获得了这些凭据。在我们描述的漏洞场景中，威胁行为者将能够调用应用程序，即使该用户的账户已经停用。若有适当的身份验证和授权控制，情况本不应发生。
- en: 'Here is what Joaxcar did to exploit the vulnerability:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Joaxcar用来利用此漏洞的操作：
- en: As an administrator, created a secondary user with an API key
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为管理员，创建了一个带API密钥的次级用户
- en: Still as an administrator, disabled the newly created user
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然以管理员身份，停用了新创建的用户
- en: Used the deactivated user’s API key to call the GraphQL API
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用停用用户的API密钥调用了GraphQL API
- en: Confirmed that they were successfully able to perform actions with the deactivated
    user credentials
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认他们成功使用停用的用户凭证执行了操作
- en: 'They used the following GraphQL query as part of the test:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在测试中使用了以下GraphQL查询：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The query uses the `labelCreate` object with an input type argument that accepts
    a `title` and a `projectPath`. In other words, the vulnerability allowed the ethical
    hacker to use a deactivated account to create a label field. It’s quite possible
    that the vulnerability would have allowed other actions too, other than label
    creation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询使用了`labelCreate`对象，并带有一个输入类型参数，该参数接受`title`和`projectPath`。换句话说，这个漏洞允许道德黑客利用一个已停用的账户创建标签字段。很可能，这个漏洞还允许进行其他操作，而不仅仅是创建标签。
- en: Allowing an Unprivileged Staff Member to Modify a Customer’s Email (Shopify)
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许没有特权的员工修改客户电子邮件（Shopify）
- en: The following vulnerability was reported to the Shopify bug bounty program by
    user ash_nz in September 2021 ([https://hackerone.com/reports/980511](https://hackerone.com/reports/980511)).
    An e-commerce company, Shopify has been a trailblazer in the GraphQL space for
    many years, developing useful open source tools, publishing articles about GraphQL
    best practices, and more.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下漏洞是用户ash_nz在2021年9月报告给Shopify漏洞赏金计划的（[https://hackerone.com/reports/980511](https://hackerone.com/reports/980511)）。Shopify是一家电子商务公司，长期以来在GraphQL领域一直处于领先地位，开发了许多有用的开源工具，发布了关于GraphQL最佳实践的文章等。
- en: 'The vulnerability allowed ash_nz to modify a customer email by using an unprivileged
    shop staff account, which could update email objects through a dedicated GraphQL
    API mutation. Here is the mutation as seen in the report:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该漏洞允许ash_nz通过一个没有特权的店铺员工账户修改客户的电子邮件，进而通过专用的GraphQL API突变更新电子邮件对象。以下是报告中看到的突变：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The hacker passed a customer’s email to the mutation’s `input` parameter and
    sent it to the GraphQL API server, which updated the customer’s email, despite
    the API caller not having the right privileges to do so.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该黑客将客户的电子邮件传递给突变的`input`参数，并将其发送到GraphQL API服务器，尽管API调用者没有适当的权限，但服务器仍更新了客户的电子邮件。
- en: This is a fairly simple vulnerability, but identifying it does require testing
    multiple hypotheses and edge cases. Always evaluate APIs using various privilege
    levels and attempt cross-account or cross-user access to uncover authorization
    issues.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的漏洞，但识别它确实需要测试多个假设和边缘情况。始终在不同的权限级别下评估API，并尝试进行跨账户或跨用户访问，以发现授权问题。
- en: The hacker received a bounty of $1,500 from Shopify for responsibly disclosing
    this issue.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这位黑客通过负责任地披露这个问题，从Shopify获得了$1,500的赏金。
- en: Disclosing the Number of Allowed Hackers Through a Team Object (HackerOne)
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过团队对象泄露允许黑客数量（HackerOne）
- en: In April 2018, an ethical hacker with the handle haxta4ok00 identified a GraphQL
    authorization issue in HackerOne that led to an information disclosure vulnerability
    ([https://hackerone.com/reports/342978](https://hackerone.com/reports/342978)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年4月，一名名为haxta4ok00的道德黑客在HackerOne平台上发现了一个GraphQL授权问题，该问题导致了信息泄露漏洞（[https://hackerone.com/reports/342978](https://hackerone.com/reports/342978)）。
- en: The hacker identified that, by making a query that uses the `team` object in
    HackerOne’s GraphQL API, they could access a restricted field that they otherwise
    shouldn’t have been able to access. The `team` object allowed querying for programs
    on the HackerOne platform and returning information such as their `id` and `name`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该黑客发现，通过使用HackerOne的GraphQL API中的`team`对象进行查询，他们可以访问一个本不应访问的受限字段。`team`对象允许查询HackerOne平台上的项目，并返回诸如`id`和`name`等信息。
- en: 'The hacker also identified that when the `whitelisted_hackers` field is specified,
    it returns the `total_count` of the program’s number of allowed hackers. Since
    the team object takes an argument of `handle`, it practically allows searching
    for programs based on their `handle` string. In the following example, the handle
    is `security`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客还发现，当指定`whitelisted_hackers`字段时，它会返回项目允许的黑客总数（`total_count`）。由于团队对象接受`handle`参数，它实际上允许根据`handle`字符串搜索项目。以下示例中，`handle`为`security`：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The HackerOne triage team was able to determine that this vulnerability could
    have also allowed someone to identify other non-public programs on the platform
    by supplying various strings to the `handle` argument that might match a team’s
    handle. The response to the query is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne的审核团队确定，这个漏洞还可能让某人通过向`handle`参数提供不同的字符串来识别平台上其他非公开的项目。这些字符串可能与团队的`handle`匹配。查询的响应如下：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the disclosed information isn’t very sensitive in nature, but
    it can be used to infer whether the program is private and, therefore, find HackerOne’s
    customers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，泄露的信息性质并不十分敏感，但它可以用来推测程序是否为私密的，因此可以找到 HackerOne 的客户。
- en: HackerOne paid a bounty of $2,500 for this authorization issue because of the
    information disclosure impact.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne 因该授权问题支付了 2500 美元的悬赏，因为它带来了信息泄露的影响。
- en: Reading Private Notes (GitLab)
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读私人笔记（GitLab）
- en: Issues created on GitLab may include private notes that only members should
    be able to view. In June 2019, an ethical hacker with the handle ngalog reported
    CVE-2019-15576 through a HackerOne report ([https://hackerone.com/reports/633001](https://hackerone.com/reports/633001)),
    which showed that hackers can read these notes through GitLab’s GraphQL API despite
    them being properly restricted in the REST API.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab 上创建的议题可能包含仅限成员查看的私人笔记。2019年6月，一位名为ngalog的道德黑客通过HackerOne报告了CVE-2019-15576（[https://hackerone.com/reports/633001](https://hackerone.com/reports/633001)），该报告显示，黑客可以通过
    GitLab 的 GraphQL API 读取这些笔记，尽管在 REST API 中已正确限制了访问权限。
- en: 'Notes can be sensitive, as they may contain information about duplicate issues,
    issues moved to another project, or even project code. The ethical hacker used
    the following query to exploit the vulnerability:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记可能包含敏感信息，例如关于重复问题、已移至其他项目的问题，甚至是项目代码。道德黑客使用以下查询来利用该漏洞：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, the `issue` object is being used in conjunction with the `notes`
    field. This `notes` field allows access to other fields, such as the note’s `body`,
    the note’s `author`, and more. The screenshot in [Figure 10-4](#figure10-4), taken
    from GitLab GraphQL API documentation, shows the complete list of available fields.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`issue`对象与`notes`字段一起使用。这个`notes`字段允许访问其他字段，例如笔记的`body`、笔记的`author`等。下图[图10-4](#figure10-4)来自
    GitLab GraphQL API 文档，显示了可用字段的完整列表。
- en: '![](image_fi/502840c10/f10004.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c10/f10004.png)'
- en: 'Figure 10-4: GitLab’s documentation for the note fields'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-4：GitLab 关于笔记字段的文档
- en: The full GitLab GraphQL API documentation can be found at [https://docs.gitlab.com/ee/api/graphql/reference](https://docs.gitlab.com/ee/api/graphql/reference).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab GraphQL API 的完整文档可以在[https://docs.gitlab.com/ee/api/graphql/reference](https://docs.gitlab.com/ee/api/graphql/reference)找到。
- en: Disclosing Payment Transaction Information (HackerOne)
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 披露支付交易信息（HackerOne）
- en: The following vulnerability, reported to HackerOne in October 2019, impacted
    its own GraphQL API ([https://hackerone.com/reports/707433](https://hackerone.com/reports/707433)).
    It allowed msdian7, the hacker who found and disclosed the issue, to access the
    total number of payment transactions—information meant to be confidential and
    accessible by only authorized parties.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下漏洞是在2019年10月报告给HackerOne的，影响了其自身的 GraphQL API（[https://hackerone.com/reports/707433](https://hackerone.com/reports/707433)）。该漏洞允许黑客
    msdian7 访问支付交易的总数量——这一信息原本应为机密，仅授权方可访问。
- en: 'The GraphQL query used can be seen here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的 GraphQL 查询如下所示：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Payment data should never be public information. This vulnerability allowed
    access to the `total_count` field through the `payment_transactions` field by
    using an unauthorized session, effectively providing insight into the transactions
    made by other bug bounty programs on the HackerOne platform.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 支付数据不应成为公开信息。这个漏洞通过使用未经授权的会话访问`payment_transactions`字段中的`total_count`字段，从而有效地提供了对
    HackerOne 平台上其他漏洞悬赏程序交易的洞察。
- en: Information Disclosure
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息泄露
- en: In this section, we will review publicly disclosed vulnerabilities that led
    exclusively to information disclosure issues. Some of the issues we covered earlier
    in this chapter also resulted in information disclosure outcomes, though these
    stemmed from other vulnerabilities such as broken access control mechanisms.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾公开披露的漏洞，这些漏洞仅导致了信息泄露问题。在本章之前讨论的一些问题也导致了信息泄露，但这些问题源于其他漏洞，例如访问控制机制破坏。
- en: Enumerating GraphQL Users (GitLab)
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举 GraphQL 用户（GitLab）
- en: In 2021, Rapid7 identified CVE-2021-4191 in GitLab’s Community Edition and Enterprise
    Edition. The vulnerability allowed unauthenticated attackers to access user information
    in private GitLab instances that had specifically restricted their user registration
    interfaces through the `users` field.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年，Rapid7 在 GitLab 的社区版和企业版中发现了CVE-2021-4191漏洞。该漏洞允许未经身份验证的攻击者访问在私有 GitLab
    实例中，已特定限制其用户注册界面的用户信息。
- en: 'For example, the following query returns information about users in GitLab
    instances, such as their name, username, and ID:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下查询返回有关 GitLab 实例中用户的信息，例如他们的姓名、用户名和 ID：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In addition to a user’s name and username, the vulnerability affected fields
    such as their email, location, user permissions, group memberships, state, and
    profile picture. Having access to so much information about users is useful for
    several reasons:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户的姓名和用户名外，该漏洞还影响了诸如电子邮件、位置、用户权限、组成员身份、账户状态和头像等字段。获取这些关于用户的丰富信息有多个用途：
- en: '**Identifying accounts to attack.** Knowledge of usernames and emails allowed
    threat actors to target specific accounts. Having access to user emails also allowed
    threat actors to pivot to other attacks, such as social engineering, by sending
    phishing emails to users.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别待攻击账户。** 知道用户名和电子邮件地址让攻击者能够有针对性地攻击特定账户。获取用户电子邮件还使得攻击者能够转向其他攻击方式，如社交工程，通过向用户发送钓鱼邮件进行攻击。'
- en: '**Identifying available groups.** The vulnerability allowed attackers to infer
    information about the company running GitLab through their group memberships.
    Group memberships can reveal information such as acquisitions, subsidiaries, other
    company branches, regions where the company operates, and so on.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别可用的组。** 该漏洞允许攻击者通过用户的组成员身份推断出运行 GitLab 的公司信息。组成员身份可以揭示出诸如收购、子公司、其他公司分支、公司运营的地区等信息。'
- en: '**Identifying individuals.** The vulnerability allowed access to profile pictures,
    which could help threat actors target specific users on platforms outside of GitLab.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别个人身份。** 该漏洞允许访问用户的头像，这可能帮助攻击者在 GitLab 以外的平台上针对特定用户。'
- en: '**Identifying state of accounts.** Knowing the state of an account (whether
    it’s disabled or enabled) could make attacks such as brute forcing more effective;
    threat actors could target only accounts that are in an enabled state, allowing
    them to optimize their attacks.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别账户状态。** 了解账户的状态（是禁用还是启用）可以使得暴力破解等攻击更加有效；攻击者可以仅针对处于启用状态的账户，从而优化攻击效果。'
- en: This vulnerability is especially interesting because of how simple and straightforward
    it is to exploit. The fact that it can be done in an unauthenticated manner increases
    its severity quite a lot too.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞特别有趣，因为它的利用方式非常简单直接。其能够在未认证的情况下执行，也大大增加了其严重性。
- en: Accessing the Introspection Query via WebSocket (Nuri)
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 WebSocket 访问 Introspection 查询（Nuri）
- en: This report is an interesting one and quite unique. In April 2020, an ethical
    hacker who goes by the handle zerodivisi0n disclosed a vulnerability in Nuri’s
    API that caused schema information to leak through an introspection query ([https://hackerone.com/reports/862835](https://hackerone.com/reports/862835)).
    This GraphQL API used WebSocket as its transport protocol, not HTTP.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这份报告非常有趣且独特。在 2020 年 4 月，一位名为 zerodivisi0n 的道德黑客披露了 Nuri 的 API 中的一个漏洞，该漏洞导致通过
    introspection 查询泄露了模式信息（[https://hackerone.com/reports/862835](https://hackerone.com/reports/862835)）。这个
    GraphQL API 使用 WebSocket 作为传输协议，而非 HTTP。
- en: In earlier chapters, you learned about GraphQL and WebSocket in the context
    of subscription operations; clients can subscribe to certain events of interest
    to get real-time information over the WebSocket protocol. Certain GraphQL libraries,
    such as *graphql-ws* ([https://github.com/enisdenjo/graphql-ws](https://github.com/enisdenjo/graphql-ws)),
    allow not only subscriptions to be sent over WebSocket but also queries and mutations.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，你学习了在订阅操作的上下文中，GraphQL 和 WebSocket 的使用；客户端可以订阅感兴趣的特定事件，通过 WebSocket
    协议获取实时信息。一些 GraphQL 库，例如 *graphql-ws*（[https://github.com/enisdenjo/graphql-ws](https://github.com/enisdenjo/graphql-ws)），不仅支持通过
    WebSocket 发送订阅请求，还支持查询和变更操作。
- en: The reported vulnerability enabled hackers to execute the introspection query
    directly via a WebSocket connection. While the report doesn’t include a whole
    lot of details about how the GraphQL implementation was designed to work, introspection
    was disabled on interfaces that aren’t WebSocket based, such as in query operations
    sent over HTTP.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 报告的漏洞使得黑客能够通过 WebSocket 连接直接执行 introspection 查询。虽然报告没有详细说明 GraphQL 实现的设计细节，但在非
    WebSocket 接口（例如通过 HTTP 发送的查询操作）上，introspection 被禁用。
- en: 'An introspection query over a WebSocket client-to-server message could look
    like the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 WebSocket 客户端与服务器之间的消息进行 introspection 查询，可能类似于以下内容：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Query and mutation operations sent over WebSocket aren’t currently very common.
    You’re more likely to see GraphQL subscription operations transported over WebSocket,
    but this could change over time as GraphQL trends evolve.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过WebSocket发送的查询和变更操作目前并不常见。你更可能看到通过WebSocket传输的GraphQL订阅操作，但随着GraphQL趋势的演变，未来这种情况可能会有所变化。
- en: Injection
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注入
- en: The following publicly disclosed GraphQL vulnerabilities resulted in application
    injection flaws. Chapter 8 covers injections and how impactful they can be if
    exploited.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下公开披露的GraphQL漏洞导致了应用程序注入缺陷。第8章讲解了注入以及如果被利用它们会有多严重。
- en: SQL Injection in a GET Query Parameter (HackerOne)
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GET查询参数中的SQL注入（HackerOne）
- en: 'In November 2018, Jobert identified a SQL injection in HackerOne’s GraphQL
    production endpoint ([https://hackerone.com/reports/435066](https://hackerone.com/reports/435066)).
    Jobert had identified a nonstandard parameter passed to HackerOne’s GraphQL */graphql*
    endpoint, *embedded_submission_form_uuid*, that looked like the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在2018年11月，Jobert发现了HackerOne的GraphQL生产端点中的SQL注入漏洞（[https://hackerone.com/reports/435066](https://hackerone.com/reports/435066)）。Jobert发现传递给HackerOne
    GraphQL */graphql*端点的一个非标准参数，*embedded_submission_form_uuid*，其内容如下所示：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This URL parameter isn’t standard in GraphQL APIs, where you are more likely
    to see parameters such as the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个URL参数在GraphQL API中并不常见，你更可能看到如下所示的参数：
- en: '`query`'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`query`'
- en: '`variables`'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`variables`'
- en: '`operationName`'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`operationName`'
- en: 'You should already be familiar with these: `query` takes the full GraphQL query
    as its value, `variables` takes additional data passed to the query (variables
    such as argument values), and `operationName` is the name of the operation. Jobert
    was able to identify that the value passed to the custom parameter wasn’t checked
    on the backend, effectively allowing them to inject SQL commands.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉这些内容：`query`的值是完整的GraphQL查询，`variables`是传递给查询的附加数据（如参数值），而`operationName`是操作的名称。Jobert能够识别出传递给自定义参数的值在后台未进行检查，从而有效地允许他们注入SQL命令。
- en: 'The HackerOne triage team shared the Ruby code responsible for processing the
    GraphQL parameters, and we’ve modified it here to make the problem more apparent:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne的分诊团队共享了负责处理GraphQL参数的Ruby代码，我们在这里修改了代码，以便更清晰地展示问题：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `new_parameters` variable ❶ is a hash map containing the custom `embedded_submission_form_uuid`
    URL parameter and its value (which is client controlled). At ❷, a loop performs
    string interpolation on the keys and values assigned to the variable, effectively
    composing a string with the parameter and its value together. It combines this
    string with the `SET` `SESSION` SQL command.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`new_parameters`变量❶是一个哈希映射，包含自定义的`embedded_submission_form_uuid` URL参数及其值（该值由客户端控制）。在❷处，循环对分配给变量的键和值进行字符串插值，有效地将参数及其值组合成一个字符串。然后，它将这个字符串与`SET`
    `SESSION` SQL命令结合在一起。'
- en: 'The new SQL command is eventually assigned to the `safe_query` variable, which,
    at this point, the attacker controls without any checks. We’ve used a comment
    to highlight the value that gets assigned to the variable: the GET parameter `embedded_submission_form_uuid`
    key and its value. The variable eventually gets translated to a SQL query and
    executed. GraphQL parameters aren’t automatically sanitized either, which contributes
    to the SQL injection condition.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 新的SQL命令最终被赋值给`safe_query`变量，此时攻击者控制了该变量，并且没有进行任何检查。我们用注释突出显示了被赋值给该变量的内容：GET参数`embedded_submission_form_uuid`的键及其值。最终，变量被转化为SQL查询并执行。GraphQL参数也不会自动进行清理，这也导致了SQL注入漏洞的产生。
- en: 'Jobert crafted a special cURL request to verify the injection:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Jobert构造了一个特殊的cURL请求来验证注入：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The URL-decoded version of this cURL request looks like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此cURL请求的URL解码版本如下所示：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This request used a time-based SQL injection technique (covered in Chapter 8)
    to introduce a time delay of `10` seconds in the server’s processing by using
    the PostgreSQL command `pg_sleep`. The attacker then tracked the time it took
    the server to respond to the request by using the Linux `time` command. It took
    10.557 seconds to complete.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 该请求使用了一种基于时间的SQL注入技术（在第8章中讲解），通过使用PostgreSQL命令`pg_sleep`引入了服务器处理的`10`秒时间延迟。攻击者通过使用Linux
    `time`命令跟踪服务器响应请求的时间。该请求完成用了10.557秒。
- en: This technique not only confirmed the existence of the vulnerability but also
    avoided accidentally disclosing sensitive information or potentially sending dangerous
    commands to the database that could cause data to be lost.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术不仅确认了漏洞的存在，还避免了意外泄露敏感信息或可能向数据库发送危险命令，造成数据丢失的风险。
- en: SQL Injection in an Object Argument (Apache SkyWalking)
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象参数中的 SQL 注入（Apache SkyWalking）
- en: Apache SkyWalking is a performance-monitoring platform for microservices and
    cloud-native architectures created by the Apache Software Foundation. In June
    2020, it suffered from a SQL injection vulnerability introduced through a value
    passed to a GraphQL field argument. This vulnerability was assigned the identifier
    CVE-2020-9483.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Apache SkyWalking 是由 Apache 软件基金会创建的用于微服务和云原生架构的性能监控平台。2020 年 6 月，它出现了一个通过传递值到
    GraphQL 字段参数引入的 SQL 注入漏洞。该漏洞被分配为 CVE-2020-9483。
- en: SkyWalking can work with various storage backends, such as H2, OpenSearch, PostgreSQL,
    and TiDB. A hacker who goes by the handle Jumbo-WJB discovered that when SkyWalking
    was used in conjunction with either H2 or MySQL storage backends, it was vulnerable
    to a SQLi through the `getLinearIntValues` field `metric` argument.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: SkyWalking 可以与各种存储后端一起工作，如 H2、OpenSearch、PostgreSQL 和 TiDB。一位名为 Jumbo-WJB 的黑客发现，当
    SkyWalking 与 H2 或 MySQL 存储后端结合使用时，通过 `getLinearIntValues` 字段 `metric` 参数存在 SQL
    注入（SQLi）漏洞。
- en: 'Jumbo-WJB published an exploit for this vulnerability, constructing a special
    payload in the GraphQL query that abused the bug to achieve a SQLi. In the following
    example query, you can see that the value of `id`, which is passed as input to
    the `metric` argument, contains SQL query syntax:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Jumbo-WJB 发布了针对该漏洞的利用工具，构造了一个特殊的载荷，在 GraphQL 查询中滥用该漏洞实现 SQL 注入。在以下示例查询中，可以看到传递给
    `metric` 参数的 `id` 值包含了 SQL 查询语法：
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For a value, the `metric` argument expects an object that includes keys such
    as `id` and `name`. The vulnerability appeared to be in the `id` key, which doesn’t
    get sanitized before it is inserted into either H2 or MySQL databases.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`metric` 参数期望一个对象，其中包含诸如 `id` 和 `name` 等键。漏洞似乎出现在 `id` 键上，该键在插入到 H2 或 MySQL
    数据库之前没有进行过滤。'
- en: By examining the pull request on SkyWalking’s GitHub repository containing the
    fix, we can get an idea of what the vulnerable code area might have looked like
    ([Figure 10-5](#figure10-5)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看包含修复的 SkyWalking GitHub 仓库中的 pull request，我们可以大致了解存在漏洞的代码区域（[图 10-5](#figure10-5)）。
- en: '![](image_fi/502840c10/f10005.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c10/f10005.png)'
- en: 'Figure 10-5: Apache SkyWalking’s vulnerable code'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-5：Apache SkyWalking 的漏洞代码
- en: The `getLinearIntValues` method takes a few arguments, such as `tableName`,
    `valueCName`, and `ids` (line 110), and does some string building using Java’s
    `StringBuilder` (line 112). A loop is then used to iterate through the values
    passed to the `ids` argument and construct a string by concatenating them and
    decorating them using single quotes (lines 113 to 118). The newly built string
    eventually gets used as part of a SQL query without sanitization (lines 123 to
    125).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`getLinearIntValues` 方法接受一些参数，如 `tableName`、`valueCName` 和 `ids`（第 110 行），并使用
    Java 的 `StringBuilder`（第 112 行）构建字符串。然后使用一个循环遍历传递给 `ids` 参数的值，并通过连接它们并使用单引号装饰它们来构建一个字符串（第
    113 至 118 行）。最终构建的字符串未经过滤，直接作为 SQL 查询的一部分使用（第 123 至 125 行）。'
- en: It is very possible that the `metric` object’s `id` GraphQL argument is inserted
    directly into the `ids` list and therefore allows injecting SQL commands.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能 `metric` 对象的 `id` GraphQL 参数会直接插入到 `ids` 列表中，因此允许注入 SQL 命令。
- en: Cross-Site Scripting (GraphQL Playground)
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨站脚本（GraphQL Playground）
- en: CVE-2021-41249 is a reflected XSS vulnerability impacting the GraphQL Playground
    IDE, which provides an interface for sending queries to the API, as well as raw
    schema information, documentation about the API’s features, and information taken
    from inline SDL code comments. This information is partially populated by an introspection
    query that gets sent automatically when GraphQL Playground loads. Other information
    might come from the GraphQL server.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: CVE-2021-41249 是一个影响 GraphQL Playground IDE 的反射型 XSS 漏洞，该 IDE 提供了一个向 API 发送查询的接口，还包括原始的架构信息、API
    功能文档以及来自内联 SDL 代码注释的信息。这些信息部分是通过一个自动发送的 introspection 查询填充的，该查询在 GraphQL Playground
    加载时会自动发送。其他信息可能来自 GraphQL 服务器。
- en: 'This vulnerability is quite different from those covered so far in this chapter.
    First, it impacts the API consumer directly, as a successful exploitation would
    execute in their browser. Second, attackers could exploit it in two ways:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞与本章之前讨论的漏洞有所不同。首先，它直接影响 API 消费者，因为成功的利用会在他们的浏览器中执行。其次，攻击者可以通过两种方式利用这个漏洞：
- en: By compromising a GraphQL server and modifying its schema to include dangerous
    characters.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过入侵一个 GraphQL 服务器并修改其模式以包含危险字符。
- en: By building a custom GraphQL server with a malicious payload implemented. The
    attacker could then target the client by sending them a link to load the GraphQL
    Playground with the malicious server’s address—for example, *http://blackhatgraphql.com/graphql?endpoint=http://attacker.com/graphql?query={__typename}*.
    If the victim clicks the link, their browser will automatically load the malicious
    API and run a query on their behalf, which executes the payload into the Playground
    running in their browser and triggers the XSS.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过构建一个包含恶意负载实现的自定义 GraphQL 服务器。攻击者可以通过向受害者发送一个链接，诱使他们加载带有恶意服务器地址的 GraphQL Playground
    —— 例如，*http://blackhatgraphql.com/graphql?endpoint=http://attacker.com/graphql?query={__typename}*。如果受害者点击该链接，他们的浏览器将自动加载恶意
    API，并代表他们执行一个查询，这会将负载注入正在其浏览器中运行的 Playground，并触发 XSS 攻击。
- en: 'Let’s explore how a GraphQL server could serve such malicious payloads. Consider
    the following code sample from DVGA:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨一下一个 GraphQL 服务器如何提供这些恶意负载。考虑以下来自 DVGA 的代码示例：
- en: '[PRE23]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code represents DVGA’s `UserObject` object. Developers could use the `name`
    variable to rename an object’s name to a custom string, and a threat actor could
    do the same if they’ve compromised the server (or simply hosted their own version
    of it). This name will then get rendered in an IDE tool’s documentation section
    ([Figure 10-6](#figure10-6)).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码表示 DVGA 的 `UserObject` 对象。开发者可以使用 `name` 变量将对象的名称重命名为自定义字符串，而如果攻击者已经入侵了服务器（或简单地托管了自己的版本），他们也可以做同样的事情。然后，这个名称将被渲染到
    IDE 工具的文档部分中（[图 10-6](#figure10-6)）。
- en: '![](image_fi/502840c10/f10006.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c10/f10006.png)'
- en: 'Figure 10-6: A malicious type name shown in a search'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-6：在搜索中显示的恶意类型名称
- en: When a client opens the GraphQL Playground to query the API, the malicious JavaScript
    payload will be rendered in their browser, which, in this case, is injected into
    a type’s name.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端打开 GraphQL Playground 查询 API 时，恶意的 JavaScript 负载将在他们的浏览器中渲染，在这种情况下，它会被注入到一个类型的名称中。
- en: 'This exact vulnerability existed in the Playground Node Package Manager (npm)
    package *graphql-playground-react*. In late 2021, the library maintainers took
    the following steps to remediate the vulnerability:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个具体的漏洞存在于 Playground Node 包管理器（npm）包 *graphql-playground-react* 中。在2021年底，库的维护者采取了以下措施来修复这个漏洞：
- en: Ensuring that any HTML text is escaped
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有 HTML 文本都被转义
- en: Ensuring that type names conform to the GraphQL specification
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保类型名称符合 GraphQL 规范
- en: Avoiding loading the documentation section if it contains dangerous characters
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文档部分包含危险字符，则避免加载该部分
- en: Ensuring that user-generated HTML is checked and made safe
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用户生成的 HTML 被检查并变得安全
- en: GraphQL IDEs are popular, so if you’re performing a penetration test and identify
    an old version of GraphQL Playground, it’s possible that it hasn’t been patched
    and is still vulnerable to this XSS. Alternatively, you could host your own malicious
    GraphQL server containing the vulnerable Playground library and trick a victim
    into visiting it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL IDEs 很流行，因此，如果你正在进行渗透测试并发现了旧版本的 GraphQL Playground，有可能它没有被修补，仍然容易受到这个
    XSS 攻击。或者，你可以托管一个包含漏洞的 Playground 库的恶意 GraphQL 服务器，并诱使受害者访问它。
- en: Cross-Site Request Forgery (GitLab)
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站请求伪造（GitLab）
- en: Earlier in the book, we highlighted techniques for identifying GraphQL APIs
    that allow GET-based queries. Let’s now see how a hacker was able to abuse this
    functionality. In March 2021, the hacker az3z3l disclosed a CSRF vulnerability
    to GitLab ([https://hackerone.com/reports/1122408](https://hackerone.com/reports/1122408)).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书早些时候，我们介绍了如何识别允许基于 GET 的 GraphQL 查询的 API。现在，让我们看看黑客是如何滥用这个功能的。2021年3月，黑客
    az3z3l 向 GitLab 披露了一个 CSRF 漏洞（[https://hackerone.com/reports/1122408](https://hackerone.com/reports/1122408)）。
- en: When handling GraphQL queries over the POST method, GitLab uses a special `X-CSRF-Token`
    HTTP header to protect against CSRF attacks. This header includes a unique token
    in each request or query.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 POST 方法处理 GraphQL 查询时，GitLab 使用了一个特殊的 `X-CSRF-Token` HTTP 头部来防止 CSRF 攻击。这个头部在每个请求或查询中包含一个唯一的令牌。
- en: GET requests aren’t typically used for actions such as data modifications, so
    companies don’t usually protect them with anti-CSRF tokens. But because GitLab
    supported queries using GET, the CSRF protection in place did not apply to those
    queries, even though these operations included queries and mutations and had the
    ability to perform changes through the API.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: GET 请求通常不用于数据修改等操作，因此公司通常不会使用反 CSRF 令牌来保护它们。但由于 GitLab 支持使用 GET 查询，因此现有的 CSRF
    保护机制没有应用于这些查询，尽管这些操作包括查询和 mutation，并且能够通过 API 执行更改。
- en: 'Ethical hacker az3z3l provided proof-of-concept HTML code that abuses the CSRF
    vulnerability:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 道德黑客 az3z3l 提供了一个概念验证的 HTML 代码，利用了 CSRF 漏洞：
- en: '[PRE24]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This HTML code defines a submission form ❶ that includes two inputs: `query`
    ❷, which specifies the use of a mutation named `CreateSnippet`, and `variables`
    ❸, which holds a few variables passed via the input type. At ❹, the code uses
    JavaScript to submit the form on behalf of the client as soon as a client loads
    an HTML page that contains it. Because the API doesn’t check for a CSRF protection
    header, this is possible.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 HTML 代码定义了一个提交表单 ❶，其中包含两个输入项：`query` ❷，指定使用名为 `CreateSnippet` 的 mutation，和
    `variables` ❸，其中包含通过输入类型传递的一些变量。代码在 ❹ 处使用 JavaScript 来代客户端提交表单，只要客户端加载包含该 HTML
    页面的页面时。由于 API 没有检查 CSRF 保护头，因此这种操作是可能的。
- en: 'The GraphQL mutation used in the exploit is as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞利用中使用的 GraphQL mutation 如下：
- en: '[PRE25]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As a result of this query, a snippet will be created on behalf of the client
    with whatever data the attacker included in the HTML form. This CSRF could let
    the attacker take sensitive actions on behalf of the victim, such as accessing
    their account or data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个查询，客户端将以攻击者在 HTML 表单中包含的数据创建一个代码片段。这个 CSRF 漏洞可能让攻击者代表受害者执行敏感操作，比如访问他们的账户或数据。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered public disclosures of real-life vulnerabilities and exploits.
    You learned about how certain design choices in GraphQL implementations created
    vulnerabilities that led to information disclosure, injections, authorization
    issues, and more. We also discussed some of the mitigation approaches companies
    took to patch the vulnerabilities, where possible.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了现实世界中漏洞和漏洞利用的公开披露。你了解了 GraphQL 实现中的某些设计选择如何造成漏洞，导致信息泄露、注入、授权问题等。我们还讨论了一些公司采取的缓解措施，以修补这些漏洞（如果可能的话）。
- en: This book introduced you to GraphQL’s new ways of querying APIs. As you’ve learned,
    the framework has its own rules, advantages, and disadvantages. GraphQL’s design
    introduces new vulnerabilities and security challenges. Simultaneously, it remains
    prone to the classic vulnerabilities that have existed for years. Now that you
    know how to find vulnerabilities in GraphQL, we recommend that you try to poke
    holes in the GraphQL applications made available through vulnerability disclosure
    programs. Who knows; maybe you’ll make a buck or two.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 本书介绍了 GraphQL 查询 API 的新方法。正如你所学到的，这个框架有其独特的规则、优点和缺点。GraphQL 的设计引入了新的漏洞和安全挑战。与此同时，它仍然容易受到多年来存在的经典漏洞的影响。现在你已经知道如何在
    GraphQL 中查找漏洞，我们建议你尝试在通过漏洞披露程序发布的 GraphQL 应用程序中寻找漏洞。谁知道呢，或许你还能赚上一两笔。
