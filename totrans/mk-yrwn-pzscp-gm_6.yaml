- en: '![Image](../images/pg125-01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg125-01.jpg)'
- en: '6'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6'
- en: 'Robot Heist: Refining Your Level Design'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人抢劫：完善你的关卡设计
- en: Now that all your operatives are in place, like a true mastermind, you can begin
    planning your heist of the century. You can start with the game you built in the
    previous two chapters or visit *[https://tinyurl.com/robotsneedlevels/](https://tinyurl.com/robotsneedlevels/)*
    to find a fully programmed version of *Robot Heist* just waiting for some levels!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有的操作员都已到位，作为真正的策划者，你可以开始规划这次世纪大抢劫。你可以从前两章中建立的游戏开始，或者访问 *[https://tinyurl.com/robotsneedlevels/](https://tinyurl.com/robotsneedlevels/)*，找到一个已经完全编程的
    *Robot Heist* 版本，等待你添加一些关卡！
- en: Brainstorming the Story
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头脑风暴故事
- en: So far, we have two characters with different abilities, and we have a bunch
    of objects for them to interact with. How do we make our game feel like a heist?
    Before we start designing levels, let’s think about the shape of our story. What’s
    the story structure those levels will fit into? When I made *Robot Heist*, I took
    some time to brainstorm a bunch of ideas for the game and tried to use just the
    good ones.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了两个拥有不同能力的角色，还有一堆供他们互动的物体。我们如何让游戏感觉像是一场抢劫呢？在开始设计关卡之前，让我们先想想故事的结构。这些关卡将融入什么样的故事结构？当我制作
    *Robot Heist* 时，我花了一些时间进行头脑风暴，提出了许多游戏的创意，并尝试只使用那些好的创意。
- en: We want Vertibot and Horibot to work together to pull off the heist. How do
    we show this idea to the player? One way is to have the player start with only
    one robot. If the player starts as Vertibot, there are things they simply won’t
    be able to do until they find Horibot. This also makes sense when we’re thinking
    about difficulty. Managing two different robots at the same time can be tricky.
    Giving the player only one robot to start with gives them time to learn the basics
    before the second robot appears.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望 Vertibot 和 Horibot 一起合作完成这次抢劫。我们如何将这一想法呈现给玩家呢？一种方法是让玩家一开始只控制一个机器人。如果玩家从
    Vertibot 开始，他们会发现有些事情在找到 Horibot 之前根本无法完成。这在我们考虑难度时也很有意义。与此同时，管理两个不同的机器人可能会非常棘手。一开始让玩家只控制一个机器人，可以让他们在第二个机器人出现之前有时间掌握基本操作。
- en: Because this is a heist, let’s say Horibot is locked in prison for a heist he
    committed a long time ago. Vertibot’s first task will be to *bust him out*. Once
    they’re reunited, they can pull off the final job that will *set them up for life*.
    And what if the treasure they’re trying to steal is an object they can push around,
    like a crate, and they have to work together to get it out of the bank? That way
    they really need to use teamwork!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一次抢劫，让我们假设 Horibot 因为很久以前犯下的抢劫罪被关进了监狱。Vertibot 的第一个任务是 *将他救出去*。一旦他们重逢，他们就能完成最后的任务，*为一生奠定基础*。如果他们要偷的宝物是一个可以推动的物体，比如箱子，而且他们必须一起合作将它从银行带出去，这样他们就真的需要使用团队合作了！
- en: 'Now that we have a general picture of what the story might be, let’s map it
    out:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对故事的整体框架有了一个大概的了解，让我们将其映射出来：
- en: '**Act 1: The Prison Break** Vertibot breaks into robot prison alone to rescue
    Horibot.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一章：越狱** Vertibot 独自闯入机器人监狱，救出 Horibot。'
- en: '**Act 2: The Bank Job** Reunited, Vertibot and Horibot work together to break
    into the Data Bank.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二章：银行劫案** 重逢后的 Vertibot 和 Horibot 一起合作闯入数据银行。'
- en: '**Act 3: The Getaway** Vertibot and Horibot find the solid gold superconductor
    and abscond with it using maximum teamwork.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三章：逃亡** Vertibot 和 Horibot 找到了纯金超导体，并通过最大限度的合作将其带走。'
- en: All right, now we have an idea of how our game will start. Before we make our
    levels, let’s look at what’s in the level editor!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们有了关于游戏如何开始的想法。在我们制作关卡之前，让我们看看关卡编辑器中有什么！
- en: Exploring the Palette
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索调色板
- en: 'If you loaded the preprogrammed version of the game from the URL mentioned
    earlier, you might be wondering what all the objects in the level editor are.
    If you’re working with your own game, feel free to skip this section. Here’s what’s
    in the *Robot Heist* level editor:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从之前提到的 URL 加载了预编程的游戏，你可能会想知道关卡编辑器中的所有物体是什么。如果你正在制作自己的游戏，可以跳过这一部分。以下是 *Robot
    Heist* 关卡编辑器中的内容：
- en: '![image](../images/pg127-01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg127-01.jpg)'
- en: '**Guards and laser guns** have four different versions, each facing a different
    direction.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**守卫和激光枪**有四个不同的版本，每个版本朝不同的方向。'
- en: 'The **floor** has three different versions: normal, bumpy, and blank. The bright
    gray bumpy floor blocks crates from being pushed onto it. Also, patrolling guards
    won’t cross over empty floors, so you can use them to shape the guards’ paths.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地面**有三个不同的版本：普通、崎岖和空白。明亮的灰色崎岖地面会阻挡箱子被推到其上。而且，巡逻的守卫不会跨越空白地面，所以你可以利用它们来塑造守卫的路径。'
- en: '**Walls** are two different colors, purely for style reasons.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**墙壁**有两种不同的颜色，纯粹是为了风格的原因。'
- en: '**Wire segments** draw wires along the floor (in my levels, I use them to draw
    trails from gates to the panels that open and close them). These look like dots,
    but when they’re next to other wire segments, they create a continuous line. The
    first wire segment produces a line (with four dots) over a normal background tile;
    the second produces a line (no dots) on an empty background; and the third produces
    a line that goes through a wall. Don’t worry too much about these wires.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电线段**沿地面绘制电线（在我的关卡中，我用它们来绘制从门到开关面板的线路）。这些看起来像是点，但当它们与其他电线段相邻时，会形成一条连续的线。第一个电线段在普通背景瓦片上绘制一条线（包含四个点）；第二个在空白背景上绘制一条线（没有点）；第三个则绘制一条穿过墙壁的线。关于这些电线不用太担心。'
- en: '**Treasures** are the solid gold superconductors. If a superconductor is in
    a level, the player can finish the level only by getting both robots *and* the
    superconductor to the exit.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宝藏**是纯金超导体。如果一个超导体出现在关卡中，玩家只能通过让两个机器人*以及*超导体一起到达出口来完成关卡。'
- en: '**Gates** come in two colors: blue and pink. They also have two states: open
    and closed. Whichever state a gate starts the level in, putting something on the
    same colored panel will make it switch to the other state. (Closed gates will
    open; open gates will close.)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**门**有两种颜色：蓝色和粉色。它们也有两种状态：开启和关闭。不管门在关卡开始时是什么状态，把物体放到相同颜色的面板上会使门切换到另一个状态。（关闭的门会开启，开启的门会关闭。）'
- en: In this version of the game, Vertibot always starts a level awake and Horibot
    starts asleep. This means you can make levels that feature only Vertibot but not
    levels that feature only Horibot. If you want to make levels featuring only Horibot,
    you’ll need to make a symbol for his awake object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的游戏中，Vertibot总是从清醒状态开始关卡，而Horibot则从睡眠状态开始。这意味着你可以制作只有Vertibot的关卡，但无法制作只有Horibot的关卡。如果你想制作只有Horibot的关卡，你需要为他的清醒状态物体设计一个符号。
- en: Remember that these are just the objects that have symbols in the legend. Now
    that you know where everything is, let’s make some levels!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这些只是图例中有符号的物体。现在你知道了这些物体的分布，我们可以开始制作一些关卡了！
- en: Creating Your First Level
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你的第一个关卡
- en: 'One feature of level design is that it introduces the player to all the important
    game elements. *Robot Heist* has five important elements: switching robots, pushing
    crates, opening gates, avoiding lasers, and eluding guards. Can we design levels
    that introduce each of those objects or ideas? Which one should we start with?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 关卡设计的一个特点是它让玩家接触到所有重要的游戏元素。*机器人抢劫*有五个重要元素：切换机器人、推动箱子、打开门、避开激光和躲避守卫。我们能设计出介绍这些物体或概念的关卡吗？我们应该从哪一个开始？
- en: Well, you can’t do a lot with gates without crates to hold them open. And you
    can’t get very far with lasers without crates to block them. It seems like pushing
    crates is the first concept the player needs to understand, so let’s start with
    a level that teaches them that.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，门没有箱子就无法保持开启状态。而没有箱子来阻挡激光，你也走不远。看起来推动箱子是玩家需要理解的第一个概念，所以让我们从一个教会他们这一点的关卡开始。
- en: '![image](../images/pg128-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg128-01.jpg)'
- en: Introducing New Objects
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 引入新物体
- en: Because I start the game with just Vertibot and introduce character switching
    later, I want my first level to introduce the idea of pushing crates and also
    to make the player realize they can only push objects vertically.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我在游戏开始时只有Vertibot，并且后续才引入角色切换，我希望我的第一个关卡能够介绍推动箱子的概念，并让玩家意识到他们只能垂直推动物体。
- en: What does a level like that look like? Try to make your own first. Then I’ll
    explain how I came up with my first *Robot Heist* level. Don’t read ahead until
    you’ve taken a crack at this!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的关卡应该是什么样子的？先尝试自己设计一个吧。然后我会解释我是如何设计我的第一个*机器人抢劫*关卡的。在你尝试之前，别往下看！
- en: What does your level look like? Does it teach the player pushing but also make
    it clear that they can only push objects vertically?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你的关卡是什么样子的？它是否在教授玩家推动的同时，也让他们明确只能垂直推动物体？
- en: Here’s what I came up with.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我设计的内容。
- en: '![image](../images/pg129-01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg129-01.jpg)'
- en: '*Example of a horizontal level*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*水平关卡示例*'
- en: I tried to make a level that was horizontal where objects look like they should
    move horizontally, but if the player tries to push that way, they’ll realize they
    can’t. Why? Remember when we talked in [Chapter 4](ch04.xhtml) about how failure
    is important? By trying actions they can’t do, the player learns the rules of
    the game!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试制作一个水平的关卡，其中物体看起来应该水平移动，但如果玩家尝试那样做，他们会发现自己做不到。为什么呢？还记得我们在[第4章](ch04.xhtml)讨论过失败的重要性吗？通过尝试那些他们不能做的动作，玩家学会了游戏的规则！
- en: 'This level has two main parts: the first part displays a door the player can’t
    get through until they push crates out of the way. That’s just to introduce the
    idea of pushing vertically. The player can’t actually get to the second part of
    the level until they understand two ideas:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个关卡有两个主要部分：第一部分展示了一个玩家无法通过的门，直到他们推开箱子。这个部分只是为了引入垂直推箱子的概念。玩家在理解两个概念之前实际上无法进入关卡的第二部分：
- en: They can push crates.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们可以推箱子。
- en: They can only push crates vertically.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们只能垂直推箱子。
- en: The second part of the level builds on that understanding. To get through that
    wall of crates, the player needs to create a path for themselves by pushing crates
    vertically, moving horizontally, and repeating those movements until they get
    through. It’s the same kind of movement they do at the beginning of the level,
    but they have to do it a bit more thoughtfully. Good level design introduces ideas
    and then builds on those ideas!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关卡的第二部分建立在前面理解的基础上。为了穿过那堵箱子墙，玩家需要通过垂直推箱子、水平移动，并重复这些动作直到穿越过去。这和他们在关卡开始时做的动作相同，但他们必须更加深思熟虑。好的关卡设计是先引入一个概念，然后再基于这个概念进行扩展！
- en: 'The exit tiles are on the right side of the screen. This is the first time
    the player sees them. How do they know they’re the goal of the level? Because
    they’re all the way on the opposite side of the screen from where the player starts!
    The level forms a visual path leading the player’s eye from where Vertibot starts
    on the left over to where the exit is on the right. That’s called *composition*:
    I’ll talk more about that in a minute!'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 退出方块位于屏幕的右侧。这是玩家第一次看到它们。他们怎么知道它们是关卡的目标呢？因为它们位于与玩家起始位置相对的屏幕另一侧！关卡形成了一条视觉路径，将玩家的视线从左侧的Vertibot起始位置引导到右侧的出口。这就是所谓的*构图*：稍后我会详细讲解这个概念！
- en: Adding a Second Concept
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加第二个概念
- en: We’ll introduce another basic concept in this level. One of the most important
    reasons the player would want to push a crate is to keep a gate open. Let’s close
    the level with a simple introduction to a gate.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个关卡中引入另一个基本概念。玩家想要推箱子的一个最重要原因是保持大门打开。让我们通过简单介绍大门来结束这个关卡。
- en: 'Now three actions happen in this level, from left to right: first, the player
    learns to push crates vertically. Second, they navigate through an obstacle by
    using that knowledge. Third, the player encounters a gate that only opens when
    something is on a panel. The solution is to push a crate vertically onto the panel.
    Each part of the level emphasizes the same idea: pushing crates vertically is
    important!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这个关卡中会发生三个动作，从左到右：首先，玩家学会了垂直推箱子。其次，他们通过运用这一知识穿越障碍。第三，玩家遇到了一个只有当物体在面板上时才会打开的大门。解决方法是将一个箱子垂直推到面板上。关卡的每个部分都强调了同一个概念：垂直推箱子非常重要！
- en: But there are some problems with this last action. It’s possible to get stuck
    and have to restart the level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个最后的动作有一些问题。玩家有可能被卡住，并不得不重新开始关卡。
- en: If the player pushes the final crate down or if they push it all the way up
    past the panel, the crate will get stuck. Because the wall blocks the player from
    getting around and pushing the crate from the other side, the player is stuck
    as well. They’ll have to restart, and that’s a huge bummer when they’re so close
    to the end of the level! Is there a way to fix this?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家将最后一个箱子推下去，或者将它推到面板上方，箱子就会卡住。因为墙壁阻挡了玩家绕过去并从另一边推箱子，玩家也会被困住。他们必须重启关卡，当他们离关卡的终点如此接近时，这真的是一个很大的遗憾！有办法解决这个问题吗？
- en: Creating Bumpy Floors
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建颠簸的地面
- en: To get around the problem of getting stuck, I created a new object for the game,
    which is the bumpy floor I mentioned earlier in the chapter. This kind of floor
    will stop crates, but the player can still walk on the floor. We can use these
    floors to prevent the player from pushing crates all the way up to a wall and
    getting stuck without room to push it back.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决卡住的问题，我为游戏创建了一个新物体，即本章前面提到的颠簸地板。这种地板会阻止箱子前进，但玩家仍然可以在上面行走。我们可以利用这些地板防止玩家将箱子推到墙壁上并卡住，无法再推动。
- en: '![image](../images/pg131-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg131-01.jpg)'
- en: '*Example of bumpy floors*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*颠簸地板的示例*'
- en: 'The bumpy floors are the tiles with the bright gray dots on them. If you haven’t
    implemented these floors in your version of the game, they’re very easy to make.
    Just add this line to the `RULES` section after your other code lines about pushing:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 颠簸地板是带有明亮灰色点的瓷砖。如果你在游戏中还没有实现这些地板，它们非常容易制作。只需在`RULES`部分的其他推箱子代码行后添加这一行：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I named the object `Gravel`. If the player tries to push anything onto a `Gravel`
    object, it just cancels that object’s movement. But the player can still walk
    onto it freely.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这个物体命名为`Gravel`（碎石）。如果玩家试图将任何东西推到`Gravel`物体上，它将取消该物体的移动。但是玩家仍然可以自由地走到它上面。
- en: '![image](../images/pg131-02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg131-02.jpg)'
- en: 'Maybe you’re wondering why I spent time earlier emphasizing that letting the
    player make mistakes and mess up is important, only to prevent the player from
    failing here. There are a few reasons:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想，我之前花时间强调让玩家犯错和搞砸是很重要的，为什么在这里又要阻止玩家失败呢？这有几个原因：
- en: The point of this part of the level is to teach the player how panels and crates
    interact. If they get the crate stuck before it can reach the panel, they don’t
    learn anything. The game just seems to be broken.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一部分关卡的目的是教会玩家面板和箱子是如何互动的。如果他们在箱子到达面板之前将其卡住，那他们什么也学不到。游戏看起来就像是坏掉了。
- en: This is the first level, and the player is still learning the basics. Later,
    we can give them more room to mess up. Think of these bumpy tiles as *training
    wheels*. In later levels, when the player knows what they’re doing, we can take
    the training wheels off.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是第一关，玩家仍在学习基础。以后，我们可以给他们更多犯错的空间。把这些颠簸地板看作是*训练轮*。在后续关卡中，当玩家已经知道自己在做什么时，我们可以去掉这些训练轮。
- en: Messing up when they’re close to the end of a level is no fun at all.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当玩家接近关卡的终点时搞砸，真的是一点也不好玩。
- en: Adding “training wheels” like this just makes gameplay a little easier while
    the player is getting used to the basics.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样添加“训练轮”只是让游戏玩法稍微变得容易一些，帮助玩家在熟悉基础操作时更加顺利。
- en: Refining Your First Level
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进你的第一关
- en: As a level designer, you should always play your levels, see how well they’re
    working, and find ways to make them better. There’s room to make the gate part
    of this first level better. Why? Well, I want to make sure the player learns the
    important ideas about panels and gates. It’s essential to know that panels open
    gates only when something is on them. If the player steps onto the panel, the
    gate will open. When they step off the panel, it’ll close again. That’s why they
    need the crate.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为关卡设计师，你应该始终试玩你的关卡，看看它们运作得如何，并找到改进它们的方法。第一关中的门部分还有改进的空间。为什么呢？因为我希望确保玩家能够学到关于面板和门的重要概念。了解面板只有在上面有物体时才会打开门是至关重要的。如果玩家站在面板上，门就会打开；当他们离开面板时，门会重新关闭。这就是为什么他们需要箱子的原因。
- en: But what if the player just sees the crate and immediately pushes it up and
    onto the panel without even trying to stand on the panel first? They’ll miss this
    critical step and the information it provides.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可是，如果玩家一看到箱子，就直接把它推上去，甚至不尝试先站在面板上呢？那样的话，他们会错过这个关键步骤和它所提供的信息。
- en: 'Is there a way we can make it more likely the player will step on the panel
    first, before pushing the crate onto the panel? To do this, I put the panel right
    in front of the gate and the crate off to the side. Getting the crate up is now
    more of a puzzle: the player has to push the crate down first and then go around
    and push it back up. The panel, on the other hand, is right there. The player
    is far more likely to check out the object that’s right in front of them before
    trying the weird puzzle that’s off to the side.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有没有办法能让玩家更有可能先站在面板上，再把箱子推到面板上呢？为此，我把面板放在门前，箱子则放在一旁。现在，推箱子变成了一个谜题：玩家必须先将箱子推下去，然后绕过它再把箱子推上去。另一方面，面板就在眼前，玩家更有可能先去查看眼前的物体，而不是去尝试那个离得比较远的谜题。
- en: '![image](../images/pg133-01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg133-01.jpg)'
- en: '*Guiding the player to the panel*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*引导玩家到面板*'
- en: Always try to think about what your players will do in your levels. It’s hard,
    but try to imagine you’re playing through your own levels, seeing them for the
    first time. What’s the first action you might take? You won’t always know, which
    is why it’s important to get other people to play your games; however, you can
    usually make some good guesses!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总是试着思考玩家在你设计的关卡中会做什么。这很难，但尽量想象你自己在玩自己的关卡，第一次看到它们时，你可能会采取什么样的行动？你不一定会知道，这就是为什么让其他人玩你的游戏很重要；然而，你通常可以做出一些不错的猜测！
- en: Giving Structure to a Level
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为关卡赋予结构
- en: A level is a series of challenges for the player to solve or explore. But it
    also represents an imaginary place, not to mention an image on a screen. When
    we’re thinking as level designers, we should be thinking about our level in all
    these ways at the same time. What kind of place is our level? What does it look
    like?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关卡是玩家需要解决或探索的一系列挑战。但它也代表着一个虚构的地方，更不用说屏幕上的图像了。当我们作为关卡设计师思考时，应该同时考虑这些方面。我们的关卡是怎样的地方？它看起来是什么样的？
- en: In *Robot Heist*, Vertibot breaks into a high-security robot prison to rescue
    Horibot. How do I make a level feel like a player is *breaking in*?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在*机器人抢劫*中，Vertibot闯入一个高安全级别的机器人监狱，去营救Horibot。我如何让一个关卡让玩家感觉像是*突破进入*的呢？
- en: '![image](../images/pg133-02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg133-02.jpg)'
- en: '*Structure of the finished level*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*完成关卡的结构*'
- en: In the finished level, the player starts outside of something! I turned the
    level I designed into just one corner of a larger building, the robot prison.
    Now the player starts on the outside and has to break in to complete the level.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成的关卡中，玩家一开始就在某个地方的外面！我把设计的关卡转化为一个更大建筑的一角，即机器人监狱。现在玩家从外面开始，必须突破进入才能完成关卡。
- en: You can think of levels as pictures the player looks at. *Composition* means
    the balance of different picture elements and how they relate to each other. To
    make the player feel like they were on the outside of a place, I thought a lot
    about composition.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把关卡看作是玩家看的图片。*构图*意味着不同画面元素的平衡以及它们之间的关系。为了让玩家感觉他们处于一个地方的外部，我花了很多心思在构图上。
- en: Creating Sections Within a Level
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在关卡中创建区域
- en: 'This first level is made up of two L shapes: the one on the outside and the
    one on the inside. The outside L has no borders: it opens up to the edge of the
    screen. The inside L has heavy borders: the outline is two walls thick. I also
    made the outside prison wall look a little like the battlements on top of a castle.
    I wanted it to look like something built to keep people out.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个关卡由两个L形组成：一个在外面，另一个在里面。外面的L形没有边界：它通向屏幕的边缘。里面的L形有很厚的边界：轮廓是两层墙的厚度。我还让外面的监狱墙看起来有点像城堡顶部的城垛。我希望它看起来像是为了防止人们进入而建造的东西。
- en: I used a few other tricks to make the inside L and outside L look different
    from each other. On the outside, I used empty floor spaces to make the ground
    look patchy and irregular—think of patches of grass on a hillside.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一些其他的小技巧，让内外L形看起来不同。在外面，我使用了空旷的地板空间，让地面看起来斑驳不规则——想象一下山坡上的草地斑块。
- en: '![image](../images/pg134-01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg134-01.jpg)'
- en: '*Irregular patchy floor*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*不规则斑驳地板*'
- en: Notice that the ground is the patchiest where the player is, and then it gradually
    gets less patchy toward the door to the robot prison. I wanted to use the ground
    to lead the player’s eye from their starting position toward where they need to
    go. Although the ground outside is patchy, the floor *inside* is completely regular,
    like the floor in a bank lobby.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到地面最斑驳的地方是玩家所在的位置，然后它逐渐向机器人监狱的门口变得不那么斑驳。我想用地面引导玩家的视线，从他们的起始位置引导到他们需要去的地方。尽管外面的地面很斑驳，*内部*的地面却完全规则，就像银行大厅的地板一样。
- en: '![image](../images/pg135-01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg135-01.jpg)'
- en: '*Regular floor pattern*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*常规地板图案*'
- en: 'I used another technique to connect with the two themes of being unable to
    push objects horizontally and breaking into a place: there are two hallways leading
    away from the level, and one of them is blocked by crates. Because Vertibot can
    only push vertically, they’re forced to find a second way through (the crate and
    gate puzzle). Always look for ways to try to tell simple stories with your levels!'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了另一种技巧，将无法水平推动物体和突破进入某个地方这两个主题联系在一起：有两条走廊通向关卡的外面，其中一条被箱子堵住。由于Vertibot只能垂直推动，它们被迫找到第二条通过的方式（箱子和门的谜题）。总是寻找方法，尽量用你的关卡讲述简单的故事！
- en: 'I also added a message before the level that introduces the Vertibot character
    and gives the player some instructions: as long as you’re Vertibot, you can only
    push objects vertically.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在关卡前添加了一条消息，介绍了Vertibot角色，并给玩家一些指示：只要你是Vertibot，你只能垂直推物体。
- en: '![image](../images/pg135-02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg135-02.jpg)'
- en: '*Giving instructions to the player*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*给玩家指示*'
- en: So there’s the finished level! Try playing through the first few levels of the
    finished *Robot Heist* game at *[http://tinyurl.com/robotheist/](http://tinyurl.com/robotheist/)*.
    Can you identify what each level is teaching and how?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完成的关卡！尝试玩一下完成的*机器人盗窃案*游戏的前几个关卡，网址是 *[http://tinyurl.com/robotheist/](http://tinyurl.com/robotheist/)*。你能辨认出每个关卡在教学什么以及如何教学吗？
- en: Designing Levels for Both Robots
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为两个机器人设计关卡
- en: The first level was designed with just Vertibot in mind, but at the heart of
    *Robot Heist* is the theme of having both robots work together to get through
    challenges. Can you come up with levels about teamwork? The following sections
    provide you with some ideas to use as starting points.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个关卡是专为Vertibot设计的，但*机器人盗窃案*的核心主题是让两个机器人共同合作，通过挑战。你能设计一些关于团队合作的关卡吗？以下部分为你提供了一些可以作为起点的想法。
- en: Basic Teamwork
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本的团队合作
- en: 'Here is a very simple example of how to use gates to force cooperation: a robot
    can pass this gate only if the other robot is holding down one of the panels on
    either side of it.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的示例，展示了如何使用门来迫使合作：一个机器人只有在另一个机器人按住两侧面板之一时，才能通过这扇门。
- en: '![image](../images/pg136-01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg136-01.jpg)'
- en: '*Taking turns to hold the gate open*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*轮流保持门开启*'
- en: Getting both robots through requires each of them to take a turn holding the
    door for the other.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让两个机器人通过，需要每个机器人轮流为另一个机器人撑住门。
- en: Using a Crate
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用箱子
- en: 'Here’s a more complicated example: to hold the gate open, the robots need to
    push a crate onto the panel.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更复杂的示例：为了保持门开启，机器人们需要将箱子推到面板上。
- en: '![image](../images/pg136-02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg136-02.jpg)'
- en: '*Getting to the crate*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*到达箱子*'
- en: Because the crate is located up and to the right of the panel, it requires each
    robot to do some pushing and some door holding. Note that I used the floor patterns
    to show a path from the crate to where it needs to be pushed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因为箱子位于面板的上方和右侧，所以每个机器人都需要推箱子并保持门的开启。注意，我使用了地面图案来展示从箱子到需要推送的位置的路径。
- en: In the next scenario, the robots have to coordinate their movements more closely.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个场景中，机器人必须更加紧密地协调他们的动作。
- en: '![image](../images/pg137-01.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg137-01.jpg)'
- en: '*Working together with a crate*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*与箱子共同工作*'
- en: Horibot has to move into just the right position to push the crate when Vertibot
    moves it in front of him. In later levels, as the player gets better at teamwork,
    you can design situations that require them to coordinate the robots in more complicated
    ways.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Horibot必须站在恰当的位置，当Vertibot将箱子推到他面前时，他才能推箱子。随着玩家在团队合作上越来越熟练，你可以设计需要更复杂协调的关卡。
- en: Splitting Up the Robots
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分开机器人
- en: What do you think about this idea? After the robots have learned to work together,
    try splitting them up!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得这个想法怎么样？在机器人学会合作之后，试着把它们分开！
- en: '![image](../images/pg137-02.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg137-02.jpg)'
- en: '*Robots split up*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*机器人分开*'
- en: Even though they’re in different areas, they still need to look out for each
    other by opening gates and blocking lasers. A cool part of level design is that
    once the player thinks they know how everything works, you can add a twist to
    shake things up and keep them on their toes!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 即使他们处于不同的区域，他们仍然需要通过开门和阻挡激光来互相照应。关卡设计的一个酷点是，一旦玩家认为他们已经掌握了所有机制，你就可以加入一些意外的变化，让他们保持警觉！
- en: Each idea is just one moment to fit in a larger level. What kind of levels can
    you build around these ideas? Can you come up with different challenges?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个想法都是一个时刻，适合融入更大的层面。你能围绕这些想法构建哪些层次？你能提出不同的挑战吗？
- en: '![image](../images/pg138-01.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg138-01.jpg)'
- en: Putting It All Together
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将所有内容汇总
- en: After we’ve introduced different objects to the player, we can start combining
    them. What does a level that combines lasers and gates look like? What about a
    level with crates and guards?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在向玩家介绍了不同的物体之后，我们可以开始将它们组合起来。一个结合了激光和门的关卡是什么样的？如果是一个结合了箱子和守卫的关卡呢？
- en: Here’s a level I made that combines lasers, gates, and guards. It’s one of the
    first levels I made, and it ended up in the finished game almost unchanged from
    the original version.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我制作的一个关卡，结合了激光、门和守卫。它是我做的第一个关卡之一，最终几乎没有改变地出现在了成品游戏中。
- en: '![image](../images/pg139-01.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/pg139-01.jpg)'
- en: '*A level with lasers, gates, and guards*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个包含激光、门和守卫的关卡*'
- en: In this level, the guard patrols around its room, moving on and off the blue
    panels. When it’s on the panels, the gates blocking the way to the exit open.
    When it moves off the panels, the gates blocking the lasers open, zapping the
    player if they’re standing in the wrong place! This level is all about the player
    using the right timing to get across the screen.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个关卡中，守卫在它的房间内巡逻，走到蓝色面板上或从上面走开。当它站在面板上时，阻碍通往出口的门会打开。当它离开面板时，阻挡激光的门会打开，如果玩家站在错误的位置，就会被激光击中！这个关卡的重点是玩家利用正确的时机通过屏幕。
- en: This level works only if the player has already learned about gates, lasers,
    and guards and how they work. Before you can combine objects like this, you need
    to introduce each object on its own; otherwise, the player will have no idea what’s
    going on.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个关卡只有在玩家已经学会了门、激光和守卫以及它们的工作方式之后才会生效。在你将这些物体组合在一起之前，你需要单独介绍每个物体；否则，玩家根本不会知道发生了什么。
- en: What You Learned
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: In this chapter, you learned about level design in more depth. Level design
    introduces concepts, builds on them, and combines them in fun and unexpected ways.
    A level is a set of challenges but also a virtual place and an image. When you’re
    thinking as a level designer, you should consider all three of these perspectives
    at the same time. And always look for ways to make your levels play better.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你更深入地了解了关卡设计。关卡设计引入概念，构建这些概念，并以有趣且出乎意料的方式将它们结合在一起。一个关卡是由一系列挑战组成的，但它也是一个虚拟的场所和一个图像。当你作为关卡设计师思考时，应该同时考虑这三个角度。并且始终寻找让你的关卡更加有趣的方式。
- en: That’s all the time we’ll spend on *Robot Heist*. If you’re curious about what
    any of the later levels look like, take a peek at them in the PuzzleScript editor.
    Remember that you can CTRL-click on any level to load it into the game.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在*机器人抢劫*上花费的所有时间。如果你对后面的关卡长什么样感到好奇，可以在PuzzleScript编辑器中看看它们。记住，你可以按住CTRL键点击任何一个关卡，将其加载到游戏中。
- en: You’re now a PuzzleScript maestro! Congratulations! In the next and final chapter,
    I’ll recommend some other PuzzleScript games to check out and present some game
    design challenges to try.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在是一个PuzzleScript大师了！恭喜你！在接下来的最后一章，我将推荐一些其他值得一玩的PuzzleScript游戏，并提出一些游戏设计挑战供你尝试。
