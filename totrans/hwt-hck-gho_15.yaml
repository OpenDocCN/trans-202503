- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Nevertheless, We Persisted
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们依旧坚持了下来
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'While we’re waiting for our shell to phone home, there is one small task that
    needs our immediate attention: AWS persistence. One might argue that Jenkins’s
    access keys provide all the persistence we need, since access keys are often difficult
    to rotate and require reviewing hundreds of jobs for potential hardcoded credentials.
    It is such a critical piece of any DevOps infrastructure that it ironically succumbs
    to the same fallacies DevOps is so arrogantly belligerent against—the most recent
    proof being that the credentials we retrieved from Chef were still very much in
    use.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们等待我们的 shell 向主机发送信号时，还有一项小任务需要我们立即处理：AWS 持久化。有人可能会辩称，Jenkins 的访问密钥提供了我们所需的所有持久化，因为访问密钥通常很难旋转，并且需要检查数百个作业，以查找潜在的硬编码凭证。它是任何
    DevOps 基础设施中的关键组成部分，具有讽刺意味的是，它也容易遭遇 DevOps 对抗的同样谬论——最新的证据就是我们从 Chef 获取的凭证仍然在使用中。
- en: Nevertheless, we have some time to kill while waiting for our shell on a GP
    machine, so let’s strengthen our grip on MXR Ads.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在等待 GP 机器上的 shell 时还有一些空闲时间，所以让我们进一步巩固对 MXR Ads 的控制。
- en: The AWS Sentries
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 哨兵
- en: Backdooring an AWS account can be a delicate procedure involving navigating
    a treacherous sea of monitoring tools and sensitive alerts. AWS has made considerable
    efforts to spoon-feed its customers all sorts of indicators of suspicious activity
    and what it considers to be insecure configurations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对 AWS 账户进行后门植入是一项精细的操作，需要在充满监控工具和敏感警报的环境中航行。AWS 已经做出了相当大的努力，通过各种指标来引导客户识别可疑活动以及认为不安全的配置。
- en: 'There are two AWS features in particular that one should be aware of before
    blindly attacking or backdooring an account: IAM Access Analyzer and CloudTrail
    Insights.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在盲目攻击或后门植入一个账户之前，应该特别注意两个 AWS 特性：IAM 访问分析器和 CloudTrail Insights。
- en: 'IAM Access Analyzer flags every policy document that grants read/write permissions
    to foreign entities. It most notably covers S3 buckets, KMS keys, Lambda functions,
    and IAM roles. When introduced, this feature killed one very stealthy persistence
    strategy: creating an admin role in the victim’s account and granting assume-role
    privileges to a foreign (our own) AWS account.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 访问分析器会标记每个授予外部实体读/写权限的策略文档。它主要覆盖 S3 存储桶、KMS 密钥、Lambda 函数和 IAM 角色。当这个功能首次推出时，它打破了一个非常隐秘的持久化策略：在受害者账户中创建管理员角色，并授予一个外部（我们的）AWS
    账户假设角色的权限。
- en: 'We can quickly check whether there are any Access Analyzer reports produced
    in the `eu-west-1` region:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以快速检查 `eu-west-1` 区域是否生成了任何访问分析器报告：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: MXR Ads does not yet take advantage of this feature, but we cannot bet our persistence
    strategy on the company’s ignorance of a feature that could expose our backdoor
    with a single click.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MXR Ads 目前还没有利用这一功能，但我们不能指望公司的无知能让我们持续保持后门，尤其是当这个功能只需要点击一次就能暴露我们的后门时。
- en: 'CloudTrail is an AWS service that logs almost every AWS API call in JSON format
    and optionally stores it on S3 and/or forwards it to another service like CloudWatch
    to configure metrics and alerts. [Listing 11-1](#listing11-1) is a sample event
    of an IAM call that created an access key for the admin user. The event is ripe
    with information essential to any threat analyst: source IP address, identity
    of the caller, source of the event, and so forth.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CloudTrail 是一项 AWS 服务，它几乎会记录每个 AWS API 调用，采用 JSON 格式，并可选择性地将日志存储在 S3 上，或将其转发到像
    CloudWatch 这样的其他服务，以便配置指标和警报。[清单 11-1](#listing11-1) 是一个 IAM 调用事件的示例，创建了管理员用户的访问密钥。该事件包含了对任何威胁分析师来说至关重要的信息：源
    IP 地址、调用者身份、事件来源等等。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 11-1: CloudTrail `CreateAccessKey` event'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11-1：CloudTrail `CreateAccessKey` 事件
- en: You have got to hand it to AWS for making logging events so intuitive.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你不得不佩服 AWS 将日志事件做得如此直观。
- en: MXR Ads has a global and comprehensive logging strategy covering all regions,
    as displayed in [Listing 11-2](#listing11-2).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MXR Ads 拥有覆盖所有区域的全球综合日志策略，如[清单 11-2](#listing11-2)所示。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 11-2: Configuration of a trail on CloudTrail that forwards logs to
    CloudWatch and S3'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11-2：在 CloudTrail 上配置一个将日志转发到 CloudWatch 和 S3 的轨迹
- en: Logs are forwarded to the S3 bucket `mxrads-cloudtrail-all` 2.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 日志被转发到 S3 存储桶 `mxrads-cloudtrail-all` 2。
- en: We see from the flag `HasInsightSelectors` 1 that MXR Ads is experimenting with
    a CloudTrail feature called *Insights*, which detects a spike in API calls and
    flags it as a suspicious event. As of this moment, it only reports write API calls,
    like `RunInstance`, `CreateUser`, `CreateRole`, and so on. We can still go nuts
    with read-only and reconnaissance calls, but as soon as we start automating user
    account creation, for instance, we must be careful not to hit the dynamic threshold
    set by CloudTrail Insights.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从标志 `HasInsightSelectors` 1 中，我们看到 MXR Ads 正在尝试一个名为 *Insights* 的 CloudTrail
    功能，它检测 API 调用的激增并将其标记为可疑事件。截至目前，它只报告写操作的 API 调用，如 `RunInstance`、`CreateUser`、`CreateRole`
    等等。我们仍然可以对只读和侦察性调用进行操作，但一旦开始自动化用户账户创建等操作时，我们必须小心不要触及 CloudTrail Insights 设置的动态阈值。
- en: 'These two features (CloudTrail Insights and IAM Access Analyzer) complement
    other existing services, like GuardDuty, that watch for suspicious events, such
    as disabling security features (CloudTrail) and communicating with known-bad domains.
    We can check if GuardDuty is enabled in a given region with the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个功能（CloudTrail Insights 和 IAM Access Analyzer）是对其他现有服务的补充，例如 GuardDuty，它们监视可疑事件，如禁用安全功能（CloudTrail）和与已知恶意域的通信。我们可以使用以下命令检查某个区域是否启用了
    GuardDuty：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even if MXR Ads neglected to implement all these novelty features, CloudTrail
    is such a basic component that almost every company has it enabled by default.
    We could empty the S3 bucket storing the CloudTrail data, but the logs would still
    be available in CloudTrail itself for at least 90 days.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 MXR Ads 忽略了实现所有这些新颖的功能，CloudTrail 作为一个基础组件，几乎每个公司都会默认启用它。我们可以清空存储 CloudTrail
    数据的 S3 存储桶，但日志仍然会至少在 CloudTrail 中保留 90 天。
- en: 'Whenever logs are so easily available and useful, caution would advise us to
    assume the worst: monitoring dashboards tracking API calls, IP addresses, types
    of services called, unusual queries to highly privileged services, and so on.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每当日志如此容易获得且非常有用时，谨慎的做法是假设最坏的情况：监控仪表板跟踪 API 调用、IP 地址、调用的服务类型、对高权限服务的异常查询等等。
- en: 'And the cherry on top: Terraform. We know that MXR Ads relies on Terraform
    to maintain its infrastructure. If we were to manually change the wrong resource,
    it would stand out like a sore thumb on the next `terraform plan` command. An
    email bearing the subject “You’ve Been Hacked” might have a better chance of going
    unnoticed.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个锦上添花的因素：Terraform。我们知道 MXR Ads 依赖 Terraform 来维护其基础设施。如果我们手动更改错误的资源，下一次运行
    `terraform plan` 命令时它会像一个显眼的伤口一样引人注目。带有主题“你已被黑” 的邮件或许能更容易被忽略。
- en: These are some of the main pitfalls to keep in mind when interacting with an
    AWS account. They truly are landmines that can blow up at the slightest misstep.
    It almost makes you miss the old days of backdooring a Windows Active Directory,
    when aggregating and parsing event logs from a single machine was a two-day job.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在与 AWS 账户交互时需要牢记的主要陷阱。它们真的是地雷，稍有不慎就会爆炸。几乎让人怀念起以前在 Windows Active Directory
    中植入后门的日子，那时从单台机器收集和解析事件日志是一个两天的工作。
- en: Now, if you’re in a situation where your target has very poor security and you
    feel you can get away with manually creating a couple of access keys, adding a
    few believable IAM users, and giving them admin privileges, please be my guest.
    In that case there is no need to overengineer the backdoor strategy, especially
    knowing that Jenkins’s access keys are pretty stable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你正处于目标安全性非常差的情况下，并且觉得自己可以通过手动创建几个访问密钥，添加一些可信的 IAM 用户并赋予他们管理员权限，那么请随意。在这种情况下，完全不需要过度设计后门策略，尤其是考虑到
    Jenkins 的访问密钥相对稳定。
- en: If, however, the company looks overly paranoid—tight access controls, strict
    and limited privileges, a clean list of active users, and properly configured
    CloudTrail, CloudWatch, and other monitoring tools—you may need a more robust
    and stealthier backup strategy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果公司看起来过于多疑——严格的访问控制、有限的权限、干净的活跃用户列表，以及正确配置的 CloudTrail、CloudWatch 和其他监控工具——那么你可能需要一个更强大且更加隐蔽的备份策略。
- en: For the sake of argument, let’s give MXR Ads the benefit of the doubt and assume
    the worst. How can we maintain persistent access while flying under the radar?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了讨论的方便，我们暂且给 MXR Ads 一个怀疑的好处，假设情况最坏。我们如何在不被察觉的情况下保持持续的访问？
- en: Persisting in the Utmost Secrecy
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持绝对机密
- en: Our backdoor strategy will follow the hippest design architectures and be fully
    serverless and event-driven. We’ll configure a watchdog to fire upon specific
    events and trigger a job that will re-establish our access when those events are
    detected.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的后门策略将遵循最新的设计架构，完全无服务器并且事件驱动。我们将配置一个监视程序，在特定事件发生时触发，并在检测到这些事件时触发一个作业，以恢复我们的访问权限。
- en: Translated into AWS jargon, the watchdog would consist of a Lambda function
    triggered by an event of our choosing. We can opt for a CloudWatch event that
    fires every day at 10 AM, for instance, or a load balancer that receives a predefined
    request. We choose to go with an event fired when an S3 bucket receives new objects.
    Both MXR Ads and GP use this same trigger, so we have a higher chance of blending
    in. Once executed, the Lambda will dump its attached role credentials and send
    them to our own S3 bucket. The credentials we receive will be valid for one hour
    but will hold enough privileges to permanently restore durable access.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译成 AWS 行话，监视程序将由一个 Lambda 函数组成，该函数由我们选择的事件触发。例如，我们可以选择一个每天上午 10 点触发的 CloudWatch
    事件，或者一个接收到预定义请求的负载均衡器。我们选择一个事件，该事件会在 S3 桶接收到新对象时触发。MXR Ads 和 GP 都使用这个相同的触发器，因此我们有更高的机会与其融合。一旦执行，Lambda
    将转储其附加的角色凭证，并将其发送到我们自己的 S3 桶。我们收到的凭证有效期为一小时，但足以恢复持久的访问权限。
- en: 'Let’s review our detection checklist: the Lambda function will be triggered
    by some frequently occurring internal event (in this case, when an object is uploaded
    to MXR Ads’ S3 bucket) and will, in response, perform a rather boring put-object
    call to deposit a file containing its credentials in a remote bucket. IAM Access
    Analyzer will hardly blink.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的检测清单：Lambda 函数将由一些频繁发生的内部事件触发（在这种情况下，当对象上传到 MXR Ads 的 S3 桶时），并且作为回应，将执行一个相当简单的
    put-object 调用，将包含其凭证的文件存储到远程桶。IAM Access Analyzer 几乎不会有任何反应。
- en: Terraform will not scream blue murder at the setup phase, as most of the resources
    will be created, not altered. Even if the source bucket is already declared in
    the state, technically we will be adding an `aws_s3_bucket_notification` resource,
    which is a completely separate entity in Terraform. All we have to do is choose
    a bucket with no Terraformed notification setup, and we are good to go.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 在设置阶段不会发出强烈的警告，因为大多数资源将被创建，而不是修改。即使源桶已经在状态中声明，从技术上讲，我们仍将添加一个 `aws_s3_bucket_notification`
    资源，这是 Terraform 中一个完全独立的实体。我们所需要做的就是选择一个没有 Terraform 通知设置的桶，之后就可以继续操作了。
- en: As for CloudTrail, the only event it will log is the trusted service *lambda.amazonaws.com*
    impersonating a role to execute the Lambda. This is a trivial event inherent to
    any Lambda execution that will go unnoticed by both Insights and GuardDuty.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 至于 CloudTrail，它将记录的唯一事件是可信服务 *lambda.amazonaws.com* 模拟角色执行 Lambda。这是任何 Lambda
    执行中固有的琐碎事件，不会引起 Insights 和 GuardDuty 的注意。
- en: Everything looks green!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来都很顺利！
- en: The Program to Execute
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行程序
- en: Let’s get to the implementation phase. The program that the Lambda will run
    is a straightforward Go binary that follows the key steps just described. The
    full implementation is available in this book’s repo ([http://bit.ly/2Oan7I7](http://bit.ly/2Oan7I7)),
    so here is a brief overview of the main logic.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入实现阶段。Lambda 将运行的程序是一个直接的 Go 二进制文件，按照刚才描述的关键步骤执行。完整的实现可以在本书的代码库中找到（[http://bit.ly/2Oan7I7](http://bit.ly/2Oan7I7)），以下是主要逻辑的简要概述。
- en: 'Every Go program destined to run in a Lambda environment starts off with the
    same boilerplate `main` function that registers the Lambda’s entry point (`HandleRequest`
    in this case):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个注定要在 Lambda 环境中运行的 Go 程序都会从相同的模板 `main` 函数开始，注册 Lambda 的入口点（在本例中为 `HandleRequest`）：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we have a classic setup to build an HTTP client and create the remote
    S3 URL to submit our response:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个经典的设置，用来构建一个 HTTP 客户端并创建远程 S3 URL 以提交我们的响应：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We dump the Lambda’s role credentials from environment variables and send them
    to our remote bucket:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从环境变量中转储 Lambda 的角色凭证，并将其发送到我们的远程桶：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `uploadToS3` method is a simple PUT request to the previously defined URL,
    so its implementation should be pretty obvious from reading the source code, which
    all in all is about 44 lines long.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`uploadToS3` 方法是一个简单的 PUT 请求，发送到之前定义的 URL，因此从源代码中可以很容易理解其实现，源代码总共有大约 44 行。'
- en: 'We compile the code and then zip the binary:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译代码，然后将二进制文件压缩：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we turn our attention to setting up the Lambda.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将注意力转向设置 Lambda。
- en: Building the Lambda
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建 Lambda
- en: The Lambda needs an execution role with heavy IAM and CloudTrail permissions
    to help us maintain stealthy long-term access (more on that later).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 需要一个具有强大 IAM 和 CloudTrail 权限的执行角色，以帮助我们维持隐秘的长期访问（稍后会详细说明）。
- en: 'We look for promising candidates we can impersonate with the Lambda AWS service.
    Remember that in order to impersonate a role, two conditions must be met: the
    user must be able to issue `sts assume-role` calls and the role must accept impersonation
    from said user. We list the roles available within MXR Ads’ AWS account:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们寻找有潜力的候选者，以便用 Lambda AWS 服务进行伪装。请记住，为了伪装一个角色，必须满足两个条件：用户必须能够发起 `sts assume-role`
    调用，并且该角色必须允许该用户进行伪装。我们列出了 MXR Ads AWS 账户中的可用角色：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We check each role’s IAM policy until we find a role with the set of permissions
    we need—ideally, full IAM and CloudTrail access:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查每个角色的 IAM 策略，直到找到一个具有我们所需权限的角色——理想情况下是完全的 IAM 和 CloudTrail 访问权限：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `dynamo-ssh-mgmt` role might do the trick, as it has an `IAMFullAccess`
    policy. Cheeky. If we had been creating our own role from scratch in MXR Ads’
    AWS account, we would not have dared to attach such an obvious policy. However,
    since they’re already using it, we might as well take advantage of it. Plus, this
    role lacks CloudWatch write permissions, so the Lambda will silently discard its
    execution logs upon termination rather than passing them to CloudWatch. Perfect.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`dynamo-ssh-mgmt` 角色可能可以派上用场，因为它具有 `IAMFullAccess` 策略。狡猾。如果我们在 MXR Ads 的 AWS
    账户中从零开始创建角色，我们可能不会敢于附加这样一个明显的策略。然而，既然他们已经在使用它，我们不妨利用一下。而且，这个角色缺少 CloudWatch 写权限，因此
    Lambda 在终止时会悄悄丢弃其执行日志，而不是将其传递给 CloudWatch。完美。'
- en: 'As always, we try hiding in plain sight by sticking to existing naming conventions.
    We look up existing Lambda functions in the `eu-west-1` region for inspiration:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，我们通过遵循现有的命名约定来试图隐匿在明处。我们查看 `eu-west-1` 区域中现有的 Lambda 函数，以寻求灵感：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We’ll settle on the name `support-metrics-calc` and call the `create-function`
    API to register our backdoored Lambda:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定使用名称 `support-metrics-calc`，并调用 `create-function` API 来注册我们的后门 Lambda：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now to the trigger event itself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看触发事件本身。
- en: Setting Up the Trigger Event
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置触发事件
- en: Ideally, we want to target an S3 bucket that’s regularly updated by MXR Ads,
    but not so often that it would trigger our Lambda 1,000 times a day.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望瞄准一个由 MXR Ads 定期更新的 S3 桶，但并不会频繁到每天触发 Lambda 1,000 次的程度。
- en: 'How about s4d.mxrads.com, the bucket storing all creatives that we looked at
    in Chapter 8? A quick `list-objects-v2` API call shows that the update pace is
    relatively low, between 50 and 100 files a day:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，怎么样呢？s4d.mxrads.com 是我们在第 8 章中查看过的存储所有创意的桶。通过一个快速的 `list-objects-v2` API
    调用可以发现，更新速度相对较慢，每天在 50 到 100 个文件之间：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can reduce the trigger rate by sampling the objects firing the notification
    event. We’ll make it so only objects with a key name beginning with `"2"` will
    trigger our Lambda, giving us a 1/16 sample rate (assuming a hexadecimal key space,
    evenly distributed). This roughly translates to three to six invocations a day.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过对触发通知事件的对象进行采样来减少触发率。我们将设置为仅以 `"2"` 开头的对象才会触发 Lambda，这样我们就得到了 1/16 的采样率（假设十六进制键空间均匀分布）。这大约意味着每天三到六次调用。
- en: Sold.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 成交。
- en: 'We explicitly allow the S3 service to call our Lambda function. The `statement-id`
    parameter is an arbitrary, unique name:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们明确允许 S3 服务调用我们的 Lambda 函数。`statement-id` 参数是一个任意的、唯一的名称：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we set up the bucket rule that only triggers events upon creating objects
    starting with the `"2"` prefix:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置桶规则，仅在创建以 `"2"` 前缀开头的对象时触发事件：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Brilliant. We have a solid persistence strategy that bypasses old and new detection
    features alike.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。我们有了一个可靠的持久化策略，能够绕过旧的和新的检测功能。
- en: Now assume our Jenkins access gets revoked somehow and we would like to use
    our Lambda credentials to re-establish permanent access. Should we just spawn
    a new IAM user with unlimited privileges and carry on with our lives? Not the
    wisest approach. Any monitoring solution based on CloudTrail could pick up this
    odd request in a matter of minutes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的 Jenkins 访问权限被撤销，并且我们希望使用 Lambda 凭据重新建立永久访问。我们是否应该直接创建一个拥有无限权限的新 IAM 用户，继续我们的生活？这不是最明智的做法。任何基于
    CloudTrail 的监控解决方案都可能在几分钟内捕捉到这个异常请求。
- en: The current CloudTrail configuration, as we saw earlier, aggregates logs from
    all regions into the one `eu-west-1` region. The logs are then pushed into S3
    and CloudWatch where they can be consumed by monitoring devices. This event-forwarding
    feature is called a *trail*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，当前的 CloudTrail 配置将所有区域的日志汇总到 `eu-west-1` 区域。然后，这些日志会被推送到 S3 和 CloudWatch，供监控设备使用。这个事件转发功能被称为
    *trail*。
- en: Before calling any IAM operation, we need to disrupt this trail.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用任何 IAM 操作之前，我们需要打乱这个日志记录。
- en: Covering Our Tracks
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐藏痕迹
- en: Notice how our intention is not to disable logging but to disrupt the trail
    itself. Indeed, it is currently impossible to completely disable CloudTrail or
    make it skip events. No matter what we do, our API calls will still be visible
    in the CloudTrail event dashboard for the next 90 days.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的目的是打乱日志记录，而不是完全禁用它。事实上，目前无法完全禁用 CloudTrail 或使其跳过事件。无论我们做什么，我们的 API 调用仍然会出现在
    CloudTrail 事件仪表板上，持续 90 天。
- en: The trail, however, can be reconfigured to omit forwarding certain events. It
    can even black out entire regions while we carry out our nefarious tasks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，日志记录可以重新配置，排除某些事件的转发。我们甚至可以在执行恶意任务时，将整个区域的日志记录隐藏。
- en: No trail means no logs on S3, no GuardDuty, no CloudTrail Insights, no CloudWatch
    metrics, and no custom security dashboards. Just like dominos, all monitoring
    tools inside and outside AWS will fall one after the other in a deafening silence.
    We could add 100 IAM users or start 1,000 instances in São Paulo and nobody would
    notice a thing, except perhaps for the accounting department.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 没有日志记录意味着 S3 上没有日志，没有 GuardDuty，没有 CloudTrail Insights，没有 CloudWatch 指标，也没有自定义安全仪表板。就像多米诺骨牌一样，所有的监控工具，无论是
    AWS 内部还是外部，都会相继倒下，发出沉默的巨响。如果我们添加 100 个 IAM 用户或在圣保罗启动 1,000 个实例，除了财务部门外，没人会注意到。
- en: 'Here’s a quick example showing how we can reconfigure the trail to exclude
    global (IAM, STS, and so on) and multiregion events:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的示例，展示了我们如何重新配置日志记录以排除全局（IAM、STS 等）和多区域事件：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Starting from this instant, we have *carte blanche* to create users and access
    keys, and do all sorts of tomfoolery. Someone manually going through the CloudTrail
    dashboard might pick up on our API calls if we are extremely careless, but all
    automated solutions and tools will be in the dark.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一刻开始，我们有了 *特权授权*，可以创建用户和访问密钥，进行各种胡闹。如果有人手动查看 CloudTrail 仪表板，可能会发现我们的 API 调用，前提是我们非常粗心，但所有自动化解决方案和工具都将处于黑暗中。
- en: Recovering Access
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恢复访问
- en: Now that we have disabled CloudTrail, we can move on to creating a more permanent
    set of AWS credentials.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经禁用了 CloudTrail，可以继续创建更永久的 AWS 凭证。
- en: 'Users and groups affiliated with the default admin policy are easy prey. IAM
    users are limited to two access keys, so we find a user with one or zero access
    keys and proceed to inject them with an additional key that we will secretly own.
    First, we list the users and groups:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与默认管理员策略关联的用户和组很容易成为攻击目标。IAM 用户的访问密钥最多只有两个，因此我们会找到一个拥有一个或零个访问密钥的用户，并继续注入一个我们将秘密拥有的附加密钥。首先，我们列出用户和组：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then we list their currently defined access keys:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们列出他们当前定义的访问密钥：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Great, *b.daniella* only has one key. With our target identified, we create
    an access key:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，*b.daniella* 只有一个密钥。确定目标后，我们创建一个访问密钥：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And we are back in business. We’ve regained permanent credentials.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们恢复了业务。我们已经重新获得了永久凭证。
- en: We cannot re-enable multiregion logging just yet, though. We need to wait at
    least half an hour after our last API call. This waiting period is critical, because
    it can take up to 20 minutes for the event to get to CloudTrail. If we reactivate
    global event logging too early, some of our actions might slip into the trail,
    and therefore into S3, Insights, CloudWatch, and other platforms.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前还无法重新启用多区域日志记录。我们需要在最后一次 API 调用后至少等待半小时。这个等待时间至关重要，因为事件到达 CloudTrail 可能需要最多
    20 分钟。如果我们过早重新激活全局事件日志记录，一些操作可能会进入日志记录，从而进入 S3、Insights、CloudWatch 和其他平台。
- en: Alternative (Worse) Methods
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代（更糟糕）方法
- en: You may be wondering why we don’t simply use the Lambda itself to automate subsequent
    IAM/CloudTrail actions. A Lambda function can only last a maximum of 15 minutes,
    so there is a reasonable chance it would re-enable global event logs too soon.
    We could hook another Lambda on our side to avoid this race condition, but that’s
    too much pipeline work for something so trivial.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我们不直接使用Lambda来自动化后续的IAM/CloudTrail操作呢？Lambda函数最大只能运行15分钟，所以很有可能它会过早地重新启用全局事件日志。我们可以在我们这边挂载另一个Lambda来避免这种竞争条件，但这对于如此简单的事情来说，太过繁琐了。
- en: Alternatively, we could opt for running a reverse shell directly in the Lambda
    environment, but that’s far from convenient. The function runs in a minimal container
    where the filesystem is mounted as read-only, except for the */tmp* folder, which
    lacks the executable flag. We would need to manually load the reverse shell in
    memory as an independent process, so it does not get terminated by the Lambda
    handler. All for what? A barren land lacking the most basic utilities that will
    be recycled by AWS in 60 minutes? Not worth the effort.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们也可以选择直接在Lambda环境中运行反向Shell，但那并不方便。该函数运行在一个最小化的容器中，文件系统以只读方式挂载，除了*/tmp*文件夹，该文件夹没有可执行标志。我们需要手动将反向Shell加载到内存中作为独立进程运行，以避免被Lambda处理程序终止。这一切又是为了什么？一个缺乏最基本实用工具的荒芜之地，而且AWS会在60分钟内回收它？不值得。
- en: Resources
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: 'More information on IAM Access Analyzer: [https://aws.amazon.com/iam/features/analyze-access/](https://aws.amazon.com/iam/features/analyze-access/).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于IAM访问分析器的更多信息：[https://aws.amazon.com/iam/features/analyze-access/](https://aws.amazon.com/iam/features/analyze-access/)。
- en: 'More information on CloudTrail Insights: [https://amzn.to/38ROX6E](https://amzn.to/38ROX6E).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于CloudTrail Insights的更多信息：[https://amzn.to/38ROX6E](https://amzn.to/38ROX6E)。
- en: 'A list of AWS S3 notification events: [https://amzn.to/2MTqg1o](https://amzn.to/2MTqg1o).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS S3通知事件列表：[https://amzn.to/2MTqg1o](https://amzn.to/2MTqg1o)。
- en: 'More information about centralizing logs: [https://www.loggly.com/ultimate-guide/centralizing-windows-logs/](https://www.loggly.com/ultimate-guide/centralizing-windows-logs/).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于集中化日志的更多信息：[https://www.loggly.com/ultimate-guide/centralizing-windows-logs/](https://www.loggly.com/ultimate-guide/centralizing-windows-logs/)。
- en: 'More information about querying Windows logs: [https://evotec.xyz/powershell-everything-you-wanted-to-know-about-event-logs/](https://evotec.xyz/powershell-everything-you-wanted-to-know-about-event-logs/).'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于查询Windows日志的更多信息：[https://evotec.xyz/powershell-everything-you-wanted-to-know-about-event-logs/](https://evotec.xyz/powershell-everything-you-wanted-to-know-about-event-logs/)。
