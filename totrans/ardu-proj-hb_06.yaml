- en: '**PART 5**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NUMERIC COUNTERS**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT 16: ELECTRONIC DIE'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**BOARD GAMES ARE PERILOUS ENOUGH WITHOUT ARGUMENTS OVER NUMBER READINGS FROM
    FALLEN OR LOST DICE. THE PERFECT SOLUTION: AN ELECTRONIC DIE.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0134-01.jpg)![image](../images/f0135-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 8 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: • Seven-segment LED display
  prefs: []
  type: TYPE_NORMAL
- en: • 74HC595 shift register
  prefs: []
  type: TYPE_NORMAL
- en: • Momentary tactile four-pin pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this project we’ll create a die using a seven-segment LED display. When the
    pushbutton is pressed, a pulse is sent to the Arduino, and the LED “shakes” and
    displays a random digit between 1 and 6.
  prefs: []
  type: TYPE_NORMAL
- en: This project uses a 74HC595 *shift register*, a small integrated circuit (IC)
    and sequential logic counter that allows the Arduino to make more connections
    than it usually can with the pins it has, by “shifting” and storing data. The
    shift register has 16 pins; at one end you’ll find a dot or semicircle, which
    marks pin 1 on the left. The pins are then numbered counterclockwise from here.
    [Figure 16-1](ch16.xhtml#ch16fig1) shows the pinout, and [Table 16-1](ch16.xhtml#ch16tab1)
    describes the function of each pin.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 16-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Pinout of the 74HC595 shift register
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f16-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**TABLE 16-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: 74HC595 shift register pins
  prefs: []
  type: TYPE_NORMAL
- en: '| **SHIFT REGISTER PINS** | **CONNECTIONS** | **PIN FUNCTION** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Pins 1–7, 15 | Q0–Q7 | Output pins |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 8 | GND | Ground, VSS |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 9 | Q7 | Serial out |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 10 | MR | Master Reclear, active low |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 11 | SH_CP | Shift register clock pin (CLOCK pin) |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 12 | ST_CP | Storage register clock pin (LATCH pin) |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 13 | OE | Output Enable, active low |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 14 | DS | Serial data input (DATA pin) |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 16 | VCC | Positive power |'
  prefs: []
  type: TYPE_TB
- en: The wire attached to Arduino pin 2 is connected to our pushbutton and, when
    pressed, will create a pulse. To use the die, push the button to make the digit
    on the die shake and display a random digit.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the seven-segment LED into your breadboard, making sure it straddles
    the center break; otherwise, the pins opposite each other will connect and short-circuit.
    Connect pin 3 to the GND rail, and connect 220-ohm resistors to the remaining
    pins except pin 8, which is not used. The resistors are needed to prevent the
    segment LEDs from burning out. See [Figure 16-2](ch16.xhtml#ch16fig2) for this
    setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 16-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the seven-segment LED
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f16-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the 74HC595 shift register into the breadboard with the semicircle marker
    of the IC on the left side. The bottom left-hand pin should be pin 1\. Your IC
    needs to straddle the center break, as shown in [Figure 16-3](ch16.xhtml#ch16fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 16-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The 74HC595 shift register should straddle the breadboard center break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f16-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Carefully make the connections shown in the following table between the seven-segment
    LED display and the 74HC595 shift register.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SEVEN-SEGMENT LED DISPLAY** | **SHIFT REGISTER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 1 (E)[*](ch16.xhtml#fn01) | Pin 4 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 2 (D)[*](ch16.xhtml#fn01) | Pin 3 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 3 |  | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 4 (C)[*](ch16.xhtml#fn01) | Pin 2 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 5 (DP)[*](ch16.xhtml#fn01) | Pin 7 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 6 (B)[*](ch16.xhtml#fn01) | Pin 1 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 7 (A)[*](ch16.xhtml#fn01) | Pin 15 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 8 |  | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 9 (F)[*](ch16.xhtml#fn01) | Pin 5 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 10 (G)[*](ch16.xhtml#fn01) | Pin 6 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[*](ch16.xhtml#fn_01) These pins require a 220-ohm resistor between the seven-segment
    LED display and the 74HC595 shift register.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now connect the remaining shift register pins to the Arduino as shown in the
    following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SHIFT REGISTER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 9 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 10 | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 11 | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 12 | Pin 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 13 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 14 | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 16 | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pulse | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the pushbutton into the breadboard with the pins straddling the center
    break, as shown in [Figure 16-4](ch16.xhtml#ch16fig4). Connect one side to pin
    2 on the Arduino and the other side to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 16-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The pushbutton should also straddle the breadboard center break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f16-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Confirm that your setup matches the circuit diagram in [Figure 16-5](ch16.xhtml#ch16fig5),
    and upload the code in “[The Sketch](ch16.xhtml#ch16lev1sec03)” on [page 140](ch16.xhtml#page_140).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 16-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the electronic die
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f16-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first sets the pins to control the 74HC595 chip that drives the seven-segment
    LED. When the seven-segment LED display is powered up, the dot is lit. When you
    press the pushbutton, the LEDs light in a short, rotating animation to signify
    that the die is shaking. After a moment a random number between 1 and 6 will be
    displayed. Press the button again to generate your next roll of the die.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 17: ROCKET LAUNCHER'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT WE’LL CREATE A PROGRAMMABLE COUNTDOWN TIMER THAT WE’LL USE
    TO LAUNCH A ROCKET BY IGNITING A FUSE WHEN THE COUNTDOWN REACHES 0.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0143-01.jpg)![image](../images/f0144-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Four-digit, seven-segment serial display
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: • 2 momentary tactile four-pin pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 3 LEDs (red, green, yellow)
  prefs: []
  type: TYPE_NORMAL
- en: • 3 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • SoftwareSerial
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a four-digit, seven-segment serial display that has a built-in integrated
    circuit to control the LEDs and can be connected to the Arduino with only three
    wires. When choosing your display, make sure it has an RX input so you’ll be able
    to control it with only one wire.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You could use a timer like this to set off anything that requires power, like
    a servomotor, LED, or alarm. You’ll use a potentiometer to select the duration
    of your countdown (anywhere from 5 to 60 seconds). The LED screen will display
    the digits so you can see what you are setting the countdown to. We’ll include
    two pushbuttons: an Arm button and a Launch button. Once you’ve chosen the duration
    of your countdown, press the Arm button to ready the timer. The red LED light
    shows that it’s armed. (The Arm button is a safety feature to prevent you from
    accidentally setting off the launcher.) Once you’ve armed the rocket, press the
    Launch button to start the countdown. The green LED light signifies that it’s
    ready, and the countdown begins.'
  prefs: []
  type: TYPE_NORMAL
- en: As the timer counts down, the piezo buzzer beeps every second. When the counter
    reaches five seconds, the timer beeps increasingly quickly until launch. When
    the timer reaches 0, power is sent through pin 7 to whatever output you have there—in
    this case, it lights the yellow LED. You could connect this timer to a buzzer,
    a servomotor to unlock a door, or even a fuse to ignite a rocket. I’ll show you
    how to make your own simple ignition for a fuse later in this project.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the seven-segment serial display RX pin to Arduino pin 3, connect VCC
    to +5V, and connect GND to Arduino GND via the breadboard, as shown in [Figure
    17-1](ch17.xhtml#ch17fig1). You might need to strip back some of the wire to make
    the connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SEVEN-SEGMENT SERIAL DISPLAY** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| RX | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 17-1:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the seven-segment display to the Arduino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the potentiometer into the breadboard and connect the left pin to +5V,
    the center pin to Arduino pin A0, and the right pin to GND, as shown in [Figure
    17-2](ch17.xhtml#ch17fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **POTENTIOMETER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Left pin | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Center pin | A0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Right pin | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 17-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Placing the potentiometer into the breadboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the red wire of the piezo buzzer to Arduino pin 4 and the black wire
    to GND, as shown in [Figure 17-3](ch17.xhtml#ch17fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 4 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 17-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the piezo buzzer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the two pushbuttons into your breadboard, with pins A and B on one side
    of the center break and pins D and C on the other, following the configuration
    in [Figure 17-4](ch17.xhtml#ch17fig4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The pin connections of the pushbutton
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, we’ll connect the pushbuttons, as shown in [Figure 17-5](ch17.xhtml#ch17fig5).
    To create the Arm button, connect pin C of the first pushbutton to GND and pin
    D to Arduino pin 5\. To create the Launch button, connect pin C of the other pushbutton
    to GND and pin D to Arduino pin 6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PUSHBUTTONS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Arm pin C | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Arm pin D | Pin 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Launch pin C | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Launch pin D | Pin 6 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 17-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the pushbuttons and LEDs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the red LED into the breadboard with the shorter, negative leg connected
    to pin B of the Arm button. Connect the other leg to a 220-ohm resistor, and connect
    the other side of the resistor to +5V. Then insert the green LED with the negative
    leg connected to pin B of the Launch button, and the positive leg connected to
    +5V via a 220-ohm resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **RESISTORS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive legs | +5V via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the igniter. We’re using a yellow LED as our igniter indicator for now.
    Insert it into the breadboard with the negative leg connected to GND and the positive
    leg connected to Arduino pin 7 via a 220-ohm resistor. (See “[Create a Working
    Fuse](ch17.xhtml#ch17lev1sec03)” on [page 149](ch17.xhtml#page_149) to learn how
    to make your own fuse igniter.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **IGNITER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative leg | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg | Pin 7 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: When the countdown reaches 0, pin 7 is set to `HIGH` and triggers the igniter.
    Instead of actually igniting a fuse, we light the yellow LED to represent the
    ignition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Confirm that your setup matches the circuit diagram in [Figure 17-6](ch17.xhtml#ch17fig6),
    and upload the code in “[The Sketch](ch17.xhtml#ch17lev1sec04)” on [page 151](ch17.xhtml#page_151).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-6:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the rocket launcher
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**CREATE A WORKING FUSE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of using an LED to indicate ignition, you can create a working fuse
    using a simple Christmas tree light. Be sure to wear eye protection when creating
    your fuse. These instructions are for entertainment purposes and should be carried
    out only by an adult.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*There may be restrictions to launching a hobby rocket or firework in your
    country or state, so please check beforehand. It is your responsibility to keep
    project use within the law.*'
  prefs: []
  type: TYPE_NORMAL
- en: Using a hobby drill, apply light pressure to the top of the glass casing on
    a Christmas light to cut it off (see [Figure 17-7](ch17.xhtml#ch17fig7)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-7:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cutting the tip with a hobby drill
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Cut near the tip of the glass casing and the top should pop off easily ([Figure
    17-8](ch17.xhtml#ch17fig8)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-8:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Popping off the tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now cut off the head of a wooden match (make sure you don’t ignite it!) and
    gently insert the match head into the open bulb, taking care not to damage the
    filament ([Figure 17-9](ch17.xhtml#ch17fig9)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-9:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inserting a match head into the bottom half of the bulb
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Finally, connect the bulb wires to your ignition wires. When power is sent to
    the bulb, the filament will heat up and ignite the match head ([Figure 17-10](ch17.xhtml#ch17fig10)),
    creating enough energy to ignite a fuse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-10:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the fuse has been lit
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f17-10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first defines each component and its connection to the Arduino. The
    SoftwareSerial library controls the four-digit, seven-segment serial LED display,
    while the analog input from the potentiometer changes the time displayed from
    5 to 60 seconds. When pressed, the Arm button acts as a digital switch and safety
    feature to allow the Launch button to be pressed. If the Arm button is pushed
    during countdown, the countdown aborts and the display resets.
  prefs: []
  type: TYPE_NORMAL
- en: The `tone` commands in the sketch pulse the piezo buzzer in time to the countdown
    to create a beep. When the countdown reaches 0, the igniter pin (in this case,
    connected to an LED) is set to `HIGH` and turns on the LED.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
