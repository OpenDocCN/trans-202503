["```\n10.times do\n  str = \"The quick brown fox jumps over the lazy dog.\"\n  puts str\nend\n```", "```\n str = \"The quick brown fox\"\n 10.times do\n   str2 = \"jumps over the lazy dog.\"\n   puts \"#{str} #{str2}\"\n    end\n```", "```\n    typedef struct rb_block_struct {\n     VALUE self;\n     VALUE klass;\n     VALUE *ep;\n     rb_iseq_t *iseq;\n     VALUE proc;\n    } rb_block_t;\n```", "```\n    typedef struct rb_control_frame_struct {\n        VALUE *pc;                  /* cfp[0] */\n        VALUE *sp;                  /* cfp[1] */\n        rb_iseq_t *iseq;            /* cfp[2] */\n        VALUE flag;                 /* cfp[3] */\n     VALUE self;                 /* cfp[4] / block[0] */\n        VALUE klass;                /* cfp[5] / block[1] */\n        VALUE *ep;                  /* cfp[6] / block[2] */\n        rb_iseq_t *block_iseq;      /* cfp[7] / block[3] */\n     VALUE proc;                 /* cfp[8] / block[4] */\n        const rb_method_entry_t *me;/* cfp[9] */\n\n    #if VM_DEBUG_BP_CHECK\n        VALUE *bp_check;            /* cfp[10] */\n    #endif\n    } rb_control_frame_t;\n```", "```\n#include <stdio.h>\nmain()\n{\n  int i, sum;\n  i = 1;\n  sum = 0;\n  while (i <= 10) {\n    sum = sum + i;\n    i++;\n  }\n  printf(\"Sum: %d\\n\", sum);\n}\n```", "```\nsum = 0\ni = 1\nwhile i <= 10\n  sum += i\n  i += 1\nend\nputs \"Sum: #{sum}\"\n```", "```\nsum = 0\n(1..10).each do |i|\n  sum += i\nend\nputs \"Sum: #{sum}\"\n```", "```\nrequire 'benchmark'\nITERATIONS = 1000000\nBenchmark.bm do |bench|\n  bench.report(\"iterating from 1 to 10, one million times\") do\n    ITERATIONS.times do\n      sum = 0\n      i = 1\n      while i <= 10\n        sum += i\n        i += 1\n      end\n    end\n  end\nend\n```", "```\n$ **ruby while.rb**\n      user     system      total        real\n      iterating from 1 to 10, one million times  0.440000   0.000000\n                                                 0.440000 (  0.445757)\n```", "```\nrequire 'benchmark'\nITERATIONS = 1000000\nBenchmark.bm do |bench|\n  bench.report(\"iterating from 1 to 10, one million times\") do\n    ITERATIONS.times do\n      sum = 0\n      (1..10).each do |i|\n        sum += i\n      end\n    end\n  end\nend\n```", "```\n$ **ruby each.rb**\n      user     system      total        real\n      iterating from 1 to 10, one million times  0.760000   0.000000\n                                                 0.760000 (  0.765740)\n```", "```\n def message_function\n   str = \"The quick brown fox\"\n   lambda do |animal|\n     puts \"#{str} jumps over the lazy #{animal}.\"\n      end\n    end\n function_value = message_function\n function_value.call('dog')\n```", "```\ndef message_function\n  str = \"The quick brown fox\"\n  nil\nend\n```", "```\n    def message_function\n   str = \"The quick brown fox\"\n   lambda do |animal|\n     puts \"#{str} jumps over the lazy #{animal}.\"\n      end\n    end\n    function_value = message_function\n function_value.call('dog')\n```", "```\n    def message_function\n      str = \"The quick brown fox\"\n      lambda do |animal|\n        puts \"#{str} jumps over the lazy #{animal}.\"\n      end\n    end\n function_value = message_function\n function_value.call('dog')\n```", "```\n    def message_function\n      str = \"The quick brown fox\"\n   func = lambda do |animal|\n        puts \"#{str} jumps over the lazy #{animal}.\"\n      end\n   str = \"The sly brown fox\"\n      func\n    end\n    function_value = message_function\n function_value.call('dog')\n```", "```\n$ **ruby modify_after_lambda.rb**\nThe sly brown fox jumps over the lazy dog.\n```", "```\nstr = \"The sly brown fox\"\n```", "```\ni = 0\nincrement_function = lambda do\n  puts \"Incrementing from #{i} to #{i+1}\"\n  i += 1\nend\ndecrement_function = lambda do\n  i -= 1\n  puts \"Decrementing from #{i+1} to #{i}\"\nend\n```", "```\nincrement_function.call\ndecrement_function.call\nincrement_function.call\nincrement_function.call\ndecrement_function.call\n```", "```\nIncrementing from 0 to 1\nDecrementing from 0 to -1\nIncrementing from 1 to 2\nIncrementing from 2 to 3\nDecrementing from -1 to -2\n```", "```\nIncrementing from 0 to 1\nDecrementing from 1 to 0\nIncrementing from 0 to 1\nIncrementing from 1 to 2\nDecrementing from 2 to 1\n```"]