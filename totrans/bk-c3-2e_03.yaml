- en: '**3**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SELECTORS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Selectors are the heart of CSS, and although the original CSS1 specification
    had only 5 or 6, CSS2 expanded the range with 12 more. CSS3 goes further still,
    roughly doubling the number of available selectors.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Selectors can be broadly separated into two categories. The first are those
    that act directly on elements defined in the document tree (`p` elements and `href`
    attributes, for example); this category contains *class*, *type*, and *attribute*
    selectors. For the sake of expediency, I’ll group these together under the banner
    of *DOM selectors*. The second category contains *pseudo-selectors* that act on
    elements or information that sits outside of the document tree (such as the first
    letter of a paragraph or the last child of a parent element). I cover pseudo-selectors
    in [Chapter 4](ch04.html#ch04)—here I discuss DOM selectors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 provides three new attribute selectors and one new *combinator*—that is,
    a selector that joins other selectors together, such as the child combinator (`>`)
    from CSS2\. These are defined in the Selectors Level 3 Module (*[http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)*),
    which is a *W3C Recommendation* and has widespread and stable implementation across
    browsers. Unless you specifically need to support IE6, you can start using these
    CSS3 selectors right away—many sites already do.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**Attribute Selectors**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Attribute selectors were introduced in CSS2, and, as you may expect from the
    name, they allow you to specify rules that match elements based on their attributes—such
    as `href` or `title`—and the values of those attributes. The four selectors defined
    in CSS2 are:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before moving on to the new selectors in CSS3, a quick recap of how each selector
    is utilized is worthwhile. For this, I’ll use the following markup, which is a
    (very short) contact list:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The *Simple Attribute Selector* applies rules to elements that have the specified
    attribute defined, regardless of that attribute’s value. So given the following
    code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'all of the `a` elements in my markup have a `rel` attribute, despite their
    having different values. In this case, therefore, all elements have the rule applied.
    If you want to be more specific, you can use the *Exact Attribute Value Selector*
    to define a value:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code applies the rule only to the second `a` element in the markup (➋)
    because it selects only elements that have the exact value of `friend`. If you
    want to select both of the elements that have this value, you would use the *Partial
    Attribute Value Selector*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code looks for the value of `friend` as part of a space-separated list
    (in most cases, a word) in any `rel` attribute and so applies the rule to elements
    ➊ and ➋.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The final selector, the *Language Attribute Selector*, applies rules to elements
    that have an attribute matching the first argument in the selector, the value
    of which is the second argument in the selector followed immediately by a hyphen.
    If that sounds weirdly specific, it’s because this selector is really only intended
    to match language subcodes. The example markup has two Spanish names, each of
    which has a `lang` attribute beginning with `es-` although one is for Spain (`es-ES`)
    and the other is for Mexico (`es-MX`). To select both of these, you use this code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的选择器，即*语言属性选择器*，将规则应用于具有与选择器中的第一个参数匹配的属性的元素，而该属性的值是选择器中的第二个参数，并紧接着一个连字符。如果这听起来有些奇怪的具体要求，那是因为这个选择器实际上只用于匹配语言子代码。示例标记中有两个西班牙语名字，每个名字的`lang`属性都以`es-`开头，尽管一个是西班牙（`es-ES`），另一个是墨西哥（`es-MX`）。要选择这两个元素，可以使用以下代码：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This selects all elements with `lang` attributes whose value begins with *es*,
    regardless of their country values—that is, elements ➋ and ➌. You could use this
    selector for any attributes with hyphen-separated values, but in the great majority
    of cases, those will be language codes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器会选择所有`lang`属性值以*es*开头的元素，不论它们的国家值是什么——也就是说，元素➋和➌。你可以将这个选择器用于任何具有连字符分隔值的属性，但在绝大多数情况下，这些值将是语言代码。
- en: '**NOTE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The attribute names used here aren’t taken from the spec but from Eric Meyer’s
    book* CSS Pocket Reference *(O’Reilly Media, 2011).*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*这里使用的属性名称并不是从规范中取的，而是来自Eric Meyer的书《CSS口袋参考》（O’Reilly Media, 2011）。*'
- en: '**New Attribute Selectors in CSS3**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**CSS3中的新属性选择器**'
- en: You’ve seen how useful attribute selectors can be for finding exact or partial
    values, but what if you want even more flexibility? CSS3’s new selectors provide
    flexibility with the power to match substrings within an attribute value. This
    feature makes them especially great for applying rules to XML documents, which
    can often have more varied attribute values than HTML—though they are still quite
    useful for HTML developers as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到属性选择器在查找精确或部分值时有多么有用，但如果你需要更多的灵活性呢？CSS3的新选择器提供了通过匹配属性值中的子字符串来实现灵活性的功能。这个特性使得它们特别适合用于应用规则到XML文档，因为XML的属性值通常比HTML更为多样化——尽管它们对HTML开发者也同样非常有用。
- en: '***Beginning Substring Attribute Value Selector***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***开始子字符串属性值选择器***'
- en: 'The first new attribute selector—which, to avoid having to repeat that mouthful
    of a title, I’ll refer to as the *Beginning Selector*—finds elements whose chosen
    attribute begins with the string supplied to it as an argument. It uses the caret
    (`^`) symbol to modify the equals sign in the selector. Here’s the full syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新的属性选择器——为了避免重复这么长的标题，我将其称为*开始选择器*——查找其所选属性以传递给它的字符串为开头的元素。它使用插入符号（`^`）来修改选择器中的等号。以下是完整的语法：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This code looks for the supplied value at the beginning of the specified attribute.
    To illustrate, consider the following example markup, showing a list of three
    items, each of which contains a hyperlink with different (albeit similar) values
    for the `title` attribute:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在指定属性的开头查找提供的值。为了说明这一点，考虑下面的示例标记，它展示了一个包含三个项目的列表，每个项目都包含一个具有不同（虽然相似）`title`属性值的超链接：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'I’ll apply this selector to the example markup:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把这个选择器应用到示例标记中：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, the rule will be applied to the `a` element in the first list
    item because the `title` attribute string begins with the word *image*. The rule
    will not be applied to the `a` element in the second item, however, because, although
    its `title` attribute contains that string, it doesn’t begin with it. Nor will
    it be applied to the third string, as that string doesn’t match.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，规则将应用于第一个列表项中的`a`元素，因为`title`属性字符串以*image*这个词开头。然而，规则不会应用于第二个项目中的`a`元素，尽管它的`title`属性包含了这个字符串，但它并不是以这个字符串开头。同样，第三个字符串也不会应用，因为这个字符串不匹配。
- en: '**NOTE**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In HTML documents, the attribute selector value is case insensitive; for XML
    documents, however, the value is case sensitive.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*在HTML文档中，属性选择器的值不区分大小写；然而，在XML文档中，值是区分大小写的。*'
- en: 'The Beginning Selector is especially handy when you want to add visual information
    to hyperlinks. Here’s an example of a typical hyperlink to an external website:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开始选择器在你想要为超链接添加视觉信息时特别有用。这里是一个典型的指向外部网站的超链接示例：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you see this link in your browser, you can’t immediately tell whether
    it’s a link to a page on the same website or to an external URI. With this new
    attribute, however, you can pass the protocol (*http*) as the argument and add
    an icon to signify external links clearly:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中看到这个链接时，你无法立刻判断它是指向同一网站的页面还是外部URI。然而，使用这个新属性后，你可以将协议（*http*）作为参数传递，并添加一个图标来清晰地标示外部链接：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The result is shown in [Figure 3-1](ch03.html#ch03fig1).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如[图 3-1](ch03.html#ch03fig1)所示。
- en: '![Image](graphics/f03-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f03-01.jpg)'
- en: '*Figure 3-1: An icon applied with the Beginning Selector*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：使用开始选择器应用的图标*'
- en: You can extend this to cover many other web protocols, some of which—*mailto*,
    *ftp*, and *https*—are shown in the following example and illustrated in [Figure
    3-2](ch03.html#ch03fig2).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个扩展到涵盖更多的Web协议，其中一些—*mailto*、*ftp*和*https*—在以下示例中有所展示，并在[图 3-2](ch03.html#ch03fig2)中进行了说明。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Image](graphics/f03-02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f03-02.jpg)'
- en: '*Figure 3-2: More examples of link icons with the Beginning Selector*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：使用开始选择器应用的更多链接图标示例*'
- en: Of course, the Beginning Selector also has many applications with attributes—such
    as `alt`, `cite`, and `title`—that accept more verbose values. And with the introduction
    of HTML5 and a whole range of new form elements and attributes, this selector
    and its soon-to-be-introduced siblings will become even more useful.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，开始选择器也有很多应用，适用于`alt`、`cite`和`title`等接受更多详细值的属性。随着HTML5的引入和一系列新表单元素与属性的出现，这个选择器及其即将推出的兄弟选择器将变得更加有用。
- en: 'Consider, for example, the proposed `datetime` attribute, which accepts date-string
    values such as `2015-03-14`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑提议中的`datetime`属性，它接受类似`2015-03-14`的日期字符串值：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This means that you could use the Beginning Selector to apply styles to all
    elements meeting a supplied year value, which is quite handy for calendar or archiving
    applications:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以使用开始选择器来为所有满足给定年份值的元素应用样式，这在日历或归档应用中非常有用：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '***Ending Substring Attribute Value Selector***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结束子字符串属性值选择器***'
- en: 'The *Ending Selector*, as I call it, works exactly like the Beginning Selector—just
    the other way around! That is, you use it to select attributes that *end* with
    the supplied value. The syntax differs by just one character: This time you use
    the dollar sign character (`$`) to modify the equal sign (`=`). Here’s the full
    syntax:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我称之为*结束选择器*，它的工作原理与开始选择器完全相同——只是反过来！也就是说，你用它来选择以给定值*结尾*的属性。语法只不同一个字符：这次你使用美元符号（`$`）来替换等号（`=`）。这里是完整的语法：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s look at the markup example from the previous section again, only this
    time apply the Ending Selector along with a new value:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一下前一节中的标记示例，只不过这次我们应用了结束选择器并使用了一个新值：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This time the rule applies to all of the list items, as all of their `title`
    attribute values end with the string `library`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这次规则适用于所有列表项，因为它们的`title`属性值都以字符串`library`结尾。
- en: 'Just like the Beginning Selector, you can use this selector to provide visual
    clarity to hyperlinks. But this time, instead of using the protocols at the beginning
    of the `href` attribute, you use the file types at the end. The code here shows
    rules for many popular file-type extensions:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就像开始选择器一样，你可以使用这个选择器为超链接提供视觉清晰度。不过这次，你不再使用`href`属性开头的协议，而是使用文件类型后缀。下面的代码展示了许多流行文件类型扩展的规则：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Figure 3-3](ch03.html#ch03fig3) shows examples of these rules applied.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-3](ch03.html#ch03fig3)展示了这些规则的应用实例。'
- en: '![Image](graphics/f03-03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f03-03.jpg)'
- en: '*Figure 3-3: Link icons applied with the Ending Selector*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：使用结束选择器应用的链接图标*'
- en: To achieve this effect using CSS2, you would have to apply set `class` values
    to the markup (`class="pdf"`, for example). The advantage of using the Ending
    Selector is that links to files can be detected automatically, without requiring
    you to apply a particular class. The disadvantage is that sometimes the file-type
    suffix is not at the end of the URI. But the next new selector helps get around
    that situation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用CSS2实现这个效果，你必须为标记应用设置`class`值（例如`class="pdf"`）。使用结束选择器的优点是，文件链接可以自动检测到，而不需要你应用特定的类。缺点是，有时文件类型的后缀并不在URI的末尾。但下一个新选择器帮助我们解决了这个问题。
- en: '***Arbitrary Substring Attribute Value Selector***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***任意子字符串属性值选择器***'
- en: 'The final new attribute selector—which I call the *Arbitrary Selector*—works
    in the same way as the previous two, but it searches for the provided substring
    value *anywhere* inside the specified attribute string. This selector uses the
    asterisk (`*`) character. Here’s the new syntax:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的新属性选择器——我称之为*任意选择器*——与前两个选择器的工作方式相同，但它会在指定的属性字符串内的*任何位置*搜索提供的子字符串值。这个选择器使用星号（`*`）字符。以下是新的语法：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To demonstrate this selector, I’ll once again use the same markup that I used
    for the Beginning and Ending Selectors, only this time applying the Arbitrary
    Selector:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个选择器，我将再次使用与开始和结束选择器相同的标记，只不过这次应用的是任意选择器：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This rule is applied to the first and second list items because they both contain
    the text string `image` in their `title` attributes, even though the string appears
    in a different position in each example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则应用于第一个和第二个列表项，因为它们的`title`属性中都包含文本字符串`image`，尽管该字符串在每个示例中的位置不同。
- en: 'You may notice that this selector is somewhat similar to the Partial Attribute
    Value Selector from CSS2, and, indeed, in this example, they are interchangeable:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，这个选择器与CSS2中的部分属性值选择器有些相似，事实上，在这个例子中，它们是可以互换的：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'But the two selectors differ in a major way. In the example markup, with CSS3,
    you could match this element using just a substring:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这两个选择器在一个重要方面有所不同。在示例标记中，使用CSS3，你可以仅通过子字符串匹配此元素：
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Partial Attribute Value Selector, however, requires that you enter a value
    that matches a full item in a space-separated list—in the example that would be
    either `free`, `image`, or `library`—so the `im` value would not be matched anywhere
    in the markup when using the CSS2 selector.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，部分属性值选择器要求输入一个匹配空格分隔列表中完整项的值——在示例中，这将是`free`、`image`或`library`——因此，使用CSS2选择器时，`im`值不会在标记中的任何地方匹配。
- en: 'To continue with the examples provided for the first two attribute selectors,
    the Arbitrary Selector is also handy for adding file-type icons to URIs that have
    parameters at the end. Consider this fairly typical URI:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用前两个属性选择器的示例，任意选择器对于在URI末尾带有参数的文件类型图标也非常有用。考虑这个相当典型的URI：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you use the Ending Selector with a value of `pdf`, this element would not
    be recognized as a valid target, even though the file type is a PDF, because the
    value does not appear at the very end of the string. Providing the same value
    using the Arbitrary Selector does the trick, however; the `.pdf` substring value
    occurs within the specified attribute, so the icon is applied.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用结束选择器并设置值为`pdf`，即使文件类型是PDF，该元素也不会被识别为有效目标，因为该值并未出现在字符串的末尾。然而，使用任意选择器提供相同的值就能实现预期效果；`.pdf`子字符串值出现在指定的属性中，因此图标被应用。
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This selector is the most flexible of the three new attribute selectors as it
    can match substrings no matter where they appear within strings. But this extra
    flexibility means you must take more care when defining the values provided to
    the selector; simple combinations of letters are far more likely to occur when
    you can match anywhere within a string—which is the reason I used it to search
    for `.pdf` (the file extension) rather than `pdf` (the common abbreviation).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器是三种新属性选择器中最灵活的，因为它可以匹配子字符串，无论它们在字符串中的位置在哪里。但这种额外的灵活性意味着在定义提供给选择器的值时必须更加小心；当你可以在字符串中的任何位置进行匹配时，简单的字母组合更容易出现——这也是我用它来搜索`.pdf`（文件扩展名）而不是`pdf`（常见缩写）的原因。
- en: '***Multiple Attribute Selectors***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多个属性选择器***'
- en: 'You can also chain multiple selectors together, which allows you to be really
    specific. Using multiple selectors, you can create rules to apply to attributes
    with values defined for the start, end, and anywhere in between. Imagine, for
    example, that you had links to two files with identical names but that were located
    in different folders:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将多个选择器串联在一起，这让你可以非常具体。通过使用多个选择器，你可以创建规则来应用于具有为开始、结束和任何位置定义的值的属性。举个例子，假设你有指向两个文件的链接，这两个文件的名字完全相同，但位于不同的文件夹中：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you want to specify a rule to apply to only the second `p` element, you
    can chain some selectors together:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想为第二个`p`元素指定一个规则，可以将一些选择器串联在一起：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This code looks for `a` elements that have an `href` attribute beginning with
    `http://`, ending with `.pdf`, and with `/folder2/` contained within it. That’s
    specific!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码寻找具有以`http://`开头、以`.pdf`结尾，并且其中包含`/folder2/`的`a`元素。这样很具体！
- en: '**The General Sibling Combinator**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通用兄弟组合器**'
- en: 'Our final new DOM selector in CSS3 is a combinator, which you’ll recall means
    that it joins together more than one selector. The General Sibling Combinator
    is an extension of the Adjacent Sibling Combinator, which was introduced in CSS2\.
    The syntaxes differ by just a single character:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在CSS3中的最后一个新的DOM选择器是组合器，你会记得它意味着将多个选择器结合在一起。一般兄弟组合器是相邻兄弟组合器的扩展，后者在CSS2中就已引入。两者的语法只相差一个字符：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The difference between the two is subtle but important: Adjacent Sibling selects
    any element (`*F*`) that is immediately preceded by element (`*E*`) on the same
    level of the document tree, but General Sibling selects any element (`*F*`) that
    is preceded by element (`*E*`) on the same level of the tree, regardless of whether
    it is immediately adjacent.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者的区别微妙但重要：相邻兄弟选择器选择在同一层级的文档树中，紧接着元素（`*E*`）后的任何元素（`*F*`），而一般兄弟选择器选择同一层级中任何被元素（`*E*`）之前的元素（`*F*`），无论它们是否紧邻。
- en: 'If that still sounds confusing, I’ll explain with an example. Let’s start with
    this CSS:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然感到困惑，我会通过一个例子来解释。让我们从这段CSS开始：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And apply it to the following markup (truncated for clarity):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其应用到以下标记（为了清晰起见，已截断）：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can see the outcome in [Figure 3-4](ch03.html#ch03fig4). In the CSS, I’m
    using the Adjacent Sibling Combinator to bold the `p` element immediately adjacent
    to the `h2` element—that is, element ➋. I’m also using the General Sibling Combinator
    to italicize all the `p` elements following the `h2` element, which applies to
    elements ➋, ➌, and ➎.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 3-4](ch03.html#ch03fig4)中看到结果。在CSS中，我使用相邻兄弟组合器将紧接着`h2`元素的`p`元素加粗——即元素➋。我还使用一般兄弟组合器将所有紧随`h2`元素的`p`元素设置为斜体，这适用于元素➋、➌和➎。
- en: '![Image](graphics/f03-04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f03-04.jpg)'
- en: '*Figure 3-4: The difference between the Adjacent Sibling and General Sibling
    Combinators*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-4：相邻兄弟和一般兄弟组合器的区别*'
- en: The paragraph elements ➊ and ➍ have neither bold nor italic rules applied to
    them. Why not? Because element ➊ precedes the `h2`, and element ➍ is inside a
    `blockquote` and, therefore, on a different level (the level below) in the document
    tree, so neither is affected by the rules.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 段落元素➊和➍没有应用粗体或斜体规则。为什么呢？因为元素➊位于`h2`之前，而元素➍位于`blockquote`内，因此它们在文档树中的层级不同（低一层），所以都不受规则的影响。
- en: 'To achieve the desired effect of only italicizing the paragraphs on the same
    level as the `h2` element in CSS2, without the General Sibling Combinator, you
    would need to set all `p` elements to display in italic and then add an extra
    rule for the `p` inside the `blockquote` to overrule the inheritance:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在没有一般兄弟组合器的情况下仅在CSS2中将与`h2`元素处于同一层级的段落设置为斜体，你需要将所有`p`元素设置为斜体显示，然后为`blockquote`内的`p`元素添加额外的规则来覆盖继承：
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You probably won’t need to use the General Sibling Combinator often because
    much of its function overlaps with the basic DOM selectors. That said, you will
    still discover plenty of occasions where this combinator can save you a little
    bit of code (and time).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不会经常使用一般兄弟组合器，因为它的许多功能与基本的DOM选择器重叠。尽管如此，你仍然会发现有很多场合可以利用这个组合器节省一些代码（和时间）。
- en: '**Summary**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Although attributes are a key feature of HTML4, most of them accept only a limited
    range of values, so many of them do not really require the attribute selectors
    I’ve introduced in this chapter. Aside from the `href` attribute, only a handful
    of attributes accept more verbose values (`alt`, `class`, `id`, `rel`, and `title`
    are the ones that spring to mind). But, as I mentioned before, HTML5 introduces
    attributes like `datetime` and `pubdate` that allow you to be more creative with
    selectors.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管属性是HTML4的一个关键特性，但它们大多数只接受有限范围的值，因此许多属性其实并不需要我在本章中介绍的属性选择器。除了`href`属性，只有少数属性接受更为详细的值（如`alt`、`class`、`id`、`rel`和`title`等属性）。不过，正如我之前提到的，HTML5引入了像`datetime`和`pubdate`这样的属性，使得你可以在选择器中更加灵活创意。
- en: The new selectors introduced in this chapter, along with those from previous
    versions of CSS, provide ways to apply style rules based on defined elements and
    attributes. Of course, on occasion, styling elements and attributes only isn’t
    sufficient for your purposes. That’s when you need to add classes or nonsemantic
    elements to act as hooks to hang your styles on. In [Chapter 4](ch04.html#ch04),
    you’ll discover how CSS3 removes that need.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**Selectors: Browser Support**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| New attribute selectors | Yes | Yes | Yes | Yes |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '| General sibling combinator | Yes | Yes | Yes | Yes |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
