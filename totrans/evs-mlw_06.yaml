- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ENUMERATING
    OPERATING SYSTEM ARTIFACTS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">操作系统工件枚举</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: A normal, “real” user environment looks much different from a malware sandbox
    or lab environment. A typical user will likely have installed common applications,
    such as Microsoft Office, email clients, multiple web browsers, and so on. They
    probably wouldn’t be using a VM, Wireshark, or Procmon, nor are they likely to
    have installed malware analysis tools such as IDA Pro or sandboxing tools like
    Cuckoo. A sandbox or lab environment, on the other hand, typically has analysis
    software installed in a VM.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个正常的、“真实”的用户环境与恶意软件沙箱或实验室环境有很大不同。典型用户可能已经安装了常见的应用程序，如微软办公软件、电子邮件客户端、多个网页浏览器等。他们可能不会使用虚拟机、Wireshark
    或 Procmon，也不太可能安装像 IDA Pro 这样的恶意软件分析工具，或者像 Cuckoo 这样的沙箱工具。另一方面，沙箱或实验室环境通常会在虚拟机中安装分析软件。
- en: This is indicated by references to the hypervisor in the names and properties
    of various *operating system artifacts*, such as the currently running processes,
    configured registry keys, and installed devices and drivers. Malware can extract
    this information to understand its environment, choose its target, and decide
    whether or not to execute its payload on the host. This is known as *enumeration*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过对超管程序（hypervisor）在各种*操作系统工件*中的名称和属性进行引用来指示，例如当前运行的进程、配置的注册表键、已安装的设备和驱动程序等。恶意软件可以提取这些信息来了解其环境、选择目标，并决定是否在主机上执行其有效载荷。这被称为*枚举*。
- en: In this chapter, I’ll walk you through enumeration techniques for several OS
    artifacts and explain how malware might use the information it gathers to identify
    an analysis environment or inappropriate target. Many of the techniques we’ll
    explore in this and the next few chapters can be circumvented by a specially tuned
    malware analysis environment, which we’ll discuss in [Appendix A](appendix-A.xhtml).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将带你了解几种操作系统工件的枚举技术，并解释恶意软件如何利用其收集的信息来识别分析环境或不适当的目标。我们将在本章和接下来的几章中探讨的许多技术可以通过特别调优的恶意软件分析环境来规避，我们将在[附录A](appendix-A.xhtml)中讨论这一点。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Processes</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">进程</samp>
- en: 'Malware can use process enumeration techniques to detect VMs and sandboxes
    and better understand its operating environment. The primary Windows API functions
    that malware may use to enumerate processes are <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateToolhelp32Snapshot</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>. The following malware
    sample excerpt enumerates running processes on a host to look for the target process
    *VboxTray.exe*, which is common in some VirtualBox VMs:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以使用进程枚举技术来检测虚拟机和沙箱，并更好地了解其操作环境。恶意软件可能使用的主要 Windows API 函数来枚举进程包括 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">CreateToolhelp32Snapshot</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>。以下恶意软件示例代码列举了主机上正在运行的进程，以寻找目标进程
    *VboxTray.exe*，这是某些 VirtualBox 虚拟机中常见的进程：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateToolhelp32Snapshot</samp>
    function creates a snapshot of the processes running on the victim’s host and
    returns a handle to it ❶. This handle is pushed to the stack, along with a pointer
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo</samp> buffer, which
    will store the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    function ❷. <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    outputs information about the first process running on the host, <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo.szExeFile</samp>.
    After calling <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>,
    the malware compares <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo.szExeFile</samp>
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">vboxtray_process_name</samp>
    variable, which was previously defined as <samp class="SANS_TheSansMonoCd_W5Regular_11">"VboxTray.exe"</samp>
    ❸. (This variable assignment isn’t shown in the code snippet.) If the process
    names don’t match, the program jumps to the next area of code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateToolhelp32Snapshot</samp>
    函数创建一个受害主机上正在运行的进程快照，并返回该快照的句柄 ❶。该句柄与指向 <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo</samp>
    缓冲区的指针一起被压入堆栈，后者将存储 <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    函数的输出 ❷。<samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp> 输出有关主机上第一个进程的信息，即
    <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo.szExeFile</samp>。在调用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp> 后，恶意软件将 <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo.szExeFile</samp>
    与 <samp class="SANS_TheSansMonoCd_W5Regular_11">vboxtray_process_name</samp> 变量进行比较，后者之前被定义为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"VboxTray.exe"</samp> ❸。（该变量赋值在代码片段中未显示。）如果进程名称不匹配，程序将跳转到代码的下一个区域。
- en: 'Both the pointer to the buffer and the process snapshot handle are again pushed
    to the stack to prepare for the next function: <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>
    ❹, which does exactly the same thing as <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    but will iterate over the remaining processes running on the system. After the
    next process is enumerated and stored in the buffer, the malware does another
    comparison to the <samp class="SANS_TheSansMonoCd_W5Regular_11">vboxtray_process_name</samp>
    variable. This time, if the names don’t match, the code will loop to execute <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp> again, repeating
    until it enumerates all processes or finds the target process ❺.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 指向缓冲区的指针和进程快照句柄再次被压入堆栈，以为下一个函数做准备：<samp class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>
    ❹，该函数与 <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp> 完全相同，但会遍历系统中剩余的进程。当下一个进程被枚举并存储到缓冲区后，恶意软件会再次与
    <samp class="SANS_TheSansMonoCd_W5Regular_11">vboxtray_process_name</samp> 变量进行比较。这时，如果名称不匹配，代码将循环执行
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>，直到枚举完所有进程或找到目标进程
    ❺。
- en: 'If you’re analyzing malware and you spot it enumerating the process list and
    checking for a specific process name such as *VboxTray.exe* or *Vmtoolsd.exe*,
    it should raise a red flag. Here are some of the common VM-related process names
    malware might be targeting:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在分析恶意软件时，发现它正在枚举进程列表并检查是否存在某个特定的进程名，如 *VboxTray.exe* 或 *Vmtoolsd.exe*，这应该引起警觉。以下是恶意软件可能针对的一些常见虚拟机相关进程名称：
- en: '**VMware**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware**'
- en: '*TPAutoConnSvc.exe*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*TPAutoConnSvc.exe*'
- en: '*VGAuthService.exe*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*VGAuthService.exe*'
- en: '*VMwareService.exe*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*VMwareService.exe*'
- en: '*Vm3dservice.exe*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Vm3dservice.exe*'
- en: '*Vmtoolsd.exe*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Vmtoolsd.exe*'
- en: '*Vmwaretray.exe*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Vmwaretray.exe*'
- en: '*Vmwareuser.exe*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Vmwareuser.exe*'
- en: '**VirtualBox**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**'
- en: '*VboxControl.exe*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*VboxControl.exe*'
- en: '*VBoxService.exe*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*VBoxService.exe*'
- en: '*VboxTray.exe*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*VboxTray.exe*'
- en: 'Some malware variants also search for typical malware analysis tools (such
    as Procmon, Wireshark, Process Explorer, and Fiddler), which may be running on
    the analyst’s workstation at the time of detonation. If the malware finds any
    of the following example processes running on the system, it may decide to terminate
    itself or take other evasive actions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件变种还会搜索典型的恶意软件分析工具（如 Procmon、Wireshark、Process Explorer 和 Fiddler），这些工具可能在分析员的工作站上运行，在恶意软件被引爆时。如果恶意软件发现系统中正在运行以下示例进程，它可能会决定终止自己或采取其他规避措施：
- en: '*autoruns.exe*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*autoruns.exe*'
- en: '*fiddler.exe*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*fiddler.exe*'
- en: '*ollydbg.exe*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ollydbg.exe*'
- en: '*procexp.exe*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*procexp.exe*'
- en: '*procmon.exe*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*procmon.exe*'
- en: '*tcpview.exe*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tcpview.exe*'
- en: '*wireshark.exe*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*wireshark.exe*'
- en: '*x64dbg.exe*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x64dbg.exe*'
- en: Oftentimes, you can simply rename the executable file for these tools before
    running the process. For example, renaming *procmon.exe* to *nomcorp.exe* may
    evade basic malware checks. This trick won’t work for malware that looks at the
    window title bar, however.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以在运行这些工具之前简单地重命名可执行文件。例如，将*procmon.exe*重命名为*nomcorp.exe*可能会避开基本的恶意软件检查。然而，这个技巧对那些检查窗口标题栏的恶意软件不起作用。
- en: When enumerating and searching for specific process names, some malware will
    use hashed names instead of cleartext strings so that its target won’t be readily
    apparent to the malware analyst. For example, the MD5 hash sum of the process
    name *fiddler.exe* is 447c259d51c2d1cd320e71e6390b8495, so if you were debugging
    a particular malware sample or inspecting it in a disassembler, you might notice
    the string <samp class="SANS_TheSansMonoCd_W5Regular_11">447c259d51c2d1cd320e71e6390b8495</samp>
    rather than <samp class="SANS_TheSansMonoCd_W5Regular_11">fiddler.exe</samp>.
    You can see how this would slow down analysis and possibly stump an inexperienced
    analyst.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在枚举和搜索特定进程名称时，一些恶意软件会使用哈希化的名称，而不是明文字符串，以避免让分析者轻易识别目标。例如，进程名称*fiddler.exe*的MD5哈希值是447c259d51c2d1cd320e71e6390b8495，因此如果你正在调试某个恶意软件样本或在反汇编工具中检查它，你可能会看到字符串<samp
    class="SANS_TheSansMonoCd_W5Regular_11">447c259d51c2d1cd320e71e6390b8495</samp>，而不是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">fiddler.exe</samp>。你可以看出，这会减缓分析过程，可能会让经验不足的分析员感到困惑。
- en: Hashing in this way will be covered in more depth in [Chapter 16](chapter16.xhtml).
    For now, just keep in mind that you might not see nice, cleartext process names
    when analyzing a malware sample; always be aware of possible hashing. This is
    true not only for processes but also for filenames, services, and other strings
    that the malware may be searching for.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种哈希处理将在[第16章](chapter16.xhtml)中进行更深入的讨论。目前，记住在分析恶意软件样本时，你可能不会看到清晰明了的进程名称；始终留意可能的哈希化。这不仅适用于进程，还适用于文件名、服务以及恶意软件可能正在搜索的其他字符串。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Directories and Files</samp>
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">目录和文件</samp>
- en: Enumerating directories and files is another technique malware can use to detect
    sandboxes and VMs. Malware may search for specific files and directories associated
    with hypervisor software (such as VMware Workstation and VirtualBox) or with automated
    malware sandboxes (such as Cuckoo).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举目录和文件是恶意软件检测沙箱和虚拟机的另一种技术。恶意软件可能会搜索与虚拟化软件（如VMware Workstation和VirtualBox）或自动化恶意软件沙箱（如Cuckoo）相关的特定文件和目录。
- en: 'The following snippet shows a malware sample calling <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>
    with *C:\Windows\System32\drivers\vm** as a target. The sample is searching the
    Windows *drivers* directory for any driver files with a prefix of *vm*, which
    is a common pattern for VMware Workstation driver files:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了一个恶意软件样本调用<samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>，以*C:\Windows\System32\drivers\vm**为目标。该样本正在搜索Windows的*drivers*目录，查找任何前缀为*vm*的驱动文件，这是VMware
    Workstation驱动文件的常见模式：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the call to <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction compares
    the value of the returned filename to *C:\Windows\System32\drivers\vm**. If the
    result of the <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> (meaning there’s no
    match), the code jumps to <samp class="SANS_TheSansMonoCd_W5Regular_11">loc_2</samp>,
    which contains the next function call, <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>.
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp> executes, and
    the same <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction
    compares the filenames. If the test instruction returns <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>,
    the program jumps to <samp class="SANS_TheSansMonoCd_W5Regular_11">loc_2</samp>
    again. <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp> will
    continue to execute until there’s a match or there are no more files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp> 后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">test</samp> 指令将返回的文件名与 *C:\Windows\System32\drivers\vm**
    进行比较。如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> 指令的结果是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0</samp>（表示没有匹配），代码跳转到 <samp class="SANS_TheSansMonoCd_W5Regular_11">loc_2</samp>，其中包含下一个函数调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>
    执行后，<samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> 指令再次比较文件名。如果 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">test</samp> 指令返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>，程序再次跳转到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">loc_2</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>
    将继续执行，直到找到匹配项或没有更多文件。
- en: 'While file enumeration in malware is very common for many reasons, the presence
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp> could mean the malware
    sample may be attempting to detect an analysis environment. VMware Workstation
    and VirtualBox file and directory paths that malware might target include the
    following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然恶意软件中进行文件枚举的原因有很多，但如果存在 <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>，这可能意味着恶意软件样本正在尝试检测分析环境。恶意软件可能会针对的
    VMware Workstation 和 VirtualBox 的文件和目录路径包括以下内容：
- en: '**VMware files**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware 文件**'
- en: '*C:\Windows\System32\drivers\vm**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Windows\System32\drivers\vm**'
- en: '*C:\Windows\System32\vm**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Windows\System32\vm**'
- en: '*C:\Windows\SysWOW64\vm**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Windows\SysWOW64\vm**'
- en: '**VMware directories**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware 目录**'
- en: '*C:\Program Files\VMware\*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Program Files\VMware\*'
- en: '*C:\Program Files\Common Files\VMware\*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Program Files\Common Files\VMware\*'
- en: '**VirtualBox files**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox 文件**'
- en: '*C:\Windows\System32\VBox**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Windows\System32\VBox**'
- en: '*C:\Windows\System32\drivers\VBox**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Windows\System32\drivers\VBox**'
- en: '**VirtualBox directories**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox 目录**'
- en: '*C:\Program Files\Oracle\VirtualBox Guest Additions\*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Program Files\Oracle\VirtualBox Guest Additions\*'
- en: Similar to VMs, automated sandbox environments often contain specific folders
    and files that malware may find suspicious. Many Cuckoo installations, for example,
    contain several scripts and files like *Analyzer.py* and *analysis.conf*. Some
    Cuckoo versions may even have a directory called *cuckoo* or *agent* under the
    *C:\* directory path. Keep this in mind when analyzing evasive malware in an automated
    malware analysis sandbox.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟机类似，自动化沙盒环境通常包含恶意软件可能会认为可疑的特定文件夹和文件。例如，许多 Cuckoo 安装包含多个脚本和文件，如 *Analyzer.py*
    和 *analysis.conf*。一些 Cuckoo 版本甚至可能在 *C:\* 目录路径下有一个名为 *cuckoo* 或 *agent* 的目录。在自动化恶意软件分析沙盒中分析规避型恶意软件时，请牢记这一点。
- en: Finally, malware can use directories and file enumeration to identify its operating
    environment and profile its target. For example, if a malware sample is targeting
    a certain organization or type of system, it might enumerate the filesystem to
    look for specific directories and files containing the target company name. This
    check would allow the malware to infect only systems in the scope of its attack.
    A good example of such a system is Stuxnet, mentioned in the introduction. As
    part of its exploitation tactics, Stuxnet searches for several files related to
    the Siemens Step7 software on the victim host. If these files don’t exist, the
    system will not be infected.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，恶意软件可以通过使用目录和文件枚举来识别其操作环境并分析目标。例如，如果某个恶意软件样本针对特定的组织或系统类型，它可能会枚举文件系统，寻找包含目标公司名称的特定目录和文件。这个检查将使恶意软件仅感染其攻击范围内的系统。一个很好的例子是介绍中提到的
    Stuxnet。在其利用战术的一部分中，Stuxnet 会搜索受害主机上与西门子 Step7 软件相关的多个文件。如果这些文件不存在，系统将不会受到感染。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Some of these files and directories can be renamed or even removed without
    affecting the VM environment. I’ll discuss this in more detail in [Appendix A](appendix-A.xhtml).*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些文件和目录中的一些可以被重命名甚至删除，而不会影响虚拟机环境。我将在[附录 A](appendix-A.xhtml)中详细讨论这一点。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Shared Folders</samp>
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">共享文件夹</samp>
- en: To share files between VMs and the host OS, an analyst can configure *shared
    folders*. But while shared folders allow easy transfer of files from the host
    to the guest and vice versa, they also give malware another clue that it’s being
    analyzed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在虚拟机和宿主操作系统之间共享文件，分析师可以配置*共享文件夹*。但是，尽管共享文件夹允许从宿主机到访客机以及反向轻松传输文件，它们也为恶意软件提供了另一个线索，表明它正在被分析。
- en: Malware can enumerate shared folders by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">WNetGetProviderName</samp>
    Windows API function, which retrieves network resource information. As VM shared
    folders are effectively network resources, calling this function on a VirtualBox
    VM configured with shared folders may return a result of <samp class="SANS_TheSansMonoCd_W5Regular_11">VirtualBox
    Shared Folders</samp>, for example, which is a dead giveaway that this machine
    is hosted on a VirtualBox hypervisor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以通过使用<samp class="SANS_TheSansMonoCd_W5Regular_11">WNetGetProviderName</samp>
    Windows API 函数来枚举共享文件夹，该函数检索网络资源信息。由于虚拟机共享文件夹本质上是网络资源，在配置了共享文件夹的 VirtualBox 虚拟机上调用此函数可能会返回例如<samp
    class="SANS_TheSansMonoCd_W5Regular_11">VirtualBox Shared Folders</samp>的结果，这表明该机器是托管在VirtualBox虚拟化平台上的，直接揭示了这一点。
- en: Additionally, because VM shared folders function like network drives, they can
    be identified via normal file and folder enumeration functions, such as the previously
    discussed <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>. The target
    path for these functions would be the name of the VM network drive. Some common
    network drive names are *\\VboxSrv* (for VirtualBox) and *\\vmware-host* (for
    VMware Workstation).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于虚拟机共享文件夹的功能类似于网络驱动器，它们可以通过正常的文件和文件夹枚举功能进行识别，例如前面讨论过的<samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>。这些函数的目标路径将是虚拟机网络驱动器的名称。一些常见的网络驱动器名称是*\\VboxSrv*（用于VirtualBox）和*\\vmware-host*（用于VMware
    Workstation）。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Registry</samp>
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">注册表</samp>
- en: 'The Windows registry contains information about installed software, hardware
    configurations, the network, language and location settings, and many other data
    points that Windows uses to function. As a result, malware attempting to understand
    the target environment or detect a VM or sandbox will often query the registry.
    It might enumerate entire hives of the registry and search for suspect VM-related
    strings, or it might simply inspect a few keys of specific interest. The following
    excerpt shows how this might look in an actual malware sample:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 注册表包含关于已安装软件、硬件配置、网络、语言和位置设置以及许多其他数据点的信息，这些都是Windows运行所需的。因此，恶意软件在尝试理解目标环境或检测虚拟机或沙箱时，通常会查询注册表。它可能会枚举整个注册表的树形结构，并搜索可疑的与虚拟机相关的字符串，或者它可能只是检查一些特定的感兴趣的键。以下摘录显示了这在实际恶意软件样本中可能是如何表现的：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The malware calls <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp>
    to open a specific key of interest, followed by the <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValue</samp>
    function to enumerate all values and data under this registry key. Let’s break
    this code down a bit more.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件调用<samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp>来打开一个特定的感兴趣的注册表键，然后使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValue</samp>函数来枚举该注册表键下的所有值和数据。让我们稍微分析一下这段代码。
- en: First, the malware moves the <samp class="SANS_TheSansMonoCd_W5Regular_11">lpSubKey</samp>
    value, which represents the registry key it’s interested in, into the <samp class="SANS_TheSansMonoCd_W5Regular_11">rdx</samp>
    register ❶. In this case, this registry key is <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>.
    The value in the <samp class="SANS_TheSansMonoCd_W5Regular_11">rdx</samp> register
    is used as a parameter for the subsequent call to <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKeyExA</samp>
    ❷. Next, the code loads pointers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">lpData</samp>
    ❸ and <samp class="SANS_TheSansMonoCd_W5Regular_11">lpValueName</samp> ❹ structures.
    Then, it calls <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValueA</samp>
    ❺, which stores the returned values and data for the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    registry key in <samp class="SANS_TheSansMonoCd_W5Regular_11">lpValueName</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">lpData</samp>, respectively.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，恶意软件将 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpSubKey</samp> 值（表示它感兴趣的注册表项）移动到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">rdx</samp> 寄存器 ❶。在此案例中，该注册表项为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">rdx</samp> 寄存器中的值被用作后续调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKeyExA</samp>
    ❷ 的参数。接下来，代码加载指向 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpData</samp> ❸
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpValueName</samp> ❹ 结构的指针。然后，它调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValueA</samp> ❺，该函数将返回的值和数据存储在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    注册表项的 <samp class="SANS_TheSansMonoCd_W5Regular_11">lpValueName</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">lpData</samp> 中。
- en: Typically, malware will call <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumKey</samp>
    multiple times in a loop, as each iteration of <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumKey</samp>
    stores only one value and data item. For simplicity’s sake, I included only one
    call to this function in the code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，恶意软件会在循环中多次调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumKey</samp>，因为每次调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumKey</samp> 只会存储一个值和数据项。为了简化代码，我只在代码中包含了一次对该函数的调用。
- en: Finally, the malware compares the suspect value, <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX
    -1</samp>, to the value in the <samp class="SANS_TheSansMonoCd_W5Regular_11">lpdata</samp>
    buffer ❻. If they match, the malware assumes it’s running in a VirtualBox VM and
    terminates itself.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，恶意软件将可疑的值 <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX -1</samp> 与
    <samp class="SANS_TheSansMonoCd_W5Regular_11">lpdata</samp> 缓冲区中的值 ❻ 进行比较。如果它们匹配，恶意软件会假设自己正在
    VirtualBox 虚拟机中运行并终止自己。
- en: 'Malware may also query certain areas of the registry for environment profiling.
    For example, it might attempt to detect whether it’s running on a computer system
    of a certain company in order to avoid inadvertently infecting the wrong target.
    In the following pseudocode, this malware sample is querying the registry for
    software related to its target, a company called NewCorp:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可能查询注册表中的特定区域以进行环境分析。例如，它可能会尝试检测自己是否在某个公司计算机系统上运行，以避免不小心感染错误的目标。在以下伪代码中，这个恶意软件示例正在查询与其目标相关的注册表软件，这个公司名为
    NewCorp：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example is using the <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp>
    Windows API function to search for the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU\Software\NewCorp</samp>
    registry key of the host’s system. If the malware finds the key, it assumes it’s
    running on a system within the NewCorp organization; otherwise, it terminates
    itself.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用了 <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp> Windows
    API 函数来搜索主机系统的 <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU\Software\NewCorp</samp>
    注册表项。如果恶意软件找到了该注册表项，它会假设自己正在 NewCorp 组织的系统上运行；否则，它会自行终止。
- en: 'Malware can also query the registry using Windows command line tools, such
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">reg query</samp>:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可以使用 Windows 命令行工具查询注册表，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">reg
    query</samp>：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command would succeed if the key exists on the victim’s system and fail
    otherwise.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该注册表项存在于受害者的系统中，则该命令会成功执行，否则失败。
- en: 'One final way in which malware can query the registry is by using Windows Management
    Instrumentation (WMI), PowerShell, and other native Windows tools, as we’ll discuss
    in [Chapter 15](chapter15.xhtml). For now, the point is that there are many methods
    of querying the registry, but it’s also important to note that malware and benign
    software alike both query the registry for many reasons; a query doesn’t always
    indicate that malware is using a profiling or evasion technique. Registry keys
    that malware may search for in an attempt to identify a VM analysis environment
    include the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件查询注册表的另一种方法是使用 Windows 管理工具（WMI）、PowerShell 和其他本地 Windows 工具，正如我们在[第15章](chapter15.xhtml)中讨论的那样。目前要强调的是，查询注册表有很多方法，但同样需要注意的是，恶意软件和良性软件都可能因许多原因查询注册表；查询不一定意味着恶意软件正在使用某种分析或规避技术。恶意软件可能会搜索以下注册表项，以尝试识别虚拟机分析环境：
- en: '**VMware Workstation**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware 工作站**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU:\SOFTWARE\VMware, Inc.</samp>
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU:\SOFTWARE\VMware, Inc.</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\Applications\VMwareHostOpen.exe</samp>
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\Applications\VMwareHostOpen.exe</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\VMwareHostOpen.AssocFile</samp>
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\VMwareHostOpen.AssocFile</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\VMwareHostOpen.AssocURL</samp>
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\VMwareHostOpen.AssocURL</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware
    User Process</samp>
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware
    用户进程</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware
    VM3DService Process</samp>
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware
    VM3DService 进程</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\RegisteredApplications\VMware
    Host Open</samp>
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\RegisteredApplications\VMware
    主机打开</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\WOW6432Node\RegisteredApplications\VMware
    Host Open</samp>
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\WOW6432Node\RegisteredApplications\VMware
    主机打开</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Enum\IDE\DiskVMware_Virtual_IDE_Hard_Drive___________00000001\</samp>
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Enum\IDE\DiskVMware_Virtual_IDE_Hard_Drive___________00000001\</samp>
- en: '**VirtualBox**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟盒子**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\DSDT\VBOX__</samp>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\DSDT\VBOX__</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\FADT\VBOX__</samp>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\FADT\VBOX__</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\RSDT\VBOX__</samp>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\RSDT\VBOX__</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VBoxTray</samp>
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VBoxTray</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Oracle
    VM VirtualBox Guest Additions</samp>
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Oracle
    VM VirtualBox 客户端附加组件</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Oracle\VirtualBox
    Guest Additions</samp>
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Oracle\VirtualBox
    客户端附加组件</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxMouse</samp>
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxMouse</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxSF</samp>
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxSF</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxService</samp>
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxService</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxVideo</samp>
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxVideo</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxGuest</samp>
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxGuest</samp>
- en: '**General**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\SystemManufacturer</samp>
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\系统制造商</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\SystemProductName</samp>
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\SystemProductName</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\SystemBiosVersion</samp>
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\SystemBiosVersion</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Store\Configuration\OEMID</samp>
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Store\Configuration\OEMID</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Control\Class\</samp>
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Control\Class\</samp>
- en: You can use the Windows tool *regedit.exe* on your own analysis VM to investigate
    these keys and get an idea of what malware may be looking for. For example, when
    I inspect the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    registry key in my own analysis machine, I can spot certain values and data that
    may be interesting to malware (see [Figure 4-1](chapter4.xhtml#fig4-1)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Windows 工具 *regedit.exe* 在你的分析虚拟机上调查这些注册表键，并了解恶意软件可能正在寻找什么。例如，当我检查我自己的分析机器上的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    注册表键时，我可以发现一些可能对恶意软件感兴趣的值和数据（见[图 4-1](chapter4.xhtml#fig4-1)）。
- en: '![](../images/fig4-1.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-1: The hardware description
    in</samp> <samp class="SANS_Futura_Std_Book_11">regedit.exe</samp>'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-1：在</samp> <samp class="SANS_Futura_Std_Book_11">regedit.exe</samp>
    中的硬件描述
- en: The obvious data points of interest here are the <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX
    -1</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Oracle VM VirtualBox</samp>
    strings. Another big hint is the <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemBiosDate</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">06/23/99</samp>, which indicates
    the VirtualBox hypervisor. Once again, these registry keys are only examples.
    They may or may not exist on your VMs, depending on your hypervisor version, installed
    software, and other factors.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里明显的感兴趣数据点是 <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX -1</samp> 和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Oracle VM VirtualBox</samp> 字符串。另一个重要提示是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemBiosDate</samp> 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">06/23/99</samp>，这表明安装了
    VirtualBox 虚拟化程序。再一次，这些注册表键仅是示例，可能会根据你的虚拟化程序版本、已安装的软件和其他因素，在你的虚拟机上存在或不存在。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*These registry keys can typically be renamed or removed completely in order
    to trick malware and bypass its evasion techniques. I’ll discuss this in more
    detail in [Appendix A](appendix-A.xhtml).*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些注册表键通常可以被重命名或完全删除，以便欺骗恶意软件并绕过其规避技术。我将在[附录 A](appendix-A.xhtml)中更详细地讨论这一点。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Services</samp>
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">服务</samp>
- en: '*Services* are applications that typically start at system boot-up and run
    in the background of a user’s session, and they’re yet another way in which malware
    may attempt to identify a VM or sandbox environment. Some services are unique
    to a certain brand of hypervisor, giving away its presence, and some services
    can also identify installed malware analysis tools. For example, malware may be
    looking for the *VirtualBox Guest Additions Service*, which indicates the presence
    of VirtualBox.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务* 是在系统启动时通常会启动并在用户会话的后台运行的应用程序，它们是恶意软件可能尝试识别虚拟机或沙箱环境的另一种方式。有些服务是特定于某种虚拟化程序的，暴露了其存在，还有一些服务也能识别已安装的恶意软件分析工具。例如，恶意软件可能会查找
    *VirtualBox 客户端附加服务*，这表明系统中安装了 VirtualBox。'
- en: Malware may query services in multiple ways. One of the most common techniques
    is using the Windows API function <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumServiceStatus</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumServiceStatusEx</samp>, which
    will return a list of services on the host and their associated statuses, which
    are usually either <samp class="SANS_TheSansMonoCd_W5Regular_11">running</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">stopped</samp>. Malware can also
    use the function <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenService</samp>
    to open a handle to a specific service. If it successfully obtains a handle (meaning
    the service exists), the return code will be <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能通过多种方式查询服务。最常见的技术之一是使用 Windows API 函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumServiceStatus</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumServiceStatusEx</samp>，这些函数会返回主机上的服务列表及其相关状态，通常是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">running</samp>（运行中）或 <samp class="SANS_TheSansMonoCd_W5Regular_11">stopped</samp>（已停止）。恶意软件还可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenService</samp> 函数打开特定服务的句柄。如果它成功获取句柄（意味着服务存在），返回码将为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>。
- en: 'In addition to Windows API functions, there are other methods of enumerating
    services that malware can employ. For example, malware can use the Windows <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sc</samp> command line tool to query a
    list of services or a specific service, like so:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Windows API 函数外，恶意软件还可以使用其他方法来枚举服务。例如，恶意软件可以使用 Windows 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">sc</samp>
    命令行工具查询服务列表或特定服务，如下所示：
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Similarly, malware can use the WMI command line tool <samp class="SANS_TheSansMonoCd_W5Regular_11">wmic</samp>
    to query all services on the host:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，恶意软件可以使用 WMI 命令行工具 <samp class="SANS_TheSansMonoCd_W5Regular_11">wmic</samp>
    查询主机上的所有服务：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, since some service information is stored in the registry, malware can
    query the registry for service information. If you see malware using service-related
    API functions, using tools such as <samp class="SANS_TheSansMonoCd_W5Regular_11">sc</samp>,
    or querying the registry to find specific hypervisor services, the sample may
    be attempting to detect an analysis environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于一些服务信息存储在注册表中，恶意软件可以查询注册表以获取服务信息。如果你发现恶意软件使用与服务相关的 API 函数，使用如 <samp class="SANS_TheSansMonoCd_W5Regular_11">sc</samp>
    等工具，或查询注册表以查找特定的虚拟化管理程序服务，那么该样本可能正在尝试检测分析环境。
- en: To better understand and explore the services running on your VMs and sandboxes,
    you can use the Windows native application *services.exe* to get a list of services
    configured on the system. In [Figure 4-2](chapter4.xhtml#fig4-2), you can see
    the VirtualBox Guest Additions Service running, which can signal to malware that
    it is running in a VM environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解和探索你虚拟机和沙箱中运行的服务，你可以使用 Windows 原生应用 *services.exe* 获取系统上配置的服务列表。在[图 4-2](chapter4.xhtml#fig4-2)中，你可以看到正在运行的
    VirtualBox 客户机增强功能服务，这可能会向恶意软件表明它正在虚拟机环境中运行。
- en: '![](../images/fig4-2.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-2.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-2: The output of</samp>
    <samp class="SANS_Futura_Std_Book_11">services.exe</samp>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-2：来自</samp> <samp class="SANS_Futura_Std_Book_11">services.exe</samp>
    的输出
- en: '[Table 4-1](chapter4.xhtml#tab4-1) lists some of the common services created
    by VMware and VirtualBox.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-1](chapter4.xhtml#tab4-1) 列出了 VMware 和 VirtualBox 创建的一些常见服务。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-1:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Hypervisor Services</samp>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 4-1：</samp> <samp class="SANS_Futura_Std_Book_11">常见虚拟化管理程序服务</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp>
    |'
- en: '| --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VGAuthService</samp> | <samp
    class="SANS_Futura_Std_Book_11">VMware Guest Authentication Service</samp> |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VGAuthService</samp> | <samp
    class="SANS_Futura_Std_Book_11">VMware 客户机身份验证服务</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VMTools</samp> | <samp class="SANS_Futura_Std_Book_11">VMware
    Tools Service</samp> |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VMTools</samp> | <samp class="SANS_Futura_Std_Book_11">VMware
    工具服务</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxService</samp> | <samp
    class="SANS_Futura_Std_Book_11">VirtualBox Guest Additions Service</samp> |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxService</samp> | <samp
    class="SANS_Futura_Std_Book_11">VirtualBox 客户机增强功能服务</samp> |'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installed Software</samp>
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">已安装软件</samp>
- en: Malware may enumerate the installed software on your analysis machine and look
    for keywords that represent common analysis tools or sandbox-related artifacts.
    This technique can also be used for target profiling; malware may simply query
    the host, looking for installed software indicating that this system is a valid
    target.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能会枚举分析机器上已安装的软件，并寻找代表常见分析工具或沙箱相关工件的关键词。此技术也可以用于目标配置文件分析；恶意软件可能仅通过查询主机，寻找已安装的软件，以确认该系统是一个有效的目标。
- en: To search for installed software, the malware might use a Windows API function
    such as <samp class="SANS_TheSansMonoCd_W5Regular_11">MsiEnumProducts</samp> or
    inspect the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM\Software\Microsoft\Windows\Current
    Version\Uninstall</samp> registry key, whose contents from my malware analysis
    machine are shown in [Figure 4-3](chapter4.xhtml#fig4-3).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了搜索已安装的软件，恶意软件可能会使用 Windows API 函数，如 <samp class="SANS_TheSansMonoCd_W5Regular_11">MsiEnumProducts</samp>，或者检查
    <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM\Software\Microsoft\Windows\Current
    Version\Uninstall</samp> 注册表项，其内容来自我的恶意软件分析机器，如 [图 4-3](chapter4.xhtml#fig4-3)
    所示。
- en: '![](../images/fig4-3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-3.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-3: Enumerating the
    HKLM\Software\Microsoft\ Windows\Current Version\Uninstall registry key</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-3：枚举 HKLM\Software\Microsoft\
    Windows\Current Version\Uninstall 注册表项</samp>
- en: Here you can see several analysis tools, as well as VirtualBox Guest Additions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可以看到多个分析工具，以及 VirtualBox 客户端附加组件。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Software installers create many artifacts on the host, such as new folders,
    files, and registry entries, all of which can be enumerated by malware. Sometimes
    it’s a better approach to use the* portable *versions of analysis tools, which
    don’t need to be installed and are run directly from a self-contained executable
    file.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*软件安装程序会在主机上创建许多工件，例如新的文件夹、文件和注册表项，所有这些都可以被恶意软件枚举。有时，使用* 便携版 *分析工具（这些工具不需要安装，可以直接从自包含的可执行文件运行）是更好的选择。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Mutexes</samp>
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">互斥体</samp>
- en: As [Chapter 1](chapter1.xhtml) explained, a *mutex* is an object that helps
    control access to resources, acting as a sort of gatekeeper. Certain sandboxes
    and hypervisors have unique mutexes that may be interesting to malware. For example,
    VMware typically uses mutexes that begin with *VMware*, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 [第一章](chapter1.xhtml) 所解释的，*互斥体* 是一种帮助控制对资源访问的对象，充当某种门卫。某些沙箱和虚拟机监控器具有独特的互斥体，可能对恶意软件具有吸引力。例如，VMware
    通常使用以 *VMware* 开头的互斥体，如 <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>。
- en: 'Malware can use the Windows API function <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateMutex</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutex</samp> to search for
    specific mutex values, as shown in this sample:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以使用 Windows API 函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateMutex</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutex</samp> 来搜索特定的互斥体值，如下所示：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The malware pushes the <samp class="SANS_TheSansMonoCd_W5Regular_11">mutex_name</samp>
    variable, which contains the mutex that the malware wants to find (<samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>),
    to the stack. It also pushes two other values that are required for the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">OpenMutex</samp> function but aren’t important
    here. Next, it calls <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutexA</samp>
    and uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction
    to check whether that function succeeded or failed. If the function call succeeded,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>
    exists on the system, meaning that the system is likely running inside a VMware
    hypervisor.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件将包含其想要查找的互斥体（<samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>）的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mutex_name</samp> 变量推送到栈中。它还推送了其他两个值，这些值是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutex</samp> 函数所需的，但在此不重要。接下来，它调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutexA</samp>，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp>
    指令检查该函数是成功还是失败。如果函数调用成功，则说明系统中存在 <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>，意味着该系统很可能在
    VMware 虚拟机监控器内运行。
- en: 'Keep in mind that not all mutex-related activity is malicious. Mutexes are
    standard Windows objects and are not inherently malicious *or* benign. If you
    spot malware enumerating mutexes and attempting to find very specific strings
    such as the examples just given, it could be using this detection technique. Some
    mutexes that may reveal a VM environment include the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，并非所有与互斥锁相关的活动都是恶意的。互斥锁是标准的 Windows 对象，本身既不恶意也不良性。如果你发现恶意软件在枚举互斥锁并尝试寻找像上述示例中那样非常特定的字符串，它可能正在使用这种检测技术。一些可能暴露虚拟机环境的互斥锁包括以下内容：
- en: '**VMware Workstation**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Workstation**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMToolsHookQueueLock</samp>
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMToolsHookQueueLock</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestDnDDataMutex</samp>
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestDnDDataMutex</samp>
- en: '**VirtualBox**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxService</samp>
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxService</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTray</samp>
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTray</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Pipes</samp>
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">管道</samp>
- en: A *pipe* is a Windows object that allows for interprocess communication. Some
    hypervisors create unique pipes on the guest OS that may give away their presence
    to malware. Malware can call several different functions, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateFile</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">CallNamedPipe</samp>, to search
    for specific named pipes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*管道* 是 Windows 对象，用于进程间通信。一些虚拟化软件会在客户操作系统上创建独特的管道，这可能会暴露它们的存在给恶意软件。恶意软件可以调用多个不同的函数，如
    <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateFile</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">CallNamedPipe</samp>，来查找特定的命名管道。'
- en: A great way to check your own VMs for these pipes is to use the tool Pipelist,
    which is part of the Windows Sysinternals suite from Mark Russinovich. [Figure
    4-4](chapter4.xhtml#fig4-4) shows the output from running the <samp class="SANS_TheSansMonoCd_W5Regular_11">pipelist</samp>
    command on a VMware Workstation VM. If you look closely, you may spot the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">vgauth-service</samp> pipe, which is unique
    to VMware.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 检查自己的虚拟机中是否存在这些管道的一个好方法是使用 Pipelist 工具，它是 Mark Russinovich 的 Windows Sysinternals
    套件的一部分。[图 4-4](chapter4.xhtml#fig4-4) 显示了在 VMware Workstation 虚拟机上运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">pipelist</samp>
    命令的输出。如果你仔细观察，可能会发现 <samp class="SANS_TheSansMonoCd_W5Regular_11">vgauth-service</samp>
    管道，这是 VMware 特有的。
- en: '![](../images/fig4-4.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-4.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-4: Output from running
    the pipelist command on a VMware Workstation VM</samp>'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-4：在 VMware Workstation 虚拟机上运行
    pipelist 命令的输出</samp>
- en: 'Here are some of the common pipes that may reside on your VMs:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些可能存在于虚拟机中的常见管道：
- en: '**VMware Workstation**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Workstation**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Vmmemctl</samp>
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Vmmemctl</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vgauth-service</samp>
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vgauth-service</samp>
- en: '**VirtualBox**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTray</samp>
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTray</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTrayIPC</samp>
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTrayIPC</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxVideo</samp>
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxVideo</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMouse</samp>
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMouse</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMiniRdr</samp>  ### <samp
    class="SANS_Futura_Std_Bold_B_11">Devices and Drivers</samp>'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMiniRdr</samp>  ### <samp
    class="SANS_Futura_Std_Bold_B_11">设备和驱动程序</samp>'
- en: Hypervisors often install specific devices and drivers on guest operating systems.
    *Devices* are objects that often represent physical hardware on the system, such
    as USB controllers or hard disk volumes. *Drivers* are software objects that control
    hardware, allowing the OS and devices to communicate. Device and driver objects
    are typically managed by the Windows object manager.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化软件通常会在客户操作系统上安装特定的设备和驱动程序。*设备* 是通常表示系统中物理硬件的对象，如 USB 控制器或硬盘卷。*驱动程序* 是控制硬件的软件对象，允许操作系统和设备之间进行通信。设备和驱动程序对象通常由
    Windows 对象管理器管理。
- en: 'Malware can enumerate devices and driver objects using two Windows functions:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenDirectoryObject</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>. The
    following code shows these functions in action:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以使用两个 Windows 函数列举设备和驱动程序对象：<samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenDirectoryObject</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>。以下代码展示了这些函数的使用：
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can see a handle to the *\\Driver* directory being loaded into register
    <samp class="SANS_TheSansMonoCd_W5Regular_11">rcx</samp> ❶, using the instruction
    <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp>, or *load effective address*.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> instruction calculates
    the address of an operand and loads it into a target register. This is followed
    by a call to <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenDirectoryObject</samp>,
    which opens *\\Driver* in preparation for the subsequent <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>
    function call ❷. Then, <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>
    ❹ queries the *\\Driver* directory objects and stores the list of objects in a
    buffer specified previously ❸. The malware then searches through this buffer,
    looking for specific drivers often used in VMs. Devices can be queried in the
    same way.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到通过指令 <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> （即 *加载有效地址*）将指向
    *\\Driver* 目录的句柄加载到寄存器 <samp class="SANS_TheSansMonoCd_W5Regular_11">rcx</samp>
    中 ❶。<samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> 指令计算操作数的地址并将其加载到目标寄存器中。随后调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenDirectoryObject</samp> 函数，它打开
    *\\Driver* 目录，为随后的 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>
    函数调用 ❷ 做准备。然后，<samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>
    ❹ 查询 *\\Driver* 目录中的对象，并将对象列表存储在先前指定的缓冲区 ❸ 中。恶意软件接着搜索这个缓冲区，寻找通常在虚拟机中使用的特定驱动程序。设备也可以以相同的方式进行查询。
- en: To better understand the contents of the Windows object manager, you can view
    it directly on your Windows VMs using the WinObj tool from Sysinternals. [Figure
    4-5](chapter4.xhtml#fig4-5) shows some of the VirtualBox-related drivers installed
    on my analysis VM using WinObj. Feel free to explore them on your own analysis
    system.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 Windows 对象管理器的内容，你可以直接在 Windows 虚拟机上使用 Sysinternals 提供的 WinObj 工具查看它。[图
    4-5](chapter4.xhtml#fig4-5) 显示了我在分析虚拟机上使用 WinObj 安装的一些与 VirtualBox 相关的驱动程序。你可以在自己的分析系统上自由探索这些内容。
- en: '![](../images/fig4-5.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-5.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-5: Exploring drivers
    with WinObj</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-5：使用 WinObj 探索驱动程序</samp>
- en: 'Some common hypervisor drivers for VMware Workstation and VirtualBox include
    the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的 VMware Workstation 和 VirtualBox 的虚拟机管理程序驱动程序包括以下几种：
- en: '**VMware Workstation**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Workstation**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp</samp>
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-debug</samp>
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-debug</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-stats</samp>
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-stats</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-sloader</samp>
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-sloader</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmci</samp>
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmci</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmhgfs</samp>
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmhgfs</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMMemCtl</samp>
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMMemCtl</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmmouse</samp>
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmmouse</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmrawdsk</samp>
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmrawdsk</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmusbmouse</samp>
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmusbmouse</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vsock</samp>
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vsock</samp>
- en: '**VirtualBox**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMouse</samp>
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMouse</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxSF</samp>
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxSF</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxVideo</samp>
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxVideo</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxWddm</samp>
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxWddm</samp>
- en: 'And here are some common devices:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出一些常见的设备：
- en: '**VMware Workstation**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Workstation**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMCIGuestDev</samp>
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMCIGuestDev</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMCIHostDev</samp>
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMCIHostDev</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmpDevice</samp>
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmpDevice</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmci</samp>
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmci</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmmemctl</samp>
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmmemctl</samp>
- en: '**VirtualBox**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMiniRdr</samp>
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMiniRdr</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Usernames and Hostnames</samp>
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">用户名和主机名</samp>
- en: Many automated malware analysis sandboxes have a default list of possible usernames
    assigned to user accounts on the system. These usernames may be randomized, but
    they’re often hardcoded. System hostnames may similarly be hardcoded and randomized
    at boot-up time. This isn’t simply a characteristic of automated sandboxes, however.
    Malware analysts may also configure their analysis VMs with usernames or hostnames
    that may be generic, well known, or otherwise not how a “real” user would configure
    their system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 许多自动化恶意软件分析沙箱都有一份默认的可能用户名列表，分配给系统上的用户账户。这些用户名可能是随机生成的，但通常是硬编码的。系统的主机名也可能是硬编码的，并在启动时随机生成。然而，这不仅仅是自动化沙箱的特性。恶意软件分析师也可能配置他们的分析虚拟机，使用可能是通用的、知名的，或者不是“真实”用户可能配置的用户名或主机名。
- en: Some malware can take advantage by enumerating the user accounts and hostname
    of the system, specifically searching for generic usernames such as *Administrator*,
    *User*, or *John*, or hostnames such as *Cuckoo*, *Test*, *Desktop*, *Workstation*,
    or *Lab*. *TequilaBoomBoom*, at one point the hostname for VirusTotal’s sandboxing
    service, is also a common check.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件可以通过枚举系统的用户账户和主机名来利用此信息，特别是搜索像 *Administrator*、*User* 或 *John* 这样的通用用户名，或者像
    *Cuckoo*、*Test*、*Desktop*、*Workstation* 或 *Lab* 这样的主机名。*TequilaBoomBoom*，曾经是 VirusTotal
    沙箱服务的主机名，也是一个常见的检查项。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Configure your VMs and sandbox environments with nongeneric usernames and
    hostnames. Try to use values that an actual end user or enterprise environment
    would use, or randomize the names.*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*配置你的虚拟机和沙箱环境时，使用非通用的用户名和主机名。尽量使用实际终端用户或企业环境可能使用的值，或者随机生成名称。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Locale and Language Settings</samp>
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">区域设置和语言设置</samp>
- en: 'Keyboard and language settings can be used to determine a potential victim’s
    location. Malware might use this technique to include or exclude a host as a valid
    target for geographic or geopolitical reasons, or to evade analysis. For example,
    say a malware sample wants to determine whether a potential victim is located
    in Russia or speaks Russian. Depending on this information, it may then choose
    to deploy its payload on the host or quietly terminate itself. Here are three
    different approaches it can use to extract this information:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘和语言设置可用于确定潜在受害者的位置。恶意软件可能会利用此技术根据地理或地缘政治原因，选择是否将主机排除或纳入有效目标，或者逃避分析。例如，假设一个恶意软件样本想要确定潜在受害者是否位于俄罗斯或是否说俄语。根据这些信息，它可能选择在主机上部署其有效载荷，或者悄悄终止自身。以下是它可以用来提取这些信息的三种不同方法：
- en: Getting the keyboard layout language
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取键盘布局语言
- en: Enumerating the language settings of the system itself, such as the display
    language
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举系统自身的语言设置，例如显示语言
- en: Obtaining the host’s locale
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取主机的区域设置
- en: The first method is perhaps the most common. The Windows function <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>
    returns the active keyboard language of the host, and <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayoutList</samp>
    returns a complete list of all keyboard languages that are installed on the host.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法可能是最常见的。Windows 函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>
    返回主机的活动键盘语言，<samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayoutList</samp>
    返回主机上安装的所有键盘语言的完整列表。
- en: There are several possible Windows functions to get the host’s language settings.
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetUserDefaultUILanguage</samp>,
    for example, returns the currently logged-in user’s user interface language. <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetSystemDefaultUILanguage</samp> returns
    the system language, or more specifically, the language in which the OS was installed.
    Finally, <samp class="SANS_TheSansMonoCd_W5Regular_11">GetProcessPreferredUILanguages</samp>
    will list languages that the user’s running processes may be utilizing. Talk about
    options!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种可能的Windows函数可以获取主机的语言设置。例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">GetUserDefaultUILanguage</samp>返回当前登录用户的界面语言。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetSystemDefaultUILanguage</samp>返回系统语言，或者更具体地说，是操作系统安装时的语言。最后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetProcessPreferredUILanguages</samp>将列出用户的运行进程可能正在使用的语言。选择真多！
- en: The *locale* of the host is different from the host’s keyboard and UI language
    settings in that it’s a list of language-related settings for a particular language-and-country
    combination. Some items that may be included as part of a locale are currency
    and date/time display formats, as well as a language identifier. The Windows API
    functions <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemDefaultLCID</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">GetUserDefaultLCID</samp> return
    locale information that can be used to profile a host or user. Processes and threads
    may also have their own custom locales, which malware can query using the function
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetThreadLocale</samp>.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 主机的*区域设置*与主机的键盘和UI语言设置不同，它是特定语言和国家组合的语言相关设置列表。区域设置中可能包含的项目有货币和日期/时间显示格式，以及语言标识符。Windows
    API函数<samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemDefaultLCID</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetUserDefaultLCID</samp>返回可用于分析主机或用户的区域信息。进程和线程也可能有自己的自定义区域设置，恶意软件可以通过函数<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetThreadLocale</samp>查询。
- en: 'In a malware sample, you’d likely see a call to one of the previously mentioned
    functions, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>,
    followed by a comparison to several values that represent Windows language identifiers.
    The following pseudocode shows this technique in action:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个恶意软件样本中，您可能会看到调用前面提到的某个函数，比如<samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>，然后与几个代表Windows语言标识符的值进行比较。以下伪代码演示了这种技术的实际应用：
- en: '[PRE9]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This malware sample calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>
    function and compares the result to the value <samp class="SANS_TheSansMonoCd_W5Regular_11">0x419</samp>,
    which is the Russian language identifier in hexadecimal (also known as *in hex*).
    If this Russian language identifier is in use, the malware executes <samp class="SANS_TheSansMonoCd_W5Regular_11">TerminateProcess</samp>.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个恶意软件样本调用了<samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>函数，并将结果与值<samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x419</samp>进行比较，后者是俄语语言标识符的十六进制表示（也称为*十六进制*）。如果使用的是这个俄语语言标识符，恶意软件将执行<samp
    class="SANS_TheSansMonoCd_W5Regular_11">TerminateProcess</samp>。
- en: '[Table 4-2](chapter4.xhtml#tab4-2) lists some of the language identifiers for
    Windows.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-2](chapter4.xhtml#tab4-2)列出了Windows的一些语言标识符。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-2:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Language Identifiers</samp>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 4-2:</samp> <samp class="SANS_Futura_Std_Book_11">常见语言标识符</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Identifier (in hex)</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Language (and associated country)</samp> |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">标识符（十六进制）</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">语言（及关联国家）</samp>
    |'
- en: '| --- | --- |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x402</samp> | <samp class="SANS_Futura_Std_Book_11">Bulgarian
    (Bulgaria)</samp> |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x402</samp> | <samp class="SANS_Futura_Std_Book_11">保加利亚语（保加利亚）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">Chinese
    (Simplified) (China)</samp> |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">中文（简体）(中国)</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x809</samp> | <samp class="SANS_Futura_Std_Book_11">English
    (United Kingdom)</samp> |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x809</samp> | <samp class="SANS_Futura_Std_Book_11">英语（英国）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x409</samp> | <samp class="SANS_Futura_Std_Book_11">English
    (United States)</samp> |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x409</samp> | <samp class="SANS_Futura_Std_Book_11">英语（美国）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x407</samp> | <samp class="SANS_Futura_Std_Book_11">German
    (Germany)</samp> |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x407</samp> | <samp class="SANS_Futura_Std_Book_11">德语（德国）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x418</samp> | <samp class="SANS_Futura_Std_Book_11">Romanian
    (Romania)</samp> |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x418</samp> | <samp class="SANS_Futura_Std_Book_11">罗马尼亚语（罗马尼亚）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0x419</samp> | <samp class="SANS_Futura_Std_Book_11">Russian
    (Russia)</samp> |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0x419</samp> | <samp class="SANS_Futura_Std_Book_11">俄语（俄罗斯）</samp>
    |'
- en: There are several other, more covert methods for enumerating or inferring a
    potential victim’s language and locale settings, such as enumerating the date/time
    formats, currency formats, or even calendar information. The potential list is
    so extensive that a portion of this book could be dedicated to this technique
    alone. What’s most important is that you now have the necessary knowledge to identify
    many of the common methods that malware may use to profile a victim’s language
    and locale.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几种更隐蔽的方法可以枚举或推测潜在受害者的语言和地区设置，例如枚举日期/时间格式、货币格式，甚至日历信息。潜在的列表非常广泛，以至于本书的一部分内容可以专门介绍这种技术。最重要的是，现在你已经掌握了识别恶意软件可能用来配置受害者语言和地区的许多常见方法所需的知识。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Operating System Version Information</samp>
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">操作系统版本信息</samp>
- en: Before infecting a victim machine, malware often needs to determine whether
    that machine is running a certain OS. Stuxnet, for example, infected only Windows
    XP computers because its authors knew that the target facilities used Windows
    XP to control the Siemens programmable logic controllers. A malware sample that
    can run on only a certain version of Windows may attempt to identify the OS before
    infecting the host to avoid inadvertently crashing it. For example, if the malware
    contains exploit code that works for only a specific sub-version of Windows, such
    as Windows 7 Service Pack 1, but causes system instability for Windows 7 Service
    Pack 2, it might want to determine a victim’s OS sub-version first to prevent
    an unintended crash that would potentially alert the victim to its presence.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在感染受害者机器之前，恶意软件通常需要确定该机器是否运行某个特定的操作系统。例如，Stuxnet只感染了Windows XP计算机，因为其作者知道目标设施使用Windows
    XP来控制西门子可编程逻辑控制器。只能在某个特定版本的Windows上运行的恶意软件，可能会在感染主机之前尝试识别操作系统，以避免无意中导致系统崩溃。例如，如果恶意软件包含仅适用于特定子版本Windows的漏洞利用代码，比如Windows
    7 Service Pack 1，但会导致Windows 7 Service Pack 2系统不稳定，它可能会首先想确定受害者的操作系统子版本，以避免造成意外崩溃，从而潜在地警告受害者其存在。
- en: 'This technique isn’t usually implemented as a detection or evasion technique,
    but it’s worth discussing in this context because it can still interfere with
    the analysis process. For example, if you were researching Stuxnet and decided
    to run the sample in a VM or sandbox with a modern Windows OS, it likely wouldn’t
    run correctly, thereby unintentionally evading automated and dynamic analysis
    methods. This is an important point to keep in mind: a malware sample that doesn’t
    execute correctly in your analysis environment isn’t necessarily intentionally
    trying to be evasive.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术通常不是作为检测或规避技术来实施的，但在这个上下文中值得讨论，因为它仍然可能干扰分析过程。例如，如果你正在研究Stuxnet，并决定在一个使用现代Windows操作系统的虚拟机或沙箱中运行样本，它很可能无法正常运行，从而无意中规避了自动化和动态分析方法。这是一个重要的要点：在你的分析环境中无法正确执行的恶意软件样本不一定是故意想要规避的。
- en: 'There are multiple ways of enumerating the target’s OS and version via the
    Windows API. The <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionEx</samp>
    function, along with its close cousin <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersion</samp>,
    accomplishes this, as shown here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Windows API，有多种方法可以枚举目标的操作系统及其版本。<samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionEx</samp>函数，以及它的近亲<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetVersion</samp>，可以完成这一操作，如下所示：
- en: '[PRE10]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp> function
    takes a buffer as an argument. This buffer will be the area of memory where the
    returned OS information will be stored after <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp>
    is called. The <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> instruction
    loads the buffer address, <samp class="SANS_TheSansMonoCd_W5Regular_11">[ebp-0A0h]</samp>,
    into the <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp> register, and
    then the buffer address is pushed to the stack with <samp class="SANS_TheSansMonoCd_W5Regular_11">push
    eax</samp>.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp> 函数接受一个缓冲区作为参数。这个缓冲区将是内存区域，在调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp> 后，返回的操作系统信息将被存储在该缓冲区中。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> 指令将缓冲区地址 <samp class="SANS_TheSansMonoCd_W5Regular_11">[ebp-0A0h]</samp>
    加载到 <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp> 寄存器中，然后通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">push
    eax</samp> 将缓冲区地址推送到堆栈中。
- en: Next, the sample must define the size of the data that will be returned from
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp> function
    call. This data will be stored in a structure called <samp class="SANS_TheSansMonoCd_W5Regular_11">VersionInformation</samp>.
    This sample specifies the size of the <samp class="SANS_TheSansMonoCd_W5Regular_11">VersionInformation</samp>
    structure as <samp class="SANS_TheSansMonoCd_W5Regular_11">9C</samp>, which in
    hex is equal to 156 bytes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，样本必须定义从 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp>
    函数调用返回的数据的大小。这些数据将存储在名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">VersionInformation</samp>
    的结构中。此样本指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">VersionInformation</samp>
    结构的大小为 <samp class="SANS_TheSansMonoCd_W5Regular_11">9C</samp>，其十六进制值等于 156 字节。
- en: Finally, the malware sample calls <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp>
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">call GetVersionExA</samp>) to get
    the OS version, then later checks that information by comparing the <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajorVersion</samp>
    with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>, which represents
    a very old version of Windows. (For some perspective, <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>
    is the version number for Windows XP!) Essentially, this malware sample is testing
    to see how old this host’s Windows version is.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，恶意软件样本调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp>
    （<samp class="SANS_TheSansMonoCd_W5Regular_11">调用 GetVersionExA</samp>）来获取操作系统版本，然后通过将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajorVersion</samp> 与值 <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>
    进行比较来检查该信息，值 4 代表一个非常旧的 Windows 版本。（举个例子，<samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>
    是 Windows XP 的版本号！）本质上，恶意软件样本在测试该主机的 Windows 版本有多旧。
- en: '[Table 4-3](chapter4.xhtml#tab4-3) contains a subset of the <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajor</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMinor</samp> OS versions.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 4-3](chapter4.xhtml#tab4-3)包含了 <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajor</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMinor</samp> 操作系统版本的一个子集。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-3:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajor</samp>
    <samp class="SANS_Futura_Std_Book_11">and</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbMinor</samp>
    <samp class="SANS_Futura_Std_Book_11">OS Versions</samp>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表格 4-3:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajor</samp>
    <samp class="SANS_Futura_Std_Book_11">和</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbMinor</samp>
    <samp class="SANS_Futura_Std_Book_11">操作系统版本</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operating system</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dwMajorVersion</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMinorVersion</samp>
    |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">操作系统</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajorVersion</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMinorVersion</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows 10</samp> | <samp class="SANS_Futura_Std_Book_11">10</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows 10</samp> | <samp class="SANS_Futura_Std_Book_11">10</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2016</samp> | <samp
    class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2016</samp> | <samp
    class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows 8.1</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows 8.1</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2012</samp> | <samp
    class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2012</samp> | <samp
    class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows 7</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">1</samp> |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows 7</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2008</samp> | <samp
    class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2008</samp> | <samp
    class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Vista</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows Vista</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows XP</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">1</samp> |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Windows XP</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">1</samp> |'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, we covered many common (and some not-so-common) ways in which
    malware can detect an analysis environment by inspecting operating system objects
    and artifacts. In the next chapter, we’ll explore some techniques malware can
    use to look for evidence of legitimate user activity (or lack thereof!) to reveal
    the underlying VM or sandbox environment.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了许多常见的（以及一些不太常见的）恶意软件通过检查操作系统对象和痕迹来检测分析环境的方法。在下一章中，我们将探讨恶意软件可以使用的一些技术，这些技术可以用来寻找合法用户活动的证据（或缺乏活动的证据！），以揭示潜在的虚拟机或沙箱环境。
