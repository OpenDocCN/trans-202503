- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ENUMERATING
    OPERATING SYSTEM ARTIFACTS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: A normal, “real” user environment looks much different from a malware sandbox
    or lab environment. A typical user will likely have installed common applications,
    such as Microsoft Office, email clients, multiple web browsers, and so on. They
    probably wouldn’t be using a VM, Wireshark, or Procmon, nor are they likely to
    have installed malware analysis tools such as IDA Pro or sandboxing tools like
    Cuckoo. A sandbox or lab environment, on the other hand, typically has analysis
    software installed in a VM.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: This is indicated by references to the hypervisor in the names and properties
    of various *operating system artifacts*, such as the currently running processes,
    configured registry keys, and installed devices and drivers. Malware can extract
    this information to understand its environment, choose its target, and decide
    whether or not to execute its payload on the host. This is known as *enumeration*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I’ll walk you through enumeration techniques for several OS
    artifacts and explain how malware might use the information it gathers to identify
    an analysis environment or inappropriate target. Many of the techniques we’ll
    explore in this and the next few chapters can be circumvented by a specially tuned
    malware analysis environment, which we’ll discuss in [Appendix A](appendix-A.xhtml).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Processes</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Malware can use process enumeration techniques to detect VMs and sandboxes
    and better understand its operating environment. The primary Windows API functions
    that malware may use to enumerate processes are <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateToolhelp32Snapshot</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>. The following malware
    sample excerpt enumerates running processes on a host to look for the target process
    *VboxTray.exe*, which is common in some VirtualBox VMs:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateToolhelp32Snapshot</samp>
    function creates a snapshot of the processes running on the victim’s host and
    returns a handle to it ❶. This handle is pushed to the stack, along with a pointer
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo</samp> buffer, which
    will store the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    function ❷. <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    outputs information about the first process running on the host, <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo.szExeFile</samp>.
    After calling <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>,
    the malware compares <samp class="SANS_TheSansMonoCd_W5Regular_11">peInfo.szExeFile</samp>
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">vboxtray_process_name</samp>
    variable, which was previously defined as <samp class="SANS_TheSansMonoCd_W5Regular_11">"VboxTray.exe"</samp>
    ❸. (This variable assignment isn’t shown in the code snippet.) If the process
    names don’t match, the program jumps to the next area of code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Both the pointer to the buffer and the process snapshot handle are again pushed
    to the stack to prepare for the next function: <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp>
    ❹, which does exactly the same thing as <samp class="SANS_TheSansMonoCd_W5Regular_11">Process32First</samp>
    but will iterate over the remaining processes running on the system. After the
    next process is enumerated and stored in the buffer, the malware does another
    comparison to the <samp class="SANS_TheSansMonoCd_W5Regular_11">vboxtray_process_name</samp>
    variable. This time, if the names don’t match, the code will loop to execute <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process32Next</samp> again, repeating
    until it enumerates all processes or finds the target process ❺.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re analyzing malware and you spot it enumerating the process list and
    checking for a specific process name such as *VboxTray.exe* or *Vmtoolsd.exe*,
    it should raise a red flag. Here are some of the common VM-related process names
    malware might be targeting:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '*TPAutoConnSvc.exe*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VGAuthService.exe*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VMwareService.exe*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vm3dservice.exe*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vmtoolsd.exe*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vmwaretray.exe*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vmwareuser.exe*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '*VboxControl.exe*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VBoxService.exe*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VboxTray.exe*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some malware variants also search for typical malware analysis tools (such
    as Procmon, Wireshark, Process Explorer, and Fiddler), which may be running on
    the analyst’s workstation at the time of detonation. If the malware finds any
    of the following example processes running on the system, it may decide to terminate
    itself or take other evasive actions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '*autoruns.exe*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fiddler.exe*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ollydbg.exe*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*procexp.exe*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*procmon.exe*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tcpview.exe*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*wireshark.exe*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*x64dbg.exe*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oftentimes, you can simply rename the executable file for these tools before
    running the process. For example, renaming *procmon.exe* to *nomcorp.exe* may
    evade basic malware checks. This trick won’t work for malware that looks at the
    window title bar, however.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: When enumerating and searching for specific process names, some malware will
    use hashed names instead of cleartext strings so that its target won’t be readily
    apparent to the malware analyst. For example, the MD5 hash sum of the process
    name *fiddler.exe* is 447c259d51c2d1cd320e71e6390b8495, so if you were debugging
    a particular malware sample or inspecting it in a disassembler, you might notice
    the string <samp class="SANS_TheSansMonoCd_W5Regular_11">447c259d51c2d1cd320e71e6390b8495</samp>
    rather than <samp class="SANS_TheSansMonoCd_W5Regular_11">fiddler.exe</samp>.
    You can see how this would slow down analysis and possibly stump an inexperienced
    analyst.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Hashing in this way will be covered in more depth in [Chapter 16](chapter16.xhtml).
    For now, just keep in mind that you might not see nice, cleartext process names
    when analyzing a malware sample; always be aware of possible hashing. This is
    true not only for processes but also for filenames, services, and other strings
    that the malware may be searching for.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Directories and Files</samp>
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enumerating directories and files is another technique malware can use to detect
    sandboxes and VMs. Malware may search for specific files and directories associated
    with hypervisor software (such as VMware Workstation and VirtualBox) or with automated
    malware sandboxes (such as Cuckoo).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet shows a malware sample calling <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>
    with *C:\Windows\System32\drivers\vm** as a target. The sample is searching the
    Windows *drivers* directory for any driver files with a prefix of *vm*, which
    is a common pattern for VMware Workstation driver files:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the call to <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction compares
    the value of the returned filename to *C:\Windows\System32\drivers\vm**. If the
    result of the <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> (meaning there’s no
    match), the code jumps to <samp class="SANS_TheSansMonoCd_W5Regular_11">loc_2</samp>,
    which contains the next function call, <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>.
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp> executes, and
    the same <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction
    compares the filenames. If the test instruction returns <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>,
    the program jumps to <samp class="SANS_TheSansMonoCd_W5Regular_11">loc_2</samp>
    again. <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp> will
    continue to execute until there’s a match or there are no more files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'While file enumeration in malware is very common for many reasons, the presence
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp> could mean the malware
    sample may be attempting to detect an analysis environment. VMware Workstation
    and VirtualBox file and directory paths that malware might target include the
    following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware files**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '*C:\Windows\System32\drivers\vm**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*C:\Windows\System32\vm**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*C:\Windows\SysWOW64\vm**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VMware directories**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '*C:\Program Files\VMware\*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*C:\Program Files\Common Files\VMware\*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox files**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '*C:\Windows\System32\VBox**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*C:\Windows\System32\drivers\VBox**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox directories**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '*C:\Program Files\Oracle\VirtualBox Guest Additions\*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to VMs, automated sandbox environments often contain specific folders
    and files that malware may find suspicious. Many Cuckoo installations, for example,
    contain several scripts and files like *Analyzer.py* and *analysis.conf*. Some
    Cuckoo versions may even have a directory called *cuckoo* or *agent* under the
    *C:\* directory path. Keep this in mind when analyzing evasive malware in an automated
    malware analysis sandbox.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Finally, malware can use directories and file enumeration to identify its operating
    environment and profile its target. For example, if a malware sample is targeting
    a certain organization or type of system, it might enumerate the filesystem to
    look for specific directories and files containing the target company name. This
    check would allow the malware to infect only systems in the scope of its attack.
    A good example of such a system is Stuxnet, mentioned in the introduction. As
    part of its exploitation tactics, Stuxnet searches for several files related to
    the Siemens Step7 software on the victim host. If these files don’t exist, the
    system will not be infected.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Some of these files and directories can be renamed or even removed without
    affecting the VM environment. I’ll discuss this in more detail in [Appendix A](appendix-A.xhtml).*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些文件和目录中的一些可以被重命名甚至删除，而不会影响虚拟机环境。我将在[附录 A](appendix-A.xhtml)中详细讨论这一点。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Shared Folders</samp>
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">共享文件夹</samp>
- en: To share files between VMs and the host OS, an analyst can configure *shared
    folders*. But while shared folders allow easy transfer of files from the host
    to the guest and vice versa, they also give malware another clue that it’s being
    analyzed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在虚拟机和宿主操作系统之间共享文件，分析师可以配置*共享文件夹*。但是，尽管共享文件夹允许从宿主机到访客机以及反向轻松传输文件，它们也为恶意软件提供了另一个线索，表明它正在被分析。
- en: Malware can enumerate shared folders by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">WNetGetProviderName</samp>
    Windows API function, which retrieves network resource information. As VM shared
    folders are effectively network resources, calling this function on a VirtualBox
    VM configured with shared folders may return a result of <samp class="SANS_TheSansMonoCd_W5Regular_11">VirtualBox
    Shared Folders</samp>, for example, which is a dead giveaway that this machine
    is hosted on a VirtualBox hypervisor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以通过使用<samp class="SANS_TheSansMonoCd_W5Regular_11">WNetGetProviderName</samp>
    Windows API 函数来枚举共享文件夹，该函数检索网络资源信息。由于虚拟机共享文件夹本质上是网络资源，在配置了共享文件夹的 VirtualBox 虚拟机上调用此函数可能会返回例如<samp
    class="SANS_TheSansMonoCd_W5Regular_11">VirtualBox Shared Folders</samp>的结果，这表明该机器是托管在VirtualBox虚拟化平台上的，直接揭示了这一点。
- en: Additionally, because VM shared folders function like network drives, they can
    be identified via normal file and folder enumeration functions, such as the previously
    discussed <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>. The target
    path for these functions would be the name of the VM network drive. Some common
    network drive names are *\\VboxSrv* (for VirtualBox) and *\\vmware-host* (for
    VMware Workstation).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于虚拟机共享文件夹的功能类似于网络驱动器，它们可以通过正常的文件和文件夹枚举功能进行识别，例如前面讨论过的<samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>。这些函数的目标路径将是虚拟机网络驱动器的名称。一些常见的网络驱动器名称是*\\VboxSrv*（用于VirtualBox）和*\\vmware-host*（用于VMware
    Workstation）。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Registry</samp>
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">注册表</samp>
- en: 'The Windows registry contains information about installed software, hardware
    configurations, the network, language and location settings, and many other data
    points that Windows uses to function. As a result, malware attempting to understand
    the target environment or detect a VM or sandbox will often query the registry.
    It might enumerate entire hives of the registry and search for suspect VM-related
    strings, or it might simply inspect a few keys of specific interest. The following
    excerpt shows how this might look in an actual malware sample:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 注册表包含关于已安装软件、硬件配置、网络、语言和位置设置以及许多其他数据点的信息，这些都是Windows运行所需的。因此，恶意软件在尝试理解目标环境或检测虚拟机或沙箱时，通常会查询注册表。它可能会枚举整个注册表的树形结构，并搜索可疑的与虚拟机相关的字符串，或者它可能只是检查一些特定的感兴趣的键。以下摘录显示了这在实际恶意软件样本中可能是如何表现的：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The malware calls <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp>
    to open a specific key of interest, followed by the <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValue</samp>
    function to enumerate all values and data under this registry key. Let’s break
    this code down a bit more.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件调用<samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp>来打开一个特定的感兴趣的注册表键，然后使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValue</samp>函数来枚举该注册表键下的所有值和数据。让我们稍微分析一下这段代码。
- en: First, the malware moves the <samp class="SANS_TheSansMonoCd_W5Regular_11">lpSubKey</samp>
    value, which represents the registry key it’s interested in, into the <samp class="SANS_TheSansMonoCd_W5Regular_11">rdx</samp>
    register ❶. In this case, this registry key is <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>.
    The value in the <samp class="SANS_TheSansMonoCd_W5Regular_11">rdx</samp> register
    is used as a parameter for the subsequent call to <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKeyExA</samp>
    ❷. Next, the code loads pointers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">lpData</samp>
    ❸ and <samp class="SANS_TheSansMonoCd_W5Regular_11">lpValueName</samp> ❹ structures.
    Then, it calls <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumValueA</samp>
    ❺, which stores the returned values and data for the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    registry key in <samp class="SANS_TheSansMonoCd_W5Regular_11">lpValueName</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">lpData</samp>, respectively.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Typically, malware will call <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumKey</samp>
    multiple times in a loop, as each iteration of <samp class="SANS_TheSansMonoCd_W5Regular_11">RegEnumKey</samp>
    stores only one value and data item. For simplicity’s sake, I included only one
    call to this function in the code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the malware compares the suspect value, <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX
    -1</samp>, to the value in the <samp class="SANS_TheSansMonoCd_W5Regular_11">lpdata</samp>
    buffer ❻. If they match, the malware assumes it’s running in a VirtualBox VM and
    terminates itself.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware may also query certain areas of the registry for environment profiling.
    For example, it might attempt to detect whether it’s running on a computer system
    of a certain company in order to avoid inadvertently infecting the wrong target.
    In the following pseudocode, this malware sample is querying the registry for
    software related to its target, a company called NewCorp:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example is using the <samp class="SANS_TheSansMonoCd_W5Regular_11">RegOpenKey</samp>
    Windows API function to search for the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU\Software\NewCorp</samp>
    registry key of the host’s system. If the malware finds the key, it assumes it’s
    running on a system within the NewCorp organization; otherwise, it terminates
    itself.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware can also query the registry using Windows command line tools, such
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">reg query</samp>:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command would succeed if the key exists on the victim’s system and fail
    otherwise.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'One final way in which malware can query the registry is by using Windows Management
    Instrumentation (WMI), PowerShell, and other native Windows tools, as we’ll discuss
    in [Chapter 15](chapter15.xhtml). For now, the point is that there are many methods
    of querying the registry, but it’s also important to note that malware and benign
    software alike both query the registry for many reasons; a query doesn’t always
    indicate that malware is using a profiling or evasion technique. Registry keys
    that malware may search for in an attempt to identify a VM analysis environment
    include the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Workstation**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKCU:\SOFTWARE\VMware, Inc.</samp>
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\Applications\VMwareHostOpen.exe</samp>
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\VMwareHostOpen.AssocFile</samp>
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Classes\VMwareHostOpen.AssocURL</samp>
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware
    User Process</samp>
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware
    VM3DService Process</samp>
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\RegisteredApplications\VMware
    Host Open</samp>
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\WOW6432Node\RegisteredApplications\VMware
    Host Open</samp>
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Enum\IDE\DiskVMware_Virtual_IDE_Hard_Drive___________00000001\</samp>
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\DSDT\VBOX__</samp>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\FADT\VBOX__</samp>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\ACPI\RSDT\VBOX__</samp>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VBoxTray</samp>
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Oracle
    VM VirtualBox Guest Additions</samp>
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Oracle\VirtualBox
    Guest Additions</samp>
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxMouse</samp>
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxSF</samp>
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxService</samp>
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxVideo</samp>
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\ControlSet001\services\VBoxGuest</samp>
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\SystemManufacturer</samp>
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\SystemProductName</samp>
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\BIOS\SystemProductName</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\SystemBiosVersion</samp>
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System\SystemBiosVersion</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Store\Configuration\OEMID</samp>
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Store\Configuration\OEMID</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Control\Class\</samp>
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\SYSTEM\CurrentControlSet\Control\Class\</samp>
- en: You can use the Windows tool *regedit.exe* on your own analysis VM to investigate
    these keys and get an idea of what malware may be looking for. For example, when
    I inspect the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    registry key in my own analysis machine, I can spot certain values and data that
    may be interesting to malware (see [Figure 4-1](chapter4.xhtml#fig4-1)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Windows 工具 *regedit.exe* 在你的分析虚拟机上调查这些注册表键，并了解恶意软件可能正在寻找什么。例如，当我检查我自己的分析机器上的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM:\HARDWARE\Description\System</samp>
    注册表键时，我可以发现一些可能对恶意软件感兴趣的值和数据（见[图 4-1](chapter4.xhtml#fig4-1)）。
- en: '![](../images/fig4-1.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-1: The hardware description
    in</samp> <samp class="SANS_Futura_Std_Book_11">regedit.exe</samp>'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-1：在</samp> <samp class="SANS_Futura_Std_Book_11">regedit.exe</samp>
    中的硬件描述
- en: The obvious data points of interest here are the <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX
    -1</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Oracle VM VirtualBox</samp>
    strings. Another big hint is the <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemBiosDate</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">06/23/99</samp>, which indicates
    the VirtualBox hypervisor. Once again, these registry keys are only examples.
    They may or may not exist on your VMs, depending on your hypervisor version, installed
    software, and other factors.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里明显的感兴趣数据点是 <samp class="SANS_TheSansMonoCd_W5Regular_11">VBOX -1</samp> 和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Oracle VM VirtualBox</samp> 字符串。另一个重要提示是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SystemBiosDate</samp> 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">06/23/99</samp>，这表明安装了
    VirtualBox 虚拟化程序。再一次，这些注册表键仅是示例，可能会根据你的虚拟化程序版本、已安装的软件和其他因素，在你的虚拟机上存在或不存在。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*These registry keys can typically be renamed or removed completely in order
    to trick malware and bypass its evasion techniques. I’ll discuss this in more
    detail in [Appendix A](appendix-A.xhtml).*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些注册表键通常可以被重命名或完全删除，以便欺骗恶意软件并绕过其规避技术。我将在[附录 A](appendix-A.xhtml)中更详细地讨论这一点。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Services</samp>
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">服务</samp>
- en: '*Services* are applications that typically start at system boot-up and run
    in the background of a user’s session, and they’re yet another way in which malware
    may attempt to identify a VM or sandbox environment. Some services are unique
    to a certain brand of hypervisor, giving away its presence, and some services
    can also identify installed malware analysis tools. For example, malware may be
    looking for the *VirtualBox Guest Additions Service*, which indicates the presence
    of VirtualBox.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务* 是在系统启动时通常会启动并在用户会话的后台运行的应用程序，它们是恶意软件可能尝试识别虚拟机或沙箱环境的另一种方式。有些服务是特定于某种虚拟化程序的，暴露了其存在，还有一些服务也能识别已安装的恶意软件分析工具。例如，恶意软件可能会查找
    *VirtualBox 客户端附加服务*，这表明系统中安装了 VirtualBox。'
- en: Malware may query services in multiple ways. One of the most common techniques
    is using the Windows API function <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumServiceStatus</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumServiceStatusEx</samp>, which
    will return a list of services on the host and their associated statuses, which
    are usually either <samp class="SANS_TheSansMonoCd_W5Regular_11">running</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">stopped</samp>. Malware can also
    use the function <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenService</samp>
    to open a handle to a specific service. If it successfully obtains a handle (meaning
    the service exists), the return code will be <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to Windows API functions, there are other methods of enumerating
    services that malware can employ. For example, malware can use the Windows <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sc</samp> command line tool to query a
    list of services or a specific service, like so:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Similarly, malware can use the WMI command line tool <samp class="SANS_TheSansMonoCd_W5Regular_11">wmic</samp>
    to query all services on the host:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, since some service information is stored in the registry, malware can
    query the registry for service information. If you see malware using service-related
    API functions, using tools such as <samp class="SANS_TheSansMonoCd_W5Regular_11">sc</samp>,
    or querying the registry to find specific hypervisor services, the sample may
    be attempting to detect an analysis environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: To better understand and explore the services running on your VMs and sandboxes,
    you can use the Windows native application *services.exe* to get a list of services
    configured on the system. In [Figure 4-2](chapter4.xhtml#fig4-2), you can see
    the VirtualBox Guest Additions Service running, which can signal to malware that
    it is running in a VM environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig4-2.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-2: The output of</samp>
    <samp class="SANS_Futura_Std_Book_11">services.exe</samp>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 4-1](chapter4.xhtml#tab4-1) lists some of the common services created
    by VMware and VirtualBox.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-1:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Hypervisor Services</samp>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VGAuthService</samp> | <samp
    class="SANS_Futura_Std_Book_11">VMware Guest Authentication Service</samp> |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VMTools</samp> | <samp class="SANS_Futura_Std_Book_11">VMware
    Tools Service</samp> |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxService</samp> | <samp
    class="SANS_Futura_Std_Book_11">VirtualBox Guest Additions Service</samp> |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installed Software</samp>
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Malware may enumerate the installed software on your analysis machine and look
    for keywords that represent common analysis tools or sandbox-related artifacts.
    This technique can also be used for target profiling; malware may simply query
    the host, looking for installed software indicating that this system is a valid
    target.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: To search for installed software, the malware might use a Windows API function
    such as <samp class="SANS_TheSansMonoCd_W5Regular_11">MsiEnumProducts</samp> or
    inspect the <samp class="SANS_TheSansMonoCd_W5Regular_11">HKLM\Software\Microsoft\Windows\Current
    Version\Uninstall</samp> registry key, whose contents from my malware analysis
    machine are shown in [Figure 4-3](chapter4.xhtml#fig4-3).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig4-3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-3: Enumerating the
    HKLM\Software\Microsoft\ Windows\Current Version\Uninstall registry key</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Here you can see several analysis tools, as well as VirtualBox Guest Additions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Software installers create many artifacts on the host, such as new folders,
    files, and registry entries, all of which can be enumerated by malware. Sometimes
    it’s a better approach to use the* portable *versions of analysis tools, which
    don’t need to be installed and are run directly from a self-contained executable
    file.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Mutexes</samp>
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As [Chapter 1](chapter1.xhtml) explained, a *mutex* is an object that helps
    control access to resources, acting as a sort of gatekeeper. Certain sandboxes
    and hypervisors have unique mutexes that may be interesting to malware. For example,
    VMware typically uses mutexes that begin with *VMware*, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware can use the Windows API function <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateMutex</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutex</samp> to search for
    specific mutex values, as shown in this sample:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The malware pushes the <samp class="SANS_TheSansMonoCd_W5Regular_11">mutex_name</samp>
    variable, which contains the mutex that the malware wants to find (<samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>),
    to the stack. It also pushes two other values that are required for the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">OpenMutex</samp> function but aren’t important
    here. Next, it calls <samp class="SANS_TheSansMonoCd_W5Regular_11">OpenMutexA</samp>
    and uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp> instruction
    to check whether that function succeeded or failed. If the function call succeeded,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>
    exists on the system, meaning that the system is likely running inside a VMware
    hypervisor.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that not all mutex-related activity is malicious. Mutexes are
    standard Windows objects and are not inherently malicious *or* benign. If you
    spot malware enumerating mutexes and attempting to find very specific strings
    such as the examples just given, it could be using this detection technique. Some
    mutexes that may reveal a VM environment include the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Workstation**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMToolsHookQueueLock</samp>
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestCopyPasteMutex</samp>
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMwareGuestDnDDataMutex</samp>
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxService</samp>
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTray</samp>
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Pipes</samp>
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *pipe* is a Windows object that allows for interprocess communication. Some
    hypervisors create unique pipes on the guest OS that may give away their presence
    to malware. Malware can call several different functions, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateFile</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">CallNamedPipe</samp>, to search
    for specific named pipes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: A great way to check your own VMs for these pipes is to use the tool Pipelist,
    which is part of the Windows Sysinternals suite from Mark Russinovich. [Figure
    4-4](chapter4.xhtml#fig4-4) shows the output from running the <samp class="SANS_TheSansMonoCd_W5Regular_11">pipelist</samp>
    command on a VMware Workstation VM. If you look closely, you may spot the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">vgauth-service</samp> pipe, which is unique
    to VMware.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig4-4.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-4: Output from running
    the pipelist command on a VMware Workstation VM</samp>'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the common pipes that may reside on your VMs:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Workstation**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Vmmemctl</samp>
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vgauth-service</samp>
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTray</samp>
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxTrayIPC</samp>
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxVideo</samp>
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMouse</samp>
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMiniRdr</samp>  ### <samp
    class="SANS_Futura_Std_Bold_B_11">Devices and Drivers</samp>'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypervisors often install specific devices and drivers on guest operating systems.
    *Devices* are objects that often represent physical hardware on the system, such
    as USB controllers or hard disk volumes. *Drivers* are software objects that control
    hardware, allowing the OS and devices to communicate. Device and driver objects
    are typically managed by the Windows object manager.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware can enumerate devices and driver objects using two Windows functions:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenDirectoryObject</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>. The
    following code shows these functions in action:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can see a handle to the *\\Driver* directory being loaded into register
    <samp class="SANS_TheSansMonoCd_W5Regular_11">rcx</samp> ❶, using the instruction
    <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp>, or *load effective address*.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> instruction calculates
    the address of an operand and loads it into a target register. This is followed
    by a call to <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenDirectoryObject</samp>,
    which opens *\\Driver* in preparation for the subsequent <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>
    function call ❷. Then, <samp class="SANS_TheSansMonoCd_W5Regular_11">NtQueryDirectoryObject</samp>
    ❹ queries the *\\Driver* directory objects and stores the list of objects in a
    buffer specified previously ❸. The malware then searches through this buffer,
    looking for specific drivers often used in VMs. Devices can be queried in the
    same way.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: To better understand the contents of the Windows object manager, you can view
    it directly on your Windows VMs using the WinObj tool from Sysinternals. [Figure
    4-5](chapter4.xhtml#fig4-5) shows some of the VirtualBox-related drivers installed
    on my analysis VM using WinObj. Feel free to explore them on your own analysis
    system.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig4-5.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-5: Exploring drivers
    with WinObj</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common hypervisor drivers for VMware Workstation and VirtualBox include
    the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Workstation**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp</samp>
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-debug</samp>
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-stats</samp>
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmp-sloader</samp>
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmci</samp>
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmhgfs</samp>
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMMemCtl</samp>
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmmouse</samp>
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmrawdsk</samp>
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmusbmouse</samp>
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vsock</samp>
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMouse</samp>
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxSF</samp>
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxVideo</samp>
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxWddm</samp>
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And here are some common devices:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Workstation**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMCIGuestDev</samp>
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VMCIHostDev</samp>
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vm3dmpDevice</samp>
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmci</samp>
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">vmmemctl</samp>
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxGuest</samp>
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">VBoxMiniRdr</samp>
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Usernames and Hostnames</samp>
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many automated malware analysis sandboxes have a default list of possible usernames
    assigned to user accounts on the system. These usernames may be randomized, but
    they’re often hardcoded. System hostnames may similarly be hardcoded and randomized
    at boot-up time. This isn’t simply a characteristic of automated sandboxes, however.
    Malware analysts may also configure their analysis VMs with usernames or hostnames
    that may be generic, well known, or otherwise not how a “real” user would configure
    their system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Some malware can take advantage by enumerating the user accounts and hostname
    of the system, specifically searching for generic usernames such as *Administrator*,
    *User*, or *John*, or hostnames such as *Cuckoo*, *Test*, *Desktop*, *Workstation*,
    or *Lab*. *TequilaBoomBoom*, at one point the hostname for VirusTotal’s sandboxing
    service, is also a common check.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Configure your VMs and sandbox environments with nongeneric usernames and
    hostnames. Try to use values that an actual end user or enterprise environment
    would use, or randomize the names.*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Locale and Language Settings</samp>
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Keyboard and language settings can be used to determine a potential victim’s
    location. Malware might use this technique to include or exclude a host as a valid
    target for geographic or geopolitical reasons, or to evade analysis. For example,
    say a malware sample wants to determine whether a potential victim is located
    in Russia or speaks Russian. Depending on this information, it may then choose
    to deploy its payload on the host or quietly terminate itself. Here are three
    different approaches it can use to extract this information:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Getting the keyboard layout language
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating the language settings of the system itself, such as the display
    language
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the host’s locale
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first method is perhaps the most common. The Windows function <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>
    returns the active keyboard language of the host, and <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayoutList</samp>
    returns a complete list of all keyboard languages that are installed on the host.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: There are several possible Windows functions to get the host’s language settings.
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetUserDefaultUILanguage</samp>,
    for example, returns the currently logged-in user’s user interface language. <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetSystemDefaultUILanguage</samp> returns
    the system language, or more specifically, the language in which the OS was installed.
    Finally, <samp class="SANS_TheSansMonoCd_W5Regular_11">GetProcessPreferredUILanguages</samp>
    will list languages that the user’s running processes may be utilizing. Talk about
    options!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The *locale* of the host is different from the host’s keyboard and UI language
    settings in that it’s a list of language-related settings for a particular language-and-country
    combination. Some items that may be included as part of a locale are currency
    and date/time display formats, as well as a language identifier. The Windows API
    functions <samp class="SANS_TheSansMonoCd_W5Regular_11">GetSystemDefaultLCID</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">GetUserDefaultLCID</samp> return
    locale information that can be used to profile a host or user. Processes and threads
    may also have their own custom locales, which malware can query using the function
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetThreadLocale</samp>.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'In a malware sample, you’d likely see a call to one of the previously mentioned
    functions, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>,
    followed by a comparison to several values that represent Windows language identifiers.
    The following pseudocode shows this technique in action:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This malware sample calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetKeyboardLayout</samp>
    function and compares the result to the value <samp class="SANS_TheSansMonoCd_W5Regular_11">0x419</samp>,
    which is the Russian language identifier in hexadecimal (also known as *in hex*).
    If this Russian language identifier is in use, the malware executes <samp class="SANS_TheSansMonoCd_W5Regular_11">TerminateProcess</samp>.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 4-2](chapter4.xhtml#tab4-2) lists some of the language identifiers for
    Windows.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-2:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    Language Identifiers</samp>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Identifier (in hex)</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Language (and associated country)</samp> |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x402</samp> | <samp class="SANS_Futura_Std_Book_11">Bulgarian
    (Bulgaria)</samp> |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">Chinese
    (Simplified) (China)</samp> |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x809</samp> | <samp class="SANS_Futura_Std_Book_11">English
    (United Kingdom)</samp> |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x409</samp> | <samp class="SANS_Futura_Std_Book_11">English
    (United States)</samp> |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x407</samp> | <samp class="SANS_Futura_Std_Book_11">German
    (Germany)</samp> |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x418</samp> | <samp class="SANS_Futura_Std_Book_11">Romanian
    (Romania)</samp> |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0x419</samp> | <samp class="SANS_Futura_Std_Book_11">Russian
    (Russia)</samp> |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: There are several other, more covert methods for enumerating or inferring a
    potential victim’s language and locale settings, such as enumerating the date/time
    formats, currency formats, or even calendar information. The potential list is
    so extensive that a portion of this book could be dedicated to this technique
    alone. What’s most important is that you now have the necessary knowledge to identify
    many of the common methods that malware may use to profile a victim’s language
    and locale.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Operating System Version Information</samp>
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before infecting a victim machine, malware often needs to determine whether
    that machine is running a certain OS. Stuxnet, for example, infected only Windows
    XP computers because its authors knew that the target facilities used Windows
    XP to control the Siemens programmable logic controllers. A malware sample that
    can run on only a certain version of Windows may attempt to identify the OS before
    infecting the host to avoid inadvertently crashing it. For example, if the malware
    contains exploit code that works for only a specific sub-version of Windows, such
    as Windows 7 Service Pack 1, but causes system instability for Windows 7 Service
    Pack 2, it might want to determine a victim’s OS sub-version first to prevent
    an unintended crash that would potentially alert the victim to its presence.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'This technique isn’t usually implemented as a detection or evasion technique,
    but it’s worth discussing in this context because it can still interfere with
    the analysis process. For example, if you were researching Stuxnet and decided
    to run the sample in a VM or sandbox with a modern Windows OS, it likely wouldn’t
    run correctly, thereby unintentionally evading automated and dynamic analysis
    methods. This is an important point to keep in mind: a malware sample that doesn’t
    execute correctly in your analysis environment isn’t necessarily intentionally
    trying to be evasive.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple ways of enumerating the target’s OS and version via the
    Windows API. The <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionEx</samp>
    function, along with its close cousin <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersion</samp>,
    accomplishes this, as shown here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp> function
    takes a buffer as an argument. This buffer will be the area of memory where the
    returned OS information will be stored after <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp>
    is called. The <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> instruction
    loads the buffer address, <samp class="SANS_TheSansMonoCd_W5Regular_11">[ebp-0A0h]</samp>,
    into the <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp> register, and
    then the buffer address is pushed to the stack with <samp class="SANS_TheSansMonoCd_W5Regular_11">push
    eax</samp>.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Next, the sample must define the size of the data that will be returned from
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp> function
    call. This data will be stored in a structure called <samp class="SANS_TheSansMonoCd_W5Regular_11">VersionInformation</samp>.
    This sample specifies the size of the <samp class="SANS_TheSansMonoCd_W5Regular_11">VersionInformation</samp>
    structure as <samp class="SANS_TheSansMonoCd_W5Regular_11">9C</samp>, which in
    hex is equal to 156 bytes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the malware sample calls <samp class="SANS_TheSansMonoCd_W5Regular_11">GetVersionExA</samp>
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">call GetVersionExA</samp>) to get
    the OS version, then later checks that information by comparing the <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajorVersion</samp>
    with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>, which represents
    a very old version of Windows. (For some perspective, <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>
    is the version number for Windows XP!) Essentially, this malware sample is testing
    to see how old this host’s Windows version is.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 4-3](chapter4.xhtml#tab4-3) contains a subset of the <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajor</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMinor</samp> OS versions.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-3:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMajor</samp>
    <samp class="SANS_Futura_Std_Book_11">and</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbMinor</samp>
    <samp class="SANS_Futura_Std_Book_11">OS Versions</samp>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operating system</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dwMajorVersion</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">dwMinorVersion</samp>
    |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows 10</samp> | <samp class="SANS_Futura_Std_Book_11">10</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2016</samp> | <samp
    class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows 8.1</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2012</samp> | <samp
    class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows 7</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">1</samp> |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Server 2008</samp> | <samp
    class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows Vista</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Windows XP</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">1</samp> |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we covered many common (and some not-so-common) ways in which
    malware can detect an analysis environment by inspecting operating system objects
    and artifacts. In the next chapter, we’ll explore some techniques malware can
    use to look for evidence of legitimate user activity (or lack thereof!) to reveal
    the underlying VM or sandbox environment.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
