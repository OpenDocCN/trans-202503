- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**MAKING DECISIONS WITH IF STATEMENTS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用If语句做决策**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: Which shirt should I wear? What should I have for dinner? Where should I go?
    Should I wear my pants so low that my underwear shows? You ask yourself questions
    like these and answer them every day. Just as you make decisions, your programs
    can too! Of course, they won’t do this on their own. Your programs only make the
    comparisons you want them to make, and then they either run some statements or
    skip them. In this chapter, you’ll write programs that can make decisions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我该穿哪件衬衫？我该吃什么晚餐？我该去哪里？我应该把裤子穿得那么低，以至于我的内裤都露出来吗？你每天都会问自己这样的问题并给出答案。就像你做决策一样，你的程序也能做到！当然，它们不会自己做出决策。你的程序只会做你希望它们做的比较，然后执行一些语句或跳过它们。在本章中，你将编写能够做出决策的程序。
- en: The programs you’ve written so far followed a simple path where the statements
    execute from top to bottom. But sometimes you might need to run some statements
    if a condition’s true or other statements if a condition’s false. This is similar
    to how you make decisions in your life. For example, you might say, “If there’s
    snow, then I’ll go skiing” or “If I finish my work before 4:00 PM, I’ll go to
    the movies; otherwise, I’ll just go to Steve’s house.” In both cases, the action
    you take depends on a *condition*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你编写的程序遵循了一条简单的路径，其中语句从上到下执行。但有时你可能需要在某个条件为真时执行一些语句，或者在某个条件为假时执行其他语句。这就像你在生活中做决策的方式。例如，你可能会说：“如果下雪，我就去滑雪”或者“如果我在下午4点前完成工作，我就去看电影；否则，我就去史蒂夫家。”在这两种情况下，你采取的行动取决于一个*条件*。
- en: 'Small Basic uses a few different ways to control which statements run in a
    program: selection statements (`If`, `If/Else`, `If/ElseIf`), jump statements
    (`Goto`), and iteration or loop statements (`For` and `While`). In this chapter
    and the next, we’ll explain selection and jump statements, and we’ll explain loops
    in [Chapters 13](ch13.html#ch13) and [14](ch14.html#ch14). In this chapter, you’ll
    learn about relational operators, Boolean expressions, and how you can use `If/Else`
    statements to write some interesting programs.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic使用几种不同的方法来控制程序中哪些语句会被执行：选择语句（`If`，`If/Else`，`If/ElseIf`），跳转语句（`Goto`）以及迭代或循环语句（`For`和`While`）。在本章和下一章中，我们将解释选择语句和跳转语句，而循环语句将在[第13章](ch13.html#ch13)和[第14章](ch14.html#ch14)中讲解。本章中，你将了解关系运算符、布尔表达式，以及如何使用`If/Else`语句编写一些有趣的程序。
- en: '**The If Statement**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**If语句**'
- en: Suppose your mom calls and tells you, “On your way home, stop at Captain Snarf’s
    Pizza. If it’s open, get us a large pizza.” Her instructions don’t say what to
    do if the pizza place is closed; you assume that you’ll just go home empty-handed.
    [Listing 8-1](ch08.html#ch8ex1) represents this situation in code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你妈妈打电话告诉你：“回家的路上，停在Captain Snarf的披萨店。如果它开门，给我们买一个大披萨。”她的指示没有说如果披萨店关门该怎么办；你假设自己会空手回家。[清单
    8-1](ch08.html#ch8ex1)将这个情景用代码表示出来。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 8-1: Using* `If` *and* `EndIf` *keywords*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-1：使用* `If` *和* `EndIf` *关键字*'
- en: Run this program and enter `1` in response to the prompt (to indicate that Snarf’s
    is open). Because the condition on line 6 is true, the program displays the message
    on line 7, which is `"You bought a delicious pizza!"` The statement on line 9
    (which comes after the `EndIf` keyword) runs whether you buy a pizza or not. Run
    this code again, but this time enter `2` in response to the prompt. What happens?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个程序并在提示时输入`1`（表示Snarf’s开门）。由于第6行的条件为真，程序会显示第7行的信息，内容是“你买了一个美味的披萨！”第9行的语句（即`EndIf`关键字之后的语句）无论你是否买了披萨都会执行。再次运行这段代码，这次在提示时输入`2`。会发生什么呢？
- en: The statement on line 6 is an `If` statement. The part of the statement after
    the `If` keyword (`status = 1`) is the *condition*. The program checks to see
    whether the condition is true. In this case, it checks whether Captain Snarf’s
    Pizza is open. The code between the `Then` and the `EndIf` keywords is the *action*—what
    the program does. The program does the action only if the condition’s true. Programmers
    usually use the term *code block* to refer to the statements between the `If`
    and the `EndIf` keywords (between lines 6 and 8).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行的语句是一个`If`语句。语句中`If`关键字后的部分（`status = 1`）是*条件*。程序检查该条件是否为真。在这个例子中，它检查Captain
    Snarf的披萨店是否开门。`Then`和`EndIf`关键字之间的代码是*动作*——程序要执行的内容。只有在条件为真时，程序才会执行动作。程序员通常使用*代码块*这个术语，来指代`If`和`EndIf`关键字之间的语句（第6行到第8行之间）。
- en: '**NOTE**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Small Basic doesn’t require you to place parentheses around conditional expressions,
    meaning you can write the statement on line 6 like this:* `If status = 1 Then`*.
    But parentheses make the statement easier to read, so we’ll use them in this book.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*Small Basic 不要求你在条件表达式周围加括号，这意味着你可以像这样写第6行的语句：* `If status = 1 Then`*。但括号使语句更易读，所以我们在本书中会使用它们。*'
- en: Small Basic automatically indents `If` statements as you type the code. This
    makes the program easier to read and clearly shows when statements are part of
    code blocks. If your code ever gets unindented, right-click in the Editor and
    select **Format Program** from the pop-up menu to indent all your code. Awesome!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic 在你输入代码时会自动缩进`If`语句，这使得程序更易读，并清楚地显示哪些语句是代码块的一部分。如果你的代码失去了缩进，可以右击编辑器并从弹出菜单中选择**格式化程序**来重新缩进所有代码。太棒了！
- en: The `If` statement is the basis of all decision making in Small Basic. Check
    out the illustration in [Figure 8-1](ch08.html#ch8fig1) to understand how it works.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`If`语句是 Small Basic 中所有决策的基础。查看[图8-1](ch08.html#ch8fig1)中的插图，了解它是如何工作的。'
- en: The condition of an `If` statement is a *logical expression* (also called a
    *Boolean expression* or a *conditional expression*) that’s either true or false.
    If the condition is true, the program runs the statements between the `If` and
    `EndIf` keywords (which is called the *body* of the `If` statement). But if the
    condition is false, the statements in the block are skipped. The program runs
    the statement after the `EndIf` keyword whether the condition is true or not.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`If`语句的条件是一个*逻辑表达式*（也叫*布尔表达式*或*条件表达式*），其值要么为真，要么为假。如果条件为真，程序会执行`If`和`EndIf`之间的语句（这部分称为`If`语句的*主体*）。但如果条件为假，语句块中的语句将被跳过。无论条件是否为真，程序都会执行`EndIf`之后的语句。'
- en: '![image](graphics/f08-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-01.jpg)'
- en: '*Figure 8-1: The flowchart of the* `If/Then/EndIf` *block*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-1：`If/Then/EndIf` 块的流程图*'
- en: '**TIP**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*You can think of an* `If` *statement as a detour in the flow of a program.
    It’s like an optional roller coaster loop.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以把* `If` *语句看作是程序流程中的一个绕行，它就像是一个可选的过山车回路。*'
- en: '**BOOLEANS IN THE REAL WORLD**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**现实世界中的布尔值**'
- en: 'The word Boolean is used in honor of George Boole, a 19th-century British mathematician
    who invented a system of logic based on just two values: 1 and 0 (or true and
    false). Boolean algebra eventually became the basis for modern-day computer science.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔（Boolean）这个词是为了纪念乔治·布尔（George Boole），这位19世纪的英国数学家发明了一种基于两种值（1和0，或者真和假）的逻辑系统。布尔代数最终成为现代计算机科学的基础。
- en: In real life, we use Boolean expressions all the time to make decisions. Computers
    also use them to determine which branch of a program to follow. A remote server
    may grant or deny access when you swipe your credit card at a department store
    based on whether your card was valid (true) or invalid (false). A computer in
    a vehicle will automatically deploy the airbags when it decides that a collision
    has occurred (`collision = true`). Your cell phone may display a warning icon
    when the battery is low (`batteryLow = true`) and remove the icon when the battery’s
    charge is acceptable (`batteryLow = false`).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，我们常常使用布尔表达式来做决定。计算机也使用它们来确定程序的执行路径。比如，当你在商场刷卡时，远程服务器可能会根据你的信用卡是否有效（真）或者无效（假）来授予或拒绝访问权限。车辆中的计算机会在判断发生碰撞时自动弹出安全气囊（`collision
    = true`）。当手机电池电量低时，可能会显示警告图标（`batteryLow = true`），而当电池电量恢复正常时，图标会消失（`batteryLow
    = false`）。
- en: These are just few examples of how computers cause different actions to be taken
    by checking the results of Boolean conditions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是计算机通过检查布尔条件结果来执行不同操作的几个例子。
- en: You can test all sorts of conditions using relational operators, which we’ll
    discuss next.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用关系运算符测试各种条件，接下来我们将讨论这些运算符。
- en: '***Relational Operators***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关系运算符***'
- en: The condition (`status = 1`) in [Listing 8-1](ch08.html#ch8ex1) tests whether
    the variable `status` is equal to 1\. We call the equal sign here a *relational
    operator* (or a *comparison operator*) because it tests the relationship between
    two values (or expressions). Small Basic supports five other relational operators
    that you can use in conditions. [Table 8-1](ch08.html#ch8table1) shows you these
    relational operators.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 8-1](ch08.html#ch8ex1)中的条件（`status = 1`）测试变量`status`是否等于1。我们把这里的等号称为*关系运算符*（或*比较运算符*），因为它测试两个值（或表达式）之间的关系。Small
    Basic 支持另外五个关系运算符，你可以在条件中使用它们。[表8-1](ch08.html#ch8table1)展示了这些关系运算符。'
- en: '**Table 8-1:** Relational Operators in Small Basic'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 8-1：** 小基础中的关系运算符'
- en: '| **Operator** | **Meaning** | **Mathematical symbol** |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **含义** | **数学符号** |'
- en: '| --- | --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `=` | Equal to | = |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `=` | 等于 | = |'
- en: '| `<` | Less than | < |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 | < |'
- en: '| `<=` | Less than or equal to | ≤ |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 | ≤ |'
- en: '| `>` | Greater than | > |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 | > |'
- en: '| `>=` | Greater than or equal to | ≥ |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 | ≥ |'
- en: '| `<>` | Not equal to | ≠ |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `<>` | 不等于 | ≠ |'
- en: Let’s look at a couple of short examples to see how these operators work. A
    lot of people want to be on Dancing with the Stars. You are hired to write an
    application form that potential dancers will fill out. One of the requirements
    is that the applicant must be at least 18 years old. How would you check this
    condition in your program?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看几个简短的示例，看看这些运算符是如何工作的。很多人都想参加《与星共舞》。你被雇佣编写一个申请表，潜在的舞者会填写。一个要求是申请人必须至少18岁。你如何在程序中检查这个条件？
- en: 'Well, that’s easy. You can write something like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这很简单。你可以写出类似这样的代码：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `If` condition checks whether `age` is less than 18\. If it is, the applicant
    isn’t old enough, and their dream to dance with the stars is over. Nice try, tiny
    dancer!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`If` 条件检查 `age` 是否小于18。如果是，申请人不够年龄，他们与明星共舞的梦想就此结束。好样的，小舞者！'
- en: 'Another way to check the applicant’s age is like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检查申请人年龄的方法如下：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `If` condition checks whether `age` is greater than or equal to 18\. If
    it’s true, the applicant passes this condition and still has a chance to dance
    with the stars.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`If` 条件检查 `age` 是否大于或等于18。如果条件为真，申请人通过了这一条件，仍然有机会与明星共舞。'
- en: 'But what if the applicant also needs to have exactly 9 years of dancing experience?
    (Don’t ask why!) You can write something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果申请人还需要恰好有9年的舞蹈经验呢？（别问为什么！）你可以写出类似这样的代码：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the `If` condition uses the not equal (`<>`) operator. If an applicant
    enters any number other than 9, it’s game over for that dancer!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`If` 条件使用了不等于（`<>`）运算符。如果申请人输入的不是9，那么这个舞者的游戏就结束了！
- en: '**TRY IT OUT 8-1**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 8-1**'
- en: 'Santa wants to deliver presents more efficiently. Instead of crawling down
    chimneys, he’ll drop the presents down the chimneys from his sleigh. He needs
    a program that inputs the sleigh’s current height (in meters) and then computes
    the time it takes (in seconds) for a present to fall to the chimney. Here is the
    formula:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞老人希望更高效地送礼物。为了避免从烟囱爬下来，他决定从雪橇上将礼物掉入烟囱。他需要一个程序，输入雪橇当前的高度（以米为单位），然后计算礼物掉到烟囱的时间（以秒为单位）。公式如下：
- en: '![image](graphics/f0101-01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0101-01.jpg)'
- en: The program must check that the height Santa enters is a positive number before
    computing the time. Run the following program two times. Enter a positive height
    in the first run and a negative height in the second. Explain what happens in
    each case.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 程序必须在计算时间之前检查圣诞老人输入的高度是否为正数。运行以下程序两次。第一次输入一个正高度，第二次输入一个负高度。解释每种情况下发生了什么。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '***Complex If Conditions***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***复杂的 If 条件***'
- en: 'Like arithmetic operators, relational operators also need two operands, one
    on each side. These operands can be simple, using variables and constants, or
    they can be complicated math expressions. For example, if you want to check that
    you have enough money to buy two large pizzas and pay a $5 tip, enter this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 和算术运算符一样，关系运算符也需要两个操作数，分别位于两边。这些操作数可以是简单的，使用变量和常量，也可以是复杂的数学表达式。例如，如果你想检查是否有足够的钱来购买两张大披萨并支付5美元的小费，可以输入如下内容：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Small Basic first finds the value of `2 * pizzaPrice + 5` (using the current
    value of `pizzaPrice`). It then compares the result with the current value of
    `myMoney` to see whether the `If` condition is true or false.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 小基础首先计算 `2 * pizzaPrice + 5` 的值（使用当前的 `pizzaPrice` 值）。然后将结果与当前的 `myMoney` 值进行比较，以查看
    `If` 条件是否为真或假。
- en: 'You can also use any method that returns a value inside the `If` condition.
    For example, if you create a pizza delivery video game and want to give the player
    an extra life when their score gets to 100, 200, 300, and so on, you can enter
    this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用任何在 `If` 条件中返回值的方法。例如，如果你制作一个披萨外送视频游戏，并希望在玩家的得分达到100、200、300等时给予玩家一条额外生命，你可以输入如下内容：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This condition checks the remainder of the current score, `score`, divided by
    100\. If the remainder is 0, the `If` condition is true and the player gets the
    extra life they earned.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该条件检查当前得分 `score` 除以100后的余数。如果余数为0，`If` 条件为真，玩家获得了他们应得的额外生命。
- en: '**TRY IT OUT 8-2**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**实践练习 8-2**'
- en: Translate each of the following statements into a logical expression, and then
    check whether the condition is true or false. Assume *x* = 4 and *y* = 5.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下每个语句转换为逻辑表达式，然后检查条件是否为真或假。假设 *x* = 4 且 *y* = 5。
- en: The sum of *x* and 3 is less than 8.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x* 和 3 的和小于 8。'
- en: The remainder of *x* divided by 3 is 2.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x* 除以 3 的余数是 2。'
- en: The sum of *x*² and *y*² is greater than or equal to 40.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x*² 和 *y*² 的和大于或等于 40。'
- en: '*x* is evenly divisible by 2.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x* 可以被 2 整除。'
- en: The minimum of *x* and *y* is less than or equal to 10.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x* 和 *y* 的最小值小于或等于 10。'
- en: '***Comparing Strings***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***比较字符串***'
- en: We just showed you how to use relational operators to compare numbers, but in
    some applications you’ll need to compare strings. For example, you might need
    to check if a user entered the correct password for your program or if they guessed
    the right word in a word-guessing game.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚展示了如何使用关系运算符比较数字，但在某些应用中，你需要比较字符串。例如，你可能需要检查用户是否输入了正确的密码，或者他们是否在猜词游戏中猜对了单词。
- en: You can use the `=` (equal) or `<>` (not equal) operators to test whether two
    strings are identical. [Listing 8-2](ch08.html#ch8ex2) asks the user to guess
    the secret passcode.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `=`（等于）或 `<>`（不等于）运算符来测试两个字符串是否相同。[示例 8-2](ch08.html#ch8ex2) 让用户猜测秘密密码。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 8-2: Comparing strings in Small Basic*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 8-2：在 Small Basic 中比较字符串*'
- en: Run this program several times, and try a few different guesses. For example,
    try entering `pizza rules!` (using a lowercase *p*). What happens? Run the program
    again, but this time enter `Pizza rules!` (with an uppercase *P*). Did it work
    this time? Yep! The reason is that when you compare strings, they must be an exact
    match. All the capitalization, spacing, and punctuation must match.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 多次运行此程序，并尝试几种不同的猜测。例如，尝试输入 `pizza rules!`（使用小写 *p*）。会发生什么？再运行一次程序，这次输入 `Pizza
    rules!`（使用大写 *P*）。这次成功了吗？没错！原因是，当你比较字符串时，它们必须完全匹配。所有的大小写、空格和标点符号必须完全一致。
- en: Note that the other relational operators (`<, <=`, `>`, and `>=`) can’t be used
    with strings. If you use any of these operators with non-numeric strings, the
    result will always be false.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，其他关系运算符（`<, <=`, `>`, 和 `>=`）不能与字符串一起使用。如果你将这些运算符与非数字字符串一起使用，结果总是为假。
- en: '**The If/Else Statement**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**If/Else 语句**'
- en: 'Your mom calls you back again and gives you more instructions: “One more thing!
    If Captain Snarf’s is closed, please stop by LongLine Grocery and get a frozen
    pizza.” Now you can use `If/Else` statements in Small Basic to help you!'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你妈妈再次打电话给你，并给你更多的指示：“还有一件事！如果 Captain Snarf’s 关门了，请顺便去 LongLine Grocery 买一个冷冻比萨。”现在你可以在
    Small Basic 中使用 `If/Else` 语句来帮助你了！
- en: The `If/Else` statement (also called the *two-way* `If` *statement*) lets you
    take one action when the condition’s true and another action when the condition’s
    false. [Figure 8-2](ch08.html#ch8fig2) illustrates how this statement works.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`If/Else` 语句（也称为 *二选一* `If` *语句*）让你在条件为真时采取一种行动，在条件为假时采取另一种行动。[图 8-2](ch08.html#ch8fig2)
    演示了这个语句的工作原理。'
- en: '![image](graphics/f08-02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-02.jpg)'
- en: '*Figure 8-2: The flowchart of the* `If/Else` *statement*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：* `If/Else` *语句的流程图*'
- en: If the condition is true, Small Basic runs the statements in the `If` block
    (between the `If` and `Else` keywords). If the condition is false, Small Basic
    runs the `Else` block (between the `Else` and `EndIf` keywords). So Small Basic
    runs the statements in only one of the two blocks (either the `If` block or the
    `Else` block).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件为真，Small Basic 将执行 `If` 块中的语句（位于 `If` 和 `Else` 关键字之间）。如果条件为假，Small Basic
    将执行 `Else` 块中的语句（位于 `Else` 和 `EndIf` 关键字之间）。因此，Small Basic 只会执行两个块中的一个（`If` 块或
    `Else` 块）。
- en: You can write your mom’s new instructions, as shown in [Listing 8-3](ch08.html#ch8ex3).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照 [示例 8-3](ch08.html#ch8ex3) 中所示编写你妈妈的新指示。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 8-3: Demonstrating the* `If/Else` *statement*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 8-3：演示* `If/Else` *语句*'
- en: If `status = 1`, meaning that Captain Snarf’s is open, you’ll buy a delicious
    pizza and go home. But if `status` is not 1 (Captain Snarf’s is not open), you’ll
    buy a frozen pizza from LongLine Grocery and go home.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `status = 1`，意味着 Captain Snarf’s 是开放的，你将买一个美味的比萨并回家。但如果 `status` 不是 1（Captain
    Snarf’s 没有开门），你将从 LongLine Grocery 买一个冷冻比萨并回家。
- en: Your mom’s instructions assume that LongLine is always open and that you’ll
    find what you’re looking for. But what if the grocery store has run out of frozen
    pizzas? Stay tuned; you might receive another call from your mom to give you new
    instructions!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你妈妈的指令假设LongLine总是开着，并且你能找到你需要的东西。但如果杂货店没有冷冻披萨了呢？敬请关注；你可能会接到妈妈的另一个电话，给你新的指令！
- en: '**TRY IT OUT 8-3**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 8-3**'
- en: Complete the following program to create a brainteaser quiz. This program will
    surprise you with its answers. Be sure to get creative with the way you present
    the correct answers!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下程序，创建一个脑筋急转弯测验。这个程序会用它的答案让你吃惊。一定要在展示正确答案时发挥创意！
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here are some suggestions for the questions you can add:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些问题建议，你可以添加：
- en: How many inches of soil are in a hole 1-foot deep and 1-foot wide?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个深1英尺、宽1英尺的坑里有多少英寸的土壤？
- en: '(Answer: 0\. Display: There is no soil in a hole!)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （答案：0。显示：坑里没有土壤！）
- en: Is a ton of gold heavier than a ton of feathers? (Yes or No)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一吨金子比一吨羽毛重吗？（是或否）
- en: '(Answer: No. Display: A ton of anything weighs a ton!)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （答案：不。显示：任何东西一吨就是一吨！）
- en: How many 4-cent stamps are in a dozen?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一打有多少个4分钱邮票？
- en: '(Answer: 12\. Display: There are always 12 in a dozen!)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （答案：12。显示：一打总是有12个！）
- en: '**Nested If and If/Else Statements**'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**嵌套的 If 和 If/Else 语句**'
- en: The statements you write in the body of an `If` (or `Else`) block can be any
    kind of Small Basic statement, including another `If` or `If/Else` statement.
    Writing an `If` (or `If/Else`) statement inside another one creates a *nested*
    `If` *statement* (see [Figure 8-3](ch08.html#ch8fig3)). The inner `If` statement
    can also include other `If` or `If/Else` statements, and the nesting can continue
    to any level you want. But be careful not to nest down too many levels, or you’ll
    get lost in all the levels and might feel like Super Mario falling down an endless
    pit!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`If`（或`Else`）块中的语句可以是任何类型的小基本语句，包括另一个`If`或`If/Else`语句。在另一个语句中写`If`（或`If/Else`）语句会创建一个*嵌套的*
    `If` *语句*（见[图 8-3](ch08.html#ch8fig3)）。内层的`If`语句也可以包含其他的`If`或`If/Else`语句，嵌套可以继续到你想要的任何层级。但要小心，不要嵌套太多层次，否则你会迷失在所有的层次中，可能会觉得自己像超级马里奥掉进了无尽的深坑！
- en: You can use nested `If` statements when you need to perform multiple checks
    on the same variable or when you need to test multiple conditions. Let’s look
    at an example that uses a nested `If/Else` block to test multiple conditions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要对同一个变量进行多次检查或需要测试多个条件时，你可以使用嵌套的`If`语句。让我们来看一个示例，使用嵌套的`If/Else`块来测试多个条件。
- en: '![image](graphics/f08-03.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-03.jpg)'
- en: '*Figure 8-3: Illustrating nested* `If` *and* `If/Else` *statements*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-3：演示嵌套的* `If` *和* `If/Else` *语句*'
- en: After hanging up with you, your mom thought LongLine Grocery might be out of
    frozen pizzas. So she calls you again and says, “Listen, if Captain Snarf’s is
    closed and LongLine doesn’t have any frozen pizzas, then get a bag of frozen chicken
    wings.” [Listing 8-4](ch08.html#ch8ex4) shows how to turn these instructions into
    code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 挂掉电话后，你妈妈觉得LongLine Grocery可能没有冷冻披萨了。所以她再次打电话给你，说：“听着，如果Captain Snarf’s关门了，而且LongLine没有冷冻披萨，那么就买一袋冷冻鸡翅。”[列表
    8-4](ch08.html#ch8ex4)展示了如何将这些指令转化为代码。
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 8-4: Demonstrating nested* `If` *conditions*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-4：演示嵌套的* `If` *条件*'
- en: There it is—a nested `If/Else` statement! If Captain Snarf’s is closed, you
    run a nested `If/Else` statement to decide what to buy from the grocery store.
    Line 10 sets the variable `hasPizza` randomly to either 1 or 2\. A 1 means that
    LongLine still has frozen pizzas, and a 2 means the grocery store has run out.
    Run this program several times to see what you’ll pick up for dinner tonight.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这个——一个嵌套的`If/Else`语句！如果Captain Snarf’s关门了，你就运行一个嵌套的`If/Else`语句来决定从杂货店买什么。第10行将变量`hasPizza`随机设置为1或2。1表示LongLine仍然有冷冻披萨，而2表示杂货店没有了。多次运行这个程序，看看今晚你会买什么晚餐。
- en: 'But wait, your mom just realized that you might not have money, and she’s calling
    back: “Sorry, I forgot to tell you. If you don’t have enough money, just go to
    Steve’s house and have dinner there!” Now we have to add another level of nesting.
    [Listing 8-5](ch08.html#ch8ex5) shows you how to handle this situation.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，你妈妈刚刚意识到你可能没有钱，于是她打电话回来：“抱歉，我忘了告诉你。如果你没有足够的钱，就去史蒂夫家吃饭！”现在我们需要再添加一个嵌套层级。[列表
    8-5](ch08.html#ch8ex5)展示了如何处理这种情况。
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 8-5: More levels of nesting*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-5：更多的嵌套层级*'
- en: As you can see, you make decisions in a program in the same way that you make
    decisions in real life!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你在程序中做决策的方式与现实生活中做决策的方式是一样的！
- en: '**TRY IT OUT 8-4**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试 8-4**'
- en: Change the following program so that it starts by reading the values for `x`
    and `y` input by the user. Change the output messages to make the users laugh!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 修改以下程序，使其开始时读取用户输入的 `x` 和 `y` 的值。修改输出消息，让用户发笑！
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**The Goto Statement**'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Goto 语句**'
- en: The `Goto` statement also changes the flow of your program by letting you branch
    to a statement that appears earlier or later in your program. Look at Mark and
    Andy’s annoying conversation in [Listing 8-6](ch08.html#ch8ex6).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Goto` 语句通过让你跳转到程序中较早或较晚的某个语句来改变程序的流程。请查看 Mark 和 Andy 在[清单 8-6](ch08.html#ch8ex6)中的烦人对话。'
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 8-6: An endless* `Goto` *loop*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-6：一个无尽的* `Goto` *循环*'
- en: The statement in line 2 is called a *label*; it’s used to identify a specific
    line of the program. Labels end with a colon, and you can place them anywhere
    in a program.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第 2 行的语句被称为*标签*；它用于标识程序中的特定行。标签以冒号结尾，你可以将它们放置在程序的任何地方。
- en: This program then runs lines 3–7\. When it reaches line 8, it returns to line
    2 (to the `Again` label), and Small Basic runs lines 3–7 again. A *loop* is when
    you run the same block of code more than once, and this loop goes on forever (like
    *The Song That Never Ends* and the Barney song). Run this program to see its output
    (and try to get those songs out of your head; mwahaha).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 程序随后运行第 3 行到第 7 行。当它到达第 8 行时，它会返回到第 2 行（跳转到 `Again` 标签），然后 Small Basic 会再次执行第
    3 行到第 7 行。*循环*指的是运行相同代码块多次，这个循环会永无止境（就像*永无止境的歌*和《Barney 歌》）。运行此程序查看其输出（并尽量把那些歌曲从脑海中赶出去；哈哈）。
- en: The `Goto` statement is an *unconditional jump* (or *unconditional transfer*)
    statement, because the program jumps unconditionally (without asking any questions)
    to the location given by the `Goto`’s label. The `If/Then` statement, on the other
    hand, is a *conditional transfer* statement, because the program changes its normal
    flow only when a certain condition is met.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`Goto` 语句是一种*无条件跳转*（或*无条件转移*）语句，因为程序会无条件地跳转到 `Goto` 标签指定的位置（不问任何问题）。而 `If/Then`
    语句则是一种*条件转移*语句，因为程序只有在满足某个条件时才会改变其正常流程。'
- en: Most programmers suggest that you don’t use `Goto` statements because they can
    turn a program into *spaghetti code*—code that is so tangled and complex that
    no one can follow it! But sometimes a `Goto` statement can be very useful, and
    it’s helpful to know when it might come in handy.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序员建议你不要使用 `Goto` 语句，因为它们会把程序变成*意大利面条代码*——那种混乱复杂到没人能理解的代码！但有时候 `Goto` 语句会非常有用，了解它在什么时候可能派上用场是很有帮助的。
- en: One common use of `Goto` is to check the data entered by a user to make sure
    it’s correct, as shown in [Listing 8-7](ch08.html#ch8ex7).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Goto` 的一个常见用法是检查用户输入的数据，确保其正确，如[清单 8-7](ch08.html#ch8ex7)所示。'
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 8-7: Using* `Goto` *to check the user’s input*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-7：使用* `Goto` *来检查用户输入*'
- en: This code asks the user to enter a positive number (line 3) and reads the input
    into the `num` variable (line 4). If the user’s input number isn’t positive (line
    5), the `Goto` statement sends the program back to the `TryAgain` label and asks
    the user to reenter the number. If the input number’s positive, the program continues
    to the statement on line 8\. You’ll learn another way to check users’ input using
    a `While` loop in [Chapter 14](ch14.html#ch14).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码要求用户输入一个正数（第 3 行），并将输入读取到 `num` 变量中（第 4 行）。如果用户输入的数字不是正数（第 5 行），`Goto` 语句会将程序跳转回
    `TryAgain` 标签，要求用户重新输入。如果输入的是正数，程序继续执行第 8 行的语句。你将在[第 14 章](ch14.html#ch14)中学习另一种使用
    `While` 循环检查用户输入的方法。
- en: '**TRY IT OUT 8-5**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试 8-5**'
- en: We (the authors of this book) plan to use the following program to measure our
    readers’ satisfaction. Do you think it’s fair? We do! Rewrite it and make it personal.
    Then have someone take your survey!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们（本书的作者）计划使用以下程序来衡量读者的满意度。你认为这样公平吗？我们觉得是！重写它并使其更具个人化。然后让别人参与你的调查！
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Programming Challenges**'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到困难，请查看 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    获取解决方案以及更多的资源和教师与学生的复习问题。
- en: The following program creates a simple coin toss game by asking the user to
    toss a coin and enter either an *h* (for heads) or a *t* (for tails). Based on
    the user’s input, the program displays a different message. Do you think the computer’s
    playing a fair game? See if you can get a family member or friend to play this
    unfair coin toss game!
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下程序创建了一个简单的掷硬币游戏，用户需要掷硬币并输入 *h*（代表正面）或 *t*（代表反面）。根据用户的输入，程序会显示不同的信息。你认为计算机在玩一个公平的游戏吗？看看你能否找个家人或朋友一起玩这个不公平的掷硬币游戏！
- en: '[PRE16]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Captain James P. Cork is piloting the Century Hawk enterprise-class starship.
    He has intercepted a message from the enemy Clingoffs and needs your help cracking
    the code! The message has millions of sets of three numbers; each set of numbers
    needs to be sorted and then reentered to understand the message. Build a program
    that reads three numbers from the user and then displays these numbers, sorted
    from smallest to biggest, to Captain Cork. We wrote the sorting logic for you,
    but you’ll need to write the user input part. Open the file *CaptainCork_Incomplete.sb*
    from this chapter’s folder, and follow the comments to complete this application
    and stop the vile Clingoffs!
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 詹姆斯·P·科克船长正在驾驶“世纪鹰”号企业级星际飞船。他截获了来自敌人克林戈夫（Clingoffs）的消息，并需要你的帮助破解密码！这条消息包含数百万组三位数字；每组数字都需要排序后重新输入才能理解消息。编写一个程序，要求用户输入三个数字，然后将这些数字按从小到大的顺序显示给科克船长。我们已经为你写好了排序逻辑，但你需要编写用户输入部分。打开本章文件夹中的
    *CaptainCork_Incomplete.sb* 文件，按照注释完成这个应用程序，帮助科克船长阻止邪恶的克林戈夫！
- en: You’re starting a new business called Mud in a Can. You’ve got mud, and people
    want it, so why not put it in a can? Write a program that lets your customer enter
    the height and radius of the can. The program should then compute the can’s volume
    (to figure out how much mud to put in it). Have the program display an appropriate
    error message if the user enters a negative value for the height or the radius.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你正在启动一个名为“罐装泥土”的新业务。你有泥土，而人们需要它，那为什么不把它装进罐子里呢？编写一个程序，让客户输入罐子的高度和半径。程序应计算罐子的体积（以确定该放入多少泥土）。如果用户输入了负值的高度或半径，程序应显示适当的错误信息。
- en: 'As the fairytale goes, Rumpelstiltskin helps a woman spin straw into gold.
    In return, she promises to give her firstborn child to him. When the baby is born,
    the woman refuses to give up the baby. Rumpelstiltskin agrees to release his claim
    to the child if the woman can guess his name in three days. Write a program that
    prompts the woman to enter her guess and then checks whether her guess is correct.
    Here’s a sample run of the program:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同童话故事所述，鲁姆普尔斯蒂尔茨金帮助一位妇女将稻草纺成金子。作为交换，她答应将第一个孩子交给他。当孩子出生时，妇女拒绝交出孩子。鲁姆普尔斯蒂尔茨金同意，如果妇女能在三天内猜出他的名字，他就放弃对孩子的要求。编写一个程序，提示妇女输入她的猜测，并检查她的猜测是否正确。以下是程序的示例运行：
- en: '[PRE17]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
