- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Systems Team
  prefs: []
  type: TYPE_NORMAL
- en: '![g07002](image_fi/502680c07/g07002.png)'
  prefs: []
  type: TYPE_IMG
- en: The systems team is responsible for the lowest layers of the software stack.
    You can think of their work as connecting the phone hardware (the Sooner, Dream/G1,
    Droid, and every other device that the team worked on) to the rest of the software
    running on each device.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom layer of everything running on Android (or any operating system)
    is the kernel. The kernel is a combination of the interface between the actual
    hardware and the rest of the system, plus everything that an OS has to do to make
    everything run (like boot up the system, create processes,^([1](#c07-footnote-1))
    manage memory, and handle communication between processes). If a phone were a
    house, the kernel would be the foundation, the wiring, and the plumbing running
    through the walls, making that “drip, drip, drip” sound keeping you from getting
    back to sleep in the middle of the night.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware communication is handled by *device* *drivers* in the kernel, which
    are software modules that talk to the actual hardware on a device. For example,
    in order to display pixels on the screen, a driver translates between the information
    from the graphics software (which figures out what color each pixel in the display
    should be to show, say, images, text, and buttons) and the physical screen hardware
    where those pixels live. Similarly, when the user touches the screen, that action
    is turned into raw hardware signals indicating the affected locations. These signals
    are sent into the system as *touch events*, which are then processed by software,
    including applications that want to handle those events.
  prefs: []
  type: TYPE_NORMAL
- en: One of the fundamental tasks of the systems group is *bringup*, which is the
    process of getting from simply having a piece of hardware (a phone, or even a
    prototype of a phone, with a collection of chips, circuitry, and a display) to
    one that boots the Android operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Brian Swetland and the Kernel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Swetland’s background in low-level systems, and the fact that he was the
    first person to join, it was only natural that he headed up the Android systems
    team from day one. Brian was already working and leading the systems efforts pre-acquisition;
    he continued in that role after moving over to Google and as the team grew.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main work of the systems team was to get the kernel working, for the early
    Android devices and for every new Android device since.^([2](#c07-footnote-2))
    When Android was a startup, the kernel needed to be just good enough that the
    demo could run. But after the team started at Google, they had to shift toward
    building a real product: a full OS and platform on top of a solid kernel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Swetland ensured that the early prototype kernel provided a decent
    starting point: “Everything I was building was toward something that would eventually
    be a product. I’m not a believer in doing total one-off demos. We didn’t have
    process separation,^([3](#c07-footnote-3)) but we knew where that was going to
    go. We still needed the kernel, the bootloader,^([4](#c07-footnote-4)) the graphics
    drivers, and everything. We did some demo-y things along the way, but we always
    tried to chart a path where it wasn’t pure demo. It was progress towards a system.”'
  prefs: []
  type: TYPE_NORMAL
- en: Swetland’s feelings toward demo-ware came from experience in previous companies
    where people on the business side misunderstood the difference between a great
    demo and an actual product. “The dangerous thing of building purely demo-ware
    is someone decides you’re going to ship it. Then you’re screwed.”
  prefs: []
  type: TYPE_NORMAL
- en: 'So Swetland worked on the kernel that Android would build on top of: “We kept
    working with it [the kernel from the demo]. It’s basically Linux off-the-shelf
    and then driver work on top of it. There are some patches in mainline Linux^([5](#c07-footnote-5))
    from F-Sample^([6](#c07-footnote-6)) with my name on them that I submitted after
    I went to Google. We weren’t thinking a lot about upstreaming^([7](#c07-footnote-7))
    stuff in the early days.”'
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, Swetland and his team started to see some tangible advantages to
    being part of Google. Prior to Google, “It was a little painful, as a tiny company
    making progress with TI [Texas Instruments]. The level of support was not what
    we got later.” Then after starting at Google, “It became massively easier to get
    support from the vendors. Surprise, surprise. People stopped talking about how
    much we would have to pay to get development boards. They’d bring us hardware,
    which is kinda nice. That’s one of the big advantages of Google, being this recognized
    name instead of this unknown tiny startup. People will pick up the phone and answer
    your questions. We still had to fight for support in places, but it could have
    been a lot worse.”
  prefs: []
  type: TYPE_NORMAL
- en: One of the legends of Brian Swetland was how he “found” extra memory on the
    G1 shortly before it shipped. He submitted a fix in the run-up to the release,
    expanding the available RAM on the device from 160MB to 192MB, giving the OS and
    all applications 20 percent more memory to play with, which was a significant
    boost on this very memory-constrained system.
  prefs: []
  type: TYPE_NORMAL
- en: The trick was that he knew where to find that memory because he had hidden it
    in the first place. The kernel is responsible for making memory available for
    the rest of the system to use. When he first brought up the kernel on the G1,
    he configured it to report less memory that it actually had. To the rest of the
    system, there was effectively 32MB less memory for use than was physically available
    in the hardware. He did this with the certain knowledge that every developer would
    use all available memory if it was there, but they’d work within a tighter budget
    if they had to.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone got their software working in this much smaller pool of memory, because
    that’s all they had. When he freed the rest of the memory before the G1 shipped,
    that meant more was available for running more applications simultaneously, because
    he had forced the entire system into an artificially smaller space than necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nick Pelly, who joined the team later to work on Bluetooth, remembered that
    not everyone was happy how this worked out: “OMG the drama this caused. The Browser
    team had been pulling extra Sundays to fit into the (false) memory budget. I remember
    one of them storming into Brian’s office with some loud and choice words when
    he ‘found’ that extra memory.”'
  prefs: []
  type: TYPE_NORMAL
- en: Ficus Kirkpatrick and Drivers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The kernel itself didn’t need extra hands working on it. This might be surprising,
    given the complexity of the kernel and its importance in the overall system. But
    Linux was there already, and where it wasn’t sufficient, Swetland was on it. But
    kernel *drivers*, on the other hand, were in serious demand. The system required
    all kinds of different hardware which had to be handled by the kernel. So when
    Ficus Kirkpatrick joined Swetland’s team, he got busy writing drivers, starting
    with the camera.
  prefs: []
  type: TYPE_NORMAL
- en: “I was into OSes and low level stuff, which is the core thing that I was best
    at coming into Android. The first year or two [on Android] it was low level systems
    stuff. We had decided to use Linux, so there wasn’t a lot of kernel work. So I
    was doing a lot of driver stuff. I did the first camera driver, got that working
    on OMAP.^([8](#c07-footnote-8)) Also got audio working.” Once audio was possible,
    “We can pass buffers, or we can get camera data in, what are we going to do with
    it?” So Ficus moved onto the media framework, creating APIs^([9](#c07-footnote-9))
    and functionality for applications to be able to access the new audio and camera
    capabilities of the device.
  prefs: []
  type: TYPE_NORMAL
- en: Arve Hjønnevåg and Communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the missing drivers early on was for the radio^([10](#c07-footnote-10))
    hardware; there was no way for the new phone OS to make a phone call. So Swetland
    brought in someone who excelled at communications drivers.
  prefs: []
  type: TYPE_NORMAL
- en: Arve Hjønnevåg joined Swetland’s systems team in March of 2006\. He was well
    known on Android for his . . . silence. His teammate Rebecca (who enters the story
    in a few pages) said she would sometimes ask him for help on a system they used
    for managing their source code. She got used to responding to his answers with,
    “Again, with more words.”
  prefs: []
  type: TYPE_NORMAL
- en: Once Arve got the system talking to the radio hardware, he focused on power
    management. Specifically, now that the hardware was able to make and receive phone
    calls, it also needed to not fall asleep when the system was in the middle of
    a call.
  prefs: []
  type: TYPE_NORMAL
- en: At the time, Linux was great for servers and desktop systems, including laptops.
    But it wasn’t built for phones, and it needed new functionality to handle this
    new use case. When you close a laptop lid, you want the laptop to go to sleep,
    completely. You don’t want or need anything running on the system until you open
    the lid later.
  prefs: []
  type: TYPE_NORMAL
- en: But a phone is quite different. When the screen turns off, you don’t want it
    doing everything that it might be doing when you’re actively using it, but you
    do want it awake enough to, say, continue a phone call^([11](#c07-footnote-11))
    that you are in the middle of, or to keep playing music that you are listening
    to.
  prefs: []
  type: TYPE_NORMAL
- en: So Arve added the concept of *wake locks* to Android’s Linux kernel, to ensure
    that screen-off didn’t mean completely-off. Android would aggressively put applications
    and most of the system to sleep when the screen turned off (because battery consumption
    was always a huge concern), but wake locks ensured that the system could stay
    in a wakeful state if there was something happening that needed to continue even
    if the screen turned off.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07001.png)'
  prefs: []
  type: TYPE_IMG
- en: Arve debugging G1 prototype hardware in October of 2007, with a TEK battery
    emulator and several pre-G1 devices (“Sooners”) (photo courtesy Brian Swetland)
  prefs: []
  type: TYPE_NORMAL
- en: Arve submitted the wake lock feature into Android’s version of Linux. This feature
    caused a bit of a stir in the Linux community, as some stalwarts of that open
    source community saw this feature as an example of Android forking^([12](#c07-footnote-12))
    the Linux kernel. Chris DiBona (who dealt^([13](#c07-footnote-13)) a lot with
    open source projects) remembers talking to people from the community at a Linux
    conference around that time. “There was one guy who was spitting mad, ‘I can’t
    believe you’re doing this!’
  prefs: []
  type: TYPE_NORMAL
- en: “I was like, ‘Three years from now, this won’t be a problem. In between now
    and then, either the Linux community will accept our patches in the shape they’re
    in right now, they’ll modify them slightly, maybe they call them something different,
    or you’ll leave behind every mobile device in the market. So work with us to make
    something that’s acceptable. Otherwise we’re going to keep shipping because it’s
    very important to us that this has a decent battery life.’”
  prefs: []
  type: TYPE_NORMAL
- en: In the end, Linux didn’t take Android’s wake lock implementation directly, but
    they did implement something that solves the same problem.
  prefs: []
  type: TYPE_NORMAL
- en: Iliyan Malchev and Bluetooth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Display drivers were another problem that the systems team had to solve. It
    doesn’t help having a powerful operating system if you can’t see what it’s doing.
    Iliyan Malchev got to work on this problem when he joined the team.
  prefs: []
  type: TYPE_NORMAL
- en: Iliyan learned to program when he was eight years old in Bulgaria, using a language
    he did not speak. His parents got a computer for their home and Iliyan started
    playing around with it. “It was amazing; I’m banging on the keyboard and things
    are happening on the screen—that’s what really got me interested in it. I didn’t
    know what I was doing. It’s not like I immediately became a programmer. In Bulgaria,
    everything was Cyrillic alphabet. Everything [in program code] was in the Latin
    script, like program listings. I didn’t speak English or know the Latin alphabet,
    so I’d just copy it, letter by letter.”
  prefs: []
  type: TYPE_NORMAL
- en: Iliyan made his way to the US for college and ended up working at Qualcomm for
    a few years. This experience was incredibly helpful to his later work on Android,
    and for the systems team in particular, since Android devices use a lot of Qualcomm
    hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Iliyan joined Swetland’s systems team in May of 2006\. His first project was
    getting a secondary display to work: “[Swetland] tosses me a flip phone with 2
    displays. He said, ‘make the peripheral display work.’ Being Swetland, he booted
    Linux on this without any docs. I guess he just wanted to give me something to
    get me off his back.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that project, Sooner devices^([14](#c07-footnote-14)) started arriving
    on the team. Iliyan worked on getting hardware input working on the device: a
    D-Pad (up/down/left/right arrows) and a trackball. In the meantime, he noticed
    that Android was getting too big to fit in the device’s limited storage space,
    and the system was constantly growing, so he spent time optimizing the size of
    the system to make things fit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07002.png)'
  prefs: []
  type: TYPE_IMG
- en: The Sooner device, complete with hardware keyboard, D-Pad, and many, many buttons
  prefs: []
  type: TYPE_NORMAL
- en: He then worked on Bluetooth. This included making the driver work for the Bluetooth
    hardware, as well as the Bluetooth software that applications could use to talk
    to the device. “This was the first Bluetooth software on Android and it was .
    . . not very good. [Bluetooth] is a terrible standard. They invented something
    of the scope and complexity of the internet to essentially support wireless headphones.
    It’s so over-engineered. I did that, then I handed it over to another engineer,
    Nick Pelly. Nick took the Bluetooth stack and made it work. He deserves all the
    credit.”
  prefs: []
  type: TYPE_NORMAL
- en: Nick Pelly and Bluetooth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nick studied computer science at university in Australia but didn’t think he’d
    end up programming for a living. He lined up a job at Telstra in communications
    engineering that was going to start after returning from a post-graduation gap
    year, traveling around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'But while he was traveling in California, his Telstra job fell through, so
    he needed another option. He was always curious about Silicon Valley, so he quickly
    put out feelers for interviews in the area. Only one company responded: Google.
    Fortunately, he got the job and started in 2006 on the Google Search Appliance
    (GSA) team.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07003.png)'
  prefs: []
  type: TYPE_IMG
- en: Ficus and Iliyan debugging . . . something in August of 2007 (photo courtesy
    Brian Swetland)
  prefs: []
  type: TYPE_NORMAL
- en: GSA was one of the products that Google thought they’d make their money on early
    on, when their main product was the search engine. They sold a rack-mounted piece
    of hardware to companies that would index their internal documents. It extended
    the power of Google’s internet search into companies’ internal websites. But then
    Google got into the ad business, and GSA quickly became less of a focus. By the
    time Nick joined the team, the product was not being as actively pursued as it
    once was, but Nick admitted that “It was a fantastic way for a new engineer to
    learn the Google search stack.”
  prefs: []
  type: TYPE_NORMAL
- en: In the Summer of 2007, he attended the first presentation from the Android team
    to the rest of Google on what they were doing. Nick was hooked. “I had no relevant
    background. I was one of the first people who joined the team who had not worked
    on consumer electronics before, who had not worked on platform level stuff like
    San and Rebecca and Mike,^([15](#c07-footnote-15)) who came from the Google platforms
    team. I only had one and a half years of serious professional experience.
  prefs: []
  type: TYPE_NORMAL
- en: '“But I came to them, and I was like: ‘This is awesome. I’ll work on anything.
    What do you need help with?’'
  prefs: []
  type: TYPE_NORMAL
- en: '“Brian said: ‘Bluetooth!’'
  prefs: []
  type: TYPE_NORMAL
- en: '“I knew they were too ambitious, and that they’d fail. I told my girlfriend
    and my Mum: ‘No way it’ll work. But the people are great and I’ll learn a lot.’”'
  prefs: []
  type: TYPE_NORMAL
- en: Nick took on Bluetooth and quickly owned it. “It was such a steep learning curve
    that once I began to catch on, I was stuck with it.” He had to make Bluetooth
    work not only as a driver, but through the platform and application layers of
    Android. One of the hardest, and continuous, parts of the job was to make it work
    correctly with the wide variety of peripheral Bluetooth devices in the world.
  prefs: []
  type: TYPE_NORMAL
- en: “Most Bluetooth peripherals ship with oodles of ‘quirks’ (bugs), and never see
    a firmware update. So we had to work around the issues. I came up with a simple
    policy—every time a Bluetooth interoperability bug was found, I would purchase
    the device, add it to the collection at my desk, and include it as part of my
    manual testing. Pretty soon I had two extra desks jam-packed with Bluetooth devices.
    I’d keep them all plugged in charging—this ensured I didn’t lose obscure chargers,
    and that I never had to wait to charge a device before running a test. On more
    than one occasion I had to clear them all out when we got word of a fire warden
    inspection, due to all the daisy-chained chargers.
  prefs: []
  type: TYPE_NORMAL
- en: “The car-kits were a bit harder since you can’t fit a car in an office. But
    I soon discovered the major automotive manufacturers would happily ship me Pelican
    cases containing the guts of a car’s infotainment system so that I could test
    against the relevant hardware from my desk. They overflowed my desk and into various
    corners of the hallway.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Nick’s manager was Brian Swetland. Swetland was, like many managers in those
    early Android days, not very hands-on. This included resisting sync meetings with
    the people on his team, as Nick recalled: “I remember a few weeks in, asking if
    we’d ever have a 1-on-1\. He didn’t seem too happy with the question, but said
    I was welcome to schedule one. I did. He turned up ten minutes late and his first
    words were ‘I $#^&()# hate 1-on-1s. . . . ’ We didn’t have 1-on-1s after that.'
  prefs: []
  type: TYPE_NORMAL
- en: “Yet I remember Brian as one of my favorite managers to work for. His systems
    knowledge was second to none. He was generous with scope and responsibility and
    did not micro-manage. He was dedicated to building the phone and was tremendously
    loyal and good to his people. Working for Brian was a highlight of my career.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07004.png)'
  prefs: []
  type: TYPE_IMG
- en: Nick catching a nap in the office in March of 2008\. In the upper left is a
    car infotainment system, in the protective case shipped from the auto manufacturer.
    (Picture courtesy Brian Swetland.)
  prefs: []
  type: TYPE_NORMAL
- en: San Mehat and the SD Robot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s a hundred degrees, it’s summertime, I’m looking at this phone and I’m listening
    to this person say garbage over and over again.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —San Mehat
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More help for drivers, and system bringup overall, arrived in the form of San
    Mehat. San joined Swetland’s team in 2007, around the same time as Nick, in the
    run up to the SDK^([16](#c07-footnote-16)) release.
  prefs: []
  type: TYPE_NORMAL
- en: San learned programming when he was a kid by typing randomly on a keyboard.
    His parents had a computer store in their basement, where he’d play around on
    the machines. “I was frustrated one day and I just mashed on the keyboard. By
    accident, I hit ctrl-C, and that dumped me to this prompt, and I had no idea what
    that was. Start typing stuff, it says ‘Syntax Error.’ I’m like, ‘What does that
    mean?’ I type something else, it says, ‘Undefined Function Error.’ I’m like, ‘What
    does that mean?’” His cousin suggested that he type ‘LIST,’ and the BASIC code
    for the game he was playing printed out on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: San’s approach to learning programming ended up being a great experience in
    building drivers. A lot of the work in writing hardware drivers is figuring out
    what the hardware can do and how to get it to do it. Much of that work is experimentation,
    to understand how the hardware works and what the rules and protocols are to talk
    to it. San was figuring out how those rules worked from the beginning, by typing
    randomly onto the computers in his parents’ basement just to see what happened.
  prefs: []
  type: TYPE_NORMAL
- en: He continued his programming education in childhood with hobby projects, like
    cracking software copy protection schemes. He did this as a workaround for having
    limited access to games, since Canada didn’t have a strong software marketplace
    at that time. He kept programming through high school and afterwards by working
    on kernels and drivers for chips and other hardware systems, always learning more
    about how to make the software talk to the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: San didn’t go to college. Ironically, it was an internship created to show kids
    the advantage of going to college that convinced him not to.
  prefs: []
  type: TYPE_NORMAL
- en: He got an internship (which led to a summer job) working with Bell Northern
    Research (BNR) on a CPU simulator, where he learned new programming languages
    and internals of processors. He was so enthusiastic about the work that he wanted
    to eventually work at BNR, but he realized that his grades in high school would
    never get him into the kind of college he needed to go to to get a job there.
    So he decided to skip that step and do it all on his own instead, and started
    an Internet Service Provider (ISP) with some friends. Along the way, he kept hacking
    on operating systems and random pieces of hardware, building up the skills that
    make a good driver developer.
  prefs: []
  type: TYPE_NORMAL
- en: “Give me a weird piece of hardware that you don’t really know how it works,
    and give me some piece of software that can make it work. Between taking apart
    the software and analyzing the hardware, I can reverse-engineer and create another
    driver that works.”
  prefs: []
  type: TYPE_NORMAL
- en: In 2005, San joined the platforms group at Google, where he wrote drivers for
    custom hardware. In 2007, he moved over to Android to work on Swetland’s systems
    team.
  prefs: []
  type: TYPE_NORMAL
- en: “I joined to work on the G1\. Initially, that was in the form of the ‘frankenboard,’
    the Qualcomm ‘surfboard,’ which was this big, crazy prototype phone board, which
    was the MSM chipset^([17](#c07-footnote-17)) on a big breakout. It was like a
    phone, but exploded out with all kinds of test points, so they could load code
    into it and do all kinds of stuff.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07005.png)'
  prefs: []
  type: TYPE_IMG
- en: San performing thermal testing on a battery (with a lighter), in February of
    2008\. The Qualcomm “surfboard” for the processor in the G1 is on the desk, in
    the background. (Picture courtesy Brian Swetland.)
  prefs: []
  type: TYPE_NORMAL
- en: When he started on the team, San’s main job was bringup. “Bringup at that time
    was the really, really low-level stuff. The clock control and power rail, power
    control.” That first system, the G1, was unusually complicated. There were actually
    *two* CPUs on it, one controlled by Qualcomm’s controller chip (an ARM 9), and
    one controlled by Android (an ARM 11). Booting the G1 required first booting the
    Qualcomm chip, then booting the Android chip.
  prefs: []
  type: TYPE_NORMAL
- en: “My job was to figure out how to build the drivers. I had to figure out how
    to have these two things talk to each other. Then get the clock control hooked
    up, get the power rails hooked up so we could start turning on peripherals, like
    the SD^([18](#c07-footnote-18)) controller so that the SD card could come up,
    and the graphics controller. So I did all the low-level nitty-gritty stuff, and
    then moved on to the SD Card.”
  prefs: []
  type: TYPE_NORMAL
- en: 'The SD card on the G1 presented an interesting problem. First, the SD card
    was useful for two separate things: storage and Wi-Fi. SD cards are mostly thought
    of as removable storage. But at the time, SD was also sometimes used to provide
    Wi-Fi (the card would have a Wi-Fi chip instead of memory hardware).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting SD to work was important, because it controlled both of these areas.
    But it was difficult. “No one [on the Android team] knew how SD cards worked.
    You couldn’t get the specs on SD cards, because to get the specs you had to join
    the SD association, and they wouldn’t let you do anything open source.^([19](#c07-footnote-19))
    So I had to reverse-engineer the SD card, the SD card protocol, and the SD IO
    protocol [for Wi-Fi], and reverse-engineer a bunch of drivers, to figure out how
    to write my own driver. I spent months figuring out how to make it work.”
  prefs: []
  type: TYPE_NORMAL
- en: 'San got SD working (for both storage and Wi-Fi), but there was a problem. The
    SD card on the G1 was very accessible to the user, so it could be popped in or
    out at any time. “Someone had decided that having the SD card on the side, hot-swappable,
    was a good idea. If you try to pull a hard drive in and out of a Linux system,
    you’re gonna have a bad time. This was the worst: device ripped out with almost
    no warning. You could be writing to the disk. Maybe you took a picture thirty
    seconds ago, so those buffers were still in the OS page cache, and they’re not
    gonna get written out for another thirty seconds.”'
  prefs: []
  type: TYPE_NORMAL
- en: There was a cover on the G1’s SD Card slot that users had to open before popping
    the card out. Opening that cover sent a signal into the system, which could be
    used as a cue to quickly get everything into a stable state in case the user popped
    the card out. But it was difficult to find all of the places in the code where
    this needed to happen. To make things worse, debugging the situation required
    a lot of tedious card-popping. Over, and over, and over. Eventually, San asked
    for help.
  prefs: []
  type: TYPE_NORMAL
- en: 'He reached out to Andy: “‘Hey, you’re into robots. Do we have someone that
    could make me a robot that could do this?’ He hooked me up with someone. I told
    them what I needed: a little bot that allows me, through software, to control
    how it goes in and out, and then I would create a little closed-loop test. That
    allowed me to track down all of these bugs.” San used the SD card robot to chase
    those bugs one by one until the system worked reliably.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07006.png)'
  prefs: []
  type: TYPE_IMG
- en: San’s SD Card robot, which continuously popped the card in and out of the slot
    to force crashes that San could debug (picture courtesy San Mehat)
  prefs: []
  type: TYPE_NORMAL
- en: 'Post-G1: Sapphire and Droid'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the G1 shipped, San started work on the device code-named “Sapphire,”
    which would become the T-Mobile G2 MyTouch. The main work for that device was
    performance. “It was slow as shit. It was a little bit faster than the G1, but
    at the same time, Romain,^([20](#c07-footnote-20)) bless his heart, and all these
    other turkeys [in the platform and apps teams] were putting all this crazy thicker
    software on top of it. So switching apps, it was always janky and laggy. I spent
    a lot of time on that project optimizing the kernel. So it was really lots of
    performance improvements. It was kind of rinse and repeat.”
  prefs: []
  type: TYPE_NORMAL
- en: 'After the G2 shipped, San’s next challenge was the Motorola Droid. One of the
    problems that he had to deal with was handling power-off scenarios, which was . . .
    complicated. “These little bastards have like thirty different power domains in
    them, and they’re all individually controlled. To turn the thing off, it’s a delicate
    dance of: *this* off first, wait so long, *this* off, then *this* off, then *this*
    off . . . All the way, as you’re going down, the phone is getting dumber and dumber.'
  prefs: []
  type: TYPE_NORMAL
- en: '“The failure case on Droid was this: the phone would idle to sleep, or you
    would turn it off, and you would get a phone call at the same time and your phone
    would never ring. We would be going down these power states and we would stop
    listening to the modem because we would turn that off. The modem would try to
    wake us up, but we’re not listening to the modem anymore; we’re committed to going
    to sleep. So we go to sleep, and the modem’s like ‘But, but, but, but . . . !’'
  prefs: []
  type: TYPE_NORMAL
- en: “We realized eventually that the hardware was missing a wire between the modem
    and the CPU to actually tell it to wake up.” It was way too late^([21](#c07-footnote-21))
    to change the hardware, so they ended up hacking around the problem by sending
    the wakeup signal on wires used for other parts of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Another part of working on the Droid involved a bug that San chased in the Wi-Fi
    system, which was causing hiccups in video. “There was that Miss America pageant
    with that very controversial comment about marriage between a man and a woman.
    Hiroshi comes into my office and was like, ‘We got this big problem. YouTube videos
    are glitching, only over Wi-Fi.’ I’m like ‘Okay, no problem, it’s probably a DMA^([22](#c07-footnote-22))
    thing. Give me a reference video.’”
  prefs: []
  type: TYPE_NORMAL
- en: Hiroshi gave him the video and the time at which the glitch occurred, which
    happened to be that awkward segment of the Miss America pageant. San spent 2 days
    debugging it, listening to that same video segment over and over. “Whenever I
    hear someone mention Miss America, I get this visceral [feeling of] being in Walnut
    Creek, it’s a hundred degrees, it’s summertime, I’m looking at this phone and
    I’m listening to this person say garbage over and over again.”
  prefs: []
  type: TYPE_NORMAL
- en: Rebecca Zavin and the Unloved Device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We built this safe. We just forgot the walls.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Rebecca Zavin
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The systems team needed more reinforcements for the push to ship 1.0\. Rebecca
    Zavin joined the team in early 2008.
  prefs: []
  type: TYPE_NORMAL
- en: Rebecca started programming much later than many of her teammates on Android;
    she didn’t really get into it until college. She always figured she’d become a
    doctor, so she went to college to get a pre-med degree in chemical engineering.
    That’s when she discovered that she hated chemistry. In the meantime, she got
    a job in the computer science department at the college, helping set up a computer
    lab. She started hanging out in that department more and more. Once she started
    taking classes in CS, she was hooked.
  prefs: []
  type: TYPE_NORMAL
- en: After college, Rebecca went to grad school, and eventually joined Google, working
    with San in the platforms team. About a year after San left her team to join the
    Android team, Rebecca was also up for something new. “I wanted to be a little
    uncomfortable. A little bit challenged.” She joined Swetland’s systems team in
    January of 2008, two months after the SDK shipped, and just in time for the long
    push up to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: The first day on the new team, she was in the office debugging a problem in
    the kernel until after 9:00 pm. “Swetland was like, ‘Alright, this is going to
    work.’”
  prefs: []
  type: TYPE_NORMAL
- en: The team had just shipped the SDK; now they needed to make everything work on
    a real device. Rebecca initially worked on display drivers for Android. Swetland
    gave her a minimal driver to start with. After banging on it for a while, she
    complained to him that it was really buggy. He told her it was just a prototype;
    she wasn’t supposed to actually use it. She said, “I wish you would have told
    me that. I assumed you knew what you were doing.”
  prefs: []
  type: TYPE_NORMAL
- en: After getting the driver to work, Rebecca moved on to work on the memory subsystem,
    which she continued working on for the next few years. Her goal was getting bits
    to flow through the system with the minimum number of copies (because copy operations
    are expensive). For example, if the camera takes a picture, there are a lot of
    pixels in a buffer somewhere that need to be sent to the GPU (the graphics processor),
    then to the video decoder, and finally to the display memory. The simplest implementation
    copies the pixels to each new subsystem along the way. This takes a long time,
    and a lot of memory, especially since pictures tend to be large (even with the
    more limited cameras of that time). Eventually, she made the system work with
    zero copies.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the G1 shipped in late 2008, Rebecca started working on the next device:
    the Motorola Droid.'
  prefs: []
  type: TYPE_NORMAL
- en: The Droid was an unloved project and device. The rest of the team was working
    on the device code-named Passion, which became the Nexus One. Passion was going
    to be a Google phone, with all the latest and greatest features, and the team
    was really excited about it. And then there was this Motorola device.
  prefs: []
  type: TYPE_NORMAL
- en: Rebecca said, “No one wanted to touch it. It was ugly. Everybody was really
    excited about Nexus One. And the Droid thing? We were left to our own devices.
    Shortly after, it became a big deal for the team, because it became the first
    Verizon launch.”^([23](#c07-footnote-23))
  prefs: []
  type: TYPE_NORMAL
- en: The chipset was from TI, which had drivers for the chips. But there was an alternate
    implementation of those drivers from Nokia, which Rebecca recommended that they
    start from.
  prefs: []
  type: TYPE_NORMAL
- en: “We had a three-way meeting with Motorola where I told them, ‘I don’t think
    we should use this TI kernel; it’s a mess. I think we should use this Nokia Kernel.’
    I got a call from our TI sales guy who said, ‘Motorola called me and they said
    that you said our code was shit.’
  prefs: []
  type: TYPE_NORMAL
- en: “I said, ‘I don’t think that I used any expletives in the meeting.’”
  prefs: []
  type: TYPE_NORMAL
- en: That Embarrassing Root Bug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the hallmarks of early Android development is the raw speed at which
    the team executed. Going from nothing to 1.0 in three years was astonishing, especially
    when that first release contained most of the fundamentals that would ensure that
    Android would soon become one of the most widely distributed operating systems
    in the world.
  prefs: []
  type: TYPE_NORMAL
- en: I have found that the probability of spilling coffee on myself is proportional
    to the speed at which I’m moving. There are trade-offs that come with execution
    speed. In those early days, everyone was running so fast that they sometimes failed
    to notice things that might have been caught in a more cautious and slower-paced
    environment. One of the examples of this dynamic was the famous (at least internally)
    “feature” of being able to reboot the phone from the chat app.
  prefs: []
  type: TYPE_NORMAL
- en: Jeff Sharkey and Kenny Root were external developers when 1.0 launched (they
    were both hired onto the Android team later on). They were tinkering with Android,
    even before that first release. Kenny had developed an SSH client (an app that
    allows you to log into a remote computer). Kenny’s version had been built against
    an earlier, pre-1.0 version of the SDK. Jeff updated it to work against later
    builds of Android and added more functionality. They eventually published it as
    ConnectBot, one of the first applications on Android Market,^([24](#c07-footnote-24))
    where it is still the top SSH client.
  prefs: []
  type: TYPE_NORMAL
- en: When they were first working on ConnectBot, they received odd bug reports from
    some of their users. Jeff said, “We got this weird bug from someone saying they’d
    SSH into their server at home, type `reboot`, and their phone would reboot. We
    thought they must be smoking something, and closed as Not Reproducible.”^([25](#c07-footnote-25))
  prefs: []
  type: TYPE_NORMAL
- en: But the bug turned out to be totally valid, and more than a little scary for
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: Rebecca Zavin said, “People discovered if you typed `root`^([26](#c07-footnote-26))
    in Gchat^([27](#c07-footnote-27)) you could get root access on your phone. And
    then people realized that it also worked when you typed `shutdown`. Or `reboot`.”
  prefs: []
  type: TYPE_NORMAL
- en: Rebecca explained how the bug came to be. “The keyboard events were sent to
    a console that was left open. You always wanted to have some serial console.^([28](#c07-footnote-28))
    It was convenient. So we put the root console there for debugging . . . and should
    have made a note to turn it off.
  prefs: []
  type: TYPE_NORMAL
- en: “At some point, we had this ongoing bug where we used to have the framebuffer
    console support there, so you could switch to a mode where you could see the log,
    same as you can on your Linux PC. We had this recurring bug where you’d get a
    black square in the upper left corner. It was a timer issue. Some race condition^([29](#c07-footnote-29))
    would cause the cursor to blink when you came back to graphics. So I’d get Steve
    Horowitz [telling me], ‘That black square. I got a black square!’
  prefs: []
  type: TYPE_NORMAL
- en: “After spending a lot of time trying to fix the problem, I was like, ‘Let’s
    just turn off the framebuffer console. Why do we need to see the kernel log on
    the screen on the device? This is stupid. Let’s just turn it off and then we don’t
    have to deal with this problem.’
  prefs: []
  type: TYPE_NORMAL
- en: '“But when we turned off the console, it was still there [just invisible]. We
    all were like: ‘Uh-oh, oops!’'
  prefs: []
  type: TYPE_NORMAL
- en: “We built this safe. We just forgot the walls.”
  prefs: []
  type: TYPE_NORMAL
- en: Jeff said, “The person typing `reboot` into ConnectBot was effectively typing
    it into both their remote server, and into their phone, which explains the surprising
    reboot.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Nick Pelly remembered the bug: “We thought it was some subtle, clever hack
    that someone had figured out. No, no, no: every single keyboard press you made
    was going into root shell.”'
  prefs: []
  type: TYPE_NORMAL
- en: Kenny Root added, “This probably opened the way for the first ‘root’ of the
    G1, but I promise it wasn’t named after me.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07007.png)'
  prefs: []
  type: TYPE_IMG
- en: Rebecca debugging in March of 2008 (photo courtesy Brian Swetland)
  prefs: []
  type: TYPE_NORMAL
- en: There are other examples where Android missed some of the details along the
    way; everyone was running very, very fast and there was a lot to do to just get
    things working. Fortunately, the platform has survived long enough that the team
    has been able to go back and fix the problems over time. At least the ones we
    know about.
  prefs: []
  type: TYPE_NORMAL
- en: Mike Chan and the B Team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We felt we were going to change the world. And we did.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Mike Chan
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The final member to join the systems team prior to 1.0 was Mike Chan.
  prefs: []
  type: TYPE_NORMAL
- en: Mike first wanted to become a programmer as early as middle school. When he
    saw the game *Lode Runner*, he wanted to write video games when he grew up. That
    dream didn’t last long, however; in high school, he was more interested in administering
    computer systems. But in college, he took programming classes and returned to
    his original plan of becoming a programmer. Landing his first job out of school
    at Google sealed his fate.
  prefs: []
  type: TYPE_NORMAL
- en: He started at Google in 2006, joining the platforms team that San and Rebecca
    worked on. Like them, he also eventually transferred to the Android group, arriving
    a month after Rebecca, in February of 2008\. The SDK had already launched, but
    there was still a lot of work to do to get the product to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Security Blanket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mike’s starter project was to make Android secure prior to shipping 1.0\. No
    pressure.
  prefs: []
  type: TYPE_NORMAL
- en: Android was built from the start with security in mind. Swetland specifically
    wanted to implement a more secure model for Android than he had worked with at
    Danger. Those Hiptop devices were even more resource constrained and didn’t have
    hardware facilities to protect apps from each other, so they relied on software
    mechanisms. Brian insisted that all Android hardware had to have an MMU^([30](#c07-footnote-30))
    to provide hardware security instead.
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect of security on the platform was treating all applications
    as separate “users” on the device. On other operating systems, users would be
    protected from each other, but not from themselves. So, for example, you could
    create a user account on a PC and the data that you created in that account would
    be protected from other users on the system. However, any application that you
    installed would run as you, so all of your applications would have access to all
    data in your account. There was an implicit trust between any user and all of
    the applications they installed.
  prefs: []
  type: TYPE_NORMAL
- en: But the Android engineers felt (rightly so) that the applications on the device
    should not be inherently trusted. So rather than having apps running as the user
    who installed them, Brian’s design had each app run as a separate, unique user
    on the device. This approach guaranteed (through the Linux kernel mechanism of
    user IDs, or UIDs) that apps had no automatic access to the data of any other
    application on the same device, even though those other applications were installed
    by the same device owner. Brian provided a low level service to create, destroy,
    or run-as-a-user. Dianne Hackborn, on the framework team, integrated this service
    with higher-level application permissions and built out the policies for application
    UID management.
  prefs: []
  type: TYPE_NORMAL
- en: This system of hardware-protected processes and applications-as-users was mostly
    set up and working, but there were many details that needed to be polished. For
    example, although the application processes were protected from each other, many
    of the built-in system processes were running as users with elevated permissions,
    giving them access to more than they strictly needed on the device.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, the iPhone had recently been jailbroken,^([31](#c07-footnote-31))
    which was a good reminder to complete this security work before they shipped 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Mike thought the project was not only a great introduction to Android and security
    models of operating systems; it was also an introduction to Swetland’s management
    style, “Brian has an interesting way of throwing you into the deep end and figuring
    out if you can sink or swim.”
  prefs: []
  type: TYPE_NORMAL
- en: As starter projects go, it was . . . a big one. Not only was there pressure
    to get it done, because it clearly had to happen before shipping the first device,
    but it was something that affected everyone else building the platform and apps
    on Android at the time. The pressure was on. “As I was trying to make changes,
    I was breaking stuff left and right. It was super painful. All the teams would
    be complaining that something’s broken and I’m trying to fix this as fast as I
    can, trying to anticipate it.
  prefs: []
  type: TYPE_NORMAL
- en: “Steve Horowitz [Android’s engineering director at the time] was all over me.
    ‘You broke the build!’ I’m like, ‘I know, Steve. I know I broke the build. I’m
    trying to fix it now. Having you stand there is not going to make me fix it any
    faster.’
  prefs: []
  type: TYPE_NORMAL
- en: “That was a trial by fire. Learned a bunch of stuff, touched all parts of the
    system, and broke everything.”
  prefs: []
  type: TYPE_NORMAL
- en: Mike’s next project was improving battery life. At that time, coming up to the
    launch of the G1, the battery life was awful. To make things worse, all of the
    teams were blaming the other teams for the problem. “Apps team would blame the
    framework team. The framework team would blame the systems team. The systems team
    would blame the apps team.”
  prefs: []
  type: TYPE_NORMAL
- en: Andy didn’t care whose fault it was, he just wanted it fixed. He gave the problem
    to Swetland, who gave it to Mike.
  prefs: []
  type: TYPE_NORMAL
- en: Brian asked, “How much do you know about power management?”
  prefs: []
  type: TYPE_NORMAL
- en: Mike said, “I don’t know anything, Brian.”
  prefs: []
  type: TYPE_NORMAL
- en: “Well I suggest you start learning, because you’re in charge of this thing now.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Mike quickly realized that part of the problem was one of expectations. “The
    problem I explained to everyone was: You’re telling me we have to have just as
    good battery life as the iPhone. We have this capability to run all these apps
    in the background,^([32](#c07-footnote-32)) the hardware that we have has a bigger
    screen, we run background tasks, we were the first to do 3G, and we have a physically
    smaller battery.”'
  prefs: []
  type: TYPE_NORMAL
- en: One of the main things that Mike did was add instrumentation to the system to
    know where the power was going. Prior to this, they could see the battery was
    being drained, but had no idea who was doing what, so it was difficult to find
    and fix the root problems. Once they knew where the problems were, they could
    go address them.
  prefs: []
  type: TYPE_NORMAL
- en: Mike also had ongoing debates with Dianne, on the framework team. Many of the
    battery problems were coming from poor behavior in apps, which would do things
    like hold a wake lock^([33](#c07-footnote-33)) too long, but the users would just
    blame Android overall. “I was pushing for a more explicit system where if an app
    goes into the background, you force-release the resource. So basically a less
    flexible platform. Dianne was under the firm belief that it’s not the platform’s
    fault, it’s the developers’, and the right fix is to educate all these app developers.
  prefs: []
  type: TYPE_NORMAL
- en: “This was a battle we had for years.”
  prefs: []
  type: TYPE_NORMAL
- en: The other project that Mike worked on was the *governor*.
  prefs: []
  type: TYPE_NORMAL
- en: A governor in an OS is the mechanism by which the speed, or frequency, of the
    CPU is changed to save power. For example, if your CPU is running really fast,
    it is consuming more power and thus more battery. But if the device is idle at
    the time, that’s a large and unnecessary waste of battery power. The governor
    exists to detect these different runtime modes and scale the CPU frequency accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the G1 launched, the only governor in effect was the *ondemand* governor
    that was part of core Linux. It was a simple system with just two settings: full-speed
    and idle. This was better than nothing, but wasn’t good enough for Android’s purposes,
    especially since the heuristics for that governor were tuned for Linux running
    on server or desktop machines, not for the more constrained world of mobile devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Mike started playing with the governor in the late stages of 1.0, but had to
    put that project aside after an unfortunate incident of a demo that Andy gave
    to the Google execs.
  prefs: []
  type: TYPE_NORMAL
- en: Mike had checked in a change that inadvertently made the phone painfully slow.
    “I was experimenting on master^([34](#c07-footnote-34)) with the conservative
    governor, which skewed very, very heavy towards saving power at the cost of performance.
    The phone was pretty much unusable.”
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, Andy had a monthly review with Larry and Sergey to show them the
    status of this project. Andy flashed^([35](#c07-footnote-35)) a build of master
    onto a phone and went off to his meeting.
  prefs: []
  type: TYPE_NORMAL
- en: At the meeting, he showed a demo using that build, which . . . did not go well.
  prefs: []
  type: TYPE_NORMAL
- en: “He came back, he was pissed off.”
  prefs: []
  type: TYPE_NORMAL
- en: This incident was a great learning experience for Mike. On one hand, he learned
    the importance of testing his changes before pushing them on everyone that might
    use that build. But also, he learned how important it is to have a supportive
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: “Brian stood toe-to-toe with Andy in the hallway, screaming back that it was
    his fault for using master without any testing. We’re doing all of this stuff
    to launch Android on time, we don’t have the time to make sure your demos are
    perfect. I never saw anyone yell at Andy. He never brought my name up. He knew
    it was my code.
  prefs: []
  type: TYPE_NORMAL
- en: “He later came back to my desk and calmly told me to revert all my changes and
    not touch this until after we shipped.”
  prefs: []
  type: TYPE_NORMAL
- en: The B Team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mike joined Rebecca on the Droid project. The systems team was split between
    the people working on the Passion (which became the Nexus One) and the Droid.
    Swetland remembered, “I had decided that we needed to split the systems group
    into two teams to distribute work between N1 and Droid, and introduced this at
    our team meeting by saying, ‘We’ll need like an A team and a —’. Before I could
    back that up and reword it better, Erik^([36](#c07-footnote-36)) completed ‘B
    Team!’ and much to my horror they adopted it as a badge of honor (possibly also
    because it embarrassed me).” The people on the Passion project were mostly those
    people who had more familiarity with that hardware. But Rebecca joked that the
    Droid project had the “B Team,” because they were working on the device that the
    team wasn’t excited about. Passion was getting all of the love and, well, *passion*
    from the team at the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mike said, “Everyone assumed Nexus was going to be the big phone that was going
    to land: the first Google-branded phone, no keyboard, really slick design, OLED
    screen. It was a good phone.”'
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, the Droid hardware design was underwhelming at the time. “It was
    always hyped up that the design was going to be so amazing. When they finally
    unveiled the design, it was this ugly square thing. I remember thinking, this
    is just the initial prototype. There’s a new one coming with the final design.
    Right? No, this is the design we’re shipping with.”
  prefs: []
  type: TYPE_NORMAL
- en: In the end, Verizon’s branding and marketing for the Droid overshadowed anything
    that Google did for the Nexus One. More on that in Chapter 45 (“Droid Did”).
  prefs: []
  type: TYPE_NORMAL
- en: Building a Robust System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s worth reflecting on the approach and accomplishments of the systems team
    before moving onto the rest of the software stack. For one thing, everything they
    built was fundamental to the rest of the OS even being able to power up, much
    less function. But also, the approach they took to their work was indicative of
    an overall theme in Android of doing a complete (if quick) job, beyond the immediate
    needs of the day and looking forward to what they envisioned (or hoped) Android
    would eventually become.
  prefs: []
  type: TYPE_NORMAL
- en: For example, they didn’t just work on the one or two devices currently in the
    pipeline. At the same time that the rest of Android was focused on the Sooner
    and Dream phones being developed prior to 1.0, the systems team was getting Android
    to work on completely different devices, making it more robust and flexible for
    the future world of manufacturers with completely different hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the team didn’t just plug together drivers from hardware manufacturers
    and ship the result; they wrote everything from the ground up to be solid and
    robust.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nick talked about this dynamic on the team: “Why wasn’t the systems team just
    an integration team? Integration is more about plugging things together to make
    them work, taking the drivers from manufacturers and getting Android to work on
    them, rather than writing the drivers themselves.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07008.png)'
  prefs: []
  type: TYPE_IMG
- en: The port of Android to this Nokia device was what Swetland called “the holiday
    port,” which happened over Thanksgiving weekend of 2007\. (Picture courtesy Brian
    Swetland.)
  prefs: []
  type: TYPE_NORMAL
- en: “We were writing a whole bunch of device drivers that many other companies wouldn’t
    have written; they would have just taken the reference Linux driver that the silicon
    provider hands over. Back in that day, those reference Linux drivers were total
    shit. It was a key decision that we weren’t just going to take those reference
    drivers; we were going to rewrite them to be at a quality that could be upstreamed
    and that we could stand by, maintain, and support. The rest of the ecosystem could
    follow our lead and fork our drivers or just reuse them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c07/f07009.png)'
  prefs: []
  type: TYPE_IMG
- en: A port of Android to a PC, in March of 2008\. Landscape laptop screens don’t
    show the portrait-mode phone screen in the best light. (Picture courtesy Brian
    Swetland.)
  prefs: []
  type: TYPE_NORMAL
- en: “We ended up with much higher quality drivers. Sure, we had some bugs, but we
    got to stability. If you have shitty drivers, it costs you stability—peripherals
    will randomly fail, the device will reboot. And it’s very hard to do power management
    correctly without good drivers and without wake locks and things like that; you
    just destroy the battery life.
  prefs: []
  type: TYPE_NORMAL
- en: “That was one of the key decisions that I think largely Brian was responsible
    for that set us on the right path. We’re building out a high-quality codebase
    here, and we’re doing things the right way.”
  prefs: []
  type: TYPE_NORMAL
