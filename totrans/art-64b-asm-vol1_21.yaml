- en: B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Glossary
  prefs: []
  type: TYPE_NORMAL
- en: Symbols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`.code`'
  prefs: []
  type: TYPE_NORMAL
- en: A section for program code.
  prefs: []
  type: TYPE_NORMAL
- en: '`.const`'
  prefs: []
  type: TYPE_NORMAL
- en: A declaration section for initialized read-only values.
  prefs: []
  type: TYPE_NORMAL
- en: '`.data`'
  prefs: []
  type: TYPE_NORMAL
- en: A declaration section for initialized variables.
  prefs: []
  type: TYPE_NORMAL
- en: '`.data?`'
  prefs: []
  type: TYPE_NORMAL
- en: A declaration section for uninitialized variables.
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ABI
  prefs: []
  type: TYPE_NORMAL
- en: See *application binary interface*.
  prefs: []
  type: TYPE_NORMAL
- en: address bus
  prefs: []
  type: TYPE_NORMAL
- en: A set of electronic signals that hold a binary address of a memory element.
  prefs: []
  type: TYPE_NORMAL
- en: aggregate data types
  prefs: []
  type: TYPE_NORMAL
- en: Data types composed of one or more smaller data types.
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs: []
  type: TYPE_NORMAL
- en: Application programming interface.
  prefs: []
  type: TYPE_NORMAL
- en: application binary interface
  prefs: []
  type: TYPE_NORMAL
- en: A set of conventions that code uses to ensure interoperability between code
    that calls other functions or procedures and the functions or procedures being
    called.
  prefs: []
  type: TYPE_NORMAL
- en: ASCII
  prefs: []
  type: TYPE_NORMAL
- en: American Standard Code for Information Interchange.
  prefs: []
  type: TYPE_NORMAL
- en: assembly unit
  prefs: []
  type: TYPE_NORMAL
- en: The assembly of a source file plus any files it includes or indirectly includes.
  prefs: []
  type: TYPE_NORMAL
- en: associativity
  prefs: []
  type: TYPE_NORMAL
- en: Associativity dictates the grouping of operations within a complex expression
    in which the operators all have the same precedence. For example, if you have
    two operators, *op1* and *op2*, associativity determines the order of evaluation
    of the expression *x op1 y op2 z*. Left-associative operators would produce the
    result of the evaluation (*x op1 y*) *op2 z*, whereas right-associative operators
    would produce the result of the evaluation *x op1* (*y op2 z*).
  prefs: []
  type: TYPE_NORMAL
- en: automatic variables
  prefs: []
  type: TYPE_NORMAL
- en: See *local variables*.
  prefs: []
  type: TYPE_NORMAL
- en: AVX
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Vector Extensions.
  prefs: []
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BCD
  prefs: []
  type: TYPE_NORMAL
- en: Binary-coded decimal.
  prefs: []
  type: TYPE_NORMAL
- en: big endian
  prefs: []
  type: TYPE_NORMAL
- en: Multi-byte data objects in memory are big endian if their HO byte appears at
    the lowest address in memory and their LO byte appears at the highest address
    in memory.
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: calling convention
  prefs: []
  type: TYPE_NORMAL
- en: The protocol for passing data to and from a procedure, including where the data
    is to be passed, the alignment of the data, and the size of the data.
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  prefs: []
  type: TYPE_NORMAL
- en: Command line interface, or command line interpreter (Windows *cmd.exe* application).
  prefs: []
  type: TYPE_NORMAL
- en: code snippets
  prefs: []
  type: TYPE_NORMAL
- en: See *snippets*.
  prefs: []
  type: TYPE_NORMAL
- en: coercion
  prefs: []
  type: TYPE_NORMAL
- en: Forcing a data type to behave as another data type; for example, treating a
    character value as an integer.
  prefs: []
  type: TYPE_NORMAL
- en: column-major ordering
  prefs: []
  type: TYPE_NORMAL
- en: A function for storing elements of multidimensional array elements in linear
    memory by storing the elements of a column in contiguous locations and then placing
    each column after the previous column in memory.
  prefs: []
  type: TYPE_NORMAL
- en: commutative
  prefs: []
  type: TYPE_NORMAL
- en: An operation is commutative if (*A op B*) is always equal to (*B op A*).
  prefs: []
  type: TYPE_NORMAL
- en: composite data types
  prefs: []
  type: TYPE_NORMAL
- en: See *aggregate data types*.
  prefs: []
  type: TYPE_NORMAL
- en: control bus
  prefs: []
  type: TYPE_NORMAL
- en: A set of electronic signals from the CPU that control activities such as reading,
    writing, and generating wait states.
  prefs: []
  type: TYPE_NORMAL
- en: control characters
  prefs: []
  type: TYPE_NORMAL
- en: Special nonprinting characters that control aspects of the machine printing
    the characters. This includes operations such as carriage return (moving the printer
    carriage to the beginning of the line), line feed (moving the printer device down
    one line), and backspace (moving the print position back one character on the
    current line).
  prefs: []
  type: TYPE_NORMAL
- en: CTL
  prefs: []
  type: TYPE_NORMAL
- en: Compile-time language.
  prefs: []
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: dangling pointer
  prefs: []
  type: TYPE_NORMAL
- en: Use of a pointer to allocated memory after that memory has been freed and returned
    to the system (and is possibly being used for another purpose).
  prefs: []
  type: TYPE_NORMAL
- en: data bus
  prefs: []
  type: TYPE_NORMAL
- en: A set of electronic signals from the CPU that transfer data between the CPU
    and external devices (such as memory or I/O).
  prefs: []
  type: TYPE_NORMAL
- en: delimiter characters
  prefs: []
  type: TYPE_NORMAL
- en: Characters that separate a sequence of other characters belonging to a set (such
    as a string of numeric characters delimited by spaces or commas).
  prefs: []
  type: TYPE_NORMAL
- en: dependencies
  prefs: []
  type: TYPE_NORMAL
- en: In a makefile, one file is dependent on another if changing that other file
    requires a recompilation (or other operation) on the original file.
  prefs: []
  type: TYPE_NORMAL
- en: dereference
  prefs: []
  type: TYPE_NORMAL
- en: Access data at an address specified by a pointer variable.
  prefs: []
  type: TYPE_NORMAL
- en: descriptor
  prefs: []
  type: TYPE_NORMAL
- en: A data structure that describes another data structure. Typically, a descriptor
    contains information such as a pointer to the actual data, type information, or
    length information.
  prefs: []
  type: TYPE_NORMAL
- en: directive
  prefs: []
  type: TYPE_NORMAL
- en: An assembly language statement that provides information to the assembler but
    is not a machine instruction and does not generate any code.
  prefs: []
  type: TYPE_NORMAL
- en: domain (of a function)
  prefs: []
  type: TYPE_NORMAL
- en: The set of all possible input values that a function accepts.
  prefs: []
  type: TYPE_NORMAL
- en: dword
  prefs: []
  type: TYPE_NORMAL
- en: Double word (two 16-bit words, forming a 32-bit value).
  prefs: []
  type: TYPE_NORMAL
- en: dynamic type system
  prefs: []
  type: TYPE_NORMAL
- en: A program organization that allows types of objects to change during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: effective address
  prefs: []
  type: TYPE_NORMAL
- en: The ultimate address in memory that an instruction will access, after all the
    address calculations are complete.
  prefs: []
  type: TYPE_NORMAL
- en: epilogue
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard exit sequence that cleans up local variable storage for a procedure.
    Typically, this consists of the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: F
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: facade code
  prefs: []
  type: TYPE_NORMAL
- en: Code that changes the parameter or return result interface between calling code
    and a function or procedure being called to make the calling sequences compatible.
  prefs: []
  type: TYPE_NORMAL
- en: false precision
  prefs: []
  type: TYPE_NORMAL
- en: Extra bits in a computed result that contain garbage values; their presence
    indicates more precision than is actually present in the result.
  prefs: []
  type: TYPE_NORMAL
- en: field
  prefs: []
  type: TYPE_NORMAL
- en: A member of a record and struct or object.
  prefs: []
  type: TYPE_NORMAL
- en: floating-point unit
  prefs: []
  type: TYPE_NORMAL
- en: A section of a CPU that implements floating-point arithmetic.
  prefs: []
  type: TYPE_NORMAL
- en: FPU
  prefs: []
  type: TYPE_NORMAL
- en: See *floating-point unit*.
  prefs: []
  type: TYPE_NORMAL
- en: full pathname
  prefs: []
  type: TYPE_NORMAL
- en: A pathname beginning with a backslash (\) character, specifying a path that
    starts at the root directory. Also see *pathnames*.
  prefs: []
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: granularity
  prefs: []
  type: TYPE_NORMAL
- en: The smallest unit of access; for example, an MMU may access memory by using
    page granularity, where the granularity is 4096 bytes.
  prefs: []
  type: TYPE_NORMAL
- en: guard digits (or bits)
  prefs: []
  type: TYPE_NORMAL
- en: Extra digits (or bits) maintained during a calculation to enhance the accuracy
    of a long chain of calculations.
  prefs: []
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: heap
  prefs: []
  type: TYPE_NORMAL
- en: An area in memory where a program keeps dynamically allocated memory objects.
  prefs: []
  type: TYPE_NORMAL
- en: HLL
  prefs: []
  type: TYPE_NORMAL
- en: High-level language.
  prefs: []
  type: TYPE_NORMAL
- en: HO
  prefs: []
  type: TYPE_NORMAL
- en: High order.
  prefs: []
  type: TYPE_NORMAL
- en: horizontal addition or subtraction
  prefs: []
  type: TYPE_NORMAL
- en: Adding or subtracting adjacent lanes in an XMM or a YMM register rather than
    the usual corresponding lanes in separate XMM or YMM registers. Also see *vertical
    addition* *or* *subtraction*.
  prefs: []
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I/O
  prefs: []
  type: TYPE_NORMAL
- en: Input/output.
  prefs: []
  type: TYPE_NORMAL
- en: IDE
  prefs: []
  type: TYPE_NORMAL
- en: See *integrated development environment*.
  prefs: []
  type: TYPE_NORMAL
- en: idiom
  prefs: []
  type: TYPE_NORMAL
- en: An idiosyncrasy of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: indirection
  prefs: []
  type: TYPE_NORMAL
- en: A technique in which an instruction’s operand provides the location where the
    instruction can find the address of the object, rather than the object itself.
  prefs: []
  type: TYPE_NORMAL
- en: induction variable
  prefs: []
  type: TYPE_NORMAL
- en: A variable whose value depends entirely on the value of another variable (typically
    during the execution of a loop).
  prefs: []
  type: TYPE_NORMAL
- en: integrated development environment
  prefs: []
  type: TYPE_NORMAL
- en: A set of programmer tools including compilers and assemblers, linkers, debuggers,
    and editors that allow you to develop software all within the same system.
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: lane
  prefs: []
  type: TYPE_NORMAL
- en: An element of a vector (SSE/AVX packed data types).
  prefs: []
  type: TYPE_NORMAL
- en: leaf function
  prefs: []
  type: TYPE_NORMAL
- en: A function that does not call any other functions. The name comes from a call
    tree graph, in which its leaf nodes are those procedures that do not call any
    other procedures (and have no edges coming out of their nodes).
  prefs: []
  type: TYPE_NORMAL
- en: lexicographical ordering
  prefs: []
  type: TYPE_NORMAL
- en: Alphabetical ordering (or, more correctly, ordering based on the character code).
    Strings are compared on a character-by-character basis from the first character
    to the length of the shorter string. If two strings are equal to the length of
    the shorter string, the longer string is the greater of the two. Two strings are
    equal only if they have the same length and all characters in the string are equal.
  prefs: []
  type: TYPE_NORMAL
- en: library module
  prefs: []
  type: TYPE_NORMAL
- en: A collection of object files. Typically organized into a *.lib* file (though
    this is not a requirement for a library module).
  prefs: []
  type: TYPE_NORMAL
- en: lifetime
  prefs: []
  type: TYPE_NORMAL
- en: A period of time, ranging from when storage is first bound to a variable to
    the point when the storage is no longer available for that variable.
  prefs: []
  type: TYPE_NORMAL
- en: LIFO
  prefs: []
  type: TYPE_NORMAL
- en: Last in, first out.
  prefs: []
  type: TYPE_NORMAL
- en: little endian
  prefs: []
  type: TYPE_NORMAL
- en: Multi-byte data objects in memory are little endian if their LO byte appears
    at the lowest address in memory and their HO byte appears at the highest address
    in memory.
  prefs: []
  type: TYPE_NORMAL
- en: LO
  prefs: []
  type: TYPE_NORMAL
- en: Low order.
  prefs: []
  type: TYPE_NORMAL
- en: local variables
  prefs: []
  type: TYPE_NORMAL
- en: Variables (more properly called *automatic variables*) that have their storage
    allocated upon entry into a procedure and that storage is returned for other use
    when the procedure returns to its caller.
  prefs: []
  type: TYPE_NORMAL
- en: loop-invariant computation
  prefs: []
  type: TYPE_NORMAL
- en: A calculation that appears within a loop and always yields the same result on
    each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: machine code
  prefs: []
  type: TYPE_NORMAL
- en: Binary (or numeric) encoding of assembly language instructions.
  prefs: []
  type: TYPE_NORMAL
- en: macro
  prefs: []
  type: TYPE_NORMAL
- en: A textual sequence that a macro processor will substitute for a macro identifier
    everywhere that identifier appears in the source file.
  prefs: []
  type: TYPE_NORMAL
- en: macroarchitecture
  prefs: []
  type: TYPE_NORMAL
- en: That view of the CPU’s architecture that is visible to software.
  prefs: []
  type: TYPE_NORMAL
- en: macro function
  prefs: []
  type: TYPE_NORMAL
- en: A macro that you can invoke anywhere in the body of the source file (including
    in the operand field of an instruction or directive); the macro returns a textual
    string that the macro invocation substitutes for the invocation.
  prefs: []
  type: TYPE_NORMAL
- en: manifest constant
  prefs: []
  type: TYPE_NORMAL
- en: An identifier representing a constant value. MASM directly substitutes the value
    of the manifest constant everywhere the identifier appears in the program.
  prefs: []
  type: TYPE_NORMAL
- en: MASM
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Macro Assembler.
  prefs: []
  type: TYPE_NORMAL
- en: memory management unit
  prefs: []
  type: TYPE_NORMAL
- en: A component of the CPU that translates program addresses into physical memory
    addresses and handles illegal memory accesses.
  prefs: []
  type: TYPE_NORMAL
- en: microarchitecture
  prefs: []
  type: TYPE_NORMAL
- en: The design of the CPU below the level that is visible to software.
  prefs: []
  type: TYPE_NORMAL
- en: MMU
  prefs: []
  type: TYPE_NORMAL
- en: See *memory management unit*.
  prefs: []
  type: TYPE_NORMAL
- en: MMX
  prefs: []
  type: TYPE_NORMAL
- en: Multimedia Extensions (extended instruction set for the x86 CPU to support multimedia
    operations).
  prefs: []
  type: TYPE_NORMAL
- en: mnemonic
  prefs: []
  type: TYPE_NORMAL
- en: Literally, this means *memory aid*. Applied to instruction names, mnemonic effectively
    means *abbreviation*. For example, the mnemonic *lea* stands for *load effective
    address*.
  prefs: []
  type: TYPE_NORMAL
- en: MSVC
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Visual C++.
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: namespace pollution
  prefs: []
  type: TYPE_NORMAL
- en: Having many names in a source file, thus limiting the number of available new
    names a programmer can use. (When a source file contains a large number of symbols,
    programmers commonly create conflicts by reusing the same name, leading to duplicate
    symbol errors in the compilation process.)
  prefs: []
  type: TYPE_NORMAL
- en: NaN
  prefs: []
  type: TYPE_NORMAL
- en: Not a number. A floating-point exceptional value indicating that a valid numeric
    result is unobtainable.
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: opcode
  prefs: []
  type: TYPE_NORMAL
- en: Operation code. The numeric encoding of a machine instruction.
  prefs: []
  type: TYPE_NORMAL
- en: ordered comparisons
  prefs: []
  type: TYPE_NORMAL
- en: Comparisons between two values, neither of which are NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: oword
  prefs: []
  type: TYPE_NORMAL
- en: Octal word (eight 16-bit words, or a 16-byte value).
  prefs: []
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: partial pathname
  prefs: []
  type: TYPE_NORMAL
- en: A pathname that begins with a directory name (not a backslash character), denoting
    a path off the current (default) directory.
  prefs: []
  type: TYPE_NORMAL
- en: pass by reference
  prefs: []
  type: TYPE_NORMAL
- en: A parameter-passing mechanism whereby the caller passes the address of the actual
    parameter data to a procedure or function.
  prefs: []
  type: TYPE_NORMAL
- en: pass by value
  prefs: []
  type: TYPE_NORMAL
- en: A parameter-passing mechanism whereby the caller passes the actual value of
    a parameter to a procedure or function.
  prefs: []
  type: TYPE_NORMAL
- en: pathnames
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of (sub)directory names separated by backslash (\) characters, possibly
    ending with a filename.
  prefs: []
  type: TYPE_NORMAL
- en: PC
  prefs: []
  type: TYPE_NORMAL
- en: Program counter. The current instruction or directive address in an assembly
    language program. PC-relative addressing is an offset from the current machine
    instruction.
  prefs: []
  type: TYPE_NORMAL
- en: powerset
  prefs: []
  type: TYPE_NORMAL
- en: A set data type implemented by using a single bit to represent each object in
    the set. If the cardinality of the set (number of members in the set) is *n*,
    the set data type will require *n* bits. In mathematics, the power set of any
    set *S* is the set of all subsets of *S*, including the empty set and *S* itself;
    this requires 2^(*n*) different sets, which is representable by an *n*-bit bit
    string.
  prefs: []
  type: TYPE_NORMAL
- en: precedence
  prefs: []
  type: TYPE_NORMAL
- en: When two different operators appear in an expression (without parentheses to
    denote the order of evaluation), precedence controls which operations occur first.
    For example, with the operators *op1* and *op2*, and the expression *x op1 y op2
    z*, the order of evaluation is determined by the precedence of the operators.
    If *op1* has higher precedence than *op2*, the expression is evaluated as (*x
    op1 y*) *op2 z*. If *op2* has a higher precedence than *op1*, the expression is
    evaluated as *x op1* (*y op2 z*). If both operators have the same precedence,
    associativity rules control the order of evaluation (see also *associativity*).
  prefs: []
  type: TYPE_NORMAL
- en: precision
  prefs: []
  type: TYPE_NORMAL
- en: The number of digits or bits maintained in a computation.
  prefs: []
  type: TYPE_NORMAL
- en: programming in the large
  prefs: []
  type: TYPE_NORMAL
- en: Using processes, methodologies, and tools to handle the development of large
    software systems.
  prefs: []
  type: TYPE_NORMAL
- en: prologue
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard entry sequence to a procedure, typically consisting of these statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: proper subset
  prefs: []
  type: TYPE_NORMAL
- en: A set whose elements are all contained within another set, and the two sets
    are not equal.
  prefs: []
  type: TYPE_NORMAL
- en: proper superset
  prefs: []
  type: TYPE_NORMAL
- en: A set that contains all the elements of another set, and the two sets are not
    equal.
  prefs: []
  type: TYPE_NORMAL
- en: Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: qword
  prefs: []
  type: TYPE_NORMAL
- en: Quad word (four 16-bit values, forming a 64-bit value).
  prefs: []
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: range (of a function)
  prefs: []
  type: TYPE_NORMAL
- en: The set of all possible output values a function produces.
  prefs: []
  type: TYPE_NORMAL
- en: record
  prefs: []
  type: TYPE_NORMAL
- en: See *struct*.
  prefs: []
  type: TYPE_NORMAL
- en: row-major ordering
  prefs: []
  type: TYPE_NORMAL
- en: A function for arranging multidimensional arrays in linear memory by storing
    elements of each row in contiguous memory locations and then placing each row,
    one after the other, in memory.
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: saturation
  prefs: []
  type: TYPE_NORMAL
- en: The process of converting a larger (bit-sized) value to a smaller one by clipping
    (that is, forcing the maximum- or minimum-sized value if the original value is
    too large to fit in the smaller result).
  prefs: []
  type: TYPE_NORMAL
- en: scalar data type
  prefs: []
  type: TYPE_NORMAL
- en: A primitive, indivisible data type (for example, an integer or a floating-point
    value) that cannot be broken into any smaller parts (other than individual bits).
  prefs: []
  type: TYPE_NORMAL
- en: scope
  prefs: []
  type: TYPE_NORMAL
- en: The scope of an identifier determines where that identifier is visible (accessible)
    in the source file during compilation. In most HLLs, the scope of a procedure
    local variable is the body of that procedure; the identifier is inaccessible outside
    that procedure.
  prefs: []
  type: TYPE_NORMAL
- en: sign contraction
  prefs: []
  type: TYPE_NORMAL
- en: The process of converting a larger signed value to a smaller signed value.
  prefs: []
  type: TYPE_NORMAL
- en: significant digits
  prefs: []
  type: TYPE_NORMAL
- en: The (number of) digits whose values are maintained during a calculation.
  prefs: []
  type: TYPE_NORMAL
- en: SIMD
  prefs: []
  type: TYPE_NORMAL
- en: See *single-instruction, multiple-data instructions*.
  prefs: []
  type: TYPE_NORMAL
- en: single-instruction, multiple-data instructions
  prefs: []
  type: TYPE_NORMAL
- en: Specialized machine instructions that operate on two or more pieces of data
    simultaneously. Provides higher-performance operations for certain multimedia
    and other applications.
  prefs: []
  type: TYPE_NORMAL
- en: SISD
  prefs: []
  type: TYPE_NORMAL
- en: Single instruction, single data.
  prefs: []
  type: TYPE_NORMAL
- en: snippets
  prefs: []
  type: TYPE_NORMAL
- en: Small pieces of code that demonstrate a concept.
  prefs: []
  type: TYPE_NORMAL
- en: SSE
  prefs: []
  type: TYPE_NORMAL
- en: Streaming SIMD Extensions.
  prefs: []
  type: TYPE_NORMAL
- en: state machine
  prefs: []
  type: TYPE_NORMAL
- en: Programming logic that maintains a history of prior execution via a *state*
    maintained by the program. The state could be maintained in variables or in the
    current execution location of the state machine.
  prefs: []
  type: TYPE_NORMAL
- en: static variables
  prefs: []
  type: TYPE_NORMAL
- en: Variables whose lifetime is the execution time of the whole program; typically,
    you declare static variables in the `.data`, `.data?`, or `.const` section of
    an assembly language program.
  prefs: []
  type: TYPE_NORMAL
- en: strength-reduction optimizations
  prefs: []
  type: TYPE_NORMAL
- en: Using a less expensive operation to compute the same result as a more expensive
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: string descriptor
  prefs: []
  type: TYPE_NORMAL
- en: A data structure that provides information about string data. Typically, a string
    descriptor contains a pointer to the actual string data, the number of characters
    in the string (its length), and possibly the string type or encoding (such as
    ASCII, UTF-8, or information describing other encoding).
  prefs: []
  type: TYPE_NORMAL
- en: struct
  prefs: []
  type: TYPE_NORMAL
- en: A composite data structure composed of a collection of heterogeneous (different
    typed) objects.
  prefs: []
  type: TYPE_NORMAL
- en: system bus
  prefs: []
  type: TYPE_NORMAL
- en: A collection of electronic signals comprising the address, data, and control
    buses.
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: timestamp
  prefs: []
  type: TYPE_NORMAL
- en: A numeric (usually time-based) value associated with an event in the system.
    Timestamps are monotonically increasing; that is, if two events have timestamps
    associated with them, the later event will have a larger timestamp value.
  prefs: []
  type: TYPE_NORMAL
- en: TOS
  prefs: []
  type: TYPE_NORMAL
- en: Top of stack.
  prefs: []
  type: TYPE_NORMAL
- en: trampoline
  prefs: []
  type: TYPE_NORMAL
- en: A fixed point in the code where a program can jump (or call) to transfer to
    another point in the code that is outside the normal range of a `jmp` or `call`
    instruction.
  prefs: []
  type: TYPE_NORMAL
- en: tricky programming
  prefs: []
  type: TYPE_NORMAL
- en: Programming constructs that use non-obvious results of a computation.
  prefs: []
  type: TYPE_NORMAL
- en: U
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: unordered comparisons
  prefs: []
  type: TYPE_NORMAL
- en: Comparisons between two values, where at least one of the values is a NaN.
  prefs: []
  type: TYPE_NORMAL
- en: unraveling loops
  prefs: []
  type: TYPE_NORMAL
- en: Pulling the body out of a loop and expanding it in place several times (once
    for each loop iteration) to avoid the overhead of loop control at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: URL
  prefs: []
  type: TYPE_NORMAL
- en: Uniform resource locator (web address).
  prefs: []
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: variant type
  prefs: []
  type: TYPE_NORMAL
- en: A data type that can change dynamically during program execution (that is, it
    is a *varying* type).
  prefs: []
  type: TYPE_NORMAL
- en: vector instructions
  prefs: []
  type: TYPE_NORMAL
- en: Instructions that operate on multiple pieces of data simultaneously (SIMD instructions).
    Specifically, an array of two or more data values.
  prefs: []
  type: TYPE_NORMAL
- en: vertical addition or subtraction
  prefs: []
  type: TYPE_NORMAL
- en: Adding or subtracting corresponding lanes in two XMM or YMM registers. Also
    see *horizontal addition* *or* *subtraction*.
  prefs: []
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: whitespace characters
  prefs: []
  type: TYPE_NORMAL
- en: Characters that reserve space on a display but don’t otherwise have a printable
    glyph (such as the space and tab characters).
  prefs: []
  type: TYPE_NORMAL
- en: word
  prefs: []
  type: TYPE_NORMAL
- en: A 16-bit value.
  prefs: []
  type: TYPE_NORMAL
- en: wrapper code
  prefs: []
  type: TYPE_NORMAL
- en: Code that is written to change the behavior of a function call without directly
    modifying that function (such as changing where the caller passes parameters to
    the underlying function). Wrapper code is also known as a *facade*.
  prefs: []
  type: TYPE_NORMAL
