["```\nfunc New(out io.Writer, prefix string, flag int) *Logger\n```", "```\nfunc Example_log() {\n    l := log.New(1os.Stdout, 2\"example: \", 3log.Lshortfile)\n    l.Print(\"logging to standard output\")\n\n    // Output:\n    // example: 4log_test.go:12: logging to standard output\n}\n```", "```\npackage ch13\n\nimport (\n    \"io\"\n\n    \"go.uber.org/multierr\"\n)\n\ntype sustainedMultiWriter struct {\n    writers []io.Writer\n}\n\nfunc (s *sustainedMultiWriter) 1Write(p []byte) (n int, err error) {\n    for _, w := range s.writers {\n        i, wErr := 2w.Write(p)\n        n += i\n        err = 3multierr.Append(err, wErr)\n    }\n\n    return n, err\n}\n```", "```\n`--snip--`\n\nfunc SustainedMultiWriter(writers ...io.Writer) io.Writer {\n    mw := &sustainedMultiWriter{writers: 1make([]io.Writer, 0, len(writers))}\n\n    for _, w := range writers {\n        if m, ok := 2w.(*sustainedMultiWriter); ok {\n            mw.writers = 3append(mw.writers, m.writers...)\n            continue\n        }\n\n        mw.writers = 4append(mw.writers, w)\n }\n\n    return mw\n}\n```", "```\npackage ch13\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc Example_logMultiWriter() {\n    logFile := new(bytes.Buffer)\n    w := 1SustainedMultiWriter(os.Stdout, logFile)\n    l := log.New(w, \"example: \", 2log.Lshortfile|log.Lmsgprefix)\n\n    fmt.Println(\"standard output:\")\n    l.Print(\"Canada is south of Detroit\")\n\n    fmt.Print(\"\\nlog file contents:\\n\", logFile.String())\n\n    // Output:\n    // standard output:\n    // log_test.go:24: example: Canada is south of Detroit\n    //\n    // log file contents:\n    // log_test.go:24: example: Canada is south of Detroit\n}\n```", "```\n`--snip--`\n\nfunc Example_logLevels() {\n    lDebug := log.New(os.Stdout, 1\"DEBUG: \", log.Lshortfile)\n    logFile := new(bytes.Buffer)\n    w := SustainedMultiWriter(logFile, 2lDebug.Writer())\n    lError := log.New(w, 3\"ERROR: \", log.Lshortfile)\n\n    fmt.Println(\"standard output:\")\n    lError.Print(\"cannot communicate with the database\")\n    lDebug.Print(\"you cannot hum while holding your nose\")\n\n    fmt.Print(\"\\nlog file contents:\\n\", logFile.String())\n\n    // Output:\n    // standard output:\n    // ERROR: log_test.go:43: cannot communicate with the database\n    // DEBUG: log_test.go:44: you cannot hum while holding your nose\n    //\n    // log file contents:\n    // ERROR: log_test.go:43: cannot communicate with the database\n}\n```", "```\npackage ch13\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"os\"\n    \"path/filepath\"\n    \"runtime\"\n    \"testing\"\n    \"time\"\n\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n    \"gopkg.in/fsnotify.v1\"\n \"gopkg.in/natefinch/lumberjack.v2\"\n)\n\nvar encoderCfg = zapcore.EncoderConfig{\n    MessageKey: 1\"msg\",\n    NameKey:    2\"name\",\n\n    LevelKey:    \"level\",\n    EncodeLevel: 3zapcore.LowercaseLevelEncoder,\n\n    CallerKey:    \"caller\",\n    EncodeCaller: 4zapcore.ShortCallerEncoder,\n\n 5 // TimeKey:   \"time\",\n    // EncodeTime: zapcore.ISO8601TimeEncoder,\n}\n```", "```\n`--snip--`\n\nfunc Example_zapJSON() {\n    zl := zap.New(\n     1 zapcore.NewCore(\n         2 zapcore.NewJSONEncoder(encoderCfg),\n         3 zapcore.Lock(os.Stdout),\n         4 zapcore.DebugLevel,\n        ),\n     5 zap.AddCaller(),\n        zap.Fields(\n         6 zap.String(\"version\", runtime.Version()),\n        ),\n    )\n    defer func() { _ = 7zl.Sync() }()\n\n example := 8zl.Named(\"example\")\n    example.Debug(\"test debug message\")\n    example.Info(\"test info message\")\n\n    // Output:\n 9 // {\"level\":\"debug\",\"name\":\"example\",\"caller\":\"ch13/zap_test.go:49\",\n\"msg\":\"test debug message\",\"version\":\"ago1.15.5\"}\n    // {\"level\":\"info\",\"name\":\"example\",\"caller\":\"ch13/zap_test.go:50\",\n\"msg\":\"test info message\",\"version\":\"go1.15.5\"}\n}\n```", "```\n`--snip--`\n\nfunc Example_zapConsole() {\n    zl := zap.New(\n        zapcore.NewCore(\n         1 zapcore.NewConsoleEncoder(encoderCfg),\n            zapcore.Lock(os.Stdout),\n         2 zapcore.InfoLevel,\n        ),\n    )\n    defer func() { _ = zl.Sync() }()\n\n    console := 3zl.Named(\"[console]\")\n    console.Info(\"this is logged by the logger\")\n 4 console.Debug(\"this is below the logger's threshold and won't log\")\n    console.Error(\"this is also logged by the logger\")\n\n    // Output:\n 5 // info   [console]   this is logged by the logger\n    // error  [console]   this is also logged by the logger\n}\n```", "```\n`--snip--`\n\nfunc Example_zapInfoFileDebugConsole() {\n    logFile := 1new(bytes.Buffer)\n    zl := zap.New(\n        zapcore.NewCore(\n            zapcore.NewJSONEncoder(encoderCfg),\n            zapcore.Lock(2zapcore.AddSync(logFile)),\n            zapcore.InfoLevel,\n        ),\n    )\n    defer func() { _ = zl.Sync() }()\n\n 3 zl.Debug(\"this is below the logger's threshold and won't log\")\n    zl.Error(\"this is logged by the logger\")\n```", "```\n`--snip--`\n\n    zl = 1zl.WithOptions(\n     2 zap.WrapCore(\n            func(c zapcore.Core) zapcore.Core {\n                ucEncoderCfg := encoderCfg\n             3 ucEncoderCfg.EncodeLevel = zapcore.CapitalLevelEncoder\n                return 4zapcore.NewTee(\n                    c,\n                 5 zapcore.NewCore(\n                        zapcore.NewConsoleEncoder(ucEncoderCfg),\n                        zapcore.Lock(os.Stdout),\n                        zapcore.DebugLevel,\n                    ),\n                )\n            },\n        ),\n )\n\n    fmt.Println(\"standard output:\")\n 6 zl.Debug(\"this is only logged as console encoding\")\n    zl.Info(\"this is logged as console encoding and JSON\")\n\n    fmt.Print(\"\\nlog file contents:\\n\", logFile.String())\n\n    // Output:\n    // standard output:\n    // DEBUG   this is only logged as console encoding\n    // INFO    this is logged as console encoding and JSON\n    //\n    // log file contents:\n    // {\"level\":\"error\",\"msg\":\"this is logged by the logger\"}\n    // {\"level\":\"info\",\"msg\":\"this is logged as console encoding and JSON\"}\n}\n```", "```\n`--snip--`\n\nfunc Example_zapSampling() {\n    zl := zap.New(\n     1 zapcore.NewSamplerWithOptions(\n zapcore.NewCore(\n                zapcore.NewJSONEncoder(encoderCfg),\n                zapcore.Lock(os.Stdout),\n                zapcore.DebugLevel,\n            ),\n          2time.Second, 31, 43,\n        ),\n    )\n    defer func() { _ = zl.Sync() }()\n\n    for i := 0; i < 10; i++ {\n        if i == 5 {\n         5 time.Sleep(time.Second)\n        }\n     6 zl.Debug(fmt.Sprintf(\"%d\", i))\n     7 zl.Debug(\"debug message\")\n    }\n\n    // 8Output:\n    // {\"level\":\"debug\",\"msg\":\"0\"}\n    // {\"level\":\"debug\",\"msg\":\"debug message\"}\n    // {\"level\":\"debug\",\"msg\":\"1\"}\n    // {\"level\":\"debug\",\"msg\":\"2\"}\n    // {\"level\":\"debug\",\"msg\":\"3\"}\n    // {\"level\":\"debug\",\"msg\":\"debug message\"}\n    // {\"level\":\"debug\",\"msg\":\"4\"}\n    // {\"level\":\"debug\",\"msg\":\"5\"}\n    // {\"level\":\"debug\",\"msg\":\"debug message\"}\n    // {\"level\":\"debug\",\"msg\":\"6\"}\n    // {\"level\":\"debug\",\"msg\":\"7\"}\n    // {\"level\":\"debug\",\"msg\":\"8\"}\n    // {\"level\":\"debug\",\"msg\":\"debug message\"}\n    // {\"level\":\"debug\",\"msg\":\"9\"}\n}\n```", "```\n$ **go get -u golang.org/x/sys/...**\n```", "```\n`--snip--`\n\nfunc Example_zapDynamicDebugging() {\n    tempDir, err := ioutil.TempDir(\"\", \"\")\n    if err != nil {\n        log.Fatal(err)\n    }\n defer func() { _ = os.RemoveAll(tempDir) }()\n\n    debugLevelFile := 1filepath.Join(tempDir, \"level.debug\")\n    atomicLevel := 2zap.NewAtomicLevel()\n\n    zl := zap.New(\n        zapcore.NewCore(\n            zapcore.NewJSONEncoder(encoderCfg),\n            zapcore.Lock(os.Stdout),\n         3 atomicLevel,\n        ),\n    )\n    defer func() { _ = zl.Sync() }()\n```", "```\n`--snip--`\n\n    watcher, err := 1fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer func() { _ = watcher.Close() }()\n\n    err = 2watcher.Add(tempDir)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    ready := make(chan struct{})\n    go func() {\n        defer close(ready)\n\n        originalLevel := 3atomicLevel.Level()\n\n        for {\n            select {\n            case event, ok := 4<-watcher.Events:\n                if !ok {\n                    return\n                }\n                if event.Name == 5debugLevelFile {\n                    switch {\n                    case event.Op&fsnotify.Create == 6fsnotify.Create:\n                        atomicLevel.SetLevel(zapcore.DebugLevel)\n ready <- struct{}{}\n                    case event.Op&fsnotify.Remove == 7fsnotify.Remove:\n                        atomicLevel.SetLevel(originalLevel)\n                        ready <- struct{}{}\n                    }\n                }\n            case err, ok := 8<-watcher.Errors:\n                if !ok {\n                    return\n                }\n                zl.Error(err.Error())\n            }\n        }\n    }()\n```", "```\n`--snip--`\n\n 1 zl.Debug(\"this is below the logger's threshold\")\n\n    df, err := 2os.Create(debugLevelFile)\n    if err != nil {\n        log.Fatal(err)\n    }\n    err = df.Close()\n    if err != nil {\n        log.Fatal(err)\n    }\n    <-ready\n\n 3 zl.Debug(\"this is now at the logger's threshold\")\n\n    err = 4os.Remove(debugLevelFile)\n    if err != nil {\n        log.Fatal(err)\n    }\n    <-ready\n\n 5 zl.Debug(\"this is below the logger's threshold again\")\n 6 zl.Info(\"this is at the logger's current threshold\")\n\n    // Output:\n    // {\"level\":\"debug\",\"msg\":\"this is now at the logger's threshold\"}\n    // {\"level\":\"info\",\"msg\":\"this is at the logger's current threshold\"}\n}\n```", "```\npackage ch13\n\nimport (\n    \"io\"\n    \"io/ioutil\"\n    \"net\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"os\"\n\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n)\n\ntype wideResponseWriter struct {\n 1 http.ResponseWriter\n    length, status int\n}\n\nfunc (w *wideResponseWriter) 2WriteHeader(status int) {\n    w.ResponseWriter.WriteHeader(status)\n    w.status = status\n}\n\nfunc (w *wideResponseWriter) 3Write(b []byte) (int, error) {\n    n, err := w.ResponseWriter.Write(b)\n    w.length += n\n\n    if w.status == 0 {\n        w.status = 4http.StatusOK\n    }\n\n    return n, err\n}\n```", "```\n`--snip--`\n\nfunc WideEventLog(logger *zap.Logger, next http.Handler) http.Handler {\n    return http.HandlerFunc(\n        func(w http.ResponseWriter, r *http.Request) {\n            wideWriter := 1&wideResponseWriter{ResponseWriter: w}\n\n         2 next.ServeHTTP(wideWriter, r)\n\n            addr, _, _ := net.SplitHostPort(r.RemoteAddr)\n         3 logger.Info(\"example wide event\",\n                zap.Int(\"status_code\", wideWriter.status),\n                zap.Int(\"response_length\", wideWriter.length),\n                zap.Int64(\"content_length\", r.ContentLength),\n                zap.String(\"method\", r.Method),\n                zap.String(\"proto\", r.Proto),\n                zap.String(\"remote_addr\", addr),\n                zap.String(\"uri\", r.RequestURI),\n                zap.String(\"user_agent\", r.UserAgent()),\n            )\n        },\n    )\n}\n```", "```\n`--snip--`\n\nfunc Example_wideLogEntry() {\n    zl := zap.New(\n        zapcore.NewCore(\n            zapcore.NewJSONEncoder(encoderCfg),\n            zapcore.Lock(os.Stdout),\n            zapcore.DebugLevel,\n        ),\n    )\n    defer func() { _ = zl.Sync() }()\n\n    ts := httptest.NewServer(\n     1 WideEventLog(zl, http.HandlerFunc(\n            func(w http.ResponseWriter, r *http.Request) {\n                defer func(r io.ReadCloser) {\n                    _, _ = io.Copy(ioutil.Discard, r)\n                    _ = r.Close()\n                }(r.Body)\n                _, _ = 2w.Write([]byte(\"Hello!\"))\n            },\n        )),\n    )\n    defer ts.Close()\n\n    resp, err := 3http.Get(ts.URL + \"/test\")\n    if err != nil {\n     4 zl.Fatal(err.Error())\n    }\n    _ = resp.Body.Close()\n\n    // 5Output:\n    // {\"level\":\"info\",\"msg\":\"example wide event\",\"status_code\":200,\n\"response_length\":6,\"content_length\":0,\"method\":\"GET\",\"proto\":\"HTTP/1.1\",\n\"remote_addr\":\"127.0.0.1\",\"uri\":\"/test\",\"user_agent\":\"Go-http-client/1.1\"}\n}\n```", "```\n`--snip--`\n\nfunc TestZapLogRotation(t *testing.T) {\n    tempDir, err := ioutil.TempDir(\"\", \"\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer func() { _ = os.RemoveAll(tempDir) }()\n\n    zl := zap.New(\n        zapcore.NewCore(\n            zapcore.NewJSONEncoder(encoderCfg),\n         1 zapcore.AddSync(\n             2 &lumberjack.Logger{\n                    Filename:   3filepath.Join(tempDir, \"debug.log\"),\n                    Compress:   4true,\n                    LocalTime:  5true,\n                    MaxAge:     67,\n                    MaxBackups: 75,\n                    MaxSize:    8100,\n                },\n            ),\n            zapcore.DebugLevel,\n        ),\n    )\n defer func() { _ = zl.Sync() }()\n\n    zl.Debug(\"debug message written to the log file\")\n}\n```", "```\npackage metrics\n\nimport (\n    \"flag\"\n\n 1 \"github.com/go-kit/kit/metrics\"\n 2 \"github.com/go-kit/kit/metrics/prometheus\"\n 3 prom \"github.com/prometheus/client_golang/prometheus\"\n)\n\nvar (\n    Namespace = 4flag.String(\"namespace\", \"web\", \"metrics namespace\")\n    Subsystem = 5flag.String(\"subsystem\", \"server1\", \"metrics subsystem\")\n```", "```\n`--snip--`\n\n    Requests 1metrics.Counter = 2prometheus.NewCounterFrom(\n     3 prom.CounterOpts{\n            Namespace: *Namespace,\n            Subsystem: *Subsystem,\n            Name:    4\"request_count\",\n            Help:    5\"Total requests\",\n        },\n        []string{},\n    )\n\n    WriteErrors metrics.Counter = prometheus.NewCounterFrom(\n        prom.CounterOpts{\n            Namespace: *Namespace,\n            Subsystem: *Subsystem,\n            Name:      \"write_errors_count\",\n            Help:      \"Total write errors\",\n        },\n        []string{},\n    )\n```", "```\n`--snip--`\n\n    OpenConnections 1metrics.Gauge = 2prometheus.NewGaugeFrom(\n     3 prom.GaugeOpts{\n            Namespace: *Namespace,\n            Subsystem: *Subsystem,\n            Name:      \"open_connections\",\n            Help:      \"Current open connections\",\n        },\n        []string{},\n    )\n```", "```\n`--snip--`\n\n    RequestDuration 1metrics.Histogram = 2prometheus.NewHistogramFrom(\n     3 prom.HistogramOpts{\n            Namespace: *Namespace,\n            Subsystem: *Subsystem,\n            Buckets: 4[]float64{\n                0.0000001, 0.0000002, 0.0000003, 0.0000004, 0.0000005,\n                0.000001, 0.0000025, 0.000005, 0.0000075, 0.00001,\n                0.0001, 0.001, 0.01,\n            },\n            Name: \"request_duration_histogram_seconds\",\n            Help: \"Total duration of all requests\",\n        },\n        []string{},\n    )\n)\n```", "```\n`--snip--`\n\n    RequestDuration 1metrics.Histogram = prometheus.NewSummaryFrom(\n        prom.SummaryOpts{\n            Namespace: *Namespace,\n            Subsystem: *Subsystem,\n            Name: \"request_duration_summary_seconds\",\n            Help: \"Total duration of all requests\",\n        },\n        []string{},\n    )\n)\n```", "```\npackage main\n\nimport (\n    \"bytes\"\n    \"flag\"\n    \"fmt\"\n \"io\"\n    \"io/ioutil\"\n    \"log\"\n    \"math/rand\"\n    \"net\"\n    \"net/http\"\n    \"sync\"\n    \"time\"\n\n 1 \"github.com/prometheus/client_golang/prometheus/promhttp\"\n\n 2 \"github.com/awoodbeck/gnp/ch13/instrumentation/metrics\"\n)\n\nvar (\n    metricsAddr = 3flag.String(\"metrics\", \"127.0.0.1:8081\",\n        \"metrics listen address\")\n    webAddr = 4flag.String(\"web\", \"127.0.0.1:8082\", \"web listen address\")\n)\n```", "```\n`--snip--`\n\nfunc helloHandler(w http.ResponseWriter, _ *http.Request) {\n 1 metrics.Requests.Add(1)\n    defer func(start time.Time) {\n     2 metrics.RequestDuration.Observe(time.Since(start).Seconds())\n    }(time.Now())\n\n _, err := w.Write([]byte(\"Hello!\"))\n    if err != nil {\n     3 metrics.WriteErrors.Add(1)\n    }\n}\n```", "```\n`--snip--`\n\nfunc newHTTPServer(addr string, mux http.Handler,\n    stateFunc 1func(net.Conn, http.ConnState)) error {\n    l, err := net.Listen(\"tcp\", addr)\n    if err != nil {\n        return err\n    }\n\n    srv := &http.Server{\n        Addr:              addr,\n        Handler:           mux,\n        IdleTimeout:       time.Minute,\n        ReadHeaderTimeout: 30 * time.Second,\n        ConnState:         stateFunc,\n    }\n\n    go func() { log.Fatal(srv.Serve(l)) }()\n\n    return nil\n}\n\nfunc 2connStateMetrics(_ net.Conn, state http.ConnState) {\n    switch state {\n    case http.StateNew:\n     3 metrics.OpenConnections.Add(1)\n    case http.StateClosed:\n     4 metrics.OpenConnections.Add(-1)\n    }\n}\n```", "```\n`--snip--`\n\nfunc main() {\n    flag.Parse()\n    rand.Seed(time.Now().UnixNano())\n\n    mux := http.NewServeMux()\n 1 mux.Handle(\"/metrics/\", promhttp.Handler())\n    if err := newHTTPServer(*metricsAddr, mux, 2nil); err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"Metrics listening on %q ...\\n\", *metricsAddr)\n\n    if err := newHTTPServer(*webAddr, 3http.HandlerFunc(helloHandler),\n      4connStateMetrics); err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"Web listening on %q ...\\n\\n\", *webAddr)\n```", "```\n`--snip--`\n\n    clients := 1500\n    gets := 2100\n    wg := new(sync.WaitGroup)\n\n    fmt.Printf(\"Spawning %d connections to make %d requests each ...\",\n        clients, gets)\n    for i := 0; i < clients; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n\n            c := &http.Client{\n                Transport: 3http.DefaultTransport.(*http.Transport).Clone(),\n            }\n\n            for j := 0; j < gets; j++ {\n                resp, err := 4c.Get(fmt.Sprintf(\"http://%s/\", *webAddr))\n                if err != nil {\n                    log.Fatal(err)\n                }\n                _, _ = 5io.Copy(ioutil.Discard, resp.Body)\n                _ = 6resp.Body.Close()\n            }\n        }()\n    }\n 7 wg.Wait()\n    fmt.Print(\" done.\\n\\n\")\n```", "```\n`--snip--`\n\n    resp, err := 1http.Get(fmt.Sprintf(\"http://%s/metrics\", *metricsAddr))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    b, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Fatal(err)\n    }\n    _ = resp.Body.Close()\n\n    metricsPrefix := 2fmt.Sprintf(\"%s_%s\", *metrics.Namespace,\n        *metrics.Subsystem)\n    fmt.Println(\"Current Metrics:\")\n    for _, line := range bytes.Split(b, []byte(\"\\n\")) {\n        if 3bytes.HasPrefix(line, []byte(metricsPrefix)) {\n            fmt.Printf(\"%s\\n\", line)\n        }\n    }\n}\n```", "```\n$ **go run instrumentation/main.go**\nMetrics listening on \"127.0.0.1:8081\" ...\nWeb listening on \"127.0.0.1:8082\" ...\n\nSpawning 500 connections to make 100 requests each ... done.\n\nCurrent Metrics:\nweb_server1_open_connections 1500\nweb_server1_request_count 250000\nweb_server1_request_duration_histogram_seconds_bucket{le=\"1e-07\"} 30\nweb_server1_request_duration_histogram_seconds_bucket{le=\"2e-07\"} 1\nweb_server1_request_duration_histogram_seconds_bucket{le=\"3e-07\"} 613\nweb_server1_request_duration_histogram_seconds_bucket{le=\"4e-07\"} 13591\nweb_server1_request_duration_histogram_seconds_bucket{le=\"5e-07\"} 33216\nweb_server1_request_duration_histogram_seconds_bucket{le=\"1e-06\"} 40183\nweb_server1_request_duration_histogram_seconds_bucket{le=\"2.5e-06\"} 49876\nweb_server1_request_duration_histogram_seconds_bucket{le=\"5e-06\"} 49963\nweb_server1_request_duration_histogram_seconds_bucket{le=\"7.5e-06\"} 49973\nweb_server1_request_duration_histogram_seconds_bucket{le=\"1e-05\"} 49979\nweb_server1_request_duration_histogram_seconds_bucket{le=\"0.0001\"} 49994\nweb_server1_request_duration_histogram_seconds_bucket{le=\"0.001\"} 49997\nweb_server1_request_duration_histogram_seconds_bucket{le=\"0.01\"} 450000\nweb_server1_request_duration_histogram_seconds_bucket{le=\"+Inf\"} 50000\nweb_server1_request_duration_histogram_seconds_sum 50.04102166899999979\nweb_server1_request_duration_histogram_seconds_count 650000\n```"]