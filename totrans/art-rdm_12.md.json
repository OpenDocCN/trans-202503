["```\nnp.random.seed(8675309)\nz = np.random.binomial(10,0.7,size=10000)\nh = np.bincount(z, minlength=11)\nh = h / h.sum()\ncdf = np.cumsum(h)\n\nnp.random.seed(73939133)\nx = np.linspace(-7,7,10000)\ny = (1/np.sqrt(2*np.pi))*np.exp(-x**2/2)\ncdf = np.cumsum(y*(x[1]-x[0]))\n```", "```\ndef ChooseMap(self):\n    r = self.rng.random()\n    a = 0.0\n    k = 0\n    for i in range(self.nmaps):\n        if (r > a):\n            k = i\n        else:\n            return k\n        a += self.probs[i]\n    return k\n```", "```\ndef Sequential(probs, rng):\n    k = 0\n    u = rng.random()\n    while u > 0:\n        u -= probs[k]\n        k += 1\n    return k-1\n```", "```\n> pip3 install fldr\n```", "```\n> python3 discrete_test.py\ndiscrete_test <N> [<kind> | <kind> <seed>]\n\n  <N>    - number of samples\n  <kind> - randomness source\n  <seed> - seed\n```", "```\n> python3 discrete_test.py 5000 minstd 476\n[157 187 504 722 813 155 1251 693 518] (0.033361 s, sequential)\n[164 171 526 674 904 162 1198 702 499] (0.029343 s, reordered)\n[165 178 510 702 870 166 1225 683 501] (0.005494 s, FLDR)\n[172 172 517 690 862 172 1207 690 517] expected\n```", "```\n> python3 discrete_test.py 50 minstd 476\n[2  0 10  5 13  0 12  4  4] (0.000363 s, sequential)\n[2  1  5  7 13  1  8  8  5] (0.000451 s, reordered)\n[3  2  6  5  4  2 12  8  8] (0.000101 s, FLDR)\n[2  2  5  7  9  2 12  7  5] expected\n```", "```\nfrom fldr import fldr_preprocess_int, fldr_sample\nN = int(sys.argv[1])\n\nif (len(sys.argv) == 4):\n    rng = RE(kind=sys.argv[2], seed=int(sys.argv[3]))\nelif (len(sys.argv) == 3):\n    rng = RE(kind=sys.argv[2])\nelse:\n    rng = RE()\n\nprobabilities = [1,1,3,4,5,1,7,4,3]\nprob = np.array(probabilities)\nprob = prob / prob.sum()\nM = len(prob)\n```", "```\ns = time.time()\nz = np.array([Sequential(prob,rng) for i in range(N)])\ne = time.time() - s\nh = np.bincount(z, minlength=M)\nprint(h, (\"(%0.6f s, sequential)\" % e))\n\nidx = np.argsort(prob)[::-1]\np = prob[idx]\ns = time.time()\nz = np.array([Sequential(p,rng) for i in range(N)])\ne = time.time() - s\nh = np.bincount(idx[z], minlength=M)\nprint(h, (\"(%0.6f s, reordered)\" % e))\n\ns = time.time()\nx = fldr_preprocess_int(probabilities)\nz = np.array([fldr_sample(x) for i in range(N)])\ne = time.time() - s\nh = np.bincount(z, minlength=M)\nprint(h, (\"(%0.6f s, FLDR)\" % e))\n\nprint(np.round(prob*N).astype(\"uint32\"), \"expected\")\n```", "```\n> python3 discrete_ravel.py 1000 mt19937 10101\n```", "```\n[0.091 0\\. 0.1 0.204 0\\. 0\\. 0.091 0.104 0.205 0\\. 0\\. 0.205]\n```", "```\n[[0.091 0\\.    0.1   0.204]\n [0\\.    0\\.    0.091 0.104]\n [0.205 0\\.    0\\.    0.205]]\n```", "```\n[ 3 11 11 7 3 0 7 8]\n```", "```\n[(0,3), (2,3), (2,3), (1,3), (0,3), (0,0), (1,3), (2,0)]\n```", "```\nprob2 = np.array([[0.1, 0.0, 0.1, 0.2], \n                  [0.0, 0.0, 0.1, 0.1], \n                  [0.2, 0.0, 0.0, 0.2]])\nprob = prob2.ravel()\n\nz = np.array([Sequential(prob,rng) for i in range(N)])\nh = np.bincount(z, minlength=len(prob))\nh = h / h.sum()\n\nprint(h)\nprint(h.reshape((3,4)))\nprint(z[:8])\n\nx,y = np.unravel_index(z[:8], prob2.shape)\nprint([i for i in zip(x,y)])\n```", "```\nimage = Image.open(iname).convert(\"L\")\nrow, col = image.size\nrow //= 2\ncol //= 2\nimage = np.array(image.resize((row,col),Image.BILINEAR))\np = image.ravel()\nprobabilities = [int(t) for t in p]\n\nx = fldr_preprocess_int(probabilities)\nz = np.array([fldr_sample(x) for i in range(N)])\n\nx,y = np.unravel_index(z, (col,row))\nim = np.zeros((col,row))\nfor i in range(len(x)):\n    im[x[i],y[i]] += 1\nim = im / im.max()\n\nos.system(\"rm -rf %s; mkdir %s\" % (oname,oname))\nImage.fromarray(image).save(oname+\"/\"+os.path.basename(iname))\nImage.fromarray((255*im).astype(\"uint8\")).save(oname+\"/histogram2d.png\")\n```", "```\n> python3 discrete_2d.py images/hawk.png 120_000 tmp mt19937 19937\n```", "```\n> python3 inverse.py 1000 \"-np.log(u)/2\" \"2*np.exp(-2*x)\" tmp minstd 90210\n```", "```\n> python3 inverse.py 10000 \"(1-(1-u)**(1/5))**(1/2)\"\n             \"10*x**1*(1-x**2)**4\" kumaraswamy pcg64 42\n```", "```\nsamples = np.zeros(N)\n\nfor i in range(N):\n    u = rng.random()\n    samples[i] = eval(ifunc)\n```", "```\n> python3 rejection.py\nrejection <N> <proposal> <c> <func> <limits> <outdir> [<kind> | <kind> <seed>]\n\n  <N>         - number of samples\n  <proposal>  - uniform|normal_mu_sigma (e.g. normal_0_1)\n  <c>         - proposal multiplier (e.g. 1)\n  <func>      - function to sample from (e.g. 2*x**2+3)\n  <limits>    - lo_hi limit on sampling range (e.g. -3_8.8)\n  <outdir>    - output directory name (overwritten)\n  <kind>      - randomness source\n  <seed>      - seed\n```", "```\n> python3 rejection.py 100000 uniform 4.1\n    \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\" -18_18 reject0 pcg64 1313\n832745 trials to get 100000 samples (30.7419 s)\n```", "```\n> python3 rejection.py 100000 normal_0_1 4\n    \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\" -18_18 reject1 pcg64 1313\n1511344 trials to get 100000 samples (62.7675 s)\n```", "```\npython3 rejection.py 100000 normal_0_20 4.2 \n    \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\" -18_18 reject2 pcg64 1313\npython3 rejection.py 100000 normal_-5_2.4 4 \n    \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\" -18_18 reject3 pcg64 1313\npython3 rejection.py 100000 uniform 4 \n    \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\" -11_4 reject4 pcg64 1313\npython3 rejection.py 100000 uniform 158 \n    \"2*x**2+3\" -3_8.8 reject5 pcg64 1313\n```", "```\n> python3 markov_chain.py 70 24 6 [[53,5,42],[13,83,4],[14,29,57]]\n```", "```\n[0.7  0.24 0.06]\n[0.4106 0.2516 0.3378]\n[0.297618 0.32732  0.375062]\n[0.25279782 0.39532448 0.3518777 ]\n[0.23463791 0.44280374 0.32255835]\n[0.22708075 0.47280092 0.30011833]\n[0.22383348 0.49081312 0.2853534 ]\n[0.22238693 0.50131905 0.27629402]\n[0.22171771 0.50733942 0.27094286]\n[0.22139651 0.51075104 0.26785245]\n[0.22123713 0.5126704  0.26609247]\n[0.22115578 0.5137451  0.26509912]\n[0.2211133  0.51434497 0.26454173]\n[0.22109074 0.51467909 0.26423017]\n[0.2210786  0.51486493 0.26405647]\n[0.221072  0.5149682 0.2639598]\n[0.2210684  0.51502555 0.26390605]\n[0.22106642 0.51505738 0.2638762 ]\n[0.22106533 0.51507504 0.26385963]\n[0.22106473 0.51508484 0.26385043]\n[0.2210644  0.51509028 0.26384532]\n```", "```\neps = 1e-5\nlast = np.array([10,10,10])\nchain = []\n\nwhile (np.abs(d-last).sum() > eps):\n    print(d)\n    chain.append(d)\n    last = d\n    d = d @ transition\n```", "```\ndef MH(func, nsamples, sigma=1, q=1, burn=1000, limits=None):\n    samples = [q]\n    while (len(samples) < (burn+nsamples)):\n        p = normal(q, sigma)\n        if (limits is not None):\n            lo,hi = limits\n            if (p <= lo) or (p >= hi):\n                p = q\n        x = p; num = eval(func)\n        x = q; den = eval(func)\n        if (rng.random() < num/den):\n            q = p\n        samples.append(q)\n\n    samples = np.array(samples)\n    return samples[burn:], samples[:burn]\n```", "```\n> python3 mcmc.py\nmcmc <N> <func> <limits> <q> <sigma> <burn> <outdir> yes|no [<kind> | <kind> <seed>]\n\n  <N>         - number of samples\n  <func>      - function to sample from (e.g. 2*x**2+3)\n  <limits>    - limits for samples (lo_hi, -18_18) or 'none'\n  <q>         - initial sample (e.g. 0)\n  <sigma>     - proposal distribution sigma (e.g. 1)\n  <burn>      - initial samples to throw away (e.g. N//4)\n  <outdir>    - output directory name (overwritten)\n  yes|no      - show or don't show the initial proposal distribution\n  <kind>      - randomness source\n  <seed>      - seed\n```", "```\n> python3 mcmc.py 100000 \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\" none 0 3 10000 tmp\n              yes pcg64 2256\n100000 samples in 6.7056 s\n```", "```\n> python3 mcmc.py 200000 \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\"\n    none 3 0.1 100000 tmp yes pcg64 1313\n> python3 mcmc.py 10000 \"2*x**2+3\" -3_8.8 0 1 1000 tmp yes pcg64 2233\n```", "```\n> python3 mcmc_movie.py 10000 \"np.exp(-((x-5)/2)**2)+4*np.exp(-((x+5)/2)**2)\"\n    -18_18 0 3 1000 tmp yes 900 pcg64 66\n10000 samples in 181.5245 s\n```", "```\n    > python3 inverse.py 30000 \"-2+1*np.tan(np.pi*(u-0.5))\"\n        \"1/(np.pi*1*(1+((x+2)/1)**2))\" cauchy pcg64 42\n    ```", "```\n    > python3 mcmc.py 100000 \"np.sin(x)**3+1\" -9.4248_9.4248 0 3 100000 tmp no pcg64 2256\n    ```"]