- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 3 ABSTRACT DATA TYPES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 抽象数据类型
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: An *abstract data type (ADT)* is defined by the *operations* it supports and
    the *behavior* it provides. Throughout this book, we’ll study data structures
    insofar as they allow the implementation of specific ADTs; in a very practical
    sense, you could say that an ADT specifies needs and requirements in general.
    This book won’t study data structures just for the sake of it; we’ll always see
    them in the context of an ADT and the operations we need the data structure (and
    associated algorithms) to support. In this chapter, you’ll learn more about what
    ADTs are and how to implement them in JavaScript.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象数据类型（ADT）*由它支持的*操作*和提供的*行为*来定义。在本书中，我们将研究数据结构，前提是它们能够实现特定的ADT；从实际角度来看，你可以说ADT通常指定了需求和要求。本书不会单纯研究数据结构；我们总是将它们置于ADT的上下文中，考虑数据结构（和相关算法）需要支持的操作。在这一章中，你将学习更多关于ADT的知识，以及如何在JavaScript中实现它们。'
- en: An ADT may be implemented in many ways, possibly with varying performance (a
    topic we’ll discuss in the next chapter) by using alternative data structures
    and algorithms. For example, you could implement a set with an array, or with
    a list, or with a tree, but the performance won’t be the same in all cases. An
    actual implementation (meaning some data structure plus the algorithms that work
    with it) may be called a *concrete data type (CDT)*, but you won’t see that term
    here.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ADT可以通过多种方式实现，可能有不同的性能（这是我们将在下一章讨论的话题），使用不同的数据结构和算法。例如，你可以用数组、列表或树来实现集合，但在不同情况下，性能可能不同。一个实际的实现（意味着某个数据结构和与之配套的算法）可能被称为*具体数据类型（CDT）*，但在这里你不会看到这个术语。
- en: How a data type is implemented is not abstract; it’s a concrete aspect that
    affects the developer. The definition of a data type requires no coding, but the
    implementation certainly does. Let’s first review some basic concepts about data
    types, abstraction, and operations, and then we’ll move to defining ADTs in detail.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型的实现不是抽象的；它是一个具体的方面，影响着开发者。数据类型的定义不需要编码，但其实现肯定需要编码。首先，让我们回顾一些关于数据类型、抽象和操作的基本概念，然后再详细定义抽象数据类型（ADT）。
- en: The Theory
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理论
- en: What are data types, and how do we work with them? Can they be defined abstractly,
    or must we always resort to actual implementations? What can we do with data types,
    what operations do they provide, and what effects do they have? Before starting
    with ADTs, let’s take a closer look at some basic software concepts that motivate
    the focus for this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是数据类型，我们如何使用它们？它们可以抽象地定义吗，还是我们必须始终依赖实际的实现？我们能对数据类型做些什么，它们提供了哪些操作，它们有何影响？在开始学习ADT之前，让我们更仔细地看看激发本章重点的基本软件概念。
- en: Data Types
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数据类型
- en: Programming languages originally included only a few built-in data types, such
    as characters, strings, booleans, and numbers (either integer or floating point),
    and developers couldn’t add any new ones; the given options were all they had
    to work with. After concepts like *classes* were added to programming languages,
    developers were able to add new, more complex data types. A data type in general
    (both those provided by the language and any you create) is defined by the set
    of possible values it may represent and the operations that can be performed on
    it; for example, it’s possible to concatenate two strings, perform logical operations
    with booleans, do arithmetic with integer numbers, or compare floating point numbers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言最初只包括少数几种内建数据类型，例如字符、字符串、布尔值和数字（整数或浮点数），开发者无法添加新的数据类型；给定的选项就是他们能使用的所有内容。随着像*类*这样的概念加入编程语言，开发者可以添加新的、更复杂的数据类型。一个数据类型（无论是语言提供的还是你自己创建的）由它可能表示的值集合以及可以对其执行的操作来定义；例如，可以将两个字符串连接起来，执行布尔值的逻辑运算，进行整数的算术运算，或者比较浮点数。
- en: When using a data type, the details of its internal representation don’t usually
    matter—only what you can do with it and how you can use it to get results. Input
    and output are all that matter. The basic idea of an ADT is specifying the operations
    that can be done, leaving aside the internal aspects. (If languages provide bit
    operations or some low-level features, you might need to learn internal representation
    details, but for most programming tasks, you won’t need to do that.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用数据类型时，通常不需要关心其内部表示的细节——只需要关心你能做什么以及如何利用它来获得结果。输入和输出才是最重要的。ADT的基本理念是指定可以执行的操作，忽略内部方面。（如果语言提供位操作或某些低级特性，可能需要了解内部表示的细节，但对于大多数编程任务来说，你不需要这样做。）
- en: Modern languages, JavaScript included, allow users to define their own data
    types. At first, developers had only simple records (such as representing a date
    with three numeric fields for day, month, and year), but now you can go further
    and use classes to hide implementation details, so users need to care only about
    using the newly defined data type and nothing else.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现代语言，包括JavaScript，允许用户定义自己的数据类型。一开始，开发者只能使用简单的记录类型（比如用三个数字字段表示日期：日、月、年），但现在你可以进一步使用类来隐藏实现细节，这样用户只需要关心如何使用新定义的数据类型，而不需要关注其他内容。
- en: NOTE
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*ADT can also stand for algebraic data type, which is a different concept representing
    a type formed by combining other types.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*ADT 也可以代表代数数据类型，这是一个不同的概念，表示通过组合其他类型形成的类型。*'
- en: '#### Abstraction'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 抽象'
- en: We have been bandying about the concept of abstraction, so now let’s consider
    more specifically what that term means. Basically, *abstraction* implies hiding
    or omitting details and reaching instead for an overarching higher-level idea.
    When we talk about abstraction, we are purposefully ignoring implementation aspects,
    at least for the time being, to concentrate on our needs, no matter how we’ll
    get around to code solutions for them. For example, do you need to store and retrieve
    strings? A dictionary ADT would be your solution; you’ll see how to implement
    it later, but no matter how you do it, that’s the data type you need.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在谈论抽象的概念，现在让我们更具体地思考这个术语的含义。基本上，*抽象*意味着隐藏或省略细节，转而寻求一个更高层次的总体概念。当我们谈论抽象时，我们有意识地忽略实现方面的内容，至少在此时，我们专注于我们的需求，无论我们以后如何通过代码解决它们。例如，你需要存储和检索字符串吗？字典抽象数据类型（ADT）就是你的解决方案；你稍后会看到如何实现它，但无论你怎么做，这就是你需要的数据类型。
- en: 'Software engineering has three similar and related concepts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程有三个相似且相关的概念：
- en: '**Encapsulation **Designing modules as if they had a “shell” or “capsule” around
    them, so only the module is responsible for handling its data. The idea is to
    wrap together data and the methods that work on that data in a single place for
    a more coherent, cohesive design.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**封装** 将模块设计为好像它们周围有一个“外壳”或“胶囊”，只有该模块负责处理其数据。其理念是将数据和处理这些数据的方法包装在一起，放在同一个地方，以实现更为一致和紧密的设计。'
- en: '**Data hiding **Hiding inner details of a module’s implementation from the
    rest of the system, ensuring that they can be changed without affecting any other
    parts of the code. This mechanism ensures that no one can access internal details
    from the outside. In other words, encapsulation brings everything together, and
    data hiding ensures that nobody can mess with internals from “outside.”'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据隐藏** 将模块实现的内部细节隐藏起来，确保它们的更改不会影响系统的其他部分。这种机制确保外部无法访问内部细节。换句话说，封装将一切聚合在一起，而数据隐藏确保没人能从“外部”干扰内部内容。'
- en: '**Modularity **Dividing a system into separate modules that can be designed
    and developed independently from the rest of the system. Using modules correctly
    provides both encapsulation and data hiding.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块化** 将系统划分为可以独立设计和开发的单独模块。正确使用模块可以提供封装和数据隐藏。'
- en: An ADT defines only what operations it can perform; it doesn’t go into detail
    about how those operations will be implemented. In other words, with an ADT, you
    describe what you can do “in the abstract” rather than going into concrete detail.
    Let’s consider some different types of operations we can perform on an ADT.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ADT 只定义它能执行哪些操作；它不会详细说明这些操作如何实现。换句话说，通过ADT，你描述的是“抽象”的操作，而不是具体的实现细节。让我们来考虑一些可以对ADT执行的不同类型的操作。
- en: Operations and Mutations
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 操作与变更
- en: A common way to classify data types is by *mutable* versus *immutable* values.
    For example, in JavaScript, objects and arrays are mutable. After creating an
    object or array, you can modify its values without creating a new object or array.
    On the other hand, numbers and strings are immutable; if you apply an operation
    to either of those data types, a new, different, and distinct value is produced.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的数据类型分类方法是通过 *可变* 和 *不可变* 值来区分。例如，在 JavaScript 中，对象和数组是可变的。创建对象或数组后，你可以修改其值，而无需创建新的对象或数组。另一方面，数字和字符串是不可变的；如果对这些数据类型应用操作，将会生成一个新的、不同的、独立的值。
- en: When designing a new date type (such as an object with three separate integer
    values, like the date example mentioned earlier in this chapter), you could opt
    to provide operations to set the day, month, or year, which would mean that date
    objects are mutable. On the other hand, if those operations returned a new date
    object instead of modifying the existing one, date objects would be immutable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当设计一个新的日期类型（例如，一个包含三个独立整数值的对象，如本章早些时候提到的日期示例）时，你可以选择提供设置日期、月份或年份的操作，这样日期对象就是可变的。另一方面，如果这些操作返回一个新的日期对象，而不是修改现有对象，则日期对象是不可变的。
- en: NOTE
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*React Redux developers are well aware of immutability and what it requires.
    If you want to modify the state of a React application that uses Redux, you cannot
    just modify it directly; you must generate a new state with whatever changes you
    want. Redux assumes that you manage your state data in an immutable way. (We’ll
    discuss immutability further in [Chapter 18](chapter18.xhtml).)*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*React Redux 开发者深知不可变性及其要求。如果你想修改使用 Redux 的 React 应用程序的状态，不能直接修改它；你必须生成一个包含所需更改的新状态。Redux
    假设你以不可变的方式管理状态数据。（我们将在[第18章](chapter18.xhtml)进一步讨论不可变性。）*'
- en: 'The following list shows the categories of operations that apply to an ADT:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表展示了适用于 ADT 的操作类别：
- en: '**Creators **Functions that produce a new object of the given type, possibly
    taking some values as arguments. Using the date ADT example, a creator could build
    a new date out of day, month, and year values.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建者** 函数生成一个给定类型的新对象，可能需要一些值作为参数。以日期 ADT 示例为例，一个创建者可以根据日期、月份和年份值生成一个新的日期。'
- en: '**Observers **Functions that take objects of a given type and produce some
    values of a different type. For the date ADT, a getMonth() operation might produce
    the month as an integer, or an isSunday() predicate could determine whether the
    given date falls on a Sunday.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察者** 函数接收给定类型的对象并生成不同类型的值。例如，对于日期抽象数据类型（ADT），getMonth() 操作可能返回月份的整数，或者 isSunday()
    谓词可以判断给定日期是否是周日。'
- en: '**Producers **Functions that take an object of a given type, and possibly some
    extra arguments, and produce a new object of the given type. With the date ADT,
    you could have a function that added an integer number of days to a date, producing
    a new date.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**生产者** 函数接收一个给定类型的对象，可能还会接受一些额外的参数，并生成一个新的给定类型的对象。对于日期 ADT，你可以有一个函数将一个整数天数加到日期上，生成一个新的日期。'
- en: '**Mutators **Functions that directly modify an object of a given type. A setMonth()
    method could modify an object (change its month) instead of producing a new one.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**修改器** 函数直接修改给定类型的对象。例如，setMonth() 方法可以修改一个对象（更改其月份），而不是生成一个新的对象。'
- en: With an immutable data type, only the first three types of operations apply;
    for mutable data types, mutators also apply.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不可变数据类型，仅适用前三种操作；而对于可变数据类型，还适用修改操作。
- en: Implementing an ADT
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现一个 ADT
- en: Consider a situation where you want to implement a *bag* or *multiset*, which
    is a container like a set, but it allows for repeated elements. (Sets cannot have
    repeated elements by definition.) We’ll also add an extra operation (“greatest”)
    to make it more interesting. [Table 3-1](chapter3.xhtml#tab3-1) provides an example
    of how ADTs are described throughout the book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个情况，你想实现一个 *集合* 或 *多重集合*，它是类似集合的容器，但允许重复元素。（集合定义上不能包含重复元素。）我们还将增加一个额外的操作（“greatest”），让它更有趣。[表
    3-1](chapter3.xhtml#tab3-1)提供了本书中如何描述 ADT 的示例。
- en: 'Table 3-1: Operations on Bags'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-1：集合的操作
- en: '| Operation | Signature | Description |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 签名 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Create | → bag | Create a new bag. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 创建 | → bag | 创建一个新的集合。 |'
- en: '| Empty? | bag → boolean | Given a bag, determine whether it’s empty. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 空吗？ | bag → boolean | 给定一个集合，确定它是否为空。 |'
- en: '| Add | bag × value → bag | Given a new value, add it to the bag. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 添加 | bag × value → bag | 给定一个新值，将其添加到集合中。 |'
- en: '| Remove | bag × value → bag | Given a value, remove it from the bag. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 移除 | bag × value → bag | 给定一个值，将其从袋子中移除。 |'
- en: '| Find | bag × value → boolean | Given a value, check whether it exists in
    the bag. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 查找 | bag × value → boolean | 给定一个值，检查它是否存在于袋子中。 |'
- en: '| Greatest | bag → value &#124; undefined | Given a bag, find the greatest
    value in it. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 最大值 | bag → value &#124; undefined | 给定一个袋子，找到其中的最大值。 |'
- en: Ignore the middle column for now and focus on the other two. The Operation column
    names each operation that is provided, and the Description column provides a simple
    explanation of what the operation is supposed to achieve. You want to be able
    to create a new (empty) bag and also test whether the bag is empty. You need to
    be able to add new values to the bag and remove previously entered values from
    it, and both of those operations will change the bag’s contents. Finally, you
    want to be able to find whether a given value is in the bag and also determine
    the greatest value in the bag.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在暂时忽略中间一列，专注于另外两列。操作列列出了每个提供的操作，而描述列则提供了该操作预期实现的简单解释。你需要能够创建一个新的（空的）袋子，并测试该袋子是否为空。你还需要能够向袋子中添加新值，并从中移除先前添加的值，这两个操作都会改变袋子的内容。最后，你希望能够找到袋子中是否包含给定的值，并且确定袋子中的最大值。
- en: You could also have a column specifying the type of the operation— creator,
    observer, producer, and so on—but that’s usually understood from the operation’s
    description and not explicitly included.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以有一列指定操作的类型——创建者、观察者、生产者等等——但通常这是通过操作的描述来理解的，而不会明确地包括在内。
- en: What’s the operation’s Signature, the middle column in [Table 3-1](chapter3.xhtml#tab3-1)?
    Unless using TypeScript or Flow (as mentioned in [Chapter 1](chapter1.xhtml)),
    JavaScript doesn’t let developers specify types for functions and variables, but
    adding that information (even if only in comments or a table like this one) helps
    users better understand what the function expects and returns.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的签名是什么？这是[表3-1](chapter3.xhtml#tab3-1)中间一列的内容。除非使用TypeScript或Flow（如[第1章](chapter1.xhtml)中提到的），否则JavaScript不允许开发者为函数和变量指定类型，但添加这些信息（即使只是以注释或类似这种表格的形式）有助于用户更好地理解函数的期望和返回结果。
- en: Specifying a function’s parameters and the returned result is called a *signature*,
    and it’s based on a *type system* called *Hindley-Milner*. You start with the
    types of the function’s parameters, in order, separated by ×, followed by an arrow,
    and then the types of the function’s results.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 指定一个函数的参数和返回结果被称为*签名*，它基于一种叫做*Hindley-Milner*的*类型系统*。你从函数参数的类型开始，按顺序排列，用×分隔，接着是一个箭头，然后是函数返回结果的类型。
- en: Let’s consider some examples. [Table 3-1](chapter3.xhtml#tab3-1) shows that
    the create() function doesn’t take any parameters and returns a bag-type result.
    Similarly, add() takes two parameters, a bag and a value, and it returns a bag
    as a result. Finally, the greatest() function takes a bag parameter and returns
    either a value or undefined.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一些示例。[表3-1](chapter3.xhtml#tab3-1)显示，create()函数不接受任何参数，返回一个bag类型的结果。同样，add()接受两个参数，一个是袋子，一个是值，它返回一个袋子作为结果。最后，greatest()函数接受一个袋子参数，并返回一个值或undefined。
- en: The complete Hindley-Milner system includes several more details, such as constraints
    on the types, generic types, undetermined number of parameters, class methods,
    and so on, but for our needs, the definitions shown in [Table 3-1](chapter3.xhtml#tab3-1)
    will suffice.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的Hindley-Milner系统包含更多的细节，比如类型约束、泛型类型、未确定数量的参数、类方法等等，但对于我们的需求，[表3-1](chapter3.xhtml#tab3-1)中展示的定义已经足够。
- en: Implementing ADTs Using Classes
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用类实现ADT
- en: 'Let’s use a class to start implementing a bag ADT. The objects will have two
    attributes: count, which counts how many elements are in the bag, and data, which
    is an object with a key for each element and a value that represents how many
    times that key appears in the bag. Keep in mind, we’re not looking for an especially
    performant way to implement a bag (we’ll get to that in [Chapter 11](chapter11.xhtml)).
    For now, we’re just looking at an example of using classes.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个类来开始实现袋子ADT。对象将有两个属性：count，它计算袋子中有多少个元素，和data，它是一个对象，每个元素都有一个键，并且该键的值表示它在袋子中出现的次数。请记住，我们并不寻找一种特别高效的方式来实现袋子（我们将在[第11章](chapter11.xhtml)中讨论这个问题）。现在，我们只是看一个使用类的示例。
- en: 'For instance, if you add the strings HOME, SWEET, and HOME to a bag, the object
    would look like the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你将字符串HOME、SWEET和HOME添加到袋子中，该对象将如下所示：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The count attribute has a value of 3 to reflect that three strings were added
    to the bag. The data part includes a HOME attribute with a value of 2 (since HOME
    was added twice) and a SWEET attribute with a value of 1.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 计数属性的值为 3，表示有三个字符串已添加到包中。数据部分包括一个 HOME 属性，其值为 2（因为 HOME 被添加了两次），以及一个 SWEET 属性，其值为
    1。
- en: '[Listing 3-1](#Lis3-1) shows the complete Bag class.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 3-1](#Lis3-1) 显示了完整的 Bag 类。'
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 3-1: A possible implementation for the bag ADT'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 3-1：包 ADT 的一种可能实现
- en: A new object is initialized with a zero count and an empty set of values ❶.
    You can tell whether the object is empty by checking whether the count is zero
    ❷. To see whether the bag contains a given key ❸, check whether it appears in
    the data object with the in operator. Finding the greatest key ❹ is not hard because
    of JavaScript’s functionality. You first get an array with all the keys in data
    (all the values that were added to the bag), and after sorting it, you pop() its
    last element, which will be the greatest key in the bag.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 新对象以零计数和空的数据集初始化 ❶。你可以通过检查计数是否为零来判断该对象是否为空 ❷。要查看包中是否包含给定的键 ❸，可以使用 in 操作符检查它是否出现在数据对象中。由于
    JavaScript 的功能，找到最大键 ❹ 也并不困难。你首先获取一个包含所有键的数组（所有添加到包中的值），然后对其进行排序，最后使用 pop() 获取数组的最后一个元素，这将是包中最大的键。
- en: To add a key to the bag, increment the count by 1 ❺ and then check whether the
    key is already in the bag ❻; if it is, increment its count; if it isn’t, add it
    with a count of 1.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要向包中添加一个键，首先将计数加 1 ❺，然后检查该键是否已经在包中 ❻；如果在，递增其计数；如果不在，则以计数 1 将其添加进去。
- en: To remove a key from the bag, first verify that the key actually is in the bag
    ❼. If it isn’t, don’t do anything at all. If you find the key, decrement the count
    ❽ and then see how many times the key appears in the bag ❾. If its count is greater
    than 1, decrement it by 1\. If it’s exactly 1, just remove the key from the data
    object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要从包中移除一个键，首先验证该键是否确实在包中 ❼。如果不在，就不做任何操作。如果找到该键，递减其计数 ❽，然后检查该键在包中出现的次数 ❾。如果其计数大于
    1，则将其减 1。如果计数恰好为 1，则从数据对象中移除该键。
- en: How can you use this object? Taking a few words from the song “Home, Sweet Home”
    (the original song from 1823, not the newer one by Mötley Crüe), you can do something
    like the code shown in [Listing 3-2](#Lis3-2) that adds part of the lyrics to
    the bag.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用这个对象？以歌曲《Home, Sweet Home》中的几个词为例（原版歌曲来自 1823 年，而非 Mötley Crüe 演唱的新版），你可以做类似于[清单
    3-2](#Lis3-2)中展示的代码，将部分歌词添加到包中。
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 3-2: A test for the bag implementation'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 3-2：包实现的测试
- en: The newly created bag is empty ❶, as expected. You can add several keys to it
    ❷, and the bag will obviously no longer be empty ❸. (See question 3.1 for a more
    compact way of chaining similar operations.) The find operation ❹ works as expected;
    "YES" isn’t in the bag, but "NO" is. Finally, the greatest key in the bag is "THERE'S"
    ❺, but after removing it ❻, "SWEET" is the new greatest value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的包是空的 ❶，正如预期的那样。你可以向其中添加几个键 ❷，显然包就不再为空了 ❸。（关于更简洁的方式来链式调用类似操作，请参见问题 3.1。）查找操作
    ❹ 如预期般工作；"YES" 不在包中，但 "NO" 在。最后，包中最大的键是 "THERE'S" ❺，但在移除它 ❻ 后，"SWEET" 成为了新的最大值。
- en: Implementing ADTs Using Functions (Mutable Version)
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用函数实现 ADT（可变版本）
- en: Now that you’ve created a concrete implementation of an ADT, how would it change
    if you were using functions instead of classes? [Listing 3-3](#Lis3-3) uses the
    same representation based on an object with count and data attributes. The differences
    essentially will be syntactical, like passing the bag object as an argument to
    a function, instead of referring to it as this in a method.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 ADT 的具体实现，如果你使用函数而不是类，情况会如何变化？[清单 3-3](#Lis3-3) 使用了相同的表示法，基于一个具有计数和数据属性的对象。不同之处主要是语法上的，比如将包对象作为参数传递给函数，而不是在方法中通过
    this 引用它。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 3-3: An alternative (mutable) implementation of the bag ADT'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 3-3：包 ADT 的一种替代（可变）实现
- en: 'The code in [Listing 3-3](#Lis3-3) is similar to [Listing 3-1](#Lis3-1) that
    used classes. The newBag() function returns an object with the count and data
    fields, like the constructor in the Bag class did. For the other five functions
    (isEmpty, find, greatest, add, and remove), there are only two differences in
    comparison with the classes-based code: you access the object using the bag parameters
    instead of using this, and you expressly return bag at the end of the add() and
    remove() mutator methods. In this case, however, you don’t really need to do this,
    because you are actually modifying the bag parameter, which was passed by reference
    to the functions. (That’s the standard way JavaScript passes objects as arguments.)
    However, if you were to implement this ADT in some other way that didn’t use an
    object, returning the new concrete data type would be mandatory. Since you don’t
    want external dependencies on internal aspects of an implementation, the simplest
    (and safest) way to work is by always returning the new updated object, whatever
    its type.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单3-3](#Lis3-3)中的代码与[清单3-1](#Lis3-1)中的使用类的代码类似。newBag()函数返回一个具有count和data字段的对象，就像Bag类中的构造函数一样。对于其他五个函数（isEmpty,
    find, greatest, add 和 remove），与基于类的代码相比，有两个不同之处：你使用bag参数来访问对象，而不是使用this，并且你在add()和remove()变异方法的末尾显式返回bag。然而，在这种情况下，你其实不需要这样做，因为你实际上是在修改通过引用传递给函数的bag参数。（这是JavaScript传递对象作为参数的标准方式。）但是，如果你以不使用对象的其他方式实现这个ADT，那么返回新的具体数据类型将是强制性的。由于你不想让外部依赖于实现的内部细节，最简单（也是最安全）的方法是始终返回新的更新对象，无论它的类型如何。'
- en: The code to use this ADT implementation, shown in [Listing 3-4](#Lis3-4), is
    quite similar to the class-based version in [Listing 3-2](#Lis3-2).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种ADT实现的代码，如[清单3-4](#Lis3-4)所示，与[清单3-2](#Lis3-2)中的基于类的版本非常相似。
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 3-4: A test for the mutable implementation of bags'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-4：可变实现的袋子测试
- en: The simple differences are in object creation ❶, testing whether the bag is
    empty ❷, adding ❸ and removing ❻ elements, getting the greatest value ❹, and finding
    whether a value is in the bag ❺. Instead of writing b.something(...), you would
    write something(b, . . .).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的区别在于对象创建❶，测试袋子是否为空❷，添加❸和移除❻元素，获取最大值❹，以及检查某个值是否在袋子中❺。你不再写b.something(...)，而是写something(b,
    . . .)。
- en: Implementing ADTs Using Functions (Immutable Version)
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用函数实现ADT（不可变版本）
- en: Finally, let’s consider an immutable implementation of our ADT. (In [Chapter
    18](chapter18.xhtml), we’ll see immutable data structures in more detail, with
    several more cases.) There’s no particular reason here for immutability, other
    than wanting to work in a more functional way and avoiding side effects, as described
    in [Chapter 2](chapter2.xhtml).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们考虑一下我们ADT的不可变实现。（在[第18章](chapter18.xhtml)中，我们将更详细地了解不可变数据结构，并介绍更多的案例。）这里没有特别的理由要求不可变性，除了希望以更函数式的方式工作，避免副作用，正如在[第2章](chapter2.xhtml)中所描述的那样。
- en: 'In this situation, as you want to develop an immutable bag, you may not modify
    the bag object directly, so you need to change the implementation of the mutator
    methods; the rest will stay the same. The solution just requires creating and
    returning a new object if the bag needs any changes. To add a new value, use the
    following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于你希望开发一个不可变的袋子，你可能不能直接修改袋子对象，因此你需要改变变异方法的实现；其余部分保持不变。解决方案只是要求在袋子需要更改时创建并返回一个新对象。要添加一个新值，可以使用以下代码：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since adding a new value to a bag can never fail, you always need to produce
    a new object, so you actually do that ❶.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于向袋子中添加新值永远不会失败，你总是需要生成一个新对象，所以你实际上会执行❶。
- en: 'To remove a value from a bag, first check whether the value to remove is in
    it before proceeding to remove it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要从袋子中移除一个值，首先要检查要移除的值是否在其中，然后再进行移除：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As before, start by checking whether the value is in the bag ❶; if it is ❷,
    create a new object, which you’ll return.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，首先检查该值是否在袋子中❶；如果它存在❷，则创建一个新对象，并返回它。
- en: In this case, the code modifications are minimal, but with more complex data
    structures (as we’ll see later in this book), creating a new copy of an existing
    structure may not be so easy or quick, and you’ll need to do extra processing
    or structuring.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，代码修改很少，但对于更复杂的数据结构（如本书后续将介绍的内容），创建现有结构的副本可能就不那么容易或快速，你需要做额外的处理或结构化。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the concept of abstract data types, which you’ll
    see in the rest of the book when analyzing the pros and cons of competing data
    structures and algorithms. Defining an ADT is the first step when deciding what
    structure should be used and how algorithms should be implemented. Understanding
    the concept of ADTs will help you get the best possible performance for your code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们介绍了抽象数据类型（ADT）的概念，你将在本书的其余部分看到它，特别是在分析竞争的数据结构和算法的优缺点时。定义一个ADT是决定应该使用什么结构以及如何实现算法的第一步。理解ADT的概念将帮助你为代码获取最佳性能。
- en: 'In the next chapter, we’ll study a complementary concept: How can we compare
    concrete implementations of ADTs, or in other words, how can we tell whether one
    algorithm is actually better or worse than another? We’ll also introduce analysis
    of algorithms and concepts related to classes of performance.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将研究一个互补的概念：我们如何比较抽象数据类型（ADT）的具体实现，换句话说，我们如何判断一个算法是否比另一个算法更好或更差？我们还将介绍算法分析和与性能类别相关的概念。
- en: Questions
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: '**3.1  Chaining Calls**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.1  链式调用**'
- en: 'Modify the Bag methods so you can chain additions in the following fashion:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 修改背包方法，以便你可以像下面这样进行链式添加：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should also be able to chain removals and other operations, such as the
    following, that would remove two values and then test whether the bag becomes
    empty:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该能够将移除操作和其他操作进行链式调用，例如以下操作，它将移除两个值，并测试背包是否变为空：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**3.2  Arrays, Not Objects**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.2  数组，而不是对象**'
- en: Can you implement the bag ADT using arrays instead of objects? You could represent
    the bag with an ordered array to make the greatest() function implementation really
    speedy. Of course, add() should take care of maintaining the order of the array.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你能否使用数组而不是对象来实现背包ADT？你可以用有序数组表示背包，从而使 `greatest()` 函数的实现变得非常迅速。当然，`add()` 方法应该负责保持数组的顺序。
- en: '**3.3  Extra Operations**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.3  额外操作**'
- en: Only a few extra operations for a bag were described in this chapter, but for
    some applications, you might need added or changed operations; can you think of
    any?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本章只描述了背包的一些额外操作，但对于某些应用，你可能需要增加或更改操作；你能想到哪些吗？
- en: '**3.4  Wrong Operations**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.4  错误操作**'
- en: When defining an ADT, how could you specify error results, such as possibly
    throwing an exception or returning some kind of special value?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义一个ADT时，你如何指定错误结果，比如可能抛出异常或返回某种特殊值？
- en: '**3.5  Ready, Set ...**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.5  准备，集合……**'
- en: In this chapter, we discussed a bag, but in later chapters, we’ll work with
    sets, which don’t allow repeated values. Can you think ahead and whip up an appropriate
    ADT?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了背包，但在后面的章节中，我们将讨论集合，它不允许重复的值。你能提前思考并设计一个合适的ADT吗？
