- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">MULTIPLE
    BUTTONS WITH ONE ANALOG INPUT</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: Rather than using multiple digital inputs for multiple buttons, you can read
    many buttons with just one analog input pin. This not only reduces the number
    of input/output (I/O) pins used on your Arduino but can also save you money since
    you won’t need any external integrated circuits (ICs), such as shift registers
    or port expanders.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use voltage dividers and buttons to create different voltages, differentiating
    buttons connected to an analog-to-digital converter (ADC) pin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read three or six buttons with one analog input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a 12-button keypad that can be read with one analog input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Voltage Dividers</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The multiple-button method used in this chapter is based on your Arduino’s analog-to-digital
    converter (ADC) pins, which return a value relative to the voltage being connected
    to the ADC pin. Recall that your Arduino Uno or compatible board has six ADC pins,
    as shown in [Figure 1-1](chapter1.xhtml#fig1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE ARDUINO UNO’S ANALOG INPUT PINS](../images/fig1-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-1: Analog inputs on
    the Arduino Uno</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build circuits that allow for reading up to 12 buttons at once via a single
    ADC pin, you’ll need to use *voltage division*: the process of using two or more
    resistors to reduce a larger voltage to multiple smaller voltages, which the Arduino
    can read one at a time via an analog input pin. [Figure 1-2](chapter1.xhtml#fig1-2)
    shows how you’d use two resistors for this purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCHEMATIC OF A BASIC VOLTAGE DIVIDER](../images/fig1-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-2: The schematic for
    a basic voltage divider</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can calculate the output voltage (V[out]) with the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg2-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Substituting resistors of the same value and any voltage will result in an output
    voltage V[out] that is half the input voltage V[in]. For example, if both R1 and
    R2 are 1 kΩ and you have a 5 V input voltage, the calculation is V[out] = 5 (1,000
    / (1,000 + 1,000)), giving you a V[out] of 2.5 V.
  prefs: []
  type: TYPE_NORMAL
- en: Resistors don’t have an exact value; the more accurate the resistor, the more
    difficult it is to manufacture. You can choose between resistors of various tolerances,
    such as 5 percent or 1 percent. For example, a 1 kΩ, 1 percent resistor has a
    value between 990 and 1,010 Ω. When building voltage dividers or circuits in general,
    always try to use resistors with a 1 percent tolerance—they aren’t much more expensive
    than 5 percent resistors, and your results will be more accurate.
  prefs: []
  type: TYPE_NORMAL
- en: When building a voltage divider, ensure that your resistors can handle the power
    you plan to run through them. For example, if you’re using 0.25 W resistors and
    need to divide 24 V DC into 12 V, you can draw only 20 mA through the divider
    at most. Use the formula *W* = *V* × *A* (Watts = Volts (DC) × Amps (current))
    to help you calculate how much power is used.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the example voltage divider in [Figure 1-2](chapter1.xhtml#fig1-2)
    with two buttons results in the circuit shown in [Figure 1-3](chapter1.xhtml#fig1-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCHEMATIC FOR THE VOLTAGE DIVIDER CONTROLLED BY TWO BUTTONS](../images/fig1-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-3: A voltage divider
    with two buttons</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: When you press the first button, the voltage at point A should be 2.5 V DC,
    as the current flows from the 5 V source and is divided by the two resistors.
    When you press the second button, the voltage measured at point B should be 0
    V DC, as B is connected directly to GND. If you connect points A and B to an analog
    input, you should be able to detect which button has been pressed, as the values
    returned by the ADC will be different for each button (in theory, the values should
    be 512 for button 1 and 0 for button 2). You’re reading two buttons with only
    one input!
  prefs: []
  type: TYPE_NORMAL
- en: If you press two or more buttons at the same time, another voltage—determined
    by the combination of resistor dividers relative to the buttons pressed—should
    be returned to the ADC. The simplest way to determine the value is to build the
    circuit and test for yourself. With voltage division, you can use a series of
    buttons and resistors of the same value to generate different output voltages
    that your Arduino’s analog input can read, enabling you to differentiate between
    each button.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #1: Three Buttons with One
    Analog Input</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with a simple example of multiple button use: reading three buttons
    with one analog input. You’ll need the following parts for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10 kΩ, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three tactile buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 1-4](chapter1.xhtml#fig1-4) on the
    solderless breadboard and connect the points labeled 5V, GND, and A0 to the Arduino’s
    5V, GND, and A0 pins, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCHEMATIC FOR PROJECT #1](../images/fig1-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-4: The circuit for
    Project #1</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter and upload the code for Project #1 to your Arduino. Wait a moment;
    then open the Serial Monitor in the Arduino IDE and start pressing the buttons
    one at a time. When you aren’t pressing any buttons, the value returned by the
    ADC should hover around 1,010\. Experiment with pressing buttons 1, 2, and 3 to
    return different values, as shown in [Figure 1-5](chapter1.xhtml#fig1-5).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF A SERIAL MONITOR DISPLAYING THE EXAMPLE PROJECT #1 OUTPUT](../images/fig1-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-5: Example output
    from Project #1</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the code to see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The code in Project #1 takes the value measured by analog pin A0 ❶ and displays
    it on the Serial Monitor ❷. This is to demonstrate the different analog values
    generated by the three-button circuit. After you upload the code, open the Serial
    Monitor and start pressing buttons. The example returned a value between 700 and
    704 when button 1 was pressed, between 383 and 385 when button 2 was pressed,
    and 0 when button 3 was pressed. Your values may vary slightly because of the
    tolerance of the resistors.'
  prefs: []
  type: TYPE_NORMAL
- en: As you press buttons, the current flows through at least one resistor as your
    R1 and, depending on the button pressed, through none or some of the resistors,
    which act as voltage dividers.
  prefs: []
  type: TYPE_NORMAL
- en: Using the resistor divider formula, you can calculate that pressing button 1
    gives an R1 value of 1 kΩ and an R2 value of 2 kΩ (the sum of the resistors below
    the junction with the button). Using V[out] = 5 (2,000 / (1,000 + 2,000)), the
    theoretical voltage presented to the ADC is 3.33 V. If you press button 2, V[out]
    = 5 (1,000 / (1,000 + 2,000)) results in 1.66 V. If you press button 3, V[out]
    = 5 (0 / (3,000 + 0)) results in 0 V, as the ADC is simply connecting straight
    to GND.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you press no buttons, the value the ADC returns should hover above
    1,010\. The project enables this using the 10 kΩ pullup resistor in the circuit,
    which bridges the 5 V supply to the analog input. Without this resistor, the ADC
    would “float,” reporting random values that may fall into the ranges of the other
    buttons. This is important, as we need a constant value range to be returned when
    no buttons are pressed.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, the values returned by the ADC will vary a little. For example,
    the 5V pin on the Arduino (if powered via USB) measures slightly less, as some
    voltage is lost through the microcontroller, which affects the calculation in
    the ADC code. Always test your code with the Arduino powered by your intended
    power supply (USB or external DC power) to ensure accuracy with button-reading
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve experimented with three buttons, let’s try a more complex design.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #2: Six Buttons with One Analog
    Input</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This project reads six buttons from one analog pin, with an improved sketch
    for button status reporting. You’ll need the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Six 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 1 kΩ, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Six tactile buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 1-6](chapter1.xhtml#fig1-6) on the
    solderless breadboard and connect the points labeled 5V, GND, and A0 to the Arduino’s
    5V, GND, and A0 pins, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #2’S CIRCUIT](../images/fig1-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-6: The circuit for
    Project #2</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter and upload the following sketch to your Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To simplify using the button circuit, the custom <samp class="SANS_TheSansMonoCd_W5Regular_11">analogButton()</samp>
    function ❶ returns the number of the button being pressed, or 0 if nothing is
    pressed. The function takes the reading from analog pin A0 ❷ and compares it against
    the expected ranges returned for each button press ❸. The sketch returns the button
    number as the result of the <samp class="SANS_TheSansMonoCd_W5Regular_11">analogButton()</samp>
    function ❹. The custom function in the main loop checks for a button press ❺,
    while a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> function
    acts on different button presses ❻.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your required ranges from the analog input will vary; use the sketch from Project
    #1 to determine the exact ranges required for use in this project.'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #3: A 12-Button Keypad with
    One Analog Input</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This project expands the circuit in Project #2 to 12 buttons to create a larger
    final design that uses its own Arduino library. Using this library reduces the
    code required in the main sketch used to read the buttons. It’s possible to build
    this circuit on a solderless breadboard, but I recommend you download the PCB
    files for this project and make your own permanent version.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using the breadboard, you’ll need the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twelve 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10 kΩ, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twelve tactile buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re using the PCB, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twelve 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 1 kΩ, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twelve 6 × 6 × 4.3 mm tactile buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 × 3 inline 2.54 mm header pins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-female jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 1-7](chapter1.xhtml#fig1-7) shows the schematic for this project.'
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #3](../images/fig1-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-7: The schematic for
    Project #3</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re building the PCB circuit, the parts are labeled so you can easily
    position the components on the PCB, as shown in [Figure 1-8](chapter1.xhtml#fig1-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE TOP SIDE OF THE PCB FOR PROJECT #3](../images/fig1-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-8: The top of the
    PCB for Project #3</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Fit and solder the resistors and then the buttons. In general, when assembling
    circuits on PCBs, always start with the lowest-height parts first, and then work
    toward the largest or bulkiest items. The inline header pins are usually sold
    in strips of 40 pins, so you’ll need to trim off a 3-pin section to use with this
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Once assembled, your project should resemble the board shown in [Figure 1-9](chapter1.xhtml#fig1-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE COMPLETED TOP SIDE OF THE PROJECT #3 PCB](../images/fig1-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-9: The completed Project
    #3 PCB</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect your circuit to the Arduino via the 5V, GND, and A0 pins, as in
    [Figure 1-10](chapter1.xhtml#fig1-10).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF A KEYPAD CONNECTED TO THE ARDUINO UNO](../images/fig1-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-10: Keypad connected
    to the Arduino Uno</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, determine the analog values for each button to insert into the library’s
    source file by uploading the sketch from Project #1\. Open the Serial Monitor
    and press each button in turn, noting the value with the monitor. You can use
    these figures to make ranges for the library for this project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify using the keypad, install the following analogkeypad library, whose
    three files are listed next. (For a refresher on writing and installing your own
    Arduino library, see [Appendix A](appendix.xhtml).) The following code is the
    source file; use the sketch from Project #1 and the keypad for this project to
    determine your <samp class="SANS_TheSansMonoCd_W5Regular_11">ADCvalue</samp> ranges.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the header file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the *KEYWORDS.TXT* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With the library installed, upload the matching sketch for Project #3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This sketch has the same results as Project #2 but allows for additional buttons
    in the main loop. It first includes the analogkeypad library ❶ and starts an instance
    of the keypad; next it retrieves the button number pressed via the library function
    ❷. The sketch then sends the button number to the Serial Monitor in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> function ❸.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have uploaded the sketch, open the Serial Monitor and press the buttons
    in turn. This should result in output like that shown in [Figure 1-11](chapter1.xhtml#fig1-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT IN THE SERIAL MONITOR](../images/fig1-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-11: Example output
    from Project #3</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You can use this sketch in your own projects, simply interrogating the keypad
    when required as you use the library and <samp class="SANS_TheSansMonoCd_W5Regular_11">readKeypad()</samp>
    function.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In your own projects that incorporate the sketches from this chapter, you
    can use Arduino types other than the Uno, as long as they have an analog input.
    If your board runs on 3.3 V instead of 5 V, use the Project #1 sketch to determine
    the analog values to use for your circuit before updating the custom function
    in Project #2 or the library used in Project #3.*'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you learned to build a circuit that allows your Arduino to
    read the status of one of up to 12 buttons using only one analog input pin. In
    the next chapter, you’ll learn another way to improve project efficiency: simultaneously
    reading and writing digital I/O pins using port manipulation.'
  prefs: []
  type: TYPE_NORMAL
