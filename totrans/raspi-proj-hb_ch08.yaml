- en: '**8'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pong with a Sense HAT**
  prefs: []
  type: TYPE_NORMAL
- en: Here you’ll build your own LED Pong game using the Sense HAT. The Sense HAT
    is an add-on board for your Pi that gives it a lot more functionality through
    extra features like an LED matrix, joystick, and several sensors that get information
    from the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0111-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi (versions with 40 GPIOs)
  prefs: []
  type: TYPE_NORMAL
- en: Sense HAT
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll use the Sense HAT’s LED matrix to display the game and the joystick
    to play. If you don’t have the hardware, not to worry: you’ll also learn how to
    use the Sense HAT emulator to create the same game without it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING PONG**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the first video games ever created, Pong is an immensely popular 2D
    table-tennis (ping-pong) game that can be played in single- or double-player mode.
    You’re going to create the single-player version, so it’s more like playing squash:
    you bounce the ball against the walls with your bat and catch it with the bat
    when it comes back. If you miss the ball, you lose.'
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE RASPBERRY PI SENSE HAT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Raspberry Pi Sense HAT features an 8×8 RGB LED matrix, a five-button joystick,
    a gyroscope, an accelerometer, a magnetometer, a temperature sensor, a barometric
    sensor, and a humidity sensor in one package, shown in [Figure 8-1](ch08.xhtml#ch08fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0112-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-1:** Raspberry Pi Sense HAT'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mounting the Board**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Sense HAT is not compatible with Raspberry Pi 1 Model A and B, but you
    can build the project using the emulator if you have an incompatible board.*'
  prefs: []
  type: TYPE_NORMAL
- en: This project doesn’t require much hardware assembly—you just need to mount the
    Sense HAT on the Pi, and the rest is done in code.
  prefs: []
  type: TYPE_NORMAL
- en: Attach the 40 GPIOs on the Sense HAT to the 40 GPIOs on your Raspberry Pi; the
    boards should line up perfectly. When you first successfully mount the Sense HAT
    on a powered Pi, the LED matrix displays an illuminated rainbow background as
    shown in [Figure 8-2](ch08.xhtml#ch08fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0113-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-2:** Sense HAT welcome rainbow'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Sense HAT Emulator**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you don’t have a Sense HAT or a compatible board, or if you just want to
    test the script first, you can use the Sense HAT emulator to build the Pong game
    on your computer. The emulator is a virtual Sense HAT that you can interact with
    to test your scripts. To launch it from the Desktop main menu, go to **Programming**
    ▸ **Sense HAT Emulator**. This opens the emulator window, shown in [Figure 8-3](ch08.xhtml#ch08fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0113-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-3:** Sense HAT Emulator window'
  prefs: []
  type: TYPE_NORMAL
- en: The Sense HAT emulator comes with examples stored in **File** ▸ **Examples**;
    just select the example you want and then run the file to see the code in action
    in the emulator window.
  prefs: []
  type: TYPE_NORMAL
- en: '**WORKING WITH SENSE HAT FUNCTIONS AND CONTROLS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you go right into building the game, it’s important to understand how
    to control the LED matrix and read inputs from the joystick. Let’s look at some
    examples that you’ll use later in the Pong script.
  prefs: []
  type: TYPE_NORMAL
- en: '**Controlling the LED Matrix**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Sense HAT LED matrix has 8 columns and 8 rows, containing a total of 64
    RGB LEDs. You can display text and create images on the matrix by controlling
    each LED individually. You can also set the color of each LED.
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying Text**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The code in [Listing 8-1](ch08.xhtml#ch08list1) displays the scrolling text
    “Hello World!” in blue on the dot matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 8-1:** Display text on the Sense HAT LED matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First import the `SenseHat` class ➊. If you’re using the emulator, delete or
    comment out this line and uncomment the code at ➋.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `show_message()` function ➌ accepts the message to display—a text string—as
    the first parameter, and then takes several options as further parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The sense_hat library uses the British spelling “colour,” so you must use
    “colour” throughout your code.*'
  prefs: []
  type: TYPE_NORMAL
- en: Use `text_colour = [*r*, *g*, *b*]` to set the RGB color of the text, replacing
    `*r*, *g*, *b*` with integers between `0` and `255` (as you did in [Project 5](ch05.xhtml#ch05)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `scroll_speed = *x*`, where x is a float, to control the speed at which
    text moves across the display. The default scrolling speed is set to pause for
    0.1 seconds each time the text shifts one pixel to the left.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `back_colour = [*r*, *g*, *b*]` to set the background color, replacing `*r*,
    *g*, *b*` with integer values as with `text_colour`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controlling Specific LEDs**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To control individual LEDs, you refer to each LED you want to light by its position
    in the matrix. For that, the Sense HAT uses an (x, y) coordinate system. For example,
    the LEDs in [Figure 8-4](ch08.xhtml#ch08fig4) have the coordinates listed next
    to the diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0115-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-4:** Sense HAT coordinate system'
  prefs: []
  type: TYPE_NORMAL
- en: To light up the LEDs in [Figure 8-4](ch08.xhtml#ch08fig4) with their corresponding
    colors, you’d use the code in [Listing 8-2](ch08.xhtml#ch08list2).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 8-2:** Using `set_pixel()` to light particular LEDs'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The function `sense.set_pixel(*x*, *y*, *r*, *g*, *b*)` lights up a specific
    LED, in which x is the x-coordinate; y is the y-coordinate; and r, g, and b set
    the color.
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying a Picture**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Rather than controlling individual LEDs, you can use the function `sense.set_pixels()`
    to more quickly display an image. Instead of entering coordinates, you insert
    a list for all 64 LEDs that determines the color of each LED. Take a look at the
    code in [Listing 8-3](ch08.xhtml#ch08list3), which displays a sad face.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 8-3:** Displaying an image with `set_pixels()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The red Xs in the `sad_face` array won’t appear red in your code. We’re just
    highlighting them so it’s easier to visualize how the LEDs will look.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You create a variable to store the color of the lit LEDs (`X`), and a variable
    to store the color of the background (`N`)—you can set the background to any color
    or set it to `0` to keep it unlit. Then you need to create an array that sets
    each of the 64 LEDs either to `X` or to `N`. [Figure 8-5](ch08.xhtml#ch08fig5)
    shows the end result of the code in [Listing 8-3](ch08.xhtml#ch08list3):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0116-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-5:** Displaying a sad face on the LED matrix'
  prefs: []
  type: TYPE_NORMAL
- en: You can include as many colors as you want in your drawing; you just need to
    change the color parameters. We encourage you to practice working with the LED
    matrix by changing the colors and drawing your own images.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to control the LED matrix, let’s look at how to program
    the joystick.
  prefs: []
  type: TYPE_NORMAL
- en: '**Reading Data from the Joystick**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The joystick that comes with the Sense HAT has five control options:'
  prefs: []
  type: TYPE_NORMAL
- en: Move up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You need to tell your program what each control option should make the Pi do.
    The script in [Listing 8-4](ch08.xhtml#ch08list4) sets the events associated with
    each joystick control, and displays a message on the computer screen saying which
    control was used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 8-4:** Associating events with each joystick control'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First, you need to tell your Pi what action to take when each joystick control
    is triggered. You do that by defining a series of functions to perform actions.
    For example, when the joystick is moved up, you call the function `move_up()`
    ➊ to print the message `joystick was moved up`. The `event` argument tells the
    Pi that the joystick will be sending information to those functions. Then you
    use `sense.stick.direction_up = move_up` ➋ to associate the `move_up` function
    with the up movement of the joystick.
  prefs: []
  type: TYPE_NORMAL
- en: The other movement functions work in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know how to display text and drawings on the LED matrix and how
    to make something happen when the joystick is used, you’re ready to start writing
    the script for your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the game aims to do:'
  prefs: []
  type: TYPE_NORMAL
- en: A bat that is 3 pixels long and 1 pixel wide should appear in column 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time you move the joystick up or down, the bat should move correspondingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ball should start in a random position and move diagonally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the ball hits something—walls, ceiling, or the bat—it should move diagonally
    in the opposite direction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the ball hits column 0, it means you missed the ball, so you lose and the
    game is over.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Then copy the code in [Listing 8-5](ch08.xhtml#ch08list5) to the new file and
    save the script as *pong_game.py* inside the *Displays* folder (remember that
    you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 8-5:** The Pong game code'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There’s a lot going on in this code. Let’s walk through it step by step.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing Necessary Libraries**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At ➊, you import the `randint()` function from the rand library to generate
    pseudorandom integers and the `sleep()` function from the time library to set
    delay times.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋, you create an object called `sense` that will be used to refer to the
    Sense HAT throughout the code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Bat**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The bat is a 3-pixel bar that moves up and down the leftmost column. At ➌, you
    define the bat’s starting position at 4 pixels down from the top with `y = 4`.
    The complete bat is drawn in green within the `draw_bat()` function ➏, which adds
    one more pixel to the top of the starting position (`y - 1`) and to the bottom
    (`y + 1`) to make the bat 3 pixels long.
  prefs: []
  type: TYPE_NORMAL
- en: '**Moving the Bat**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The bat moves just on the y-axis, so its x-coordinate is always `0`, but its
    y-coordinate needs to change as the player moves the bat. In other words, the
    player can only move the bat up and down. The `move_up()` and `move_down()` functions,
    defined at ➐, control those movements. At ➒, you tell the Pi what action to take
    when the player moves the joystick up or down by calling `move_up()` and `move_down()`,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a closer look at the `move_up()` function (the `move_down()` function
    works in a similar way):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `move_up()` function accepts `event` as a parameter. Basically, the `event`
    parameter allows you to pass some information about the joystick to the function—such
    as the time the stick was used; the direction it was pushed; and if it was pressed,
    released, or held—so the Pi knows how to react.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Writing* `y -= 1` *in Python is equal to* `y = y - 1`.'
  prefs: []
  type: TYPE_NORMAL
- en: When the player moves the joystick up, the function moves the y-coordinate of
    the bat up by subtracting `1` from the variable `y`. But first, the code checks
    that `y > 1`; otherwise, the bat may end up moving out of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**Declaring Variable Scope**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Note that `y` is defined as a `global` variable. Not all variables in a program
    are accessible at all locations in the program, so there might be areas where
    it is invalid to call a certain variable. A variable’s *scope* is the area of
    a program where it is accessible. In Python, there are two basic variable scopes:
    *local* and *global*.'
  prefs: []
  type: TYPE_NORMAL
- en: A variable defined in the main code body is global, meaning it is accessible
    anywhere else in the code. A variable defined inside a function is local to that
    function, so what you do with the local variable inside the function has no effect
    on variables outside, even if they have the same name.
  prefs: []
  type: TYPE_NORMAL
- en: As you want `y` to be usable both inside the function where it is defined and
    throughout the code, it needs to be declared as `global`. Otherwise, when you
    move the joystick nothing will happen, because the `y` variable is just being
    changed inside the function and not in the main body of the code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Ball**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To make a moving ball, you first need a starting position and a velocity. At
    ➍, you set the ball’s starting position using a list. Lists are defined between
    square brackets, `[*0th element*, *1st element*, ..., *nth element*]`, and each
    element is separated by a comma. The elements in the lists have *zero indexing*,
    meaning the index for the first element is 0, not 1\. In this case, our 0th element
    is the x-position, and the 1st element is the y-position.
  prefs: []
  type: TYPE_NORMAL
- en: When you start the game, the ball is in a random position, generated by the
    `randint()` function. That random position can be between 1 and 6 for the y-axis
    and 2 and 6 for the x-axis. These numbers ensure that the ball doesn’t start on
    the ceiling, walls, or next to the bat.
  prefs: []
  type: TYPE_NORMAL
- en: '**Moving the Ball**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Once you have a starting position for the ball, you need to give it a velocity
    ➎ to get it moving. You create a list for the ball’s velocity in which the 0th
    element is the velocity for the x-coordinate and the 1st element is the velocity
    for the y-coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: You need to add or subtract the velocity to or from the current ball position
    to make the ball move forward or backward, respectively. The `draw_ball()` function
    at ➑ is where you display and move the ball, which always moves in diagonals.
    If it goes forward it continues forward, and if it goes backward it continues
    backward, unless it hits the ceiling or the bat, in which case it goes in the
    opposite direction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Keeping the Game Running**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Once everything is set up, you add a `while` loop to keep the game running ➓.
    The `while` loop starts by cleaning the display; then, it calls the function `draw_bat()`
    to draw the bat and `draw_ball()` to display the ball.
  prefs: []
  type: TYPE_NORMAL
- en: The `sleep()` function in the last line defines the time the ball takes to move
    to another position, so you can use this function to determine how fast the ball
    moves. If you increase the delay time, the game becomes slower and easier; if
    you decrease it, the game moves faster. We encourage you to experiment with different
    delay times.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Congratulations! After a lot of programming, you have your reward: you can
    play Pong on your Sense HAT! Press **F5** or go to **Run** ▸ **Run Module** to
    run the script.'
  prefs: []
  type: TYPE_NORMAL
- en: When you lose and the game ends, the LED matrix displays a sad face as shown
    in [Figure 8-6](ch08.xhtml#ch08fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0123-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-6:** LED matrix displaying a sad face when the game ends'
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are some ideas to upgrade your game:'
  prefs: []
  type: TYPE_NORMAL
- en: Decrease the delay time as the game continues to increase the level of difficulty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a scoring system so that you earn a point every time the ball hits the bat,
    and display the score on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert a condition that restarts the game when you press the joystick.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
