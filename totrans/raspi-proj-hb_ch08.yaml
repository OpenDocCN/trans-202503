- en: '**8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8'
- en: Pong with a Sense HAT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 Sense HAT 的 Pong 游戏**
- en: Here you’ll build your own LED Pong game using the Sense HAT. The Sense HAT
    is an add-on board for your Pi that gives it a lot more functionality through
    extra features like an LED matrix, joystick, and several sensors that get information
    from the outside world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将使用 Sense HAT 构建你自己的 LED Pong 游戏。Sense HAT 是一个附加板，可以为你的树莓派提供更多的功能，带有像 LED
    矩阵、摇杆和多个传感器等额外特性，能够获取外部世界的信息。
- en: '![image](../images/f0111-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0111-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需配件**'
- en: Raspberry Pi (versions with 40 GPIOs)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派（带40个GPIO的版本）
- en: Sense HAT
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT
- en: 'You’ll use the Sense HAT’s LED matrix to display the game and the joystick
    to play. If you don’t have the hardware, not to worry: you’ll also learn how to
    use the Sense HAT emulator to create the same game without it.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 Sense HAT 的 LED 矩阵来显示游戏，使用摇杆来进行游戏。如果你没有硬件设备，不用担心：你还将学习如何使用 Sense HAT 模拟器来创建相同的游戏而无需硬件。
- en: '**INTRODUCING PONG**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 Pong 游戏**'
- en: 'One of the first video games ever created, Pong is an immensely popular 2D
    table-tennis (ping-pong) game that can be played in single- or double-player mode.
    You’re going to create the single-player version, so it’s more like playing squash:
    you bounce the ball against the walls with your bat and catch it with the bat
    when it comes back. If you miss the ball, you lose.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Pong 是历史上最早的电子游戏之一，它是一款极受欢迎的 2D 乒乓球游戏，可以进行单人或双人模式游戏。你将创建单人版，因此更像是玩壁球：你用球拍将球反弹到墙上，当球回来时用球拍接住它。如果你错过了球，你就输了。
- en: '**INTRODUCING THE RASPBERRY PI SENSE HAT**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍树莓派 Sense HAT**'
- en: The Raspberry Pi Sense HAT features an 8×8 RGB LED matrix, a five-button joystick,
    a gyroscope, an accelerometer, a magnetometer, a temperature sensor, a barometric
    sensor, and a humidity sensor in one package, shown in [Figure 8-1](ch08.xhtml#ch08fig1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派 Sense HAT 配备了一个 8×8 RGB LED 矩阵、一个五按钮摇杆、一个陀螺仪、一个加速度计、一个磁力计、一个温度传感器、一个气压传感器和一个湿度传感器，所有这些功能集成在一个板子上，如[图8-1](ch08.xhtml#ch08fig1)所示。
- en: '![image](../images/f0112-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0112-01.jpg)'
- en: '**FIGURE 8-1:** Raspberry Pi Sense HAT'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-1：** 树莓派 Sense HAT'
- en: '**Mounting the Board**'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装板子**'
- en: '**NOTE**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The Sense HAT is not compatible with Raspberry Pi 1 Model A and B, but you
    can build the project using the emulator if you have an incompatible board.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Sense HAT 不兼容树莓派 1 Model A 和 B，但如果你使用不兼容的板子，可以通过模拟器来构建这个项目。*'
- en: This project doesn’t require much hardware assembly—you just need to mount the
    Sense HAT on the Pi, and the rest is done in code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目不需要太多硬件组装——你只需将 Sense HAT 安装到树莓派上，其余的工作都在代码中完成。
- en: Attach the 40 GPIOs on the Sense HAT to the 40 GPIOs on your Raspberry Pi; the
    boards should line up perfectly. When you first successfully mount the Sense HAT
    on a powered Pi, the LED matrix displays an illuminated rainbow background as
    shown in [Figure 8-2](ch08.xhtml#ch08fig2).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Sense HAT 上的40个GPIO连接到树莓派上的40个GPIO接口；两个板子应当完美对齐。当你第一次成功将 Sense HAT 安装到通电的树莓派上时，LED
    矩阵将显示一个彩虹背景，如[图8-2](ch08.xhtml#ch08fig2)所示。
- en: '![image](../images/f0113-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0113-01.jpg)'
- en: '**FIGURE 8-2:** Sense HAT welcome rainbow'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-2：** Sense HAT 欢迎彩虹'
- en: '**Using the Sense HAT Emulator**'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用 Sense HAT 模拟器**'
- en: If you don’t have a Sense HAT or a compatible board, or if you just want to
    test the script first, you can use the Sense HAT emulator to build the Pong game
    on your computer. The emulator is a virtual Sense HAT that you can interact with
    to test your scripts. To launch it from the Desktop main menu, go to **Programming**
    ▸ **Sense HAT Emulator**. This opens the emulator window, shown in [Figure 8-3](ch08.xhtml#ch08fig3).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 Sense HAT 或兼容的板子，或者你只是想先测试脚本，可以使用 Sense HAT 模拟器在计算机上构建 Pong 游戏。模拟器是一个虚拟的
    Sense HAT，你可以与其互动来测试你的脚本。从桌面主菜单启动模拟器，进入 **编程** ▸ **Sense HAT 模拟器**。这将打开模拟器窗口，如[图8-3](ch08.xhtml#ch08fig3)所示。
- en: '![image](../images/f0113-02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0113-02.jpg)'
- en: '**FIGURE 8-3:** Sense HAT Emulator window'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-3：** Sense HAT 模拟器窗口'
- en: The Sense HAT emulator comes with examples stored in **File** ▸ **Examples**;
    just select the example you want and then run the file to see the code in action
    in the emulator window.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT 模拟器附带了存储在 **文件** ▸ **示例** 中的示例；只需选择你想要的示例，然后运行文件即可在模拟器窗口中查看代码的执行效果。
- en: '**WORKING WITH SENSE HAT FUNCTIONS AND CONTROLS**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 Sense HAT 功能和控制**'
- en: Before you go right into building the game, it’s important to understand how
    to control the LED matrix and read inputs from the joystick. Let’s look at some
    examples that you’ll use later in the Pong script.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建游戏之前，了解如何控制 LED 矩阵以及如何从摇杆读取输入是非常重要的。让我们先看看一些你将在 Pong 脚本中使用的例子。
- en: '**Controlling the LED Matrix**'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**控制 LED 矩阵**'
- en: The Sense HAT LED matrix has 8 columns and 8 rows, containing a total of 64
    RGB LEDs. You can display text and create images on the matrix by controlling
    each LED individually. You can also set the color of each LED.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT LED 矩阵有 8 列和 8 行，总共包含 64 个 RGB LED。你可以通过单独控制每个 LED 来在矩阵上显示文本和创建图像。你还可以设置每个
    LED 的颜色。
- en: '**Displaying Text**'
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示文本**'
- en: The code in [Listing 8-1](ch08.xhtml#ch08list1) displays the scrolling text
    “Hello World!” in blue on the dot matrix.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 8-1](ch08.xhtml#ch08list1) 中的代码将在点阵屏上以蓝色显示滚动文本“Hello World!”。'
- en: '**LISTING 8-1:** Display text on the Sense HAT LED matrix'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 8-1：** 在 Sense HAT LED 矩阵上显示文本'
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First import the `SenseHat` class ➊. If you’re using the emulator, delete or
    comment out this line and uncomment the code at ➋.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先导入 `SenseHat` 类 ➊。如果你使用的是模拟器，请删除或注释掉这一行，并取消注释 ➋ 处的代码。
- en: 'The `show_message()` function ➌ accepts the message to display—a text string—as
    the first parameter, and then takes several options as further parameters:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_message()` 函数 ➌ 接受要显示的消息—文本字符串—作为第一个参数，然后接受几个选项作为后续参数：'
- en: '**NOTE**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The sense_hat library uses the British spelling “colour,” so you must use
    “colour” throughout your code.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*sense_hat 库使用的是英国拼写的“colour”，因此你必须在代码中始终使用“colour”。*'
- en: Use `text_colour = [*r*, *g*, *b*]` to set the RGB color of the text, replacing
    `*r*, *g*, *b*` with integers between `0` and `255` (as you did in [Project 5](ch05.xhtml#ch05)).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `text_colour = [*r*, *g*, *b*]` 来设置文本的 RGB 颜色，将 `*r*, *g*, *b*` 替换为介于 `0`
    和 `255` 之间的整数（如你在 [Project 5](ch05.xhtml#ch05) 中所做的那样）。
- en: Use `scroll_speed = *x*`, where x is a float, to control the speed at which
    text moves across the display. The default scrolling speed is set to pause for
    0.1 seconds each time the text shifts one pixel to the left.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `scroll_speed = *x*`，其中 x 是一个浮动数值，用来控制文本在显示器上移动的速度。默认的滚动速度设置为每次文本向左移动一个像素时暂停
    0.1 秒。
- en: Use `back_colour = [*r*, *g*, *b*]` to set the background color, replacing `*r*,
    *g*, *b*` with integer values as with `text_colour`.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `back_colour = [*r*, *g*, *b*]` 来设置背景颜色，替换 `*r*, *g*, *b*` 为整数值，方法与 `text_colour`
    相同。
- en: '**Controlling Specific LEDs**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**控制特定的 LED**'
- en: To control individual LEDs, you refer to each LED you want to light by its position
    in the matrix. For that, the Sense HAT uses an (x, y) coordinate system. For example,
    the LEDs in [Figure 8-4](ch08.xhtml#ch08fig4) have the coordinates listed next
    to the diagram.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制单个 LED，你需要通过其在矩阵中的位置来引用你想要点亮的每个 LED。为此，Sense HAT 使用 (x, y) 坐标系统。例如， [Figure
    8-4](ch08.xhtml#ch08fig4) 中的 LED 坐标就列在图旁边。
- en: '![image](../images/f0115-01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0115-01.jpg)'
- en: '**FIGURE 8-4:** Sense HAT coordinate system'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 8-4：** Sense HAT 坐标系统'
- en: To light up the LEDs in [Figure 8-4](ch08.xhtml#ch08fig4) with their corresponding
    colors, you’d use the code in [Listing 8-2](ch08.xhtml#ch08list2).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用相应的颜色点亮 [Figure 8-4](ch08.xhtml#ch08fig4) 中的 LED，你可以使用 [Listing 8-2](ch08.xhtml#ch08list2)
    中的代码。
- en: '**LISTING 8-2:** Using `set_pixel()` to light particular LEDs'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 8-2：** 使用 `set_pixel()` 点亮特定的 LED'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The function `sense.set_pixel(*x*, *y*, *r*, *g*, *b*)` lights up a specific
    LED, in which x is the x-coordinate; y is the y-coordinate; and r, g, and b set
    the color.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `sense.set_pixel(*x*, *y*, *r*, *g*, *b*)` 点亮特定的 LED，其中 x 是 x 坐标，y 是 y 坐标，r、g
    和 b 设置颜色。
- en: '**Displaying a Picture**'
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示图片**'
- en: Rather than controlling individual LEDs, you can use the function `sense.set_pixels()`
    to more quickly display an image. Instead of entering coordinates, you insert
    a list for all 64 LEDs that determines the color of each LED. Take a look at the
    code in [Listing 8-3](ch08.xhtml#ch08list3), which displays a sad face.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与其控制单个 LED，你可以使用 `sense.set_pixels()` 函数更快地显示图像。你无需输入坐标，而是插入一个包含所有 64 个 LED
    的列表来确定每个 LED 的颜色。请查看 [Listing 8-3](ch08.xhtml#ch08list3) 中的代码，它显示了一个悲伤的表情。
- en: '**LISTING 8-3:** Displaying an image with `set_pixels()`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 8-3：** 使用 `set_pixels()` 显示图像'
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**NOTE**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The red Xs in the `sad_face` array won’t appear red in your code. We’re just
    highlighting them so it’s easier to visualize how the LEDs will look.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 `sad_face` 数组中的红色 X 不会在代码中显示为红色。我们只是高亮它们，以便更容易地可视化 LED 的显示效果。*'
- en: 'You create a variable to store the color of the lit LEDs (`X`), and a variable
    to store the color of the background (`N`)—you can set the background to any color
    or set it to `0` to keep it unlit. Then you need to create an array that sets
    each of the 64 LEDs either to `X` or to `N`. [Figure 8-5](ch08.xhtml#ch08fig5)
    shows the end result of the code in [Listing 8-3](ch08.xhtml#ch08list3):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建一个变量来存储点亮 LED 的颜色（`X`），以及一个变量来存储背景的颜色（`N`）——你可以将背景设置为任何颜色，或者将其设置为 `0` 使其不亮。然后，你需要创建一个数组，将每个
    64 个 LED 设置为 `X` 或 `N`。[图 8-5](ch08.xhtml#ch08fig5) 显示了 [清单 8-3](ch08.xhtml#ch08list3)
    中代码的最终结果：
- en: '![image](../images/f0116-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0116-01.jpg)'
- en: '**FIGURE 8-5:** Displaying a sad face on the LED matrix'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-5：** 在 LED 矩阵上显示一个难过的表情'
- en: You can include as many colors as you want in your drawing; you just need to
    change the color parameters. We encourage you to practice working with the LED
    matrix by changing the colors and drawing your own images.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在绘图中包含任意多的颜色；你只需要更改颜色参数。我们鼓励你通过更改颜色和绘制自己的图像来练习使用 LED 矩阵。
- en: Now that you know how to control the LED matrix, let’s look at how to program
    the joystick.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何控制 LED 矩阵了，让我们看看如何编程摇杆。
- en: '**Reading Data from the Joystick**'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从摇杆读取数据**'
- en: 'The joystick that comes with the Sense HAT has five control options:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 随 Sense HAT 一起提供的摇杆有五个控制选项：
- en: Move up
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向上移动
- en: Move down
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向下移动
- en: Move right
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向右移动
- en: Move left
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向左移动
- en: Press
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下
- en: 'You need to tell your program what each control option should make the Pi do.
    The script in [Listing 8-4](ch08.xhtml#ch08list4) sets the events associated with
    each joystick control, and displays a message on the computer screen saying which
    control was used:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要告诉你的程序每个控制选项应该让树莓派执行什么操作。[清单 8-4](ch08.xhtml#ch08list4) 中的脚本设置了与每个摇杆控制相关的事件，并在计算机屏幕上显示使用了哪个控制：
- en: '**LISTING 8-4:** Associating events with each joystick control'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 8-4：** 将事件与每个摇杆控制关联'
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, you need to tell your Pi what action to take when each joystick control
    is triggered. You do that by defining a series of functions to perform actions.
    For example, when the joystick is moved up, you call the function `move_up()`
    ➊ to print the message `joystick was moved up`. The `event` argument tells the
    Pi that the joystick will be sending information to those functions. Then you
    use `sense.stick.direction_up = move_up` ➋ to associate the `move_up` function
    with the up movement of the joystick.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要告诉你的树莓派在每次摇杆控制被触发时应该执行什么操作。你通过定义一系列函数来执行这些操作。例如，当摇杆向上移动时，你调用 `move_up()`
    ➊ 函数来打印消息 `摇杆向上移动`。`event` 参数告诉树莓派摇杆将向这些函数发送信息。然后，你使用 `sense.stick.direction_up
    = move_up` ➋ 将 `move_up` 函数与摇杆的向上移动关联起来。
- en: The other movement functions work in the same way.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其他的移动函数也是以相同的方式工作。
- en: '**WRITING THE SCRIPT**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: Now that you know how to display text and drawings on the LED matrix and how
    to make something happen when the joystick is used, you’re ready to start writing
    the script for your game.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何在 LED 矩阵上显示文本和图形，以及如何在使用摇杆时让某些事情发生，你已经准备好开始为你的游戏编写脚本了。
- en: 'Here’s what the game aims to do:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的目标是：
- en: A bat that is 3 pixels long and 1 pixel wide should appear in column 0.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只长度为 3 像素、宽度为 1 像素的拍子应该出现在第 0 列。
- en: Each time you move the joystick up or down, the bat should move correspondingly.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次你向上或向下移动摇杆时，拍子应该相应地移动。
- en: The ball should start in a random position and move diagonally.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 球应该从一个随机位置开始，并以对角线方向移动。
- en: When the ball hits something—walls, ceiling, or the bat—it should move diagonally
    in the opposite direction.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当球击中物体——墙壁、天花板或拍子——时，它应该沿相反的对角线方向移动。
- en: If the ball hits column 0, it means you missed the ball, so you lose and the
    game is over.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果球击中第 0 列，意味着你错过了球，游戏就结束了，你输了。
- en: '**Entering the Script**'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Then copy the code in [Listing 8-5](ch08.xhtml#ch08list5) to the new file and
    save the script as *pong_game.py* inside the *Displays* folder (remember that
    you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 **Python 3 (IDLE)** 并进入 **文件** ▸ **新建文件** 来创建一个新的脚本。然后将 [清单 8-5](ch08.xhtml#ch08list5)
    中的代码复制到新文件，并将脚本保存为 *pong_game.py* 到 *Displays* 文件夹中（记得你可以在 *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    下载所有脚本）。
- en: '**LISTING 8-5:** The Pong game code'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 8-5：** Pong 游戏代码'
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There’s a lot going on in this code. Let’s walk through it step by step.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码涉及的内容很多。让我们一步一步地来看。
- en: '**Importing Necessary Libraries**'
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导入必要的库**'
- en: At ➊, you import the `randint()` function from the rand library to generate
    pseudorandom integers and the `sleep()` function from the time library to set
    delay times.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你从rand库中导入了`randint()`函数来生成伪随机整数，并从time库中导入了`sleep()`函数来设置延迟时间。
- en: At ➋, you create an object called `sense` that will be used to refer to the
    Sense HAT throughout the code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你创建了一个名为`sense`的对象，之后在整个代码中都可以通过它来引用Sense HAT。
- en: '**Creating the Bat**'
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建蝙蝠**'
- en: The bat is a 3-pixel bar that moves up and down the leftmost column. At ➌, you
    define the bat’s starting position at 4 pixels down from the top with `y = 4`.
    The complete bat is drawn in green within the `draw_bat()` function ➏, which adds
    one more pixel to the top of the starting position (`y - 1`) and to the bottom
    (`y + 1`) to make the bat 3 pixels long.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 蝙蝠是一个3像素长的条形，沿着最左边的列上下移动。在➌处，你通过`y = 4`定义了蝙蝠的起始位置，距离顶部4个像素。完整的蝙蝠在`draw_bat()`函数中绘制，位置为起始位置顶部再加一个像素（`y
    - 1`），底部再加一个像素（`y + 1`），使蝙蝠的长度为3个像素。
- en: '**Moving the Bat**'
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**移动蝙蝠**'
- en: The bat moves just on the y-axis, so its x-coordinate is always `0`, but its
    y-coordinate needs to change as the player moves the bat. In other words, the
    player can only move the bat up and down. The `move_up()` and `move_down()` functions,
    defined at ➐, control those movements. At ➒, you tell the Pi what action to take
    when the player moves the joystick up or down by calling `move_up()` and `move_down()`,
    respectively.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 蝙蝠只在y轴上移动，因此它的x坐标始终是`0`，但是它的y坐标需要根据玩家移动蝙蝠而变化。换句话说，玩家只能上下移动蝙蝠。`move_up()`和`move_down()`这两个函数在➐处定义，控制这些移动。在➒处，您通过分别调用`move_up()`和`move_down()`来告诉树莓派，当玩家上下移动摇杆时应该执行什么操作。
- en: 'Take a closer look at the `move_up()` function (the `move_down()` function
    works in a similar way):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 详细查看`move_up()`函数（`move_down()`函数以类似的方式工作）：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `move_up()` function accepts `event` as a parameter. Basically, the `event`
    parameter allows you to pass some information about the joystick to the function—such
    as the time the stick was used; the direction it was pushed; and if it was pressed,
    released, or held—so the Pi knows how to react.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`move_up()`函数接受`event`作为参数。基本上，`event`参数允许你传递一些关于摇杆的信息给函数——例如，摇杆使用的时间；推动的方向；以及是按下、释放还是按住——这样树莓派就知道该如何反应。'
- en: '**HINT**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*Writing* `y -= 1` *in Python is equal to* `y = y - 1`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*在Python中*，`y -= 1` *等同于* `y = y - 1`。'
- en: When the player moves the joystick up, the function moves the y-coordinate of
    the bat up by subtracting `1` from the variable `y`. But first, the code checks
    that `y > 1`; otherwise, the bat may end up moving out of the matrix.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家将摇杆向上移动时，函数通过从变量`y`中减去`1`来使蝙蝠的y坐标上升。但是在此之前，代码会检查`y > 1`，否则蝙蝠可能会移动到矩阵外面。
- en: '**Declaring Variable Scope**'
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**声明变量作用域**'
- en: 'Note that `y` is defined as a `global` variable. Not all variables in a program
    are accessible at all locations in the program, so there might be areas where
    it is invalid to call a certain variable. A variable’s *scope* is the area of
    a program where it is accessible. In Python, there are two basic variable scopes:
    *local* and *global*.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`y`被定义为`global`变量。并不是程序中的所有变量都能在程序的任何位置访问，因此可能存在某些地方无法调用特定的变量。变量的*作用域*是指程序中可以访问它的区域。在Python中，有两种基本的变量作用域：*局部*和*全局*。
- en: A variable defined in the main code body is global, meaning it is accessible
    anywhere else in the code. A variable defined inside a function is local to that
    function, so what you do with the local variable inside the function has no effect
    on variables outside, even if they have the same name.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在主代码体中定义的变量是全局的，意味着它可以在代码的任何其他地方访问。定义在函数内部的变量是局部变量，因此你在函数内部对局部变量的操作不会影响外部的变量，即使它们有相同的名字。
- en: As you want `y` to be usable both inside the function where it is defined and
    throughout the code, it needs to be declared as `global`. Otherwise, when you
    move the joystick nothing will happen, because the `y` variable is just being
    changed inside the function and not in the main body of the code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你希望`y`在函数内部以及整个代码中都能使用，因此它需要声明为`global`。否则，当你移动摇杆时，什么也不会发生，因为`y`变量只是被修改了函数内部的值，而不是在主代码体内。
- en: '**Creating the Ball**'
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建球**'
- en: To make a moving ball, you first need a starting position and a velocity. At
    ➍, you set the ball’s starting position using a list. Lists are defined between
    square brackets, `[*0th element*, *1st element*, ..., *nth element*]`, and each
    element is separated by a comma. The elements in the lists have *zero indexing*,
    meaning the index for the first element is 0, not 1\. In this case, our 0th element
    is the x-position, and the 1st element is the y-position.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让球动起来，首先你需要设置一个起始位置和速度。在 ➍ 处，你使用一个列表来设置球的起始位置。列表定义在方括号之间，`[*第0个元素*, *第1个元素*,
    ..., *第n个元素*]`，每个元素之间用逗号分隔。列表中的元素是*零索引*，也就是说，第一个元素的索引是0，而不是1。在这个例子中，我们的第0个元素是x位置，第1个元素是y位置。
- en: When you start the game, the ball is in a random position, generated by the
    `randint()` function. That random position can be between 1 and 6 for the y-axis
    and 2 and 6 for the x-axis. These numbers ensure that the ball doesn’t start on
    the ceiling, walls, or next to the bat.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动游戏时，球会出现在一个随机位置，这个位置是由`randint()`函数生成的。这个随机位置在y轴上可以是1到6之间的数，在x轴上可以是2到6之间的数。这些数值确保球不会从天花板、墙壁或棒球旁边开始。
- en: '**Moving the Ball**'
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**移动球**'
- en: Once you have a starting position for the ball, you need to give it a velocity
    ➎ to get it moving. You create a list for the ball’s velocity in which the 0th
    element is the velocity for the x-coordinate and the 1st element is the velocity
    for the y-coordinate.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了球的起始位置，就需要给它一个速度 ➎ 使它开始移动。你为球的速度创建一个列表，其中第0个元素是x坐标的速度，第1个元素是y坐标的速度。
- en: You need to add or subtract the velocity to or from the current ball position
    to make the ball move forward or backward, respectively. The `draw_ball()` function
    at ➑ is where you display and move the ball, which always moves in diagonals.
    If it goes forward it continues forward, and if it goes backward it continues
    backward, unless it hits the ceiling or the bat, in which case it goes in the
    opposite direction.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要加上或减去速度来更新当前球的位置，以使球向前或向后移动。`draw_ball()`函数在 ➑ 处负责显示和移动球，球总是沿对角线移动。如果它向前移动，它会继续向前；如果它向后移动，它会继续向后，除非它碰到天花板或棒球，这时它会朝相反方向移动。
- en: '**Keeping the Game Running**'
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**保持游戏运行**'
- en: Once everything is set up, you add a `while` loop to keep the game running ➓.
    The `while` loop starts by cleaning the display; then, it calls the function `draw_bat()`
    to draw the bat and `draw_ball()` to display the ball.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备好后，你需要添加一个`while`循环来保持游戏运行 ➓。`while`循环首先清空显示屏；然后，它调用`draw_bat()`函数绘制棒球，调用`draw_ball()`函数来显示球。
- en: The `sleep()` function in the last line defines the time the ball takes to move
    to another position, so you can use this function to determine how fast the ball
    moves. If you increase the delay time, the game becomes slower and easier; if
    you decrease it, the game moves faster. We encourage you to experiment with different
    delay times.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行的`sleep()`函数定义了球移动到另一个位置所需的时间，因此你可以使用此函数来确定球的移动速度。如果你增加延迟时间，游戏变得更慢且更容易；如果你减少延迟时间，游戏速度则会更快。我们鼓励你尝试不同的延迟时间。
- en: '**Running the Script**'
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: 'Congratulations! After a lot of programming, you have your reward: you can
    play Pong on your Sense HAT! Press **F5** or go to **Run** ▸ **Run Module** to
    run the script.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！经过大量编程，你获得了奖励：你可以在你的Sense HAT上玩Pong游戏！按下**F5**或者去**运行** ▸ **运行模块**来运行脚本。
- en: When you lose and the game ends, the LED matrix displays a sad face as shown
    in [Figure 8-6](ch08.xhtml#ch08fig6).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你失败并且游戏结束时，LED矩阵会显示一个如[图8-6](ch08.xhtml#ch08fig6)所示的难过表情。
- en: '![image](../images/f0123-01.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0123-01.jpg)'
- en: '**FIGURE 8-6:** LED matrix displaying a sad face when the game ends'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-6：** 当游戏结束时，LED矩阵显示一个难过的表情'
- en: '**TAKING IT FURTHER**'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更进一步**'
- en: 'Here are some ideas to upgrade your game:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些升级你游戏的建议：
- en: Decrease the delay time as the game continues to increase the level of difficulty.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着游戏进行，减少延迟时间以增加游戏的难度。
- en: Add a scoring system so that you earn a point every time the ball hits the bat,
    and display the score on the screen.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个得分系统，每当球击中棒球时就得1分，并在屏幕上显示得分。
- en: Insert a condition that restarts the game when you press the joystick.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入一个条件，当你按下摇杆时重新开始游戏。
