- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Dynamic Analysis Tools
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动态分析工具
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In the previous chapters, we discussed methods of static analysis used to examine
    files without actually running them. Often, however, it may be more efficient
    to simply execute a malicious file to passively observe its behavior and actions.
    This is especially true when malware authors have implemented mechanisms designed
    specifically to complicate or even thwart static analysis, such as encrypting
    embedded strings and configuration information or dynamically loading more code
    at runtime.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了静态分析方法，这些方法用于检查文件而不需要实际运行它们。然而，通常情况下，直接执行恶意文件以被动观察其行为和操作可能更为高效。特别是当恶意软件作者实施了旨在复杂化或甚至阻止静态分析的机制时，这一点尤为重要，例如加密嵌入的字符串和配置信息，或者在运行时动态加载更多代码。
- en: WindTail provides an illustrative example. The addresses of its command and
    control servers (generally something a malware analyst would seek to uncover)
    are embedded directly within the malware but encrypted. It is possible to manually
    decode these encrypted addresses, as the encryption key is hardcoded within the
    malware. However, it is far easier to simply execute the malware. Then, using
    a dynamic analysis tool such as a network monitor, we can passively uncover the
    addresses of the servers when the malware attempts to establish a connection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WindTail 提供了一个说明性的例子。它的指挥与控制服务器的地址（通常是恶意软件分析师试图发现的内容）直接嵌入到恶意软件中，但经过加密。虽然可以手动解码这些加密的地址，因为加密密钥是硬编码在恶意软件中的，但更简单的方法是直接执行恶意软件。然后，使用如网络监控器之类的动态分析工具，我们可以在恶意软件尝试建立连接时被动地发现这些服务器的地址。
- en: In this chapter we will dive into several dynamic analysis methods useful for
    passively observing Mac malware specimens, including process, file, and network
    monitoring. We’ll also discuss the tools you can use to perform this monitoring.
    Malware analysts often use these tools to quickly gain insight into the capabilities
    of a malicious specimen. Later, this information can become part of detection
    signatures for identifying other infections. In Chapter 8 we’ll explore the advanced
    dynamic analysis techniques of debugging.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将深入探讨几种动态分析方法，这些方法对于被动观察 Mac 恶意软件样本非常有用，包括进程、文件和网络监控。我们还将讨论你可以使用的工具来执行这些监控。恶意软件分析师通常使用这些工具快速获得恶意样本的能力信息。稍后，这些信息可以成为检测签名的一部分，用于识别其他感染。在第八章中，我们将探索调试的高级动态分析技术。
- en: Process Monitoring
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程监控
- en: Malware will often execute additional processes to perform tasks on its behalf,
    and observing the execution of these processes via a process monitor can provide
    valuable insight into the malware’s behavior and capabilities. Often, these processes
    are simply command line utilities, built into macOS, that the malware executes
    in order to lazily delegate required actions. For example, a malicious installer
    might invoke macOS’s move (*/bin/mv*) or copy (*/bin/cp*) utilities to persistently
    install the malware. To survey the system, the malware might invoke the process
    status (*/bin/ps*) utility to get a list of running processes, or the `whoami`
    (*/usr/bin/whoami*) utility to determine the current user’s permissions. It might
    then exfiltrate the results of this survey to a remote command and control server
    via */usr/bin/curl*. By passively observing the execution of these commands, we
    can efficiently understand the malware’s interactions with the system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件通常会执行额外的进程来代其完成任务，通过进程监控器观察这些进程的执行，可以为恶意软件的行为和能力提供有价值的见解。这些进程通常只是一些命令行工具，是
    macOS 内建的，恶意软件执行这些工具以懒惰地委派所需的操作。例如，一个恶意安装程序可能会调用 macOS 的移动（*/bin/mv*）或复制（*/bin/cp*）工具来持久安装恶意软件。为了调查系统，恶意软件可能会调用进程状态（*/bin/ps*）工具来获取正在运行的进程列表，或调用
    `whoami`（*/usr/bin/whoami*）工具来确定当前用户的权限。然后，它可能会通过 */usr/bin/curl* 将此调查结果导出到远程的指挥与控制服务器。通过被动地观察这些命令的执行，我们可以高效地了解恶意软件与系统的互动。
- en: Malware may also spawn binaries that have been packaged together with the original
    malware sample or that it dynamically downloads from a remote command and control
    server. For example, malware called Eleanor deploys with several utilities to
    extend the malware’s functionality. It is prebundled with Netcat, a well-known
    networking utility; Wacaw, a simple open source command line tool capable of capturing
    pictures and video from the built-in webcam; and a Tor utility to facilitate anonymous
    network communications. We could use a process monitor to observe the malware
    executing these packaged utilities to uncover its ultimate goal, which in this
    case is setting up a Tor-based backdoor able to fully interact with the infected
    system and remotely spy on users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可能生成与原始恶意软件样本一起打包的二进制文件，或者它从远程命令与控制服务器动态下载。例如，一个名为Eleanor的恶意软件部署时包含了几个工具来扩展其功能。它预先打包了Netcat，一个著名的网络工具；Wacaw，一个简单的开源命令行工具，能够从内置的摄像头捕捉图片和视频；以及一个Tor工具，用于促进匿名网络通信。我们可以使用进程监视器来观察恶意软件执行这些打包的工具，从而揭示其最终目的，在这种情况下就是设置一个基于Tor的后门，能够完全与被感染系统交互并远程监视用户。
- en: It is important to note that the binaries packaged in Eleanor are not malicious
    per se. Instead, the utilities provide functionality (for example, webcam recording)
    that the malware author wanted to incorporate into the malware but was likely
    too time-constrained or too unskilled to write themselves, or perhaps simply saw
    as an efficient approach to achieving this desired functionality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Eleanor中打包的二进制文件本身并不具备恶意性质。相反，这些工具提供了恶意软件作者希望集成到恶意软件中的功能（例如摄像头录制），但由于时间紧张或技术水平不足，他们可能无法自己编写，或者只是看作一种实现所需功能的高效方法。
- en: Another example of a malware specimen that is packaged with an embedded binary
    is FruitFly. Because FruitFly was written in Perl, it has limited ability to perform
    low-level actions such as generating synthetic mouse and keyboard events (for
    example, in an attempt to dismiss security prompts). To address this shortcoming,
    the author packaged it with an embedded Mach-O binary capable of performing these
    actions. In this case, using a process monitor could allow us to observe the malware
    writing out this embedded binary to disk before launching it. We could then capture
    a copy of the binary for analysis before the task completes and the malware removes
    it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个嵌入二进制文件打包的恶意软件示例是FruitFly。由于FruitFly是用Perl编写的，它在执行低级操作（例如生成合成鼠标和键盘事件，以试图关闭安全提示）方面的能力有限。为了解决这个问题，作者将其与一个嵌入式Mach-O二进制文件一起打包，该文件能够执行这些操作。在这种情况下，使用进程监视器可以让我们观察到恶意软件在启动之前将这个嵌入的二进制文件写入磁盘。然后我们可以在任务完成且恶意软件删除文件之前，捕获该二进制文件的副本进行分析。
- en: The ProcessMonitor Utility
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进程监视器工具
- en: In addition to displaying the process identifier and path of spawned processes,
    more comprehensive process monitors can also provide information such as a process
    hierarchy, command line arguments, and code-signing information. Of this additional
    information, the process arguments are especially valuable to malware analysis,
    because they can often reveal the exact actions the malware is delegating.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了显示生成的进程的进程标识符和路径外，更全面的进程监视器还可以提供诸如进程层级、命令行参数和代码签名信息等信息。在这些附加信息中，进程参数对于恶意软件分析特别有价值，因为它们往往能揭示恶意软件正在委托执行的具体操作。
- en: Unfortunately, macOS does not provide a built-in process monitoring utility
    that includes these features. But not to worry, I’ve created an open source one
    (uncreatively named *ProcessMonitor*) that leverages Apple’s powerful Endpoint
    Security framework to facilitate the dynamic analysis of Mac malware. ProcessMonitor
    will display process events, like `exec`, `fork`, and `exit`, along with the process’s
    ID (`pid`), full path, and any command line arguments. The tool also reports any
    code-signing information and a full process hierarchy. To capture process events,
    ProcessMonitor must be run with root privileges in macOS’s terminal. Moreover,
    the terminal must be granted full disk access via the Security & Privacy pane
    in the System Preferences application. For more information about the tool and
    its prerequisites, see ProcessMonitor’s documentation.^([2](#c07-endnote-2))
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，macOS并没有提供一个内建的进程监控工具，包含这些功能。不过不用担心，我已经创建了一个开源工具（取名不太有创意，叫做*ProcessMonitor*），它利用了Apple强大的Endpoint
    Security框架，便于动态分析Mac恶意软件。ProcessMonitor将显示进程事件，如`exec`、`fork`和`exit`，以及进程的ID（`pid`）、完整路径和任何命令行参数。该工具还会报告任何代码签名信息和完整的进程层级结构。为了捕获进程事件，ProcessMonitor必须以root权限在macOS的终端中运行。此外，终端必须通过“系统偏好设置”中的“安全性与隐私”面板授予完全磁盘访问权限。有关该工具及其先决条件的更多信息，请参见ProcessMonitor的文档。^([2](#c07-endnote-2))
- en: 'Let’s briefly look at some abridged output from ProcessMonitor as it observes
    processes spawned by an installer of a variant of Lazarus Group’s AppleJeus malware.
    To instruct ProcessMonitor to output formatted JSON, we execute it with the `-pretty`
    flag ([Listing 7-1](#listing7-1)):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要查看一些ProcessMonitor的简化输出，观察它如何监控Lazarus Group的AppleJeus恶意软件变种的安装程序启动的进程。为了指示ProcessMonitor输出格式化的JSON，我们使用`-pretty`标志执行它（[清单
    7-1](#listing7-1)）：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 7-1: Using ProcessMonitor to observe installer commands (AppleJeus
    variant)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-1：使用ProcessMonitor观察安装程序命令（AppleJeus变种）
- en: 'From these processes and their arguments, we observe the malicious installer
    doing the following: executing the built-in */bin/mv* utility to move a hidden
    property list from the installer’s *Resources/* directory into */Library/LaunchDaemons*
    1, executing */bin/mv* to move a hidden binary from the installer’s *Resources/*
    directory into */Library/UnionCrypto/* 2, and then launching this binary, `unioncryptoupdater`
    3. Solely from a process monitor, we now know that the malware persists as a launch
    daemon, *vip.unioncrypto.plist,* and we identified the binary, *unioncryptoupdater*,
    that serves as the malware’s persistent backdoor component.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些进程及其参数中，我们观察到恶意安装程序执行了以下操作：使用内置的*/bin/mv*工具将一个隐藏的属性列表从安装程序的*Resources/*目录移动到*/Library/LaunchDaemons*
    1，使用*/bin/mv*将一个隐藏的二进制文件从安装程序的*Resources/*目录移动到*/Library/UnionCrypto/* 2，然后启动这个二进制文件`unioncryptoupdater`
    3。仅通过进程监视器，我们现在知道恶意软件作为一个启动守护进程持续存在，*vip.unioncrypto.plist*，并且我们识别出了作为恶意软件持久化后门组件的二进制文件*unioncryptoupdater*。
- en: Process monitoring can also shed light on a malicious sample’s core functionality.
    For example, WindTail’s main purpose is to collect and exfiltrate files from an
    infected system. While we can discover this using static analysis methods such
    as disassembling the malware’s binary, it’s far simpler to leverage a process
    monitor. [Listing 7-2](#listing7-2) contains abridged output from ProcessMonitor.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 进程监控也可以揭示恶意样本的核心功能。例如，WindTail的主要目的是从感染的系统中收集并窃取文件。虽然我们可以通过静态分析方法（如反汇编恶意软件的二进制文件）来发现这一点，但利用进程监视器要简单得多。[清单
    7-2](#listing7-2)包含了ProcessMonitor的简化输出。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 7-2: Using ProcessMonitor to uncover file exfiltration functionality
    (WindTail)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-2：使用ProcessMonitor揭示文件外泄功能（WindTail）
- en: In the ProcessMonitor output, we see the malware first creating a ZIP archive
    of a file to collect 1 before exfiltrating the archive using the `curl` command
    3. As an added bonus, the command line options passed to `curl` reveal the malware’s
    exfiltration server, string2me.com 4. The reported parent process identifier (`ppid`)
    provides a way to correlate child processes to a parent. For example, we leverage
    the `ps` utility to map the reported `ppid` (1173) 2 to WindTail’s persistent
    component, *Final_Presentation.app/Contents/MacOS/usrnode* 5.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在ProcessMonitor的输出中，我们看到恶意软件首先创建了一个文件的ZIP档案以进行收集1，然后使用`curl`命令3将该档案外泄。作为附加奖励，传递给`curl`的命令行选项揭示了恶意软件的外泄服务器string2me.com
    4。报告的父进程标识符（`ppid`）提供了一种将子进程与父进程关联的方法。例如，我们利用`ps`工具将报告的`ppid`（1173）2映射到WindTail的持久化组件*Final_Presentation.app/Contents/MacOS/usrnode*
    5。
- en: Though process monitoring can passively and efficiently provide us with invaluable
    information, it is only one component of a comprehensive dynamic analysis approach.
    In the next section, we’ll cover file monitoring, which can provide complementary
    insight into the malware’s actions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然进程监控可以被动而高效地为我们提供宝贵的信息，但它只是全面动态分析方法中的一个组成部分。在下一节中，我们将讨论文件监控，它可以为恶意软件的行为提供互补的洞察。
- en: File Monitoring
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件监控
- en: '*File monitoring* is passively watching a host’s filesystem for events of interest.
    During the infection process, as well as during the execution of the payload,
    the malware will likely access the filesystem and manipulate it in a variety of
    ways, such as by saving scripts or Mach-O binaries to disk, creating a mechanism
    such as a launch item for persistence, and accessing user documents, perhaps for
    exfiltration to a remote server.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*文件监控*是被动地观察主机文件系统中的感兴趣事件。在感染过程以及有效载荷执行过程中，恶意软件可能会访问文件系统并以各种方式进行操作，例如将脚本或Mach-O二进制文件保存到磁盘、创建启动项等机制以保持持久性，访问用户文档，可能是为了向远程服务器进行数据外泄。'
- en: Although we can sometimes indirectly observe this access with a process monitor
    when the malware delegates actions to system utilities, more sophisticated malware
    may be fully self-contained and won’t spawn any additional processes. In this
    case, a process monitor may be of little help. Regardless of the malware’s sophistication,
    we can often observe the malware’s actions via a file monitor instead.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们有时可以通过进程监控间接观察到当恶意软件将操作委托给系统实用程序时的文件访问，更多复杂的恶意软件可能完全自包含，不会产生任何额外的进程。在这种情况下，进程监控可能帮助不大。无论恶意软件的复杂性如何，我们通常可以通过文件监控来观察恶意软件的行为。
- en: The fs_usage Utility
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fs_usage 工具
- en: We can monitor the filesystem using macOS’s built-in file monitoring utility
    `fs_usage`. To capture filesystem events with elevated permissions, execute `fs_usage`
    with the `-f filesystem` flags. Specify the `-w` command line option to instruct
    `fs_usage` to provide more detailed output. Also, the output of `fs_usage` should
    be filtered; otherwise, the amount of system file activity can be overwhelming.
    To do so, either specify the target process (`fs_usage -w -f filesystem malware.sample`)
    or pipe the output to `grep`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用macOS内置的文件监控工具`fs_usage`来监控文件系统。为了以提升的权限捕获文件系统事件，可以使用`-f filesystem`标志执行`fs_usage`。指定`-w`命令行选项，可以指示`fs_usage`提供更详细的输出。此外，`fs_usage`的输出应该进行过滤；否则，系统文件活动的数量可能会让人不知所措。为此，可以指定目标进程（`fs_usage
    -w -f filesystem malware.sample`）或将输出通过管道传递给`grep`。
- en: 'For example, if we execute the Mac malware called ColdRoot while `fs_usage`
    is running, we will observe it accessing a file named *conx.wol* found within
    its application bundle ([Listing 7-3](#listing7-3)):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们在运行`fs_usage`的同时执行名为ColdRoot的Mac恶意软件，我们将观察到它访问名为*conx.wol*的文件，该文件位于它的应用程序包中（[列出7-3](#listing7-3)）：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 7-3: Using `fs_usage` to observe file accesses (ColdRoot)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列出7-3：使用`fs_usage`观察文件访问（ColdRoot）
- en: 'As you can see, the malware, named *com.apple.audio.driver.app*, opens and
    reads the contents of the file. Let’s take a peek at this file to see if it can
    shed details about the malware’s functionality ([Listing 7-4](#listing7-4)):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，名为*com.apple.audio.driver.app*的恶意软件打开并读取该文件的内容。让我们来看看这个文件，看看它是否能提供关于恶意软件功能的详细信息（[列出7-4](#listing7-4)）：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 7-4: Configuration file (ColdRoot)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 列出7-4：配置文件（ColdRoot）
- en: The contents of this file suggest that *conx.wol* is a configuration file for
    the malware. Among other values, it contains the port and IP address of the attacker’s
    command and control server. To figure out what the other key/value pairs represent,
    we could hop into a disassembler and look for a cross-reference to the string
    `"conx.wol"`. (Alternatively, we could do this in a debugger, which we’ll discuss
    in Chapter 8.) Doing so would lead us to logic in the malware’s code that parses
    and acts upon the key/value pairs in the file. I’ll leave this as an exercise
    for the interested reader.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的内容表明*conx.wol*是恶意软件的配置文件。在其他值之外，它包含了攻击者的命令与控制服务器的端口和IP地址。为了弄清楚其他键/值对的含义，我们可以使用反汇编工具查找与字符串`"conx.wol"`的交叉引用。（另外，我们也可以在调试器中执行此操作，我们将在第8章讨论这部分内容。）这样做会让我们找到恶意软件代码中的逻辑，解析并处理该文件中的键/值对。我将把这个作为一个练习留给有兴趣的读者。
- en: The `fs_usage` utility is convenient because it’s baked into macOS. However,
    as a basic file-monitoring tool, it leaves much to be desired. Most notably, it
    does not provide detailed information about the process responsible for the file
    event, such as arguments or code-signing information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs_usage` 工具非常方便，因为它是 macOS 内置的。然而，作为一个基本的文件监控工具，它还有许多不足之处。最显著的是，它没有提供关于引发文件事件的进程的详细信息，例如参数或代码签名信息。'
- en: The FileMonitor Utility
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件监视器工具
- en: To address these shortcomings, I created the open source FileMonitor utility.^([3](#c07-endnote-3))
    Similar to the aforementioned ProcessMonitor utility, it leverages Apple’s Endpoint
    Security framework and is designed with malware analysis in mind. Via FileMonitor
    we can receive valuable details about real-time file events. Note that, like ProcessMonitor,
    FileMonitor must be run as root in a terminal that has been granted full disk
    access.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些不足，我创建了开源的文件监视器工具。^([3](#c07-endnote-3)) 与前述的 ProcessMonitor 工具类似，它利用了苹果的
    Endpoint Security 框架，并且是为了恶意软件分析而设计的。通过文件监视器，我们可以获得有关实时文件事件的宝贵细节。请注意，像 ProcessMonitor
    一样，文件监视器必须以 root 身份在已获得完全磁盘访问权限的终端中运行。
- en: As an example, let’s see how FileMonitor can easily reveal the details of the
    BirdMiner malware’s persistence ([Listing 7-5](#listing7-5)). BirdMiner delivers
    a Linux-based cryptominer that is able to run on macOS due to the inclusion of
    a QEMU emulator in the malware’s disk image. When the infected disk image is mounted
    and the application installer is executed, it will first request the user’s credentials.
    Once it has root privileges, it will persistently install itself. To see how,
    take a look at the output from FileMonitor. Note that this output is abridged
    to improve readability. For instance, it does not contain the process’s code-signing
    information.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们来看看文件监视器如何轻松揭示 BirdMiner 恶意软件的持久性细节（[列表 7-5](#listing7-5)）。BirdMiner
    提供了一个基于 Linux 的加密矿工，由于恶意软件磁盘镜像中包含了 QEMU 模拟器，它能够在 macOS 上运行。当感染的磁盘镜像被挂载并执行应用程序安装程序时，首先会请求用户的凭据。一旦获得
    root 权限，它将持久性地安装自己。要了解详情，请查看文件监视器的输出。请注意，这个输出已被简化以提高可读性。例如，它不包含进程的代码签名信息。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 7-5: Using FileMonitor to uncover persistence (BirdMiner)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-5：使用文件监视器揭示持久性（BirdMiner）
- en: 'From the FileMonitor output, we can see that the malware (`pid 1000`) has spawned
    the */bin/cp* utility to create two files that turn out to be BirdMiner’s two
    persistent launch daemons: *com.decker.plist* 1 and *com.tractableness.plist*
    2.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件监视器的输出中，我们可以看到恶意软件（`pid 1000`）生成了 */bin/cp* 工具，用来创建两个文件，这两个文件实际上是 BirdMiner
    的两个持久性启动守护进程：*com.decker.plist* 1 和 *com.tractableness.plist* 2。
- en: FileMonitor is particularly useful for uncovering the functionality of malware
    that spawns no additional processes. For instance, the installer for the Yort
    malware directly drops a persistent backdoor ([Listing 7-6](#listing7-6)). As
    it does not execute any other external processes to assist with this persistence,
    a process monitor would not observe the event. On the other hand, the FileMonitor
    output shows the creation of this backdoor, `.FlashUpdateCheck`, as well as the
    process responsible for the creation of the malicious backdoor. (Yort’s installer
    masquerades as an Adobe Flash Player application, which we focus on via the `-filter`
    command line flag.) As FileMonitor also includes the process’s code-signing information
    (or lack thereof), we can also see that the malicious installer is unsigned.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文件监视器对于揭示不生成额外进程的恶意软件功能特别有用。例如，Yort 恶意软件的安装程序直接放置一个持久性的后门（[列表 7-6](#listing7-6)）。由于它不会执行任何其他外部进程来协助实现持久性，因此进程监视器无法观察到这一事件。另一方面，文件监视器的输出显示了该后门
    `.FlashUpdateCheck` 的创建，以及负责创建这个恶意后门的进程。（Yort 的安装程序伪装成 Adobe Flash Player 应用程序，我们通过
    `-filter` 命令行标志对此进行关注。）由于文件监视器还包括进程的代码签名信息（或缺少该信息），我们还可以看到该恶意安装程序没有签名。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 7-6: Using FileMonitor to uncover a persistent backdoor component (Yort)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-6：使用文件监视器揭示持久性后门组件（Yort）
- en: Given that a file monitor utility can provide most of the information captured
    by a process monitor, you may be wondering why you need a process monitor at all.
    One answer is that certain information, such as process arguments, are generally
    only reported by a process monitor. Moreover, file monitors report on the entire
    system’s file activity when run in their default state, often providing too much
    irrelevant information. This can be overwhelming, especially during the initial
    stage of your analysis. While you can filter file monitors (for example, FileMonitor
    supports the `-filter` flag), doing so requires knowledge of what to filter on.
    In contrast, process monitors may provide a more succinct overview of a malicious
    sample’s actions, which in turn can guide the filtering you apply to the file
    monitor. Thus, it’s generally wise to start by using a process monitor to observe
    the commands or child processes a malicious specimen may spawn. If you need more
    details, or if the information from the process monitor proves insufficient, fire
    up a file monitor. At that point, you can filter the output based on values like
    the name of the malware and any processes it spawns, to keep the output at a reasonable
    level.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于文件监控工具可以提供大部分进程监控工具捕获的信息，你可能会想，为什么还需要进程监控工具呢？其中一个原因是，某些信息（如进程参数）通常只有进程监控工具才能报告。此外，文件监控工具在默认状态下报告整个系统的文件活动，往往提供过多无关的信息。这可能会让人感到不知所措，尤其是在分析的初期阶段。虽然你可以对文件监控工具进行过滤（例如，FileMonitor支持`-filter`标志），但这样做需要知道应该过滤哪些内容。相比之下，进程监控工具可能提供恶意样本操作的简洁概览，这反过来可以指导你对文件监控工具的过滤。因此，通常明智的做法是，首先使用进程监控工具观察恶意样本可能产生的命令或子进程。如果你需要更多细节，或者进程监控工具提供的信息不足，就启动文件监控工具。这时，你可以根据恶意软件的名称以及它生成的任何进程来过滤输出，从而保持输出在合理范围内。
- en: Network Monitoring
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络监控
- en: Most Mac malware specimens contain network capabilities. For example, they might
    interact with a remote command and control server, open a listening socket to
    await a remote attacker connection, or even scan for additional systems to infect.
    Command and control server interactions are particularly common, as they allow
    malware to download additional payloads, receive commands, or exfiltrate user
    data. For instance, the installer for the malware known as CookieMiner downloads
    property lists for persistence, as well as a cryptocurrency miner. Once persistently
    installed, the malware exfiltrates passwords and authentication cookies that allow
    attackers to gain access to users’ accounts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Mac恶意软件样本都包含网络功能。例如，它们可能与远程命令与控制服务器进行交互，打开监听套接字以等待远程攻击者连接，甚至扫描其他系统进行感染。命令与控制服务器的交互尤为常见，因为它们允许恶意软件下载额外的有效负载、接收命令或窃取用户数据。例如，名为CookieMiner的恶意软件安装程序下载持久化所需的属性列表，以及一个加密货币矿工。一旦安装持久化，恶意软件会窃取密码和身份验证Cookies，允许攻击者访问用户的账户。
- en: The malware will always contain the address of the command and control server,
    either as a domain name or an IP address, embedded within its binary or a configuration
    file, though it may be obfuscated or encrypted. One of our main goals when analyzing
    malicious samples is to figure out how they interact with the network. This involves
    uncovering network endpoints, like the addresses of any command and control servers,
    as well as details about any malicious network traffic, such as tasking and data
    exfiltration. It’s also wise to look for listening sockets that the malware may
    have opened in order to provide backdoor access to a remote attacker.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件总是会包含命令与控制服务器的地址，无论是作为域名还是IP地址，都嵌入在其二进制文件或配置文件中，尽管它可能被混淆或加密。我们在分析恶意样本时的主要目标之一是弄清楚它们如何与网络交互。这包括揭示网络端点，如任何命令与控制服务器的地址，以及任何恶意网络流量的详细信息，如任务指令和数据外泄。同时，查找恶意软件可能已打开的监听套接字也很明智，这些套接字可能为远程攻击者提供后门访问权限。
- en: In addition to revealing the malware’s capabilities, this information enables
    us to take defensive actions such as developing network-level indicators of compromise
    or even working with external entities to take the command and control server
    offline, thwarting the spread of infections.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了揭示恶意软件的功能外，这些信息还使我们能够采取防御性措施，如开发网络级的入侵指示器，甚至与外部实体合作将命令与控制服务器下线，从而阻止感染的传播。
- en: Statically analyzing a malicious sample can reveal its network capabilities
    and endpoints, but using a network monitor is often a far simpler approach. To
    illustrate this, let’s return to the example mentioned at the beginning of this
    chapter. Recall that the addresses of WindTail’s command and control servers were
    embedded directly within its binary, but they were encrypted in an attempt to
    thwart manual static analysis efforts. [Listing 7-7](#listing7-7) is a snippet
    of decompiled code from WindTail that decodes and decrypts the address of a command
    and control server.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析恶意样本可以揭示其网络功能和端点，但使用网络监控器通常是一个更简单的方式。为了说明这一点，让我们回到本章开始时提到的例子。回想一下，WindTail的指挥和控制服务器的地址直接嵌入其二进制文件中，但为了防止手动静态分析，这些地址进行了加密。[清单
    7-7](#listing7-7)是来自WindTail的反编译代码片段，用于解码和解密指挥和控制服务器的地址。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 7-7: Embedded command and control server, encrypted to thwart static
    analysis efforts (WindTail)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-7：嵌入的指挥和控制服务器，已加密以阻碍静态分析工作（WindTail）
- en: This address 1 (stored in the `R14` register) is used to create a URL object
    (stored in `RBX`) 2, to which the malware sends a request 3. The encryption and
    encoding are intended to complicate static analysis efforts, but armed with a
    network monitor, we can easily recover the address of this server. Specifically,
    we can execute the malware in a virtual machine while monitoring network traffic.
    Almost immediately, the malware connects to its server, revealing its address,
    *flux2key.com* ([Figure 7-1](#figure7-1)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个地址1（存储在`R14`寄存器中）用于创建一个URL对象（存储在`RBX`中）2，恶意软件向其发送请求3。加密和编码旨在复杂化静态分析工作，但借助网络监控器，我们可以轻松恢复该服务器的地址。具体而言，我们可以在虚拟机中执行恶意软件，同时监控网络流量。几乎立刻，恶意软件连接到其服务器，揭示了其地址，*flux2key.com*（[图
    7-1](#figure7-1)）。
- en: '![Screenshot of a Wireshark interface showing information on WindTail as follows:
    “Host: flux2key.com,” “Accept: */*,” “Accept-Language: en-us,” “Connection: keep-alive,”
    and “Accept-Encoding: gzip, deflate.”](image_fi/501942c07/f07001.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Wireshark界面的截图，显示有关WindTail的信息，内容包括：“Host: flux2key.com”，“Accept: */*”，“Accept-Language:
    en-us”，“Connection: keep-alive”，“Accept-Encoding: gzip, deflate。”](image_fi/501942c07/f07001.png)'
- en: 'Figure 7-1: A network monitor reveals the address of a command and control
    server (WindTail)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-1：网络监控器揭示了指挥和控制服务器的地址（WindTail）
- en: You can sometimes discover network endpoints using a process monitor alone if
    the malware delegates its network activities to system utilities. However, a dedicated
    network monitoring tool will be able to observe any network activity, even for
    self-contained malware like WindTail. Moreover, a network monitor may be able
    to capture packets, providing valuable insight into a malware specimen’s protocol
    and file exfiltration capabilities.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你仅通过进程监视器也能发现网络端点，前提是恶意软件将其网络活动委托给系统实用工具。然而，一个专门的网络监控工具能够观察到任何网络活动，即使是像WindTail这样的自包含恶意软件。此外，网络监控器还可以捕获数据包，提供关于恶意软件样本的协议和文件外泄能力的宝贵信息。
- en: Broadly speaking, there are two types of network monitors. The first type provides
    a snapshot of current network use, including any established connections. Examples
    of these include `netstat`, `nettop`, `lsof`, and Netiquette.^([4](#c07-endnote-4))
    The second type provides packet captures of network streams. Examples of these
    include `tcpdump` and Wireshark.^([5](#c07-endnote-5)) Both types are useful tools
    for dynamic malware analysis.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 广义而言，网络监控器有两种类型。第一种类型提供当前网络使用情况的快照，包括任何已建立的连接。这类工具的例子包括`netstat`、`nettop`、`lsof`和Netiquette。^([4](#c07-endnote-4))
    第二种类型则提供网络流量的包捕获。这类工具的例子包括`tcpdump`和Wireshark。^([5](#c07-endnote-5)) 这两种类型都是动态恶意软件分析中有用的工具。
- en: macOS’s Network Status Monitors
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS的网络状态监视器
- en: Various network utilities, including several that are built into macOS, can
    provide information about the current status and utilization of the network. For
    example, they can report on established connections (perhaps to a command and
    control server) and listening sockets (perhaps interactive backdoors awaiting
    an attacker’s connection), along with the responsible process. Each of these utilities
    supports a myriad of command line flags that control their use and format or filter
    their output. Consult their man pages for information on these various flags.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 各种网络工具，包括几个内置于macOS中的工具，可以提供有关网络当前状态和利用率的信息。例如，它们可以报告已建立的连接（可能是到命令与控制服务器）和监听套接字（可能是等待攻击者连接的交互式后门），以及负责的进程。每个工具都支持大量的命令行标志，用于控制它们的使用、格式化或过滤输出。有关这些标志的信息，请查阅它们的man页面。
- en: The most well-known is `netstat`, which shows the status of the network. When
    executed with the `-a` and `-v` command line flags, it will show a verbose listing
    of all sockets, including their local and remote addresses, state (such as established
    or listening), and the process responsible for the event. Also of note is the
    `-n` flag, which can speed up the network state enumeration by preventing the
    resolution of IP addresses to their corresponding domain names.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的工具是`netstat`，它显示网络状态。当与`-a`和`-v`命令行标志一起执行时，它会显示所有套接字的详细列表，包括它们的本地和远程地址、状态（如已建立或监听）以及负责该事件的进程。另一个值得注意的是`-n`标志，它可以通过防止将IP地址解析为对应的域名，从而加快网络状态的枚举速度。
- en: A more dynamic utility is macOS’s `nettop`, which refreshes automatically to
    show current information about the network. Besides providing socket information,
    such as local and remote addresses, states, and the process responsible for the
    event, it also provides high-level statistics, such as the number of bytes transmitted.
    Once `nettop` is running, you can collapse and expand its output with the c and
    e keys, respectively.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更动态的工具是macOS的`nettop`，它会自动刷新，显示有关网络的当前信息。除了提供套接字信息，如本地和远程地址、状态以及负责该事件的进程外，它还提供高级统计信息，如传输的字节数。`nettop`启动后，你可以使用c和e键分别折叠和展开其输出。
- en: The `lsof` utility simply lists open files, and on macOS these include sockets.
    Execute it as root for a system-wide listing and with the `-i` command line flag
    to limit its output to network-related files (sockets). This will provide socket
    information, such as local and remote addresses, states, and the process responsible
    for the event.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`lsof`工具简单地列出打开的文件，在macOS中，这些文件包括套接字。以root用户身份执行它可以获取系统范围的列表，使用`-i`命令行标志可以将输出限制为与网络相关的文件（套接字）。这将提供套接字信息，如本地和远程地址、状态以及负责该事件的进程。'
- en: 'To see how the `lsof` utility can be useful, let’s use it to examine a Mac
    malware specimen. In mid-2019, attackers targeted macOS users with a Firefox zero-day
    to install malware known as Mokes. Analysis of this sample aimed to recover the
    address of the malware’s command and control server. Using a network monitor,
    this turned out to be fairly straightforward. After observing the malware’s installer
    persisting a binary named *quicklookd* in the *~/Library/Dropbox* directory, `lsof`
    (executed with the `-i` and `TCP` flags to filter on TCP connections) revealed
    an outgoing connection to `185.49.69.210` on port `80`, commonly used for HTTP
    traffic. As seen in the abridged output in [Listing 7-8](#listing7-8), `lsof`
    attributed this connection to Mokes’s malicious `quicklookd` process:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看`lsof`工具如何派上用场，下面我们用它来检查一个Mac恶意软件样本。在2019年中期，攻击者通过Firefox零日漏洞攻击macOS用户，安装名为Mokes的恶意软件。对这个样本的分析旨在恢复恶意软件的命令与控制服务器的地址。通过使用网络监控工具，这变得相当简单。在观察到恶意软件的安装程序将一个名为*quicklookd*的二进制文件保存在*~/Library/Dropbox*目录后，`lsof`（与`-i`和`TCP`标志一起执行，以过滤TCP连接）揭示了一个指向`185.49.69.210`端口`80`（通常用于HTTP流量）的外发连接。如[列表
    7-8](#listing7-8)中缩短的输出所示，`lsof`将此连接归因于Mokes的恶意`quicklookd`进程：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 7-8: Using `lsof` to uncover the address of a command and control server
    (Mokes)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-8：使用`lsof`揭示命令与控制服务器（Mokes）的地址
- en: The Netiquette Utility
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络礼仪工具
- en: In order to supplement the built-in command line utilities, I created the open
    source Netiquette tool. *Netiquette* makes use of Apple’s private Network Statistics
    framework to provide a simple GUI with various options designed to facilitate
    malware analysis. For example, you can instruct it to ignore system processes,
    filter on user-specified input (like selecting Listen to only display sockets
    in the Listen state), and export its results to JSON.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了补充内建的命令行工具，我创建了开源的Netiquette工具。*Netiquette*利用苹果的私有网络统计框架提供了一个简单的GUI，带有多种选项，旨在促进恶意软件分析。例如，你可以指示它忽略系统进程，按照用户指定的输入进行过滤（比如选择“监听”仅显示处于监听状态的套接字），并将结果导出为JSON格式。
- en: 'Let’s look at an example in which Netiquette quickly revealed a sophisticated
    malware specimen’s remote server. In mid-2020, the Lazarus Group targeted macOS
    users with malware known as Dacls. Executing the malware results in an observable
    networking event: a connection attempt on port `443` (commonly used for HTTPS
    traffic) to the attacker’s remote server, found at `185.62.58.207`. As you can
    see in [Figure 7-2](#figure7-2), Netiquette easily detects this connection and
    attributes it to a process backed by a hidden file (*.mina*) in the user’s *~/Library*
    directory. This process is the malware’s persistent component.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，说明Netiquette如何快速揭示一个复杂恶意软件样本的远程服务器。在2020年中期，Lazarus集团以恶意软件Dacls为目标攻击macOS用户。执行该恶意软件会导致一个可观察到的网络事件：在端口`443`（通常用于HTTPS流量）上尝试连接攻击者的远程服务器，地址为`185.62.58.207`。如[图7-2](#figure7-2)所示，Netiquette轻松地检测到此连接，并将其归因于一个由用户*~/Library*目录下的隐藏文件（*.mina*）支持的进程。这个进程是恶意软件的持久组件。
- en: It is worth noting that Dacls will attempt to connect to multiple command and
    control servers, so when you execute the malware multiple times, a variety of
    connection attempts should appear in a network monitor. This is yet another example
    of why you’ll find it useful to combine static and dynamic analysis techniques.
    Dynamic analysis can quickly identify a primary command and control server, while
    static analysis could uncover the addresses of additional backup servers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Dacls会尝试连接多个命令与控制服务器，因此当你多次执行恶意软件时，网络监视器中应出现各种连接尝试。这又是为什么你会发现结合静态分析和动态分析技术非常有用的另一个例子。动态分析可以快速识别一个主要的命令与控制服务器，而静态分析则可以揭示额外的备用服务器地址。
- en: '![Screenshot of the Netiquette interface showing that Dacls’s server from the
    “.mina (pid: 747)” file is located at address 185.62.58.207:443,” to which it
    connected using the Protocol “TCP,” Interface “en0,” and State “SynSent.”](image_fi/501942c07/f07002.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Netiquette界面的截图，显示Dacls的服务器位于“*.mina (pid: 747)”文件中的地址185.62.58.207:443，使用协议“TCP”，接口“en0”，状态“SynSent”进行连接。](image_fi/501942c07/f07002.png)'
- en: 'Figure 7-2: Using Netiquette to uncover the address of a command and control
    server (Dacls)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-2：使用Netiquette发现命令与控制服务器（Dacls）的地址
- en: Network Traffic Monitors
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络流量监视器
- en: Certain network monitors capture actual network traffic, in the form of packets,
    for in-depth analysis. As malware analysts, we’re interested not just in the addresses
    of the command and control servers but also the actual contents of the packets.
    This content can shed insight into the capabilities of the malware. Examples of
    network traffic monitors include the ubiquitous `tcpdump` utility and the well-known
    [Wireshark](https://www.wireshark.org/) application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 某些网络监视工具捕获实际的网络流量，形式为数据包，以进行深入分析。作为恶意软件分析师，我们不仅关注命令与控制服务器的地址，还关注数据包的实际内容。这些内容能为恶意软件的能力提供深刻的见解。网络流量监视工具的例子包括无处不在的`tcpdump`工具和著名的[Wireshark](https://www.wireshark.org/)应用程序。
- en: When run from the terminal, `tcpdump` will continually display a stream of network
    packets (often called a *dump*), and we can use Boolean expressions to filter
    this stream. The `tcpdump` utility also supports many command line options, such
    as `-A` to print captured packets in ASCII and the `host` and `port` options to
    capture only specific connections, making it especially useful for analyzing the
    network traffic and understanding the protocol of malicious specimens.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当从终端运行时，`tcpdump`将持续显示网络数据包流（通常称为*dump*），我们可以使用布尔表达式来过滤这个流。`tcpdump`工具还支持许多命令行选项，如`-A`以ASCII格式打印捕获的数据包，以及`host`和`port`选项来仅捕获特定连接，这使其在分析网络流量和理解恶意样本的协议时尤为有用。
- en: For example, we can use `tcpdump` to observe that the malicious InstallCore
    malware, which masquerades as an Adobe Flash Player installer, does in fact download
    and install a legitimate copy of Flash. Is this behavior odd? Not particularly,
    considering that the user tricked into running the malware is expecting Flash
    to be installed. In [Listing 7-9](#listing7-9), the `-s0` flag instructs `tcpdump`
    to capture the entire packet, while `-A` will print out each packet in ASCII.
    Finally, we also specify that we’re only interested in traffic passing through
    the default Ethernet interface (`en0`) on port `80`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 7-9: Using `tcpdump` to observe downloads (InstallCore)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Like the other networking utilities that ship with macOS, `tcpdump` supports
    many additional command line options. For example, you can use the `-n` flag to
    instruct it not to resolve names to addresses and the `-XX` flag to print additional
    information about the packet, including a hex dump of the data. The latter is
    especially useful when analyzing non-ASCII traffic.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Another network monitor, Wireshark, provides a user interface and powerful
    protocol-decoding capabilities. To use it, specify the network interface from
    which you want to capture packets. (To capture from the primary physical network
    interface, select `en0`.) Wireshark will then begin its capture, which you can
    filter based on criteria like IP addresses, ports, and protocols. For example,
    say you’ve determined the remote address of a malware’s command and control server
    via static analysis, or dynamically with a tool like Netiquette. You can now apply
    a filter to only display packets sent to and from this server using the following
    syntax:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Figure 7-3](#figure7-3) shows a Wireshark capture of the survey data collected
    by malware known as ColdRoot. From this capture, we can easily determine what
    information the malware collects and transmits as it initially infects a system.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the Wireshark interface showing the following fields: “{‘Ver’:1,
    ‘RAM’:0, ‘CAM’:false, ‘Serial’:‘x86_64\n’,’PCName’:‘user\n – user’, ‘OS’:‘Mac
    OS X10.13.2’, ‘ID’:‘Mac_Vic’, ‘AW’:‘N\/A’, ‘AV’:‘N\/A’}…”](image_fi/501942c07/f07003.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-3: Using Wireshark to capture survey data (ColdRoot)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, remember that FruitFly was a rather insidious piece of Mac malware
    that remained undetected for over a decade. Once it was captured, network monitoring
    tools played a large role in its analysis. For example, via Wireshark we can observe
    the malware responding to the attacker’s command and control server with the location
    in which it has installed itself on the infected machine ([Figure 7-4](#figure7-4)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireshark shows FruitFly’s install path to be located in Users/user/fpsau_d.](image_fi/501942c07/f07004.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-4: Using Wireshark to uncover capabilities, in this case a command
    that returns the malware’s location on an infected system (FruitFly)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: In another instance, Wireshark reveals the malware exfiltrating screen captures
    as *.png* files ([Figure 7-5](#figure7-5)).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子中，Wireshark 揭示了恶意软件将屏幕截图作为 *.png* 文件外泄（[图 7-5](#figure7-5)）。
- en: '![Wireshark shows FruitFly taking screen captures, as shown by the .png files.](image_fi/501942c07/f07005.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Wireshark 显示 FruitFly 在捕获屏幕截图，正如 .png 文件所示。](image_fi/501942c07/f07005.png)'
- en: 'Figure 7-5: Using Wireshark to uncover capabilities, in this case a command
    that returns a screen capture of the infected system (FruitFly)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-5：使用 Wireshark 揭示功能，在此案例中为返回受感染系统（FruitFly）屏幕截图的命令
- en: For more information about Wireshark, including how to craft capture-and-display
    filters, see the official Wireshark Wiki page.^([6](#c07-endnote-6))
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 Wireshark 的信息，包括如何编写捕获和显示过滤器，请参见官方 Wireshark Wiki 页面^([6](#c07-endnote-6))。
- en: And what if the network traffic generated by malware is encrypted, such as via
    SSL/TLS? Well, in this case, a network monitor in its default configuration may
    be of little help, as it will be unable to decrypt the malicious traffic. But
    not to worry—by leveraging a proxy that installs its own root certificate and
    “man in the middles” the network communications, the plaintext traffic can be
    recovered. For more information on this technique, including the specific setup
    and configuration of such a proxy, see “SSL Proxying.”^([7](#c07-endnote-7))
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果恶意软件生成的网络流量是加密的，比如通过 SSL/TLS 加密，那么会怎样呢？嗯，在这种情况下，网络监视器的默认配置可能帮助不大，因为它无法解密恶意流量。但不用担心——通过利用一个安装了自己根证书的代理，并对网络通信进行“中间人攻击”，就能恢复明文流量。有关这种技术的更多信息，包括代理的具体设置和配置，请参见“SSL
    代理”^([7](#c07-endnote-7))。
- en: Up Next
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来
- en: 'In this chapter, we discussed the process, file, and network monitors essential
    to the malware analyst’s toolkit. However, you’ll sometimes need more powerful
    tools. For example, if a malware’s network traffic is end-to-end encrypted, a
    network monitor may be of little use. Sophisticated samples may also attempt to
    thwart dynamic monitoring tools with anti-analysis logic. Good news: we have another
    dynamic analysis tool in our arsenal, the debugger. In the next chapter, we’ll
    dive into the world of debugging, arguably the most thorough way to analyze even
    the most complex malware.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讨论了恶意软件分析师工具包中至关重要的进程、文件和网络监控器。然而，有时你需要更强大的工具。例如，如果恶意软件的网络流量是端到端加密的，网络监视器可能就派不上用场。复杂的样本可能还会尝试通过反分析逻辑来阻碍动态监控工具的使用。好消息是：我们还有另一种动态分析工具，那就是调试器。在下一章，我们将深入探讨调试的世界，毫无疑问，这是分析即使是最复杂恶意软件的最彻底方法。
- en: Endnotes
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束注释
