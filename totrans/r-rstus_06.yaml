- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 5 DESIGNING EFFECTIVE TABLES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 设计有效的表格
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: 'In his book *Fundamentals of Data Visualization*, Claus Wilke writes that tables
    are “an important tool for visualizing data.” This statement might seem odd. Tables
    are often considered the opposite of data visualizations such as plots: a place
    to dump numbers for the few nerds who care to read them. But Wilke sees things
    differently.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的《数据可视化基础》一书中，Claus Wilke写道，表格是“可视化数据的重要工具”。这一说法可能看起来有些奇怪。表格通常被认为是数据可视化（如图形）的对立面：一个用来存放数字的地方，供那些愿意阅读的人（少数极客）使用。但Wilke有不同的看法。
- en: Tables need not—and should not—be data dumps devoid of design. While bars, lines,
    and points in graphs are visualizations, so are numbers in a table, and we should
    care about their appearance. As an example, take a look at the tables made by
    reputable news sources; data dumps these are not. Media organizations, whose job
    it is to communicate effectively, pay a lot of attention to table design. But
    elsewhere, because of their apparent simplicity, Wilke writes, “[tables] may not
    always receive the attention they need.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 表格不必也不应该是没有设计的“数据堆砌”。尽管图表中的条形、线条和点是可视化，表格中的数字也是可视化，我们应该关注它们的外观。例如，看看可靠新闻来源制作的表格；这些可不是简单的数据堆砌。媒体组织，作为有效沟通的职责所在，非常注重表格设计。但在其他地方，由于表格看起来似乎很简单，Wilke写道，“[表格]可能不会总是得到它们所需要的关注。”
- en: Many people use Microsoft Word to make tables, a strategy that has potential
    pitfalls. Wilke found that his version of Word included 105 built-in table styles.
    Of those, around 80 percent, including the default style, violated some key principle
    of table design. The good news is that R is a great tool for making high-quality
    tables. It has a number of packages for this purpose and, within these packages,
    several functions designed to make sure your tables follow important design principles.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人使用Microsoft Word制作表格，这种策略可能会带来潜在的陷阱。Wilke发现，他的Word版本中包括了105种内置表格样式。在这些样式中，大约80％，包括默认样式，违反了表格设计的一些关键原则。好消息是，R是制作高质量表格的好工具。它有许多用于此目的的包，并且在这些包中，有几个函数旨在确保你的表格遵循重要的设计原则。
- en: Moreover, if you’re writing reports in R Markdown (which you’ll learn about
    in [Chapter 6](chapter6.xhtml)), you can include code that will generate a table
    when you export your document. By working with a single tool to create tables,
    text, and other visualizations, you won’t have to copy and paste your data, lowering
    the risk of human error.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你在R Markdown中编写报告（你将在[第6章](chapter6.xhtml)学习到），你可以包含一些代码，这些代码会在导出文档时生成表格。通过使用一个工具来创建表格、文本和其他可视化内容，你就不必复制粘贴数据，从而降低了人为错误的风险。
- en: This chapter examines table design principles and shows you how to apply them
    to your tables using R’s gt package, one of the most popular table-making packages
    (and, as you’ll soon see, one that uses good design principles by default). These
    principles, and the code in this chapter, are adapted from Tom Mock’s blog post
    “10+ Guidelines for Better Tables in R.” Mock works at Posit, the company that
    makes RStudio, and has become something of an R table connoisseur. This chapter
    walks you through examples of Mock’s code to show you how small tweaks can make
    a big difference.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了表格设计原则，并向你展示如何使用R的gt包（这是最受欢迎的表格制作包之一，默认使用良好的设计原则）将这些原则应用到你的表格中。这些原则和本章中的代码改编自Tom
    Mock的博客文章《R中更好表格的10+准则》。Mock在Posit公司工作，Posit是RStudio的开发公司，他已经成为R表格的行家。本章通过Mock的代码示例，展示了如何通过小的调整让表格设计产生大的影响。
- en: Creating a Data Frame
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数据框
- en: 'You will begin by creating a data frame that you can use to make tables throughout
    this chapter. First, load the packages you need (the tidyverse for general data
    manipulation functions, gapminder for the data you’ll use, gt to make the tables,
    and gtExtras to do some table formatting):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个数据框，可以在本章中使用它来制作表格。首先，加载你需要的包（用于一般数据处理的tidyverse、用于数据的gapminder、用于制作表格的gt以及用于表格格式化的gtExtras）：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you saw in [Chapter 2](chapter2.xhtml), the gapminder package provides country-level
    demographic statistics. To make a data frame for your table, you’ll use just a
    few countries (the first four, in alphabetical order: Afghanistan, Albania, Algeria,
    and Angola) and three years (1952, 1972, and 1992). The gapminder data has many
    years, but these will suffice to demonstrate table-making principles. The following
    code creates a data frame called gdp:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第 2 章](chapter2.xhtml)中看到的，gapminder 包提供了国家级的人口统计数据。为了创建你表格的数据框，你将只使用几个国家（按字母顺序排列的前四个：阿富汗、阿尔巴尼亚、阿尔及利亚和安哥拉）和三个年份（1952年、1972年和1992年）。gapminder
    数据包含许多年份，但这些年份足以演示表格制作的基本原则。以下代码创建了一个名为 gdp 的数据框：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s what gdp looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 gdp 的样式：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that you have some data, you’ll use it to make a table.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一些数据，可以用它来制作表格。
- en: Table Design Principles
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表格设计原则
- en: Unsurprisingly, the principles of good table design are similar to those for
    data visualization more generally. This section covers six of the most important
    ones.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不出所料，良好的表格设计原则与数据可视化的原则有许多相似之处。本节介绍了其中六个最重要的原则。
- en: Minimize Clutter
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 减少杂乱
- en: You can minimize clutter in your tables by removing unnecessary elements. For
    example, one common source of table clutter is grid lines, as shown in [Figure
    5-1](chapter5.xhtml#fig5-1).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过去除不必要的元素来减少表格中的杂乱。例如，一个常见的表格杂乱来源是网格线，如[图 5-1](chapter5.xhtml#fig5-1)所示。
- en: '![](../images/fig5-1.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-1.jpg)'
- en: 'Figure 5-1: A table with grid lines everywhere can be distracting.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：一个到处都有网格线的表格可能会让人分心。
- en: Having grid lines around every single cell in your table is unnecessary and
    distracts from the goal of communicating clearly. A table with minimal or even
    no grid lines ([Figure 5-2](chapter5.xhtml#fig5-2)) is a much more effective communication
    tool.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格中的每个单元格周围加上网格线是没有必要的，这会分散你清晰传达信息的目标。一个只有最少甚至没有网格线的表格（如[图 5-2](chapter5.xhtml#fig5-2)所示）是一种更有效的沟通工具。
- en: '![](../images/fig5-2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-2.jpg)'
- en: 'Figure 5-2: A table with only horizontal grid lines is more effective.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2：一个只有水平网格线的表格更为有效。
- en: 'I mentioned that gt uses good table design principles by default, and this
    is a great example. The second table, with minimal grid lines, requires just two
    lines of code—piping the gdp data into the gt() function, which creates a table:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过，gt 默认使用良好的表格设计原则，这是一个很好的例子。第二个表格，只有极少的网格线，只需要两行代码——将 gdp 数据传入 gt() 函数，就能创建一个表格：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To add grid lines to every part of the example, you’d have to add more code.
    Here, the code that follows the gt() function adds grid lines:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要向示例的每个部分添加网格线，你需要添加更多的代码。这里，gt() 函数后的代码将添加网格线：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since I don’t recommend taking this approach, I won’t walk you through this
    code. However, if you wanted to remove additional grid lines, you could do so
    like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我不推荐采用这种方法，我将不会向你演示这段代码。不过，如果你想去除额外的网格线，可以这样做：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The tab_style() function uses a two-step approach. First, it identifies the
    style to modify (in this case, the borders), then it specifies where to apply
    these modifications. Here, tab_style() tells R to modify the borders using the
    cell_borders() function, making the borders transparent, and to apply this transformation
    to the cells_body() location (versus, say, the cells_column_labels() for only
    the first row).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: tab_style() 函数采用两步法。首先，它识别需要修改的样式（在此案例中是边框），然后指定应用这些修改的位置。这里，tab_style() 告诉
    R 使用 cell_borders() 函数修改边框，将边框设为透明，并将此转换应用于 cells_body() 位置（与 cells_column_labels()
    相对，仅作用于第一行）。
- en: NOTE
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*To see all options, check out the list of so-called helper functions on the
    gt package documentation website at* [https://gt.rstudio.com/reference/index.xhtml#helper-functions](https://gt.rstudio.com/reference/index.xhtml#helper-functions)*.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*要查看所有选项，请查看 gt 包文档网站上的所谓助手函数列表：[https://gt.rstudio.com/reference/index.xhtml#helper-functions](https://gt.rstudio.com/reference/index.xhtml#helper-functions)*。'
- en: Running this code outputs a table with no grid lines at all in the body ([Figure
    5-3](chapter5.xhtml#fig5-3)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码会输出一个没有网格线的表格（如[图 5-3](chapter5.xhtml#fig5-3)所示）。
- en: '![](../images/fig5-3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-3.jpg)'
- en: 'Figure 5-3: A clean-looking table with grid lines only on the header row and
    the bottom'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3：一个干净整洁的表格，只有在标题行和底部才有网格线
- en: Save this table as an object called table_no_gridlines so that you can add to
    it later.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将此表格保存为名为 table_no_gridlines 的对象，以便后续可以继续添加内容。
- en: Differentiate the Header from the Body
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 区分表头和表体
- en: While reducing clutter is an important goal, going too far can have negative
    consequences. A table with no grid lines at all can make it hard to differentiate
    between the header row and the table body. Consider [Figure 5-4](chapter5.xhtml#fig5-4),
    for example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管减少杂乱是一个重要目标，但过度减少可能会产生负面影响。例如，可以参考[图 5-4](chapter5.xhtml#fig5-4)。
- en: '![](../images/fig5-4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-4.jpg)'
- en: 'Figure 5-4: An unclear table with all grid lines removed'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4：去除所有网格线的模糊表格
- en: 'By making the header row bold, you can make it stand out better:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过加粗表头行，您可以更好地使其突出：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Starting with the table_no_gridlines object, this code applies formatting with
    the tab_style() function in two steps. First, it specifies that it wants to alter
    the text style by using the cell_text() function to set the weight to bold. Second,
    it sets the location for this transformation to the header row using the cells_column_labels()
    function. [Figure 5-5](chapter5.xhtml#fig5-5) shows what the table looks like
    with its header row bolded.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从 table_no_gridlines 对象开始，这段代码通过 tab_style() 函数分两步应用格式化。首先，它指定使用 cell_text()
    函数将文本样式设置为粗体。其次，它使用 cells_column_labels() 函数将此转换应用于表头行。[图 5-5](chapter5.xhtml#fig5-5)
    显示了表格在表头行加粗后的样子。
- en: '![](../images/fig5-5.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-5.jpg)'
- en: 'Figure 5-5: Making the header row more obvious using bold'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-5：通过使用粗体使表头行更加明显
- en: Save this table as table_bold_header in order to add further formatting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将此表格保存为 table_bold_header，以便进行进一步的格式化。
- en: Align Appropriately
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 适当对齐
- en: A third principle of high-quality table design is appropriate alignment. Specifically,
    numbers in tables should be right-aligned. Tom Mock explains that left-aligning
    or center-aligning numbers “impairs the ability to clearly compare numbers and
    decimal places. Right alignment lets you align decimal places and numbers for
    easy parsing.”
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量表格设计的第三个原则是适当的对齐。具体来说，表格中的数字应右对齐。Tom Mock 解释道，左对齐或居中对齐数字“会影响清晰比较数字和小数位数的能力。右对齐可以使您对齐小数位和数字，便于解析。”
- en: Let’s look at this principle in action. In [Figure 5-6](chapter5.xhtml#fig5-6),
    the 1952 column is left-aligned, the 1972 column is center-aligned, and the 1992
    column is right-aligned.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个原则的实际应用。在[图 5-6](chapter5.xhtml#fig5-6)中，1952年列是左对齐，1972年列是居中对齐，1992年列是右对齐。
- en: '![](../images/fig5-6.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-6.jpg)'
- en: 'Figure 5-6: Comparing numerical data aligned to the left (1952), center (1972),
    and right (1992)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-6：比较左对齐（1952年）、居中对齐（1972年）和右对齐（1992年）的数值数据
- en: You can see how much easier it is to compare the values in the 1992 column than
    those in the other two columns. In both the 1952 and 1972 columns, it’s challenging
    to compare the values because the numbers in the same position (the tens place,
    for example) aren’t aligned vertically. In the 1992 column, however, the number
    in the tens place in Afghanistan (4) aligns with the number in the tens place
    in Albania (9) and all other countries, making it much easier to scan the table.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，比较 1992 年列中的值比其他两列要容易得多。在 1952 年和 1972 年列中，比较数值是有挑战性的，因为在同一位置（例如，十位数）的数字没有垂直对齐。然而，在
    1992 年列中，阿富汗（4）和阿尔巴尼亚（9）以及所有其他国家的十位数对齐，使得浏览表格变得更容易。
- en: 'As with other tables, you actually have to override the defaults to get the
    gt package to misalign the columns, as demonstrated in the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他表格一样，实际上您需要覆盖默认设置，才能使 gt 包使列错位，正如下面的代码所示：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By default, gt will right-align numeric values. Don’t change anything, and you’ll
    be golden.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，gt 会将数字值右对齐。不要更改任何设置，您就会得到正确的结果。
- en: 'Right alignment is best practice for numeric columns, but for text columns,
    use left alignment. As Jon Schwabish points out in his article “Ten Guidelines
    for Better Tables” in the *Journal of Benefit-Cost Analysis*, it’s much easier
    to read longer text cells when they are left-aligned. To see the benefit of left-aligning
    text, add a country with a long name to your table. I’ve added Bosnia and Herzegovina
    and saved this as a data frame called gdp_with_bosnia. You’ll see that I’m using
    nearly the same code I used previously to create the gdp data frame:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数值列最好使用右对齐，而文本列则应使用左对齐。正如 Jon Schwabish 在《效益-成本分析期刊》中的文章《更好的表格设计十大准则》里指出的，左对齐的长文本单元格更易阅读。为了看到左对齐的好处，您可以在表格中添加一个名称较长的国家。我添加了波斯尼亚和黑塞哥维那，并将其保存为名为
    gdp_with_bosnia 的数据框。您会看到，我几乎使用了之前创建 gdp 数据框时相同的代码：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s what the gdp_with_bosnia data frame looks like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`gdp_with_bosnia`数据框的样子：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now take the gdp_with_bosnia data frame and create a table with the Country
    column center-aligned. In the table in [Figure 5-7](chapter5.xhtml#fig5-7), it’s
    hard to scan the country names, and that center-aligned column just looks a bit
    weird.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在取`gdp_with_bosnia`数据框，创建一个国家列居中对齐的表格。在[图5-7](chapter5.xhtml#fig5-7)中的表格里，国家名称很难扫描，而居中的列看起来有些奇怪。
- en: '![](../images/fig5-7.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-7.jpg)'
- en: 'Figure 5-7: Center-aligned text can be hard to read, especially when it includes
    longer values.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-7：居中文本可能很难阅读，尤其是当它包含较长的值时。
- en: This is another example where you have to change the gt defaults to mess things
    up. In addition to right-aligning numeric columns by default, gt left-aligns character
    columns. As long as you don’t touch anything, you’ll get the alignment you’re
    looking for.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个需要改变`gt`默认设置以调整内容的例子。除了默认右对齐数值列外，`gt`还会左对齐字符列。只要你不做任何修改，你就会得到你想要的对齐方式。
- en: 'If you ever do want to override the default alignments, you can use the cols_align()
    function. For example, here’s how to make the table with center-aligned country
    names:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实希望覆盖默认的对齐方式，可以使用`cols_align()`函数。例如，下面是如何让国家名称居中对齐的表格：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The columns argument tells gt which columns to align, and the align argument
    selects the alignment (left, right, or center).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`columns`参数告诉`gt`对哪些列进行对齐，`align`参数则选择对齐方式（左对齐、右对齐或居中）。'
- en: Use the Correct Level of Precision
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用正确的精度
- en: In all of the tables you’ve made so far, you’ve used the data exactly as it
    came to you. The data in the numeric columns, for example, extends to four decimal
    places—almost certainly too many. Having more decimal places makes a table harder
    to read, so you should always strike a balance between what Jon Schwabish describes
    as “necessary precision and a clean, spare table.”
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在你目前制作的所有表格中，你都直接使用了原始数据。例如，数字列中的数据扩展到四个小数位——这几乎肯定是过多的。更多的小数位会让表格变得更加难以阅读，所以你应该始终在Jon
    Schwabish所描述的“必要精度与干净、简洁表格”之间找到平衡。
- en: 'Here’s a good rule of thumb: if adding more decimal places would change some
    action, keep them; otherwise, take them out. In my experience, people tend to
    leave too many decimal places in, putting too much importance on a very high degree
    of accuracy (and, in the process, reducing the legibility of their tables).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个好的经验法则：如果增加更多的小数位会改变某个操作，就保留它们；否则，去掉它们。根据我的经验，人们往往会保留过多的小数位，过于重视高精度（并且在这个过程中降低了表格的可读性）。
- en: 'In the GDP table, you can use the fmt_currency() function to format the numeric
    values:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在GDP表格中，你可以使用`fmt_currency()`函数来格式化数值：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The gt package has a whole series of functions for formatting values in tables,
    all of which start with fmt_. This code applies fmt_currency() to the 1952, 1972,
    and 1992 columns, then uses the decimals argument to tell fmt_currency() to format
    the values with zero decimal places. After all, the difference between a GDP of
    $779.4453 and $779 is unlikely to lead to different decisions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`gt`包有一系列用于格式化表格中值的函数，这些函数都以`fmt_`开头。此代码将`fmt_currency()`应用于1952年、1972年和1992年的列，然后使用`decimals`参数告诉`fmt_currency()`以零小数位格式化这些值。毕竟，GDP为$779.4453和$779之间的差异不太可能导致不同的决策。'
- en: This produces values formatted as dollars. The fmt_currency() function automatically
    adds a thousands-place comma to make the values even easier to read ([Figure 5-8](chapter5.xhtml#fig5-8)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将值格式化为美元。`fmt_currency()`函数会自动添加千位分隔符，使得数值更加易读（[图5-8](chapter5.xhtml#fig5-8)）。
- en: '![](../images/fig5-8.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-8.jpg)'
- en: 'Figure 5-8: Rounding dollar amounts to whole numbers and adding dollar signs
    can simplify data.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-8：将美元金额四舍五入为整数并添加美元符号，可以简化数据。
- en: Save your table for reuse as table_whole_numbers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的表格保存为`table_whole_numbers`以便重用。
- en: Use Color Intentionally
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有意使用颜色
- en: 'So far, your table hasn’t used any color, so you’ll add some now to highlight
    outlier values. Doing so can help your table communicate more effectively, especially
    for readers who want to scan it. To make the highest value in the year 1952 a
    different color, you again use the tab_style() function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的表格没有使用任何颜色，现在你将添加一些颜色来突出显示异常值。这样做可以帮助表格更有效地传达信息，特别是对于那些希望快速浏览表格的读者。为了使1952年最高的值显示为不同的颜色，你可以再次使用`tab_style()`函数：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This function uses cell_text() to change the color of the text to orange and
    make it bold. Within the cells_body() function, the locations() function specifies
    the columns and rows to which the changes will apply. The columns argument is
    simply set to the year whose values are being changed, but setting the rows requires
    a more complicated formula. The code rows = `1952` == max(`1952`) applies the
    text transformation to rows whose value is equal to the maximum value in that
    year.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数使用`cell_text()`将文本颜色改为橙色，并加粗。在`cells_body()`函数内，`locations()`函数指定了哪些列和行会应用这些更改。`columns`参数简单地设置为正在更改值的年份，但设置`rows`则需要更复杂的公式。代码`rows
    = 1952 == max(1952)`将文本转化应用于该年最大值的行。
- en: Repeating this code for the 1972 and 1992 columns generates the result shown
    in [Figure 5-9](chapter5.xhtml#fig5-9) (which represents the orange values in
    grayscale for print purposes).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对1972年和1992年列重复这一代码，生成的结果如[图5-9](chapter5.xhtml#fig5-9)所示（该图使用灰度表示橙色值，以便打印）。
- en: '![](../images/fig5-9.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-9.jpg)'
- en: 'Figure 5-9: Using color to highlight important values, such as the largest
    number in each year'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-9：使用颜色突出显示重要值，比如每年最大值
- en: The gt package makes it straightforward to add color to highlight outlier values.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`gt`包使得为异常值添加颜色变得简单明了。'
- en: Add a Data Visualization Where Appropriate
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在适当的地方添加数据可视化
- en: 'Adding color to highlight outliers is one way to help guide the reader’s attention.
    Another way is to incorporate graphs into tables. Tom Mock developed an add-on
    package for gt called gtExtras that makes it possible to do just this. For example,
    say you want to show how the GDP of each country changes over time. To do that,
    you can add a new column that visualizes this trend using a *sparkline* (essentially,
    a simple line chart):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了突出显示异常值，添加颜色是引导读者注意力的一种方法。另一种方法是将图表嵌入到表格中。Tom Mock为gt开发了一个名为gtExtras的插件包，使得这一切变得可能。例如，假设你想展示各国GDP随时间变化的情况。为此，你可以添加一个新列，通过*sparkline*（本质上是一个简单的折线图）来可视化这一趋势：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The gt_plt_sparkline() function requires you to provide the values needed to
    make the sparkline in a single column. To accomplish this, the code creates a
    variable called Trend, using group_by() and mutate(), to hold a list of the values
    for each country. For Afghanistan, for example, Trend would contain 779.4453145,
    739.9811058, and 649.3413952\. Save this data as an object called gdp_with_trend.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`gt_plt_sparkline()`函数要求你提供所需的值，并将这些值放在单独的一列中以生成sparkline。为此，代码使用`group_by()`和`mutate()`创建一个名为Trend的变量，用于存储每个国家的值列表。例如，对于阿富汗，Trend将包含779.4453145、739.9811058和649.3413952。将这些数据保存为名为gdp_with_trend的对象。'
- en: 'Now you create your table as before but add the gt_plt_sparkline() function
    to the end of the code. Within this function, specify which column to use to create
    the sparkline (Trend) as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像之前一样创建表格，但在代码的末尾添加`gt_plt_sparkline()`函数。在这个函数内，指定使用哪一列来创建sparkline（趋势图），如下所示：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Setting label = FALSE removes text labels that gt_plt_sparkline() adds by default,
    then adds a palette argument to make the sparkline black and all other elements
    of it transparent. (By default, the function will make different parts of the
    sparkline different colors.) The stripped-down sparkline in [Figure 5-10](chapter5.xhtml#fig5-10)
    allows the reader to see the trend for each country at a glance.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`label = FALSE`会移除`gt_plt_sparkline()`默认添加的文本标签，然后添加一个调色板参数，使得sparkline为黑色，其他元素则保持透明。（默认情况下，该函数会使sparkline的不同部分采用不同颜色。）[图5-10](chapter5.xhtml#fig5-10)中的简化版sparkline使得读者可以一目了然地看到每个国家的趋势。
- en: '![](../images/fig5-10.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-10.jpg)'
- en: 'Figure 5-10: A table with sparklines can show changes in data over time.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-10：带有sparklines的表格能够展示数据随时间变化的情况。
- en: The gtExtras package can do much more than merely create sparklines. Its set
    of theme functions allows you to make your tables look like those published by
    FiveThirtyEight, the *New York Times*, the *Guardian*, and other news outlets.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`gtExtras`包不仅仅可以创建sparklines。它的主题函数集让你能够将表格设计成类似于FiveThirtyEight、《纽约时报》、《卫报》和其他新闻媒体发布的风格。'
- en: As an example, try removing the formatting you’ve applied so far and instead
    use the gt_theme_538() function to style the table. Then take a look at tables
    on the FiveThirtyEight website. You should see similarities to the one in [Figure
    5-11](chapter5.xhtml#fig5-11).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，试着移除你目前应用的所有格式，而改为使用`gt_theme_538()`函数来为表格设置样式。然后，浏览一下FiveThirtyEight网站上的表格。你应该能看到与[图5-11](chapter5.xhtml#fig5-11)中的表格相似之处。
- en: '![](../images/fig5-11.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-11.jpg)'
- en: 'Figure 5-11: A table redone in the FiveThirtyEight style'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-11：按照FiveThirtyEight风格重新制作的表格
- en: Add-on packages like gtExtras are common in the table-making landscape. If you’re
    working with the reactable package to make interactive tables, for example, you
    can also use the reactablefmtr to add interactive sparklines, themes, and more.
    You’ll learn more about making interactive tables in [Chapter 9](chapter9.xhtml).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 像gtExtras这样的附加包在表格制作中很常见。例如，如果你使用reactable包来制作互动表格，你还可以使用reactablefmtr来添加互动火花图、主题等。你将在[第9章](chapter9.xhtml)中学习更多关于制作互动表格的内容。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Many of the tweaks you made to your table in this chapter are quite subtle.
    Changes like removing excess grid lines, bolding header text, right-aligning numeric
    values, and adjusting the level of precision can often go unnoticed, but if you
    skip them, your table will be far less effective. The final product isn’t flashy,
    but it does communicate clearly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中你对表格所做的许多调整都非常微妙。像是去除多余的网格线、加粗标题文字、将数字值右对齐以及调整精度水平等更改，往往会被忽视，但如果跳过这些步骤，表格的效果会大打折扣。最终产品虽然不花哨，但能够清晰地传达信息。
- en: You used the gt package to make your high-quality table, and as you’ve repeatedly
    seen, this package has good defaults built in. Often, you don’t need to change
    much in your code to make effective tables. But no matter which package you use,
    it’s essential to treat tables as worthy of just as much thought as other kinds
    of data visualization.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用了gt包来制作高质量的表格，正如你多次看到的，这个包自带了一些优秀的默认设置。通常你不需要在代码中做太多改动就能制作有效的表格。但无论使用哪个包，重要的是要把表格当作数据可视化的一部分，给予同样的重视。
- en: In [Chapter 6](chapter6.xhtml), you’ll learn how to create reports using R Markdown,
    which can integrate your tables directly into the final document. What’s better
    than using just a few lines of code to make publication-ready tables?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](chapter6.xhtml)中，你将学习如何使用R Markdown创建报告，它可以将表格直接集成到最终文档中。用几行代码就能生成出版级别的表格，岂不是更好？
- en: Additional Resources
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外资源
- en: Thomas Mock, “10+ Guidelines for Better Tables in R,” *The MockUp*, September
    4, 2020, *[https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/](https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/)*.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thomas Mock, “R中更好的表格的10+条准则，”*The MockUp*，2020年9月4日，*[https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/](https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/)*。
- en: Albert Rapp, “Creating Beautiful Tables in R with {gt},” November 27, 2022,
    *[https://gt.albert-rapp.de](https://gt.albert-rapp.de)*.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Albert Rapp, “在R中使用{gt}创建美丽的表格，”2022年11月27日，*[https://gt.albert-rapp.de](https://gt.albert-rapp.de)*。
- en: Jon Schwabish, “Ten Guidelines for Better Tables,” *Journal of Benefit-Cost
    Analysis* 11, no. 2 (2020), *[https://doi.org/10.1017/bca.2020.11](https://doi.org/10.1017/bca.2020.11)*.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jon Schwabish, “十条更好的表格准则，”*《成本效益分析杂志》* 11卷，第2期（2020），*[https://doi.org/10.1017/bca.2020.11](https://doi.org/10.1017/bca.2020.11)*。
