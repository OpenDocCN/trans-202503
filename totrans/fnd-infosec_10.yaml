- en: '10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NETWORK SECURITY
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A computer network is a group of computers or other devices that are connected
    to facilitate the sharing of resources. You likely depend on a variety of networks
    to function daily. Networks control and enable modern automobiles, airplanes,
    medical devices, refrigerators, and countless other devices. Networks provide
    the ability for you to communicate, navigate road systems, go to school, play
    games, watch TV, and listen to music. Without a secure and stable system of networks,
    many of the daily conveniences that you enjoy would be made considerably more
    difficult to interact with or just fail to function entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Your networks may face threats from attackers; they may also suffer from misconfigurations
    of their infrastructure or network-enabled devices, or even from simple outages.
    Most of the world is network dependent, so losing network connectivity and the
    services it provides can suffocate you. At worst, it can devastate your business.
  prefs: []
  type: TYPE_NORMAL
- en: In January 2017, civil unrest in Cameroon reached a high point when large-scale
    protests erupted over the dominance of French in a country where both French and
    English are official languages. In what appears to have been an attempt to rein
    in the protestors, the government deliberately disconnected large, primarily English-speaking
    areas of the country from the global networks that comprise the internet. These
    regions remained offline for 93 days before the government restored access.[¹](notes.xhtml#ch10fn1)
    These types of outages can have wide-reaching impacts across industries, disrupting
    medical care, communications, employment, education, shopping, and many other
    aspects of people’s lives.
  prefs: []
  type: TYPE_NORMAL
- en: Although the situation in Cameroon may be an extreme example, smaller network
    outages and other malfunctions cause serious impacts all over the world every
    day. Some of these problems may result from technical issues. Others may result
    from the specific *distributed denial-of-service (DDoS) attacks* (DoS attacks
    that originate from many distributed sources) I’ll discuss in this chapter, or
    from temporary causes entirely unknown to the network users.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the infrastructure and devices you can put in place
    to secure your networks and the methods you can use to protect the network traffic
    itself. You’ll also learn about tools that can help verify your security.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting Networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use two methods to protect your networks and network resources. One
    option is to design your networks securely by laying them out so they’re resistant
    to attack or technical mishap. You can also implement a variety of devices, such
    as firewalls and intrusion detection systems, in and around your networks.
  prefs: []
  type: TYPE_NORMAL
- en: '*Designing Secure Networks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By designing your networks properly, you can prevent some attacks entirely,
    mitigate others, and, when you fail, fail in a graceful way.
  prefs: []
  type: TYPE_NORMAL
- en: One strategy for reducing the impact of attacks is *network segmentation*. When
    you segment a network, you divide it into multiple smaller networks called *subnets*.
    You can control the flow of traffic between subnets, allowing or disallowing it
    based on a variety of factors or even blocking the flow of traffic entirely if
    necessary. Properly segmented networks can boost network performance by containing
    certain traffic to the portions of the network that need to see it, and they can
    help you localize technical network issues. Additionally, network segmentation
    can prevent unauthorized network traffic or attacks from reaching particularly
    sensitive portions of the network.
  prefs: []
  type: TYPE_NORMAL
- en: You can also secure your networks by funneling traffic through *choke points*,
    or locations where you can inspect, filter, and control the traffic. The choke
    points might be the routers that move traffic from one subnet to another, the
    firewalls that filter traffic through your networks or portions of your networks,
    or the application proxies that filter the traffic for applications such as web
    or email. I’ll discuss some of these devices at greater length in the next section
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating redundancies when designing your networks can also help mitigate issues.
    Certain technical failures or attacks may render portions of your technology—including
    networks, network infrastructure devices, or border devices such as firewalls—unusable.
    For example, if one of your border devices is subjected to a DDoS attack, you
    can’t do much to stop it. You can, however, switch to a different internet connection
    or route traffic through a different device until you can come to a longer-term
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: '*Using Firewalls*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *firewall* is a mechanism for maintaining control over the traffic that flows
    in and out of networks. One of the first papers to discuss the idea was “Simple
    and Flexible Datagram Access Controls,” written in 1989 by Jeffrey Mogul,[²](notes.xhtml#ch10fn2)
    then at Digital Equipment Corporation. In 1992, Digital Equipment Corporation
    created first commercial firewall, the DEC SEAL.[³](notes.xhtml#ch10fn3)
  prefs: []
  type: TYPE_NORMAL
- en: You typically place firewalls at points where the level of trust changes, like
    the border between an internal network and the internet, as shown in [Figure 10-1](#ch10fig1).
    You may also install a firewall on your internal network to prevent unauthorized
    users from accessing network traffic of a sensitive nature.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/10fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Firewall placement*'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the firewalls in use today work by examining the *packets* (blocks of
    data) moving through the network to determine which ones it should allow in or
    out. They base their decision on a variety of factors. For example, they might
    allow or disallow traffic depending on the protocol being used to let web and
    email traffic pass but block everything else. I’ll go over the types of firewalls
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Packet Filtering
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In packet filtering, one of the oldest and simplest firewall technologies, the
    firewall looks at the contents of each packet in the traffic individually and
    either allows or disallows it based on the source and destination IP addresses,
    the port number, and the protocol being used.
  prefs: []
  type: TYPE_NORMAL
- en: Since the packet filtering firewall examines each packet individually and not
    in concert with the rest of the packets making up the traffic, an attacker could
    slip attacks through this type of firewall by sending attack traffic that spans
    more than one packet. To find these, you need to employ more complex methods of
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: Stateful Packet Inspection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Stateful packet inspection firewalls, or stateful firewalls, function on the
    same general principle as packet filtering firewalls, but they can keep track
    of the traffic at a granular level. While a packet filtering firewall examines
    an individual packet out of context, a stateful firewall can watch the traffic
    over a given connection. A connection is defined by the source and destination
    IP addresses, the ports being used, and the already existing network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: A stateful firewall uses a state table to keep track of the connection state
    (the normal sequence of traffic) and allows traffic that is part of a new or already
    established connection only. This can help to prevent some intentionally disruptive
    attack traffic that doesn’t resemble a proper and expected connection. Most stateful
    firewalls can also function as packet filtering firewalls, and they often combine
    the two forms of filtering. In addition to packet filtering features, stateful
    firewalls might also identify and track the traffic related to a user-initiated
    connection to a website, and they’ll know when the connection has been closed,
    meaning no further legitimate traffic would be present.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Packet Inspection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Deep packet inspection firewalls add yet another layer of intelligence to your
    firewall capabilities because they can analyze the actual content of the traffic
    that flows through them. While packet filtering firewalls and stateful firewalls
    can look at only the structure of the network traffic to filter out attacks and
    undesirable content, deep packet inspection firewalls can reassemble the contents
    of the traffic to see what it will deliver to the application for which it’s destined.
  prefs: []
  type: TYPE_NORMAL
- en: To use an analogy, when you ship a package, the parcel carrier will look at
    the size and shape of the package, how much it weighs, how it’s wrapped, and the
    sending and destination addresses. This is generally what packet filter firewalls
    and stateful firewalls do. In deep packet inspection, the parcel carrier would
    do all of this as well as open the package, inspect its contents, and then make
    a judgment about whether to ship it.
  prefs: []
  type: TYPE_NORMAL
- en: Although this technology has great promise for blocking many attacks, it also
    raises privacy concerns. In theory, someone in control of a deep packet inspection
    device could read every one of your email messages, see every web page exactly
    as you saw it, and easily listen in on your instant messaging conversations.
  prefs: []
  type: TYPE_NORMAL
- en: Proxy Servers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Proxy servers are special kinds of firewall that pertain specifically to applications.
    These servers provide security and performance features, generally for an application,
    such as mail or web browsing. Proxy servers can provide a layer of security for
    the devices behind them by serving as choke points, and they allow you to log
    the traffic that goes through them for later inspection. They are a single source
    for requests.
  prefs: []
  type: TYPE_NORMAL
- en: Many companies rely on proxy servers to keep spam from reaching their users’
    email accounts and lowering productivity, to keep employees from visiting websites
    that might have objectionable material, and to filter out traffic that might indicate
    the presence of malware.
  prefs: []
  type: TYPE_NORMAL
- en: DMZs
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A *demilitarized zone* (DMZ) is a layer of protection that separates a device
    from the rest of a network. You accomplish this by using multiple layers of firewalls,
    as shown in [Figure 10-2](#ch10fig2). In this case, the internet-facing firewall
    might allow traffic through to a web server sitting in the DMZ, but the internal
    firewall would not allow traffic from the internet through to the internal servers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/10fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: A DMZ*'
  prefs: []
  type: TYPE_NORMAL
- en: The DMZ creates a zone that allows public-facing servers to be accessed from
    the outside while both providing a measure of protection for them and restricting
    traffic from those servers from penetrating the more sensitive portions of your
    network. This helps to prevent the scenario where attackers compromise your public-facing
    servers and use them to attack the other servers behind them.
  prefs: []
  type: TYPE_NORMAL
- en: '*Implementing Network Intrusion Detection Systems*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Intrusion detection systems (IDS)* are hardware or software tools that monitor
    networks, hosts, or applications for unauthorized activity. You can classify IDS
    based on the way they detect attacks: signature-based detection and anomaly-based
    detection.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Signature-based IDS* work like most antivirus systems. They maintain a database
    of the signatures that might signal an attack and compare incoming traffic to
    those signatures. In general, this method works well—except when an attack is
    new or has been specifically constructed to not match existing attack signatures.
    One of the large drawbacks to this method is that if you don’t have a signature
    for the attack, you may not see it at all. In addition to this, the attacker crafting
    the traffic may have access to the same IDS tools you’re using and may be able
    to test the attack against them to specifically avoid your security measures.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Anomaly-based IDS* typically work by determining the normal kinds of traffic
    and activity taking place on the network. They then measure the present traffic
    against this baseline in order to detect patterns that aren’t present in the traffic
    normally. This method can detect new attacks, or attacks that have been deliberately
    assembled to avoid IDS, very well. On the other hand, it may produce a larger
    number of false positives than a signature-based IDS because it might flag legitimate
    activity that causes unusual traffic patterns or spikes in traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: You can, of course, install an IDS that uses both the signature-based and anomaly-based
    methods, giving you some of the advantages of each type of detection. This would
    detect attacks more reliably, although it would perhaps operate a bit more slowly
    and cause a lag in detection.
  prefs: []
  type: TYPE_NORMAL
- en: You typically attach a network IDS to a location where it can monitor the traffic
    going by, but you need to place them carefully so the quantity of data to examine
    won’t overloaded it. Putting a network IDS behind another filtering device, such
    as a firewall, can eliminate some of the obviously unwanted traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Since network IDS typically examine a large amount of traffic, they can generally
    do only a relatively cursory inspection of it, and they may miss some types of
    attacks, especially those that are specifically crafted to pass through such inspections.
    *Packet crafting attacks* use packets of traffic that carry attacks or malicious
    code but are designed to avoid detection by IDS, firewalls, and other similar
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting Network Traffic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to protecting your networks from intrusion, you need to separately
    protect the traffic that flows over them. When you send data over networks that
    aren’t secure or trusted, an eavesdropper can glean a large amount of information
    from what you send. If you use applications or protocols that don’t encrypt the
    information they’re sending, you may end up giving away your login credentials,
    credit card numbers, banking information, and other data to anyone who happens
    to be listening.
  prefs: []
  type: TYPE_NORMAL
- en: Attackers can intercept data from both wired and wireless networks, often with
    little effort, depending on the design of the network. But although insecure networks
    are a security problem, they’re not an insurmountable one, if you have the right
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: '*Using Virtual Private Networks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Virtual private networks (VPNs) can help you send sensitive traffic over insecure
    networks. Often called a tunnel, a *VPN connection* is an encrypted connection
    between two points. You usually create the connection using a VPN client application
    on one end and a device called a *VPN concentrator* on the other end—a client
    and server, in simple terms. The client uses the VPN client application to authenticate
    to the VPN concentrator, usually over the internet. Once you’ve established a
    connection, all traffic exchanged from the network interface connected to the
    VPN flows through the encrypted VPN tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: VPNs can allow remote workers to access the internal resources of their organization;
    in that case, the worker’s device acts as though it were connected directly to
    the organization’s internal network.
  prefs: []
  type: TYPE_NORMAL
- en: You could also use VPNs to protect or anonymize the traffic you’re sending over
    untrusted connections. Companies such as StrongVPN (*[https://strongvpn.com/](https://strongvpn.com/)*)
    sell their services to the public for exactly such purposes. You might use these
    to keep your internet service provider from logging the contents of your traffic,
    stop people on the same network from eavesdropping on your activity, or obscure
    your geographical location and bypass location-oriented blocking. People who use
    peer-to-peer (P2P) file-sharing services to share pirated media sometimes hide
    their traffic and IP addresses with VPNs.
  prefs: []
  type: TYPE_NORMAL
- en: '*Protecting Data over Wireless Networks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you use wireless networks to send your data, you face several specific security
    risks. Today, a wide variety of places provide free wireless internet access.
    In general, public wireless networks are set up without a password or encryption
    of any kind—measures you’d normally put in place to protect the confidentiality
    of the traffic flowing over the network. Even in cases where accessing a network
    does require a password, like in a hotel, everyone else connected to the hotel’s
    network could potentially see your data. The present record for the range of an
    unamplified 802.11 wireless connection is about 238 miles.[⁴](notes.xhtml#ch10fn4)
  prefs: []
  type: TYPE_NORMAL
- en: In addition, it’s possible for someone to attach wireless devices to your network
    without your knowledge. Unauthorized wireless access points, commonly known as
    *rogue access points*, present a serious security issue. For example, if you worked
    in an area that banned wireless connections, such as a secure government facility,
    an enterprising individual could decide to bring in an access point of his own
    and install it under his desk to provide wireless access to a nearby outdoor smoking
    area. Although he might have good intentions, his simple action might have invalidated
    an entire set of carefully planned network security measures.
  prefs: []
  type: TYPE_NORMAL
- en: If the rogue access point were set up with poor security or no security at all,
    the well-intentioned access point installer would provide anyone within range
    with an easy path directly into the network that bypassed any border security
    in place. It’s possible that a network IDS might pick up the activity from the
    rogue access point, but you can’t guarantee that it will. A better solution to
    finding rogue equipment is to carefully document the legitimate devices that are
    part of the wireless network infrastructure and regularly scan for additional
    devices using a tool such as Kismet, which I’ll discuss later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to the legitimate and authorized devices on your network, your
    chief method of protecting the traffic that flows through them is with encryption.
    You can separate the encryption used by 802.11 wireless devices—the most common
    family of wireless network devices—into two major categories: Wired Equivalent
    Privacy (WEP) and Wi-Fi Protected Access (WPA, WPA2, and WPA3). WPA3 is the current
    standard. Compared to the other common encryption types, WPA3 makes it easier
    to set up client devices and offers stronger encryption, improving protections
    against brute-force attacks and eavesdropping.[⁵](notes.xhtml#ch10fn5)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using Secure Protocols*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the simplest and easiest ways you can protect your data is by using secure
    protocols. Many of the more common and older protocols, such as File Transfer
    Protocol (FTP) for transferring files, Telnet for interacting with remote machines,
    and Post Office Protocol (POP) for retrieving email, handle data insecurely. Such
    protocols often send sensitive information, such as logins and passwords, in cleartext
    (unencrypted data) over the network. Anyone listening on the network can pick
    up the traffic from such protocols and easily glean the sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Many insecure protocols have secure equivalents, as I’ll discuss at greater
    length in [Chapter 13](ch13.xhtml). In brief, you can often find a secure protocol
    for the type of traffic you want to carry. Instead of operating over the command
    line with Telnet, you can use Secure Shell (SSH), and instead of transferring
    files with FTP, you can use Secure File Transfer Protocol (SFTP), which is based
    on SSH.
  prefs: []
  type: TYPE_NORMAL
- en: SSH is a handy protocol for securing communications because you can send many
    types of traffic over it. You can use it for file transfers and terminal access,
    as mentioned, and to secure traffic in a variety of other situations, such as
    when connecting to a remote desktop, communicating over a VPN, and mounting remote
    file systems.
  prefs: []
  type: TYPE_NORMAL
- en: Network Security Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use a broad variety of tools to improve your network security. Attackers
    rely on many of the same tools to penetrate networks, so by using them to locate
    security holes in your networks, you can preemptively keep the attackers out.
  prefs: []
  type: TYPE_NORMAL
- en: An enormous number of security tools are on the market today, and many of them
    are free or have free alternatives. Many run on Linux operating systems and can
    be a bit difficult to configure. Fortunately, you can use these tools without
    having to set them up by installing one of the Security Live CD distributions,
    which are versions of Linux that come with all the tools preconfigured. One of
    the better-known distributions is Kali, available for download at *[https://www.kali.org/](https://www.kali.org/)*.
  prefs: []
  type: TYPE_NORMAL
- en: As I discussed in earlier chapters, the key to assessing vulnerabilities is
    to conduct assessments thoroughly and regularly enough that you can find the holes
    before the attackers do. If you perform penetration testing only on an occasional
    and shallow basis, you’ll likely not catch all the issues present in your environment.
    Additionally, as you update, add, or remove the various network hardware devices
    and the software running on them, the vulnerabilities present in your environment
    will change. It’s also worth noting that most of the tools you’re likely to use
    will be capable of finding only known issues. New or unpublished attacks or vulnerabilities,
    commonly known as *zero-day attacks*, can still take you by surprise.
  prefs: []
  type: TYPE_NORMAL
- en: '*Wireless Protection Tools*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As I discussed earlier in the chapter, attackers who can access your network
    via a wireless device could bypass all your carefully planned security measures.
    If you don’t take steps to protect against unauthorized wireless devices, such
    as rogue access points, you could allow a large hole in your network security
    and never know it.
  prefs: []
  type: TYPE_NORMAL
- en: You can use several tools to detect wireless devices. One of the best-known
    tools for detecting such devices is called Kismet. It runs on Linux and macOS
    and can also be found on the Kali distribution. Penetration testers commonly use
    Kismet to detect wireless access points and can find them even when they’re well-hidden.
  prefs: []
  type: TYPE_NORMAL
- en: Other tools enable you to break through the different kinds of encryption in
    use on wireless networks. A few of the more common ones, for cracking WEP, WPA,
    and WPA2, include coWPAtty and Aircrack-NG.
  prefs: []
  type: TYPE_NORMAL
- en: '*Scanners*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Scanners, mainstays of the security testing and assessment industry, are hardware
    or software tools that enable you to interrogate devices and networks for information.
    You can divide scanners into two main categories: port scanners and vulnerability
    scanners. These types sometimes overlap, depending on the specific tool.'
  prefs: []
  type: TYPE_NORMAL
- en: In network security, people tend to use scanners as tools for discovering the
    networks and systems in an environment. One of the more famous port scanners is
    a free tool called Nmap, short for network mapper. Although generally considered
    a port scanner, Nmap can also search for hosts on a network, identify the operating
    systems those hosts are running, and detect the versions of the services running
    on any open ports.
  prefs: []
  type: TYPE_NORMAL
- en: '*Packet Sniffers*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A network or protocol analyzer, also known as a packet sniffer or just plain
    sniffer, is a tool that can intercept (or sniff) traffic on a network. The sniffer
    listens for any traffic that your computer or device’s network interface can see,
    whether you were intended to receive it or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sniffer (with a capital S) is a registered trademark of NetScout (previously
    Network General Corporation). I use the term sniffer in the generic sense in this
    book.*'
  prefs: []
  type: TYPE_NORMAL
- en: To use a sniffer, you have to place it on the network in a position that allows
    you to see the traffic you’d like to sniff. In most modern networks, the traffic
    is segmented in such a way that you’ll likely not be able to see much of it at
    all (other than the traffic you generate from your own machine). That means you’ll
    likely need to gain access to one of the higher-level network switches and may
    need to use specialized equipment or configurations to access your target traffic.
  prefs: []
  type: TYPE_NORMAL
- en: A classic sniffer invented in the 1980s, Tcpdump, is a command-line tool. It
    has a few other key features, such as the ability to filter traffic. Tcpdump runs
    only on UNIX-like operating systems, but Windows systems can run a version of
    the tool called WinDump.
  prefs: []
  type: TYPE_NORMAL
- en: Previously known as Ethereal, Wireshark is a fully featured sniffer capable
    of intercepting traffic from a wide variety of wired and wireless sources. It
    has a graphical interface, shown in [Figure 10-3](#ch10fig3), and includes many
    filtering, sorting, and analysis tools. It’s one of the more popular sniffers
    on the market today.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/10fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: Wireshark*'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use Kismet, a tool discussed earlier in this chapter, to sniff
    from wireless networks.
  prefs: []
  type: TYPE_NORMAL
- en: Packet sniffers also come in hardware form, such as the OptiView Portable Network
    Analyzer from Fluke Networks. Although well-equipped portable analyzers such as
    this may provide benefits, such as increased capture capacity and capabilities,
    they’re often expensive, well beyond the budget of the average network or security
    professional.
  prefs: []
  type: TYPE_NORMAL
- en: '*Honeypots*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A somewhat controversial tool in the network security arsenal, a honeypot is
    a system that can detect, monitor, and sometimes tamper with the activities of
    an attacker. You configure them to deliberately display fake vulnerabilities or
    materials that would make the system attractive to an attacker, such as an intentionally
    insecure service, an outdated and unpatched operating system, or a network share
    named “top-secret UFO documents.”
  prefs: []
  type: TYPE_NORMAL
- en: When attackers access the system, the honeypot monitors their activity without
    their knowledge. You might set up a honeypot to provide an early warning system
    for a corporation, to discover an attacker’s methods, or as an intentional target
    to monitor the activities of malware in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: You can also expand honeypots into larger structures by creating networks of
    them, called *honeynets*. A honeynet connects multiple honeypots with varying
    configurations and vulnerabilities, generally with some sort of centralized instrumentation
    for monitoring all the honeypots on the network. Honeynets can be particularly
    useful for understanding malware activity on a large scale since you can reproduce
    a variety of operating systems and vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: An excellent resource for more information on honeypots and honeynets is the
    Honeynet Project at *[https://www.honeynet.org/](https://www.honeynet.org/)*.
    The Honeynet Project provides access to a variety of resources, including software,
    the results of research, and numerous papers on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: '*Firewall Tools*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In your kit of network tools, you may also find it useful to include tools that
    can map the topology of firewalls and help you locate vulnerabilities in them.
    Scapy (*[https://github.com/secdev/scapy/](https://github.com/secdev/scapy/)*)
    is a well-known and useful tool for such efforts. It can construct specially crafted
    Internet Control Message Protocol (ICMP) packets that evade some of the normal
    measures put in place to prevent you from seeing the devices that are behind a
    firewall and may allow you to enumerate some of them. You can also script Scapy’s
    abilities to manipulate network traffic and test how firewalls and IDS respond,
    which could give you an idea of the rules on which they’re operating.
  prefs: []
  type: TYPE_NORMAL
- en: You could use some of the other tools I’ve discussed in this section to test
    the security of your firewalls, as well. You can use port and vulnerability scanners
    to look at them from the outside to find any ports that are unexpectedly open
    or any services running on your open ports that are vulnerable to known attacks.
    You can also use sniffers to examine the traffic that is entering and leaving
    firewalls, presuming that you can get such a tool in place in a network location
    that will enable you to see the traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you protect your networks, you should do so from a variety of angles. You
    should use secure network design to ensure that you’ve properly segmented your
    networks, that you have choke points to monitor and control traffic, and that
    you create redundancies where you need them. You should also implement security
    devices such as firewalls and IDS to protect yourself both inside and outside
    the networks.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to protecting the networks themselves, you also need to protect
    your network traffic. To do this, you can use VPNs to secure your connections
    when using untrusted networks, implement security measures specific to wireless
    networks, and apply secure protocols.
  prefs: []
  type: TYPE_NORMAL
- en: A variety of security tools can help you keep your networks secure. When working
    with wireless networks, you can use Kismet. You can also listen in on network
    traffic with Wireshark or Tcpdump, scan for devices on your networks with Nmap,
    and test your firewalls using Scapy and other similar utilities. You can also
    place devices called honeypots on your networks specifically to attract the attention
    of attackers and then study them and their tools.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For what might you use the tool Kismet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the concept of segmentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three main types of wireless encryption?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool might you use to scan for devices on a network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which tools can you use to sniff traffic on a wireless network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why would you use a honeypot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the difference between signature and anomaly detection in IDS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What would you use if you needed to send sensitive data over an untrusted network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What would you use a DMZ to protect?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a stateful firewall and a deep packet inspection
    firewall?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
