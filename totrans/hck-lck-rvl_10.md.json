["```\n**sudo apt install python3 python3-pip python3-venv**\n```", "```\n**brew install python3**\n```", "```\nprint(\"hacks\")\n\nprint(\"leaks\")\n\nrevelations = \"revelations\".upper()\n\nprint(revelations)\n```", "```\nmicah@trapdoor chapter-7 % **python3 exercise-7-2.py**\n```", "```\nhacks\n\nleaks\n\nREVELATIONS\n```", "```\nmicah@trapdoor ~ % **python3**\n\n`--snip--`\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n>>>\n```", "```\n>>> **print(\"Hello World!\")**\n\nHello World!\n\n>>>\n```", "```\n>>> **# This is a comment**\n\n>>> **x = 10 # This sets the variable x to the value 10**\n\n>>> **print(x)**\n\n10\n```", "```\n1 + 1\n\n100 / 5\n\nx * 3 + 5\n```", "```\n>>> **1** **+** **1**\n\n2\n\n>>> **100 / 5**\n\n20.0\n\n>>> **3.14 * 2**\n\n6.28\n```", "```\n>>> **100 - 12 * 2**\n\n76\n\n>>> **(100 - 12) * 2**\n\n176\n```", "```\n>>> **15 / 0**\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nZeroDivisionError: division by zero\n```", "```\n>>> **price = 100**\n\n>>> **sales_tax** **= .05**\n\n>>> **total = price + (price * sales_tax)**\n\n>>> **print(total)**\n\n105.0\n```", "```\n>>> **x * 10**\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nNameError: name 'x' is not defined\n```", "```\ntotal = total + 10\n```", "```\ntotal += 10\n```", "```\n>>> **\"apple\"** \n\n'apple'\n```", "```\n>>> **'apple'** # The same string with single quotes\n\n'apple'\n```", "```\n>>> **\"She's finished!\"**\n\n\"She's finished!\"\n```", "```\n>>> **'She said, \"Hello\" '**\n\n'She said, \"Hello\" '\n```", "```\n>>> **\"She said, \\\"Hello\\\" \"**\n```", "```\n>>> **'She\\'s finished!'**\n```", "```\n>>> **first_name = \"****`Micah`****\"**\n\n>>> **last_name = \"****`Lee`****\"**\n```", "```\n>>> **print(f\"{first_name} {last_name}\")**\n\nMicah Lee\n\n>>> **full_name = f\"{first_name} {last_name}\"**\n\n>>> **print(f\"{first_name}'s full name is {full_name}, but he goes by {first_name}\")**\n\nMicah's full name is Micah Lee, but he goes by Micah\n```", "```\n>>> **print(f\"1 + 2 + 3 + 4 + 5 = {1 + 2** **+ 3 + 4 + 5}\")**\n\n1 + 2 + 3 + 4 + 5 = 15\n```", "```\n**name** **= \"****`Micah`****\"**\n\n**age_years =** **`38`**\n```", "```\n**age_months = age_years * 12**\n```", "```\n**age_days =** **age_years * 365**\n```", "```\n**age_hours = age_days * 24**\n\n**age_minutes = age_hours * 60**\n\n**age_seconds = age_minutes * 60**\n```", "```\n>>> **number = 1000000**\n\n>>> **print(f\"the number is: {number}\")**\n\nthe number is: 1000000\n\n>>> **print(f\"the number is: {number:,}\")**\n\nthe number is: 1,000,000\n```", "```\nprint(f\"{name} is {age_years:,} years old\")\n\nprint(f\"That would be {age_months:,} months old\")\n\nprint(f\"Which is {age_days:,} days old\")\n\nprint(f\"Which is {age_hours:,} hours old\")\n\nprint(f\"Which is {age_minutes:,} minutes old\")\n\nprint(f\"Which is {age_seconds:,} seconds old\")\n```", "```\nmicah@trapdoor chapter-7 % **python3 exercise-7-3.py**\n\nMicah is 38 years old\n\nThat would be 456 months old\n\nWhich is 13,870 days old\n\nWhich is 332,880 hours old\n\nWhich is 19,972,800 minutes old\n\nWhich is 1,198,368,000 seconds old\n```", "```\n[1, 2, 3]\n```", "```\n[\"one\", \"two\", \"three\"]\n```", "```\n[]\n```", "```\n>>> **hebrew_letters = [\"aleph\", \"bet\", \"gimel\", \"dalet\", \"he\", \"vav\", \"zayin\",**\n\n**\"chet\", \"tet\", \"yod\", \"kaf\", \"lamed\", \"mem\", \"nun\", \"samech\", \"ayin\", \"pe\",**\n\n**\"tsadi\", \"qof\", \"resh\", \"shin\", \"tav\"]**\n```", "```\n>>> **print(hebrew_letters)**\n\n['aleph', 'bet', 'gimel', 'dalet', 'he', 'vav', 'zayin', 'chet', 'tet', 'yod',\n\n'kaf', 'lamed', 'mem', 'nun', 'samech', 'ayin', 'pe', 'tsadi', 'qof', 'resh',\n\n'shin', 'tav']\n```", "```\nhebrew_letters = [\n\n    \"aleph\",\n\n`--snip--`\n\n    \"tav\"\n\n]\n```", "```\n>>> **print(hebrew_letters[0])**\n\naleph\n\n>>> **print(hebrew_letters[1])**\n\nbet\n```", "```\n>>> **print(hebrew_letters[-1])**\n\ntav\n\n>>> **print(hebrew_letters[-2])**\n\nshin\n```", "```\n>>> **print(len(hebrew_letters))**\n\n22\n```", "```\n>>> **length_of_hebrew_alphabet = len(hebrew_letters)**\n\n>>> **print(length_of_hebrew_alphabet)**\n\n22\n```", "```\n>>> **print([1,2,3][1])**\n\n2\n```", "```\n>>> **favorite_colors = [\"red\", \"green\", \"blue\"]**\n\n>>> **favorite_colors.append(\"black\")**\n\n>>> **print(favorite_colors)**\n\n['red', 'green', 'blue', 'black']\n```", "```\nfor `variable_name` in `list_name`:\n```", "```\n>>> **for letter in hebrew_letters:**\n\n...     **print(letter)**\n\n...\n```", "```\naleph\n\nbet\n\n`--snip--`\n\nshin\n\ntav\n```", "```\n>>> **for letter in hebrew_letters:**\n\n...     **count = len(letter)**\n\n...     **print(f\"The letter {letter} has {count} characters\")**\n\n...\n\nThe letter aleph has 4 characters\n\nThe letter bet has 3 characters\n\nThe letter gimel has 5 characters\n\n`--snip--`\n\nThe letter resh has 4 characters\n\nThe letter shin has 4 characters\n\nThe letter tav has 3 characters\n```", "```\n>>> **word = \"hola\"**\n\n>>> **for character in word:**\n\n...     **print(character)**\n\n...\n\nh\n\no\n\nl\n\na\n```", "```\n>>> **100 > 5**\n\nTrue\n\n>>> **100 < 5**\n\nFalse\n\n>>> **100 > 100**\n\nFalse\n\n>>> **100 >= 100**\n\nTrue\n\n>>> **0.5 <** **1**\n\nTrue\n\n>>> **0.999999 == 1**\n\nFalse\n```", "```\n>>> **\"Alice\" == \"Bob\"**\n\nFalse\n\n>>> **\"Alice\" != \"Bob\"**\n\nTrue\n\n>>> **\"Alice\" < \"Bob\"**\n\nTrue\n\n>>> **\"Alice\" > \"Bob\"**\n\nFalse\n```", "```\n>>> **name1 = \"Vladimir Putin\"**\n\n>>> **name2 = \"vladimir putin\"**\n\n>>> **name1 == name2**\n\nFalse\n\n>>> **name1.lower() == name2.lower()**\n\nTrue\n```", "```\n>>> **password = \"letmein\"**\n\n>>> **if password == \"letmein\":**\n\n...     **print(\"ACCESS GRANTED\")**\n\n...     **print(\"Welcome\")**\n\n...\n\nACCESS GRANTED\n\nWelcome\n\n>>>\n```", "```\n>>> **password = \"yourefired\"**\n\n>>> **if password == \"letmein\":**\n\n...     **print(\"ACCESS GRANTED\")**\n\n...     **print(\"Welcome\")**\n\n...\n\n>>>\n```", "```\nif password == \"letmein\":\n\n    print(\"ACCESS GRANTED\")\n\n    print(\"Welcome\")\n\nelse:\n\n    print(\"ACCESS DENIED\")\n```", "```\nif password == \"letmein\":\n\n    print(\"ACCESS GRANTED\")\n\n    print(\"Welcome\")\n\nelif password == \"open sesame\":\n\n    print(\"SECRET AREA ACCESS GRANTED\")\n\nelse:\n\n    print(\"ACCESS DENIED\")\n```", "```\nif password == \"letmein\":\n\n    print(\"ACCESS GRANTED\")\n\n    print(\"Welcome.\")\n\nelse:\n\n    if password == \"open sesame\":\n\n        print(\"SECRET AREA ACCESS GRANTED\")\n\n    else:\n\n        print(\"ACCESS DENIED\")\n```", "```\nfavorite_numbers = [7, 13, 42, 101]\n\nif 42 in favorite_numbers:\n\n    print(\"life, the universe, and everything\")\n```", "```\nif 1337 not in favorite_numbers:\n\n    print(\"mess with the best, die like the rest\")\n```", "```\nsentence = \"What happens in the coming hours will decide how bad the Ukraine\n\ncrisis gets for the vulnerable democracy in Russian President Vladimir Putin's\n\nsights but also its potentially huge impact on Americans and an already deeply\n\nunstable world.\"\n\nif \"putin\" in sentence.lower():\n\n    print(\"Putin is mentioned\")\n```", "```\nif country == \"US\" **and** age >= 21:\n\n    print(\"You can legally drink alcohol\")\n\nelse:\n\n    if country != \"US\":\n\n        print(\"I don't know about your country\")\n\n    else:\n\n        print(\"You're too young to legally drink alcohol\")\n```", "```\nif (country == \"US\" and age >= 21) **or** (country == \"Italy\" and age >= 18):\n\n    print(\"You can legally drink alcohol\")\n\nelse:\n\n    if country not in [\"US\", \"Italy\"]:\n\n        print(\"I don't know about your country\")\n\n    else:\n\n        print(\"You're too young to legally drink alcohol\")\n```", "```\nif country == \"US\" and **not** age >= 21:\n\n    print(\"Sorry, the drinking age in the US is 21\")\n```", "```\n>>> **15 / 0**\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nZeroDivisionError: division by zero\n\n>>> **x * 10**\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nNameError: name 'x' is not defined\n```", "```\n>>> **names = [\"Alice\", \"Bob\", \"Charlie\"]**\n\n>>> **print(f\"The first name is {names[0]}\")**\n\nThe first name is Alice\n```", "```\n>>> **names = []**\n\n>>> **print(f\"The first name is {names[0]}\")**\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nIndexError: list index out of range\n```", "```\ntry:\n\n    print(f\"The first name is {names[0]}\")\n\nexcept:\n\n    print(\"The list of names is empty\")\n```", "```\n>>> **names = [\"Alice\", \"Bob\", \"Charlie\"]**\n\n>>> **try:**\n\n...     **print(f\"The first name is {names[0]}\")**\n\n... **except:**\n\n...     **print(\"The list of names is empty\")**\n\n...\n\nThe first name is Alice\n```", "```\n>>> **names = []**\n\n>>> **try:**\n\n...     **print(f\"The first name is {names[0]}\")**\n\n... **except:**\n\n...     **print(\"The list of names is empty\")**\n\n...\n\nThe list of names is empty\n```", "```\ntry:\n\n    `--snip--`\n\nexcept ZeroDivisionError:\n\n    # This catches ZeroDivisionError exception\n\n    `--snip--`\n\nexcept NameError:\n\n    # This catches NameError exceptions\n\n    `--snip--`\n\nexcept IndexError:\n\n    # This catches IndexError exceptions\n\n    `--snip--`\n\nexcept:\n\n    # This catches any other exceptions that haven't been caught yet\n\n    `--snip--`\n```", "```\ntext = \"One does not simply walk into Mordor\"\n```", "```\nalternating_caps_text = \" \"\n```", "```\nshould_be_capital = True\n```", "```\nfor character in text:\n\n    if should_be_capital:\n\n        alternating_caps_text += character.upper()\n\n         should_be_capital = False\n\n    else:\n\n         alternating_caps_text += character.lower()\n\n         should_be_capital = True\n```", "```\nprint(alternating_caps_text)\n```", "```\nmicah@trapdoor chapter-7 % **python3 exercise-7-4.py**\n\nOnE DoEs nOt sImPlY WaLk iNtO MoRdOr\n```", "```\nmicah@trapdoor chapter-7 % **python3 exercise-7-4.py**\n\nThErE ArE VeRy fInE PeOpLe oN BoTh sIdEs\n```", "```\n>>> **def test():**\n\n...     **print(\"this is a test function\")**\n\n...\n\n>>> **test()**\n\nthis is a test function\n```", "```\ndef sum(a, b):\n\n    return a + b\n```", "```\ndef sum(a, b):\n\n    return a + b\n\nred_apples = 10\n\ngreen_apples = 6\n\ntotal_apples = sum(red_apples, green_apples)\n\nprint(f\"There are {total_apples} apples\")\n```", "```\ndef greet(name, num_exclamations=3, num_questions=2):\n\n    exclamations = \"!\" * num_exclamations\n\n    questions = \"?\" * num_questions\n\n    print(f\"Hello {name}{exclamations}{questions}\")\n```", "```\n>>> **greet(\"Alice\")**\n\nHello Alice!!!??\n```", "```\n>>> **greet(\"Bob\", num_exclamations****=5, num_questions=5)**\n\nHello Bob!!!!!?????\n\n>>> **greet(\"Charlie\", num_questions=0)**\n\nHello Charlie!!!\n\n>>> **greet(\"Eve\", num_exclamations=0)**\n\nHello Eve??\n```", "```\ndef count_vowels(s):\n\n    number_of_vowels = 0\n\n    vowels = \"aeiouAEIOU\"\n\n    for c in s:\n\n        if c in vowels:\n\n            number_of_vowels += 1\n\n    return number_of_vowels\n```", "```\n>>> **count_vowels(\"THINK\")**\n\n1\n\n>>> **count_vowels(\"lizard\")**\n\n2\n\n>>> **count_vowels(\"zzzzzzz\")**\n\n0\n\n>>>\n```", "```\n>>> **num_vowels_think = count_vowels(\"THINK\")**\n\n>>> **num_vowels_lizard = count_vowels(\"lizard\")**\n```", "```\n>>> **total_vowels = num_vowels_think + num_vowels_lizard**\n\n>>> **print(total_vowels)**\n\n3\n```", "```\ndef is_exciting(s):\n\n    for character in s:\n\n        if character == \"!\":\n\n            return True\n\n    return False\n```", "```\n>>> **def sum(a, b):**\n\n...     **\"\"\"This function returns the sum of a and b\"\"\"**\n\n...     **return a + b**\n```", "```\nHelp on function sum in module __main__:\n\nsum(a, b)\n\n    This function returns the sum of a and b\n```", "```\ndef alternating_caps(text):\n\n    \"\"\"Returns an aLtErNaTiNg cApS version of text\"\"\"\n```", "```\ndef alternating_caps(text):\n\n    \"\"\"Returns an aLtErNaTiNg cApS version of text\"\"\"\n\n    alternating_caps_text = \" \"\n\n    should_be_capital = True\n\n    for character in text:\n\n        if should_be_capital:\n\n            alternating_caps_text += character.upper()\n\n            should_be_capital = False\n\n        else:\n\n            alternating_caps_text += character.lower()\n\n            should_be_capital = True\n\n    return alternating_caps_text\n```", "```\nprint(\"Hacks, Leaks, and Revelations\")\n\nprint(alternating_caps(\"This book is amazing\"))\n\nprint(alternating_caps(\"I'm learning so much\"))\n```", "```\nmicah@trapdoor chapter-7 % **python3 exercise-7-5.py**\n\nHacks, Leaks, and Revelations\n\nThIs bOoK Is aMaZiNg\n\nI'M LeArNiNg sO MuCh\n```"]