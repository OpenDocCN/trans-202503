- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tic Tac Toe
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-I](Images/Alphabet-I.png)n the last chapter, you saw how computer
    games like *Pac-Man* have been used in ML development. Tic Tac Toe (also known
    as Noughts and Crosses, or Xs and Os) has been used to help people learn about
    ML for even longer.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, Donald Michie, a British AI researcher, designed *MENACE*, the
    *Machine Educable Noughts and Crosses Engine*, in 1960 (see [Figure 13-1](#figure13-1)).
    It was one of the first programs that was able to learn how to play Tic Tac Toe
    perfectly. MENACE was demonstrated using matchboxes and colored glass beads, and
    it is a good reminder that many of the principles behind ML have been developed
    over many decades.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13001](Images/f13001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-1:](#figureanchor13-1) A re-creation of Donald Michie’s Machine
    Educable Noughts and Crosses Engine, or MENACE (source: Matthew Scroggs, [https://commons.wikimedia.org/wiki/File:Mscroggs-MENACE-cropped.jpg](https://commons.wikimedia.org/wiki/File:Mscroggs-MENACE-cropped.jpg))'
  prefs: []
  type: TYPE_NORMAL
- en: Tic Tac Toe is not the only game that has been used to drive AI development,
    however. Chess is another good example. In Chapter 1, I mentioned Deep Blue, the
    IBM computer that beat the chess grandmaster Garry Kasparov. This followed decades
    of work to build computers that could play chess. As early as the 1950s, mathematician
    Alan Turing wrote a paper called “Digital Computers Applied to Games” in which
    he asked, “Could one make a machine to play chess, and to improve its play, game
    by game, profiting from its experience?”
  prefs: []
  type: TYPE_NORMAL
- en: In more recent years, the AI community has turned its attention to more complex
    games, like the board game *Go**. Because of the huge number of potential moves
    and strategies in *Go*, it’s impossible to rely on the “brute-force” approach
    of computers like Deep Blue (which examine all possible future moves and positions).
    Google DeepMind’s computer AlphaGo achieved a milestone in AI research in 2016,
    when it defeated *Go* world champion Lee Sedol.*
  prefs: []
  type: TYPE_NORMAL
- en: '*The tools for creating neural networks are getting easier to use, and our
    computers are becoming faster and more powerful, moving beyond the realms of AI
    students and researchers. If you do a web search for “Super Mario neural network,”
    you’ll find dozens of examples and tutorials of training ML models to play games
    like *Super Mario World*.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, though, we’ll stick to the basics. We’ll be building a simplified
    version of Donald Michie’s MENACE design in Scratch and training an ML model to
    play Tic Tac Toe (see [Figure 13-2](#figure13-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13002](Images/f13002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-2:](#figureanchor13-2) Tic Tac Toe is a great game for ML research.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You probably know how to play Tic Tac Toe already, but let’s quickly try it
    out in Scratch so we can plan how to introduce ML into it.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://machinelearningforkids.co.uk/scratch3/](https://machinelearningforkids.co.uk/scratch3/)
    and click **Project templates** in the top menu bar, as shown in [Figure 13-3](#figure13-3).
  prefs: []
  type: TYPE_NORMAL
- en: In the list of templates, click **Noughts and Crosses**. The template loads
    a simple Tic Tac Toe game in Scratch. Click the Green Flag to give it a try.
  prefs: []
  type: TYPE_NORMAL
- en: You’re placing crosses (X) and the computer is placing noughts (O). The computer
    strategy isn’t very clever, but you’ll be making it more intelligent in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13003](Images/f13003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-3:](#figureanchor13-3) Access the project templates from the top
    menu.'
  prefs: []
  type: TYPE_NORMAL
- en: Try to figure out the rules that the computer is following. The logic for where
    the computer moves next is all in the Code Area, so you can review the scripts
    there to see if you’re right.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways to represent the game board, but to start with we’ll use
    a very simple approach: numbering each of the cells on the board from 1 to 9,
    as shown in [Figure 13-4](#figure13-4).'
  prefs: []
  type: TYPE_NORMAL
- en: '![f13004](Images/f13004.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-4:](#figureanchor13-4) One approach to representing the game board
    is to number the cells.'
  prefs: []
  type: TYPE_NORMAL
- en: The cells are also represented with numbers in the Scratch project template,
    as you can see in [Figure 13-5](#figure13-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13005](Images/f13005.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-5:](#figureanchor13-5) Game board representation defined in the
    Scratch project template'
  prefs: []
  type: TYPE_NORMAL
- en: We also need to describe the positions of the noughts and crosses on the board.
    We’ll want to be able to learn from whoever wins (whether it’s noughts or crosses
    who wins a game), so to keep things clear, we’ll use *player* to describe the
    winning moves and *opponent* to describe the losing moves.
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine that the board looked like [Figure 13-6](#figure13-6) early
    in a game that cross (X) ended up winning.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13006](Images/f13006.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-6:](#figureanchor13-6) An example game board state'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can describe this board as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Top left | Opponent |'
  prefs: []
  type: TYPE_TB
- en: '| Top middle | Player |'
  prefs: []
  type: TYPE_TB
- en: '| Top right | Opponent |'
  prefs: []
  type: TYPE_TB
- en: '| Middle left | Empty |'
  prefs: []
  type: TYPE_TB
- en: '| Middle middle | Empty |'
  prefs: []
  type: TYPE_TB
- en: '| Middle right | Empty |'
  prefs: []
  type: TYPE_TB
- en: '| Bottom left | Empty |'
  prefs: []
  type: TYPE_TB
- en: '| Bottom middle | Empty |'
  prefs: []
  type: TYPE_TB
- en: '| Bottom right | Empty |'
  prefs: []
  type: TYPE_TB
- en: 'We want to train an ML model so that, given the state of a board like this,
    it can choose where to make the next move. To be able to do that, we’ll need training
    examples of decisions that led to a win. Each example will need to include:'
  prefs: []
  type: TYPE_NORMAL
- en: What the board looked like before a move
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What move was made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training examples will be recorded only for moves made by the player that won
    that game. If you (cross) win the game, you want to train the model with the cross
    (X) moves. If the computer (nought) wins the game, you want to train it with the
    nought (O) moves.
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with the *Pac-Man*–style game in the last chapter, the best way to collect
    training examples isn’t by typing them, but by playing the game yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to prepare the training buckets where you’ll store examples
    of the moves you make. You will need nine training buckets: one for each possible
    choice available at any point in the game.'
  prefs: []
  type: TYPE_NORMAL
- en: Go to *https://machinelearningforkids.co.uk/*. Create a new ML project, name
    it `Tic Tac Toe`, and set it to learn to recognize numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Add a value**, type `TopLeft` for the value name, and set **Type of
    value** to **multiple-choice**. Under **Choices**, add three choices: `EMPTY`,
    `PLAYER`, and `OPPONENT`. Then click **Add another value** and add eight more
    multiple-choice values with the same three choices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TopMiddle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TopRight`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MiddleLeft`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MiddleMiddle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MiddleRight`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BottomLeft`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BottomMiddle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BottomRight`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you spell the choices *exactly* the same for all nine values
    so that the computer will know that the choices available are the same for every
    space on the game board. If you make a typing mistake, click the red X beside
    the choice to delete it, and then add it again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you’ve finished, your screen should look like [Figure 13-7](#figure13-7).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13007](Images/f13007.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-7:](#figureanchor13-7) Preparing the project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 13-8](#figure13-8).![f13008](Images/f13008.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-8:](#figureanchor13-8) Click **Train** to prepare the training buckets.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add new label**, as shown in [Figure 13-9](#figure13-9), and create
    nine training buckets to represent the nine cells on the game board. Call them
    `top left`, `top middle`, `top right`, `middle left`, `middle middle`, `middle
    right`, `bottom left`, `bottom middle`, and `bottom right`. (The underscores will
    be added automatically.)![f13009](Images/f13009.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-9:](#figureanchor13-9) Training buckets for Tic Tac Toe'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These buckets are where your training examples will be stored. For example,
    look back at the state of the game board shown in [Figure 13-6](#figure13-6).
    If the player’s next move (X) went in the middle_middle cell, the board’s state
    would be recorded in the training data as shown in [Figure 13-10](#figure13-10).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13010](Images/f13010.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-10:](#figureanchor13-10) A training example for Tic Tac Toe'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is to collect lots and lots of examples to train an ML model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Make**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Scratch 3** and then click **straight into Scratch**, as shown in [Figure
    13-11](#figure13-11).![f13011](Images/f13011.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-11:](#figureanchor13-11) Click **straight into Scratch**, even though
    we don’t have an ML model yet.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the **Noughts and Crosses** project template again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code is the same as when you opened this template before, but now you have
    extra blocks for your project in the Toolbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Stage** backdrop at the bottom right of the screen. In the Code
    Area, find the `setup model labels` script shown in [Figure 13-12](#figure13-12).
    This script sets up constants that are used throughout the project.![f13012](Images/f13012.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-12:](#figureanchor13-12) Find the `setup model labels` script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Toolbox, click **Tic Tac Toe** and drag the blocks with the names of
    your training buckets into the `setup model labels` script as shown in [Figure
    13-13](#figure13-13). Make sure the positions match; for example, drag `top_left`
    into the `set top_left to` block.![f13013](Images/f13013.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-13:](#figureanchor13-13) Populate the script with the training bucket
    names from your project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Scroll in the Code Area to find the `define``add cross moves to training data`
    and `define``add nought moves to training data` script blocks, as shown in [Figure
    13-14](#figure13-14).![f13014](Images/f13014.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-14:](#figureanchor13-14) Find the custom `define` blocks.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Tic Tac Toe** group in the Toolbox, drag an `add training data` block
    into both of the `define` scripts, as shown in [Figure 13-15](#figure13-15).![f13015](Images/f13015.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-15:](#figureanchor13-15) Add training data to both of the `define`
    scripts.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the `add training data` blocks as shown in [Figure 13-16](#figure13-16).
    The orange blocks you need are ready for you in the project template, immediately
    below where they need to go. *Starting from the left*,drag each block into the
    space above it*.*![f13016](Images/f13016.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-16:](#figureanchor13-16) Populate the training data blocks.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-check the scripts. The moves from the history cross lists should appear
    in the `add cross moves to training data` script, as shown in [Figure 13-17](#figure13-17).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13017](Images/f13017.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-17:](#figureanchor13-17) Check that you’ve matched the cross blocks
    with the cross script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Likewise, the moves from the history nought lists should be used in the `add
    nought moves to training data` script.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The names for the spaces on the game board should also match. For example, the
    `top-middle` move goes into the `TopMiddle` space, as shown in [Figure 13-18](#figure13-18).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13018](Images/f13018.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-18:](#figureanchor13-18) Check that you’ve matched the names for
    the game board spaces.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure you fill all of the spaces in the blocks. You’ll need to scroll to
    the right to do this, as you can see in [Figure 13-19](#figure13-19).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13019](Images/f13019.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-19:](#figureanchor13-19) Make sure you fill in all of the spaces.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now find the `when I receive game over` script, as shown in [Figure 13-20](#figure13-20).
    This script runs at the end of each game and is responsible for calling the `add
    moves to training data` scripts you’ve just set up.![f13020](Images/f13020.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-20:](#figureanchor13-20) Find the `when I receive``game over` script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a new `train new machine learning model` block to the end of the `when I
    receive game over` script, as shown in [Figure 13-21](#figure13-21).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13021](Images/f13021.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-21:](#figureanchor13-21) Train a new ML model after every game.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, at the end of every game, the winner’s moves will be added to the training
    buckets, and you’ll use that updated set of training examples to train a new ML
    model. This means that your ML model should get a little smarter, and a little
    better, after every game you play.
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s time to play!
  prefs: []
  type: TYPE_NORMAL
- en: Click the full-screen icon and then the Green Flag in the controls at the top
    right of the screen. Play *one* game of Tic Tac Toe, as shown in [Figure 13-22](#figure13-22).![f13022](Images/f13022.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-22:](#figureanchor13-22) Play a game of Tic Tac Toe.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the game, click **Back to project** and then **Train**. You should see
    all of the moves made by the winning player, as shown in [Figure 13-23](#figure13-23).![f13023](Images/f13023.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-23:](#figureanchor13-23) Compare the training data with the game
    in [Figure 13-22](#figure13-22).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have an ML model, it’s time to update the Scratch game so that
    the computer can use the model to decide where to make its moves. Scroll through
    the Code Area to find the `define``use machine learning model` script, as shown
    in [Figure 13-24](#figure13-24).![f13024](Images/f13024.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 13-24:](#figureanchor13-24) Find the `define use machine learning model`
    script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the script as shown in [Figure 13-25](#figure13-25) so that it uses your
    ML model to recognize the best move for the computer to make.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13025](Images/f13025.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 13-25:](#figureanchor13-25) Add the `recognise numbers``(label)` block
    to the script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag the orange blocks into the `recognise numbers``(label)` block, as shown
    in [Figure 13-26](#figure13-26). As before, these are ready for you in the template
    immediately underneath where they should go. This code block will give the game
    board’s current state to the ML model so that the model can use that information
    to recognize the best next move.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you add all nine blocks, for all nine spaces on the game board,
    and work from left to right. Also be sure that the block names match up. For example,
    `current state top-middle` goes into the `TopMiddle` space.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f13026](Images/f13026.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-26:](#figureanchor13-26) Make sure that you match the block names
    correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: Test Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s time to test your project!
  prefs: []
  type: TYPE_NORMAL
- en: Because you’ve coded your project to learn as you play, you should see the computer
    get better at the game over time. But how can you verify if that actually happens?
  prefs: []
  type: TYPE_NORMAL
- en: One way is to play a lot of games, keep a count of the number of times the computer
    wins, and plot whether the number increases with the amount of training you gave
    the ML model.
  prefs: []
  type: TYPE_NORMAL
- en: I played 300 games of Tic Tac Toe and counted the number of matches that I won,
    lost, and tied. I plotted the results in the bar chart shown in [Figure 13-27](#figure13-27).
    Each column represents 10 games of Tic Tac Toe. Green represents games that I
    won. Orange represents games that ended in a tie. Red represents games won by
    the ML system.
  prefs: []
  type: TYPE_NORMAL
- en: The bar on the far left represents the first 10 games that I played. I won all
    10 of them.
  prefs: []
  type: TYPE_NORMAL
- en: The next bar represents the next 10 games that I played. I won all 10 of those,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: The bar on the far right represents the last 10 games that I played. I won 2
    games, tied 4 games, and lost 4 games.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13027](Images/f13027.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 13-27:](#figureanchor13-27) The results from Tic Tac Toe games that
    I played'
  prefs: []
  type: TYPE_NORMAL
- en: My first 10 games were very easy to win. The computer made foolish moves, and
    I didn’t have to try hard to win. By my last 10 games, however, it was harder
    to win. I had to concentrate and not make a single mistake to win a game. Although
    my feelings can’t be shown on the graph, it *felt* to me like the computer was
    getting better as I played.
  prefs: []
  type: TYPE_NORMAL
- en: Every ML project will go a little differently, so try training your own model
    and measuring how your project learns and improves. Hopefully you’ll see that
    the more training examples you collect, the better your ML model performs. But
    you’ll almost certainly see some variation in that, as I did.
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You created an ML system that learns to play Tic Tac Toe by competing against
    you. The biggest challenge with training the system yourself is the time it takes
    to play hundreds of training games. Are there more efficient ways to get more
    training examples?
  prefs: []
  type: TYPE_NORMAL
- en: One common way is to get more people to help. Imagine if, instead of playing
    the 300 games myself, I had saved my Scratch project and gave the project file
    to 30 friends and asked them to play 10 games each. Dividing the work would have
    made training much easier, as playing only 10 games would be very quick for each
    person.
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine if I could get 300 people to help, or 3,000!
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you can see the benefits of spreading the work of training an ML model
    across a large number of people. This is sometimes described as *crowdsourcing*.
    There are some challenges with that, too, like being able to find a large group
    of people, coordinating them, explaining what you want to all of them, making
    sure they all do what you want and don’t train your ML model to do things you
    don’t want, and so on. But even so, using many people for training is still the
    best option for a lot of complicated projects.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned that Tic Tac Toe, or Noughts and Crosses, has been
    used to help people understand ML for decades. You trained an ML model to recognize
    numbers and built a Tic Tac Toe board with numbered cells representing each move.
    This project was based on the 1960 work of British AI researcher Donald Michie,
    who used matchboxes and glass beads in his MENACE project. Each matchbox represented
    a possible state of the game board, similar to the examples that you collected
    in your training data. The number of beads in the matchboxes was like the number
    of times an example shows up in one of the training buckets.
  prefs: []
  type: TYPE_NORMAL
- en: You also saw the importance of having lots of training examples to improve your
    ML model’s performance over time. Because the training set is updated with the
    winner’s moves after each game, the model gradually gets better and more difficult
    to beat. You learned that it can be useful to crowdsource, or share the work of
    training the model across a large group of people, to save yourself some time
    and effort.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll start to learn about how ML projects can go wrong.*
  prefs: []
  type: TYPE_NORMAL
