- en: '0'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '0'
- en: INTRODUCTION
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Dive into the fabulous world of computer systems! Understanding what a computer
    system is and how it runs your programs can help you to design code that runs
    efficiently and that can make the best use of the power of the underlying system.
    In this book, we take you on a journey through computer systems. You will learn
    how your program written in a high-level programming language (we use C) executes
    on a computer. You will learn how program instructions translate into binary and
    how circuits execute their binary encoding. You will learn how an operating system
    manages programs running on the system. You will learn how to write programs that
    can make use of multicore computers. Throughout, you will learn how to evaluate
    the systems costs associated with program code and how to design programs to run
    efficiently.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 深入探索计算机系统的奇妙世界！理解计算机系统是什么以及它是如何运行程序的，可以帮助你设计高效的代码，并最大限度地利用底层系统的性能。在本书中，我们将带你深入计算机系统的世界。你将了解如何在计算机上执行你用高级编程语言（我们使用C语言）编写的程序。你将学习程序指令如何转化为二进制代码，以及电路如何执行其二进制编码。你将了解操作系统如何管理系统上运行的程序。你还将学习如何编写能够利用多核计算机的程序。在整个过程中，你将学习如何评估与程序代码相关的系统成本，并学习如何设计高效运行的程序。
- en: What Is a Computer System?
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是计算机系统？
- en: 'A *computer system* combines the computer hardware and special system software
    that together make the computer usable by users and programs. Specifically, a
    computer system has the following components (see [Figure 0-1](intro.xhtml#ch0fig1)):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*计算机系统*结合了计算机硬件和特殊的系统软件，这两者共同使计算机可供用户和程序使用。具体来说，计算机系统包含以下组件（参见[图0-1](intro.xhtml#ch0fig1)）：'
- en: '*Input/output (IO) ports* enable the computer to take information from its
    environment and display it back to the user in some meaningful way.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*输入/输出（IO）端口* 使计算机能够从其环境中获取信息，并以某种有意义的方式将其显示给用户。'
- en: '*Central processing unit (CPU)* runs instructions and computes data and memory
    addresses.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*中央处理单元（CPU）* 执行指令并计算数据和内存地址。'
- en: '*Random access memory (RAM)* stores the data and instructions of running programs.
    The data and instructions in RAM are typically lost when the computer system loses
    power.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*随机存取存储器（RAM）* 存储正在运行程序的数据和指令。当计算机系统断电时，RAM中的数据和指令通常会丢失。'
- en: '*Secondary storage devices* like hard disks store programs and data even when
    power is not actively being provided to the computer.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*二级存储设备*（如硬盘）即使在没有提供电力的情况下，也能存储程序和数据。'
- en: '*Operating system (OS)* software layer lies between the hardware of the computer
    and the software that a user runs on the computer. The OS implements programming
    abstractions and interfaces that enable users to easily run and interact with
    programs on the system. It also manages the underlying hardware resources and
    controls how and when programs execute. The OS implements abstractions, policies,
    and mechanisms to ensure that multiple programs can simultaneously run on the
    system in an efficient, protected, and seamless manner.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作系统（OS）* 软件层位于计算机硬件和用户在计算机上运行的软件之间。操作系统实现了编程抽象和接口，使用户能够轻松地运行和与系统上的程序交互。它还管理底层硬件资源并控制程序执行的方式和时机。操作系统实现了抽象、策略和机制，确保多个程序可以在系统上高效、受保护且无缝地同时运行。'
- en: The first four of these define the *computer hardware* component of a computer
    system. The last item (the operating system) represents the main software part
    of the computer system. There may be additional software layers on top of an OS
    that provide other interfaces to users of the system (e.g., libraries). However,
    the OS is the core system software that we focus on in this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 前四项定义了计算机系统的*计算机硬件*组件。最后一项（操作系统）代表了计算机系统的主要软件部分。操作系统之上可能会有其他软件层，提供其他接口给系统的用户（例如，库）。然而，操作系统是我们在本书中重点关注的核心系统软件。
- en: '![image](../images/00fig01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/00fig01.jpg)'
- en: '*Figure 0-1: The layered components of a computer system*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图0-1：计算机系统的分层组件*'
- en: We focus specifically on computer systems that are *general purpose*, meaning
    that their function is not tailored to any specific application, and that are
    *reprogrammable*, meaning that they support running a different program without
    modifying the computer hardware or system software.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们专注于*通用*计算机系统，这意味着它们的功能并未针对任何特定应用进行定制，并且它们是*可重新编程*的，即支持在不修改计算机硬件或系统软件的情况下运行不同的程序。
- en: To this end, many devices that may “compute” in some form do not fall into the
    category of a computer system. Calculators, for example, typically have a processor,
    limited amounts of memory, and I/O capability. However, calculators typically
    do not have an operating system (advanced graphing calculators like the TI-89
    are a notable exception to this rule), do not have secondary storage, and are
    not general purpose.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，许多可能以某种形式进行“计算”的设备并不属于计算机系统的范畴。例如，计算器通常有处理器、有限的内存和输入输出能力。然而，计算器通常没有操作系统（像TI-89这样的高级图形计算器是这一规则的显著例外），没有二级存储，也不是通用的。
- en: Another example that bears mentioning is the microcontroller, a type of integrated
    circuit that has many of the same capabilities as a computer. Microcontrollers
    are often embedded in other devices (such as toys, medical devices, cars, and
    appliances), where they control a specific automatic function. Although microcontrollers
    are general purpose, reprogrammable, contain a processor, internal memory, secondary
    storage, and are I/O capable, they lack an operating system. A microcontroller
    is designed to boot and run a single specific program until it loses power. For
    this reason, a microcontroller does not fit our definition of a computer system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得提到的例子是微控制器，这是一种集成电路，具备与计算机类似的许多功能。微控制器通常嵌入到其他设备中（如玩具、医疗设备、汽车和家电），用于控制特定的自动功能。尽管微控制器是通用的、可重新编程的，包含处理器、内存、二级存储，并且具有输入输出功能，但它没有操作系统。微控制器设计用来启动并运行单一的特定程序，直到断电。因此，微控制器不符合我们对计算机系统的定义。
- en: What Do Modern Computer Systems Look Like?
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现代计算机系统是什么样子的？
- en: 'Now that we have established what a computer system is (and isn’t), let’s discuss
    what computer systems typically look like. [Figure 0-2](intro.xhtml#ch0fig2) depicts
    two types of computer hardware systems (excluding peripherals): a desktop computer
    (left) and a laptop computer (right). A U.S. quarter on each device gives the
    reader an idea of the size of each unit.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经明确了什么是计算机系统（以及什么不是），让我们来讨论计算机系统通常是什么样子的。[图0-2](intro.xhtml#ch0fig2)展示了两种类型的计算机硬件系统（不包括外设）：一台台式计算机（左）和一台笔记本电脑（右）。每个设备上放着一枚美国25美分硬币，给读者一个关于每个单位大小的直观感受。
- en: '![image](../images/00fig02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/00fig02.jpg)'
- en: '*Figure 0-2: Common computer systems: a desktop (left) and a laptop (right)
    computer*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图0-2：常见计算机系统：台式计算机（左）和笔记本电脑（右）*'
- en: Notice that both contain the same hardware components, though some of the components
    may have a smaller form factor or be more compact. The DVD bay of the desktop
    was moved to the side to show the hard drive underneath—the two units are stacked
    on top of each other. A dedicated power supply helps provide the desktop power.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两者包含相同的硬件组件，尽管某些组件可能具有更小的外形或更紧凑。台式计算机的DVD光驱移到了侧面，展示了其下方的硬盘——这两个单元堆叠在一起。专用电源帮助台式计算机提供电力。
- en: In contrast, the laptop is flatter and more compact (note that the quarter in
    this picture appears a bit bigger). The laptop has a battery and its components
    tend to be smaller. In both the desktop and the laptop, the CPU is obscured by
    a heavyweight CPU fan, which helps keep the CPU at a reasonable operating temperature.
    If the components overheat, they can become permanently damaged. Both units have
    dual inline memory modules (DIMM) for their RAM units. Notice that laptop memory
    modules are significantly smaller than desktop modules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，笔记本电脑更加扁平和紧凑（注意，图中的25美分硬币看起来稍微大一些）。笔记本配有电池，且其组件往往更小。无论是台式机还是笔记本，CPU都会被一个重量级的CPU风扇所遮挡，风扇有助于保持CPU在合理的工作温度。如果组件过热，它们可能会被永久损坏。两个设备都有双列内存模块（DIMM）用于RAM。请注意，笔记本内存模块显著小于台式机模块。
- en: In terms of weight and power consumption, desktop computers typically consume
    100–400 W of power and typically weigh anywhere from 5 to 20 pounds. A laptop
    typically consumes 50–100 W of power and uses an external charger to supplement
    the battery as needed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就重量和功耗而言，台式计算机通常消耗100–400瓦的电力，重量通常在5到20磅之间。笔记本电脑通常消耗50–100瓦的电力，并根据需要使用外部充电器来补充电池电量。
- en: The trend in computer hardware design is toward smaller and more compact devices.
    [Figure 0-3](intro.xhtml#ch0fig3) depicts a Raspberry Pi single-board computer.
    A single-board computer (SBC) is a device in which the entirety of the computer
    is printed on a single circuit board.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机硬件设计的趋势是向更小、更紧凑的设备发展。[图 0-3](intro.xhtml#ch0fig3) 展示了一个 Raspberry Pi 单板计算机。单板计算机（SBC）是一种将整个计算机功能集成在单一电路板上的设备。
- en: '![image](../images/00fig03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/00fig03.jpg)'
- en: '*Figure 0-3: A Raspberry Pi single-board computer*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 0-3：Raspberry Pi 单板计算机*'
- en: The Raspberry Pi SBC contains a *system-on-a-chip* (SoC) processor with integrated
    RAM and CPU, which encompasses much of the laptop and desktop hardware shown in
    [Figure 0-2](intro.xhtml#ch0fig2). Unlike laptop and desktop systems, the Raspberry
    Pi is roughly the size of a credit card, weighs 1.5 ounces (about a slice of bread),
    and consumes about 5 W of power. The SoC technology found on the Raspberry Pi
    is also commonly found in smartphones. In fact, the smartphone is another example
    of a computer system!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi SBC 配备了一个*系统级芯片*（SoC）处理器，集成了 RAM 和 CPU，涵盖了[图 0-2](intro.xhtml#ch0fig2)中所示的大部分笔记本和台式机硬件。与笔记本和台式机系统不同，Raspberry
    Pi 大约只有信用卡大小，重 1.5 盎司（大约一片面包的重量），功耗约为 5 瓦。Raspberry Pi 上的 SoC 技术在智能手机中也很常见。事实上，智能手机是另一种计算机系统的例子！
- en: Lastly, all of the aforementioned computer systems (Raspberry Pi and smartphones
    included) have *multicore* processors. In other words, their CPUs are capable
    of executing multiple programs simultaneously. We refer to this simultaneous execution
    as *parallel execution*. Basic multicore programming is covered in [Chapter 14](ch14.xhtml#ch14)
    of this book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所有前面提到的计算机系统（包括 Raspberry Pi 和智能手机）都具有*多核*处理器。换句话说，它们的 CPU 能够同时执行多个程序。我们将这种同时执行称为*并行执行*。基础的多核编程内容在本书的[第
    14 章](ch14.xhtml#ch14)中讲解。
- en: All of these different types of computer hardware systems can run one or more
    general-purpose operating systems, such as macOS, Windows, or Unix. A general-purpose
    operating system manages the underlying computer hardware and provides an interface
    for users to run any program on the computer. Together these different types of
    computer hardware running different general-purpose operating systems make up
    a computer system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些不同类型的计算机硬件系统都可以运行一个或多个通用操作系统，如 macOS、Windows 或 Unix。通用操作系统管理底层计算机硬件，并为用户提供接口，以便在计算机上运行任何程序。不同类型的计算机硬件运行不同的通用操作系统，共同构成了一个计算机系统。
- en: What You Will Learn In This Book
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书内容概览
- en: 'By the end of this book, you will know the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书结束时，您将了解以下内容：
- en: '**How a computer runs a program.** You will be able to describe, in detail,
    how a program expressed in a high-level programming language gets executed by
    the low-level circuitry of the computer hardware. Specifically, you will know:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算机如何运行程序。** 您将能够详细描述，如何通过计算机硬件的低级电路执行用高级编程语言表达的程序。具体来说，您将知道：'
- en: how program data gets encoded into binary and how the hardware performs arithmetic
    on it
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序数据如何被编码成二进制，硬件如何在其上执行算术运算
- en: how a compiler translates C programs into assembly and binary machine code (assembly
    is the human-readable form of binary machine code)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器如何将 C 程序转换为汇编语言和二进制机器码（汇编是二进制机器码的可读形式）
- en: how a CPU executes binary instructions on binary program data, from basic logic
    gates to complex circuits that store values, perform arithmetic, and control program
    execution
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 如何在二进制程序数据上执行二进制指令，从基本的逻辑门到存储值、执行算术运算和控制程序执行的复杂电路
- en: how the OS implements the interface for users to run programs on the system
    and how it controls program execution on the system while managing the system’s
    resources.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统如何实现用户在系统上运行程序的接口，并且如何在管理系统资源的同时控制程序的执行。
- en: '**How to evaluate systems costs associated with a program’s performance.**
    A program runs slowly for a number of reasons. It could be a bad algorithm choice
    or simply bad choices on how your program uses system resources. You will understand
    the memory hierarchy (see “The Memory Hierarchy” on [page 545](ch11.xhtml#lev1_86))
    and its effects on program performance, and the operating systems costs associated
    with program performance. You will also learn some valuable tips for code optimization.
    Ultimately, you will be able to design programs that use system resources efficiently,
    and you will know how to evaluate the systems costs associated with program execution.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何评估与程序性能相关的系统成本。** 程序运行缓慢有很多原因。可能是算法选择不当，或者仅仅是程序在使用系统资源时的决策不合理。你将理解内存层次结构（参见《内存层次结构》章节，见[第545页](ch11.xhtml#lev1_86)）及其对程序性能的影响，以及操作系统在程序性能中的成本。你还将学习一些关于代码优化的宝贵技巧。最终，你将能够设计高效使用系统资源的程序，并能够评估与程序执行相关的系统成本。'
- en: '**How to leverage the power of parallel computers with parallel programming.**
    Taking advantage of parallel computing is important in today’s multicore world.
    You will learn to exploit the multiple cores on your CPU to make your program
    run faster. You will know the basics of multicore hardware, the OS’s thread abstraction,
    and issues related to multithreaded parallel program execution. You will have
    experience with parallel program design and writing multithreaded parallel programs
    using the POSIX thread library (Pthreads). You will also have an introduction
    to other types of parallel systems and parallel programming models.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何利用并行编程发挥并行计算机的强大功能。** 在今天的多核世界中，利用并行计算变得尤为重要。你将学习如何利用CPU的多个核心，使程序运行得更快。你将了解多核硬件的基础知识、操作系统的线程抽象，以及与多线程并行程序执行相关的问题。你将获得并行程序设计的经验，并使用POSIX线程库（Pthreads）编写多线程并行程序。你还将接触到其他类型的并行系统和并行编程模型。'
- en: Along the way, you will also learn many other important details about computer
    systems, including how they are designed and how they work. You will learn important
    themes in systems design and techniques for evaluating the performance of systems
    and programs. You’ll also master important skills, including C and assembly programming
    and debugging.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习的过程中，你还将了解计算机系统的许多其他重要细节，包括它们是如何设计的、如何工作的。你将学习系统设计中的重要主题以及评估系统和程序性能的技术。你还将掌握一些重要技能，包括C语言编程、汇编语言编程和调试技巧。
- en: Getting Started with This Book
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始阅读本书
- en: 'A few notes about languages, book notation, and recommendations for getting
    started reading this book:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于语言、书籍符号和开始阅读本书的几点建议：
- en: Linux, C, and the GNU Compiler
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux、C和GNU编译器
- en: We use the C programming language in examples throughout the book. C is a high-level
    programming language like Java and Python, but it is less abstracted from the
    underlying computer system than many other high-level languages. As a result,
    C is the language of choice for programmers who want more control over how their
    program executes on the computer system.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例使用C编程语言。C语言是一种高级编程语言，类似于Java和Python，但与许多其他高级语言相比，它与底层计算机系统的抽象程度较低。因此，C语言是希望更好控制程序如何在计算机系统上执行的程序员的首选语言。
- en: The code and examples in this book are compiled using the GNU C Compiler (GCC)
    and run on the Linux operating system. Although not the most common mainstream
    OS, Linux is the dominant OS on supercomputing systems and is arguably the most
    commonly used OS by computer
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码和示例使用GNU C编译器（GCC）进行编译，并在Linux操作系统上运行。尽管Linux不是最常见的主流操作系统，但它是超级计算系统中占主导地位的操作系统，且可以说是计算机科学领域最常用的操作系统之一。
- en: scientists.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 科学家们。
- en: Linux is also free and open source, which contributes to its popular use in
    these settings. A working knowledge of Linux is an asset to all students in computing.
    Similarly, GCC is arguably the most common C compiler in use today. As a result,
    we use Linux and GCC in our examples. However, other Unix systems and compilers
    have similar interfaces and functionality.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Linux也是免费的开源软件，这使得它在这些环境中的使用非常普遍。对于计算机科学专业的学生来说，掌握Linux基本操作非常有帮助。同样，GCC可以说是目前最常用的C语言编译器。因此，我们在示例中使用Linux和GCC。然而，其他Unix系统和编译器也有类似的接口和功能。
- en: 'In this book, we encourage you to type along with the listed examples. Linux
    commands appear in blocks like the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本书鼓励你跟随书中的示例进行编写。Linux命令通常以如下的代码块形式出现：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `$` represents the command prompt. If you see a box that looks like
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`$` 代表命令提示符。如果你看到一个看起来像这样的框'
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: this is an indication to type `uname -a` on the command line. Make sure that
    you don’t type the `$` sign!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是提示你在命令行上键入 `uname -a`。请确保不要键入 `$` 符号！
- en: The output of a command is usually shown directly after the command in a command
    line listing. As an example, try typing in `uname -a`. The output of this command
    varies from system to system. Sample output for a 64-bit system is shown here.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出通常会直接显示在命令行列表中的命令后面。例如，尝试键入 `uname -a`。此命令的输出因系统不同而有所差异。这里显示的是一个64位系统的示例输出。
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `uname` command prints out information about a particular system. The `-a`
    flag prints out all relevant information associated with the system in the following
    order:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`uname` 命令输出有关特定系统的信息。`-a` 标志会按以下顺序输出所有与系统相关的信息：'
- en: The kernel name of the system (in this case Linux)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统的内核名称（在此为 Linux）
- en: The hostname of the machine (e.g., Fawkes)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器的主机名（例如，Fawkes）
- en: The kernel release (e.g., 4.4.0-171-generic)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核发布版本（例如，4.4.0-171-generic）
- en: 'The kernel version (e.g., #200-Ubuntu SMP Tue Dec 3 11:04:55 UTC 2019)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核版本（例如，#200-Ubuntu SMP Tue Dec 3 11:04:55 UTC 2019）
- en: The machine hardware (e.g., x86-64)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器硬件（例如，x86-64）
- en: The type of processor (e.g., x86-64)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器类型（例如，x86-64）
- en: The hardware platform (e.g., x86-64)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件平台（例如，x86-64）
- en: The operating system name (e.g., GNU/Linux)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统名称（例如，GNU/Linux）
- en: 'You can learn more about the `uname` command or any other Linux command by
    prefacing the command with `man`, as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令前加上 `man` 来了解更多关于 `uname` 命令或任何其他 Linux 命令，如下所示：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command brings up the manual page associated with the `uname` command.
    To quit out of this interface, press the `q` key.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会显示与 `uname` 命令相关的手册页。要退出此界面，请按 `q` 键。
- en: A detailed coverage of Linux is beyond the scope of this book, but there are
    several online resources that can give readers a good overview. One recommendation
    is “The Linux Command Line”;^([1](intro.xhtml#introfn1)) reviewing the first part,
    “Learning the Shell,” is sufficient preparation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本书并未详细介绍 Linux，但有多个在线资源可以为读者提供良好的概览。一个推荐的资源是《The Linux Command Line》；^([1](intro.xhtml#introfn1))，阅读第一部分“学习
    Shell”就足以为你做好准备。
- en: Other Types of Notation and Callouts
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他类型的符号和注释
- en: Aside from the command line and code snippets, we use several other types of
    “callouts” to represent content in this book.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命令行和代码片段，我们还使用了几种其他类型的“注释”来呈现本书中的内容。
- en: 'The first is the *aside*. Asides are meant to provide additional context to
    the text, usually historical. Here’s a sample aside:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是*旁注*。旁注用于提供额外的背景信息，通常是历史性的。以下是一个旁注的示例：
- en: THE ORIGINS OF LINUX, GNU, AND THE FREE OPEN SOURCE SOFTWARE (FOSS) MOVEMENT
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: LINUX、GNU 和自由开源软件（FOSS）运动的起源
- en: In 1969, AT&T Bell Labs developed the UNIX operating system for internal use.
    Although it was initially written in assembly, it was rewritten in C in 1973\.
    Due to an antitrust case that barred AT&T Bell Labs from entering the computing
    industry, AT&T Bell Labs freely licensed the UNIX operating system to universities,
    leading to its widespread adoption. By 1984, however, AT&T separated itself from
    Bell Labs, and (now free from its earlier restrictions) began selling UNIX as
    a commercial product, much to the anger and dismay of several individuals in academia.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 1969年，AT&T 贝尔实验室为内部使用开发了 UNIX 操作系统。虽然最初是用汇编语言编写的，但它在1973年被重写为 C 语言。由于一起反垄断案件禁止
    AT&T 贝尔实验室进入计算机行业，AT&T 贝尔实验室将 UNIX 操作系统自由授权给大学，从而推动了其广泛应用。然而，到了1984年，AT&T 从贝尔实验室中分离出来，并（摆脱了早期的限制）开始将
    UNIX 作为商业产品销售，这引起了学术界若干人士的愤怒和失望。
- en: In direct response, Richard Stallman (then a student at MIT) developed the GNU
    (“GNU is not UNIX”) Project in 1984, with the goal of creating a UNIX-like system
    composed entirely of free software. The GNU project has spawned several successful
    free software products, including the GNU C Compiler (GCC), GNU Emacs (a popular
    development environment), and the GNU Public License (GPL, the origin of the “copyleft”
    principle).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为直接回应，理查德·斯托曼（当时是麻省理工学院的学生）于1984年开发了 GNU（“GNU 不是 UNIX”）项目，目标是创建一个完全由自由软件组成的类似
    UNIX 的系统。GNU 项目孕育了多个成功的自由软件产品，包括 GNU C 编译器（GCC）、GNU Emacs（一个流行的开发环境）以及 GNU 通用公共许可证（GPL，“版权反转”原则的起源）。
- en: In 1992, Linus Torvalds, then a student at the University of Helsinki, released
    a UNIX-like operating system that he wrote under the GPL. The Linux operating
    system (pronounced “Lin-nux” or “Lee-nux” as Linus Torvald’s first name is pronounced
    “Lee-nus”) was developed using GNU tools. Today, GNU tools are typically packaged
    with Linux distributions. The mascot for the Linux operating system is Tux, a
    penguin. Torvalds was apparently bitten by a penguin while visiting the zoo, and
    chose the penguin for the mascot of his operating system after developing a fondness
    for the creatures, which he dubbed as contracting “penguinitis.”
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'The second type of callout we use in this text is the *note*. Notes are used
    to highlight important information, such as the use of certain types of notation
    or suggestions on how to digest certain information. A sample note is shown below:
    As a student, it is important to do the readings in the textbook. Notice that
    we say “do” the readings, not simply “read” the readings. To “read” a text typically
    implies passively imbibing words off a page. We encourage students to take a more
    active approach. If you see a code example, try typing it in! It’s OK if you type
    in something wrong, or get errors; that’s the best way to learn! In computing,
    errors are not failures—they are simply experience.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**Note HOW TO DO THE READINGS IN THIS BOOK**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: As a student, it is important to do the readings in the textbook. Notice that
    we say “do” the readings, not simply “read” the readings. To “read” a text typically
    implies passively imbibing words off a page. We encourage students to take a more
    active approach. If you see a code example, try typing it in! It’s OK if you type
    in something wrong, or get errors; that’s the best way to learn! In computing,
    errors are not failures—they are simply experience.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'The last type of callout that students should pay specific attention to is
    the *warning*. The authors use warnings to highlight things that are common “gotchas”
    or a common cause of consternation among our own students. Although all warnings
    may not be equally valuable to all students, we recommend that you review warnings
    to avoid common pitfalls whenever possible. A sample warning is shown here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning THIS BOOK CONTAINS PUNS**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: The authors (especially the first author) are fond of puns and musical parodies
    related to computing (and not necessarily good ones). Adverse reactions to the
    authors’ sense of humor may include (but are not limited to) eye-rolling, exasperated
    sighs, and forehead slapping.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: If you are ready to get started, please continue on to the first chapter as
    we dive into the wonderful world of C. If you already know some C programming,
    you may want to start with [Chapter 4](ch04.xhtml#ch04) on binary representation,
    or continue with more advanced C programming in [Chapter 2](ch02.xhtml#ch02).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: We hope you enjoy your journey with us!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[1.](intro.xhtml#rintrofn1) William Shotts, “Learning the Shell,” [LinuxCommand.org](http://LinuxCommand.org),
    *[http://linuxcommand.org/lc3_learning_the_shell.php](http://linuxcommand.org/lc3_learning_the_shell.php)*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.](intro.xhtml#rintrofn1) William Shotts, “学习 Shell，” [LinuxCommand.org](http://LinuxCommand.org)，
    *[http://linuxcommand.org/lc3_learning_the_shell.php](http://linuxcommand.org/lc3_learning_the_shell.php)*'
