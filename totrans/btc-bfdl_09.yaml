- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**UNDERSTANDING THE DIFFERENT TYPES OF BITCOIN WALLETS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**理解不同类型的比特币钱包**'
- en: In [Chapter 2](../Text/ch02.html#ch02) we recommended using the Bitcoin wallet
    program Electrum, which is free and open source, runs on most devices, and is
    ideal for beginners. However, *hundreds* of other Bitcoin wallet programs are
    available, ranging from simple to sophisticated, and new ones are being released
    constantly as developers compete to add new features and slicker interfaces. But
    beneath the slicker interfaces and occasionally gimmicky features, some fundamental
    differences between Bitcoin wallet programs exist. The goal of this chapter is
    to help you understand those differences so you can make an informed choice about
    the most useful Bitcoin wallet for your needs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](../Text/ch02.html#ch02)中，我们推荐使用比特币钱包程序Electrum，它是免费的开源软件，支持大多数设备，并且非常适合初学者。然而，市面上有*数百种*其他比特币钱包程序，从简单到复杂不等，而且随着开发者竞争推出新功能和更精致的界面，新钱包程序不断发布。但在这些更精致的界面和偶尔显得有些花哨的功能背后，一些比特币钱包程序之间仍然存在着根本的差异。本章的目的是帮助你了解这些差异，以便你可以做出一个明智的选择，选择最适合你需求的比特币钱包。
- en: In this chapter, we’ll occasionally use the terms *Bitcoin wallet* or just *wallet*
    to mean *Bitcoin wallet program*, despite the fact that a *Bitcoin wallet* normally
    refers to just a list of addresses and private keys.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们偶尔会使用*比特币钱包*或简称*钱包*来指代*比特币钱包程序*，尽管*比特币钱包*通常仅指一个地址和私钥的列表。
- en: '**Wallet Software Design Fundamentals**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**钱包软件设计基础**'
- en: 'At a minimum, a Bitcoin wallet program needs to let a user send and receive
    bitcoins, as well as keep track of how many bitcoins are available to spend. In
    other words, a Bitcoin wallet program must be able to (1) create and broadcast
    transactions to the Bitcoin network, (2) generate new Bitcoin addresses, and (3)
    scan the blockchain to detect whether you’ve received any bitcoins at those addresses.
    The major differences between different wallet designs primarily involve these
    three functions and how they are implemented. The design choices that support
    these differences are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，一个比特币钱包程序需要允许用户发送和接收比特币，并且跟踪有多少比特币可以使用。换句话说，比特币钱包程序必须能够（1）创建并广播交易到比特币网络，（2）生成新的比特币地址，和（3）扫描区块链以检测你是否在这些地址上收到了比特币。不同钱包设计之间的主要差异主要涉及这三项功能及其实现方式。支持这些差异的设计选择如下：
- en: 1\. Offline vs. online transaction signing
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 离线与在线交易签名
- en: 2\. Random vs. deterministic key generation (versus single key generation)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 随机与确定性密钥生成（与单一密钥生成相比）
- en: 3\. Full vs. simplified payment verification
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 完整支付验证与简化支付验证
- en: These design choices have significant consequences for the computational resources
    required, the security of the stored bitcoins, and even the nature and effectiveness
    of backups. There are no right choices. Some users are better off using a wallet
    that requires only a single device and the least amount of computational power,
    whereas a large enterprise might prefer software that emphasizes security. In
    the following sections, we explain each design choice in detail so you can make
    an informed choice.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设计选择对所需的计算资源、存储的比特币安全性，甚至备份的性质和有效性有着重大影响。没有绝对正确的选择。有些用户更适合使用只需要一个设备和最少计算能力的钱包，而大型企业可能更倾向于选择强调安全性的程序。在接下来的章节中，我们将详细解释每个设计选择，以便你可以做出明智的选择。
- en: '***Offline vs. Online Transaction Signing***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***离线与在线交易签名***'
- en: 'Bitcoin wallet programs need private keys in order to sign transactions before
    they can be broadcast to the Bitcoin network. In the simplest design, these private
    keys are found in the user’s Bitcoin wallet, which is stored locally on the user’s
    device in a *wallet.dat* file. This is the way the first Bitcoin wallet program,
    Bitcoin-Qt, worked. However, this design is vulnerable to attackers, who could
    attempt to remotely access the device over the Internet, copy the wallet file,
    and try to extract the private keys. A more secure design involves splitting the
    Bitcoin wallet and the software that manages it into two components: one with
    the private keys and the other without. The component *with* the private keys
    is usually stored in a highly secure location and is used for transaction signing.
    The component *without* the private keys can be stored anywhere, possibly in many
    locations at once, and is called a *watch-only wallet*.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币钱包程序需要私钥来签署交易，然后才能将交易广播到比特币网络。在最简单的设计中，这些私钥存储在用户的比特币钱包中，该钱包存储在用户设备上的*wallet.dat*文件中。这是第一个比特币钱包程序Bitcoin-Qt的工作方式。然而，这种设计容易受到攻击者的攻击，攻击者可能试图通过互联网远程访问设备，复制钱包文件，并尝试提取私钥。更安全的设计涉及将比特币钱包及其管理软件分为两个组件：一个包含私钥，另一个不包含私钥。包含私钥的组件通常存储在高度安全的位置，并用于交易签名。没有私钥的组件可以存储在任何地方，可能同时存储在多个位置，并称为*仅观察钱包*。
- en: As the name implies, you cannot directly spend money stored in a watch-only
    wallet. Instead, if you want to make a purchase, you would need to take an extra
    step to sign your transactions with the private keys. This second step is usually
    done via a second computer that isn’t connected to the Internet (to prevent hacking
    attacks) and is used solely to store private keys and sign transactions with them
    as needed. This security technique, called *offline transaction signing*, was
    discussed to some extent in [Chapter 3](../Text/ch03.html#ch03) as a strategy
    for securely storing large amounts of bitcoins, but it offers other benefits as
    well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，你无法直接花费存储在仅观察钱包中的资金。相反，如果你想进行购买，你需要额外的步骤，用私钥签署交易。这个第二步通常通过第二台未连接互联网的计算机完成（以防止黑客攻击），该计算机仅用于存储私钥并在需要时用它们签署交易。这种安全技术称为*离线交易签名*，在[第3章](../Text/ch03.html#ch03)中已在一定程度上讨论过，作为安全存储大量比特币的策略，但它也提供了其他好处。
- en: Watch-only wallets are particularly useful for point-of-sale terminals (i.e.,
    cash registers) where the cashier needs to receive bitcoins from a customer but
    never needs to (and may not be authorized to) spend them. Importantly, because
    watch-only wallets do not store any private keys, if a point-of-sale terminal
    was stolen, the bitcoins it contained would remain secure. In addition, watch-only
    wallets can be safely installed on mobile phones or run from low-security web
    servers (requiring only a simple username and login for access) to allow users
    to monitor their funds without the risk of the wrong person gaining access to
    them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 仅观察钱包特别适用于销售点终端（例如收银机），在这种情况下，收银员需要接收顾客的比特币，但不需要（且可能没有授权）花费这些比特币。重要的是，因为仅观察钱包不存储任何私钥，如果销售点终端被盗，其包含的比特币仍将保持安全。此外，仅观察钱包可以安全地安装在手机上或从低安全性的网络服务器上运行（只需要简单的用户名和登录即可访问），以允许用户监控他们的资金，而不必担心错误的人获取到这些资金。
- en: 'Many Bitcoin wallet programs can be run in one of two modes: a *full mode*
    (where a single wallet program and computer are used for all steps) or a watch-only
    mode. If a wallet program advertises a *watch-only mode*, it typically implies
    that the same software can also be used for offline transaction signing. *Hybrid
    wallets* are also available in which some of the Bitcoin addresses are watch-only,
    whereas other addresses have their private keys stored on the online device. As
    a result, the same device can be used for spending from a low-security checking
    account and for monitoring a more secure savings account.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多比特币钱包程序可以以两种模式之一运行：*完整模式*（在这种模式下，使用单一钱包程序和计算机进行所有步骤）或仅观察模式。如果一个钱包程序宣传有*仅观察模式*，通常意味着该软件也可以用于离线交易签名。还可以使用*混合钱包*，其中某些比特币地址是仅观察的，而其他地址的私钥则存储在在线设备上。因此，同一设备可以用于从低安全性的支票账户中花费资金，也可以用于监控更安全的储蓄账户。
- en: Depending on how new Bitcoin addresses are generated, watch-only wallets may
    or may not have to be synchronized with their offline component. Typically, a
    new Bitcoin address must be generated on the offline computer and then imported
    into the watch-only wallet (without importing the corresponding private key).
    However, with deterministic key generation (described in the next section), watch-only
    wallets can generate new Bitcoin addresses on their own without knowing the private
    keys that correspond to them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据新比特币地址的生成方式，观察钱包是否需要与离线组件同步有所不同。通常，一个新的比特币地址必须在离线计算机上生成，然后导入到观察钱包中（而不导入相应的私钥）。然而，使用确定性密钥生成（在下一节中描述）时，观察钱包可以独立生成新的比特币地址，而无需知道与之对应的私钥。
- en: '**NOTE**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Deterministic key generation is very useful for point-of-sale terminals, because
    they won’t run out of deposit addresses in situations that involve numerous customers.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*确定性密钥生成对于销售终端非常有用，因为在涉及大量顾客的情况下，它们不会耗尽存款地址。*'
- en: '***Random Key Generation vs. Deterministic Key Generation (vs. Single Key Generation)***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***随机密钥生成与确定性密钥生成（与单一密钥生成）***'
- en: All Bitcoin wallet programs provide new users with at least one randomly generated
    Bitcoin address and private key. How and whether additional addresses are generated
    is a design choice that can incite very strong opinions among Bitcoin developers.
    The original Bitcoin wallet program assumed that users would never reuse an address
    after spending bitcoins from it. Every time a user wanted to spend bitcoins, a
    certain amount would go to the intended recipient, but the rest would be moved
    to a new, randomly generated Bitcoin address called the *change address*. This
    approach helps protect the privacy of the user, because it is more difficult for
    an external observer to track an individual’s bitcoins if the person continually
    changes addresses. It’s not possible to distinguish the transfer of bitcoins to
    a change address from the transfer of bitcoins from one person to another. Not
    everyone likes this behavior, though; some think it’s easier to have just one
    Bitcoin address (like having one email address) and aren’t as concerned about
    privacy. So some Bitcoin wallet programs provide only a single address that is
    continuously reused. These *single key generation* wallet programs allow you to
    generate additional addresses manually, but the default behavior is to reuse existing
    addresses.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有比特币钱包程序都会为新用户提供至少一个随机生成的比特币地址和私钥。是否生成额外的地址以及如何生成，这是一种设计选择，可能会引发比特币开发者之间非常激烈的意见。原始的比特币钱包程序假设用户在使用完比特币后永远不会重复使用一个地址。每次用户想要花费比特币时，一定金额会发送给目标接收方，其余的比特币则会转移到一个新的、随机生成的比特币地址，这个地址被称为*找零地址*。这种做法有助于保护用户的隐私，因为如果一个人不断更换地址，外部观察者更难追踪该个人的比特币。无法区分比特币转移到找零地址和从一个人转移到另一个人的比特币。尽管如此，并不是每个人都喜欢这种行为；有些人认为只使用一个比特币地址更方便（就像只有一个电子邮件地址一样），并且不太关心隐私。因此，一些比特币钱包程序只提供一个单一地址，并不断重复使用这些地址。这些*单一密钥生成*钱包程序允许你手动生成额外的地址，但默认行为是重复使用现有地址。
- en: Among the Bitcoin wallet programs that constantly generate new addresses, differences
    in implementation exist. Recall that a private key is a 256-bit integer that is
    usually generated by some random process. From the private key, Bitcoin wallet
    programs can calculate the associated public key (which is a point on an elliptic
    curve; see [Chapter 7](../Text/ch07.html#ch07) for the cryptographic details),
    which in turn can be converted into a Bitcoin address by applying the RIPEMD160
    and SHA256 hash functions. To generate a collection of private key/Bitcoin address
    pairs, many programs use correspondingly as many random numbers. This is known
    as *random key generation*. Every time a user needs a new Bitcoin address, a new
    random number is used as the private key. The drawback to this approach is that
    backups need to be updated regularly—essentially, every time a new address is
    created. This is particularly important to keep in mind in the context of change
    addresses. If you send some of your bitcoins to a friend and the remainder of
    your balance is sent to a newly generated change address, potentially the majority
    of your funds are no longer backed up! Some unfortunate incidents have occurred
    in Bitcoin’s history in which users of random key generation–based wallets deleted
    or lost their wallets shortly after their funds were sent to a new change address
    but before they updated their backup.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断生成新地址的比特币钱包程序中，存在实现上的差异。回顾一下，私钥是一个256位的整数，通常由某种随机过程生成。从私钥出发，比特币钱包程序可以计算出相应的公钥（公钥是椭圆曲线上的一个点；有关密码学细节，请参见[第7章](../Text/ch07.html#ch07)），该公钥进一步可以通过应用RIPEMD160和SHA256哈希函数转换成比特币地址。为了生成一组私钥/比特币地址对，许多程序使用相应数量的随机数。这种方法称为*随机密钥生成*。每当用户需要一个新的比特币地址时，都会使用一个新的随机数作为私钥。这种方法的缺点是备份需要定期更新——本质上，每次创建新地址时都需要更新备份。在涉及找零地址的情况下尤其需要注意这一点。如果你把一些比特币发送给朋友，而余额的其余部分被发送到一个新生成的找零地址，那么很可能你的大部分资金就不再有备份了！在比特币的历史上，曾发生过一些不幸的事件，即基于随机密钥生成的钱包用户在资金被发送到新找零地址后不久删除或丢失了钱包，但在更新备份之前就发生了这一情况。
- en: An alternative approach is *deterministic key generation*. With this approach,
    only the first private key is a randomly chosen 256-bit integer, which is known
    as the *master private key*, and it has a corresponding *master public key*. Whenever
    the user needs a new Bitcoin address, a new private key is chosen that is related
    to the master private key by a simple mathematical relationship (no randomness
    is involved). In the simplest implementation, the master private key is simply
    incremented by 1 to generate a new key (e.g., if the master private key is the
    number 47, subsequent private keys would be 48, 49, 50, etc.). The advantage of
    this approach is that a single backup, created when a user first creates a new
    Bitcoin wallet, is sufficient and never needs to be updated.^([1](../Text/footnote.html#footnote64))
    In fact, this is how Electrum works. Recall that in [Chapter 2](../Text/ch02.html#ch02),
    Electrum prompted you to write down a 12-word mnemonic for backup purposes. That
    mnemonic was, in fact, a master private key.^([2](../Text/footnote.html#footnote65))
    All of the Bitcoin addresses in your Electrum wallet can be derived from this
    master private key.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是*确定性密钥生成*。在这种方法中，只有第一个私钥是随机选择的256位整数，称为*主私钥*，它对应一个*主公钥*。每当用户需要一个新的比特币地址时，都会选择一个与主私钥通过简单的数学关系相关的新私钥（不涉及随机性）。在最简单的实现中，主私钥仅通过加1来生成新密钥（例如，如果主私钥是数字47，那么后续的私钥将是48、49、50等）。这种方法的优点是，当用户首次创建新的比特币钱包时，只需要创建一个备份，并且该备份永远无需更新。^([1](../Text/footnote.html#footnote64))
    事实上，这就是Electrum的工作方式。回想一下，在[第2章](../Text/ch02.html#ch02)中，Electrum提示你写下一个12个单词的助记词用于备份。那个助记词实际上就是一个主私钥。^([2](../Text/footnote.html#footnote65))
    你在Electrum钱包中的所有比特币地址都可以从这个主私钥派生出来。
- en: '**Combining Deterministic Key Generation with Watch-Only Wallets**'
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**将确定性密钥生成与仅观察钱包结合**'
- en: 'Imagine the following scenario:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下场景：
- en: • Lisa owns a restaurant that accepts Bitcoin.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: • 丽莎经营一家接受比特币支付的餐厅。
- en: • All the waiters in the restaurant have Bitcoin wallets on their phones to
    accept payments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 餐厅里的所有服务员都在手机上安装了比特币钱包，以便接受支付。
- en: • Lisa wants to be the only person who can spend the money sent to these wallets.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 丽莎希望成为唯一能够花费发送到这些钱包中的资金的人。
- en: 'Clearly, it would be very convenient if Lisa could set up this system, but
    it seems like it would be a technical challenge: Every waiter would need the ability
    to create tons of new Bitcoin addresses on demand in their wallets, yet Lisa still
    needs to be the only person with access to the private keys that power each wallet.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，如果丽莎能设置这个系统，那将是非常方便的，但这似乎是一个技术上的挑战：每个服务员都需要能够在他们的钱包中按需创建大量新的比特币地址，但丽莎仍然需要是唯一能够访问每个钱包背后私钥的人。
- en: 'However, when you combine deterministic key generation with a watch-only wallet,
    this type of system is actually straightforward: Surprisingly, it is possible
    for a watch-only wallet (running on every waiter’s phone) to create many new public
    keys arbitrarily without having any knowledge about the private keys associated
    with them!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你将确定性密钥生成与只读钱包结合时，这种系统实际上是直接的：令人惊讶的是，竟然可以让一个只读钱包（在每个服务员的手机上运行）无需了解与之关联的私钥，就能随意生成许多新的公钥！
- en: 'This is all Lisa has to do:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是丽莎需要做的所有事情：
- en: 1\. Create public and private keys on her computer using deterministic key generation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 使用确定性密钥生成在她的电脑上创建公钥和私钥。
- en: 2\. Give a public key to each waiter along with a program that supports a watch-only
    feature as well as deterministic keys.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 给每个服务员一个公钥，以及一个支持只读功能和确定性密钥的程序。
- en: 3\. Waiters can then accept as many payments with their wallets as they like.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 服务员们随后可以随意使用他们的钱包接受任意数量的支付。
- en: 4\. Only Lisa can spend the money in these wallets using her computer’s wallet.
    Her computer is the only computer able to generate the corresponding private keys
    for all Bitcoin transactions in the restaurant.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 只有丽莎能够使用她电脑的钱包花费这些钱包中的资金。她的电脑是唯一能够为餐厅中所有比特币交易生成相应私钥的电脑。
- en: Whether you run a restaurant, a bank, or any other business, having a payment
    mechanism whereby your employees can arbitrarily accept payments from customers
    but only you, the owner of the business, can *unlock* the money is a powerful
    feature.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是经营餐厅、银行还是其他任何企业，拥有一种支付机制，可以让员工随意接受顾客支付，但只有你，作为企业所有者，能够*解锁*这些资金，这是一个强大的功能。
- en: '**The Math Behind Deterministic Key Generation with Watch-Only Wallets**'
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**确定性密钥生成与只读钱包背后的数学原理**'
- en: 'So how is it mathematically possible to generate new keys using only public
    key information? To explain, we’ll refer to the cryptography on how private keys
    and public keys are mathematically related. In [Chapter 7](../Text/ch07.html#ch07),
    we explained that given a secret private key, *d* (let’s call this a master private
    key), the corresponding (master) public key, *Q*, is determined by the point multiplication
    operation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何仅使用公钥信息就能数学上生成新的密钥呢？为了解释这个问题，我们将参考有关私钥和公钥如何在数学上相互关联的密码学知识。在[第7章](../Text/ch07.html#ch07)中，我们解释了，给定一个秘密私钥，*d*（我们称之为主私钥），相应的（主）公钥，*Q*，是通过点乘运算确定的：
- en: '*d*G = Q'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*d*G = Q'
- en: Recall that both G and Q are points on the elliptic curve, but that G is publicly
    known to everyone and is a hard-coded constant in the Bitcoin protocol (whereas
    Q is unique to you). The master Bitcoin address is then derived from Q using several
    hash functions and other formatting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，G和Q都是椭圆曲线上的点，但G是公知的，并且是比特币协议中的硬编码常量（而Q是唯一属于你的）。主比特币地址是通过多个哈希函数和其他格式化操作从Q中派生出来的。
- en: 'The *obvious* way to deterministically generate a *new* Bitcoin address is
    to first choose a new private key, *d*[new]*= d* + 1, and then calculate the corresponding
    new public key, Q[new]:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性生成一个*新的*比特币地址的*显而易见*方法是，首先选择一个新的私钥，*d*[new]*= d* + 1，然后计算相应的新公钥，Q[new]：
- en: '*d*[new]G = Q[new]'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*d*[new]G = Q[new]'
- en: However, this method of generating a new public key requires you to know the
    master private key. So what if you don’t know the master private key? Could you
    generate a new Bitcoin address with only the knowledge of a master *public* key?
    Yes!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种生成新公钥的方法要求你知道主私钥。那么，如果你不知道主私钥呢？是否可以仅凭借主*公钥*的信息生成一个新的比特币地址？可以！
- en: 'We can rewrite the equation for Q[new] as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Q[new]的方程式重新写为：
- en: '*d*[new]G = (*d* + 1)G = *d*G + G = Q[new]'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*d*[new]G = (*d* + 1)G = *d*G + G = Q[new]'
- en: 'Observe that the term *d*G can be rewritten as the master public key, Q:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*d*G这个术语可以重写为主公钥Q：
- en: Q + G = Q[new]
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Q + G = Q[new]
- en: 'As a result, we can calculate new public keys using only the knowledge of the
    master public key and the public constant G. Additional public keys can be generated
    by adding any number of G points:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，我们可以仅通过知道主公钥和公共常量 G 来计算新的公钥。可以通过添加任意数量的 G 点来生成额外的公钥：
- en: '| Q + 2G = Q[two] |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| Q + 2G = Q[two] |'
- en: '| Q + 3G = Q[three] |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Q + 3G = Q[three] |'
- en: '| ... |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: Of course, a danger of the deterministic key generation approach is that if
    your master private key falls into the wrong hands, all of the derived Bitcoin
    addresses would be compromised. Also, from a privacy standpoint, if someone sees
    your master public key (which becomes public information once you send bitcoins
    to the corresponding address), that person can derive your subsequent public keys
    in an attempt to track your spending.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，确定性密钥生成方法的一个危险是，如果你的主私钥落入不法之手，所有派生的比特币地址都会被泄露。此外，从隐私角度来看，如果有人看到你的主公钥（这在你将比特币发送到对应地址后会变成公开信息），此人可以推导出你后续的公钥，从而试图追踪你的支出。
- en: Although we won’t delve into the mathematical details, deterministic key generation
    allows for another, even more advanced Bitcoin wallet feature, *hierarchical deterministic
    wallets*, that may appeal particularly to large organizations. The master private
    key can be branched into sub-master keys, which can be further branched into sub-submaster
    keys and so on. Each has a property that allows any key at one level to access
    the bitcoins held at every level below it. For example, a bank manager may hold
    a level-two private key (the level-one key is held by the CEO), and his staff
    may each hold level-three keys. Everyone shares the same hierarchical wallet,
    but the manager has access to his own funds and those of his staff, and the staff
    can access only their own accounts. Hierarchical deterministic wallets might also
    be useful for families in which the parents want to give their children bitcoins
    but maintain access as well.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会深入探讨数学细节，但确定性密钥生成允许实现另一个更加先进的比特币钱包功能，*分层确定性钱包*，这对于大型组织尤其有吸引力。主私钥可以分支成子主密钥，子主密钥可以进一步分支成子子主密钥，依此类推。每个密钥具有一个特性，使得在某一层级的任何密钥都可以访问所有下一级以下的比特币。例如，银行经理可能持有二级私钥（一级密钥由
    CEO 持有），他的员工可能每人持有三级密钥。每个人共享同一个分层钱包，但经理可以访问他自己和员工的资金，而员工只能访问自己的账户。分层确定性钱包对于那些希望将比特币赠送给孩子但又想保持访问权限的家庭也可能非常有用。
- en: '***Full vs. Simplified Payment Verification***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***完整与简化支付验证***'
- en: Bitcoin’s central feature is that you don’t have to trust an individual, third-party,
    or central institution. However, Bitcoin wallet programs must be able to verify
    that the transactions they receive are valid. In this context, it is important
    to distinguish between the blockchain (the immutable public document that correctly
    lists every valid Bitcoin transaction) and someone’s copy of the blockchain, which
    is what you have access to. The former is an abstract concept, whereas the latter
    is the practical reality. When you connect your wallet program to the Bitcoin
    network, it connects to several nodes that will send your program transaction
    data, but you cannot assume that data is valid. If you ask a stranger on the Internet
    to pay you 2 BTC for an expensive watch you are selling, and a node you are connected
    to indicates you have received 2 BTC shortly thereafter, is it safe to mail the
    watch? A valid transaction needs to (1) have the correct digital signature and
    (2) use bitcoins that originated in a mining block reward and have not yet been
    spent. All Bitcoin wallet programs can verify the first need with complete certainty,
    but the second concern is addressed with varying degrees of certainty depending
    on the design of the program.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的核心特性是你不需要信任任何个人、第三方或中央机构。然而，比特币钱包程序必须能够验证它们接收到的交易是否合法。在这种情况下，区分区块链（正确列出每个有效比特币交易的不可篡改的公共文档）和某人的区块链副本是非常重要的，后者是你所访问的内容。前者是一个抽象概念，而后者是实际的现实。当你将钱包程序连接到比特币网络时，它会连接到多个节点，这些节点会向你的程序发送交易数据，但你不能假设这些数据是有效的。如果你在互联网上让一个陌生人支付你
    2 BTC 来购买你出售的昂贵手表，而你连接的一个节点显示你在不久后收到了 2 BTC，那么邮寄手表是否安全？一个有效的交易需要 (1) 拥有正确的数字签名，(2)
    使用源自矿工区块奖励且尚未被花费的比特币。所有比特币钱包程序都可以完全确定地验证第一个需求，但第二个问题的解决方案则取决于程序的设计，其可靠性程度有所不同。
- en: Bitcoin wallet programs can verify transactions either by keeping their own
    complete copy of the blockchain, which is referred to as *full payment verification*,
    or by using an abridged version, which is called *simplified payment verification
    (SPV)*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币钱包程序可以通过保持自己完整的区块链副本来验证交易，这种方式称为*完全支付验证*，或者使用简化版的区块链副本，这种方式称为*简化支付验证（SPV）*。
- en: Full payment verification wallets, also called *thick* or *heavyweight* wallets,
    require a complete copy of the blockchain. They can verify that bitcoins used
    in a transaction originated from a mined block by scanning backward, transaction
    by transaction, in the blockchain until their origin is found (and the wallets
    can check whether those bitcoins were ever double spent). These wallet programs
    are often active participants in the Bitcoin network in that they not only handle
    the user’s transactions but they also verify and relay other people’s transactions
    (in these cases, computers running such programs are called *full nodes*). All
    Bitcoin miners are also full nodes (i.e., they need a complete copy of the blockchain
    to mine).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 完全支付验证钱包，也称为*厚重*或*重量级*钱包，需要完整的区块链副本。它们可以通过在区块链中逐个交易地回溯，直到找到交易发源地，从而验证用于交易的比特币是否来自一个已挖掘的区块（并且这些钱包可以检查这些比特币是否曾经被双重支付）。这些钱包程序通常是比特币网络的活跃参与者，因为它们不仅处理用户的交易，还验证并转发其他人的交易（在这些情况下，运行此类程序的计算机被称为*完全节点*）。所有比特币矿工也是完全节点（即，他们需要完整的区块链副本才能进行挖矿）。
- en: One problem with full payment verification wallets is that they are very resource-intensive
    and take a long time to initialize. The blockchain, in its 5th year, was greater
    than 15GB in size and comprised 35 million transactions (by its 10th birthday,
    it may likely be 100 times larger). A fresh installation of a full payment verification
    Bitcoin wallet program can take several days (depending on bandwidth) to download
    the entire blockchain. Obtaining the blockchain requires connecting to other full
    nodes and checking to determine whose blockchain has the greatest proof-of-work
    total (by definition, this is assumed to be the consensus blockchain). For laptops
    and other home devices, running a full payment verification wallet may be merely
    inconvenient, but for some mobile phones, it is simply impossible. Fortunately,
    there is a way to make only a slight compromise in trust but in return achieve
    more computationally efficient transaction verification.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完全支付验证钱包的一个问题是，它们非常占用资源并且初始化需要很长时间。区块链在第五年时的大小超过了15GB，并包含3500万个交易（到十周年时，它可能会大约大100倍）。全新的完全支付验证比特币钱包程序可能需要几天时间（取决于带宽）来下载整个区块链。获取区块链需要连接到其他完全节点，并检查以确定哪个区块链具有最大的工作量证明总和（根据定义，这通常被视为共识区块链）。对于笔记本电脑和其他家用设备，运行完全支付验证钱包可能只是麻烦，但对于某些手机来说，这是根本不可能的。幸运的是，有一种方法可以在信任上做出微小妥协，但作为回报，可以实现更高效的交易验证。
- en: 'SPV wallets, also called *thin* or *lightweight* wallets, cannot check whether
    transactions are valid; rather, they can check whether full nodes, specifically
    miners, have validated them. The goal of a thin wallet is to check that a transaction
    has been verified by miners and included in some block in the blockchain. It’s
    similar to having an accountant balance your checkbook instead doing it yourself.
    This method works reliably as long as miners, who are adding blocks to the blockchain,
    act honestly and allow only valid transactions to be included (which is a safe
    assumption as long as no individual miner is in control of more than 51 percent
    of the hashing power of the network). But without a copy of the blockchain, how
    does a thin wallet know whether or not a received transaction was included in
    a block? The transaction can *claim* it was included in block #24371 on the blockchain,
    for example, but how would you know whether the claim was true or false? One strategy
    would be for your wallet program to connect to several full nodes and ask to download
    block #24371 along with all of its other transactions. Then your wallet can comb
    through the transactions in that block and identify whether the transaction under
    investigation is present. However, if your SPV wallet program has to check several
    hundred transactions a day and each time you need to download an entire block
    (with all of its transactions), from an efficiency standpoint, this strategy is
    hardly better than just downloading the entire blockchain.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'SPV 钱包，也称为*薄*钱包或*轻量级*钱包，无法检查交易是否有效；它们只能检查全节点，特别是矿工，是否已验证这些交易。薄钱包的目标是检查交易是否已被矿工验证并包含在区块链的某个区块中。这类似于让会计师帮你平衡支票簿，而不是自己做。这种方法在矿工诚实行事并只允许有效交易被包括在内的前提下可靠有效（只要没有单一矿工控制超过
    51% 网络算力，这是一个安全的假设）。但没有区块链副本，薄钱包如何知道收到的交易是否被包含在一个区块中呢？比如，交易可能*声称*它已经被包含在区块链的 #24371
    区块中，但你如何知道这个声明是真是假呢？一种策略是让你的钱包程序连接多个全节点，并请求下载 #24371 区块以及它的所有其他交易。然后你的钱包可以仔细查看该区块中的所有交易，确认是否存在待查的交易。然而，如果你的
    SPV 钱包程序每天需要检查数百个交易，而且每次都需要下载整个区块（包含所有交易），从效率的角度来看，这种策略几乎不比直接下载整个区块链更好。'
- en: The ingenuity of SPV rests on its ability to verify, through the magic of hash
    functions, that a transaction was included in a block without looking at any of
    the block’s transactions. To do so, SPV wallets need to download the headers of
    every block in the blockchain. Recall from [Chapter 8](../Text/ch08.html#ch08)
    that each block in the blockchain contains two parts, a long list of transactions
    and a short summary of the block’s contents (the header). Importantly, the header
    contains a hash of all the transactions within that block, structured in such
    a way that any Bitcoin wallet program can easily check whether a transaction belongs
    to a particular block by considering its hash value. This hash structure is called
    a *Merkle tree*.^([3](../Text/footnote.html#footnote66)) Using this Merkle tree
    design, thin wallets can safely confirm that transactions they receive have been
    included in the blockchain without downloading the full blockchain. Downloading
    just the block headers requires only a fraction of the memory that’s needed for
    the entire blockchain; therefore, SPV wallets can easily run on your smartphone
    and other inexpensive mobile devices.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: SPV 的巧妙之处在于，它通过哈希函数的魔力验证交易是否包含在区块中，而无需查看任何区块中的交易。为此，SPV 钱包需要下载区块链中每个区块的头部。回想一下在[第
    8 章](../Text/ch08.html#ch08)中提到的，每个区块包含两个部分：一个长长的交易列表和一个简短的区块内容总结（即头部）。重要的是，区块头包含了该区块中所有交易的哈希值，结构设计使得任何比特币钱包程序都能轻松地通过考虑交易的哈希值来判断该交易是否属于某个特定的区块。这个哈希结构被称为*Merkle
    树*。^([3](../Text/footnote.html#footnote66)) 使用这种 Merkle 树设计，薄钱包可以安全地确认它们接收到的交易已被包含在区块链中，而无需下载完整的区块链。只下载区块头部所需的内存远小于下载整个区块链；因此，SPV
    钱包可以轻松运行在智能手机和其他低成本移动设备上。
- en: A Bitcoin wallet app that uses SPV can also offer many but not all of the same
    security guarantees as a full wallet.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SPV 的比特币钱包应用程序也可以提供与全钱包相同的许多安全保证，但并非所有保证。
- en: Being able to run a resource-hungry Bitcoin wallet on a smartphone is an impressive
    feat of engineering. SPV wallets use advanced computer science technology but
    make a few compromises in flexibility. [Table 9-1](../Text/ch09.html#ch09table1)
    summarizes how we’d rate SPV wallets and compare them to full wallets using a
    variety of factors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在智能手机上运行一个资源密集型的比特币钱包，是一项令人印象深刻的工程成就。SPV钱包采用了先进的计算机科学技术，但在灵活性上做了一些妥协。[表9-1](../Text/ch09.html#ch09table1)总结了我们如何通过各种因素对SPV钱包进行评分，并将其与完整钱包进行比较。
- en: '**Table 9-1:** Rating SPV Wallets vs. Full Wallets'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**表9-1：** SPV钱包与完整钱包的评分对比'
- en: '| **Factor** | **Simplified payment verification wallets** | **Full payment
    verification wallets** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **因素** | **简化支付验证钱包** | **完整支付验证钱包** |'
- en: '| Speediness of initial installation and network synchronization | ![image](../Images/f0193-01.jpg)
    | ![image](../Images/f0193-02.jpg) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 初始安装和网络同步的速度 | ![image](../Images/f0193-01.jpg) | ![image](../Images/f0193-02.jpg)
    |'
- en: '| Speed of new payments (zero confirmation transaction) | ![image](../Images/f0193-03.jpg)
    | ![image](../Images/f0193-04.jpg) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 新支付的速度（零确认交易） | ![image](../Images/f0193-03.jpg) | ![image](../Images/f0193-04.jpg)
    |'
- en: '| Security for new payments | ![image](../Images/f0193-05.jpg) | ![image](../Images/f0193-06.jpg)
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 新支付的安全性 | ![image](../Images/f0193-05.jpg) | ![image](../Images/f0193-06.jpg)
    |'
- en: '| Security for confirmed payments | ![image](../Images/f0193-07.jpg) | ![image](../Images/f0193-08.jpg)
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 已确认支付的安全性 | ![image](../Images/f0193-07.jpg) | ![image](../Images/f0193-08.jpg)
    |'
- en: '| Overall security | ![image](../Images/f0193-09.jpg) | ![image](../Images/f0193-10.jpg)
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 整体安全性 | ![image](../Images/f0193-09.jpg) | ![image](../Images/f0193-10.jpg)
    |'
- en: '| Efficiency of storage use | ![image](../Images/f0193-11.jpg) | ![image](../Images/f0193-12.jpg)
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 存储使用效率 | ![image](../Images/f0193-11.jpg) | ![image](../Images/f0193-12.jpg)
    |'
- en: '| Ability to inspect arbitrary Bitcoin addresses | ![image](../Images/f0193-13.jpg)
    | ![image](../Images/f0193-14.jpg) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 检查任意比特币地址的能力 | ![image](../Images/f0193-13.jpg) | ![image](../Images/f0193-14.jpg)
    |'
- en: '| Ability to import private keys | ![image](../Images/f0193-15.jpg) | ![image](../Images/f0193-16.jpg)
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 导入私钥的能力 | ![image](../Images/f0193-15.jpg) | ![image](../Images/f0193-16.jpg)
    |'
- en: '| Effect on overall health of Bitcoin network | ![image](../Images/f0193-17.jpg)
    | ![image](../Images/f0193-18.jpg) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 对比特币网络整体健康的影响 | ![image](../Images/f0193-17.jpg) | ![image](../Images/f0193-18.jpg)
    |'
- en: 'Let’s examine each feature in this table in more depth:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地分析表格中的每一项功能：
- en: '**Speediness of initial installation and network synchronization**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**初始安装和网络同步的速度**'
- en: After initial installation, SPV wallets and full wallets need to download blockchain
    data from other nodes on the Bitcoin network. However, an SPV wallet only has
    to download block headers and some data specific to Bitcoin addresses it’s responsible
    for maintaining. Hence, an SPV wallet can synchronize and be ready for use in
    less than an hour, whereas full wallets might take many hours to initialize.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在初次安装后，SPV钱包和完整钱包都需要从比特币网络中的其他节点下载区块链数据。然而，SPV钱包只需要下载区块头和一些与它所负责维护的比特币地址相关的数据。因此，SPV钱包能够在不到一个小时的时间内同步并准备好使用，而完整钱包可能需要数小时才能初始化完成。
- en: '**Speed of new payments**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**新支付的速度**'
- en: For SPV wallets and full wallets, new (but still unconfirmed) transactions made
    on the network are quickly broadcast to all peers. If someone sends money to an
    address managed by your wallet, you’ll be notified within a few seconds, no matter
    your wallet type.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SPV钱包和完整钱包，网络上新（但尚未确认）的交易会迅速广播到所有对等节点。如果有人向你钱包管理的地址发送比特币，你会在几秒钟内收到通知，无论你的钱包类型如何。
- en: '**Security for new payments**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**新支付的安全性**'
- en: A full wallet that can access a complete blockchain can quickly validate new
    transactions, ensuring that it is sending money from a valid and adequately funded
    source address. An SPV wallet cannot do this and instead relies on its network
    peers to ensure its transactions are legit. In theory, if someone sends you a
    payment and is in cahoots with one of the (supposedly) random peers your SPV wallet
    interacts with, this sender could send you fraudulent payments. A full wallet
    is immune from this type of attack.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以访问完整区块链的完整钱包，可以迅速验证新交易，确保其发送的资金来自一个有效且资金充足的源地址。而SPV钱包则无法做到这一点，它依赖于网络中的其他节点来确保交易的合法性。理论上，如果有人向你发送支付，并且与SPV钱包所互动的（假设是随机的）节点中的某一个节点勾结，这个发送者可能会向你发送欺诈性的支付。完整钱包免疫于这种类型的攻击。
- en: '**Security of confirmed payments**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**已确认支付的安全性**'
- en: 'Even if a transaction is 100 percent valid, just because a transaction is broadcast
    doesn’t mean it will make it into the blockchain, especially if the spender creates
    an additional transaction that attempts to doublespend the money to another address.
    For this reason, it’s best to wait for three to six block confirmations on larger
    purchases. SPV and full wallets can validate transactions by tracking these confirmations.
    While a full wallet can directly prove that a transaction that has been mined
    into a new block is truly valid (i.e., sent from a fully funded address), an SPV
    wallet cannot. Therefore, if a miner includes a bad transaction in a new block,
    an SPV wallet could still be fooled. But it is very unlikely a miner would ever
    do this: Mining blocks is extremely costly, and by design a block with bad transactions
    would be immediately abandoned by any other full nodes on the network that take
    the time to perform validation on the block. As a result, a miner would never
    receive a reward for mining a block containing bad transactions. Hence, a confirmed
    payment sent to an SPV wallet is quite secure, although the security of a full
    wallet is still the gold standard.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 即使一笔交易是百分之百有效的，仅仅因为交易已被广播，并不意味着它会被纳入区块链，特别是如果花费方创建了另一笔交易，试图将资金双重支付给另一个地址。出于这个原因，最好对较大金额的购买等待三到六个区块确认。SPV钱包和完整钱包都可以通过跟踪这些确认来验证交易。虽然完整钱包可以直接证明已挖掘到新区块的交易是真正有效的（即，来自一个完全资金充足的地址），但SPV钱包无法做到这一点。因此，如果矿工将一个无效的交易包含进新区块，SPV钱包仍然可能被欺骗。但矿工这么做的可能性非常小：挖矿区块成本极高，并且根据设计，包含无效交易的区块会立即被网络中任何其他完整节点放弃，这些节点会花时间对区块进行验证。因此，矿工永远不会因为挖掘包含无效交易的区块而获得奖励。因此，发送到SPV钱包的已确认付款相当安全，尽管完整钱包的安全性仍然是黄金标准。
- en: '**Overall security**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**整体安全性**'
- en: All in all, a properly programmed SPV Bitcoin wallet can offer security for
    your bitcoins and bitcoin payments that is quite good, though it can never match
    the security guarantees of a full wallet. If you’re running an SPV wallet on your
    smartphone and receive a payment, you can rest assured that once this payment
    has been confirmed by a few blocks, the balance and other information reported
    in the SPV wallet can be trusted to be accurate.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，一个正确编程的SPV比特币钱包能够提供相当好的安全性，保护你的比特币和比特币支付，尽管它永远无法与完整钱包的安全保障相匹配。如果你在智能手机上运行SPV钱包并收到一笔付款，你可以放心，一旦这笔付款经过几个区块确认，SPV钱包报告的余额和其他信息可以信赖其准确性。
- en: '**Efficiency of storage use**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**存储使用效率**'
- en: As discussed earlier, storing the blockchain of a full wallet consumes many
    gigabytes of disk space. However, an SPV wallet requires less than a gigabyte
    of storage and can run efficiently on a modern smartphone.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，完整钱包存储区块链需要占用多个GB的磁盘空间。然而，SPV钱包所需的存储空间不到一个GB，并且可以在现代智能手机上高效运行。
- en: '**Ability to inspect arbitrary Bitcoin addresses**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查任意比特币地址的能力**'
- en: Because a full blockchain contains the balances of all Bitcoin addresses in
    existence, a full wallet lets you easily check balances and other details of any
    address, even those you don’t own (if the full wallet programmers choose to include
    this ability in their app). An SPV wallet is completely ignorant of all Bitcoin
    addresses other than those it is directly responsible for and is unable to provide
    such information.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于完整区块链包含所有比特币地址的余额，完整钱包可以轻松查看任何地址的余额和其他细节，甚至是你没有拥有的地址（如果完整钱包的程序员选择在他们的应用中包含此功能）。SPV钱包完全不了解除了其直接负责的地址以外的所有比特币地址，因此无法提供此类信息。
- en: '**Ability to import private keys**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入私钥的能力**'
- en: If you want to import an existing Bitcoin address (and associated private key)
    into a full wallet, the full wallet is able to incorporate the address and the
    funds linked to it within seconds. An SPV wallet has no easy way to import such
    a key, because it has no information about any historical transactions involving
    this address. Therefore, if you import a private key into an SPV wallet (given
    there is an option to do this), you can expect to wait several minutes as the
    wallet queries its peers for historical data involving the new address.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将一个现有的比特币地址（及其关联的私钥）导入完整钱包，完整钱包能够在几秒钟内将该地址和与之相关的资金纳入其中。SPV钱包则没有简单的方法导入这样的密钥，因为它没有关于涉及该地址的任何历史交易的信息。因此，如果你将私钥导入SPV钱包（假设有此选项），你可能需要等待几分钟，因为钱包需要向其同行查询涉及新地址的历史数据。
- en: '**Effect on overall health of Bitcoin network**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**比特币网络对整体健康的影响**'
- en: For the Bitcoin network to remain healthy, all the participating nodes need
    to cooperate in validating new transactions and blocks. As discussed previously,
    SPV wallets are limited in terms of validation capability. Also, SPV wallets usually
    don’t accept incoming TCP connections and may not participate in broadcasting
    third-party transactions/blocks to peers. For this reason, having a large percentage
    of SPV nodes on the Bitcoin network could potentially have repercussions on the
    overall health of the network. At this time, there is little evidence of any negative
    effects. But as the blockchain grows year after year, the percentage of nodes
    that can’t perform full validation may increase, and problems may arise. Nonetheless,
    improving storage capacity and faster network speeds will likely continue to allow
    people to cope with the growing blockchain, and definite benefits will be gained
    by running a full node. Hopefully, this will give many people incentives to run
    full nodes in the years to come to sustain the health of the network indefinitely.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持比特币网络的健康，所有参与节点需要共同合作验证新的交易和区块。如前所述，SPV钱包在验证能力方面有限。此外，SPV钱包通常不接受传入的TCP连接，并且可能不会参与广播第三方交易/区块给其他节点。因此，比特币网络中如果存在大量的SPV节点，可能会对网络的整体健康产生影响。目前，几乎没有证据表明会有负面效应。但随着区块链年复一年的增长，不能进行完全验证的节点比例可能会增加，问题也可能随之出现。尽管如此，存储容量的提升和网络速度的加快，可能会继续帮助人们应对不断增长的区块链，并且通过运行完整节点将获得明显的好处。希望这能激励许多人在未来继续运行完整节点，以维持网络的长期健康。
- en: In short, SPV wallets have some limitations, but as long as you understand these
    limitations, these wallets are suitable for storing your money. However, if you
    are storing large amounts of Bitcoin, it may be wiser to use a full wallet, given
    the additional security guarantees. But for storing some spending cash on your
    smartphone, SPV wallets are an ideal solution.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，SPV钱包有一些局限性，但只要你理解这些局限性，这些钱包就适合用来存储你的资金。然而，如果你存储的是大量比特币，考虑到额外的安全保障，使用完整钱包可能更明智。但如果只是存储一些零花钱在智能手机上，SPV钱包则是一个理想的解决方案。
- en: '**Other Common (and Not So Common) Bitcoin Wallet Features**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他常见（以及不那么常见的）比特币钱包功能**'
- en: In addition to features dictated by the underlying design of different wallet
    architectures, some Bitcoin wallets have a variety of other basic and advanced
    features. Some basic features you should expect to see include password protection,
    the ability to make backups of your private keys, QR code scanning and generation,
    and the ability to generate and import paper wallets.^([4](../Text/footnote.html#footnote67))
    A somewhat advanced feature that is common to many Bitcoin wallets is the ability
    to sign messages with your private key. Recall that [Chapter 7](../Text/ch07.html#ch07)
    discussed how digital signatures are used to sign Bitcoin transactions with your
    private key. The same digital signatures can be used to sign arbitrary messages,
    and many Bitcoin wallets make this an easy-to-use feature because it is useful
    when you need to prove you are the owner of a particular Bitcoin address (for
    example, if you are trying to get preapproved for a loan from a bank and it wants
    you to prove you have bitcoins as collateral).^([5](../Text/footnote.html#footnote68))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了由不同钱包架构的底层设计决定的特性外，一些比特币钱包还具备多种其他基本和高级功能。你应该期待看到的一些基本功能包括密码保护、备份私钥的能力、二维码扫描和生成，以及生成和导入纸钱包的能力。^([4](../Text/footnote.html#footnote67))
    一个相对高级的功能，是许多比特币钱包常见的，即能够使用你的私钥签名消息。回想一下，[第7章](../Text/ch07.html#ch07)讨论了如何使用你的私钥对比特币交易进行数字签名。相同的数字签名也可以用来签署任意消息，许多比特币钱包将这一功能设计得易于使用，因为它在你需要证明自己是某个比特币地址的所有者时非常有用（例如，如果你试图从银行获得预批准的贷款，而银行要求你证明自己有比特币作为抵押）。^([5](../Text/footnote.html#footnote68))
- en: 'Other advanced features you might see in some Bitcoin wallet programs include
    multi-signature transactions, in which multiple private keys are required to spend
    bitcoins from one Bitcoin address, and a feature called *coin control*, which
    provides fine-grained control over which bitcoins you use for making any specific
    purchase (see “An Advanced Bitcoin Wallet Feature: Coin Control” below). The number
    of advanced features available is too extensive to list here (and the number of
    features keeps increasing), but now you understand why so many Bitcoin wallet
    programs exist!'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在某些比特币钱包程序中看到其他高级功能，包括多签名交易，其中需要多个私钥才能从一个比特币地址支出比特币，以及一种名为*币控制*的功能，它可以精细控制你用于特定购买的比特币（见下文“高级比特币钱包功能：币控制”）。可用的高级功能种类繁多，无法在这里一一列举（而且这些功能的数量还在不断增加），但现在你应该明白为什么有这么多比特币钱包程序存在了！
- en: '**AN ADVANCED BITCOIN WALLET FEATURE: COIN CONTROL**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级比特币钱包功能：币控制**'
- en: Imagine you have three nickels in your pocket, and you walk into the Very-Cheap-Candy-Store
    to buy a chocolate that costs a nickel. Your nickels are *fungible*, meaning that
    each of your three nickels is equally valuable and useful as payment for the chocolate.
    Well, at least you think they are. But perhaps you didn’t notice that each nickel
    has a different image engraved on the reverse side, and one of them is a 1913
    Liberty Head V nickel (of which only five exist in the world and are valued at
    about $4 million each). When you pay for your chocolate, you use the nickel with
    the rare image, and the store owner recognizes it! To your alarm, he calls the
    police because the nickel you gave him once belonged to his friend (Warren Buffet?
    Richard Branson?) and it was stolen. After several hours of interrogation, you
    convince the police that you had no idea you were carrying a stolen nickel and
    explain that you’ve learned a valuable lesson about choosing your coins carefully
    before paying with them. This short tale is the basis for the coin control feature
    offered by some Bitcoin wallets.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你口袋里有三枚五分镍币，你走进了“超便宜糖果店”去买一块价值五分的巧克力。你的五分镍币是*可替代的*，意味着你口袋里的三枚五分镍币每一枚都具有同等的价值，并且都能用于支付巧克力。嗯，至少你是这么认为的。但或许你没有注意到，每一枚镍币的反面都刻有不同的图案，其中一枚是1913年的自由头V型镍币（全世界仅有五枚，估值约为400万美元每枚）。当你用它支付巧克力时，你使用了那枚稀有图案的镍币，而店主认出了它！令你惊恐的是，他报警了，因为你给他的那枚镍币曾经属于他的朋友（沃伦·巴菲特？理查德·布兰森？），而且它被盗了。经过几小时的审问，你终于说服警察相信你并不知道自己带着一枚被盗的镍币，并解释说你从这件事中学到了一课——在支付时，要小心选择你的硬币。这个小故事就是某些比特币钱包提供的币控制功能的基础。
- en: If you have received bitcoins from multiple sources to the same Bitcoin address,
    then the bitcoins from each transaction can be distinguished from each other (each
    group of bitcoins is called an *unspent output*). With a Bitcoin wallet that supports
    coin control, when you send a payment from your wallet, you can choose to spend
    only the bitcoins you received from your employer, rather than the ones your friend
    gave you, even if the bitcoins are all sitting at the same address.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从多个来源收到了比特币到同一个比特币地址，那么每笔交易中的比特币是可以相互区分的（每一组比特币被称为*未花费的输出*）。使用支持币控制的比特币钱包时，当你从钱包发送支付时，你可以选择只使用你从雇主那里收到的比特币，而不是你朋友给你的那些，即使所有比特币都在同一个地址上。
- en: In most cases, it doesn’t matter which coins you use to pay for something. However,
    in some situations you are legally obligated to choose a specific funding source
    for an expense. For instance, in most places in the United States, a landlord
    is required to place a tenant’s security deposit in a separate bank account to
    ensure the money is not mishandled and can be spent only in appropriate ways.
    Someone may have similar obligations when managing Bitcoin funds for other people.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你用什么硬币支付并不重要。然而，在某些情况下，你有法律义务为某项开支选择特定的资金来源。例如，在美国的大多数地方，房东被要求将租户的押金存入单独的银行账户，以确保这些钱不会被错误处理，并且只能用于适当的用途。当管理他人的比特币资金时，某人可能会有类似的义务。
- en: Additionally, because all Bitcoin blockchain information is public, if you receive
    and send payments from the same pool of Bitcoin addresses that comprise a wallet,
    your income source and purchases can theoretically be associated surreptitiously.
    Through the use of coin control, you can choose payment addresses that prevent
    this association, giving you more privacy.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于所有比特币区块链信息都是公开的，如果你从构成钱包的相同比特币地址池接收和发送支付，那么你的收入来源和购买行为理论上可以被偷偷地关联。通过使用币控制功能，你可以选择支付地址以防止这种关联，从而为你提供更多的隐私。
- en: '**Future Wallets**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**未来的钱包**'
- en: Future Bitcoin wallet programs may offer such features as automatic bill payments,
    cash flow statements, tax reporting, and tighter integration with traditional
    financial accounting software. Also, continued technical innovation could enable
    wallets to execute more complicated transactions, such as escrow transactions,
    or sending bitcoins to accounts that can’t be spent until some external criterion
    is met (such as the year being greater than 2020). No doubt we will see many of
    these exciting features in Bitcoin wallets in the next few years.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的比特币钱包程序可能会提供自动支付账单、现金流量表、税务报告以及与传统财务会计软件更紧密的集成等功能。此外，持续的技术创新可能使钱包能够执行更复杂的交易，例如托管交易，或将比特币发送到在满足某些外部条件（例如年份大于2020年）之前无法使用的账户。毫无疑问，我们将在未来几年内看到比特币钱包中出现许多令人兴奋的功能。
- en: '**Which Wallet Is Right for You?**'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**哪个钱包最适合你？**'
- en: Considering the preceding discussions, which Bitcoin wallet should you use?
    Well, keep in mind that you can use more than one. In fact, if two different Bitcoin
    wallets use *the same private key*, they can both spend the *same bitcoins*. You
    can have a lightweight, no-blockchain wallet on your mobile phone and a more sophisticated
    Bitcoin wallet on your home server, both managing one pool of bitcoins.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到前面的讨论，你应该使用哪种比特币钱包？嗯，请记住，你可以使用多个钱包。事实上，如果两个不同的比特币钱包使用*相同的私钥*，它们可以同时花费*相同的比特币*。你可以在手机上使用轻量级的无区块链钱包，在家庭服务器上使用更复杂的比特币钱包，两者共同管理一个比特币池。
- en: However, in practice many users keep distinct pools of Bitcoin in separate Bitcoin
    wallets (i.e., each wallet has its own set of private keys), because it’s easy
    to move bitcoins between them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在实际操作中，许多用户将比特币保存在不同的比特币钱包中（即每个钱包都有自己的一组私钥），因为在它们之间移动比特币非常容易。
- en: A common setup that works well for personal use is to store a small number of
    bitcoins in a lightweight Bitcoin wallet on your phone or laptop, which travels
    with you, and store your savings in a separate Bitcoin wallet that is more secure
    (with such features as cold storage and offline transaction signing). In short,
    keep a few bitcoins in your hot wallet and save the rest in your cold wallet,
    which is similar to carrying a wallet with spending cash in your pocket and keeping
    your life savings in a bank account (except Bitcoin lets *you* be *your own* secure
    bank).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一种适用于个人使用的常见设置是将少量比特币存储在手机或笔记本上的轻量级比特币钱包中，它会和你一起出行，同时将储蓄存放在一个更安全的比特币钱包中（例如具有冷存储和离线交易签名等功能）。简而言之，保持少量比特币在热钱包中，其余的存储在冷钱包中，这类似于将一些现金放在口袋里的钱包中，而将你的积蓄保存在银行账户中（只不过比特币让*你*成为*自己的*安全银行）。
- en: '**Additional Wallet Considerations**'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**附加钱包考虑事项**'
- en: 'So far we’ve discussed Bitcoin wallets in terms of their functionality, features,
    and underlying design, but other considerations should be taken into account as
    well: Is the Bitcoin wallet open source? Has it received a security audit? Does
    it have a large user base? Because Bitcoin wallets manage money, it’s imperative
    that you be more careful when choosing a wallet than when choosing other apps,
    such as games or office software. Be sure to research the Bitcoin wallet program
    you plan to use before storing significant amounts of money in it. Check with
    friends or colleagues to see whether they have had good experiences with the program.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了比特币钱包的功能、特性和基础设计，但还应考虑其他因素：比特币钱包是否是开源的？它是否经过了安全审计？它是否有大量用户？因为比特币钱包涉及资金管理，所以在选择钱包时，你应该比选择其他应用（如游戏或办公软件）时更加小心。在将大量资金存储到某个钱包中之前，务必先研究一下你计划使用的比特币钱包程序。向朋友或同事询问，看看他们是否有过好的使用体验。
- en: Additionally, consider merchant integration. If you want to use bitcoins for
    transactions at certain stores or restaurants, check whether your Bitcoin wallet
    software is compatible with their point-of-sale systems. Any wallet app or program
    with a substantial user base will probably work well, but if you want to be the
    guinea pig for the latest and greatest Bitcoin wallet, expect to run into a few
    hiccups when you’re trying to make a purchase.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，考虑商户集成。如果你想在某些商店或餐厅使用比特币进行交易，检查一下你的比特币钱包软件是否与他们的销售点系统兼容。任何拥有大量用户基础的钱包应用或程序可能都能很好地工作，但如果你想尝试最新、最棒的比特币钱包，那么在尝试进行购买时，可能会遇到一些小问题。
- en: Fortunately, it’s easy to try many different wallets and fund them with a few
    cents of bitcoins to determine how they work and what features they offer. We
    suggest you experiment with several before you decide on your favorite.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，尝试许多不同的钱包并用几分钱的比特币进行充值，以确定它们的工作方式和提供的功能是非常简单的。在决定你最喜欢的钱包之前，我们建议你先进行一些实验。
