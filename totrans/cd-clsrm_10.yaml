- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Networking a Coding Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further ensure the success of your learners, in this chapter we’ll explore
    community building efforts you can promote at your school to encourage a safe,
    supportive, and engaging learning environment. Research indicates that students
    who feel connected to their school community are more likely to exhibit altruistic
    behaviors, be more academically driven, and develop improved social-emotional
    skills. The activities and programs covered here are intended to foster a sense
    of belonging and accomplishment for your students. They’ll also involve constructing
    a support system that will hopefully extend beyond the school walls and into the
    local community.
  prefs: []
  type: TYPE_NORMAL
- en: Your Computer Science Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your community is a network of personal relationships and connections. As a
    computer science educator, you know the power of large networks. *Metcalfe’s*
    *law* states that the number of possible unique connections in a network grows
    proportional to the square of the number of users connected to it. The maximum
    number of unique connections, is equal to *n*(*n*-1)/2, where *n* is the number
    of nodes on the network. Similarly, the more people in a group, the more ways
    the people in that group can form relationships and collaborate. A classroom of
    20 students can form 190 possible relationship connections, and a computer science
    program of 100 students can form 4,950\. But you, as the educator, must provide
    the environment in which these relationships can grow.
  prefs: []
  type: TYPE_NORMAL
- en: Classroom Meetings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One popular way to begin building a sense of community with your classroom is
    to hold regular *classroom meetings*. This is a set time when you encourage students
    to compliment one another, discuss what is and isn’t working in the class, share
    class-related anecdotes from their home life, or help one another with homework.
  prefs: []
  type: TYPE_NORMAL
- en: This is also a time to help students build a sense of ownership of their education.
    To do so, you should think about curriculum areas where you can empower student
    voice and choice. Classroom coding exercises are one such area. In Chapter 7,
    we walked through several coding exercises and examined how to address multiple
    computer science standards in each one. As an educator, over the years, you’ll
    curate a collection of class exercises. In your class meetings, offer students
    some options and let them debate and choose an activity based on their collective
    interests.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to letting your students discuss and choose some of their classroom
    activities, you can allow them to choose a *programming style* or *code style*
    the class will use to write code. For example, what’s the maximum number of characters
    per line of code before breaking to a second line? Will you use *camel case* for
    variables names, capitalizing each word after the first, like camelCase, or will
    you use *snake case* and separate words with underscores, like snake_case?
  prefs: []
  type: TYPE_NORMAL
- en: How many spaces will you indent your nested code? For curly braces, will you
    keep the open brace on the same line as your function or conditional statement,
    as in Listing 10-1?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 10-1: Open brace on the same line'
  prefs: []
  type: TYPE_NORMAL
- en: Or will you line up the open braces, as in Listing 10-2?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 10-2: Open braces lined up with one another'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 10-1 and Listing 10-2 are common and legitimate coding styles. Students
    might become surprisingly passionate about these details, just like programmers
    in the professional world are. The great aspect of these choices is that they’re
    low stakes if you lay out the options and allow for modifying the standards at
    a later point. Including students in the process of defining standards like these
    gives them a sense of ownership, responsibility, and academic motivation.
  prefs: []
  type: TYPE_NORMAL
- en: Pair Programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to classroom meetings, another common strategy for building student
    connections is a *buddy program*. Traditionally, this is where an older student
    is paired with a younger student of at least two grade levels’ difference. The
    younger student benefits from the mentoring and one-on-one time spent with the
    older student; the older student benefits from taking a leadership role and the
    responsibility that comes with it. Both students benefit from the cooperative
    nature of the relationship as it relates to their academic lives.
  prefs: []
  type: TYPE_NORMAL
- en: Analogous to the buddy program in schools is the Agile methodology technique
    of *pair programming*, where two developers work together on one computer. In
    this exercise, one developer works at the keyboard writing the code and the other
    reviews the code as it’s written. The two switch places regularly, alternating
    between writing code and reviewing it.
  prefs: []
  type: TYPE_NORMAL
- en: The relationship and benefits of this technique can depend on the skill levels
    of the two programmers. If one programmer has more experience, they’ll take a
    mentoring role to the less experienced member. It’s very important in such a pairing
    that the more experienced programmer not drive the development, putting the less
    experienced programmer into a more passive role. If the two programmers are equally
    proficient, they’ll both benefit from the differing backgrounds and experience
    they bring to the exercise. In all pairings, the programmers will benefit from
    increased productivity because they must remain focused out of respect for their
    peer, and increased quality because two sets of eyes review every line of code
    committed during the exercise. Students will also practice their technical communication
    and collaboration skills when using this technique.
  prefs: []
  type: TYPE_NORMAL
- en: Several studies on pair programming have found significant benefits for girls
    specifically. One study found that girls who took part in pair programming exercises
    in a computer science class performed significantly better on the final exam.
    Another study found that the practice helped to close the gender gap and encourage
    more girls to take computer science as a major later on. Pair programming can
    help break the perception of computer science as a solitary and isolating discipline
    by promoting socialization and collaboration among students.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the pair programming technique is *mob programming*, where a team
    or your class collaborates on writing software on a single computer. This exercise
    might be useful when introducing new concepts or as a fun way to engage the class.
    But with many participants, the exercise can become less personalized and difficult
    to manage.
  prefs: []
  type: TYPE_NORMAL
- en: Online Forums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous chapter, we reviewed online forums as a place where students
    can seek help and find answers to their tough programming conundrums. Online forums
    can also provide opportunities for your students to engage in *asynchronous communication*,
    where the conversation doesn’t occur in real time. This allows students time to
    think about what they want to post and properly articulate their thoughts. Online
    forums are a great way to bring more introverted students into the conversation,
    because they aren’t put on the spot in face-to-face activities.
  prefs: []
  type: TYPE_NORMAL
- en: One option for your classroom forum is to set up a members-only discussion board,
    so only students in your classes can participate. The problem with forums restricted
    to just your students is that they’ll naturally suffer from low participation.
    To be successful, forums need a critical mass of members to produce, read, and
    respond to content. To overcome any lack of participation, you can mandate that
    students post regularly and engage with their classmates in the forum.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to engage with an existing public forum like Stack Overflow.
    These communities are successful because they maintain productive discourse using
    *reputation scores*, where users award substantively helpful posts and comments
    with upvotes. These upvotes translate into points for the poster who can earn
    badges and level up to earn more site privileges. In this way, the platform gamifies
    constructive c­ommunity participation.
  prefs: []
  type: TYPE_NORMAL
- en: One way to engage with this platform is to sort students into teams, with each
    group having a team account on the forum using a name that preserves student anonymity.
    Teams then earn points for submitting questions, submitting advice on improving
    the wording of questions, or answering questions posed by other users. See which
    teams earn the highest reputation scores. As we’ll see in the “Professional Development
    Services” section, these scores can have real-world benefits when students are
    looking for employment.
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect of building an inclusive computer science community
    at your school is in how that community interacts with the larger schoolwide population.
    One of the greatest aspects of computer science is that so many examples of it
    are already at work in your school. In the next section, we’ll look at outreach
    strategies that will increase visibility for your computer science program while
    providing services to your school.
  prefs: []
  type: TYPE_NORMAL
- en: Your Schoolwide Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we’ve covered some strategies to build bonds between the students in
    your classrooms and the computer science department. An important aspect of your
    computer science community’s identity is how it fits into and contributes to the
    larger academic community. Here we’ll cover some ways your computer science program
    and your students can make meaningful contributions to your school while getting
    hands-on experiences. Those experiences will provide them with a deeper understanding
    of computer science standards involving hardware, software, and computer systems,
    and how users interact with these systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll examine three documents you should maintain at your school as a best
    practice: your Acceptable Use Policy (AUP), current state assessment, and technology
    strategic plan. These documents will define how users are allowed to access your
    infrastructure, catalog your existing systems, and articulate a vision for how
    you and your students want IT to serve your school’s mission in the future. Each
    document is a computational artifact, and constructing or revising each document
    involves collaboration, research, and deep inquiry. By including your students
    in a document’s revisions, you’re connecting computer science standards to the
    concrete ways they apply to your school. Students who help with the revision process
    will have deeper insights into the school’s computer systems as they work with
    them throughout the school year.'
  prefs: []
  type: TYPE_NORMAL
- en: Student Privacy Is Paramount
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before discussing your school’s IT infrastructure and the systems where your
    students can assist, we need to note those systems your students can’t access.
    The United States *Family Educational Rights and Privacy Act (FERPA)* prohibits
    schools from releasing any academic information about a student without parental
    permission or permission of the student if they are of legal age. Third-party
    software providers can work with student academic data if they’re providing services
    to the school and a school official has authorized access to the data.
  prefs: []
  type: TYPE_NORMAL
- en: Software providers working with student *Personally Identifiable Information
    (PII)*, data they can use to link a student to education records, must satisfy
    several requirements to ensure that data’s security. These requirements include
    transparency as to what student data is collected and how it will be used, and
    notifying parents of its use to allow them to opt out. The provider must have
    a security plan and a policy for handling a potential data breach. They must also
    have a process for certifying data destruction when the services are complete.
  prefs: []
  type: TYPE_NORMAL
- en: Although students at your school can’t work on these systems, it can be enlightening
    for them to learn about FERPA and its implications for your school’s IT infrastructure.
    These kinds of legal insights help inform discussions when defining what is allowable
    on school computer systems.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptable Use Policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a school provides computers, internet access, and web applications to students,
    it’s a best practice to have those users sign or accept an AUP. This document
    defines what behaviors are prohibited on school resources to protect the school,
    its equipment, and the students from harm. It prevents destructive behaviors and
    protects student identities.
  prefs: []
  type: TYPE_NORMAL
- en: The US Department of Education recommends including students in the process
    when revising your school’s AUP to encourage a sense of ownership of the document
    and buy-in for it. The AUP should be student centered and student friendly, and
    explain the reasons for its policies rather than just what is prohibited.
  prefs: []
  type: TYPE_NORMAL
- en: For example, not allowing food and drink near school computers is an example
    of a prohibited behavior that protects the school’s technology from spills. You
    and your students might agree to prohibit students from accessing personal accounts,
    such as email or social networking, on public computers. The sites students visit
    might be stored in the browser’s history, allowing other users to see the sites
    they’ve visited, including web searches. Imagine one student using a school computer
    to search on a private medical issue and then another seeing that search in the
    browser history. If a site stores cookies to avoid having to enter a username
    and password with each visit, other users on the same computer might be able to
    access the student’s account. Explaining to students how these policies protect
    them not only encourages adherence, but also educates students on how to protect
    themselves outside the classroom.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing the AUP is another area in which to include your students. Policies
    like maintaining computer access logs, using site filtering software, and mandating
    a teacher be present when computers are in use can ensure policies are being followed.
  prefs: []
  type: TYPE_NORMAL
- en: Students in your computer science program can learn a lot from helping to revise
    the AUP, and you can also enlist them in publicizing it. You could create a project
    in which students use multimedia to promote and explain the AUP to their peers.
    Your students could also visit other classrooms, give presentations, and answer
    questions to help get the word out.
  prefs: []
  type: TYPE_NORMAL
- en: School IT Infrastructure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To best inform your computer science students and their understanding of the
    AUP, you can familiarize them with your school’s existing IT infrastructure. Although
    your students are prohibited from working with systems that handle student academic
    data, most likely many other systems are available for students to learn about,
    such as computer labs and Wi-Fi, which are used in classroom instruction. Learning
    the details of these systems will give students a sense of ownership and responsibility
    for them.
  prefs: []
  type: TYPE_NORMAL
- en: Providing your students with the opportunity for hands-on experience with your
    school’s IT infrastructure provides a meaningful way to cover several computer
    science standards relevant to hardware, software, and troubleshooting. As you
    talk with your students about your school’s hardware and software, make sure they’re
    using appropriate terminology when identifying components. Highlight when hardware
    upgrades improve software performance so they can better understand how hardware
    and software relate to one another. Illustrate how these many components within
    each computer interact and depend on each other to form a system.
  prefs: []
  type: TYPE_NORMAL
- en: This is also an opportunity for students who don’t have access to computers
    at home to play with hardware that they might not otherwise have access to and
    to experience processes common in the professional world. For example, you could
    have a lab or workshop where you lead the class through the process of upgrading
    hardware or software components on a group of computers.
  prefs: []
  type: TYPE_NORMAL
- en: Start by familiarizing your students with the systems they access at school.
    What are the various hardware specifications for the computers they use? What
    is the central processing unit (CPU) operating frequency? How much RAM do systems
    have installed? For storage, do they use hard disk drives (HDD), solid state drives
    (SSD), or a hybrid of the two? What is the storage capacity? Which internet service
    provider (ISP) does the school use? What is the connection’s bandwidth?
  prefs: []
  type: TYPE_NORMAL
- en: On the software side, have them determine which operating systems the school
    uses. What software is installed for productivity? Which versions of this software
    are installed, and how are they maintained? How are upgrades deployed? Does the
    school’s IT staff use *disk imaging software*, which allows engineers to make
    a copy of all the software and configurations on one computer to deploy on other
    systems with the same hardware?
  prefs: []
  type: TYPE_NORMAL
- en: In addition to your school’s supported infrastructure, the school might also
    use *shadow IT*, which is tech used at your school for productivity or on the
    network that isn’t officially supported. This could include apps teachers use
    to manage their classrooms or apps students use to connect to the Wi-Fi on their
    smartphones. It can also include documenting how people are using the software
    provided or if they’re quietly forgoing it because the applications fail to meet
    their needs. Your students will derive novel insights when they compare their
    expectations of how users are supposed to interact with technology to how it’s
    actually being used at your school.
  prefs: []
  type: TYPE_NORMAL
- en: Work with your students to compile all these findings into a *current state
    assessment* report. Such inventories are essential in the professional world,
    and your school is no exception. By creating this report, your students will gain
    firsthand experience with computer science facets related to hardware, software,
    and how people use information technology. Once the infrastructure is cataloged,
    students can begin reviewing and revising potential future states for IT at your
    school.
  prefs: []
  type: TYPE_NORMAL
- en: Technology Strategic Plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your students understand your school’s current technological state, you
    can begin thinking about its future state. A *technology strategic plan* is a
    living document that clearly defines your school’s vision for how technology will
    contribute to your organization’s mission. It outlines goals for supporting the
    mission and implementation strategies for achieving those goals at a high level.
    You should revise the strategic plan annually. The yearly revision presents a
    great opportunity to include students in the process as a learning activity and
    to gather their insights as community members.
  prefs: []
  type: TYPE_NORMAL
- en: Before revising the strategic plan, have your students explore what plans related
    to your organization already exist. Are there strategic plans at the district,
    county, or state levels? What about plans for other schools? What aspects of these
    plans do your students like or dislike? Seeing the various ways local organizations
    approach this document should give students an appreciation for how your local
    institutions enhance their IT infrastructure to meet their educational goals.
  prefs: []
  type: TYPE_NORMAL
- en: Because your technology program services your school, your strategic plan should
    tie into your school’s mission statement and tie your technology vision into serving
    that. How is your technology tied to learning outcomes at your school? How does
    your technology build community bonds and foster collaboration? You might want
    to address certain attributes, such as accessibility, productivity, problem solving,
    and technological literacy. Many computer science concepts related to digital
    citizenship, such as inclusiveness, equity, regulations, ethics, and safety, are
    important in the plan. Having your students wrestle with and discuss these many
    dimensions of IT as they relate to your school and themselves helps them practically
    apply these concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Once your vision is collaboratively defined, you’ll craft a road map for IT
    at your school that lays out future software and hardware upgrades into a general
    timeline of projects. Your students should enjoy being in the know about future
    efforts and take pride in being part of the decision-making process. Sharing this
    road map with your users provides enhancements they can look forward to and gives
    you a reason to promote your computer science program as they’re accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One challenge for your IT cataloging efforts will be learning how satisfied
    your users are with the technology at your school. For this reason, regular user
    satisfaction surveys are a great tool for keeping a finger on the pulse of how
    happy your users are with your tech and providing your students with deeper insights
    into how people interact with technology. These are brief, anonymous questionnaires
    sent out at regular monthly or quarterly intervals. They ask your users to rate
    their satisfaction with areas of the IT infrastructure on a scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample question might be “How satisfied are you on a scale of 1 to 10 with
    the school website: 1 is very unsatisfied and 10 is very satisfied?” These surveys
    will help you initially identify problem areas in your infrastructure. Then, as
    you make improvements to the service, you can see how the responses change over
    time.'
  prefs: []
  type: TYPE_NORMAL
- en: For services like the school website or software applications, another technique
    is to sit down with users and have them walk you through how they use the product.
    The people who use your school’s information systems the most will develop tricks
    and shortcuts to increase their productivity. Often, you’ll find ways to improve
    these applications with new features that will help your power users.
  prefs: []
  type: TYPE_NORMAL
- en: An important question for your strategic plan is “How do you define success?”
    A measure of success could include an increase in positive responses on surveys.
    From a technical standpoint, a measure of success could be an increase in system
    performance or internet speeds. Setting specific, quantifiable, and reasonable
    goals will give your students a sense of achievement as you meet them.
  prefs: []
  type: TYPE_NORMAL
- en: Most important, celebrate your victories. When you successfully run an upgrade
    on your systems or migrate to software that better meets your users’ needs, take
    the time to publicize this fact and celebrate with your students. As we’ll see
    in the next section, they can also bring these achievements home to celebrate
    with their families.
  prefs: []
  type: TYPE_NORMAL
- en: Your Local Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important part of building a supportive, interconnected school community
    is connecting with your students’ local communities. Throughout this book, we’ve
    focused on activities and technologies many of your students can continue to work
    with when they leave the school grounds. Chapters 5 and 6 described a development
    environment your students can find on any computer, so they can continue experimenting
    with and exploring code on their own or show off to their families.
  prefs: []
  type: TYPE_NORMAL
- en: Find ways to tie additional learning for your students between home and school.
    Chapter 3 covered the history of computer science, learning how advancements built
    on top of one another. Have your students ask their older relatives about the
    information technologies they had while growing up. Maybe they worked with green-screen
    computers, floppy disks, rotary telephones, slide rulers, card catalogs, or some
    of the technologies that now only exist as icons on our smartphones. What stories
    of antiquated tech will your students bring to your classroom meetings?
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8 reviewed PBL as a tool for deeply engaging your students in research
    and sustained inquiry. At the end of the development process was the deployment
    phase, a public event where students presented their projects. Such events provide
    another opportunity to build community connections between home and school.
  prefs: []
  type: TYPE_NORMAL
- en: Host a Hackathon or Code Camp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One event that can connect a student’s home life with their school life is a
    *hackathon*. Most often, this is an intense 24-hour coding marathon where students
    or teams of students produce a start-to-finish application. The experience breaks
    students out of the school routine, puts them into a strongly focused mind-set,
    and builds camaraderie among peers as they weather fatigue and rise to challenges
    to make the deadline.
  prefs: []
  type: TYPE_NORMAL
- en: Best held on weekends to allow students time to catch up on sleep, hackathons
    culminate with a final presentation session. During the session, projects in various
    states of completion are presented to judges who evaluate the projects on a variety
    of pre-established criteria. Parents and mentors are welcomed into the process
    to provide emotional and technical support. In this sense, the hackathon becomes
    a condensed PBL experience.
  prefs: []
  type: TYPE_NORMAL
- en: Like a hackathon but less intense is the option to host a *code camp*. This
    would be a one- to two-week-long program hosted over the summer break, where students
    work on a project from start to finish. Whereas a hackathon is best geared toward
    middle and high school students, a code camp is a great experience for elementary
    school students as well. By taking place during the summer, code camps can help
    mitigate some of the dreaded “brain drain” that can happen to students when they’re
    out of school for a prolonged period of time.
  prefs: []
  type: TYPE_NORMAL
- en: An important aspect of your hackathon or code camp is its theme. Many hackathons
    in the professional world have charities, and nonprofits send subject matter experts
    (SMEs) from the organization to bring application requests to the event. Programmers
    then review the various requests and donate their time to those where they think
    they can best contribute. You could set up a similar format for your events. Earlier
    in the book, we talked about having your school’s teachers send out requests for
    explorable explanations. Have your school faculty bring application requests to
    the event and act as the SME for students willing to take on the project.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you could involve your local business community in the event. Perhaps
    some local businesses or nonprofits could use custom information system solutions.
    Many companies will donate money or promotional materials (“swag”) to your event,
    which you can pass along to students to keep up their spirits.
  prefs: []
  type: TYPE_NORMAL
- en: Professional Development Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building bonds with your local businesses through event sponsorships and participation
    can also benefit your students professionally. In recent years, major tech companies,
    such as IBM, Google, and Apple, have stopped requiring a four-year college degree
    for some programming positions. By doing so, they’ve opened opportunities to individuals
    who have attended boot camps, completed online code challenges, or are self-taught.
    Considering candidates without degrees will hopefully increase diversity within
    these organizations’ workforces. You can help your students take advantage of
    these changes by offering them some career services.
  prefs: []
  type: TYPE_NORMAL
- en: The skills your students learn throughout this book will easily transfer to
    the professional world. Chapter 2 touched on the idea of “Iterative You,” where
    students track their self-improvement throughout their education to see how their
    learning builds on learning into a tree of knowledge. In the professional world,
    we track our self-­improvement through *resumes*, documents that track our professional
    background, skills, and accomplishments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Encourage your students to write a resume early on. Even with after-school
    or summer work, they won’t have much professional experience to include, so they
    should highlight their skills and achievements. An achievement might be a project
    they completed for class or a high reputation score in a coding forum. For skills,
    they should include the operating systems, programming languages, and software
    development tools they work with in school and on their own. Here is a sample
    skills section for a skills-based resume:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operating Systems** Microsoft Windows (7 through 10), Macintosh OS'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Browsers** Google Chrome, Safari, Mozilla Firefox, Microsoft Edge'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Application Development** HTML, CSS, JavaScript'
  prefs: []
  type: TYPE_NORMAL
- en: '**Frameworks** jQuery'
  prefs: []
  type: TYPE_NORMAL
- en: '**Online Resources** Stack Overflow (1,372 reputation), jsfiddle, w3schools'
  prefs: []
  type: TYPE_NORMAL
- en: The earlier your students create a basic resume, the sooner they can begin to
    see areas they need to work on. Have your students review resumes of other professionals
    online for ideas on how they can outline their skills and experience. If students
    read these resumes and get discouraged because of their lack of experience, remind
    them that experience is an iterative process and not to compare their lack of
    professional experience to someone else’s 10th or 20th year in the workforce.
    Instead, students should view professional resumes as a source of inspiration
    for what they want to learn next or what field they want to work in. Professional
    resumes can be a great resource for setting personal goals. Your students can
    also share their resumes with other classmates for additional ideas on how to
    phrase or organize them.
  prefs: []
  type: TYPE_NORMAL
- en: Every student should view their resume as a personal dashboard for keeping track
    of their professional progress. That progress begins in grade school and continues
    throughout their lives. Resumes are a catalog of personal accomplishments. Students
    should cultivate them with pride.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored ways you can build a sense of community at your
    school to further support your students and improve their academic outcomes. Having
    a strong connection to your classroom and identifying with your school will motivate
    your students and inspire a sense of responsibility for their academic lives.
    Students who feel safe and supported in their school life can focus on the educational
    challenges you present them.
  prefs: []
  type: TYPE_NORMAL
- en: At the classroom level, we explored classroom meetings as a forum where students
    can provide feedback on what is and isn’t working in the classroom. Additionally,
    you can offer them choices on their classroom exercises to promote student voice
    and choice. By following the algorithms for conducting meetings prescribed in
    Robert’s Rules of Order, you can ensure that all students get an equal opportunity
    to contribute and be heard, and also learn to listen to one another respectfully.
  prefs: []
  type: TYPE_NORMAL
- en: At the schoolwide level, we brought students into the policy-making and processes
    surrounding your organization’s IT infrastructure. By including students in a
    yearly revision of the AUP, they can learn why these policies are in effect, offer
    fair methods for enforcing them, and help educate their peers on their importance.
    When you include students in cataloging your IT infrastructure and revising the
    vision of how it should grow, they get hands-on experience in how IT departments
    manage and maintain technology in the professional world.
  prefs: []
  type: TYPE_NORMAL
- en: At the local level, tying learning in school to experiences at home helps students
    connect the two worlds into a seamless community. With events like hackathons
    and code camps, you can draw parents and local businesses into the school’s academic
    life. With professional services like resume counseling, you can teach your students
    to track their academic accomplishments with a document they’ll proudly take with
    them into the professional world.
  prefs: []
  type: TYPE_NORMAL
