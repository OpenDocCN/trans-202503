- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Intentional Development Environments
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有意图的开发环境
- en: The web development tools provide a playful introduction to actual software
    code that empowers students, but it lacks permanence. Anything your students create
    with these tools vanishes when they refresh or close the browser. In this chapter, we’ll
    introduce *development environments*, where students can build computational artifacts
    that they can develop, enhance, and share with others*.* Fortunately, the coding
    environments and their features that we’ll explore in this chapter will be very
    familiar to your students because of their previous experiences with the web development
    tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 网络开发工具为学生提供了一个有趣的介绍，帮助他们接触实际的软件代码，但这些工具缺乏持久性。学生用这些工具创建的任何内容，在刷新或关闭浏览器时都会消失。在本章中，我们将介绍*开发环境*，在这些环境中，学生可以构建计算产物，并能够开发、增强和与他人分享它们。*幸运的是，我们将在本章中探索的编码环境及其功能，对学生们来说非常熟悉，因为他们之前已经使用过网络开发工具。*
- en: Online Code Playgrounds
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线代码游乐场
- en: The advantage of the browser’s web development tools is to immerse students
    in code as quickly as possible. Similarly, empowering students to construct their
    own web applications easily and at the earliest opportunity is the power of *code
    playgrounds*. These websites allow programmers to write HTML, CSS, and JavaScript
    in an online tool where they can save and execute their code without difficulty.
    A growing number of code playgrounds are coming online. Sites like JSFiddle, JS
    Bin, CodePen, and W3Schools offer different options and features.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器的网络开发工具的优势在于能够让学生尽快沉浸于代码中。同样，*代码游乐场*的力量在于，能够让学生尽早、轻松地构建自己的网络应用程序。这些网站允许程序员在在线工具中编写HTML、CSS和JavaScript，学生可以轻松保存和执行他们的代码。越来越多的代码游乐场正在上线。像JSFiddle、JS
    Bin、CodePen和W3Schools这样的网站提供了不同的选项和功能。
- en: Because these comprehensive development environments are instantly accessible
    via a web browser, students can open one and start coding, just like they do with
    the web development tools. Even better, they can save their work at school and
    later open a browser at home or at the library to continue coding where they left
    off. As a result, their efforts become more intentional. They begin working toward
    a goal in a project-based task that requires deeper content engagement.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些综合开发环境可以通过网页浏览器即时访问，学生可以打开一个开发环境开始编码，就像他们使用网络开发工具一样。更棒的是，他们可以在学校保存工作，之后在家里或图书馆打开浏览器，继续从上次停下的地方编写代码。因此，他们的努力变得更加有意图，他们开始朝着一个项目任务的目标努力，这个任务需要更深的内容参与。
- en: Many of these development environments will bear some resemblance to the web
    development tools in that they have various panels for different kinds of script
    and code. Figure 6-1 shows part of the interface for JSFiddle, a popular code
    playground.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些开发环境中的许多将与网络开发工具有些相似，它们有各种面板用于不同类型的脚本和代码。图6-1展示了流行的代码游乐场JSFiddle的一部分界面。
- en: '![](image/CitC06_01_JSFiddle_labeled_new.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC06_01_JSFiddle_labeled_new.png)'
- en: 'Figure 6-1: JSFiddle user interface'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-1：JSFiddle用户界面
- en: Like the web development tools, Figure 6-1 shows multiple panels for different
    content. In this code playground, the HTML panel ❶ defines the document. The CSS
    panel ❷ defines the look and feel of the web page, and the JavaScript panel ❸
    contains the programming code that makes the page dynamic and defines how it behaves.
    As we learned in the preceding chapter, the content, style, and programming are
    decoupled from one another to make them easier to maintain. The output panel ❹
    shows the result of combining the HTML, CSS, and JavaScript. In this example,
    the combination of the three panels renders a 3D model of an alien world covered
    with light and dark squares to explore how a planet’s albedo (its color) affects
    its average temperature. Clearly, this coding environment allows for some very
    sophisticated demonstrations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与网络开发工具类似，图6-1展示了多个面板，用于显示不同的内容。在这个代码游乐场中，HTML面板❶定义了文档。CSS面板❷定义了网页的外观和风格，而JavaScript面板❸包含了使页面动态的编程代码，并定义了页面的行为方式。正如我们在前一章所学到的，内容、样式和编程彼此解耦，以便更容易维护。输出面板❹显示了HTML、CSS和JavaScript结合后的结果。在这个例子中，三个面板的结合呈现了一个3D模型，展示了一个由亮暗方块覆盖的外星世界，探讨了一个行星的反照率（颜色）如何影响其平均温度。显然，这种编码环境能够进行一些非常复杂的展示。
- en: You should carefully consider which code playground your students will work
    in. Because students will be spending a great deal of time working in this environment,
    you need to choose the most feature-rich and flexible platform for them. The following
    subsections provide some features to consider when you’re evaluating code playgrounds.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该仔细考虑你的学生将在何种代码平台上工作。因为学生将花费大量时间在这个环境中，所以你需要为他们选择功能最丰富、最灵活的平台。以下小节将提供在评估代码平台时需要考虑的一些功能。
- en: User Interface Features
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户界面功能
- en: Numerous features are built into development platforms that can make code easier
    to read and debug. Your students will already be familiar with many of these features
    from working with the web development tools. For example, *syntax highlighting*
    is a common feature where code is color coded to make different elements readily
    identifiable. In syntax-highlighted CSS, the html selectors might be red, the
    id selectors green, the properties blue, and their values purple. The JavaScript
    might use green for function names, blue for keywords, red for conditional logic,
    yellow for strings, and purple for integers. This color coding makes the syntax
    pop out and the code easier to read. It also allows the coder to ignore what isn’t
    immediately relevant and focus on the task at hand.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发平台内置了许多功能，能够使代码更易读和调试。你的学生将已经熟悉许多这些功能，因为他们曾使用过网页开发工具。例如，*语法高亮*是一个常见功能，它通过颜色编码使不同的元素更容易识别。在语法高亮的
    CSS 中，html 选择器可能是红色的，id 选择器是绿色的，属性是蓝色的，而它们的值是紫色的。JavaScript 中，函数名称可能用绿色表示，关键字用蓝色表示，条件逻辑用红色表示，字符串用黄色表示，整数用紫色表示。这种颜色编码使语法更加突出，代码更易于阅读。它还使程序员能够忽略不立即相关的部分，专注于手头的任务。
- en: Other useful user interface (UI) features include having the interface alert
    the user to syntactically incorrect code, similar to how most word processors
    highlight misspelled words. UIs that allow for *code folding*, expanding and collapsing
    code, let students hide the extraneous parts and simplify the view. Typing in
    the editor makes code completion and automatic code indentation more convenient.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的用户界面（UI）功能包括使界面能够提醒用户语法错误的代码，这类似于大多数文字处理软件会突出显示拼写错误的单词。允许进行*代码折叠*的 UI 让学生可以隐藏多余的部分并简化视图。编辑器中的输入使代码补全和自动缩进变得更加方便。
- en: Simplicity
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简洁性
- en: Another characteristic to keep in mind when you’re evaluating development environments
    is their simplicity. A feature-rich development environment might offer a multitude
    of conveniences, but it also offers an abundance of menu options that can overwhelm
    a novice programmer. So much of software development involves the art of mitigating
    complexity. Make sure the development environment you choose helps manage that
    complexity rather than increasing it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 评估开发环境时需要记住的另一个特征是它们的简洁性。一个功能丰富的开发环境可能提供许多便利，但也提供了大量的菜单选项，可能会让初学者程序员感到不知所措。软件开发的很大一部分就是应对复杂性的艺术。确保你选择的开发环境能够帮助管理复杂性，而不是增加它。
- en: Recall from Chapter 5 when students first opened the web development tools and
    we asked them to think about how they felt. The web development tools can be overwhelming,
    which is why this book restricts students to only using a few of those tabs. Once
    students are comfortable with the DOM Inspector and web console, they can slowly
    explore the other features, such as Network, Performance, Memory, Security, and
    Debugger. Your students can engage with a highly complex development environment
    if you have them focus on just a few key features at the outset.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下第 5 章，当学生第一次打开网页开发工具时，我们让他们思考他们的感受。网页开发工具可能会让人感到不知所措，这也是为什么本书只让学生使用其中的一些标签页。一旦学生熟悉了
    DOM 检查器和网页控制台，他们可以逐渐探索其他功能，如网络、性能、内存、安全和调试器。如果你让学生初期只专注于一些关键功能，他们就能在一个高度复杂的开发环境中进行工作。
- en: Collaboration and Portability Features
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协作和可移植性功能
- en: 'Very little software is written by lone programmers. Even software developers
    working alone build on solutions that came before them and make existing code
    their own. A feature available to many code playgrounds is the ability to *fork*
    a project: that is, to take an existing code example, click a button, and get
    a copy of it to modify along a new path, or *branch*. Forking an application from
    the playground and building it along a new branch provides students with existing
    code from which to learn new coding skills and lets them extend that solution
    to make it their own.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有软件是由单独的程序员编写的。即使是独自工作的开发者，也会在前人的解决方案基础上进行开发，并使现有的代码成为自己的。许多代码游乐场提供的一个功能是能够*分叉*一个项目：也就是说，获取一个现有的代码示例，点击按钮，就能得到一个副本，沿着一条新的路径或*分支*进行修改。从游乐场中分叉一个应用程序并在新分支上进行构建，为学生提供了现有的代码，帮助他们学习新的编程技能，并让他们扩展该解决方案，使之成为自己的。
- en: Forking and branching code relate to *versioning* in software development. Versioning
    is the use of unique names or labels to track changes in the state of a software
    project over time. The Chapter 2 exercise “Iterative You” mentioned having students
    view themselves as iteratively improving through version labels 0.1, 0.2, 0.3,
    and so on. Each version marked a milestone in their self-improvement up to version
    1.0 on graduation day. Code playgrounds with built-in versioning features allow
    students to track their coding progress. More important, students can revert to
    previous code versions if they accidentally introduce a bug in a more current
    version.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉和分支代码与软件开发中的*版本管理*有关。版本管理是使用独特的名称或标签来跟踪软件项目在时间推移中的变化状态。第二章的练习“迭代的你”提到让学生将自己视为通过版本标签0.1、0.2、0.3等逐步改进的过程。每个版本都标志着他们自我改进的一个里程碑，直到毕业日的版本1.0。具有内置版本管理功能的代码游乐场允许学生跟踪他们的编程进度。更重要的是，如果学生在更新版本中意外引入了错误，他们可以恢复到之前的代码版本。
- en: 'When students feel confident in their creations, the code playground should
    provide them with the means to share their work. Each project should have a unique
    URL that students can provide to their peers to show off what they’ve made. Taking
    this a step further, some playgrounds can make creations *embeddable*: students
    can embed their work in other websites, like forums, and can share their work
    in such a way that their peers don’t even need to follow a link.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当学生对自己的创作感到自信时，代码游乐场应该提供他们分享作品的途径。每个项目都应该有一个唯一的URL，学生可以将其提供给同学，展示他们的作品。进一步说，一些游乐场可以使创作*可嵌入*：学生可以将自己的作品嵌入到其他网站中，比如论坛，并以这种方式分享他们的作品，甚至同学们无需点击链接也能看到。
- en: Another feature to consider in a playground is *portability*. How easy is it
    to take a solution elsewhere? If students want to move their solution to another
    playground, can they easily transfer their work? What if the student wants to
    start working in a local environment, coding on a local hard drive rather than
    the cloud? Does the playground allow them to download their work to take it elsewhere?
    As long as students can access their code in the playground, they can migrate,
    even if it means copy-pasting their code into a new environment. But it’s best
    to consider at the start how easy it is to move their code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场的另一个功能是*可移植性*。将解决方案带到其他地方有多容易？如果学生想将他们的解决方案迁移到另一个游乐场，他们能轻松地转移自己的作品吗？如果学生想开始在本地环境中工作，在本地硬盘上编码而不是在云端，他们能下载自己的作品并带走吗？只要学生能够在游乐场中访问他们的代码，他们就能迁移，即使这意味着将代码复制粘贴到一个新的环境中。但最好从一开始就考虑他们的代码迁移有多容易。
- en: Licensing
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 许可
- en: Tied to collaboration and the ability to take someone else’s code and make it
    your own is *licensing*. Specifically, you need to help students understand the
    proper-use policies, terms of service, and copyright status of code posted publicly
    to the playground. The policies will almost certainly include language that states
    it’s not acceptable to post copyrighted or offensive content to the site. Actually,
    your students should be observing such conduct already. But what is the copyright
    status of original work they find or create on the site?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与协作及能够将他人的代码变成自己的功能相关的是*许可*。具体来说，你需要帮助学生理解在游乐场上公开发布代码时的正确使用政策、服务条款和版权状态。这些政策几乎肯定会包括声明，表示不允许发布版权或令人反感的内容到站点。实际上，你的学生应该已经遵守了这些行为规范。但他们在站点上找到或创作的原创作品的版权状态如何呢？
- en: Ideally, code posted to the site will be explicitly defined as *free software,
    open source software*, or *copyleft* license, which grants users the right to
    update and redistribute the software. Even better, the playground might allow
    users to select a license from a list of permissive and restrictive licensing
    options.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，发布到网站上的代码会明确标明为*自由软件，开源软件*或*反版权*许可证，这赋予用户更新和再分发软件的权利。更好的是，平台可能允许用户从一系列宽松或限制性的许可选项中选择许可证。
- en: Many sites simply take no stand on licensing and place the responsibility on
    users to sort out rights violations between one another. As a best practice, students
    should include licensing information in their code to make it clear to others
    what rights are given and withheld when using the software. Similarly, students
    should look for licensing information for the projects they find in the repository
    or contact the owner for permission before clicking the fork button. Listing 6-1
    shows an example of a free software license comment embedded in code. The /* and
    */ syntax are opening and closing tags that indicate to the browser that this
    is a comment intended only for humans reading the code and should be ignored by
    the browser.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站对许可证问题持中立态度，将责任交给用户自行解决权利冲突。作为最佳实践，学生应在代码中包含许可信息，明确告知他人使用该软件时赋予和保留的权利。类似地，学生应寻找项目的许可信息，或在点击“fork”按钮之前联系所有者获得许可。列表6-1展示了一个嵌入在代码中的自由软件许可证注释示例。/*和*/语法是打开和关闭标签，表示这是仅供人类阅读代码的注释，浏览器应忽略它。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 6-1: Sample MIT License notice comment in JavaScript'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列表6-1：JavaScript中的MIT许可证示例注释
- en: Figure 6-1 shows the MIT License, a license that’s highly popular due to its
    brevity and compatibility with free and restrictive licenses. For example, a software
    solution with a restrictive license can include solutions that are MIT Licensed
    as long as those components are identified as open source. Other open source licensing
    options include GNU General Public License (GPL), Berkeley Software Distribution
    (BSD), or even releasing to the public domain. Have a dialogue with your students
    to decide on a license that will ensure collaboration within your classroom and
    beyond it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-1展示了MIT许可证，这是一种因其简洁性以及与自由和限制性许可证兼容性而广受欢迎的许可证。例如，具有限制性许可证的软件解决方案可以包括MIT许可的组件，只要这些组件被标明为开源。其他开源许可选项包括GNU通用公共许可证（GPL）、伯克利软件分发（BSD）许可证，甚至可以公开发布到公有领域。与学生进行对话，决定一个能确保课堂内外合作的许可证。
- en: Software Frameworks
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件框架
- en: Some intermediate features that your students might want to explore early on
    are *software frameworks*, which extend and enhance core programming languages.
    In JavaScript programming, software frameworks can empower your students to easily
    render 3D models, code video games, or train an artificial intelligence device.
    Most code playgrounds allow users to select frameworks from a drop-down list to
    reference in the code. These features are sometimes called *dependencies*, because
    the software students write will depend on including a framework.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些学生可能希望尽早探索的中级特性是*软件框架*，它们扩展和增强了核心编程语言。在JavaScript编程中，软件框架可以让学生轻松渲染3D模型、编写视频游戏或训练人工智能设备。大多数代码平台允许用户从下拉列表中选择框架，以便在代码中引用。这些特性有时被称为*依赖项*，因为学生编写的软件将依赖于框架的包含。
- en: Like working with JavaScript code, the framework’s abstractions have their own
    syntax. The framework has its own documentation for students to learn about its
    many features. If the framework is well established, like jQuery, students will
    find many questions answered and examples posted in online forums. Similarly,
    the framework’s website will have an examples page with demonstrations of what
    developers can do with its extensions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用JavaScript代码一样，框架的抽象有其独特的语法。框架有自己的文档，供学生学习其众多功能。如果框架已经成熟，例如jQuery，学生将能在在线论坛中找到许多问题的解答和实例。类似地，框架的网站将有一个示例页面，展示开发人员可以使用其扩展功能做的事情。
- en: Code playgrounds make separating the content, style, and behavior clear; color
    code the syntax; highlight errors; and make including frameworks easy. But students
    can also learn some aspects of web application development by working with local
    files on a computer. After all, developers don’t code proprietary software on
    free sites in the business world. Becoming familiar with how local development
    differs from code playground development is important.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代码 playground 让内容、样式和行为的分离变得清晰；对语法进行颜色编码；突出错误；并让引入框架变得简单。但学生们也可以通过在计算机上处理本地文件来学习网页应用开发的某些方面。毕竟，开发者不会在商业世界中的免费站点上编写专有软件。熟悉本地开发与代码
    playground 开发的区别是非常重要的。
- en: Local Development
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地开发
- en: Code playgrounds are invaluable for the way they accelerate development and
    abstract away many of the web programming details. But once your students know
    how to develop code in the playground you chose, it’s critical that you familiarize
    them with developing web applications in a local environment. Doing so will give
    them a more nuanced and detailed understanding of how web applications are structured.
    It will also give them access to the wide world of applications other coders have
    developed and shared outside the playgrounds.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 代码 playground 在加速开发和抽象掉许多网页编程细节方面无可替代。但一旦学生掌握了在你选择的 playground 中进行开发的技能，关键是要让他们熟悉如何在本地环境中开发网页应用。这样做将帮助他们更细致、深入地理解网页应用的结构。同时，他们也可以访问到其他开发者在
    playground 外分享的、广泛的应用世界。
- en: As with the rationale for introducing web development tools and code playgrounds,
    making development as convenient as possible is vital to your students’ enjoyment
    of working in this new local environment. For this reason, you should provide
    students with a basic template in which to begin their work. This is also good
    practice, as writing a template from scratch is a painstaking and error-prone
    process. As students will learn when they become proficient coders, it’s much
    faster and more accurate to grab code when developing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与引入网页开发工具和代码 playground 的理由类似，尽可能让开发过程变得便利对学生在这个新本地环境中的工作体验至关重要。因此，你应该为学生提供一个基本模板，让他们可以从中开始工作。这也是一种良好的实践，因为从头编写模板是一个既费时又容易出错的过程。正如学生们在成为熟练程序员时会学到的那样，在开发过程中，抓取代码比自己写代码要更快速且更准确。
- en: 'The template package you develop and provide to your students should include
    three files: an *index.html* file in the root folder for the content, a *styles.css*
    file in a *css* folder for the styling, and a *scripts.js* file in a *js* folder
    for the JavaScript code. The *index.html* file provides the basic starting HTML
    from which students can work; it should look very similar to Listing 6-4.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你为学生开发并提供的模板包应包括三个文件：一个位于根文件夹中的 *index.html* 文件，用于存放内容；一个位于 *css* 文件夹中的 *styles.css*
    文件，用于存放样式；一个位于 *js* 文件夹中的 *scripts.js* 文件，用于存放 JavaScript 代码。*index.html* 文件提供了学生可以从中开始工作的基本
    HTML，其内容应与列表 6-4 非常相似。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 6-4: HTML template from which students can begin local development'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-4：学生可以从中开始本地开发的 HTML 模板
- en: Several new elements are in this code for your students to understand; most
    likely, they were abstracted away in the coding playground. Instead of three panels
    that separate HTML, CSS, and JavaScript, we have three different files that need
    to be edited individually in a text editor. The <link rel="stylesheet"> tag indicates
    the location of the CSS file relative to the *index.html* file in the href property,
    which is in a file named *styles.css* in the *css* folder. Similarly, the second
    <script> tag in this example defines the location of the JavaScript file in the
    src property relative to the *index.html* file, which is in a file named *scripts.js*
    in the *js* folder.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中有几个新的元素供学生理解；很可能，这些元素在代码 playground 中被抽象化了。不同于将 HTML、CSS 和 JavaScript 分隔的三个面板，我们现在有三个不同的文件，需要在文本编辑器中单独编辑。`<link
    rel="stylesheet">` 标签通过 href 属性指明了 CSS 文件相对于 *index.html* 文件的位置，该文件位于 *css* 文件夹中的
    *styles.css* 文件中。同样，示例中的第二个 `<script>` 标签定义了 JavaScript 文件相对于 *index.html* 文件的位置，通过
    src 属性指向该文件，文件名为 *scripts.js*，位于 *js* 文件夹中。
- en: Additional details in Listing 6-4 give us an opportunity to explore why the
    code is the way it is. Consider the first <script> tag, which references the jQuery
    JavaScript framework hosted on a Google server. Why isn’t this file saved in the
    *js* folder? Why rely on a third-party service to host the file? To understand
    the strategy here, students need to know about browser *caching*. Caching occurs
    when the browser saves copies of most web content to the local computer to prevent
    having to download it in the future, which speeds up page loads. By referencing
    the *jquery.min.js* file in this open JavaScript library, there’s a good chance
    the file will already be stored in a visitor’s browser cache and the client won’t
    need to download it again.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表6-4中的附加细节为我们提供了一个机会，让我们探讨代码为何以这种方式编写。考虑第一个`<script>`标签，它引用了托管在Google服务器上的jQuery
    JavaScript框架。为什么这个文件不保存在*js*文件夹中？为什么要依赖第三方服务来托管这个文件？为了理解这里的策略，学生需要了解浏览器的*缓存*机制。缓存是指浏览器将大部分网页内容保存到本地计算机上，以避免将来重复下载，从而加快页面加载速度。通过引用这个开放JavaScript库中的*jquery.min.js*文件，文件很可能已经存储在访问者的浏览器缓存中，客户端就不需要再次下载它。
- en: Also, consider the content of the *jquery.min.js* file. If you enter the URL
    for this resource into a web browser to view its contents, you’ll see code similar
    to Figure 6-2.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，考虑一下*jquery.min.js*文件的内容。如果你将此资源的URL输入到浏览器中查看其内容，你会看到类似于图6-2中的代码。
- en: '![](image/CitC06_02_jQueryMinified.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC06_02_jQueryMinified.png)'
- en: 'Figure 6-2: jQuery framework minified code snippet'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-2：jQuery框架压缩代码片段
- en: This snippet of JavaScript code is illegible to humans but still accessible
    to computers. The code is *minified*, condensed to make the file size as small
    as possible so the browser can quickly download it. It’s been stripped of all
    line breaks and indentations, and intuitive variable and function names are replaced
    with cryptic identifiers just a few characters long.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这段JavaScript代码对人类来说是不可读的，但对计算机仍然是可访问的。代码已经被*压缩*，即被压缩到尽可能小的文件大小，以便浏览器能够快速下载。它已经去除了所有的换行符和缩进，直观的变量和函数名被几个字符长的晦涩标识符所取代。
- en: 'With the coding playground, including frameworks is often as simple as selecting
    them from a drop-down list without needing to add any code. Other examples of
    details that are abstracted out when working in code playgrounds instead of locally
    include the <meta> tags that provide information, such as author, keyword, and
    site description, to web crawlers. Also, the <doctype> tag that comes before the
    <html> tag tells the browser what kind of document it’s reading and how to interpret
    its tags. In addition, the ?v=0.1 is appended to the filenames: it will be incremented
    to ?v=0.2 and so forth as the files are updated, to let client browsers know to
    refresh the cached versions of these files with the latest one. You can discuss
    endless little details and changing best practices in class to give your students
    the best understanding of why certain elements exist and are defined the way they
    are in the code students work with.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码练习场中，包含框架通常只是简单地从下拉列表中选择它们，而无需添加任何代码。其他在代码练习场中工作时被抽象出来的细节，还包括提供信息（如作者、关键词和站点描述）给网页爬虫的`<meta>`标签。此外，`<html>`标签之前的`<doctype>`标签告诉浏览器它正在读取什么类型的文档以及如何解释其标签。另外，`?v=0.1`会附加到文件名后面：随着文件更新，它将递增为`?v=0.2`，依此类推，以告知客户端浏览器刷新这些文件的缓存版本，使用最新的文件。你可以在课堂上讨论无数的小细节和变化的最佳实践，帮助学生最好地理解为什么某些元素存在，以及它们在学生所处理的代码中是如何定义的。
- en: One aspect of local development we’ll learn in more detail in Chapter 9 is how
    to collaborate when working in the local file system. We’ll explore tools that
    allow students to work on their code locally while still collaborating with others.
    For the immediate future, the projects students work on will be mostly individual
    exercises of solo problem-solving and class exercises of evaluating code as a
    group, before moving on to collaborate on larger projects in smaller groups. As
    the educator, you’ll keep tabs on the best practices in web development and iteratively
    improve the starting-point code you provide students in code playgrounds and as
    local files.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第9章中更详细地学习本地开发的一个方面，即如何在本地文件系统中进行协作。我们将探讨一些工具，这些工具允许学生在本地编写代码的同时与他人协作。在近期，学生们的项目将主要是个人解决问题的练习和小组评估代码的课堂练习，之后才会转向在小组内协作完成更大的项目。作为教育者，你需要了解网页开发的最佳实践，并在为学生提供代码练习场和本地文件时，逐步改进所提供的起始代码。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored code playgrounds as an important step toward intentional
    development and had students work in longer-term, more permanent projects. We
    learned about the features and functionality of a good code playground, from separating
    the content, style, and functionality into different development panels to the
    UI features that make coding easier, features for collaboration and porting code
    to other platforms, licensing options, and JavaScript frameworks that empower
    students to make magic. We briefly learned about separating content, styling,
    and code into different files for local development and the additional details
    code playgrounds abstract away.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了代码沙盒作为迈向有目的开发的重要一步，并让学生参与了长期的、更持久的项目。我们学习了一个好的代码沙盒的特性和功能，从将内容、样式和功能分离到不同的开发面板，到使编码更简便的用户界面特性，支持协作以及将代码移植到其他平台的功能，许可选项以及使学生能够创造奇迹的JavaScript框架。我们简要学习了如何将内容、样式和代码分离到不同的文件中以进行本地开发，以及代码沙盒所抽象掉的额外细节。
- en: The power of the web development tools is that they instantly give students
    existing code to experiment with. The power of code playgrounds is the ability
    to easily fork existing code to adopt, adapt, and improve into permanent projects.
    The power of local development is being exposed to all the details the other environments
    abstract away and seeing the whole picture, just like an application developer
    working in the field. Each tool levels up the student from playing with existing
    code and into intentional development.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 网络开发工具的强大之处在于，它们能立即提供现有的代码供学生进行实验。代码沙盒的强大之处在于能够轻松地分叉现有代码，以便采用、调整和改进，最终将其转化为长期项目。本地开发的强大之处在于能够接触到其他环境所抽象掉的所有细节，并看到全貌，就像在实际工作中开发应用程序的开发人员一样。每一个工具都能帮助学生从操作现有代码转向有目的的开发。
- en: Once you have an established development environment, either in an online code
    playground or the local file system in which your students will begin to intentionally
    extend existing code and begin making their own ideas manifest, we can start exploring
    some concrete code projects for this environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你建立了开发环境，无论是在在线代码沙盒中，还是在本地文件系统中，学生将开始有目的地扩展现有代码，开始将他们自己的创意付诸实践，我们就可以开始探索适合这种环境的一些具体代码项目。
- en: In the next chapter, we’ll review some exercises to challenge and enlighten
    your students to build their coding confidence.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾一些练习，挑战并启发你的学生，以建立他们的编码信心。
