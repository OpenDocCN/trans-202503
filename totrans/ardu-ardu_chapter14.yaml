- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">14</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CONTROLLING
    THE ARDUINO WITH BLUETOOTH</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: Most contemporary smartphones, PCs, or tablets can communicate wirelessly with
    other devices using Bluetooth. In this chapter, you’ll use inexpensive Bluetooth
    modules along with Windows, Android, or Apple machines to control your Arduino
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use level converter boards with serial Bluetooth interface modules for voltage
    translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pair Bluetooth modules with Android-, Apple-, and Windows-based devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the parameters of a serial Bluetooth module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll also send data to and from an Arduino project via Bluetooth and then
    build your own Android app with the MIT App Inventor to remotely control your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Bluetooth Modules</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many types of Bluetooth modules. This chapter relies on the HC-05-type
    Bluetooth module, such as PMD Way part 590526, as shown in [Figure 14-1](chapter14.xhtml#fig14-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE HC-05 BLUETOOTH MODULE](../images/fig14-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-1: An HC-05 Bluetooth
    module</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Other modules on the market like the HC-06 won’t work with the examples and
    projects in this chapter, as they can only transmit data, not receive it. These
    modules use a TX and RX line for serial communication between the module and your
    Arduino, which can be used with the SoftwareSerial library as usual. The data
    rate will default to 9,600 bps. I’ll explain how to set this up later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Physically wiring the modules to your Arduino projects is easy, thanks to the
    standard pin spacing at the end of the module, and pins are always labeled on
    the rear of the module. They will both operate using a 5 V DC power supply. However,
    the communication pins use a lower logic voltage of 3.3 V DC. The best way to
    convert 5 V to 3.3 V is to use a level converter module, which I’ll explain next.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Level Converter Modules</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many devices have data communication pins designed to operate at 3.3 V instead
    of the usual 5 V DC. This can be for serial commutations such as Bluetooth modules
    or when using other data buses such as SPI or I²C. However, these pins do not
    work reliably with 5 V devices such as the Arduino Uno or compatible, so you’ll
    need to convert signals between 3.3 V and 5 V DC with a voltage converter board.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, you can use a level converter module such as the one shown in [Figure
    14-2](chapter14.xhtml#fig14-2), PMD Way part 441079.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE 5 TO 3.3 V LEVEL CONVERTER](../images/fig14-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-2: A level converter
    module</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Most level converter modules include inline header pins, which you will need
    to solder to the board. Different level converters will have varying number of
    channels; you need at least two channels for our Bluetooth devices, one for serial
    TX and one for serial RX.
  prefs: []
  type: TYPE_NORMAL
- en: All level converters require connections to both a 5 V and 3.3 V supply for
    operation. Simply connect the lower voltage device to the LV channels side of
    the level converter and connect the Arduino to the matching HV channels side.
    I’ll explain how to use the level converter in this chapter’s projects.
  prefs: []
  type: TYPE_NORMAL
- en: Before using a Bluetooth module with your PC or other device, you’ll need to
    pair the Bluetooth module with that device, as you would with Bluetooth headphones
    or speakers. For future reference and when working through this chapter, the following
    sections give instructions for pairing Windows PCs, Android devices, and macOS
    computers with the module that you can follow as required for the projects. Note
    that the LED on the Bluetooth module will blink slowly when successfully paired
    with any of these devices.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pairing with Windows
    Devices</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The steps to pair the Bluetooth module with a Windows machine are similar to
    those for any other Bluetooth device, such as headphones or speakers. First ensure
    the module is connected to the 5V and GND pins for power. Once power is connected,
    the LED on the module will blink rapidly, meaning there’s no Bluetooth connection
    between the module and a device.
  prefs: []
  type: TYPE_NORMAL
- en: When using a Windows-based PC, simply search for a new Bluetooth device from
    the Bluetooth & devices page in Settings. Select the HC-05 device in the list
    and you’ll be prompted for a PIN. Enter **1234**, click **Connect**, and you’re
    ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then send and receive data to the Bluetooth module via a COM: port
    address. These addresses can be found in the Windows Device Manager.'
  prefs: []
  type: TYPE_NORMAL
- en: To continue, skip to the “Sending Data via Bluetooth” section on page 228.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pairing with macOS
    Devices</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the System Preferences window from the Apple menu and select **Bluetooth**.
    Make sure Bluetooth is turned on, so that the computer begins to search for nearby
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Find HC-05 among the connection options and click **Connect**. In a moment,
    you should be shown a passkey error; that’s okay. Click **Options**, enter the
    PIN **1234**, and then click **Connect**.
  prefs: []
  type: TYPE_NORMAL
- en: After another moment, your Mac should pair with the Bluetooth module.
  prefs: []
  type: TYPE_NORMAL
- en: To continue, skip forward to the “Sending Data via Bluetooth” section on page
    228.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pairing with Android
    Devices</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The steps to pair the Bluetooth module with an Android are similar to those
    for any other Bluetooth device, such as headphones or speakers. Turn on Bluetooth
    on your Android device, search for a new device, and then tap the listing for
    **HC-05**. You should be prompted for the PIN. Enter **1234** to pair your module.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve paired your module with an Android or computer, I’ll show you
    how to send data from your Arduino via Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Sending Data via Bluetooth</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Bluetooth module is a serial device, and you can easily send data out using
    the SoftwareSerial library. Let’s test this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A level converter module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HC-05 Bluetooth module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 14-3](chapter14.xhtml#fig14-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR CONNECTION OF THE BLUETOOTH MODULE TO THE ARDUINO VIA A
    LEVEL CONVERTER](../images/fig14-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-3: The schematic
    for connecting a Bluetooth module to Arduino via a level converter</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Now enter and upload [Listing 14-1](#LiT-14-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 14-1: Testing the Bluetooth
    output</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Sketch operation is simple. Since the Bluetooth module is a serial data device,
    the sketch configures it to use a software serial port defined on pins D2 and
    D3 ❶. The sketch then starts the software serial port ❷ and uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">println()</samp> functions to
    send the data out via the module. The LED will blink twice around every five seconds
    when there’s a data connection between it and another device.
  prefs: []
  type: TYPE_NORMAL
- en: You now need to select a method to receive the data being sent from the Arduino
    via Bluetooth. I’ll show you how to do this with a PC, a macOS computer, and an
    Android device. Follow the instructions for all the platforms you have available
    to you.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">To Windows Devices</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To receive Arduino data on your Bluetooth-enabled PC, you can use any terminal
    software that can communicate using a COM: port. For this chapter, I suggest using
    the CoolTerm software by Roger Meier, available from [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve installed CoolTerm, use the Options menu to select the appropriate
    COM: port and click **Connect**. After a few moments, the data from the Arduino
    should scroll down the window, as shown in [Figure 14-4](chapter14.xhtml#fig14-4).'
  prefs: []
  type: TYPE_NORMAL
- en: '![SCREENSHOTS OF THE OUTPUT FROM LISTING 14-1 ON A WINDOWS PC](../images/fig14-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-4: Example output
    of [Listing 14-1](#LiT-14-1) on a PC terminal</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you can receive Arduino data on your Windows device, skip to Project
    #41 to put this capability to use.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">To macOS Devices</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To receive the data on your Bluetooth-enabled Mac, you can use any terminal
    software that can communicate using a COM: port. For this chapter, I suggest using
    the CoolTerm software by Roger Meier available from [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve installed CoolTerm, you may be presented with a macOS security error
    when trying to run the software. To get around this, locate the CoolTerm icon
    in the Applications folder, right-click it, and select **Open**; you may need
    to click **Open Anyway** in the Privacy and Security tab in the macOS System Preferences.
    Afterward, CoolTerm should run as normal when you use it in future.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve resolved the error, the data from the Arduino should begin to scroll
    down the terminal window, as shown in [Figure 14-5](chapter14.xhtml#fig14-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![SCREENSHOTS OF THE OUTPUT FROM LISTING 14-1 ON A MACOS COMPUTER](../images/fig14-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-5: Example output
    of [Listing 14-1](#LiT-14-1) on a macOS computer</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, move on to Project #41 to put this capability to use.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">To Android Devices</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On your Android device, find the Bluetooth Terminal HC-05 app in the Google
    Play store and download it. Once you install and open the terminal app, it should
    prompt you with a list of paired Bluetooth devices. Select **HC-05**. Once the
    connection is complete, the terminal should display the <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>
    values from the Arduino in the terminal app window. [Figure 14-6](chapter14.xhtml#fig14-6)
    demonstrates this sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '![SCREENSHOTS OF THE OUTPUT FROM LISTING 14-1 ON AN ANDROID DEVICE](../images/fig14-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-6: Example output
    of [Listing 14-1](#LiT-14-1) on an Android device</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you can receive Arduino data on your Android device, move on to Project
    #41 to put this capability to use.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use your new ability to view data from the Arduino on your device in
    the following project.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #41: Capturing Data for Real-Time
    Monitoring</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, using the BMP180 temperature and air pressure sensor introduced
    in [Chapter 10](chapter10.xhtml), you’ll build a system to monitor data using
    the Arduino and the Bluetooth module you just set up. You can use this type of
    data capture with a smartphone for real-time monitoring if you need to stay mobile
    in your area or with a PC running CoolTerm for recording and analysis. You can
    also try both if you have both devices available.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A level converter module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HC-05 Bluetooth module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BMP180 temperature and air pressure sensor board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, assemble the circuit as shown in [Figure 14-7](chapter14.xhtml#fig14-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #41](../images/fig14-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-7: The schematic
    for Project #41</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter and upload the Project #41 sketch. Next, open the terminal app on
    your Android device or Windows or Mac machine and connect to the Bluetooth module
    as described in the previous section. You should begin to see the temperature
    and air pressure displayed, as shown in [Figure 14-8](chapter14.xhtml#fig14-8).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #41 ON AN ANDROID DEVICE](../images/fig14-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-8: Example output
    from Project #41</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This sketch combines reading data from the BMP180, neatly formatting the data,
    and sending it to the Bluetooth module. The sketch includes and configures the
    required libraries ❶ and then declares two variables ❷ to store the temperature
    and air pressure data. It starts the software serial connection and BMP180 sensor
    ❸ and sends out the temperature data ❹. The pressure readings from the BMP180
    are converted from pascals to hectopascals ❺ and then sent out as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the data is being sent out via Bluetooth, you can capture it to a text
    file using the CoolTerm software. If you have a device connected to the project,
    disconnect it, and then connect your macOS or Windows PC as described in the previous
    section. Open CoolTerm and connect. The data should be shown in the terminal window,
    as in [Figure 14-9](chapter14.xhtml#fig14-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #41 ON A WINDOWS PC](../images/fig14-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-9: Example output
    displayed on a PC</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Press CTRL-R to open the Capture to Text File dialog, enter a filename, select
    a location, and click **Save**. All the data from the Arduino should be written
    to the text file. When you’re finished, press CTRL-SHIFT-R to stop and finalize
    the text file.
  prefs: []
  type: TYPE_NORMAL
- en: You can now open the text file in a spreadsheet such as Microsoft Excel, as
    shown in [Figure 14-10](chapter14.xhtml#fig14-10), using space as the delimiter
    during the import process. Your data is now ready for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #41 IN AN EXCEL SPREADSHEET](../images/fig14-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-10: The captured
    data in Excel</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The ease of working with any data sent from your Arduino will depend on how
    it’s formatted for transmission. However, you now have a wireless option for capturing
    any data your Arduino projects can generate and transforming the data into a user-friendly
    format.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, by using either a smartphone and a terminal app or a laptop computer
    with Bluetooth, you can create a walk-up monitoring system for various devices
    rather than going to the expense of building a display system for the local data.
    Just bring your computer or Android phone within range of your Bluetooth Arduino
    project and connect to the project to monitor the data readings. With this technique,
    you can create secure data transmission known only to yourself, monitoring it
    with your devices rather than displaying it for anyone to see.
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, you’ll learn to send data to and from the Arduino and another
    device by creating a Bluetooth remote-controlled project.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #42: Using Bluetooth for Digital
    I/O Control</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Like any external serial device, the Bluetooth module can both send and receive
    data, allowing you to send data to your Arduino for various purposes. With this
    project, you’ll make a simple remote control for LEDs connected to four digital
    pins, which will serve as a framework for your own wireless remote-control projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A level converter module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HC-05 Bluetooth module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four LEDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four 1 kΩ, 0.25 W, 1 percent resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 14-11](chapter14.xhtml#fig14-11). Once
    you’re finished with this project, keep the circuit assembled, as you’ll use it
    in the following project.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #42](../images/fig14-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-11: The schematic
    for Project #42</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter and upload the Project #42 sketch and then open the terminal app on your
    Android device or computer and connect to the Bluetooth module. Send a question
    mark (<samp class="SANS_TheSansMonoCd_W7Bold_B_11">?</samp>) with the terminal
    app, and the Arduino should respond with a quick control summary.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also send a 0, 1, 2, or 3 to turn on digital pins D8 to D11, respectively.
    To turn them off, send 4, 5, 6, or 7, respectively. After each command, the Arduino
    will return it as confirmation. [Figure 14-12](chapter14.xhtml#fig14-12) shows
    this output in the Android terminal app.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF CONTROLLING PROJECT #42 ON AN ANDROID DEVICE](../images/fig14-12.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-12: Controlling Project
    #42 from an Android phone</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous project, you can use the Bluetooth-equipped computer for
    the same control methods, as shown in [Figure 14-13](chapter14.xhtml#fig14-13).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF CONTROLLING PROJECT #42 ON A WINDOWS PC](../images/fig14-13.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-13: Controlling Project
    #42 from a PC</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The software serial port for the Bluetooth module is first set up ❶. The custom
    function <samp class="SANS_TheSansMonoCd_W5Regular_11">sendHelp()</samp> sends
    out the instructions when the user sends a question mark to the Arduino. The sketch
    sets the digital output pins for D13 to D8 to outputs ❷ and starts the software
    serial connection ❸. It also declares the character variable used to store the
    incoming command from Bluetooth ❹.
  prefs: []
  type: TYPE_NORMAL
- en: When a character is received from the Bluetooth module, it’s stored into the
    character variable <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> ❺; a
    series of <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> functions then
    convert the character into the required actions. Along with turning digital pins
    on or off, a message is sent out to confirm that the command has taken place.
    If the Arduino receives a question mark, the sketch calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">sendHelp()</samp>
    function ❻, which tells the user how to operate the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use this project’s remote-control framework in your own future work
    to keep controls out of the public view, by using Bluetooth on an Android phone
    or a computer rather than a control panel. You can also modify this project to
    control the relay board described in Project #26 in [Chapter 8](chapter8.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now make your own smartphone app to control this project to make it more
    user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #43: Using an Android App
    for Bluetooth Control</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Controlling the Arduino digital outputs with the terminal app on an Android
    device is simple enough for you, the creator. When others need to control the
    output, however, a custom Android smartphone app is preferable, as it insulates
    the end user from any chances of incorrect usage. Instead of writing the code
    for such an app from scratch, in this project I’ll show you how to create your
    own Android app to control the hardware in Project #42 using the free MIT App
    Inventor, an online service provided by Google and the Massachusetts Institute
    of Technology.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You can use the MIT App Inventor website on Windows, macOS, or Linux, but
    the resulting app will run only on an Android device.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 14-14](chapter14.xhtml#fig14-14) shows what your complete app interface
    will look like, showing buttons to connect the Android phone or tablet to the
    project via Bluetooth and then turn the Arduino digital outputs D8 to D11 on or
    off.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF PROJECT #43 IN THE ANDROID APP](../images/fig14-14.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-14: The completed
    Android App to control Project #42</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The process of building your own app involves two main stages. The first revolves
    around the design of the app, such as location of buttons and text on the display.
    The second stage involves determining what actions the app takes in response to
    user input or interactions with the hardware. With the MIT App Inventor, each
    stage involves a drag-and-drop process of moving items into place to build the
    app interface and operational instructions. I’ll show you how to navigate the
    process to create your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hardware for this project is identical to that in Project #42\. Once you
    have set up the circuit for that project, visit the MIT App Inventor website at
    [*https://<wbr>appinventor<wbr>.mit<wbr>.edu*](https://appinventor.mit.edu). Click
    the **Create Apps** button at the top of the home page. A new window should appear
    and ask you to log in with a Google account. You will need to create a Google
    account if you don’t have one.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve logged in and agreed to the terms of service, a welcome screen should
    appear. Click **Start a Blank Project** and enter a project name when prompted.
    I’ve named mine Project42, but you can choose whatever name you like. This will
    also be the name of the app when you later download it to your Android device.
    Note that you can save and load your progress as with any other editor using the
    Projects menu at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Your screen should now look like the one in [Figure 14-15](chapter14.xhtml#fig14-15),
    with a blank phone screen and various menus.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE MIT APP INVENTOR WEBSITE](../images/fig14-15.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-15: The Android app
    to control Project #42</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start building the interface from top to bottom, beginning with the header
    text. On the left of the display is the Palette. Click **User Interface**, which
    reveals various interface options. Place the mouse pointer over **Label**, and
    then click and drag it into the display of the phone, as shown in [Figure 14-16](chapter14.xhtml#fig14-16).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ADDING THE APP LABEL IN APP INVENTOR](../images/fig14-16.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-16: Building a label</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To edit the label, click the **Label1** entry in the Components windows to the
    right of the phone. This should allow you to edit the properties of the label
    using the Properties window on the right side of the screen, shown in [Figure
    14-17](chapter14.xhtml#fig14-17).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE LABEL PROPERTIES WINDOW IN APP INVENTOR](../images/fig14-17.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-17: The label properties</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Turn on **FontBold**, set the size to **28**, and enter **Bluetooth GPIO Control**
    into the text field. These changes should take place immediately and be reflected
    in the phone display in the center of the screen, as shown in [Figure 14-18](chapter14.xhtml#fig14-18).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE COMPLETED APP LABEL IN APP INVENTOR](../images/fig14-18.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-18: The completed
    label</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that when you add an item to the phone display, it appears in the Components
    list on the right. Clicking that item in the list allows you to edit its properties
    in the Properties box on the far right. You’ll use this feature in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll start adding the buttons to the app. The first button will activate
    the Bluetooth connection menu on the phone. To add this button, click and drag
    **ListPicker** from the User Interface list on the left of the web page into the
    phone display. Then click **ListPicker** in the Components list and edit the properties
    to the right. Change the text field to **Connect to BT**. Your button should now
    resemble that shown in [Figure 14-19](chapter14.xhtml#fig14-19).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ADDING THE BUTTON TO THE APP IN APP INVENTOR](../images/fig14-19.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-19: The completed
    button</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to ensure everything is centered in the display. Click **Screen1**
    in the Components list and change the AlignHorizontal setting to **Center**. The
    items on the display should now be aligned in the center, as shown in [Figure
    14-20](chapter14.xhtml#fig14-20).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE CENTERED BUTTON IN APP INVENTOR](../images/fig14-20.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-20: The items are
    now centered.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll create a table of eight buttons, one to turn on and off each of
    the four digital output pins. Click the **Layout** list in the Palette and then
    drag **TableArrangement** into the display. This should leave a box below the
    connect button, as shown in [Figure 14-21](chapter14.xhtml#fig14-21). Also change
    the number of rows in the TableArrangement properties to four.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ADDING A TABLE TO THE APP IN APP INVENTOR](../images/fig14-21.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-21: The table has
    been inserted.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the buttons: click and drag eight buttons from the User Interface list
    on the left into the gray table in the phone display. Thanks to TableArrangement,
    you can easily arrange them in four rows of two columns, as shown in [Figure 14-22](chapter14.xhtml#fig14-22).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ADDING BUTTONS TO THE APP IN APP INVENTOR](../images/fig14-22.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-22: Working with
    the buttons</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Button2** in the Components list and change the text to **D8 On**. Work
    through each of the other seven buttons, changing their text properties, until
    they match the buttons in [Figure 14-23](chapter14.xhtml#fig14-23).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE COMPLETED BUTTONS IN APP INVENTOR](../images/fig14-23.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-23: The buttons are
    now complete.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the buttons easier to work with in the later steps of app development,
    rename the buttons in the Components window: click each button in turn, click
    **Rename**, and change the name of the button to its function. For example, change
    the name of Button2 to **D8 On**, as shown in [Figure 14-24](chapter14.xhtml#fig14-24).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF EDITING THE BUTTON REFERENCES IN APP INVENTOR](../images/fig14-24.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-24: Editing the button
    references</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add a reference to Bluetooth. This is a virtual link between
    the app and the phone’s Bluetooth hardware. Click the **Connectivity** tab in
    the Palette, drag **BluetoothClient** into the main window, and place it on top
    of the phone. The Bluetooth icon should appear below the phone, as shown in [Figure
    14-25](chapter14.xhtml#fig14-25).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ADDING THE BLUETOOTH LINK TO THE APP IN APP INVENTOR](../images/fig14-25.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-25: Bluetooth added
    to the app design</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can edit the text in the top line of the app or remove it by editing
    the Screen1 item in the Components menu. To change the name of the app to something
    more useful or interesting to your needs, edit the title field that appears at
    the bottom of the Properties window, or uncheck the **TitleVisible** box if you
    don’t want to show the app’s title.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you’ve created the app design and interface in the Designer
    window. You’ll now begin the second stage of the app design: determining what
    actions the app will take upon user interaction. Start by clicking the **Blocks**
    button at the top right of the display, as shown in [Figure 14-26](chapter14.xhtml#fig14-26).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF SWITCHING TO THE BLOCKS EDITOR PAGE IN APP INVENTOR](../images/fig14-26.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-26: Switching to
    the Blocks editor</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In MIT App Inventor, the Designer screen is used to build the user interface
    of your app and the Blocks page is used to build the code that defines how the
    app works. Instead of writing code, you can use the Blocks editor page to drag
    and drop various “blocks” together to form sequences of instructions or activates
    based on user input. Each block represents a type of instruction, a function,
    or an activity. You can move between the two design screens by alternating between
    the **Designer** and **Blocks** buttons.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll now show you how to create the required block structure to enable app operation.
    In the Blocks editor page, click **ListPicker1** in the Blocks menu. A list of
    blocks will appear, some of which are shown in [Figure 14-27](chapter14.xhtml#fig14-27).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF VARIOUS CONTROL BLOCKS IN APP INVENTOR](../images/fig14-27.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-27: Various blocks</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Drag and drop the **when ListPicker1 BeforePicking** block from the **Blocks**
    menu on the left into the Viewer window. Once again, click **ListPicker1** in
    the Blocks menu and then drag and drop a **set ListPicker1 elements to** block
    into the **when** block from the previous step. It should click into the **when**
    block.
  prefs: []
  type: TYPE_NORMAL
- en: To delete an unwanted block during this process, simply drag it over the garbage
    can at the bottom right of the Viewer window.
  prefs: []
  type: TYPE_NORMAL
- en: Next, click the **BluetoothClient1** item in the Blocks menu and drag the **BluetoothClient1
    AddressesAndNames** item so it clicks into the last added item.
  prefs: []
  type: TYPE_NORMAL
- en: You now need to create the set of instructions to connect to the selected Bluetooth
    device as selected by the user. Assemble the blocks together. You can find the
    **if then** block in the Control section of the Blocks menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you need to configure the operations for each of the eight control buttons.
    To mirror the way Project #42 controlled the LEDs, you want the app to send a
    0 through 3 to turn on D8 to D11, respectively, and send a 4 through 7 to turn
    them off. Click the **D8** button in the TableArrangement1 list in the Blocks
    menu and then drag and drop a **when D8_On.click** block into the viewer window.'
  prefs: []
  type: TYPE_NORMAL
- en: Drag and drop **call BluetoothClient1\. SendText text** block from the BluetoothClient1
    list into the **when** block.
  prefs: []
  type: TYPE_NORMAL
- en: To complete the button action group, click the **Math** item in the Blocks menu
    and drag the first block (which just holds a 0) into the notch to the right of
    the word **text**.
  prefs: []
  type: TYPE_NORMAL
- en: This group of blocks will activate when the user presses the button D8 On; this
    will send the text character 0 out via Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to create another seven of these groups so that you end up with
    eight in total to match the buttons. To save time, you can right-click over the
    first block in a group and select **Duplicate** to repeat the group you’re editing.
    The other groups must refer to different buttons. Click the **D8_ON** and a list
    of all the available buttons should drop down, as shown in [Figure 14-28](chapter14.xhtml#fig14-28).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF ADDING A DIGITAL PIN REFERENCE TO CONTROL THE BLOCK IN APP
    INVENTOR](../images/fig14-28.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-28: The button group
    selection</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure you have changed this setting in each of the eight button groups to match
    the eight buttons and then change the value of the text character being sent for
    the rest of the buttons. That is, pressing D8 off should send 4, D9 on should
    send 1, and so on. You can just click over the 0 in each group and enter a new
    value. When you’ve finished, your screen should resemble that shown in [Figure
    14-29](chapter14.xhtml#fig14-29).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE COMPLETED BUTTON CONTROL BLOCKS IN APP INVENTOR](../images/fig14-29.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-29: The completed
    control block groups</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Your app is now complete and ready for installation on your Android phone or
    tablet. Save your project using the Projects menu (in case you want to alter it
    later) and then select **Android App (.apk)** in the Build menu. The App Inventor
    should compile the instructions and, after a minute or two, present you with a
    download button and QR code, as shown in [Figure 14-30](chapter14.xhtml#fig14-30).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE APP DOWNLOAD PAGE IN APP INVENTOR](../images/fig14-30.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-30: Download your
    app!</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You can then download and save the app’s *.apk* file to load it onto your device
    or just scan the QR code with your device’s camera. When prompted, visit the URL
    decoded from the image and go through the download and installation prompts. Click
    **Yes** or **Agree** to any dialogs that Android may produce.
  prefs: []
  type: TYPE_NORMAL
- en: At long last, your app should pop up. Drag it onto the home screen, as shown
    in [Figure 14-31](chapter14.xhtml#fig14-31).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE APP ICON ON AN ANDROID PHONE](../images/fig14-31.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-31: Your app installed
    on a phone</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations! You’ve made an Android app. Now to give it a test: ensure
    you have the Project #42 hardware correctly wired up and then open your app. Turn
    on your device’s Bluetooth function and then touch the app’s **Connect to BT**
    button. You should be presented with a list of paired Bluetooth devices. Select
    the HC-05 listing, and the app should return to the main page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now be able to press each button to turn on or off the digital output
    pins on the Arduino, with the LEDs reflecting the Arduino’s status. If the app
    isn’t working, first go back to Project #42 and ensure that the hardware can be
    controlled via the terminal app or a Bluetooth-enabled PC. Failing that, review
    the app setup in the App Inventor. You can also download the AI project file in
    the *Project #43* folder of the downloadable files on the book web page, [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians).'
  prefs: []
  type: TYPE_NORMAL
- en: This simple example demonstrates just one way you can use the Android App Inventor
    to make your own remote-controlled projects with professional user interfaces.
    If you like, spend more time experimenting with App Inventor. I know you’ll come
    up with some interesting use cases of your own.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn one more way to keep your projects user-friendly by making some
    modifications to the Bluetooth module.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Updating the Module Name and PIN</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve built an Android app, the final step is to update the module’s
    name and PIN/password for additional security, as every unit generally ships from
    the factory with a PIN of 1234\. To do so, you must change the module’s operation
    mode to AT command mode, allowing you to send AT commands to update and review
    various parameters (in the same way you would with a cellular shield for Arduino).
  prefs: []
  type: TYPE_NORMAL
- en: To switch to AT command mode, wire up the module to your Arduino as shown in
    [Figure 14-3](chapter14.xhtml#fig14-3) and then add the connection from 3.3 V
    to the Bluetooth module’s EN pin. This extra connection is required only when
    altering the parameters—remove or disconnect the connection for normal use.
  prefs: []
  type: TYPE_NORMAL
- en: Next, enter and upload the sketch in [Listing 14-2](#LiT-14-2), which enables
    communication between the Arduino Serial Monitor and the Bluetooth module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 14-2: Configuring the
    HC-05 Bluetooth module</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch first sets up a serial connection between the Arduino and your Bluetooth
    module ❶. The serial speed for the Bluetooth module in AT mode is set at 38,400
    baud ❷. The serial connection between your PC and the Arduino stays at 9,600 baud
    ❸. The module’s LED should blink slowly to indicate that AT command mode is operating.
  prefs: []
  type: TYPE_NORMAL
- en: Open the Serial Monitor and ensure that both NL (for “new line”) and CR (for
    “carriage return”) are selected in the menu next to the speed. Enter **AT** and
    press **Send**. The Bluetooth module should reply <samp class="SANS_TheSansMonoCd_W5Regular_11">OK</samp>
    in the Serial Monitor. If it doesn’t, double-check your wiring and that the LED
    is blinking slowly.
  prefs: []
  type: TYPE_NORMAL
- en: Just like network devices, each Bluetooth module has a unique media access control
    (MAC) address. Send <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+ADDR?</samp>
    in the Serial Monitor, which should return your module’s MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: My unit returned a MAC address of 00:21:06:08:30:BF. To change the four-digit
    pairing PIN, send <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+PSWD</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=</samp><samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">xxxx</samp>,
    where <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">xxxx</samp> is the new
    four-digit PIN, such as 8675, for example. You can then test the new PIN by forgetting
    the device in the Bluetooth menu and then searching for it again.
  prefs: []
  type: TYPE_NORMAL
- en: To change the Bluetooth’s name from HC-05 to something more descriptive, send
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+NAME</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">NewName</samp>, where <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">NewName</samp>
    is the name you’d like the module to transmit when in operation. For example,
    if you were building a project that used a relay to operate a relay in your garage,
    you might change its name to GarageRelay by sending <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+NAME</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=GarageRelay</samp>. The new name
    should show up on your device’s Bluetooth screen when pairing, as shown in [Figure
    14-32](chapter14.xhtml#fig14-32).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE BLUETOOTH MODULE WITH THE CHANGED NAME IN AN ANDROID
    PHONE](../images/fig14-32.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-32: Results of changing
    the module name</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the module’s name can be useful when working with several Bluetooth-equipped
    projects in the same area, allowing you to easily keep track of which devices
    you’d like to pair with. If you’d ever like to reset the module’s name and pin
    back to HC-05 and 1234, send <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT +
    ORGL</samp> to reset the unit to factory default. You might do this if your project
    was temporary or if you’re passing the module on to another person.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned several ways to use serial Bluetooth modules with
    your Arduino projects. You can now use Bluetooth for wireless remote control,
    capturing data from an Arduino to a computer via Bluetooth and building your own
    remote-control apps for Android devices. In the future, you can use these skills
    in plenty of applications, such as remote-control relay boards, logging data from
    sensors in hard-to-reach places, or building customized remote-control Christmas
    lights.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn to reduce your Arduino’s power consumption.
  prefs: []
  type: TYPE_NORMAL
