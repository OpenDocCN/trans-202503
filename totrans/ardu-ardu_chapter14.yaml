- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">14</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CONTROLLING
    THE ARDUINO WITH BLUETOOTH</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">14</samp> <samp class="SANS_Dogma_OT_Bold_B_11">通过蓝牙控制
    Arduino</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Most contemporary smartphones, PCs, or tablets can communicate wirelessly with
    other devices using Bluetooth. In this chapter, you’ll use inexpensive Bluetooth
    modules along with Windows, Android, or Apple machines to control your Arduino
    projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代智能手机、个人电脑或平板电脑可以通过蓝牙与其他设备无线通信。在本章中，你将使用廉价的蓝牙模块，并配合 Windows、Android 或 Apple
    设备来控制你的 Arduino 项目。
- en: 'You’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何：
- en: Use level converter boards with serial Bluetooth interface modules for voltage
    translation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用电平转换板与串口蓝牙接口模块进行电压转换
- en: Pair Bluetooth modules with Android-, Apple-, and Windows-based devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将蓝牙模块与基于 Android、Apple 和 Windows 的设备配对
- en: Edit the parameters of a serial Bluetooth module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑串口蓝牙模块的参数
- en: You’ll also send data to and from an Arduino project via Bluetooth and then
    build your own Android app with the MIT App Inventor to remotely control your
    project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将通过蓝牙向 Arduino 项目发送和接收数据，然后使用 MIT App Inventor 构建自己的 Android 应用程序来远程控制你的项目。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Bluetooth Modules</samp>
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">蓝牙模块</samp>
- en: There are many types of Bluetooth modules. This chapter relies on the HC-05-type
    Bluetooth module, such as PMD Way part 590526, as shown in [Figure 14-1](chapter14.xhtml#fig14-1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有许多类型的蓝牙模块。本章依赖于 HC-05 型蓝牙模块，例如 PMD Way 部件 590526，如[图 14-1](chapter14.xhtml#fig14-1)所示。
- en: '![A PHOTO OF THE HC-05 BLUETOOTH MODULE](../images/fig14-1.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![A PHOTO OF THE HC-05 BLUETOOTH MODULE](../images/fig14-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-1: An HC-05 Bluetooth
    module</samp>'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-1：一个 HC-05 蓝牙模块</samp>
- en: Other modules on the market like the HC-06 won’t work with the examples and
    projects in this chapter, as they can only transmit data, not receive it. These
    modules use a TX and RX line for serial communication between the module and your
    Arduino, which can be used with the SoftwareSerial library as usual. The data
    rate will default to 9,600 bps. I’ll explain how to set this up later in the chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上其他模块，如 HC-06，不适用于本章中的示例和项目，因为它们只能发送数据，无法接收数据。这些模块使用 TX 和 RX 线进行串口通信，可以像往常一样与
    SoftwareSerial 库一起使用。数据传输速率默认为 9,600 bps。稍后我会在本章中解释如何设置。
- en: Physically wiring the modules to your Arduino projects is easy, thanks to the
    standard pin spacing at the end of the module, and pins are always labeled on
    the rear of the module. They will both operate using a 5 V DC power supply. However,
    the communication pins use a lower logic voltage of 3.3 V DC. The best way to
    convert 5 V to 3.3 V is to use a level converter module, which I’ll explain next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将模块物理连接到 Arduino 项目非常简单，这得益于模块末端的标准针脚间距，而且针脚通常会在模块背面标注。它们都使用 5V DC 电源供应。然而，通信针脚使用较低的逻辑电压
    3.3V DC。将 5V 转换为 3.3V 的最佳方法是使用电平转换模块，我将在接下来讲解。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Level Converter Modules</samp>
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">电平转换模块</samp>
- en: Many devices have data communication pins designed to operate at 3.3 V instead
    of the usual 5 V DC. This can be for serial commutations such as Bluetooth modules
    or when using other data buses such as SPI or I²C. However, these pins do not
    work reliably with 5 V devices such as the Arduino Uno or compatible, so you’ll
    need to convert signals between 3.3 V and 5 V DC with a voltage converter board.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多设备的通信引脚设计为工作在 3.3V 电压下，而不是通常的 5V DC。这可能用于串口通信，比如蓝牙模块，或者当使用其他数据总线如 SPI 或 I²C
    时。然而，这些引脚与 5V 设备（如 Arduino Uno 或兼容设备）不兼容，因此你需要使用电压转换板在 3.3V 和 5V 之间转换信号。
- en: To do so, you can use a level converter module such as the one shown in [Figure
    14-2](chapter14.xhtml#fig14-2), PMD Way part 441079.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你可以使用一个电平转换模块，例如 [图 14-2](chapter14.xhtml#fig14-2)中所示的 PMD Way 部件 441079。
- en: '![A PHOTO OF THE 5 TO 3.3 V LEVEL CONVERTER](../images/fig14-2.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![A PHOTO OF THE 5 TO 3.3 V LEVEL CONVERTER](../images/fig14-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-2: A level converter
    module</samp>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-2：一个电平转换模块</samp>
- en: Most level converter modules include inline header pins, which you will need
    to solder to the board. Different level converters will have varying number of
    channels; you need at least two channels for our Bluetooth devices, one for serial
    TX and one for serial RX.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数电平转换模块都包括内联针脚，您需要将其焊接到电路板上。不同的电平转换器有不同数量的通道；我们需要至少两个通道来连接蓝牙设备，一个用于串行TX，另一个用于串行RX。
- en: All level converters require connections to both a 5 V and 3.3 V supply for
    operation. Simply connect the lower voltage device to the LV channels side of
    the level converter and connect the Arduino to the matching HV channels side.
    I’ll explain how to use the level converter in this chapter’s projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所有电平转换器都需要连接到5V和3.3V电源才能工作。只需将低电压设备连接到电平转换器的LV通道端，然后将Arduino连接到匹配的HV通道端。我将在本章的项目中解释如何使用电平转换器。
- en: Before using a Bluetooth module with your PC or other device, you’ll need to
    pair the Bluetooth module with that device, as you would with Bluetooth headphones
    or speakers. For future reference and when working through this chapter, the following
    sections give instructions for pairing Windows PCs, Android devices, and macOS
    computers with the module that you can follow as required for the projects. Note
    that the LED on the Bluetooth module will blink slowly when successfully paired
    with any of these devices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在将蓝牙模块与PC或其他设备一起使用之前，您需要将蓝牙模块与该设备配对，方法与配对蓝牙耳机或扬声器相同。为了以后的参考，并在本章进行操作时，以下部分提供了与Windows
    PC、Android设备和macOS计算机配对模块的说明，您可以根据项目需要进行配对。请注意，当成功与这些设备中的任何一个配对时，蓝牙模块上的LED会慢慢闪烁。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pairing with Windows
    Devices</samp>
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">与Windows设备配对</samp>
- en: The steps to pair the Bluetooth module with a Windows machine are similar to
    those for any other Bluetooth device, such as headphones or speakers. First ensure
    the module is connected to the 5V and GND pins for power. Once power is connected,
    the LED on the module will blink rapidly, meaning there’s no Bluetooth connection
    between the module and a device.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将蓝牙模块与Windows机器配对的步骤与其他蓝牙设备（如耳机或扬声器）相似。首先，确保模块已连接到5V和GND引脚以供电。一旦供电连接，模块上的LED将快速闪烁，表示模块与设备之间没有蓝牙连接。
- en: When using a Windows-based PC, simply search for a new Bluetooth device from
    the Bluetooth & devices page in Settings. Select the HC-05 device in the list
    and you’ll be prompted for a PIN. Enter **1234**, click **Connect**, and you’re
    ready to go.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用基于Windows的PC时，只需从设置中的“蓝牙和设备”页面搜索新的蓝牙设备。选择列表中的HC-05设备，系统会提示您输入PIN码。输入**1234**，点击**连接**，然后就可以开始使用了。
- en: 'You can then send and receive data to the Bluetooth module via a COM: port
    address. These addresses can be found in the Windows Device Manager.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过COM端口地址向蓝牙模块发送和接收数据。这些地址可以在Windows设备管理器中找到。
- en: To continue, skip to the “Sending Data via Bluetooth” section on page 228.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续，请跳到第228页的“通过蓝牙发送数据”部分。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pairing with macOS
    Devices</samp>
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">与macOS设备配对</samp>
- en: Open the System Preferences window from the Apple menu and select **Bluetooth**.
    Make sure Bluetooth is turned on, so that the computer begins to search for nearby
    devices.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从Apple菜单打开“系统偏好设置”窗口，然后选择**蓝牙**。确保蓝牙已打开，这样计算机就会开始搜索附近的设备。
- en: Find HC-05 among the connection options and click **Connect**. In a moment,
    you should be shown a passkey error; that’s okay. Click **Options**, enter the
    PIN **1234**, and then click **Connect**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接选项中找到HC-05并点击**连接**。片刻之后，您应该会看到一个密码错误提示；这没关系。点击**选项**，输入PIN码**1234**，然后点击**连接**。
- en: After another moment, your Mac should pair with the Bluetooth module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 片刻之后，您的Mac应该会与蓝牙模块配对。
- en: To continue, skip forward to the “Sending Data via Bluetooth” section on page
    228.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续，请跳到第228页的“通过蓝牙发送数据”部分。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pairing with Android
    Devices</samp>
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">与Android设备配对</samp>
- en: The steps to pair the Bluetooth module with an Android are similar to those
    for any other Bluetooth device, such as headphones or speakers. Turn on Bluetooth
    on your Android device, search for a new device, and then tap the listing for
    **HC-05**. You should be prompted for the PIN. Enter **1234** to pair your module.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将蓝牙模块与 Android 配对的步骤与任何其他蓝牙设备（如耳机或扬声器）的步骤相似。打开 Android 设备上的蓝牙，搜索新设备，然后点击**HC-05**的列表。系统会提示你输入
    PIN 码，输入**1234**以配对模块。
- en: Now that you’ve paired your module with an Android or computer, I’ll show you
    how to send data from your Arduino via Bluetooth.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将模块与 Android 或计算机配对，我将向你展示如何通过蓝牙从 Arduino 发送数据。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Sending Data via Bluetooth</samp>
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">通过蓝牙发送数据</samp>
- en: The Bluetooth module is a serial device, and you can easily send data out using
    the SoftwareSerial library. Let’s test this now.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝牙模块是一个串行设备，你可以使用 SoftwareSerial 库轻松地发送数据。让我们现在进行测试。
- en: 'You’ll need the following parts for this project:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下部件来完成这个项目：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Arduino Uno 或兼容板和 USB 电缆
- en: A solderless breadboard
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊面包板
- en: A level converter module
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电平转换模块
- en: Various jumper wires
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: An HC-05 Bluetooth module
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 HC-05 蓝牙模块
- en: Assemble the circuit as shown in [Figure 14-3](chapter14.xhtml#fig14-3).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 14-3](chapter14.xhtml#fig14-3)中的示意图组装电路。
- en: '![THE SCHEMATIC FOR CONNECTION OF THE BLUETOOTH MODULE TO THE ARDUINO VIA A
    LEVEL CONVERTER](../images/fig14-3.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![通过电平转换器将蓝牙模块连接到 Arduino 的原理图](../images/fig14-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-3: The schematic
    for connecting a Bluetooth module to Arduino via a level converter</samp>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-3：通过电平转换器将蓝牙模块连接到 Arduino
    的原理图</samp>
- en: Now enter and upload [Listing 14-1](#LiT-14-1).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传[列表 14-1](#LiT-14-1)。
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 14-1: Testing the Bluetooth
    output</samp>'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 14-1：测试蓝牙输出</samp>
- en: Sketch operation is simple. Since the Bluetooth module is a serial data device,
    the sketch configures it to use a software serial port defined on pins D2 and
    D3 ❶. The sketch then starts the software serial port ❷ and uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">println()</samp> functions to
    send the data out via the module. The LED will blink twice around every five seconds
    when there’s a data connection between it and another device.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Sketch 操作很简单。由于蓝牙模块是串行数据设备，因此 Sketch 将其配置为使用在 D2 和 D3 引脚上定义的软件串行端口❶。接着，Sketch
    启动软件串行端口❷，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">println()</samp> 函数通过模块发送数据。当模块与另一设备建立数据连接时，LED
    每五秒闪烁两次。
- en: You now need to select a method to receive the data being sent from the Arduino
    via Bluetooth. I’ll show you how to do this with a PC, a macOS computer, and an
    Android device. Follow the instructions for all the platforms you have available
    to you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要选择一种接收通过蓝牙从 Arduino 发送的数据的方法。我将展示如何在 PC、macOS 计算机和 Android 设备上进行此操作。请根据你可用的平台按照说明操作。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">To Windows Devices</samp>
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">连接 Windows 设备</samp>
- en: 'To receive Arduino data on your Bluetooth-enabled PC, you can use any terminal
    software that can communicate using a COM: port. For this chapter, I suggest using
    the CoolTerm software by Roger Meier, available from [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '要在支持蓝牙的 PC 上接收 Arduino 数据，你可以使用任何可以通过 COM: 端口进行通信的终端软件。在本章中，我建议使用 Roger Meier
    开发的 CoolTerm 软件，可以从[*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org)下载。'
- en: 'Once you’ve installed CoolTerm, use the Options menu to select the appropriate
    COM: port and click **Connect**. After a few moments, the data from the Arduino
    should scroll down the window, as shown in [Figure 14-4](chapter14.xhtml#fig14-4).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '安装 CoolTerm 后，使用“选项”菜单选择合适的 COM: 端口并点击**连接**。几秒钟后，来自 Arduino 的数据应当会滚动显示在窗口中，如[图
    14-4](chapter14.xhtml#fig14-4)所示。'
- en: '![SCREENSHOTS OF THE OUTPUT FROM LISTING 14-1 ON A WINDOWS PC](../images/fig14-4.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![列表 14-1 在 Windows PC 上的输出截图](../images/fig14-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-4: Example output
    of [Listing 14-1](#LiT-14-1) on a PC terminal</samp>'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-4：PC 终端上[列表 14-1](#LiT-14-1)的示例输出</samp>
- en: 'Now that you can receive Arduino data on your Windows device, skip to Project
    #41 to put this capability to use.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你可以在Windows设备上接收Arduino数据，跳到项目 #41，开始使用此功能。'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">To macOS Devices</samp>
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">到macOS设备</samp>
- en: 'To receive the data on your Bluetooth-enabled Mac, you can use any terminal
    software that can communicate using a COM: port. For this chapter, I suggest using
    the CoolTerm software by Roger Meier available from [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在支持蓝牙的Mac上接收数据，你可以使用任何能够通过COM端口进行通信的终端软件。在本章中，我建议使用由Roger Meier提供的CoolTerm软件，可以从[*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org)下载。
- en: Once you’ve installed CoolTerm, you may be presented with a macOS security error
    when trying to run the software. To get around this, locate the CoolTerm icon
    in the Applications folder, right-click it, and select **Open**; you may need
    to click **Open Anyway** in the Privacy and Security tab in the macOS System Preferences.
    Afterward, CoolTerm should run as normal when you use it in future.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 安装CoolTerm后，在尝试运行软件时，可能会出现macOS安全错误。为了解决这个问题，找到CoolTerm图标，右键点击并选择**打开**；你可能需要在macOS系统偏好设置的隐私与安全选项卡中点击**仍然打开**。之后，每次使用时，CoolTerm都应该能够正常运行。
- en: Once you’ve resolved the error, the data from the Arduino should begin to scroll
    down the terminal window, as shown in [Figure 14-5](chapter14.xhtml#fig14-5).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦解决了错误，来自Arduino的数据应开始在终端窗口中滚动，如[图14-5](chapter14.xhtml#fig14-5)所示。
- en: '![SCREENSHOTS OF THE OUTPUT FROM LISTING 14-1 ON A MACOS COMPUTER](../images/fig14-5.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![来自列表14-1的输出截图，显示在macOS计算机上](../images/fig14-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-5: Example output
    of [Listing 14-1](#LiT-14-1) on a macOS computer</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-5：在macOS计算机上显示[列表14-1](#LiT-14-1)的示例输出</samp>
- en: 'Next, move on to Project #41 to put this capability to use.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，进入项目 #41，开始使用此功能。'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">To Android Devices</samp>
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">到Android设备</samp>
- en: On your Android device, find the Bluetooth Terminal HC-05 app in the Google
    Play store and download it. Once you install and open the terminal app, it should
    prompt you with a list of paired Bluetooth devices. Select **HC-05**. Once the
    connection is complete, the terminal should display the <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>
    values from the Arduino in the terminal app window. [Figure 14-6](chapter14.xhtml#fig14-6)
    demonstrates this sequence.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Android设备上，找到Google Play商店中的Bluetooth Terminal HC-05应用并下载。安装并打开终端应用后，它应该会提示你选择已配对的蓝牙设备，选择**HC-05**。连接完成后，终端应用窗口应显示来自Arduino的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>值。[图14-6](chapter14.xhtml#fig14-6)展示了这个过程。
- en: '![SCREENSHOTS OF THE OUTPUT FROM LISTING 14-1 ON AN ANDROID DEVICE](../images/fig14-6.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![来自列表14-1的输出截图，显示在Android设备上](../images/fig14-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-6: Example output
    of [Listing 14-1](#LiT-14-1) on an Android device</samp>'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-6：在Android设备上显示[列表14-1](#LiT-14-1)的示例输出</samp>
- en: 'Now that you can receive Arduino data on your Android device, move on to Project
    #41 to put this capability to use.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你可以在Android设备上接收Arduino数据，继续进入项目 #41，开始使用此功能。'
- en: You’ll use your new ability to view data from the Arduino on your device in
    the following project.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的项目中，你将使用你的新能力，在设备上查看来自Arduino的数据。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #41: Capturing Data for Real-Time
    Monitoring</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #41：实时监控数据采集</samp>'
- en: In this project, using the BMP180 temperature and air pressure sensor introduced
    in [Chapter 10](chapter10.xhtml), you’ll build a system to monitor data using
    the Arduino and the Bluetooth module you just set up. You can use this type of
    data capture with a smartphone for real-time monitoring if you need to stay mobile
    in your area or with a PC running CoolTerm for recording and analysis. You can
    also try both if you have both devices available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，使用在[第10章](chapter10.xhtml)中介绍的BMP180温度和气压传感器，你将构建一个系统，通过你刚设置的Arduino和蓝牙模块来监控数据。如果你需要在移动中保持实时监控，可以使用智能手机进行此类数据采集，或者使用运行CoolTerm的PC进行记录和分析。如果你有这两种设备，也可以尝试同时使用。
- en: 'You’ll need the following parts for this project:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下部件来完成此项目：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino Uno或兼容的开发板和USB线
- en: A solderless breadboard
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊面包板
- en: A level converter module
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电平转换模块
- en: Various jumper wires
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: An HC-05 Bluetooth module
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 HC-05 蓝牙模块
- en: A BMP180 temperature and air pressure sensor board
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 BMP180 温度和气压传感器板
- en: Next, assemble the circuit as shown in [Figure 14-7](chapter14.xhtml#fig14-7).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照[图 14-7](chapter14.xhtml#fig14-7)所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #41](../images/fig14-7.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #41 的原理图](../images/fig14-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-7: The schematic
    for Project #41</samp>'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-7：项目 #41 的原理图</samp>'
- en: 'Now enter and upload the Project #41 sketch. Next, open the terminal app on
    your Android device or Windows or Mac machine and connect to the Bluetooth module
    as described in the previous section. You should begin to see the temperature
    and air pressure displayed, as shown in [Figure 14-8](chapter14.xhtml#fig14-8).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '现在输入并上传项目 #41 草图。接下来，在你的 Android 设备或 Windows 或 Mac 机器上打开终端应用，并按照上一节的说明连接到蓝牙模块。你应该开始看到显示的温度和气压，如[图
    14-8](chapter14.xhtml#fig14-8)所示。'
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #41 ON AN ANDROID DEVICE](../images/fig14-8.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #41 在 Android 设备上的输出截图](../images/fig14-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-8: Example output
    from Project #41</samp>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-8：项目 #41 的示例输出</samp>'
- en: 'Let’s see how this works:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This sketch combines reading data from the BMP180, neatly formatting the data,
    and sending it to the Bluetooth module. The sketch includes and configures the
    required libraries ❶ and then declares two variables ❷ to store the temperature
    and air pressure data. It starts the software serial connection and BMP180 sensor
    ❸ and sends out the temperature data ❹. The pressure readings from the BMP180
    are converted from pascals to hectopascals ❺ and then sent out as well.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图结合了从 BMP180 读取数据、整齐地格式化数据并将其发送到蓝牙模块。草图包含并配置了所需的库 ❶，然后声明了两个变量 ❷ 来存储温度和气压数据。它启动了软件串行连接和
    BMP180 传感器 ❸，并发送温度数据 ❹。来自 BMP180 的压力读数被从帕斯卡转换为百帕 ❺，然后也发送出去。
- en: Now that the data is being sent out via Bluetooth, you can capture it to a text
    file using the CoolTerm software. If you have a device connected to the project,
    disconnect it, and then connect your macOS or Windows PC as described in the previous
    section. Open CoolTerm and connect. The data should be shown in the terminal window,
    as in [Figure 14-9](chapter14.xhtml#fig14-9).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据通过蓝牙发送，你可以使用 CoolTerm 软件将其捕获到文本文件中。如果你的设备已连接到项目，请断开连接，然后按照上一节的说明连接你的 macOS
    或 Windows 电脑。打开 CoolTerm 并连接。数据应显示在终端窗口中，如[图 14-9](chapter14.xhtml#fig14-9)所示。
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #41 ON A WINDOWS PC](../images/fig14-9.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #41 在 Windows PC 上的输出截图](../images/fig14-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-9: Example output
    displayed on a PC</samp>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-9：PC 上显示的示例输出</samp>
- en: Press CTRL-R to open the Capture to Text File dialog, enter a filename, select
    a location, and click **Save**. All the data from the Arduino should be written
    to the text file. When you’re finished, press CTRL-SHIFT-R to stop and finalize
    the text file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 CTRL-R 打开“捕获到文本文件”对话框，输入文件名，选择保存位置，然后点击**保存**。Arduino 的所有数据应该会写入文本文件中。完成后，按下
    CTRL-SHIFT-R 停止并最终保存文本文件。
- en: You can now open the text file in a spreadsheet such as Microsoft Excel, as
    shown in [Figure 14-10](chapter14.xhtml#fig14-10), using space as the delimiter
    during the import process. Your data is now ready for analysis.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在像 Microsoft Excel 这样的电子表格软件中打开文本文件，如[图 14-10](chapter14.xhtml#fig14-10)所示，在导入过程中使用空格作为分隔符。你的数据现在已经准备好进行分析。
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #41 IN AN EXCEL SPREADSHEET](../images/fig14-10.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #41 在 Excel 电子表格中的输出截图](../images/fig14-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-10: The captured
    data in Excel</samp>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-10：Excel 中捕获的数据</samp>
- en: The ease of working with any data sent from your Arduino will depend on how
    it’s formatted for transmission. However, you now have a wireless option for capturing
    any data your Arduino projects can generate and transforming the data into a user-friendly
    format.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用从 Arduino 发送的任何数据的便利性将取决于它如何格式化以进行传输。不过，现在你有了无线捕获任何 Arduino 项目生成的数据并将其转换为用户友好格式的选项。
- en: Furthermore, by using either a smartphone and a terminal app or a laptop computer
    with Bluetooth, you can create a walk-up monitoring system for various devices
    rather than going to the expense of building a display system for the local data.
    Just bring your computer or Android phone within range of your Bluetooth Arduino
    project and connect to the project to monitor the data readings. With this technique,
    you can create secure data transmission known only to yourself, monitoring it
    with your devices rather than displaying it for anyone to see.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，借助智能手机和终端应用或配备蓝牙的笔记本电脑，你可以创建一个步进式监控系统来监视各种设备，而无需花费资金构建本地数据的显示系统。只需将你的计算机或
    Android 手机带入蓝牙 Arduino 项目的范围内并连接到该项目，即可监控数据读数。通过这种技术，你可以创建只自己知晓的安全数据传输，通过自己的设备监控数据，而不是让任何人都能看到显示内容。
- en: In the next project, you’ll learn to send data to and from the Arduino and another
    device by creating a Bluetooth remote-controlled project.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，你将学习如何通过创建一个蓝牙远程控制项目，将数据发送到 Arduino 和其他设备之间。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #42: Using Bluetooth for Digital
    I/O Control</samp>'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #42：使用蓝牙进行数字 I/O 控制</samp>'
- en: Like any external serial device, the Bluetooth module can both send and receive
    data, allowing you to send data to your Arduino for various purposes. With this
    project, you’ll make a simple remote control for LEDs connected to four digital
    pins, which will serve as a framework for your own wireless remote-control projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何外部串口设备一样，蓝牙模块可以同时发送和接收数据，允许你将数据发送到 Arduino 用于各种目的。通过这个项目，你将制作一个简单的远程控制器，用于控制连接到四个数字引脚的
    LED，这将为你自己的无线远程控制项目提供框架。
- en: 'You’ll need the following parts for this project:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下零件来完成此项目：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板和 USB 数据线
- en: A solderless breadboard
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: A level converter module
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电平转换模块
- en: Various jumper wires
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: An HC-05 Bluetooth module
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 HC-05 蓝牙模块
- en: Four LEDs
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个 LED
- en: Four 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个 1 kΩ、0.25 W、1% 的电阻器
- en: Assemble the circuit as shown in [Figure 14-11](chapter14.xhtml#fig14-11). Once
    you’re finished with this project, keep the circuit assembled, as you’ll use it
    in the following project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 14-11](chapter14.xhtml#fig14-11) 所示组装电路。完成此项目后，请保持电路组装好，因为接下来的项目中你将再次使用它。
- en: '![THE SCHEMATIC FOR PROJECT #42](../images/fig14-11.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #42 的原理图](../images/fig14-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-11: The schematic
    for Project #42</samp>'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-11：项目 #42 的原理图</samp>'
- en: 'Enter and upload the Project #42 sketch and then open the terminal app on your
    Android device or computer and connect to the Bluetooth module. Send a question
    mark (<samp class="SANS_TheSansMonoCd_W7Bold_B_11">?</samp>) with the terminal
    app, and the Arduino should respond with a quick control summary.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '输入并上传项目 #42 的草图，然后在你的 Android 设备或计算机上打开终端应用并连接到蓝牙模块。通过终端应用发送一个问号 (<samp class="SANS_TheSansMonoCd_W7Bold_B_11">?</samp>)，Arduino
    应该会快速响应一个控制概述。'
- en: You can also send a 0, 1, 2, or 3 to turn on digital pins D8 to D11, respectively.
    To turn them off, send 4, 5, 6, or 7, respectively. After each command, the Arduino
    will return it as confirmation. [Figure 14-12](chapter14.xhtml#fig14-12) shows
    this output in the Android terminal app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以发送 0、1、2 或 3 来分别开启数字引脚 D8 到 D11。要关闭它们，分别发送 4、5、6 或 7。每个命令发送后，Arduino 会返回确认信息。[图
    14-12](chapter14.xhtml#fig14-12) 显示了在 Android 终端应用中输出的内容。
- en: '![A SCREENSHOT OF CONTROLLING PROJECT #42 ON AN ANDROID DEVICE](../images/fig14-12.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![在安卓设备上控制项目 #42 的截图](../images/fig14-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-12: Controlling Project
    #42 from an Android phone</samp>'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-12：从安卓手机控制项目 #42</samp>'
- en: As with the previous project, you can use the Bluetooth-equipped computer for
    the same control methods, as shown in [Figure 14-13](chapter14.xhtml#fig14-13).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前的项目一样，你可以使用配备蓝牙的计算机进行相同的控制方法，如 [图 14-13](chapter14.xhtml#fig14-13) 所示。
- en: '![A SCREENSHOT OF CONTROLLING PROJECT #42 ON A WINDOWS PC](../images/fig14-13.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![在 Windows PC 上控制项目 #42 的截图](../images/fig14-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-13: Controlling Project
    #42 from a PC</samp>'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-13：从 PC 控制项目 #42</samp>'
- en: 'Let’s see how this works:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The software serial port for the Bluetooth module is first set up ❶. The custom
    function <samp class="SANS_TheSansMonoCd_W5Regular_11">sendHelp()</samp> sends
    out the instructions when the user sends a question mark to the Arduino. The sketch
    sets the digital output pins for D13 to D8 to outputs ❷ and starts the software
    serial connection ❸. It also declares the character variable used to store the
    incoming command from Bluetooth ❹.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝牙模块的软件串口首先进行设置 ❶。自定义函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">sendHelp()</samp>
    在用户发送问号给 Arduino 时发送指令。草图设置了 D13 到 D8 的数字输出引脚为输出 ❷，并启动软件串口连接 ❸。它还声明了一个字符变量，用于存储从蓝牙接收到的命令
    ❹。
- en: When a character is received from the Bluetooth module, it’s stored into the
    character variable <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> ❺; a
    series of <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> functions then
    convert the character into the required actions. Along with turning digital pins
    on or off, a message is sent out to confirm that the command has taken place.
    If the Arduino receives a question mark, the sketch calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">sendHelp()</samp>
    function ❻, which tells the user how to operate the project.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当从蓝牙模块接收到一个字符时，它会被存储到字符变量 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    中 ❺；一系列的 <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> 函数将字符转换为所需的操作。除了打开或关闭数字引脚，还会发送一条消息确认命令已执行。如果
    Arduino 收到一个问号，草图会调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">sendHelp()</samp>
    函数 ❻，该函数告诉用户如何操作项目。
- en: 'You can use this project’s remote-control framework in your own future work
    to keep controls out of the public view, by using Bluetooth on an Android phone
    or a computer rather than a control panel. You can also modify this project to
    control the relay board described in Project #26 in [Chapter 8](chapter8.xhtml).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以在自己未来的工作中使用本项目的远程控制框架，通过使用 Android 手机或计算机上的蓝牙而不是控制面板，将控制保持在公众视野之外。你还可以修改本项目，以控制
    [第8章](chapter8.xhtml) 中描述的继电器板，具体见项目 #26。'
- en: You’ll now make your own smartphone app to control this project to make it more
    user-friendly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将创建自己的智能手机应用来控制这个项目，以提高其用户友好性。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #43: Using an Android App
    for Bluetooth Control</samp>'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #43：使用 Android 应用进行蓝牙控制</samp>'
- en: 'Controlling the Arduino digital outputs with the terminal app on an Android
    device is simple enough for you, the creator. When others need to control the
    output, however, a custom Android smartphone app is preferable, as it insulates
    the end user from any chances of incorrect usage. Instead of writing the code
    for such an app from scratch, in this project I’ll show you how to create your
    own Android app to control the hardware in Project #42 using the free MIT App
    Inventor, an online service provided by Google and the Massachusetts Institute
    of Technology.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '用 Android 设备上的终端应用控制 Arduino 的数字输出对你来说很简单，作为创建者。然而，当其他人需要控制输出时，定制的 Android
    智能手机应用更为理想，因为它可以防止最终用户发生误操作。为了避免从零开始编写这样的应用代码，在本项目中，我将向你展示如何使用免费的 MIT App Inventor
    —— 由 Google 和麻省理工学院提供的在线服务 —— 创建你自己的 Android 应用来控制项目 #42 中的硬件。'
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*You can use the MIT App Inventor website on Windows, macOS, or Linux, but
    the resulting app will run only on an Android device.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在 Windows、macOS 或 Linux 上使用 MIT App Inventor 网站，但生成的应用仅能在 Android 设备上运行。*'
- en: '[Figure 14-14](chapter14.xhtml#fig14-14) shows what your complete app interface
    will look like, showing buttons to connect the Android phone or tablet to the
    project via Bluetooth and then turn the Arduino digital outputs D8 to D11 on or
    off.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[图14-14](chapter14.xhtml#fig14-14)显示了完整应用界面的样式，展示了连接 Android 手机或平板电脑到项目的蓝牙按钮，并且可以打开或关闭
    Arduino 的 D8 到 D11 的数字输出。'
- en: '![A SCREENSHOT OF PROJECT #43 IN THE ANDROID APP](../images/fig14-14.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #43 在 Android 应用中的截图](../images/fig14-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-14: The completed
    Android App to control Project #42</samp>'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-14：完成的 Android 应用，控制项目
    #42</samp>'
- en: The process of building your own app involves two main stages. The first revolves
    around the design of the app, such as location of buttons and text on the display.
    The second stage involves determining what actions the app takes in response to
    user input or interactions with the hardware. With the MIT App Inventor, each
    stage involves a drag-and-drop process of moving items into place to build the
    app interface and operational instructions. I’ll show you how to navigate the
    process to create your app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自己的应用程序过程分为两个主要阶段。第一阶段涉及应用程序的设计，例如按钮和文本在显示屏上的位置。第二阶段则是确定应用程序在响应用户输入或与硬件交互时执行的操作。使用MIT
    App Inventor，每个阶段都包括将项目拖放到适当位置以构建应用界面和操作指令的过程。我将向你展示如何导航这个过程来创建你的应用。
- en: 'The hardware for this project is identical to that in Project #42\. Once you
    have set up the circuit for that project, visit the MIT App Inventor website at
    [*https://<wbr>appinventor<wbr>.mit<wbr>.edu*](https://appinventor.mit.edu). Click
    the **Create Apps** button at the top of the home page. A new window should appear
    and ask you to log in with a Google account. You will need to create a Google
    account if you don’t have one.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的硬件与项目#42相同。设置完该项目的电路后，请访问MIT App Inventor网站：[*https://<wbr>appinventor<wbr>.mit<wbr>.edu*](https://appinventor.mit.edu)。点击首页顶部的**创建应用**按钮。一个新窗口应该会弹出，要求你使用Google账户登录。如果没有Google账户，你需要先创建一个。
- en: Once you’ve logged in and agreed to the terms of service, a welcome screen should
    appear. Click **Start a Blank Project** and enter a project name when prompted.
    I’ve named mine Project42, but you can choose whatever name you like. This will
    also be the name of the app when you later download it to your Android device.
    Note that you can save and load your progress as with any other editor using the
    Projects menu at the top of the screen.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦登录并同意服务条款后，欢迎屏幕应该会出现。点击**开始一个空白项目**并在提示时输入项目名称。我把它命名为Project42，但你可以选择任何你喜欢的名字。这也将是你稍后下载到Android设备上的应用名称。请注意，你可以像使用其他编辑器一样，通过屏幕顶部的“项目”菜单保存和加载进度。
- en: Your screen should now look like the one in [Figure 14-15](chapter14.xhtml#fig14-15),
    with a blank phone screen and various menus.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的屏幕应该像[图14-15](chapter14.xhtml#fig14-15)中的那样，显示一个空白的手机屏幕和各种菜单。
- en: '![A SCREENSHOT OF THE MIT APP INVENTOR WEBSITE](../images/fig14-15.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![MIT App Inventor网站截图](../images/fig14-15.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-15: The Android app
    to control Project #42</samp>'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-15：控制项目#42的Android应用</samp>
- en: You’ll start building the interface from top to bottom, beginning with the header
    text. On the left of the display is the Palette. Click **User Interface**, which
    reveals various interface options. Place the mouse pointer over **Label**, and
    then click and drag it into the display of the phone, as shown in [Figure 14-16](chapter14.xhtml#fig14-16).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从上到下开始构建界面，从标题文本开始。显示屏的左侧是调色板。点击**用户界面**，它会显示各种界面选项。将鼠标指针悬停在**标签**上，然后点击并将其拖动到手机显示屏中，如[图14-16](chapter14.xhtml#fig14-16)所示。
- en: '![A SCREENSHOT OF ADDING THE APP LABEL IN APP INVENTOR](../images/fig14-16.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中添加应用标签的截图](../images/fig14-16.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-16: Building a label</samp>'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-16：构建标签</samp>
- en: To edit the label, click the **Label1** entry in the Components windows to the
    right of the phone. This should allow you to edit the properties of the label
    using the Properties window on the right side of the screen, shown in [Figure
    14-17](chapter14.xhtml#fig14-17).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑标签，点击手机右侧组件窗口中的**Label1**条目。这将允许你使用屏幕右侧的属性窗口编辑标签的属性，如[图14-17](chapter14.xhtml#fig14-17)所示。
- en: '![A SCREENSHOT OF THE LABEL PROPERTIES WINDOW IN APP INVENTOR](../images/fig14-17.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![MIT App Inventor中的标签属性窗口截图](../images/fig14-17.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-17: The label properties</samp>'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-17：标签属性</samp>
- en: Turn on **FontBold**, set the size to **28**, and enter **Bluetooth GPIO Control**
    into the text field. These changes should take place immediately and be reflected
    in the phone display in the center of the screen, as shown in [Figure 14-18](chapter14.xhtml#fig14-18).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**FontBold**，将字体大小设置为**28**，并在文本框中输入**Bluetooth GPIO Control**。这些更改应该立即生效，并反映在屏幕中央的手机显示中，如[图14-18](chapter14.xhtml#fig14-18)所示。
- en: '![A SCREENSHOT OF THE COMPLETED APP LABEL IN APP INVENTOR](../images/fig14-18.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中完成的应用标签的截图](../images/fig14-18.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-18: The completed
    label</samp>'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-18：完成的标签</samp>
- en: Notice that when you add an item to the phone display, it appears in the Components
    list on the right. Clicking that item in the list allows you to edit its properties
    in the Properties box on the far right. You’ll use this feature in a moment.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你向手机显示屏中添加一个项目时，它会出现在右侧的组件列表中。点击该列表中的项目，你可以在最右侧的属性框中编辑其属性。稍后你会用到这个功能。
- en: Next, you’ll start adding the buttons to the app. The first button will activate
    the Bluetooth connection menu on the phone. To add this button, click and drag
    **ListPicker** from the User Interface list on the left of the web page into the
    phone display. Then click **ListPicker** in the Components list and edit the properties
    to the right. Change the text field to **Connect to BT**. Your button should now
    resemble that shown in [Figure 14-19](chapter14.xhtml#fig14-19).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将开始将按钮添加到应用程序中。第一个按钮将激活手机上的蓝牙连接菜单。为了添加这个按钮，从网页左侧的用户界面列表中点击并拖动**ListPicker**到手机显示屏中。然后点击组件列表中的**ListPicker**，并在右侧编辑其属性。将文本字段更改为**Connect
    to BT**。此时你的按钮应该与[图14-19](chapter14.xhtml#fig14-19)中显示的按钮类似。
- en: '![A SCREENSHOT OF ADDING THE BUTTON TO THE APP IN APP INVENTOR](../images/fig14-19.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中添加按钮的截图](../images/fig14-19.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-19: The completed
    button</samp>'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-19：完成的按钮</samp>
- en: Now it’s time to ensure everything is centered in the display. Click **Screen1**
    in the Components list and change the AlignHorizontal setting to **Center**. The
    items on the display should now be aligned in the center, as shown in [Figure
    14-20](chapter14.xhtml#fig14-20).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候确保所有内容在显示屏中居中。点击组件列表中的**Screen1**，并将AlignHorizontal设置更改为**Center**。显示屏上的项目现在应该已经居中对齐，如[图14-20](chapter14.xhtml#fig14-20)所示。
- en: '![A SCREENSHOT OF THE CENTERED BUTTON IN APP INVENTOR](../images/fig14-20.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中居中按钮的截图](../images/fig14-20.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-20: The items are
    now centered.</samp>'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-20：项目现在居中显示。</samp>
- en: Next, you’ll create a table of eight buttons, one to turn on and off each of
    the four digital output pins. Click the **Layout** list in the Palette and then
    drag **TableArrangement** into the display. This should leave a box below the
    connect button, as shown in [Figure 14-21](chapter14.xhtml#fig14-21). Also change
    the number of rows in the TableArrangement properties to four.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将创建一个由八个按钮组成的表格，每个按钮控制一个数字输出引脚的开关。点击调色板中的**Layout**列表，然后将**TableArrangement**拖动到显示屏中。这将在连接按钮下方留下一个框，如[图14-21](chapter14.xhtml#fig14-21)所示。同时将TableArrangement属性中的行数改为四。
- en: '![A SCREENSHOT OF ADDING A TABLE TO THE APP IN APP INVENTOR](../images/fig14-21.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中添加表格的截图](../images/fig14-21.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-21: The table has
    been inserted.</samp>'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-21：表格已经插入。</samp>
- en: 'Now for the buttons: click and drag eight buttons from the User Interface list
    on the left into the gray table in the phone display. Thanks to TableArrangement,
    you can easily arrange them in four rows of two columns, as shown in [Figure 14-22](chapter14.xhtml#fig14-22).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来处理按钮：从左侧的用户界面列表中点击并拖动八个按钮到手机显示屏中的灰色表格中。借助TableArrangement，你可以轻松地将它们排列成四行两列，如[图14-22](chapter14.xhtml#fig14-22)所示。
- en: '![A SCREENSHOT OF ADDING BUTTONS TO THE APP IN APP INVENTOR](../images/fig14-22.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中添加按钮的截图](../images/fig14-22.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-22: Working with
    the buttons</samp>'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-22：正在操作按钮</samp>
- en: Click **Button2** in the Components list and change the text to **D8 On**. Work
    through each of the other seven buttons, changing their text properties, until
    they match the buttons in [Figure 14-23](chapter14.xhtml#fig14-23).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 点击组件列表中的**Button2**，并将文本更改为**D8 On**。逐个修改其他七个按钮的文本属性，直到它们与[图14-23](chapter14.xhtml#fig14-23)中的按钮一致。
- en: '![A SCREENSHOT OF THE COMPLETED BUTTONS IN APP INVENTOR](../images/fig14-23.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![在App Inventor中完成的按钮截图](../images/fig14-23.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-23: The buttons are
    now complete.</samp>'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-23：按钮已经完成。</samp>
- en: 'To make the buttons easier to work with in the later steps of app development,
    rename the buttons in the Components window: click each button in turn, click
    **Rename**, and change the name of the button to its function. For example, change
    the name of Button2 to **D8 On**, as shown in [Figure 14-24](chapter14.xhtml#fig14-24).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使按钮在后续的应用开发步骤中更易于操作，请在组件窗口中重命名按钮：依次点击每个按钮，点击 **重命名**，并将按钮的名称更改为其功能。例如，将 Button2
    的名称更改为 **D8 On**，如[图 14-24](chapter14.xhtml#fig14-24)所示。
- en: '![A SCREENSHOT OF EDITING THE BUTTON REFERENCES IN APP INVENTOR](../images/fig14-24.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![在 App Inventor 中编辑按钮引用的截图](../images/fig14-24.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-24: Editing the button
    references</samp>'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-24：编辑按钮引用</samp>
- en: Next, we need to add a reference to Bluetooth. This is a virtual link between
    the app and the phone’s Bluetooth hardware. Click the **Connectivity** tab in
    the Palette, drag **BluetoothClient** into the main window, and place it on top
    of the phone. The Bluetooth icon should appear below the phone, as shown in [Figure
    14-25](chapter14.xhtml#fig14-25).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加蓝牙引用。这是应用和手机蓝牙硬件之间的虚拟链接。在调色板中点击 **连接性** 标签，将 **BluetoothClient** 拖动到主窗口，并将其放置在手机上方。蓝牙图标应出现在手机下方，如[图
    14-25](chapter14.xhtml#fig14-25)所示。
- en: '![A SCREENSHOT OF ADDING THE BLUETOOTH LINK TO THE APP IN APP INVENTOR](../images/fig14-25.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![在 App Inventor 中将蓝牙链接添加到应用的截图](../images/fig14-25.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-25: Bluetooth added
    to the app design</samp>'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-25：蓝牙已添加到应用设计中</samp>
- en: Finally, you can edit the text in the top line of the app or remove it by editing
    the Screen1 item in the Components menu. To change the name of the app to something
    more useful or interesting to your needs, edit the title field that appears at
    the bottom of the Properties window, or uncheck the **TitleVisible** box if you
    don’t want to show the app’s title.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过编辑组件菜单中的 Screen1 项来编辑应用顶部的文本，或者删除它。要将应用名称更改为更有用或更有趣的名称，请编辑属性窗口底部出现的标题字段，或者如果不想显示应用的标题，请取消选中
    **TitleVisible** 选项框。
- en: 'At this point, you’ve created the app design and interface in the Designer
    window. You’ll now begin the second stage of the app design: determining what
    actions the app will take upon user interaction. Start by clicking the **Blocks**
    button at the top right of the display, as shown in [Figure 14-26](chapter14.xhtml#fig14-26).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经在设计器窗口中创建了应用的设计和界面。现在，你将开始应用设计的第二阶段：确定应用在用户交互时将执行的操作。首先，点击显示界面右上角的
    **块** 按钮，如[图 14-26](chapter14.xhtml#fig14-26)所示。
- en: '![A SCREENSHOT OF SWITCHING TO THE BLOCKS EDITOR PAGE IN APP INVENTOR](../images/fig14-26.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![切换到 App Inventor 中的块编辑器页面截图](../images/fig14-26.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-26: Switching to
    the Blocks editor</samp>'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-26：切换到块编辑器</samp>
- en: In MIT App Inventor, the Designer screen is used to build the user interface
    of your app and the Blocks page is used to build the code that defines how the
    app works. Instead of writing code, you can use the Blocks editor page to drag
    and drop various “blocks” together to form sequences of instructions or activates
    based on user input. Each block represents a type of instruction, a function,
    or an activity. You can move between the two design screens by alternating between
    the **Designer** and **Blocks** buttons.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MIT App Inventor 中，设计器界面用于构建应用的用户界面，而块页面则用于构建定义应用工作方式的代码。你可以使用块编辑器页面，通过拖放各种“块”来形成指令序列或基于用户输入的活动，而不需要编写代码。每个块代表一种指令类型、一个函数或一项活动。你可以通过在
    **设计器** 和 **块** 按钮之间切换，来在这两个设计界面之间移动。
- en: I’ll now show you how to create the required block structure to enable app operation.
    In the Blocks editor page, click **ListPicker1** in the Blocks menu. A list of
    blocks will appear, some of which are shown in [Figure 14-27](chapter14.xhtml#fig14-27).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将向你展示如何创建所需的块结构，以实现应用的操作。在块编辑器页面中，点击 **ListPicker1**，在块菜单中将出现一系列块，其中一些会在[图
    14-27](chapter14.xhtml#fig14-27)中显示。
- en: '![A SCREENSHOT OF VARIOUS CONTROL BLOCKS IN APP INVENTOR](../images/fig14-27.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![App Inventor 中各种控制块的截图](../images/fig14-27.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-27: Various blocks</samp>'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 14-27：各种代码块</samp>
- en: Drag and drop the **when ListPicker1 BeforePicking** block from the **Blocks**
    menu on the left into the Viewer window. Once again, click **ListPicker1** in
    the Blocks menu and then drag and drop a **set ListPicker1 elements to** block
    into the **when** block from the previous step. It should click into the **when**
    block.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧的**Blocks**菜单中拖放**when ListPicker1 BeforePicking**块到查看窗口。再次点击Blocks菜单中的**ListPicker1**，然后将**set
    ListPicker1 elements to**块拖放到前一步中的**when**块中。它应该会点击到**when**块中。
- en: To delete an unwanted block during this process, simply drag it over the garbage
    can at the bottom right of the Viewer window.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，若要删除不需要的块，只需将其拖动到查看窗口右下角的垃圾桶图标上。
- en: Next, click the **BluetoothClient1** item in the Blocks menu and drag the **BluetoothClient1
    AddressesAndNames** item so it clicks into the last added item.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击Blocks菜单中的**BluetoothClient1**项目，并将**BluetoothClient1 AddressesAndNames**项目拖到并点击到最后添加的项目。
- en: You now need to create the set of instructions to connect to the selected Bluetooth
    device as selected by the user. Assemble the blocks together. You can find the
    **if then** block in the Control section of the Blocks menu.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在需要创建一组指令来连接到用户所选的蓝牙设备。将块拼接在一起，你可以在Blocks菜单中的Control部分找到**if then**块。
- en: 'Now you need to configure the operations for each of the eight control buttons.
    To mirror the way Project #42 controlled the LEDs, you want the app to send a
    0 through 3 to turn on D8 to D11, respectively, and send a 4 through 7 to turn
    them off. Click the **D8** button in the TableArrangement1 list in the Blocks
    menu and then drag and drop a **when D8_On.click** block into the viewer window.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要为每个按钮配置操作。为了与项目#42控制LED的方式一致，你希望应用程序发送0到3来依次打开D8到D11，并发送4到7来关闭它们。点击**D8**按钮，在Blocks菜单中的TableArrangement1列表里，然后将**when
    D8_On.click**块拖放到查看窗口中。
- en: Drag and drop **call BluetoothClient1\. SendText text** block from the BluetoothClient1
    list into the **when** block.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从BluetoothClient1列表中拖放**call BluetoothClient1.SendText text**块到**when**块中。
- en: To complete the button action group, click the **Math** item in the Blocks menu
    and drag the first block (which just holds a 0) into the notch to the right of
    the word **text**.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成按钮操作组，点击Blocks菜单中的**Math**项目，然后将第一个块（仅包含一个0）拖入**text**旁边的凹槽中。
- en: This group of blocks will activate when the user presses the button D8 On; this
    will send the text character 0 out via Bluetooth.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这一组块会在用户按下按钮D8时激活；这将通过蓝牙发送文本字符0。
- en: You’ll need to create another seven of these groups so that you end up with
    eight in total to match the buttons. To save time, you can right-click over the
    first block in a group and select **Duplicate** to repeat the group you’re editing.
    The other groups must refer to different buttons. Click the **D8_ON** and a list
    of all the available buttons should drop down, as shown in [Figure 14-28](chapter14.xhtml#fig14-28).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要创建另外七个这样的组，确保总共创建八个，以匹配按钮。为了节省时间，你可以右键点击一个组中的第一个块并选择**Duplicate**来重复你正在编辑的组。其他组必须引用不同的按钮。点击**D8_ON**，应该会显示所有可用按钮的下拉列表，如[图14-28](chapter14.xhtml#fig14-28)所示。
- en: '![A SCREENSHOT OF ADDING A DIGITAL PIN REFERENCE TO CONTROL THE BLOCK IN APP
    INVENTOR](../images/fig14-28.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![将数字引脚参考添加到App Inventor中控制块的截图](../images/fig14-28.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-28: The button group
    selection</samp>'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-28：按钮组选择</samp>
- en: Ensure you have changed this setting in each of the eight button groups to match
    the eight buttons and then change the value of the text character being sent for
    the rest of the buttons. That is, pressing D8 off should send 4, D9 on should
    send 1, and so on. You can just click over the 0 in each group and enter a new
    value. When you’ve finished, your screen should resemble that shown in [Figure
    14-29](chapter14.xhtml#fig14-29).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已在每个八个按钮组中更改了设置，使其与八个按钮匹配，并随后更改其发送的文本字符的值。也就是说，按下D8关闭时应发送4，按下D9开启时应发送1，依此类推。你只需点击每个组中的0并输入新的值。完成后，你的屏幕应与[图14-29](chapter14.xhtml#fig14-29)中显示的内容相似。
- en: '![A SCREENSHOT OF THE COMPLETED BUTTON CONTROL BLOCKS IN APP INVENTOR](../images/fig14-29.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![完成的按钮控制块在App Inventor中的截图](../images/fig14-29.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-29: The completed
    control block groups</samp>'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-29：完成的控制块组</samp>
- en: Your app is now complete and ready for installation on your Android phone or
    tablet. Save your project using the Projects menu (in case you want to alter it
    later) and then select **Android App (.apk)** in the Build menu. The App Inventor
    should compile the instructions and, after a minute or two, present you with a
    download button and QR code, as shown in [Figure 14-30](chapter14.xhtml#fig14-30).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用现在已完成，并准备安装到Android手机或平板上。使用项目菜单保存您的项目（以防以后需要更改），然后在构建菜单中选择**Android应用（.apk）**。App
    Inventor将编译指令，经过一两分钟后，提供下载按钮和二维码，如[图14-30](chapter14.xhtml#fig14-30)所示。
- en: '![A SCREENSHOT OF THE APP DOWNLOAD PAGE IN APP INVENTOR](../images/fig14-30.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![应用下载页面的截图](../images/fig14-30.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-30: Download your
    app!</samp>'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-30：下载您的应用！</samp>
- en: You can then download and save the app’s *.apk* file to load it onto your device
    or just scan the QR code with your device’s camera. When prompted, visit the URL
    decoded from the image and go through the download and installation prompts. Click
    **Yes** or **Agree** to any dialogs that Android may produce.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以下载并保存应用的*.apk*文件，将其加载到您的设备上，或者直接使用设备的摄像头扫描二维码。出现提示时，访问从图像中解码的URL并按照下载和安装提示操作。点击**是**或**同意**，接受Android可能弹出的任何对话框。
- en: At long last, your app should pop up. Drag it onto the home screen, as shown
    in [Figure 14-31](chapter14.xhtml#fig14-31).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您的应用应该会弹出。将其拖到主屏幕上，如[图14-31](chapter14.xhtml#fig14-31)所示。
- en: '![A SCREENSHOT OF THE APP ICON ON AN ANDROID PHONE](../images/fig14-31.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![安卓手机上的应用图标截图](../images/fig14-31.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-31: Your app installed
    on a phone</samp>'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-31：您的应用已安装在手机上</samp>
- en: 'Congratulations! You’ve made an Android app. Now to give it a test: ensure
    you have the Project #42 hardware correctly wired up and then open your app. Turn
    on your device’s Bluetooth function and then touch the app’s **Connect to BT**
    button. You should be presented with a list of paired Bluetooth devices. Select
    the HC-05 listing, and the app should return to the main page.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经制作了一个Android应用。现在进行测试：确保您的第42号项目硬件正确连接，然后打开应用。开启设备的蓝牙功能，点击应用中的**连接到BT**按钮。您应该会看到一份已配对蓝牙设备的列表。选择HC-05设备，应用将返回到主页面。
- en: 'You should now be able to press each button to turn on or off the digital output
    pins on the Arduino, with the LEDs reflecting the Arduino’s status. If the app
    isn’t working, first go back to Project #42 and ensure that the hardware can be
    controlled via the terminal app or a Bluetooth-enabled PC. Failing that, review
    the app setup in the App Inventor. You can also download the AI project file in
    the *Project #43* folder of the downloadable files on the book web page, [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians).'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够按下每个按钮来打开或关闭Arduino上的数字输出引脚，LED灯将反映Arduino的状态。如果应用无法正常工作，首先返回第42号项目，确保硬件可以通过终端应用或支持蓝牙的PC控制。如果还是不行，检查App
    Inventor中的应用设置。您还可以在书籍网页上的可下载文件中，下载*项目#43*文件夹中的AI项目文件，[*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians)。
- en: This simple example demonstrates just one way you can use the Android App Inventor
    to make your own remote-controlled projects with professional user interfaces.
    If you like, spend more time experimenting with App Inventor. I know you’ll come
    up with some interesting use cases of your own.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的示例展示了如何使用Android App Inventor创建具有专业用户界面的远程控制项目。如果您愿意，可以花更多时间在App Inventor上进行实验。我相信您会自己想出一些有趣的使用案例。
- en: Let’s learn one more way to keep your projects user-friendly by making some
    modifications to the Bluetooth module.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过修改蓝牙模块学习另一种保持项目用户友好的方式。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Updating the Module Name and PIN</samp>
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">更新模块名称和PIN</samp>
- en: Now that you’ve built an Android app, the final step is to update the module’s
    name and PIN/password for additional security, as every unit generally ships from
    the factory with a PIN of 1234\. To do so, you must change the module’s operation
    mode to AT command mode, allowing you to send AT commands to update and review
    various parameters (in the same way you would with a cellular shield for Arduino).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经构建了一个 Android 应用，最后一步是更新模块的名称和 PIN/密码以增强安全性，因为每个设备通常从工厂出厂时 PIN 为 1234。为了实现这一点，你必须将模块的操作模式更改为
    AT 命令模式，这样你就可以发送 AT 命令来更新和查看各种参数（就像你在 Arduino 的蜂窝模块上所做的那样）。
- en: To switch to AT command mode, wire up the module to your Arduino as shown in
    [Figure 14-3](chapter14.xhtml#fig14-3) and then add the connection from 3.3 V
    to the Bluetooth module’s EN pin. This extra connection is required only when
    altering the parameters—remove or disconnect the connection for normal use.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换到 AT 命令模式，将模块按 [图 14-3](chapter14.xhtml#fig14-3) 所示连接到 Arduino，然后将 3.3 V
    接到蓝牙模块的 EN 引脚。此额外连接仅在修改参数时需要——正常使用时，请移除或断开此连接。
- en: Next, enter and upload the sketch in [Listing 14-2](#LiT-14-2), which enables
    communication between the Arduino Serial Monitor and the Bluetooth module.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入并上传 [Listing 14-2](#LiT-14-2) 中的代码，它可以实现 Arduino 串口监视器与蓝牙模块之间的通信。
- en: '[PRE3]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 14-2: Configuring the
    HC-05 Bluetooth module</samp>'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 14-2: 配置 HC-05 蓝牙模块</samp>'
- en: This sketch first sets up a serial connection between the Arduino and your Bluetooth
    module ❶. The serial speed for the Bluetooth module in AT mode is set at 38,400
    baud ❷. The serial connection between your PC and the Arduino stays at 9,600 baud
    ❸. The module’s LED should blink slowly to indicate that AT command mode is operating.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先建立了 Arduino 和蓝牙模块之间的串口连接 ❶。蓝牙模块在 AT 模式下的串口速度设置为 38,400 波特率 ❷。PC 与 Arduino
    之间的串口连接保持在 9,600 波特率 ❸。模块的 LED 应该缓慢闪烁，表示 AT 命令模式正在工作。
- en: Open the Serial Monitor and ensure that both NL (for “new line”) and CR (for
    “carriage return”) are selected in the menu next to the speed. Enter **AT** and
    press **Send**. The Bluetooth module should reply <samp class="SANS_TheSansMonoCd_W5Regular_11">OK</samp>
    in the Serial Monitor. If it doesn’t, double-check your wiring and that the LED
    is blinking slowly.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 打开串口监视器，并确保在速度旁边的菜单中选择了 NL（表示“新行”）和 CR（表示“回车”）。输入 **AT** 并按 **发送**。蓝牙模块应在串口监视器中回复
    <samp class="SANS_TheSansMonoCd_W5Regular_11">OK</samp>。如果没有回复，请仔细检查线路连接，并确保 LED
    正在缓慢闪烁。
- en: Just like network devices, each Bluetooth module has a unique media access control
    (MAC) address. Send <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+ADDR?</samp>
    in the Serial Monitor, which should return your module’s MAC address.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 就像网络设备一样，每个蓝牙模块都有一个唯一的媒体访问控制（MAC）地址。在串口监视器中发送 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+ADDR?</samp>，它应返回模块的
    MAC 地址。
- en: My unit returned a MAC address of 00:21:06:08:30:BF. To change the four-digit
    pairing PIN, send <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+PSWD</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=</samp><samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">xxxx</samp>,
    where <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">xxxx</samp> is the new
    four-digit PIN, such as 8675, for example. You can then test the new PIN by forgetting
    the device in the Bluetooth menu and then searching for it again.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我的设备返回的 MAC 地址是 00:21:06:08:30:BF。要更改四位数的配对 PIN，发送 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+PSWD</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=</samp><samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">xxxx</samp>，其中
    <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">xxxx</samp> 是新的四位 PIN，例如 8675。然后，你可以通过在蓝牙菜单中忘记该设备并重新搜索它来测试新的
    PIN。
- en: To change the Bluetooth’s name from HC-05 to something more descriptive, send
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+NAME</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">NewName</samp>, where <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">NewName</samp>
    is the name you’d like the module to transmit when in operation. For example,
    if you were building a project that used a relay to operate a relay in your garage,
    you might change its name to GarageRelay by sending <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+NAME</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=GarageRelay</samp>. The new name
    should show up on your device’s Bluetooth screen when pairing, as shown in [Figure
    14-32](chapter14.xhtml#fig14-32).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要将蓝牙名称从 HC-05 更改为更具描述性的名称，请发送 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+NAME</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=</samp><samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">NewName</samp>，其中
    <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">NewName</samp> 是您希望模块在操作时传输的名称。例如，如果您正在构建一个使用继电器在车库中操作设备的项目，您可以通过发送
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT+NAME</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">=GarageRelay</samp>
    将其名称更改为 GarageRelay。新名称应该会在配对时出现在设备的蓝牙屏幕上，如[图14-32](chapter14.xhtml#fig14-32)所示。
- en: '![A SCREENSHOT OF THE BLUETOOTH MODULE WITH THE CHANGED NAME IN AN ANDROID
    PHONE](../images/fig14-32.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![安卓手机中更改名称的蓝牙模块截图](../images/fig14-32.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 14-32: Results of changing
    the module name</samp>'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图14-32：更改模块名称的结果</samp>
- en: Changing the module’s name can be useful when working with several Bluetooth-equipped
    projects in the same area, allowing you to easily keep track of which devices
    you’d like to pair with. If you’d ever like to reset the module’s name and pin
    back to HC-05 and 1234, send <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT +
    ORGL</samp> to reset the unit to factory default. You might do this if your project
    was temporary or if you’re passing the module on to another person.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当在同一地区处理多个蓝牙设备项目时，更改模块名称非常有用，这样可以轻松地跟踪您希望配对的设备。如果您希望将模块的名称和 PIN 重置为 HC-05 和
    1234，请发送 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">AT + ORGL</samp> 来恢复出厂默认设置。您可能会在项目临时使用或者将模块转交给他人时执行此操作。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: In this chapter, you learned several ways to use serial Bluetooth modules with
    your Arduino projects. You can now use Bluetooth for wireless remote control,
    capturing data from an Arduino to a computer via Bluetooth and building your own
    remote-control apps for Android devices. In the future, you can use these skills
    in plenty of applications, such as remote-control relay boards, logging data from
    sensors in hard-to-reach places, or building customized remote-control Christmas
    lights.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了几种将串行蓝牙模块与 Arduino 项目结合使用的方法。您现在可以使用蓝牙进行无线遥控，捕获 Arduino 数据并通过蓝牙传输到计算机，以及为
    Android 设备构建自己的遥控应用程序。在未来，您可以将这些技能应用于许多领域，例如遥控继电器板、在难以触及的地方记录传感器数据，或者制作定制的遥控圣诞灯。
- en: In the next chapter, you’ll learn to reduce your Arduino’s power consumption.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何减少 Arduino 的功耗。
