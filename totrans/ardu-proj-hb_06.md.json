["```\n// Code by Warrick A. Smith and reproduced with kind permission\n// http://startingelectronics.com\n\nconst int latchPin = 8;   // Pins connected to shift register\nconst int clockPin = 12;\nconst int dataPin = 11;\nconst int buttonPin = 2;  // Pin connected to switch wire\n// 1 to 6 and DP (decimal point) on 7-segment display\nunsigned char lookup_7seg[] = {0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x80};\n// Shaking die pattern on 7-segment display\nunsigned char shake_dice[] = {0x63, 0x5C};\n// Rolling die on 7-segment display\nunsigned char roll_dice[] = {0x1C, 0x58, 0x54, 0x4C};\n// Vary duration of time before die number is received\nint rand_seed;\nint rand_num = 0;                // Generate random number\nunsigned char shake_toggle = 0;  // For shaking dice animation\nint index = 0;                   // For rolling dice animation\nint shake_speed;                 // Accelerates dice shake speed\n\nvoid setup() {\n  pinMode(latchPin, OUTPUT);     // Output pins for controlling the\n                                 // shift register\n  pinMode(clockPin, OUTPUT);\n  pinMode(dataPin, OUTPUT);\n  pinMode(buttonPin, INPUT);     // Read switch wire state\n  digitalWrite(latchPin, LOW);   // Display DP on 7-segment display\n                                 // at startup\n  shiftOut(dataPin, clockPin, MSBFIRST, lookup_7seg[6]);\n  digitalWrite(latchPin, HIGH);\n  randomSeed(analogRead(0));     // Generate random seed\n}\n\nvoid loop() {\n  if (digitalRead(buttonPin)) {\n    shake_speed = 150; // Reset die shaking speed\n    delay(30);\n    // Generate number for random speed and show shaking animation\n    while (digitalRead(buttonPin)) {\n      rand_seed++;      // Generate random number\n      // Animate shaking die\n      if (shake_toggle) {\n        AnimateDice(0, shake_dice);\n        shake_toggle = 0;\n      }\n      else {\n        AnimateDice(1, shake_dice);\n        shake_toggle = 1;\n      }\n      delay(80 + shake_speed);  // Accelerate animation speed\n      if (shake_speed > 0) {\n        shake_speed -= 10;\n      }\n    }\n    // Animate rolling die\n    for (int rolls = 0; rolls < (rand_seed % 10 + 14); rolls++) {\n      AnimateDice(index, roll_dice);\n      delay((1 + rolls) * 20);\n      index++;\n      if (index > 3) {\n        index = 0;\n      }\n    }\n    rand_num = random(0, 6);  // Generate number thrown on die\n    DiceNumber(rand_num);\n  }\n}\n\n// Display the die number on 7-segment display\nvoid DiceNumber(unsigned char num) {\n  digitalWrite(latchPin, LOW);\n  shiftOut(dataPin, clockPin, MSBFIRST, lookup_7seg[num]);\n  digitalWrite(latchPin, HIGH);\n}\n\n// Display one frame of the shaking or rolling dice\nvoid AnimateDice(int seg, unsigned char *table) {\n  digitalWrite(latchPin, LOW);\n  shiftOut(dataPin, clockPin, MSBFIRST, table[seg]);\n  digitalWrite(latchPin, HIGH);\n}\n```", "```\n// Ardunaut Arduining.com, reproduced with kind permission\n\n#define FuseTIME      1500   // Duration of fuse current in ms\n#include <SoftwareSerial.h>  // Call the SoftwareSerial library\n\n#define Fuse     7     // Pin connected to fuse (your LED or igniter)\n#define GoButt   6     // Pin connected to Launch button\n#define ArmButt  5     // Pin connected to Arm button\n#define BuzzPin  4     // Pin connected to piezo buzzer\n#define TXdata   3     // Pin connected to RX of display\n#define RXdata   2     // Not used\n#define SetPot   0     // Analog pin connected to potentiometer\n\nSoftwareSerial mySerialPort(RXdata, TXdata);\n\nvoid setup() {\n  pinMode(TXdata, OUTPUT);\n  pinMode(RXdata, INPUT);\n  pinMode(Fuse, OUTPUT);\n  pinMode(ArmButt, INPUT);       // Set Arm button pin to input\n  pinMode(GoButt, INPUT);        // Set Launch button pin to input\n  digitalWrite(Fuse, LOW);       // Open igniter circuit\n  digitalWrite(ArmButt, HIGH);   // Turn on resistor\n  digitalWrite(GoButt, HIGH);    // Turn on resistor\n  mySerialPort.begin(9600);\n  delay(10);                     // Wait for serial display startup\n  mySerialPort.print(\"v\");       // Reset the serial display\n  mySerialPort.print(\"z\");       // Brightness\n  mySerialPort.write(0x40);      // 3/4 intensity\n  mySerialPort.print(\"w\");       // Decimal point control\n  mySerialPort.write(0x10);      // Turn on colon in serial display\n}\n\nint DownCntr;   // Countdown (1/10 seconds)\nint Go = 0;     // Stopped\n\nvoid loop() {\n  if (!digitalRead(GoButt) || !digitalRead(ArmButt)) {\n    Go = 0;   // Abort the countdown\n    tone(BuzzPin, 440, 1500);\n    delay(1500);\n  }\n\n  if (Go == 0) {\n    WaitARM();\n    WaitGO();\n  }\n  ShowTimer();\n  if (DownCntr > 50) {\n    if (DownCntr % 10 == 0)tone(BuzzPin, 1000, 50); // One beep/sec\n  }\n  else if (DownCntr % 2 == 0)tone(BuzzPin, 1000, 50); // Beep faster\n\n  if (DownCntr == 0) {\n    tone(BuzzPin, 440, FuseTIME);  // Launch tone\n    digitalWrite(Fuse, HIGH);      // Close the fuse circuit\n    delay(FuseTIME);\n    digitalWrite(Fuse, LOW);       // Open the fuse circuit\n    Go = 0;\n  }\n  while (millis() % 100);          // Wait 50 ms\n  delay(50);\n  DownCntr--;\n}\n\nvoid WaitGO() {\n  ShowTimer();\n  while (digitalRead(GoButt));\n  Go = 1;\n  delay(20);\n  while (!digitalRead(GoButt)); // Debounce Launch button\n}\n\nvoid ReadTimer() {\n  DownCntr = map(analogRead(SetPot), 0, 1023, 5, 60);\n  DownCntr *= 10;\n}\n\nvoid ShowTimer() {\n  String seconds = String (DownCntr, DEC);\n  while (seconds.length() < 3)seconds = \"0\" + seconds; // Format to\n                                                       // 3 numbers\n  mySerialPort.print(seconds); // Write to serial display\n  mySerialPort.print(\" \");     // Last digit off\n}\n\nvoid WaitARM() {\n  while (digitalRead(ArmButt) == 1) {\n    ReadTimer();\n    delay(50);\n    ReadTimer();\n    ShowTimer();\n    delay(150);\n  }\n\n  Go = 0;\n  ShowTimer();\n  tone(BuzzPin, 2000, 150);\n  delay(200);\n  tone(BuzzPin, 2000, 150);\n  delay(200);\n  tone(BuzzPin, 2000, 150);\n\n  delay(20);\n  while (!digitalRead(ArmButt)); // Debounce Arm button\n}\n```"]