["```\n> git clone https://github.com/bitcoinj/bitcoinj.git ➊\n> cd bitcoinj\n> git checkout cbbb1a2 ➋\n> mvn install ➌\n\n```", "```\nmvn archetype:generate -DgroupId=hellomoney -DartifactId=hello-money\n   -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n\n```", "```\n<dependency>\n  <groupId>com.google</groupId>\n  <artifactId>bitcoinj</artifactId>\n  <version>0.8</version>\n  <scope>compile</scope>\n</dependency>\n\n```", "```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.codehaus.mojo</groupId>\n      <artifactId>exec-maven-plugin</artifactId>\n      <version>1.2.1</version>\n      <configuration>\n        <arguments>\n        </arguments>\n        <mainClass>hellomoney.App</mainClass>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n\n```", "```\n> mvn install ➊\n> mvn exec:java ➋\n\nHello World!\n\n```", "```\npackage hellomoney;\nimport com.google.bitcoin.core.*;\nimport com.google.bitcoin.store.*;\nimport com.google.bitcoin.discovery.DnsDiscovery;\nimport java.io.File;\nimport java.math.BigInteger;\n\npublic class App\n{\n    public static void main( String[] args ) throws BlockStoreException\n    {\n        NetworkParameters params = NetworkParameters.prodNet();\n        Wallet wallet = new Wallet(params);\n        ECKey key = new ECKey();\n        System.out.println(\"Public address: \" +\n            key.toAddress(params).toString());\n        System.out.println(\"Private key: \" +\n            key.getPrivateKeyEncoded(params).toString());\n        wallet.addKey(key);\n        File file = new File(\"my-blockchain\");\n        SPVBlockStore store=new SPVBlockStore(params, file);\n        BlockChain chain = new BlockChain(params, wallet, store);\n        PeerGroup peerGroup = new PeerGroup(params, chain);\n        peerGroup.addPeerDiscovery(new DnsDiscovery(params));\n        peerGroup.addWallet(wallet);\n        peerGroup.start();\n        peerGroup.downloadBlockChain();\n        wallet.addEventListener(new AbstractWalletEventListener()\n            {\n                public void onCoinsReceived(Wallet wallet,\n                      Transaction tx, BigInteger prevBalance,\n                      BigInteger newBalance)\n                {\n                    System.out.println(\"Hello Money! Balance: \"\n                        + newBalance + \" satoshis\");\n                }\n            });\n         while(true){}\n    }\n}\n\n```", "```\npackage hellomoney;\n\n```", "```\nimport com.google.bitcoin.core.*;\nimport com.google.bitcoin.store.*;\nimport com.google.bitcoin.discovery.DnsDiscovery;\nimport java.io.File;\nimport java.math.BigInteger;\n\n```", "```\npublic class App\n{\n    public static void main( String[] args ) throws BlockStoreException\n    {\n\n```", "```\nNetworkParameters params = NetworkParameters.prodNet();➊\nWallet wallet = new Wallet(params);➋\nECKey key = new ECKey();➌\nSystem.out.println(\"Public address: \" +➍\n    key.toAddress(params).toString());\nSystem.out.println(\"Private key: \" +➎\n    key.getPrivateKeyEncoded(params).toString());\nwallet.addKey(key);➏\n\n```", "```\nFile file = new File(\"my-blockchain\");➊\nSPVBlockStore store = new SPVBlockStore(params, file);➋\nBlockChain chain = new BlockChain(params, wallet, store);➌\n\n```", "```\nPeerGroup peerGroup = new PeerGroup(params, chain);➊\npeerGroup.addPeerDiscovery(new DnsDiscovery(params));➋\npeerGroup.addWallet(wallet);➌\npeerGroup.start();➍\npeerGroup.downloadBlockChain();➎\n\n```", "```\nwallet.addEventListener(new AbstractWalletEventListener()➊\n    {\n        public void onCoinsReceived(Wallet wallet, Transaction tx,➋\n           BigInteger prevBalance, BigInteger newBalance)\n        {\n            System.out.println(\"Hello Money! Balance: \"\n                + newBalance + \" satoshis\");\n        }\n    });\n\n```", "```\nwhile(true){}\n\n```", "```\n> mvn install\n> mvn exec:java\n\n```", "```\nPublic address: 16YavT6SmJCuJpZgzRa6XG9WefPEu2M45\nPrivate key: L3eoA1rXiD8kWFUzdxw744NWjoZNB5BGsxhzVas6y5KJgVteZ4uD\nDownloading block chain of size 265184\\. This may take a while.\nChain download 1% done with 262532 blocks to go, block date Feb 1, 2009 5:09:55 PM\nChain download 2% done with 259880 blocks to go, block date Feb 22, 2009 11:32:14 PM\nChain download 3% done with 257228 blocks to go, block date Mar 18, 2009 9:59:38 PM\nChain download 4% done with 254576 blocks to go, block date Apr 11, 2009 4:27:52 PM\nChain download 5% done with 251924 blocks to go, block date May 4, 2009 9:23:54 AM\n...\nDone downloading block chain\n\n```", "```\nHello Money! Balance: 20000 satoshis\n\n```", "```\nmvn archetype:generate -DgroupId=byebyemoney -DartifactId=bye-bye-money\n   -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n\n```", "```\npackage byebyemoney;\n\nimport com.google.bitcoin.core.*;\nimport com.google.bitcoin.store.*;\nimport com.google.bitcoin.discovery.DnsDiscovery;\nimport java.util.concurrent.ExecutionException;\nimport java.io.File;\nimport java.math.BigInteger;\n\npublic class App\n{\n    public static void main( String[] args )\n        throws BlockStoreException, AddressFormatException,\n                    InterruptedException, ExecutionException\n    {\n        NetworkParameters params = NetworkParameters.prodNet();\n        Wallet wallet = new Wallet(params);\n        DumpedPrivateKey key = new DumpedPrivateKey(params,\n               \"L1vJHdDqQ5kcY5q4QoY124zD21UVgFe6NL2835mp8UgG2FNU94Sy\");\n        wallet.addKey(key.getKey());\n        BlockChain chain = new BlockChain(params, wallet,\n               new MemoryBlockStore(params));\n     PeerGroup peerGroup = new PeerGroup(params, chain);\n     peerGroup.addPeerDiscovery(new DnsDiscovery(params));\n     peerGroup.addWallet(wallet);\n     peerGroup.start();\n     peerGroup.downloadBlockChain();\n     BigInteger balance = wallet.getBalance();\n     System.out.println(\"Wallet balance: \" + balance);\n     Address destinationAddress = new Address(params,\n               \"1BTCorgHwCg6u2YSAWKgS17qUad6kHmtQW\");\n     BigInteger fee=BigInteger.valueOf(10000);\n     Wallet.SendRequest req = Wallet.SendRequest.to(\n              destinationAddress,balance.subtract(fee));\n     req.fee = fee;\n     Wallet.SendResult result = wallet.sendCoins(peerGroup, req);\n     if(result != null)\n         {\n             result.broadcastComplete.get();\n             System.out.println(\"The money was sent!\");\n         }\n     else\n         {\n             System.out.println(\"Something went wrong sending the money.\");\n         }\n   }\n}\n\n```", "```\nDumpedPrivateKey key = new DumpedPrivateKey(params,➊\n          \"L1vJHdDqQ5kcY5q4QoY124zD21UVgFe6NL2835mp8UgG2FNU94Sy\");\nwallet.addKey(key.getKey());➋\nBlockChain chain = new BlockChain(params, wallet,➌\n          new MemoryBlockStore(params));\n\n```", "```\nBigInteger balance = wallet.getBalance();➊\nSystem.out.println(\"Wallet balance: \" + balance);➋\nAddress destinationAddress = new Address(params,➌\n     \"1BTCorgHwCg6u2YSAWKgS17qUad6kHmtQW\");\nBigInteger fee = BigInteger.valueOf(10000);➍\nWallet.SendRequest req = Wallet.SendRequest.to(➎\n     destinationAddress,balance.subtract(fee));\nreq.fee = fee;➏\nWallet.SendResult result = wallet.sendCoins(peerGroup, req);➐\n\n```", "```\nresult.broadcastComplete.get();➊\nSystem.out.println(\"The money was sent!\");➋\n\n```", "```\n> mvn install\n> mvn exec:java\n\n```"]