["```\n/*\n * Useless program to demonstrate local variables\n */\n#include <stdio.h>\n\nint global = 5;    // A global variable\n\nint main()\n{\n      int localToProcedure = 3;\n      // ... do something\n      {\n         1 int local = 6; // A local variable\n\n          {\n              int veryLocal = 7;  // An even more local variable\n              // ... do something\n        2 }\n          // veryLocal is no longer valid.\n    3 }\n      // local is no longer valid.\n      return (0);\n  }\n```", "```\n/*\n * Useless program to demonstrate hidden variables\n */\n#include <stdio.h>\n\n1 int var = 7;            // A variable\n\nint main()\n{\n    // ... do something\n    {\n      2 int var = 13;   // Hides var = 7\n\n        {\n          3 int var = 16;     // Hides var = 7, var = 13\n\n            // ... do something\n        }\n        // ... do something\n    }\n    // ... do something\n    return (0);\n}\n```", "```\nvar = 42;\n```", "```\n/**\n * Print hello, hello, hello, world.\n */\n#include <stdio.h>\n\n/**\n * Tell the world hello.\n */\n1 void sayHello(void)\n{\n  2 puts(\"Hello\");\n}\n\nint main()\n{\n  3 sayHello();\n    sayHello();\n    sayHello();\n    puts(\"World!\");\n    return (0);\n}\n```", "```\n/**\n * @brief Program to demonstrate procedures and local variables\n */\n\n/**\n * Function that is called from another function\n */\nvoid inner(void) {\n    int i = 5;     // A variable\n    int k = 3;     // Another variable\n  1 i = i + k;     // Do something with variables\n}\n/**\n * Outer-level function\n */\nvoid outer(void) {\n    int i = 6;     // A variable\n    int j = 2;     // Another variable\n    i = j + i;     // Use variables\n    inner();\n}\n\nint main()\n{\n    outer();\n    return(0);\n}\n```", "```\n/**\n * Compute factorial recursively\n * (the basic recursive example)\n */\n\n#include <stdio.h>\n\n/**\n * Compute factorial\n *\n * @param x The number to compute the factorial of\n * @returns the factorial\n */\nint factor(const int x) {\n    if (x == 1)\n        return (1);\n    return (x * factor(x-1));\n}\n\nint main()\n{\n    int result = factor(5);\n    printf(\"5! is %d\\n\", result);\n    return (0);\n}\n```", "```\n $ **./06.factor-m1**\nSegmentation fault (core dumped)\n```", "```\nint factor(const int x) {\n```", "```\nunsigned int factor(const unsigned int x) {\n```"]