["```\nputs 2+2\n```", "```\n10.times do |n|\n  puts n\nend\n```", "```\n/**\n  compile each node\n\n  self:  InstructionSequence\n  node:  Ruby compiled node\n  poped: This node will be poped\n */\nstatic int\niseq_compile_each(rb_iseq_t *iseq, LINK_ANCHOR *ret, NODE * node,\n                  int poped)\n{\n```", "```\n type = nd_type(node);\n    --*snip*--\n switch (type) {\n```", "```\ncase NODE_CALL:\ncase NODE_FCALL:\ncase NODE_VCALL:{                /* VCALL: variable or call */\n  /*\n    call:  obj.method(...)\n    fcall: func(...)\n    vcall: func\n  */\n```", "```\n    /* receiver */\n    if (type == NODE_CALL) {\n     COMPILE(recv, \"recv\", node->nd_recv);\n    }\n    else if (type == NODE_FCALL || type == NODE_VCALL) {\n     ADD_CALL_RECEIVER(recv, nd_line(node));\n    }\n```", "```\n    /* args */\n    if (nd_type(node) != NODE_VCALL) {\n     argc = setup_args(iseq, args, node->nd_args, &flag);\n    }\n    else {\n     argc = INT2FIX(0);\n    }\n```", "```\nADD_SEND_R(ret, nd_line(node), ID2SYM(mid),\n           argc, parent_block, LONG2FIX(flag));\n```", "```\ncode = <<END\nputs 2+2\nEND\nputs RubyVM::InstructionSequence.compile(code).disasm\n```", "```\n    == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n 0000 trace            1                                               (   1)\n    0002 putself\n    0003 putobject        2\n    0005 putobject        2\n    0007 opt_plus         <callinfo!mid:+, argc:1, ARGS_SKIP>\n    0009 opt_send_simple  <callinfo!mid:puts, argc:1, FCALL|ARGS_SKIP>\n 0011 leave\n```", "```\ncode = <<END\n10.times do |n|\n  puts n\nend\nEND\nputs RubyVM::InstructionSequence.compile(code).disasm\n```", "```\n == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n    == catch table\n    | catch type: break  st: 0002 ed: 0006 sp: 0000 cont: 0006\n    |------------------------------------------------------------------------\n    0000 trace            1                                               (   1)\n    0002 putobject        10\n 0004 send             <callinfo!mid:times, argc:0, block:block in <compiled>>\n    0006 leave\n == disasm: <RubyVM::InstructionSequence:block in <compiled>@<compiled>>=\n    == catch table\n    | catch type: redo   st: 0000 ed: 0011 sp: 0000 cont: 0000\n    | catch type: next   st: 0000 ed: 0011 sp: 0000 cont: 0011\n    |------------------------------------------------------------------------\n    local table (size: 2, argc: 1 [opts: 0, rest: -1, post: 0, block: -1] s3)\n    [ 2] n<Arg>\n    0000 trace            256                                             (   1)\n    0002 trace            1                                               (   2)\n    0004 putself\n    0005 getlocal_OP__WC__0 2\n    0007 opt_send_simple  <callinfo!mid:puts, argc:1, FCALL|ARGS_SKIP>\n    0009 trace            512                                             (   3)\n    0011 leave                                                            (   2)\n```", "```\ndef complex_formula(a, b, *args, c)\n  a + b + args.size + c\nend\n```", "```\ndef add_two_optional(a, b = 5)\n  sum = a+b\nend\n```", "```\nputs add_two_optional(2, 2)\n => 4\n```", "```\nputs add_two_optional(2)\n => 7\n```", "```\ndef add_two_keyword(a, b: 5)\n  sum = a+b\nend\n```", "```\nputs add_two_keyword(2, b: 2)\n => 4\n```", "```\nputs add_two_keyword(2)\n => 7\n```", "```\ncode = <<END\n10.times do |n|\n  puts n\nend\nEND\n\nputs RubyVM::InstructionSequence.compile(code).disasm\n```", "```\n    == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n    == catch table\n    | catch type: break  st: 0002 ed: 0006 sp: 0000 cont: 0006\n    |------------------------------------------------------------------------\n    0000 trace            1                                               (   1)\n    0002 putobject        10\n    0004 send             <callinfo!mid:times, argc:0, block:block in <compiled>>\n    0006 leave\n    == disasm: <RubyVM::InstructionSequence:block in <compiled>@<compiled>>=\n    == catch table\n    | catch type: redo   st: 0000 ed: 0011 sp: 0000 cont: 0000\n    | catch type: next   st: 0000 ed: 0011 sp: 0000 cont: 0011\n    |------------------------------------------------------------------------\n local table (size: 2, argc: 1 [opts: 0, rest: -1, post: 0, block: -1] s3)\n [ 2] n<Arg>\n    0000 trace            256                                             (   1)\n    0002 trace            1                                               (   2)\n    0004 putself\n    0005 getlocal_OP__WC__0 2\n    0007 opt_send_simple  <callinfo!mid:puts, argc:1, FCALL|ARGS_SKIP>\n    0009 trace            512                                             (   3)\n    0011 leave                                                            (   2)\n```", "```\ncode = <<END\ndef complex_formula(a, b, *args, c)\n  a + b + args.size + c\nend\nEND\n\nputs RubyVM::InstructionSequence.compile(code).disasm\n```", "```\n == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n    0000 trace            1                                               (   1)\n    0002 putspecialobject 1\n    0004 putspecialobject 2\n    0006 putobject        :complex_formula\n    0008 putiseq          complex_formula\n 0010 opt_send_simple  <callinfo!mid:core#define_method, argc:3, ARGS_SKIP>\n    0012 leave\n    == disasm: <RubyVM::InstructionSequence:complex_formula@<compiled>>=====\n local table (size: 5, argc: 2 [opts: 0, rest: 2, post: 1, block: -1] s0)\n [ 5] a<Arg>     [ 4] b<Arg>     [ 3] args<Rest> [ 2] c<Post>\n    0000 trace            8                                               (   1)\n    0002 trace            1                                               (   2)\n    0004 getlocal_OP__WC__0 5\n    0006 getlocal_OP__WC__0 4\n    0008 opt_plus         <callinfo!mid:+, argc:1, ARGS_SKIP>\n    0010 getlocal_OP__WC__0 3\n    0012 opt_size         <callinfo!mid:size, argc:0, ARGS_SKIP>\n    0014 opt_plus         <callinfo!mid:+, argc:1, ARGS_SKIP>\n    0016 getlocal_OP__WC__0 2\n    0018 opt_plus         <callinfo!mid:+, argc:1, ARGS_SKIP>\n    0020 trace            16                                              (   3)\n    0022 leave                                                            (   2)\n```"]