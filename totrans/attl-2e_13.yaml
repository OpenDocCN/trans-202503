- en: '13'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MAXIMUM PORTABILITY WITH GNULIB
  prefs: []
  type: TYPE_NORMAL
- en: '*Nothing was ever created by two men. There are no good collaborations, whether
    in art, in music, in poetry, in mathematics, in philosophy. Once the miracle of
    creation has taken place, the group can build and extend it, but the group never
    invents anything.*'
  prefs: []
  type: TYPE_NORMAL
- en: —John Steinbeck, East of Eden
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You know those cool scripting languages you’ve been using for the last 10 years
    or so—Python, PHP, Perl, JavaScript, Ruby, and so on? One of the coolest features
    of these languages, and even some compiled languages like Java, is the ability
    to access community-provided library functionality through the use of tools like
    pip and maven, from repositories like PEAR, RubyGems, CPAN, and Maven Central.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t you wish you could do that sort of thing with C and C++? You can have
    that experience in C with the *GNU Portability Library (Gnulib)*^([1](footnote.xhtml#ch13fn1)),
    with its companion command line tool `gnulib-tool`. Gnulib is a library of source
    code designed to be widely portable, even to platforms like Windows, using both
    native- and Cygwin-based compilation (though Gnulib is tested on Cygwin a little
    more than it is with native Windows builds).
  prefs: []
  type: TYPE_NORMAL
- en: There are literally hundreds of portable utility functions in Gnulib that are
    designed with one goal in mind—portability to many different platforms. This chapter
    is about how to get started with Gnulib and how to use it to your best advantage.
  prefs: []
  type: TYPE_NORMAL
- en: License Caveat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before I continue, I should mention that much of the Gnulib source code is licensed
    under GPLv3+ or LGPLv3+. Some of the Gnulib source code is, however, licensed
    under LGPLv2+, which may make that functionality a bit more palatable. The Gnulib
    functions that can reasonably be used in libraries are licensed under either LGPLv2+
    or LGPLv3+; all else is licensed either under GPLv3+ or under a sort of hybrid
    mix of “LGPLv3+ and GPLv2” (which is ultimately more compatible with GPLv2 than
    LGPLv2). If this bothers you, then you may want to skip this chapter, but before
    discarding Gnulib entirely, consider checking the license on the functionality
    you wish to use to see if your project can accommodate it.
  prefs: []
  type: TYPE_NORMAL
- en: Since Gnulib is distributed in source format, and designed to be incorporated
    into applications and libraries in that format, the use of Gnulib implies the
    incorporation of GPL and LGPL source code directly into your source base. At the
    very least, this means you’ll need to license portions of your code using GPL
    and LGPL licenses. This may explain why Gnulib is not extremely popular, except
    with maintainers of other GNU packages.
  prefs: []
  type: TYPE_NORMAL
- en: If, on the other hand, you’re writing an open source program already licensed
    under the GPL, or an open source library already using the LGPL, then your project
    is a perfect fit for Gnulib. Read on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, Gnulib is distributed in source format. While you can always go
    to the Savannah git repository and browse and download individual files online,
    it’s much simpler to just clone the Gnulib repository to a work area on your local
    host. The Gnulib repository provides the `gnulib-tool` utility in the repository’s
    root directory, which you can use to copy desired source modules, with companion
    Autoconf macros and build scripts, directly into your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gnulib-tool` utility runs as is right from the root of the repository.
    To make it easy to access, create a soft link somewhere in your `PATH` to this
    program; then you can run `gnulib-tool` from your project directory to add Gnulib
    modules to your Autotools-based project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That’s all you need to make Gnulib usable in the most effective manner on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The upstream Gnulib project doesn’t do releases but rather simply incorporates
    changes and bug fixes directly into the master branch. The programming examples
    in this chapter were written to use Gnulib source code from commit f876e0946c730fbd7848cf185fc0dcc712e13e69
    in the Savannah Gnulib git repository. If you’re having trouble getting the code
    in this chapter to build correctly, it could be because something has changed
    in the Gnulib source since this book was written. Try backing off to this commit
    of Gnulib.*'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Gnulib Modules to a Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To help you understand how to use Gnulib, let’s create a project that does something
    useful. We’ll write a program that converts data to and from base64 strings, which
    are widely used today, and Gnulib has a portable library of base64 conversion
    functionality. We’ll start by creating a small program containing only a `main`
    function that will act as a driver for the Gnulib base64 conversion functionality
    we’ll add later.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The source code for this project is in the NSP-Autotools GitHub repository
    called* b64 *at* [https://github.com/NSP-Autotools/b64/](https://github.com/NSP-Autotools/b64/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git tag: 13.0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Edit *src/b64.c* and add the contents shown in [Listing 13-1](ch13.xhtml#ch13ex1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-1*: src/b64.c: *The initial contents of the driver program main
    source file*'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s run `autoscan` to provide a base *configure.ac* file, rename the new
    *configure.scan* file to *configure.ac*, and then create a *Makefile.am* file
    for our project. Note that I’m creating a nonrecursive Automake project here,
    adding the single source file, *src/b64.c*, directly to the top-level *Makefile.am*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we’re not creating a “foreign” project, we also need to add the standard
    GNU text files (but you may certainly add `foreign` to the `AM_INIT_AUTOMAKE`
    macro argument list in *configure.ac* to avoid having to do this if you wish):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Edit the new *configure.ac* file and make the changes shown in [Listing 13-2](ch13.xhtml#ch13ex2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-2*: configure.ac: *Required changes to `autoscan`-generated* configure.ac'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve added the `subdir-objects` option to the `AM_INIT_AUTOMAKE` macro as part
    of creating a nonrecursive Automake build system. I’ve also added the `AC_CONFIG_MACRO_DIRS`
    macro to keep things clean.^([2](footnote.xhtml#ch13fn2))
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we should be able to run `autoreconf -i`, followed by `configure`
    and `make`, to build the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re now ready to start adding Gnulib functionality to this project. The first
    thing we need to do is use `gnulib-tool` to import the base64 module into our
    project. Assuming you’ve correctly cloned the Gnulib git project and added a soft
    link to `gnulib-tool` to a directory in your `PATH` (*$HOME/bin*, perhaps, if
    that directory is in your `PATH`), execute the following command from the root
    of the *b64* project directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 13.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The lists elided in this console example can get quite long when using a module
    that has many dependencies on other Gnulib modules. The *base64* module only directly
    depends on the *stdbool* and *memchr* modules; however, the dependency list shows
    additional transitive dependencies. You can see the direct dependencies of a module
    before committing yourself to it by examining its dependency list on the *MODULES*
    page at *[gnu.org](http://gnu.org)*^([3](footnote.xhtml#ch13fn3)) or by reading
    the *modules/base64* file in your clone of the Gnulib repository.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the transitive dependencies required by the base64 module include modules
    designed to make base64 much more portable to a wide variety of platforms. The
    *string* module, for example, provides a wrapper around your system’s *string.h*
    header file that provides additional commonly available string functionality or
    fixes bugs on some platforms.
  prefs: []
  type: TYPE_NORMAL
- en: You can see from the output that a couple of directories were created—*m4* and
    *lib*—and then some supporting M4 macro files were added to the *m4* directory
    and some source and build files were added to the *lib* directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re working in a git repository, *`gnulib-tool`* adds* .gitignore *files
    to the* m4 *and* lib *directories so files that can be regenerated or recopied
    don’t get checked in automatically when you run a command like* `git add -A`.
    *Instead, you’ll see that the only files added are* lib/.gitignore, m4/.gitignore,
    *and* m4/gnulib-cache.m4\. *All other files can be regenerated (or recopied) after
    you’ve finished configuring your project with the desired Gnulib modules.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, near the end of the output, `gnulib-tool` provides you with some concise
    instructions on how to use the base64 module you added. First, as per these instructions,
    we need to add *lib/Makefile* to our `AC_CONFIG_FILES` list in *configure.ac*.
    Later in the same list, we find additional instructions for more general modifications
    to *configure.ac*. [Listing 13-3](ch13.xhtml#ch13ex3) shows all of the changes
    we should make to *configure.ac*, according to these instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-3*: configure.ac: *Changes required by Gnulib*'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the instructions also indicate changes required to the top-level *Makefile.am*
    file in our project. [Listing 13-4](ch13.xhtml#ch13ex4) highlights these changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-4*: Makefile.am: *Changes required by Gnulib*'
  prefs: []
  type: TYPE_NORMAL
- en: Your project should continue to build after making these changes. We’ll have
    to run `autoreconf -i` to include additional files that are now required by the
    Gnulib macros we added to *configure.ac*.
  prefs: []
  type: TYPE_NORMAL
- en: When we imported the base64 module, the output from `gnulib-tool` indicated
    that we may need to add an include directive for *base64.h*. At the moment, we
    don’t need such a directive because our code doesn’t actually use any of base64’s
    functionality. We’re about to change that, but each module has its own set of
    include directives, so the steps I’m about to show you are related specifically
    to the base64 module. Other modules will have similar steps, but they’ll be specific
    to the modules you choose to use. The documentation for each module tells you
    how to access the public interface for the module—that is, which header files
    to include.
  prefs: []
  type: TYPE_NORMAL
- en: While the documentation is not particularly clear on this point, you don’t actually
    have to link any module-specific libraries into your project because the *lib/Makefile.am*
    file builds all imported modules’ source files and adds the resulting objects
    to a static library called *libgnu.a*. This is a customized version of the Gnulib
    library, containing only the modules you pulled into your project. Since Gnulib
    is a source code library, there are no binary files (outside of the one built
    in the *lib* directory) required by projects consuming Gnulib functionality. Therefore,
    the procedure for linking to Gnulib functionality is the same for all Gnulib modules.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add some of base64’s functionality to our project to see what’s involved
    in actually using this module. Make the changes highlighted in [Listing 13-5](ch13.xhtml#ch13ex5)
    to your *src/b64.c* file.
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 13.2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-5*: src/b64.c: *Changes required to incorporate base64 functionality*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve provided the entire file in [Listing 13-5](ch13.xhtml#ch13ex5) because
    there are only a few lines of the original code remaining. This program was designed
    to act as a Unix filter, reading input data from `stdin` and writing output data
    to `stdout`. To read from and write to files, just use command line redirection.
  prefs: []
  type: TYPE_NORMAL
- en: I should mention a few noteworthy points about this program. First, it uses
    a buffer growth algorithm in the `read_input` function. Much of this code can
    be replaced with a call to another Gnulib module function, `x2nrealloc`. The online
    documentation is sparse about the use of this method, or even the fact that it
    exists—perhaps because the xalloc interface has been around in various forms for
    many years. You can find the *xalloc.h* header file in the Gnulib source under
    the *lib* directory. There are long comments in there containing example usages
    of many of the functions, including the `x2nrealloc` function.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of using xalloc functionality for all your allocation needs
    is that its allocation functions automatically check for `NULL` return values
    and abort your program with an appropriate error message on memory allocation
    failures. If you desire more control over the abort process, you can add a function
    to your code called `xalloc_die` (no arguments, no return value) that will be
    called by xalloc functions if it exists. You can use this hook to perform any
    cleanup needed before your program exits. Why not let you decide whether or not
    to exit? You’re out of memory—what are you really going to do? Such out-of-memory
    conditions don’t happen often in today’s world of multi-terabyte-sized address
    spaces, but they still have to be checked for. The xalloc functions make doing
    so a little less painful.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, unlike many filters, this program will likely crash if you feed it
    a file containing a gigabyte of data because it buffers the entire input in an
    allocated memory block, which it resizes as it reads data from `stdin`. The reason
    for this is that the default use of the base64 module is not designed to handle
    streaming data. It requires the entire buffer up front. There is, however, a `base64_encode_alloc_ctx`
    method that allows you to encode small chunks of your input text in an iterative
    fashion. I’ll leave it as an exercise for you, the reader, to change this program
    to make use of this form of the base64 module.
  prefs: []
  type: TYPE_NORMAL
- en: To make this code build correctly, you’ll need to change *Makefile.am* as shown
    in [Listing 13-6](ch13.xhtml#ch13ex6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-6*: Makefile.am: *Changes required to use the base64 module in
    source*'
  prefs: []
  type: TYPE_NORMAL
- en: The `src_b64_CPPFLAGS` directive adds directories to the compiler’s include
    search path so it can find any header files added with selected Gnulib modules.
    The `src_b64_LDADD` directive appends *lib/libgnu.a* to the linker command line.
    Both of these directives should be familiar at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build and run the `b64` program. As I mentioned previously, you’ll want
    to run `autoreconf -i` first, to pick up any changes required by Gnulib additions
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I used `echo` to pipe some text into the `b64` filter, which outputs the base64
    equivalent of that text: “`aGkK`”. Note there’s no line-feed character at the
    end of the output. The `b64` filter outputs only the base64 text version of the
    input data. I then used `echo -n` to pipe the base64 text back into the filter,
    using the `-d` flag to decode to the original input data. The output is the original
    text, including a terminating line-feed character. By default, `echo` appends
    a line-feed character to the end of any text you hand it; therefore, the original
    encoded text includes a terminating line-feed character. The `-n` option tells
    `echo` to suppress the line-feed character. If you don’t use `-n`, the decode
    will fail with an error indicating the input data is not valid base64 text because
    `echo` added a line-feed character to it, which is not part of the base64 text.^([4](footnote.xhtml#ch13fn4))'
  prefs: []
  type: TYPE_NORMAL
- en: One thing that’s not clear from the Gnulib documentation is that, in keeping
    with the general philosophy of never committing files or data that can be easily
    regenerated, Gnulib’s *.gitignore* files keep imported module source code from
    being committed to your repository. There are a couple of reasons for this. First,
    Gnulib source code already lives in a repository—that of Gnulib itself. There’s
    no point in proliferating copies of the Gnulib source code around the internet
    by storing it in every repository that consumes it.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason for not storing it in your project repository is that bug fixes
    are always being supplied by users and maintainers. Each time you update your
    Gnulib work area and build your project, you could be getting a better version
    of the modules you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you’re finished for the day and you want to leave your work area in
    a nice clean state. You type `git clean -xfd` and wipe out everything not staged
    or already committed. The next day you come back and type `autoreconf -i`, followed
    by `configure && make`, but you find that your project won’t build; there are
    files missing from the *m4* and *lib* directories that seemed pretty important
    the day before. In fact, you discover, only the *m4/gnulib-cache.m4* file remains
    as a subtle reminder to you that your project ever had anything to do with Gnulib.
  prefs: []
  type: TYPE_NORMAL
- en: As it happens, that *gnulib-cache.m4* file is all you really need. It tells
    `gnulib-tool` which modules you’ve imported. To get it all back again, execute
    `gnulib-tool` with the `--update` option. This causes `gnulib-tool` to recopy
    current versions of all the relevant Gnulib files back into your project.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The use of the *`--update`* option with *`gnulib-tool`* will not update your
    Gnulib work area from its remote repository. Rather, it only updates your project’s
    use of Gnulib modules with the files that currently exist in your Gnulib work
    area. If you really want to use a particular past version of a set of Gnulib modules,
    you can check out a revision of the Gnulib repository from the past and then run
    *`gnulib-tool --update`* to pull in the current set of files from your Gnulib
    work area.*'
  prefs: []
  type: TYPE_NORMAL
- en: The `--update` option can also be used to copy updated versions of files after
    you’ve updated your Gnulib work area with git.
  prefs: []
  type: TYPE_NORMAL
- en: To help you remember to use `gnulib-tool --update` in projects that use Gnulib,
    the Gnulib manual suggests that you create a `bootstrap.sh` script (and flag it
    executable) containing at least the lines shown in [Listing 13-7](ch13.xhtml#ch13ex7).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 13.3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 13-7*: `bootstrap.sh`: *A project bootstrap script for* b64'
  prefs: []
  type: TYPE_NORMAL
- en: It would be really nice if `autoreconf` was smart enough to notice that you’ve
    used Gnulib modules and just call `gnulib-tool --update` for you. I suspect that’s
    on the feature list for a future release of Autoconf. For the present, however,
    you’ll need to remember to run this command to pull in Gnulib files when you clone
    your project repository into a new work area or after you’ve asked git to make
    your current work area pristine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, I discussed how to add Gnulib modules to your Autotools-based
    projects. I believe I’ve given you enough of a taste of Gnulib to pique your interest
    in this resource. The Gnulib manual is well written and easy to grasp (though
    a bit shy of full documentation) once you have a handle on the basics.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is for you to go to the Gnulib modules page and browse the functionality
    available to you. The header files and source code for the modules are also available
    for viewing from that page and in the *modules* and *lib* directories of the repository.
    Feel free to check them out.
  prefs: []
  type: TYPE_NORMAL
- en: The maintainers can always use help with documentation. Once you’ve used a module
    and become comfortable with it, see if its documentation could use some updating
    and consider becoming a contributor. You can use the Gnulib mailing list^([5](footnote.xhtml#ch13fn5))
    as a resource, both for questions you may have about the use of Gnulib and for
    patches for the documentation and source code.^([6](footnote.xhtml#ch13fn6))
  prefs: []
  type: TYPE_NORMAL
