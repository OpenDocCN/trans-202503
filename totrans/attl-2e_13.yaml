- en: '13'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '13'
- en: MAXIMUM PORTABILITY WITH GNULIB
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gnulib 达到最大可移植性
- en: '*Nothing was ever created by two men. There are no good collaborations, whether
    in art, in music, in poetry, in mathematics, in philosophy. Once the miracle of
    creation has taken place, the group can build and extend it, but the group never
    invents anything.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*没有任何创作是由两个人完成的。在艺术、音乐、诗歌、数学、哲学中没有良好的合作。创作的奇迹一旦发生，群体可以建设和扩展它，但群体永远不会发明任何东西。*'
- en: —John Steinbeck, East of Eden
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ——约翰·斯坦贝克，《伊甸园之东》
- en: '![Image](../images/common.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: You know those cool scripting languages you’ve been using for the last 10 years
    or so—Python, PHP, Perl, JavaScript, Ruby, and so on? One of the coolest features
    of these languages, and even some compiled languages like Java, is the ability
    to access community-provided library functionality through the use of tools like
    pip and maven, from repositories like PEAR, RubyGems, CPAN, and Maven Central.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道那些你过去十年左右一直在使用的酷炫脚本语言吗——Python、PHP、Perl、JavaScript、Ruby 等等？这些语言的最酷功能之一，甚至一些像
    Java 这样的编译语言，也具备通过 pip 和 maven 等工具访问社区提供的库功能的能力，来自 PEAR、RubyGems、CPAN 和 Maven
    Central 等仓库。
- en: Don’t you wish you could do that sort of thing with C and C++? You can have
    that experience in C with the *GNU Portability Library (Gnulib)*^([1](footnote.xhtml#ch13fn1)),
    with its companion command line tool `gnulib-tool`. Gnulib is a library of source
    code designed to be widely portable, even to platforms like Windows, using both
    native- and Cygwin-based compilation (though Gnulib is tested on Cygwin a little
    more than it is with native Windows builds).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 难道你不希望能在 C 和 C++ 中做类似的事情吗？你可以在 C 中体验这种感觉，使用 *GNU 可移植性库 (Gnulib)*^([1](footnote.xhtml#ch13fn1))，以及它的伴随命令行工具
    `gnulib-tool`。Gnulib 是一个旨在广泛可移植的源代码库，甚至可以移植到像 Windows 这样的平台，使用本地编译和基于 Cygwin 的编译方式（尽管
    Gnulib 在 Cygwin 上的测试稍多于在本地 Windows 构建中的测试）。
- en: There are literally hundreds of portable utility functions in Gnulib that are
    designed with one goal in mind—portability to many different platforms. This chapter
    is about how to get started with Gnulib and how to use it to your best advantage.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Gnulib 中有数百个便携的工具函数，它们的设计目标只有一个——便于移植到许多不同的平台。本章将介绍如何开始使用 Gnulib，并如何充分发挥它的优势。
- en: License Caveat
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 许可证警告
- en: Before I continue, I should mention that much of the Gnulib source code is licensed
    under GPLv3+ or LGPLv3+. Some of the Gnulib source code is, however, licensed
    under LGPLv2+, which may make that functionality a bit more palatable. The Gnulib
    functions that can reasonably be used in libraries are licensed under either LGPLv2+
    or LGPLv3+; all else is licensed either under GPLv3+ or under a sort of hybrid
    mix of “LGPLv3+ and GPLv2” (which is ultimately more compatible with GPLv2 than
    LGPLv2). If this bothers you, then you may want to skip this chapter, but before
    discarding Gnulib entirely, consider checking the license on the functionality
    you wish to use to see if your project can accommodate it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我继续之前，我应该提到，Gnulib 的大部分源代码是根据 GPLv3+ 或 LGPLv3+ 许可证发布的。然而，一些 Gnulib 的源代码是根据
    LGPLv2+ 许可证发布的，这可能会使得相关功能稍微更易接受。可以合理用于库中的 Gnulib 函数是根据 LGPLv2+ 或 LGPLv3+ 许可证发布的；其他的则是根据
    GPLv3+ 许可证发布，或者是某种混合的“LGPLv3+ 和 GPLv2”许可（从最终的兼容性上看，它与 GPLv2 比与 LGPLv2 更兼容）。如果这让你感到困扰，你可以跳过这一章，但在完全放弃
    Gnulib 之前，考虑检查你希望使用的功能的许可证，看看你的项目是否能够适应它。
- en: Since Gnulib is distributed in source format, and designed to be incorporated
    into applications and libraries in that format, the use of Gnulib implies the
    incorporation of GPL and LGPL source code directly into your source base. At the
    very least, this means you’ll need to license portions of your code using GPL
    and LGPL licenses. This may explain why Gnulib is not extremely popular, except
    with maintainers of other GNU packages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Gnulib 是以源代码格式分发的，并且设计上是要以这种格式纳入应用程序和库中，使用 Gnulib 就意味着将 GPL 和 LGPL 源代码直接纳入到你的源代码库中。至少，这意味着你需要使用
    GPL 和 LGPL 许可证对部分代码进行授权。这也许能解释为什么 Gnulib 并不是特别流行，除了其他 GNU 软件包的维护者。
- en: If, on the other hand, you’re writing an open source program already licensed
    under the GPL, or an open source library already using the LGPL, then your project
    is a perfect fit for Gnulib. Read on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你正在编写一个已经根据 GPL 许可证发布的开源程序，或者一个已经使用 LGPL 的开源库，那么你的项目非常适合使用 Gnulib。继续阅读。
- en: Getting Started
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用
- en: As mentioned, Gnulib is distributed in source format. While you can always go
    to the Savannah git repository and browse and download individual files online,
    it’s much simpler to just clone the Gnulib repository to a work area on your local
    host. The Gnulib repository provides the `gnulib-tool` utility in the repository’s
    root directory, which you can use to copy desired source modules, with companion
    Autoconf macros and build scripts, directly into your projects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Gnulib以源代码格式发布。虽然你可以随时访问Savannah git仓库，在线浏览并下载单个文件，但更简单的方法是将Gnulib仓库克隆到本地工作区。Gnulib仓库在根目录中提供了`gnulib-tool`工具，你可以用它将所需的源模块、伴随的Autoconf宏和构建脚本直接复制到你的项目中。
- en: 'The `gnulib-tool` utility runs as is right from the root of the repository.
    To make it easy to access, create a soft link somewhere in your `PATH` to this
    program; then you can run `gnulib-tool` from your project directory to add Gnulib
    modules to your Autotools-based project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`gnulib-tool`工具可以直接在仓库的根目录下运行。为了方便访问，可以在你的`PATH`中某个位置创建到这个程序的软链接；这样你就可以在项目目录中运行`gnulib-tool`，将Gnulib模块添加到基于Autotools的项目中：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s all you need to make Gnulib usable in the most effective manner on your
    system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使Gnulib在你的系统上以最有效的方式可用所需的一切。
- en: '**NOTE**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The upstream Gnulib project doesn’t do releases but rather simply incorporates
    changes and bug fixes directly into the master branch. The programming examples
    in this chapter were written to use Gnulib source code from commit f876e0946c730fbd7848cf185fc0dcc712e13e69
    in the Savannah Gnulib git repository. If you’re having trouble getting the code
    in this chapter to build correctly, it could be because something has changed
    in the Gnulib source since this book was written. Try backing off to this commit
    of Gnulib.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*上游的Gnulib项目不做发布，而是直接将更改和修复直接合并到主分支中。本章中的编程示例是使用Savannah Gnulib git仓库中提交号为f876e0946c730fbd7848cf185fc0dcc712e13e69的Gnulib源代码编写的。如果你在构建本章代码时遇到问题，可能是因为自本书编写以来，Gnulib源代码有所变化。尝试退回到这个Gnulib提交版本。*'
- en: Adding Gnulib Modules to a Project
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Gnulib模块添加到项目
- en: To help you understand how to use Gnulib, let’s create a project that does something
    useful. We’ll write a program that converts data to and from base64 strings, which
    are widely used today, and Gnulib has a portable library of base64 conversion
    functionality. We’ll start by creating a small program containing only a `main`
    function that will act as a driver for the Gnulib base64 conversion functionality
    we’ll add later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你理解如何使用Gnulib，让我们创建一个有实际用途的项目。我们将编写一个程序，用于将数据转换为base64字符串并反向转换，这在今天被广泛使用，而Gnulib提供了一个可移植的base64转换功能库。我们将从创建一个仅包含`main`函数的小程序开始，这个程序将作为驱动程序，稍后我们将添加Gnulib的base64转换功能。
- en: '**NOTE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The source code for this project is in the NSP-Autotools GitHub repository
    called* b64 *at* [https://github.com/NSP-Autotools/b64/](https://github.com/NSP-Autotools/b64/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*该项目的源代码在NSP-Autotools GitHub仓库中的* b64 *目录，地址为* [https://github.com/NSP-Autotools/b64/](https://github.com/NSP-Autotools/b64/)。'
- en: 'Git tag: 13.0'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Git标签：13.0
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Edit *src/b64.c* and add the contents shown in [Listing 13-1](ch13.xhtml#ch13ex1).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑*src/b64.c*并添加[Listing 13-1](ch13.xhtml#ch13ex1)中显示的内容。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 13-1*: src/b64.c: *The initial contents of the driver program main
    source file*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 13-1*：src/b64.c：*驱动程序主源文件的初始内容*'
- en: Now let’s run `autoscan` to provide a base *configure.ac* file, rename the new
    *configure.scan* file to *configure.ac*, and then create a *Makefile.am* file
    for our project. Note that I’m creating a nonrecursive Automake project here,
    adding the single source file, *src/b64.c*, directly to the top-level *Makefile.am*
    file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行`autoscan`以提供一个基础的*configure.ac*文件，将新的*configure.scan*文件重命名为*configure.ac*，然后为我们的项目创建一个*Makefile.am*文件。请注意，我在这里创建的是一个非递归的Automake项目，将单个源文件*src/b64.c*直接添加到顶层*Makefile.am*文件中。
- en: 'Since we’re not creating a “foreign” project, we also need to add the standard
    GNU text files (but you may certainly add `foreign` to the `AM_INIT_AUTOMAKE`
    macro argument list in *configure.ac* to avoid having to do this if you wish):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有创建“外部”项目，因此我们还需要添加标准的GNU文本文件（但如果你希望，可以在*configure.ac*中的`AM_INIT_AUTOMAKE`宏参数列表中添加`foreign`，以避免做这些修改）：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Edit the new *configure.ac* file and make the changes shown in [Listing 13-2](ch13.xhtml#ch13ex2).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑新的*configure.ac*文件，并按照[Listing 13-2](ch13.xhtml#ch13ex2)中的更改进行修改。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 13-2*: configure.ac: *Required changes to `autoscan`-generated* configure.ac'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 13-2*：configure.ac：*`autoscan`生成的* configure.ac *文件需要的更改*'
- en: I’ve added the `subdir-objects` option to the `AM_INIT_AUTOMAKE` macro as part
    of creating a nonrecursive Automake build system. I’ve also added the `AC_CONFIG_MACRO_DIRS`
    macro to keep things clean.^([2](footnote.xhtml#ch13fn2))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we should be able to run `autoreconf -i`, followed by `configure`
    and `make`, to build the project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We’re now ready to start adding Gnulib functionality to this project. The first
    thing we need to do is use `gnulib-tool` to import the base64 module into our
    project. Assuming you’ve correctly cloned the Gnulib git project and added a soft
    link to `gnulib-tool` to a directory in your `PATH` (*$HOME/bin*, perhaps, if
    that directory is in your `PATH`), execute the following command from the root
    of the *b64* project directory structure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 13.1
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The lists elided in this console example can get quite long when using a module
    that has many dependencies on other Gnulib modules. The *base64* module only directly
    depends on the *stdbool* and *memchr* modules; however, the dependency list shows
    additional transitive dependencies. You can see the direct dependencies of a module
    before committing yourself to it by examining its dependency list on the *MODULES*
    page at *[gnu.org](http://gnu.org)*^([3](footnote.xhtml#ch13fn3)) or by reading
    the *modules/base64* file in your clone of the Gnulib repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Some of the transitive dependencies required by the base64 module include modules
    designed to make base64 much more portable to a wide variety of platforms. The
    *string* module, for example, provides a wrapper around your system’s *string.h*
    header file that provides additional commonly available string functionality or
    fixes bugs on some platforms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: You can see from the output that a couple of directories were created—*m4* and
    *lib*—and then some supporting M4 macro files were added to the *m4* directory
    and some source and build files were added to the *lib* directory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re working in a git repository, *`gnulib-tool`* adds* .gitignore *files
    to the* m4 *and* lib *directories so files that can be regenerated or recopied
    don’t get checked in automatically when you run a command like* `git add -A`.
    *Instead, you’ll see that the only files added are* lib/.gitignore, m4/.gitignore,
    *and* m4/gnulib-cache.m4\. *All other files can be regenerated (or recopied) after
    you’ve finished configuring your project with the desired Gnulib modules.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Finally, near the end of the output, `gnulib-tool` provides you with some concise
    instructions on how to use the base64 module you added. First, as per these instructions,
    we need to add *lib/Makefile* to our `AC_CONFIG_FILES` list in *configure.ac*.
    Later in the same list, we find additional instructions for more general modifications
    to *configure.ac*. [Listing 13-3](ch13.xhtml#ch13ex3) shows all of the changes
    we should make to *configure.ac*, according to these instructions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 13-3*: configure.ac: *Changes required by Gnulib*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Some of the instructions also indicate changes required to the top-level *Makefile.am*
    file in our project. [Listing 13-4](ch13.xhtml#ch13ex4) highlights these changes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一些指令还指示了我们项目中顶层*Makefile.am*文件所需的更改。[列表13-4](ch13.xhtml#ch13ex4)突出了这些更改。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 13-4*: Makefile.am: *Changes required by Gnulib*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表13-4*：Makefile.am：*Gnulib所需的更改*'
- en: Your project should continue to build after making these changes. We’ll have
    to run `autoreconf -i` to include additional files that are now required by the
    Gnulib macros we added to *configure.ac*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出这些更改之后，你的项目应该继续构建。我们需要运行`autoreconf -i`，以包括现在由我们添加到*configure.ac*中的Gnulib宏所要求的额外文件。
- en: When we imported the base64 module, the output from `gnulib-tool` indicated
    that we may need to add an include directive for *base64.h*. At the moment, we
    don’t need such a directive because our code doesn’t actually use any of base64’s
    functionality. We’re about to change that, but each module has its own set of
    include directives, so the steps I’m about to show you are related specifically
    to the base64 module. Other modules will have similar steps, but they’ll be specific
    to the modules you choose to use. The documentation for each module tells you
    how to access the public interface for the module—that is, which header files
    to include.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导入base64模块时，`gnulib-tool`的输出指示我们可能需要添加一个*base64.h*的包含指令。目前，我们不需要这样的指令，因为我们的代码实际上并未使用base64的任何功能。我们即将进行更改，但每个模块都有自己的包含指令集，因此我接下来将展示的步骤仅与base64模块相关。其他模块也有类似的步骤，但会具体针对你选择使用的模块。每个模块的文档会告诉你如何访问该模块的公共接口——也就是说，应该包含哪些头文件。
- en: While the documentation is not particularly clear on this point, you don’t actually
    have to link any module-specific libraries into your project because the *lib/Makefile.am*
    file builds all imported modules’ source files and adds the resulting objects
    to a static library called *libgnu.a*. This is a customized version of the Gnulib
    library, containing only the modules you pulled into your project. Since Gnulib
    is a source code library, there are no binary files (outside of the one built
    in the *lib* directory) required by projects consuming Gnulib functionality. Therefore,
    the procedure for linking to Gnulib functionality is the same for all Gnulib modules.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然文档对此点的说明不是特别清晰，但实际上你不需要将任何模块特定的库链接到你的项目中，因为*lib/Makefile.am*文件会构建所有导入模块的源文件，并将结果对象添加到一个名为*libgnu.a*的静态库中。这是一个定制版的Gnulib库，仅包含你拉入项目中的模块。由于Gnulib是一个源代码库，因此不需要项目消耗Gnulib功能的二进制文件（除了*lib*目录中构建的那个）。因此，链接Gnulib功能的过程对于所有Gnulib模块都是相同的。
- en: Let’s add some of base64’s functionality to our project to see what’s involved
    in actually using this module. Make the changes highlighted in [Listing 13-5](ch13.xhtml#ch13ex5)
    to your *src/b64.c* file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将一些base64的功能添加到我们的项目中，看看实际使用该模块涉及哪些内容。根据[列表13-5](ch13.xhtml#ch13ex5)中的更改，对你的*src/b64.c*文件进行修改。
- en: Git tag 13.2
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Git标签 13.2
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 13-5*: src/b64.c: *Changes required to incorporate base64 functionality*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表13-5*：src/b64.c：*集成base64功能所需的更改*'
- en: I’ve provided the entire file in [Listing 13-5](ch13.xhtml#ch13ex5) because
    there are only a few lines of the original code remaining. This program was designed
    to act as a Unix filter, reading input data from `stdin` and writing output data
    to `stdout`. To read from and write to files, just use command line redirection.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我已在[列表13-5](ch13.xhtml#ch13ex5)中提供了整个文件，因为原始代码中只剩下几行。这程序旨在作为Unix过滤器，读取`stdin`中的输入数据并将输出数据写入`stdout`。要从文件读取和写入，只需使用命令行重定向。
- en: I should mention a few noteworthy points about this program. First, it uses
    a buffer growth algorithm in the `read_input` function. Much of this code can
    be replaced with a call to another Gnulib module function, `x2nrealloc`. The online
    documentation is sparse about the use of this method, or even the fact that it
    exists—perhaps because the xalloc interface has been around in various forms for
    many years. You can find the *xalloc.h* header file in the Gnulib source under
    the *lib* directory. There are long comments in there containing example usages
    of many of the functions, including the `x2nrealloc` function.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该提到一些关于这个程序的重要事项。首先，它在`read_input`函数中使用了一个缓冲区增长算法。这个代码的大部分可以通过调用另一个Gnulib模块函数`x2nrealloc`来替代。在线文档对该方法的使用，甚至对它的存在，描述得很少——可能是因为xalloc接口已经以不同形式存在了很多年。你可以在Gnulib源代码的*lib*目录下找到*xalloc.h*头文件，里面有很多长注释，包含了许多函数的示例用法，包括`x2nrealloc`函数。
- en: Another advantage of using xalloc functionality for all your allocation needs
    is that its allocation functions automatically check for `NULL` return values
    and abort your program with an appropriate error message on memory allocation
    failures. If you desire more control over the abort process, you can add a function
    to your code called `xalloc_die` (no arguments, no return value) that will be
    called by xalloc functions if it exists. You can use this hook to perform any
    cleanup needed before your program exits. Why not let you decide whether or not
    to exit? You’re out of memory—what are you really going to do? Such out-of-memory
    conditions don’t happen often in today’s world of multi-terabyte-sized address
    spaces, but they still have to be checked for. The xalloc functions make doing
    so a little less painful.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用xalloc功能来满足所有内存分配需求的另一个优点是，它的分配函数会自动检查`NULL`返回值，并在内存分配失败时通过适当的错误信息中止程序。如果你希望对中止过程有更多控制，可以向代码中添加一个名为`xalloc_die`的函数（无参数，无返回值），如果它存在，xalloc函数会调用它。你可以使用这个钩子在程序退出前执行任何必要的清理工作。为什么不让你来决定是否退出呢？你内存不足——你究竟能做什么？在今天多TB地址空间的世界中，这种内存不足的情况不常发生，但仍然需要进行检查。xalloc函数使得进行这种检查变得不那么痛苦。
- en: Finally, unlike many filters, this program will likely crash if you feed it
    a file containing a gigabyte of data because it buffers the entire input in an
    allocated memory block, which it resizes as it reads data from `stdin`. The reason
    for this is that the default use of the base64 module is not designed to handle
    streaming data. It requires the entire buffer up front. There is, however, a `base64_encode_alloc_ctx`
    method that allows you to encode small chunks of your input text in an iterative
    fashion. I’ll leave it as an exercise for you, the reader, to change this program
    to make use of this form of the base64 module.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，与许多过滤器不同，如果你向这个程序输入一个包含1GB数据的文件，它可能会崩溃，因为它会将整个输入缓冲到一个已分配的内存块中，并在读取`stdin`数据时调整其大小。原因是默认的base64模块使用方式并不设计为处理流式数据。它要求事先准备好整个缓冲区。然而，有一个`base64_encode_alloc_ctx`方法，允许你以迭代方式编码输入文本的小块。我将这个任务留给你，读者，让你修改这个程序以使用这种base64模块的形式。
- en: To make this code build correctly, you’ll need to change *Makefile.am* as shown
    in [Listing 13-6](ch13.xhtml#ch13ex6).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这段代码正确构建，你需要按照[示例 13-6](ch13.xhtml#ch13ex6)所示更改*Makefile.am*。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 13-6*: Makefile.am: *Changes required to use the base64 module in
    source*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-6*：Makefile.am：*在源代码中使用base64模块所需的更改*'
- en: The `src_b64_CPPFLAGS` directive adds directories to the compiler’s include
    search path so it can find any header files added with selected Gnulib modules.
    The `src_b64_LDADD` directive appends *lib/libgnu.a* to the linker command line.
    Both of these directives should be familiar at this point.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`src_b64_CPPFLAGS`指令将目录添加到编译器的包含搜索路径中，以便它能够找到通过选定的Gnulib模块添加的任何头文件。`src_b64_LDADD`指令将*lib/libgnu.a*追加到链接器命令行中。这两个指令到现在为止应该已经很熟悉了。'
- en: Let’s build and run the `b64` program. As I mentioned previously, you’ll want
    to run `autoreconf -i` first, to pick up any changes required by Gnulib additions
    to the project.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建并运行`b64`程序。正如我之前提到的，首先你需要运行`autoreconf -i`，以应用Gnulib对项目所做的任何更改。
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I used `echo` to pipe some text into the `b64` filter, which outputs the base64
    equivalent of that text: “`aGkK`”. Note there’s no line-feed character at the
    end of the output. The `b64` filter outputs only the base64 text version of the
    input data. I then used `echo -n` to pipe the base64 text back into the filter,
    using the `-d` flag to decode to the original input data. The output is the original
    text, including a terminating line-feed character. By default, `echo` appends
    a line-feed character to the end of any text you hand it; therefore, the original
    encoded text includes a terminating line-feed character. The `-n` option tells
    `echo` to suppress the line-feed character. If you don’t use `-n`, the decode
    will fail with an error indicating the input data is not valid base64 text because
    `echo` added a line-feed character to it, which is not part of the base64 text.^([4](footnote.xhtml#ch13fn4))'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用`echo`将一些文本通过管道传递到`b64`过滤器，后者输出该文本的 base64 等效：“`aGkK`”。注意输出的末尾没有换行符。`b64`过滤器只输出输入数据的
    base64 文本版本。然后，我使用`echo -n`将 base64 文本重新传入过滤器，使用`-d`标志解码回原始输入数据。输出是原始文本，包括一个终止的换行符。默认情况下，`echo`会将换行符附加到你输入的任何文本末尾；因此，原始的编码文本包括一个终止的换行符。`-n`选项告诉`echo`抑制换行符。如果不使用`-n`，解码将失败，并出现错误，提示输入数据不是有效的
    base64 文本，因为`echo`附加了一个换行符，而这不是 base64 文本的一部分。
- en: One thing that’s not clear from the Gnulib documentation is that, in keeping
    with the general philosophy of never committing files or data that can be easily
    regenerated, Gnulib’s *.gitignore* files keep imported module source code from
    being committed to your repository. There are a couple of reasons for this. First,
    Gnulib source code already lives in a repository—that of Gnulib itself. There’s
    no point in proliferating copies of the Gnulib source code around the internet
    by storing it in every repository that consumes it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Gnulib 文档中并不清楚的一点是，按照“从不提交可以轻松再生的文件或数据”的一般原则，Gnulib 的 *.gitignore* 文件会阻止导入的模块源代码被提交到你的仓库。这样做有几个原因。首先，Gnulib
    源代码已经存在于一个仓库中——那就是 Gnulib 本身的仓库。没有必要通过将它存储在每个使用它的仓库中来使 Gnulib 源代码在互联网上大量传播。
- en: Another reason for not storing it in your project repository is that bug fixes
    are always being supplied by users and maintainers. Each time you update your
    Gnulib work area and build your project, you could be getting a better version
    of the modules you’re using.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不将其存储在你的项目仓库中的另一个原因是，用户和维护者总是提供修复补丁。每次更新你的 Gnulib 工作区并构建项目时，你可能会得到你正在使用的模块的更好版本。
- en: Let’s say you’re finished for the day and you want to leave your work area in
    a nice clean state. You type `git clean -xfd` and wipe out everything not staged
    or already committed. The next day you come back and type `autoreconf -i`, followed
    by `configure && make`, but you find that your project won’t build; there are
    files missing from the *m4* and *lib* directories that seemed pretty important
    the day before. In fact, you discover, only the *m4/gnulib-cache.m4* file remains
    as a subtle reminder to you that your project ever had anything to do with Gnulib.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你今天的工作已经完成，并且你想将工作区恢复到一个干净的状态。你输入`git clean -xfd`，然后清除所有未暂存或未提交的内容。第二天，你回来并输入`autoreconf
    -i`，接着是`configure && make`，但你发现项目无法构建；*m4*和*lib*目录中似乎有一些重要的文件丢失了。事实上，你发现，只有*m4/gnulib-cache.m4*文件作为一个微妙的提醒，告诉你项目曾经与
    Gnulib 有关。
- en: As it happens, that *gnulib-cache.m4* file is all you really need. It tells
    `gnulib-tool` which modules you’ve imported. To get it all back again, execute
    `gnulib-tool` with the `--update` option. This causes `gnulib-tool` to recopy
    current versions of all the relevant Gnulib files back into your project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，那个*gnulib-cache.m4*文件就是你真正需要的。它告诉`gnulib-tool`你已经导入了哪些模块。要重新获取所有内容，只需使用`--update`选项执行`gnulib-tool`。这会让`gnulib-tool`将所有相关的
    Gnulib 文件的当前版本重新复制到你的项目中。
- en: '**NOTE**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The use of the *`--update`* option with *`gnulib-tool`* will not update your
    Gnulib work area from its remote repository. Rather, it only updates your project’s
    use of Gnulib modules with the files that currently exist in your Gnulib work
    area. If you really want to use a particular past version of a set of Gnulib modules,
    you can check out a revision of the Gnulib repository from the past and then run
    *`gnulib-tool --update`* to pull in the current set of files from your Gnulib
    work area.*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用 *`--update`* 选项与 *`gnulib-tool`* 并不会从远程仓库更新你的 Gnulib 工作区。相反，它仅仅更新你项目中使用的
    Gnulib 模块，并用当前存在于 Gnulib 工作区中的文件替换这些模块。如果你真的想使用某个过去版本的 Gnulib 模块，你可以从过去检出一个 Gnulib
    仓库的修订版本，然后运行 *`gnulib-tool --update`* 来从 Gnulib 工作区中拉取当前的文件集。*'
- en: The `--update` option can also be used to copy updated versions of files after
    you’ve updated your Gnulib work area with git.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`--update` 选项也可以在你使用 git 更新了 Gnulib 工作区后，用来复制更新后的文件版本。'
- en: To help you remember to use `gnulib-tool --update` in projects that use Gnulib,
    the Gnulib manual suggests that you create a `bootstrap.sh` script (and flag it
    executable) containing at least the lines shown in [Listing 13-7](ch13.xhtml#ch13ex7).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你记住在使用 Gnulib 的项目中使用 `gnulib-tool --update`，Gnulib 手册建议你创建一个 `bootstrap.sh`
    脚本（并标记为可执行），脚本中至少包含 [列表 13-7](ch13.xhtml#ch13ex7) 中显示的行。
- en: Git tag 13.3
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Git 标签 13.3
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 13-7*: `bootstrap.sh`: *A project bootstrap script for* b64'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-7*：`bootstrap.sh`：*b64 的项目引导脚本*'
- en: It would be really nice if `autoreconf` was smart enough to notice that you’ve
    used Gnulib modules and just call `gnulib-tool --update` for you. I suspect that’s
    on the feature list for a future release of Autoconf. For the present, however,
    you’ll need to remember to run this command to pull in Gnulib files when you clone
    your project repository into a new work area or after you’ve asked git to make
    your current work area pristine.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `autoreconf` 足够智能，能够注意到你使用了 Gnulib 模块并自动为你调用 `gnulib-tool --update`，那该有多好。我怀疑这是
    Autoconf 未来版本中的一项功能。当前而言，然而，你需要记得在将项目仓库克隆到新的工作区或在你要求 git 将当前工作区恢复为干净状态之后，手动运行此命令来拉取
    Gnulib 文件。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, I discussed how to add Gnulib modules to your Autotools-based
    projects. I believe I’ve given you enough of a taste of Gnulib to pique your interest
    in this resource. The Gnulib manual is well written and easy to grasp (though
    a bit shy of full documentation) once you have a handle on the basics.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我讨论了如何将 Gnulib 模块添加到基于 Autotools 的项目中。我相信我已经给了你足够的 Gnulib 资源，让你对它产生兴趣。只要你掌握了基础，Gnulib
    手册写得很好，容易理解（虽然文档不是特别全面）。
- en: The next step is for you to go to the Gnulib modules page and browse the functionality
    available to you. The header files and source code for the modules are also available
    for viewing from that page and in the *modules* and *lib* directories of the repository.
    Feel free to check them out.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是你去 Gnulib 模块页面，浏览可用的功能。模块的头文件和源代码也可以从该页面以及仓库中的 *modules* 和 *lib* 目录中查看。随时可以查看它们。
- en: The maintainers can always use help with documentation. Once you’ve used a module
    and become comfortable with it, see if its documentation could use some updating
    and consider becoming a contributor. You can use the Gnulib mailing list^([5](footnote.xhtml#ch13fn5))
    as a resource, both for questions you may have about the use of Gnulib and for
    patches for the documentation and source code.^([6](footnote.xhtml#ch13fn6))
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 维护者总是可以在文档方面获得帮助。 一旦你使用了一个模块并且变得熟悉它，看看它的文档是否需要更新，并考虑成为贡献者。你可以使用 Gnulib 邮件列表^([5](footnote.xhtml#ch13fn5))作为资源，无论是关于使用
    Gnulib 的问题，还是文档和源代码的补丁^([6](footnote.xhtml#ch13fn6))。
