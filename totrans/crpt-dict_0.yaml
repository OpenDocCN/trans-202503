- en: CRYPTO DICTIONARY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密字典
- en: '#'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#'
- en: '2013'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2013年
- en: The year of Edward Snowden’s leaks about the NSA’s classified activities, a
    turning point in cryptography. End-to-end encryption suddenly becomes an appealing
    topic.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 爱德华·斯诺登泄露了关于美国国家安全局（NSA）机密活动的文件的年份，成为密码学的一个转折点。端到端加密突然成为一个引人注目的话题。
- en: '65537'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '65537'
- en: The most common RSA public exponent; large enough to not be insecure, small
    enough to make exponentiation fast, and of a form that optimizes implementations’
    speed (65537 = 2^(16) + 1).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的RSA公钥指数；大到足以保证安全，小到使得指数运算快速，并且具有优化实现速度的形式（65537 = 2^(16) + 1）。
- en: A
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A
- en: A5/0
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A5/0
- en: One of the three encryption modes in early mobile telephony standards (GSM).
    A5/0 just means *no encryption*; therefore, the audio content from a mobile call
    would be received and transmitted in the clear between a mobile device and the
    nearest base station. It’s as secure as early TLS versions’ *null cipher*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 早期移动电话标准（GSM）中的三种加密模式之一。A5/0表示*无加密*；因此，手机通话的音频内容将在手机设备和最近的基站之间以明文形式传输。它的安全性就像早期版本的TLS协议中的*空密码*一样。
- en: A5/1
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A5/1
- en: 'The default GSM cipher in Western countries (prior to 3G and 4G technologies)
    that encrypts encoded audio mobile communications. A stream cipher based on a
    curious mechanism involving three linear feedback shift registers irregularly
    clocked; so the update of a register depends on the values of certain bits in
    the two other registers. Sophisticated cryptanalytic attacks have broken A5/1\.
    But in practice, the most effective attack is relatively simple: it’s a time-memory
    trade-off that exploits the short state of A5/1 (64 bits) and involves the precomputation
    of large rainbow tables. The A5/1 specification was initially confidential and
    unavailable to the public until it was reverse engineered in the late 1990s.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 西方国家默认的GSM密码（3G和4G技术之前），用于加密编码的音频移动通信。这是一种基于三个线性反馈移位寄存器不规则时钟驱动的流密码机制，因此寄存器的更新取决于其他两个寄存器中的某些位的值。复杂的密码分析攻击已经破解了A5/1。但是在实际操作中，最有效的攻击方法相对简单：它是一种时间-内存权衡，利用了A5/1（64位）状态短小的特点，并涉及到大型彩虹表的预计算。A5/1的规范最初是机密的，并且在1990年代末被逆向工程之前未公开。
- en: A5/2
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A5/2
- en: 'The export version of A5/1, a euphemism meaning its technical requirements
    include something like *must be easy to break by Western nations’ intelligence
    agencies*. Designed to be insecure, A5/2 didn’t turn out to be outrageously insecure:
    after being reverse engineered around the same time as A5/1, academic researchers
    quickly found attacks on A5/2\. But these attacks were more efficient on paper
    than in practice.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: A5/1的出口版本，一种委婉的说法，意味着其技术要求包括像*必须容易被西方国家的情报机构破解*之类的内容。设计时就有意不安全，A5/2最终并没有变得极其不安全：在A5/1被逆向工程的同时，学术研究人员很快找到了针对A5/2的攻击。不过这些攻击在理论上比在实践中更为高效。
- en: A5/3
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A5/3
- en: At last, a real cipher in mobile phones. An upgrade to the do-it-yourself A5/1
    that applies an algorithm already public and vetted, namely the block cipher KASUMI.
    KASUMI was used in 2G (along with A5/1), in 3G as A5/4 (along with SNOW 3G), and
    was no longer supported in 4G.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，手机中终于出现了真正的密码算法。这是对DIY A5/1的升级，应用了一个已经公开且经过验证的算法——即块密码KASUMI。KASUMI曾在2G（与A5/1一起使用）、3G中作为A5/4（与SNOW
    3G一起使用），而在4G中已不再被支持。
- en: See [*KASUMI*](#KASUMI).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*KASUMI*](#KASUMI)。
- en: A5/4
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A5/4
- en: A5/3 but with a key of 128 bits instead of 64 bits; A5/4 is secure, whereas
    A5/3 isn’t.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: A5/3，但密钥为128位而非64位；A5/4是安全的，而A5/3则不安全。
- en: Adaptive attack
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自适应攻击
- en: An attack in which the attacker’s actions depend on what they observe during
    the attack and the protocol’s execution. For example, in an adaptive chosen-plaintext
    attack, the attacker sends plaintext messages that depend on the responses to
    their previous queries. In a nonadaptive attack, the list of plaintexts for which
    the attacker queries the ciphertexts must be predetermined.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一种攻击方式，攻击者的行为取决于他们在攻击过程中观察到的情况以及协议的执行。例如，在自适应的明文选择攻击中，攻击者发送的明文消息依赖于他们之前查询的响应。在非自适应攻击中，攻击者查询密文的明文列表必须是预先确定的。
- en: AEAD (authenticated encryption with associated data)
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AEAD（带关联数据的认证加密）
- en: A type of symmetric cipher that encrypts and authenticates data by producing
    a ciphertext as well as an authentication tag. The decryption step then only succeeds
    if the tag is valid, which proves that the ciphertext was created by someone who
    knows the key. To validate the tag, the receiving end generally computes it from
    the encrypted message and verifies that the computed value is identical to the
    one received.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种对称加密算法，通过生成密文和认证标签来加密和认证数据。解密步骤仅在标签有效时成功，这证明密文是由知道密钥的人创建的。为了验证标签，接收方通常通过从加密消息中计算标签并验证计算值是否与接收到的值相同。
- en: AES (Advanced Encryption Standard)
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AES（高级加密标准）
- en: The ubiquitous block cipher standardized by NIST in 2000\. Designed by Belgian
    cryptographers Joan Daemen and Vincent Rijmen, and winner of the AES competition,
    its use is universal today under its various modes of operation, such as CBC,
    GCM, and SIV.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由比利时密码学家Joan Daemen和Vincent Rijmen设计，并赢得AES竞赛的广泛应用的块密码，于2000年由NIST标准化。今天，它在各种操作模式下得到了普遍使用，如CBC、GCM和SIV。
- en: See [*Rijndael*](#Rijndael).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 见[*Rijndael*](#Rijndael)。
- en: AES-CCM
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AES-CCM
- en: AES in counter-with-CBC-MAC mode, which combines the CTR encryption mode with
    CBC-MAC authentication. AES-CCM is a NIST standard and is supported in TLS 1.3
    and several other protocols, including Bluetooth Low Energy. But it’s much less
    popular than its sibling AES-GCM. The reason is that AES-CCM is generally slower
    and less convenient to use than AES-GCM. A research paper titled “A Critique of
    CCM” describes the limitations of the CCM mode.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: AES在计数器与CBC-MAC模式下，结合了CTR加密模式和CBC-MAC认证。AES-CCM是NIST标准，并在TLS 1.3和其他一些协议中得到支持，包括蓝牙低能耗。但它的流行程度远不如其兄弟AES-GCM。原因是，AES-CCM通常比AES-GCM慢且使用起来不那么方便。一篇名为“对CCM的批评”的研究论文描述了CCM模式的局限性。
- en: AES-CCM sometimes fits better than AES-GCM in embedded platforms because it
    only needs an AES algorithm and no additional logic (unlike GCM’s GMAC).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式平台中，AES-CCM有时比AES-GCM更合适，因为它只需要AES算法，而不需要额外的逻辑（不像GCM的GMAC）。
- en: AES-GCM
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AES-GCM
- en: AES in Galois counter mode, the most common authenticated encryption primitive
    at the time of writing. Also the primitive that ended the reign of HMAC authenticators.
    In GCM mode, a message is encrypted in CTR mode and the Galois MAC (GMAC, aka
    GHASH) generates an authentication tag from the ciphertext and associated data
    blocks. The carry-less multiplication instruction PCLMULQDQ was introduced in
    Intel CPUs in the 2010s to speed up GMAC computations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: AES在Galois计数器模式下，是在撰写时最常见的认证加密原语，也是结束HMAC身份验证器统治的原语。在GCM模式下，消息在CTR模式下进行加密，而Galois
    MAC（GMAC，也叫GHASH）则从密文和关联数据块生成认证标签。无进位乘法指令PCLMULQDQ是在2010年代由英特尔处理器引入的，用以加速GMAC计算。
- en: AES-GCM-SIV
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AES-GCM-SIV
- en: 'A variant of AES-GCM where the encryption nonce is determined from the tag
    computed by authenticating the plaintext (and any associated data). AES-GCM-SIV’s
    MAC, called *POLYVAL*, is slightly different from GCM’s GMAC: whereas AES-GCM
    is of the encrypt-then-MAC form, AES-GCM-SIV is a MAC-and-encrypt construction.
    The main benefit of AES-GCM-SIV compared to AES-GCM is that the former remains
    secure if a same nonce is reused—a property called *misuse resistance*.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: AES-GCM的一种变体，其中加密nonce是通过认证明文（及任何关联数据）计算得到的标签来确定的。AES-GCM-SIV的MAC，称为*POLYVAL*，与GCM的GMAC略有不同：AES-GCM采用的是加密后认证的形式，而AES-GCM-SIV则是认证和加密的构造。与AES-GCM相比，AES-GCM-SIV的主要优势是，即使重复使用相同的nonce，它仍然保持安全——这一特性被称为*误用抵抗*。
- en: AES-NI
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AES-NI
- en: Officially AES New Instructions but often called native instructions, which
    might be a better term. AES-NIs are CPU instructions that compute AES using hardware
    logic in the chip’s silicon as opposed to a combination of arithmetic operations
    using the chip’s ALU. When introduced by Intel in 2008, AES-NIs made AES software
    about 10 times faster, and as a by-product, immune to cache-timing attacks.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 官方称为AES新指令，但通常称为原生指令，可能是更合适的术语。AES-NI是通过芯片硅中的硬件逻辑计算AES的CPU指令，而不是使用芯片的ALU执行算术操作的组合。2008年由英特尔推出时，AES-NI使AES软件速度提升约10倍，且作为副产品，能够抵抗缓存时间攻击。
- en: AES-SIV
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AES-SIV
- en: See [*SIV-AES*](#SIV-AES).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 见[*SIV-AES*](#SIV-AES)。
- en: AIM (Advanced INFOSEC Machine)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AIM（高级信息安全机器）
- en: A chipset designed by Motorola in the late 1990s that includes separate FPGAs
    for red and black operations. Pompously advertised as *one of the most revolutionary
    advances in cryptography, ever*. The NSA uses it to protect classified and sensitive
    national security information. The off-the-shelf AIM didn’t include classified
    (Suite A) algorithms, but users could program the FPGAs to support algorithms,
    such as ACCORDION or BATON.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一款由摩托罗拉在1990年代末设计的芯片组，其中包括用于红色和黑色操作的独立FPGA。被夸张宣传为*“密码学史上最革命性的进展之一”*。NSA使用它来保护机密和敏感的国家安全信息。市面上的AIM不包括机密（A类）算法，但用户可以编程FPGA以支持诸如ACCORDION或BATON等算法。
- en: AKA
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也称为
- en: In 3GPP standards parlance, the authenticated key agreement operation between
    users of a cellular network and the user’s home network, which might be different
    from the serving network.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在3GPP标准术语中，指的是在蜂窝网络用户和用户所属网络之间进行的身份验证密钥协商操作，而该网络可能与服务网络不同。
- en: AKS (Agrawal–Kayal–Saxena)
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AKS（阿格拉瓦尔–凯亚尔–萨克森）
- en: The first deterministic primality test, as opposed to randomized ones. The 2002
    research paper presenting the AKS algorithm, “PRIMES is in P,” was the first proof
    that the problem of primality testing is in the P complexity class, or the class
    of problems for which a nonrandomized polynomial-time algorithm exists.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种确定性素性测试方法，与随机方法相对。2002年提出的AKS算法论文《PRIMES是P类问题》首次证明了素性测试问题属于P复杂度类，即存在一个非随机的多项式时间算法来解决该问题。
- en: See [*PRIMES*](#PRIMES).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*PRIMES*](#PRIMES)。
- en: Algebraic cryptanalysis
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代数密码分析
- en: A form of cryptanalysis where the target problem (typically key recovery, but
    also forgery, distinguishing, and so on) is modeled as a system of multivariate
    equations to which a solution is found by generic or ad hoc techniques. Algebraic
    cryptanalysis has been used to attack symmetric and asymmetric cryptosystems.
    An example target is stream ciphers based on feedback shift registers with low
    algebraic degree logic, giving rise to underlying equations exploitable by algebraic
    attacks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一种密码分析形式，其中目标问题（通常是密钥恢复，也包括伪造、区分等）被建模为多元方程系统，通过通用或特定技术来求解。代数密码分析已被用于攻击对称和非对称密码系统。一个典型的目标是基于反馈移位寄存器和低代数度逻辑的流密码，从而生成可以通过代数攻击利用的底层方程。
- en: See [*Gröbner basis*](#Gr%C3%B6bner-basis).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*Gröbner基*](#Gr%C3%B6bner-basis)。
- en: Alice
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Alice
- en: 'Bob’s partner in crime, but who never met Bob in person. According to their
    official biography in John Gordon’s 1984 speech: “Alice and Bob have tried to
    defraud insurance companies, they’ve played poker for high stakes by mail, and
    they’ve exchanged secret messages over tapped telephones. (. . .) Alice and Bob
    have very powerful enemies. One of their enemies is the Tax Authority. Another
    is the Secret Police. This is a pity, since their favorite topics of discussion
    are tax frauds and overthrowing the government.”'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Bob的犯罪伙伴，但从未与Bob亲自见过面。根据他们在约翰·戈登1984年演讲中的官方传记：“Alice和Bob曾尝试欺诈保险公司，他们通过邮件进行过高额扑克赌博，并通过窃听的电话交换过秘密信息。（……）Alice和Bob有许多强大的敌人。其中之一是税务机关，另一个是秘密警察。这真是太遗憾了，因为他们最喜欢讨论的话题是税务欺诈和推翻政府。”
- en: See [*Bob*](#Bob).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*Bob*](#Bob)。
- en: All-or-nothing transform (AONT)
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全有或全无变换（AONT）
- en: A reversible transformation where you need every bit of the output to determine
    any bit of the input. When an encryption scheme is an AONT, the decryption key
    is useless to determine the plaintext if you miss some bits of the ciphertext
    (unless the missing bits are so few that they can be brute-forced). The OAEP construction
    used for RSA encryption is an example of AONT. CBC or GCM encryption modes aren’t
    AONTs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可逆变换，其中你需要输出的每一位才能确定输入的任何一位。当一个加密方案是AONT时，如果你错过了一些密文位，那么解密密钥将无法确定明文（除非缺失的位数非常少，可以通过暴力破解）。RSA加密中使用的OAEP构造就是AONT的一个例子。CBC或GCM加密模式不是AONT。
- en: Anonymous signature
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匿名签名
- en: A signature that doesn’t reveal the identity (public key) of the signer and
    therefore needs some interaction with the signer to verify it. It implies invisibility.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一种不会泄露签名者身份（公钥）的签名，因此需要与签名者进行某种交互才能验证它。它意味着隐形性。
- en: See [*Invisible signature*](#Invisible-signature).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*隐形签名*](#Invisible-signature)。
- en: '*Applied Cryptography*'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*应用密码学*'
- en: 'The 1996 book by Bruce Schneier that has been the main reference in the field
    for many years; it introduced many students and engineers to cryptography. Famous
    for its opening paragraph: “There are two kinds of cryptography in this world:
    cryptography that will stop your kid sister from reading your files, and cryptography
    that will stop major governments from reading your files. This book is about the
    latter.”'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由Bruce Schneier于1996年出版的书籍，在该领域多年一直是主要参考资料；它让许多学生和工程师接触到加密学。以其开头段落而闻名：“这个世界上有两种加密学：一种是能阻止你的小妹妹阅读你的文件的加密学，另一种是能阻止主要政府读取你文件的加密学。这本书讲的是后者。”
- en: Inevitably outdated 25 years after its publication, *Applied Cryptography* isstill
    worth keeping on your shelf as long as you don’t blindly follow all of its recommendations.
    It’s also much less outdated than Schneier’s two prior books, *E‑Mail Security*
    and *Protect Your Macintosh*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 发布25年后不可避免地已过时，*应用密码学*仍然值得保留在书架上，只要你不盲目遵循其中的所有建议。它也比Schneier的两本前书《电子邮件安全》和《保护你的Macintosh》要少过时。
- en: Applied cryptography
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用加密学
- en: The part of cryptography that emphasizes direct applications. In contrast, theoretical
    cryptography is less about engineering and more about fundamental understanding
    and analysis. The term *applied* is deceiving; both applied and theoretical cryptography
    can (and ought to?) be equally relevant to real applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 强调直接应用的加密学领域。与此相对，理论加密学更侧重于基础理解和分析，而非工程实践。术语*应用*具有误导性；应用加密学和理论加密学都可以（并且应该？）在实际应用中同样相关。
- en: ARC4
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARC4
- en: The original name of the RC4 stream cipher; also written as ARCFOUR. Before
    the reverse engineered RC4 was confirmed to be the actual RC4, it was prudently
    referred to as *alleged RC4*, which was shortened to ARC4.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: RC4流密码的原始名称；也写作ARCFOUR。在反向工程确认RC4才是实际的RC4之前，它谨慎地被称为*所谓的RC4*，并缩写为ARC4。
- en: Argon2
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Argon2
- en: A password hashing function developed during the Password Hashing Competition.
    Also, a de facto standard for processing passwords or any low-entropy secret to
    derive cryptographic keys or store a verifier in a way that prevents efficient
    cracking using GPUs, FPGAs, dedicated hardware, precomputed tables, or side-channel
    attacks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在密码哈希竞赛期间开发的密码哈希函数，也是处理密码或任何低熵秘密以派生加密密钥或存储验证器的一种事实标准，能够有效防止使用GPU、FPGA、专用硬件、预计算表格或侧信道攻击进行破解。
- en: Unlike PBKDF2, Argon2 can enforce the use of a certain amount of memory in addition
    to a configurable number of iterations. Unlike bcrypt, this amount of memory can
    be an arbitrary value rather than fixed. Unlike scrypt and the two others, Argon2
    offers a user-friendly interface to easily pick time and memory parameters. It’s
    also a simple design that only uses the hash function BLAKE2 internally rather
    than a combination of all the cryptography ever designed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与PBKDF2不同，Argon2除了可配置的迭代次数外，还可以强制使用一定量的内存。与bcrypt不同，这种内存量可以是任意值，而不是固定的。与scrypt及其他两个相比，Argon2提供了一个用户友好的界面，便于轻松选择时间和内存参数。它也是一个简单的设计，内部仅使用哈希函数BLAKE2，而不是所有加密学设计的组合。
- en: See [*bcrypt*](#bcrypt), [*scrypt*](#scrypt), [*PBKDF2 (Password-Based Key Derivation
    Function 2)*](#PBKDF2-Password-Based-Key-Derivation-Function-2).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [*bcrypt*](#bcrypt), [*scrypt*](#scrypt), [*PBKDF2 (基于密码的密钥派生函数 2)*](#PBKDF2-Password-Based-Key-Derivation-Function-2)。
- en: ARX (Add-Rotate-XOR)
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARX（加法-旋转-异或）
- en: An abbreviation that denotes cryptographic algorithms only doing integer additions,
    word bit shifts or rotations, and XORs (as opposed to, for example, algorithms
    using S-boxes). It was coined by cryptography and security researcher Ralf-Philipp
    Weinmann in 2009\.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一种缩写，表示加密算法仅进行整数加法、字节位移或旋转，以及异或操作（与例如使用S盒的算法相对）。这个术语是由加密学和安全研究员Ralf-Philipp
    Weinmann在2009年提出的。
- en: ASIACRYPT
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASIACRYPT
- en: Asia’s top academic cryptography conference, held every autumn in a different
    location in the Asia-Pacific region since 1990\. The only IACR conference that
    includes *IACR* as a substring of its name. Researchers present peer-reviewed
    research papers with titles such as “Structure-Preserving and Re-Randomizable
    RCCA-Secure Public Key Encryption and Its Applications”and “Cryptanalysis of GSM
    Encryption in 2G/3G Networks Without Rainbow Tables.”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 亚洲顶级的学术加密学会议，自1990年以来每年秋季在亚太地区不同地点举行。唯一一场名称中包含*IACR*子串的IACR会议。研究人员会展示经过同行评审的研究论文，标题如“结构保持和可重随机化的RCCA安全公钥加密及其应用”和“2G/3G网络中GSM加密的密码分析，未使用彩虹表”。
- en: See [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt), [*FSE*](#FSE-Fast-Software-Encryption),
    [*PKC*](#PKC), [*Real World Crypto*](#Real-World-Crypto-RWC), [*TCC*](#TCC).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems)，[*CRYPTO*](#CRYPTO)，[*Eurocrypt*](#Eurocrypt)，[*FSE*](#FSE-Fast-Software-Encryption)，[*PKC*](#PKC)，[*Real
    World Crypto*](#Real-World-Crypto-RWC)，[*TCC*](#TCC)。
- en: Asymmetric cryptography
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非对称加密
- en: See [*Public-key cryptography*](#Public-key-cryptography).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*公钥加密*](#Public-key-cryptography)。
- en: Attack
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击
- en: In the context of cryptanalysis, the demonstration of a technique, described
    as an algorithm, that violates a security claim made by the designers of the primitive
    or protocol attacked.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码分析的上下文中，展示一种技术，通常描述为一种算法，它违反了攻击的原始协议或原语的设计者所做的安全声明。
- en: Attribute-based encryption (ABE)
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于属性的加密（ABE）
- en: A generalization of identity-based encryption from one attribute (the identity)
    to more than one. It allows you to encrypt a message not to a given recipient,
    but to a set of attributes in such a way that only parties satisfying a valid
    combination of attributes can decrypt the message.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一种身份基础加密的泛化，扩展从一个属性（身份）到多个属性。它允许你加密一条信息，不是加密给某个特定的接收者，而是加密给一组属性，以使得只有满足有效属性组合的方可以解密该信息。
- en: ABE sounds powerful but hasn’t found many real applications. Allegedly, the
    reason is due to its relatively complex construction (using elliptic-curve pairings)
    and the need for a trusted third party (holding the master key needed to generate
    private keys).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 属性基础加密（ABE）听起来很强大，但尚未找到许多实际应用。据称，原因是其相对复杂的构造（使用椭圆曲线配对）以及需要一个受信任的第三方（持有生成私钥所需的主密钥）。
- en: See [*Identity-based encryption*](#Identity-based-encryption).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*基于身份的加密*](#Identity-based-encryption)。
- en: Authenticated cipher
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证密码
- en: See [*AEAD*](#AEAD-authenticated-encryption-with-associated-data-).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*AEAD*](#AEAD-authenticated-encryption-with-associated-data-)。
- en: Axolotl
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阿克苏洛尔（Axolotl）
- en: The original name of the Signal application’s end-to-end messaging protocol.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Signal应用的端对端消息传递协议的原始名称。
- en: See [*Signal protocol*](#Signal-protocol).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Signal协议*](#Signal-protocol)。
- en: B
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: B
- en: Backdoor
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后门
- en: A covert feature to bypass an algorithm or protocol’s security. Trapdoors are
    known by users to exist; backdoors usually are not. A backdoor was once defined
    as *a feature or defect that allows surreptitious access to data*. A good backdoor
    must be undetectable, NOBUS (no-one-but-us, or exclusively exploitable by its
    architects), reusable, unmodifiable, and deniable.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一种绕过算法或协议安全性的隐蔽特性。陷门是用户已知存在的；后门通常不是。后门曾被定义为*允许偷偷访问数据的特性或缺陷*。一个好的后门必须是不可检测的、NOBUS（仅限我们，或仅由其设计者利用）、可重用、不可修改并且可以否认的。
- en: For these reasons, backdoors in cryptographic algorithms are difficult to design
    and are more easily added in implementations, especially when the internal logic
    isn’t open and hard to deobfuscate. The NSA backdoor in Dual_EC_DRBG is a notable
    exception. Unfortunately, the most interesting research about backdoors isn’t
    presented at IACR conferences.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些原因，密码算法中的后门设计困难，并且更容易在实现中加入，尤其是在内部逻辑不公开且难以去混淆时。NSA在Dual_EC_DRBG中的后门是一个显著例外。不幸的是，关于后门的最有趣的研究并未在IACR会议上展示。
- en: Backtracking resistance
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回溯抵抗
- en: Term notably used by NIST to refer to a notion similar to forward secrecy. The
    opposite of prediction resistance.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 术语由NIST特别使用，指的是类似于前向保密的概念。它是预测抵抗的对立面。
- en: See [*Forward secrecy*](#Forward-secrecy).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*前向保密*](#Forward-secrecy)。
- en: Backward secrecy
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后向保密
- en: 'The opposite of forward secrecy: backward secrecy is the property that if an
    attacker compromises some secret values, future messages remain protected. If
    an entire system’s state is compromised—­including long-term and short-term keys
    as well as any secret state or counter—backward secrecy is often impossible. An
    exception is pseudorandom generators, where uncertainty can be brought into the
    system via reseeding from reliable entropy sources, preventing an attacker from
    determining future output bits from a past snapshot of the system. In the context
    of secure messaging, some models assume that an attacker would compromise only
    certain sets of keys, but not necessarily the entire local secret state: in this
    case, some form of backward secrecy might be guaranteed.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与前向保密性相对的概念：后向保密性是指当攻击者泄露某些秘密值时，未来的消息仍然能够得到保护。如果一个系统的整个状态被破坏——包括长期和短期的密钥以及任何秘密状态或计数器——后向保密性通常是不可能的。一个例外是伪随机生成器，通过从可靠的熵源中重新播种，可以将不确定性引入系统，从而防止攻击者从系统的过去快照中推测未来的输出位。在安全消息传递的上下文中，一些模型假设攻击者只会泄露某些密钥集，而不一定是整个本地秘密状态：在这种情况下，某种形式的后向保密性可能会得到保证。
- en: See [*Forward secrecy*](#Forward-secrecy).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*前向保密性*](#Forward-secrecy)。
- en: Base64
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Base64
- en: Not encryption.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 不是加密。
- en: BassOmatic
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BassOmatic
- en: A cipher initially designed by Phil Zimmermann, the creator of PGP, to encrypt
    data in PGP. It was found to be insecure and replaced by IDEA in 1991\. As Zimmermann
    commented in the source code, “BassOmatic gets its name from an old Dan Aykroyd
    *Saturday Night Live* skit involving a blender and a whole fish. The BassOmatic
    algorithm does to data what the original BassOmatic did to the fish.”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一种最初由PGP的创始人Phil Zimmermann设计的密码，用于加密PGP中的数据。它被发现不安全，并在1991年被IDEA替代。正如Zimmermann在源代码中评论的那样，“BassOmatic这个名字来自Dan
    Aykroyd的一个老*星期六夜现场*小品，里面有一个搅拌机和一条整鱼。BassOmatic算法对数据的处理，就像原始的BassOmatic对鱼所做的那样。”
- en: BB84
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BB84
- en: The first quantum key distribution (QKD) construction. It was described by Bennett
    and Brassard in 1984 and was based on ideas from the concept of quantum money,
    introduced a year earlier.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个量子密钥分发（QKD）方案。由Bennett和Brassard于1984年描述，基于一年前提出的量子货币概念。
- en: bcrypt
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bcrypt
- en: 'A hash algorithm: it doesn’t encrypt. Defined to address the obsolescence of
    the 1976 crypt utility in the 1999 paper “A Future-Adaptable Password Scheme.”
    In this paper, the authors made the following prediction: “Failing a major breakthrough
    in complexity theory, these algorithms should allow password-based systems to
    adapt to hardware improvements and remain secure 20 years into the future.”'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希算法：它不进行加密。为了应对1976年加密工具的过时问题，在1999年的论文《未来适应的密码方案》中定义了这一算法。在这篇论文中，作者做出了以下预测：“除非复杂性理论出现重大突破，否则这些算法应该允许基于密码的系统适应硬件改进，并在未来20年内保持安全。”
- en: You can argue that this prophecy was accurate, because you can tune bcrypt to
    be slow enough to defeat password cracking. On the other hand, bcrypt’s 4KB memory
    usage is now too low to prevent efficient cracking.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说这个预言是准确的，因为你可以调整bcrypt的速度，使其足够慢，从而抵御密码破解。另一方面，bcrypt的4KB内存使用现在过低，无法有效防止破解。
- en: Biclique cryptanalysis
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双重团体密码分析
- en: An attack against cryptographic algorithms that works by searching for bicliques.
    In graph theory, a clique is a subset of nodes that are all connected to each
    other. A biclique is composed of two subsets of nodes; each node from the first
    subset is connected to all nodes from the second.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一种针对加密算法的攻击，通过搜索双重团体来实现。在图论中，团体是指所有节点彼此相连的节点子集。双重团体由两个节点子集组成；第一个子集中的每个节点与第二个子集中的所有节点相连。
- en: This concept was applied to refine differential attacks on AES and lead to attacks
    that, in theory, perform fewer operations than a brute-force search (2^(126) instead
    of 2^(127)). The bicliques used in this context are composed of a first set of
    bits from the internal state, a second set of bits from the ciphertext, and dependencies
    between these two sets conditioned by key bits. The idea of the attack is then
    to identify certain bits of the key as those for which the biclique conditions
    are satisfied (in terms of XOR differences).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念被应用于改进对AES的差分攻击，并导致了理论上执行比暴力搜索更少操作的攻击（2^(126) 而非 2^(127)）。在这种情况下使用的双重团体是由来自内部状态的一组位、来自密文的第二组位以及这两组位之间由密钥位条件化的依赖关系组成。攻击的思想是识别出某些密钥位，它们满足双重团体条件（在异或差异方面）。
- en: BIKE (Bit Flipping Key Encapsulation)
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BIKE（位翻转密钥封装）
- en: 'Sounds like SIKE: also a KEM; also post-quantum, but based on a decoding problem
    rather than an isogeny problem.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来像 SIKE：也是一种 KEM；也是后量子加密，但基于解码问题，而非同伦问题。
- en: See [*SIKE (Supersingular Isogeny Key Encapsulation)*](#SIKE-Supersingular-Isogeny-Key-Encapsulation).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*SIKE（超奇异同伦密钥封装）*](#SIKE-Supersingular-Isogeny-Key-Encapsulation)。
- en: BIP (Bitcoin improvement proposal)
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BIP（比特币改进提案）
- en: 'A misleading name, because the most famous BIPs are no longer just proposals
    but de facto standards that apply to more cryptocurrencies than just Bitcoin.
    These BIPs include:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 误导性的名称，因为最著名的 BIP 已不再仅仅是提案，而是实际上已成为标准，适用于比特币以外的更多加密货币。这些 BIP 包括：
- en: BIP 32, which defines a tree-based mechanism to derive key pairs and addresses
    from a secret seed to create wallets of multiple accounts from a single secret
    value.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BIP 32 定义了一种基于树形结构的机制，用于从一个秘密种子推导出密钥对和地址，从而通过一个单一的秘密值创建多个账户的钱包。
- en: BIP 44, which assigns semantics to BIP 32 tree levels and defines a syntax for
    paths within this tree (consisting of purpose, coin type, account, address type,
    and address index).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BIP 44 定义了 BIP 32 树级别的语义，并为树内路径的语法定义了格式（包括目的、币种类型、账户、地址类型和地址索引）。
- en: BIP 39, which defines a representation of a secret value as a high- entropy
    list of dictionary words, or mnemonic, which is then hashed to a seed that will
    be the root of a BIP 32 hierarchy of accounts.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BIP 39 定义了将一个秘密值表示为高熵的字典单词列表或助记词，随后将其哈希为种子，该种子将成为 BIP 32 账户层级的根。
- en: Bit Gold
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特黄金
- en: The closest predecessor of Bitcoin.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的最接近前身。
- en: Bitcoin
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币
- en: An experiment that went out of control, for better or for worse.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一个失控的实验，无论是好是坏。
- en: Black
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黑色
- en: NSA jargon referring to encrypted values. A black key is an encrypted key that
    uses, for example, a key wrapping mechanism so that it can be safely distributed
    on lower-security-level systems or networks. In the context of data-at-rest protection,
    black data is classified data that has been encrypted twice using appropriate
    encryption layers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: NSA 行话，指加密的值。黑色密钥是一种加密密钥，使用例如密钥包装机制进行加密，从而可以在低安全性级别的系统或网络上安全分发。在静态数据保护的上下文中，黑色数据是已加密的机密数据，并且使用适当的加密层进行了两次加密。
- en: See [*EKMS (Electronic Key Management System)*](#EKMS-Electronic-Key-Management-System).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*EKMS（电子密钥管理系统）*](#EKMS-Electronic-Key-Management-System)。
- en: BLAKE
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLAKE
- en: A hash function submitted to the SHA-3 competition in 2008\. It was one of five
    finalists but wasn’t selected (the winner was Keccak). BLAKE reuses the permutation
    of the ChaCha stream cipher with rotations done in the opposite directions. Some
    have suspected an advanced optimization, but in fact it originates from a typo
    in the original BLAKE specifications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 提交到 2008 年 SHA-3 竞赛中的哈希函数。它是五个决赛选手之一，但未被选中（最终获胜者是 Keccak）。BLAKE 重用了 ChaCha 流密码的置换操作，并且旋转方向相反。有人怀疑这是一种高级优化，但事实上，它源自原始
    BLAKE 规范中的一个打字错误。
- en: BLAKE2
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLAKE2
- en: An evolution of BLAKE proposed shortly after the end of the SHA-3 competition
    in 2012\. It was adopted in many software applications because it’s faster than
    SHA-2 and SHA-3\. Several cryptocurrencies’ proof-of-work systems use BLAKE2.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: BLAKE 的演变版本，提出于 2012 年 SHA-3 竞赛结束后不久。由于其比 SHA-2 和 SHA-3 更快，它被广泛应用于许多软件中。几个加密货币的工作量证明系统使用
    BLAKE2。
- en: BLAKE3
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLAKE3
- en: A hash function that combines a reduced-round BLAKE2 and a Merkle tree construction,
    making it significantly faster than BLAKE2\. BLAKE3 was announced at the Real
    World Crypto 2020 conference.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一种结合了简化版 BLAKE2 和梅克尔树构建的哈希函数，使其比 BLAKE2 更快。BLAKE3 于 2020 年 Real World Crypto
    大会宣布。
- en: Bleichenbacher attack
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bleichenbacher 攻击
- en: The epitome of a padding oracle attack. Discovered in 1998 by Daniel Bleichenbacher,
    this is an adaptive chosen-ciphertext attack against the PKCS#1 v1.5 RSA encryption
    method. Ironically, Bleichenbacher’s attack exploits safeguards against other
    attacks (the mandatory padding bytes) to craft another attack, which after a few
    million chosen-ciphertext queries allows an attacker to recover a ciphertext’s
    plaintext.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 填充 oracle 攻击的典型案例。由 Daniel Bleichenbacher 于 1998 年发现，这是一种针对 PKCS#1 v1.5 RSA
    加密方法的自适应选择密文攻击。具有讽刺意味的是，Bleichenbacher 的攻击利用了其他攻击的防护措施（强制填充字节）来制造另一种攻击，经过数百万次选择密文查询后，攻击者可以恢复密文的明文。
- en: Blind signature
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐形签名
- en: 'A signature scheme where the signer (knowing the private key) creates a signature
    without knowing the number signed in a way that randomizes the value that the
    private key operation is applied to. This is clearer in the straightforward RSA
    blind signature construction: instead of using *md* mod *N*, the signer computes
    *s*[0] = *m*[0]^(*d*) where *m*[0] = (*m* · *r*^(*e*)) mod *N* where *r* is some
    random value. You can then get the real signature of *m* by dividing *s*[0] by
    *r*. Details are left as an exercise for you to complete.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: This construction might look familiar because it’s the same trick the blinding
    defense uses against side-channel attacks to prevent attackers from controlling
    the data the private-key operation processes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Block cipher
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A cipher that transforms a block of data to another block of the same length
    with a key as a parameter. It must be possible to decrypt the block. So the block
    cipher operation must be bijective (that is, one-to-one and reversible). That’s
    why block ciphers are also *keyed permutations* or *pseudorandom permutations*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: To encrypt more than a single block, which is usually a 64-bit or 128-bit chunk,
    you need to use a mode of operation (using the ECB mode is usually a bad idea,
    CBC is better, and CTR or SIV might be even better).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both a curse and a blessing to cryptography. Comparable to when a subculture
    goes mainstream and its pioneers miss the old days, and sadly and bitterly contemplate
    the newly acquired wealth of those who might not deserve it the most.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Blockcipher
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternative spelling of block cipher, introduced in research papers by Phillip
    Rogaway.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Blowfish
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most popular block ciphers in the 1990s. It owes its recognition
    to its memorable name and to its designer Bruce Schneier.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: BLS (Boneh-Lynn-Shacham) signature
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A signature scheme that leverages elliptic-curve pairings, allowing signatures
    to be shorter than ECDSA and Schnorr signatures. The reason is that each signature
    consists of a single group element. That is, for a similar security level as a
    512-bit ECDSA signature, a BLS signature would be only 256 bits long.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: BLS signatures have the useful property of supporting aggregation, whereby multiple
    public keys and signatures can be combined into a single public key and a single
    signature, and batch verification can be done efficiently.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Combined with distributed key generation, you can use BLS signatures to build
    threshold signature schemes, which proved useful in cryptocurrency applications
    to distribute transaction signatures.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Bob
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subversive stockbroker and Alice’s co-conspirator.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: See [*Alice*](#Alice).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Boolean function
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A function whose arguments are binary values (that is, either 0 or 1), and that
    returns a single 0 or 1 bit. For example, *f*(*a*, *b*, *c*) = *a* + *b* + *ac*
    + *bc* + 1, where *a*, *b*, and *c* are binary values, is a Boolean function.
    Here, the plus sign behaves like XOR (because there are only 0s and 1s in Boolean
    functions), and *ab* means *a* times *b*, which is equivalent to a logical AND
    operation (giving 1 if and only if *a* = *b* = 1).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，其参数是二进制值（即 0 或 1），并返回一个单独的 0 或 1 位。例如，*f*(*a*, *b*, *c*) = *a* + *b* +
    *ac* + *bc* + 1，其中 *a*、*b* 和 *c* 是二进制值，是一个布尔函数。这里，+ 符号表示 XOR 运算（因为布尔函数中只有 0 和
    1），而 *ab* 表示 *a* 乘以 *b*，等价于逻辑与运算（当且仅当 *a* = *b* = 1 时，结果为 1）。
- en: Boomerang attack
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回旋镖攻击
- en: A differential cryptanalysis technique in which you first *throw* a pair of
    plaintexts with a given difference into the cipher. You then obtain two ciphertexts
    and set another difference in these two ciphertexts to obtain two new ciphertexts.
    Finally, you *catch* the plaintexts obtained by decrypting them. The boomerang
    attack is essentially a trick to exploit differential characteristics that only
    cover part of the cipher.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一种差分密码分析技术，首先将一对具有给定差异的明文输入到密码中。然后你获得两个密文，并在这两个密文中设置另一个差异，从而获得两个新的密文。最后，你通过解密这些密文来*捕获*得到的明文。回旋镖攻击本质上是一种利用只覆盖部分密码的差分特性的小技巧。
- en: BQP (bounded-error quantum polynomial time)
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BQP（有界错误量子多项式时间）
- en: The class of problems that quantum algorithms, and therefore a hypothetical
    quantum computer, can efficiently solve. BQP contains problems that classical
    computers can solve efficiently but also problems that today’s computers cannot.
    The latter are problems for which a superpolynomial quantum speedup exists.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 量子算法能够有效解决的一类问题，因此，假设存在量子计算机，它能够高效解决这类问题。BQP 包含经典计算机也能高效解决的问题，但也包含目前计算机无法解决的问题。后者是指存在超多项式量子加速的问题。
- en: Braid group cryptography
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编织群密码学
- en: An attempt to build a new type of public-key cryptography using noncommutative
    groups of elements. Such elements can be viewed as braids with a fixed number
    of strands, and group operations are computationally efficient. As a side benefit,
    braid group cryptosystems were expected to be resistant to quantum algorithms.
    But none of the proposed key agreement schemes proved very cryptographically valuable
    due to their insufficient security.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试构建一种使用非交换群元素的新型公钥密码学的方法。这些元素可以视为具有固定数量股线的编织，且群操作在计算上是高效的。作为附加好处，编织群密码系统预计能抵抗量子算法。但由于安全性不足，提出的密钥协商方案在密码学上并未显示出很大的价值。
- en: Brainpool curves
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Brainpool 曲线
- en: Elliptic curves designed by the German Federal information security authority
    (*Bundesamt für Sicherheit in der Informationstechnik*, or BSI). Brainpool curves
    have some suboptimal security properties, but unlike other standards, they provide
    a 512-bit curve (rather than a 521-bit one).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由德国联邦信息安全局（*Bundesamt für Sicherheit in der Informationstechnik*，简称 BSI）设计的椭圆曲线。Brainpool
    曲线具有一些次优的安全性特征，但与其他标准不同，它们提供了一个 512 位的曲线（而不是 521 位）。
- en: Break-in recovery
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入侵恢复
- en: A notion similar to backward secrecy and indistinguishable from future secrecy.
    The term was coined in the context of the Signal protocol.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 与后向保密性和不可区分未来保密性相似的概念。该术语是在 Signal 协议的背景下提出的。
- en: See [*Backward secrecy*](#Backward-secrecy).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*后向保密性*](#Backward-secrecy)。
- en: Broadcast encryption
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播加密
- en: A type of encryption where the same ciphertext is broadcast to a set of receivers
    so only authorized ones can decrypt it, and receivers can be revoked to no longer
    decrypt it. Challenges of broadcast encryption are to be secure against collusion
    of receivers and to minimize ciphertext and keys’ lengths.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一种加密方式，其中相同的密文会广播给一组接收者，只有授权的接收者能够解密，且接收者可以被撤销，从而无法再解密。广播加密的挑战在于防止接收者之间的串通，并最小化密文和密钥的长度。
- en: Brute-force attack
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暴力破解攻击
- en: A type of attack that attempts to recover a secret by consecutively trying all
    the possible values of that secret. You can start a brute-force attack against
    most ciphers. But as long as the secret is long enough, the attack will never
    terminate (unless you’re impossibly lucky), because there are too many values
    to try.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一种攻击方式，试图通过连续尝试该秘密的所有可能值来恢复秘密。你可以对大多数密码发起暴力破解攻击。但只要秘密足够长，攻击将永远不会结束（除非你非常幸运），因为需要尝试的值太多。
- en: Bulletproof
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bulletproof
- en: A zero-knowledge proof proposed as an efficient range proof for cryptocurrencies.
    The major advantage of bulletproofs is that they don’t require a trusted setup.
    Specifically, they don’t need an initialization of the parameters, or *rules of
    the game*, which must be trusted for the protocol to be secure. Bulletproofs are
    notably used in Monero.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: See [*Range proof*](#Range-proof).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Byzantine fault tolerance
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An umbrella term for a class of consensus protocols that don’t directly rely
    on mining and proof-of-something. pBFT (and variants thereof) and Tendermint are
    such protocols; they work by having a fixed number of hosts working together to
    reliably maintain a common state while distributing trust across hosts.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: C
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CAESAR
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Competition for Authenticated Encryption: Security, Applicability, and
    Robustness, a non-NIST cryptographic competition that took place from 2014 to
    2019\. Partially funded by but not supervised by NIST, CAESAR identified new authenticated
    ciphers for several use cases, including *lightweight applications (resource constrained
    environments)*, *high-performance applications*, and *defense in depth*.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Caesar’s cipher
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ancient cipher that encrypts a message by shifting each of its letters by
    three positions, so ABC becomes EFG, CAESAR becomes FDHVDU, and so on. Needless
    to say, Caesar’s cipher isn’t very secure.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: CAVP (Cryptographic Algorithm Validation Program)
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NIST’s process to assess that an algorithm’s implementation conforms to the
    standard specification of that algorithm. Prerequisite of a cryptographic module’s
    validation through CMVP in the context of FIPS 140-2 certification. CAVP is essentially
    about checking test vectors, whereas CMVP covers the other FIPS 140-2 evaluation
    criteria.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: See [*CMVP (Cryptographic Module Validation Program)*](#CMVP-Cryptographic-Module-Validation-Program),
    [*FIPS 140-2*](#FIPS-140-2).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: CBC (cipher block chaining)
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A mode of operation for block ciphers that has nothing to do with blockchains.
    CBC encrypts a series of blocks *P*[i]to ciphertext blocks *C*[i]by computing
    *C*[i]= Enc(*K*, *P*[i]⊕*C*[i][–1]), for *i* = 1, . . . , *n*. The initial value
    of (IV) is *C*[0],which should be unpredictable to guarantee semantic security.
    CBC has the useful property that decryption is parallelizable (whereas encryption
    isn’t). Unfortunately, CBC is vulnerable to padding oracle attacks.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: CECPQ (combined elliptic-curve and post-quantum)
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hybrid key agreement scheme including an elliptic-curve and a post-quantum
    scheme. CECPQ was developed by Google as a way to hedge TLS connections against
    the risks of quantum computing.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The first version, CECPQ1, combined X25519 with the lattice-based scheme NewHope,
    and was deployed in 2016 for a few months in the Chrome Canary browser. Announced
    in 2019, CECPQ2 replaces NewHope with the NTRU-based scheme HRSS, and the variant
    CECPQ2b uses the isogeny-based scheme SIKE.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Cellular automata
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Useless in cryptography. It’s a source of many bad papers.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Ceremony
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A procedure during which important keys, secrets, or sensitive parameters are
    generated. A ceremony includes procedural and technical security controls to provide
    assurance about the keys’ secure generation and backup—and thus about the software,
    hardware, processes, and people involved. It’s more than picking an acceptable
    PRNG, which is actually the easiest part. For example, a ceremony involves participants
    with well-defined roles (such as auditors and operators), a predefined sequence
    of operations (known as a script or storybook), and the writing of detailed minutes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在生成重要密钥、机密或敏感参数时的程序。仪式包括程序性和技术性的安全控制，确保密钥的安全生成和备份——从而确保相关的软件、硬件、流程和人员的安全。它不仅仅是选择一个合适的伪随机数生成器（PRNG），事实上，这其实是最简单的一部分。例如，仪式涉及参与者的明确角色（如审计员和操作员），预定的操作顺序（称为脚本或故事书），以及详细记录会议纪要。
- en: Ceremonies are typically held to generate root keys of certificate authorities
    or master keys (seeds) of blockchain wallets in financial institutions. They are
    then called *key ceremonies*. Ceremonies can also be called *trusted setups* when
    they aim to generate parameters of a zero-knowledge proof system.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 仪式通常用于生成证书颁发机构的根密钥或金融机构区块链钱包的主密钥（种子）。这些被称为*密钥仪式*。当仪式的目的是生成零知识证明系统的参数时，它们也可以被称为*可信设置*。
- en: Certificate
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证书
- en: The source of many troubles, including encoding formats, parsing bugs, unrenewed
    expired certificates, broken chains, untrusted authorities, self signatures, revocation
    lists, and so on. But often it’s the least-bad solution we have.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 许多问题的根源，包括编码格式、解析错误、未续期的过期证书、断裂链条、不可信的认证机构、自签名、撤销列表等。但通常，它是我们所拥有的最不坏的解决方案。
- en: Certificate authority (CA)
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证书颁发机构（CA）
- en: A trusted third party in public-key infrastructures, or the type of component
    that cryptographers try to avoid but inevitably must live with.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥基础设施中的可信第三方，或者是密码学家尽量避免但又不可避免必须依赖的组件类型。
- en: A CA is the entity you must ultimately trust when verifying the validity of
    a certificate, because the CA can issue certificates as well as intermediate signing
    certificates. If the CA is compromised, it might grant certificates to malicious
    entities to perform phishing or man-in-the-middle attacks.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: CA 是你在验证证书有效性时必须最终信任的实体，因为 CA 可以颁发证书以及中间签名证书。如果 CA 被攻破，它可能会向恶意实体颁发证书，从而进行钓鱼或中间人攻击。
- en: Even some blockchain platforms that claim to be fully decentralized and distributed
    ultimately rely on a CA.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一些宣称完全去中心化和分布式的区块链平台，最终也还是依赖于 CA。
- en: Certificate transparency (CT)
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证书透明度（CT）
- en: A Google initiative that reduces the risk from rogue or compromised CAs by creating
    a public log of certificates being issued. Certificate transparency makes it easier
    for the domain owner to know whether certificates have been issued for their domain.
    CT is a kind of public ledger, but it’s not a blockchain and has been criticized
    by blockchain advocates.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的一项倡议，通过创建一个公开的证书日志，减少来自恶意或被攻破 CA 的风险。证书透明度使得域名拥有者更容易知道是否为其域名颁发了证书。CT 是一种公共账本，但它不是区块链，并且受到了区块链支持者的批评。
- en: ChaCha20
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChaCha20
- en: A variant of the Salsa20 stream cipher that is currently one of the most used
    stream ciphers in the world. This is because it’s supported in recent TLS and
    SSH versions and is the default cipher in many protocols, such as WireGuard.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Salsa20 流密码的一种变种，当前是世界上最常用的流密码之一。这是因为它在最近的 TLS 和 SSH 版本中得到支持，并且在许多协议中作为默认密码，例如
    WireGuard。
- en: CHES (Conference on Cryptographic Hardware and Embedded Systems)
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CHES（加密硬件与嵌入式系统会议）
- en: The most *real-world* conference of all IACR conferences before Real World Crypto
    existed. It’s held every year in a different location. Researchers present peer-reviewed
    research papers with titles such as “Electromagnetic Information Extortion from
    Electronic Devices Using Interceptor, Its Countermeasure”and “Make Some Noise.
    Unleashing the Power of Convolutional Neural Networks for Profiled Side-Channel
    Analysis.”
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 IACR 会议中最*现实世界*的会议，在 Real World Crypto 存在之前。它每年在不同地点举行，研究人员展示同行评审的研究论文，题目如《使用拦截器进行电子设备的电磁信息勒索及其对策》和《制造一些噪声，释放卷积神经网络在剖面侧信道分析中的威力》。
- en: See [*Asiacrypt*](#ASIACRYPT), [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt),
    [*FSE*](#FSE-Fast-Software-Encryption), [*PKC*](#PKC), [*Real World Crypto*](#Real-World-Crypto-RWC),
    [*TCC*](#TCC).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [*Asiacrypt*](#ASIACRYPT), [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt),
    [*FSE*](#FSE-Fast-Software-Encryption), [*PKC*](#PKC), [*Real World Crypto*](#Real-World-Crypto-RWC),
    [*TCC*](#TCC)。
- en: CIA
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CIA
- en: 'The three cardinal principles of information security: confidentiality, integrity,
    and availability. The cryptographer’s version of the principles replaces *availability*
    with *authenticity*.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全的三大基本原则：机密性、完整性和可用性。密码学家版本的原则将*可用性*替换为*真实性*。
- en: Ciphertext stealing
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密文偷取
- en: A technique to encrypt with a block cipher in CBC mode such that the ciphertext
    is of the same bit length as the plaintext. Instead of padding the last plaintext
    block with fixed values, as in PKCS#7 padding, it appends ciphertext bytes from
    the previous blocks to obtain a full block. It also strips off said bytes of the
    previous encrypted block to retain the original message size. This trick only
    works if the message is longer than one block. Standardized by NIST in three different
    versions (CS1, CS2, and CS3), ciphertext stealing is rarely used in practice,
    because most of the time a small overhead is acceptable.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一种使用块密码在CBC模式下加密的技术，使得密文与明文具有相同的比特长度。与PKCS#7填充不同，它并不是用固定值填充最后一个明文块，而是将前一个块的密文字节附加到当前块中以获得完整块。它还会去掉前一个加密块的字节，以保持原始消息的大小。此技巧仅在消息长度大于一个块时有效。NIST已对其进行标准化，分为三个版本（CS1、CS2和CS3），但由于大多数情况下小的开销是可以接受的，密文偷取在实践中很少使用。
- en: Clipper
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Clipper
- en: 'A simple solution proposed for a complex problem: the Clipper chip aimed to
    enable encrypted communications for US citizens and businesses while allowing
    full interception by authorized parties (namely, government and law enforcement).
    Proposed in the early 1990s by the NSA, the Clipper chip was part of a key escrow
    architecture where each chip’s secret keys would also be shared with US Federal
    agencies. This has been called a backdoor, but strictly speaking isn’t really
    one because the door’s existence wasn’t a secret.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 针对复杂问题提出的简单解决方案：Clipper芯片旨在为美国公民和企业提供加密通信的同时，允许授权方（即政府和执法部门）完全拦截。该方案由NSA在1990年代初提出，Clipper芯片是一个密钥托管架构的一部分，每个芯片的秘密密钥也会与美国联邦机构共享。这被称为后门，但严格来说并不算真正的后门，因为这个“门”的存在并不是什么秘密。
- en: In addition to its questionable security architecture, the Clipper chip suffered
    from a poor technical execution and included a number of security flaws, which
    helped its opponents halt the project.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其可疑的安全架构，Clipper芯片还因技术执行不佳，并存在若干安全漏洞，帮助其对手阻止了该项目的推进。
- en: CMVP (Cryptographic Module Validation Program)
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CMVP（加密模块验证计划）
- en: NIST’s process for validating cryptographic modules submitted to the FIPS 140-2
    certification. To be evaluated within CMVP, a cryptographic component must implement
    at least one NIST-standard algorithm.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: NIST用于验证提交至FIPS 140-2认证的加密模块的流程。为了在CMVP中进行评估，一个加密组件必须实现至少一种NIST标准算法。
- en: See [*CAVP (Cryptographic Algorithm Validation Program)*](#CAVP-Cryptographic-Algorithm-Validation-Program),
    [*FIPS 140-2*](#FIPS-140-2).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [*CAVP（加密算法验证计划）*](#CAVP-Cryptographic-Algorithm-Validation-Program), [*FIPS
    140-2*](#FIPS-140-2)。
- en: Code-based cryptography
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于码的密码学
- en: Post-quantum schemes relying on hardness of decoding a linear code with insufficient
    information. Many code-based schemes are variants of the 1978 McEliece construction,
    whose public key describes a random linear code. The encryption process consists
    of encoding a message while adding some errors to the codeword. Decryption is
    possible due to a trapdoor that converts the codeword into another code for which
    decoding is doable.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 后量子方案依赖于解码线性码时信息不足的困难性。许多基于码的方案是1978年McEliece构造的变体，其公钥描述了一个随机线性码。加密过程包括对消息进行编码，同时在码字中加入一些错误。由于存在一个“陷门”，可以将码字转换为另一种可解码的码，因此解密成为可能。
- en: The submission *Classic McEliece* to NIST’s post-quantum competition in 2017
    is almost identical to McEliece’s 1978 scheme.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年提交给NIST后量子竞赛的*经典McEliece*几乎与McEliece1978年的方案相同。
- en: Commitment
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 承诺
- en: Also known as bit commitment, a protocol in which a prover temporarily hides
    a message that cannot be changed. The prover does this by publishing some value
    that doesn’t reveal the value committed (a feature called the *hiding property*)
    and must also prevent the prover from revealing a different value than the one
    committed (called the *binding property*). The term *bit commitment* initially
    referred to coin-flipping protocols in which you commit only one bit. But it’s
    now used for values of any size. The hash values that security people mysteriously
    post on Twitter so they can claim prior discovery of some 0-day vulnerability
    are basic commitments.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 也叫比特承诺，一种协议，证明者暂时隐藏一个不能更改的消息。证明者通过发布某个值来实现这一点，这个值不会揭示被承诺的值（这一特性称为 *隐藏属性*），同时还必须防止证明者透露与承诺值不同的值（称为
    *绑定属性*）。*比特承诺* 这个术语最初指的是硬币翻转协议，其中你只承诺一个比特。但现在它被用来承诺任何大小的值。安全专家神秘地在 Twitter 上发布的哈希值，以便声称先前发现某个
    0-day 漏洞，实际上就是基本的承诺。
- en: Concurrent zero-knowledge
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发零知识
- en: Zero-knowledge proofs secure in concurrent settings, that is, when the attacker
    can observe and disrupt multiple independent executions of the proof protocol.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发环境中安全的零知识证明，即当攻击者可以观察和干扰多个独立执行的证明协议时。
- en: Consensus protocol
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共识协议
- en: An old concept from the field of distributed computing that became cool again
    due to its role in blockchain systems.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一个来自分布式计算领域的古老概念，因其在区块链系统中的作用而重新变得流行。
- en: Control word
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制字
- en: A secret key used to encrypt audio and video content in pay-TV systems. This
    key is 48 bits long in legacy systems, 64 bits long in less old ones, and 128
    bits long in the latest generation. Although 48 bits might seem ridiculously short,
    when the key is changed every 5 or 10 seconds, it can be long enough.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 用于加密付费电视系统中音频和视频内容的密钥。这个密钥在旧版系统中为 48 位，在较新的系统中为 64 位，在最新一代系统中为 128 位。尽管 48 位可能看起来非常短，但当密钥每
    5 或 10 秒更换一次时，它就足够长了。
- en: COPACOBANA (Cost-Optimized PArallel COde Breaker)
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: COPACOBANA（成本优化并行代码破解器）
- en: An academic proof of concept of an FPGA-based DES cracker. Created in approximately
    2007, COPACOBANA is capable of breaking a 56-bit DES key within a week in a cost-effective
    way.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一种基于 FPGA 的 DES 破解器的学术概念验证。COPACOBANA 于大约 2007 年创建，能够以具有成本效益的方式在一周内破解 56 位的
    DES 密钥。
- en: Cothority (collective authority)
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cothority（集体权威）
- en: A framework for creating decentralized protocols where an operation involves
    multiple parties so none has greater authority than the others. You can use cothorities
    to perform operations, such as threshold signature, consensus, or distributed
    public randomness generation. Although it sounds very blockchain-y, few blockchains
    have used cothorities.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建去中心化协议的框架，其中一个操作涉及多个参与方，因此没有哪个参与方的权力大于其他方。你可以使用 cothorities 执行操作，例如门限签名、共识或分布式公共随机数生成。虽然听起来非常像区块链，但很少有区块链使用
    cothorities。
- en: Cryptanalysis
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码分析
- en: The practice of analyzing cryptographic algorithms to break them—that is, violate
    their security assumptions—or to understand why they cannot be broken.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 分析密码学算法以破解它们的实践——也就是说，破坏它们的安全假设——或者理解为什么它们无法被破解。
- en: Cryptids
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 神秘生物
- en: Animals like bigfoots, unicorns, the Kraken, or the Mongolian death worm. As
    rare as good cryptography software.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 像大脚怪、独角兽、克拉肯或蒙古死亡虫这样的动物。它们与优秀的密码学软件一样稀有。
- en: Crypto
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学
- en: Shorthand for cryptography and sometimes for cryptocurrency. Use in the latter
    sense tends to irritate orthodox cryptographers who rally under the banner “crypto
    is for cryptography.”
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学的简称，有时也指代加密货币。后一种用法往往让传统的密码学家感到恼火，他们高举“密码学是为了密码学”的旗帜。
- en: CRYPTO
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学
- en: 'The top academic cryptography conference held every summer since 1981 in Santa
    Barbara, California. Researchers present peer-reviewed papers with titles such
    as “iO Without Multilinear Maps: New Paradigms via Low-Degree Weak Pseudorandom
    Generators and Security Amplification” and “Seedless Fruit Is the Sweetest: Random
    Number Generation, Revisited.”'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1981 年以来每年夏天在加利福尼亚州圣巴巴拉举行的顶级学术密码学会议。研究人员展示经过同行评审的论文，论文标题如“没有多线性映射的 iO：通过低度弱伪随机生成器和安全性增强的新范式”以及“无籽水果最甜：重新审视随机数生成”。
- en: See [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*Eurocrypt*](#Eurocrypt), [*FSE*](#FSE-Fast-Software-Encryption), [*PKC*](#PKC),
    [*Real World Crypto*](#Real-World-Crypto-RWC), [*TCC*](#TCC).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*Eurocrypt*](#Eurocrypt), [*FSE*](#FSE-Fast-Software-Encryption), [*PKC*](#PKC),
    [*Real World Crypto*](#Real-World-Crypto-RWC), [*TCC*](#TCC)。
- en: Crypto AG
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crypto AG
- en: The “Swiss” company known for literally being owned by the CIA and German intelligence
    between 1970 and 1994\. It allowed the agencies to read the secret communications
    of several world governments.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这家“瑞士”公司在1970年至1994年间实际上由CIA和德国情报部门拥有。它使这些机构能够读取多个世界政府的秘密通信。
- en: Crypto period
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密周期
- en: The lifetime of a key in some key management systems, such as the NSA’s EKMS.
    In pay-TV systems, the crypto period is the time during which the same control
    word (that is, the secret key) is used to encrypt audio and video content. Typical
    crypto periods are 5 and 10 seconds. These periods might seem short, but they’re
    not short enough to prevent some control-word sharing attacks, whereby the key
    from one legitimate subscriber is distributed to a large number of pirate boxes.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些密钥管理系统中的密钥生命周期，例如NSA的EKMS。在付费电视系统中，加密周期是指同一控制字（即秘密密钥）用于加密音视频内容的时间。典型的加密周期为5秒和10秒。这些周期看起来很短，但并不短到足以防止某些控制字共享攻击，其中一个合法用户的密钥被分发到大量盗版机顶盒中。
- en: Crypto variable
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密变量
- en: The original name for cryptographic keys in the NSA. It was in use until the
    director of the NSA decided the agency should use the word *key* instead.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: NSA中密码学密钥的原始名称。直到NSA局长决定该机构应该使用“密钥”一词为止。
- en: Crypto wars
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密战争
- en: A bellicose term referring to the open disagreements and debates between the
    US government (and governments of some other Western countries) on the one hand
    and activists, including researchers and privacy advocates, on the other. The
    governments wanted more control and surveillance capabilities, typically via proprietary
    algorithms, export control regulations, key escrow mechanisms, and so on; the
    latter parties pleading in favor of the right to develop and use any cryptographic
    mechanism as a way to support privacy rights.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好战的术语，指的是美国政府（以及一些其他西方国家的政府）与活动家（包括研究人员和隐私倡导者）之间的公开分歧和辩论。一方面，政府希望更多的控制和监视能力，通常通过专有算法、出口管制法规、密钥托管机制等手段；另一方面，活动家则主张支持发展和使用任何密码学机制的权利，以此来支持隐私权。
- en: Cryptobiosis
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐生状态
- en: 'Nothing to do with cryptography but fascinating nonetheless: a near-death state
    that certain living organisms can enter in response to adverse conditions. When
    danger subsides, the organisms can return to their original metabolic state. The
    tardigrade, sometimes used as an allegory for strong cryptography, can enter into
    cryptobiosis.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 与密码学无关，但仍然引人入胜：某些生物体在应对不利条件时可以进入的濒死状态。当危险消退时，这些生物体可以恢复到原来的代谢状态。缓步动物有时被作为强密码学的寓言，可以进入隐生状态。
- en: Cryptocurrency
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密货币
- en: See [*Crypto*](#Crypto).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Crypto*](#Crypto)。
- en: Crypto-Gram
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密简报
- en: The monthly cryptography digest by Bruce Schneier published since 1998.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Bruce Schneier自1998年起每月发布的密码学简报。
- en: Cryptography
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学
- en: See [*Cryptology*](#Cryptology).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Cryptology*](#Cryptology)。
- en: '*Cryptologia*'
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*Cryptologia*'
- en: Probably the oldest scholarly journal about cryptography; published since 1977.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是关于密码学的最古老学术期刊；自1977年以来出版。
- en: Cryptology
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学
- en: See [*Cryptography*](#Cryptography).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Cryptography*](#Cryptography)。
- en: '*Cryptonomicon*'
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*Cryptonomicon*'
- en: A 1,000-page novel that references cryptography on about every other page. It
    was written by Neal Stephenson and was published in 1999\. It’s not very Lovecraftian,
    despite what its title might suggest.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一本1000页的小说，几乎每隔一页就提到密码学。由尼尔·斯蒂芬森（Neal Stephenson）撰写，1999年出版。尽管其标题可能暗示如此，但它并不算特别具洛夫克拉夫特风格。
- en: Unlike other books in which the crypto is mostly made up and laughably unrealistic,
    *Cryptonomicon* relies on historical facts and genuine cryptographic techniques.
    Readers might remember the cipher Solitaire (which Bruce Schneier created for
    the book) and the van Eck phreaking technique.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他大多数字典中的密码学内容虚构且荒谬不现实不同，*Cryptonomicon*依赖于历史事实和真实的密码学技术。读者可能会记得纸牌密码（由Bruce
    Schneier为本书创作）和van Eck窃听技术。
- en: See [*Solitaire*](#Solitaire).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Solitaire*](#Solitaire)。
- en: Cryptorchidism
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐睾症
- en: A condition better kept confidential.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更应该保密的情况。
- en: Cryptovirology
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码病毒学
- en: 'Popularized by the 2004 book *Malicious Cryptography: Exposing Cryptovirology*.
    The book describes cryptovirology as “the dark side of cryptography—that device
    developed to defeat Trojan horses, viruses, password theft, and other cyber-crime
    (. . .) the art of turning the very methods designed to protect your data into
    a means of subverting it.”'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 由2004年书籍*恶意密码学：揭露密码病毒学*推广开来。该书将密码病毒学描述为“密码学的黑暗面——一种为打击木马病毒、密码窃取及其他网络犯罪而开发的设备（...）把用来保护数据的方法转化为颠覆数据的手段的艺术。”
- en: See [*Kleptography*](#Kleptography).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*Kleptography*](#Kleptography)。
- en: CRYPTREC
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRYPTREC
- en: The Japanese government’s Cryptography Research and Evaluation Commit­tees in
    charge of establishing official cryptography recommendations.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 日本政府负责制定官方密码学推荐的密码学研究与评估委员会（CRYPTREC）。
- en: CSIDH (Commutative Supersingular Isogeny Diffie–Hellman)
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSIDH（交换超奇异同构Diffie–Hellman）
- en: Pronounced *seaside*, the oldest isogeny-based scheme, revisited for efficiency.
    Also the only post-quantum scheme to have attracted some interest despite a well-known
    subexponential quantum attack. The proposed parameters “provide relatively little
    quantum security,” in the words of its cryptanalysts; however, its defenders point
    to its unique applications in the post-quantum arena, such as static key exchange.
    It’s not the same as SIDH.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 读作*seaside*，最古老的基于同构的方案，经过效率优化重新审视。也是唯一一个尽管有一个著名的亚指数量子攻击，仍然吸引了一些兴趣的后量子方案。其加密分析师表示，所提议的参数“提供相对较少的量子安全性”；然而，其支持者则指出，它在后量子领域具有独特的应用，如静态密钥交换。它与SIDH不同。
- en: See [*Diffie–Hellman*](#Diffie%E2%80%93Hellman), [*Post-quantum cryptography*](#Post-quantum-cryptography).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*Diffie–Hellman*](#Diffie%E2%80%93Hellman)，[*后量子密码学*](#Post-quantum-cryptography)。
- en: CTF (capture the flag)
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CTF（夺旗赛）
- en: A popular competition in the information security community. In the last 15
    years, the crypto challenges presented in CTFs have evolved from Vigenère ciphers
    and visual puzzles to tasks involving state-of-the-art research. For example,
    participants in the 2020 edition of PlaidCTF had to break an isogeny-based cryptosystem
    (SIDH) and solve a multivariate system of equations.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全社区中流行的一项竞赛。在过去的15年里，CTF（Capture The Flag）中呈现的加密挑战已从维热尼尔密码和视觉谜题发展到涉及前沿研究的任务。例如，2020年PlaidCTF的参赛者需要破解基于同态同构（SIDH）的加密系统，并解开一个多变量方程组。
- en: Cube attack
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 立方体攻击
- en: A type of higher-order differential cryptanalysis technique, described in 2008
    to attack lightweight stream ciphers. The *cube* refers to the combination of
    bits over which to compute the higher-order differential, extending the notion
    of a 3D cube to arbitrary dimensions.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更高阶的差分密码分析技术，2008年被描述用于攻击轻量级流密码。*Cube*（立方体）指的是用于计算高阶差分的位组合，将三维立方体的概念扩展到任意维度。
- en: Curve25519
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Curve25519
- en: 'A reliable alternative to standardized elliptic curves, albeit somewhat clumsily
    named: *25519* doesn’t refer to the number 25519, but to 2^(255) − 19, the number
    of elements in the finite field that Curve25519 is defined over. As a result,
    there are three types of cryptographers: the *twenty-five five nineteen* ones,
    the *two five five nineteen* ones, and the *two five five one nine* ones. Fortunately,
    the curve’s technical design is much better than its name thanks to its parameters
    optimized for speed and safe implementation, as well as its absence of unexplained
    constants, unlike in NIST curves.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准椭圆曲线的可靠替代品，虽然名字有些笨拙：*25519*并不是指数字25519，而是指2^(255) − 19，这是Curve25519定义的有限域中的元素个数。因此，有三种类型的密码学家：*twenty-five
    five nineteen*类型、*two five five nineteen*类型和*two five five one nine*类型。幸运的是，这条曲线的技术设计比它的名字要好得多，因为它的参数经过优化，旨在提高速度并安全实现，而且没有像NIST曲线中那样存在无法解释的常数。
- en: You can use Curve25519 for Diffie–Hellman key agreement, signature, or encryption
    (via ECIES).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Curve25519进行Diffie–Hellman密钥交换、签名或加密（通过ECIES）。
- en: See [*Ed25519*](#Ed25519), [*X25519*](#X25519).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*Ed25519*](#Ed25519)，[*X25519*](#X25519)。
- en: Curve448
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Curve448
- en: A lesser-known little sibling of Curve25519\. It provides 224-bit security instead
    of 128-bit security due to its use of a finite field with 2^(448) − 2^(224) −
    1 elements. Its signature and Diffie–Hellman primitives, Ed448 and X448, are supported
    in TLS 1.3.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: Curve25519的一个鲜为人知的“小兄弟”。由于使用了一个有2^(448) − 2^(224) − 1个元素的有限域，它提供224位的安全性，而不是128位。它的签名和Diffie–Hellman原语，Ed448和X448，已在TLS
    1.3中得到支持。
- en: See [*Curve25519*](#Curve25519).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*Curve25519*](#Curve25519)。
- en: Cypher
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cypher
- en: Alternative spelling of cipher used in pop culture. Its use is considered heresy
    in academic literature.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在流行文化中对“密码”的另一种拼写。在学术文献中使用它被认为是异端。
- en: D
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D
- en: Daemon
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 守护进程
- en: A misspelling of the last name of Joan Daemen, who co-designed AES and SHA-3.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 错误拼写了Joan Daemen的姓氏，他是AES和SHA-3的共同设计者。
- en: Davies–Meyer
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Davies–Meyer
- en: The most common technique to create a compression function from a block cipher
    (or keyed permutation). It’s used, for example, in MD5, SHA-1, and SHA-2\. Instead
    of using the block cipher to encrypt as Enc(*K*, *M*), you use it to compress
    a message block *M* and a hash value *H* to obtain the new hash value Enc(*M*,
    *H*) ⊕*H*, where *M* acts as the cipher’s key. Alone, a compression function is
    a bit useless, but it’s easy to turn it into a proper hash function, using, for
    example, the Merkle–Damgård construction.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 从分组密码（或带有密钥的置换）创建压缩函数的最常见技术。它在MD5、SHA-1和SHA-2中被使用。例如，在这里，分组密码不用于加密`Enc(*K*,
    *M*)`，而是用于压缩消息块*M*和哈希值*H*，从而得到新的哈希值`Enc(*M*, *H*) ⊕ *H*`，其中*M*作为密码的密钥。单独使用时，压缩函数有些无用，但通过例如Merkle–Damgård构造，它可以很容易地转化为一个合适的哈希函数。
- en: In practice, there’s no legitimate reason to build your own hash from a block
    cipher (as an exercise, figure out why it’s a bad idea to do so with AES in Davies–Meyer
    mode); yet the possible use of block ciphers to construct hash functions motivated
    cryptanalysts to investigate known-key and chosen-key attacks.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，没有合理的理由从分组密码构建自己的哈希（作为一个练习，搞清楚为什么用AES在Davies–Meyer模式下构建哈希是个坏主意）；然而，分组密码用于构建哈希函数的可能性促使密码分析师研究已知密钥和选择密钥攻击。
- en: Decentralized private computation
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去中心化私有计算
- en: A combination of trusted execution and private blockchain token transfer.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 可信执行与私有区块链代币转移的结合。
- en: Déchiffrer
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解密
- en: French for *to decrypt* when you have the key.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 法语中表示*解密*，当你拥有密钥时。
- en: Décrypter
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解密
- en: French for *to decrypt* when you don’t have the key and thus must use cryptanalysis.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 法语中表示*解密*，当你没有密钥时，因此必须使用密码分析。
- en: Deniable encryption
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可否认加密
- en: Randomized public-key encryption where the encrypting party, if coerced to reveal
    the plaintext and randomness used, can choose different valid combinations of
    plaintext and randomness, thus preventing self-incrimination.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 一种随机化的公钥加密方法，若加密方被迫揭示明文及使用的随机性，可以选择不同的有效明文和随机性组合，从而防止自我指控。
- en: Deniable encryption can also loosely refer to systems where different keys can
    decrypt to different legitimate-looking plaintexts, again to dissimulate the real
    plaintext.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 可否认加密也可以松散地指那些不同的密钥可以解密为不同的合法明文，从而掩盖真实的明文。
- en: Although motivated by potential real-world problems, deniable encryption is
    usually not the solution to such problems.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管出于潜在现实世界问题的动机，可否认加密通常不是这些问题的解决方案。
- en: DES (Data Encryption Standard)
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DES（数据加密标准）
- en: The first modern block cipher, standardized by NIST’s predecessor, the National
    Bureau of Standards. It’s broken by linear cryptanalysis more efficiently than
    brute force if you can find 2^(43) plaintext/ciphertext pairs. If not, it’s now
    broken by design because of its too short keys.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种现代分组密码，由NIST的前身国家标准局标准化。如果你能找到2^(43)个明文/密文对，它通过线性密码分析比暴力破解更高效。如果找不到，那么由于密钥过短，它现在因设计缺陷而被破解。
- en: Dictionary
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: A worthless book now that the internet exists.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在互联网存在的情况下，这是一本毫无价值的书。
- en: Dictionary attack
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典攻击
- en: An attack that guesses passwords based on a list of words. Passwords have low
    entropy because they’re often composed of dictionary words and common proper nouns.
    An attacker can build a list of candidate passwords, ranked in order of popularity,
    and try them one after another, or in parallel, to find the password that hashes
    to the value they obtained from some password hash database.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一种基于单词列表猜测密码的攻击。由于密码通常由字典单词和常见专有名词组成，它们的熵很低。攻击者可以构建一个候选密码列表，并按受欢迎程度排序，然后逐一尝试，或并行尝试，来找到与从某个密码哈希数据库中获得的值匹配的密码。
- en: Differential cryptanalysis
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 差分密码分析
- en: The class of cryptanalysis techniques that study the propagation of differences
    throughout internal computations to exploit some pattern or statistical bias in
    the output. Most of the attacks on symmetric cryptographic algorithms (block ciphers,
    hash functions, and so on) are some type of differential cryptanalysis.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这一类密码分析技术研究差异在内部计算中的传播，以利用输出中的某些模式或统计偏差。对称密码算法（如分组密码、哈希函数等）的多数攻击都是某种类型的差分密码分析。
- en: The differences exploited might be taken between two input values or between
    more than two, as in higher-order cryptanalysis and its variants (integral cryptanalysis,
    cube attacks, and so on). A related technique, linear cryptanalysis, looks a bit
    different but is ultimately related to differential cryptanalysis. In addition,
    linear attacks often imply the possibility of pure differential attacks.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 被利用的差异可能出现在两个输入值之间，也可能出现在多个输入值之间，如在高阶密码分析及其变种中（积分密码分析、立方体攻击等）。一种相关技术是线性密码分析，它看起来有点不同，但本质上与差分密码分析相关。此外，线性攻击通常暗示着纯差分攻击的可能性。
- en: Diffie–Hellman
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Diffie–Hellman
- en: Lots of people working in cryptography have no deep concern with real application
    issues. They are trying to discover things clever enough to write papers about.
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多从事密码学的人员并未深入关注实际应用问题。他们只是试图发现足够聪明的东西，以便写论文。
- en: ''
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Whitfield Diffie
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —惠特菲尔德·迪菲
- en: A fairly simple mathematical trick that is behind most key agreement protocols,
    and that indirectly powers many more cryptosystems.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相当简单的数学技巧，支撑着大多数密钥交换协议，并间接驱动了许多其他加密系统。
- en: You'll often find security proofs relying on the hardness of the Diffie–Hellman
    problem (given *g*^(*a*) and *g*^(*b*), find *g*^(*ab*)) or variants thereof.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你常常会看到安全证明依赖于Diffie–Hellman问题的难度（给定 *g*^(*a*) 和 *g*^(*b*)，找出 *g*^(*ab*)）或其变种。
- en: The *decisional* Diffie–Hellman problem (DDH) was called a “gold mine” by cryptographer
    Dan Boneh, and was leveraged to build encryption schemes (such as the Cramer–Shoup
    construction) as well as complex protocols such as threshold signature schemes.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '*可决策的* Diffie–Hellman问题（DDH）被密码学家Dan Boneh称为“金矿”，并被用来构建加密方案（如Cramer–Shoup构造）以及复杂的协议，如阈值签名方案。'
- en: See [*New Directions in Cryptography*](#New-Directions-in-Cryptography).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [*密码学的新方向*](#New-Directions-in-Cryptography)。
- en: Disclosure
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息披露
- en: 'More effective when the vulnerability is named with a clever acronym and accompanied
    by a nifty website, including a Q&A and a logo. Researchers first took this approach
    to tell the world about Heartbleed; then they used it to describe subsequent attacks
    on SSL/TLS. This allowed them to better communicate the new vulnerability (and
    spend less time responding to emails from journalists). Notable examples include:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当漏洞通过一个巧妙的缩写名称和一个漂亮的网站来命名，并附带问答和标志时，更为有效。研究人员首先采用这种方法来向世界介绍Heartbleed漏洞；随后他们用它描述对SSL/TLS的攻击。这使得他们能够更好地传达新的漏洞（并花更少的时间回复记者的邮件）。著名的例子包括：
- en: BREACH  Browser Reconnaissance and Exfiltration via Adaptive Compression of
    Hypertext
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: BREACH  通过自适应压缩超文本进行浏览器侦察和信息泄露
- en: CRIME  Compression Ratio Info-leak Made Easy
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRIME  压缩比信息泄漏轻松实现
- en: DROWN  Decrypting RSA with Obsolete and Weakened eNcryption
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DROWN  通过过时和削弱的加密解密RSA
- en: POODLE  Padding Oracle On Downgraded Legacy Encryption
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: POODLE  降级遗留加密的填充Oracle攻击
- en: ROBOT  Return Of Bleichenbacher’s Oracle Threat
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ROBOT  Bleichenbacher’s Oracle威胁的回归
- en: Discrete logarithm problem
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散对数问题
- en: The problem of finding *d* in *y* = *x*^(*d*) mod *p* for a prime *p*, or in
    *dG* = *P* in elliptic-curve groups of points. The discrete logarithm problem
    is now the most important computational problem in cryptography, before factoring,
    because Diffie–Hellman–like protocols have become more common than RSA and Paillier
    cryptosystems.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个质数 *p* 下，求解 *y* = *x*^(*d*) mod *p* 中的 *d*，或在椭圆曲线点群中求解 *dG* = *P* 的问题。离散对数问题如今已成为密码学中最重要的计算问题，超越了因式分解，因为类似Diffie–Hellman的协议已比RSA和Paillier加密系统更为普遍。
- en: Distinguisher
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分器
- en: An algorithm used in attacks against a scheme’s indistinguishability. For example,
    if you find a statistical bias in the output of a pseudo­random generator, that
    bias would serve as a distinguisher, thereby breaking the PRNG.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在攻击方案的不可区分性时使用的算法。例如，如果你发现伪随机生成器输出中的统计偏差，该偏差将作为区分器，从而破解PRNG。
- en: See [*Indistinguishability*](#Indistinguishability).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [*不可区分性*](#Indistinguishability)。
- en: Distributed randomness
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式随机性
- en: Randomness generated by a group of parties that don’t necessarily trust each
    other; therefore, they don’t want any party to be capable of influencing the outcome.
    In this context, a simple protocol such as performing an XOR of each participant’s
    random contribution isn’t secure. The reason is that the last contributor can
    set their value to one that, when XORed with the combination of all previous values,
    produces the result they want to be returned. Publishing commitments in advance
    partially addresses the problem.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 由一组彼此不一定信任的各方生成的随机性；因此，他们不希望任何一方能够影响结果。在这种情况下，像对每个参与者的随机贡献执行异或（XOR）这样的简单协议并不安全。原因在于，最后一个贡献者可以将其值设置为一个值，该值与所有之前值的组合进行异或运算后，得到他们想要返回的结果。提前发布承诺部分解决了这个问题。
- en: Dolev–Yao model
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dolev–Yao模型
- en: 'The first formal model for defining cryptographic protocols. Also a symbolic
    framework for describing and analyzing their security. Cryptographers sometimes
    refer to the Dolev–Yao model when they mean the *active attacker adversarial model*—that
    is, the model wherein the attacker can eavesdrop, intercept, and modify data transmitted.
    But the Dolev–Yao model is more than that: it’s a general symbolic framework to
    describe and analyze protocols’ security.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个用于定义密码学协议的正式模型，也是描述和分析其安全性的符号框架。密码学家有时提到Dolev–Yao模型时指的是*主动攻击者对抗模型*——即攻击者可以窃听、拦截并修改传输的数据的模型。但Dolev–Yao模型不仅仅是这样：它是一个通用的符号框架，用于描述和分析协议的安全性。
- en: Double ratchet
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双重棘轮
- en: A subprotocol of the Signal messaging protocol. It determines each ­message’s
    unique keys in such a way that an attacker who knows the message keys at a given
    time can determine neither past nor future message keys, thereby providing forward
    secrecy and some form of backward secrecy.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 信号消息传递协议的子协议。它以某种方式确定每条消息的唯一密钥，以便一个在给定时间知道消息密钥的攻击者无法确定过去或未来的消息密钥，从而提供前向保密性和某种形式的后向保密性。
- en: See [*Signal protocol*](#Signal-protocol).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Signal协议*](#Signal-protocol)。
- en: Dragonfly
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dragonfly
- en: PAKE defined for the authentication standard EAP-pwd used in the Wi-Fi security
    suite WPA3\. Attackers can bypass implementations of Dragonfly by exploiting the
    timing side channels in the hash-to-curve operations.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: PAKE为Wi-Fi安全套件WPA3中使用的认证标准EAP-pwd定义。攻击者可以通过利用哈希到曲线操作中的时序侧信道，绕过Dragonfly的实现。
- en: See [*PAKE (password-authenticated key agreement)*.](#PAKE-password-authenticated-key-exchange)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*PAKE（密码认证密钥协商）*](#PAKE-password-authenticated-key-exchange)。
- en: DRBG (deterministic random bit generator)
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DRBG（确定性随机比特生成器）
- en: An oxymoronic-sounding term referring to a component that deterministically
    generates a long string of random-looking bits when given some actually random
    value (called a *seed*, a *key*, or sometimes just *entropy*). An operating system’s
    random generator usually includes an entropy extraction mechanism that generates
    some unpredictable bits from some analog source and pushes these bits to an entropy
    pool from which a DRBG takes its seed.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 一个听起来像自相矛盾的术语，指的是一个组件，在给定某些真正随机的值（称为*种子*、*密钥*或有时仅称为*熵*）时，确定性地生成一串看似随机的比特。操作系统的随机生成器通常包括一个熵提取机制，它从某些模拟源中生成一些不可预测的比特，并将这些比特推送到熵池中，DRBG则从中获取其种子。
- en: A DRBG is different from a PRNG; the terms PRBG and DRNG are rarely used.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: DRBG不同于PRNG；PRBG和DRNG这两个术语很少使用。
- en: See [*Pseudorandom generator (PRNG)*](#Pseudorandom-number-generator-PRNG).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*伪随机生成器（PRNG）*](#Pseudorandom-number-generator-PRNG)。
- en: DSA (Digital Signature Algorithm)
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DSA（数字签名算法）
- en: 'The public-key signature scheme designed and patented by the NSA. It was standardized
    as part of the DSS (Digital Signature Standard) in 1991\. This choice drew some
    criticism to which NIST responded as follows in the magazine *Federal Computer
    Week*:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 由NSA设计并专利的公钥签名方案。它于1991年作为DSS（数字签名标准）的一部分被标准化。这个选择引发了一些批评，NIST在《联邦计算周刊》杂志上对此作出了回应：
- en: NIST made the final choice. We obtained technical assistance from NSA, and we
    received technical inputs from others as well, but [NIST] made the final choice.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: NIST做出了最终决定。我们获得了NSA的技术援助，也收到了其他方面的技术输入，但[NIST]做出了最终决定。
- en: At the time, the criticisms of DSA were about its efficiency, incompleteness
    (it didn’t specify a hash function), risk of patent infringement, and security.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，对DSA的批评主要集中在其效率、不完整性（未指定哈希函数）、专利侵权风险和安全性上。
- en: See [*DSS (Digital Signature Standard)*](#DSS-Digital-Signature-Standard).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*DSS（数字签名标准）*](#DSS-Digital-Signature-Standard)。
- en: DSS (Digital Signature Standard)
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DSS（数字签名标准）
- en: The name of the NIST standard about digital signatures; not a single algorithm.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: NIST关于数字签名的标准名称；而不是某个单一的算法。
- en: In 1982, NIST (then called the NBS) published a “Solicitation for Public Key
    Cryptographic Algorithms.” NIST later did the same for block ciphers and hash
    functions, resulting in the AES and SHA-3 standards. In 1987, NIST cancelled the
    DSS project upon request from the NSA. The standardization effort later resumed,
    leading to several standards established in 1991, including the NSA-designed DSA.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 1982年，NIST（当时叫做NBS）发布了“公钥加密算法征集”。后来，NIST也对分组密码和哈希函数进行了类似的操作，最终制定了AES和SHA-3标准。1987年，应NSA的要求，NIST取消了DSS项目。标准化工作随后恢复，并于1991年制定了多个标准，包括NSA设计的DSA。
- en: DSS is also the abbreviation of the sodium trimethylsilylpropane­sulfonate chemical
    compound, which is somehow related to cryptography.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: DSS也是化学化合物三甲基硅烷丙烷磺酸钠（sodium trimethylsilylpropane­sulfonate）的缩写，与密码学某种程度上相关。
- en: DVB-CSA
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DVB-CSA
- en: 'The Common Scrambling Algorithm: an algorithm standardized by the Digital Video
    Broadcasting consortium to protect video content in pay-TV systems, typically
    by encrypting MPEG transport stream packets.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 公共扰频算法：由数字视频广播联盟标准化的算法，用于保护付费电视系统中的视频内容，通常通过加密MPEG传输流数据包来实现。
- en: See [*Control word*](#Control-word).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*控制字*](#Control-word)。
- en: E
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: E
- en: E0
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E0
- en: A stream cipher used in Bluetooth. Broken in theory but not in practice. The
    more recent Bluetooth Low Energy standard uses AES-CCM instead.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 一种用于蓝牙的流加密算法。理论上被攻破，但在实际中并未被破解。较新的蓝牙低能耗标准改用了AES-CCM。
- en: ECB (electronic codebook)
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECB（电子密码本模式）
- en: The most obvious way to use a block cipher, where each block is processed independently
    of the others. ECB is the most robust mode against repeated IVs and nonces. But
    everybody knows ECB is insecure because you can see the penguin.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分组密码的最直观方式，每个分组独立于其他分组进行处理。ECB是抵抗重复IV和随机数最强的模式。但大家都知道ECB不安全，因为你能看到企鹅。
- en: ECC
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECC
- en: An acronym for either elliptic-curve cryptography or error-correcting code,
    depending on the context; confusion between the two can lead to unfortunate situations.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 一个首字母缩写，表示椭圆曲线密码学或纠错码，具体取决于上下文；这两者之间的混淆可能会导致不幸的情况。
- en: See [*Elliptic-curve cryptography*](#Elliptic-curve-cryptography).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*椭圆曲线密码学*](#Elliptic-curve-cryptography)。
- en: ECDLP (Elliptic-curve discrete logarithm problem)
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECDLP（椭圆曲线离散对数问题）
- en: 'Arguably the most important computational problem as far as cryptographic security
    is concerned: given the points *P* and *xP*, find the number *x*, where multiplication
    happens in the group of an elliptic curve over a finite field.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，在密码学安全性方面最重要的计算问题：给定点*P*和*xP*，求出数字*x*，其中乘法在有限域上的椭圆曲线群中进行。
- en: Elliptic-curve schemes have replaced many instances of RSA or classical Diffie–Hellman,
    for example, in the TLS 1.3 standard.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆曲线方案已经取代了许多RSA或经典Diffie–Hellman的应用，例如，在TLS 1.3标准中。
- en: ECDSA (Elliptic-curve DSA)
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECDSA（椭圆曲线数字签名算法）
- en: The elliptic-curve counterpart of DSA, whose security requires the hardness
    of ECDLP, but is not totally equivalent to it. As far as we know, ECDLP’s hardness
    only implies ECDSA’s security (unforgeability) in the generic group model, which
    is an abstraction of ECDSA but not exactly ECDSA.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: DSA的椭圆曲线版本，其安全性依赖于ECDLP的困难性，但并不完全等同于ECDLP。根据我们所知，ECDLP的困难性仅在一般群体模型中暗示ECDSA的安全性（无法伪造性），这个模型是ECDSA的抽象，但不完全等同于ECDSA。
- en: See [*DSA (Digital Signature Algorithm)*](#DSA-Digital-Signature-Algorithm).
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*DSA（数字签名算法）*](#DSA-Digital-Signature-Algorithm)。
- en: ECIES (Elliptic-curve IES)
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECIES（椭圆曲线IES）
- en: The elliptic-curve version of the IES public-key encryption scheme. Like IES,
    ECIES is a hybrid encryption scheme, therefore it needs a symmetric cipher to
    actually encrypt messages.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: IES公钥加密方案的椭圆曲线版本。像IES一样，ECIES是一个混合加密方案，因此它需要对称加密算法来实际加密消息。
- en: See [*IES (Integrated Encryption Scheme)*](#IES-Integrated-Encryption-Scheme).
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*IES（集成加密方案）*](#IES-Integrated-Encryption-Scheme)。
- en: Ed25519
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ed25519
- en: EdDSA signatures using Curve25519’s Edwards representation rather than the Montgomery
    format used by X25519, which causes developers a lot of headaches.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Curve25519的Edwards表示法而不是X25519使用的Montgomery格式的EdDSA签名，这给开发者带来了很多困扰。
- en: See [*Curve25519*](#Curve25519), [*EdDSA*](#EdDSA).
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*Curve25519*](#Curve25519)，[*EdDSA*](#EdDSA)。
- en: EdDSA
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EdDSA
- en: A deterministic elliptic-curve signature scheme based on Schnorr’s scheme. The
    main alternative to the ECDSA standard. In its purest form, it’s resilient to
    non-collision-resistant hash functions and is famously used by Ed25519.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Schnorr方案的确定性椭圆曲线签名方案。ECDSA标准的主要替代方案。它在最纯粹的形式下对非碰撞抗性哈希函数具有韧性，并且广泛应用于Ed25519。
- en: EKMS (Electronic Key Management System)
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EKMS（电子密钥管理系统）
- en: A legacy key management system designed by NSA to secure communications for
    the US Army and other organizations.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 由NSA设计的传统密钥管理系统，用于保护美国军队及其他组织的通信安全。
- en: Electronic codebook
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子密码本
- en: 'A cipher, in archaic NSA parlance. For example: “Electronic codebooks, such
    as the Advanced Encryption Standard, are both widely used and difficult to attack
    cryptanalytically.”'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 一种古老的NSA术语中的密码。例如：“电子密码本，如高级加密标准（AES），被广泛使用，并且在密码分析上很难攻击。”
- en: ElGamal
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ElGamal
- en: 'For many years, the only public-key encryption scheme used and taught in crypto
    classes other than RSA. Introduced in the 1985 article “A Public Key Cryptosystem
    and a Signature Scheme Based on Discrete Logarithms,” which modestly started with
    the following abstract:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，除了RSA之外，唯一被使用和教授的公钥加密方案。该方案在1985年《基于离散对数的公钥加密系统和签名方案》一文中被介绍，其中谦虚地开始了以下摘要：
- en: A new signature scheme is proposed together with an implementation of the Diffie–Hellman
    key distribution scheme that achieves a public key cryptosystem. The security
    of both systems relies on the difficulty of computing discrete logarithms over
    finite fields.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 提出了一个新的签名方案，并实现了一个Diffie–Hellman密钥分发方案，从而实现了一个公钥加密系统。这两个系统的安全性都依赖于在有限域上计算离散对数的困难性。
- en: ECDSA eventually overshadowed the signature scheme, and currently, ElGamal encryption
    is rarely used. Instead, cryptographers use ECIES except in applications in which
    the message must be directly public-key-encrypted (as in some e-voting systems).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，ECDSA超越了签名方案，而目前ElGamal加密很少使用。加密学家现在使用ECIES，除非在必须直接使用公钥加密的应用中（如某些电子投票系统中）。
- en: 'The in-the-exponent variant of ElGamal encryption has two interesting properties:
    it is additively homomorphic, and decryption is impossible (unless you solve a
    discrete logarithm problem). Despite the latter suboptimal property, this version
    proved useful in threshold signature schemes.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: ElGamal加密的指数内变体具有两个有趣的特性：它是加法同态的，且解密是不可能的（除非你解决离散对数问题）。尽管后者是一个次优特性，但该版本在门限签名方案中证明了其有用性。
- en: Elligator
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elligator
- en: A method of encoding elliptic-curve points as random-looking strings to make
    public keys indistinguishable from encrypted data.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 一种将椭圆曲线点编码为看似随机的字符串的方法，使得公钥无法与加密数据区分。
- en: Elliptic curve
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 椭圆曲线
- en: Not an ellipsis, not a curved line. A set of points on the plane whose (*x*,
    *y*) coordinates satisfy the curve’s equation, which usually has the form *y*²
    = *x*³ + *ax* + *b*, where *a* and *b* are fixed parameters. Crypto­graphic applications
    only work with points whose coordinates belong to some finite field; therefore,
    the curve has a finite set of points.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 不是省略号，也不是弯曲的线。平面上满足曲线方程的（*x*，*y*）坐标的点集，通常该方程的形式为 *y*² = *x*³ + *ax* + *b*，其中
    *a* 和 *b* 是固定的参数。加密应用仅与坐标属于某个有限域的点一起工作；因此，曲线有一个有限的点集。
- en: Elliptic-curve cryptography
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 椭圆曲线加密
- en: Public-key cryptography relying on elliptic curves and related hardness problems
    (the discrete logarithm, or a variant thereof). Elliptic-curve cryptography can
    do almost everything that legacy public-key cryptography can do, in a way that
    is often faster and uses shorter keys. That includes encryption, key agreement,
    and signature. In addition, you can use it for more exotic cryptographic schemes
    due to its support of pairings.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖于椭圆曲线及相关困难问题（离散对数或其变体）的公钥加密技术。椭圆曲线加密技术几乎可以完成传统公钥加密技术的所有功能，而且通常速度更快，使用的密钥更短。这包括加密、密钥协商和签名。此外，得益于其对配对的支持，你还可以将其应用于更复杂的加密方案。
- en: See [*Pairing-based cryptography*](#Pairing-based-cryptography).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*基于配对的加密*](#Pairing-based-cryptography)。
- en: Encipherment
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密
- en: A synonym of encryption with emphasis on the act and operations carried out
    during the encryption process. *To encipher*, like the French verb *chiffrer*,
    comes from the Arabic رفص (*sifr*, the digit zero), whereas *to encrypt*, like
    the verb *crypter*, comes from the Greek *kryptos* (concealed, secret).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 加密的同义词，强调加密过程中进行的行为和操作。*加密*，如同法语动词*chiffrer*，来源于阿拉伯语رفص（*sifr*，数字零），而*加密*（to
    encrypt）则源自希腊语*kryptos*（隐蔽的，秘密的）。
- en: End-to-end encryption (E2EE)
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端加密（E2EE）
- en: Encryption is said to be end-to-end when only the dedicated recipient(s) can
    decrypt the messages. It sounds straightforward but is actually an arduous engineering
    problem.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有指定的接收者能够解密消息时，加密被称为端到端加密。听起来很简单，但实际上是一个艰巨的工程问题。
- en: As usual in cryptography, the hard part of such a system is key management and
    distribution, not the actual encryption, which is why many E2EE systems need a
    central server. Many E2EE systems also rely on trust-but-verify mechanisms and
    are only end-to-end as long as participants perform some manual verification,
    such as checking a conversation’s fingerprint.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 正如加密学中常见的那样，这种系统的难点在于密钥管理和分发，而不是实际的加密过程，这就是为什么许多E2EE系统需要一个中央服务器。许多E2EE系统还依赖于信任但验证的机制，只有在参与者执行一些手动验证时，如检查对话的指纹，才能保证端到端加密。
- en: In addition, E2EE systems sometimes ultimately rely on a central CA to enable
    trusted TLS connections (which you can think of as simply end-to-end encryption
    over the transport layer rather than the application layer).
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，E2EE系统有时最终依赖一个中央证书授权机构（CA）来启用受信任的TLS连接（你可以将其看作是仅在传输层上实现的端到端加密，而非应用层加密）。
- en: Enigma
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恩尼格玛
- en: The electromechanical encryption machine used by the Nazis during World War
    II. The Enigma was analyzed by Polish and British cryptanalysts, including Alan
    Turing, using techniques that researchers would later rediscover and call differential
    cryptanalysis, related-key attacks, and side-channel attacks.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 纳粹在二战期间使用的机电加密机器。恩尼格玛曾被波兰和英国的密码分析师，包括艾伦·图灵，使用后来重新发现的技术进行分析，这些技术后来被称为差分密码分析、相关密钥攻击和旁路攻击。
- en: Entropy
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熵
- en: A notion introduced around 1865 by Rudolf Clausius, arguably the founder of
    modern thermodynamics. But entropy wasn’t named until three years after his first
    formalization of the second law of thermodynamics (which states that entropy,
    at a microscopic level, cannot decrease in a closed system). Claude Shannon’s
    concept of information entropy came much later in his famous 1948 paper. Cryptography
    uses information entropy to assess a cryptosystem’s security by quantifying its
    amount of uncertainty.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这一概念由鲁道夫·克劳修斯于1865年左右提出，被认为是现代热力学的奠基人。然而，熵这一术语直到他首次正式表述热力学第二定律三年后才被命名（该定律指出，在微观层面上，封闭系统内的熵不能减少）。克劳德·香农的信息熵概念则是在1948年他那篇著名的论文中提出的。密码学利用信息熵来评估密码系统的安全性，通过量化其不确定性的程度。
- en: ePrint
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ePrint
- en: Officially the Cryptology ePrint Archive, at [https://eprint.iacr.org/](https://eprint.iacr.org/).
    A website where cryptography researchers can post their papers online prior to
    formal, double-blind, peer-reviewed publication and be sure they’ll be noticed.
    Most cryptography researchers check the new papers published on ePrint at least
    once a week.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 官方称为Cryptology ePrint Archive，网址为[https://eprint.iacr.org/](https://eprint.iacr.org/)。这是一个加密学研究人员可以在线发布论文的站点，论文在正式的双盲同行评审出版之前就可以确保引起关注。大多数加密学研究人员至少每周检查一次ePrint上发布的新论文。
- en: Erathosthenes’ sieve
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 埃拉托斯特尼筛法
- en: A method of enumerating all prime numbers up to some upper bound; a 2,000-year-old
    algorithm typically taught in high school. It was rediscovered during the Black
    Hat 2019 conference.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 一种列举所有小于某个上限的质数的方法；这是一种已有2000年历史的算法，通常在高中教授。它在2019年黑帽大会期间被重新发现。
- en: eSTREAM
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: eSTREAM
- en: 'A cryptography competition, officially a *project*, organized by the EU-funded
    ECRYPT project between 2004 and 2008\. Of the 34 submitted ciphers, eight made
    it to the final portfolio, which included two categories: software (those with
    128-bit keys) and hardware (those with 80-bit keys). By far the most successful
    design from eSTREAM is Salsa20, a cipher that later evolved to ChaCha20, which
    became central to the BLAKE family of hash functions. Of the other portfolio ciphers,
    Trivium and Grain (or variants thereof) are used in niche applications, and F-FCSR
    was broken.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 一个密码学竞赛，正式名为*项目*，由欧盟资助的ECRYPT项目在2004至2008年间组织。34个提交的密码中，8个进入最终方案，其中包括两个类别：软件（128位密钥）和硬件（80位密钥）。eSTREAM中最成功的设计是Salsa20，这个密码后来演变成ChaCha20，并成为BLAKE家族哈希函数的核心。其他方案中，Trivium和Grain（或其变种）用于一些特定应用，而F-FCSR已被攻破。
- en: See [*Grain*](#Grain), [*Salsa20*](#Salsa20), [*Trivium*](#Trivium).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Grain*](#Grain), [*Salsa20*](#Salsa20), [*Trivium*](#Trivium).
- en: Ethereum
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊
- en: 'An important blockchain platform for decentralized applications, such as tokens.
    Ethereum has led to some of the most interesting cryptography research and open
    problems, based on novel challenges faced by their unique decentralized deployment,
    adversarial model, and Turing-complete functionality. For example, consider the
    following, all of which are admittedly more exciting than yet another new block
    cipher: proof-of-stake security, smart contract formal verification, atomic swaps,
    and sharding.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的区块链平台，用于去中心化应用程序，例如代币。以太坊引发了一些最有趣的密码学研究和未解问题，基于其独特去中心化部署、对抗模型和图灵完备功能所面临的新挑战。例如，考虑以下问题，这些问题无疑比另一个新的块加密算法更为激动人心：权益证明安全性、智能合约的形式化验证、原子交换和分片。
- en: Eurocrypt
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eurocrypt
- en: 'Europe’s largest academic cryptography conference, held every spring in a different
    European location since 1987\. Researchers present peer-reviewed research papers
    with titles such as “Indistinguishability Obfuscation Without Multilinear Maps:
    New Methods for Bootstrapping and Instantiation” and “A Quantum-Proof Non-Malleable
    Extractor with Application to Privacy Amplification Against Active Quantum Adversaries.”'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲最大的学术密码学会议，自1987年以来每年春天在不同的欧洲地点举行。研究人员展示同行评审的研究论文，标题如“没有多线性映射的不可区分混淆：引导和实例化的新方法”和“具有隐私放大应用的量子安全非可篡改提取器”。
- en: See [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*FSE*](#FSE-Fast-Software-Encryption), [*PKC*](#PKC), [*Real
    World Crypto*](#Real-World-Crypto-RWC), [*TCC*](#TCC).
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*FSE*](#FSE-Fast-Software-Encryption), [*PKC*](#PKC), [*Real
    World Crypto*](#Real-World-Crypto-RWC), [*TCC*](#TCC).
- en: Eve
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eve
- en: Alice and Bob’s nemesis.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: Alice和Bob的宿敌。
- en: See [*Alice*](#Alice), [*Bob*](#Bob).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Alice*](#Alice), [*Bob*](#Bob).
- en: E-voting
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子投票
- en: A topic that cryptographers like to publish papers about but don’t like to see
    deployed in reality because it’s perceived as unacceptably risky. E-voting is
    nonetheless cryptographically fascinating. It involves nontrivial cryptography,
    such as homomorphic encryption schemes used to encrypt ballots and aggregate them
    in a privacy-preserving way, and noninteractive zero-knowledge proofs, which are
    used to prove a vote’s correctness.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 一个密码学家喜欢发布论文讨论的主题，但不愿意看到它在现实中被应用，因为它被认为是不可接受的风险。尽管如此，电子投票在密码学上仍然具有极大吸引力。它涉及复杂的密码学，例如用于加密选票并以隐私保护的方式汇总选票的同态加密方案，以及用于证明投票正确性的非交互式零知识证明。
- en: F
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: F
- en: Factoring problem
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 因式分解问题
- en: Given *n* = *pq*, find the primes *p* and *q*. Easy to solve if you have a large
    enough quantum computer.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 *n* = *pq*，找出素数 *p* 和 *q*。如果你有足够强大的量子计算机，这个问题很容易解决。
- en: Feedback shift register
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反馈移位寄存器
- en: An array of values, usually bits or bytes, that updates by shifting the values
    over and then filling the empty slot with the result of some function of the previous
    state’s values. Historically, this cipher mechanism came after electromechanical
    machines and preceded modern ciphers. It’s still used in some hardware-oriented
    algorithms and in the mobile communication standard SNOW 3G.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 一种数值数组，通常是比特或字节，通过将数值移位并将空位填充为前一个状态数值某个函数的结果来更新。历史上，这种密码机制出现在机电机之后，现代密码算法之前。它仍然在一些硬件导向的算法和移动通信标准SNOW
    3G中使用。
- en: There are two kinds of feedback shift registers. In linear ones (LFSRs), this
    update function is linear, which renders the output predictable but can also provide
    guarantees that the period of LFSR is maximal. In nonlinear ones (NFSRs), after
    a few cycles of updates, the output values are highly nonlinear functions of the
    initial state, but guarantees on the period are difficult to compute. Concretely,
    linear update functions only do additions, whereas nonlinear ones do additions
    and multiplications.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的反馈移位寄存器。在线性反馈移位寄存器（LFSR）中，这种更新函数是线性的，这使得输出可预测，但也能提供保证，确保LFSR的周期是最大值。在非线性反馈移位寄存器（NFSR）中，经过几轮更新后，输出值成为初始状态的高度非线性函数，但周期的保证很难计算。具体而言，线性更新函数只进行加法运算，而非线性函数则同时进行加法和乘法运算。
- en: A good design strategy is to combine LFSRs and NFSRs.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的设计策略是结合LFSR（线性反馈移位寄存器）和NFSR（非线性反馈移位寄存器）。
- en: See [*Grain*](#Grain), [*SNOW 3G*](#SNOW-3G), [*Trivium*](#Trivium).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Grain*](#Grain)， [*SNOW 3G*](#SNOW-3G)， [*Trivium*](#Trivium)。
- en: Feistel network
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Feistel网络
- en: A method of constructing a block cipher from a smaller block cipher or hash
    function. It works by splitting the message block in two halves, *L* and *R*,and
    updating it by repeatedly replacing (*L*, *R*) with (*R*, *L* ⊕*f*(*R*)), where
    *f*() is the smaller function and can take a secret value as a parameter. Feistel
    network is sometimes called *Luby–Rackoff construction* after the researchers
    who formally analyzed its security. The XOR operation can be replaced by another
    group operation.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 一种通过较小的块密码或哈希函数构造块密码的方法。它通过将消息块分成两个部分，*L* 和 *R*，并通过不断替换 (*L*, *R*) 为 (*R*, *L*
    ⊕ *f*(*R*)) 来更新它，其中 *f*() 是较小的函数，并且可以使用一个秘密值作为参数。Feistel网络有时被称为 *Luby–Rackoff
    构造*，以纪念那些正式分析其安全性的研究人员。XOR 操作可以被另一种群操作替代。
- en: See [*DES (Data Encryption Standard)*](#DES-Data-Encryption-Standard), [*Lucifer*](#Lucifer).
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*DES（数据加密标准）*](#DES-Data-Encryption-Standard)， [*Lucifer*](#Lucifer)。
- en: Fialka (Фиалка)
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Фиалка（Фиалка）
- en: The Soviet counterpart to the Enigma machine created after World War II. Unlike
    Western encryption machines, Фиалка supported Cyrillic characters.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 苏联在二战后制造的与恩尼格玛机类似的设备。与西方的加密机不同，Фиалка支持西里尔字母。
- en: Fiat–Shamir
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fiat–Shamir
- en: A technique for turning an interactive proof (a protocol between a prover and
    a verifier that involves multiple rounds) into a noninteractive one (a single
    message from the prover) using hash functions.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 一种通过使用哈希函数将交互式证明（证明者和验证者之间涉及多个回合的协议）转化为非交互式证明（来自证明者的单个消息）的方法。
- en: FIPS 140-2
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FIPS 140-2
- en: A set of security requirements for cryptographic modules (software or hardware),
    established by NIST in 2001\. It’s been superseded by FIPS 140-3 since 2019.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 一套由NIST于2001年制定的加密模块（软件或硬件）安全要求。自2019年起被FIPS 140-3取代。
- en: FIPS 140-3
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FIPS 140-3
- en: New version of FIPS 140-2 since 2019\. It introduces requirements against noninvasive
    attacks and the concepts of *Normal Operation* and *Degraded Operation*, among
    others.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 自2019年以来的FIPS 140-2新版本。它引入了针对非侵入性攻击的要求，并定义了*正常操作*和*降级操作*等概念。
- en: See [*FIPS 140-2*](#FIPS-140-2).
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*FIPS 140-2*](#FIPS-140-2)。
- en: Forgery
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪造
- en: An attack whose goal is not to recover some secret but to create a supposedly
    hard-to-generate value without the knowledge of some secret. Unforgeability is
    the corresponding security notion and is most commonly associated with signatures
    and MACs. More generally, unforgeability must apply to any scheme for which an
    attacker should have trouble creating a valid output. These include ciphertexts
    in authentication encryption and zero-knowledge proof protocol transcripts.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 一种攻击，其目标不是恢复某个秘密，而是创建一个在不知道某些秘密的情况下，表面上难以生成的值。不可伪造性是相应的安全概念，通常与签名和MACs（消息认证码）相关联。更一般来说，不可伪造性必须适用于任何攻击者应难以生成有效输出的方案。这些包括身份验证加密中的密文和零知识证明协议的记录。
- en: Sometimes forgeability is a desirable property (for example, to achieve deniability.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，可伪造性是一个期望的特性（例如，实现可否认性）。
- en: Formal verification
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正式验证
- en: A form of testing that relies on mathematical guarantees. Applied to security
    protocols, formal verification includes symbolic and computational verification
    techniques, which assess whether a protocol satisfies properties such as confidentiality
    and authentication. Another example is programming languages that can certify
    that an implementation is functionally correct with respect to a specification,
    or that it’s free of certain classes of side channels.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 一种依赖于数学保证的测试形式。应用于安全协议时，形式化验证包括符号验证和计算验证技术，用于评估一个协议是否满足机密性和认证等属性。另一个例子是编程语言，它可以验证一个实现是否与规范功能上保持一致，或者是否没有某些类别的侧信道问题。
- en: High-assurance applications often receive some sort of formal verification,
    such as the Common Criteria security evaluation framework’s EAL7 assurance level.
    Still, don’t be fooled into thinking formal verification means *proof that everything
    about a crypto implementation is secure*.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 高保证应用通常会接受某种形式的形式化验证，例如通用标准安全评估框架中的EAL7保障级别。然而，不要被误导，认为形式化验证意味着*证明一个加密实现的所有方面都是安全的*。
- en: Format-preserving encryption
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式保留加密
- en: A type of encryption that produces a ciphertext with the same format as the
    original message. For example, the format-preserving encryption of a 16-digit
    credit card number would produce another 16-digit number. Format-preserving encryption
    is often useful for encrypting database entries whose field type must have a specific
    format, such as social security numbers, IP addresses, and ZIP codes. Although
    the problem sounds simple, it requires sophisticated techniques, especially for
    the more general problem of creating ciphers from arbitrary domains of values.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 一种加密方式，生成与原始消息格式相同的密文。例如，16位数字的信用卡号码经过格式保留加密后，将生成另一个16位数字。格式保留加密通常用于加密那些字段类型必须具有特定格式的数据库条目，如社会安全号码、IP地址和邮政编码。尽管问题看起来简单，但它需要复杂的技术，尤其是针对从任意值域创建密码的更一般问题。
- en: Forward secrecy
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前向保密
- en: The notion that something remains secure if something else is compromised at
    a later time. What counts as *something*, *something else*, and *a later time*
    depends on the context. Forward secrecy is usually a relevant security notion
    for key agreement protocols, secure messaging protocols (and their ratchetting
    mechanisms), pseudorandom generators, pseudorandom functions, MACs, and other
    stateful objects.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个事物在之后的某个时间被泄露或破坏，另一个事物仍然保持安全的概念。*某个事物*、*另一个事物*和*某个之后的时间*的定义取决于具体的上下文。前向保密通常是密钥协议、安全消息传递协议（及其扩展机制）、伪随机生成器、伪随机函数、MACs和其他有状态对象中相关的安全概念。
- en: It’s usually easier to achieve forward secrecy than backward secrecy, because
    it’s easier to erase the past than to make the future unpredictable (in cryptography,
    at least).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 实现前向保密通常比后向保密容易，因为在密码学中，擦除过去比使未来不可预测要容易得多。
- en: See [*Backward secrecy*](#Backward-secrecy).
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[*后向保密*](#Backward-secrecy)。
- en: FOX
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FOX
- en: See [*IDEA NXT*](#IDEA-NXT).
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[*IDEA NXT*](#IDEA-NXT)。
- en: FSE (Fast Software Encryption)
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FSE（快速软件加密）
- en: A conference focused on the design and cryptanalysis of symmetric cryptography
    primitives, including slow and hardware-oriented hash functions. FSE is sometimes
    viewed as an applied cryptography conference, despite the fact that it rarely
    focuses on real-world algorithms, let alone real-world attacks.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 一个专注于对称加密原语设计和密码分析的会议，包括慢速和硬件导向的哈希函数。尽管FSE很少关注现实世界中的算法，更不用说现实世界的攻击，它有时被视为一个应用密码学会议。
- en: 'Researchers present peer-reviewed papers with titles such as “Improving the
    MILP-Based Security Evaluation Algorithm Against Differential/Linear Cryptanalysis
    Using a Divide-and-Conquer Approach” and “Low AND Depth and Efficient Inverses:
    A Guide on S-boxes for Low-Latency Masking.”'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 研究人员展示同行评审的论文，标题如《基于MILP的安全评估算法对抗差分/线性密码分析的改进：一种分治方法》和《低与深度及高效反演：低延迟掩码S盒的指南》。
- en: See [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt), [*PKC*](#PKC), [*Real World Crypto*](#Real-World-Crypto-RWC),
    [*TCC*](#TCC).
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[*Asiacrypt*](#ASIACRYPT)，[*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems)，[*CRYPTO*](#CRYPTO)，[*Eurocrypt*](#Eurocrypt)，[*PKC*](#PKC)，[*Real
    World Crypto*](#Real-World-Crypto-RWC)，[*TCC*](#TCC)。
- en: Fully homomorphic encryption
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全同态加密
- en: See [*Homomorphic encryption*](#Homomorphic-encryption).
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[*同态加密*](#Homomorphic-encryption)。
- en: Functional encryption
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能加密
- en: 'A type of cryptographic scheme that looks like magic: when designed for some
    function *f*(), decrypting Enc(*M*) yields not *M* but *f*(*M*). But like many
    of the magic cryptographic schemes, it’s of limited use in practice, because it
    can efficiently support only simple functionalities.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 一种看似神奇的加密方案：当为某个函数 *f*() 设计时，解密 Enc(*M*) 得到的不是 *M*，而是 *f*(*M*)。但与许多神奇的加密方案一样，它在实践中的使用有限，因为它只能高效支持简单的功能。
- en: 'To build functional encryption schemes, cryptographers can use the trick of
    leveraging indistinguishability obfuscation: in other words, the decryption process
    that finds *f*(*M*) would consist of an obfuscated program that first retrieves
    *M* and then computes *f*(*M*) without ever exposing *M*.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建功能加密方案，密码学家可以利用不可区分混淆的技巧：换句话说，找到 *f*(*M*) 的解密过程将由一个混淆程序组成，该程序首先检索 *M*，然后计算
    *f*(*M*)，而不暴露 *M*。
- en: Future secrecy
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来保密性
- en: A term coined in the context of the Signal protocol to refer to a notion similar
    to backward secrecy. Indistinguishable from break-in recovery.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Signal 协议中创造的术语，指代类似于逆向保密性的概念。与入侵恢复无法区分。
- en: See [*Backward secrecy*](#Backward-secrecy).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*逆向保密性*](#Backward-secrecy)。
- en: Fuzzy extractor
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊提取器
- en: 'A scheme for extracting the value of some high-entropy secret from multiple
    noisy readings, each with different random errors, to derive a key. This might
    sound a lot like an error-correcting code, but it’s different: first, the value
    read is not a codeword (which has redundancy in it and thus is suboptimal entropy),
    but instead is a value of potentially maximal entropy; second, the value is not
    read once but multiple times; and third, the enrollment data used to decode the
    secret must not leak information about said secret. Therefore, you can store it
    without privacy leaks.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 一种从多个噪声读数中提取某个高熵秘密值的方案，每个读数都有不同的随机误差，进而推导出一个密钥。这听起来像是一个纠错码，但它有所不同：首先，读取的值不是码字（码字包含冗余，因此熵较低），而是一个可能具有最大熵的值；其次，值不是只读取一次，而是读取多次；第三，用于解码秘密的注册数据不能泄露关于该秘密的信息。因此，你可以在没有隐私泄漏的情况下存储它。
- en: You might find fuzzy extractors used in biometric authentication applications,
    which have to extract a value that uniquely identifies an individual. These applications
    typically must extract this value from noisy measurements and without relying
    on a database of sensitive data, such as data about each individual. Conversely,
    in a traditional approach to authentication, you would compare a new measurement
    to a registered one to identify a person.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在生物识别认证应用中发现模糊提取器，这些应用必须提取一个唯一标识个人的值。这些应用通常需要从嘈杂的测量中提取这个值，而不依赖于包含敏感数据的数据库，如关于每个人的数据。相反，在传统的认证方法中，你会将新的测量值与注册的测量值进行比较，以识别一个人。
- en: G
  id: totrans-466
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: G
- en: Generalized birthday problem
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广义生日问题
- en: The problem of finding values *X*[1], . . . , *X*[k] such that Hash(*X*[1])
    ⊕ · · · ⊕ Hash(*X*[k]) = 0\. The special case of a classical collision is that
    of finding two distinct values, such that Hash(*X*[1]) ⊕ Hash(*X*[2]) = 0\. The
    *birthday attack* finds such pairs in *O*(2^(*n*)^(/2)) queries to the hash function,
    where *n* is the output bit size.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 找到值 *X*[1], . . . , *X*[k] 的问题，使得 Hash(*X*[1]) ⊕ · · · ⊕ Hash(*X*[k]) = 0。经典碰撞的特殊情况是找到两个不同的值，使得
    Hash(*X*[1]) ⊕ Hash(*X*[2]) = 0。*生日攻击*通过 *O*(2^(*n*)^(/2)) 次查询哈希函数来找到这样的对，其中 *n*
    是输出的比特大小。
- en: In the generalized birthday problem, it’s easy to see that the larger the value
    *k*, the easier the problem. More precisely, the cost of a collision becomes O(*k2*^(n/(1+log[2])^(^(*k*))))
    time and space, or of the order of 2^(*n*)^(/3) for *k* = 4.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在广义生日问题中，很容易看出，值 *k* 越大，问题就越容易。更精确地说，碰撞的代价变为 O(*k2*^(n/(1+log[2])^(^(*k*))))
    的时间和空间复杂度，或者对于 *k* = 4，其数量级为 2^(*n*)^(/3)。
- en: GNFS (General Number Field Sieve)
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GNFS（广义数域筛法）
- en: The best (nonquantum) algorithm for factoring large integers.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 用于分解大整数的最佳（非量子）算法。
- en: GOST
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GOST
- en: The USSR national standard block cipher designed in the 1970s and included in
    the GOST 28147-89 standard series. Whereas the American DES cipher, designed in
    the same era, uses keys that are only 64 bits long, GOST works with 256-bit keys
    and comes with customizable S-boxes. Constructed as a Feistel network like DES,
    GOST hasn’t been meaningfully broken, although research papers have described
    some attacks against it that perform fewer than 2^(256) operations. Russian authorities
    officially deprecated GOST in 2019\. Its successor is the block cipher Кузнечик
    (Kuznyechik).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: Grain
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A family of minimalistic hardware-oriented stream ciphers: Grain (80-bit key),
    Grain 128, and Grain 128a (128-bit key).'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Gröbner basis
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A canonical representation of a system of multivariate equations. Computing
    a Gröbner basis for a multivariate system is one of the possible definitions of
    “solving” it, because it can be used, for example, to find its numeric solutions.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'The general problem of computing Gröbner bases is NP-hard. The actual time
    and memory required to compute one for a specific system of equations, as found
    in multivariate cryptography or in algebraic cryptanalysis, is usually large and
    hard to estimate: but when it’s not, it produces spectacular cryptanalyses.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: Group signature
  id: totrans-479
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A signature scheme involving a group of potential signers. Any group member
    can issue a signature on behalf of the group, and a verifier can learn the identity
    of the group members but not of the actual signer. There’s an exception: groups
    must work with a trusted entity, called the *group manager*, which can trace signatures
    back to their original signer. Ring signatures don’t have this traceability property
    or the need for a group manager.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: See [*Ring signature*](#Ring-signature).
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: Grover’s algorithm
  id: totrans-482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A quantum algorithm that in theory can break symmetric ciphers in *O*(2^(*n*)^(/2))
    instead of *O*(2^(*n*)) complexity, where *n* is the key length.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: H
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hardcore predicate
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A key concept in the theoretical definition of one-way functions and permutations:
    for some one-way function *f*(), a hardcore predicate is some bit of information
    about an input *x* that is easy to compute from *x* but hard from *f*(*x*). By
    definition, you should be able to find a hardcore predicate for any given one-way
    function and its permutations.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: Hash function
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest cryptographic object, and at first glance, the dumbest operation
    ever. A hash function takes a single input of any type, format, or size, and returns
    a single output that is a fixed size and looks totally unrelated to its input.
    Yet equipped with such a trivial tool, you can construct secure symmetric ciphers,
    pseudorandom generators, key derivation functions, and even public-key signatures,
    as well as a variety of security protocols.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: Hash-based cryptography
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most secure but slowest form of post-quantum cryptography. You can use hash
    functions to create various cryptographic objects, such as stream ciphers or pseudorandom
    generators. But when you hear *hash-based cryptography*, it refers to public-key
    signatures built from only hash functions.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 最安全但最慢的后量子加密形式。你可以使用哈希函数创建各种加密对象，如流密码或伪随机生成器。但是，当你听到 *基于哈希的加密* 时，它指的是仅由哈希函数构建的公钥签名。
- en: Simple hash-based signatures, as proposed by Lamport, Merkle, and Winternitz
    in the late 1970s, have severe shortcomings. For example, you can use them only
    a limited number of times or only on very short messages. Like many problems in
    computer science, researchers have addressed the problem of scaling hash-based
    signatures by throwing trees, trees, and even more trees at it. This has notably
    led to the SPHINCS and XMSS designs.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Lamport、Merkle 和 Winternitz 在 1970 年代末提出的简单哈希签名具有严重缺点。例如，它们只能使用有限次数，或者只能在非常短的消息上使用。像计算机科学中的许多问题一样，研究人员通过增加树、树，再加更多的树来解决哈希签名的扩展问题。这显著地导致了
    SPHINCS 和 XMSS 的设计。
- en: See [*SPHINCS*](#SPHINCS), [*XMSS*](#XMSS-eXtended-Merkle-Signature-Scheme).
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*SPHINCS*](#SPHINCS), [*XMSS*](#XMSS-eXtended-Merkle-Signature-Scheme)。
- en: Heartbleed
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heartbleed
- en: The bug in OpenSSL that revived interest in the security of TLS and its implementation.
    Ultimately, Heartbleed led to a safer OpenSSL, as well as the TLS 1.3 protocol.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL 中的漏洞重新激发了人们对 TLS 安全性及其实现的关注。最终，Heartbleed 导致了一个更安全的 OpenSSL 版本，并引入了
    TLS 1.3 协议。
- en: Hedged signature
  id: totrans-495
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对冲签名
- en: A type of signature that reintroduces randomness as a defense against fault
    attacks. Fault attacks affect signature schemes, such as EdDSA and deterministic
    ECDSA, that don’t need a random or unique value to be secure. (By contrast, ECDSA
    requires a fresh secret random value per signature.) Such derandomized signature
    schemes protect against poor randomness but have been shown to be vulnerable to
    fault attacks that partially exploit their determinism. Hedged signatures aim
    to correct this without allowing lower-quality randomness to reduce the scheme’s
    security. Such hedged signatures include the XEdDSA variant, as well as the post-quantum
    schemes qTESLA and Picnic2.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 一种签名类型，通过重新引入随机性作为对抗故障攻击的防御措施。故障攻击影响签名方案，如 EdDSA 和确定性 ECDSA，它们在安全性上不需要随机或唯一的值。（相比之下，ECDSA
    每个签名都需要一个新的随机秘密值。）这种去随机化签名方案可以防止随机性不足的情况，但已经被证明容易受到故障攻击，这些攻击部分利用其确定性。对冲签名旨在纠正这个问题，同时不允许较低质量的随机性降低方案的安全性。这类对冲签名包括
    XEdDSA 变种，以及后量子方案 qTESLA 和 Picnic2。
- en: HFE (Hidden Field Equations)
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HFE（隐式场方程）
- en: A family of multivariate public-key schemes, including encryption and signature
    schemes. As modestly stated in the 1996 paper that introduced it, “the security
    of HFE is not proved but *apparently* it seems to be related to the problem of
    solving a system of multivariate quadratic equations over a finite field.”
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 一类多变量公钥方案，包括加密和签名方案。正如1996年介绍该方案的论文中谦虚地表述的，“HFE 的安全性尚未证明，但 *显然* 它似乎与在有限域上求解多变量二次方程组的问题有关。”
- en: HMAC (Hash-based MAC)
  id: totrans-499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HMAC（基于哈希的 MAC）
- en: For many developers, a synonym of *MAC*. Strictly speaking, however, an HMAC
    isn’t a MAC but a way to construct a MAC from a hash function.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多开发者来说，*MAC* 的同义词。然而，严格来说，HMAC 不是一个 MAC，而是通过哈希函数构造 MAC 的一种方式。
- en: For example, you can construct a MAC atop SHA-256, which is called *HMAC-SHA-256*.
    Keep in mind that HMACs are not the only—and not necessarily the best—ways of
    constructing MACs.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在 SHA-256 上构建一个 MAC，称为 *HMAC-SHA-256*。请记住，HMAC 不是构建 MAC 的唯一方式——也不一定是最好的方式。
- en: Homomorphic encryption
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同态加密
- en: 'An encryption that satisfies Dec(Enc(*M*[1]) ⦾Enc(*M*[2])) = *M*[1]⦿*M*[2]
    for some operators ⦾ and ⦿ that might be identical or distinct, and are usually
    some type of addition or multiplication. For example, encrypting a message with
    textbook RSA by doing *M*^(*d*) mod *n* for some message *M* is homomorphic with
    respect to multiplication: the ­product of two ­ciphertexts is the ciphertext
    of the product of the plaintexts.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 一种加密方式，满足 Dec(Enc(*M*[1]) ⦾Enc(*M*[2])) = *M*[1]⦿*M*[2]，其中某些运算符 ⦾ 和 ⦿ 可能是相同或不同，通常是某种加法或乘法。例如，使用教材中的
    RSA 加密消息，通过对某个消息 *M* 执行 *M*^(*d*) mod *n* 进行乘法同态加密：两个密文的乘积是明文乘积的密文。
- en: Homomorphism can be a security issue and a feature, depending on the context.
    For example, certain e-voting systems leverage the homomorphic property of Paillier’s
    cryptosystem to aggregate ballots without decrypting them individually.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 同态性可以是安全问题，也可以是功能特性，这取决于上下文。例如，某些电子投票系统利用Paillier密码系统的同态特性，在不单独解密选票的情况下进行选票汇总。
- en: 'Fully homomorphic encryption is a more general and powerful property but is
    also harder to realize: a fully homomorphic encryption can be homomorphic with
    respect to any operation performed on the ciphertext instead of just a single
    group operation.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 全同态加密是一种更一般且更强大的特性，但也更难实现：全同态加密可以对密文执行任何操作的同态性，而不仅仅是单一的群操作。
- en: HPC (Hasty Pudding Cipher)
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HPC（哈斯提布丁密码）
- en: 'A mostly forgotten block cipher submitted in 1998 to the AES competition. Its
    designer called it “the first Omni-Cipher: It can encrypt any blocksize with any
    keysize.”'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在1998年提交给AES竞赛的几乎被遗忘的分组密码。其设计者称其为“第一个全能密码：它可以用任何密钥长度加密任何分组长度。”
- en: HSM (hardware security module)
  id: totrans-508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HSM（硬件安全模块）
- en: Hardware equipment dedicated to running cryptographic operations and other security
    tasks. HSMs can come in different form factors, such as rack servers or USB dongles.
    HSMs don’t necessarily run cryptographic operations using dedicated hardware (as
    in a dedicated silicon circuit). Actually, most of the time, they run all cryptography
    in software, executed by some general-purpose processor. The S in HSM refers to
    the functionality it implements; it doesn’t necessarily mean the HSM is more secure
    than a normal computer.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 专门用于执行密码运算和其他安全任务的硬件设备。HSM可以有不同的外形，比如机架服务器或USB加密狗。HSM不一定通过专用硬件（如专用硅电路）运行密码运算。实际上，大多数时候，它们会在软件中运行所有密码学操作，由通用处理器执行。HSM中的S指的是它实现的功能；它并不意味着HSM比普通计算机更安全。
- en: HTTP/3
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP/3
- en: See [*QUIC (Quick UDP Internet Connections)*](#QUIC-Quick-UDP-Internet-Connections).
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [*QUIC (快速UDP互联网连接)*](#QUIC-Quick-UDP-Internet-Connections)。
- en: Hyperelliptic-curve cryptography
  id: totrans-512
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超椭圆曲线密码学
- en: 'Like elliptic-curve cryptography but using a higher-dimensional object: the
    Jacobian of a hyperelliptic curve. We can’t explain what a Jacobian is in terms
    of anything else that is familiar to most readers, to paraphrase Richard Feynman.'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于椭圆曲线密码学，但使用一个更高维的对象：超椭圆曲线的Jacobian。用理查德·费曼的话来说，我们不能用任何普通读者熟悉的东西来解释什么是Jacobian。
- en: 'The main advantage of hyperelliptic curves is that, owing to the additional
    dimensions, the same finite field generates larger groups than it would with an
    elliptic curve. This strength is also a weakness: when the number of dimensions
    becomes too high (usually more than three), discrete logarithms become easier.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 超椭圆曲线的主要优势在于，由于额外的维度，相同的有限域生成的群体比椭圆曲线要大。这种强度也是一种弱点：当维度数变得过高（通常超过三维）时，离散对数变得更容易计算。
- en: I
  id: totrans-515
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I
- en: IACR (International Association for Cryptologic Research)
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IACR（国际密码学研究协会）
- en: Cryptographers’ union, a nonprofit that organizes the largest academic cryptography
    conferences and manages the reference preprint platform ePrint.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学家联盟，一个非营利组织，负责组织最大的学术密码学会议并管理参考预印本平台ePrint。
- en: IDEA (International Data Encryption Algorithm)
  id: totrans-518
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDEA（国际数据加密算法）
- en: A 64-bit block cipher from the early 1990s. One of the rare block ciphers that
    uses the Lai–Massey construction, not a Feistel or substitution–permutation network.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 一种90年代初的64位分组密码。它是少数几种使用Lai–Massey构造的分组密码，而不是Feistel或置换-替代网络。
- en: Despite a rather heuristic design approach, IDEA resisted cryptanalysis for
    years. The first attack against it that proved potentially faster than brute force
    didn’t appear until 2012\. (This was a biclique attack with 2^(126) operations.)
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管采用了相当启发式的设计方法，IDEA在多年里抵抗了密码分析。直到2012年，才出现了第一种攻击方式，它被证明比暴力破解更快。（这是一种双密钥攻击，涉及2^(126)次运算。）
- en: IDEA is one of the few ciphers that uses integer multiplication operations,
    which has some security benefits but makes protecting against side-channel attacks
    difficult.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: IDEA是为数不多的使用整数乘法运算的密码之一，这具有一定的安全优势，但也使得防范旁路攻击变得困难。
- en: IDEA NXT
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDEA NXT
- en: A block cipher with little similarity to IDEA except for their shared Lai–Massey
    construction. Also like IDEA, it was designed for the Mediacrypt AG company and
    patented. Initially named and published as FOX, IDEA NXT proved very useful in
    antipiracy initiatives, not only because of its cryptographic merits.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 一种与IDEA相似度较小的分组密码，除了它们共享的Lai–Massey结构。像IDEA一样，它是为Mediacrypt AG公司设计并获得专利的。最初名为FOX并发布，IDEA
    NXT在反盗版行动中非常有用，不仅因为它的密码学优点。
- en: Identity-based encryption
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于身份的加密
- en: A means of sending an encrypted message without knowing someone’s public key.
    For instance, when Alice wants to send an encrypted message to Bob but doesn’t
    know his public key, identity-based encryption (IBE) allows her to compute it
    using the name *Bob* and some master public key. The only caveat is that IBE requires
    a trusted third party, called the *key server*, which knows some master private
    key and uses it to generate users’ private keys. Bob therefore needs to authenticate
    to the key server, proving that he’s the real Bob, to receive his private key.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在不知道某人公钥的情况下发送加密消息的方法。例如，当艾丽丝想要将加密消息发送给鲍勃，但不知道他的公钥时，基于身份的加密（IBE）允许她使用名字*Bob*和一些主公钥来计算出公钥。唯一的注意事项是，IBE需要一个可信的第三方，称为*密钥服务器*，该服务器知道某个主私钥，并用它生成用户的私钥。因此，鲍勃需要向密钥服务器进行身份验证，证明自己是真正的鲍勃，才能接收自己的私钥。
- en: IES (Integrated Encryption Scheme)
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IES（集成加密方案）
- en: A public-key encryption scheme that doesn’t involve a public-key encryption
    primitive. Instead, the sender chooses a random key pair, computes a Diffie–Hellman
    shared secret between the fresh private key and the recipient’s public key, derives
    a symmetric key from it, and encrypts the message with some authenticated cipher.
    Neither party performs a public-key operation to encrypt the data.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 一种公钥加密方案，不涉及公钥加密原语。相反，发送方选择一对随机密钥，通过新生成的私钥和接收方的公钥计算一个Diffie–Hellman共享密钥，从中推导出对称密钥，并使用某种认证加密算法加密消息。双方都不进行公钥操作来加密数据。
- en: Impatient saboteur
  id: totrans-528
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不耐烦的破坏者
- en: In the Dolev–Yao model, an archetypal attacker who can transmit data but not
    receive it. Or in Dolev and Yao’s own words, “one who only initiates conversations
    (and does not rely on being spoken to.)”
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dolev–Yao模型中，一种典型的攻击者，他可以传输数据，但不能接收数据。或者用Dolev和Yao的话来说，“他只发起对话（并不依赖于被对方讲话）。”
- en: Impossibility
  id: totrans-530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可能性
- en: Cryptographer Moti Yung once said, “When a software engineer says [a security
    engineering problem] is impossible, that really just means it’s cryptographically
    interesting.”
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 加密学家Moti Yung曾说过，“当一名软件工程师说[一个安全工程问题]是不可能的时，那其实意味着它在密码学上是有趣的。”
- en: Impossible differential attack
  id: totrans-532
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可能的差分攻击
- en: A differential attack that exploits abnormally unlikely events rather than abnormally
    likely ones. Differential cryptanalysis generally exploits patterns of unusually
    high probability that occur in the differences between outputs and inputs with
    a specific difference. Impossible differential attacks exploit the opposite type
    of pattern, namely those that have zero chance of being observed under certain
    conditions. If cryptanalysts notice these patterns, they can deduce that the condition
    doesn’t hold. This information could help recover a cipher’s secret key or subkey.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 一种利用不寻常的不可能事件，而非不寻常的可能事件的差分攻击。差分密码分析通常利用在特定差异的输出与输入之间出现的异常高概率模式。不可能的差分攻击则利用相反类型的模式，即在某些条件下观察不到的模式。如果密码分析师注意到这些模式，他们可以推断出该条件并不成立。这些信息可能有助于恢复密码的秘密密钥或子密钥。
- en: IND-CCA
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IND-CCA
- en: Indistinguishability of ciphertexts under chosen-ciphertext attacks. The strongest
    security notion for encryption schemes (both public-key and symmetric-key schemes).
    The chosen-ciphertext might intuitively make little sense in practice. The reason
    is that you’ll rarely find systems where attackers can decrypt any ciphertexts
    they want, but encryption that can do more can do less. In addition, there are
    cases in which you do have a decryption oracle, such as some DRM systems.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择密文攻击下的密文不可区分性。加密方案（无论是公钥加密还是对称密钥加密）中最强的安全性概念。选择密文在实际中直观上可能没有太大意义。原因是你很少会遇到攻击者可以解密他们想要的任何密文的系统，但能够做更多的加密系统，实际上能做的也更少。此外，也存在某些情况下确实有解密预言机，例如一些数字版权管理（DRM）系统。
- en: IND-CPA
  id: totrans-536
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IND-CPA
- en: Indistinguishability of ciphertexts under chosen-plaintext attacks. Also known
    as semantic security. It’s the idea that a ciphertext shouldn’t reveal anything
    about a plaintext other than its approximate length, even to an active attacker
    capable of retrieving the ciphertext corresponding to the plaintexts of their
    choice.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择明文攻击下的密文不可区分性，也称为语义安全性。这是指密文不应泄露任何关于明文的信息，除了大致的长度，即使面对一个能够检索与其选择的明文相对应的密文的活跃攻击者。
- en: IND-CPA is the standard security notion for symmetric encryption. For example,
    block ciphers in CTR or in CBC mode are secure if the underlying block cipher
    is secure, and if CTR nonces are unique or CBC initial values are unpredictable.
    That’s a lot of ifs, which in practice can lead to security flaws in otherwise
    IND-CPA schemes.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: IND-CPA是对称加密的标准安全概念。例如，如果底层的分组密码是安全的，并且CTR的随机数是唯一的或CBC的初始值是不可预测的，那么CTR或CBC模式下的分组密码是安全的。这有很多条件，实际上，这些条件可能导致原本是IND-CPA方案的安全漏洞。
- en: Indelibility
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可删除性
- en: Property belonging to a transaction, or series thereof, that is timestamped
    implicitly or explicitly and cannot be backdated or otherwise altered. Cryptographic
    ledger mechanisms, such as blockchains, can often address this problem.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 属于交易或其系列的属性，通常会有隐式或显式的时间戳，且无法回溯或以其他方式更改。加密账本机制，如区块链，通常可以解决这个问题。
- en: Indifferentiability
  id: totrans-541
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可区分性差异化
- en: 'Property of a construction, such as of a hash function, that is guaranteed
    to lead to a secure primitive if the building blocks have no security flaw. In
    the context of hash functions, we talk of *indifferentiability from a random oracle*,
    meaning that if the underlying compression function or permutation is ideal, the
    hash function has as many structural properties as a random oracle: that is, none.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 构造的属性，如哈希函数的构造，保证如果构建块没有安全漏洞，则会导致一个安全的原语。在哈希函数的上下文中，我们谈论的是*与随机神谕的不可区分性*，意味着如果底层的压缩函数或置换是理想的，哈希函数具有与随机神谕相同的结构属性：即，没有结构。
- en: Indistinguishability
  id: totrans-543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可区分性
- en: The property in which something that isn’t really random appears the same as
    something that is actually random. If the two are indistinguishable, you cannot
    extract information from the not-really-random thing. In the case of encryption,
    the not-really-random thing is the ciphertext, and the information you’re unable
    to extract is about the plaintext. Indistinguishability applies to other cryptographic
    functionalities as well.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 一种属性，其中某些看似随机的东西与实际随机的东西看起来相同。如果两者不可区分，你就无法从这个看似随机的东西中提取信息。在加密的情况下，这个看似随机的东西是密文，而你无法提取的信息则是关于明文的。不可区分性同样适用于其他加密功能。
- en: Indistinguishability obfuscation (iO)
  id: totrans-545
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可区分性混淆（iO）
- en: 'The mathematization of the intuitive concept of software obfuscation. In cryptography,
    as in software security, the obfuscation process takes as input a program and
    produces a second program that in some sense hides how the first program works:
    its internal variables, secret arguments, and so on. Unlike in software security,
    cryptography sees a program as one of the possible abstract representations, most
    commonly a Boolean circuit with AND, OR, and NOT gates.'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 软件混淆的直观概念的数学化。在加密学中，像在软件安全中一样，混淆过程将一个程序作为输入，并生成一个第二个程序，在某种意义上隐藏了第一个程序的工作原理：其内部变量、秘密参数等。与软件安全不同，加密学将程序视为可能的抽象表示之一，最常见的是带有AND、OR和NOT门的布尔电路。
- en: iO can be seen as a raw encoding of the input–output relations that hides its
    implementation details, such as subprocedures or intermediate variables. The notion
    of indistinguishability is just a formal way to express the idea that, given obfuscations
    of two distinct yet equivalent programs, an attacker shouldn’t be able to identify
    which of the programs is which.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: iO可以看作是对输入输出关系的原始编码，它隐藏了实现细节，如子过程或中间变量。不可区分性的概念只是一个正式的方式来表达这个观点：给定两个不同但等价的程序的混淆，攻击者不应该能够识别哪一个程序是哪一个。
- en: Although iO sounds like the solution to many problems, in practice it’s not
    because of its high complexity and inefficiency.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管iO听起来像是解决许多问题的方案，但实际上并非如此，因为它的复杂性和低效率。
- en: Information-theoretic security
  id: totrans-549
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息论安全
- en: Security that even infinite computational power cannot compromise. For example,
    imagine that you encrypt some 128-bit secret key *K*[0] with AES by using another
    secret key *K* as the AES key. Let’s assume that the attacker has no way to verify
    whether or not they got the valid *K*[0]. In this case, even if the attacker could
    try all possible values of *K*, they would have no way of identifying the correct
    value of *K*, because they’d have no way of identifying the *K*[0] that they’re
    after.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是无限的计算能力也无法破坏的安全性。例如，假设你用另一个秘密密钥*K*作为AES密钥来加密某个128位的秘密密钥*K*[0]。假设攻击者无法验证他们是否得到了有效的*K*[0]。在这种情况下，即使攻击者尝试所有可能的*K*值，他们也无法识别*K*的正确值，因为他们无法识别他们所追寻的*K*[0]。
- en: INT-CTXT
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: INT-CTXT
- en: Integrity of ciphertexts. The security notion, applicable to authenticated encryption
    schemes, that it should be practically impossible for an attacker to create a
    valid ciphertext, even if they know many valid ciphertexts for messages of their
    choice.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 密文的完整性。适用于认证加密方案的安全概念，即攻击者即使知道许多有效的密文，也应该几乎不可能创建一个有效的密文。
- en: 'A related theorem: if an authenticated cipher is IND-CPA and INT-CTXT, it’s
    also IND-CCA. I leave it to you to Google the proof for this result.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 相关定理：如果一个认证加密算法是IND-CPA和INT-CTXT，那么它也是IND-CCA。我把这个结果的证明留给你去Google。
- en: Invisible signature
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可见签名
- en: 'A public-key signature that cannot be identified as valid or invalid unless
    the signer has agreed to reveal that information. An invisible signature might
    appear to make the signature anonymous (that is, because the signature doesn’t
    reveal the signer’s identity or public key), but this isn’t necessarily the case.
    Consider this counterexample: if you additionally sign the signature with a noninvisible
    signature scheme, the scheme remains invisible but is clearly not anonymous.'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 一种公钥签名，除非签名者同意透露相关信息，否则无法判断其有效或无效。一个不可见签名可能看起来使签名匿名（即，因为签名不会透露签名者的身份或公钥），但这不一定是事实。考虑这个反例：如果你另外用一个非不可见签名方案签署这个签名，方案仍然不可见，但显然不是匿名的。
- en: See [*Anonymous signature*](#Anonymous-signature), [*Undeniable signature*](#Undeniable-signature).
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*匿名签名*](#Anonymous-signature)，[*不可否认签名*](#Undeniable-signature)。
- en: IOTA
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IOTA
- en: By its own definition, a blockchain with no blocks and no chain. Probably the
    most mocked blockchain platform, because it has made some unfortunate cryptographic
    choices, such as designing a new hash function.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 按照它自己的定义，一个没有区块和链的区块链。可能是最被嘲笑的区块链平台，因为它做出了一些不幸的加密选择，例如设计了一个新的哈希函数。
- en: 'Cryptography enthusiasts and IOTA supporters have posted hundreds of inflammatory
    tweets about IOTA’s questionable design choices. Here is a very brief summary
    of the debate: the crypto enthusiasts yelled, “IOTA is broken because its signature
    scheme is broken.” In response, IOTA fans responded, “IOTA isn’t broken because
    it can’t be exploited.” There is some truth to both sides.'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 加密学爱好者和IOTA支持者发布了数百条关于IOTA设计选择值得质疑的激烈推文。以下是辩论的简要总结：加密爱好者大声疾呼，“IOTA坏了，因为它的签名方案坏了。”作为回应，IOTA粉丝则回应道，“IOTA没有坏，因为它无法被利用。”两方都有一定的道理。
- en: IPES (Improved Proposed Encryption Standard)
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPES（改进提议加密标准）
- en: An alternative name for the IDEA block cipher.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: IDEA块密码的另一种名称。
- en: See [*IDEA*](#IDEA-International-Data-Encryption-Algorithm).
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*IDEA*](#IDEA-International-Data-Encryption-Algorithm)。
- en: IPSec
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPSec
- en: One of the major open secure channel protocols along with TLS and SSH. Despite
    its widespread use, it remains much less known in the cryptography community and
    among engineers. Indeed, you don’t need to understand IPSec if you’re developing
    mobile or web applications. Also, its design and subprotocols look cryptographically
    boring. A product of DARPA- and NSA-sponsored efforts that began in the 1970s,
    IPSec nonetheless remains the standard for network layer security. In addition,
    its design and implementations have proven more robust than early SSL and TLS
    versions except for the weak IKEv1 subprotocol.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 与TLS和SSH一起，IPSec是主要的开放安全通道协议之一。尽管广泛使用，但它在加密学界和工程师中仍然鲜为人知。事实上，如果你正在开发移动或网页应用程序，你不需要了解IPSec。此外，它的设计和子协议在加密学上看起来比较枯燥。作为DARPA和NSA资助的努力成果，始于1970年代的IPSec仍然是网络层安全的标准。此外，除弱的IKEv1子协议外，其设计和实现证明比早期的SSL和TLS版本更为健壮。
- en: ISO standard
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ISO标准
- en: Buy this definition for $180\. Please note that a paper format is currently
    unavailable.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 购买此定义价格为$180。请注意，目前没有纸质格式可用。
- en: Isogeny-based cryptography
  id: totrans-567
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于同态映射的密码学
- en: The youngest class of post-quantum cryptography methods; initiated in the early
    2000s. An isogeny is a function that maps points of an elliptic curve to points
    of another elliptic curve and that satisfies specific mathematical properties.
    You can then draw a graph whose nodes are elliptic curves and whose edges are
    isogenies between them, and walk through this graph in a pseudorandom way. After
    throwing a lot of cool math at the study of these objects—graph theory, quaternion
    algebras, and so on—you end up with hard computational problems that you can use
    for crypto applications.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 后量子密码学方法中最年轻的一类；起始于2000年代初期。同态映射是一种将椭圆曲线上的点映射到另一椭圆曲线上的点的函数，并满足特定的数学性质。然后，你可以绘制一张图，其节点为椭圆曲线，边为它们之间的同态映射，并以伪随机方式在这张图上行走。在对这些对象的研究中投入大量酷炫的数学—图论、四元代数等—你最终会得到一些难度很高的计算问题，可以用来做加密应用。
- en: J
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: J
- en: '*Journal of Cryptology* (JoC)'
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*密码学期刊*（JoC）'
- en: Cryptography’s *Nature* minus the publication fees.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学的*本质*，减去出版费用。
- en: K
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K
- en: KASUMI
  id: totrans-573
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KASUMI
- en: A variant of the 1995 block cipher MISTY1; used in 3G telecommunications standards
    as the A5/3 cipher. KASUMI is broken, because a practical key-recovery attack
    exists. KASUMI is also not broken, because said attack requires chosen-ciphertext
    queries in the related-key model, which isn’t realistic.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 1995年块密码MISTY1的变体；在3G电信标准中作为A5/3密码使用。KASUMI已被破解，因为存在一个实用的密钥恢复攻击。KASUMI也未被破解，因为该攻击需要在相关密钥模型中进行选择密文查询，这在实际中并不现实。
- en: Keccak
  id: totrans-575
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Keccak
- en: The hash function family standardized as SHA-3; it is built from a single permutation
    according to the sponge function framework. Keccak’s permutation performs a clever
    combination of XORs and logical ANDs. It’s also optimized for efficiency and easily
    scales to different widths.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化为SHA-3的哈希函数系列；它是根据海绵函数框架由单一置换构建的。Keccak的置换执行了一种巧妙的XOR和逻辑与的组合。它还进行了效率优化，并且容易扩展到不同的宽度。
- en: The original Keccak design and its sponge mode have led to several other algorithms.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的Keccak设计及其海绵模式已衍生出其他几种算法。
- en: See [*Permutation-based cryptography*](#Permutation-based-cryptography).
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*基于置换的密码学*](#Permutation-based-cryptography)。
- en: KeeLoq
  id: totrans-579
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KeeLoq
- en: The most expensive broken cipher ever. One of the rare block ciphers to rely
    on a feedback shift register.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 史上最昂贵的破译密码。为数不多的依赖反馈移位寄存器的块密码之一。
- en: KEM (key encapsulation mechanism)
  id: totrans-581
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KEM（密钥封装机制）
- en: A public-key encryption scheme designed to encrypt and decrypt short, fixed-size
    chunks of data; commonly used to encapsulate a symmetric key. You can think of
    a KEM as a key agreement in which one party gets to choose the key; a KEM’s encryption
    function picks a random symmetric key and encrypts it, whereas the KEM’s decryption
    function decrypts it to recover the symmetric key. It can then continue to decrypt
    any data encrypted using that key with some symmetric primitives.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 一种公钥加密方案，设计用于加密和解密短小的、固定大小的数据块；通常用于封装对称密钥。你可以将KEM视为一种密钥协商，其中一方选择密钥；KEM的加密函数选择一个随机对称密钥并加密它，而KEM的解密函数解密它以恢复对称密钥。然后，它可以继续解密使用该密钥加密的任何数据，采用一些对称算法。
- en: Kerberos
  id: totrans-583
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kerberos
- en: The ancestor of single sign-on systems, designed in the late 1980s to provide
    secure authentication and authorization to MIT’s distributed computing platform
    Athena. Admittedly an elder technology, Kerberos is one of the security protocols
    that relatively few people know despite its major impact and the fact that it’s
    still used in many places, such as in the Radius authentication protocol. Indeed,
    in spite of its old age, Kerberos remains a decently secure protocol. It implements
    often forgotten concepts, such as not trusting any party until they’re authenticated
    and not exposing passwords in clear. It has some limitations; for instance, Kerberos
    must rely on a trusted third party. But then again, how many security protocols
    ultimately don’t? Sometimes known as a protocol that uses only symmetric cryptography,
    Kerberos can also support public-key crypto, as well as various authentication
    forms, such as one-time passwords, hardware tokens, and biometrics.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 单点登录系统的前身，设计于1980年代末，旨在为麻省理工学院的分布式计算平台Athena提供安全的身份验证和授权。尽管它是一项较老的技术，但Kerberos依然是一个相对较少人知晓的安全协议，尽管它产生了重要影响，并且至今仍在许多地方使用，例如在Radius身份验证协议中。实际上，尽管年事已高，Kerberos依然是一个相当安全的协议。它实现了一些常被遗忘的概念，如在身份验证之前不信任任何一方，以及不明文暴露密码。它也有一些限制；例如，Kerberos必须依赖于受信任的第三方。但话说回来，最终有多少安全协议不依赖于此呢？Kerberos有时被称为仅使用对称加密的协议，但它也可以支持公钥加密，以及各种身份验证形式，如一次性密码、硬件令牌和生物识别技术。
- en: Kerckhoffs’ principles
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 凯尔科夫斯原则
- en: The six principles, or *desiderata*, of security established by the 19th-century
    Dutch cryptographer Auguste Kerckhoffs in his article “La cryptographie militaire”(in
    French).
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 19世纪荷兰密码学家奥古斯特·凯尔科夫斯在其文章《军事密码学》（法语）中提出的六项安全原则，或称*必要条件*。
- en: Key derivation function (KDF)
  id: totrans-587
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥派生函数（KDF）
- en: 'A function that hashes stuff to obtain a key. A simple hash function doesn’t
    always do the trick, because the *stuff* to be hashed typically includes a combination
    of secret and nonsecret values. A KDF’s interface helps process these values securely
    to avoid collisions between different sets of stuff. There is another reason hash
    functions aren’t sufficient: a KDF must often generate keys of arbitrary size,
    whereas most hash functions generate values of a fixed size.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 一种将数据哈希化以获得密钥的函数。一个简单的哈希函数并不总是能解决问题，因为要哈希的*数据*通常包含秘密和非秘密值的组合。KDF的接口有助于安全地处理这些值，以避免不同数据集之间的碰撞。哈希函数不足以解决问题的另一个原因是：KDF通常必须生成任意大小的密钥，而大多数哈希函数生成的是固定大小的值。
- en: A special case arises whenever the key can’t be just any string of bits (as
    in the case of a symmetric key) but a public/private key pair. In those situations,
    rather than generating the key pair as part of the KDF, you would generally use
    a second algorithm to deterministically create a key pair from a seed.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 当密钥不仅仅是任意一串比特（如对称密钥的情况），而是公钥/私钥对时，便会出现特殊情况。在这种情况下，通常不会将密钥对作为密钥派生函数（KDF）的一部分来生成，而是会使用第二种算法从种子值中确定性地创建密钥对。
- en: Last but not least, when the stuff’s secret is a password, passphrase, or other
    low-entropy value, you need a special kind of KDF, called a *password hash function*.
    These have some additional security requirements.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，当要保护的秘密是密码、口令短语或其他低熵值时，你需要一种特殊的KDF，称为*密码哈希函数*。这些函数具有一些额外的安全要求。
- en: See [*Password hash function*](#Password-hash-function).
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[*密码哈希函数*](#Password-hash-function)。
- en: Key escrow
  id: totrans-592
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥托管
- en: The idea of entrusting an organization or entity with the custody of secret
    keys and therefore the rights associated with them, for example, to decrypt communications.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 将组织或实体委托保管秘密密钥及其相关权利的思想，例如用于解密通信。
- en: 'As told by the European Council in a meeting in May 1998:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 根据欧洲理事会在1998年5月的会议上所述：
- en: The Council Resolution of 17 January 1995 recognised that lawfully authorised
    interception of communications is an important tool for the investigation of serious
    crime. The Council notes that law enforcement agencies may require lawful access
    to encryption keys, without the knowledge of the user of the cryptographic service,
    in order to maintain this capability. To this end, the Council recognises that
    one possible approach amongst others, which might meet law enforcement interests,
    might be the promotion of confidentiality services which involve the depositing
    of an encryption key or other information with a third party. Such services are
    often known as “key escrow” or “key recovery” services. Law enforcement agencies
    may also require lawful access to encryption keys where it is necessary to decrypt
    material which has been seized as part of a criminal investigation.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 1995年1月17日的欧洲理事会决议承认，依法授权的通信拦截是调查严重犯罪的重要工具。理事会指出，执法机关可能需要在不知情的情况下合法访问加密密钥，以保持此项能力。为此，理事会认为，可能的解决方案之一是促进涉及将加密密钥或其他信息存放在第三方的保密服务。这类服务通常被称为“密钥保管”或“密钥恢复”服务。执法机构也可能需要合法访问加密密钥，以便解密在刑事调查中被扣押的材料。
- en: In principle, key escrow sounds easy and a fair solution to real problems. But
    in practice, key escrow raises a lot of procedural, technological, and political
    problems, and its benefits might not be worth the additional cost and risks, depending
    on your metric.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，密钥保管听起来是一个简单且公平的解决方案，解决了实际问题。但在实践中，密钥保管会引发很多程序性、技术性和政治性问题，其好处可能不值得额外的成本和风险，具体取决于你的评估标准。
- en: See [*Key management*](#Key-management).
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*密钥管理*](#Key-management)。
- en: Key management
  id: totrans-598
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥管理
- en: The single hardest problem in cryptography. Key management won’t be solved by
    quantum computers or with an NP oracle.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 加密学中最难解决的问题。密钥管理无法通过量子计算机或 NP 神谕来解决。
- en: Key wrapping
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥封装
- en: To symmetric cryptography, what KEMs are to public-key cryptography.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 对称加密中，KEMs 就像公钥加密中的作用一样。
- en: Kleptography
  id: totrans-602
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克利普特加密
- en: A term coined to refer to cryptography used in malware and other unholy applications,
    particularly when their aim is to steal information in a covert way; for example,
    via subliminal channels or obfuscation.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 一个术语，用来指代用于恶意软件和其他不正当应用中的加密，特别是当其目的是通过隐蔽渠道或混淆等方式窃取信息时。
- en: See [*Cryptovirology*](#Cryptovirology).
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*加密病毒学*](#Cryptovirology)。
- en: Known-key attack
  id: totrans-605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已知密钥攻击
- en: An adversarial model that assumes the attacker already knows the secret key
    of some symmetric cipher. Therefore, the attack’s goal isn’t to recover a key
    but to identify structural properties that the attacker might exploit when the
    cipher is used in a hash function or some other construction where its key might
    not be secret.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 一种假设攻击者已知某个对称密码的密钥的对抗模型。因此，该攻击的目标不是恢复密钥，而是识别攻击者可能在密码用于哈希函数或其他构造时利用的结构属性，其中其密钥可能不是保密的。
- en: Kupyna (Купина)
  id: totrans-607
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kupyna (Купина)
- en: 'The Ukrainian national hash function standard; established in 2014 and named
    after the plant *Polygonatum multiflorum*. Kupyna is based on a fairly unusual
    compression function construction: given a message block *M* and an initial hash
    value *H*, the next hash value is computed as *H* ⊕ Perm[1](*M*) ⊕ Perm[2](*M*
    ⊕*H*), where Perm[1] and Perm[2] are permutations similar to AES with no key and
    a wider state.'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 乌克兰国家哈希函数标准；于2014年建立，以植物 *Polygonatum multiflorum* 命名。Kupyna 基于一种相当不寻常的压缩函数结构：给定消息块
    *M* 和初始哈希值 *H*，下一个哈希值计算为 *H* ⊕ Perm[1](*M*) ⊕ Perm[2](*M* ⊕ *H*)，其中 Perm[1] 和
    Perm[2] 是类似于 AES 的无密钥置换和更宽的状态。
- en: L
  id: totrans-609
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: L
- en: Laconic zero-knowledge proof
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简洁的零知识证明
- en: An interactive proof protocol where the prover sends very few bits to the verifier.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 一种交互式证明协议，证明者向验证者发送极少的比特。
- en: Lai–Massey
  id: totrans-612
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lai–Massey
- en: A secure way to build a block cipher, although much less common than the Feistel
    substitution-permutation networks. The Lai–Massey construction is notably used
    by IDEA and FOX.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 一种构建分组密码的安全方式，尽管比 Feistel 置换-代换网络少见。Lai-Massey 结构被 IDEA 和 FOX 等广泛使用。
- en: Lamport signature
  id: totrans-614
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lamport 签名
- en: 'The first hash-based signature scheme, and in its original form, the simplest
    signature scheme ever: to sign a one-bit message, you’d first generate a private
    key composed of two random values *K*[0] and *K*[1]. Then you’d share the public
    key (Hash(*K*[0]), Hash(*K*[1])). To sign the message *0*, you’d attach *K*[0]
    as a signature, and you’d attach *K*[1] otherwise.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个基于哈希的签名方案，在其原始形式中，是最简单的签名方案：为了签署一个一位消息，你首先生成一个由两个随机值 *K*[0] 和 *K*[1] 组成的私钥。然后，你会分享公共密钥（Hash(*K*[0]），Hash(*K*[1]））。为了签署消息
    *0*，你会附上 *K*[0] 作为签名，反之则附上 *K*[1]。
- en: This works, but it’s not very useful, because 1) a key pair can sign only one
    message, and 2) the key size is proportional to that of the message.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有效，但并不非常有用，因为 1）一个密钥对只能签署一条消息，2）密钥的大小与消息的大小成比例。
- en: Lattice-based cryptography
  id: totrans-617
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于格的密码学
- en: The most promising class of post-quantum cryptography schemes, as far as real
    applications are concerned. Lattice-based cryptography usually relies on some
    version of the learning with errors (LWE) problem and in particular its relation
    to lattice problems. It can provide encryption/KEM and signature schemes. It’s
    generally considered the most promising type of post-quantum scheme due to its
    combination of acceptable security assurance, performance, and diversity of constructions.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 就实际应用而言，后量子密码学中最有前景的类别。基于格的密码学通常依赖于某种形式的带错误学习（LWE）问题，特别是它与格问题的关系。它可以提供加密/KEM
    和签名方案。由于其在安全保证、性能和构造多样性方面的结合，它通常被认为是最有前景的后量子方案类型。
- en: Lattice-based schemes represent 39 percent of round one submissions to NIST’s
    post-quantum competition, 46 percent of submissions selected in round two, and
    71 percent of the finalists.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 基于格的方案占 NIST 后量子竞赛第一轮提交的 39%，第二轮选中的 46%，以及决赛选手的 71%。
- en: See [*Learning with errors (LWE)*](#Learning-with-errors-LWE).
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*带错误学习（LWE）*](#Learning-with-errors-LWE)。
- en: Le Chiffre
  id: totrans-621
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Le Chiffre
- en: 'A character in an Ian Fleming spy book. Anyone whose name means *The Cipher*
    can only be a villain:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 伊恩·弗莱明间谍小说中的一位角色。任何名字代表 *密码* 的人只能是反派：
- en: Mostly expensive, but discreet. Large sexual appetites. Flagellant. Expert driver
    of fast cars. Adept with small arms and other forms of personal combat, including
    knives. Carries three Eversharp razor blades, in hatband, heel of left shoe, and
    cigarette case. Knowledge of accountancy and mathematics. Fine gambler.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下昂贵，但低调。强烈的性欲。自罚者。高速公路上是驾驶高手。擅长使用小型武器和其他形式的个人战斗，包括刀具。携带三把 Eversharp 剃刀片，分别放在帽带、左鞋跟和烟盒里。精通会计和数学。是个赌术高手。
- en: Leakage-resilient cryptography
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抗泄漏密码学
- en: An attempt to model side-channel information leaks using abstract models of
    computation and memory leakage. Such models include the Bounded Retrieval Model,
    Continual Memory Leakage, Auxiliary Memory Leakage, and Only Computation Leaks,
    among others. Building secure schemes within these models has proved an interesting
    exercise, yet of questionable practical interest, because the models largely fail
    to capture the complex reality of side channels and physical attacks.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 一种尝试使用计算和内存泄漏的抽象模型来模拟侧信道信息泄漏。这些模型包括有界检索模型、持续内存泄漏、辅助内存泄漏以及仅计算泄漏等。基于这些模型构建安全方案已证明是一个有趣的练习，尽管实际应用性存疑，因为这些模型在很大程度上未能捕捉到侧信道和物理攻击的复杂现实。
- en: Learning with errors (LWE)
  id: totrans-626
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带错误学习（LWE）
- en: The problem of solving a system of linear equations when the equations have
    errors in them. LWE generalizes the *learning parity with noise* (*LPN*) problem
    so it has arbitrary dimensions and numbers greater than 0 and 1.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 解决一个线性方程组的问题，当方程中包含误差时。LWE 是 *带噪声学习对称* (*LPN*) 问题的推广，使其具有任意的维度和大于 0 与 1 的数字。
- en: Lattice-based cryptography schemes often rely on the hardness of some LWE problem.
    The reason is that, on average, LWE is as hard as the hardest instances of a lattice
    problem, such as GapSVP. The resulting cryptographic constructions should be,
    in turn, at least as hard to break as LWE.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 基于格的密码学方案通常依赖于某种 LWE 问题的难度。原因在于，平均而言，LWE 与最难的格问题实例一样困难，例如 GapSVP。因此，基于 LWE 的加密构造应至少与
    LWE 一样难以破解。
- en: Length extension attack
  id: totrans-629
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 长度扩展攻击
- en: The property of certain hash functions that given Hash(*X*), and without knowing
    *X*, it’s trivial to find the value of Hash(*X* ||pad|| *Y*) for any *Y*, where
    pad is padding bits followed by the encoding of *X*’s length. Hash functions vulnerable
    to length extension include all those built with the Merkle–Damgård construction,
    such as SHA-256 and RIPEMD-160\. More recent hash functions, such as SHA-3 or
    BLAKE3, aren’t vulnerable to length extension.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '某些哈希函数的特性是，给定Hash(*X*)，且不需要知道*X*，就能轻松计算出Hash(*X* ||pad|| *Y*)的值，其中pad是填充位，后接*X*长度的编码。易受长度扩展攻击的哈希函数包括所有使用Merkle–Damgård结构构建的哈希函数，如SHA-256和RIPEMD-160。更新的哈希函数，如SHA-3或BLAKE3，则不易受到长度扩展攻击。  '
- en: Length-preserving encryption
  id: totrans-631
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '长度保持加密  '
- en: Encryption that creates ciphertexts of exactly the same bit size as their corresponding
    plaintext; for example, encrypting any 16-byte plaintext into a 16-byte ciphertext,
    any 1-byte plaintext into a 1-byte ciphertext, any 2-bit plaintext into a 2-bit
    ciphertext, and so on. In applications where the payload length is fixed, length-preserving
    encryption is necessary to encrypt payload data.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与其对应的明文大小完全相同的密文的加密方法；例如，将任何16字节的明文加密为16字节的密文，任何1字节的明文加密为1字节的密文，任何2位的明文加密为2位的密文，等等。在负载长度固定的应用中，长度保持加密是加密负载数据所必需的。
- en: Length-preserving encryption shouldn’t be confused with *format-preserving encryption*.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '长度保持加密不应与*格式保持加密*混淆。  '
- en: LFSR (linear feedback shift register)
  id: totrans-634
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'LFSR（线性反馈移位寄存器）  '
- en: See [*Feedback shift register*](#Feedback-shift-register).
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '请参见[*反馈移位寄存器*](#Feedback-shift-register)。  '
- en: Lightweight cryptography
  id: totrans-636
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '轻量级加密  '
- en: Cryptography optimized for IoT devices and other platforms that have memory
    and logic constraints. But these constrained platforms usually have unique limitations
    and therefore require unique designs. Consequently, academic research about lightweight
    cryptography has been of disappointing practical relevance, sometimes because
    embedded platforms often include an AES logic.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '针对物联网设备及其他具有内存和逻辑约束的平台优化的加密算法。但这些受限平台通常有独特的限制，因此需要独特的设计。因此，关于轻量级加密的学术研究在实践中的相关性令人失望，有时是因为嵌入式平台通常包括AES逻辑。  '
- en: Linear cryptanalysis
  id: totrans-638
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '线性密码分析  '
- en: A cryptanalysis technique for symmetric ciphers that exploits patterns described
    in terms of linear equations, or equations consisting only of XORs between bits.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '一种针对对称加密算法的密码分析技术，它利用线性方程中描述的模式，或仅由比特间的XOR运算组成的方程。  '
- en: Linear cryptanalysis might look totally different from differential cryptanalysis,
    but it’s actually closely related to it. The most successful linear attack is
    arguably the one on DES.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '线性密码分析看起来与差分密码分析完全不同，但它实际上与后者紧密相关。最成功的线性攻击可以说是对DES的攻击。  '
- en: Linkability
  id: totrans-641
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '可链接性  '
- en: A property of a signature scheme that allows an attacker to determine whether
    two signatures were issued by the same signer. Of course, standard signatures,
    such as ECDSA signatures, are linkable by design, which is fine. But nonlinkability
    is a requirement for ring signatures.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '一种签名方案的属性，允许攻击者确定两个签名是否由同一个签名者发出。当然，标准签名，如ECDSA签名，设计上是可链接的，这没问题。但不可链接性是环签名的要求。  '
- en: LM hash
  id: totrans-643
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'LM哈希  '
- en: Short for LAN Manager hash, the function that hashes users’ passwords in earlier
    Microsoft Windows versions. LM hash is the predecessor of NT hash, which is a
    stronger hash.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 'LAN Manager哈希的缩写，是早期Microsoft Windows版本中用于哈希用户密码的函数。LM哈希是NT哈希的前身，NT哈希是更强的哈希。  '
- en: See [*NT hash*](#NT-hash).
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '请参见[*NT哈希*](#NT-hash)。  '
- en: Luby–Rackoff
  id: totrans-646
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Luby–Rackoff  '
- en: See [*Feistel network*](#Feistel-network).
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '请参见[*Feistel网络*](#Feistel-network)。  '
- en: Lucifer
  id: totrans-648
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Lucifer  '
- en: The block cipher designed by Horst Feistel at IBM that led to the DES standard.
    It wasn’t originally a Feistel network, but a substitution-permutation network
    like AES, with blocks of 32, 48, or 128 bits. Lucifer was initially implemented
    in APL (A Programming Language) and codenamed *Demonstration*. But the APL workspace
    restricted projects’ name length, so *Demonstration* became *Demon* and later
    *Lucifer*.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 'Horst Feistel在IBM设计的块加密算法，后来成为DES标准的基础。它最初并不是一个Feistel网络，而是一个类似AES的替代-置换网络，使用32位、48位或128位的块。Lucifer最初在APL（一种编程语言）中实现，代号为*Demonstration*。但APL工作空间限制了项目名称的长度，因此*Demonstration*变成了*Demon*，然后变成了*Lucifer*。  '
- en: M
  id: totrans-650
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'M  '
- en: MAC (message authentication code)
  id: totrans-651
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'MAC（消息认证码）  '
- en: 'Not a signature, but very close: like a public-key signature a MAC should be
    unforgeable without the key, but unlike a public-key signature a MAC doesn’t provide
    nonrepudiation.'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 不是签名，但非常接近：像公钥签名一样，MAC应当在没有密钥的情况下无法伪造，但与公钥签名不同，MAC不提供不可否认性。
- en: In theory, a MAC can be unforgeable yet leak information about the message,
    but in practice most MACs don’t.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，MAC可以是不可伪造的，但泄露消息信息，但在实践中，大多数MAC并不会这样做。
- en: MAGENTA
  id: totrans-654
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MAGENTA
- en: 'An unfortunate candidate at the AES competition, broken literally minutes after
    it was presented at the first AES conference. A conference participant commented:
    “It got so bad that a few of the participants started doing real-time cryptanalysis
    and suggesting attacks that would break the algorithm right there and then. I
    marvelled that the German guy managed to keep his composure. The whole spectacle
    was rather shameful.”'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 在AES竞赛中的一次不幸候选，在首次AES会议上展示后几分钟内就被破解。会议参与者评论道：“情况糟糕到几位参与者开始进行实时密码分析并提出攻击方法，立刻就能破解这个算法。我惊讶于那位德国人能保持冷静。整个场面相当丢脸。”
- en: Malleability
  id: totrans-656
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可变性
- en: 'An underappreciated security notion: an encryption scheme is nonmalleable if
    an attacker cannot turn a ciphertext Enc(*K*, *M*) into another valid ciphertext
    Enc(*K*, *f*(*M*)) for some specified function *f*(). A nonmalleable scheme is
    therefore more secure than a malleable one. In the chosen-ciphertext model, nonmalleability
    is equivalent to indistinguishability (the strongest security notion).'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 一个被低估的安全概念：如果攻击者无法将密文Enc(*K*, *M*)转换为另一个有效的密文Enc(*K*, *f*(*M*))（其中*f*()是某个指定函数），则该加密方案是不可变的。因此，不可变的方案比可变的方案更安全。在选择密文模型下，不可变性等同于不可区分性（最强的安全概念）。
- en: Manger attack
  id: totrans-658
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Manger攻击
- en: A padding oracle attack on RSA encryption in OAEP mode. The Manger attack is
    less well known than the Bleichenbacher attack on older RSA encryption, because
    it’s generally harder to exploit. Indeed, as Manger’s original paper noted, the
    PKCS standard already described a partial mitigation against his attack when saying
    that “it is important that the error messages output in steps 4 [integer-to-octets
    conversion] and 5 [OAEP decoding] be the same.” But as with Bleichenbacher’s attack,
    Manger’s attack also works if the attacker exploits timing leaks instead of error
    messages.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 针对RSA加密在OAEP模式下的填充oracle攻击。Manger攻击没有Bleichenbacher针对旧版RSA加密的攻击那么广为人知，因为它通常更难利用。事实上，正如Manger的原始论文所指出的，PKCS标准已经描述了对他的攻击的部分缓解方法，指出“步骤4（整数到八位字节转换）和步骤5（OAEP解码）中输出的错误信息应该相同。”但是与Bleichenbacher的攻击一样，Manger的攻击也可以通过利用时间泄露，而非错误信息来成功。
- en: Man-in-the-middle
  id: totrans-660
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: A class of attacks where the attacker surreptitiously captures and modifies
    traffic from two or more correspondents. The FREAK (Factoring RSA Export Keys)
    attack on TLS implementations is an example of a man-in-the-middle attack in which
    the attacker modifies session initiation data to force the use of a weak cipher
    suite.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 一类攻击，攻击者悄悄截获并修改来自两个或更多通信者的流量。FREAK（分解RSA导出密钥）攻击TLS实现是中间人攻击的一个例子，攻击者修改会话初始化数据，强制使用弱加密套件。
- en: See [*Meet-in-the-middle*](#Meet-in-the-middle).
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*中间人攻击*](#Meet-in-the-middle)。
- en: MASH (Modular Arithmetic Secure Hash)
  id: totrans-663
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MASH（模块算术安全哈希）
- en: An early attempt at a hash function relying on the same operations as RSA.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 一种早期尝试的哈希函数，依赖于与RSA相同的操作。
- en: See [*VSH (Very Smooth Hash)*](#VSH-Very-Smooth-Hash).
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*VSH（非常平滑哈希）*](#VSH-Very-Smooth-Hash)。
- en: McEliece encryption scheme
  id: totrans-666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: McEliece加密方案
- en: See [*Code-based cryptography*](#Code-based-cryptography).
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*基于代码的加密学*](#Code-based-cryptography)。
- en: MD4
  id: totrans-668
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MD4
- en: Hash function even weaker than MD5.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 比MD5更弱的哈希函数。
- en: MD5
  id: totrans-670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MD5
- en: Previously a synonym of *checksum* and *hash function*, now a sign of poor cryptography
    design because it isn’t collision resistant. But MD5 is still secure against preimage
    attacks.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 曾是*校验和*和*哈希函数*的同义词，现在是加密设计不良的标志，因为它不具备抗碰撞性。但MD5仍然能抵抗预影像攻击。
- en: MDC (Message Digest Cipher)
  id: totrans-672
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MDC（消息摘要密码）
- en: Old-fashioned name for hash functions.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数的老式名称。
- en: MDC-2 (Modification Detection Code 2)
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MDC-2（修改检测代码2）
- en: A construction that turns an *n*-bit block cipher into a hash function with
    2*n*-bit output. The resulting hash is less secure than an ideal 2*n*-bit hash
    but more secure than an *n*-bit hash. MDC-2 was mainly used with DES as *MDC-2DES*
    except when IBM’s patent was a concern.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 一种将*n*位块加密变成一个具有2*n*位输出的哈希函数的构造。由此生成的哈希比理想的2*n*位哈希更不安全，但比*n*位哈希更安全。MDC-2主要与DES一起使用，称为*MDC-2DES*，除了在IBM的专利问题上。
- en: Meet-in-the-middle
  id: totrans-676
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间相遇法
- en: 'A folklore cryptanalysis technique mainly known for its application in attacking
    symmetric primitives. A meet-in-the-middle is applicable when consecutive encryption
    layers (also called *rounds* or *cipher instances*) work with independent keys.
    For example, when encrypting a message *M* as *C* = Enc²(*K*[2], Enc¹(*K*[1],
    *M*)) with two *n*-bit keys *K*[1] and *K*[2] and two distinct ciphers Enc¹ and
    Enc², you might expect a security of 2*n* bits (as if it were equivalent to encrypting
    with a 2*n*-bit key). But the actual security is closer to *n* bits: the reason
    is that, given a pair (*C*, *M*) you can compute *X* = Dec²(*K*, *C*) for all
    the 2^(*n*) values of *K*, and then compute *Y* = Enc¹(*K''*, *M*) for all 2^(*n*)
    values of *K''*. The pair (*K''*, *K*) for which *X* = *Y* is then likely to be
    (*K*[1], *K*[2]).'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 一种民间密码分析技术，主要用于攻击对称加密原语。当连续加密层（也称为*轮*或*密码实例*）使用独立密钥时，适用中间相遇法。例如，当将消息 *M* 加密为
    *C* = Enc²(*K*[2], Enc¹(*K*[1], *M*))，使用两个 *n*-bit 密钥 *K*[1] 和 *K*[2]，以及两个不同的密码
    Enc¹ 和 Enc² 时，你可能期望安全性为 2*n* 位（就像用 2*n* 位密钥加密一样）。但实际安全性更接近 *n* 位：原因是，给定一对 (*C*,
    *M*)，你可以对所有 2^(*n*) 个 *K* 值计算 *X* = Dec²(*K*, *C*)，然后对所有 2^(*n*) 个 *K'* 值计算 *Y*
    = Enc¹(*K'*, *M*)。此时，*X* = *Y* 的一对 (*K'*, *K*) 很可能是 (*K*[1], *K*[2])。
- en: You can view this trick as one instance of a more general optimization technique
    found in many cryptanalytic attacks. Those attacks include the baby-step giant-step
    algorithm (to compute discrete logarithms), the GHS isogeny-based attack on ECDLP,
    or attacks on isogeny-based schemes.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个技巧视为许多密码分析攻击中的一种常见优化技术。这些攻击包括婴步-巨步算法（用于计算离散对数）、基于 GHS 同伦的 ECDLP 攻击，或对同伦方案的攻击。
- en: See [*Man-in-the-middle*](#Man-in-the-middle).
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*中间人攻击*](#Man-in-the-middle)。
- en: Merkle puzzle
  id: totrans-680
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默克尔难题
- en: The closest thing to public-key cryptography before (secure) public-key cryptography
    was invented.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 在（安全的）公钥密码学被发明之前，最接近公钥密码学的东西。
- en: Merkle tree
  id: totrans-682
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默克尔树
- en: 'A solution to many problems in cryptography and computing. Essentially, a hash
    tree. It can, for example, be used to demonstrate the knowledge of some large
    set of data in a compact and efficient way: you can prove that a piece of data
    is in the tree by showing the list of nodes required to compute the root node
    from the said data’s node (usually a leaf). This list of values has been called
    the *authentication path*, *inclusion proof*, and *Merkle proof*.'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 解决密码学和计算中的许多问题。基本上，它是一个哈希树。例如，它可以用于以紧凑和高效的方式证明某些大数据集的知识：你可以通过展示从该数据的节点（通常是叶节点）计算根节点所需的节点列表来证明数据在树中的存在。这个值列表被称为*认证路径*、*包含证明*和*默克尔证明*。
- en: Merkle trees are the main components of hash-based signatures.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 默克尔树是基于哈希的签名的主要组成部分。
- en: Merkle–Damgård construction
  id: totrans-685
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默克尔–达姆戈德构造
- en: A straightforward technique for hashing messages of any length when using a
    hash function that hashes only short messages. It does this in such a way that,
    if the short-length hash is secure, the resulting hash of any length is secure
    as well. This is one of the earliest security proofs in symmetric cryptography.
    But this proof is only about collision resistance and preimage resistance, not
    about security in the most absolute sense. For example, Merkle–Damgård hash functions,
    such as SHA-256, are vulnerable to length extension attacks.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单的技术，用于对任何长度的消息进行哈希，当使用的哈希函数仅对短消息进行哈希时。它的工作方式是，如果短长度哈希是安全的，那么任何长度的结果哈希也是安全的。这是对称密码学中最早的安全性证明之一。但这个证明仅关于碰撞抗性和预像抗性，而不是关于最绝对意义上的安全性。例如，像
    SHA-256 这样的 Merkle–Damgård 哈希函数容易受到长度扩展攻击。
- en: Mersenne twister
  id: totrans-687
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 梅森旋转器
- en: Not a cryptographic pseudorandom generator.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 不是一个密码学伪随机生成器。
- en: Message franking
  id: totrans-689
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息标记
- en: A protocol to allow the reporting of abusive messages in an end-to-end encryption
    conversation while maintaining an acceptable level of security. Motivated by Facebook’s
    problem of deploying end-to-end encryption in Messenger, yet with the possibility
    of users to report messages to Facebook in a way that their sender can’t cryptographically
    deny their sending. Therefore, it requires quite the opposite of plausible deniability.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 一种协议，用于在端到端加密的对话中报告恶意消息，同时保持可接受的安全性水平。灵感来源于 Facebook 在 Messenger 中部署端到端加密时面临的问题，但允许用户以一种方式向
    Facebook 报告消息，使得发送者无法在加密上否认其发送。因此，它需要完全相反的可否认性。
- en: Miller–Rabin
  id: totrans-691
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 米勒–拉宾
- en: The most common probabilistic primality test. Under certain conditions, you
    can fool the test into declaring that a composite number is prime.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的概率素性测试。在某些条件下，你可以欺骗该测试，使其错误地将复合数判断为素数。
- en: See [*PRIMES*](#PRIMES).
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*PRIMES*](#PRIMES)。
- en: MINERVA
  id: totrans-694
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MINERVA
- en: See [*Crypto AG*](#Crypto-AG).
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Crypto AG*](#Crypto-AG)。
- en: Mining
  id: totrans-696
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挖矿
- en: Hashing for money.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 用于赚钱的哈希。
- en: Misuse resistance
  id: totrans-698
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 误用抗性
- en: Defense-in-depth applied to cryptography. Misuse resistance counters the fact
    that some ciphers, such as AES-GCM, are secure only if you never call them twice
    with the same nonce. (A nonce is the auxiliary input that ensures that you’ll
    get a different ciphertext if you encrypt the same plaintext twice with the same
    key.) Misuse-resistant ciphers attempt to eliminate this problem. Their only limitation
    is that if you encrypt the same message with the same key and nonce twice, the
    output will be the same. (As an exercise, find why this limitation can’t be avoided.)
    The only security flaw is that an attacker will learn when you’ve encrypted the
    same message twice. SIV-AES is an example of such a cipher.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 深度防御应用于密码学。误用抗性解决了一些密码（如AES-GCM）仅在你永远不使用相同的随机数两次时才是安全的问题。（随机数是辅助输入，确保你如果使用相同的密钥对相同的明文加密两次时，得到的密文会不同。）误用抗性密码尝试消除这个问题。它们的唯一限制是，如果你使用相同的密钥和随机数对相同的消息加密两次，输出将是相同的。（作为练习，找出为什么这个限制无法避免。）唯一的安全缺陷是攻击者能够知道你是否对相同的消息加密了两次。SIV-AES是这种密码的一个例子。
- en: Misuse resistance can extend to cases other than symmetric encryption. It also
    applies to APIs to prevent disasters when the caller forgets to read the documentation
    (if it exists).
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 误用抗性可以扩展到除对称加密之外的情况。它还适用于API，以防当调用者忘记阅读文档（如果存在的话）时，造成灾难。
- en: Mixnet
  id: totrans-701
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合网络
- en: A multi-party protocol that provides anonymity by shuffling a sequence of ciphertexts
    *C*[1], *. . .* , *C*[n]into another sequence *C'*[1], *. . .* , *C'*[n], so that
    for each *C*[i]there exists a *C'*[j]whose value is distinct but decrypts to the
    same plaintext. The protocol might also include a zero-knowledge proof that shows
    that the criterion is satisfied without leaking any information about the permutation
    or plaintexts.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 一种多方协议，通过洗牌一系列密文 *C*[1], *. . .* , *C*[n] 成为另一序列 *C'*[1], *. . .* , *C'*[n]
    来提供匿名性，以便对于每个 *C*[i]，都存在一个 *C'*[j]，其值不同但解密后为相同的明文。该协议还可能包括一个零知识证明，展示满足该标准而不泄漏关于置换或明文的任何信息。
- en: MQV (Menezes–Qu–Vanstone)
  id: totrans-703
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MQV（Menezes–Qu–Vanstone）
- en: Diffie–Hellman on steroids. Invented in 1995, yet rarely used, in part because
    of patents covering it. It’s the sister of HMQV and ECMQV (once in NSA’s Suite
    B). Today, MQV is perhaps best known for its use in the password-based key agreement
    protocol OPAQUE.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 强化版的Diffie–Hellman。1995年发明，但由于专利的存在，使用较少。它是HMQV和ECMQV的姊妹算法（曾出现在NSA的Suite B中）。今天，MQV或许最为人知的是它在基于密码的密钥协议OPAQUE中的应用。
- en: Multicollision
  id: totrans-705
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重碰撞
- en: For hash functions, a collision between more than two messages. It takes less
    time to find multicollisions on iterated hash functions (such as SHA-256) than
    for a hash function accessed as a black box. If intermediate chaining values of
    the iterated hash are *n*-bit, then a *k*-collision can be found in ⌈log[2]*k*⌉
    · 2^(*n*)^(/2) against *k*!^(1/)^(*k*)· 2^(*n*)^(^(*k*) ^(– 1))^(*k*)for an ideal,
    black-box hash.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 对于哈希函数，多个消息之间的碰撞。在迭代哈希函数（如SHA-256）上找到多重碰撞所需的时间比在作为黑盒访问的哈希函数上要少。如果迭代哈希的中间链值是
    *n* 位的，则可以在 ⌈log[2]*k*⌉ · 2^(*n*)^(/2) 时间内找到一个 *k* 碰撞，对于理想的黑盒哈希，计算为 *k*!^(1/)^(*k*)·
    2^(*n*)^(^(*k*) ^(– 1))^(*k*)。
- en: Multi-party computation (MPC)
  id: totrans-707
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多方计算（MPC）
- en: A class of cryptographic techniques for computing a function’s output without
    knowing the inputs’ original values. MPC is a rich field of research, yet with
    few major application until cryptocurrency wallets, which also use the MPC-like
    threshold signatures. Many more real-world MPC applications are expected.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 一类密码学技术，用于在不知道输入原始值的情况下计算一个函数的输出。MPC是一个丰富的研究领域，但直到加密货币钱包的出现，它才有了较大的应用，这些钱包也使用类似MPC的门限签名。预计未来会有更多的现实世界MPC应用。
- en: Multivariate cryptography
  id: totrans-709
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多元密码学
- en: A class of post-quantum schemes based on the hardness of solving systems of
    nonlinear equations in multiple variables. The hardness of such problems is related
    to that of Multivariate Quadratics (MQ), the problem of solving a random system
    of degree-2 equations, known to be NP-complete.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 一类基于求解多变量非线性方程组的困难性的后量子方案。这类问题的困难性与多元二次方程（MQ）问题相关，即求解随机二次方程组的难题，已知是NP完全的。
- en: Most multivariate schemes are signature schemes that produce short signatures
    (good) but require long public keys (not so good).
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数多变量方案是签名方案，能够生成短签名（优点），但需要较长的公钥（缺点）。
- en: N
  id: totrans-712
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: N
- en: NBS (National Bureau of Standards)
  id: totrans-713
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NBS（国家标准局）
- en: Previous name for NIST.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: NIST的前身名称。
- en: See [*NIST (National Institute of Standards and Technology)*](#NIST-National-Institute-of-Standards-and-Technology).
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*NIST（美国国家标准与技术研究院）*](#NIST-National-Institute-of-Standards-and-Technology)。
- en: NESSIE (New European Schemes for Signatures, Integrity, and Encryption)
  id: totrans-716
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NESSIE（新欧洲签名、完整性和加密方案）
- en: A project that ran from 2000 to 2003 and was headed by seven European institutions.
    It selected 17 recommended algorithms among 42 submissions.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目从2000年运行到2003年，由七个欧洲机构主办。它从42个提交中挑选出了17个推荐算法。
- en: 'NESSIE’s selected algorithms didn’t become formal standards, only informal
    recommendations, which in hindsight drew little interest: does anyone remember
    ACE Encrypt, SHACAL-2, or SFLASH?'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: NESSIE所选的算法并未成为正式标准，而只是非正式的推荐，回头看，这些推荐并未引起太多关注：还有人记得ACE Encrypt、SHACAL-2或SFLASH吗？
- en: “New Directions in Cryptography”
  id: totrans-719
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “密码学新方向”
- en: Invited research paper published in IEEE Transactions on Information Theory
    in November 1976, by Whitfield Diffie and Martin Hellman. Today, the Diffie–Hellman
    operation is used in almost every software or hardware system that performs cryptographic
    operations.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 由Whitfield Diffie和Martin Hellman于1976年11月在《IEEE信息理论杂志》上发表的邀请研究论文。如今，Diffie–Hellman操作几乎被用于所有执行密码学操作的软件或硬件系统中。
- en: NFSR (nonlinear feedback shift register)
  id: totrans-721
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NFSR（非线性反馈移位寄存器）
- en: See [*Feedback shift register*](#Feedback-shift-register).
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*反馈移位寄存器*](#Feedback-shift-register)。
- en: NIST (National Institute of Standards and Technology)
  id: totrans-723
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NIST（美国国家标准与技术研究院）
- en: The agency responsible for US Federal standards in various technical fields,
    including cryptography. NIST cryptography standards and recommendations have included
    algorithms (such as DSS, AES, SHA-2, SHA-3, and so on), block cipher operation
    modes, SHA-3 variants (such as cSHAKE, KMAC, and TupleHash), key management, random
    generation, and statistical tests.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 负责美国联邦技术领域各种标准的机构，包括密码学。NIST的密码学标准和推荐包括算法（如DSS、AES、SHA-2、SHA-3等）、块密码操作模式、SHA-3变种（如cSHAKE、KMAC和TupleHash）、密钥管理、随机生成和统计测试。
- en: The design of NIST-standardized algorithms, such as AES and SHA-3, was crowdsourced
    to cryptographers from all around the world through a public, transparent process.
    This approach is believed to be more reliable than delegating cryptographic algorithms
    design to NSA.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: NIST标准化算法的设计，如AES和SHA-3，采用了全球密码学家的众包方式，通过公开透明的过程进行。这种方法被认为比将密码学算法设计委托给NSA更可靠。
- en: NIZK (non-interactive zero-knowledge)
  id: totrans-726
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NIZK（非交互式零知识证明）
- en: A NIZK proof is a zero-knowledge proof that comes as a single message, as opposed
    to an interactive protocol involving multiple messages between a prover and a
    verifier. NIZK proofs often use the Fiat–Shamir heuristic to turn an interactive
    protocol into a noninteractive one.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: NIZK证明是一种零知识证明，它以单一消息的形式呈现，而不是通过证明者和验证者之间的多个消息交互协议。NIZK证明通常使用Fiat–Shamir启发式方法，将交互协议转换为非交互协议。
- en: Noekeon
  id: totrans-728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Noekeon
- en: 'A block cipher with a rare property: the encryption algorithm is the same as
    the decryption algorithm. This is convenient in environments with limited code,
    silicon, or developer time.'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 一种具有罕见属性的块密码：加密算法与解密算法相同。这在代码、硅或开发时间有限的环境中非常方便。
- en: Noise
  id: totrans-730
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Noise
- en: A framework for designing protocols using the Diffie–Hellman protocol. A Noise
    protocol can sometimes (but not always) replace TLS to implement transport security.
    This offers multiple potential benefits, including greater simplicity, identity
    hiding, and lower bandwidth usage.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Diffie–Hellman协议设计协议的框架。Noise协议有时（但并非总是）可以替代TLS实现传输安全。这带来了多个潜在好处，包括更简单的设计、隐藏身份和更低的带宽使用。
- en: Nonce
  id: totrans-732
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机数（Nonce）
- en: In the context of cryptography, a *number used only once*. An additional input
    to some cryptographic operation whose value should always be unique. This ensures
    that the operation will always produce different outputs, even if all inputs are
    identical. In practice, guaranteeing nonce uniqueness isn’t always straightforward,
    and nonces are typically generated at random. Authenticated ciphers will usually
    use a nonce to ensure that if you encrypt the same message twice, the output ciphertext
    will look different, thereby preventing an attacker from noticing that the same
    message was encrypted again.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密学的背景下，*仅使用一次的数字*。某些加密操作的额外输入，其值应始终唯一。这样可以确保即使所有输入相同，该操作也会产生不同的输出。实际上，保证唯一性并不总是那么简单，通常会随机生成nonce。认证密码算法通常会使用nonce，确保即使两次加密相同的消息，输出的密文也会不同，从而防止攻击者察觉同一消息被再次加密。
- en: Non-committing encryption
  id: totrans-734
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非承诺加密
- en: Sounds like deniable encryption, but not necessarily deniable. Using non-committing
    encryption, a fake ciphertext can be created in such a way that it looks like
    a real one. It can be shown to have been created from any plaintext by revealing
    a key pair and random bits that connect the ciphertext to the plaintext.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来像是可否认的加密，但不一定是可否认的。通过使用非承诺加密，可以创建一个假密文，使其看起来像一个真实的密文。可以通过揭示一对密钥和连接密文与明文的随机位来展示它是从任何明文创建的。
- en: Non-outsourceability
  id: totrans-736
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可外包性
- en: A property of a proof-of-work scheme whose work cannot be outsourced without
    revealing the private key of the prover. So it prevents pooled mining, where third
    parties perform a share of the work and are supposed to get a share of the mining
    reward. Such a proof must be efficiently verifiable without the private key.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 一种工作量证明方案的特性，该方案的工作不能在不暴露证明者私钥的情况下外包。因此，它防止了联合挖矿，即第三方执行部分工作并应获得一部分挖矿奖励。此类证明必须能够在没有私钥的情况下高效验证。
- en: Non-slanderability
  id: totrans-738
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可诽谤性
- en: In the context of ring signatures, a security property that prevents an attacker
    from forging a valid signature that can be linked to a specific member of the
    group of authorized signers. Although expressed in slightly different terms, non-slanderability
    is equivalent to unforgeability.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 在环签名的背景下，一种安全特性，防止攻击者伪造一个有效的签名，并将其与授权签名者群体中的特定成员关联。尽管以稍微不同的术语表达，不可诽谤性等同于不可伪造性。
- en: NSA (National Security Agency)
  id: totrans-740
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NSA（国家安全局）
- en: Cryptographers’ favorite three-letter agency. The NSA employs many cryptographers
    but never publishes in peer-reviewed conferences. However, it’s active in cryptography
    research, having designed established public standards (such as DSA, SHA-2, and
    the unfortunate Dual_EC_DRBG), unclassified candidate standards (the block ciphers
    SIMON and SPECK), declassified systems (the Fortezza crypto card, including the
    Skipjack block cipher), and many classified algorithms. The NSA’s cryptanalysis
    capabilities remain largely undocumented.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 加密学家最喜欢的三字母机构。NSA雇佣了许多加密学家，但从不在同行评审会议上发布成果。然而，它在加密研究方面非常活跃，设计了许多已建立的公共标准（如DSA、SHA-2和不幸的Dual_EC_DRBG）、未分类的候选标准（如SIMON和SPECK分组密码）、已解密的系统（如Fortezza加密卡，包括Skipjack分组密码）以及许多分类算法。NSA的密码分析能力仍然大部分未公开。
- en: See [*Suite A*](#Suite-A).
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Suite A*](#Suite-A)。
- en: NT hash
  id: totrans-743
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NT哈希
- en: Colloquially known as NTLM hash, the password hash function used in MS Windows’
    NT LAN Manager (NTLM) protocol suite, and an upgrade from the legacy LAN Manager
    protocol. NT hash is just an MD4 hash of the encoded user password. It’s better
    than LM hash but is also easily cracked.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 通常被称为NTLM哈希，这是MS Windows NT LAN Manager (NTLM) 协议套件中使用的密码哈希函数，是从传统的LAN Manager协议升级而来。NT哈希仅仅是编码后的用户密码的MD4哈希。它比LM哈希更好，但仍然容易被破解。
- en: See [*LM hash*](#LM-hash).
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*LM哈希*](#LM-hash)。
- en: NTRU (*N*th degree Truncated polynomial Ring Units)
  id: totrans-746
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NTRU（*N*次方截断多项式环单元）
- en: One of the first lattice-based cryptosystems, designed in 1996\. Under­studied
    for many years, perhaps because it was patented and commercialized.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个基于格的加密系统之一，设计于1996年。由于长期未被充分研究，可能是因为它已获得专利并商业化。
- en: Renewed interest in NTRU culminated in the 2016 design of NTRU Prime, an NTRU
    variant succinctly defined by its authors as “an efficient implementation of high-security
    prime-degree large-Galois-group inert-modulus ideal-lattice-based cryptography,”
    where “*Prime degree* etc. are three features that (. . .) take various mathematical
    tools away from the attacker.” NTRU Prime was submitted to NIST’s post-quantum
    competition.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '对NTRU的重新兴趣 culminated 在2016年设计了NTRU Prime，这是NTRU的一个变体，其作者简洁地将其定义为“高安全性素数度大伽罗瓦群惰性模数理想格基础加密学的高效实现”，其中“*素数度*
    等是三个特性（...）使得攻击者无法使用各种数学工具。”NTRU Prime被提交给了NIST的后量子竞赛。  '
- en: Null cipher
  id: totrans-749
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '空密码  '
- en: A term that means *no encryption* when encountered as a cipher suite. For example,
    early TLS versions supported the null cipher. The null cipher needs no key, and
    I suppose you could consider it the fastest cipher.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '当作为密码套件遇到时，表示*无加密*的术语。例如，早期的TLS版本支持空密码。空密码不需要密钥，我想你可以认为它是最快的密码。  '
- en: O
  id: totrans-751
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'O  '
- en: OAEP (Optimal Asymmetric Encryption Padding)
  id: totrans-752
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**OAEP**（最优非对称加密填充）  '
- en: Method for securely padding a message before public-key encryption with RSA
    or Rabin’s schemes. Computing *m*^(*e*)mod *n* is indeed not a very safe way to
    use the RSA operation to encrypt a message *m*. Instead, OAEP can convert the
    message into a randomized string that breaks plain RSA’s malleability and homomorphicity.
    RSA-OAEP is now the recommended way to encrypt with RSA, following the PKCS#1
    v2.2 standard.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '一种在使用RSA或拉宾加密方案进行公钥加密之前，安全地填充消息的方法。计算 *m*^(*e*)mod *n* 确实不是使用RSA操作加密消息 *m*
    的一种非常安全的方式。相反，OAEP可以将消息转换为一个随机化字符串，打破普通RSA的可变性和同态性。RSA-OAEP现在是推荐的RSA加密方式，符合PKCS#1
    v2.2标准。  '
- en: See [*All-or-nothing transform (AONT)*](#All-or-nothing-transform-AONT), [*Manger
    attack*](#Manger-attack).
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '参见 [*全或无变换（AONT）*](#All-or-nothing-transform-AONT)，[*曼格攻击*](#Manger-attack)。  '
- en: Oblivious key management system (OKMS)
  id: totrans-755
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**遗忘密钥管理系统**（OKMS）  '
- en: Service that holds master keys and interacts with clients to derive keys without
    knowing said keys due to (partially) oblivious PRFs used for key derivation.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '一种持有主密钥并与客户端交互的服务，用于派生密钥，而不需要知道所派生的密钥，因为用于密钥派生的部分遗忘伪随机函数（PRF）。  '
- en: Oblivious PRF (OPRF)
  id: totrans-757
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**遗忘伪随机函数**（OPRF）  '
- en: A two-party protocol where a server knows the key *K* and a client computes
    PRF(*K*, *X*) for some *X* without learning *K* by interacting with the server,
    which must learn nothing about *X* or PRF(*K*, *X*).
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 一种双方协议，其中服务器知道密钥 *K*，而客户端通过与服务器交互计算 PRF(*K*, *X*)，而无需学习 *K*，服务器必须对 *X* 或 PRF(*K*,
    *X*) 一无所知。
- en: Partially oblivious PRFs (pOPRFs) are a variant wherein the server can supply
    an additional nonsecret input.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '部分遗忘伪随机函数（pOPRF）是一种变体，其中服务器可以提供额外的非机密输入。  '
- en: Oblivious RAM (ORAM)
  id: totrans-760
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**遗忘随机存取存储器**（ORAM）  '
- en: An abstract model of secure memory, designed so an attacker learns nothing when
    they observe the content and access patterns of the memory a program uses. In
    particular, they shouldn’t learn what piece of data is being accessed or (to some
    extent) whether the access is a read or a modification of the stored data. In
    theory, an ORAM deals with actual RAM—as in memory a program uses—but in practice
    is more about ROM, a filesystem, or a database.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '一种安全内存的抽象模型，设计的目的是使攻击者在观察程序使用的内存内容和访问模式时无法获得任何信息。特别是，攻击者不应该知道正在访问的数据是什么，或者（在某种程度上）是否是读取操作还是存储数据的修改操作。从理论上讲，ORAM处理的是实际的RAM——即程序使用的内存——但在实践中更多的是关于ROM、文件系统或数据库。  '
- en: Oblivious transfer
  id: totrans-762
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**遗忘传输**  '
- en: A protocol to transfer data between two parties, where the receiver chooses
    which piece of data they want to receive among a multitude of pieces, but the
    sender doesn’t know which piece it is.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '一种协议，用于在两方之间传输数据，其中接收方从多个数据中选择其想要接收的数据项，但发送方不知道接收方选择的是哪一项。  '
- en: Imagine you want to buy and download an ebook from the No Starch Press online
    store but don’t want the publisher, Bill, to know which book you purchased. Normally,
    your ebook purchase request would ultimately lead to a query to No Starch’s database,
    a file transfer from some storage media to No Starch’s ebook service, and then
    to your device. The publisher could therefore find out which book you bought by
    monitoring the disk activity, database queries, file transfers, and so on.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '假设你想从No Starch Press在线商店购买并下载一本电子书，但又不希望出版商Bill知道你购买了哪本书。通常，你的电子书购买请求会最终导致向No
    Starch的数据库查询，从某些存储介质向No Starch的电子书服务进行文件传输，然后到达你的设备。因此，出版商可以通过监控磁盘活动、数据库查询、文件传输等，发现你购买了哪本书。  '
- en: Oblivious transfer prevents anyone from finding out which file was accessed,
    even if they monitored the precise data read from the storage medium. In addition,
    oblivious transfer guarantees to No Starch Press that you’re retrieving only one
    book, and that you’re not collecting information about others (the main feature
    that makes oblivious transfer different than private information retrieval).
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊传输防止任何人找出哪个文件被访问，即使他们监视了从存储介质读取的精确数据。此外，模糊传输还保证No Starch Press只能获取一个书籍，而不会收集关于其他书籍的信息（这是模糊传输与私人信息检索的主要区别）。
- en: Obscurity
  id: totrans-766
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊性
- en: A heresy for cryptographers. But in reality, when cryptography is just a part
    of a broader security system, you sometimes need to obscure its logic to meet
    your security goals.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 对于密码学家来说，这是异端。但实际上，当密码学只是更广泛安全系统的一部分时，有时你需要隐藏其逻辑以实现你的安全目标。
- en: OCB (offset codebook mode)
  id: totrans-768
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OCB（偏移码本模式）
- en: One of the simplest and most efficient authenticated encryption modes for block
    ciphers and a demonstration of cryptography’s fragility. Attackers managed to
    break OCB2, the second version of OCB, in spite of security proofs and standardization.
    OCB1 and OCB3, although very similar, seem to be secure.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 一种最简单、最有效的块密码认证加密模式，同时也是密码学脆弱性的一个展示。攻击者设法突破了OCB2（OCB的第二个版本），尽管有安全证明和标准化。OCB1和OCB3虽然非常相似，但似乎是安全的。
- en: One-time pad
  id: totrans-770
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性密码本
- en: 'Often described as the paragon of encryption, or the perfect cipher, because
    it’s mathematically proven to be absolutely secure. But the one-time pad used
    on its own is actually a weak cipher: it’s trivially malleable, unauthenticated,
    and not misuse resistant.'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 常被描述为加密的典范，或完美密码，因为它在数学上被证明是绝对安全的。但单独使用的一次性密码本实际上是一个弱密码：它显而易见地容易被篡改、未经认证，并且不具备抗滥用能力。
- en: One-way function
  id: totrans-772
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单向函数
- en: 'The cornerstone of modern cryptography. Easy to compute but hard to invert:
    a function *f*() is one-way if, given *f*(*x*) for a random unknown input *x*,
    finding a value *y* so that *f*(*y*) = *f*(*x*) is computationally hard. (The
    formal definition is more rigorous than this.)'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 现代密码学的基石。易于计算但难以反转：一个函数 *f*() 是单向的，如果给定一个随机未知输入 *x* 的 *f*(*x*)，找到一个值 *y* 使得
    *f*(*y*) = *f*(*x*) 在计算上是困难的。（正式定义比这更严格。）
- en: You can construct most cryptographic primitives if all you have is a one-way
    function; in practice, many functions in cryptography, such as hash functions,
    appear to be one-way. But in theory, we have no proof that one-way functions actually
    exist. In fact, the existence of one-way functions implies P ≠ NP (the proof is
    left as an exercise for you to complete).
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只拥有一个单向函数，你可以构造大多数密码学原语；在实践中，许多密码学函数，如哈希函数，似乎是单向的。但理论上，我们没有证明单向函数实际存在。事实上，单向函数的存在意味着P
    ≠ NP（证明留给你自己完成）。
- en: Onion-AE
  id: totrans-775
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Onion-AE
- en: The notion of strong authenticated encryption in the context of Tor’s onion
    routing. In onion-AE encryption, the authenticity of a message must only be checked
    at the last (exit) node, yet covers the entire route of the message, from its
    initial sender.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: Tor洋葱路由背景下的强认证加密概念。在onion-AE加密中，消息的真实性仅需在最后（出口）节点检查，但覆盖整个消息的路由，从最初的发送者开始。
- en: OPAQUE
  id: totrans-777
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OPAQUE
- en: Pronounced *O-PAKE*. The O represents oblivious PRF, the most interesting part
    of the OPAQUE password-authenticated key agreement (PAKE). It allows the client
    to compute the hash of a combination of two values when it knows only one of the
    two (its password).
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 发音为 *O-PAKE*。O代表的是oblivious PRF，这是OPAQUE密码认证密钥协商（PAKE）中最有趣的部分。它允许客户端在只知道其中一个值（其密码）的情况下计算两个值组合的哈希。
- en: 'There are some caveats: although authentication is about proving knowledge
    of a password, the client also needs a traditional public-key pair and must therefore
    protect its private key. Also, to get a full PAKE with secure shared key agreement,
    it must be combined with another protocol, such as HMQV.'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些注意事项：虽然身份验证是关于证明密码的知识，客户端还需要一个传统的公钥对，因此必须保护其私钥。此外，要实现一个完整的PAKE（密码认证密钥协商协议）和安全的共享密钥协商，它必须与另一个协议结合使用，例如HMQV。
- en: See [*Oblivious PRF (OPRF)*](#Oblivious-PRF-OPRF).
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Oblivious PRF (OPRF)*](#Oblivious-PRF-OPRF)。
- en: OpenSSL
  id: totrans-781
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenSSL
- en: One of the most important pieces of cryptographic software. Foremost a command
    line utility that supports a multitude of cryptographic operations (key generation,
    signature, encryption, certificate creation, encoding/decoding of various formats,
    and so on) for a multitude of algorithms (block ciphers, hash functions, elliptic
    curves, and so on, as well as legacy algorithms) and their parameters, and that
    runs on numerous CPU types and operating systems.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 加密软件中最重要的部分之一。主要是一个命令行工具，支持多种加密操作（密钥生成、签名、加密、证书创建、各种格式的编码/解码等），适用于多种算法（分组密码、哈希函数、椭圆曲线等，以及遗留算法）及其参数，并且能在多种CPU类型和操作系统上运行。
- en: 'If that isn’t enough, OpenSSL also provides two libraries: a cryptographic
    library (libcrypto) and an implementation of the SSL and TLS protocols (libssl),
    which uses libcrypto.'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不够，OpenSSL还提供了两个库：一个加密库（libcrypto）和SSL与TLS协议的实现（libssl），后者使用libcrypto。
- en: Oracle
  id: totrans-784
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Oracle（神谕）
- en: Rather like a crystal ball, an abstract entity that will respond to your requests,
    which cryptographers call oracle queries.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于水晶球，一个抽象的实体，会响应你的请求，密码学家称之为神谕查询。
- en: The idea of cryptographic oracles comes from the *oracles* of complexity theory,
    where, for example, you attempt to solve problem 1 using an oracle that magically
    gives you solutions to problem 2, given the description of an instance of problem
    2\. Given a factoring oracle, for instance, you can break RSA.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学神谕的概念来源于复杂性理论中的*神谕*，例如，你试图用一个神谕来解决问题1，而这个神谕会在给出问题2的实例描述后，神奇地给出问题2的解决方案。例如，给定一个因数分解神谕，你就能破解RSA。
- en: Oracles are an abstraction used in research papers as a device to simplify security
    arguments, proofs, or cryptanalytic attacks. You might encounter encryption oracles,
    decryption oracles, factorization oracles, and many more. Random oracles are the
    most common because of their unique role in proofs of security.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle（神谕）是研究论文中用来简化安全论证、证明或密码分析攻击的抽象工具。你可能会遇到加密神谕、解密神谕、分解因子神谕等多种类型。随机神谕最为常见，因为它们在安全证明中的独特作用。
- en: See [*Random oracle*](#Random-oracle).
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*随机神谕*](#Random-oracle)。
- en: OTR (Off-the-Record)
  id: totrans-789
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OTR（Off-the-Record，保密通信）
- en: The end-to-end encryption protocol initially designed for synchronous communications.
    Capable of running atop messaging protocols, such as XMPP or IRC. A unique aspect
    of OTR is its deniability property, whereby peers can deny having sent a message
    by leaking the MAC key used to sign it. OTR is the basis for what became known
    as the Signal protocol.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 最初为同步通信设计的端到端加密协议。能够在诸如XMPP或IRC等消息传递协议之上运行。OTR的一个独特之处在于其否认性特性，即对等方可以通过泄露用于签名的MAC密钥来否认曾发送过某条消息。OTR是后来成为Signal协议基础的协议。
- en: P
  id: totrans-791
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P
- en: Padding oracle attack
  id: totrans-792
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充神谕攻击
- en: A class of side-channel attacks that exploit information about whether the padding
    of some encrypted message is valid. An attacker could learn that information by
    measuring the decryption execution time, which sometimes depends on the padding’s
    correctness. The most common padding oracle attacks are those applied to the CBC
    block cipher mode, the Bleichenbacher attack on PKCS#1 v1.5, and Manger attack
    on OAEP (PKCS#1 v2) encryption. The idea of padding oracles can be generalized
    to format oracles, which reveal the existence of some known pattern in the decrypted
    message (for example, a specific encoding or character set).
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 一类侧信道攻击，利用有关某些加密消息填充是否合法的信息。攻击者可以通过测量解密执行时间来获得这些信息，而该时间有时取决于填充的正确性。最常见的填充神谕攻击是应用于CBC分组密码模式的攻击、对PKCS#1
    v1.5的Bleichenbacher攻击以及对OAEP（PKCS#1 v2）加密的Manger攻击。填充神谕的概念可以推广到格式神谕，它能揭示已解密消息中某些已知模式的存在（例如，特定的编码或字符集）。
- en: Developers have sometimes deployed countermeasures to padding oracle attacks
    accidentally—namely, when certain implementations don’t check the padding correctly
    (but this creates other problems).
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者有时会不小心部署了对填充神谕攻击的防御措施——即某些实现没有正确检查填充（但这会带来其他问题）。
- en: See [*Bleichenbacher attack*](#Bleichenbacher-attack), [*CBC (cipher block chaining)*](#CBC-cipher-block-chaining),
    [*Manger attack*](#Manger-attack).
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Bleichenbacher攻击*](#Bleichenbacher-attack)，[*CBC（分组密码链模式）*](#CBC-cipher-block-chaining)，[*Manger攻击*](#Manger-attack)。
- en: Paillier cryptosystem
  id: totrans-796
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Paillier加密系统
- en: A public-key encryption scheme that is a bit more mathematically interesting
    than RSA, ElGamal, and IES. Paillier’s encryption has the rare property of additive
    homomorphism, meaning that Dec(Enc(*M*[1]) × Enc(*M*[2])) = *M*[1] + *M*[2]. Its
    security is based on the hardness of the factoring problem as well as that of
    a related problem—the decisional composite residuosity problem, introduced with
    Paillier’s cryptosystem, which is about deciding whether there exists *x* such
    that *y* = *x*^(*d*)mod *n*² given *n* and *y*.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 一种公钥加密方案，比 RSA、ElGamal 和 IES 更具数学兴趣。Paillier 加密具有稀有的加法同态特性，意味着 Dec(Enc(*M*[1])
    × Enc(*M*[2])) = *M*[1] + *M*[2]。其安全性基于因式分解问题的难度，以及一个相关问题的难度——决策复合剩余性问题，这是 Paillier
    密码系统引入的，涉及判断是否存在 *x*，使得 *y* = *x*^(*d*)mod *n*²，给定 *n* 和 *y*。
- en: Pairing
  id: totrans-798
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配对
- en: 'In public-key cryptography, nothing to do with the Bluetooth pairing operation.
    A pairing is a map *e*() of two group elements to an element from another group,
    with the following property, for any *R*, *S*, *T*:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 在公钥密码学中，与蓝牙配对操作无关。配对是将两个群元素映射到另一个群中的元素，记作 *e*()，并具有以下性质，对于任意的 *R*、*S*、*T*：
- en: '*e*(*R* + *S*, *T*) = *e*(*R*, *T*)*e*(*S*, *T*)'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '*e*(*R* + *S*, *T*) = *e*(*R*, *T*)*e*(*S*, *T*)'
- en: 'This is called bilinearity and is what makes pairings useful in cryptography.
    These properties hold as well for a bilinear pairing:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 这称为双线性，它使得配对在密码学中非常有用。双线性配对还具有以下性质：
- en: '*e*(*S*, −*T*) = *e*(−*S*, *T*) = *e*(*S*, *T*)^(−1)'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '*e*(*S*, −*T*) = *e*(−*S*, *T*) = *e*(*S*, *T*)^(−1)'
- en: '*e*(*aS*, *bT*) = *e*(*S*, *T*)^(*ab*)'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '*e*(*aS*, *bT*) = *e*(*S*, *T*)^(*ab*)'
- en: '*The bilinear counterpart of the Diffie–Hellman problem for pairings is the
    following: given *P*, *aP*, *bP*, *cP*, find *e*(*P*, *P*)^(*abc*). For well-chosen
    types of pairing and elliptic curves, this problem is believed to be about as
    hard as its classical version.'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '*配对的Diffie–Hellman问题的双线性对立面如下：给定 *P*、*aP*、*bP*、*cP*，找出 *e*(*P*, *P*)^(*abc*)。对于精心选择的配对类型和椭圆曲线，认为这个问题的难度与其经典版本相当。'
- en: Pairing-based cryptography
  id: totrans-805
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于配对的密码学
- en: Cryptography that uses pairings, duh. Pairings on elliptic curves allow the
    creation of bilinear maps, which allow you to construct—under some hardness assumptions—secure
    functionalities that classical, discrete, logarithm-based elliptic-curve cryptography
    cannot. These functionalities include one-round three-party key agreement, identity-based
    encryption, attribute-based encryption, short signatures, and verifiable random
    functions.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配对的密码学，显然是这样。椭圆曲线上的配对允许创建双线性映射，从而在某些困难假设下构建经典的、基于离散对数的椭圆曲线密码学无法实现的安全功能。这些功能包括单轮三方密钥协商、基于身份的加密、基于属性的加密、短签名和可验证的随机函数。
- en: '**## PAKE (password-authenticated key exchange)'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '**## PAKE（密码认证密钥交换）'
- en: An authenticated key agreement (or exchange) protocol where the client’s authentication
    relies on the knowledge of a password. In most PAKEs, the server doesn’t know
    the password but only some data derived from it. PAKEs where both parties know
    the password are called balanced PAKEs.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 一种认证密钥协商（或交换）协议，其中客户端的认证依赖于密码的知识。在大多数 PAKE 协议中，服务器不知道密码，而只知道从密码派生出的某些数据。双方都知道密码的
    PAKE 协议被称为平衡 PAKE 协议。
- en: 'PAKEs try to prevent the straightforward password-guessing attacks possible
    in send-the-password-or-its-hash methods of key exchange. But this small benefit
    comes at a high cost: PAKEs add complexity and deployment cost, which is why they’re
    rarely used. As Matthew Green wrote, “Many people don’t want to run a *key exchange*
    protocol in the first place! They just want to verify that a user knows a password.”'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: PAKE 协议试图防止在“发送密码或其哈希”的密钥交换方法中可能出现的直接密码猜测攻击。但这种小小的好处是以高成本为代价的：PAKE 增加了复杂性和部署成本，这就是它们很少被使用的原因。正如
    Matthew Green 所写，“许多人根本不想运行一个 *密钥交换* 协议！他们只是想验证用户是否知道密码。”
- en: Paradigm
  id: totrans-810
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范式
- en: An overused word in cryptography, especially when preceded by *new*.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码学中被过度使用的词，尤其是在前面加上 *new* 时。
- en: Password hash function
  id: totrans-812
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码哈希函数
- en: A hash function whose goal is to be slow rather than fast.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 一种目标是慢而非快的哈希函数。
- en: PBKDF2 (Password-Based Key Derivation Function 2)
  id: totrans-814
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PBKDF2（基于密码的密钥衍生函数 2）
- en: Password-based key derivation function, second version of the standard. PBKDF2
    is the poor man’s password hash. It’s good enough in most cases when tuned with
    enough iterations, but it’s not as cool as Argon2.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 基于密码的密钥衍生函数，标准的第二版。PBKDF2 是一种廉价的密码哈希。在大多数情况下，当通过足够多的迭代进行调整时，它足够好，但它不如 Argon2
    那样高级。
- en: PCT (Private Communications Technology)
  id: totrans-816
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PCT（私密通信技术）
- en: Microsoft’s secure communication protocol. PCT competed with SSL v3 in the mid-1990s.
    PCT intended to address SSL v2’s flaws yet be somewhat compatible with it. But
    only Microsoft has used it, and it was ultimately replaced by SSL v3 or TLS everywhere.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的安全通信协议。PCT在1990年代中期与SSL v3竞争。PCT旨在解决SSL v2的缺陷，并与其保持一定兼容性。但仅微软使用了该协议，最终被SSL
    v3或TLS取代。
- en: PEP (Plaintext equivalence proof)
  id: totrans-818
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PEP（明文等价证明）
- en: A protocol that checks whether two ciphertexts are encryptions of the same value.
    Participants cannot cheat.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 一种协议，用于检查两个密文是否是相同值的加密。参与者无法作弊。
- en: Perfect forward secrecy
  id: totrans-820
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完美前向保密性
- en: See [*Forward secrecy*](#Forward-secrecy).
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*前向保密性*](#Forward-secrecy)。
- en: Permutation-based cryptography
  id: totrans-822
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于置换的密码学
- en: Cryptographic schemes that leverage a single permutation to provide other functionalities.
    It’s based on research related to the Keccak hash function.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 利用单一置换来提供其他功能的加密方案。它基于与Keccak哈希函数相关的研究。
- en: PES (Proposed Encryption Standard)
  id: totrans-824
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PES（提议加密标准）
- en: A block cipher presented at Eurocrypt 1990\. It didn’t become a standard.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eurocrypt 1990上提出的区块密码。它没有成为标准。
- en: See [*IDEA*](#IDEA-International-Data-Encryption-Algorithm), [*IPES*](#IPES-Improved-Proposed-Encryption-Standard).
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*IDEA*](#IDEA-International-Data-Encryption-Algorithm)，[*IPES*](#IPES-Improved-Proposed-Encryption-Standard)。
- en: PET (Plaintext equivalence test)
  id: totrans-827
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PET（明文等价测试）
- en: A protocol that checks whether two ciphertexts are encryptions of the same value.
    But participants can cheat.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 一种协议，用于检查两个密文是否是相同值的加密。但参与者可以作弊。
- en: PFS
  id: totrans-829
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PFS
- en: A secret advanced cryptography think tank.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 一个秘密的高级密码学智囊团。
- en: See [*Forward secrecy*](#Forward-secrecy).
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*前向保密性*](#Forward-secrecy)。
- en: PGP (Pretty Good Privacy)
  id: totrans-832
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PGP（非常好的隐私）
- en: The first major, public cryptography software, developed in the early 1990s.
    PGP later became an enterprise encryption product. Currently, pgp.com redirects
    to broadcom.com, because Symantec acquired the PGP company and Broadcom later
    acquired Symantec. The OpenPGP message format and the GnuPG (GPG) software are
    the open source legacies of PGP. In 2020, PGP remains the de facto standard for
    email encryption and is used by major enterprise and open source email encryption
    software.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 第一款主要的公共密码学软件，开发于1990年代初期。PGP后来成为企业加密产品。目前，pgp.com已重定向到broadcom.com，因为赛门铁克收购了PGP公司，Broadcom随后收购了赛门铁克。OpenPGP消息格式和GnuPG（GPG）软件是PGP的开源遗产。到2020年，PGP仍然是电子邮件加密的事实标准，并被主要的企业和开源电子邮件加密软件所使用。
- en: PGP is often called broken, mostly because the 1990s design didn’t anticipate
    security requirements of the 2010s. Also, its software implementations turned
    out to have security flaws—as pretty much all software does.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: PGP常被称为“破损”，主要是因为其1990年代的设计没有预见到2010年代的安全需求。此外，其软件实现也存在安全漏洞——正如几乎所有软件一样。
- en: Photuris
  id: totrans-835
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Photuris
- en: The Latin name for a genus of fireflies. Also, a session-key management protocol
    for IPSec that is, according to *informed speculation*, similar to NSA’s FIREFLY
    protocol (allegedly part of Suite A and used in EKMS).
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 萤火虫属的拉丁学名。此外，它也是一种IPSec会话密钥管理协议，根据*知情推测*，类似于NSA的FIREFLY协议（据称属于Suite A的一部分并用于EKMS）。
- en: See [*Suite A*](#Suite-A).
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [*Suite A*](#Suite-A)。
- en: Picnic
  id: totrans-838
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Picnic
- en: A post-quantum signature scheme that doesn’t fit in any of the established categories
    of post-quantum schemes. A Picnic signature proves the signer’s knowledge of the
    key to a block cipher, given a plaintext-ciphertext pair as a public key.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 一种后量子签名方案，无法归入任何已建立的后量子方案类别。Picnic签名证明签名者对区块密码的密钥知识，给定明文-密文对作为公共密钥。
- en: Picnic achieves this by using a noninteractive proof of knowledge and a block
    cipher (lowMC) that lends itself to such proofs.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: Picnic通过使用非交互式知识证明和适用于此类证明的区块密码（lowMC）来实现这一点。
- en: PKC
  id: totrans-841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PKC
- en: Officially, “The International Conference on Practice and Theory in Public Key
    Cryptography.” The PKC conference is to public-key cryptography what FSE is to
    symmetric cryptography, but it covers more diverse and mathematical topics.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 官方名称为“国际公共密钥密码学实践与理论会议”。PKC会议在公共密钥密码学领域的地位类似于FSE在对称密码学中的地位，但它涵盖了更多的数学和多样化主题。
- en: 'Researchers present peer-reviewed research papers with titles such as “Safety
    in Numbers: On the Need for Robust Diffie–Hellman Parameter Validation”and “Committed
    MPC—Maliciously Secure Multiparty Computation from Homomorphic Commitments.”'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 研究人员发表同行评审的研究论文，题目如《数字中的安全：关于强大Diffie-Hellman参数验证的必要性》和《承诺MPC——通过同态承诺实现恶意安全的多方计算》。
- en: See [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt), [*FSE*](#FSE-Fast-Software-Encryption),
    [*Real World Crypto*](#Real-World-Crypto-RWC), [*TCC*](#TCC).
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Asiacrypt*](#ASIACRYPT)，[*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems)，[*CRYPTO*](#CRYPTO)，[*Eurocrypt*](#Eurocrypt)，[*FSE*](#FSE-Fast-Software-Encryption)，[*Real
    World Crypto*](#Real-World-Crypto-RWC)，[*TCC*](#TCC)。
- en: PKCS (Public Key Cryptography Standards)
  id: totrans-845
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PKCS（公钥密码学标准）
- en: 'A series of cryptographic standards issued by the RSA Security firm in the
    1990s. Of the 15 PKCS standards, the best known are probably the following:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列由RSA安全公司在1990年代发布的加密标准。在15个PKCS标准中，最著名的可能是以下几项：
- en: PKCS#1, also RFC 8017, is about RSA-based encryption and signature. An earlier
    version (1.5) defined an RSA encryption scheme vulnerable to Bleichenbacher’s
    padding oracle attack. Later versions, starting with 2.0, defined instead OAEP-based
    RSA encryption, which is less vulnerable to padding oracle attacks.
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PKCS#1，也称RFC 8017，关于基于RSA的加密和签名。早期版本（1.5）定义了一种易受Bleichenbacher填充oracle攻击的RSA加密方案。后来的版本，从2.0开始，定义了基于OAEP的RSA加密，这种加密对填充oracle攻击的防御能力更强。
- en: PKCS#7, also RFC 2315, is best known for its definition of the block cipher
    padding scheme but is mainly about data formatting and encoding.
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PKCS#7，也称RFC 2315，以其定义的分组密码填充方案而著名，但主要是关于数据格式化和编码。
- en: PKCS#11 is a standard API to interact with a cryptographic module, such as that
    of an HSM.
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PKCS#11 是一个标准API，用于与加密模块交互，如HSM的模块。
- en: Poly1305
  id: totrans-850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Poly1305
- en: A one-time MAC best known as the authenticator component in the *ChaChaPoly*
    authenticated cipher, as well as ChaCha20-Poly1305\. It’s supported in TLS, OpenSSH,
    and many other applications.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 一种一次性MAC，最好被称为*ChaChaPoly*认证密码中的认证组件，以及ChaCha20-Poly1305。它在TLS、OpenSSH和许多其他应用程序中得到支持。
- en: Polynomial complexity
  id: totrans-852
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多项式复杂度
- en: Practical complexity, most of the time.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 实际复杂性，大多数时候。
- en: Post-compromise security
  id: totrans-854
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后泄露安全
- en: A term used mostly in the context of secure messaging to denote a notion similar
    to backward secrecy.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用于安全消息传递的术语，表示类似于向后保密性的概念。
- en: See [*Backward secrecy*](#Backward-secrecy).
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*向后保密性*](#Backward-secrecy)。
- en: Post-quantum cryptography
  id: totrans-857
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后量子密码学
- en: Cryptography schemes designed to remain unbreakable by quantum algorithms. Therefore,
    they can resist the hypothetical quantum computers of the future. Also termed
    quantum-safe and quantum-resilient.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 旨在通过量子算法保持不可破解的加密方案。因此，它们能够抵抗未来假设中的量子计算机。也被称为量子安全和量子韧性。
- en: Post-quantum RSA
  id: totrans-859
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后量子RSA
- en: RSA so big that it’s practically immune to quantum attacks as well as to any
    practical application. A public key of post-quantum RSA is of the order of one
    terabyte. Post-quantum RSA has been submitted to NIST’s post-quantum cryptography
    standardization project.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: RSA大到几乎对量子攻击以及任何实际应用都免疫。后量子RSA的公钥大小大约是1TB。后量子RSA已经提交给NIST的后量子密码学标准化项目。
- en: Prediction resistance
  id: totrans-861
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测抗性
- en: A term notably used by NIST to refer to a notion similar to backward secrecy.
    Prediction resistance is the opposite of backtracking resistance.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: NIST特别使用的术语，表示类似于向后保密性的概念。预测抗性是回溯抗性的对立面。
- en: See *Backward secrecy*.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 见 *向后保密性*。
- en: Preimage
  id: totrans-864
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预映像
- en: The hash function problem of finding some *M* so that Hash(*M*) = *H* given
    the value *H*. If *H* was chosen by picking some *M*[0] at random (among a large
    enough finite set of possible messages) and computing *H* = Hash(*M*[0]), then
    even with unlimited computational power, an attacker can never identify *M*[0]
    with certainty unless *M*[0] is the only value that hashes to *H*.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数问题是找到某个*M*，使得Hash(*M*) = *H*，给定值*H*。如果*H*是通过随机挑选某个*M*[0]（在足够大的有限消息集合中）并计算*H*
    = Hash(*M*[0])得到的，那么即使拥有无限的计算能力，攻击者也永远无法确定*M*[0]，除非*M*[0]是唯一一个哈希值为*H*的值。
- en: But in practice, the message sets we deal with are much larger than the hash
    size; thus, any *H* will have many preimages. Also, nobody actually has unlimited
    computational power. Finding any preimage would cost 2^(*n*), which is practically
    impossible, even if the hash values are as short as *n* = 128 bits.
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，我们处理的消息集远大于哈希大小；因此，任何*H*都会有许多预映像。此外，没有人真正拥有无限的计算能力。找到任何预映像的成本是2^(*n*)，即使哈希值短至*n*
    = 128位，实际上也几乎不可能。
- en: PRESENT
  id: totrans-867
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当前
- en: Anagram of Serpent. A block cipher that works a lot like Serpent (­surprise)
    but smaller. Marketed as an *ultra lightweight cipher*, PRESENT has 64-bit blocks
    like DES and supports 80-bit and 128-bit keys. According to some very academic
    understanding of *broken*, PRESENT is broken by biclique cryptanalysis, with respectively
    2^(79.76) and 2^(127.91) complexities. But PRESENT remains safe to use, and it
    was standardized by ISO. A variant of PRESENT, named *GIFT*, is described as *a
    small PRESENT*.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: Serpent的变体。一种块加密算法，与Serpent（惊讶）非常相似，但更小。被宣传为*超轻量级密码*，PRESENT具有类似DES的64位块，并支持80位和128位密钥。根据一些非常学术的理解，PRESENT通过双重密钥密码分析被认为是*已破解*，其复杂度分别为2^(79.76)和2^(127.91)。但PRESENT仍然安全可用，并且已经通过ISO标准化。PRESENT的一个变体，名为*GIFT*，被描述为*一个小型PRESENT*。
- en: PRIMES
  id: totrans-869
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PRIMES
- en: The decisional problem of determining whether a given integer is a prime number.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 判断一个给定整数是否为质数的决策问题。
- en: Privacy-preserving
  id: totrans-871
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐私保护
- en: A broad qualifier encompassing techniques and technologies that attempt to minimize
    the exposure of privacy-sensitive data, such as personally identifiable information,
    geolocation, social graph, online activity, and so on.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 一个广义的限定词，涵盖了尝试最小化隐私敏感数据暴露的技术和方法，例如个人身份信息、地理位置、社交图谱、在线活动等。
- en: Private information retrieval (PIR)
  id: totrans-873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私密信息检索（PIR）
- en: Similar to oblivious transfer except the amount of information to be retrieved
    isn’t limited. Both PIR and oblivious transfer attempt to conceal the client’s
    activity to the database host, but PIR assumes *self-service*, whereas oblivious
    transfer restricts the client’s access to one-in-many access.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 与隐匿传输类似，只不过检索的信息量不受限制。PIR和隐匿传输都试图隐藏客户端的活动对数据库主机的影响，但PIR假设是*自助服务*，而隐匿传输限制了客户端的访问权限为一对多的访问。
- en: See [*Oblivious transfer*](#Oblivious-transfer).
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 见[*隐匿传输*](#Oblivious-transfer)。
- en: Proof of burn
  id: totrans-876
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁证明
- en: Perhaps the most straightforward type of resource usage proof proposed for a
    consensus protocol. Proof of burn consists of nullifying the value of tokens or
    other digital assets associated with the protocol, for example, by sending them
    to some unspendable address, the blockchain equivalent of `/dev/null`. This differs
    from proofs of stake, where the value owned isn’t destroyed.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 也许是为共识协议提出的最直接的资源使用证明。销毁证明（Proof of burn）通过使与协议相关的代币或其他数字资产的价值无效，例如将其发送到某个无法花费的地址，即区块链中的`/dev/null`。这与权益证明不同，后者不会销毁所拥有的价值。
- en: Proof of catalytic space
  id: totrans-878
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 催化空间证明
- en: A variant of proofs of space wherein the space isn’t completely wasted but can
    be used to store data unrelated to the proof. This leverages the concept of catalytic
    space computation, where a program can use some memory region even if it’s already
    used to store data, and return said region in its original state after completing
    its task.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 一种空间证明的变体，其中空间并非完全浪费，而是可以用来存储与证明无关的数据。这利用了催化空间计算的概念，即程序可以使用已存储数据的内存区域，并在完成任务后将该区域恢复到原始状态。
- en: Proof of human work
  id: totrans-880
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人类工作证明
- en: Proof of work whose work isn’t a computationally intensive task but one that
    is relatively easy for humans, yet hard for computers and AI programs. An idea
    proposed it to rely on CAPTCHAs generated using obfuscated programs to prevent
    the machine generating CAPTCHAs to solve them.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明（Proof of work）不是一个计算密集型的任务，而是一个对人类相对容易的任务，但对计算机和人工智能程序来说却很难。这个想法提议依赖于通过混淆程序生成的验证码，以防止生成验证码的机器解决这些验证码。
- en: Proof of replication
  id: totrans-882
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制证明
- en: An extension of proof of storage to prove that multiple replicas of a piece
    of data are being stored instead of a single real copy and pointers to it. One
    technique used to realize proof of replication involves depth-robust graphs, a
    notion from graph theory rediscovered in the context of memory-hard password hashing.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 存储证明的扩展，用于证明多份数据副本正在被存储，而不仅仅是单一的真实副本及其指针。实现复制证明的一种技术涉及深度鲁棒图，这是一种在内存困难密码哈希的背景下重新发现的图论概念。
- en: Proof of reserve
  id: totrans-884
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 储备证明
- en: Not a proof of resource associated to consensus protocols, but a proof that
    one account or organization owns a certain amount of coins. A proof of reserve
    can be publicly verifiable, for example, by issuing a special transaction from
    an address that controls the funds to be verified. It can also be private and/or
    notarized on a private ledger, for example, by signing a timestamped message provided
    by auditors.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 不是与共识协议相关的资源证明，而是证明一个账户或组织拥有一定数量的代币。储备证明可以公开验证，例如通过从控制待验证资金的地址发出特定交易。它也可以是私密的和/或在私人账本上公证，例如通过签署审计人员提供的带有时间戳的信息。
- en: A proof of reserve can be considered a proof of stake without the lottery mechanism
    and without being tied to any decentralized protocol.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 储备证明可以视为一种没有彩票机制且不与任何去中心化协议挂钩的权益证明。
- en: Proof of security
  id: totrans-887
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全证明
- en: See [*Security proof*](#Security-proof).
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*安全证明*](#Security-proof)。
- en: Proof of sequential work
  id: totrans-889
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顺序工作证明
- en: Proof of work for which parallelism is useless, because operations must be carried
    out sequentially. As with parallelizable proofs of work, a solution to the puzzle
    must be verifiable efficiently.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明，因其并行性无效，操作必须按顺序进行。与可并行化的工作量证明一样，谜题的解决方案必须能够高效验证。
- en: Like verifiable delay functions (VDFs), proofs of sequential work can be used
    to add an incompressible delay in decentralized applications. They also face the
    same technical challenges of associating an actual time latency to a series of
    operations. Unlike with VDFs, a proof of sequential work doesn’t admit a unique
    precomputable solution, which restricts its number of applications.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 像可验证延迟函数（VDF）一样，顺序工作证明可以用于在去中心化应用中加入无法压缩的延迟。它们也面临将实际时间延迟与一系列操作关联的技术挑战。与 VDF
    不同，顺序工作证明不接受唯一的可预计算解，这限制了其应用范围。
- en: See [*Time-lock puzzle*](#Time-lock-puzzle), [*Verifiable delay function (VDF)*](#Verifiable-delay-function-VDF).
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*时间锁谜题*](#Time-lock-puzzle)，[*可验证延迟函数 (VDF)*](#Verifiable-delay-function-VDF)。
- en: Proof of space
  id: totrans-893
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空间证明
- en: A demonstration that a prover has certain amount of memory at their disposal.
    For example, a prover might have to allocate one terabyte to convince a verifier,
    and the verifier won’t accept any proof from a prover that allocated less than
    a terabyte. Wasting memory with proofs of space is arguably more ecological than
    wasting CPU time with proofs of work.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 证明证明者拥有一定量内存的演示。例如，证明者可能需要分配一 terabyte 的内存来说服验证者，而验证者不会接受任何分配少于一 terabyte 内存的证明。与工作量证明所浪费的
    CPU 时间相比，空间证明所浪费的内存被认为更为生态环保。
- en: Proof of spacetime
  id: totrans-895
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时空证明
- en: An extension of proof of storage to efficiently demonstrate that a piece of
    data (or multiple replicas thereof) has been stored throughout a given period
    of time. Proofs of spacetime can be realized by combining proofs of replication.
    Used by the Filecoin project, proofs of spacetime ensure that hosts rewarded to
    store data aren’t cheating.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 存储证明的扩展，用于高效地证明一段时间内某个数据（或其多个副本）已经被存储。时空证明可以通过结合复制证明来实现。Filecoin 项目使用时空证明，确保为存储数据而获得奖励的主机没有作弊。
- en: Proof of stake
  id: totrans-897
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权益证明
- en: An environment-friendly counterpart of proofs of work where miners holding a
    greater amount of tokens have a greater chance to validate transactions; they
    receive the reward by a kind of lottery system. The richest thus get richer faster
    by doing nothing other than *staking*, by running a node and keeping it online.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 一种环保的工作量证明对照方法，其中持有更多代币的矿工有更大的机会验证交易；他们通过一种类似彩票的系统获得奖励。因此，最富有的人通过做*质押*、运行节点并保持在线，轻松变得更富有。
- en: Proof of stake blockchains usually require a certain table stake amount to participate
    on the network.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 权益证明区块链通常要求一定数量的押金才能参与网络。
- en: Proof of storage
  id: totrans-900
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储证明
- en: Proof that some piece of data is being stored (or at least known, or possible
    to be generated). Concepts such as provable data possession and proof of retrieveability
    are examples of proofs of storage. The most straightforward proof system is one
    where the verifier sends some challenge *c* and the prover returns Hash(*c*||*M*)
    where *M* is the data whose storage is to be verified.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 证明某段数据正在被存储（或者至少是已知的，或者可以生成）。可证明的数据拥有性和可检索性证明就是存储证明的例子。最直接的证明系统是验证者发送某个挑战 *c*，然后证明者返回
    Hash(*c*||*M*)，其中 *M* 是要验证存储的数据。
- en: Proof of useful work
  id: totrans-902
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用工作证明
- en: When the proof of work is not completely wasteful, but compute time is used
    to contribute to solving some computational problem.
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 当工作量证明并非完全浪费时，而是计算时间被用来解决某些计算问题。
- en: Proof of work
  id: totrans-904
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作量证明
- en: Cryptography’s contribution to environmental problems.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学对环境问题的贡献。
- en: Provable security
  id: totrans-906
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可证明的安全性
- en: For some cryptographers, the only acceptable security—as opposed to unscientific,
    unacceptably risky heuristic security.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 对某些密码学家来说，唯一可接受的安全性——与不科学的、不可接受的风险性启发式安全性相对立。
- en: This simplistic goal is now less common, and provable security is now considered
    more of an additional insurance than as something required by all means necessary.
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的目标现在已经不那么常见了，且可证明的安全性现在被视为一种额外的保险，而不是所有情况下都必须要求的东西。
- en: For example, an algorithm such as AES is not *provably secure*, and public-key
    schemes, such as RSA or ECDSA, are only proven secure insofar as their underlying
    computational problems are hard.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，像 AES 这样的算法并不是*可证明安全*的，公钥方案，如 RSA 或 ECDSA，仅在其基础计算问题难以解决的情况下才被证明是安全的。
- en: Provably secure
  id: totrans-910
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可证明安全
- en: “If it’s provably secure, it’s probably not,” to quote cryptographer Lars Knudsen
    (then in the context of block ciphers). This folklore adage might come from the
    block cipher COCONUT98, which was proven to be secure against a class of differential
    cryptanalysis techniques but ended up being broken by a yet unknown type of differential
    attack (boomerang).
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: “如果它是可证明安全的，那么它可能不是安全的，”引用密码学家 Lars Knudsen（当时在区块密码的背景下）。这个流行的格言可能来源于区块密码 COCONUT98，它被证明在一类差分密码分析技术下是安全的，但最终被一种尚未发现的差分攻击类型（回旋镖攻击）破解。
- en: Proxy re-encryption
  id: totrans-912
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理重加密
- en: A public-key encryption scheme where a ciphertext for Alice (created using her
    public key) can be turned into a ciphertext for Bob without exposing the plaintext—in
    other words, without decrypting and re-encrypting. For example, proxy re-encryption
    can be realized (in theory) thanks to indistinguishability obfuscation by creating
    an obfuscated program that decrypts and re-encrypts a ciphertext without exposing
    the plaintext.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 一种公钥加密方案，其中 Alice 的密文（使用她的公钥生成）可以在不暴露明文的情况下转换为 Bob 的密文——换句话说，既不解密也不重新加密。例如，代理重加密可以（理论上）通过不可区分性混淆来实现，即创建一个混淆程序，能够在不暴露明文的情况下解密并重新加密密文。
- en: Pseudo-random
  id: totrans-914
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪随机
- en: Hyphenated spelling of *pseudorandom*. But in English, compounds created by
    the addition of a prefix are usually not hyphenated (for example, pseudoscience,
    cryptocommunist, and antisocial). Among research papers on the IACR ePrint archive,
    the use of *pseudorandom* is about twice as frequent as *pseudo-random*.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '*伪随机*的连字符拼写。但在英语中，由前缀构成的复合词通常不加连字符（例如，伪科学、加密共产主义者和反社会）。在 IACR ePrint 归档中的研究论文中，*伪随机*的使用频率大约是*伪-随机*的两倍。'
- en: Pseudorandom function (PRF)
  id: totrans-916
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪随机函数（PRF）
- en: Not actually a single function but a family of many functions; each is indexed
    by its secret key. The security goal of a PRF is to be indistinguishable from
    a truly random function if you don’t know the key and only see input–output pairs,
    even when choosing input values.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上并不是一个单一的函数，而是许多函数的集合；每个函数都由其秘密密钥索引。PRF 的安全目标是：如果你不知道密钥且只看到输入-输出对，即使选择输入值时，也无法区分它与真正的随机函数。
- en: You can use PRFs as secure MACs, but a secure MAC isn’t necessarily a secure
    PRF.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 PRF 用作安全的 MAC，但一个安全的 MAC 不一定是安全的 PRF。
- en: Pseudorandom number generator (PRNG)
  id: totrans-919
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪随机数生成器（PRNG）
- en: A system generating random-looking data with the security guarantee that an
    attacker that knows any subset of the output bits cannot determine any other output
    bits. The theoretical definition of a PRNG differs from its colloquial usage.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 一个系统生成看似随机的数据，并保证攻击者知道输出位的任何子集时，无法确定其他任何输出位。PRNG 的理论定义与其口语用法有所不同。
- en: 'In theory, a PRNG is a (deterministic) algorithm that takes as input a value
    (seed) of fixed size and returns a longer output value. In practice, a PRNG often
    refers to all the components involved in the generation of pseudorandom bits,
    for example, in the context of an operating system’s PRNG. Such a PRNG usually
    includes the following components:'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，PRNG 是一个（确定性的）算法，它接受一个固定大小的值（种子）作为输入，并返回一个更长的输出值。实际上，PRNG 通常指的是生成伪随机位的所有组件，例如在操作系统的
    PRNG 上下文中。这样的 PRNG 通常包括以下组件：
- en: Entropy collectors from analog sources, such as user activity, temperature measurements,
    and on-chip sensors—sometimes referred to as true random generators, although
    their (digital) output is rarely guaranteed to be cryptographically safe, or even
    uniformly distributed.
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mechanism to store an internal state, such as *entropy pools*, including the
    logic to update it and perform *reseeding* operations from entropy collectors.
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A deterministic random bit generator (DRBG), which produces an arbitrarily long
    output from a seed derived from the internal state.
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudorandom permutation (PRP)
  id: totrans-925
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To a permutation what a PRF is to a hash function. A block cipher is a PRP.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: Public-key cryptography
  id: totrans-927
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All cryptography, excluding symmetric cryptography.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: PUF (physically unclonable function)
  id: totrans-929
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A physical component on semiconductor devices that leverages minute differences
    between each different platform to generate unpredictable values, such as identifiers.
    Although sometimes advertised as semi-magical technology, many PUFs have been
    shown to be cryptographically weaker than claimed.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: Puncturable encryption
  id: totrans-931
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Public-key encryption augmented with a *puncture* operation. This operation
    creates a new private key to replace the current one to forever revoke the decryption
    capability for certain ciphertexts that the previous key could decrypt. One motivation
    for this is to be able to provide forward secrecy for certain messages, even though
    they were encrypted with the same public key.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: You can create puncturable symmetric encryption from puncturable PRFs.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: Puncturable pseudorandom function (PPRF)
  id: totrans-934
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to puncturable encryption. PRFs whose keys can be updated to revoke
    the capability to process certain values.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: Q
  id: totrans-936
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum computer
  id: totrans-937
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to some experts, has a 1/7 chance of breaking RSA-2048 by 2026 and
    a 1/2 chance by 2031\. In truth, nobody knows if you’ll see a quantum computer
    breaking RSA-2048 in your lifetime.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: Quantum cryptography
  id: totrans-939
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cryptographic operations that rely on quantum phenomena and don’t necessarily
    need a quantum computer, such as quantum key distribution. Quantum cryptography
    happens to be post-quantum but doesn’t belong to the field of post-quantum cryptography.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: Quantum encryption
  id: totrans-941
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Encryption of quantum states as opposed to strings of classical bits. The most
    basic form of this is the quantum one-time pad, which you can think of as a combination
    of quantum teleportation (to transmit the encrypted state) and a classical one-time
    pad (the bits required to read the decrypted state).
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: The quantum one-time pad looks less efficient than its classical counterpart,
    requiring two classical bits of key for each bit of information encrypted. But
    it’s also more powerful, because it can be leveraged to build secure homomorphic
    and multi-party computation schemes.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: Quantum key distribution
  id: totrans-944
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes confused with post-quantum cryptography, but different and of lower
    practical value. The best known is the *BB84* key agreement protocol
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: See [*BB84*](#BB84).
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: Quantum signature
  id: totrans-947
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An impossible scheme, because the classical notion of a signature doesn’t apply
    to quantum states. Intuitively, you should see why: any party that can learn information
    about a quantum state can also modify it. In particular, it’s impossible to attach
    a signature to a quantum state, as you would do with a classical message. More
    generally, quantum states cannot be authenticated unless they’re also encrypted,
    so that only the intended recipient can decrypt them. But although quantum signing
    isn’t possible, quantum signcryption is.'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 一种不可能实现的方案，因为经典意义上的签名不适用于量子态。直观地讲，你应该理解为什么：任何能够了解量子态信息的一方也能修改它。特别是，无法像处理经典消息那样将签名附加到量子态上。更一般地说，量子态无法被认证，除非它们也被加密，这样只有预定的接收者能够解密它们。但尽管量子签名不可行，量子签名加密是可以实现的。
- en: QUIC (Quick UDP Internet Connections)
  id: totrans-949
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QUIC（快速 UDP 互联网连接）
- en: A transport security protocol designed to make HTTPS connections more reliable
    under poor conditions (packet loss, IP roaming, and so on), notably by running
    over UDP rather than TCP. Using UDP saves it from the latency cost of the TCP
    handshake. It also includes some mechanism to mitigate the problem of UDP’s unreliability.
    HTTP-over-QUIC has been officially standardized by IETF and has been named HTTP/3.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 一种旨在使 HTTPS 连接在恶劣条件下（如数据包丢失、IP漫游等）更加可靠的传输安全协议，特别是通过使用 UDP 而非 TCP。使用 UDP 避免了
    TCP 握手的延迟成本。它还包括一些机制来缓解 UDP 不可靠性的问题。HTTP-over-QUIC 已由 IETF 正式标准化，并被命名为 HTTP/3。
- en: R
  id: totrans-951
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R
- en: Rabin cryptosystem
  id: totrans-952
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rabin 加密系统
- en: RSA with 2 as a public exponent, kinda. Because computing modular square roots
    is proven to be equivalent to factoring, breaking Rabin encryption is as hard
    as factoring its modulus *n = pq*. The equivalence between breaking RSA and factoring
    is harder to demonstrate.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 以 2 作为公钥指数的 RSA，有点类似。因为计算模平方根已被证明与因式分解等价，破解 Rabin 加密的难度与因式分解其模数 *n = pq* 的难度相当。展示
    RSA 和因式分解之间的等价性更为复杂。
- en: Rainbow tables
  id: totrans-954
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 彩虹表
- en: Time-memory trade-off technique mostly applied to password cracking, such as
    Windows NTLM passwords. Rainbow tables are a specific, optimized type of look-up
    tables precomputed once, in the *offline* stage, to significantly speed up the
    cracking of passwords (*online* stage).
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 一种主要用于破解密码的时间-内存权衡技术，例如 Windows NTLM 密码。彩虹表是预先计算过的一种特定优化类型的查找表，在 *离线* 阶段计算一次，以显著加速密码破解过程（*在线*
    阶段）。
- en: Rainbow tables are also successfully applied to crack pay-TV control words within
    short cryptoperiods (such as 10 seconds). They’re designed and often also made
    in Switzerland.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 彩虹表也被成功应用于破解短时间加密周期（如 10 秒）内的付费电视控制字。它们被设计并且通常也在瑞士制作。
- en: Random bits
  id: totrans-957
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机比特
- en: Bits that have been generated at random. We often talk of random bits when strictly
    speaking they’ve only been pseudorandomly generated.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 随机生成的比特。我们常常谈论随机比特，实际上严格来说它们只是伪随机生成的。
- en: Random oracle
  id: totrans-959
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机神谕
- en: 'An abstract concept used to prove that a protocol is secure in theory: you
    can imagine a random oracle as a function *f*() that, every time you send it an
    input *x*, it picks a random value *y* and returns it as the output while registering
    *f*(*x*) = *y*. This sounds similar to how a hash function ought to behave, yet
    a random oracle relies on a slightly different assumption than that of a secure
    hash function. Assuming that a hash function is a random oracle makes it easier
    to write security proofs. But such proofs are perceived as less reliable because,
    unlike secure hash functions, random oracles can’t exist in practice, but in practice
    that’s not a concern.'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 用于证明协议在理论上是安全的抽象概念：你可以将随机神谕想象为一个函数 *f*()，每次你给它一个输入 *x* 时，它会选择一个随机值 *y* 并返回，同时记录
    *f*(*x*) = *y*。这听起来与哈希函数的行为相似，但随机神谕依赖于与安全哈希函数略有不同的假设。假设哈希函数是一个随机神谕可以使得编写安全证明变得更容易。但这样的证明被认为不太可靠，因为与安全哈希函数不同，随机神谕在实践中是无法存在的，但在实际应用中，这并不是一个问题。
- en: Randomness
  id: totrans-961
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机性
- en: The most important thing in cryptography. Without randomness, you couldn’t generate
    random secret values so there would be no secret keys and therefore no encryption.
    Even if you already have keys, you need randomness to achieve the highest public-key
    encryption security level (called *semantic security, or IND-CPA*).
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 加密学中最重要的东西。没有随机性，你就无法生成随机的秘密值，这样就没有秘密密钥，也就没有加密。即使你已经有了密钥，你仍然需要随机性来实现最高的公钥加密安全级别（称为
    *语义安全，或 IND-CPA*）。
- en: Range proof
  id: totrans-963
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区间证明
- en: Proof that a number lies in a certain interval without having to reveal the
    number (the zero-knowledge part). Some cryptocurrencies use range proofs to hide
    the amounts transferred, and to ensure the correctness of a protocol’s execution,
    for example.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 证明一个数字位于某个区间内而无需揭示该数字（零知识部分）。例如，一些加密货币使用范围证明来隐藏转账金额，并确保协议执行的正确性。
- en: RC4
  id: totrans-965
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RC4
- en: 'Rivest’s Cipher 4, designed in 1987\. A stream cipher with a tumultuous history:
    initially, it was a proprietary algorithm from the firm RSA Security and was then
    reverse engineered and published in 1994\. It withstood cryptanalysis surprisingly
    well despite its extreme simplicity and lack of academic peer-review seal of approval—until
    it didn’t, and was found to be insecure (because of statistical biases in the
    first bytes it generates). Still, it was less insecure than most proprietary algorithms
    from that era. RC4 was the basis of WEP, the first Wi-Fi encryption scheme, which
    was broken in part because of RC4’s properties but in larger part because of WEP’s
    flawed design. RC4 was also used in TLS, where its statistical biases could be
    exploited to decrypt data that is encrypted under many different keys. Because
    of its small size, RC4 is also used in malware to obfuscate code or encrypt data
    sent to the malware’s server.'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: Rivest密码4，设计于1987年。一个拥有动荡历史的流密码：最初，它是RSA安全公司的一种专有算法，后来被逆向工程并于1994年发布。尽管其极其简单且缺乏学术同行评审认证，它仍出奇地经受住了密码分析的考验——直到后来，它被发现不安全（因为它生成的前几个字节存在统计偏差）。尽管如此，它仍比那个时代大多数专有算法要不那么不安全。RC4是WEP的基础，WEP是第一个Wi-Fi加密方案，由于RC4的特性以及WEP设计的缺陷，WEP最终被攻破。RC4还被用于TLS，其中的统计偏差可能被利用来解密使用多种不同密钥加密的数据。由于其小巧的体积，RC4也被用于恶意软件中，以混淆代码或加密发送到恶意软件服务器的数据。
- en: RC5
  id: totrans-967
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RC5
- en: A cipher whose only commonality with RC4 is its designer Ronald Rivest; unlike
    RC4, RC5 is not a stream cipher but a block cipher. RC5 is one of the few ciphers
    to use data-dependent rotations, an idea that at first sounds like it makes the
    cipher more complicated. But it also turned out to facilitate cryptanalysis, because
    an attacker could then control the rotation values.
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 一种与RC4唯一相同的是其设计者Ronald Rivest的密码；不同于RC4，RC5不是流密码，而是块密码。RC5是少数几种使用数据依赖旋转的密码之一，这个想法最初听起来让密码变得更加复杂。但实际上，它也有助于密码分析，因为攻击者可以控制旋转值。
- en: RC6
  id: totrans-969
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RC6
- en: Similar to RC5\. Also a block cipher that uses data-dependent rotations and
    was patented by RSA Security. Designed by Ronald Rivest (along with other people)
    as well, RC6 was one of the candidates in the AES competition. It wasn’t chosen
    by NIST to be the AES but was later used in a software implant allegedly designed
    by the NSA.
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于RC5。它也是一种使用数据依赖旋转的块密码，并由RSA安全公司申请专利。由Ronald Rivest（与其他人一起）设计的RC6，曾是AES竞赛中的候选算法。尽管它没有被NIST选为AES，但后来它在一个据称由NSA设计的软件植入中得到了使用。
- en: Real world
  id: totrans-971
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现实世界
- en: Academic cryptography’s term to refer to reality, as opposed to the *ideal world*
    of the security models needed to rigorously analyze the security of cryptographic
    schemes. If attackers in the real world are less powerful than in the ideal world,
    then security proofs on paper guarantee real security.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 学术加密学中的术语，指代现实世界，相对于需要严格分析加密方案安全性的*理想世界*安全模型而言。如果现实世界中的攻击者比理想世界中的攻击者弱，那么纸面上的安全证明就能保证实际的安全。
- en: 'The term is often the source of pleonasms, for example: *previous works don’t
    clarify how the code should be instantiated concretely in the real world*, *real-world
    applications*, and *practical real-world protocols*.'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 这个术语经常成为冗词的来源，例如：*先前的工作没有明确说明代码应如何在现实世界中具体实例化*，*现实世界应用*，以及*实际的现实世界协议*。
- en: Real World Crypto (RWC)
  id: totrans-974
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真实世界加密（RWC）
- en: A cryptography conference focused on current real applications of cryptography,
    as opposed to research conferences less concerned with direct applications. Attended
    by participants from academia and industry, it’s the largest cryptography conference
    in terms of participants. RWC is held alternately on the US West Coast, East Coast,
    in Europe, and in the Asia-Pacific region. Speakers present contributed talks
    (which aren’t necessarily from formal research papers) with titles such as “Privacy-Preserving
    Telemetry in Firefox” and “Weaknesses in the Moscow Internet Voting System.”
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: See [*Asiacrypt*,](#ASIACRYPT) [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt), [*FSE*](#FSE-Fast-Software-Encryption),
    [*PKC*](#PKC), [*TCC*](#TCC).
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle attack
  id: totrans-977
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An improvement of the boomerang attack, created to attack the block cipher Serpent.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: See [*Boomerang attack*.](#Boomerang-attack)
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: Related-key attack
  id: totrans-980
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An attack that makes encryption or decryption queries for instances of the cipher
    whose key is a modified version of the original key, so the modification (as a
    function) is chosen by the attacker. For example, a related-key attack on a block
    cipher might make encryption queries Enc(*K* ⊕*M*, *P*) where *M* is a fixed value
    defined by the attacker without knowing the key.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: You can only use this attack model against symmetric primitives, because it
    would be too powerful and effective against public-key schemes. Related-key attacks
    aren’t a very realistic threat when the key is secret.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: Research papers
  id: totrans-983
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What academic researchers must write to keep their jobs. The IACR’s ePrint server
    received 69 research papers in 2000, 661 in 2010, and 1,499 in 2019\. No one has
    time to read all these articles, which is why it’s crucial for researchers to
    write succinct, informative abstracts, as well as clear and appealing titles.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: Revocation
  id: totrans-985
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Problem solved in theory but rarely in practice.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: Rijndael
  id: totrans-987
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The block cipher that became known as AES after winning the AES competition
    in 2000\. The Rijndael name is a portmanteau of the last names of its designers,
    Belgian cryptographers Joan Daemen and Vincent Rijmen. The Google query *how do
    you say rijndael* returns about 100,000 results.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: See [*AES*](#AES-Advanced-Encryption-Standard).
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: Ring signature
  id: totrans-990
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First described in the paper “How to Leak a Secret” by Rivest, Shamir, and Tauman.
    Ring signatures involve a group of signers such that any signer can create a signature
    that is signer-ambiguous with respect to the subset of signers of their choice.
    In other words, verifiers have no way of identifying the signer; they can only
    know the group of potential signers that they’re in. Unlike with group signatures,
    there is no way to deanonymize the signer.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: See [*Group signature*](#Group-signature).
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: RIPEMD-160
  id: totrans-993
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hash function designed in 1992\. RIPEMD-160 got a second life due to its use
    in Bitcoin and many other cryptocurrencies.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: Rivest–Shamir–Adleman
  id: totrans-995
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authors of the 1978 paper “A Method for Obtaining Digital Signatures and
    Public-Key Cryptosystems” that described the RSA cryptosystem. RSA’s then unique
    property was that the key used for encryption is different from the one used for
    decryption. RSA has evolved into standardized schemes to encrypt and sign securely
    (such as the OAEP and PSS standards, respectively). But its market share has declined
    while elliptic-curve cryptography has gained greater adoption. But RSA’s support
    for *native*, non-hybrid encryption, as well as fast signature verification, sometimes
    makes it the best option when these properties are necessary.
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 1978年论文《A Method for Obtaining Digital Signatures and Public-Key Cryptosystems》的作者，该论文描述了RSA加密系统。RSA的独特之处在于用于加密的密钥与用于解密的密钥是不同的。RSA已发展成标准化的方案，分别用于加密（如OAEP标准）和签名（如PSS标准）。然而，RSA的市场份额已下降，而椭圆曲线加密则得到了更广泛的采用。但RSA对*本地*、非混合加密的支持以及快速签名验证，有时使其在这些特性必要时成为最佳选择。
- en: ROBOT (Return Of Bleichenbacher’s Oracle Threat)
  id: totrans-997
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROBOT（Bleichenbacher’s Oracle Threat的返回攻击）
- en: Bleichenbacher’s attack, 20 years later.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: Bleichenbacher的攻击，20年后。
- en: See [*Bleichenbacher attack*.](#Bleichenbacher-attack)
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Bleichenbacher攻击*](#Bleichenbacher-attack)
- en: ROS
  id: totrans-1000
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROS
- en: 'Random inhomogeneities in an Overdetermined Solvable system of linear equations:
    the hardest of all crypto abbreviations to memorize.'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 过度确定可解线性方程组中的随机不均匀性：所有加密缩写中最难记住的一个。
- en: RSA
  id: totrans-1002
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RSA
- en: The biggest conference in the information security industry.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全行业中最大的会议。
- en: Rubber-hose cryptanalysis
  id: totrans-1004
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 橡皮棍密码分析
- en: Term popularized by XKCD’s comic 538\. A reminder that mathematical cryptographic
    adversarial models often fail to capture more mundane risks from procedural or
    human flaws.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: XKCD漫画538中流行的术语。提醒我们，数学加密对抗模型往往无法捕捉到由程序性或人为缺陷带来的更为平凡的风险。
- en: Rumba20
  id: totrans-1006
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rumba20
- en: The only hash function from the Salsa20 family. Rumba20 was created in the context
    of new results regarding the generalized birthday problem.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: Salsa20家族中的唯一哈希函数。Rumba20是在有关广义生日问题的新结果背景下创建的。
- en: S
  id: totrans-1008
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: S
- en: SAEP (Simplified OAEP)
  id: totrans-1009
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SAEP（简化版OAEP）
- en: A variant of OAEP that is slightly simpler and achieves the same level of chosen-ciphertext
    security.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: OAEP的一种变体，稍微简化，但能实现相同水平的选择密文安全性。
- en: See [*OAEP (Optimal Asymmetric Encryption Padding)*.](#OAEP-Optimal-Asymmetric-Encryption-Padding)
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*OAEP（最优非对称加密填充）*](#OAEP-Optimal-Asymmetric-Encryption-Padding)
- en: Salsa20
  id: totrans-1012
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Salsa20
- en: Undoubtedly one of the most influential cryptographic algorithms. It led to
    the stream cipher ChaCha20 (used in TLS, SSH, and many other places). This in
    turn was reused in the BLAKE2 hash function, a component of the Argon2 password
    hash and protocols such as WireGuard. More generally, Salsa20 popularized simple,
    easy to implement add-rotate-xor (ARX) constructions. A few years earlier, NIST
    had standardized a more complicated cipher whose understanding required the knowledge
    of concepts such as polynomials, matrix inversion, and finite fields.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 无疑是最具影响力的加密算法之一。它催生了流加密算法ChaCha20（用于TLS、SSH以及许多其他地方）。这又被用于BLAKE2哈希函数，这是Argon2密码哈希及WireGuard等协议的组成部分。更广泛地说，Salsa20普及了简单、易于实现的加法-旋转-XOR（ARX）结构。几年前，NIST标准化了一种更复杂的加密算法，其理解需要掌握多项式、矩阵反演和有限域等概念。
- en: The 20 in Salsa20 is for its number of rounds, a conservative value initially
    chosen by its designer and later relaxed in some applications, decreasing to 12
    or even 8.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: Salsa20中的“20”代表其轮数，这是其设计者最初选择的保守值，后来在一些应用中放宽，降至12轮甚至8轮。
- en: Sandwich attack
  id: totrans-1015
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三明治攻击
- en: 'A refinement of the boomerang attack often used to cryptanalyze block ciphers.
    A sandwich attack relies on a distinguisher divided into three parts: “A thick
    slice (bread) at the top, a thin slice (meat) in the middle, and a thick slice
    (bread) at the bottom.” It was invented to find the first practical attack on
    the block cipher KASUMI.'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常用于密码分析块密码的boomerang攻击的改进。三明治攻击依赖于一个被分成三部分的区分器：“上面是一片厚切（面包），中间是一片薄切（肉），下面是一片厚切（面包）。”它是为了找到对块密码KASUMI的第一个实际攻击而发明的。
- en: See [*Boomerang attack*.](#Boomerang-attack)
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [*Boomerang攻击*](#Boomerang-attack)
- en: S-box
  id: totrans-1018
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: S盒
- en: A look-up table used in block ciphers to implement a nonlinear transformation
    with measurable security properties (such as nonlinearity or branch number), although
    S-boxes are not necessarily implemented as look-up tables. In the context of differential
    cryptanalysis, an active S-box is one for which the values from the two (different)
    inputs yield a different input value to the S-box, and thus a different output.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: S-boxes are usually 4-bit (16 values, as in Serpent) or 8-bit (256 values, as
    in Rijndael/AES).
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: Scalar
  id: totrans-1021
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A number, as opposed to a vector or group element, for example. When you hear
    *scalar multiplication* in cryptography, it often just means multiplication of
    a point on an elliptic curve by a number, according to the addition law defined
    on said curve.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: sci.crypt
  id: totrans-1023
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with sci.crypt.research, Usenet newsgroup where people discussed cryptography
    before Twitter and Slack. It’s notorious for its can-you-break-my-cipher-here’s-a-ciphertext
    posts.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: Scrambler
  id: totrans-1025
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Former term for ciphers used in telecommunications and audio/video content processing.
    The first of these algorithms were cryptographically weak, because they didn’t
    really encrypt the signal but effectively just made it unintelligible. The later
    algorithms evolved into actual cryptography.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: See [*DVB-CSA*.](#DVB-CSA)
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: scrypt
  id: totrans-1028
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A password hash function with configurable time memory usage, pronounced *ess-crypt*.
    scrypt pioneered memory-hard password hashing and inspired subsequent designs
    as well as the Password Hashing Competition.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: scrypt has a modular, if not outright minimalistic, design. It includes, as
    subcomponents, the PBKDF2 construction based on HMAC-SHA-256 as well as the Salsa20/8
    stream cipher.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
- en: Searchable encryption
  id: totrans-1031
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Encryption of database records that allows a search on encrypted data. For example,
    it permits a search that given an encrypted keyword retrieves the encrypted items
    that, when decrypted, include the keyword.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: Searchable encryption schemes that are possibly practical and useful leak some
    information about the encrypted data. In contrast, those with the highest security
    guarantees are severely limited functionality- and performance-wise (for example,
    those using functional encryption, homomorphic encryption, and oblivious RAMs).
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: secp256k1
  id: totrans-1034
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The elliptic curve used by Bitcoin, Ethereum, and many other cryptocurrencies
    for their ECDSA signatures of transactions. The *k* indicates a Koblitz curve.
    Unlike other standard curves, and in particular unlike the ubiquitous secp256r1
    (also known as the NIST p-256), secp256k1 doesn’t rely on pseudorandom parameters
    and is in principle less likely to have been manipulated. The actual reasons why
    Satoshi Nakamoto, or whoever, chose to use secp256k1 remain unclear.
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: Secret sharing
  id: totrans-1036
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [*Threshold secret sharing*.](#Threshold-secret-sharing)
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: Security
  id: totrans-1038
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important aspect of cryptographic schemes. Security of a cryptographic scheme
    on paper doesn’t imply security in reality (to some extent, the reverse is also
    true). Even the existence of a formal proof that a cryptographic scheme is secure
    doesn’t necessarily mean it’s secure in all real-life conditions, because the
    definition of “secure in practice” is often undefinable in mathematical terms.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: Security proof
  id: totrans-1040
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The demonstration that finding an algorithm to break some new crypto scheme
    is at least as hard as finding an algorithm to break some other crypto scheme
    or notoriously hard math problem, or a reduction of one problem to another. Security
    proofs only prove an algorithm’s security insofar as their assumptions about attackers’
    capabilities are accurate. Also, the scheme on which it’s based must really be
    practically unbreakable. Other caveats include the fact that the reduction might
    be too loose to be meaningful, and that, in reality, breaking cryptography isn’t
    always about attacking an algorithm.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: Semantic security
  id: totrans-1042
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [*IND-CPA*.](#IND-CPA)
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: '*Serious Cryptography*'
  id: totrans-1044
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yet another book about cryptography.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
- en: Serpent
  id: totrans-1046
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In hindsight, would have been a good choice as the AES standard: its design
    is easy to understand, because it contains no finite fields, polynomials, matrix
    multiplication, or other such math; its implementation logic doesn’t stray too
    far from the specification; and it poses no risk of cache-timing attacks. But
    its security margin (in other words, number of rounds) involved perhaps too much
    crypto compared to Rijndael.'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: See [*PRESENT*.](#PRESENT)
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: SHA-0
  id: totrans-1049
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First draft of SHA-1.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: SHA-1
  id: totrans-1051
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A secure hash function if the only security you need is preimage resistance.
    It took approximately 12 years to progress from the collision attack described
    in a 2005 paper to a demonstrable collision in 2017.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: SHA-2
  id: totrans-1053
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not one but four hash functions:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: SHA-256 looks like SHA-1 but with more rounds and more complex internals.
  id: totrans-1055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-224 is SHA-256 with 224-bit output instead of 256-bit output.
  id: totrans-1056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-512 looks like SHA-256 with 64-bit words instead of 32-bit words.
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-384 is SHA-512 with 384-bit output instead of 512-bit output.
  id: totrans-1058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike SHA-1, SHA-2 algorithms aren’t broken and are unlikely to ever be.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: SHA-3
  id: totrans-1060
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When someone tells you they use SHA-3, you should ask which version of SHA-3
    they use: it could be SHA3-224, SHA3-256, SHA3-384, SHA3-512, SHAKE128, or SHAKE256\.
    If it’s one of the latter two, you might want to know what output length they
    use, because these aren’t simple hash functions but XOF (extendable-output functions).'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: See [*Keccak*.](#Keccak)
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: SHA-3 competition
  id: totrans-1063
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Officially the *NIST hash function competition*. The 2008 to 2012 selection
    process for SHA-3 eventually settled on Keccak after a final round that included
    BLAKE, Grøstl, JH, and Skein. Of 64 submissions received by NIST, 51 were accepted
    as valid.
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: SHACAL
  id: totrans-1065
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A block cipher extracted from the compression function used in SHA-1\. More
    precisely, SHACAL is the keyed permutation in SHA-1’s instance of a Davies–Meyer
    construction. Likewise, SHACAL-2 is SHA-256’s block cipher; it was submitted to
    the NESSIE project and was selected.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
- en: '*SHACAL* is pronounced like the French *chacal*, meaning jackal.'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: Shamir’s secret database
  id: totrans-1068
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of all prime numbers—and therefore all RSA private keys—that Adi Shamir
    is rumored to have created to instantaneously break RSA. To the best of our knowledge,
    this rumor has never been confirmed or denied.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: Shor’s algorithm
  id: totrans-1070
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A quantum algorithm that solves factoring and discrete logarithms with practical
    complexity. Shor’s algorithm is the reason the field of post-quantum cryptography
    exists.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: SHS (Secure Hash Standard)
  id: totrans-1072
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The FIPS 180-4 document that specifies the SHA-1 and SHA-2 algorithms, “for
    computing a condensed representation of electronic data (message).”
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: 'SHA-3 is specified in a separate document titled “SHA-3 Standard: Permutation-Based
    Hash and Extendable-Output Functions”(FIPS 202).'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: Side channel
  id: totrans-1075
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any way to obtain information about a cryptographic operation other than the
    specified output values.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: Side-channel attack
  id: totrans-1077
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An attack that leverages some side-channel information, either passively or
    actively, locally or remotely, based on physical or logical properties. A side-channel
    attack doesn’t necessarily require physical access to the module attacked.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: Sigaba
  id: totrans-1079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The American Enigma, designed in the 1930s. It was never officially broken.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: Signal protocol
  id: totrans-1081
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The combination of the X3DH session initialization protocol and the double ratchet
    state update and key update protocol, as used by the Signal application. A similar
    protocol was integrated in WhatsApp and Facebook Messenger, reusing libraries
    developed for Signal. The cryptographic research and engineering behind the Signal
    protocol had a major impact on secure messaging applications.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
- en: See [*Double ratchet*](#Double-ratchet), [*X3DH*](#X3DH).
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
- en: Signature
  id: totrans-1084
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Public-key signature, or digital signature, but different from electronic signature,
    e-signature, or electromagnetic signature. It’s sometimes sacrilegiously defined
    as *encrypting with the private key*.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: Signcryption
  id: totrans-1086
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To public-key cryptography what authenticated encryption is to symmetric cryptography.
    In other words, signcryption is signature and encryption within a single primitive.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
- en: SIKE (Supersingular Isogeny Key Encapsulation)
  id: totrans-1088
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sounds like BIKE. SIKE is also a post-quantum KEM but is based on an isogeny
    problem rather than a decoding problem.
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: SIKE is based on SIDH (Supersingular Isogeny Diffie–Hellman), the main isogeny-based
    key agreement scheme, and is a candidate in NIST’s post-quantum project.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: See [*BIKE (Bit Flipping Key Encapsulation)*](#BIKE-Bit-Flipping-Key-Encapsulation),
    [*Isogeny-based cryptography*](#Isogeny-based-cryptography).
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
- en: SIMECK
  id: totrans-1092
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SIMON + SPECK = SIMECK. It’s a block cipher that borrows from the SIMON and
    SPECK NSA-designed ciphers to create an algorithm suitable for software- and hardware-constrained
    implementations. SIMECK is not from the NSA.
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: SIMON
  id: totrans-1094
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with its brother SPECK, block ciphers designed to qualify as lightweight,
    optimized for hardware and software, respectively. SIMON would likely be used
    in many projects if it wasn’t designed by the NSA. Indeed, arguing that Caesar’s
    wife must be above suspicion, many cryptographers objected to the use of SIMON
    and SPECK after Snowden publicly questioned the NSA’s trustworthiness.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: SipHash
  id: totrans-1096
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not a hash but a pseudorandom function. SipHash is used as a secure MAC and
    is optimized for short input values. It was designed to prevent hash-flooding
    attacks against hash tables.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: SIV-AES
  id: totrans-1098
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AES in SIV mode. For some reason, it’s not called AES-SIV. Instead, it goes
    by the official name of *Synthetic Initialization Vector* (*SIV*) *Authenticated
    Encryption Using the Advanced Encryption Standard* (*AES*)*. Not to be confused
    with AES-GCM-SIV.*
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: '*## Skipjack'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: A block cipher designed by the NSA in the late 1980s. It’s famous for its role
    in the Clipper fiasco and is currently often used as a toy cipher in cryptanalysis
    classes. Skipjack hasn’t been fully broken or shown to include a backdoor.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
- en: See [*Clipper*.](#Clipper)
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
- en: Slide attack
  id: totrans-1103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An attack introduced in a 1999 paper that began as follows: “It is a general
    belief among the designers of block-ciphers that even a relatively weak cipher
    may become very strong if its number of rounds is made very large.”'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: The paper then goes on to describe a type of attack on block ciphers that works
    regardless of the number of rounds used.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: SM
  id: totrans-1106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A suite of Chinese national cryptographic standards, including publicly available
    algorithms that certain products in China are required to use. The SM suite includes
    elliptic-curve public-key cryptography (SM2), a hash function (SM3), a block cipher
    (SM4), and, interestingly, identity-based cryptography (SM9).
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract
  id: totrans-1108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programs running on blockchain platforms. Bugs in smart contracts tend to have
    catastrophic consequences.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: Snake-oil
  id: totrans-1110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bruce Schneier’s snake-oil warning signs from 1999 are still applicable today:'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: Pseudo-mathematical gobbledygook
  id: totrans-1112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New mathematics
  id: totrans-1113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proprietary cryptography
  id: totrans-1114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extreme cluelessness
  id: totrans-1115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ridiculous key lengths
  id: totrans-1116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One-time pads
  id: totrans-1117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unsubstantiated claims
  id: totrans-1118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security proofs
  id: totrans-1119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cracking contests
  id: totrans-1120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SNARK (succinct non-interactive argument of knowledge)
  id: totrans-1121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A powerful and efficient type of proof of knowledge. Introduced in the 2011
    article “From Extractable Collision Resistance to Succinct Non-Interactive Arguments
    of Knowledge, and Back Again.” It’s a variant of a SNARG (succinct non-interactive
    argument), because a SNARK is a *SNARG of knowledge*. SNARKs can, for example,
    be used for (noninteractive) delegation of computation, where a worker uses a
    SNARK to prove that they performed the correct computation.
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
- en: When a SNARK is zero-knowledge, we talk of zk-SNARK, which was famously used
    in the Zcash blockchain protocol to anonymize transactions via a proof that tokens
    have been transferred from a sender to a recipient without disclosing either’s
    identity or the amount transferred.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
- en: Post-quantum SNARKs exist but are less efficient than pre-­quantum ones.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
- en: SNIP (secret-shared non-interactive proof)
  id: totrans-1125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A zero-knowledge protocol with one prover and several verifiers that each holds
    a share of a proof of correctness. Each verifier holds a share of the secret value;
    the prover sends distinct proof strings to each verifier, allowing the verifiers
    to collaborate to check the validity of the secret according to some predefined
    predicate without leaking any information on said secret. SNIPs were introduced
    as a tool to build privacy-preserving aggregate statistics schemes.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
- en: SNOW 3G
  id: totrans-1127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A stream cipher used in 3G, 4G, and 5G communications to encrypt voice communications.
    Like its early predecessor A5/1, SNOW 3G works by updating a state composed of
    feedback shift registers, which makes it simple to implement and efficient. Unlike
    A5/1, SNOW 3G is secure. A new version of SNOW 3G for 5G networks called *SNOW-V*
    was proposed in 2020 to be faster in software, because 5G relies a lot more on
    software and virtualized environments than previous standards.
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
- en: See [*Feedback shift register*](#Feedback-shift-register).
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: Solitaire
  id: totrans-1130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A stream cipher created by Bruce Schneier for the novel *Cryptonomicon*. The
    novel’s characters use it without accessing a computer. As Schneier describes:'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
- en: Solitaire gets its security from the inherent randomness in a shuffled deck
    of cards. By manipulating this deck, a communicant can create a string of *random*
    letters that he then combines with his message. Of course Solitaire can be simulated
    on a computer, but it is designed to be implemented by hand.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: Solitaire is broken by today’s academic standards (it has a statistical bias),
    but it’s quite secure for a pen-and-paper cipher, and practically safe when used
    correctly.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
- en: See [*Cryptonomicon*.](#Cryptonomicon)
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
- en: SPECK
  id: totrans-1135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An NSA lightweight cipher.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: See [*SIMON*.](#SIMON)
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
- en: SPEKE (Simple Password Exponential Key Exchange)
  id: totrans-1138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PAKE invented long before PAKEs were cool (in 1996).
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
- en: SPHINCS
  id: totrans-1140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hash-based signature scheme that, unlike XMSS, is stateless. But it’s even
    more complicated than XMSS. Gravity-SPHINCS and SPHINCS+ are SPHINCS variants
    that were submitted to NIST’s post-quantum competition. Not to be confused with
    the SPHINX mixnet.
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
- en: See [*XMSS*](#XMSS-eXtended-Merkle-Signature-Scheme).
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
- en: Sponge function
  id: totrans-1143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest way to design a hash function. A sponge function uses only a permutation
    algorithm—as opposed to a keyed permutation—or a block cipher. Pioneered by Keccak,
    now SHA-3, it leads to a multitude of permutation-based schemes.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
- en: See [*Keccak*](#Keccak), [*Permutation-based cryptography*](#Permutation-based-cryptography).
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
- en: SRP (Secure Remote Password)
  id: totrans-1146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PAKE relying on the Diffie–Hellman problem. SRP can be combined with TLS and
    is notably used in iCloud Keychain. But overall, it’s found in very few applications,
    most likely because of vulnerabilities in earlier versions of SRP, and because
    the minor security benefit is often not worth SRP’s extra complexity compared
    to a straightforward password authentication.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
- en: SSH (Secure Shell)
  id: totrans-1148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A secure channel over TCP. SSH relies on neither PKI nor X.509 certificates.
    Instead, it has a trust-on-first-use (TOFU) trust model. Fewer security issues
    have been found in SSH than in TLS.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
- en: SSL (Secure Socket Layer)
  id: totrans-1150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not TLS. SSL is the predecessor of that ubiquitous transport security protocol;
    it was designed in the 1990s by Netscape and had three versions, the first of
    which was never released because it was too insecure. SSL v2 shipped with Netscape
    Navigator 1.1 in March 1995, and SSL v3 was released shortly after to notably
    mitigate a man-in-the-middle attack (working by downgrading to a weak cipher suite).
    Nonetheless, many systems continued to support SSL v2, sometimes for backward
    compatibility. Twenty years later, the DROWN attack exploited such legacy support
    of SSL v2 to attack recent TLS versions.
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: See [*TLS*](#TLS-Transport-Layer-Security).
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
- en: STARK (scalable transparent arguments of knowledge)
  id: totrans-1153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variants of SNARKs. STARKs were motivated by applications requiring efficient
    and scalable zero-knowledge proofs with fewer constraints than with SNARKs. Here
    are the main differences between STARKs and SNARKs:'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
- en: STARKs don’t require a *trusted setup*—a process that must be performed by trusted
    parties so that subsequent proofs are secure.
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STARKs can be safe against quantum algorithms, whereas known SNARK constructions
    usually aren’t (or with some constraints).
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STARKs are a bit faster to create and a bit slower to verify.
  id: totrans-1157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [*SNARK (succinct non-interactive argument of knowledge)*](#SNARK-succinct-non-interactive-argument-of-knowledge).
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
- en: Steganography
  id: totrans-1159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Covert communication techniques that belong more to the field of signal processing
    than to cryptography.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
- en: Stream cipher
  id: totrans-1161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A type of cipher you can think of as a one-time pad cryptographically generated
    from a key and a (unique) nonce. The block cipher DES was designed in the 1970s
    with hardware implementations in mind; later the stream cipher RC4 was designed
    to be software friendly due to its byte-oriented mechanism. Yet in the 1990s stream
    ciphers were often thought of as *hardware ciphers* and were frequently based
    on feedback shift registers with minimal surrounding logic, like Grain or SNOW
    3G. On the other hand, block ciphers are considered software ciphers, as the AES
    competition requirements made clear in 2000\. Indeed, you’ll find stream ciphers
    used in niche, constrained applications, even before the term *lightweight cryptography*
    existed, when block ciphers were too costly.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
- en: Today, stream ciphers are no longer a niche market, and many of the encryption
    modes used in modern applications are technically stream ciphers because they
    run in CTR mode.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: Substitution-permutation network (SPN)
  id: totrans-1164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Construction of permutations, as used in block ciphers and hash functions,
    in which a round includes two layers:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: Substitution, typically via S-boxes, to transform chunks of blocks into other
    chunks in a nonlinear manner (that is, with a complex input–output relation).
    This strong but very local transformation is sometimes said to bring *confusion*.
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permutation, typically via shuffling of bits or a matrix operation to make sure
    that each output bit will eventually depend on all input bits. This is weak, but
    block-wise transformation is said to provide *diffusion*.
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In an SPN, these two layers are complementary, and this separation of duties
    often simplifies the analysis of the cipher and the calculation of bounds on the
    success rate of certain attack techniques. AES, Serpent, and PRESENT are examples
    of SPNs.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: Suck
  id: totrans-1169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As defined by cryptographer Matthew Green: “In cryptography *suck* is a purely
    technical term meaning *slow*, *complex*, and *probably insecure*.”'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: Sugar beet auctions
  id: totrans-1171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many years, the only known real-world application of multi-party computation
    (MPC). Sugar beet auctions occurred in Denmark in 2008 with the support of Aarhus
    University researchers. They were described in detail in the paper “Secure Multiparty
    Computation Goes Live” and cited in numerous other papers as evidence that MPC
    isn’t useless. Thanks to blockchain protocols, there are now many more MPC applications.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: Suite A
  id: totrans-1173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The NSA’s suite of classified cryptographic algorithms and techniques. Suite
    A is used, for example, in military secure communication devices. It’s not available
    to the public.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: See [*NSA (National Security Agency)*](#NSA-National-Security-Agency).
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: SUPERCOP
  id: totrans-1176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: System for Unified Performance Evaluation Related to Cryptographic Operations
    and Primitives. It’s a successor of BATMAN and eBASH.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: SUPERCOP estimates the optimal speed of an algorithm by trying out many different
    implementations of it. It also compiles each implementation with many different
    compiler options and then runs the compiled program multiple times to reliably
    measure its execution time. As of May 2020, SUPERCOP has benchmarked more than
    1,000 different algorithms and more than 2,800 implementations of them, as well
    as multiple compilers and compiler options.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: In terms of CPU usage, running SUPERCOP is to cryptography implementers what
    Bitcoin mining is to cryptocurrency people.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: Superpolynomial complexity
  id: totrans-1180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practically impossible complexity, according to Cobham’s thesis (and empirical
    observation).
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: SVP (shortest vector problem)
  id: totrans-1182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main computational problem in lattice-based cryptography. SVP involves finding
    a combination of multidimensional vectors whose length (with respect to a given
    norm) is the smallest.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: Many lattice-based cryptosystems indirectly leverage the worst-case hardness
    of an SVP-like problem, such as GapSVP, due to results relating the learning with
    errors (LWE) problem to SVP problems.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric-key cryptography
  id: totrans-1185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The oldest form of post-quantum cryptography.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: T
  id: totrans-1187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TCC
  id: totrans-1188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Theory of Cryptography Conference “focuses on paradigms, approaches, and
    techniques used to conceptualize, define, and provide solutions to natural cryptographic
    problems.”
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: TCC indeed covers both theoretical cryptography—an intellectually interesting
    topic but of low practical relevance, for example, when concerned with concepts
    such as quantum random oracles—and the theoretical aspects of applied cryptography,
    where fundamental results can be of high practical interest.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: Researchers present peer-reviewed research papers with titles such as “Obfuscated
    Fuzzy Hamming Distance and Conjunctions from Subset Product Problems” and “Fully
    Homomorphic NIZK and NIWI Proofs.”
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: See [*Asiacrypt*](#ASIACRYPT), [*CHES*](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems),
    [*CRYPTO*](#CRYPTO), [*Eurocrypt*](#Eurocrypt), [*FSE*](#FSE-Fast-Software-Encryption),
    [*PKC*](#PKC), [*Real World Crypto*](#Real-World-Crypto-RWC).
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: Test vectors
  id: totrans-1193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alas, often the only tests found in cryptosystems’ implementations.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: Threefish
  id: totrans-1195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third member of the Blowfish family but very different from Blowfish and
    Twofish. It has no Feistel network, no MDS matrices, no S-box, but just an ARX
    construction allegedly inspired by ChaCha and that later inspired SipHash.
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: Threshold encryption
  id: totrans-1197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strictly speaking, doesn’t exist. But threshold decryption does exist. It’s
    where the decryption key is threshold-shared among *N* parties, *t* ≤ *N* of which
    must collaborate to decrypt a ciphertext.
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: Threshold secret-sharing
  id: totrans-1199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Or just secret sharing. A mechanism whereby a secret is split into *N* shares
    so that *t* ≤ *N* are required to recover the secret, and fewer than *t* don’t
    reveal information about the secret. Shamir’s method, based on polynomial interpolation,
    is the standard way to realize secret sharing.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: Verifiable secret-sharing (VSS) is a variant wherein parties can cryptographically
    verify that the correct secret has been recovered and that each party provided
    their correct share.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: Threshold signature
  id: totrans-1202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A signature scheme where signing capabilities (that is, keys) are distributed
    across *N* potential signers and where a signature requires at least *t* ≤ *N*
    signatures from distinct signers. It’s notably used for custody of cryptocurrency
    in cold storage systems of certain exchanges.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: Time AI™
  id: totrans-1204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Fyre Festival of cryptography.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: Time-lock encryption
  id: totrans-1206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A cryptographic time capsule. Time-lock encryption attempts to make decryption
    impossible—even with the decryption key—until a certain date, when the algorithm
    authorizes noninteractive decryption. Like many cryptographic functionalities,
    you can achieve it using a trusted execution environment under fairly realistic
    assumptions. It’s also possible to create time-locked ciphertexts by leveraging
    so-called computational reference clocks, like those obtained from blockchains.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: Time-lock puzzle
  id: totrans-1208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first instance of *timed-release crypto*. It was defined in 1996 as a way
    to “send information into the future” by creating a problem whose solution is
    known by its creator but the recovery of which otherwise requires a large amount
    of computation. It later inspired time-lock encryption.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
- en: See [*Proof of sequential work*](#Proof-of-sequential-work), [*Verifiable delay
    function (VDF)*](#Verifiable-delay-function-VDF).
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
- en: Timing attack
  id: totrans-1211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An attack that takes advantage of timing differences to discover a secret and
    more generally compromise a cryptosystem’s security. Sometimes, the running time
    of the algorithm depends on the value of secret inputs, which might trigger things,
    such as if–then patterns or some other ­variable-time operation. For example,
    some processors’ arithmetic units will execute a multiplication instruction in
    fewer cycles if one of the inputs is zero. The textbook example of a timing attack
    targets square-and-multiply exponentiation (or double-and-add multiplication)
    where the private exponent (or scalar) is scanned bit per bit.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: Attackers can also exploit timing leaks to identify the outcome of a cryptographic
    operation (such as padding validation) or the type of error that occurs when no
    detailed error code is returned (as with mitigations against Manger’s attack).
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: TLS (Transport Layer Security)
  id: totrans-1214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A protocol to establish a secure channel over TCP (and over UDP with DTLS).
    TLS used PKI, X.509 certificates, and too many cipher suites until TLS 1.3.
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
- en: See [*SSL*](#SSL-Secure-Socket-Layer), [*Heartbleed*](#Heartbleed).
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
- en: Tor
  id: totrans-1217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of all cryptographic applications, Tor has one of the highest ratios between
    real-world impact and academic contribution and interest. The Tor anonymity network,
    also known as the *onion router*, provides untraceability guarantees if used correctly.
    Those for whom these are vital (criminals and law enforcement, as well as some
    journalists and political activists) use Tor to increase their life expectancy.
    You can also use Tor to bypass network restrictions (such as government censorship)
    and mitigate tracking and surveillance, which is why using it might get you in
    trouble in certain places.
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
- en: Traitor tracing
  id: totrans-1219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Encryption schemes where different parties have a different decryption key
    to decrypt the same ciphertext. Traitor tracing aims, for example, to identify
    the source of a content leak and revoke access. But in practice, pirates can use
    a simple workaround: redistribute the content rather than the key. And anyway,
    large pay-TV deployments haven’t really used purely cryptographic traitor tracing
    schemes.'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
- en: Transfinite cryptography
  id: totrans-1221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cryptography over transfinite numbers, that is, infinite numbers like ℵ[0] (the
    cardinal of countable sets, such as that of integers ℕ), ![](Images/i01002.jpg)(cardinality
    of the continuum, that is, of the set of real numbers ℝ), or ℵ[1] (the cardinality
    of Ω, the set of all countable ordinal numbers—itself an uncountable set).
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
- en: Transfinite cryptography describes a computational model for working with such
    infinite numbers, as well as analogues of stream ciphers, block ciphers, and hash
    functions, and public-key signatures using said hash functions (via Lamport’s
    construction).
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
- en: An example of a definition is that of ℵ[0]-one-way functions, which are functions
    computable in ℵ[0] operations and *practically* *impossible* to invert with *only*ℵ[0]
    operations. If such a function takes strings of length ℵ[0] as input, there are
    therefore ![](Images/i01003.jpg) possible inputs, an uncountable number, preventing
    brute force even with infinite computational capabilities. Such a hash function
    isn’t known to exist and intuitively sounds impossible to define.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, transfinite cryptography can only be implemented in a Platonic
    universe of mathematical objects, not on your computer or on a future quantum
    computer.
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
- en: Trapdoor
  id: totrans-1226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not a backdoor. A trapdoor for some cryptographic function is a value, known
    to exist, that allows you to perform some operation that would otherwise be computationally
    hard. The best-known example is the RSA trapdoor permutation, which you can only
    invert using the RSA private key. A lesser-known example is that of trapdoor hash
    functions, such as VSH, for which collisions can only be found using the trapdoor.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
- en: Triple DES
  id: totrans-1228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Known as TDEA in NIST’s official parlance. A cipher that consists not in three
    instances of DES but in one DES encryption, one DES decryption, and a second DES
    encryption. This is designed to emulate DES, because the Triple DES engine sets
    the same key for the first two instances, which then cancel themselves out. A
    Triple DES key can be up to 3 × 64 = 192 bits long. But Triple DES can’t boast
    192-bit security, because 1) each 64-bit DES key only has 56 bits of information,
    thus bounding Triple DES’ security to 168 bits, and 2) meet-in-the-middle attacks
    can break Triple DES in approximately 2^(56 × 2) = 2^(112) operations. Like DES,
    Triple DES’ security is also limited by its 64-bit block size. So, even though
    Triple DES still found in legacy applications isn’t practically breakable, you’ve
    no reason to use it today. It fits best in crypto museums rather than modern applications.
    NIST retired Triple DES in 2018.
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
- en: Trivium
  id: totrans-1230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A minimalistic hardware-oriented stream cipher that uses an 80-bit key. For
    several years, its circular representation was used on the banner of the DEFCON
    conference website.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: True random number generator (TRNG)
  id: totrans-1232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [*Pseudorandom generator (PRNG)*](#Pseudorandom-number-generator-PRNG).
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: Trusted third party
  id: totrans-1234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution to most cryptography problems. Sometimes a trusted third party
    is inevitable, and the cryptographers’ job is to design protocols that minimize
    the level of trust required or that make any breach of trust detectable and recoverable.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
- en: Tweakable block cipher
  id: totrans-1236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A block cipher that takes an additional parameter, called the *tweak*, to ensure
    it produces different outputs with different tweaks. Unlike a key, a tweak isn’t
    necessarily secret and usually changes more often than the key. Changing the value
    of a tweak should incur only a negligible performance penalty, unlike a key change,
    which usually involves a costly key schedule operation. Tweakable block ciphers
    have been used for disk encryption, for example, and for exotic proprietary constructions
    that need additional inputs.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
- en: Twitter
  id: totrans-1238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The location of the best and worst discussions about cryptography.
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
- en: Twofish
  id: totrans-1240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AES candidate and finalist. Twofish is the little brother of Blowfish and has
    128-bit-long blocks instead of 64-bit-long ones.
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
- en: U
  id: totrans-1242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Undeniable signature
  id: totrans-1243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A signature that cannot be verified without the signer’s cooperation, whether
    or not the signature is valid. Verifiers shouldn’t be able to determine if a signature
    is valid without interacting with the signer, and the signer shouldn’t be able
    to convince a prover that a valid signature is invalid, or vice versa.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
- en: See [*Invisible signature*](#Invisible-signature).
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
- en: Universal composability
  id: totrans-1246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A theoretical framework for analyzing the security of combining cryptographic
    components, seeing as combining two secure protocols doesn’t automatically result
    in a secure protocol. It’s rarely applied to real use cases.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
- en: Universal hash function
  id: totrans-1248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hash function used in cryptography that isn’t the same as a cryptographic
    hash function. Unlike a general-purpose cryptographic hash, a universal hash function
    is parameterized by a secret key. Therefore, it’s actually a family of functions,
    like a pseudorandom function.
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
- en: 'But unlike a pseudorandom function, a universal hash function isn’t pseudorandom
    in the cryptographic sense, only in the statistical sense: there exist no two
    input values *M*[1] and *M*[2] such that Hash(*M*[1]) = Hash(*M*[2]) with abnormally
    high probability.'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
- en: This property shouldn’t be mistaken for collision resistance, however. Collisions
    are usually easy to find for universal hash functions.
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
- en: Updatable encryption
  id: totrans-1252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An encryption scheme that can directly turn one ciphertext into another ciphertext,
    which can only be decrypted with a new, different key. A goal of updatable encryption
    is to perform key rotation on an untrusted system, as an alternative to the naive
    decrypt-encrypt approach.
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
- en: V
  id: totrans-1254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Verifiable delay function (VDF)
  id: totrans-1255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A function whose computation cannot be sped up by extra parallelism or storage;
    therefore, it must be computed sequentially, like a proof of sequential work.
    But unlike the latter, VDFs admit only one solution.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
- en: See [*Proof of sequential work*](#Proof-of-sequential-work), [*Time-lock puzzle*](#Time-lock-puzzle).
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
- en: Verifiable random function (VRF)
  id: totrans-1258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The public-key counterpart of a pseudorandom function, where the public key
    can be used to verify that the output has been computed correctly by verifying
    the proof of correctness generated along with the function’s output.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
- en: 'VRFs sound similar to public-key signatures but differ in two main aspects:
    a VRF’s result is always deterministic (whereas a message can admit many valid
    ECDSA signatures, for example), and a VRF can generate a result and a proof (where
    the proof might be randomized).'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
- en: VRFs have been used to build (theoretical versions of) lottery systems and transaction
    escrow schemes, and are used in several blockchain platforms.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
- en: Verifiable unpredictable function (VUF)
  id: totrans-1262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A function that somehow occupies a niche between signatures and VRFs: a VUF
    is like a VRF but isn’t necessarily pseudorandom, only unpredictable. But unlike
    a signature, there must be only one valid output for a given message. A VUF scheme
    can thus be regarded as a unique signature.'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
- en: See [*Verifiable random function (VRF)*](#Verifiable-random-function-VRF).
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
- en: Vigenère cipher
  id: totrans-1265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A cipher more secure than Caesar’s.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: VSH (Very Smooth Hash)
  id: totrans-1267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hash function with provable collision resistance, based on the hardness of
    factoring integers. But VSH (second) preimage resistance doesn’t have as strong
    security guarantees.
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
- en: W
  id: totrans-1269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wallet
  id: totrans-1270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In cryptocurrencies, a set of accounts managed by a single individual or organization.
    Each account consists of a private key used for signing and an address somehow
    derived from the public key. Typically, these accounts are organized hierarchically,
    from one or more seeds, using BIP32 or a similar hierarchical derivation. This
    is convenient, because you can then manage a practically infinite number of accounts
    by storing only a single secret.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
- en: 'By extension, a wallet refers to any application or device that implements
    account management functionalities. Hardware wallets offer the best feeling of
    security, and sometimes they really are more secure. That said, they don’t protect
    any better than software wallets against the most common risk: the lack of reliable
    backups.'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
- en: Watermarking
  id: totrans-1273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The practice of embedding a value in some analog information (such as an image,
    video, or sound), usually during digital encoding, in such a way that the value
    can’t be extracted or removed. In its most robust forms, it also survives noise,
    transcoding, and digital-analog-digital conversion.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
- en: White-box cryptography
  id: totrans-1275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obfuscation at the algorithm level. Put otherwise, a means of implementing,
    say, AES in such a way that the implementation for a given key doesn’t reveal
    the key. This sounds like magic, and like real magic, it doesn’t actually exist,
    although advanced techniques give the illusion that it does. Most white-box techniques
    have indeed been broken, at least on paper. But in practice, they contribute to
    making reverse engineering harder, due to being supplemented by software-level
    defenses (such as software obfuscation, anti-tampering, anti-debugging, device
    binding, and so on).
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, white-box cryptography is about transforming a symmetric cipher
    into an asymmetric one. If that were feasible, it would mean that we could create
    public-key encryption from a symmetric primitive, which would be surprising (despite
    the fact that we can construct public-key signatures from hash functions.)
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
- en: Winternitz signature
  id: totrans-1278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An extension of Lamport hash-based signatures that can hash values greater than
    one. For example, to hash 4-bit messages, or integers between 0 and 15, you would
    publish Hash^(16)(*K*) as a public key, and then sign a message *M* ∈ [0, 15]
    by computing Hash^(*M*)(*K*), where *M* is the number of hash iterations.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
- en: This works better than Lamport’s binary scheme, but it still doesn’t scale—just
    imagine the work involved in signing a 64-bit value.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
- en: WireGuard
  id: totrans-1281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A network-layer protocol for peer-to-peer secure channels that grew out of a
    kernel rootkit project. WireGuard was designed for SSH-like usage and VPN functionality.
    As per its creator’s words, WireGuard is “cryptographically opinionated,” which
    means it consists of a single suite of algorithms, as well as minimal cryptographic
    bureaucracy. Notably, it excludes certificates and thus ASN.1 or X.509 parsing.
    Unlike many projects, WireGuard has focused its efforts on cryptography and implementation
    quality with a much smaller code base than its alternatives.
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
- en: Initially regarded with suspicion by the cryptographic intelligent­sia, WireGuard’s
    success and security track record now speak for themselves.
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
- en: X
  id: totrans-1284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: X25519
  id: totrans-1285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Diffie–Hellman with Curve25519.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
- en: See [*Curve25519*](#Curve25519).
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: X3DH
  id: totrans-1288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extended triple Diffie–Hellman, a variant of Diffie–Hellman popularized by its
    use in the Signal protocol. X3DH combines multiple key pairs to compute one shared
    secret instead of using just one key pair per participant, as in basic Diffie–Hellman.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: XMSS (eXtended Merkle Signature Scheme)
  id: totrans-1290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A public-key signature scheme that uses only a hash function and a tree structure.
    XMSS’s statefulness—or obligation to keep track of a counter over signature operations—has
    been called *a huge foot-cannon*. Even so, XMSS has become an IETF standard and
    was experimentally integrated in OpenSSH.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
- en: See [*SPHINCS*](#SPHINCS).
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
- en: XOF (extendable output function)
  id: totrans-1293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hash function whose output can be of variable size. The function can also
    extend the length of the output if needed. By contrast, in nonextendable, variable-size
    output functions, output values of different sizes are completely distinct, and
    the shorter ones aren’t prefixes of the longer.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: XOR
  id: totrans-1295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The exclusive OR logical operation, written as ⊕. XOR obeys the following rules:
    true XOR false equals true; true XOR true equals false; and false XOR false equal
    false. When viewed as a binary operator, the rules produce the following results:
    1 ⊕ 1 = 0 ⊕ 0 = 0, 0 ⊕ 1 = 1 ⊕ 0 = 1\. Extended to bit strings, you’d get 0111
    ⊕ 1101 = 1010, and so on.'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
- en: XOR encryption
  id: totrans-1297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A straightforward form of encryption, sometimes used in malware as an obfuscation
    layer. It’s similar to a one-time pad except that the XORed value isn’t always
    secret or used only once.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: Z
  id: totrans-1299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zerocash
  id: totrans-1300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Came after Zerocoin but before Zcash.
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: ZKP (zero-knowledge proof)
  id: totrans-1302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A protocol where a prover convinces a verifier that they know some mathematical
    statement (such as the solution to a hard problem) without revealing said statement.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: Now a mainstream concept among crypto enthusiasts, ZKPs were once an obscure
    field at the intersection of cryptography and theoretical computer science.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
- en: 'Zero-knowledge is a broad and rich discipline, arguably still in its infancy
    as far as applications are concerned. There have been a few ZKPs advancing from
    conference proceedings to the real world: these applications include e-voting
    and blockchain applications, wherein noninteractive ZKPs help protect the privacy
    of transactions. ZKPs are also a component of threshold signing schemes as used
    for certain cold storage systems.'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: Cryptographic zero-knowledge shouldn’t be confused with the security engineering
    concept of zero-knowledge architecture or with the marketing term zero-knowledge
    referring to client-side encryption.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
- en: See [*NIZK (non-interactive zero-knowledge)*](#NIZK-non-interactive-zero-knowledge).
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: ZRTP
  id: totrans-1308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key agreement procedure for RTP connections and used in voice-over-IP connections
    between two peers. Initially present in the Signal application to enable end-to-end
    encrypted calls, ZRTP was later discarded in favor of keys derived from the text
    messaging session state, which turned out to be simpler and more secure. The Z
    in ZRTP represents Phil Zimmermann.
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
- en: Index of Terms
  id: totrans-1310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[2013](#2013)'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
- en: '[65537](#65537)'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
- en: '[A5/0](#A5-0)'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
- en: '[A5/1](#A5-1)'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
- en: '[A5/2](#A5-2)'
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
- en: '[A5/3](#A5-3)'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
- en: '[A5/4](#A5-4)'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
- en: '[Adaptive attack](#Adaptive-attack)'
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
- en: '[AEAD (authenticated encryption with associated data)](#AEAD-authenticated-encryption-with-associated-data-)'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
- en: '[AES (Advanced Encryption Standard)](#AES-Advanced-Encryption-Standard)'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
- en: '[AES-CCM](#AES-CCM)'
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
- en: '[AES-GCM](#AES-GCM)'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
- en: '[AES-GCM-SIV](#AES-GCM-SIV)'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
- en: '[AES-NI](#AES-NI)'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
- en: '[AES-SIV](#AES-SIV)'
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
- en: '[AIM (Advanced INFOSEC Machine)](#AIM-Advanced-INFOSEC-Machine)'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
- en: '[AKA](#AKA)'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: '[AKS (Agrawal–Kayal–Saxena)](#AKS-Agrawal%E2%80%93Kayal%E2%80%93Saxena)'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
- en: '[Algebraic cryptanalysis](#Algebraic-cryptanalysis)'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
- en: '[Alice](#Alice)'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
- en: '[All-or-nothing transform (AONT)](#All-or-nothing-transform-AONT)'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
- en: '[Anonymous signature](#Anonymous-signature)'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
- en: '[Applied Cryptography](#Applied-Cryptography)'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: '[Applied cryptography](#Applied-cryptography)'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
- en: '[ARC4](#ARC4)'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
- en: '[Argon2](#Argon2)'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
- en: '[ARX (Add-Rotate-XOR)](#ARX-Add-Rotate-XOR)'
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
- en: '[ASIACRYPT](#ASIACRYPT)'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
- en: '[Asymmetric cryptography](#Asymmetric-cryptography)'
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
- en: '[Attack](#Attack)'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
- en: '[Attribute-based encryption (ABE)](#Attribute-based-encryption-ABE)'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
- en: '[Authenticated cipher](#Authenticated-cipher)'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
- en: '[Axolotl](#Axolotl)'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
- en: '[Backdoor](#Backdoor)'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
- en: '[Backtracking resistance](#Backtracking-resistance)'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
- en: '[Backward secrecy](#Backward-secrecy)'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
- en: '[Base64](#Base64)'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: '[BassOmatic](#BassOmatic)'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
- en: '[BB84](#BB84)'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
- en: '[bcrypt](#bcrypt)'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: '[Biclique cryptanalysis](#Biclique-cryptanalysis)'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
- en: '[BIKE (Bit Flipping Key Encapsulation)](#BIKE-Bit-Flipping-Key-Encapsulation)'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: '[BIP (Bitcoin improvement proposal)](#BIP-Bitcoin-improvement-proposal)'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
- en: '[Bit Gold](#Bit-Gold)'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitcoin](#Bitcoin)'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
- en: '[Black](#Black)'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
- en: '[BLAKE](#BLAKE)'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
- en: '[BLAKE2](#BLAKE2)'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
- en: '[BLAKE3](#BLAKE3)'
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
- en: '[Bleichenbacher attack](#Bleichenbacher-attack)'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
- en: '[Blind signature](#Blind-signature)'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: '[Block cipher](#Block-cipher)'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
- en: '[Blockchain](#Blockchain)'
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: '[Blockcipher](#Blockcipher)'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: '[Blowfish](#Blowfish)'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: '[BLS (Boneh-Lynn-Shacham) signature](#BLS-Boneh-Lynn-Shacham-signature)'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
- en: '[Bob](#Bob)'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
- en: '[Boolean function](#Boolean-function)'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: '[Boomerang attack](#Boomerang-attack)'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: '[BQP (bounded-error quantum polynomial time)](#BQP-bounded-error-quantum-polynomial-time)'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
- en: '[Braid group cryptography](#Braid-group-cryptography)'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
- en: '[Brainpool curves](#Brainpool-curves)'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
- en: '[Break-in recovery](Images/#Break-in-recovery)'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: '[Broadcast encryption](#Broadcast-encryption)'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
- en: '[Brute-force attack](#Brute-force-attack)'
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
- en: '[Bulletproof](#Bulletproof)'
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: '[Byzantine fault tolerance](#Byzantine-fault-tolerance)'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: '[CAESAR](#CAESAR)'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: '[Caesar’s cipher](#Caesar%E2%80%99s-cipher)'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: '[CAVP (Cryptographic Algorithm Validation Program)](#CAVP-Cryptographic-Algorithm-Validation-Program)'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
- en: '[CBC (cipher block chaining)](#CBC-cipher-block-chaining)'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: '[CECPQ (combined elliptic-curve and post-quantum)](#CECPQ-combined-elliptic-curve-and-post-quantum)'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: '[Cellular automata](#Cellular-automata)'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
- en: '[Ceremony](#Ceremony)'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
- en: '[Certificate](#Certificate)'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: '[Certificate authority (CA)](#Certificate-authority-CA)'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
- en: '[Certificate transparency (CT)](#Certificate-transparency-CT)'
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
- en: '[ChaCha20](#ChaCha20)'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: '[CHES (Conference on Cryptographic Hardware and Embedded Systems)](#CHES-Conference-on-Cryptographic-Hardware-and-Embedded-Systems)'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: '[CIA](#CIA)'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
- en: '[Ciphertext stealing](#Ciphertext-stealing)'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: '[Clipper](#Clipper)'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
- en: '[CMVP (Cryptographic Module Validation Program)](#CMVP-Cryptographic-Module-Validation-Program)'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: '[Code-based cryptography](#Code-based-cryptography)'
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
- en: '[Commitment](#Commitment)'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
- en: '[Concurrent zero-knowledge](#Concurrent-zero-knowledge)'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: '[Consensus protocol](#Consensus-protocol)'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
- en: '[Control word](#Control-word)'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
- en: '[COPACOBANA (Cost-Optimized PArallel COde Breaker)](#COPACOBANA-Cost-Optimized-PArallel-COde-Breaker)'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
- en: '[Cothority (collective authority)](#Cothority-collective-authority)'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptanalysis](#Cryptanalysis)'
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptids](#Cryptids)'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
- en: '[Crypto](#Crypto)'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: '[CRYPTO](#CRYPTO)'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
- en: '[Crypto AG](#Crypto-AG)'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: '[Crypto period](#Crypto-period)'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
- en: '[Crypto variable](#Crypto-variable)'
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
- en: '[Crypto wars](#Crypto-wars)'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptobiosis](#Cryptobiosis)'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptocurrency](#Cryptocurrency)'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
- en: '[Crypto-Gram](#Crypto-Gram)'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptography](#Cryptography)'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: '[*Cryptologia*](#Cryptologia)'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptology](#Cryptology)'
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: '[*Cryptonomicon*](#Cryptonomicon)'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptorchidism](#Cryptorchidism)'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
- en: '[Cryptovirology](#Cryptovirology)'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: '[CRYPTREC](#CRYPTREC)'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: '[CSIDH (Commutative Supersingular Isogeny Diffie–Hellman)](#CSIDH-Commutative-Supersingular-Isogeny-Diffie%E2%80%93Hellman)'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: '[CTF (capture the flag)](#CTF-capture-the-flag)'
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
- en: '[Cube attack](#Cube-attack)'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: '[Curve25519](#Curve25519)'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
- en: '[Curve448](#Curve448)'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: '[Cypher](#Cypher)'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
- en: '[Daemon](#Daemon)'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: '[Davies–Meyer](#Davies%E2%80%93Meyer)'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
- en: '[Decentralized private computation](#Decentralized-private-computation)'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
- en: '[Déchiffrer](#D%C3%A9chiffrer)'
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
- en: '[Décrypter](#D%C3%A9crypter)'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: '[Deniable encryption](#Deniable-encryption)'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
- en: '[DES (Data Encryption Standard)](#DES-Data-Encryption-Standard)'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: '[Dictionary](#Dictionary)'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: '[Dictionary attack](#Dictionary-attack)'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: '[Differential cryptanalysis](#Differential-cryptanalysis)'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
- en: '[Diffie–Hellman](#Diffie%E2%80%93Hellman)'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: '[Disclosure](#Disclosure)'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: '[Discrete logarithm problem](#Discrete-logarithm-problem)'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
- en: '[Distinguisher](#Distinguisher)'
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
- en: '[Distributed randomness](#Distributed-randomness)'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
- en: '[Dolev–Yao model](#Dolev%E2%80%93Yao-model)'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
- en: '[Double ratchet](#Double-ratchet)'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
- en: '[Dragonfly](#Dragonfly)'
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
- en: '[DRBG (deterministic random bit generator)](#DRBG-deterministic-random-bit-generator)'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
- en: '[DSA (Digital Signature Algorithm)](#DSA-Digital-Signature-Algorithm)'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: '[DSS (Digital Signature Standard)](#DSS-Digital-Signature-Standard)'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: '[DVB-CSA](#DVB-CSA)'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: '[E0](#E0)'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
- en: '[ECB (electronic codebook)](#ECB-electronic-codebook)'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
- en: '[ECC](#ECC)'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: '[ECDLP (Elliptic-curve discrete logarithm problem)](#ECDLP-Elliptic-curve-discrete-logarithm-problem)'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: '[ECDSA (Elliptic-curve DSA)](#ECDSA-Elliptic-curve-DSA)'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
- en: '[ECIES (Elliptic-curve IES)](#ECIES-Elliptic-curve-IES)'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
- en: '[Ed25519](#Ed25519)'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
- en: '[EdDSA](#EdDSA)'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: '[EKMS (Electronic Key Management System)](#EKMS-Electronic-Key-Management-System)'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
- en: '[Electronic codebook](#Electronic-codebook)'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: '[ElGamal](#ElGamal)'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
- en: '[Elligator](#Elligator)'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: '[Elliptic curve](#Elliptic-curve)'
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
- en: '[Elliptic-curve cryptography](#Elliptic-curve-cryptography)'
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
- en: '[Encipherment](#Encipherment)'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
- en: '[End-to-end encryption (E2EE)](#End-to-end-encryption-E2EE)'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
- en: '[Enigma](#Enigma)'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
- en: '[Entropy](#Entropy)'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
- en: '[ePrint](#ePrint)'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
- en: '[Erathosthenes’ sieve](#Erathosthenes%E2%80%99-sieve)'
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
- en: '[eSTREAM](#eSTREAM)'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
- en: '[Ethereum](#Ethereum)'
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
- en: '[Eurocrypt](#Eurocrypt)'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
- en: '[Eve](#Eve)'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
- en: '[E-voting](#E-voting)'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
- en: '[Factoring problem](#Factoring-problem)'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
- en: '[Feedback shift register](#Feedback-shift-register)'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
- en: '[Feistel network](#Feistel-network)'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
- en: '[Fialka (Фиалка)](#Fialka-%D0%A4%D0%B8%D0%B0%D0%BB%D0%BA%D0%B0)'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
- en: '[Fiat–Shamir](#Fiat%E2%80%93Shamir)'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
- en: '[FIPS 140-2](#FIPS-140-2)'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
- en: '[FIPS 140-3](#FIPS-140-3)'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
- en: '[Forgery](#Forgery)'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
- en: '[Formal verification](#Formal-verification)'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
- en: '[Format-preserving encryption](#Format-preserving-encryption)'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
- en: '[Forward secrecy](#Forward-secrecy)'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
- en: '[FOX](#FOX)'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
- en: '[FSE (Fast Software Encryption)](#FSE-Fast-Software-Encryption)'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
- en: '[Fully homomorphic encryption](#Fully-homomorphic-encryption)'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
- en: '[Functional encryption](#Functional-encryption)'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
- en: '[Future secrecy](#Future-secrecy)'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
- en: '[Fuzzy extractor](#Fuzzy-extractor)'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
- en: '[Generalized birthday problem](#Generalized-birthday-problem)'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: '[GNFS (General Number Field Sieve)](#GNFS-General-Number-Field-Sieve)'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
- en: '[GOST](#GOST)'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: '[Grain](#Grain)'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: '[Gröbner basis](#Gr%C3%B6bner-basis)'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
- en: '[Group signature](#Group-signature)'
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: '[Grover’s algorithm](#Grover%E2%80%99s-algorithm)'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
- en: '[Hardcore predicate](#Hardcore-predicate)'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
- en: '[Hash function](#Hash-function)'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
- en: '[Hash-based cryptography](#Hash-based-cryptography)'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
- en: '[Heartbleed](#Heartbleed)'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
- en: '[Hedged signature](#Hedged-signature)'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
- en: '[HFE (Hidden Field Equations)](#HFE-Hidden-Field-Equations)'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
- en: '[HMAC (Hash-based MAC)](#HMAC-Hash-based-MAC)'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
- en: '[Homomorphic encryption](#Homomorphic-encryption)'
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
- en: '[HPC (Hasty Pudding Cipher)](#HPC-Hasty-Pudding-Cipher)'
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
- en: '[HSM (hardware security module)](#HSM-hardware-security-module)'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
- en: '[HTTP/3](#HTTP-3)'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
- en: '[Hyperelliptic-curve cryptography](#Hyperelliptic-curve-cryptography)'
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
- en: '[IACR (International Association for Cryptologic Research)](#IACR-International-Association-for-Cryptologic-Research)'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
- en: '[IDEA (International Data Encryption Algorithm)](#IDEA-International-Data-Encryption-Algorithm)'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
- en: '[IDEA NXT](#IDEA-NXT)'
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
- en: '[Identity-based encryption](#Identity-based-encryption)'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
- en: '[IES (Integrated Encryption Scheme)](#IES-Integrated-Encryption-Scheme)'
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
- en: '[Impatient saboteur](#Impatient-saboteur)'
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
- en: '[Impossibility](#Impossibility)'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: '[Impossible differential attack](#Impossible-differential-attack)'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
- en: '[IND-CCA](#IND-CCA)'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
- en: '[IND-CPA](#IND-CPA)'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
- en: '[Indelibility](#Indelibility)'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
- en: '[Indifferentiability](#Indifferentiability)'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
- en: '[Indistinguishability](#Indistinguishability)'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
- en: '[Indistinguishability obfuscation (iO)](#Indistinguishability-obfuscation-iO)'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
- en: '[Information-theoretic security](#Information-theoretic-security)'
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
- en: '[INT-CTXT](#INT-CTXT)'
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
- en: '[Invisible signature](#Invisible-signature)'
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
- en: '[IOTA](#IOTA)'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
- en: '[IPES (Improved Proposed Encryption Standard)](#IPES-Improved-Proposed-Encryption-Standard)'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
- en: '[IPSec](#IPSec)'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
- en: '[ISO standard](#ISO-standard)'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
- en: '[Isogeny-based cryptography](#Isogeny-based-cryptography)'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
- en: '[*Journal of Cryptology* (JoC)](#Journal-of-Cryptology-JoC)'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
- en: '[KASUMI](#KASUMI)'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
- en: '[Keccak](#Keccak)'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: '[KeeLoq](#KeeLoq)'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
- en: '[KEM (key encapsulation mechanism)](#KEM-key-encapsulation-mechanism)'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
- en: '[Kerberos](#Kerberos)'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
- en: '[Kerckhoffs’ principles](#Kerckhoffs%E2%80%99-principles)'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
- en: '[Key derivation function (KDF)](#Key-derivation-function-KDF)'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
- en: '[Key escrow](#Key-escrow)'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: '[Key management](#Key-management)'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
- en: '[Key wrapping](#Key-wrapping)'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: '[Kleptography](#Kleptography)'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
- en: '[Known-key attack](#Known-key-attack)'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: '[Kupyna (Купина)](#Kupyna-%D0%9A%D1%83%D0%BF%D0%B8%D0%BD%D0%B0)'
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
- en: '[Laconic zero-knowledge proof](#Laconic-zero-knowledge-proof)'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
- en: '[Lai–Massey](#Lai%E2%80%93Massey)'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
- en: '[Lamport signature](#Lamport-signature)'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
- en: '[Lattice-based cryptography](#Lattice-based-cryptography)'
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
- en: '[Le Chiffre](#Le-Chiffre)'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
- en: '[Leakage-resilient cryptography](#Leakage-resilient-cryptography)'
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning with errors (LWE)](#Learning-with-errors-LWE)'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
- en: '[Length extension attack](#Length-extension-attack)'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: '[Length-preserving encryption](#Length-preserving-encryption)'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
- en: '[LFSR (linear feedback shift register)](#LFSR-linear-feedback-shift-register)'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
- en: '[Lightweight cryptography](#Lightweight-cryptography)'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
- en: '[Linear cryptanalysis](#Linear-cryptanalysis)'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkability](#Linkability)'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
- en: '[LM hash](#LM-hash)'
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
- en: '[Luby–Rackoff](#Luby%E2%80%93Rackoff)'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
- en: '[Lucifer](#Lucifer)'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
- en: '[MAC (message authentication code)](#MAC-message-authentication-code)'
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
- en: '[MAGENTA](#MAGENTA)'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
- en: '[Malleability](#Malleability)'
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
- en: '[Manger attack](#Manger-attack)'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
- en: '[Man-in-the-middle](#Man-in-the-middle)'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
- en: '[MASH (Modular Arithmetic Secure Hash)](#MASH-Modular-Arithmetic-Secure-Hash)'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
- en: '[McEliece encryption scheme](#McEliece-encryption-scheme)'
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
- en: '[MD4](#MD4)'
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
- en: '[MD5](#MD5)'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
- en: '[MDC (Message Digest Cipher)](#MDC-Message-Digest-Cipher)'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
- en: '[MDC-2 (Modification Detection Code 2)](#MDC-2-Modification-Detection-Code-2)'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
- en: '[Meet-in-the-middle](#Meet-in-the-middle)'
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
- en: '[Merkle puzzle](#Merkle-puzzle)'
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
- en: '[Merkle tree](#Merkle-tree)'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
- en: '[Merkle–Damgård construction](#Merkle%E2%80%93Damg%C3%A5rd-construction)'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
- en: '[Mersenne twister](#Mersenne-twister)'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
- en: '[Message franking](#Message-franking)'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
- en: '[Miller–Rabin](#Miller%E2%80%93Rabin)'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
- en: '[MINERVA](#MINERVA)'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
- en: '[Mining](#Mining)'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
- en: '[Misuse resistance](#Misuse-resistance)'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
- en: '[Mixnet](#Mixnet)'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
- en: '[MQV (Menezes–Qu–Vanstone)](#MQV-Menezes%E2%80%93Qu%E2%80%93Vanstone)'
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
- en: '[Multicollision](#Multicollision)'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
- en: '[Multi-party computation (MPC)](#Multi-party-computation-MPC)'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
- en: '[Multivariate cryptography](#Multivariate-cryptography)'
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
- en: '[NBS (National Bureau of Standards)](#NBS-National-Bureau-of-Standards)'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
- en: '[NESSIE (New European Schemes for Signatures, Integrity, and Encryption)](#NESSIE-New-European-Schemes-for-Signatures,-Integrity,-and-Encryption)'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
- en: '[“New Directions in Cryptography”](#New-Directions-in-Cryptography)'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
- en: '[NFSR (nonlinear feedback shift register)](#NFSR-nonlinear-feedback-shift-register)'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
- en: '[NIST (National Institute of Standards and Technology)](#NIST-National-Institute-of-Standards-and-Technology)'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
- en: '[NIZK (non-interactive zero-knowledge)](#NIZK-non-interactive-zero-knowledge)'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
- en: '[Noekeon](#Noekeon)'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
- en: '[Noise](#Noise)'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
- en: '[Nonce](#Nonce)'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
- en: '[Non-committing encryption](#Non-committing-encryption)'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
- en: '[Non-outsourceability](#Non-outsourceability)'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
- en: '[Non-slanderability](#Non-slanderability)'
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
- en: '[NSA (National Security Agency)](#NSA-National-Security-Agency)'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
- en: '[NT hash](#NT-hash)'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
- en: '[NTRU (*N*th degree Truncated polynomial Ring Units)](#NTRU-Nth-degree-Truncated-polynomial-Ring-Units)'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
- en: '[Null cipher](#Null-cipher)'
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
- en: '[OAEP (Optimal Asymmetric Encryption Padding)](#OAEP-Optimal-Asymmetric-Encryption-Padding)'
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
- en: '[Oblivious key management system (OKMS)](#Oblivious-key-management-system-OKMS)'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
- en: '[Oblivious PRF (OPRF)](#Oblivious-PRF-OPRF)'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
- en: '[Oblivious RAM (ORAM)](#Oblivious-RAM-ORAM)'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
- en: '[Oblivious transfer](#Oblivious-transfer)'
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
- en: '[Obscurity](#Obscurity)'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
- en: '[OCB (offset codebook mode)](#OCB-offset-codebook-mode)'
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
- en: '[One-time pad](#One-time-pad)'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
- en: '[One-way function](#One-way-function)'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
- en: '[Onion-AE](#Onion-AE)'
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
- en: '[OPAQUE](#OPAQUE)'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
- en: '[OpenSSL](#OpenSSL)'
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
- en: '[Oracle](#Oracle)'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
- en: '[OTR (Off-the-Record)](#OTR-Off-the-Record)'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
- en: '[Padding oracle attack](#Padding-oracle-attack)'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
- en: '[Paillier cryptosystem](#Paillier-cryptosystem)'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
- en: '[Pairing](#Pairing)'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
- en: '[Pairing-based cryptography](#Pairing-based-cryptography)'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
- en: '[PAKE (password-authenticated key exchange)](#PAKE-password-authenticated-key-exchange)'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
- en: '[Paradigm](#Paradigm)'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
- en: '[Password hash function](#Password-hash-function)'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
- en: '[PBKDF2 (Password-Based Key Derivation Function 2)](#PBKDF2-Password-Based-Key-Derivation-Function-2)'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
- en: '[PCT (Private Communications Technology)](#PCT-Private-Communications-Technology)'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
- en: '[PEP (Plaintext equivalence proof)](#PEP-Plaintext-equivalence-proof)'
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
- en: '[Perfect forward secrecy](#Perfect-forward-secrecy)'
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
- en: '[Permutation-based cryptography](#Permutation-based-cryptography)'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
- en: '[PES (Proposed Encryption Standard)](#PES-Proposed-Encryption-Standard)'
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
- en: '[PET (Plaintext equivalence test)](#PET-Plaintext-equivalence-test)'
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
- en: '[PFS](#PFS)'
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
- en: '[PGP (Pretty Good Privacy)](#PGP-Pretty-Good-Privacy)'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
- en: '[Photuris](#Photuris)'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
- en: '[Picnic](#Picnic)'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
- en: '[PKC](#PKC)'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
- en: '[PKCS (Public Key Cryptography Standards)](#PKCS-Public-Key-Cryptography-Standards)'
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
- en: '[Poly1305](#Poly1305)'
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
- en: '[Polynomial complexity](#Polynomial-complexity)'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
- en: '[Post-compromise security](#Post-compromise-security)'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
- en: '[Post-quantum cryptography](#Post-quantum-cryptography)'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
- en: '[Post-quantum RSA](#Post-quantum-RSA)'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
- en: '[Prediction resistance](#Prediction-resistance)'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
- en: '[Preimage](#Preimage)'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
- en: '[PRESENT](#PRESENT)'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
- en: '[PRIMES](#PRIMES)'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
- en: '[Privacy-preserving](#Privacy-preserving)'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
- en: '[Private information retrieval (PIR)](#Private-information-retrieval-PIR)'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of burn](#Proof-of-burn)'
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of catalytic space](#Proof-of-catalytic-space)'
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of human work](#Proof-of-human-work)'
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of replication](#Proof-of-replication)'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of reserve](#Proof-of-reserve)'
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of security](#Proof-of-security)'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of sequential work](#Proof-of-sequential-work)'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of space](#Proof-of-space)'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of spacetime](#Proof-of-spacetime)'
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of stake](#Proof-of-stake)'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of storage](#Proof-of-storage)'
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of useful work](#Proof-of-useful-work)'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
- en: '[Proof of work](#Proof-of-work)'
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
- en: '[Provable security](#Provable-security)'
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
- en: '[Provably secure](#Provably-secure)'
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: '[Proxy re-encryption](#Proxy-re-encryption)'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
- en: '[Pseudo-random](#Pseudo-random)'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
- en: '[Pseudorandom function (PRF)](#Pseudorandom-function-PRF)'
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
- en: '[Pseudorandom number generator (PRNG)](#Pseudorandom-number-generator-PRNG)'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
- en: '[Pseudorandom permutation (PRP)](#Pseudorandom-permutation-PRP)'
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
- en: '[Public-key cryptography](#Public-key-cryptography)'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
- en: '[PUF (physically unclonable function)](#PUF-physically-unclonable-function)'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
- en: '[Puncturable encryption](#Puncturable-encryption)'
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
- en: '[Puncturable pseudorandom function (PPRF)](#Puncturable-pseudorandom-function-PPRF)'
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantum computer](#Quantum-computer)'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantum cryptography](#Quantum-cryptography)'
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantum encryption](#Quantum-encryption)'
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantum key distribution](#Quantum-key-distribution)'
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantum signature](#Quantum-signature)'
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: '[QUIC (Quick UDP Internet Connections)](#QUIC-Quick-UDP-Internet-Connections)'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
- en: '[Rabin cryptosystem](#Rabin-cryptosystem)'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
- en: '[Rainbow tables](#Rainbow-tables)'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
- en: '[Random bits](#Random-bits)'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
- en: '[Random oracle](#Random-oracle)'
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
- en: '[Randomness](#Randomness)'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
- en: '[Range proof](#Range-proof)'
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
- en: '[RC4](#RC4)'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
- en: '[RC5](#RC5)'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
- en: '[RC6](#RC6)'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
- en: '[Real world](#Real-world)'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
- en: '[Real World Crypto (RWC)](#Real-World-Crypto-RWC)'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
- en: '[Rectangle attack](#Rectangle-attack)'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
- en: '[Related-key attack](#Related-key-attack)'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
- en: '[Research papers](#Research-papers)'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
- en: '[Revocation](#Revocation)'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
- en: '[Rijndael](#Rijndael)'
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
- en: '[Ring signature](#Ring-signature)'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
- en: '[RIPEMD-160](#RIPEMD-160)'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
- en: '[Rivest–Shamir–Adleman](#Rivest%E2%80%93Shamir%E2%80%93Adleman)'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
- en: '[ROBOT (Return Of Bleichenbacher’s Oracle Threat)](#ROBOT-Return-Of-Bleichenbacher%E2%80%99s-Oracle-Threat)'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
- en: '[ROS](#ROS)'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
- en: '[RSA](#RSA)'
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
- en: '[Rubber-hose cryptanalysis](#Rubber-hose-cryptanalysis)'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
- en: '[Rumba20](#Rumba20)'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
- en: '[SAEP (Simplified OAEP)](#SAEP-Simplified-OAEP)'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
- en: '[Salsa20](#Salsa20)'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
- en: '[Sandwich attack](#Sandwich-attack)'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
- en: '[S-box](#S-box)'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar](#Scalar)'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
- en: '[sci.crypt](#sci.crypt)'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
- en: '[Scrambler](#Scrambler)'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
- en: '[scrypt](#scrypt)'
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
- en: '[Searchable encryption](#Searchable-encryption)'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
- en: '[secp256k1](#secp256k1)'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
- en: '[Secret sharing](#Secret-sharing)'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
- en: '[Security](#Security)'
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
- en: '[Security proof](#Security-proof)'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
- en: '[Semantic security](#Semantic-security)'
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
- en: '[*Serious Cryptography*](#Serious-Cryptography)'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
- en: '[Serpent](#Serpent)'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
- en: '[SHA-0](#SHA-0)'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
- en: '[SHA-1](#SHA-1)'
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
- en: '[SHA-2](#SHA-2)'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
- en: '[SHA-3](#SHA-3)'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
- en: '[SHA-3 competition](#SHA-3-competition)'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
- en: '[SHACAL](#SHACAL)'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
- en: '[Shamir’s secret database](#Shamir%E2%80%99s-secret-database)'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
- en: '[Shor’s algorithm](#Shor%E2%80%99s-algorithm)'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
- en: '[SHS (Secure Hash Standard)](#SHS-Secure-Hash-Standard)'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
- en: '[Side channel](#Side-channel)'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
- en: '[Side-channel attack](#Side-channel-attack)'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
- en: '[Sigaba](#Sigaba)'
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
- en: '[Signal protocol](#Signal-protocol)'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
- en: '[Signature](#Signature)'
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
- en: '[Signcryption](#Signcryption)'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
- en: '[SIKE (Supersingular Isogeny Key Encapsulation)](#SIKE-Supersingular-Isogeny-Key-Encapsulation)'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
- en: '[SIMECK](#SIMECK)'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
- en: '[SIMON](#SIMON)'
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
- en: '[SipHash](#SipHash)'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
- en: '[SIV-AES](#SIV-AES)'
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
- en: '[Skipjack](#Skipjack)'
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
- en: '[Slide attack](#Slide-attack)'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
- en: '[SM](#SM)'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
- en: '[Smart contract](#Smart-contract)'
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
- en: '[Snake-oil](#Snake-oil)'
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
- en: '[SNARK (succinct non-interactive argument of knowledge)](#SNARK-succinct-non-interactive-argument-of-knowledge)'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
- en: '[SNIP (secret-shared non-interactive proof)](#SNIP-secret-shared-non-interactive-proof)'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
- en: '[SNOW 3G](#SNOW-3G)'
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
- en: '[Solitaire](#Solitaire)'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
- en: '[SPECK](#SPECK)'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
- en: '[SPEKE (Simple Password Exponential Key Exchange)](#SPEKE-Simple-Password-Exponential-Key-Exchange)'
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
- en: '[SPHINCS](#SPHINCS)'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
- en: '[Sponge function](#Sponge-function)'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
- en: '[SRP (Secure Remote Password)](#SRP-Secure-Remote-Password)'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
- en: '[SSH (Secure Shell)](#SSH-Secure-Shell)'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
- en: '[SSL (Secure Socket Layer)](#SSL-Secure-Socket-Layer)'
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
- en: '[STARK (scalable transparent arguments of knowledge)](#STARK-scalable-transparent-arguments-of-knowledge)'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
- en: '[Steganography](#Steganography)'
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
- en: '[Stream cipher](#Stream-cipher)'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
- en: '[Substitution-permutation network (SPN)](#Substitution-permutation-network-SPN)'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
- en: '[Suck](#Suck)'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
- en: '[Sugar beet auctions](#Sugar-beet-auctions)'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
- en: '[Suite A](#Suite-A)'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
- en: '[SUPERCOP](#SUPERCOP)'
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
- en: '[Superpolynomial complexity](#Superpolynomial-complexity)'
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
- en: '[SVP (shortest vector problem)](#SVP-shortest-vector-problem)'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
- en: '[Symmetric-key cryptography](#Symmetric-key-cryptography)'
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
- en: '[TCC](#TCC)'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
- en: '[Test vectors](#Test-vectors)'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
- en: '[Threefish](#Threefish)'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
- en: '[Threshold encryption](#Threshold-encryption)'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
- en: '[Threshold secret-sharing](#Threshold-secret-sharing)'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
- en: '[Threshold signature](#Threshold-signature)'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
- en: '[Time AI](#Time-AI%E2%84%A2)'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
- en: '[Time-lock encryption](#Time-lock-encryption)'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
- en: '[Time-lock puzzle](#Time-lock-puzzle)'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: '[Timing attack](#Timing-attack)'
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
- en: '[TLS (Transport Layer Security)](#TLS-Transport-Layer-Security)'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: '[Tor](#Tor)'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
- en: '[Traitor tracing](#Traitor-tracing)'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
- en: '[Transfinite cryptography](#Transfinite-cryptography)'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
- en: '[Trapdoor](#Trapdoor)'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
- en: '[Triple DES](#Triple-DES)'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
- en: '[Trivium](#Trivium)'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
- en: '[True random number generator (TRNG)](#True-random-number-generator-TRNG)'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
- en: '[Trusted third party](#Trusted-third-party)'
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: '[Tweakable block cipher](#Tweakable-block-cipher)'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
- en: '[Twitter](#Twitter)'
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: '[Twofish](#Twofish)'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
- en: '[Undeniable signature](#Undeniable-signature)'
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
- en: '[Universal composability](#Universal-composability)'
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
- en: '[Universal hash function](#Universal-hash-function)'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
- en: '[Updatable encryption](#Updatable-encryption)'
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
- en: '[Verifiable delay function (VDF)](#Verifiable-delay-function-VDF)'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
- en: '[Verifiable random function (VRF)](#Verifiable-random-function-VRF)'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
- en: '[Verifiable unpredictable function (VUF)](#Verifiable-unpredictable-function-VUF)'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
- en: '[Vigenère cipher](#Vigenere-cipher)'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
- en: '[VSH (Very Smooth Hash)](#VSH-Very-Smooth-Hash)'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
- en: '[Wallet](#Wallet)'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
- en: '[Watermarking](#Watermarking)'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
- en: '[White-box cryptography](#White-box-cryptography)'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
- en: '[Winternitz signature](#Winternitz-signature)'
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
- en: '[WireGuard](#WireGuard)'
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
- en: '[X25519](#X25519)'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
- en: '[X3DH](#X3DH)'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
- en: '[XMSS (eXtended Merkle Signature Scheme)](#XMSS-eXtended-Merkle-Signature-Scheme)'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
- en: '[XOF (extendable output function)](#XOF-extendable-output-function)'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
- en: '[XOR](#XOR)'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
- en: '[XOR encryption](#XOR-encryption)'
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
- en: '[Zerocash](#Zerocash)'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
- en: '[ZKP (zero-knowledge proof)](#ZKP-zero-knowledge-proof)'
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
- en: '[ZRTP](#ZRTP)****'
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
