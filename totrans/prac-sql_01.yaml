- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Your Coding Environment
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s begin by installing the resources you’ll need to complete the exercises
    in the book. In this chapter, you’ll install a text editor, download the example
    code and data, and then install the PostgreSQL database system and its companion
    graphical user interface, pgAdmin. I’ll also tell you how to get help if you need
    it. When you’re finished, your computer will have a robust environment for you
    to learn how to analyze data with SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid the temptation to skip ahead to the next chapter. My high school teacher
    (clearly a fan of alliteration) used to tell us that “proper planning prevents
    poor performance.” If you follow all the steps in this chapter, you’ll avoid headaches
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Our first task is to set up a text editor suitable for working with data.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Text Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source data you’ll add to a SQL database is typically stored in multiple
    *text files*, often in a format called *comma-separated values (CSV)*. You’ll
    learn more about the CSV format in Chapter 5, in the section “Working with Delimited
    Text Files,” but for now let’s make sure you have a text editor that will let
    you open those files without inadvertently harming the data.
  prefs: []
  type: TYPE_NORMAL
- en: Common business applications—word processors and spreadsheet programs—tend to
    introduce styles or hidden characters into files without asking, and that makes
    using them for data work problematic, as data software expects data in precise
    formats. For example, if you open a CSV file with Microsoft Excel, the program
    will automatically alter some data to make it more human-readable; it will assume,
    for example, that an item code of `3-09` is a date and format it as `9-Mar`. Text
    editors deal exclusively with plain text with no embellishments such as formatting,
    and for that reason programmers use them to edit files that hold source code,
    data, and software configurations—all cases where you want your text to be treated
    as text, and nothing more.
  prefs: []
  type: TYPE_NORMAL
- en: Any text editor should work for the book’s purposes, so if you have a favorite,
    feel free to use it. Here are some I have used and recommend. Except where noted,
    they are free and available for macOS, Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code by Microsoft: [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Atom by GitHub: [https://atom.io/](https://atom.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sublime Text by Sublime HQ (free to evaluate but requires purchase for continued
    use): [https://www.sublimetext.com/](https://www.sublimetext.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notepad++ by author Don Ho (Windows only): [https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)
    (note that this is a different application than *Notepad.exe*, which comes with
    Windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More advanced users who prefer to work in the command line may want to use
    one of these two text editors, which are installed by default in macOS and Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vim` by author Bram Moolenaar and the open source community: [https://www.vim.org/](https://www.vim.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GNU `nano` by author Chris Allegretta and the open source community: [https://www.nano-editor.org/](https://www.nano-editor.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don’t have a text editor, download and install one and get familiar with
    the basics of opening folders and working with files.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s get the book’s example code and data.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Code and Data from GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the code and data you’ll need for working through the book’s exercises
    are available for download. To get it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the book’s page on the No Starch Press website at [https://nostarch.com/practical-sql-2nd-edition/](https://nostarch.com/practical-sql-2nd-edition/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the page, click **Download the code from GitHub** to visit the repository
    on [https://github.com/](https://github.com/) that holds the material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Practical SQL 2nd Edition page at GitHub, you should see a **Code** button.
    Click it, and then select **Download ZIP** to save the ZIP file to your computer.
    Place it in a location where you can easily find it, such as your desktop. (If
    you’re a GitHub user, you can also clone or fork the repository.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the file. You should then see a folder named *practical-sql-2-master*
    that contains the various files and subfolders for the book. Again, place this
    folder where you can easily find it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the *practical-sql-2-master* folder, for each chapter you’ll find a subfolder
    named *Chapter_XX* (*XX* is the chapter number). Inside subfolders, each chapter
    that includes code examples will also have a file named *Chapter_XX* that ends
    with a *.sql* extension. This is a SQL code file that you can open with your text
    editor or with the PostgreSQL administrative tool you’ll install later in this
    chapter. Note that in the book several code examples are truncated to save space,
    but you’ll need the full listing from the *.sql* file to complete the exercise.
    You’ll know an example is truncated when you see `--snip--` in the listing.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter folders also contain the public data you’ll use in the exercises,
    stored in CSV and other text-based files. As noted, it’s fine to view CSV files
    with a true text editor, but don’t open these files with Excel or a word processor.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the prerequisites complete, let’s load the database software.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PostgreSQL and pgAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you’ll install both the PostgreSQL database system and a companion
    graphical administrative tool, pgAdmin. Think of pgAdmin as a helpful visual workspace
    for managing your PostgreSQL database. Its interface lets you see your database
    objects, manage settings, import and export data, and write queries, which is
    the code that retrieves data from your database.
  prefs: []
  type: TYPE_NORMAL
- en: One benefit of using PostgreSQL is that the open source community has provided
    excellent guidelines that make it easy to get PostgreSQL up and running. The following
    sections outline installation for Windows, macOS, and Linux as of this writing,
    but the steps might change as new versions of the software or operating systems
    are released. Check the documentation noted in each section as well as the GitHub
    repository with the book’s resources; I’ll maintain files there with updates and
    answers to frequently asked questions.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Windows, I recommend using the installer provided by the company EDB (formerly
    EnterpriseDB), which offers support and services for PostgreSQL users. When you
    download the PostgreSQL package bundle from EDB, you also get pgAdmin and Stack
    Builder, which includes a few other tools you’ll use in this book and throughout
    your SQL career.
  prefs: []
  type: TYPE_NORMAL
- en: To get the software, visit [https://www.postgresql.org/download/windows/](https://www.postgresql.org/download/windows/)
    and click **Download the installer** in the EDB section. This should lead to a
    downloads page on the EDB site. Select the latest available 64-bit Windows version
    of PostgreSQL unless you’re using an older PC with 32-bit Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you download the installer, follow these steps to install PostgreSQL,
    pgAdmin, and additional components:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the installer and select **Run as administrator**. Answer **Yes**
    to the question about allowing the program to make changes to your computer. The
    program will perform a setup task and then present an initial welcome screen.
    Click through it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose your installation directory, accepting the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Select Components screen, select the boxes to install PostgreSQL Server,
    the pgAdmin tool, Stack Builder, and the command line tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the location to store data. You can choose the default, which is in a
    *data* subdirectory in the PostgreSQL directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a password. PostgreSQL is robust with security and permissions. This
    password is for the default initial database superuser account, which is called
    `postgres`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the default port number where the server will listen. Unless you have
    another database or application using it, use the default, which should be `5432`.
    You can substitute `5433` or another number if you already have an application
    using the default port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your locale. Using the default is fine. Then click through the summary
    screen to begin the installation, which will take several minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installation is done, you’ll be asked whether you want to launch EnterpriseDB’s
    Stack Builder to obtain additional packages. Make sure the box is checked and
    click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Stack Builder launches, choose the PostgreSQL installation on the drop-down
    menu and click **Next**. A list of additional applications should download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the Spatial Extensions menu and select the PostGIS Bundle for the version
    of PostgreSQL you installed. You may see more than one listed; if so, choose the
    newest version. Also, expand the **Add-ons, tools and utilities** menu and select
    **EDB Language Pack**, which installs support for programming languages including
    Python. Click through several times; you’ll need to wait while the installer downloads
    the additional components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When installation files have been downloaded, click **Next** to install the
    language and PostGIS components. For PostGIS, you’ll need to agree to the license
    terms; click through until you’re asked to Choose Components. Make sure PostGIS
    and Create spatial database are selected. Click **Next**, accept the default install
    location, and click **Next** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your database password when prompted and continue through the prompts
    to install PostGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** when asked to register the `PROJ_LIB` and `GDAL_DATA` environment
    variables. Also, answer **Yes** to the questions about setting `POSTGIS_ENABLED_DRIVERS`
    and enabling the `POSTGIS_ENABLE_OUTDB_RASTERS` environment variable. Finally,
    click through the final Finish steps to complete the installation and exit the
    installers. Depending on the version, you may be prompted to restart your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When finished, you should have two new folders in your Windows Start menu:
    one for PostgreSQL and another for PostGIS.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to get started right away, you can skip ahead to the section “Working
    with pgAdmin.” Otherwise, follow the steps in the next section to set environment
    variables for optional Python language support. We cover using Python with PostgreSQL
    in Chapter 17; you can wait until then to set up Python if you’d like to move
    ahead now.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Python Language Support
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In Chapter 17, you’ll learn how to use the Python programming language with
    PostgreSQL. In the previous section, you installed the EDB Language Pack, which
    provides Python support. Follow these steps to add the location of the Language
    Pack files to your Windows system’s environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Windows Control Panel by clicking the **Search** icon on the Windows
    taskbar, entering **Control Panel**, and then clicking the **Control Panel** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Control Panel app, enter **Environment** in the search box. In the list
    of search results displayed, click **Edit the System Environment Variables**.
    A System Properties dialog will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the System Properties dialog, on the Advanced tab, click **Environment Variables**.
    The dialog that opens has two sections: User variables and System variables. In
    the System variables section, if you don’t see a `PATH` variable, continue to
    step a to create a new one. If you do see an existing `PATH` variable, continue
    to step b to modify it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don’t see `PATH` in the System variables section, click **New** to open
    a New System Variable dialog, shown in [Figure 1-1](#figure1-1).![f01001](Images/f01001.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1-1: Creating a new `PATH` environment variable in Windows 10'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Variable name box, enter **PATH**. In the Variable value box, enter **C:\edb\languagepack\v2\Python-3.9**.
    (Instead of typing, you can click **Browse Directory** and navigate to the directory
    in the Browse For Folder dialog.) When you’ve either entered the path manually
    or browsed to it, click **OK** on the dialog to close it.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If you do see an existing `PATH` variable in the System variables section, highlight
    it and click **Edit**. In the list of variables that displays, click **New** and
    enter **C:\edb\languagepack\v2\Python-3.9**. (Instead of typing, you can click
    Browse Directory and navigate to the directory in the Browse For Folder dialog.)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve added the Language Pack path, highlight it in the list of variables
    and click **Move Up** until the path is at the top of the variables list. That
    way, PostgreSQL will find the correct Python version if you have additional Python
    installations.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The result should look like the highlighted line in [Figure 1-2](#figure1-2).
    Click **OK** to close the dialog.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f01002](Images/f01002.png)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-2: Editing existing `PATH` environment variables in Windows 10'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, in the System variables section, click **New**. In the New System Variable
    dialog, enter **PYTHONHOME** in the Variable name box. In the Variable value box,
    enter **C:\edb\languagepack\v2\Python-3.9**. When you’re finished, click **OK**
    in all dialogs to close them. Note that these Python path settings will take effect
    the next time you restart your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you experience any hiccups during the PostgreSQL install, check the resources
    for the book, where I will note changes that occur as the software is developed
    and can also answer questions. If you’re unable to install PostGIS via Stack Builder,
    try downloading a separate installer from the PostGIS site at [https://postgis.net/windows_downloads/](https://postgis.net/windows_downloads/)
    and consult the guides at [https://postgis.net/documentation/](https://postgis.net/documentation/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can move ahead to the section “Working with pgAdmin.”
  prefs: []
  type: TYPE_NORMAL
- en: macOS Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For macOS users, I recommend obtaining Postgres.app, an open source macOS application
    that includes PostgreSQL as well as the PostGIS extension and a few other goodies.
    Separately, you’ll need to install the pgAdmin GUI and the Python language for
    use in functions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postgres.app and pgAdmin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://postgresapp.com/](https://postgresapp.com/) and download the
    latest release of the app. This will be a Disk Image file that ends in *.dmg*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the *.dmg* file to open it, and then drag and drop the app icon
    into your *Applications* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your *Applications* folder, double-click the app icon to launch Postgres.app.
    (If you see a dialog that says the app cannot be opened because the developer
    cannot be verified, click **Cancel**. Then right-click the app icon and choose
    **Open**.) When Postgres.app opens, click **Initialize** to create and start a
    PostgreSQL database server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A small elephant icon will appear in your menu bar to indicate that you now
    have a database running. To set up the included PostgreSQL command line tools
    so you’re able to use them in future, open your Terminal application and run the
    following single line of code at the prompt (you can copy the code as a single
    line from the Postgres.app site at [https://postgresapp.com/documentation/install.html](https://postgresapp.com/documentation/install.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You may be prompted for the password you use to log in to your Mac. Enter that.
    The commands should execute without providing any output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, because Postgres.app doesn’t include pgAdmin, follow these steps to install
    pgAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the pgAdmin site’s page for macOS downloads at [https://www.pgadmin.org/download/pgadmin-4-macos/](https://www.pgadmin.org/download/pgadmin-4-macos/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the latest version and download the installer (look for a Disk Image
    file that ends in *.dmg*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the *.dmg* file, click through the prompt to accept the terms,
    and then drag pgAdmin’s elephant app icon into your *Applications* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation on macOS is relatively simple, but if you encounter any issues,
    review the documentation for Postgres.app at [https://postgresapp.com/documentation/](https://postgresapp.com/documentation/)
    and for pgAdmin at [https://www.pgadmin.org/docs/](https://www.pgadmin.org/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In Chapter 17, you’ll learn how to use the Python programming language with
    PostgreSQL. To use Python with Postgres.app, you must install a specific version
    of the language even though macOS comes with Python pre-installed (and you might
    have set up an additional Python environment). To enable Postgres.app’s optional
    Python language support, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the official Python site at [https://www.python.org/](https://www.python.org/)
    and click the **Downloads** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the list of releases, find and download the latest version of Python 3.9\.
    Choose the appropriate installer for your Mac’s processor—an Intel chip on older
    Macs or Apple Silicon for newer models. The download is an Apple software package
    file that ends in *.pkg*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the package file to install Python, clicking through license agreements.
    Close the installer when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python requirements for Postgres.app may change over time. Check its Python
    documentation at [https://postgresapp.com/documentation/plpython.html](https://postgresapp.com/documentation/plpython.html)
    as well as the resources for this book for updates.
  prefs: []
  type: TYPE_NORMAL
- en: You’re now ready to move ahead to the section “Working with pgAdmin.”
  prefs: []
  type: TYPE_NORMAL
- en: Linux Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’re a Linux user, installing PostgreSQL becomes simultaneously easy and
    difficult, which in my experience is very much the way it is in the Linux universe.
    Most times you can accomplish an installation with a few commands, but finding
    those commands requires some Internet sleuth work. Thankfully, most popular Linux
    distributions—including Ubuntu, Debian, and CentOS—bundle PostgreSQL in their
    standard package. However, some distributions stay on top of updates more than
    others, so there’s a chance the PostgreSQL you have downloaded may not be the
    latest. The best path is to consult your distribution’s documentation for the
    best way to install PostgreSQL if it’s not already included or if you want to
    upgrade to a more recent version.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the PostgreSQL project maintains complete up-to-date package
    repositories for Red Hat variants, Debian, and Ubuntu. Visit [https://yum.postgresql.org/](https://yum.postgresql.org/)
    and [https://wiki.postgresql.org/wiki/Apt](https://wiki.postgresql.org/wiki/Apt)
    for details. The packages you’ll want to install include the client and server
    for PostgreSQL, pgAdmin (if available), PostGIS, and PL/Python. The exact names
    of these packages will vary according to your Linux distribution. You might also
    need to manually start the PostgreSQL database server.
  prefs: []
  type: TYPE_NORMAL
- en: The pgAdmin app is rarely part of Linux distributions. To install it, refer
    to the pgAdmin site at [https://www.pgadmin.org/download/](https://www.pgadmin.org/download/)
    for the latest instructions and to see whether your platform is supported. If
    you’re feeling adventurous, you can find instructions on building the app from
    source code at [https://www.pgadmin.org/download/pgadmin-4-source-code/](https://www.pgadmin.org/download/pgadmin-4-source-code/).
    Once finished, you can move ahead to the section “Working with pgAdmin.”
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu Installation Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To give you a sense of what a PostgreSQL Linux install looks like, here are
    the steps I took to load PostgreSQL, pgAdmin, PostGIS, and PL/Python on Ubuntu
    21.04, codenamed Hirsute Hippo. It’s a combination of the directions found at
    [https://wiki.postgresql.org/wiki/Apt](https://wiki.postgresql.org/wiki/Apt%20)
    plus the “Basic Server Setup” section at [https://help.ubuntu.com/community/PostgreSQL/](https://help.ubuntu.com/community/PostgreSQL/).
    You can follow along if you’re on Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal by pressing ctrl-alt-T. Then, at the prompt, enter the following
    lines to import a key for the PostgreSQL APT repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run this single line to create the file */etc/apt/sources.list.d/pgdg.list*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once that’s done, update the package lists and install PostgreSQL and pgAdmin
    with the next two lines. Here, I installed PostgreSQL 13; you can choose a newer
    version if available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now have PostgreSQL running. At the Terminal, enter the next line,
    which allows you to log in to the server and connect as the default `postgres`
    user to the `postgres` database using the `psql` interactive terminal, which we’ll
    cover in depth in Chapter 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When `psql` launches, it displays version information as well as a `postgres=#`
    prompt. Enter the following at the prompt to set a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'I also like to create a user account with a name that matches my Ubuntu username.
    To do this, at the `postgres=#` prompt, enter the following line, substituting
    your Ubuntu username where you see `anthony`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Exit `psql` by entering `\q` at the prompt. You should be back at your Terminal
    prompt once again.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install pgAdmin, first import a key for the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run this single line to create the file */etc/apt/sources.list.d/pgadmin4.list*
    and update package lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can install pgAdmin 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to install the PostGIS and PL/Python extensions, run the following
    lines in your terminal (substituting the version numbers of your PostgreSQL version):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Check the official Ubuntu and PostgreSQL documentation for updates. If you experience
    any errors, typically with Linux an online search will yield helpful tips.
  prefs: []
  type: TYPE_NORMAL
- en: Working with pgAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final piece of your setup puzzle is to get familiar with pgAdmin, an administration
    and management tool for PostgreSQL. The pgAdmin software is free, but don’t underestimate
    its performance; it’s a full-featured tool as powerful as paid tools such as Microsoft’s
    SQL Server Management Studio. With pgAdmin, you get a graphical interface where
    you can configure multiple aspects of your PostgreSQL server and databases, and—most
    appropriately for this book—use a SQL query tool for writing, running, and saving
    queries.
  prefs: []
  type: TYPE_NORMAL
- en: Launching pgAdmin and Setting a Master Password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Assuming you followed the installation steps for your operating system earlier
    in the chapter, here’s how to launch pgAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**: Go to the Start menu, find the PostgreSQL folder for the version
    you installed, click it, and then select **pgAdmin4**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS**: Click the **pgAdmin** icon in your *Applications* folder, making
    sure you’ve also launched Postgres.app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**: Startup may differ depending on your Linux distribution. Typically,
    at your Terminal prompt, enter `pgadmin4` and press enter. In Ubuntu, pgAdmin
    appears as an app in the Activities Overview.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should see the pgAdmin splash screen, followed by the application opening,
    as in [Figure 1-3](#figure1-3). If it’s your first time launching pgAdmin, you’ll
    also receive a prompt to set a master password. This password is not related to
    the one you set up during the PostgreSQL install. Set a master password and click
    **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![f01003](Images/f01003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-3: The pgAdmin app running on Windows 10'
  prefs: []
  type: TYPE_NORMAL
- en: The pgAdmin layout includes a left vertical pane that displays an object browser
    where you can view available servers, databases, users, and other objects. Across
    the top of the screen is a collection of menu items, and below those are tabs
    to display various aspects of database objects and performance. Next, let’s connect
    to your database.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the Default postgres Database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PostgreSQL is a *database management system*, which means it’s software that
    allows you to define, manage, and query databases. When you installed PostgreSQL,
    it created a *database server*—an instance of the application running on your
    computer—that includes a default database called `postgres`. A database is a collection
    of objects that includes tables, functions, and much more, and this is where your
    actual data will lie. We use the SQL language (as well as pgAdmin) to manage objects
    and data stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, you’ll create your own database on your PostgreSQL server
    to organize your work. For now, let’s connect to the default `postgres` database
    to explore pgAdmin. Use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the object browser, click the downward-pointing arrow to the left of the
    Servers node to show the default server. Depending on your operating system, the
    default server name could be *localhost* or *PostgreSQL x*, where *x* is the Postgres
    version number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the server name. If prompted, enter the database password you chose
    during installation (you can choose to save the password so you don’t need type
    it in the future). A brief message appears while pgAdmin is establishing a connection.
    When you’re connected, several new object items should display under the server
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand Databases and then expand the default database `postgres`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `postgres`, expand the Schemas object, and then expand public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your object browser pane should look similar to [Figure 1-4](#figure1-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f01004](Images/f01004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-4: The pgAdmin object browser'
  prefs: []
  type: TYPE_NORMAL
- en: This collection of objects defines every feature of your database server. That
    includes tables, where we store data. To view a table’s structure or perform actions
    on it with pgAdmin, you can access the table here. In Chapter 2, you’ll use this
    browser to create a new database and leave the default `postgres` as is.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Query Tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The pgAdmin app includes a *Query Tool*, which is where you write and execute
    code. To open the Query Tool, in pgAdmin’s object browser, first click once on
    any database to highlight it. For example, click the `postgres` database and then
    select **Tools**▶**Query Tool**. You’ll see three panes: a Query Editor, a Scratch
    Pad for holding code snippets while you work, and a Data Output pane that displays
    query results. You can open multiple tabs to connect to and write queries for
    different databases or just to organize your code the way you would like. To open
    another tab, click a database in the object browser and open the Query Tool again
    via the menu.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s run a simple query and see its output, using the statement in [Listing
    1-1](#listing1-1) that returns the version of PostgreSQL you’ve installed. This
    code, along with all the examples in this book, is available for download via
    the resources at [https://nostarch.com/practical-sql-2nd-edition/](https://nostarch.com/practical-sql-2nd-edition/)
    by clicking the link **Download the code from GitHub**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-1: Checking your PostgreSQL version'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the code into the Query Editor or, if you downloaded the book’s code from
    GitHub, click the **Open File** icon on the pgAdmin toolbar and navigate to the
    folder where you saved the code to open the file *Chapter_01.sql* in the *Chapter_01*
    folder. To execute the statement, highlight the line beginning with `SELECT` and
    click the **Execute/Refresh** icon in the toolbar (it’s shaped like a play button).
    PostgreSQL should return the server’s version as a result in the pgAdmin Data
    Output pane, as in [Figure 1-5](#figure1-5) (you may need to expand the column
    in the Data Output pane by clicking on the right edge and dragging to your right
    to see the full results).
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn much more about queries later in the book, but for now all you
    need to know is that this query uses a PostgreSQL-specific *function* called `version()`
    to retrieve the version information for the server. In my case, the output shows
    that I’m running PostgreSQL 13.3, and it provides additional specifics on the
    build of the software.
  prefs: []
  type: TYPE_NORMAL
- en: '![f01005](Images/f01005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-5: The pgAdmin Query Tool displaying query results'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing pgAdmin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Selecting **File**▶**Preferences** from the pgAdmin menu opens a dialog where
    you can customize pgAdmin’s appearance and options. Here are three you may want
    to visit now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Miscellaneous**▶**Themes** lets you choose between the standard light pgAdmin
    theme and a dark theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query Tool**▶**Results grid** lets you set a maximum column width in query
    results. In that dialog, choose **Column data** and enter a value of **300** in
    **Maximum column width**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Browser** section lets you configure the pgAdmin layout and set keyboard
    shortcuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get help on pgAdmin options, choose **Help**▶**Online Help** from the menu.
    Feel free to explore the preferences further before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to pgAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although pgAdmin is great for beginners, you’re not required to use it for these
    exercises. If you prefer another administrative tool that works with PostgreSQL,
    feel free to use it. If you want to use your system’s command line for all the
    exercises in this book, Chapter 18 provides instructions on using the PostgreSQL
    interactive terminal `psql` from the command line. (The appendix lists PostgreSQL
    resources you can explore to find additional administrative tools.)
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve set up your environment with code, a text editor, PostgreSQL,
    and pgAdmin, you’re ready to start learning SQL and use it to discover valuable
    insights into your data!
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 2, you’ll learn how to create a database and a table, and then you’ll
    load some data to explore its contents. Let’s get started!
  prefs: []
  type: TYPE_NORMAL
