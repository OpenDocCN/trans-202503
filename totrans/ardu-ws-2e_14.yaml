- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Using GPS with Your Arduino
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GPS 与 Arduino 配合
- en: In this chapter, you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Learn how to connect a GPS shield
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何连接 GPS 扩展板
- en: Create a simple GPS coordinates display
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的 GPS 坐标显示
- en: Show the actual position of GPS coordinates on a map
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地图上显示 GPS 坐标的实际位置
- en: Build an accurate clock
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个精确的时钟
- en: Record the position of a moving object over time
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录移动物体随时间变化的位置
- en: You’ll learn how to use an inexpensive GPS shield to determine location, create
    an accurate clock, and make a logging device that records the position of your
    gadget over time onto a microSD card, which can then be plotted over a map to
    display movement history.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何使用一种便宜的 GPS 扩展板来确定位置，创建一个精确的时钟，并制作一个记录设备，将您设备的位置随时间记录到 microSD 卡上，之后可以将其绘制在地图上，显示移动历史。
- en: What Is GPS?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 GPS？
- en: The *Global Positioning System (GPS)* is a satellite-based navigation system
    that sends data from satellites orbiting Earth to GPS receivers on the ground
    that can use that data to determine the current position and time anywhere on
    Earth. You are probably already familiar with GPS navigation devices used in cars
    or on your smartphone.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*全球定位系统（GPS）* 是一个基于卫星的导航系统，它通过绕地球轨道运行的卫星向地面上的 GPS 接收器发送数据，接收器可以利用这些数据确定地球上任何位置的当前坐标和时间。您可能已经熟悉用于汽车或智能手机的
    GPS 导航设备。'
- en: Although we can’t create detailed map navigation systems with our Arduinos,
    you can use a GPS module to determine your position, time, and approximate speed
    (if you’re in motion). When shopping around for a GPS module, you will generally
    find two types available. The first is an independent, inexpensive GPS receiver
    on a module with an external aerial, as shown in [Figure 15-1](#figure15-1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们无法使用 Arduino 创建详细的地图导航系统，但您可以使用 GPS 模块来确定您的位置、时间以及近似速度（如果您正在移动）。在购买 GPS
    模块时，通常有两种类型可供选择。第一种是独立的、便宜的 GPS 接收器模块，带有外部天线，如[图 15-1](#figure15-1)所示。
- en: '![f15001](image_fi/500587c15/f15001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f15001](image_fi/500587c15/f15001.png)'
- en: 'Figure 15-1: A GPS receiver module'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-1：GPS 接收模块
- en: The second type you will come across is a GPS shield for Arduino, as shown in
    [Figure 15-2](#figure15-2). These shields are convenient, since all the wiring
    is done for you; they also include a microSD card socket that is ideal for logging
    data, as demonstrated later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您将遇到的第二种类型是适用于 Arduino 的 GPS 扩展板，如[图 15-2](#figure15-2)所示。这些扩展板非常方便，因为所有接线已经为您做好；它们还包括一个
    microSD 卡插槽，非常适合记录数据，如本章稍后演示的那样。
- en: Ensure your GPS shield allows connection of the GPS receiver’s TX and RX lines
    to Arduino digital pins D2 and D3, or has jumpers to allow manually setting these
    (like the shield in [Figure 15-2](#figure15-2)). Check with the supplier for more
    details. You can use either type of device in this chapter. However, I highly
    recommend the shield, especially as you can effortlessly connect an LCD shield
    on top of the GPS shield as a display.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 GPS 扩展板支持将 GPS 接收器的 TX 和 RX 线路连接到 Arduino 数字引脚 D2 和 D3，或者具有跳线可以手动设置这些连接（如[图
    15-2](#figure15-2)所示的扩展板）。更多详情请咨询供应商。您可以在本章中使用这两种设备。不过，我强烈推荐使用扩展板，尤其是您可以轻松地将 LCD
    扩展板连接到 GPS 扩展板上，作为显示器使用。
- en: '![f15002](image_fi/500587c15/f15002.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![f15002](image_fi/500587c15/f15002.png)'
- en: 'Figure 15-2: A GPS shield for Arduino'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-2：适用于 Arduino 的 GPS 扩展板
- en: Testing the GPS Shield
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 GPS 扩展板
- en: After you buy a GPS kit, it’s a good idea to make sure that it’s working and
    that you can receive GPS signals. GPS receivers require a line of sight to the
    sky, but their signals can pass through windows. So, while it’s usually best to
    perform this test outdoors, your GPS receiver will probably work just fine through
    an unobstructed window or skylight. To test reception, you’ll set up the shield
    or module and run a basic sketch that displays the raw received data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在购买 GPS 套件后，确保它能正常工作并接收 GPS 信号是个好主意。GPS 接收器需要与天空保持视距，但信号可以穿透窗户。所以，虽然最好在户外进行此测试，但您的
    GPS 接收器通过无遮挡的窗户或天窗通常也能正常工作。为了测试接收效果，您需要设置扩展板或模块，并运行一个基本的草图，显示接收到的原始数据。
- en: If you are using a GPS shield, ensure that the GPS TX pin is jumpered to Arduino
    digital pin D2 and the RX pin is jumpered to Arduino digital pin D3\. If you are
    using a GPS module, as shown in [Figure 15-1](#figure15-1), connect the Vcc and
    GND to Arduino 5 V and GND, respectively; then connect TX to Arduino digital pin
    D2 and RX to Arduino digital pin D3.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 GPS 扩展板，请确保 GPS 的 TX 引脚连接到 Arduino 数字引脚 D2，RX 引脚连接到 Arduino 数字引脚 D3。如果您使用的是
    GPS 模块，如[图 15-1](#figure15-1)所示，请将 Vcc 和 GND 分别连接到 Arduino 的 5V 和 GND；然后将 TX 连接到
    Arduino 数字引脚 D2，RX 连接到 Arduino 数字引脚 D3。
- en: To perform the test, enter and upload the sketch in [Listing 15-1](#listing15-1).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行测试，请输入并上传 [清单 15-1](#listing15-1) 中的草图。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 15-1: Basic GPS test sketch'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-1：基本的 GPS 测试草图
- en: This sketch listens to the software serial port at 2, and when a byte of data
    is received from the GPS module or shield, it is sent to the Serial Monitor at
    3. (Notice that we start the software serial port at 9,600 bps at 1 to match the
    data speed of the GPS receiver.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图在第 2 行监听软件串口，当从 GPS 模块或扩展板接收到一个字节的数据时，它会将数据发送到第 3 行的串口监视器。（注意，我们在第 1 行以 9,600
    波特率启动软件串口，以匹配 GPS 接收器的数据速率。）
- en: Once you’ve uploaded the sketch, you may need to wait around 30 seconds; this
    is to allow the GPS receiver time to start receiving signals from one or more
    GPS satellites. The GPS shield or module will have an onboard LED, which will
    start flashing once the receiver has started finding GPS signals. After the LED
    starts blinking, open the Serial Monitor window in the IDE and set the data speed
    to 9,600 baud. You should see a constant stream of data similar to the output
    shown in [Figure 15-3](#figure15-3).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，可能需要等待大约 30 秒；这是为了让 GPS 接收器有时间开始接收来自一个或多个 GPS 卫星的信号。GPS 扩展板或模块上将有一个内置
    LED，当接收器开始找到 GPS 信号时，LED 将开始闪烁。LED 开始闪烁后，打开 IDE 中的串口监视器窗口，并将数据速率设置为 9,600 波特率。你应该看到类似于
    [图 15-3](#figure15-3) 中所示的持续数据流。
- en: '![f15003](image_fi/500587c15/f15003.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![f15003](image_fi/500587c15/f15003.png)'
- en: 'Figure 15-3: Raw data from GPS satellites'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-3：来自 GPS 卫星的原始数据
- en: The data is sent from the GPS receiver to the Arduino one character at a time,
    and then it is sent to the Serial Monitor. But this raw data (called *GPS sentences*)
    is not very useful as it is, so we need to use a new library that extracts information
    from the raw data and converts it to a usable form. To do this, download and install
    the TinyGPS library from [http://www.arduiniana.org/libraries/tinygps/](http://www.arduiniana.org/libraries/tinygps/)using
    the method described in Chapter 7.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据从 GPS 接收器按字符逐个发送到 Arduino，然后再发送到串口监视器。但是这些原始数据（称为*GPS 句子*）本身并不太有用，因此我们需要使用一个新的库，从原始数据中提取信息并将其转换为可用的格式。为此，请按照第
    7 章中的方法下载并安装 TinyGPS 库，网址为 [http://www.arduiniana.org/libraries/tinygps/](http://www.arduiniana.org/libraries/tinygps/)。
- en: 'Project #43: Creating a Simple GPS Receiver'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #43：创建一个简单的 GPS 接收器'
- en: We’ll start by creating a simple GPS receiver. Because you’ll usually use your
    GPS outdoors—and to make things a little easier—we’ll add an LCD module to display
    the data, similar to the one shown in [Figure 15-4](#figure15-4).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个简单的 GPS 接收器开始。因为你通常会在户外使用 GPS——为了让事情变得稍微简单一点——我们将添加一个 LCD 模块来显示数据，类似于
    [图 15-4](#figure15-4) 中所示的。
- en: '![f15004](image_fi/500587c15/f15004.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![f15004](image_fi/500587c15/f15004.png)'
- en: 'Figure 15-4: The Freetronics LCD & Keypad Shield'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-4：Freetronics LCD & Keypad 扩展板
- en: The result will be a very basic portable GPS that can be powered by a 9 V battery
    and connector, which will display the coordinates of your current position on
    the LCD.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个非常基本的便携式 GPS，它可以由 9V 电池和连接器供电，并在 LCD 上显示你当前的位置坐标。
- en: The Hardware
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The required hardware is minimal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的硬件非常简单：
- en: Arduino and USB cable
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: LCD module or Freetronics LCD & Keypad Shield
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LCD 模块或 Freetronics LCD & Keypad 扩展板
- en: One 9 V battery–to–DC socket cable
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根 9V 电池至直流插座电缆
- en: GPS module and screw shield for Arduino or GPS shield for Arduino
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPS 模块和 Arduino 用螺丝扩展板或 Arduino 用 GPS 扩展板
- en: The Sketch
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From 1 to 2, the sketch introduces the required libraries for the LCD and GPS.
    In `void loop()`, we send the characters received from the GPS receiver to the
    function `getgps()` at 4. The data is obtained by using `gps.f_get_position()`
    at 3 to insert the position values in the byte variables `&latitude` and `&longitude`,
    which we display on the LCD.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从第 1 到第 2 行，草图引入了 LCD 和 GPS 所需的库。在 `void loop()` 中，我们将从 GPS 接收器接收到的字符发送到 4 处的
    `getgps()` 函数。通过在 3 处使用 `gps.f_get_position()` 获取数据，并将位置值插入到字节变量 `&latitude` 和
    `&longitude` 中，然后将其显示在 LCD 上。
- en: Running the Sketch
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行草图
- en: After the sketch has been uploaded and the GPS starts receiving data, your current
    position in decimal latitude and longitude should be displayed on your LCD, as
    shown in [Figure 15-5](#figure15-5).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图并且 GPS 开始接收数据后，你的当前经纬度位置应该会显示在 LCD 上，如 [图 15-5](#figure15-5) 所示。
- en: '![f15005](image_fi/500587c15/f15005.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![f15005](image_fi/500587c15/f15005.png)'
- en: 'Figure 15-5: Latitude and longitude display from Project 43'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-5：来自项目 43 的纬度和经度显示
- en: But where on Earth is this? We can determine exactly where it is by using Google
    Maps ([http://maps.google.com/](http://maps.google.com/)). On the website, enter
    the latitude and longitude, separated by a comma and a space, into the search
    field, and Google Maps will return the location. For example, using the coordinates
    returned in [Figure 15-5](#figure15-5) produces a map like the one shown in [Figure
    15-6](#figure15-6).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个位置在地球上哪里呢？我们可以通过使用 Google Maps ([http://maps.google.com/](http://maps.google.com/))
    精确确定它的位置。在网站上，输入纬度和经度，用逗号和空格分隔，Google Maps 将返回该位置。例如，使用[图 15-5](#figure15-5)中返回的坐标可以生成如[图
    15-6](#figure15-6)所示的地图。
- en: '![f15006](image_fi/500587c15/f15006.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![f15006](image_fi/500587c15/f15006.png)'
- en: 'Figure 15-6: The GPS coordinates displayed in [Figure 15-5](#figure15-5) place
    us on Alcatraz Island.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-6：在[图 15-5](#figure15-5)中显示的 GPS 坐标将我们定位到阿尔卡特拉兹岛。
- en: 'Project #44: Creating an Accurate GPS-Based Clock'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #44：创建一个基于 GPS 的精确时钟'
- en: There is more to using a GPS than finding a location; the system also transmits
    time data that can be used to make a very accurate clock.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GPS 不仅仅是为了找到位置；系统还会传输时间数据，这些数据可以用来制作一个非常精确的时钟。
- en: The Hardware
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: For this project, we’ll use the same hardware as in Project 43.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用与项目 43 中相同的硬件。
- en: The Sketch
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch to build a GPS clock:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图以构建 GPS 时钟：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This example works in a similar way to the sketch in Project 43, except that
    instead of extracting the position data, it extracts the time (always at Greenwich
    Mean Time, more commonly known as UTC) at 1. At 2, you can either add or subtract
    a number of hours to bring the clock into line with your current time zone. The
    time should then be formatted clearly and displayed on the LCD at 3. [Figure 15-7](#figure15-7)
    shows an example of the clock.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的工作方式与项目 43 中的草图类似，不同之处在于它提取的是时间数据（始终为格林威治标准时间，也称为 UTC），而不是位置数据。在步骤 1 中，系统会提取时间。在步骤
    2 中，您可以加上或减去一定小时数，将时钟调整为您所在时区的时间。然后，时间应清晰地格式化，并在步骤 3 的 LCD 屏幕上显示。[图 15-7](#figure15-7)展示了时钟的示例。
- en: '![f15007](image_fi/500587c15/f15007.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f15007](image_fi/500587c15/f15007.png)'
- en: 'Figure 15-7: Project 44 at work'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-7：项目 44 正在进行中
- en: 'Project #45: Recording the Position of a Moving Object over Time'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #45：记录移动物体随时间变化的位置'
- en: Now that we know how to receive GPS coordinates and convert them into normal
    variables, we can use this information with a microSD or SD card, introduced in
    Chapter 7, to build a GPS logger. Our logger will record our position over time
    by logging the GPS data over time. The addition of the memory card will allow
    you to record the movement of a car, truck, boat, or any other moving object that
    allows GPS signal reception; later, you can review the information on a computer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何接收 GPS 坐标并将其转换为普通变量，我们可以利用这些信息结合第 7 章介绍的 microSD 或 SD 卡来构建 GPS 记录仪。我们的记录仪将通过记录
    GPS 数据随时间变化来记录我们的位置。增加内存卡将使您能够记录汽车、卡车、船只或任何其他能够接收 GPS 信号的移动物体的运动；之后，您可以在计算机上查看这些信息。
- en: The Hardware
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: If you have a GPS shield for Arduino, as recommended earlier in this chapter,
    the required hardware is the same as that used for the previous examples, except
    that you can remove the LCD shield. If you’re using a GPS receiver module, you
    will need the screw shield to allow connection of the GPS and the SD card module.
    No matter which method you use, you will need external power for this project.
    In our example, we’ll record the time, position information, and estimated speed
    of travel.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有 Arduino 的 GPS 屏蔽板，正如本章前面推荐的那样，所需的硬件与之前示例中使用的是相同的，只是可以移除 LCD 屏蔽板。如果您使用的是
    GPS 接收模块，您将需要螺丝屏蔽板，以便连接 GPS 和 SD 卡模块。无论使用哪种方法，您都需要为这个项目提供外部电源。在我们的示例中，我们将记录时间、位置信息和估算的旅行速度。
- en: The Sketch
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'After assembling your hardware, enter and upload the following sketch:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装好硬件后，输入并上传以下草图：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sketch uses the same code used in Projects 43 and 44 in `void loop()` to
    receive data from the GPS receiver and pass it on to other functions. At 5, the
    data from the GPS receiver is passed into the TinyGPS library to decode it into
    useful variables. At 1, the memory card is checked to determine whether data can
    be written to it, and from 2 to 3, the relevant GPS data is written to the text
    file on the microSD card. Because the file is closed after every write, you can
    remove the power source from the Arduino without warning the sketch, and you should
    do so before inserting or removing the microSD card. Finally, you can set the
    interval between data recordings at 4 by changing the value in the `delay()` function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用了在项目 43 和 44 中相同的代码，在`void loop()`中接收 GPS 接收器的数据并传递给其他函数。在 5 处，GPS 接收器的数据被传入
    TinyGPS 库以解码为有用的变量。在 1 处，检查存储卡以确认是否可以写入数据，在 2 到 3 处，将相关的 GPS 数据写入到 microSD 卡上的文本文件中。因为每次写入后文件都会关闭，你可以在不通知示例的情况下断开
    Arduino 的电源，并且在插入或移除 microSD 卡之前应先断开电源。最后，你可以通过更改`delay()`函数中的值来设置数据记录之间的间隔。
- en: Running the Sketch
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行示例
- en: After operating your GPS logger, the resulting text file should look similar
    to [Figure 15-8](#figure15-8).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作 GPS 日志器后，生成的文本文件应类似于[图 15-8](#figure15-8)。
- en: '![f15008](image_fi/500587c15/f15008.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![f15008](image_fi/500587c15/f15008.png)'
- en: 'Figure 15-8: Results from Project 45'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-8：项目 45 的结果
- en: Once you have this data, you can enter it into Google Maps manually and review
    the path taken by the GPS logger, point by point. But a more interesting method
    is to display the entire route taken on one map. To do this, open the text file
    as a spreadsheet, separate the position data, and add a header row, as shown in
    [Figure 15-9](#figure15-9). Then save it as a *.csv* file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你得到了这些数据，你可以手动将其输入到 Google Maps 中，逐点查看 GPS 日志器的行进路线。但更有趣的方法是将整个路线显示在一张地图上。为此，打开文本文件作为电子表格，分离位置数据，并添加一个标题行，如[图
    15-9](#figure15-9)所示。然后将其保存为 *.csv* 文件。
- en: '![f15009](image_fi/500587c15/f15009.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![f15009](image_fi/500587c15/f15009.png)'
- en: 'Figure 15-9: Captured position data'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-9：捕获的位置信息
- en: Now visit the GPS Visualizer website ([http://www.gpsvisualizer.com/](http://www.gpsvisualizer.com/)).
    In the Get Started Now box, click **Choose File** and select your data file. Choose
    **Google Maps** as the output format and then click **Map It**. The movement of
    your GPS logger should be shown on a map similar to the one in [Figure 15-10](#figure15-10),
    which you can then adjust and explore.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问 GPS Visualizer 网站（[http://www.gpsvisualizer.com/](http://www.gpsvisualizer.com/)）。在“Get
    Started Now”框中，点击**Choose File**并选择你的数据文件。选择**Google Maps**作为输出格式，然后点击**Map It**。你的
    GPS 日志器的运动轨迹应该会显示在类似于[图 15-10](#figure15-10)的地图上，你可以进一步调整并探索。
- en: '![f15010](image_fi/500587c15/f15010.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![f15010](image_fi/500587c15/f15010.png)'
- en: 'Figure 15-10: Mapped GPS logger data'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-10：映射的 GPS 日志器数据
- en: Looking Ahead
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: As you can see, something that you might have thought too complex, such as working
    with GPS receivers, can be made simple with your Arduino. Continuing with that
    theme, in the next chapter you’ll learn how to create your own wireless data links
    and direct things via remote control.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，原本你可能认为复杂的事情，如使用 GPS 接收器，通过 Arduino 就能变得简单。继续沿着这个主题，下一章你将学会如何创建自己的无线数据链接并通过遥控控制设备。
