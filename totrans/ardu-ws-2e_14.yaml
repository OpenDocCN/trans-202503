- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using GPS with Your Arduino
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to connect a GPS shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a simple GPS coordinates display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the actual position of GPS coordinates on a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build an accurate clock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record the position of a moving object over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll learn how to use an inexpensive GPS shield to determine location, create
    an accurate clock, and make a logging device that records the position of your
    gadget over time onto a microSD card, which can then be plotted over a map to
    display movement history.
  prefs: []
  type: TYPE_NORMAL
- en: What Is GPS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Global Positioning System (GPS)* is a satellite-based navigation system
    that sends data from satellites orbiting Earth to GPS receivers on the ground
    that can use that data to determine the current position and time anywhere on
    Earth. You are probably already familiar with GPS navigation devices used in cars
    or on your smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: Although we can’t create detailed map navigation systems with our Arduinos,
    you can use a GPS module to determine your position, time, and approximate speed
    (if you’re in motion). When shopping around for a GPS module, you will generally
    find two types available. The first is an independent, inexpensive GPS receiver
    on a module with an external aerial, as shown in [Figure 15-1](#figure15-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![f15001](image_fi/500587c15/f15001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-1: A GPS receiver module'
  prefs: []
  type: TYPE_NORMAL
- en: The second type you will come across is a GPS shield for Arduino, as shown in
    [Figure 15-2](#figure15-2). These shields are convenient, since all the wiring
    is done for you; they also include a microSD card socket that is ideal for logging
    data, as demonstrated later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your GPS shield allows connection of the GPS receiver’s TX and RX lines
    to Arduino digital pins D2 and D3, or has jumpers to allow manually setting these
    (like the shield in [Figure 15-2](#figure15-2)). Check with the supplier for more
    details. You can use either type of device in this chapter. However, I highly
    recommend the shield, especially as you can effortlessly connect an LCD shield
    on top of the GPS shield as a display.
  prefs: []
  type: TYPE_NORMAL
- en: '![f15002](image_fi/500587c15/f15002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-2: A GPS shield for Arduino'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the GPS Shield
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you buy a GPS kit, it’s a good idea to make sure that it’s working and
    that you can receive GPS signals. GPS receivers require a line of sight to the
    sky, but their signals can pass through windows. So, while it’s usually best to
    perform this test outdoors, your GPS receiver will probably work just fine through
    an unobstructed window or skylight. To test reception, you’ll set up the shield
    or module and run a basic sketch that displays the raw received data.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a GPS shield, ensure that the GPS TX pin is jumpered to Arduino
    digital pin D2 and the RX pin is jumpered to Arduino digital pin D3\. If you are
    using a GPS module, as shown in [Figure 15-1](#figure15-1), connect the Vcc and
    GND to Arduino 5 V and GND, respectively; then connect TX to Arduino digital pin
    D2 and RX to Arduino digital pin D3.
  prefs: []
  type: TYPE_NORMAL
- en: To perform the test, enter and upload the sketch in [Listing 15-1](#listing15-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-1: Basic GPS test sketch'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch listens to the software serial port at 2, and when a byte of data
    is received from the GPS module or shield, it is sent to the Serial Monitor at
    3. (Notice that we start the software serial port at 9,600 bps at 1 to match the
    data speed of the GPS receiver.)
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve uploaded the sketch, you may need to wait around 30 seconds; this
    is to allow the GPS receiver time to start receiving signals from one or more
    GPS satellites. The GPS shield or module will have an onboard LED, which will
    start flashing once the receiver has started finding GPS signals. After the LED
    starts blinking, open the Serial Monitor window in the IDE and set the data speed
    to 9,600 baud. You should see a constant stream of data similar to the output
    shown in [Figure 15-3](#figure15-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f15003](image_fi/500587c15/f15003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-3: Raw data from GPS satellites'
  prefs: []
  type: TYPE_NORMAL
- en: The data is sent from the GPS receiver to the Arduino one character at a time,
    and then it is sent to the Serial Monitor. But this raw data (called *GPS sentences*)
    is not very useful as it is, so we need to use a new library that extracts information
    from the raw data and converts it to a usable form. To do this, download and install
    the TinyGPS library from [http://www.arduiniana.org/libraries/tinygps/](http://www.arduiniana.org/libraries/tinygps/)using
    the method described in Chapter 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #43: Creating a Simple GPS Receiver'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll start by creating a simple GPS receiver. Because you’ll usually use your
    GPS outdoors—and to make things a little easier—we’ll add an LCD module to display
    the data, similar to the one shown in [Figure 15-4](#figure15-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f15004](image_fi/500587c15/f15004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-4: The Freetronics LCD & Keypad Shield'
  prefs: []
  type: TYPE_NORMAL
- en: The result will be a very basic portable GPS that can be powered by a 9 V battery
    and connector, which will display the coordinates of your current position on
    the LCD.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The required hardware is minimal:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LCD module or Freetronics LCD & Keypad Shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 9 V battery–to–DC socket cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPS module and screw shield for Arduino or GPS shield for Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: From 1 to 2, the sketch introduces the required libraries for the LCD and GPS.
    In `void loop()`, we send the characters received from the GPS receiver to the
    function `getgps()` at 4. The data is obtained by using `gps.f_get_position()`
    at 3 to insert the position values in the byte variables `&latitude` and `&longitude`,
    which we display on the LCD.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the sketch has been uploaded and the GPS starts receiving data, your current
    position in decimal latitude and longitude should be displayed on your LCD, as
    shown in [Figure 15-5](#figure15-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f15005](image_fi/500587c15/f15005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-5: Latitude and longitude display from Project 43'
  prefs: []
  type: TYPE_NORMAL
- en: But where on Earth is this? We can determine exactly where it is by using Google
    Maps ([http://maps.google.com/](http://maps.google.com/)). On the website, enter
    the latitude and longitude, separated by a comma and a space, into the search
    field, and Google Maps will return the location. For example, using the coordinates
    returned in [Figure 15-5](#figure15-5) produces a map like the one shown in [Figure
    15-6](#figure15-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![f15006](image_fi/500587c15/f15006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-6: The GPS coordinates displayed in [Figure 15-5](#figure15-5) place
    us on Alcatraz Island.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #44: Creating an Accurate GPS-Based Clock'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is more to using a GPS than finding a location; the system also transmits
    time data that can be used to make a very accurate clock.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this project, we’ll use the same hardware as in Project 43.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload the following sketch to build a GPS clock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This example works in a similar way to the sketch in Project 43, except that
    instead of extracting the position data, it extracts the time (always at Greenwich
    Mean Time, more commonly known as UTC) at 1. At 2, you can either add or subtract
    a number of hours to bring the clock into line with your current time zone. The
    time should then be formatted clearly and displayed on the LCD at 3. [Figure 15-7](#figure15-7)
    shows an example of the clock.
  prefs: []
  type: TYPE_NORMAL
- en: '![f15007](image_fi/500587c15/f15007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-7: Project 44 at work'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #45: Recording the Position of a Moving Object over Time'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how to receive GPS coordinates and convert them into normal
    variables, we can use this information with a microSD or SD card, introduced in
    Chapter 7, to build a GPS logger. Our logger will record our position over time
    by logging the GPS data over time. The addition of the memory card will allow
    you to record the movement of a car, truck, boat, or any other moving object that
    allows GPS signal reception; later, you can review the information on a computer.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have a GPS shield for Arduino, as recommended earlier in this chapter,
    the required hardware is the same as that used for the previous examples, except
    that you can remove the LCD shield. If you’re using a GPS receiver module, you
    will need the screw shield to allow connection of the GPS and the SD card module.
    No matter which method you use, you will need external power for this project.
    In our example, we’ll record the time, position information, and estimated speed
    of travel.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After assembling your hardware, enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sketch uses the same code used in Projects 43 and 44 in `void loop()` to
    receive data from the GPS receiver and pass it on to other functions. At 5, the
    data from the GPS receiver is passed into the TinyGPS library to decode it into
    useful variables. At 1, the memory card is checked to determine whether data can
    be written to it, and from 2 to 3, the relevant GPS data is written to the text
    file on the microSD card. Because the file is closed after every write, you can
    remove the power source from the Arduino without warning the sketch, and you should
    do so before inserting or removing the microSD card. Finally, you can set the
    interval between data recordings at 4 by changing the value in the `delay()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After operating your GPS logger, the resulting text file should look similar
    to [Figure 15-8](#figure15-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![f15008](image_fi/500587c15/f15008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-8: Results from Project 45'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have this data, you can enter it into Google Maps manually and review
    the path taken by the GPS logger, point by point. But a more interesting method
    is to display the entire route taken on one map. To do this, open the text file
    as a spreadsheet, separate the position data, and add a header row, as shown in
    [Figure 15-9](#figure15-9). Then save it as a *.csv* file.
  prefs: []
  type: TYPE_NORMAL
- en: '![f15009](image_fi/500587c15/f15009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-9: Captured position data'
  prefs: []
  type: TYPE_NORMAL
- en: Now visit the GPS Visualizer website ([http://www.gpsvisualizer.com/](http://www.gpsvisualizer.com/)).
    In the Get Started Now box, click **Choose File** and select your data file. Choose
    **Google Maps** as the output format and then click **Map It**. The movement of
    your GPS logger should be shown on a map similar to the one in [Figure 15-10](#figure15-10),
    which you can then adjust and explore.
  prefs: []
  type: TYPE_NORMAL
- en: '![f15010](image_fi/500587c15/f15010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-10: Mapped GPS logger data'
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, something that you might have thought too complex, such as working
    with GPS receivers, can be made simple with your Arduino. Continuing with that
    theme, in the next chapter you’ll learn how to create your own wireless data links
    and direct things via remote control.
  prefs: []
  type: TYPE_NORMAL
