- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: 3D Drawing with OpenSCAD
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD中的3D绘图
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter introduces the OpenSCAD 3D design software with its own built-in
    programming language. You’ll learn how to use text-based commands to draw the
    basic 3D shapes that will act as the building blocks for all the designs in this
    book. OpenSCAD’s easy-to-learn programming language, specifically designed for
    3D printing, is a descriptive language that offers a more natural way of describing
    geometry than traditional programs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了OpenSCAD 3D设计软件及其内置的编程语言。你将学习如何使用基于文本的命令绘制本书中所有设计的基本3D形状，这些形状将作为设计的构建模块。OpenSCAD易于学习的编程语言，专为3D打印设计，是一种描述性语言，比传统程序更自然地描述几何形状。
- en: Why Use OpenSCAD?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用OpenSCAD？
- en: '*OpenSCAD* is an open source program that is freely available for download.
    It is one of the most widely used 3D design software applications in the maker
    community, and as a result, many online resources are available. OpenSCAD was
    built to enable nondesigners to easily create 3D models. It does not have a graphical
    user interface like Photoshop. Instead, you define your design with text-based
    code, which makes it easier to move around different parts, change earlier steps
    in the design process, share sections of your designs with other people, discuss
    your design problems in forums, and email designs to others. You can do similar
    things in OpenSCAD as are possible with other high-end tools; however, OpenSCAD
    is quick to learn, simple to use, and more accessible.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*OpenSCAD*是一个开源程序，免费提供下载。它是制造者社区中最广泛使用的3D设计软件之一，因此有很多在线资源可供使用。OpenSCAD的设计目的是让非设计师也能轻松创建3D模型。它不像Photoshop那样有图形用户界面。相反，你通过基于文本的代码定义设计，这使得移动不同部分、修改设计过程中的早期步骤、与他人共享设计部分、在论坛中讨论设计问题以及通过电子邮件发送设计变得更容易。你可以在OpenSCAD中做类似于其他高端工具能做到的事情；然而，OpenSCAD学习快速、使用简单、更加易于接触。'
- en: Getting Started with OpenSCAD
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenSCAD入门
- en: Creating a 3D design with OpenSCAD is a two-step process. First, in the Editor
    window, type a code statement to give OpenSCAD instructions about what to display.
    [Figure 1-1](#figure1-1) shows a code statement to draw a simple OpenSCAD shape
    circled in red.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenSCAD创建3D设计是一个两步过程。首先，在编辑器窗口中，输入一条代码语句，向OpenSCAD提供关于显示内容的指令。[图1-1](#figure1-1)显示了一条用于绘制一个简单OpenSCAD形状的代码语句，该形状被红圈标出。
- en: '![f01001](image_fi/279547c01/f01001.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![f01001](image_fi/279547c01/f01001.png)'
- en: 'Figure 1-1: Code for a cube in the Editor window'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1：编辑器窗口中的立方体代码
- en: This OpenSCAD code statement has two parts. The first part indicates the type
    of shape you want to draw (in this case, a cuboid). The second part, which contains
    what are called *parameters*, indicates the properties of that shape. Parameters
    allow you to specify values that modify the appearance of the shape. Parameters
    are always placed between parentheses `( )`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这条OpenSCAD代码语句有两个部分。第一部分指定你想绘制的形状类型（在本例中是长方体）。第二部分包含所谓的*参数*，指示该形状的属性。参数允许你指定修改形状外观的值。参数总是放在括号`(
    )`内。
- en: Next, draw your shape in the Preview window by clicking the **Preview** button
    (circled in red in [Figure 1-2](#figure1-2)) to see a quick visual preview of
    your design.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击**预览**按钮（[图1-2](#figure1-2)中的红圈所示）在预览窗口中绘制你的形状，以查看设计的快速视觉预览。
- en: '![f01002](image_fi/279547c01/f01002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f01002](image_fi/279547c01/f01002.png)'
- en: 'Figure 1-2: Drawing a cube after clicking the Preview button'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-2：点击预览按钮后绘制立方体
- en: Drawing Basic 3D Shapes
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制基本的3D形状
- en: In this section, you’ll learn how to write OpenSCAD code to draw cuboids (cubes
    or 3D rectangles), spheres, and cylinders, and you’ll learn how to import shapes
    from other design programs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教你如何编写OpenSCAD代码来绘制长方体（立方体或3D矩形）、球体和圆柱体，并学习如何从其他设计程序导入形状。
- en: Drawing Cuboids with cube
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用cube绘制长方体
- en: 'Use the `cube` command to create a cuboid (as shown in [Figure 1-2](#figure1-2)):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cube`命令来创建一个长方体（如[图1-2](#figure1-2)所示）：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first part of the statement, `cube`, indicates that you want to draw a
    cuboid. The parameters inside the parentheses modify the `cube` command by specifying
    how big you want your cuboid to be. The square brackets (`[ ]`) indicate a *vector*
    that organizes the three dimensions of your cuboid. The order of the numbers in
    the vector is important: 5 is the width of the cuboid along the x-axis, 10 is
    the length of the cuboid along the y-axis, and 20 is the height of the cuboid
    along the z-axis. Finally, mark the end of the statement with a semicolon (`;`).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 语句的第一部分，`cube`，表示你想要绘制一个长方体。括号内的参数通过指定长方体的大小来修改`cube`命令。方括号（`[ ]`）表示一个*向量*，用于组织长方体的三个维度。向量中数字的顺序很重要：5是长方体在x轴上的宽度，10是长方体在y轴上的长度，20是长方体在z轴上的高度。最后，用分号（`;`）标记语句的结尾。
- en: 'Notice that one corner of the cuboid touches the *origin*: the point at which
    the three axes meet, represented by the coordinates (0, 0, 0).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，长方体的一个角与*原点*接触：三个坐标轴交汇的点，表示为坐标(0, 0, 0)。
- en: Drawing Spheres with sphere
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用sphere绘制球体
- en: 'To draw a sphere, use the `sphere` command followed by the sphere’s radius
    in parentheses to indicate its size. For example, the following statement draws
    a sphere with a radius of 10 units ([Figure 1-3](#figure1-3)):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制一个球体，使用`sphere`命令，后面跟着球体半径的括号表示其大小。例如，以下语句绘制了一个半径为10单位的球体（见[图1-3](#figure1-3)）：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![f01003](image_fi/279547c01/f01003.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![f01003](image_fi/279547c01/f01003.png)'
- en: 'Figure 1-3: A sphere with a radius of 10 units'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-3：一个半径为10单位的球体
- en: You can change the size of a sphere by changing its radius. Unlike cuboids,
    which might have three distinct measurements for width, length, and height, a
    sphere has the same measurements along all three axes. That’s why the basic `sphere`
    command has only one number inside the parentheses. As with the `cube` command,
    mark the end of the code statement with a semicolon. But unlike with the `cube`
    command, OpenSCAD centers a sphere around the origin.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过改变球体的半径来改变球体的大小。与长方体不同，长方体可能有三个不同的尺寸：宽度、长度和高度，而球体在三个轴上的尺寸是相同的。这就是为什么基本的`sphere`命令中括号内只有一个数字。与`cube`命令一样，用分号标记代码语句的结尾。但与`cube`命令不同，OpenSCAD会将球体围绕原点居中。
- en: Drawing Cylinders and Cones with cylinder
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用cylinder绘制圆柱体和圆锥体
- en: 'To draw a cylinder, use the `cylinder` command followed by parentheses containing
    the cylinder’s height and the length of the two radii of the circles that form
    its top and bottom. The following statement draws a cylinder with two radii of
    the same size ([Figure 1-4](#figure1-4)):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制圆柱体，使用`cylinder`命令，后面跟着包含圆柱体高度以及构成其顶部和底部的两个圆的半径长度的括号。以下语句绘制了一个两个半径相同的圆柱体（见[图1-4](#figure1-4)）：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![f01004](image_fi/279547c01/f01004.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f01004](image_fi/279547c01/f01004.png)'
- en: 'Figure 1-4: A cylinder with a height of 20 units, a bottom radius of 5 units,
    and a top radius of 5 units'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-4：一个高度为20单位，底部半径为5单位，顶部半径为5单位的圆柱体
- en: 'Because keeping track of the cylinder’s three parameters can be confusing,
    OpenSCAD allows you to label each parameter and include them in the command in
    any order. In parentheses, set the following values: `h`, which is the height
    of the cylinder along the z-axis; `r1`, which is the radius at the bottom of the
    cylinder; and `r2`, which is the radius at the top of the cylinder. As with the
    `sphere` and `cube` commands, use a semicolon to mark the end of the statement.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因为跟踪圆柱体的三个参数可能会令人困惑，OpenSCAD允许你为每个参数标注名称，并按任意顺序包含它们。在括号内，设置以下值：`h`，表示圆柱体沿z轴的高度；`r1`，表示圆柱体底部的半径；`r2`，表示圆柱体顶部的半径。与`sphere`和`cube`命令一样，用分号标记语句的结尾。
- en: 'The two radii of a cylinder don’t need to have the same measurements. When
    they’re different, the cylinder looks more like a cone with its top cut off (or,
    a truncated cone, according to mathematicians), as shown in [Figure 1-5](#figure1-5):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 圆柱体的两个半径不需要相同。当它们不同的时候，圆柱看起来更像一个顶部被切掉的圆锥（或者，根据数学家的说法，是一个截头圆锥），如[图1-5](#figure1-5)所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![f01005](image_fi/279547c01/f01005.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![f01005](image_fi/279547c01/f01005.png)'
- en: 'Figure 1-5: A cone with a height of 20 units, a bottom radius of 5 units, and
    a top radius of 3 units'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-5：一个高度为20单位，底部半径为5单位，顶部半径为3单位的圆锥
- en: 'You can draw a pointed cone, like the one in [Figure 1-6](#figure1-6), by assigning
    one of the radii a radius of `0`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将其中一个半径设置为`0`来绘制一个尖顶圆锥，如[图1-6](#figure1-6)所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![f01006](image_fi/279547c01/f01006.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![f01006](image_fi/279547c01/f01006.png)'
- en: 'Figure 1-6: A pointed cone with a height of 20 units, a bottom radius of 0
    units, and a top radius of 5 units'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-6：一个高度为 20 单位，底部半径为 0 单位，顶部半径为 5 单位的尖锥
- en: Notice also that, unlike the shapes drawn with the `sphere` and `cube` commands,
    cylinders are centered around the z-axis, with one face touching the xy-plane.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，与通过 `sphere` 和 `cube` 命令绘制的形状不同，圆柱体是围绕 z 轴居中的，一个面接触 xy 平面。
- en: Importing 3D Models with import
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 import 导入 3D 模型
- en: 'OpenSCAD allows you to import shapes from other 3D design programs if they’re
    saved in the *.stl* format, which is a common format for 3D models. You can import
    these preexisting 3D shapes with the `import` command. For example, use the following
    statement to import a popular file called *3DBenchy.stl* ([Figure 1-7](#figure1-7)):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD 允许你从其他 3D 设计程序中导入形状，前提是它们以 *.stl* 格式保存，这是 3D 模型的常见格式。你可以通过 `import`
    命令导入这些现有的 3D 形状。例如，使用以下语句导入一个名为 *3DBenchy.stl* 的流行文件（[图 1-7](#figure1-7)）：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![f01007](image_fi/279547c01/f01007.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![f01007](image_fi/279547c01/f01007.png)'
- en: 'Figure 1-7: An imported 3D model of a boat often used to calibrate 3D printers'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-7：一个导入的 3D 模型船只，通常用于校准 3D 打印机
- en: To import a 3D shape, place the *.stl* file’s name within parentheses after
    the `import` command. Enclose the name of the file in quotation marks (`"` `"`)
    to indicate that the filename is literal text and should not be interpreted by
    OpenSCAD. Note that you should save the *.stl* file in the same folder/directory
    as your OpenSCAD program, and be sure to save your OpenSCAD program before you
    generate a preview of your design; otherwise, OpenSCAD might have trouble finding
    the file. Mark the end of the statement with a semicolon.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入 3D 形状，在 `import` 命令后将 *.stl* 文件的名称放在括号内。用引号（`"` `"`)将文件名括起来，表示文件名是字面文本，不应被
    OpenSCAD 解释。请注意，你应该将 *.stl* 文件保存在与 OpenSCAD 程序相同的文件夹/目录中，并在生成设计预览之前保存 OpenSCAD
    程序，否则 OpenSCAD 可能无法找到该文件。用分号标记语句的结尾。
- en: Modifying Basic Shapes
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改基本形状
- en: Some of the basic ways to alter the shapes you draw with OpenSCAD include moving
    or smoothing them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenSCAD 中修改绘制的形状的一些基本方法包括移动或平滑它们。
- en: Moving Shapes
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动形状
- en: 'If the design you’re creating has more than one shape, you’ll need to know
    how to move those shapes around the Preview window. Otherwise, by default, they
    will sit on top of each other, and you may not be able to see the shapes of different
    sizes. For example, consider the following design ([Figure 1-8](#figure1-8)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在创建的设计有多个形状，你需要知道如何在预览窗口中移动这些形状。否则，默认情况下它们会叠加在一起，你可能无法看到不同大小的形状。例如，考虑以下设计（[图
    1-8](#figure1-8)）：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![f01008](image_fi/279547c01/f01008.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f01008](image_fi/279547c01/f01008.png)'
- en: 'Figure 1-8: Multiple shapes drawn with default positioning'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-8：多个默认位置绘制的形状
- en: Centering Shapes with center=true
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 center=true 居中形状
- en: 'By default, the `sphere` command draws a sphere so that it’s centered around
    the origin; the `cube`, `cylinder`, and `import` commands don’t do this. If you
    want to draw other shapes so that they’re also centered around the origin, add
    the `center=true` parameter inside the parentheses, as in this snippet ([Figure
    1-9](#figure1-9)):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`sphere` 命令绘制一个以原点为中心的球体；`cube`、`cylinder` 和 `import` 命令则不会这样做。如果你希望绘制其他形状并使它们也围绕原点居中，可以在括号内添加
    `center=true` 参数，如以下代码片段所示（[图 1-9](#figure1-9)）：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![f01009](image_fi/279547c01/f01009.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![f01009](image_fi/279547c01/f01009.png)'
- en: 'Figure 1-9: A cuboid centered around the origin'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-9：一个以原点为中心的长方体
- en: Now the cuboid’s center will be at (0, 0, 0). You can also add the `center=true`
    parameter to cylinder shapes in order to center cylinders and cones around the
    origin. It’s not possible to center imported shapes with `center=true`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，长方体的中心将位于 (0, 0, 0)。你还可以为圆柱体形状添加 `center=true` 参数，以便将圆柱体和圆锥体围绕原点居中。对于导入的形状，不能使用
    `center=true` 进行居中。
- en: Moving Shapes to a Specific Location with translate
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 translate 将形状移动到特定位置
- en: To move a shape to a specific location in the Preview window, use the `translate`
    operation. This operation modifies a shape as a whole so it’s included right before
    the shape it’s meant to modify.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要将形状移动到预览窗口中的特定位置，可以使用 `translate` 操作。此操作会整体修改形状，因此它会被包含在它所要修改的形状之前。
- en: 'For example, the following statement draws a cuboid that is shifted from its
    default position by 10 units in the negative direction along the x-axis, 20 units
    in the positive direction along the y-axis, and 0 units along the z-axis ([Figure
    1-10](#figure1-10)):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下语句绘制一个长方体，长方体相对于其默认位置在x轴负方向平移了10个单位，在y轴正方向平移了20个单位，z轴方向平移了0个单位（[图1-10](#figure1-10)）：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![f01010](image_fi/279547c01/f01010.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f01010](image_fi/279547c01/f01010.png)'
- en: 'Figure 1-10: A translated cuboid with a starting corner at (–10, 20, 0)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-10：一个平移后的长方体，起始角落位于（–10, 20, 0）
- en: The `translate` operation uses square brackets to group the x, y, and z dimensions
    into a vector. Similar to specifying the dimensions of a cube shape, the order
    of the numbers in the vector is important. The first number in the translation
    vector describes movement along the x-axis; the second describes movement along
    the y-axis; and the third describes movement along the z-axis. Finally, mark the
    end of the entire statement with a semicolon.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate`操作使用方括号将x、y和z维度组合成一个向量。类似于指定立方体形状的尺寸，向量中数字的顺序也很重要。平移向量中的第一个数字描述沿x轴的移动；第二个数字描述沿y轴的移动；第三个数字描述沿z轴的移动。最后，用分号标记整个语句的结束。'
- en: You may have noticed that the vector you use to modify the `translate` operation
    moves the shape’s starting corner—the corner that touches the origin by default.
    [Figure 1-11](#figure1-11) shows how the `translate` operation moves the cuboid
    relative to the origin (the original cube is shown in gray). You can use the axes
    legend to predict the location of your shapes after the `translate` operation
    has been applied.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，你用来修改`translate`操作的向量会移动形状的起始角落——默认情况下，起始角落是与原点相接触的。[图1-11](#figure1-11)展示了`translate`操作如何相对于原点移动长方体（原始立方体以灰色显示）。你可以使用坐标轴图例预测在应用`translate`操作后形状的位置。
- en: '![f01011](image_fi/279547c01/f01011.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![f01011](image_fi/279547c01/f01011.png)'
- en: 'Figure 1-11: A cuboid moved 10 units along the x-axis and 20 units along the
    y-axis, compared with the same-sized cuboid at the origin'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-11：一个在x轴上平移了10个单位，在y轴上平移了20个单位的长方体，与位于原点的相同大小的长方体进行比较
- en: 'To create a more complex design, you may need to move shapes around in different
    configurations. Use the `translate` operation in front of a command to move it
    into a different position. For instance, the following statements draw a cuboid,
    a sphere, and a cylinder in one Preview window ([Figure 1-12](#figure1-12)):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建更复杂的设计，你可能需要将形状以不同的配置进行移动。在命令前使用`translate`操作可以将形状移动到不同的位置。例如，以下语句在一个预览窗口中绘制了一个长方体、一个球体和一个圆柱体（[图1-12](#figure1-12)）：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![f01012](image_fi/279547c01/f01012.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f01012](image_fi/279547c01/f01012.png)'
- en: 'Figure 1-12: Three distinct shapes, translated from default positions'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-12：三个不同的形状，从默认位置进行平移
- en: 'Both the sphere and cylinder move according to their respective center points,
    while the cube moves relative to the corner that touches the origin. Notice that
    the movement is different if you apply the same translation operations to a cube
    and cylinder that have been centered ([Figure 1-13](#figure1-13)):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 球体和圆柱体分别根据它们各自的中心点进行移动，而立方体则相对于与原点接触的角落进行移动。注意，如果你对一个已经居中的立方体和圆柱体应用相同的平移操作，运动是不同的（[图1-13](#figure1-13)）：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![f01013](image_fi/279547c01/f01013.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![f01013](image_fi/279547c01/f01013.png)'
- en: 'Figure 1-13: Three distinct shapes, translated from centered positions'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-13：三个不同的形状，从中心位置进行平移
- en: Smoothing Curves with $fn
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用$fn平滑曲线
- en: You might be wondering why the spheres and cylinders you’ve drawn so far don’t
    appear to be round, but instead are formed by a series of flat panels. That’s
    because OpenSCAD, like most 3D design software, uses a collection of straight
    lines to approximate a curve. To save on memory and reduce the processing time
    required to draw complex shapes, OpenSCAD uses a relatively small number of these
    lines by default. The cylinder shown in [Figure 1-13](#figure1-13), for example,
    uses only six line segments to approximate the curve of the circular faces of
    the cylinder.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道，为什么到目前为止你画的球体和圆柱体看起来不像是圆的，而是由一系列平面组成的。这是因为OpenSCAD和大多数3D设计软件一样，使用一组直线来近似曲线。为了节省内存并减少绘制复杂形状所需的处理时间，OpenSCAD默认使用了相对较少的这些直线。例如，[图1-13](#figure1-13)中展示的圆柱体，仅使用了六条线段来近似圆柱体圆形面上的曲线。
- en: 'To make your cylinders and spheres smoother, specify the number of line segments
    used to approximate a curve by including the `$fn` parameter. Setting `$fn` to
    10, for instance, makes a cylinder look a bit rounder, because it draws the circumference
    of the cylinder with 10 line segments ([Figure 1-14](#figure1-14)):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要使你的圆柱体和球体更平滑，可以通过包含 `$fn` 参数来指定用于近似曲线的线段数量。例如，将 `$fn` 设置为 10 会使圆柱体看起来更圆，因为它用
    10 条线段绘制圆柱体的圆周（[图 1-14](#figure1-14)）：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![f01014](image_fi/279547c01/f01014.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![f01014](image_fi/279547c01/f01014.png)'
- en: 'Figure 1-14: Approximating the curve of a cylinder with 10 line segments'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-14：使用 10 条线段近似圆柱体的曲线
- en: As with other parameters, include `$fn` in the parentheses within the command.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他参数一样，在命令中的括号内包含 `$fn`。
- en: 'Although the cylinder in [Figure 1-14](#figure1-14) is rounder than a default
    cylinder, it’s still not visibly round. Increase `$fn` to an even larger value
    in order to make the cylinder rounder ([Figure 1-15](#figure1-15)):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 [图 1-14](#figure1-14) 中的圆柱体比默认圆柱体更圆，但它仍然不够圆。增加 `$fn` 到更大的值，以使圆柱体更圆（[图 1-15](#figure1-15)）：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With 50 line segments, the curve in this cylinder looks a lot smoother. After
    a certain point, though, increasing `$fn` will stop showing any visible effect.
    Also, note that OpenSCAD takes longer to generate shapes with large `$fn` values
    (as there are more details to generate), so be sure to consider the trade-off
    between smoothness and computational overhead when you set `$fn`. Generally, `$fn=50`
    will produce a “roundness” that is more than sufficient.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 50 个线段时，圆柱体中的曲线看起来更平滑。然而，超过某个点后，增加 `$fn` 将不再产生明显效果。另外，请注意，OpenSCAD 在生成具有较大
    `$fn` 值的形状时需要更长的时间（因为需要生成更多的细节），因此在设置 `$fn` 时需要考虑平滑度与计算开销之间的权衡。通常，`$fn=50` 会产生足够的“圆滑度”。
- en: '![f01015](image_fi/279547c01/f01015.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![f01015](image_fi/279547c01/f01015.png)'
- en: 'Figure 1-15: A cylinder with a curve approximated with 50 line segments'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-15：使用 50 条线段近似的圆柱体曲线
- en: Combining 3D Shapes with Boolean Operations
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用布尔操作组合 3D 形状
- en: 'Sometimes you’ll want to create shapes with features that are more complex
    than the basic shapes you’ve made so far. The *Boolean* operations in OpenSCAD
    allow you to combine multiple shapes, like cuboids, spheres, cylinders, and cones,
    into one shape ([Figure 1-16](#figure1-16)). You can do this by using one of three
    operations: `union`, `difference`, or `intersection`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要创建比目前所做的基本形状更复杂的形状。OpenSCAD 中的 *布尔* 操作允许你将多个形状（如长方体、球体、圆柱体和圆锥体）组合成一个形状（[图
    1-16](#figure1-16)）。你可以通过使用三种操作之一：`union`、`difference` 或 `intersection` 来实现这一点。
- en: '![f01016](image_fi/279547c01/f01016.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![f01016](image_fi/279547c01/f01016.png)'
- en: 'Figure 1-16: An illustration of basic Boolean operations'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-16：基本布尔操作的示意图
- en: The `union` operation groups two shapes together, the `difference` operation
    subtracts one shape from another, and the `intersection` operation keeps only
    the parts where two shapes intersect with each other.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`union` 操作将两个形状合并，`difference` 操作从一个形状中减去另一个形状，而 `intersection` 操作只保留两个形状相交的部分。'
- en: Subtracting Shapes with difference
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `difference` 减去形状
- en: 'Let’s start by subtracting shapes with the `difference` operation ([Figure
    1-17](#figure1-17)):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从使用 `difference` 操作减去形状开始（[图 1-17](#figure1-17)）：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![f01017](image_fi/279547c01/f01017.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![f01017](image_fi/279547c01/f01017.png)'
- en: 'Figure 1-17: A sphere subtracted from a cuboid with the `difference` operation'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-17：从长方体中减去一个球体，使用 `difference` 操作
- en: 'Indicate a `difference` operation, followed by a set of parentheses, and then
    enter at least two commands between a set of curly brackets. Order matters when
    you use the `difference` operation; it keeps only the first shape, removing the
    parts of that shape where the remaining shapes intersect it. Notice in [Figure
    1-18](#figure1-18) what happens when you exchange the order of the two shapes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 指定一个 `difference` 操作，后跟一对括号，然后在一对大括号中输入至少两个命令。使用 `difference` 操作时顺序很重要；它只保留第一个形状，移除该形状与其他形状相交的部分。在
    [图 1-18](#figure1-18) 中注意，如果交换两个形状的顺序，会发生什么情况：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![f01018](image_fi/279547c01/f01018.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![f01018](image_fi/279547c01/f01018.png)'
- en: 'Figure 1-18: A cuboid subtracted from a sphere with the `difference` operation'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-18：从球体中减去一个长方体，使用 `difference` 操作
- en: Reversing the operations creates a sphere with a slice missing, precisely where
    `cube` would have drawn a cuboid shape on top of the original sphere.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 逆转操作会创建一个缺失切片的球体，精确地在 `cube` 在原始球体上绘制长方体形状的位置。
- en: 'Debugging difference Operations with #'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '使用 # 调试差集操作'
- en: 'It can be easy to lose track of the shape you’re subtracting because it is
    no longer visible in the design. To make things easier, place a hash mark (`#`)
    in front of a subtracted shape to create a ghost version of the shape. The following
    code is identical to the code that drew [Figure 1-17](#figure1-17), except it
    uses a hash mark to render the sphere as a ghost-like image ([Figure 1-19](#figure1-19)):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于被减去的形状在设计中不再可见，因此很容易失去对其形状的跟踪。为了简化操作，可以在被减去的形状前加上哈希符号（`#`），以创建该形状的幽灵版本。以下代码与绘制[图
    1-17](#figure1-17)的代码相同，只是它使用哈希符号将球体呈现为幽灵般的图像（[图 1-19](#figure1-19)）：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![f01019](image_fi/279547c01/f01019.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![f01019](image_fi/279547c01/f01019.png)'
- en: 'Figure 1-19: A ghost version of a subtracted sphere to help with problem-solving'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-19：为帮助解决问题，减去的球体的幽灵版本
- en: Use the hash mark to help you debug your designs, and then when your design
    is correct, be sure to remove the hash mark from your code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用哈希符号帮助调试设计，然后在设计正确时，确保从代码中删除哈希符号。
- en: Avoiding “Shimmering Walls” with the difference Operation
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`difference`操作避免“闪烁墙壁”
- en: When subtracting shapes with the `difference` operation, you may sometimes end
    up with “shimmering walls” like those in [Figure 1-20](#figure1-20).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`difference`操作减去形状时，有时会出现类似[图 1-20](#figure1-20)中那样的“闪烁墙壁”。
- en: '![f01020](image_fi/279547c01/f01020.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![f01020](image_fi/279547c01/f01020.png)'
- en: 'Figure 1-20: Two cuboids subtracted from a larger cuboid create shimmering
    walls'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-20：从较大的立方体中减去两个立方体形成闪烁墙壁
- en: The shimmering walls appear because the subtracted shapes share a face with
    the shape they’re being subtracted from. This creates an ambiguous scenario; should
    the face remain or be subtracted? Because of this concern, a model with shimmering
    walls isn’t 3D-printable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 闪烁墙壁出现的原因是被减去的形状与它们所减去的形状共享一个面。这会创建一个模糊的情境：应该保留面，还是将其减去？由于这个问题，带有闪烁墙壁的模型无法进行3D打印。
- en: To solve this issue, only subtract shapes that extend slightly beyond the size
    of the outer shape ([Figure 1-21](#figure1-21)).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，只需减去稍微超过外部形状大小的形状（[图 1-21](#figure1-21)）。
- en: '![f01021](image_fi/279547c01/f01021.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![f01021](image_fi/279547c01/f01021.png)'
- en: 'Figure 1-21: Two slightly larger cuboids subtracted from an outer cuboid'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-21：从外部立方体中减去两个稍微更大的立方体
- en: 'Once you’ve removed the ghost shapes, the remaining shape should contain no
    shimmering walls ([Figure 1-22](#figure1-22)):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你删除了幽灵形状，剩余的形状应不包含任何闪烁墙壁（[图 1-22](#figure1-22)）：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![f01022](image_fi/279547c01/f01022.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![f01022](image_fi/279547c01/f01022.png)'
- en: 'Figure 1-22: A subtracted shape that is fit for 3D printing'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-22：适合3D打印的减去形状
- en: You should now be able to 3D-print this design.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够3D打印这个设计了。
- en: Carving Out Overlapping Shapes with intersection
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`intersection`操作雕刻重叠形状
- en: 'You can also carve away everything *except* the overlapping portion of two
    shapes by using the `intersection` operation ([Figure 1-23](#figure1-23)):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用`intersection`操作（[图 1-23](#figure1-23)）雕刻出两个形状的重叠部分以外的所有部分。
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![f01023](image_fi/279547c01/f01023.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![f01023](image_fi/279547c01/f01023.png)'
- en: 'Figure 1-23: The cutout of an overlapping sphere and cuboid, drawn with the
    `intersection` operation'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-23：使用`intersection`操作绘制的重叠球体和立方体的切割图
- en: First, indicate the `intersection` operation followed by parentheses, and then
    enter at least two commands between curly brackets. Unlike with the `difference`
    operation, the order in which you include the shapes doesn’t matter with `intersection`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，指明`intersection`操作，后跟圆括号，然后在大括号之间输入至少两个命令。与`difference`操作不同，在`intersection`中，包含形状的顺序无关紧要。
- en: Grouping Shapes with union
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`union`操作组合形状
- en: 'To group shapes into a single entity, use the `union` operation ([Figure 1-24](#figure1-24)):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要将形状组合成一个实体，使用`union`操作（[图 1-24](#figure1-24)）：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![f01024](image_fi/279547c01/f01024.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![f01024](image_fi/279547c01/f01024.png)'
- en: 'Figure 1-24: A sphere and a cuboid grouped together with a `union` operation'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-24：使用`union`操作将球体和立方体组合在一起
- en: The `union` operation combines all the shapes inside the curly brackets into
    one shape. Indenting all the lines that come between the curly brackets makes
    your code readable and easy to understand. Similar to `intersection` and `difference`,
    there’s no way to modify the `union` operation, so you’ll never need to put any
    information inside its parentheses.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`union`操作将大括号内的所有形状合并为一个形状。对大括号之间的所有行进行缩进，使代码可读且易于理解。与`intersection`和`difference`类似，`union`操作无法修改，因此你永远不需要在其圆括号内添加任何信息。'
- en: 'Although it appears as if you can combine shapes by simply drawing them on
    top of each other, each shape will still remain a separate entity. This can be
    a problem when using the `difference` operation, as that operation subtracts only
    from the first shape inside the curly brackets. To avoid this problem, you can
    group multiple shapes into one shape by using the `union` operation. Include this
    grouped shape within `difference` as the first shape. For example, the following
    program uses the `union` operation to subtract a sphere from two shapes at once
    ([Figure 1-25](#figure1-25)):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管看起来你可以通过简单地将形状画在一起合并它们，但每个形状仍然保持独立实体。当使用 `difference` 操作时，这可能会成为问题，因为该操作仅从大括号中的第一个形状中进行减法。为避免这个问题，你可以通过使用
    `union` 操作将多个形状组合成一个形状。然后，将这个组合形状作为第一个形状包含在 `difference` 中。例如，下面的程序使用 `union`
    操作同时从两个形状中减去一个球体（见[图 1-25](#figure1-25)）：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![f01025](image_fi/279547c01/f01025.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![f01025](image_fi/279547c01/f01025.png)'
- en: 'Figure 1-25: A sphere subtracted from a cylinder and a cuboid grouped together
    with `union`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-25：一个球体从圆柱体中减去并与`union`结合在一起的立方体
- en: OpenSCAD first combines the cube and cylinder into one shape, and then subtracts
    the sphere from that new shape. Without the `union` operation, OpenSCAD would,
    instead, subtract both the cylinder and sphere from the cuboid ([Figure 1-26](#figure1-26)).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD 首先将立方体和圆柱体组合成一个形状，然后从该新形状中减去球体。如果没有 `union` 操作，OpenSCAD 将分别从立方体中减去圆柱体和球体（见[图
    1-26](#figure1-26)）。
- en: '![f01026](image_fi/279547c01/f01026.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![f01026](image_fi/279547c01/f01026.png)'
- en: 'Figure 1-26: A sphere and a cylinder subtracted from a cuboid'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-26：一个球体和一个圆柱体从立方体中减去
- en: Once you’ve created a complex shape with `difference`, `intersection`, or `union`,
    a computer can easily break it into geometric primitives to generate an accurate
    3D model of your design. You can then print this complex 3D model on a 3D printer
    or import it into a 3D virtual reality program.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你通过 `difference`、`intersection` 或 `union` 创建了一个复杂形状，计算机可以轻松地将其分解为几何原型，以生成你设计的准确
    3D 模型。然后，你可以在 3D 打印机上打印这个复杂的 3D 模型，或者将其导入到 3D 虚拟现实程序中。
- en: Getting Ready for 3D Printing
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备 3D 打印
- en: When you’re ready to send your OpenSCAD design to another application for 3D
    printing, you’ll need to export an *.stl* version of your design from OpenSCAD.
    You can then import this file into your 3D printing preparation software to adjust
    the settings, then turn it into a physical object with a 3D printer.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备将 OpenSCAD 设计发送到另一个应用程序进行 3D 打印时，你需要从 OpenSCAD 导出设计的 *.stl* 版本。然后，你可以将此文件导入到
    3D 打印准备软件中，调整设置，再用 3D 打印机将其转化为物理对象。
- en: To export an *.stl* version of your design, first render your design by clicking
    the **Render** button (circled in red in [Figure 1-27](#figure1-27)). Whereas
    Preview generates a quick picture of your model, Render fully calculates all of
    the surfaces needed to define the model. Especially complex designs require more
    surfaces and might have slow Render times as a result.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要导出设计的 *.stl* 版本，首先通过点击**渲染**按钮（在[图 1-27](#figure1-27)中以红色圈出）渲染你的设计。而预览功能生成的是模型的快速图像，渲染则完全计算出定义模型所需的所有表面。特别复杂的设计需要更多的表面，因此渲染时间可能较慢。
- en: '![f01027](image_fi/279547c01/f01027.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![f01027](image_fi/279547c01/f01027.png)'
- en: 'Figure 1-27: Rendering a design with the Render button'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-27：使用渲染按钮渲染设计
- en: Finally, export your design as an *.stl* by selecting **File**▶**Export**▶**Export
    as STL** ([Figure 1-28](#figure1-28)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，选择**文件**▶**导出**▶**导出为 STL**将设计导出为 *.stl* 文件（见[图 1-28](#figure1-28)）。
- en: '![f01028](image_fi/279547c01/f01028.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![f01028](image_fi/279547c01/f01028.png)'
- en: 'Figure 1-28: Exporting a design as an *.**stl* file'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-28：将设计导出为 *.stl* 文件
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! You should now be able to create designs that include cuboids,
    spheres, and cylinders in any size and draw them in OpenSCAD’s Preview window.
    You can also import 3D shapes, smooth curves, and move shapes to anywhere along
    the x-, y-, and z-axis. Finally, you also should know how to create complex designs
    out of basic shapes by grouping, subtracting, and cutting out overlapping shapes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在你应该能够创建包括立方体、球体和圆柱体在内的任何大小的设计，并将它们绘制在 OpenSCAD 的预览窗口中。你还可以导入 3D 形状、平滑曲线，并将形状移动到
    x、y 和 z 轴上的任意位置。最后，你应该知道如何通过分组、减法和切割重叠的形状来创建由基本形状构成的复杂设计。
- en: 'Here are some important points to remember:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些需要记住的重要事项：
- en: The name of an OpenSCAD command describes the type of shape you’d like to draw.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSCAD 命令的名称描述了你希望绘制的形状类型。
- en: Commands are followed by parentheses. Information inside parentheses `( )` modifies
    a command. The values inside the parentheses are called *parameters*. You can
    think of parameters as adjectives that describe characteristics of the shape.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令后跟括号。括号`( )`内的信息修改命令。括号内的值被称为*参数*。你可以把参数看作是描述形状特征的形容词。
- en: A semicolon (`;`) marks the end of most statements. Statements can include both
    commands and operations.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分号（`;`）标志着大多数语句的结束。语句可以包含命令和操作。
- en: Use the `translate` operation to move your shapes around the Preview window.
    Indicate the amount and direction of movement by changing the vector parameter
    of the `translate` operation.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`translate`操作来移动预览窗口中的形状。通过改变`translate`操作的向量参数来指示移动的数量和方向。
- en: Square brackets (`[ ]`) collect numbers together to form a vector. The order
    of the numbers inside a vector is important.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号（`[ ]`）将数字组合在一起形成一个向量。向量内数字的顺序很重要。
- en: Boolean operations use curly brackets (`{ }`) to collect multiple shapes together.
    These curly brackets also form a complete OpenSCAD statement and do not require
    a semicolon to end the statement.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔操作使用花括号（`{ }`）将多个形状组合在一起。这些花括号也构成一个完整的OpenSCAD语句，并且不需要使用分号来结束语句。
- en: Parentheses, square brackets, and curly brackets always come in pairs.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 括号、方括号和花括号总是成对出现。
- en: '`$fn` can be used as a parameter to change the smoothness of a single shape.
    You can also set `$fn` to a high value at the beginning of your code to generate
    smooth curves for every shape in a design. High values for `$fn` can result in
    slow rendering times.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$fn`可以作为参数来改变单个形状的平滑度。你也可以在代码的开始处将`$fn`设置为一个高值，以便为设计中的每个形状生成平滑曲线。较高的`$fn`值可能会导致渲染时间变慢。'
- en: Use indentation to help make your code readable and easy to understand.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缩进来帮助使你的代码更具可读性和易于理解。
- en: A design must be *rendered* before it can be exported as an *.stl* file.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计必须在导出为*.stl*文件之前先进行*渲染*。
