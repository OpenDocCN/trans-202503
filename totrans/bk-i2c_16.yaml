- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TCA9548A I²C Bus Expander
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: The I²C bus’s 112 nonreserved peripheral addresses are more than enough for
    almost any system; you’ll reach bus capacitance limits long before you put this
    many devices on the bus. However, since devices tend to hard-code their addresses
    into the hardware, only a limited number of identical devices can appear on the
    same I²C bus. Furthermore, because hundreds or thousands of I²C peripherals exist,
    there are often address conflicts between different I²C devices. The 10-bit addressing
    scheme was created to alleviate this problem, but few devices and fewer controllers
    take advantage of this feature. If you want to put two devices with the same address
    on the I²C bus, you’ll need to use an I²C bus expander.
  prefs: []
  type: TYPE_NORMAL
- en: 'I²C *bus expanders*, also known as *bus multiplexers* or *bus switches*, allow
    you to switch a single I²C bus between two, four, or eight separate I²C buses.
    In sum, you program one of these multiplexers to switch an incoming pair of I²C
    lines to one of the sets of lines the IC supports. Common I²C multiplexer ICs
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'TCA9543A: Switches one I²C bus between two separate buses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TCA9545A: Switches one I²C bus between four separate buses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TCA9548A: Switches one I²C bus between eight separate buses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter focuses on the TCA9548A IC, since it supports the greatest number
    of buses. Both Adafruit and SparkFun provide breakout boards for it, which this
    chapter also discusses.
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 The TCA9548A I²C Multiplexer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The TCA9548A is, perhaps, the most popular I²C multiplexer used by hobbyists
    because several manufacturers provide breakout boards for it. Therefore, the remainder
    of this chapter will discuss that particular device (the TCA9543A and TCA9545A
    devices provide a subset of the TCA9548A’s capabilities, so studying the latter
    will tell you most of what you need to know concerning these other devices). The
    following subsections describe connecting devices, programming the register set,
    and programming the TCA9548A.
  prefs: []
  type: TYPE_NORMAL
- en: The TCA9548A contains nine (SDA, SCL) pairs on the chip. The datasheet names
    the main lines from the controller device (SDA, SCL) and names the other eight
    pairs (SD0, SC0), (SD1, SC1), . . . , (SD7, SC7).
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.1 Upstream and Downstream Devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Devices on the same I²C bus as the TCA9548A are called *upstream devices* because
    they are on the main I²C bus before any of the switched I²C buses. Those switched
    buses are *downstream* from the TCA9548A. Upstream devices respond to addresses
    directly from the controller device, without any switching (or masking) on the
    part of the multiplexer. Therefore, if an upstream device shares the same address
    as a downstream device, the two devices will have an address conflict when the
    TCA9548A switches on the bus to which the downstream device is connected.
  prefs: []
  type: TYPE_NORMAL
- en: The TCA9548A is a device on the I²C bus, meaning it can appear on the same physical
    SDA and SCL lines as other devices (see [Figure 12-1](#figure12-1)). I will refer
    to the main lines as the *upstream* pair and the remaining eight sets of lines
    as the *downstream* pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the downstream (SDA, SCL) pairs forms its own I²C bus, which can be
    operated independently of the other seven downstream pairs. By switching the upstream
    lines to one of the downstream pairs (under program control), a system with a
    TCA9548A can expand a single I²C bus into eight.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c12/f12001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-1: Upstream and downstream devices'
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.2 The TCA9548A Selection Register
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TCA9548A is one of the simpler I²C devices from a software perspective.
    The device has one 8-bit read/write register that appears at its I²C address.
    Writing data to the device selects which output bus to use; reading from the device
    reads the last value written to it (0 is written to the register on power-up).
  prefs: []
  type: TYPE_NORMAL
- en: The register on the TCA9548A is a bit map used to select which downstream pairs
    connect to the upstream bus. A 1 in bit position 0 connects the upstream (SDA,
    SCL) lines to (SD0, SC0), a 1 in bit position 1 connects (SDA, SCL) to (SD1, SC1)
    and so on. A 1 in bit position 7 connects (SDA, SCL) to (SD7, SC7).
  prefs: []
  type: TYPE_NORMAL
- en: 'Though it’s possible to write multiple 1 bits to various positions in the TCA9548A
    register, you normally wouldn’t want to do this, since it could produce conflicts
    on the I²C bus if it attempts to simultaneously access two different devices.
    One reason for writing multiple 1 bits to the register is to send a general call
    command to devices on all the downstream buses. However, most of the time, you
    should ensure that you write only a single 1 bit to the register. Note that writing
    all 0s to the register is reasonable: doing so turns off all the downstream pairs,
    in which case the controller can talk only to devices that are upstream of the
    TCA9548A (that is, on the main, or upstream, SDA and SCL lines).'
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.3 TCA9548A Address and Reset Lines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TCA9548A can respond to an I²C address in the range 0x70 through 0x77\.
    The chip has three address lines (A0, A1, and A2) that can be tied to Gnd or Vcc
    to select the address (the TCA9548A uses A0, A1, and A2 as the LO 3 bits of its
    address). This chapter will generally assume that the TCA9548A is configured for
    address 0x70, unless otherwise specified. To write to the on-board register, simply
    write a byte to the TCA9548A’s address on the I²C bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the three address lines and the main (upstream) SDA and SCL
    lines, the TCA9548A has one other important input: reset. Briefly pulling the
    reset line low will reset the device (writing a 0 to the internal register). The
    datasheet claims that you can use this line to recover from a bus fault condition.
    Generally, you would connect this reset line to a digital I/O pin on your CPU
    or simply tie it high (typically through a 10-kΩ pullup resistor).'
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.4 The TCA9548A Power Supply, Pullups, and Level Shifting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TCA9548A operates off any voltage in the range 1.65 V to 5.0 V, so it works
    with 1.8-V, 2.5-V, 3.3-V, or 5-V logic. All the pins are 5-V tolerant regardless
    of the power supply voltage, meaning you can use the TCA9548A as an I²C level
    shifter.
  prefs: []
  type: TYPE_NORMAL
- en: Because the I²C bus is open drain, the actual voltage appearing on the SDA and
    SCL lines is determined by the pullup resistor connection for both upstream and
    downstream signals. If you have a 3.3-V system, then SDA and SCL (upstream) will
    likely be pulled up to 3.3 V. To be safe, you’d probably run the TCA8845A at 3.3
    V as well. However, you can switch to a downstream channel (say, SD3 and SC3)
    and connect it to a 5-V device with 5-V pullup resistors on that downstream bus.
    The SD3 and SC3 pins on the TCA9548A will handle the 5-V signal just fine, without
    passing this voltage on to the controller device running at 3.3 V.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, if your controller is running at 5 V and you power the TCA9548A
    at 5 V, you can connect one of the downstream channels to a 3.3-V system by simply
    using pullups to 3.3 V on that channel’s lines.
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.5 Reducing Bus Loading and Bus Speed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to acting as a level shifter, the TCA9548A can reduce (capacitive)
    loading on the I²C bus. Suppose you have a dozen devices on an I²C bus and the
    loading is forcing you to run at 100 kHz instead of 400 kHz. You can use a TCA9548A
    to spread out those 12 devices across 8 or 9 buses, including the original upstream
    bus, to reduce capacitive loading. Even if there are no address conflicts, the
    TCA9548A is useful in this capacity.
  prefs: []
  type: TYPE_NORMAL
- en: The TCA9548A, by the way, can operate at normal (100 kHz) or fast (400 kHz)
    speed. It does not operate at fast mode plus (1 MHz) or faster.
  prefs: []
  type: TYPE_NORMAL
- en: 12.1.6 Switching Between Buses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As I mentioned earlier, you activate a downstream bus by writing a 1 to the
    corresponding bit position in the TCA9548A register (and 0s to all the other bit
    positions). If you have three devices on downstream buses (SD0, SC0), (SD1, SC1),
    and (SD2, SC2) and you want to send data to each of these devices, use this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Write 0x01 (0b0000_0001) to the TCA9548A at address 0x70.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the data to the device on (SD0, SC0) by simply writing to SDA and SCL
    as though it were an upstream device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write 0x02 (0b0000_0010) to the TCA9548A to activate (SD1, SC1).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write to the second device on (SD1, SC1), just treating it as if it were an
    upstream device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write 0x04 (0b0000_0100) to the TCA9548A to activate (SD2, SC2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write to the third device on (SD2, SC2), just treating it as if it were an upstream
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (optional) Write 0x0 to the TCA9548A to disable all downstream buses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As noted earlier, no upstream devices at any I²C address should appear on a
    downstream bus. That would create a conflict between the device on the upstream
    and downstream buses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 12.1.7 Cascading TCA9548A Multiplexers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because the TCA9548A has three address lines, you can place up to eight of them
    on the same I²C bus. This gives you access to 64 (roughly) independent I²C buses
    driving from the same pair of SDA and SCL lines on the controller; that’s 112
    × 64 = 7,168 independent addresses. If this isn’t sufficient, you can cascade
    the multiplexers. Each downstream level needs a unique address, within a given
    level (that is, all TCA9548A devices connected to the outputs of the same TCA9548A
    can have the same address). In [Figure 12-2](#figure12-2), for example, the top
    TCA9548A could have address 0x70, the light gray ones could have address 0x71,
    and the dark gray ones could all have address 0x72.
  prefs: []
  type: TYPE_NORMAL
- en: To write to a device connected to the rightmost TCA9548A in [Figure 12-2](#figure12-2)
    (assuming channels from left to right are numbered 0 to 7), you’d start by writing
    0x80 (0b1000_0000) to the TCA9548A at address 0x70 (the one connected directly
    to the controller). You would then write 0x80 to address 0x71 (corresponding to
    the rightmost light gray TCA9548A) and finally select the bus you wanted on the
    rightmost dark gray TCA9548A by writing the bus setting to address 0x72\.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, cascading TCA9548A devices in this manner is likely to create all
    types of timing and loading problems, so I wouldn’t recommend it. The only good
    reason to cascade multiplexers would be because you need more than eight buses
    and there’s only one open address in the range 0x70 through 0x77 on your upstream
    bus.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c12/f12002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-2: Cascading TCA9548A multiplexers'
  prefs: []
  type: TYPE_NORMAL
- en: Because the TCA9548A is a surface mount device (SMD), it’s a bit difficult to
    wire into a typical breadboard or prototype circuit. Fortunately, Adafruit, SparkFun,
    and other manufacturers provide breakout boards that make these devices easy to
    use. The following sections describe these breakout boards.
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 The Adafruit TCA9548A I²C Expander
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Adafruit TCA9548A I²C Expander is a traditional breakout board, containing
    a single TCA9548A with the pins brought out on 0.1-inch centers (see the smaller
    breakout board in [Figure 12-3](#figure12-3)). It also provides a bypass capacitor;
    pullup resistors for SDA, SCL, and reset; and three pulldown resistors that pull
    A0, A1, and A2 to Gnd so the device defaults to address 0x70\. There are solder
    jumpers on the back of the PCB so you can cut the pullup resistors to SDA and
    SCL (in case you’ve already got pullups on the upstream bus) and also set the
    address.
  prefs: []
  type: TYPE_NORMAL
- en: The Adafruit breakout board does not put pullup resistors on the downstream
    buses. Many breakout boards such as those from Adafruit and SparkFun include pullup
    resistors, so they wouldn’t be necessary on the TCA9548A I²C Expander. Even more
    importantly, if you want to use this board as a level shifter, you want to be
    able to control what voltage the pullup resistors connect to. However, don’t forget
    that if you connect some I²C IC directly to a downstream bus, you have to add
    the pullup resistors yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c12/f12003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-3: The SparkFun I²C Mux and Adafruit TCA9548A I²C Expander'
  prefs: []
  type: TYPE_NORMAL
- en: 12.3 The SparkFun I²C Mux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SparkFun’s I²C Mux device (see [Figure 12-3](#figure12-3)) is handy if you
    work with Qwiic devices: it accepts an upstream Qwiic connector, routes it through
    the board if you want to connect other upstream devices, and then provides the
    eight downstream buses on Qwiic connectors.'
  prefs: []
  type: TYPE_NORMAL
- en: There are some major differences between the SparkFun implementation and the
    Adafruit TCA9548A I²C Expander. First, because it’s Qwiic based, the SparkFun
    expander is largely a 3.3-V device only (though see the next note). The SparkFun
    board provides pullup resistors for downstream and upstream buses at 3.3 V; you
    can remove the upstream pullups by cutting some traces, but you don’t have this
    option with the pullups on the downstream buses.
  prefs: []
  type: TYPE_NORMAL
- en: The second major difference between the SparkFun and Adafruit boards is size.
    Because the SparkFun board includes 10 Qwiic connectors (2 for the upstream bus,
    8 for the downstream buses), the board is quite a bit larger than the Adafruit
    device (see [Figure 12-3](#figure12-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Beyond these issues, the functionality of the SparkFun and Adafruit boards is
    exactly the same. Personally, if I were using Qwiic system parts, I’d use the
    SparkFun board; otherwise, I’d probably use the Adafruit board.
  prefs: []
  type: TYPE_NORMAL
- en: 12.4 Chapter Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter discussed three different I²C multiplexers: the TCA9543A, TCA9545A,
    and TCA9548A. These ICs allow you to expand a single I²C bus to two, four, or
    eight independent buses. This chapter discussed making device connections (upstream
    and downstream) to the multiplexers, programming the multiplexer, and connecting
    the multiplexer to an I²C bus. It also described how to use the TCA9548A as a
    level shifter and commented on the operating frequency of the device. This chapter
    concluded the generic discussion of the TCA9548A by describing how to cascade
    devices to support more than eight additional I²C buses.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this chapter described two breakout boards manufactured by Adafruit
    and SparkFun. The Adafruit I²C Expander board is a traditional breakout board,
    bringing out the pins on a TCA9548A IC to 0.1-inch–centered pins on a small PCB.
    The SparkFun I²C Mux provides eight Qwiic connectors (rather than pins) for expanding
    the bus.
  prefs: []
  type: TYPE_NORMAL
