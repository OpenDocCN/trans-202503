["```\n// Project #66 - Basic web page server\n\n#include <WiFi.h>\nWiFiServer server(80); // Set web server port to 80\n\nchar* ssid = \"`name`\";\nchar* password = \"`password`\";\n\nString request; // Stores HTTP request from client (web browser)\nunsigned long currentTime = millis();\nunsigned long previousTime = 0;\nconst long timeoutTime = 2000; // Allowed client connection time\n\nvoid setup()\n{\n    Serial.begin(115200);\n    // Connect to Wi-Fi network:\n    Serial.print(\"Connecting to \");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    // Show indicator while waiting for connection:\n    {\n        delay(500);\n        Serial.print(\".\");\n    }\n    Serial.println(); // Display local IP address on Serial Monitor\n    Serial.print(\"Connected, IP address: \");\n    Serial.println(WiFi.localIP());\n    // Start web server:\n    server.begin();\n}\n\nvoid loop()\n{\n    String millisValue;\n    String textLine = \" \";\n    // Listen for incoming clients from web browser\n    WiFiClient client = server.available(); ❶\n    if (client) // If a request received\n    {\n        currentTime = millis();\n        previousTime = currentTime;\n        Serial.println(\"New client connected\");\n        String currentLine = \" \";\n        while (client.connected() && (currentTime - previousTime <= timeoutTime))\n        {// Stay connected for timeoutTime\n            currentTime = millis();\n            if (client.available())\n            {\n                char c = client.read();\n                Serial.write(c);\n request += c;\n                if (c == '\\n') // Client request has finished\n                {\n                    if (currentLine.length() == 0)\n                    {\n                        // Send HTTP response back to client: ❷\n                        client.println(\"HTTP/1.1 200 OK\");\n                        client.println(\"Content-type:text/html\");\n                        client.println(\"Connection: close\");\n                        client.println();\n\n                        // Build web page for display on browser:\n                        client.println(\"<!DOCTYPE html><html><body>\");\n\n                        // Now HTML for your page:\n                        client.println(\"<h1>millis() server</h1>\"); ❸\n                        millisValue = String(millis());\n                        textLine += \"<p>ESP32 board uptime is : \";\n                        textLine += millisValue;\n                        textLine += \" milliseconds</p>\";\n\n                        client.println(textLine);\n                        client.println(\"</body></html>\"); ❹\n                        // End the response to client request:\n                        client.println();\n                        break;\n                    } else\n                    {// If you received a newline, clear currentLine:\n                        currentLine = \" \";\n                    }\n                } else if (c != '\\r')\n                {\n                    currentLine += c;\n                }\n            }\n        }\n        request = \" \";\n        // Close connection to client:\n        client.stop(); ❺\n        Serial.println(\"Disconnected.\");\n    }\n}\n```", "```\nHTTP/1.1 200 OK\nContent-type:text/html\nConnection: close \n```", "```\n<h1>millis() server</h1>\n<p>ESP32 board uptime is : `millis` </p> \n```", "```\n// Project #67 - ESP32 I/O monitor\n\n#include <WiFi.h>\nWiFiServer server(80); // Set web server port to 80\n\nchar* ssid = \"`SSID`\";\nchar* password = \"`password`\";\n\nString request; // Stores HTTP request from client (web browser)\n\nunsigned long currentTime = millis();\nunsigned long previousTime = 0;\nconst long timeoutTime = 2000; // Allowed client connection time\n\nvoid setup()\n{\n    Serial.begin(115200);\n    pinMode(18, INPUT);\n    pinMode(19, INPUT);\n    pinMode(23, INPUT);\n    pinMode(5, INPUT);\n\n    // Connect to Wi-Fi network:\n    Serial.print(\"Connecting to \");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n while (WiFi.status() != WL_CONNECTED)\n    // Show indicator while waiting for connection:\n    {\n        delay(500);\n        Serial.print(\".\");\n    }\n    Serial.println(); // Display local IP address on Serial Monitor\n    Serial.print(\"Connected, IP address: \");\n    Serial.println(WiFi.localIP());\n    // Start web server\n    server.begin();\n}\n\nvoid loop()\n{\n    String textLine = \" \"; ❶\n    int IO18, IO19, IO23, IO5;\n    float IO2, IO4, IO35, IO34;\n    float IO2A, IO4A, IO35A, IO34A;\n    String IO2S, IO4S, IO35S, IO34S;\n    // Listen for incoming clients from web browser:\n    WiFiClient client = server.available();\n    if (client) // If a request received\n    {\n        currentTime = millis();\n        previousTime = currentTime;\n        Serial.println(\"New client connected\");\n        String currentLine = \" \";\n        while (client.connected() && (currentTime - previousTime <= timeoutTime))\n        {// Stay connected for timeoutTime:\n            currentTime = millis();\n            if (client.available())\n            {\n                char c = client.read();\n                Serial.write(c);\n                request += c;\n                if (c == '\\n') // Client request has finished\n                {\n                    if (currentLine.length() == 0)\n                    {\n\n                        // Send HTTP response back to client:\n                        client.println(\"HTTP/1.1 200 OK\");\n                        client.println(\"Content-type:text/html\");\n                        client.println(\"Connection: close\");\n                        client.println();\n\n                        // Build web page for display on browser:\n                        client.println(\"<!DOCTYPE html><html><body>\");\n\n                        // Now HTML for your page:\n                        client.println(\"<h1>ESP32 I/O Monitor</h1>\"); ❷\n                        client.print (\"<p> Status as of last update.\");\n                        client.println(\"Refresh browser for latest values.</p>\");\n                        client.println(\"<hr>\");\n\n IO18 = digitalRead(18); ❸\n                        IO19 = digitalRead(19);\n                        IO23 = digitalRead(23);\n                        IO5 = digitalRead(5);\n\n                        IO2 = analogRead(2);\n                        IO4 = analogRead(4);\n                        IO35 = analogRead(35);\n                        IO34 = analogRead(34);\n\n                        IO2A = ((IO2 / 4096) * 3.3); ❹\n                        IO4A = ((IO4 / 4096) * 3.3);\n                        IO35A = ((IO35 / 4096) * 3.3);\n                        IO34A = ((IO34 / 4096) * 3.3);\n\n                        client.println(\"<p><b>Digital Input Status:</b></p>\"); ❺\n                        textLine += \"<p>Digital pin IO18 is \";\n                        if (IO18 == 1)\n                        {\n                            textLine += \"HIGH\";\n                        } else\n                        {\n                          textLine += \"LOW</p>\";\n                        }\n                        client.println(textLine);\n                        textLine = \" \";\n                        textLine += \"<p>Digital pin IO19 is \";\n                        if (IO19 == 1)\n                        {\n                            textLine += \"HIGH\";\n                        } else\n                        {\n                            textLine += \"LOW</p>\";\n                        }\n                        client.println(textLine);\n                        textLine = \" \";\n                        textLine += \"<p>Digital pin IO23 is \";\n                        if (IO23 == 1)\n                        {\n                            textLine += \"HIGH\";\n                        } else\n                        {\n                            textLine += \"LOW</p>\";\n                        }\n                        client.println(textLine);\n                        textLine = \" \";\n                        textLine += \"<p>Digital pin IO5 is \";\n                        if (IO5 == 1)\n                        {\n                          textLine += \"HIGH\";\n                        } else\n                        {\n                            textLine += \"LOW</p>\";\n                        }\n client.println(textLine);\n                        textLine = \" \";\n                        client.println(\" \");\n                        client.println(\"<p><b>Analog Input Status:</b></p>\"); ❻\n                        textLine += \"Analog pin IO2 raw value: \";\n                        textLine += String(IO2);\n                        textLine += \"; Voltage (V): \";\n                        client.println(textLine);\n                        client.println(IO2A);\n                        client.println(\"</p>\");\n                        textLine = \" \";\n\n                        textLine += \"Analog pin IO4 raw value: \";\n                        textLine += String(IO4);\n                        textLine += \"; Voltage (V): \";\n                        client.println(textLine);\n                        client.println(IO4A);\n                        client.println(\"</p>\");\n                        textLine = \" \";\n\n                        textLine += \"Analog pin IO35 raw value: \";\n                        textLine += String(IO35);\n                        textLine += \"; Voltage (V): \";\n                        client.println(textLine);\n                        client.println(IO35A);\n                        client.println(\"</p>\");\n                        textLine = \" \";\n\n                        textLine += \"Analog pin IO34 raw value: \";\n                        textLine += String(IO34);\n                        textLine += \"; Voltage (V): \";\n                        client.println(textLine);\n                        client.println(IO34A);\n                        client.println(\"</p>\");\n                        textLine = \" \";\n                        client.println(\"<hr>\");\n\n                        client.println(\"</body></html>\"); ❼\n                        // End the response to client request:\n                        client.println();\n                        break;\n                    } else\n                    {// If you received a newline, clear currentLine:\n                        currentLine = \" \";\n                    }\n                } else if (c != '\\r')\n                {\n                    currentLine += c;\n                }\n            }\n        }\n request = \" \";\n        // Close connection to client:\n        client.stop();\n        Serial.println(\"Disconnected.\");\n    }\n}\n```", "```\n// Project #68 - ESP32 time and weather server\n\n#include <Adafruit_BMP085.h>\nAdafruit_BMP085 bmp;\n#include <NTPClient.h>\n#include <WiFi.h>\n#include <WiFiUdp.h>\nWiFiUDP ntpUDP;\nWiFiServer server(80); // Set web server port to 80\n\nchar* ssid = \"`SSID`\";\nchar* password = \"`password`\";\n\n// ntpUDP, time server pool, offset in seconds, update interval (mS)\nNTPClient timeClient(ntpUDP, \"`0.au.pool.ntp.org`\", 36000, 60000);\n\nString request; // Stores HTTP request from client (web browser)\n\nunsigned long currentTime = millis();\nunsigned long previousTime = 0;\nconst long timeoutTime = 2000; // Allowed client connection time\n\nvoid setup()\n{\n    Serial.begin(115200);\n    bmp.begin();\n    // Connect to Wi-Fi network\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(500);\n        Serial.print(\".\");\n    }\n    Serial.println(); // Display local IP address on Serial Monitor\n    Serial.print(\"Connected, IP address: \");\n    Serial.println(WiFi.localIP());\n    // Start web server\n    server.begin();\n}\n\nvoid loop()\n{\n    String dateString;\n    String date, month, year;\n\n    // Listen for incoming clients from web browser:\n    WiFiClient client = server.available();\n    if (client) // If a request received\n    {\n        currentTime = millis();\n        previousTime = currentTime;\n        Serial.println(\"New client connected\");\n        String currentLine = \" \";\n        while (client.connected() && (currentTime - previousTime <= timeoutTime))\n        {// Stay connected for timeoutTime\n            currentTime = millis();\n            if (client.available())\n            {\n                char c = client.read(); // Display data from client on Serial Monitor\n                Serial.write(c);\n                request += c;\n                if (c == '\\n') // Client request has finished\n                {\n                    if (currentLine.length() == 0)\n                    {\n                        // Send HTTP response back to client\n                        client.println(\"HTTP/1.1 200 OK\");\n                        client.println(\"Content-type:text/html\");\n                        client.println(\"Connection: close\");\n                        client.println();\n // Build web page for display on browser:\n                        client.println(\"<!DOCTYPE html><html><body>\");\n                        client.println(\"<h1>ESP32 Time and Weather Server</h1>\");\n                        client.println(\"<p>Refresh browser for latest information.</p>\");\n                        client.println(\"<hr>\");\n                        client.print(\"<p>Time: \");\n                        timeClient.update();\n                        client.print(timeClient.getFormattedTime()); ❶\n                        client.print(\"</p>\");\n                        client.print(\"<p>Today is \");\n                        switch (timeClient.getDay()) ❷\n                        {\n                            case 0: client.print(\"Sunday \"); break;\n                            case 1: client.print(\"Monday \"); break;\n                            case 2: client.print(\"Tuesday \"); break;\n                            case 3: client.print(\"Wednesday \"); break;\n                            case 4: client.print(\"Thursday \"); break;\n                            case 5: client.print(\"Friday \"); break;\n                            case 6: client.print(\"Saturday \"); break;\n                            case 7: client.print(\"Sunday \"); break;\n                        }\n                        // Retrieve and format date display:\n                        dateString = timeClient.getFormattedDate(); ❸\n                        date = dateString.substring(8, 10);\n                        client.print(date);\n                        client.print(\"/\");\n                        month = dateString.substring(5, 7);\n                        client.print(month);\n                        client.print(\"/\");\n                        year = dateString.substring(0, 4);\n                        client.print(year);\n                        client.print(\"</p>\");\n                        client.println(\"<hr>\"); ❹\n                        client.print(\"<p>Current temperature (C): \");\n                        client.print(bmp.readTemperature()); ❺\n                        client.print(\"</p>\");\n                        client.print(\"<p>Current air pressure at \");\n                        client.print(\"sea level (calculated) (Pa): \");\n                        client.print(bmp.readSealevelPressure()); ❻\n                        client.print(\"</p>\");\n                        client.println(\"<hr>\");\n                        client.println(\"</body></html>\"); ❼\n                        // End the response to client request\n                        client.println();\n                        break;\n                        } else\n                            {// If you received a newline, clear currentLine:\n                                currentLine = \" \";\n                        }\n                } else if (c != '\\r')\n                {\n currentLine += c;\n                }\n            }\n        }\n        request = \" \";\n        // Close connection to client:\n        client.stop();\n        Serial.println(\"Disconnected.\");\n    }\n}\n```"]