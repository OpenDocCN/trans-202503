["```\n/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n```", "```\n/^(\\d{1,3}\\.){3}\\d{1,3}$/\n```", "```\n81.198.240.140\n1.2.3.4\n5.5\n444.444.444.444\n90.9000.90000.90000\n127.0.0.1\n```", "```\nperl -ne 'print if /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/'\n```", "```\n81.198.240.140\n1.2.3.4\n444.444.444.444\n127.0.0.1\n```", "```\n/^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/\n```", "```\nperl -le '\n  map { $n++ if /^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/ } 0..255;\n  END { print $n }\n'\n```", "```\nperl -le '\n  map { $n++ if /^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/ } 0..1000;\n  END { print $n }\n'\n```", "```\nmy $ip_part = qr/[0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]/;\nif ($ip =~ /^$ip_part\\.$ip_part\\.$ip_part\\.$ip_part$/) {\n  print \"valid ip\\n\";\n}\n```", "```\nif ($ip =~ /^($ip_part\\.){3}$ip_part$/) {\n  print \"valid ip\\n\";\n}\n```", "```\n81.198.240.140\n1.2.3.4\n5.5\n444.444.444.444\n90.9000.90000.90000\n127.0.0.1\n```", "```\nperl -ne '\n  $ip_part = qr{([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])};\n  print if /^($ip_part\\.){3}$ip_part$/\n'\n```", "```\n81.198.240.140\n1.2.3.4\n127.0.0.1\n```", "```\n/\\S+@\\S+\\.\\S+/\n```", "```\nuse Email::Valid;\nprint Email::Valid->address('cats@catonmat.net') ? 'valid email' : 'invalid email';\n```", "```\nperl -MEmail::Valid -ne 'print if Email::Valid->address($_)'\n```", "```\n/^\\d+$/\n```", "```\n/^[+-]?\\d+$/\n```", "```\n/^[+-]?\\d+\\.?\\d*$/\n```", "```\nperl -MRegexp::Common -ne 'print if /$RE{num}{real}/'\n```", "```\n/^0x[0-9a-f]+$/i\n```", "```\n/^0[0-7]+$/\n```", "```\n/^[01]+$/\n```", "```\n/(*word*).*\\1/\n```", "```\n$str =~ s/(\\d+)/$1+1/ge\n```", "```\nperl -MRegexp::Common -pe 's/($RE{num}{real})/$1+1/ge'\n```", "```\n/^User-Agent: (.+)$/\n```", "```\nHost: www.catonmat.net\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_0_0; en-US)\nAccept: application/xml,application/xhtml+xml,text/html\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\n```", "```\n/[ -~]/\n```", "```\n/[^ -~]/\n```", "```\nm|<strong>([^<]*)</strong>|\n```", "```\nm|<strong>(.*?)</strong>|\n```", "```\nuse warnings;\nuse strict;\nuse HTML::TreeBuilder;\nmy $tree = HTML::TreeBuilder->new_from_content(\n  \"<strong><em>hello</em></strong>\"\n);\nmy $strong = $tree->look_down(_tag => 'strong');\nif ($strong) {\n  print $_->as_HTML for $strong->content_list;\n}\n$tree->delete;\n```", "```\n$html =~ s|<(/)?b>|<$1strong>|g\n```", "```\nuse warnings;\nuse strict;\nuse HTML::TreeBuilder;\nmy $tree = HTML::TreeBuilder->new_from_content(\"\n  <div><p><b>section 1</b></p><p><b>section 2</b></p></div>\n\");\nmy @bs = $tree->look_down(_tag => 'b');\n$_->tag('strong') for @bs;\nprint $tree->as_HTML;\n$tree->delete;\n```", "```\nmy @matches = $text =~ /*regex*/g;\n```", "```\nmy $t = \"10 hello 25 moo 30 foo\";\nmy @nums = $text =~ /\\d+/g;\n```", "```\nmy @vals = $text =~ /[^=]+=([^;]+)/g;\n```", "```\naccess=all; users=peter,alastair,bill; languages=awk,sed,perl\n```", "```\nperl -nle 'my @vals = $_ =~ /[^=]+=([^;]+)/g; print \"@vals\"'\n```", "```\nall peter,alastair,bill awk,sed,perl\n```"]