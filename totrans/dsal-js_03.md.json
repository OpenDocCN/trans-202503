["```\naxios.get(\"your/url/api\").then(**(response) => {**\n **// ...do something with the response**\n**}**)\n```", "```\nconst preOrder = (tree, **visit = (x) => console.log(x)**) => {\n  if (tree !== null) {\n    visit(tree.key);\n    preOrder(tree.left, visit);\n    preOrder(tree.right, visit);\n  }\n};\n```", "```\n❶ const myVisit = (x) => {\n  // ...do some interesting things with x\n}\n\nlet myTree = newTree();\n// ...set up myTree, add to it, etc.\n\n❷ preOrder(myTree, **myVisit**);\n```", "```\nconst under21 = (value) => value < 21;\n```", "```\nlet myArray = [22, 9, 60, 12, 4, 56];\nlet newArray = **myArray.filter(under21)**;\nconsole.log(newArray); // [9, 12, 4]\n```", "```\nlet myArray = [22, 9, 60, 12, 4, 56];\nconst under21 = (value) => value < 21;\n❶ console.log(myArray.find(under21));      **// 9**\n❷ console.log(myArray.findIndex(under21)); **// 1**\n\nconst equal21 = (value) => value === 21;\n❸ console.log(myArray.find(equal21));      **// undefined**\n❹ console.log(myArray.findIndex(equal21)); **// -1**\n```", "```\nlet myArray = [22, 9, 60, 12, 4, 56];\nconst under21 = (value) => value < 21;\nconsole.log(myArray.some(under21));  **// true**\nconsole.log(myArray.every(under21)); **// false**\n\nconst equal21 = (value) => value === 21;\nconsole.log(myArray.some(equal21));  **// false**\nconsole.log(myArray.every(equal21)); **// false**\n```", "```\nlet myArray = [22, 9, 60, 12, 4, 56];\nconsole.log(**myArray.map((x) => 10*x)**);\n// [220, 90, 600, 120, 40, 560]\n```", "```\nconst myArray = [22, 9, 60, 12, 4, 56];\nconst mySum = myArray.**reduce((a, v) => a + v, 0)**; **// 163**\n```", "```\nconst myArray = [22, 9, 60, 12, 4, 56];\nmyArray.**reduce((a, v) => ({s: a.s + v, c: a.c + 1}), {s: 0, c: 0})**;\n// {s: 163, c: 6}\n```", "```\nconst myArray = [22, 9, 60, 12, 4, 56];\n❶ let sum = 0;\n❷ myArray.forEach((v) => {\n  sum += v;\n});\n❸ console.log(sum); // 163, as earlier\n```", "```\nconst myFunction = (arg1, arg2) => {\n  // Do something with arg1 and arg2\n  // and eventually return something.\n}\n```", "```\nconst myFunction = (arg1, arg2) => {\n **console.log(\"Entering myFunction with \", arg1, arg2);**\n  // Do something with arg1 and arg2\n  // and calculate something to return.\n **const toReturn = something;**\n **console.log(\"Exiting myFunction, returning \", toReturn);**\n **return toReturn;**\n}\n```", "```\nconst addLogging = (fn) => (...args) => {\n❶ console.log(\"Entering \", fn.name, \" with \", . . .args);\n❷ const toReturn = fn(...args);\n❸ console.log(\"Exiting \", fn.name, \" returning \", toReturn);\n❹ return toReturn;\n}\n```", "```\n❶ const sum2 = (a, b) => {\n  console.log(\"Calculating...\");\n  return a+b;\n}\n\n❷ addLogging(sum2)(22, 9);\n**// Entering sum2 with 22 9**\n**// Calculating...**\n**// Exiting sum2 returning 31**\n```", "```\ndoSomething(a, b, c);\n...\nfunction doSomething(x, y, z) {\n  // ...\n  **axios.get(\"/some/url\");**\n  // ...\n}\n```", "```\n❶ const getData = (url) => axios.get(url);\n\n❷ doSomething(a, b, c, **getData**);\n\nfunction doSomething(x, y, z, getter) {\n  // ...\n  **getter(\"/some/url\");**\n  // ...\n}\n```", "```\nconst PI = 3.14159265358979;\nconst circumference = (r) => 2 * PI * r;\n```", "```\n[\"James Bond\", 0, 0, 7].map(Boolean)\n```"]