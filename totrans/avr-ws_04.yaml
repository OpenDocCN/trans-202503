- en: '[4](nsp-boxall502581-0008.xhtml#rch04)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[4](nsp-boxall502581-0008.xhtml#rch04)'
- en: Communicating with the Outside World using the USART
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用USART与外部世界进行通信
- en: '![](images/nsp-boxall502581-ct.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-ct.jpg)'
- en: This chapter will teach you to use the *universal synchronous and asynchronous
    receiver-transmitter (USART)* , a dedicated two-way port that transfers information
    from the AVR to a computer and allows the two to communicate. The USART lets you
    control your AVR projects from a computer. It can also help you debug your projects, since
    you can send status reports from the AVR back to the computer to keep track of
    the code’s progress.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何使用*通用同步异步接收发射器（USART）*，一个专用的双向端口，用于在AVR和计算机之间传输信息，允许两者进行通信。USART让你可以从计算机控制AVR项目，它还能帮助你调试项目，因为你可以从AVR向计算机发送状态报告，跟踪代码的进展。
- en: 'In this chapter you will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将：
- en: • Use terminal emulation software on your computer to act as an input and output
    device for your AVR-based projects.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用终端仿真软件将你的计算机作为输入输出设备，来支持基于AVR的项目。
- en: • Send serial data between your AVR and your computer.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在AVR和计算机之间发送串行数据。
- en: • Transfer data, including numbers and letters, from an AVR to a computer.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在AVR和计算机之间传输数据，包括数字和字母。
- en: • Familiarize yourself with ASCII codes.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 熟悉ASCII码。
- en: Along the way, you’ll learn to log temperature readings from a thermometer to
    a PC for later analysis and build a simple calculator.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，你将学会将温度计的读数记录到PC上进行后续分析，并构建一个简单的计算器。
- en: '[Introducing the USART](nsp-boxall502581-0008.xhtml#rah0601)'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[介绍USART](nsp-boxall502581-0008.xhtml#rah0601)'
- en: There are many ways for computers to communicate with one another. One method
    is to use *serial data* , the process of sequentially sending data one bit at
    a time. AVR-based projects do this using the AVR’s USART. The USART on the ATmega328P-PU
    microcontroller uses pin 2 to receive data and pin 3 to send data. Data is sent
    and received in *bytes* , where each byte represents 8 bits of data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机之间有很多种通信方式，其中一种方法是使用*串行数据*，即按顺序每次发送一个比特的数据。基于AVR的项目通过AVR的USART来实现这一点。ATmega328P-PU微控制器上的USART使用引脚2接收数据，使用引脚3发送数据。数据以*字节*的形式发送和接收，每个字节代表8位数据。
- en: Instead of sending 1s and 0s, which is how computers represent bytes, their
    values are represented by changing voltage levels over a certain time period.
    A high voltage represents a 1, while a low voltage represents a 0\. Each byte
    begins with a start bit, which is always a 0, and an end bit, which is always
    a 1\. The byte of data is sent and received with the rightmost or least significant
    bit first.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与直接发送1和0（计算机表示字节的方式）不同，数据的值是通过改变电压电平在一定时间内表示的。高电压表示1，低电压表示0。每个字节从起始位开始，起始位总是0，结束位总是1。字节数据是从最右边的（即最不重要的）位开始发送和接收的。
- en: I’ll demonstrate what these bytes of data look like with a digital storage oscilloscope,
    which, as you saw in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03) , is a device
    that can display the change in voltage over a period of time. For example, consider
    [Figure 4-1](nsp-boxall502581-0014.xhtml#f04001) , which shows a byte of data
    representing the number 10 sent from the USART.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用数字存储示波器展示这些字节数据是什么样的，正如你在[第3章](nsp-boxall502581-0013.xhtml#ch03)中看到的，它是一种可以显示电压随时间变化的设备。例如，参见[图4-1](nsp-boxall502581-0014.xhtml#f04001)，它显示了从USART发送的代表数字10的字节数据。
- en: '![A screenshot showing a graph of voltage going low and high with the numbers
    0010100001 below accordingly](images/nsp-boxall502581-f04001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![一张显示电压变化的截图，低电压和高电压变化的图形下方显示相应的数字0010100001](images/nsp-boxall502581-f04001.jpg)'
- en: 'Figure 4-1: A byte of data represented on the DSO'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1：在数字存储示波器上表示的字节数据
- en: Let’s see how to translate this into the decimal number 10\. The start bit is
    always 0, so the voltage is first low, then low again (0), then high (1), then
    low, then high, then low for four periods, followed by high (the end bit, which
    is always 1). This gives us the binary number 01010000, but because bytes are
    sent and received with the LSB first, we have to flip it around. This leaves us
    with 00001010, the binary representation of the decimal number 10.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何将这转换为十进制数字10。起始位总是0，所以电压首先是低电压，然后是低电压（0），然后是高电压（1），再是低电压，再是高电压，再是低电压，持续四个周期，最后是高电压（结束位，总是1）。这给我们带来了二进制数字01010000，但因为字节是从最不重要的位（LSB）开始发送和接收的，所以我们需要将它翻转过来。这就得到00001010，这是十进制数字10的二进制表示。
- en: Data is sent and received at various speeds. In [Figure 4-1](nsp-boxall502581-0014.xhtml#f04001)
    , and all our projects in this chapter, the data speed is 4,800bps (bits per second).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据以不同的速度发送和接收。在[图4-1](nsp-boxall502581-0014.xhtml#f04001)和本章中的所有项目中，数据传输速度是4,800bps（每秒比特数）。
- en: '[Hardware and Software for USART Communication](nsp-boxall502581-0008.xhtml#rah0602)'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[USART通信的硬件和软件](nsp-boxall502581-0008.xhtml#rah0602)'
- en: 'To prepare your computer to send and receive data to and from your AVR microcontroller,
    you’ll need two things: a USB-to-serial converter and suitable terminal software
    on your computer.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要准备好让你的计算机与AVR微控制器进行数据发送和接收，你需要两样东西：一个USB转串口转换器和适合的终端软件。
- en: Let’s begin with the *USB-to-serial converter* , the easiest way to connect
    your AVR projects to a computer. There are many different types of these converters,
    but for this book, I recommend using one built into a cable for convenience. I
    use a PL2303TA-type USB-to-serial cable, like the one shown in [Figure 4-2](nsp-boxall502581-0014.xhtml#f04002)
    . CP2102 and CP2104 cables are also popular. Install the drivers for your converter
    cable as instructed by the supplier.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*USB转串口转换器*开始，它是将你的AVR项目连接到计算机的最简单方式。这类转换器有许多种类型，但在本书中，我推荐使用一种内置于电缆中的转换器，方便实用。我使用的是PL2303TA型USB转串口电缆，如[图4-2](nsp-boxall502581-0014.xhtml#f04002)所示。CP2102和CP2104型电缆也很受欢迎。按照供应商的说明安装转换器电缆的驱动程序。
- en: '![Image of a PL2303TA USB-to-serial converter cable](images/nsp-boxall502581-f04002.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![PL2303TA型USB转串口转换器电缆的图片](images/nsp-boxall502581-f04002.jpg)'
- en: 'Figure 4-2: A PL2303TA-type USB-to-serial converter cable'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-2：PL2303TA型USB转串口转换器电缆
- en: To interact with your computer via your AVR-based project, you’ll also need
    a *terminal emulator* , a simple program that captures and displays incoming data
    from your AVR and lets you send data from your computer to the AVR. CoolTerm is
    an excellent terminal emulator by Roger Meier available for various platforms;
    you can download it from his website at [http://freeware.the-meiers.org/](http://freeware.the-meiers.org/)
    . The software is free, but please consider donating via the website to support
    Meier’s efforts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过你的AVR项目与计算机进行交互，你还需要一个*终端仿真器*，这是一个简单的程序，用来捕获并显示从AVR接收的数据，同时让你能够从计算机向AVR发送数据。CoolTerm是Roger
    Meier开发的一个出色的终端仿真器，适用于多种平台；你可以从他的网站[http://freeware.the-meiers.org/](http://freeware.the-meiers.org/)下载。该软件是免费的，但请考虑通过网站捐赠，以支持Meier的工作。
- en: Once you have downloaded and installed CoolTerm, plug your USB-to-serial converter
    into your computer, open CoolTerm, and click the **Options** button located at
    the top of the window. The screen in [Figure 4-3](nsp-boxall502581-0014.xhtml#f04003)
    should appear.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你下载并安装了CoolTerm，将你的USB转串口转换器插入计算机，打开CoolTerm，然后点击窗口顶部的**选项**按钮。[图4-3](nsp-boxall502581-0014.xhtml#f04003)中的界面应该会显示出来。
- en: '![A screenshot of CoolTerm’s Connection Options window, displaying the Serial
    Port configuration options. Port is set to COM5, Baudrate to 4800, and Data Bits
    to 8; the remaining options use the default values.](images/nsp-boxall502581-f04003.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![CoolTerm的连接选项窗口截图，显示了串口配置选项。端口设置为COM5，波特率为4800，数据位为8，其他选项使用默认值。](images/nsp-boxall502581-f04003.jpg)'
- en: 'Figure 4-3: CoolTerm’s Serial Port Options configuration screen'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-3：CoolTerm的串口选项配置界面
- en: I use Windows in my examples throughout this book, but CoolTerm should look
    similar when running on other platforms. Change the serial port options settings
    to match those shown in [Figure 4-3](nsp-boxall502581-0014.xhtml#f04003) , except
    for Port, which will vary depending on your computer—change it to match the name
    of your USB converter. For example, for Windows PCs, use the drop-down menu beside
    Port to select the COM port your USB-to-serial converter is using.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中的示例中使用的是Windows系统，但CoolTerm在其他平台上运行时界面应当类似。将串口选项设置更改为与[图4-3](nsp-boxall502581-0014.xhtml#f04003)所示设置一致，除了端口（Port），它会根据你的计算机有所不同——将其更改为与你的USB转换器名称匹配。例如，对于Windows
    PC，使用端口旁边的下拉菜单选择你的USB转串口转换器所使用的COM端口。
- en: Next, select the **Terminal** option from the list on the left, change the settings
    to match those shown in [Figure 4-4](nsp-boxall502581-0014.xhtml#f04004) , and
    click **OK** .
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从左侧列表中选择**终端**选项，调整设置以匹配[图4-4](nsp-boxall502581-0014.xhtml#f04004)中所示的设置，然后点击**确定**。
- en: '![A screenshot of CoolTerm’s Connection Options window displaying the terminal
    options. The Terminal Mode option is set to Line Mode and the other options are
    the defaults.](images/nsp-boxall502581-f04004.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![截图，显示CoolTerm的连接选项窗口，展示终端选项。终端模式选项设置为行模式，其他选项为默认值。](images/nsp-boxall502581-f04004.jpg)'
- en: 'Figure 4-4: CoolTerm’s Terminal Options configuration screen'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-4：CoolTerm的终端选项配置屏幕
- en: Once CoolTerm is configured correctly, the window shown in [Figure 4-5](nsp-boxall502581-0014.xhtml#f04005)
    should appear, indicating CoolTerm is ready for use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦CoolTerm正确配置，应该会出现[图4-5](nsp-boxall502581-0014.xhtml#f04005)中显示的窗口，表示CoolTerm已准备好使用。
- en: '![A screenshot showing the CoolTerm terminal software ready for use, but not
    connected to the serial port](images/nsp-boxall502581-f04005.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![截图，显示CoolTerm终端软件已准备好使用，但尚未连接到串口](images/nsp-boxall502581-f04005.jpg)'
- en: 'Figure 4-5: CoolTerm ready for use'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-5：CoolTerm已准备好使用
- en: You’re now ready to put your USB-to-serial converter and terminal software to
    the test.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好测试你的USB到串口转换器和终端软件了。
- en: '[Project 16: Testing the USART](nsp-boxall502581-0008.xhtml#rpro16)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目16：测试USART](nsp-boxall502581-0008.xhtml#rpro16)'
- en: In this project you’ll use the USART for the first time, testing your USB-to-serial
    connection and hardware. This will prepare you for more advanced projects in which
    you send data from your AVR back to the computer to debug your code and check
    its progress.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，你将首次使用USART，测试你的USB串口连接和硬件。这将为更高级的项目做准备，在这些项目中，你将从AVR向计算机发送数据，以调试代码并检查其进度。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh0601)'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh0601)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp编程器
- en: • Solderless breadboard
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU微控制器
- en: • USB-to-serial converter
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USB到串口转换器
- en: • Jumper wires
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: 'Connect the USBasp to your microcontroller via the solderless breadboard, as
    you have for the previous projects. Next, find the four connections on your USB-to-serial
    converter: GND, TX, RX, and V [CC] (or 5 V). Connect the first three pins to the
    microcontroller as directed in [Table 4-1](nsp-boxall502581-0014.xhtml#tab0401)
    . If you are using the PL2303TA cable shown in [Figure 4-2](nsp-boxall502581-0014.xhtml#f04002)
    , the white wire is RX and the green wire is TX. If you are using a different
    model, consult the supplier’s instructions to determine the correct wires.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如同之前的项目那样，通过无焊接面包板将USBasp连接到你的微控制器。接下来，找到你的USB串口转换器上的四个连接端：GND、TX、RX 和 V [CC]（或5V）。按照[表格4-1](nsp-boxall502581-0014.xhtml#tab0401)中的指示，将前面三个引脚连接到微控制器。如果你使用的是[图4-2](nsp-boxall502581-0014.xhtml#f04002)中展示的PL2303TA电缆，白色电缆是RX，绿色电缆是TX。如果你使用的是不同型号，请参考供应商的说明书以确定正确的电缆。
- en: '| Table 4-1 : USB-to-Serial Converter to Microcontroller Connections |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 表4-1：USB到串口转换器与微控制器连接 |'
- en: '| --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| USB-to-serial converter pin | ATmega328P-PU pin |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| USB到串口转换器引脚 | ATmega328P-PU引脚 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| GND | 8 GND |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| GND | 8 GND |'
- en: '| TX | 2 RX |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| TX | 2 RX |'
- en: '| RX | 3 TX |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| RX | 3 TX |'
- en: You’ll be using this hardware for the next three projects in this chapter, so
    keep it intact once you’ve assembled it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章的接下来的三个项目中使用这块硬件，因此在组装完成后，请保持它完好无损。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh0602)'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh0602)'
- en: Open a terminal window, navigate to the *Project 16* subfolder of this book’s
    *Chapter 4* folder, and enter the `make flash` command. The toolchain should compile
    the program files in the subfolder and then upload the data to the microcontroller.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书*第4章*文件夹中的*项目16*子文件夹，并输入`make flash`命令。工具链应该会编译子文件夹中的程序文件，然后将数据上传到微控制器。
- en: Next, switch over to the terminal software and click the **Connect** button.
    After a moment, the CoolTerm window should fill with the timeless message `Hello
    world` , as shown in [Figure 4-6](nsp-boxall502581-0014.xhtml#f04006) .
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到终端软件并点击**连接**按钮。稍等片刻，CoolTerm窗口应该会显示出永恒的消息`Hello world`，如[图4-6](nsp-boxall502581-0014.xhtml#f04006)所示。
- en: '![A screenshot showing the CoolTerm terminal receiving text from the AVR project
    via the serial-to-USB adaptor. The text “Hello world” is displayed repeatedly
    on a series of lines, as this is what the project is transmitting.](images/nsp-boxall502581-f04006.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![截图，显示CoolTerm终端通过串口转USB适配器接收到来自AVR项目的文本。“Hello world”文本反复显示在一系列行上，这是项目正在传输的内容。](images/nsp-boxall502581-f04006.jpg)'
- en: 'Figure 4-6: Success! The [Project 16](nsp-boxall502581-0014.xhtml#pro16) code
    prints “Hello world” across the terminal.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-6：成功！[项目16](nsp-boxall502581-0014.xhtml#pro16)的代码在终端上打印“Hello world”。
- en: 'To see how this is accomplished, open the *main.c* file located in the *Project
    16* subfolder, which contains the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何实现这一点，请打开位于*项目16*子文件夹中的*main.c*文件，其中包含以下代码：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Before using the USART, you must initialize it and set the data speed (4800bps
    in this example) ❶. All the initialization code is inside the `USARTInit()` function
    ❷, which needs to be called once during the main loop in the code ❺.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用USART之前，必须先进行初始化并设置数据速率（在本例中为4800bps）❶。所有初始化代码都包含在`USARTInit()`函数中❷，该函数需要在代码的主循环中调用一次❺。
- en: The `USARTSendByte()` function ❸ sends a byte of data from the USART to your
    computer. This function waits for the USART to clear old data before sending the
    new byte of data in the form of an 8-bit integer (the data type `uint8_t` ).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`USARTSendByte()`函数❸将一个字节的数据从USART发送到计算机。此函数在发送新字节数据之前会等待USART清除旧数据，新字节数据以8位整数的形式发送（数据类型为`uint8_t`）。'
- en: Finally, the text “Hello world” is sent using the `HelloWorld()` function ❹.
    Notice that instead of directly sending letters, we send numbers that each represent
    a letter. For reference, I’ve commented in the code which letters each number
    corresponds to. These numbers are part of *ASCII code* , originally devised for
    sending messages between telegraph and older communications systems. You can find
    a copy of the ASCII control code chart at [https://en.wikipedia.org/wiki/ASCII](https://en.wikipedia.org/wiki/ASCII)
    .
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，文本“Hello world”是通过`HelloWorld()`函数❹发送的。请注意，我们不是直接发送字母，而是发送代表每个字母的数字。为了参考，我在代码中注释了每个数字对应的字母。这些数字是*ASCII码*的一部分，最初用于电报和早期通信系统之间的消息传输。你可以在[https://en.wikipedia.org/wiki/ASCII](https://en.wikipedia.org/wiki/ASCII)找到ASCII控制码表的副本。
- en: You can experiment with this code by changing the text sent to the computer;
    just substitute your own ASCII codes in the `USARTSendByte()` function calls.
    Don’t spend too long on this, though, because the [next project](nsp-boxall502581-0014.xhtml#pro17)
    shows you a better way to transmit text.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改发送给计算机的文本来尝试此代码；只需在`USARTSendByte()`函数调用中替换你自己的ASCII码。不过不要在这上面花太多时间，因为[下一个项目](nsp-boxall502581-0014.xhtml#pro17)将向你展示一种更好的传输文本的方法。
- en: Finally, always click **Disconnect** in CoolTerm when you’ve finished monitoring
    the USART.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当你完成监控USART后，始终在CoolTerm中点击**断开连接**。
- en: '[Project 17: Sending Text with the USART](nsp-boxall502581-0008.xhtml#rpro17)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目17：通过USART发送文本](nsp-boxall502581-0008.xhtml#rpro17)'
- en: This project uses the same hardware as [Project 16](nsp-boxall502581-0014.xhtml#pro16)
    . Open a terminal window, navigate to the *Project 17* subfolder of this book’s
    *Chapter 4* folder, and enter the `make flash` command to upload the code from
    [Project 17](nsp-boxall502581-0014.xhtml#pro17) as usual.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用的硬件与[项目16](nsp-boxall502581-0014.xhtml#pro16)相同。打开一个终端窗口，导航到本书*第4章*文件夹中的*项目17*子文件夹，输入`make
    flash`命令，像往常一样上传[项目17](nsp-boxall502581-0014.xhtml#pro17)的代码。
- en: Next, switch over to the terminal software and click the **Connect** button.
    After a moment, the screen should once again fill with `Hello, world` —this time
    in a single column, as shown in [Figure 4-7](nsp-boxall502581-0014.xhtml#f04007)
    .
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到终端软件并点击**连接**按钮。片刻后，屏幕应再次显示`Hello, world`—这次是单列显示，如[图4-7](nsp-boxall502581-0014.xhtml#f04007)所示。
- en: '![A screenshot showing the CoolTerm terminal software displaying the text “Hello,
    world” repeatedly, once per line](images/nsp-boxall502581-f04007.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![截图，显示CoolTerm终端软件反复显示文本“Hello, world”，每行一次](images/nsp-boxall502581-f04007.jpg)'
- en: 'Figure 4-7: Example result from [Project 17](nsp-boxall502581-0014.xhtml#pro17)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-7：[项目17](nsp-boxall502581-0014.xhtml#pro17)的示例结果
- en: 'The code for [Project 17](nsp-boxall502581-0014.xhtml#pro17) is the same as
    that for [Project 16](nsp-boxall502581-0014.xhtml#pro16) , except that it except
    it uses a *character array* to simplify the process of sending text. These arrays
    store one or more characters, which can be letters, numbers, symbols, and anything
    else you can generate with your keyboard. They are defined as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目17](nsp-boxall502581-0014.xhtml#pro17)的代码与[项目16](nsp-boxall502581-0014.xhtml#pro16)相同，唯一不同的是，它使用了*字符数组*来简化发送文本的过程。这些数组存储一个或多个字符，可以是字母、数字、符号以及你键盘上能生成的任何内容。它们的定义如下：'
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `x` is the maximum number of characters that can appear in the array (it’s
    always a good idea to include this).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`x`是数组中可以出现的最大字符数（通常建议包含这个值）。
- en: 'To see how to transmit text in this way, open the *main.c* file located in
    the *Project 17* subfolder, which contains the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看如何以这种方式传输文本，请打开位于*项目 17*子文件夹中的*main.c*文件，该文件包含以下代码：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the main loop, we define a character array with our `Hello, world` message
    ❷. The `\r` and `\n` beside that message are *silent control codes* , also known
    as *escape sequences* , which send information to the terminal software but aren’t
    themselves displayed. `\r` instructs the software to move the cursor to the start
    of the line and `\n` instructs it to move the cursor down to the next vertical
    position; the combination `\r\n` thus moves the cursor to the start of the next
    line in the terminal display, so that the output is printed in an organized column.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在主循环中，我们定义了一个包含`Hello, world`消息的字符数组 ❷。该消息旁边的`\r`和`\n`是*无声控制代码*，也称为*转义序列*，它们向终端软件发送信息，但本身不会显示出来。`\r`指示软件将光标移到行首，`\n`指示将光标移到下一行的垂直位置；因此，组合`\r\n`将光标移到终端显示的下一行的开头，从而使输出以有序的列格式打印。
- en: We use a new function called `sendString()` ❶ to read each character of the
    array we defined and send them to the USART one by one, by looping from zero (the
    first position of an array is always zero) until there are no more characters.
    During each iteration of the loop, the AVR sends the current byte in the array
    to the USART.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为`sendString()`的新函数 ❶，通过从零（数组的第一个位置总是零）开始循环，逐个读取我们定义的数组中的每个字符并将它们发送到USART，直到没有更多字符。在每次循环迭代中，AVR将当前字节发送到USART。
- en: 'If you receive an error message after entering your code, such as:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在输入代码后收到错误消息，如下所示：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: that means you’re using the wrong kind of quotes to define your character array.
    Make sure you are using straight quotes ( `"` ) and not curly quotes ( `”` ).
    You may need to change the auto-correct settings in your text editor to prevent
    the incorrect quotes from appearing.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你使用了错误类型的引号来定义字符数组。确保你使用的是直引号（ `"` ）而不是弯引号（ `”` ）。你可能需要更改文本编辑器中的自动更正设置，以防止错误的引号出现。
- en: In the [next project](nsp-boxall502581-0014.xhtml#pro18) , you’ll learn how
    to send data from the AVR to the terminal software on your computer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[下一个项目](nsp-boxall502581-0014.xhtml#pro18)中，你将学习如何将数据从AVR发送到计算机上的终端软件。
- en: '[Project 18: Sending Numbers with the USART](nsp-boxall502581-0008.xhtml#rpro18)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 18：使用USART发送数字](nsp-boxall502581-0008.xhtml#rpro18)'
- en: You’ll often need to send numbers between your AVR and your computer. For example,
    you may want to log data generated by your hardware, send output from an interface
    you created, or just send simple status reports from your AVR when debugging a
    project. In this project, you’ll learn how to send both integers and floating-point
    numbers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常需要在AVR和计算机之间发送数字。例如，你可能希望记录硬件生成的数据，发送你创建的接口的输出，或在调试项目时仅发送AVR的简单状态报告。在本项目中，你将学习如何发送整数和浮点数。
- en: This project once again uses the same hardware as [Project 16](nsp-boxall502581-0014.xhtml#pro16)
    . Open a terminal window, navigate to the *Project 18* subfolder of this book’s
    *Chapter 4* folder, and enter the `make flash` command to upload the code as usual.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目再次使用与[项目 16](nsp-boxall502581-0014.xhtml#pro16)相同的硬件。打开终端窗口，导航到本书*第 4 章*文件夹中的*项目
    18*子文件夹，并输入`make flash`命令像往常一样上传代码。
- en: Next, switch over to the terminal software and click the **Connect** button.
    After a moment the terminal software should display an integer and a floating-point
    number in turn, as shown in [Figure 4-8](nsp-boxall502581-0014.xhtml#f04008) .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到终端软件并点击**连接**按钮。片刻之后，终端软件应依次显示一个整数和一个浮点数，如[图 4-8](nsp-boxall502581-0014.xhtml#f04008)所示。
- en: '![A screenshot of the CoolTerm terminal software displaying the output from
    Project 18: alternating lines of “Float— -12345.67” and “Integer— -32767.”](images/nsp-boxall502581-f04008.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![CoolTerm终端软件的截图，显示项目18的输出：交替的“Float— -12345.67”和“Integer— -32767”行](images/nsp-boxall502581-f04008.jpg)'
- en: 'Figure 4-8: Results of [Project 18](nsp-boxall502581-0014.xhtml#pro18)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-8：[项目 18](nsp-boxall502581-0014.xhtml#pro18)的结果
- en: 'Now open the *main.c* file located in the *Project 18* subfolder, which contains
    the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开位于*项目 18*子文件夹中的*main.c*文件，该文件包含以下代码：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code sends text stored in character arrays to the computer, just like
    in [Project 17](nsp-boxall502581-0014.xhtml#pro17) . However, it includes some
    incredibly useful new functions. Before we can send floating-point and integer
    variables to the USART, we need to convert them into character arrays themselves.
    We do so with the `dtostrf()` function, included by default in AVR C compilers:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将存储在字符数组中的文本发送到计算机，就像在[项目17](nsp-boxall502581-0014.xhtml#pro17)中一样。然而，它包括了一些非常有用的新功能。在我们能够将浮动小数点和整数变量发送到USART之前，我们需要将它们转换为字符数组。我们通过`dtostrf()`函数实现这一点，该函数默认包含在AVR
    C编译器中：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This function takes the floating-point number `j` and places it into character
    array `t[]` . The variable `d` sets the number of decimal places for the fraction,
    and the variable `w` sets the total number of characters that display the array.
    We use the `dtostrf()` function in the project code to convert our floating-point
    variable to a character array before sending it to the USART ❶. To convert an
    integer to a character array, we use the same function but place the prefix `(float)`
    before the integer variable ❷.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将浮动小数点数`j`放入字符数组`t[]`中。变量`d`设置小数部分的位数，变量`w`设置显示数组的总字符数。我们在项目代码中使用`dtostrf()`函数，将浮动小数点变量转换为字符数组，然后将其发送到USART
    ❶。要将整数转换为字符数组，我们使用相同的函数，但在整数变量前加上前缀`(float)` ❷。
- en: In the [next project](nsp-boxall502581-0014.xhtml#pro19) , you’ll put your newfound
    knowledge of converting integers and floats into character arrays to good use
    by sending thermometer data to your PC.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在[下一个项目](nsp-boxall502581-0014.xhtml#pro19)中，你将通过将整数和浮动小数点数转换为字符数组的知识，进一步利用这些知识，将温度计数据发送到你的PC。
- en: '[Project 19: Creating a Temperature Data Logger](nsp-boxall502581-0008.xhtml#rpro19)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目19：创建温度数据记录器](nsp-boxall502581-0008.xhtml#rpro19)'
- en: In this project you’ll send readings from the TMP36 temperature sensor you used
    in [Project 15](nsp-boxall502581-0013.xhtml#pro15) in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03)
    to your computer. The terminal software will capture the data in a text file,
    which you can then open in a spreadsheet for further analysis.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将把在[项目15](nsp-boxall502581-0013.xhtml#pro15)中使用的TMP36温度传感器的读数发送到计算机。终端软件将捕获这些数据并存储为文本文件，你可以在电子表格中打开该文件进行进一步分析。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh0603)'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh0603)'
- en: 'You will need the following hardware:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp编程器
- en: • Solderless breadboard
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • 5 V breadboard power supply
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5 V 面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • One TMP36 temperature sensor
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个TMP36温度传感器
- en: • 0.1 μF ceramic capacitor
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF 陶瓷电容
- en: • Jumper wires
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • USB-to-serial converter
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USB转串口转换器
- en: Assemble your circuit as shown in [Figure 4-9](nsp-boxall502581-0014.xhtml#f04009)
    , then connect your USB-to-serial converter as usual.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图4-9](nsp-boxall502581-0014.xhtml#f04009)所示组装电路，然后像往常一样连接你的USB转串口转换器。
- en: '![Schematic diagram for Project 19](images/nsp-boxall502581-f04009.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![项目19的原理图](images/nsp-boxall502581-f04009.jpg)'
- en: 'Figure 4-9: Schematic for [Project 19](nsp-boxall502581-0014.xhtml#pro19)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-9：[项目19](nsp-boxall502581-0014.xhtml#pro19)的原理图
- en: Open a terminal window, navigate to the *Project 19* subfolder of this book’s
    *Chapter 4* folder, and enter the `make flash` command to upload the code for
    [Project 19](nsp-boxall502581-0014.xhtml#pro19) .
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到本书*第4章*文件夹下的*项目19*子文件夹，输入`make flash`命令上传[项目19](nsp-boxall502581-0014.xhtml#pro19)的代码。
- en: Next, switch over to the terminal software and click the **Connect** button.
    After a moment, the terminal software should begin displaying the ambient temperature
    as measured by the sensor, as shown in [Figure 4-10](nsp-boxall502581-0014.xhtml#f04010)
    .
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到终端软件并点击**连接**按钮。片刻之后，终端软件应开始显示传感器测量的环境温度，如[图4-10](nsp-boxall502581-0014.xhtml#f04010)所示。
- en: '![A screenshot of Project 19 in operation. Temperature output from the AVR
    is displayed in CoolTerm and is updated around once per second, varying between
    10.80 and 14.60 degrees Celsius.](images/nsp-boxall502581-f04010.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![项目19运行中的截图。AVR的温度输出显示在CoolTerm中，更新大约每秒一次，温度在10.80和14.60摄氏度之间波动。](images/nsp-boxall502581-f04010.jpg)'
- en: 'Figure 4-10: The temperature sensor at work'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-10：温度传感器在工作
- en: As you can see, this project combines your existing knowledge of the temperature
    sensor and sending text and numbers to the terminal software via the USART. To
    show some variance in the example output, I used a small fan to change the airflow
    around the temperature sensor. This helped change the measured temperature, which
    is captured once per second.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，本项目结合了你现有的温度传感器知识和通过USART将文本和数字发送到终端软件的技能。为了展示输出示例中的一些变化，我使用了一个小风扇来改变温度传感器周围的气流。这帮助改变了测量的温度，数据每秒捕获一次。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh0604)'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh0604)'
- en: 'To see how the functions used in this project convert the temperature into
    an array and send it out, open the *main.c* file located in the *Project 19* subfolder
    and take a look at the code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看本项目中使用的函数如何将温度转换为数组并发送出去，请打开位于*Project 19*子文件夹中的*main.c*文件，查看代码：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the code between ❶ and ❷ the microcontroller’s ADCs are initialized, then
    used. Next, we convert the ADC data to a temperature in degrees Celsius ❸. Finally,
    we convert the temperature to a character array, which we send to the terminal
    emulator to create a nice output ❹. This is repeated once per second.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在❶和❷之间的代码中，初始化了微控制器的ADC，然后使用它们。接下来，我们将ADC数据转换为摄氏温度❸。最后，我们将温度转换为字符数组，并将其发送到终端仿真器，以创建一个漂亮的输出❹。这个过程每秒重复一次。
- en: At this point, the terminal emulator software can capture the data received
    from the microcontroller into a text file, which you can open in a text editor
    or a spreadsheet for further analysis. To enable this in CoolTerm, select **Connection**
    ▸ **Capture to Text/Binary File** ▸ **Start** , as shown in [Figure 4-11](nsp-boxall502581-0014.xhtml#f04011)
    .
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，终端仿真器软件可以将从微控制器接收到的数据捕获到文本文件中，你可以在文本编辑器或电子表格中打开该文件进行进一步分析。要在CoolTerm中启用此功能，选择**连接**
    ▸ **捕获到文本/二进制文件** ▸ **开始**，如[图 4-11](nsp-boxall502581-0014.xhtml#f04011)所示。
- en: '![A screenshot showing the CoolTerm software in operation displaying temperature
    data sent from the project, with the Connection menu open and set to start recording
    by capturing data to a text file on the PC.](images/nsp-boxall502581-f04011.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![显示CoolTerm软件运行的截图，展示了从项目发送的温度数据，连接菜单已打开，并设置为通过捕获数据到PC上的文本文件开始录制。](images/nsp-boxall502581-f04011.jpg)'
- en: 'Figure 4-11: Start recording data from the terminal.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-11：从终端开始录制数据。
- en: CoolTerm then asks you to select a location and name for the text file, as shown
    in [Figure 4-12](nsp-boxall502581-0014.xhtml#f04012) . Once you’ve done that,
    click **Save** , and the recording should start. You can pause and finish recording
    using the Pause and Stop options, respectively.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，CoolTerm 会要求你选择一个位置并命名文本文件，如[图 4-12](nsp-boxall502581-0014.xhtml#f04012)所示。完成后，点击**保存**，录制将开始。你可以使用暂停和停止选项分别暂停和结束录制。
- en: '![](images/nsp-boxall502581-f04012.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-f04012.jpg)'
- en: 'Figure 4-12: Select the filename and location to store the text file.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-12：选择文件名和存储文本文件的位置。
- en: Once you have captured all the temperature data you want, stop the recording
    in the terminal emulator software ( **Connection** ▸ **Capture to Text/Binary
    File** ▸ **Stop** ) and open the resulting text file in your spreadsheet software.
    For demonstration purposes, I’ve used Excel. Because this is a text file, you
    will be prompted to select a *text delimiter* , a single character to insert between
    data values to allow other software to easily collate the data. Select a space
    as your delimiter, as shown in [Figure 4-13](nsp-boxall502581-0014.xhtml#f04013)
    . Note that in the screenshot, “Treat consecutive delimiters as one” is selected;
    this removes duplicate blank columns if there are double spaces in your file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你捕获到所有需要的温度数据，在终端仿真器软件中停止录制（**连接** ▸ **捕获到文本/二进制文件** ▸ **停止**），然后在电子表格软件中打开生成的文本文件。为了演示，我使用了Excel。因为这是一个文本文件，所以系统会提示你选择一个*文本分隔符*，这是一个单字符，用于在数据值之间插入，便于其他软件整理数据。选择空格作为分隔符，如[图
    4-13](nsp-boxall502581-0014.xhtml#f04013)所示。请注意，在截图中，选中了“将连续分隔符视为一个”；如果文件中有双空格，这可以删除重复的空白列。
- en: '![A screenshot showing the Text Import Wizard in Microsoft Excel, with Space
    selected as the delimiter and the “Treat consecutive delimiters as one” box checked.
    A preview of the data is provided at the bottom of the screen.](images/nsp-boxall502581-f04013.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![显示Microsoft Excel中的文本导入向导截图，选中了空格作为分隔符，且勾选了“将连续分隔符视为一个”框。屏幕底部提供了数据预览。](images/nsp-boxall502581-f04013.jpg)'
- en: 'Figure 4-13: Select the delimiter and preview the data.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-13：选择分隔符并预览数据。
- en: Click **Next** to import the data. This should create a neat temperature data
    spreadsheet like the one in [Figure 4-14](nsp-boxall502581-0014.xhtml#f04014)
    , which you can analyze to your heart’s content.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**导入数据。这将创建一个整洁的温度数据电子表格，类似于[图 4-14](nsp-boxall502581-0014.xhtml#f04014)中的示例，你可以随意分析这些数据。
- en: '![A screenshot of Microsoft Excel showing temperature data on the left in numeric
    form, and in a line graph on the right](images/nsp-boxall502581-f04014.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Microsoft Excel的截图，左侧为数字形式的温度数据，右侧为折线图](images/nsp-boxall502581-f04014.jpg)'
- en: 'Figure 4-14: Temperature data ready for analysis'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-14：准备分析的温度数据
- en: 'Although this project uses temperature data, you can log anything sent from
    the AVR’s USART using the method demonstrated here. Keep this in mind if you need
    to record data in future experiments. For now, we’ll turn to our [next project](nsp-boxall502581-0014.xhtml#pro20)
    : sending data from the terminal software on the computer back to the AVR.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本项目使用的是温度数据，但你可以使用此方法记录任何通过AVR的USART发送的数据。如果未来的实验需要记录数据，请记住这一点。现在，我们将转向我们的[下一个项目](nsp-boxall502581-0014.xhtml#pro20)：将计算机终端软件中的数据发送回AVR。
- en: '[Project 20: Receiving Data from Your Computer](nsp-boxall502581-0008.xhtml#rpro20)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 20：从计算机接收数据](nsp-boxall502581-0008.xhtml#rpro20)'
- en: In this project, you’ll learn how to use your computer to control your AVR-based
    projects or make your own input device by sending data between your computer and
    the microcontroller in both directions via the USART.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习如何使用计算机控制基于AVR的项目，或通过USART实现计算机与微控制器之间的双向数据传输，制作自己的输入设备。
- en: This project uses the same hardware as [Project 16](nsp-boxall502581-0014.xhtml#pro16)
    . After reproducing that, open a terminal window, navigate to the *Project 20*
    subfolder of this book’s *Chapter 4* folder, and enter the `make flash` command
    to upload the code for [Project 20](nsp-boxall502581-0014.xhtml#pro20) .
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用的硬件与[项目 16](nsp-boxall502581-0014.xhtml#pro16)相同。在复现该项目后，打开一个终端窗口，导航到本书*第
    4 章*文件夹中的*项目 20*子文件夹，并输入`make flash`命令以上传[项目 20](nsp-boxall502581-0014.xhtml#pro20)的代码。
- en: Next, switch over to the terminal emulation software and click the **Options**
    button, then select **Terminal** from the list on the left-hand side of the window.
    Set Terminal Mode to **Raw Mode** , as shown in [Figure 4-15](nsp-boxall502581-0014.xhtml#f04015)
    , then click **OK** , then **Connect** .
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到终端仿真软件并点击**选项**按钮，然后从窗口左侧的列表中选择**终端**。将终端模式设置为**原始模式**，如[图 4-15](nsp-boxall502581-0014.xhtml#f04015)所示，然后点击**确定**，再点击**连接**。
- en: '![A screenshot of the Connection Options window in CoolTerm, with the Terminal
    Mode set to Raw Mode](images/nsp-boxall502581-f04015.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![CoolTerm中的连接选项窗口截图，终端模式设置为原始模式](images/nsp-boxall502581-f04015.jpg)'
- en: 'Figure 4-15: Changing the terminal emulator back to raw mode'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-15：将终端仿真器切换回原始模式
- en: Once you have the terminal emulator in raw mode, type something on your keyboard.
    Every keystroke you type is sent to the AVR, which then sends it back to the terminal
    emulator for display. Whatever you type should appear in the terminal window,
    and the TX and RX indicators should blink.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将终端仿真器设置为原始模式，开始在键盘上输入内容。你每次按下的键都会发送到AVR，然后AVR将其返回并显示在终端仿真器中。你输入的任何内容都应该出现在终端窗口中，TX和RX指示灯应闪烁。
- en: 'To see how the USART receives your keystrokes and sends them back out, open
    the *main.c* file located in the *Project 20* subfolder and take a look at the
    code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看USART如何接收你的按键并将其发送回来，打开*项目 20*子文件夹中的*main.c*文件，查看代码：
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This code should be quite familiar to you now; it begins with the usual functions
    to initialize the USART and send bytes to the computer. However, it includes a
    new function called `USARTReceiveByte()` ❶, which waits for a byte of data to
    arrive at the USART, then places that data into an integer variable. In this case,
    the function places the incoming byte into the variable `tempByte` ❷. The `USARTSendByte()`
    function then sends the same byte of data back to the terminal emulator ❸. It’s
    as simple as that: a byte comes in and is sent back out.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码你现在应该已经非常熟悉；它从常规的USART初始化函数开始，然后将字节发送到计算机。然而，它包含了一个新的函数`USARTReceiveByte()`
    ❶，该函数等待一个字节的数据到达USART，然后将该数据存储到一个整数变量中。在这个例子中，函数将传入的字节存储到变量`tempByte` ❷中。然后，`USARTSendByte()`函数将相同的字节数据发送回终端仿真器
    ❸。就是这么简单：一个字节进来，然后被发回去。
- en: '[Project 21: Building a Four-Function Calculator](nsp-boxall502581-0008.xhtml#rpro21)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 21：构建四功能计算器](nsp-boxall502581-0008.xhtml#rpro21)'
- en: By now, you’ve learned to send and receive data between your AVR projects and
    a computer so that your projects can work with external data and commands. In
    this project you’ll use all the knowledge you’ve acquired in this and previous
    chapters to make a simple four-function calculator.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你已经学会了如何在 AVR 项目和计算机之间发送和接收数据，使得你的项目能够与外部数据和命令进行交互。在这个项目中，你将运用本章和之前章节所学的所有知识，制作一个简单的四则运算计算器。
- en: 'As in the previous projects in this chapter, you’ll use the basic AVR and USB-to-serial
    converter. After reproducing that setup, open a terminal window, navigate to the
    *Project 21* subfolder of this book’s *Chapter 4* folder, and enter the `make
    flash` command to upload this project’s code. When you flash the microcontroller
    with the code, you might receive a warning such as:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章之前的项目一样，你将使用基本的 AVR 和 USB 到串行转换器。完成该设置后，打开终端窗口，导航到本书*Chapter 4*文件夹中的*Project
    21*子文件夹，并输入`make flash`命令上传该项目的代码。当你将代码闪存到微控制器时，可能会收到如下警告：
- en: '[PRE8]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That’s okay, you can just continue as normal.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 没关系，你可以继续正常操作。
- en: Next, open the terminal emulator, make sure the terminal mode is set to raw
    mode as in [Project 20](nsp-boxall502581-0014.xhtml#pro20) , then click **Connect**
    . After a moment, the calculator interface should appear in the terminal window,
    and you should be prompted to enter a command. This calculator can add, subtract,
    multiply, and divide single-digit numbers. [Figure 4-16](nsp-boxall502581-0014.xhtml#f04016)
    shows some examples; have fun and enter your own commands to see the results.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开终端模拟器，确保终端模式设置为原始模式，就像在[项目 20](nsp-boxall502581-0014.xhtml#pro20)中那样，然后点击**连接**。片刻后，计算器界面应该出现在终端窗口中，并提示你输入命令。这个计算器可以加法、减法、乘法和除法单个数字。[图
    4-16](nsp-boxall502581-0014.xhtml#f04016)展示了一些示例；尽情尝试，输入你自己的命令，查看结果。
- en: '![A screenshot of CoolTerm showing the output of Project 21 in use. The output
    is examples of the user making calculations with all four operators.](images/nsp-boxall502581-f04016.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![CoolTerm 的屏幕截图，显示了在使用项目 21 时的输出。输出是用户使用四种运算符进行计算的示例。](images/nsp-boxall502581-f04016.jpg)'
- en: 'Figure 4-16: The calculator at work'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-16：计算器正在工作
- en: Open the *main.c* file in the *Project 21* subfolder. The code is just a sequence
    of events using functions from previous projects.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*main.c*文件，该文件位于*Project 21*子文件夹中。代码只是使用之前项目中的函数进行的一系列事件。
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this code, we first initialize the variables inside the `main()` function,
    then initialize the USART with the lines beginning at ❶. The program prompts the
    user to enter a command consisting of 3 bytes of data: the first digit, the operator,
    and then the second digit. The USART receives the first digit ❷, the operator
    ❺, and the second digit ❼ and sends them back to the terminal to give visual feedback
    at ❸, ❻, and ❽, respectively.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先在`main()`函数中初始化变量，然后通过从❶开始的代码行初始化 USART。程序提示用户输入由 3 字节数据组成的命令：第一个数字、运算符和第二个数字。USART
    接收第一个数字❷、运算符❺和第二个数字❼，并分别在❸、❻和❽处将它们发送回终端，提供视觉反馈。
- en: When the user enters a digit, the terminal emulator sends the ASCII code for
    the digit, not the digit itself, to the AVR. The program then converts the ASCII
    code into the actual digit ❹ and places it in an integer variable ❾. This same
    process for converting ASCII codes to digits also determines which operator has
    been entered (for example, `+` , `-` , `*` , or `/` ).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入一个数字时，终端模拟器将数字的 ASCII 码而不是数字本身发送给 AVR。然后，程序将 ASCII 码转换为实际的数字❹，并将其放入一个整数变量❾中。这个将
    ASCII 码转换为数字的过程也决定了输入的运算符是什么（例如，`+`、`-`、`*` 或 `/`）。
- en: The program then performs the required calculation on the two digits via the
    functions in the code’s last `switch()` function. Finally, the calculation’s result
    is converted to a character array and sent back to the terminal emulator with
    `sendString(b)` for the user to read ⓿. The calculator is now ready for another
    calculation.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，程序通过代码中最后一个`switch()`函数对这两个数字执行所需的计算。最后，计算结果被转换为字符数组，并通过`sendString(b)`发送回终端模拟器，以供用户阅读⓿。计算器现在可以进行下一次计算。
- en: The projects in this chapter showed you how to use your computer as a terminal
    with your AVR to send and receive data, preparing you to record and analyze data.
    In the [next chapter](nsp-boxall502581-0015.xhtml#ch05) I’ll show you how to use
    interrupts, a neat way to let your AVR to respond to input whenever it occurs,
    instead of at a planned moment in time.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的项目展示了如何使用你的计算机作为终端，通过 AVR 发送和接收数据，为你准备记录和分析数据的工作。在[下一章](nsp-boxall502581-0015.xhtml#ch05)中，我将向你展示如何使用中断，这是一种巧妙的方式，让你的
    AVR 能够在输入发生时立即响应，而不是在预定的时刻。
