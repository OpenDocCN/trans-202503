["```\na - Increment the accumulator\nb - Decrement the accumulator\nc - Output the accumulator\n\nd - Invert accumulator\nr - Set accumulator to a random number between 0 and \n    accumulator\nn - Set accumulator to 0\n\n$ - Toggle ASCII output mode.  When on, the c \n    instruction prints the accumulator as an ASCII \n    character.\nl - Loop back to the beginning of the program.  \n    Accumulator and ASCII mode does not reset.\n; - Debug.  Prints out accumulator as a number and \n    ASCII character.\n\nUnknown instructions are treated as NOPs.\n```", "```\n   import sys \n   import random\n➊ t=open(sys.argv[1]).read()\n   tokens=[\"a\",\"b\",\"c\",\"d\",\"r\",\"n\",\"$\",\"l\",\";\"]\n   prog=\"\" for c in t:\n  ➋ if (c in tokens): prog+=c\n   mode=False; A=0; k=0 \n➌ while (k<len(prog)):\n     t=prog[k]\n     if   (t==\"a\"): A+=1\n     elif (t==\"b\"): A-=1\n     elif (t==\"c\"): \n       if (mode):   print(\"%s\"%chr(A),end=\"\")\n       else:        print(\"%d\"%A,end=\"\")\n     elif (t==\"d\"): A=-A\n     elif (t==\"r\"): A=int(random.random()*A)\n     elif (t==\"n\"): A=0 \n     elif (t==\"$\"): mode=not mode\n     elif (t==\"l\"): k=-1\n     elif (t==\";\"): print(\"{%d:(%d,%x,'%s')}\"%(k,A,A,chr(A)),end=\"\")\n     else:          pass\n     k+=1\n   print()\n```", "```\nCOUNT FOREVER\na  INCREMENT ACCUMULATOR\nc  PRINT THE ACCUMULATOR AS A NUMBER\nl  START AGAIN FROM THE BEGINNING\n```", "```\nacaaccaaaac\n```", "```\naaaaaarac\n```", "```\n$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaa\naaaaaaaaaaaaaaaaaaaaaaacaaaaaaaccaaacnaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naacbbbbbbbbbbbbcaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaaaa\naaaaaaaaaaaaaaaacaaacbbbbbbcbbbbbbbbcnaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac\n```", "```\nac                  COUNTRY CODE\nnaaaaaaaaaradc      THREE DIGIT AREA CODE\nnaaaaaaaaaarc\nnaaaaaaaaaarc\nnaaaaaaaaaradc      THREE DIGIT EXCHANGE\nnaaaaaaaaaarc\nnaaaaaaaaaarc\nnaaaaaaaaaradc      FOUR DIGIT SUBSCRIBER naaaaaaaaaarc       NUMBER\nnaaaaaaaaaarc\nnaaaaaaaaaarc\n```", "```\n    if (len(sys.argv)==2):\n        interactive = False\n        t = open(sys.argv[1]).read()\n        tokens = [\n            \"a\",\"b\",\"c\",\"d\",\"r\",\"n\",\"$\",\"l\",\";\",\n            \"e\",\">\",\"<\",\"g\",\"+\",\"-\",\"*\",\"/\",\"x\",\n            \"q\",\"%\",\"=\",\"?\",\"!\",\"@\",\"k\",\"^\",\n        ]\n        prog = \"\"\n        for c in t:\n            if (c in tokens):\n                prog += c\n    else:\n        interactive = True\n```", "```\nA = [0,0]\nI = mode = cr = k = 0\nstack = []\nops = [\"+\",\"-\",\"*\",\"/\",\"%\",\"<\",\">\",\"=\"]\nwhile (True):\n    if (interactive):\n        prog = input(\": \")\n        k = 0\n    while (k < len(prog)):\n        t = prog[k]\n        # ... execute command in t ...\n        k += 1\n    if (not interactive):\n        print()\n        quit()\n```", "```\nif (t == \"a\"):\n    A[I] += 1\nelif (t == \"b\"):\n    A[I] -= 1\nelif (t == \"c\"):\n    if (mode):\n        print(\"%s\" % chr(A[I]), end=\"\", flush=True)\n    else:\n        print(\"%d\" % A[I], end=\"\", flush=True)\n    if (cr):\n        print()\nelif (t == \"d\"):\n    A[I] = -A[I]\nelif (t == \"r\"):\n    A[I] = int(random.random()*A[I])\nelif (t == \"n\"):\n    A[I] = 0\n--snip--\n```", "```\nADD TWO NUMBERS AND DISPLAY THE RESULT\ne             NEWLINE MODE\naaaaaaaaaa!   10 TO STACK\nbbb!          7 TO STACK\n+@c           ADD STACK, PULL TO A AND PRINT\n```", "```\n> python3 ABC2.py add.abc2\n```", "```\n: aaaaa;\n{5:0: (5,'')(0,'')} <0>: \n: !;\n{1:0: (5,'')(0,'')} <1>: 5 \n: !;*;\n{1:0: (5,'')(0,'')} <2>: 5 5 \n{3:0: (5,'')(0,'')} <1>: 25 \n: @ec;\n25\n{3:0: (25,'')(0,'')} <0>:\n: q\n```", "```\nHELLO WORLD!\n```", "```\nHELLO WORLD\naaa!aaaaaaaa!*@!!!+@aa!\n@!aaaaaaaa!@!aaaaaa!\n@!bbb!@!aaaaaaaa!\nnaaaa!aaaa!*@!!!+\n@aaaaaaaaaaaaaaa!\n@!bbb!!bbbbbbb!aaa!\n$@c@c@c@c@c@c@c@c@c@c@ce@c\n```", "```\naaa!       |  3\naaaaaaaa!  |  3 11\n*          | 33\n@!!!       | 33 33 33\n+          | 33 66\n@aa!       | 33 68\n```", "```\n33 68 76 82 79 87 32 79 76 76 69 72\n```", "```\nS = C = 0\nLoop forever:\n    x = [0,1)\n    y = [0,1)\n    S = S + 1\n    if (x*x + y*y < 1):\n        C = C + 1\n    print 4*C/S\n```", "```\n!                                        PUT A ON STACK\nnaaaaaaaaaa!!*@!!*@!!*naaaaaaaaaa!*@     A IS 1 BILLION\nr!!*                                     X SQUARED\nnaaaaaaaaaa!!*@!!*@!!*naaaaaaaaaa!*@     A IS 1 BILLION\nr!!*                                     Y SQUARED\n+                                        XX PLUS YY\nnaaaaaaaaaa!!*@!!*@!!*naaaaaaaaaa!*@!!*  10 TO THE 18TH\n<+                                       INC C IF LESS THAN\n^a^                                      INC S\n@!c                                      PRINT C\nnaaaaaaaaaa!!+@!!+@aaaaaaa$c$            PRINT SLASH\n^ece^                                    PRINT S\n@l                                       LOOP\n```", "```\n  1/1,   2/2,   3/3,   4/4,   5/5,   \n  5/6,   6/7,   7/8,   8/9,  9/10, \n10/11, 11/12, 11/13, 12/14, 13/15, \n14/16, 15/17, 16/18, 17/19, 18/20, \n19/21\n```", "```\nUser enters 4,  stack: 4\nMultiply by 10, stack: 40\nUser enters 5,  stack: 40 5\nAdd,            stack: 45\nMultiply by 10, stack: 450\nUser enters 1,  stack: 450 1\nAdd,            stack: 451\n```", "```\nENTER TWO THREE DIGIT NUMBERS AND MULTIPLY THEM\nQUIT IF THE FIRST CHARACTER OF THE FIRST NUMBER IS ESC\n\n^naaaaa!aaaaa!*@bb  B IS 48\n^k!!                FIRST KEYPRESS\nnaaa!aaaaaa!*=?q    QUIT IF ESC PRESSED\n@!$c$^!^-           FIRST DIGIT\nnaa!aaa!**          TIMES TEN\nk$c$!^!^-+          SECOND DIGIT\nnaa!aaa!**          TIMES TEN\nk$c$!^!^-+          THIRD DIGIT naaaa!aaaa!*@$c     SPACE\naaaaaaaaaac         TIMES\nbbbbbbbbbbc$        SPACE\nk$c$!^!^-           FIRST DIGIT\nnaa!aaa!**          TIMES TEN\nk$c$!^!^-+          SECOND DIGIT\nnaa!aaa!**          TIMES TEN\nk$c$!^!^-+          THIRD DIGIT\nnaaaa!aaaa!*@$c     SPACE\n!!+@bbbc            EQUALS\nnaaaa!aaaa!*@c$     SPACE\n*@ecel              PRODUCT AND LOOP\n```", "```\n123 * 321 = 39483\n451 * 359 = 161909\n999 * 999 = 998001\n002 * 003 = 6\n```", "```\n@!!         DUP\n@x!         SWAP\n@           DROP\n@^@x!^x!    ROT\n^@^@!^!^!   OVER\n```"]