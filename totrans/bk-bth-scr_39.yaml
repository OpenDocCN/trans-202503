- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: B ARRAY AND HASH TABLE OBJECTS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B 数组和哈希表对象
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In [Chapter 29](chapter29.xhtml), I demonstrated how to build, access, and update
    arrays and hash tables. These data structures, not often associated with bat files,
    are great applications of the equally atypical real-world Batch objects discussed
    in [Chapter 33](chapter33.xhtml).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第29章](chapter29.xhtml)中，我展示了如何构建、访问和更新数组以及哈希表。这些数据结构虽然与 bat 文件不常相关，但它们是[第33章](chapter33.xhtml)中讨论的同样不典型的现实世界批处理对象的极好应用。
- en: In this appendix, I’ll bring these concepts together by presenting a well-commented
    object bat file for each data structure.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我将通过为每种数据结构提供一个有良好注释的对象 bat 文件来将这些概念结合起来。
- en: The Array Object
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组对象
- en: 'Here are the full contents of the array object, *oArray.bat*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是数组对象 *oArray.bat* 的完整内容：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This bat file should be called often, so I’m using :: (two colons) for the
    remarks instead of the rem command just to cut down on what the interpreter writes
    to stdout.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 bat 文件应该经常被调用，所以我使用了::（两个冒号）来进行备注，而不是使用 rem 命令，这样可以减少解释器写入到标准输出的内容。
- en: 'Every call to this object passes at least two arguments: the name of an array
    and the method or action being invoked; depending on the method, another argument
    or two might be required. You can add elements to the end of an array or at a
    specific index; you can retrieve the first element, the next element, or an element
    at a particular index. The object has methods for removing an element at a certain
    index, getting the size of the array, and clearing or emptying the array. You
    can get the index of the first instance of a specific value or retrieve a boolean
    telling you whether that value exists anywhere in the array. You can even clone
    or copy the array.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用这个对象至少传递两个参数：数组的名称和正在调用的方法或操作；根据方法的不同，可能需要传递一个或两个额外的参数。你可以将元素添加到数组的末尾或指定的索引位置；你可以获取第一个元素、下一个元素，或者获取特定索引位置的元素。该对象有删除指定索引元素、获取数组大小以及清空数组的方法。你可以获取某个特定值第一次出现的索引，或者通过布尔值检查该值是否存在于数组中。你甚至可以克隆或复制数组。
- en: Instead of stepping through each method, I’ll let the comments do the talking.
    Notice that I’ve included a brief description of each method along with their
    required arguments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会逐一讲解每个方法，而是让注释来说明。请注意，我已经为每个方法附上了简短的描述，并列出了它们所需的参数。
- en: There are, however, a few interesting bits of code worthy of mention. You’ll
    find plenty of examples of delayed expansion in this listing. In fact, a couple
    methods use nested for commands solely because of delayed expansion; each for
    command transforms a variable assigned in the outer for command into a variable
    resolvable with percent signs ([Chapter 20](chapter20.xhtml)). Also, the :IndexOf
    and :Contains methods perform similar functions. Instead of duplicating work,
    the latter calls the former, converting the result into a boolean. Likewise, multiple
    methods retrieve the array size by calling :GetSize. The :Clone method assigns
    all variables associated with one array to another, taking advantage of text replacement
    and the fact that array elements are thinly disguised ordinary variables.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里有一些有趣的代码值得一提。你会在这个列表中看到大量延迟扩展的例子。实际上，一些方法使用嵌套的 for 命令完全是为了延迟扩展；每个 for 命令都将外部
    for 命令中分配的变量转换成可以用百分号符号（[第20章](chapter20.xhtml)）解析的变量。此外，`:IndexOf` 和 `:Contains`
    方法执行相似的功能。为了避免重复工作，后者调用了前者，将结果转化为布尔值。同样，多个方法通过调用 `:GetSize` 来获取数组的大小。`:Clone`
    方法将一个数组相关的所有变量赋值给另一个数组，利用文本替换的特性以及数组元素仅仅是普通变量的事实。
- en: 'You can call the object from another bat file to perform all of these functions.
    Here’s a small sampling:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从另一个 bat 文件调用该对象来执行所有这些功能。这里有一个小示例：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code populates oneFriend and anotherFriend with Maude and Donny, respectively.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将 `oneFriend` 和 `anotherFriend` 分别赋值为 Maude 和 Donny。
- en: For the sake of readability, this object has minimal error handling and validation
    of the incoming parameters, but these relatively few lines of code stand ready
    to create, modify, and access any number of arrays.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可读性，这个对象的错误处理和传入参数的验证非常简单，但这些相对较少的代码行已经准备好可以创建、修改和访问任意数量的数组。
- en: The Hash Table Object
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈希表对象
- en: 'Here are the full contents of the hash table object, *oHashTable.bat*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是哈希表对象 *oHashTable.bat* 的完整内容：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This object also accepts at least two parameters: the name of a hash table
    and the method or action being invoked. You can add a key-value pair to the data
    structure by invoking the :Put method and retrieve a value given a key via the
    :Get method. Other methods clear the entire hash table or remove just one pair.
    You can get the number of pairs and retrieve a boolean showing whether a key or
    value is present, and as in the array object, there is a clone method.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象还接受至少两个参数：哈希表的名称和正在调用的方法或操作。您可以通过调用:Put方法向数据结构添加键值对，并通过:Get方法获取给定键的值。其他方法可以清空整个哈希表或仅移除一个键值对。您可以获取键值对的数量，并检索一个布尔值，显示键或值是否存在，并且像数组对象一样，还有一个克隆方法。
- en: Each method and its corresponding parameters are described in the comments at
    the beginning of the bat file. The most interesting method is :ContainsValue,
    which preemptively sets the boolean to false before performing a search for the
    value by looking at every pair. However, determining whether a key exists in the
    hash table requires little more than an if defined.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在.bat文件的开头注释中描述了每个方法及其对应的参数。最有趣的方法是：ContainsValue，在执行搜索之前将布尔值预设为false，然后查看每对的值。然而，确定哈希表中是否存在键仅需稍作判断。
- en: 'Here are a few lines of code demonstrating a simple test of the object’s features:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几行代码，演示了对对象功能进行简单测试的方法：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The aJob variable contains the value Poet after the completion of these commands.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些命令完成后，aJob变量包含值Poet。
- en: You can call this object from multiple bat files and even build multiple hash
    tables from a single process. Now look for other instances where you can keep
    your main code simple by placing the interesting logic in a reusable object bat
    file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从多个.bat文件中调用此对象，甚至可以从单个进程构建多个哈希表。现在寻找其他实例，通过将有趣的逻辑放置在可重用对象.bat文件中，可以使您的主代码保持简洁。
