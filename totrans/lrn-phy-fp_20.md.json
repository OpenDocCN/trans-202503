["```\nrelativityPS :: [OneBodyForce]\n             -> ParticleState -> DParticleState  -- a differential equation\nrelativityPS fs st = let fNet = sumV [f st | f <- fs]\n          c = 299792458  -- m / s\n          m = mass st\n          v = velocity st\n          u = v ^/ c\n          acc = sqrt (1 - u <.> u) *^ (fNet ^-^ (fNet <.> u) *^ u) ^/ m\n      in DParticleState { dmdt = 0    -- dm/dt\n                        , dqdt = 0    -- dq/dt\n                        , dtdt = 1    -- dt/dt\n                        , drdt = v    -- dr/dt\n                        , dvdt = acc  -- dv/vt\n                        }\n```", "```\nconstantForcePlot :: IO ()\nconstantForcePlot\n    = let year = 365.25 * 24 * 60 * 60  -- seconds\n          c = 299792458                -- m/s\n          method = rungeKutta4 1000\n          forces = [const (10 *^ iHat)]\n          initialState = defaultParticleState { mass = 1 }\n          newtonStates = solver method (newtonSecondPS forces) initialState\n          relativityStates = solver method (relativityPS forces) initialState\n          newtonTVs = [(time st / year, xComp (velocity st) / c)\n                           | st <- takeWhile tle1yr newtonStates]\n          relativityTVs = [(time st / year, xComp (velocity st) / c)\n                               | st <- takeWhile tle1yr relativityStates]\n      in plotPaths [Key Nothing\n                   ,Title \"Response to a constant force\"\n                   ,XLabel \"Time (years)\"\n                   ,YLabel \"Velocity (multiples of c)\"\n                   ,PNG \"constantForceComp.png\"\n                   ,customLabel (0.1,1) \"mass = 1 kg\"\n                   ,customLabel (0.1,0.9) \"force = 10 N\"\n                   ,customLabel (0.5,0.7) \"Newtonian\"\n                   ,customLabel (0.8,0.6) \"relativistic\"\n                   ] [newtonTVs,relativityTVs]\n```", "```\ncustomLabel :: (R,R) -> String -> Attribute\ncustomLabel (x,y) label\n   = Custom \"label\"\n     [\"\\\"\" ++ label ++ \"\\\"\" ++ \" at \" ++ show x ++ \",\" ++ show y]\n```", "```\ncircularPlot :: IO ()\ncircularPlot\n    = let c = 299792458  -- m/s\n          method = rungeKutta4 1e-9\n          forces = [uniformLorentzForce zeroV kHat]    -- 1 T\n          initialState = defaultParticleState\n                         { mass    = 1.672621898e-27  -- kg\n                         , charge   = 1.602176621e-19  -- C\n                         , velocity = 0.8 *^ c *^ jHat\n                         }\n          newtonStates = solver method (newtonSecondPS forces) initialState\n          relativityStates = solver method (relativityPS forces) initialState\n          newtonXYs = [(xComp (posVec st), yComp (posVec st))\n                           | st <- take 100 newtonStates]\n          relativityXYs = [(xComp (posVec st), yComp (posVec st))\n                               | st <- take 120 relativityStates]\n      in plotPaths [Key Nothing\n                   ,Aspect (Ratio 1)\n                   ,Title \"Proton in a 1-T magnetic field\"\n                   ,XLabel \"x (m)\"\n                   ,YLabel \"y (m)\"\n                   ,PNG \"circularComp.png\"\n                   ,customLabel (0.5,4.5) \"v = 0.8 c\"\n                   ,customLabel (2.5,0.0) \"Newtonian\"\n                   ,customLabel (3.0,3.5) \"relativistic\"\n                   ] [newtonXYs,relativityXYs]\n```", "```\ntwoProtUpdate :: TimeStep\n              -> (ParticleState,ParticleState)\n              -> (ParticleState,ParticleState)\ntwoProtUpdate dt (stN,stR)\n    = let forces = [uniformLorentzForce zeroV kHat]\n      in (rungeKutta4 dt (newtonSecondPS forces) stN\n         ,rungeKutta4 dt (relativityPS   forces) stR)\n```", "```\ntwoProtInitial :: (ParticleState,ParticleState)\ntwoProtInitial\n    = let c = 299792458  -- m/s\n          pInit = protonInitial { velocity = 0.8 *^ c *^ jHat }\n      in (pInit,pInit)\n```", "```\ntwoProtPicture :: (ParticleState,ParticleState) -> G.Picture\ntwoProtPicture (stN,stR)\n    = G.scale 50 50 $ G.pictures [G.translate xN yN protonNewtonian\n                                 ,G.translate xR yR protonRelativistic]\n      where\n        xN = realToFrac $ xComp $ posVec stN\n        yN = realToFrac $ yComp $ posVec stN\n        xR = realToFrac $ xComp $ posVec stR\n        yR = realToFrac $ yComp $ posVec stR\n        protonNewtonian = G.Color G.blue (disk 0.1)\n        protonRelativistic = G.Color G.red (disk 0.1)\n```", "```\n{-# OPTIONS -Wall #-}\n\nimport Mechanics3D\n    ( simulateGloss\n    , twoProtInitial, twoProtPicture, twoProtUpdate\n    )\n\nmain :: IO ()\nmain = simulateGloss 1e-8 20\n       twoProtInitial twoProtPicture twoProtUpdate\n```", "```\nrelativityPS' :: R  -- c\n              -> [OneBodyForce]\n              -> ParticleState -> DParticleState\nrelativityPS' c fs st = undefined c fs st\n```"]