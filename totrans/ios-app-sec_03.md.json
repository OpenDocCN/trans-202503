["```\n[Object doThisThingWithValue:myValue];\n```", "```\nif (pantsColor == @\"Black\") {\n\n    [NSHouseCat sleepOnPerson:person\n                   withRegion:[person lap]\n                  andShedding:YES\n                      retries:INT_MAX];\n}\n```", "```\n   @interface Classname : NSParentClass {\n➊     NSSomeType aThing;\n       int anotherThing;\n   }\n➋ + (type)classMethod:(vartype)myVariable;\n➌ - (type)instanceMethod:(vartype)myVariable;\n   @end\n```", "```\n➊ @interface Kitty : NSObject {\n       @private NSString *name;\n       @private NSURL *homepage;\n       @public NSString *color;\n   }\n\n   @property NSString *name;\n   @property NSURL *homepage;\n➋ @property(readonly) NSString *color;\n\n   + (type)classMethod:(vartype)myVariable;\n   - (type)instanceMethod:(vartype)myVariable;\n```", "```\n   @implementation Kitty\n➊ @synthesize name;\n   @synthesize color;\n   @synthesize homepage;\n\n   + (type)classMethod:(vartype)myVariable {\n       // method logic\n   }\n\n   - (type)instanceMethod:(vartype)myVariable {\n       // method logic\n   }\n   @end\n\n   Kitty *myKitty = [[Kitty alloc] init];\n\n➋ [myKitty setName:@\"Ken\"];\n➌ myKitty.homepage = [[NSURL alloc] initWithString:@\"http://me.ow\"];\n```", "```\n@synthesize name = thisCatName;\n```", "```\n@synthesize name = _name;\n```", "```\n   NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration\n                                                         delegate:self\n                                                    delegateQueue:nil];\n\n   NSURLSessionDataTask *task = [session dataTaskWithRequest:request\n                                           completionHandler:\n➊     ^(NSData *data, NSURLResponse *response, NSError *error) {\n               NSLog(@\"Error: %@ %@\", error, [error userInfo]);\n        }];\n```", "```\n➊ NSFish *fish = [[NSFish alloc] init];\n   NSString *fishName = [fish name];\n➋ [fish release];\n```", "```\n➊ @interface Kitty : NSObject <NSCoding> {\n       @private NSString *name;\n       @private NSURL *homepage;\n       @public NSString *color;\n   }\n\n   @implementation Kitty\n\n➋ - (id)initWithCoder:(NSCoder *)decoder {\n       self = [super init];\n       if (!self) {\n           return nil;\n       }\n\n       [self setName:[decoder decodeObjectForKey:@\"name\"]];\n       [self setHomepage:[decoder decodeObjectForKey:@\"homepage\"]];\n       [self setColor:[decoder decodeObjectForKey:@\"color\"]];\n\n       return self;\n   }\n\n➌ - (void)encodeWithCoder:(NSCoder *)encoder {\n       [encoder encodeObject:[self name] forKey:@\"name\"];\n       [encoder encodeObject:[self author] forKey:@\"homepage\"];\n       [encoder encodeObject:[self pageCount] forKey:@\"color\"];\n   }\n```", "```\n@protocol NSCoding\n\n- (void)encodeWithCoder:(NSCoder *)aCoder;\n- (id)initWithCoder:(NSCoder *)aDecoder;\n\n@end\n```", "```\n@implementation NSURL (CategoryName)\n\n- (BOOL) isPurple; {\n    if ([self isColor:@\"purple\"])\n        return YES;\n    else\n        return NO;\n}\n@end\n```", "```\n   #import <objc/runtime.h>\n\n   @implementation UIView(Loghiding)\n\n➊ - (BOOL)swizzled_setHidden {\n       NSLog(@\"We're calling setHidden now!\");\n\n➋     BOOL result = [self swizzled_setHidden];\n\n       return result;\n   }\n\n➌ + (void)load {\n       Method original_setHidden;\n       Method swizzled_setHidden;\n\n       original_setHidden = class_getInstanceMethod(self, @selector(setHidden));\n       swizzled_setHidden = class_getInstanceMethod(self, @selector(swizzled_\n        setHidden));\n➍     method_exchangeImplementations(original_setHidden, swizzled_setHidden);\n   }\n\n   @end\n```"]