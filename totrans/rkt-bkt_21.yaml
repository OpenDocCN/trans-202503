- en: '**18'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**18'
- en: APPROACHES TO ANALYZING HIDDEN FILESYSTEMS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析隐藏文件系统的方法**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: So far in this book, you’ve learned how bootkits penetrate and persist on the
    victim’s computer by using sophisticated techniques to avoid detection. One common
    characteristic of these advanced threats is the use of a custom hidden storage
    system for storing modules and configuration information on the compromised machine.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中你已经学习了引导木马如何通过使用复杂技术渗透并保持在受害者计算机上，从而避免被检测到。这些高级威胁的一个共同特点是使用定制的隐藏存储系统，将模块和配置信息存储在被攻破的机器上。
- en: Many of the hidden filesystems in malware are custom or altered versions of
    standard filesystems, meaning that performing forensic analysis on a computer
    compromised with a rootkit or bootkit often requires a custom toolset. In order
    to develop these tools, researchers must learn the layout of the hidden filesystem
    and the algorithms used to encrypt data by performing in-depth analyses and reverse
    engineering.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多恶意软件中的隐藏文件系统是标准文件系统的定制或修改版本，这意味着对感染了rootkit或bootkit的计算机进行取证分析通常需要定制的工具集。为了开发这些工具，研究人员必须通过深入分析和逆向工程，了解隐藏文件系统的布局及其加密数据所使用的算法。
- en: In this chapter, we’ll look more closely at hidden filesystems and methods to
    analyze them. We’ll share our experiences of performing long-term forensic analyses
    of the rootkits and bootkits described in this book. We’ll also discuss approaches
    to retrieving data from hidden storage and share solutions to common problems
    that arise through this kind of analysis. Finally, we’ll introduce the custom
    HiddenFsReader tool we developed, whose purpose is to dump the contents of the
    hidden filesystems in specific malware.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将更详细地研究隐藏文件系统以及分析它们的方法。我们将分享我们在进行本书中描述的rootkit和bootkit的长期取证分析时的经验。我们还将讨论从隐藏存储中检索数据的方法，并分享在这种分析过程中常见问题的解决方案。最后，我们将介绍我们开发的定制工具HiddenFsReader，其目的是转储特定恶意软件中隐藏文件系统的内容。
- en: '**Overview of Hidden Filesystems**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**隐藏文件系统概述**'
- en: '[Figure 18-1](ch18.xhtml#ch18fig01) illustrates an overview of the typical
    hidden filesystem. We can see the malicious payload that communicates with the
    hidden storage injected into the user-mode address space of a victim process.
    The payload often uses the hidden storage to read and update its configuration
    information or to store data like stolen credentials.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 18-1](ch18.xhtml#ch18fig01)展示了典型隐藏文件系统的概述。我们可以看到与隐藏存储进行通信的恶意载荷被注入到受害进程的用户模式地址空间中。该载荷通常利用隐藏存储读取和更新其配置信息，或存储像被窃取的凭据之类的数据。'
- en: '![image](../images/18fig01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig01.jpg)'
- en: '*Figure 18-1: Typical malicious hidden filesystem implementation*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 18-1：典型的恶意隐藏文件系统实现*'
- en: The hidden storage service is provided through the kernel-mode module, and the
    interface exposed by the malware is visible only to the payload module. This interface
    usually isn’t available to other software on the system and cannot be accessed
    via standard methods such as Windows File Explorer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏存储服务是通过内核模式模块提供的，而恶意软件暴露的接口仅对载荷模块可见。这个接口通常对系统上的其他软件不可用，也无法通过标准方法（如Windows文件资源管理器）访问。
- en: Data stored by the malware on the hidden filesystem persists in an area of the
    hard drive that isn’t being used by the OS in order not to conflict with it. In
    most cases, this area is at the end of the hard drive, because there is usually
    some unallocated space. However, in some cases, such as the Rovnix bootkit discussed
    in [Chapter 11](ch11.xhtml#ch11), malware can store its hidden filesystem in unallocated
    space at the beginning of the hard drive.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件在隐藏文件系统中存储的数据保留在硬盘上未被操作系统使用的区域，以避免与操作系统发生冲突。在大多数情况下，这个区域位于硬盘的末端，因为通常会有一些未分配的空间。然而，在某些情况下，如[第11章](ch11.xhtml#ch11)中讨论的Rovnix引导木马，恶意软件可以将其隐藏文件系统存储在硬盘开头的未分配空间中。
- en: The main goal of any researcher performing forensic analysis is to retrieve
    this hidden stored data, so next we’ll discuss a few approaches for doing so.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 执行取证分析的主要目标是检索这些隐藏存储的数据，接下来我们将讨论几种实现这一目标的方法。
- en: '**Retrieving Bootkit Data from a Hidden Filesystem**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从隐藏文件系统中检索引导木马数据**'
- en: We can obtain forensic information from a bootkit-infected computer by retrieving
    the data when the infected system is offline or by reading the malicious data
    from a live infected system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在感染的系统离线时检索数据，或通过从实时感染系统中读取恶意数据，来获取来自引导木马感染计算机的取证信息。
- en: Each approach has its pros and cons, which we’ll consider as we discuss the
    two methods.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都有其优缺点，我们将在讨论这两种方法时进行考虑。
- en: '***Retrieving Data from an Offline System***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从离线系统中检索数据***'
- en: Let’s start with getting data from the hard drive when the system is offline
    (that is, the malware is inactive). We can achieve this through an offline analysis
    of the hard drive, but another option is to boot the noninfected instance of the
    operating system using a live CD. This ensures the computer uses the noncompromised
    bootloader installed on the live CD, so the bootkit won’t be executed. This approach
    assumes that a bootkit has not been able to execute before the legitimate bootloader
    and cannot detect an attempt to boot from an external device to wipe the sensitive
    data beforehand.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来讨论如何在系统离线时从硬盘读取数据（也就是说，恶意软件处于非活动状态）。我们可以通过对硬盘进行离线分析来实现这一点，但另一个选择是使用实时CD启动未感染的操作系统实例。这确保计算机使用安装在实时CD上的未受感染的引导加载程序，从而避免了引导包的执行。这种方法假设引导包在合法引导加载程序之前无法执行，也无法在尝试从外部设备启动以清除敏感数据之前检测到这一行为。
- en: The significant advantage of this method over an online analysis is that you
    don’t need to defeat the malware’s self-defense mechanisms that protect the hidden
    storage contents. As we’ll see in later sections, bypassing the malware’s protection
    isn’t a trivial task and requires certain expertise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法相对于在线分析的一个显著优势是，你无需绕过恶意软件的自我防御机制，这些机制用于保护隐藏的存储内容。正如我们在后续章节中看到的，绕过恶意软件的保护并非易事，且需要一定的专业知识。
- en: '**NOTE**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Once you get access to the data stored on the hard drive, you can proceed
    with dumping the image of the malicious hidden filesystem and decrypting and parsing
    it. Different types of malware require different approaches for decrypting and
    parsing the hidden filesystems, as we’ll discuss in the section “[Parsing the
    Hidden Filesystem Image](ch18.xhtml#ch18lev1sec3)” on [page 360](ch18.xhtml#page_360).*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*一旦你获得了对硬盘上存储的数据的访问权限，你就可以继续转储恶意隐藏文件系统的镜像，并进行解密和解析。不同类型的恶意软件需要不同的方法来解密和解析隐藏的文件系统，正如我们在章节
    “[解析隐藏文件系统镜像](ch18.xhtml#ch18lev1sec3)” [第360页](ch18.xhtml#page_360)中将讨论的那样。*'
- en: However, the downside of this method is that it requires both physical access
    to the compromised computer and the technical know-how to boot the computer from
    a live CD and dump the hidden filesystem. Meeting both of these requirements might
    be problematic.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法的缺点是，它需要同时具备对受感染计算机的物理访问权限以及使用实时CD启动计算机并转储隐藏文件系统的技术知识。满足这两个要求可能会存在问题。
- en: If analyzing on an inactive machine isn’t possible, we have to use the active
    approach.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在非活动机器上进行分析不可行，我们就必须使用主动方法。
- en: '***Reading Data on a Live System***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在实时系统上读取数据***'
- en: On a live system with an active instance of the bootkit, we need to dump the
    contents of the malicious hidden filesystem.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个存在活动引导包的实时系统上，我们需要转储恶意隐藏文件系统的内容。
- en: 'Reading the malicious hidden storage on a system actively running malware,
    however, has one major difficulty: the malware may attempt to counteract the read
    attempts and forge the data being read from the hard drive to impede forensic
    analysis. Most of the rootkits we’ve discussed in this book—TDL3, TDL4, Rovnix,
    Olmasco, and so on—monitor access to the hard drive and block access to the regions
    with the malicious data.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在系统运行恶意软件时读取恶意隐藏存储面临一个主要难题：恶意软件可能会尝试反制读取操作，并伪造从硬盘读取的数据，以阻碍取证分析。本书中我们讨论的大多数根套件——如TDL3、TDL4、Rovnix、Olmasco等——都会监视硬盘访问，并阻止对包含恶意数据区域的访问。
- en: To be able to read malicious data from the hard drive, you have to overcome
    the malware’s self-defense mechanisms. We’ll look at some approaches to this in
    a moment, but first we’ll examine the storage device driver stack in Windows,
    and how the malware hooks into it, to better understand how the malware protects
    the malicous data. This information is also useful for understanding certain approaches
    to removing malicious hooks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够读取硬盘上的恶意数据，你必须克服恶意软件的自我防御机制。稍后我们会讨论一些应对方法，但首先，我们将研究Windows的存储设备驱动堆栈，以及恶意软件如何钩住它，以更好地理解恶意软件是如何保护恶意数据的。这些信息也有助于理解某些移除恶意钩子的方式。
- en: '***Hooking the Miniport Storage Driver***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***钩住Miniport存储驱动程序***'
- en: We touched upon the architecture of the storage device driver stack in Microsoft
    Windows and how malware hooks into it in [Chapter 1](ch01.xhtml#ch01). This method
    outlived the TDL3 and was adopted by later malware, including bootkits we’ve studied
    in this book. Here we’ll go into more detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.xhtml#ch01)中介绍了Microsoft Windows存储设备驱动程序堆栈的架构以及恶意软件如何钩住它。此方法经历了TDL3并被后来的恶意软件采用，包括本书中我们研究的启动工具。这里我们将详细讲解。
- en: TDL3 hooked the miniport storage driver located at the very bottom of the storage
    device driver stack, as indicated in [Figure 18-2](ch18.xhtml#ch18fig02).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3钩住了位于存储设备驱动程序堆栈最底部的迷你端口存储驱动程序，如[图18-2](ch18.xhtml#ch18fig02)所示。
- en: '![image](../images/18fig02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig02.jpg)'
- en: '*Figure 18-2: Device storage driver stack*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-2：设备存储驱动程序堆栈*'
- en: Hooking into the driver stack at this level allows the malware to monitor and
    modify I/O requests going to and from the hard drive, giving it access to its
    hidden storage.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在此层级钩住驱动程序堆栈使得恶意软件能够监视并修改往返硬盘的I/O请求，从而获得对其隐藏存储的访问权限。
- en: Hooking at the very bottom of the driver stack and directly communicating with
    the hardware also allows the malware to bypass the security software that operates
    at the level of the filesystem or disk class driver. As we touched upon in [Chapter
    1](ch01.xhtml#ch01), when an I/O operation is performed on the hard drive, the
    OS generates an input/output request packet (IRP)—a special data structure in
    the operating system kernel that describes I/O operation—which is passed through
    the whole device stack from top to the bottom.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在驱动程序堆栈的最底层进行钩子操作并直接与硬件通信，也使得恶意软件能够绕过在文件系统或磁盘类驱动程序级别运行的安全软件。正如我们在[第1章](ch01.xhtml#ch01)中提到的，当对硬盘执行I/O操作时，操作系统会生成一个输入/输出请求数据包（IRP）——这是一个描述I/O操作的特殊数据结构，它会从堆栈顶部传递到底部。
- en: Security software modules responsible for monitoring hard drive I/O operations
    can inspect and modify IRP packets, but because the malicious hooks are installed
    at the level below security software, they’re invisible to these security tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 负责监视硬盘I/O操作的安全软件模块可以检查并修改IRP数据包，但由于恶意钩子安装在安全软件下方的级别，因此这些安全工具无法察觉到这些钩子。
- en: There are several other levels a bootkit might hook, such as the user-mode API,
    filesystem driver, and disk class driver, but none of them allow the malware to
    be as stealthy and powerful as the miniport storage level.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 启动程序可能钩住的其他几个层次包括用户模式API、文件系统驱动程序和磁盘类驱动程序，但没有一个能够像迷你端口存储层那样既隐秘又强大。
- en: '**The Storage Device Stack Layout**'
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**存储设备堆栈布局**'
- en: We won’t cover all possible miniport storage hooking methods in this section.
    Instead, we’ll focus on the most common approaches that we’ve come across in the
    course of our malware analyses.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中不会涵盖所有可能的迷你端口存储钩子方法。相反，我们将重点讨论我们在恶意软件分析过程中遇到的最常见的方法。
- en: First, we’ll take a closer look at the storage device, shown in [Figure 18-3](ch18.xhtml#ch18fig03).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将仔细观察存储设备，如[图18-3](ch18.xhtml#ch18fig03)所示。
- en: '![image](../images/18fig03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig03.jpg)'
- en: '*Figure 18-3: Miniport storage device organization*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-3：迷你端口存储设备组织*'
- en: The IRP goes from the top of the stack to the bottom. Each device in the stack
    can either process and complete the I/O request or forward it to the device one
    level below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: IRP从堆栈的顶部传递到底部。堆栈中的每个设备可以处理并完成I/O请求，或者将其转发到下一级设备。
- en: The `DEVICE_OBJECT` ➊ is a system data structure used by the operating system
    to describe a device in the stack, and it contains a pointer ➋ to the corresponding
    `DRIVER_OBJECT`, another system data structure that describes a loaded driver
    in the system. In this case, the `DEVICE_OBJECT` contains a pointer to the miniport
    storage driver.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEVICE_OBJECT` ➊是操作系统用于描述堆栈中设备的系统数据结构，它包含一个指针 ➋，指向相应的`DRIVER_OBJECT`，这是描述系统中加载的驱动程序的另一个系统数据结构。在此情况下，`DEVICE_OBJECT`包含指向迷你端口存储驱动程序的指针。'
- en: The layout of the `DRIVER_OBJECT` structure is shown in [Listing 18-1](ch18.xhtml#ch18list01).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`DRIVER_OBJECT`结构的布局如[清单18-1](ch18.xhtml#ch18list01)所示。'
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 18-1: The layout of the `DRIVER_OBJECT` structure*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-1：`DRIVER_OBJECT` 结构的布局*'
- en: The `DriverName` field ➍ contains the name of the driver described by the structure;
    `DriverStart` ➋ and `DriverSize` ➌, respectively, contain the starting address
    and size in the driver memory; `DriverInit` ➎ contains a pointer to the driver’s
    initialization routine; and `DeviceObject` ➊ contains a pointer to the list of
    `DEVICE_OBJECT` structures related to the driver. From the malware’s point of
    view, the most important field is `MajorFunction` ➏, which is located at the end
    of the structure and contains the addresses of the handlers implemented in the
    driver for various I/O operations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`DriverName` 字段 ➍ 包含结构描述的驱动程序的名称；`DriverStart` ➋ 和 `DriverSize` ➌ 分别包含驱动程序内存中的起始地址和大小；`DriverInit`
    ➎ 包含指向驱动程序初始化例程的指针；`DeviceObject` ➊ 包含指向与驱动程序相关的 `DEVICE_OBJECT` 结构列表的指针。从恶意软件的角度来看，最重要的字段是位于结构末尾的
    `MajorFunction` ➏，它包含驱动程序中实现的各类 I/O 操作处理程序的地址。'
- en: When an I/O packet arrives at a device object, the operating system checks the
    `DriverObject` field in the corresponding `DEVICE_OBJECT` structure to get the
    address of `DRIVER_OBJECT` in memory. Once the kernel has the `DRIVER_OBJECT`
    structure, it fetches the address of a corresponding I/O handler from the `MajorFunction`
    array relevant to the type of I/O operation. With this information, we can identify
    parts of the storage device stack that can be hooked by the malware. Let’s look
    at a couple of different methods.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当 I/O 数据包到达设备对象时，操作系统会检查相应 `DEVICE_OBJECT` 结构中的 `DriverObject` 字段，以获取内存中 `DRIVER_OBJECT`
    的地址。一旦内核获取了 `DRIVER_OBJECT` 结构，它会从与 I/O 操作类型相关的 `MajorFunction` 数组中获取相应 I/O 处理程序的地址。有了这些信息，我们可以识别出存储设备栈中可能被恶意软件钩取的部分。让我们来看看几种不同的方法。
- en: '**Direct Patching of the Miniport Storage Driver Image**'
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**直接修补迷你端口存储驱动程序镜像**'
- en: One way to hook the miniport storage driver is to directly modify the driver’s
    image in memory. Once the malware obtains the address of the hard disk miniport
    device object, it looks at the `DriverObject` to locate the corresponding `DRIVER_OBJECT`
    structure. The malware then fetches the address of the hard disk I/O handler from
    the `MajorFunction` array and patches the code at that address, as shown in [Figure
    18-4](ch18.xhtml#ch18fig04) (the sections in gray are those modified by the malware).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一种钩取迷你端口存储驱动程序的方法是直接修改驱动程序在内存中的镜像。一旦恶意软件获取到硬盘迷你端口设备对象的地址，它会查看 `DriverObject`
    来定位相应的 `DRIVER_OBJECT` 结构。然后，恶意软件从 `MajorFunction` 数组中获取硬盘 I/O 处理程序的地址，并在该地址处修补代码，如[图
    18-4](ch18.xhtml#ch18fig04)所示（灰色部分是恶意软件修改的部分）。
- en: '![image](../images/18fig04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig04.jpg)'
- en: '*Figure 18-4: Hooking the storage driver stack by patching the miniport driver*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 18-4：通过修补迷你端口驱动程序钩取存储驱动程序栈*'
- en: When the device object receives an I/O request, the malware is executed. The
    malicious hook can now reject I/O operations to block access to the protected
    area of the hard drive, or it can modify I/O requests to return forged data and
    fool the security software.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备对象接收到 I/O 请求时，恶意软件会被执行。恶意钩子现在可以拒绝 I/O 操作，阻止访问硬盘的保护区域，或者它可以修改 I/O 请求，返回伪造的数据并欺骗安全软件。
- en: For example, this type of hook is used by the Gapz bootkit discussed in [Chapter
    12](ch12.xhtml#ch12). In the case of Gapz, the malware hooks two routines on the
    hard disk miniport driver that are responsible for handling the `IRP_MJ_INTERNAL_DEVICE_CONTROL`
    and `IRP_MJ_DEVICE_CONTROL` I/O requests to protect them from being read or overwritten.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这种类型的钩子被 Gapz 启动程序使用，如[第 12 章](ch12.xhtml#ch12)中讨论的那样。在 Gapz 的情况下，恶意软件钩取了硬盘迷你端口驱动程序中的两个例程，负责处理
    `IRP_MJ_INTERNAL_DEVICE_CONTROL` 和 `IRP_MJ_DEVICE_CONTROL` I/O 请求，以保护它们不被读取或覆盖。
- en: However, this approach is not particularly stealthy. Security software can detect
    and remove the hooks by locating an image of the hooked driver on a filesystem
    and mapping it into memory. It then compares the code sections of the driver loaded
    into the kernel to a version of the driver manually loaded from the file, and
    it notes any differences in the code sections that could indicate the presence
    of malicious hooks in the driver.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法并不特别隐蔽。安全软件可以通过在文件系统中定位被钩取的驱动程序镜像并将其映射到内存中来检测并移除钩子。接着，它会将加载到内核中的驱动程序代码部分与从文件手动加载的驱动程序版本进行比较，并注意代码部分的任何差异，这些差异可能表明驱动程序中存在恶意钩子。
- en: The security software can then remove the malicious hooks and restore the original
    code by overwriting the modified code with the code taken from the file. This
    method assumes that the driver on the filesystem is genuine and not modified by
    the malware.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安全软件可以通过覆盖修改过的代码，使用文件中提取的代码，来删除恶意钩子并恢复原始代码。这种方法假设文件系统中的驱动程序是合法的，并且没有被恶意软件修改。
- en: '**DRIVER_OBJECT Modification**'
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**DRIVER_OBJECT 修改**'
- en: The hard drive miniport driver can also be hooked through the modification of
    the `DRIVER_OBJECT` structure. As mentioned, this data structure contains the
    location of the driver image in memory and the address of the driver’s dispatch
    routines in the `MajorFunction` array.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 硬盘迷你端口驱动程序也可以通过修改`DRIVER_OBJECT`结构来实现钩子注入。如前所述，这个数据结构包含了驱动程序镜像在内存中的位置以及驱动程序调度例程在`MajorFunction`数组中的地址。
- en: Therefore, modifying the `MajorFunction` array allows the malware to install
    its hooks without touching the driver image in memory. For instance, instead of
    patching the code directly in the image as in the previous method, the malware
    could replace entries in the `MajorFunction` array related to `IRP_MJ_INTERNAL_DEVICE_CONTROL`
    and `IRP_MJ_DEVICE_CONTROL` I/O requests with the addresses of the malicious hooks.
    As a result, the operating system kernel would be redirected to the malicious
    code whenever it tried to resolve the addresses of handlers in the `DRIVER_OBJECT`
    structure. This approach is demonstrated in [Figure 18-5](ch18.xhtml#ch18fig05).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，修改`MajorFunction`数组允许恶意软件在不触及内存中驱动程序镜像的情况下安装其钩子。例如，恶意软件可以替换`MajorFunction`数组中与`IRP_MJ_INTERNAL_DEVICE_CONTROL`和`IRP_MJ_DEVICE_CONTROL`
    I/O请求相关的条目，将其地址替换为恶意钩子的地址，而不是像前一种方法那样直接修改镜像中的代码。这样，每当操作系统内核试图解析`DRIVER_OBJECT`结构中的处理程序地址时，就会被重定向到恶意代码。这个方法在[图18-5](ch18.xhtml#ch18fig05)中有示范。
- en: 'Because the driver’s image in memory remains unmodified, this approach is stealthier
    than the previous method, but it isn’t invulnerable to discovery. Security software
    can still detect the presence of the hooks by locating the driver image in memory
    and checking the addresses of the `IRP_MJ_INTERNAL_DEVICE_CONTROL` and `IRP_MJ_DEVICE_CONTROL`
    I/O requests handlers: if these addresses don’t belong to the address range of
    the miniport driver image in memory, it indicates that there are hooks in the
    device stack.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于驱动程序镜像在内存中保持未修改，因此这种方法比前一种方法更具隐蔽性，但并非无法被发现。安全软件仍然可以通过定位驱动程序镜像并检查`IRP_MJ_INTERNAL_DEVICE_CONTROL`和`IRP_MJ_DEVICE_CONTROL`
    I/O请求处理程序的地址来检测钩子的存在：如果这些地址不属于迷你端口驱动程序镜像在内存中的地址范围，那么就表明设备堆栈中存在钩子。
- en: '![image](../images/18fig05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig05.jpg)'
- en: '*Figure 18-5: Hooking the storage driver stack by patching the miniport `DRIVER_OBJECT`*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-5：通过修补迷你端口`DRIVER_OBJECT`来钩住存储驱动堆栈*'
- en: On the other hand, removing these hooks and restoring the original values of
    the `MajorFunction` array is much more difficult than with the previous method.
    With this approach, the `MajorFunction` array is initialized by the driver itself
    during execution of its initialization routine, which receives a pointer to the
    partially initialized corresponding `DRIVER_OBJECT` structure as an input parameter
    and completes the initialization by filling the `MajorFunction` array with pointers
    to the dispatch handlers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，移除这些钩子并恢复`MajorFunction`数组的原始值比前一种方法要困难得多。在这种方法中，驱动程序会在执行其初始化例程时初始化`MajorFunction`数组，该例程接收一个指向部分初始化的`DRIVER_OBJECT`结构的指针作为输入参数，并通过将`MajorFunction`数组填充为指向调度处理程序的指针来完成初始化。
- en: Only the miniport driver is aware of the handler addresses. The security software
    has no knowledge of them, making it much more difficult to restore the original
    addresses in the `DRIVER_OBJECT` structure.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 只有迷你端口驱动程序知道处理程序的地址。安全软件无法获取这些信息，这使得恢复`DRIVER_OBJECT`结构中原始地址变得更加困难。
- en: One approach that the security software may use to restore the original data
    is to load the miniport driver image in an emulated environment, create a `DRIVER_OBJECT`
    structure, and execute the driver’s entry point (the initialization routine) with
    the `DRIVER_OBJECT` structure passed as a parameter. Upon exiting the initialization
    routine, the `DRIVER_OBJECT` should contain the valid `MajorFunction` handlers,
    and the security software can use this information to calculate the addresses
    of the I/O dispatch routines in the driver’s image and restore the modified `DRIVER_OBJECT`
    structure.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安全软件可能采用的一种方法是将迷你端口驱动程序映像加载到仿真环境中，创建一个`DRIVER_OBJECT`结构，并执行驱动程序的入口点（初始化例程），同时将`DRIVER_OBJECT`结构作为参数传递。在退出初始化例程时，`DRIVER_OBJECT`应包含有效的`MajorFunction`处理程序，安全软件可以利用这些信息计算驱动程序映像中I/O分派例程的地址，并恢复被修改的`DRIVER_OBJECT`结构。
- en: Emulation of the driver can be tricky, however. If a driver’s initialization
    routine implements simple functionality (for example, initializing the `DRIVER_OBJECT`
    structure with the valid handler addresses), this approach would work, but if
    it implements complex functionality (such as calling system services or a system
    API, which are harder to emulate), emulation may fail and terminate before the
    driver initializes the data structure. In such cases, the security software won’t
    be able to recover the addresses of the original handlers and remove the malicious
    hooks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，驱动程序的仿真可能会很棘手。如果驱动程序的初始化例程实现了简单的功能（例如，使用有效的处理程序地址初始化`DRIVER_OBJECT`结构），这种方法会有效，但如果它实现了复杂的功能（例如，调用系统服务或系统API，这些更难仿真），仿真可能会失败并在驱动程序初始化数据结构之前终止。在这种情况下，安全软件将无法恢复原始处理程序的地址并移除恶意钩子。
- en: Another approach to this problem is to generate a database of the original handler
    addresses and use it to recover them. However, this solution lacks generality.
    It may work well for the most frequently used miniport drivers but fail for rare
    or custom drivers that were not included in the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的另一种方法是生成原始处理程序地址的数据库，并使用它来恢复这些地址。然而，这个解决方案缺乏通用性。它可能对最常用的迷你端口驱动程序有效，但对数据库中未包含的稀有或自定义驱动程序可能不起作用。
- en: '**DEVICE_OBJECT Modification**'
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**DEVICE_OBJECT 修改**'
- en: The last approach for hooking the miniport driver that we’ll consider in this
    chapter is a logical continuation of the previous method. We know that to execute
    the I/O request handler in the miniport driver, the OS kernel must fetch the address
    of the `DRIVER_OBJECT` structure from the miniport `DEVICE_OBJECT`, then fetch
    the handler address from the `MajorFunction` array, and finally execute the handler.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们考虑的最后一种迷你端口驱动程序钩住方法是前一种方法的逻辑延续。我们知道，要执行迷你端口驱动程序中的I/O请求处理程序，操作系统内核必须从迷你端口`DEVICE_OBJECT`中获取`DRIVER_OBJECT`结构的地址，然后从`MajorFunction`数组中获取处理程序地址，最后执行处理程序。
- en: So, another way of installing the hook is to modify the `DriverObject` field
    in the related `DEVICE_OBJECT`. The malware needs to create a rogue `DRIVER_OBJECT`
    structure and initialize its `MajorFunction` array with the address of the malicious
    hooks, after which the operating system kernel will use the malicious `DRIVER_OBJECT`
    structure to get the address of the I/O request handler and execute the malicious
    hook ([Figure 18-6](ch18.xhtml#ch18fig06)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，安装钩子的另一种方式是修改相关`DEVICE_OBJECT`中的`DriverObject`字段。恶意软件需要创建一个伪造的`DRIVER_OBJECT`结构，并用恶意钩子的地址初始化其`MajorFunction`数组，之后操作系统内核将使用恶意的`DRIVER_OBJECT`结构来获取I/O请求处理程序的地址并执行恶意钩子（[图18-6](ch18.xhtml#ch18fig06)）。
- en: '![image](../images/18fig06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig06.jpg)'
- en: '*Figure 18-6: Hooking the storage driver stack by hijacking miniport `DRIVER_OBJECT`*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-6：通过劫持迷你端口`DRIVER_OBJECT`钩住存储驱动程序堆栈*'
- en: This approach is used by TDL3/TDL4, Rovnix, and Olmasco, and it has similar
    advantages and drawbacks as the previous approach. However, its hooks are even
    harder to remove because the whole `DRIVER_OBJECT` is different, meaning security
    software would need to make extra efforts to locate the original `DRIVER_OBJECT`
    structure.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法被TDL3/TDL4、Rovnix和Olmasco使用，它与前一种方法有相似的优缺点。然而，它的钩子更难移除，因为整个`DRIVER_OBJECT`结构不同，这意味着安全软件需要付出额外的努力来定位原始的`DRIVER_OBJECT`结构。
- en: This concludes our discussion of device driver stack hooking techniques. As
    we’ve seen, there’s no simple generic solution for removing the malicious hooks
    in order to read the malicious data from the protected areas of an infected machine’s
    hard drive. Another reason for the difficulty is that there are many different
    implementations of miniport storage drivers, and since they communicate directly
    with the hardware, each storage device vendor provides custom drivers for its
    hardware, so approaches that work for a certain class of miniport drivers will
    fail for others.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们对设备驱动程序栈挂钩技术的讨论结束。正如我们所见，要从感染机器的硬盘的受保护区域读取恶意数据，没有简单的通用解决方案来去除恶意挂钩。困难的另一个原因是，有许多不同实现的迷你端口存储驱动程序，而且由于它们直接与硬件通信，每个存储设备厂商都会为其硬件提供定制驱动程序，因此对于某一类迷你端口驱动程序有效的方法，在其他驱动程序中可能无效。
- en: '**Parsing the Hidden Filesystem Image**'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**解析隐藏文件系统镜像**'
- en: Once the rootkit’s self-defense protection is deactivated, we can read data
    from the malicious hidden storage, which yields the image of the malicious filesystem.
    The next logical step in forensic analysis is to parse the hidden filesystem and
    extract meaningful information.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Rootkit的自我防护保护被禁用，我们就可以读取恶意隐藏存储中的数据，从而得到恶意文件系统的镜像。法医分析中的下一步逻辑是解析隐藏文件系统并提取有意义的信息。
- en: To be able to parse a dumped filesystem, we need to know which type of malware
    it corresponds to. Each threat has its own implementation of the hidden storage,
    and the only way to reconstruct its layout is to engineer the malware to understand
    the code responsible for maintaining it. In some cases, the layout of the hidden
    storage can change from one version to another within the same malware family.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够解析转储的文件系统，我们需要知道它对应的是哪种类型的恶意软件。每种威胁都有其自己实现的隐藏存储，而重构其布局的唯一方法是通过逆向工程恶意软件，理解负责维护该布局的代码。在某些情况下，隐藏存储的布局可能会在同一恶意软件家族的不同版本之间发生变化。
- en: The malware may also encrypt or obfuscate its hidden storage to make it harder
    to perform forensic analysis, in which case we’d need to find the encryption keys.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可能加密或混淆其隐藏存储，以使法医分析变得更加困难，在这种情况下，我们需要找到加密密钥。
- en: '[Table 18-1](ch18.xhtml#ch18tab01) provides a summary of hidden filesystems
    related to the malware families we’ve discussed in previous chapters. In this
    table, we consider only the basic characteristics of the hidden filesystem, such
    as layout type, encryption used, and whether it implements compression.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[表18-1](ch18.xhtml#ch18tab01)提供了与我们在前几章中讨论的恶意软件家族相关的隐藏文件系统的总结。在此表中，我们仅考虑隐藏文件系统的基本特性，如布局类型、使用的加密方式以及是否实现了压缩。'
- en: '**Table 18-1:** Comparison of Hidden Filesystem Implementations'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**表18-1：**隐藏文件系统实现比较'
- en: '| **Functionality/malware** | **TDL4** | **Rovnix** | **Olmasco** | **Gapz**
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **功能/恶意软件** | **TDL4** | **Rovnix** | **Olmasco** | **Gapz** |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Filesystem type | Custom | FAT16modification | Custom | Custom |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 文件系统类型 | 自定义 | FAT16修改 | 自定义 | 自定义 |'
- en: '| Encryption | XOR/RC4 | Custom (XOR+ROL) | RC6modification | RC4 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 加密 | XOR/RC4 | 自定义（XOR+ROL） | RC6修改 | RC4 |'
- en: '| Compression | No | Yes | No | Yes |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 压缩 | 否 | 是 | 否 | 是 |'
- en: As we can see, each implementation is different, creating difficulties for forensic
    analysts and investigators.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，每种实现都不同，给法医分析师和调查人员带来了困难。
- en: '**The HiddenFsReader Tool**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HiddenFsReader工具**'
- en: In the course of our research on advanced malware threats, we’ve reverse engineered
    many different malware families and have managed to gather extensive information
    on various implementations of hidden filesystems that may be very useful to the
    security research community. For this reason, we’ve implemented a tool named HiddenFsReader
    (*[http://download.eset.com/special/ESETHfsReader.exe/](http://download.eset.com/special/ESETHfsReader.exe/)*)
    that automatically looks for hidden malicious containers on a computer and extracts
    the information contained within.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对高级恶意软件威胁的研究过程中，我们逆向分析了许多不同的恶意软件家族，并成功地收集了关于各种隐藏文件系统实现的广泛信息，这些信息对安全研究社区可能非常有用。因此，我们实现了一款名为HiddenFsReader的工具（*
    [http://download.eset.com/special/ESETHfsReader.exe/](http://download.eset.com/special/ESETHfsReader.exe/)
    *），该工具能够自动寻找计算机上的隐藏恶意容器并提取其中包含的信息。
- en: '[Figure 18-7](ch18.xhtml#ch18fig07) depicts the high-level architecture of
    the HiddenFsReader.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[图18-7](ch18.xhtml#ch18fig07)展示了HiddenFsReader的高层架构。'
- en: '![image](../images/18fig07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/18fig07.jpg)'
- en: '*Figure 18-7: High-level architecture of HiddenFsReader*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-7：HiddenFsReader的高层架构*'
- en: 'The HiddenFsReader consists of two components: a user-mode application and
    a kernel-mode driver. The kernel-mode driver essentially implements the functionality
    for disabling rootkit/bootkit self-defense mechanisms, and the user-mode application
    provides the user with an interface to gain low-level access to the hard drive.
    The application uses this interface to read actual data from the hard drive, even
    if the system is infected with an active instance of the malware.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: HiddenFsReader由两个组件组成：一个用户模式应用程序和一个内核模式驱动程序。内核模式驱动程序基本上实现了禁用根套件/引导套件自我防御机制的功能，而用户模式应用程序则为用户提供接口，以便低级访问硬盘。即使系统感染了活跃的恶意软件实例，应用程序也可以通过该接口从硬盘读取实际数据。
- en: The user-mode application itself is responsible for identifying hidden filesystems
    read from the hard drive, and it also implements decryption functionality to obtain
    the plaintext data from the encrypted hidden storage.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用户态应用程序负责识别从硬盘读取的隐藏文件系统，并且实现解密功能，以便从加密的隐藏存储中获取明文数据。
- en: 'The following threats and their corresponding hidden filesystems are supported
    in the latest release of the HiddenFsReader at the time of writing:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写时，最新版本的HiddenFsReader支持以下威胁及其相应的隐藏文件系统：
- en: Win32/Olmarik (TDL3/TDL3+/TDL4)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Olmarik (TDL3/TDL3+/TDL4)
- en: Win32/Olmasco (MaxXSS)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Olmasco (MaxXSS)
- en: Win32/Sirefef (ZeroAccess)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Sirefef (ZeroAccess)
- en: Win32/Rovnix
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Rovnix
- en: Win32/Xpaj
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Xpaj
- en: Win32/Gapz
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Gapz
- en: Win32/Flamer
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Flamer
- en: Win32/Urelas (GBPBoot)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Urelas (GBPBoot)
- en: Win32/Avatar
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win32/Avatar
- en: These threats employ custom hidden filesystems to store the payload and configuration
    data, better protecting against security software and making forensic analysis
    harder. We haven’t discussed all of these threats in this book, but you can find
    information on them in the list of references available at *[https://nostarch.com/rootkits/](https://nostarch.com/rootkits/)*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些威胁使用自定义隐藏文件系统来存储有效载荷和配置信息，从而更好地防范安全软件，增加取证分析的难度。我们在本书中并未讨论所有这些威胁，但你可以在* [https://nostarch.com/rootkits/](https://nostarch.com/rootkits/)*
    上找到相关信息。
- en: '**Conclusion**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: The implementation of a custom hidden filesystem is common for advanced threats
    like rootkits and bootkits. Hidden storage is used to keep configuration information
    and payloads secret, rendering traditional approaches to forensic analysis ineffective.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像根套件和引导套件这样的高级威胁，实施自定义隐藏文件系统是常见的做法。隐藏存储用于保密配置信息和有效载荷，从而使传统的取证分析方法失效。
- en: Forensic analysts must disable the threat’s self-defense mechanisms and reverse
    engineer the malware. In this way, they can reconstruct the hidden filesystem’s
    layout and identify the encryption scheme and key used to protect the malicious
    data. This requires extra time and effort on a per-threat basis, but this chapter
    has explored some of the possible approaches to tackling these problems. In [Chapter
    19](ch19.xhtml#ch19), we will continue to explore forensic analysis of malware,
    focusing specifically on UEFI rootkits. We will provide information on UEFI firmware
    acquisition and analysis with respect to malware targeting UEFI firmware.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 取证分析人员必须禁用威胁的自我防御机制并对恶意软件进行逆向工程。通过这种方式，他们可以重建隐藏文件系统的布局，并识别用于保护恶意数据的加密方案和密钥。这需要针对每个威胁额外的时间和努力，但本章已经探讨了一些应对这些问题的可能方法。在[第19章](ch19.xhtml#ch19)中，我们将继续探讨恶意软件的取证分析，特别是针对UEFI根套件的分析。我们将提供关于UEFI固件获取和分析的相关信息，重点关注针对UEFI固件的恶意软件。
