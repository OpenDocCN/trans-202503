- en: —5—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Binary Search for a Smuggler’s Ship
  prefs: []
  type: TYPE_NORMAL
- en: The port of Usb was little more than a fishing village. A dozen weathered buildings
    clustered around the end of a single long pier. A few pockets of meager activity
    surrounded the most recent arrivals, but otherwise the town was reassuringly quiet.
  prefs: []
  type: TYPE_NORMAL
- en: Frank headed straight for the Crab’s Pinch, a fisherman’s bar renowned for its
    clam chowder and Wednesday night sea shanty contests. With any luck, one of his
    contacts would turn up before the day was out. After all, the Crab’s Pinch was
    the only place to go in Usb. So Frank planted himself at a table in the back corner,
    ordered the chowder, and waited.
  prefs: []
  type: TYPE_NORMAL
- en: It wasn’t long before a freelance smuggler named Mavis entered the dank little
    bar. Careful by nature, Mavis had never technically been convicted of a crime,
    though it was well-known that she’d once set her own ship on fire to destroy evidence.
    Frank got along with her well enough, at least once he’d left the force, and they
    even exchanged the occasional scrap of information.
  prefs: []
  type: TYPE_NORMAL
- en: Frank, having nursed his chowder for a solid hour, finally pushed away his bowl
    and motioned to Mavis. She hesitated a moment by the door before jostling her
    way through the bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0030-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Mavis,” said Frank as she joined him in the corner, “how are you?”
  prefs: []
  type: TYPE_NORMAL
- en: “I was doing a lot better 10 minutes ago,” she spat.
  prefs: []
  type: TYPE_NORMAL
- en: Before Frank could ask, Officer Notation strode through the door and held up
    her hands. “Ladies and gentlemen,” she called. “If I could have your attention
    for a moment. I’m looking for a cart that came through here two nights ago.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank cursed under his breath. So much for his lead.
  prefs: []
  type: TYPE_NORMAL
- en: “I come in from the dawn run, hoping for a bowl of hot chowder and a few minutes
    of peace,” Mavis complained. “Instead I get this copper clammering about donkey
    carts.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank laughed dryly. “And until she goes away, you can’t unload your cargo.
    Right?”
  prefs: []
  type: TYPE_NORMAL
- en: Mavis scowled at him but didn’t object. Usb had never found success in either
    the fishing or shipping industries. The port did, however, appeal to those criminals
    concerned with moving merchandise without dealing with nosy government officials.
    Frank would wager a month’s rent that there wasn’t a single ship at dock that
    wasn’t smuggling something.
  prefs: []
  type: TYPE_NORMAL
- en: “Do you know anything about the cart?” Frank dropped his voice to just above
    a whisper.
  prefs: []
  type: TYPE_NORMAL
- en: Mavis shrugged. “There’s always carts on the docks. This is a port, Frank. People
    move things.”
  prefs: []
  type: TYPE_NORMAL
- en: “This is a special cart,” Frank pressed. “A bunch of individual animal pens,
    like a giant array on wheels.”
  prefs: []
  type: TYPE_NORMAL
- en: “Sounds fancy,” said Mavis. “But I haven’t heard of any ships moving animals.
    I might have heard a rumor about a crate or two of miniature turtles, but nothing
    large enough to need a pen. You sure it came through here?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank nodded. The smell had been like a fish-scented air freshener in an outhouse,
    and few places smelled as bad as Usb.
  prefs: []
  type: TYPE_NORMAL
- en: “Anybody casting off at that time?” he asked. If the thieves had transported
    the stolen documents this far, they wouldn’t have waited around.
  prefs: []
  type: TYPE_NORMAL
- en: “Only the *Retry Loop*,” said Mavis. “And I’m only telling you that because
    it’s public knowledge. I don’t know what it was carrying, and I don’t care.”
  prefs: []
  type: TYPE_NORMAL
- en: “Do you know when it returns?” asked Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “Got back into port 19 hours ago,” replied Mavis. “Don’t know what it was carrying
    then either.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank smiled widely. “Sounds like it’s time for me to take a stroll around town,”
    he said.
  prefs: []
  type: TYPE_NORMAL
- en: Mavis smiled halfheartedly at him and turned to flag down a waiter.
  prefs: []
  type: TYPE_NORMAL
- en: Frank made it less than 20 meters down the pier before Officer Notation marched
    up beside him.
  prefs: []
  type: TYPE_NORMAL
- en: “Mr. Runtime, this is my investigation,” she began. “If you have information—”
  prefs: []
  type: TYPE_NORMAL
- en: Frank stopped, causing her to pull up short. “What exactly are you investigating,
    Officer?” he asked.
  prefs: []
  type: TYPE_NORMAL
- en: It was better than Frank had hoped. Notation opened and closed her mouth a few
    times as a red flush spread up her neck.
  prefs: []
  type: TYPE_NORMAL
- en: “The captain doesn’t know you’re here, does he?” Frank asked. “This isn’t exactly
    an *official* investigation.”
  prefs: []
  type: TYPE_NORMAL
- en: “I don’t know what you’re—” started Officer Notation, but Frank cut her off.
  prefs: []
  type: TYPE_NORMAL
- en: “Cut the act,” he said. “The fact you’re out here alone is all the proof I need.
    You’re running this investigation on your own time. The question is, why?”
  prefs: []
  type: TYPE_NORMAL
- en: The flush had now finished its ascent of Officer Notation’s face. Her ears burned
    a particularly vivid shade of red.
  prefs: []
  type: TYPE_NORMAL
- en: “That’s none of your concern,” she said.
  prefs: []
  type: TYPE_NORMAL
- en: “It is when the captain comes to me because he can’t trust his own officers,”
    Frank replied calmly.
  prefs: []
  type: TYPE_NORMAL
- en: “The *captain* hired a washed-up gumshoe like *you*?”
  prefs: []
  type: TYPE_NORMAL
- en: “Yes. Because he can trust *me*.”
  prefs: []
  type: TYPE_NORMAL
- en: Officer Notation’s face grew hard and her eyes burned. For a second, Frank thought
    she might end this conversation with her billy club. But almost as quickly as
    her anger had flared, it deflated.
  prefs: []
  type: TYPE_NORMAL
- en: “I need to recover those documents,” she said mournfully. “It was my fault—I
    was on guard duty that night.”
  prefs: []
  type: TYPE_NORMAL
- en: “I see,” said Frank thoughtfully.
  prefs: []
  type: TYPE_NORMAL
- en: “I need to recover those documents,” repeated Officer Notation, sounding agitated.
    “I’ve only been on the force for a few months and—”
  prefs: []
  type: TYPE_NORMAL
- en: Frank cut her off and gave her what he hoped was a reassuring smile. This was
    what he had expected. Rookies rarely dealt well with their first mistakes, and
    Notation seemed more tightly wound than most. “We’re looking for the *Retry Loop*,”
    he said. “The Crannocks’ cart unloaded something there the night of the robbery.
    The ship docked 19 hours ago.”
  prefs: []
  type: TYPE_NORMAL
- en: He didn’t trust her, of course, but he wanted to keep her close, keep an eye
    on her. The fact that she had found the Crannocks meant she knew more than she
    had put in her report. Something was missing from her story, and he needed to
    find out what else she knew.
  prefs: []
  type: TYPE_NORMAL
- en: “We better get started,” said Notation, looking worriedly down the pier. “There
    are a lot of ships to check. Should we start at the front?” As most of the vessels
    in port belonged to smugglers, none of them displayed identification. They would
    have to ask each ship’s name in turn.
  prefs: []
  type: TYPE_NORMAL
- en: “We can do better than that,” Frank explained. “The harbormaster is fanatical
    about organization. He insists that the docked ships be sorted in order of their
    arrival time. The newest arrival gets a prime spot near town, where the crew can
    easily load and unload, but when a new ship arrives, the rest of them are forced
    to shift down to give it space in front.”
  prefs: []
  type: TYPE_NORMAL
- en: “That’s absurd,” protested Notation. “What a tremendous amount of wasted effort.
    Why would he do that?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank chuckled. “He claims it’s for efficiency, but anyone who’s spent a week
    in Usb knows the truth. The harbormaster can’t stand the smell of rotting fish.
    Ships that remain in harbor without selling their loads become, well . . . fragrant.
    The harbormaster’s organizational scheme moves the ones that have been here longer
    away from his shack.”
  prefs: []
  type: TYPE_NORMAL
- en: Officer Notation stared at him. “Are you serious?” she asked finally.
  prefs: []
  type: TYPE_NORMAL
- en: Frank chuckled again. “Yes. You’ll start picking up these useful bits of information,
    too, once you’ve walked the beat awhile. The point is that we know the ships are
    in sorted order and we know the *Retry Loop* has been here for 19 hours, so we
    can just do a *binary search*.
  prefs: []
  type: TYPE_NORMAL
- en: “Our target value is 19, and our algorithm is binary search. Right now the search
    space is that whole line of ships, so we already have an upper and lower bound.
    If we use inclusive bounds, our lower bound is the first ship and our upper bound
    is the last ship. If the *Retry Loop* is here, it obviously can’t be in front
    of the first ship or after the last ship.
  prefs: []
  type: TYPE_NORMAL
- en: “So we start with the middle ship and ask how long it’s been in port. If it’s
    been there less than 19 hours, then it must come before the *Retry Loop.* That
    will split our search space in two. And—”
  prefs: []
  type: TYPE_NORMAL
- en: “If it’s been there more than 19 hours, then it must come after the *Retry Loop*,”
    interrupted Notation. “I know about binary search. My Police Algorithms final
    was just two and a half months ago.”
  prefs: []
  type: TYPE_NORMAL
- en: With that, the two of them set off in search of the *Retry Loop.* The middle
    ship, a yellow schooner that smelled oddly of bananas, had been in port for 17
    hours.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0034-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That meant they could rule out the half of the ships at the front, including
    the middle ship. Frank adjusted the lower bound to the first ship that *could*
    be the *Retry Loop*, one ship past the yellow schooner.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0034-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the reduced search space, they chose a new middle point. It took a while
    to convince the captain of the next ship that they weren’t undercover customs
    officials. After 10 minutes, Notation shoved her badge under the captain’s nose,
    and his tone changed immediately to an irate whine as he informed them that his
    ship, the *Corrupt Packet*, had been stuck in port for 22 agonizing hours. He
    demanded they speak to the harbormaster on his behalf.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0035-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since their target was 19 hours, they knew the *Retry Loop* would have to come
    before the *Corrupt Packet.* They changed the bounds again so that the ship to
    the left of the *Corrupt Packet* was now the upper bound.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0035-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This left only two ships in the search range; they were rapidly nearing the
    end of the search. If neither of these ships was the *Retry Loop*, they would
    know for certain that it had left port, as once there were no more elements in
    the search space, they could rule out the entire search space.
  prefs: []
  type: TYPE_NORMAL
- en: Since there were only two ships left, they could choose either as their new
    middle point. Going with his gut, Frank picked the earlier ship, which happened
    to also be their lower bound. A quick chat with a crewmember loitering on the
    pier confirmed that the ship was indeed the *Retry Loop* and it had been in port
    for 19 hours.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0035-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Now what?” asked Officer Notation as they stood watching the ship.
  prefs: []
  type: TYPE_NORMAL
- en: “We use your shiny badge again,” Frank replied.
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: BINARY SEARCH**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpts from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: 'A binary search algorithm is used to efficiently find a target value *v* in
    a sorted array *A*. Unlike in a linear scan, a binary search uses information
    about the structure of the data to make the search more efficient. The key to
    efficient algorithms is information. In this case, we use the fact that the array
    is sorted in increasing order:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A*[*i*] ≤ *A*[*j*] for any pair of indexes *i* and *j* such that *i* < *j*'
  prefs: []
  type: TYPE_NORMAL
- en: This might not seem like a lot of information, but it’s enough to make the search
    more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'The binary search algorithm works by repeatedly dividing the search space in
    half and limiting the search to only one of those halves. The algorithm limits
    the active search space by tracking two bounds. The upper bound (*IndexHigh*)
    marks the highest index of the array that’s part of the active search space. The
    lower bound (*IndexLow*) marks the lowest index. Throughout the algorithm, if
    the target value is in the array, we guarantee the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A*[*IndexLow*] ≤ *v* ≤ *A*[*IndexHigh*]'
  prefs: []
  type: TYPE_NORMAL
- en: 'At each step in the search, we check the value halfway between the lower and
    upper bounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0036-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can then compare the value at this middle location, *A*[*IndexMid*], with
    the target value, *v*. If the middle point is less than the target value, *A*[*IndexMid*]
    < *v*, we know that the target value must lie after the middle index. This allows
    us to chop the search space in half again by making *IndexLow* = *IndexMid* +
    1.
  prefs: []
  type: TYPE_NORMAL
- en: If the middle point is greater than the target value, *A*[*IndexMid*] > *v*,
    we know the target value must lie before the middle index, which allows us to
    chop the search space in half by making *IndexHigh* = *IndexMid* – 1.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if we find *A*[*IndexMid*] equals *v*, we can immediately conclude
    the search. We found the target.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider searching the following (sorted) array for the value 15\. The
    boxes with dotted outlines correspond to the values the algorithm has checked,
    and the shaded elements are ones that have been eliminated from the search.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0037-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first midpoint check finds a value of 11, which is less than our target
    value of 15\. Since we know the array is sorted in increasing order, we can rule
    out the midpoint and anything before it. We move our lower bound index appropriately
    (*IndexLow* = *IndexMid* + 1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0037-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, after the second comparison, we find a midpoint value of 52, which
    is greater than the target value. We can rule out the midpoint and everything
    after it. We move our upper bound index (*IndexHigh* = *IndexMid* – 1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0038-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that even though the lower bound’s index pointed to the target value (*v*
    = 15) for several iterations, we continued the search until the midpoint pointed
    to the target value. This is because our search checks only the value at the midpoint.
    We don’t check the values at the lower or upper indexes until the midpoint reaches
    them.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if the target value is not in the array? As the search progresses,
    the bounds will move closer until there are no unexplored values between them.
    Since we are always moving one of the bounds *past* the midpoint index, we can
    stop the search when *IndexHigh* < *IndexLow.* At that point we can guarantee
    the target value is not in the array.
  prefs: []
  type: TYPE_NORMAL
