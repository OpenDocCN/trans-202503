- en: INTRODUCTION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you’re working in security, chances are you’re using data science more than
    ever before, even if you may not realize it. For example, your antivirus product
    uses data science algorithms to detect malware. Your firewall vendor may have
    data science algorithms detecting suspicious network activity. Your security information
    and event management (SIEM) software probably uses data science to identify suspicious
    trends in your data. Whether conspicuously or not, the entire security industry
    is moving toward incorporating more data science into security products.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced IT security professionals are incorporating their own custom machine
    learning algorithms into their workflows. For example, in recent conference presentations
    and news articles, security analysts at Target, Mastercard, and Wells Fargo all
    described developing custom data science technologies that they use as part of
    their security workflows.[¹](footnote.xhtml#introfn1) If you’re not already on
    the data science bandwagon, there’s no better time to upgrade your skills to include
    data science into your security practice.
  prefs: []
  type: TYPE_NORMAL
- en: '**What Is Data Science?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Data science* is a growing set of algorithmic tools that allow us to understand
    and make predictions about data using statistics, mathematics, and artful statistical
    data visualizations. More specific definitions exist, but generally, data science
    has three subcomponents: machine learning, data mining, and data visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: In the security context, machine learning algorithms learn from training data
    to detect new threats. These methods have been proven to detect malware that flies
    under the radar of traditional detection techniques like signatures. Data mining
    algorithms search security data for interesting patterns (such as relationships
    between threat actors) that might help us discern attack campaigns targeting our
    organizations. Finally, data visualization renders sterile, tabular data into
    graphical format to make it easier for people to spot interesting and suspicious
    trends. I cover all three areas in depth in this book and show you how to apply
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Data Science Matters for Security**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data science is critically important for the future of cybersecurity for three
    reasons: first, security is *all about data*. When we seek to detect cyber threats,
    we’re analyzing data in the form of files, logs, network packets, and other artifacts.
    Traditionally, security professionals didn’t use data science techniques to make
    detections based on these data sources. Instead, they used file hashes, custom-written
    rules like signatures, and manually defined heuristics. Although these techniques
    have their merits, they required handcrafted techniques for each type of attack,
    necessitating too much manual work to keep up with the changing cyber threat landscape.
    In recent years, data science techniques have become crucial in bolstering our
    ability to detect threats.'
  prefs: []
  type: TYPE_NORMAL
- en: Second, data science is important to cybersecurity because the number of cyberattacks
    on the internet has grown dramatically. Take the growth of the malware underworld
    as an example. In 2008, there were about 1 million unique malware executables
    known to the security community. By 2012, there were 100 million. As this book
    goes to press in 2018, there are more than 700 million malicious executables known
    to the security community (*[https://www.av-test.org/en/statistics/malware/](https://www.av-test.org/en/statistics/malware/)*),
    and this number is likely to grow.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the sheer volume of malware, manual detection techniques such as signatures
    are no longer a reasonable method for detecting all cyberattacks. Because data
    science techniques automate much of the work that goes into detecting cyberattacks,
    and vastly decrease the memory usage needed to detect such attacks, they hold
    tremendous promise in defending networks and users as cyber threats grow.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, data science matters for security because data science is *the* technical
    trend of the decade, both inside and outside of the security industry, and it
    will likely remain so through the next decade. Indeed, you’ve probably seen applications
    of data science everywhere—in personal voice assistants (Amazon Echo, Siri, and
    Google Home), self-driving cars, ad recommendation systems, web search engines,
    medical image analysis systems, and fitness tracking apps.
  prefs: []
  type: TYPE_NORMAL
- en: We can expect data science–driven systems to have major impacts in legal services,
    education, and other areas. Because data science has become a key enabler across
    the technical landscape, universities, major companies (Google, Facebook, Microsoft,
    and IBM), and governments are investing billions of dollars to improve data science
    tools. Thanks to these investments, data science tools will become even more adept
    at solving hard attack-detection problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Applying Data Science to Malware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book focuses on data science as it applies to *malware*, which we define
    as executable programs written with malicious intent, because malware continues
    to be the primary means by which threat actors gain a foothold on networks and
    subsequently achieve their goals. For example, in the ransomware scourge that
    has emerged in recent years, attackers typically send users malicious email attachments
    that download ransomware executables (malware) to users’ machines, which then
    encrypt users’ data and ask them for a ransom to decrypt the data. Although skilled
    attackers working for governments sometimes avoid using malware altogether to
    fly under the radar of detection systems, malware continues to be the major enabling
    technology in cyberattacks today.
  prefs: []
  type: TYPE_NORMAL
- en: By homing in on a specific application of security data science rather than
    attempting to cover security data science broadly, this book aims to show more
    thoroughly how data science techniques can be applied to a major security problem.
    By understanding malware data science, you’ll be better equipped to apply data
    science to other areas of security, like detecting network attacks, phishing emails,
    or suspicious user behavior. Indeed, almost all the techniques you’ll learn in
    this book apply to building data science detection and intelligence systems in
    general, not just for malware.
  prefs: []
  type: TYPE_NORMAL
- en: '**Who Should Read This Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is aimed toward security professionals who are interested in learning
    more about how to apply data science to computer security problems. If computer
    security *and* data science are new to you, you might find yourself having to
    look up terms to give yourself a little bit of context, but you can still read
    this book successfully. If you’re only interested in data science, but not security,
    this book is probably not for you.
  prefs: []
  type: TYPE_NORMAL
- en: '**About This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part of the book consists of three chapters that cover basic reverse
    engineering concepts necessary for understanding the malware data science techniques
    discussed later in the book. If you’re new to malware, read the first three chapters
    first. If you’re an old hand at malware reverse engineering, you can skip these
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1](ch01.xhtml#ch01): Basic Static Malware Analysis** covers static
    analysis techniques for picking apart malware files and discovering how they achieve
    malicious ends on our computers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 2](ch02.xhtml#ch02): Beyond Basic Static Analysis: x86 Disassembly**
    gives you a brief overview of x86 assembly language and how to disassemble and
    reverse engineer malware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 3](ch03.xhtml#ch03): A Brief Introduction to Dynamic Analysis**
    concludes the reverse engineering section of the book by discussing dynamic analysis,
    which involves running malware in controlled environments to learn about its behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next two chapters of the book, [Chapters 4](ch04.xhtml#ch04) and [5](ch05.xhtml#ch05),
    focus on malware relationship analysis, which involves looking at similarities
    and differences between collections of malware to identify malware campaigns against
    your organization, such as a ransomware campaign controlled by a group of cybercriminals,
    or a concerted, targeted attack on your organization. These stand-alone chapters
    are for readers who are interested not only in detecting malware, but also in
    extracting valuable threat intelligence to learn who is attacking their network.
    If you’re less interested in threat intelligence and more interested in data science–driven
    malware detection, you can safely skip these chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4](ch04.xhtml#ch04): Identifying Attack Campaigns Using Malware
    Networks** shows you how to analyze and visualize malware based on shared attributes,
    such as the hostnames that malware programs call out to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 5](ch05.xhtml#ch05): Shared Code Analysis** explains how to identify
    and visualize shared code relationships between malware samples, which can help
    you identify whether groups of malware samples came from one or multiple criminal
    groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next four chapters cover everything you need to know to understand, apply,
    and implement machine learning–based malware detection systems. These chapters
    also provide a foundation for applying machine learning to other security contexts.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6](ch06.xhtml#ch06): Understanding Machine Learning–Based Malware
    Detectors** is an accessible, intuitive, and non-mathematical introduction to
    basic machine learning concepts. If you have a history with machine learning,
    this chapter will provide a convenient refresher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 7](ch07.xhtml#ch07): Evaluating Malware Detection Systems** shows
    you how to evaluate the accuracy of your machine learning systems using basic
    statistical methods so that you can select the best possible approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 8](ch08.xhtml#ch08): Building Machine Learning Detectors** introduces
    open source machine learning tools you can use to build your own machine learning
    systems and explains how to use them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 9](ch09.xhtml#ch09): Visualizing Malware Trends** covers how to
    visualize malware threat data to reveal attack campaigns and trends using Python,
    and how to integrate data visualization into your day-to-day workflow when analyzing
    security data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last three chapters introduce deep learning, an advanced area of machine
    learning that involves a bit more math. Deep learning is a hot growth area within
    security data science, and these chapters provide enough to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10](ch10.xhtml#ch10): Deep Learning Basics** covers the basic concepts
    that underlie deep learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 11](ch11.xhtml#ch11): Building a Neural Network Malware Detector
    with Keras** explains how to implement deep learning–based malware detection systems
    in Python using open source tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Chapter 12](ch12.xhtml#ch12): Becoming a Data Scientist** concludes the
    book by sharing different pathways to becoming a data scientist and qualities
    that can help you succeed in the field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appendix: An Overview of Datasets and Tools** describes the data and example
    tool implementations accompanying the book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How to Use the Sample Code and Data**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No good programming book is complete without sample code to play with and extend
    on your own. Sample code and data accompany each chapter of this book and are
    described exhaustively in the appendix. All the code targets Python 2.7 in Linux
    environments. To access the code and data, you can download a VirtualBox Linux
    virtual machine, which has the code, data, and supporting open source tools all
    set up and ready to go, and run it within your own VirtualBox environment. You
    can download the book’s accompanying data at *[http://www.malwaredatascience.com/](http://www.malwaredatascience.com/)*,
    and you can download the VirtualBox for free at *[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)*.
    The code has been tested on Linux, but if you prefer to work outside of the Linux
    VirtualBox, the same code should work almost as well on MacOS, and to a lesser
    extent on Windows machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d rather install the code and data in your own Linux environment, you
    can download them here: *[http://www.malwaredatascience.com/](http://www.malwaredatascience.com/)*.
    You’ll find a directory for each chapter in the downloadable archive, and within
    each chapter’s directory there are *code/* and *data/* directories that contain
    the corresponding code and data. Code files correspond to chapter listings or
    sections, whichever makes more sense for the application at hand. Some code files
    are exactly like the listings, whereas others have been changed slightly to make
    it easier for you to play with parameters and other options. Code directories
    come with pip *requirements.txt* files, which give the open source libraries that
    the code in that chapter depends on to run. To install these libraries on your
    machine, simply type pip -r requirements.txt in each chapter’s *code/* directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have access to the code and data for this book, let’s get started.
  prefs: []
  type: TYPE_NORMAL
