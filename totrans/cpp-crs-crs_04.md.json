["```\n#include <cstdio>\n\nint main() {\n  unsigned short a = 0b10101010; ➊\n  printf(\"%hu\\n\", a);\n  int b = 0123; ➋\n  printf(\"%d\\n\", b);\n  unsigned long long d = 0xFFFFFFFFFFFFFFFF; ➌\n  printf(\"%llu\\n\", d);\n}\n--------------------------------------------------------------------------\n170 ➊\n83 ➋\n18446744073709551615 ➌\n```", "```\n#include <cstdio>\n\nint main() {\n  unsigned int a = 3669732608;\n  printf(\"Yabba %x➊!\\n\", a);\n  unsigned int b = 69;\n  printf(\"There are %u➋,%o➌ leaves here.\\n\", b➍, b➎);\n}\n--------------------------------------------------------------------------\nYabba dabbad00➊!\nThere are 69➋,105➌ leaves here.\n```", "```\nint mit_zip_code = 02139; // Won't compile\n```", "```\nfloat a = 0.1F;\ndouble b = 0.2;\nlong double c = 0.3L;\n```", "```\ndouble plancks_constant = 6.62607004➊e-34➋;\n```", "```\n#include <cstdio>\n\nint main() {\n  double an = 6.0221409e23; ➊\n  printf(\"Avogadro's Number:  %le➋ %lf➌ %lg➍\\n\", an, an, an);\n  float hp = 9.75; ➎\n  printf(\"Hogwarts' Platform: %e %f %g\\n\", hp, hp, hp);\n}\n--------------------------------------------------------------------------\nAvogadro's Number:  6.022141e+23➋ 602214090000000006225920.000000➌\n6.02214e+23➍\nHogwarts' Platform: 9.750000e+00 9.750000 9.75\n```", "```\n#include <cstdio>\n\nint main() {\n  char x = 'M';\n  wchar_t y = L'Z';\n  printf(\"Windows binaries start with %c%lc.\\n\", x, y);\n}\n--------------------------------------------------------------------------\nWindows binaries start with MZ.\n```", "```\n#include <cstdio>\n\nint main() {\n  bool b1 = true;  ➊ // b1 is true\n  bool b2 = false; ➋ // b2 is false\n  printf(\"%d %d\\n\", b1, b2); ➌\n}\n--------------------------------------------------------------------------\n1 0 ➌\n```", "```\n#include <cstdio>\n\nint main() {\n  printf(\" 7 ==  7: %d➊\\n\", 7  ==  7➋);\n  printf(\" 7 !=  7: %d\\n\", 7  !=  7);\n  printf(\"10 > 20: %d\\n\", 10 >  20);\n  printf(\"10 >= 20: %d\\n\", 10 >= 20);\n  printf(\"10 < 20: %d\\n\", 10 <  20);\n  printf(\"20 <= 20: %d\\n\", 20 <= 20);\n}\n--------------------------------------------------------------------------\n 7 ==  7: 1 ➊\n 7 !=  7: 0\n10 >  20: 0\n10 >= 20: 0\n10 <  20: 1\n20 <= 20: 1\n```", "```\n#include <cstdio>\n\nint main() {\n  bool t = true;\n  bool f = false;\n  printf(\"!true: %d\\n\", !t); ➊\n  printf(\"true  &&  false: %d\\n\", t &&  f); ➋\n  printf(\"true  && !false: %d\\n\", t && !f); ➌\n  printf(\"true  ||  false: %d\\n\", t ||  f); ➍\n  printf(\"false ||  false: %d\\n\", f ||  f); ➎\n}\n--------------------------------------------------------------------------\n!true: 0 ➊\ntrue  &&  false: 0 ➋\ntrue  && !false: 1 ➌\ntrue  ||  false: 1 ➍\nfalse ||  false: 0 ➎\n```", "```\n#include <cstddef>\n#include <cstdio>\n\nint main() {\n  size_t size_c = sizeof(char); ➊\n  printf(\"char: %zu\\n\", size_c);\n  size_t size_s = sizeof(short); ➋\n  printf(\"short: %zu\\n\", size_s);\n  size_t size_i = sizeof(int); ➌\n  printf(\"int: %zu\\n\", size_i);\n  size_t size_l = sizeof(long); ➍\n  printf(\"long: %zu\\n\", size_l);\n size_t size_ll = sizeof(long long); ➎\n  printf(\"long long: %zu\\n\", size_ll);\n}\n--------------------------------------------------------------------------\nchar: 1 ➊\nshort: 2 ➋\nint: 4 ➌\nlong: 4 ➍\nlong long: 8 ➎\n```", "```\n#include <cstdio>\n\nvoid taunt() {\n  printf(\"Hey, laser lips, your mama was a snow blower.\");\n}\n```", "```\nint my_array[100];\n```", "```\nint array[] = { 1, 2, 3, 4 };\n```", "```\n#include <cstdio>\n\nint main() {\n  int arr[] = { 1, 2, 3, 4 }; ➊\n  printf(\"The third element is %d.\\n\", arr[2]➋);\n  arr[2] = 100; ➌\n  printf(\"The third element is %d.\\n\", arr[2]➍);\n}\n--------------------------------------------------------------------------\nThe third element is 3\\. ➋\nThe third element is 100\\. ➍\n```", "```\nfor(init-statement; conditional; iteration-statement) {\n  --snip--\n}\n```", "```\n#include <cstddef>\n#include <cstdio>\n\nint main() {\n  unsigned long maximum = 0; ➊\n unsigned long values[] = { 10, 50, 20, 40, 0 }; ➋\n  for(size_t i=0; i < 5; i++) { ➌\n    if (values[i] > maximum➍) maximum = values[i]; ➎\n  }\n  printf(\"The maximum value is %lu\", maximum); ➏\n}\n--------------------------------------------------------------------------\nThe maximum value is 50 ➏\n```", "```\nfor(element-type➊ element-name➋ : array-name➌) {\n  --snip--\n}\n```", "```\n#include <cstdio>\n\nint main() {\n  unsigned long maximum = 0;\n  unsigned long values[] = { 10, 50, 20, 40, 0 };\n  for(unsigned long value : values➊) {\n    if (value➋ > maximum) maximum = value➌;\n  }\n printf(\"The maximum value is %lu.\", maximum);\n}\n--------------------------------------------------------------------------\nThe maximum value is 50.\n```", "```\nshort array[] = { 104, 105, 32, 98, 105, 108, 108, 0 };\nsize_t n_elements = sizeof(array)➊ / sizeof(short)➋;\n```", "```\nchar english[] = \"A book holds a house of gold.\";\nchar16_t chinese[] = u\"\\u4e66\\u4e2d\\u81ea\\u6709\\u9ec4\\u91d1\\u5c4b\";\n```", "```\n#include <cstdio>\n\nint main() {\n  char house[] = \"a house of gold.\";\n  printf(\"A book holds %s\\n \", house);\n}\n--------------------------------------------------------------------------\nA book holds a house of gold.\n```", "```\n#include <cstdio>\n\nint main() {\n  char house[] = \"a \"\n      \"house \"\n      \"of \"  \"gold.\";\n  printf(\"A book holds %s\\n \", house);\n}\n--------------------------------------------------------------------------\nA book holds a house of gold.\n```", "```\n#include <cstdio>\n\nint main() {\n  char alphabet[27];➊\n  for (int i = 0; i<26; i++) {\n alphabet[i] = i + 97; ➋\n  }\n  alphabet[26] = 0; ➌\n  printf(\"%s\\n\", alphabet); ➍\n  for (int i = 0; i<26; i++) {\n    alphabet[i] = i + 65; ➎\n  }\n  printf(\"%s\", alphabet); ➏\n}\n--------------------------------------------------------------------------\nabcdefghijklmnopqrstuvwxyz➍\nABCDEFGHIJKLMNOPQRSTUVWXYZ➏\n```", "```\nenum class Race {\n  Dinan,\n Teklan,\n  Ivyn,\n  Moiran,\n  Camite,\n  Julian,\n  Aidan\n};\n```", "```\nRace langobard_race = Race::Aidan;\n```", "```\nswitch➊(condition➋) {\n  case➌ (case-a➍): {\n    // Handle case a here\n    --snip--\n  }➎ break➏;\n  case (case-b): {\n    // Handle case b here\n    --snip--\n  } break;\n // Handle other conditions as desired\n    --snip--\n  default➐: {\n    // Handle the default case here\n    --snip--\n  }\n}\n```", "```\n#include <cstdio>\n\nenum class Race { ➊\n  Dinan,\n  Teklan,\n  Ivyn,\n  Moiran,\n  Camite,\n  Julian,\n  Aidan\n};\n\nint main() {\n  Race race = Race::Dinan; ➋\n\n  switch(race) { ➌\n  case Race::Dinan: { ➍\n      printf(\"You work hard.\");\n    } break;➎\n  case Race::Teklan: {\n      printf(\"You are very strong.\");\n    } break;\n  case Race::Ivyn: {\n      printf(\"You are a great leader.\");\n    } break;\n  case Race::Moiran: {\n      printf(\"My, how versatile you are!\");\n    } break;\n case Race::Camite: {\n      printf(\"You're incredibly helpful.\");\n    } break;\n  case Race::Julian: {\n      printf(\"Anything you want!\");\n    } break;\n  case Race::Aidan: {\n      printf(\"What an enigma.\");\n    } break;\n  default: {\n      printf(\"Error: unknown race!\"); ➏\n    }\n  }\n}\n--------------------------------------------------------------------------\nYou work hard.\n```", "```\nstruct Book {\n  char name[256]; ➊\n  int year; ➋\n  int pages; ➌\n  bool hardcover; ➍\n};\n```", "```\n#include <cstdio>\n\nstruct Book {\n  char name[256];\n  int year;\n  int pages;\n  bool hardcover;\n};\n\nint main() {\n  Book neuromancer; ➊\n  neuromancer.pages = 271; ➋\n  printf(\"Neuromancer has %d pages.\", neuromancer.pages); ➌\n}\n--------------------------------------------------------------------------\nNeuromancer has 271 pages. ➌\n```", "```\nunion Variant {\n  char string[10];\n  int integer;\n  double floating_point;\n};\n```", "```\n#include <cstdio>\n\nunion Variant {\n  char string[10];\n  int integer;\n  double floating_point;\n};\n\nint main() {\n  Variant v; ➊\n  v.integer = 42; ➋\n  printf(\"The ultimate answer: %d\\n\", v.integer); ➌\n  v.floating_point = 2.7182818284; ➍\n  printf(\"Euler's number e:    %f\\n\", v.floating_point); ➎\n  printf(\"A dumpster fire:     %d\\n\", v.integer); ➏\n}\n--------------------------------------------------------------------------\nThe ultimate answer: 42 ➌\nEuler's number e:    2.718282 ➎\nA dumpster fire:     -1961734133➏\n```", "```\nstruct ClockOfTheLongNow {\n  void add_year() { ➊\n    year++; ➋\n  }\n  int year; ➌\n};\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  --snip--\n};\n\nint main() {\n  ClockOfTheLongNow clock; ➊\n  clock.year = 2017; ➋\n  clock.add_year(); ➌\n  printf(\"year: %d\\n\", clock.year); ➍\n  clock.add_year(); ➎\n  printf(\"year: %d\\n\", clock.year); ➏\n}\n--------------------------------------------------------------------------\nyear: 2018 ➍\nyear: 2019 ➏\n```", "```\nstruct ClockOfTheLongNow {\n  void add_year() {\n    year++;\n  }\n  bool set_year(int new_year) { ➊\n    if (new_year < 2019) return false; ➋\n    year = new_year;\n    return true;\n  }\n  int get_year() { ➌\n    return year;\n  }\nprivate: ➍\n  int year;\n};\n```", "```\nclass ClockOfTheLongNow {\n  int year;\npublic:\n  void add_year() {\n    --snip--\n  }\n  bool set_year(int new_year) {\n    --snip--\n  }\n  int get_year() {\n    --snip--\n  }\n};\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  --snip--\n};\n\nint main() {\n  ClockOfTheLongNow clock; ➊\n  if(!clock.set_year(2018)) { ➋ // will fail; 2018 < 2019\n   clock.set_year(2019); ➌\n  }\n  clock.add_year(); ➍\n  printf(“year: %d”, clock.get_year());\n}\n--------------------------------------------------------------------------\nyear: 2020 ➎\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  ClockOfTheLongNow() { ➊\n    year = 2019; ➋\n  }\n  --snip--\n};\n\nint main() {\n  ClockOfTheLongNow clock; ➌\n  printf(\"Default year: %d\", clock.get_year()); ➍\n}\n--------------------------------------------------------------------------\nDefault year: 2019 ➍\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  ClockOfTheLongNow(int year_in) { ➊\n    if(!set_year(year_in)) { ➋\n      year = 2019; ➌\n    }\n  }\n --snip--\n};\n\nint main() {\n  ClockOfTheLongNow clock{ 2020 }; ➍\n  printf(\"Year: %d\", clock.get_year()); ➎\n}\n--------------------------------------------------------------------------\nYear: 2020 ➎\n```", "```\nint a = 0;    ➊// Initialized to 0\nint b{};      ➋// Initialized to 0\nint c = {};   ➌// Initialized to 0\nint d;        ➍// Initialized to 0 (maybe)\n```", "```\nint e = 42;    ➊ // Initialized to 42\nint f{ 42 };   ➋ // Initialized to 42\nint g = { 42 };➌ // Initialized to 42\nint h(42);     ➍ // Initialized to 42\n```", "```\n#include <cstdint>\n\nstruct PodStruct {\n  uint64_t a;\n  char b[256];\n  bool c;\n};\n\nint main() {\n  PodStruct initialized_pod1{};    ➊   // All fields zeroed\n  PodStruct initialized_pod2 = {}; ➋   // All fields zeroed\n\n  PodStruct initialized_pod3{ 42, \"Hello\" }; ➌   // Fields a & b set; c = 0\n  PodStruct initialized_pod4{ 42, \"Hello\", true }; ➍ // All fields set\n}\n```", "```\nPodStruct initialized_pod = 0;\n```", "```\nPodStruct initialized_pod4 = { 42, \"Hello\", true };\n```", "```\nPodStruct initialized_pod4 = { 42, true };\n```", "```\nPodStruct initialized_pod(42, \"Hello\", true);\n```", "```\nint main() {\n  int array_1[]{ 1, 2, 3 };  ➊ // Array of length 3; 1, 2, 3\n  int array_2[5]{};          ➋ // Array of length 5; 0, 0, 0, 0, 0\n  int array_3[5]{ 1, 2, 3 }; ➌ // Array of length 5; 1, 2, 3, 0, 0\n  int array_4[5];            ➍ // Array of length 5; uninitialized values\n}\n```", "```\n#include <cstdio>\n\nstruct Taxonomist {\n  Taxonomist() { ➊\n    printf(\"(no argument)\\n\");\n  }\n  Taxonomist(char x) { ➋\n    printf(\"char: %c\\n\", x);\n  }\n  Taxonomist(int x) { ➌\n    printf(\"int: %d\\n\", x);\n  }\n  Taxonomist(float x) { ➍\n    printf(\"float: %f\\n\", x);\n  }\n};\n```", "```\n#include <cstdio>\n\nstruct Taxonomist {\n  --snip--\n};\n\nint main() {\n  Taxonomist t1; ➊\n  Taxonomist t2{ 'c' }; ➋\n  Taxonomist t3{ 65537 }; ➌\n  Taxonomist t4{ 6.02e23f }; ➍\n  Taxonomist t5('g'); ➎\n Taxonomist t6 = { 'l' }; ➏\n  Taxonomist t7{}; ➐\n  Taxonomist t8(); ➑\n}\n--------------------------------------------------------------------------\n(no argument) ➊\nchar: c ➋\nint: 65537 ➌\nfloat: 602000017271895229464576.000000 ➍\nchar: g ➎\nchar: l ➏\n(no argument) ➐\n```", "```\nfloat a{ 1 };\nfloat b{ 2 };\nint narrowed_result(a/b); ➊ // Potentially nasty narrowing conversion\nint result{ a/b };        ➋ // Compiler generates warning\n```", "```\nstruct JohanVanDerSmut {\n  bool gold = true; ➊\n  int year_of_smelting_accident{ 1970 }; ➋\n  char key_location[8] = { \"x-rated\" }; ➌\n};\n```", "```\n#include <cstdio>\nstruct Earth {\n  ~Earth() { // Earth's destructor\n       printf(\"Making way for hyperspace bypass\");\n  }\n}\n```"]