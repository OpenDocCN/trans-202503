["```\nPS> Invoke-Pester -Path 'C:\\PowerShellForSysadmins\\Part III\\Automating Hyper-V\\Prerequisites\n.Tests.ps1'\n\nDescribing Automating Hyper-V Chapter Prerequisites\n [+] Hyper-V host server should have the Hyper-V Windows feature installed 2.23s\n [+] Hyper-V host server is Windows Server 2016 147ms\n [+] Hyper-V host server should have at least 100GB of available storage 96ms\n [+] has a PowerLab folder at the root of C 130ms\n [+] has a PowerLab\\VMs folder at the root of C 41ms\n [+] has a PowerLab\\VHDs folder at the root of C 47ms\nTests completed in 2.69s\nPassed: 5 Failed: 0 Skipped: 0 Pending: 0 Inconclusive: 0\n```", "```\nPS> New-Item -Path C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab -ItemType Directory\n```", "```\nPS> New-Item -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab\\PowerLab.psm1'\n```", "```\nPS> New-ModuleManifest -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab\\PowerLab.psd1' \n-Author 'Adam Bertram' \n-CompanyName 'Adam the Automator, LLC' \n-RootModule 'PowerLab.psm1' \n-Description 'This module automates all tasks to provision entire environments of a domain\ncontroller, SQL server and IIS web server from scratch.'\n```", "```\n# Default prefix for commands exported from this modul...\n# DefaultCommandPrefix = ''\n```", "```\nPS> Get-Module -Name PowerLab –ListAvailable\n\n    Directory: C:\\Program Files\\WindowsPowerShell\\Modules\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nScript     1.0        PowerLab\n```", "```\nPS> New-VMSwitch -Name PowerLab -SwitchType External\n```", "```\nfunction New-PowerLabSwitch {\n    param(\n        [Parameter()]\n        [string]$SwitchName = 'PowerLab',\n\n        [Parameter()]\n        [string]$SwitchType = 'External'\n    )\n\n    if (-not (Get-VmSwitch -Name $SwitchName -SwitchType $SwitchType -ErrorAction\n    SilentlyContinue)) { ❶\n        $null = New-VMSwitch -Name $SwitchName -SwitchType $SwitchType ❷\n    } else {\n        Write-Verbose -Message \"The switch [$($SwitchName)] has already been created.\" ❸\n    }\n}\n```", "```\nPS> New-PowerLabSwitch –Verbose\nVERBOSE: The switch [PowerLab] has already been created.\n```", "```\nPS> Get-Vm -Name LABDC\nGet-Vm : A parameter is invalid. Hyper-V was unable to find a virtual machine with name LABDC.\nAt line:1 char:1\n+ Get-Vm -Name LABDC\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidArgument: (LABDC:String) [Get-VM],\n                              VirtualizationInvalidArgumentException\n    + FullyQualifiedErrorId : InvalidParameter,Microsoft.HyperV.PowerShell.Commands.GetVMCommand\n```", "```\nPS> New-VM -Name 'LABDC' -Path 'C:\\PowerLab\\VMs' \n-MemoryStartupBytes 2GB -Switch 'PowerLab' -Generation 2\n\nName   State CPUUsage(%) MemoryAssigned(M) Uptime   Status             Version\n----   ----- ----------- ----------------- ------   ------             -------\nLABDC  Off   0           0                 00:00:00 Operating normally 8.0\n```", "```\nfunction New-PowerLabVm {\n    param(\n        [Parameter(Mandatory)]\n        [string]$Name,\n\n        [Parameter()]\n        [string]$Path = 'C:\\PowerLab\\VMs',\n\n        [Parameter()]\n        [string]$Memory = 4GB,\n\n        [Parameter()]\n        [string]$Switch = 'PowerLab',\n\n        [Parameter()]\n        [ValidateRange(1, 2)]\n        [int]$Generation = 2\n    )\n\n ❶ if (-not (Get-Vm -Name $Name -ErrorAction SilentlyContinue)) {\n     ❷ $null = New-VM -Name $Name -Path $Path -MemoryStartupBytes $Memory\n        -Switch $Switch -Generation $Generation\n    } else {\n     ❸ Write-Verbose -Message \"The VM [$($Name)] has already been created.\"\n    }\n}\n```", "```\nPS> New-PowerLabVm -Name 'LABDC' –Verbose\nVERBOSE: The VM [LABDC] has already been created.\n```", "```\nPS> New-Vhd ❶-Path 'C:\\PowerLab\\VHDs\\MYVM.vhdx' ❷-SizeBytes 50GB ❸–Dynamic\n\nComputerName            : HYPERVSRV\nPath                    : C:\\PowerLab\\VHDs\\MYVM.vhdx\nVhdFormat               : VHDX\nVhdType                 : Dynamic\nFileSize                : 4194304\nSize                    : 53687091200\nMinimumSize             :\nLogicalSectorSize       : 512\nPhysicalSectorSize      : 4096\nBlockSize               : 33554432\nParentPath              :\nDiskIdentifier          : 3FB5153D-055D-463D-89F3-BB733B9E69BC\nFragmentationPercentage : 0\nAlignment               : 1\nAttached                : False\nDiskNumber              :\nNumber                  :\n```", "```\nPS> Test-Path -Path 'C:\\PowerLab\\VHDs\\MYVM.vhdx'\nTrue\n```", "```\nPS> New-PowerLabVm -Name 'MYVM'\nPS> ❶Get-VM -Name MYVM | Add-VMHardDiskDrive -Path 'C:\\PowerLab\\VHDs\\MYVM.vhdx'\nPS> ❷Get-VM -Name MYVM | Get-VMHardDiskDrive\n\nVMName ControllerType ControllerNumber ControllerLocation DiskNumber Path\n------ -------------- ---------------- ------------------ ---------- ----\nMYVM   SCSI           0                0                             C:\\PowerLab\\VHDs\\MYVM.vhdx\n```", "```\nfunction New-PowerLabVhd {\n    param\n    (\n        [Parameter(Mandatory)]\n        [string]$Name,\n\n        [Parameter()]\n        [string]$AttachToVm,\n\n        [Parameter()]\n        [ValidateRange(512MB, 1TB)]\n        [int64]$Size = 50GB,\n\n [Parameter()]\n        [ValidateSet('Dynamic', 'Fixed')]\n        [string]$Sizing = 'Dynamic',\n\n        [Parameter()]\n        [string]$Path = 'C:\\PowerLab\\VHDs'\n    )\n\n    $vhdxFileName = \"$Name.vhdx\"\n    $vhdxFilePath = Join-Path -Path $Path -ChildPath \"$Name.vhdx\"\n\n    ### Ensure we don't try to create a VHD when there's already one there\n    if (-not (Test-Path -Path $vhdxFilePath -PathType Leaf)) { ❶\n        $params = @{\n            SizeBytes = $Size\n            Path      = $vhdxFilePath\n        }\n        if ($Sizing -eq 'Dynamic') { ❷\n            $params.Dynamic = $true\n        } elseif ($Sizing -eq 'Fixed') {\n            $params.Fixed = $true\n        }\n\n        New-VHD @params\n        Write-Verbose -Message \"Created new VHD at path [$($vhdxFilePath)]\"\n    }\n\n    if ($PSBoundParameters.ContainsKey('AttachToVm')) {\n        if (-not ($vm = Get-VM -Name $AttachToVm -ErrorAction SilentlyContinue)) { ❸\n            Write-Warning -Message \"The VM [$($AttachToVm)] does not exist. Unable to attach VHD.\"\n        } elseif (-not ($vm | Get-VMHardDiskDrive | Where-Object { $_.Path -eq $vhdxFilePath })) { ❹\n            $vm | Add-VMHardDiskDrive -Path $vhdxFilePath\n            Write-Verbose -Message \"Attached VHDX [$($vhdxFilePath)] to VM [$($AttachToVM)].\"\n        } else { ❺\n            Write-Verbose -Message \"VHDX [$($vhdxFilePath)] already attached to VM [$($AttachToVM)].\"\n        }\n    }\n}\n```", "```\nPS> New-PowerLabVhd -Name MYVM -Verbose -AttachToVm MYVM\n\nVERBOSE: VHDX [C:\\PowerLab\\VHDs\\MYVM.vhdx] already attached to VM [MYVM].\n\nPS> Get-VM -Name MYVM | Get-VMHardDiskDrive | Remove-VMHardDiskDrive\nPS> New-PowerLabVhd -Name MYVM -Verbose -AttachToVm MYVM\n\nVERBOSE: Attached VHDX [C:\\PowerLab\\VHDs\\MYVM.vhdx] to VM [MYVM].\nPS> New-PowerLabVhd -Name MYVM -Verbose -AttachToVm NOEXIST\n\nWARNING: The VM [NOEXIST] does not exist. Unable to attach VHD.\n```", "```\nPS> Invoke-Pester 'C:\\Automating-Hyper-V.Tests.ps1'\nDescribing Automating Hyper-V Chapter Demo Work\n   Context Virtual Switch\n    [+] created a virtual switch called PowerLab 195ms\n   Context Virtual Machine\n    [+] created a virtual machine called MYVM 62ms\n   Context Virtual Hard Disk\n    [+] created a VHDX called MYVM at C:\\PowerLab\\VHDs 231ms\n    [+] attached the MYVM VHDX to the MYVM VM 194ms\nTests completed in 683ms\nPassed: 4 Failed: 0 Skipped: 0 Pending: 0 Inconclusive: 0\n```"]