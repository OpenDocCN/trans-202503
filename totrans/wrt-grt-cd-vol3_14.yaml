- en: '**11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SOFTWARE DESIGN DESCRIPTION DOCUMENTATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: The Software Design Description (SDD) document provides low-level implementation
    details for the design of the software. While it doesn’t necessarily dive down
    to the level of actual code, it does provide the algorithms, data structures,
    and low-level flow control for the software implementation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of different ideas about how to document software design. This
    chapter follows the guidelines proposed by IEEE Standard (Std) 1016-2009^([1](ch19_footnote.xhtml#ch11fn1))
    and uses many of the concepts described in that standard.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: IEEE Std 1016-2009 was written in an attempt to be language-independent. However,
    the Unified Modeling Language covers almost all of the requirements of the standard,
    which is why [Chapter 4](ch04.xhtml) introduced UML and why we’ll use it in this
    chapter. If you’re interested in the other software design modeling languages
    available, feel free to check out their descriptions in the IEEE Std 1016-2009
    document.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**11.1 IEEE Std 1016-1998 vs. IEEE Std 1016-2009**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finalized in 1998, the original IEEE SDD guidelines were based on structured
    programming software engineering concepts prevalent in the 1980s and 1990s. The
    recommendations were released just as the object-oriented programming revolution
    was under way and, as a result, immediately became outdated. It took 10 years
    to update, but the revision, Std 1016-2009, covered object-oriented analysis and
    design. The new guidelines maintained features of the 1016-1998 standard but in
    a somewhat deprecated form. Note, however, that some of them are still useful
    in modern design, so there’s no reason to ignore the old standard if those features
    are appropriate in your context.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2 IEEE 1016-2009 Conceptual Model**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SDD does not live in a vacuum. The material in an SDD flows naturally from
    the Software Requirements Specification (SRS), and the Reverse Traceability Matrix
    (RTM) binds the two documents. [Figure 11-1](ch11.xhtml#ch11fig1) shows this relationship.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-1: SRS relationship to SDD*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '***11.2.1 Design Concerns and Design Stakeholders***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each requirement in the SRS ultimately relates to a design concern in the SDD
    (see [Figure 11-2](ch11.xhtml#ch11fig2)). A *design concern* is anything that
    is of interest to a stakeholder in the design of the system. A *stakeholder* is
    anyone who has a say in the system’s design. A *requirement* refers to any individual
    requirement from the SRS, as explained in [Chapter 10](ch10.xhtml).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-2.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-2: Mapping requirements to design concerns*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11-2](ch11.xhtml#ch11fig2) maps requirements to design concerns as
    follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**`0..*`** Each requirement has zero or more associated design concerns.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**`1..*`** A single design concern is important to one or more design stakeholders.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**`1...*`** Each stakeholder has at least one (and possibly more) design concerns.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The IEEE conceptual model states that requirements raise zero or more design
    concerns. But in fact, requirements and design concerns should have a one-to-one
    relationship: for each design concern there is exactly one associated requirement.
    If a requirement doesn’t raise any design concerns—that is, the requirement has
    no impact on the software design—then perhaps that requirement isn’t necessary
    (and, therefore, is not a valid requirement). If a requirement maps to multiple
    design concerns, this probably suggests that you have a compound requirement that
    should be broken down into atomic requirements in your SRS (see “[Atomic](ch10.xhtml#lev-10.1.2.10)”
    on [page 190](ch10.xhtml#page_190)).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: IEEE 概念模型指出，需求会引发零个或多个设计关注点。但实际上，需求和设计关注点应该具有一对一关系：每个设计关注点都有一个相关的需求。如果一个需求没有引发任何设计关注点——也就是说，需求对软件设计没有影响——那么这个需求可能不是必要的（因此，也就不是有效的需求）。如果一个需求映射到多个设计关注点，这通常意味着你有一个复合需求，应该将其拆解为原子需求，在你的
    SRS 中进行处理（见 “[原子](ch10.xhtml#lev-10.1.2.10)” 在 [第190页](ch10.xhtml#page_190)）。
- en: Stakeholders and design concerns should have a many-to-many relationship. One
    stakeholder can (and usually does) have many design concerns. Likewise, a single
    design concern can be (and usually is) shared by many different stakeholders.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 利益相关者和设计关注点应该具有多对多关系。一个利益相关者可以（通常会）有多个设计关注点。同样，一个设计关注点也可以（通常会）由多个不同的利益相关者共享。
- en: '***11.2.2 Design Viewpoints and Design Elements***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***11.2.2 设计视角和设计元素***'
- en: Ultimately, the design concern (or just the requirement) is the interface point
    to the SDD. A *design viewpoint* logically groups a set of one or more design
    concerns. For example, *a logical viewpoint* (see “[Logical Viewpoint](ch11.xhtml#lev-11.2.2.3)”
    on [page 235](ch11.xhtml#page_235)) would describe the static data structures
    in the design, so all the requirements associated with classes and data objects
    would be associated with that viewpoint. An *algorithmic viewpoint* (see “[Algorithmic
    Viewpoint](ch11.xhtml#lev-11.2.2.11)” on [page 239](ch11.xhtml#page_239)) would
    describe certain algorithms that the design uses, so any requirements that specify
    certain algorithms to use (which, admittedly, should be rare) would be associated
    with that viewpoint.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，设计关注点（或仅需求）是 SDD 的接口点。一个 *设计视角* 逻辑上将一个或多个设计关注点分组在一起。例如，*逻辑视角*（参见 “[逻辑视角](ch11.xhtml#lev-11.2.2.3)”
    在 [第235页](ch11.xhtml#page_235)）描述设计中的静态数据结构，因此所有与类和数据对象相关的需求都将与该视角相关联。*算法视角*（参见
    “[算法视角](ch11.xhtml#lev-11.2.2.11)” 在 [第239页](ch11.xhtml#page_239)）描述设计中使用的某些算法，因此任何指定使用某些算法的需求（这应该是少数情况）将与该视角相关联。
- en: 'IEEE Std 1016-2009 calls for specifying each design viewpoint by:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: IEEE Std 1016-2009 要求通过以下方式指定每个设计视角：
- en: A viewpoint name
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视角名称
- en: Design concerns associated with the viewpoint
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与视角相关的设计关注点
- en: A list of design elements (types of design entities, attributes, and constraints)
    that the viewpoint uses
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视角使用的设计元素（设计实体类型、属性和约束）列表
- en: A discussion of the analysis someone would use to construct a design view based
    on the viewpoint
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论基于视角构建设计视图时所使用的分析方法
- en: Criteria for interpreting and evaluating the design
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释和评估设计的标准
- en: Author’s name or a reference to the source material used for the viewpoint
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者姓名或用于该视角的参考资料
- en: '[Figure 11-3](ch11.xhtml#ch11fig3) shows the relationship between design concerns
    and design viewpoints. The multiplicity item `1..*` indicates that a single viewpoint
    frames (or groups) one or more requirements.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-3](ch11.xhtml#ch11fig3) 显示了设计关注点和设计视角之间的关系。多重性项 `1..*` 表示一个视角框定（或分组）一个或多个需求。'
- en: '![image](Images/fig11-3.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig11-3.jpg)'
- en: '*Figure 11-3: Mapping design concerns to design viewpoints*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-3：将设计关注点映射到设计视角*'
- en: Design concerns and design viewpoints have a fundamental one-to-many relationship
    that provides traceability between the SDD and SRS. In the RTM, each requirement
    (design concern) will link to exactly one design viewpoint. Therefore, you would
    normally attach SDD tags to design viewpoints (or, as you’ll see in a moment,
    you could also attach the tags to design views, as there is a one-to-one relationship
    between design views and design viewpoints).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设计关注点和设计视角之间具有根本的多对一关系，这提供了 SDD 和 SRS 之间的可追溯性。在 RTM 中，每个需求（设计关注点）将链接到一个设计视角。因此，通常你会将
    SDD 标签附加到设计视角上（或者，正如你稍后会看到的，你也可以将标签附加到设计视图上，因为设计视图和设计视角之间有一对一关系）。
- en: Design viewpoints define a set of *design elements* (see [Figure 11-4](ch11.xhtml#ch11fig4)),
    examples of which include class diagrams, sequence diagrams, state diagrams, packages,
    use cases, and activity diagrams.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-4.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-4: Mapping design viewpoints to design elements*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'A design element is anything that you would put in a design view, including
    design entities, attributes, relationships, and constraints:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Design *entities* are objects that describe the major components of a design.
    Examples include systems, subsystems, libraries, frameworks, patterns, templates,
    components, classes, structures, types, data stores, modules, program units, programs,
    threads, and processes. IEEE Std 1016-2009 requires that each design entity in
    an SDD have a name and a purpose.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Design elements have associated *attributes*: a name, a type, a purpose, and
    an author. When listing the design elements in your SDD viewpoint, you must provide
    these attributes.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design *relationships* have an associated name and type. IEEE Std 1016-2009
    does not predefine any relationships; however, UML 2.0 defines several—such as
    association, aggregation, dependency, and generalization—that you would typically
    use in your SDDs. As per the IEEE requirements, you must describe all relationships
    you use in the design viewpoint specification.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A design *constraint* is an element (the *source* element) that applies restrictions
    or rules to some other design element (the *target* element) of a design view.
    The IEEE requires that you list all design constraints by name and type (and source/target
    elements) in the viewpoint that defines them.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You define design elements using a formal design language (see [Figure 11-5](ch11.xhtml#ch11fig5)).
    As noted earlier, IEEE Std 1016-2009 tries to be language-agnostic, but the truth
    is that it was designed specifically around UML. Other (formal) design languages
    the IEEE suggests include IDEFO, IDEF1X, and Vienna Definition Method. However,
    for this book, you’re probably better off using UML.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-5: Relationship between design viewpoints, elements, and language*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: IEEE Std 1016-2009 defines a common set of design viewpoints. As the standard
    is a set of recommended practices, not absolute requirements, the list of viewpoints
    that follows here is neither exhaustive nor required. That is, in your SDD you
    can define and add further viewpoints as you see fit, and you don’t need to include
    all of them (indeed, some of them are deprecated and included only for compatibility
    with the older IEEE Std 1016-1998).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.2.1 Context Viewpoint**'
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The design elements for which the context viewpoint collects requirements are
    actors (users, external systems, stakeholders), services the system provides,
    and their interactions (such as input and output). The context viewpoint also
    manages various design constraints, such as quality of service, reliability, and
    performance. In a sense, you begin this work while developing the requirements
    for the SRS (for example, while creating use cases to drive the requirements)
    and finish the work while developing the SDD.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose of the context viewpoint is to set the system boundary and
    define those considerations that are internal to the system and those that are
    external. This limits the scope of the design so that the designer and author(s)
    of the SDD can concentrate on the system design and not waste time considering
    external factors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: You typically represent context viewpoints in UML use case diagrams (see “[Use
    Cases](ch10.xhtml#lev-10.6)” on [page 214](ch10.xhtml#page_214)). For a good example,
    refer back to [Figure 10-1](ch10.xhtml#ch10fig1), which lists the initializations
    the user can set via DIP switches on the data acquisition (DAQ) system. As another
    example, [Figure 11-6](ch11.xhtml#ch11fig6) shows an abbreviated set of use cases
    for DAQ commands between a host system (typically a PC) and the DAQ CPU interface
    board.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-6.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-6: DAQ commands use case*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: This figure shows the command interface between the external system (the host
    actor) and the DAQ system. Note that each use case—in this example, there are
    16—corresponds to requirements in the DAQ SRS.^([2](ch19_footnote.xhtml#ch11fn2))
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.2.2 Composition Viewpoint**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The composition viewpoint lists the major modules/components that make up the
    system. One of the main goals of this viewpoint is to foster code reuse by identifying,
    in the design, items that could come from existing libraries, or proprietary designs
    that could be reused in the system.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Design entities included in the composition viewpoint are—to name a few—composition
    (obviously), include, use, and generalization. The composition viewpoint states
    relationships between design entities using realization, dependency, aggregation,
    composition, and generalization as well as any other relationships between objects.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is an older viewpoint carried over from IEEE Std 1016-1998.^([3](ch19_footnote.xhtml#ch11fn3))
    For the most part it is superseded by the structure viewpoint (see “[Structure
    Viewpoint](ch11.xhtml#lev-11.2.2.8)” on [page 237](ch11.xhtml#page_237)) and,
    to a lesser extent, the logical viewpoint (see the next section). The composition
    viewpoint hails from the days when programs were composed largely of procedures
    and functions organized into libraries, long before the days of object-oriented
    analysis and design.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Modern designs, if they contain a composition viewpoint at all, largely relegate
    it to describing major components of a system, as recommended by IEEE Std 1016-2009\.
    [Figure 11-7](ch11.xhtml#ch11fig7) provides an example of such a composition viewpoint
    for the DAQ system, using watered-down component diagrams. In my opinion, component
    diagrams are not a good fit for composition viewpoint diagrams—they are too low-level
    for the task. Component diagrams typically include interfaces (required and provided)
    that don’t make sense at the composition viewpoint level. However, apparently
    due to the similarity of the words *composition* and *component*, it’s very common
    to use watered-down UML component diagrams to denote the composition viewpoint.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-7.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-7: Composition viewpoint diagram*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Some engineers use a combination of component and deployment diagrams (see “[Deployment
    Diagrams](ch08.xhtml#lev-8.3)” on [page 159](ch08.xhtml#page_159)) to illustrate
    a composition viewpoint, as shown in [Figure 11-8](ch11.xhtml#ch11fig8).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-8.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-8: Deployment/component diagram*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Note that the nodes in this diagram still include the component symbol to indicate
    that they are components forming a larger system, rather than hardware items.
    This is a nonstandard diagramming method for UML, but I’ve seen it in several
    example SDDs so I’ve included it here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.2.3 Logical Viewpoint**'
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The logical viewpoint describes preexisting and new types used in the design,
    along with their class, interface/protocol, and structural definitions. The logical
    viewpoint also describes the objects (instances of the types) the design uses.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The logical viewpoint deals with classes, interfaces, data types, objects, attributes,
    methods, functions, procedures (subroutines), templates, macros, and namespaces.
    It also assigns attributes—such as names, visibility type, and values—and attaches
    appropriate constraints to these design entities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Typically, you use UML class diagrams to implement a logical viewpoint. [Figure
    11-9](ch11.xhtml#ch11fig9) shows a class diagram for an `adcClass_t` class that
    might be appropriate for the analog input module in [Figure 11-8](ch11.xhtml#ch11fig8).
    In addition to this basic class diagram, you’d probably want to include a *data
    dictionary*, or text describing the purpose of all the attributes for this class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-9.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-9: adc class diagram*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the bare class diagrams, a logical viewpoint should also include
    relationships between classes (such as dependency, association, aggregation, composition,
    and inheritance). See “[UML Class Relationships](ch06.xhtml#lev-6.5)” on [page
    114](ch06.xhtml#page_114) for more details on these class relationships and how
    you can diagram them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.2.4 Dependency Viewpoint**'
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Like the composition viewpoint, the dependency viewpoint is a deprecated viewpoint
    maintained for compatibility with IEEE Std 1016-1998; you generally wouldn’t use
    this viewpoint in modern designs, as other options (such as the logical and resource
    viewpoints) can map dependencies in a more logical manner. However, there’s nothing
    stopping you from using dependency viewpoints where appropriate, and it’s also
    likely that you’ll encounter them in SDDs, so you should know about them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与组合视角类似，依赖视角是为了与 IEEE Std 1016-1998 兼容而保留下来的已弃用视角；在现代设计中，您通常不会使用此视角，因为其他选项（如逻辑视角和资源视角）可以更合乎逻辑地映射依赖关系。然而，您在适当的情况下使用依赖视角并不受限制，而且很可能会在
    SDD 中遇到它们，因此您应该了解它们。
- en: In an SDD, the dependency viewpoint illustrates design entity relationships
    and interconnections, including shared information, interface parameterization,
    and order of execution using terms such as *uses*, *provides*, and *requires*.
    Dependency viewpoints apply to subsystems, components, modules, and resources.
    IEEE Std 1016-2009 recommends using UML component diagrams and package diagrams
    to depict this viewpoint. Using a combined deployment/component diagram (as in
    [Figure 11-8](ch11.xhtml#ch11fig8)) is probably a good solution if you want to
    go the component diagram route (say, for dependencies between components or subsystems).
    Using package diagrams is a good idea if you are describing the dependency relationship
    between packages, as shown in [Figure 11-10](ch11.xhtml#ch11fig10).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SDD 中，依赖视角展示了设计实体之间的关系和互联，包括共享信息、接口参数化和执行顺序，使用如*使用*、*提供*和*要求*等术语。依赖视角适用于子系统、组件、模块和资源。IEEE
    Std 1016-2009 建议使用 UML 组件图和包图来描述这一视角。如果您想采用组件图来展示组件或子系统之间的依赖关系（如 [图11-8](ch11.xhtml#ch11fig8)所示），使用组合部署/组件图可能是一个不错的选择。如果您描述的是包之间的依赖关系，使用包图则是个好主意，如[图11-10](ch11.xhtml#ch11fig10)所示。
- en: '![image](Images/fig11-10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig11-10.jpg)'
- en: '*Figure 11-10: Package dependencies*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11-10：包依赖关系*'
- en: '**11.2.2.5 Information/Database Viewpoint**'
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.5 信息/数据库视角**'
- en: The information/database viewpoint describes persistent data usage in your design.
    It is similar to the logical viewpoint in that you use class diagrams to show
    data structure, content, and metadata definitions. The information viewpoint would
    also describe data access schemes, data management strategies, and data storage
    mechanisms.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 信息/数据库视角描述了设计中持久数据的使用。它类似于逻辑视角，因为您使用类图来展示数据结构、内容和元数据定义。信息视角还会描述数据访问方案、数据管理策略和数据存储机制。
- en: This is also a deprecated item included to maintain compatibility with IEEE
    Std 1016-1998\. In modern designs, you would likely use the logical viewpoint
    or possibly the resource viewpoint instead.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个已弃用的项，包含在内以保持与 IEEE Std 1016-1998 的兼容性。在现代设计中，您可能会使用逻辑视角或可能的资源视角来代替它。
- en: '**11.2.2.6 Patterns Use Viewpoint**'
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.6 模式使用视角**'
- en: The patterns use viewpoint maps out the design patterns—and the reusable components
    implemented from them—that are used in the project. For more information about
    design patterns, see “[For More Information](ch11.xhtml#lev-11.9)” on [page 260](ch11.xhtml#page_260).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 模式使用视角描绘了项目中使用的设计模式——以及从中实现的可重用组件。有关设计模式的更多信息，请参见[更多信息](ch11.xhtml#lev-11.9)，详见[第260页](ch11.xhtml#page_260)。
- en: Patterns use viewpoint diagrams use a combination of UML composite structures,
    class diagrams, and package diagrams along with association, collaboration use,
    and connectors to indicate objects generated from the patterns. This viewpoint
    is loosely designed, so you have a lot of latitude in its creation should you
    choose to use it in your SDD.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 模式使用视角图采用了 UML 复合结构、类图和包图的组合，同时结合关联、协作使用和连接器来指示从模式中生成的对象。这个视角设计较为宽松，因此如果您选择在
    SDD 中使用它，您在创建时将拥有很大的自由度。
- en: '**11.2.2.7 Interface Viewpoint**'
  id: totrans-83
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.7 接口视角**'
- en: The interface viewpoint describes the services (for example, APIs) provided
    by the design. Specifically, it includes a description of interfaces for which
    there are no requirements in the SRS, including interfaces to third-party libraries,
    other parts of the project, or other projects within the same organization. It
    is a road map that other programmers can use when interacting with the portion
    of the design covered by the interface viewpoint.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: IEEE Std 1016-2009 recommends using UML component diagrams for the interface
    viewpoint. [Figure 11-11](ch11.xhtml#ch11fig11) shows two components (possibly
    in the DAQ system) dealing with digital I/O and relay output (a specific form
    of digital output).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-11.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-11: Interface viewpoint example*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the component diagram, the interface viewpoint should include
    a description of how the system interacts with these interfaces, including data
    types, function calls, latencies, constraints on inputs, the range of outputs,
    and other important issues. For example, when discussing the `Direction` interface,
    you might include information such as:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '**Direction**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '`Direction(ddir:`int`, port:`int`)`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: A call to `Direction` sets the specified digital I/O port (`port` = `0..95`)
    to either an input port (if `ddir` = `0`) or an output port (if `ddir` = `1`).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'For `Read`, you might use a description such as:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '**Read**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`Read(port:`int`):`int'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: A call to `Read` returns the current value (`0` or `1`) of the specified digital
    input port (`port` = `0..95`).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Again, the interface viewpoint is included in IEEE Std 1016-2009 only for compatibility
    with the older IEEE Std 1016-1998\. In modern SDDs, consider placing interface
    items in the context and structure viewpoints instead.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.2.8 Structure Viewpoint**'
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The structure viewpoint describes the internal organization and construction
    of the objects in the design. It is the more modern version of the composition
    viewpoint, which describes how the design is (recursively) broken down into parts.
    You would use the structure viewpoint to break down larger objects into their
    smaller pieces for the purpose of determining how to reuse those smaller components
    throughout the design.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The diagramming methods typically used for the structure viewpoint are UML composite
    structure diagrams, UML package diagrams, and UML class diagrams. These diagrams
    are illustrated for the swimming pool monitor (SPM) in [Figures 11-12](ch11.xhtml#ch11fig12),
    [11-13](ch11.xhtml#ch11fig13), and [11-14](ch11.xhtml#ch11fig14), respectively.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-12: SPM composite structure diagram*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-13.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-13: SPM package diagram*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-14.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-14: SPM class diagram*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: These examples illustrate that you’ll typically have more than one diagram in
    a given viewpoint. Also note that a typical structure viewpoint will have multiple
    composite structure diagrams, (possibly) multiple package diagrams, and (certainly)
    multiple class diagrams.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例说明，通常你会在一个给定的视角中拥有多个图示。同时注意，典型的结构视角将拥有多个复合结构图，（可能）多个包图，以及（肯定）多个类图。
- en: '**11.2.2.9 Interaction Viewpoint**'
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.9 交互视角**'
- en: The interaction viewpoint is the main place where you define the activities
    that take place in the software. This is where you’ll place most of your interaction
    diagrams—activity diagrams, sequence diagrams, collaboration diagrams, and the
    like—with the possible exception of state diagrams, because they normally appear
    in the state dynamics viewpoint (covered in the next section). In addition to
    interaction diagrams, you might also use composite structure and package diagrams
    in the interaction viewpoint.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 交互视角是定义软件中发生活动的主要地方。在这里，你会放置大多数交互图—活动图、时序图、协作图等—可能唯一的例外是状态图，因为它们通常出现在状态动态视角中（将在下一部分讨论）。除了交互图外，你还可能在交互视角中使用复合结构图和包图。
- en: A full example of the interaction viewpoint appears in “A Sample SDD” on [page
    247](ch11.xhtml#page_247).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 交互视角的完整示例出现在《一个样本 SDD》的[第 247 页](ch11.xhtml#page_247)。
- en: '**11.2.2.10 State Dynamics Viewpoint**'
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.10 状态动态视角**'
- en: The state dynamics viewpoint describes the internal operating state of a software
    system. For this viewpoint, you would typically use UML statechart diagrams (see
    “[Statechart Diagrams](ch08.xhtml#lev-8.5)” on [page 163](ch08.xhtml#page_163)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 状态动态视角描述软件系统的内部操作状态。对于这个视角，通常使用 UML 状态图（参见“[状态图](ch08.xhtml#lev-8.5)”在[第 163
    页](ch08.xhtml#page_163)）。
- en: '**11.2.2.11 Algorithmic Viewpoint**'
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.11 算法视角**'
- en: The algorithmic viewpoint is another older viewpoint carried over from IEEE
    1016-1998\. Its purpose was to describe the algorithms (typically through flowcharts,
    Warnier/Orr diagrams, pseudocode, and the like) used in the system. This viewpoint
    largely has been replaced by the interaction viewpoint in the Std 1016-2009 document.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 算法视角是从 IEEE 1016-1998 中延续下来的另一个旧视角。它的目的是描述系统中使用的算法（通常通过流程图、Warnier/Orr 图、伪代码等形式）。这个视角在
    Std 1016-2009 文档中基本上被交互视角所替代。
- en: '**11.2.2.12 Resource Viewpoint**'
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**11.2.2.12 资源视角**'
- en: The resource viewpoint describes how the design uses various system resources.
    This includes CPU usage (including multicore usage), memory usage, storage, peripheral
    usage, shared libraries, and other security, performance, and cost issues associated
    with the design. Typically, resources are entities that are external to the design.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 资源视角描述设计如何使用各种系统资源。这包括 CPU 使用（包括多核使用）、内存使用、存储、外设使用、共享库以及与设计相关的其他安全、性能和成本问题。通常，资源是外部于设计的实体。
- en: This is another Std 1016-1998 item included for compatibility reasons in Std
    1016-2009\. In new designs, you would typically use the context viewpoint to describe
    resource usage.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个为兼容性原因包含在 Std 1016-2009 中的 Std 1016-1998 项目。在新的设计中，通常使用上下文视角来描述资源使用情况。
- en: '***11.2.3 Design Views, Overlays, and Rationales***'
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***11.2.3 设计视图、叠加层与推理***'
- en: IEEE Std 1016-2009 states that an SDD is organized into one or more design views.
    Therefore, the design view is the fundamental unit of organization in an SDD.
    Design views provide (possibly) multiple perspectives on the system design to
    help clarify to stakeholders, designers, and programmers how the design fulfills
    the requirements as specified by an associated design viewpoint.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: IEEE Std 1016-2009 规定，SDD 被组织成一个或多个设计视图。因此，设计视图是 SDD 中的基本组织单元。设计视图提供（可能）多个系统设计的视角，帮助相关方、设计师和程序员澄清设计如何满足与关联设计视角指定的需求。
- en: An SDD is *complete* when it covers every requirement (design concern) in at
    least one design view, covers all the entities and relationships in the associated
    design viewpoint, and lives within all the constraints applied to the design.
    In plain terms, this means that you’ve matched all the requirements to appropriate
    diagrams and textual discussions as outlined in “Design Viewpoints and Design
    Elements” on [page 229](ch11.xhtml#page_229).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当 SDD 完整时，它会覆盖每个需求（设计关注点），并且在至少一个设计视图中有体现，涵盖所有相关设计视角中的实体和关系，并且符合所有设计约束。通俗来说，这意味着你已经将所有需求与适当的图示和文本讨论对齐，如[第
    229 页](ch11.xhtml#page_229)的《设计视角与设计元素》部分所述。
- en: An SDD is *consistent* if there is no conflict between any of the elements in
    the design views. For example, if a class diagram states that an attribute (field)
    named `hasValue` is a boolean, but an activity diagram treats that field as a
    string, you have an inconsistency.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.3.1 Design Views vs. Design Viewpoints**'
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: There is a one-to-one relationship between design view and design viewpoints,
    as shown in [Figure 11-15](ch11.xhtml#ch11fig15). The association link states
    that a design view conforms to exactly one design viewpoint and a design viewpoint
    is governed by exactly one design view.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-15.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-15: Design views and design viewpoints*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: So, what’s the difference between a design view and a design viewpoint? A *design
    view* is the actual information (graphic and textual) that you would normally
    consider to be the “design.” A design viewpoint is the *point of view* from which
    you create the design. In the IEEE recommendations, the design viewpoints would
    be something like the context viewpoint or interaction viewpoint. These are not
    the actual design views, but rather the format used to present the views. In terms
    of the organization of your SDD, the view/viewpoint section of the table of contents
    might look something like the following:^([4](ch19_footnote.xhtml#ch11fn4))
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '1 Viewpoint #1'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '1.1 Viewpoint #1 Specification (see “[Design Viewpoints and Design Elements](ch11.xhtml#lev-11.2.2)”
    on [page 229](ch11.xhtml#page_229))'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '1.2 View #1'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '2 Viewpoint #2'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '2.1 Viewpoint #2 Specification'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '2.2 View #2'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '3 Viewpoint #3'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '3.1 Viewpoint #3 Specification'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '3.2 View #3'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 4 Etc.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason for organizing the views by viewpoints is simple: viewpoints represent
    the perspectives of different stakeholders, so this organization allows stakeholders
    to quickly locate the sections of the SDD of interest to them instead of having
    to read the whole document.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Note that each view in this outline does not necessarily correspond to a single
    diagram or textual description. A single view could consist of many separate UML
    diagrams and intervening textual descriptions. For example, in a logical viewpoint
    you’ll probably have many different class diagrams (not just one) if for no other
    reason than that it’s difficult to combine multiple classes into a single diagram.
    Even if you could, you might want to logically organize your class diagrams to
    make them easier to read. Furthermore, in addition to the class diagrams themselves,
    you’ll need to provide some text describing the members (attributes) of those
    classes. Rather than having a huge class diagram (perhaps consuming dozens of
    pages) followed by a very long textual description (spanning additional dozens
    of pages), it’s probably better to put a few class diagrams in one figure, immediately
    follow them with the textual information about the attributes, and then repeat
    this for the remaining classes you need to document.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.3.2 Design Overlays**'
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A design overlay is an “escape clause” for a view. Design views conform to design
    overlays or, conversely, design overlays govern design views, as shown in [Figure
    11-16](ch11.xhtml#ch11fig16). So, if you’ve created a logical viewpoint, for example,
    and you want to incorporate some interaction diagrams in that viewpoint for clarification,
    you would use a design overlay.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'A design overlay modifies the view/viewpoint organization like so:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '1 Viewpoint #1'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '1.1 Viewpoint #1 Specification'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '1.2 View #1'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '1.3 Overlay #1'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '1.4 Overlay #2'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Etc.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 2 Etc.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-16.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-16: Design view/overlay/rationale relationship*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Design overlays must be identified as such (to avoid confusion with the associated
    viewpoint), uniquely named, and associated with only a single viewpoint.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: One benefit of a design overlay is that it lets you mix and match design languages
    or extend an existing design language when it isn’t expressive enough to satisfy
    your needs. Design overlays also allow you to extend an existing view without
    having to create a whole new viewpoint (which can be a lot of extra work).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '**11.2.3.3 Design Rationale**'
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The design rationale explains the purpose behind the design and justifies the
    design to other viewers. Generally, a design rationale consists of comments and
    annotations throughout the design. It may address (but certainly isn’t limited
    to) potential concerns about the design, different options and tradeoffs considered
    during the design, arguments and justifications for why certain decisions were
    made, and even changes made during the prototyping or development phases (because
    the original design did not pan out). [Figure 11-16](ch11.xhtml#ch11fig16) shows
    the relationship of design rationales to design views (the aggregation symbol
    implies that the design rationale comments are included, or are a part of, the
    design view).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '***11.2.4 The IEEE Std 1016-2009 Conceptual Model***'
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figures 11-17](ch11.xhtml#ch11fig17) and [11-18](ch11.xhtml#ch11fig18) provide
    conceptual model diagrams for the SDD and design elements, according to IEEE Std
    1016-2009.^([5](ch19_footnote.xhtml#ch11fn5))'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-17.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-17: SDD conceptual model*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-18.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-18: SDD design element conceptual model*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '**11.3 SDD Required Contents**'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An SDD must have the following contents (according to IEEE Std 1016-2009):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: An SDD identification
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of the design stakeholders
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design concerns (developed from the product requirements)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of one or more design viewpoints (note that there’s exactly one design
    viewpoint for each design view in an SDD)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of one or more design views (roughly corresponding to the different types
    of UML diagrams, though a design viewpoint is not necessarily tied to a particular
    UML diagram type)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any needed design overlays
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any necessary design rationales (IEEE requires at least a purpose)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***11.3.1 SDD Identification***'
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At the very least, an SDD should include the following identification information
    (not necessarily in this order):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Creation date/date of issue
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current status
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Purpose/scope
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issuing organization
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authors (including copyright information)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the design languages used for design viewpoints
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Body
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glossary
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change history
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of this information is boilerplate (except for dates, you typically copy
    this information from an organization’s generic SDD template). Obviously, some
    of this information changes from one SDD to another (like dates, authors, and
    change history), but for the most part very little intellectual activity is involved
    in the SDD identification. It exists primarily so that the SDD can stand as an
    independent document.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '***11.3.2 Design Stakeholders and Their Design Concerns***'
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The SDD must list all the individuals who contributed requirements/design concerns
    to the project. This content is critical: if there is ever a question about the
    design rationale that is not addressed in the SDD, a reader should be able to
    determine which stakeholder to contact with questions about the design concerns.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '***11.3.3 Design Views, Viewpoints, Overlays, and Rationales***'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The design views, viewpoints, overlays, and rationales form the main body of
    the SDD.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '**11.4 SDD Traceability and Tags**'
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We haven’t yet discussed how to trace design elements in an SDD back to the
    SRS and other system documents via the RTM (see “[Traceability](ch09.xhtml#lev-9.2)”
    on [page 171](ch09.xhtml#page_171)). As noted in [Chapter 9](ch09.xhtml), you
    use *tags* to trace elements of the design throughout the documentation. For SDDs,
    you use tags of the form *proj*_SDD_*xxx* where *proj* is some project-specific
    name or mnemonic and *xxx* is a numeric (possibly decimal) value (see “[SDD Tags](ch09.xhtml#lev-9.2.2.3)”
    on [page 176](ch09.xhtml#page_176)). All you have to do, then, is ensure you have
    unique SDD tags (generally by verifying that *xxx* is unique among all the SDD
    tags) and define where exactly to attach the SDD tags.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Technically, the requirements from the SRS map directly to the design concerns
    (one-to-one usually), which might tempt you to think that you should attach SDD
    tags to the design concerns. However, as the design views form the main body of
    the SDD and design concerns map to them in a many-to-one fashion (through the
    design viewpoints, which have a one-to-one relationship to design views), it’s
    best to attach SDD tags to the design views or viewpoints. It will make your life
    a whole lot easier when you’re creating the RTM if the mapping from the requirements
    to the design elements is either one-to-many or many-to-one (in particular, you
    want to avoid many-to-many).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: In practice, a given design view can be broken down into multiple images or
    descriptions. If you are careful to only ever connect a design concern to one
    of these images or descriptions, you can assign SDD tags to the individual components
    of a design view. However, you must exercise caution when doing this, because
    if a single design concern maps to a couple of different components in a single
    design view, you can wind up with a many-to-many relationship.^([6](ch19_footnote.xhtml#ch11fn6))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '**11.5 A Suggested SDD Outline**'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IEEE Std 1016-2009, Annex C, provides one suggested outline to organize and
    format an SDD that conforms to the required contents (see “[SDD Required Contents](ch11.xhtml#lev-11.3)”
    on [page 244](ch11.xhtml#page_244)). Note that this outline is by no means a requirement;
    you can organize your SDD however you like and it will still be valid as long
    as it contains those required contents. The following is a slightly modified variant
    of the IEEE’s suggestion:^([7](ch19_footnote.xhtml#ch11fn7))
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 1 Frontispiece
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Table of Contents
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Date of Issue and Status
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Issuing Organization
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Authorship
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Change History
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 2 Introduction
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Purpose
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Scope
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Intended Audience
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Context
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Overview/Summary
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 3 Definitions, Acronyms, and Abbreviations
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 4 References
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 5 Glossary
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 6 Body
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Identified Stakeholders and Design Concerns
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Design Viewpoint 1
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.1 Design View 1
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.2 (Optional) Design Overlays 1
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 6.2.3 (Optional) Design Rationales 1
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Design Viewpoint 2
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 6.3.1 Design View 2
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 6.3.2 (Optional) Design Overlays 2
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 6.3.3 (Optional) Design Rationales 2
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Design Viewpoint *n*
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 6.4.1 Design View *n*
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 6.4.2 (Optional) Design Overlays *n*
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 6.4.3 (Optional) Design Rationales *n*
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 7 (Optional) Index
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '**11.6 A Sample SDD**'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section presents a complete (though highly simplified, for editorial reasons)
    SDD example. This SDD describes the design for the sample use case and requirements
    documentation appearing in the previous chapter (see “[Use Cases](ch10.xhtml#lev-10.6)”
    on [page 214](ch10.xhtml#page_214)). Specifically, this SDD covers the design
    of the Plantation Productions digital data acquisition and control (DAQ) system
    components that process the DIP switches upon system initialization.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '**1 Plantation Productions DAQ DIP Switch Control**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '**1.1 Table of Contents**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[Omitted for editorial reasons]'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2 Date of Issue and Status**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: First created on Mar 18, 2018
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Current status: complete'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '**1.3 Issuing Organization**'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Plantation Productions, Inc.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '**1.4 Authorship**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Randall L. Hyde
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2019, Plantation Productions, Inc.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '**1.5 Change History**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Mar 18, 2019: Initial SDD created.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '**2 Introduction**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '**2.1 Purpose**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: The DAQ system from Plantation Productions, Inc., is a digital data acquisition
    and control system intended to provide analog and digital I/O for industrial and
    scientific systems.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: This Software Design Description (SDD) describes the DIP switch initialization
    component of the DAQ system. The intent is that a developer wishing to implement
    the functionality for the DIP switch control from the Software Requirement Specifications
    (SRS) can use this document to achieve that purpose.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 Scope**'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: This document describes only the DIP switch design in the DAQ system (for space/editorial
    reasons). For the full SDD, please see *[http://www.plantation-productions.com/Electronics/DAQ/DAQ.html](http://www.plantation-productions.com/Electronics/DAQ/DAQ.html)*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3 Intended Audience**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'The intended audience *expected* for an SDD:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: This document is intended for use by software developers who will implement
    this design, by design stakeholders who wish to review the design prior to its
    implementation, and by the authors of the Software Test Cases (STC) and Software
    Test Procedures (STD) documents.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'The true intended audience for *this* SDD:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: This document is intended for readers of *Write Great Code, Volume 3*, as a
    means for providing a sample SDD.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '**2.4 Context**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'The Plantation Productions DAQ system fulfilled a need for a well-documented
    digital data acquisition and control system that engineers could design into safety-critical
    systems such as nuclear research reactors. Although there are many commercial
    off-the-shelf (COTS) systems that could be used, they suffer from a couple of
    major drawbacks including: they are usually proprietary (difficult to modify or
    repair after purchase), they are often obsolete within 5 to 10 years with no way
    to repair or replace them, and they rarely have full support documentation (for
    example, SRS, SDD, STC, and STP) that an engineer can use to validate and verify
    the system.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: The DAQ system overcomes this problem by providing an open hardware and open
    source set of designs with full design documentation that is validated and verified
    for safety systems.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Although originally designed for a nuclear research reactor, the DAQ system
    is useful in any place where you need an Ethernet-based control system supporting
    digital (TTL-level) I/O, optically isolated digital inputs, mechanical or solid-state
    relay digital outputs (isolated and conditioned), analog inputs (for example,
    ±10v and 4–20mA), and (conditioned) analog outputs (±10v).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '**2.5 Overview/Summary**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of this documentation is organized as follows.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 3 covers the software design, including:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Section 3.1 Stakeholders and Design Concerns
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Section 3.2 Context Viewpoint and Overall Architecture
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Section 3.3 Logical Viewpoint and Data Dictionary
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Section 3.4 Interaction Viewpoint and Control Flow
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Section 4 provides an index.^([8](ch19_footnote.xhtml#ch11fn8))
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '**3 Definitions, Acronyms, and Abbreviations**'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '| **Term** | **Definition** |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '| DAQ | Data acquisition system |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: '| SBC | Single-board computer |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: '| Software Design Description (SDD) | Documentation of the design of the software
    system (IEEE Std 1016-2009)—that is, this document. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
- en: '| Software Requirements Specification (SRS) | Documentation of the essential
    requirements (functions, performance, design constraints, and attributes) of the
    software and its external interfaces (IEEE Std 610.12-1990). |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
- en: '| System Requirements Specification (SyRS) | A structured collection of information
    that embodies the requirements of the system (IEEE Std 1233-1998). A specification
    that documents the requirements to establish a design basis and the conceptual
    design for a system or subsystem. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
- en: '**4 References**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '| **Reference** | **Discussion** |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 830-1998 | SRS documentation standard |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 829-2008 | STP documentation standard |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1012-1998 | Software verification and validation standard |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1016-2009 | SDD documentation standard |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1233-1998 | SyRS documentation standard |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
- en: '**5 Glossary**'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'DIP: Dual inline package'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '**6 Software Design**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '**6.1 Stakeholders and Design Concerns**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: The stakeholders for the DAQ DIP switch design are Plantation Productions, Inc.,
    and Randall Hyde. One main design concern is to create a simplified SDD that fits
    within the editorial constraints of *Write Great Code, Volume 3*, while still
    providing a reasonable example of an SDD. The remaining design concerns are all
    the requirements for the DAQ DIP switch system as described in the SRS (see “(Selected)
    DAQ Software Requirements (from SRS)” on [page 219](ch10.xhtml#page_219)).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '**6.2 Context Viewpoint and Overall Architecture**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: The DAQ context viewpoint shows the functionality that exists between the user
    and the system.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Name/tag: DAQ_SDD_001'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Author: Randall Hyde'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Design elements used: This viewpoint employs use cases, actors (host PC and
    end user), nodes, components, and packages to describe the system interface.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Requirements/design concerns:^([9](ch19_footnote.xhtml#ch11fn9))
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_700_000
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_701_000
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_704_000
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_707_000
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_723_000.1
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '**6.2.1 Contextual View^([10](ch19_footnote.xhtml#ch11fn10))**'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: The DAQ system firmware runs on a Netburner MOD54415 SBC connected to a DAQ_IF
    (DAQ interface) board. An end user can set DIP switch settings to initialize the
    way the DAQ interfaces to a host PC. The host PC can communicate with the DAQ
    system using RS-232 Serial, USB, or Ethernet connections (see [Figure 11-19](ch11.xhtml#ch11fig19)).
    This design expects existing library routines for `maintPrintf`, `serialTaskInit`,
    `usbTaskInit`, `ethernetTaskInit`, and `readDIPSwitches`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-19.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-19: Sample contextual view*'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '**6.2.2 Component/Deployment Overlay**'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: The following design overlay provides a different look at the contextual view
    using a combination deployment/component diagram. [Figure 11-20](ch11.xhtml#ch11fig20)
    shows the physical components of the system^([11](ch19_footnote.xhtml#ch11fn11))
    and their interconnections.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-20.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-20: Sample design overlay diagram*'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '**6.2.3 (Optional) Design Rationales**'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this viewpoint is to show how the user controls the way in which
    the host PC communicates with the DAQ system.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '**6.3 Logical Viewpoint and Data Dictionary**'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'Name/tag: DAQ_SDD_002'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'Author: Randall Hyde'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'Design elements used: This viewpoint employs a single class diagram to describe
    the data storage for this application.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '*In the real application, it would probably be better to use global variables
    to hold the DIP switch settings rather than an actual class.*'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'Requirements/Design Concerns:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_723_000.2
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '**6.3.1 DIP Switch Variables**'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: The data storage requirement for the DAQ (DIP switch) application is very simple.
    A set of 12 global variables in [Figure 11-21](ch11.xhtml#ch11fig21) (which this
    SDD groups together under *globals*) is all that is really needed.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Description** |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
- en: '| `dipsw_g` | Eight-bit array (in a byte) containing DIP switch values |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
- en: '| `serialEnable_g` | `true` if RS-232 communication is enabled |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
- en: '| `USBEnabled_g` | `true` if USB communications is enabled |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
- en: '| `ethEnabled_g` | `true` if Ethernet communications is enabled |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
- en: '| `ethMultClients_g` | Allow only a single Ethernet client if `false`; allow
    five clients if `true` |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
- en: '| `ethernetDipSw_g` | Hold `dipsw_g[5]` in bit 0 and `dipsw_g[6]` in bit 1
    (`0..3`) |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
- en: '| `unitTestMode_g` | `true` if operating in unit test mode |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
- en: '| `debugMode_g` | `true` if `maintPrintf()` function sends output to COM1:,
    `false` if `maintPrintf()`is disabled |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
- en: '| `ethernetAdrs_g` | Holds IP address (192.168.2.70–192.168.2.73) |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
- en: '| `maxSockets_g` | Either `0`, `1`, or `5` based on `ethEnabled_g` and `ethMultClients_g`
    values |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
- en: '| `slots_g` | Holds file descriptors for up to five active Ethernet sockets
    |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
- en: '| `slot_g` | Used to index into `slots_g` |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
- en: '| `maintPrintfTask()` | External function that starts the `maintPrintf()` task
    (to handle debug output) |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
- en: '| `serialTaskInit()` | External function that starts the RS-232 command receipt
    task |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
- en: '| `usbTaskInit()` | External function that starts the USB command receipt task
    |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
- en: '| `ethTaskInit()` | External function that starts an Ethernet command receipt
    task (up to five of these threads can be running concurrently) |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
- en: '![image](Images/fig11-21.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-21: DAQ global entities*'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '**6.3.2 Design Overlays**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '**6.3.3 Design Rationales**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: This logical view used a class diagram rather than a set of global variables
    simply because a typical `read` `dipswitches` function for the Netburner returns
    all eight readings in a single 8-bit byte (that is, as a bit array). For that
    reason, it makes sense to treat all eight values as fields of a class, as these
    attributes would normally be derived anyway—that is, computed by masking out the
    specific bit.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '**6.4 Interaction Viewpoint and Control Flow**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 'Name/tag: DAQ_SDD_003'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'Author: Randall Hyde'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'Design elements used: This viewpoint employs a couple of activity diagrams
    to show the control flow (and the value calculations) through the program.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'Requirements/design concerns:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_702_000
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_702_001
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_702_002
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_703_000
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_703_001
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_705_000
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_705_001
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_705_002
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_706_000
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_706_001
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_708_000
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_709_000
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_710_000
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_711_000
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_712_000
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_716_000
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_716_001
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_716_002
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_716.5_000
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_717_000
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_718_000
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_718_001
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_719_000
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_720_000
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_721_001
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_721_002
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_723_000
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_723_000
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_723_000
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_723_000.2
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_726_000
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_727_000
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_728_000
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_737_000
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_738_000
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_738_001
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_SRS_738_002
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '**6.4.1 Design View**'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: The design view for the interaction viewpoint uses UML activity diagrams (flowcharts)
    to show the control flow through the application. See [Figures 11-22](ch11.xhtml#ch11fig22),
    [11-23](ch11.xhtml#ch11fig23), and [11-24](ch11.xhtml#ch11fig24).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-22.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-22: Activity diagram: reading DIP switches*'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-23.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-23: Activity diagram continuation #1*'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-24.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-24: Activity diagram continuation #2*'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: The `serialTaskInit()` and `usbTaskInit()` functions are library code that is
    external to this design. These functions start a task, `ethernetListenTask`, to
    handle RS-232 and USB communications as shown in [Figure 11-25](ch11.xhtml#ch11fig25).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: The `ethTaskInit()` function (provided in a library external to this design)
    runs until the connecting host terminates the Ethernet connection. At that time,
    the `ethernetListenTask` task will set the entry of the corresponding slots to
    `0` and terminate the task (thread). Should the listen connection become broken,
    `ethernetListenTask` terminates.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-25.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-25: Activity diagram: ethernetListenTask*'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '**6.4.2 Sequence Diagram Overlay**'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: The sequence diagram in [Figure 11-26](ch11.xhtml#ch11fig26) shows another way
    of looking at the initialization of the threads in the DAQ application.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '**6.4.3 Design Rationale**'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: The DAQ DIP switches project is relatively simple (purposely, so that the SDD
    example wouldn’t be too large to fit into this book). Accordingly, the design
    is an old-fashioned procedural/imperative programming model (as opposed to an
    object-oriented design).
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '**7 Index**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '[Omitted for editorial reasons]'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig11-26.jpg)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-26: Sequence diagram: initializing tasks*'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '**11.7 Updating the Traceability Matrix with Design Information**'
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The SDD adds a single column to the RTM: the SDD tag column. However, the SDD
    tag does not directly embed any traceability information, so you’ll have to extract
    that information from the SDD to determine where to place your SDD tags in the
    RTM.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'As noted in “Design Views vs. Design Viewpoints” on [page 240](ch11.xhtml#page_240),
    each viewpoint in an SDD must include design concerns and requirements information.
    In this chapter (see “[A Sample SDD](ch11.xhtml#lev-11.6)” on [page 247](ch11.xhtml#page_247)),
    I’ve strongly suggested supplying all the SRS requirement tags as the list of
    design concerns in the viewpoint documentation. If you’ve done that, you’ve already
    created the reverse traceability back to the requirements. As a result, filling
    in the SDD tags in the RTM is easy: just locate each requirement tag (listed in
    the current viewpoint) and copy the viewpoint’s SDD tag into the SDD tag column
    in the RTM. Of course, considering that you can have multiple requirements associated
    with a single viewpoint, you’ll also have several copies of the same SDD tag spread
    throughout the RTM (one per associated requirement).'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Should you ever want to trace your SDD tags back to all the requirements in
    the RTM (without looking up the list in the SDD), simply sort the RTM by the SDD
    tag column. This will collect all the requirements (and everything else linked
    to that SDD tag) into a contiguous group in the matrix and make it easy to identify
    everything associated with that tag.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: If you choose some other method of specifying design concerns in the viewpoint
    that doesn’t involve incorporating the SRS tags within them, then determining
    the placement of the SDD tags in the RTM becomes a manual (even laborious) process.
    That’s why I strongly recommend using SRS tags when generating your viewpoints.
    Since you have to consider all the requirements when generating the viewpoint
    anyway, it makes sense to collect that information into the SDD at the same time.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '**11.8 Creating a Software Design**'
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This chapter has spent considerable time discussing how to create a Software
    Design Description. In the examples you’ve seen, it might seem that the actual
    designs were plucked out of thin air. Where did these designs originate from?
    If you’re creating a new system design, how do you come up with that design in
    the first place? Well, that’s the subject of the next volume in this series, *Write
    Great Code, Volume 4: Designing Great Code*. This chapter has laid the groundwork
    for that book.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '**11.9 For More Information**'
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Freeman, Eric, and Elizabeth Robson. *Head First Design Patterns: A Brain-Friendly
    Guide*. Sebastopol, CA: O’Reilly Media, 2004.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 'Gamma, Erich, et al. *Design Patterns: Elements of Reusable Object-Oriented
    Software*. Upper Saddle River, NJ: Addison-Wesley Professional, 1994.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'IEEE. “IEEE Std 1016-2009: IEEE Standard for Information Technology—Systems
    Design—Software Design Descriptions.” July 20, 2009\. *[https://ieeexplore.ieee.org/document/5167255/](https://ieeexplore.ieee.org/document/5167255/)*.
    (It’s not cheap—about $100—and it’s worded in a way that only a lawyer can appreciate,
    but this is the gold standard for SDDs.)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
