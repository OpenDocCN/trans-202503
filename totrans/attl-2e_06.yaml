- en: '6'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AUTOMATIC MAKEFILES WITH AUTOMAKE
  prefs: []
  type: TYPE_NORMAL
- en: '*If you understand, things are just as they are; if you do not understand,
    things are just as they are.'
  prefs: []
  type: TYPE_NORMAL
- en: —Zen proverb*
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Shortly after Autoconf began its journey to success, David MacKenzie started
    working on a new tool for automatically generating makefiles for a GNU project:
    Automake. During early development of the *GNU Coding Standards (GCS)*, it became
    apparent to MacKenzie that because the *GCS* is fairly specific about how and
    where a project’s products should be built, tested, and installed, much of a GNU
    project makefile was boilerplate material. Automake takes advantage of this fact
    to make maintainers’ lives easier and to make the user’s experience more consistent.'
  prefs: []
  type: TYPE_NORMAL
- en: MacKenzie’s work on Automake lasted almost a year, ending around November 1994\.
    A year later, in November 1995, Tom Tromey (of Red Hat and Cygnus fame) took over
    the Automake project and played a significant role in its development. Although
    MacKenzie had written the initial version of Automake in Bourne shell script,
    Tromey completely rewrote the tool in Perl and continued to maintain and enhance
    Automake over the next five years.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of 2000, Alexandre Duret-Lutz had essentially taken over maintenance
    of the Automake project. His role as project lead lasted until about mid-2007,
    at which point Ralf Wildenhues^([1](footnote.xhtml#ch06fn1)) took the wheel, with
    occasional input from Akim Demaille and Jim Meyering. From 2012 to early 2017,
    Automake was maintained by Stefano Lattarini while he worked for Google in Switzerland.
    The current maintainer is Mathieu Lirzin, a computer science master’s student
    at the University of Bordeaux in France.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the complaints I’ve seen about the Autotools are ultimately associated
    with Automake. The reasons are simple: Automake provides the highest level of
    abstraction over the build system and imposes a fairly rigid structure on projects
    that use it. Automake’s syntax is concise—in fact, it’s terse, almost to a fault.
    One Automake statement represents a *lot* of functionality. But once you understand
    it, you can get a fairly complete, complex, and functionally correct build system
    up and running in short order—that is, in minutes, not hours or days.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I provide you with some insight into the inner workings of
    Automake. With such insight, you’ll begin to feel comfortable not only with what
    Automake can do for you but also with extending it in areas where its automation
    falls short.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Down to Business
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s face it—getting a makefile right is often difficult. The devil, as they
    say, is in the details. Consider the following changes to the files in our project
    directory structure as we continue to improve the project build system for Jupiter.
    Let’s start by cleaning up our work area. You can do this using `make distclean`,
    or if you’re building from a GitHub repository work area, you can use a form of
    the `git clean` command:^([2](footnote.xhtml#ch06fn2))
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 6.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `rm` command at ➊ deletes our hand-coded *Makefile.in* templates and the
    `bootstrap.sh` script we wrote to ensure that all the support scripts and files
    are copied into the root of our project directory. We won’t need this script anymore
    because we’re upgrading Jupiter to Automake proper. (For the sake of brevity,
    I used `echo` statements at ➋ and ➌ to write the new *Makefile.am* files; you
    can use a text editor if you wish.)
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*There is a hard carriage return at the end of the line at ➌. The shell will
    continue to accept input after the carriage return until the quotation is closed*.'
  prefs: []
  type: TYPE_NORMAL
- en: I used the `touch` command at ➍ to create new, empty versions of the *NEWS*,
    *README*, *AUTHORS*, and *ChangeLog* files in the project root directory. (The
    *INSTALL* and *COPYING* files are added by `autoreconf -i`.) These files are required
    by the *GCS* for all GNU projects. And although they’re not required for non-GNU
    projects, they’ve become something of an institution in the OSS world; users have
    come to expect them.^([3](footnote.xhtml#ch06fn3))
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The* GCS *covers the format and contents of these files. Sections 6.7 and
    6.8 cover the* NEWS *and* ChangeLog *files, respectively, and Section 7.3 covers
    the* README, INSTALL, *and* COPYING *files. The* AUTHORS *file is a list of people
    (names and optional email addresses) to whom attribution should be given.^([4](footnote.xhtml#ch06fn4))*'
  prefs: []
  type: TYPE_NORMAL
- en: It can be a little painful to maintain a *ChangeLog* file—especially since you’ve
    already done it once as you added commit messages to your repository commits.
    To simplify the process, consider using a shell script to scrape your repository
    log into *ChangeLog* before you make a new release. There are existing scripts
    available on the internet; for example, *gnulib* (see [Chapter 13](ch13.xhtml))
    provides the `gitlog-to-changelog` script, which can be used to import a git repository’s
    log information into *ChangeLog* prior to release.
  prefs: []
  type: TYPE_NORMAL
- en: '*Enabling Automake in configure.ac*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To enable Automake within the build system, I’ve added a single line to *configure.ac*:
    a call to `AM_INIT_AUTOMAKE` between the calls to `AC_INIT` and `AC_CONFIG_SRCDIR`,
    as shown in [Listing 6-1](ch06.xhtml#ch06ex1).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-1: Adding Automake functionality to* configure.ac'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your project has already been configured with Autoconf, this is the *only*
    line that’s required to enable Automake in a working *configure.ac* file. The
    `AM_INIT_AUTOMAKE` macro accepts an optional argument: a whitespace-separated
    list of option tags, which can be passed into this macro to modify the general
    behavior of Automake. For a detailed description of each option, see [Chapter
    17](ch17.xhtml) of the *GNU Automake Manual*.^([5](footnote.xhtml#ch06fn5)) I
    will, however, point out a few of the most useful options here.'
  prefs: []
  type: TYPE_NORMAL
- en: gnits, gnu, foreign
  prefs: []
  type: TYPE_NORMAL
- en: These options set Automake’s strictness checks. The default is `gnu`. The `gnits`
    option makes Automake even more pedantic than it already is, and the `foreign`
    option loosens things up a bit—with `foreign`, you aren’t required to have the
    obligatory *INSTALL*, *README*, and *ChangeLog* files normally required for GNU
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: check-news
  prefs: []
  type: TYPE_NORMAL
- en: The `check-news` option causes `make dist` to fail if the project’s current
    version (from *configure.ac*) doesn’t show up in the first few lines of the *NEWS*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: dist-bzip2, dist-lzip, dist-xz, dist-shar, dist-zip, dist-tarZ
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `dist-*` options to change the default distribution package
    type. By default, `make dist` builds a *.tar.gz* file, but developers often want
    to distribute, for example, *.tar.xz* packages instead. These options make the
    change quite easy. (Even without the `dist-xz` option, you can override the current
    default by using `make dist-xz`, but using the option is simpler if you always
    want to build *.xz* packages.)
  prefs: []
  type: TYPE_NORMAL
- en: readme-alpha
  prefs: []
  type: TYPE_NORMAL
- en: The `readme-alpha` option temporarily alters the behavior of the build and distribution
    processes during alpha releases of a project. Using this option causes a file
    named *README-alpha*, found in the project root directory, to be distributed automatically.
    The use of this option also alters the expected versioning scheme of the project.
  prefs: []
  type: TYPE_NORMAL
- en: -W category, --warnings=category
  prefs: []
  type: TYPE_NORMAL
- en: The `-W` *`category`* and `--warnings=`*`category`* options indicate that the
    project would like to use Automake with various warning categories enabled. Multiple
    such options can be used with different category tags. Refer to the *GNU Automake
    Manual* to find a list of valid categories.
  prefs: []
  type: TYPE_NORMAL
- en: parallel-tests
  prefs: []
  type: TYPE_NORMAL
- en: The `parallel-tests` feature allows checks to be executed in parallel in order
    to take advantage of multiprocessor machines during execution of the `check` target.
  prefs: []
  type: TYPE_NORMAL
- en: subdir-objects
  prefs: []
  type: TYPE_NORMAL
- en: The `subdir-objects` option is required when you intend to reference sources
    from directories other than the current directory. Using this option causes Automake
    to generate `make` commands that cause object and intermediate files to be generated
    into the same directory as the source file. For more information on this option,
    see “Nonrecursive Automake” on [page 175](ch06.xhtml#page_175).
  prefs: []
  type: TYPE_NORMAL
- en: version
  prefs: []
  type: TYPE_NORMAL
- en: The *`version`* option is actually a placeholder for a version number that represents
    the lowest version of Automake that is acceptable for this project. For instance,
    if `1.11` is passed as an option tag, Automake will fail while processing *configure.ac*
    if its version is earlier than 1.11\. This can be useful if you’re trying to use
    features that only exist in later versions of Automake.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the new *Makefile.am* files in place and Automake enabled in *configure.ac*,
    let’s run `autoreconf` with the `-i` option in order to add any new utility files
    that Automake may require for our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding the `AM_INIT_AUTOMAKE` macro to *configure.ac* causes `autoreconf -i`
    to now execute `automake -i`, which includes a few additional utility files: *aclocal.m4*,
    *install-sh*, *compile*, *missing*, and *depcomp*. Also, Automake now generates
    *Makefile.in* from *Makefile.am*.'
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned *aclocal.m4* in [Chapter 2](ch02.xhtml) and `install-sh` in [Chapter
    4](ch04.xhtml). The `missing` script is a little utility helper script that prints
    a nicely formatted message when a tool specified on its command line is not available.
    More detail than this is not really required; if you’re curious, execute `./missing
    --help` in your project directory.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk about the `depcomp` script shortly, but I’d like to mention the purpose
    of the `compile` script here. This script is a wrapper around some older compilers
    that do not understand the concurrent use of the `-c` and `-o` command line options.
    When you use product-specific flags, which we’ll discuss shortly, Automake has
    to generate code that may compile source files multiple times with different flags
    for each file. Thus, it has to name the object files differently for each set
    of flags it uses. The `compile` script facilitates this process.
  prefs: []
  type: TYPE_NORMAL
- en: Automake also adds default *INSTALL* and *COPYING* text files containing boilerplate
    text that pertains specifically to the GNU project. You can modify these files
    for your projects as you see fit. I find the default *INSTALL* file text to be
    useful for general-purpose instructions related to Autotools-built projects, but
    I like to prepend some project-specific information to the top of this file before
    committing it to my repository. Automake’s `-i` option won’t overwrite these text
    files in a project that already contains them, so feel free to modify the default
    files as you see fit, once they’ve been added by `autoreconf -i`.
  prefs: []
  type: TYPE_NORMAL
- en: The *COPYING* file contains the text of the GPL, which may or may not apply
    to your project. If your project is released under GPL, just leave the text as
    is. If you’re releasing under another license, such as the BSD, MIT, or Apache
    Commons licenses, replace the default text with text appropriate for that license.^([6](footnote.xhtml#ch06fn6))
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You only need to use the *`-i`* option once in a newly checked-out work area
    or a newly created project. Once the missing utility files have been added, you
    can drop the *`-i`* option in future calls to *`autoreconf`* unless you add certain
    macros to* configure.ac, *which may then cause the use of the *`-i`* option to
    add more missing files. We’ll see some of this sort of thing in later chapters.*'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding commands create an Automake-based build system that contains everything
    (with the minor exception of `check` functionality, which we’ll get to shortly)
    that we wrote into our original *Makefile.in* templates, except that this system
    is more correct and functionally complete according to the *GCS*. A glance at
    the resulting generated *Makefile.in* template shows that Automake has done a
    significant amount of work for us. The resulting top-level *Makefile.in* template
    is nearly 24KB, while the original, hand-coded makefiles were only a few hundred
    bytes long.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Automake build system supports the following important `make` targets (derived
    from an Automake-generated *Makefile*):'
  prefs: []
  type: TYPE_NORMAL
- en: '| `all` | `check` | `clean` | `ctags` |'
  prefs: []
  type: TYPE_TB
- en: '| `dist` | `dist-bzip2` | `dist-gzip` | `dist-lzip` |'
  prefs: []
  type: TYPE_TB
- en: '| `dist-shar` | `dist-tarZ` | `dist-xz` | `dist-zip` |'
  prefs: []
  type: TYPE_TB
- en: '| `distcheck` | `distclean` | `distdir` | `dvi` |'
  prefs: []
  type: TYPE_TB
- en: '| `html` | `info` | `install` | `install-data` |'
  prefs: []
  type: TYPE_TB
- en: '| `install-dvi` | `install-exec` | `install-html` | `install-info` |'
  prefs: []
  type: TYPE_TB
- en: '| `install-pdf` | `install-ps` | `install-strip` | `installcheck` |'
  prefs: []
  type: TYPE_TB
- en: '| `installdirs` | `maintainer-clean` | `mostlyclean` | `pdf` |'
  prefs: []
  type: TYPE_TB
- en: '| `ps` | `tags` | `ininstall` |  |'
  prefs: []
  type: TYPE_TB
- en: As you can see, this goes far beyond what we could provide in our hand-coded
    *Makefile.in* templates. Automake writes this base functionality into every project
    that uses it.
  prefs: []
  type: TYPE_NORMAL
- en: '*A Hidden Benefit: Automatic Dependency Tracking*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In “Dependency Rules” on [page 46](ch03.xhtml#page_46), we discussed `make`
    dependency rules. These are rules we define in makefiles so that `make` is aware
    of the hidden relationships between C-language source files and included header
    files. Automake goes to a lot of trouble to ensure that you don’t have to write
    such dependency rules for languages it understands, like C, C++, and Fortran.
    This is an important feature for projects containing more than a few source files.
  prefs: []
  type: TYPE_NORMAL
- en: Writing dependency rules by hand for dozens or hundreds of source files is both
    tedious and error prone. In fact, it’s such a problem that compiler writers often
    provide a mechanism that enables the compiler to write these rules automatically
    based on its internal knowledge of the source files and the language. The GNU
    compilers, among others, support a family of `-M` options (`-M`, `-MM`, `-MF`,
    `-MG`, and so on) on the command line. These options tell the compiler to generate
    a `make` dependency rule for the specified source file. (Some of these options
    can be used on the normal compiler command line, so the dependency rule can be
    generated when the source file is being compiled.)
  prefs: []
  type: TYPE_NORMAL
- en: The simplest of these options is the basic `-M` option, which causes the compiler
    to generate a dependency rule for the specified source file on `stdout` and then
    terminate. This rule can be captured in a file, which is then included by the
    makefile so that the dependency information within this rule is incorporated into
    the directed graph that `make` builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what happens on systems where the native compilers don’t provide dependency
    generation options, or where they don’t work together with the compilation process?
    In such cases, Automake provides a wrapper script called *depcomp* that executes
    the compiler twice: once for dependency information and again to compile the source
    file. When the compiler lacks the options to generate *any* dependency information,
    another tool may be used to recursively determine which header files affect a
    given source file. On systems where none of these options is available, automatic
    dependency generation fails.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*For a more detailed description of the dependency-generating compiler options,
    see “Item 10: Using Generated Source Code” on [page 529](ch18.xhtml#page_529).
    For more on Automake dependency management, see the relevant sections of the*
    GNU Automake Manual.'
  prefs: []
  type: TYPE_NORMAL
- en: It’s time now to bite the bullet and give it a try. As with our build system
    from the previous chapter, run `autoreconf` (optional since we ran `autoreconf
    -i` earlier, but harmless), followed by `./configure` and `make`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can’t truly appreciate what Automake has done here without trying a few
    of the other `make` targets we’ve become familiar with. Try out the `install`,
    `dist`, and `distcheck` targets on your own to assure yourself that you still
    have all the functionality you had before you deleted your handwritten *Makefile.in*
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The *`check`* target exists as a do-nothing target at this point, but we need
    to dive into Automake constructs in a bit more detail before we can add our test
    back in. When we get to it, you’ll see that it’s even simpler than the code we
    originally wrote*.'
  prefs: []
  type: TYPE_NORMAL
- en: What’s Actually in a Makefile.am File?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.xhtml), we discussed how Autoconf accepts as input a shell
    script sprinkled with M4 macros and then generates the same shell script with
    those macros fully expanded. Likewise, Automake accepts as input a makefile sprinkled
    with Automake commands. Just as Autoconf’s input files are simply enhanced shell
    scripts, Automake *Makefile.am* files are nothing more than standard makefiles
    with additional Automake-specific syntax.
  prefs: []
  type: TYPE_NORMAL
- en: One significant difference between Autoconf and Automake is that the only text
    Autoconf outputs is the existing shell script in the input file and any additional
    shell script resulting from the expansion of embedded M4 macros. Automake, on
    the other hand, assumes that all makefiles should contain a minimal infrastructure
    designed to support the *GCS*, in addition to any targets and variables that you
    specify.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this point, create a *temp* directory in the root of the Jupiter
    project and add an empty *Makefile.am* file to it. Next, add this new *Makefile.am*
    to the project’s *configure.ac* file with a text editor and reference it from
    the top-level *Makefile.am* file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I used an `echo` statement at ➊ to rewrite a new top-level *Makefile.am* file
    that has `SUBDIRS` reference both *src* and *temp*. I used a text editor to add
    *temp/Makefile* to the list of makefiles Autoconf will generate from templates
    (➋). As you can see, there is a certain amount of support code generated into
    every makefile that Automake considers indispensable. Even an empty *Makefile.am*
    file generates a 12KB *Makefile.in* template (➍), from which `configure` generates
    a similarly sized *Makefile* (➌).^([7](footnote.xhtml#ch06fn7))
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the `make` utility uses a fairly rigid set of rules for processing makefiles,
    Automake takes some license with your additional `make` code. Here are some specifics:'
  prefs: []
  type: TYPE_NORMAL
- en: The `make` variables defined in *Makefile.am* files are placed at the top of
    the resulting *Makefile.in* template, immediately following any Automake-generated
    variable definitions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `make` rules specified in *Makefile.am* files are placed at the end of the
    resulting *Makefile.in* template, immediately after any Automake-generated rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most Autoconf variables substituted by `config.status` are converted to `make`
    variables and initialized to those substitution variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `make` utility doesn’t care where rules are in relation to each other, because
    it reads every rule into an internal database before processing any of them. Variables
    are treated similarly, as long as they are defined before the rules that use them.
    In order to avoid any variable-binding issues, Automake places all variables at
    the top of the output file in the order in which they’re defined in the input
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Our New Build System
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s look at what we put into those two simple *Makefile.am* files, beginning
    with the top-level *Makefile.am* file (shown in [Listing 6-2](ch06.xhtml#ch06ex2)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-2:* Makefile.am: *The top-level* Makefile.am *file contains only
    a subdirectory reference.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This single line of text tells Automake several things about our project:'
  prefs: []
  type: TYPE_NORMAL
- en: One or more subdirectories contain makefiles to be processed in addition to
    this file.^([8](footnote.xhtml#ch06fn8))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directories in this space-delimited list should be processed in the order specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directories in this list should be recursively processed for all primary targets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directories in this list should be treated as part of the project distribution,
    unless otherwise specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with most Automake constructs, `SUBDIRS` is simply a `make` variable that
    has special meaning for Automake. The `SUBDIRS` variable may be used to process
    *Makefile.am* files within arbitrarily complex directory structures, and the directory
    list may contain any relative directory references (not just immediate subdirectories).
    You might say that `SUBDIRS` is kind of like the glue that holds makefiles together
    in a project’s directory hierarchy, when using a recursive build system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Automake generates recursive `make` rules that implicitly process the current
    directory after those specified in the `SUBDIRS` list, but it’s often necessary
    to build the current directory before some or all of the other directories in
    the list. You may change the default ordering by referencing the current directory
    with a dot anywhere in the `SUBDIRS` list. For example, to build the top-level
    directory before the *src* directory, you could change the `SUBDIRS` variable
    in [Listing 6-2](ch06.xhtml#ch06ex2) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s turn to the *Makefile.am* file in the *src* directory, shown in [Listing
    6-3](ch06.xhtml#ch06ex3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-3:* src/Makefile.am: *The initial version of this* Makefile.am *file
    contains only two lines*'
  prefs: []
  type: TYPE_NORMAL
- en: The first line is a *product list variable* specification, and the second line
    is a *product source variable* specification.
  prefs: []
  type: TYPE_NORMAL
- en: '*Product List Variables*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Products are specified in a *Makefile.am* file using a *product list variable
    (PLV)*, which (like `SUBDIRS`) is a class of `make` variables that have special
    meaning to Automake. The following template shows the general format of a PLV:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The PLV name in the first line of [Listing 6-3](ch06.xhtml#ch06ex3) consists
    of two components: the *prefix* (*bin*) and the *primary* (`PROGRAMS`), separated
    by an underscore (`_`). The value of the variable is a whitespace-separated list
    of products generated by this *Makefile.am* file.'
  prefs: []
  type: TYPE_NORMAL
- en: Installation Location Prefixes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *bin* portion of the product list variable shown in [Listing 6-3](ch06.xhtml#ch06ex3)
    is an example of an *installation location prefix*. The *GCS* defines many common
    installation locations, and most are listed in [Table 3-1](ch03.xhtml#ch03tab1)
    on [page 65](ch03.xhtml#page_65). However, any `make` variable ending in `dir`,
    whose value is a filesystem location, is a viable installation location variable
    and may be used as a prefix in an Automake PLV.
  prefs: []
  type: TYPE_NORMAL
- en: You reference an installation location variable in a PLV prefix by omitting
    the `dir` portion of the variable name. For example, in [Listing 6-3](ch06.xhtml#ch06ex3),
    the `$(bindir)` `make` variable is referred to only as `bin` when it is used as
    an installation location prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Automake also recognizes four installation location variables starting with
    the special `pkg` prefix: `pkglibdir`, `pkgincludedir`, `pkgdatadir`, and `pkglibexecdir`.
    These `pkg` versions of the standard `libdir`, `includedir`, `datadir`, and `libexecdir`
    variables indicate that the listed products should be installed in a subdirectory
    of these locations named after the package. For example, in the Jupiter project,
    products listed in a PLV prefixed with `lib` would be installed into `$(libdir)`,
    while those listed in a PLV prefixed with `pkglib` would be installed into `$(libdir)`*/jupiter*.'
  prefs: []
  type: TYPE_NORMAL
- en: Since Automake derives the list of valid installation locations and prefixes
    from all `make` variables ending in `dir`, you may provide your own PLV prefixes
    that refer to custom installation locations. To install a set of XML files into
    an *xml* directory within the system data directory, you could use the code in
    [Listing 6-4](ch06.xhtml#ch06ex4) in your *Makefile.am* file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-4: Specifying a custom installation directory*'
  prefs: []
  type: TYPE_NORMAL
- en: Installation location variables will contain default values defined either by
    Automake-generated makefiles or by you in your *Makefile.am* files, but your users
    can always override these default values on their `configure` or `make` command
    lines. If you don’t want certain products to be installed during a particular
    build, specify an empty value in an installation location variable on the command
    line; the Automake-generated rules will ensure that products intended for those
    directories aren’t installed. For example, to install only documentation and shared
    data files for a package, you could enter `make bindir='' libdir='' install`.^([9](footnote.xhtml#ch06fn9))
  prefs: []
  type: TYPE_NORMAL
- en: Prefixes Not Associated with Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Certain prefixes are not related to installation locations. For example, `noinst`,
    `check`, and `EXTRA` are used (respectively) to indicate products that are not
    installed, are used only for testing, or are optionally built. Here’s a little
    more information about these three prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: noinst
  prefs: []
  type: TYPE_NORMAL
- en: Indicates that the listed products should be built but not installed. For example,
    a static so-called *convenience library* might be built as an intermediate product
    and then used in other stages of the build process to build final products. The
    `noinst` prefix tells Automake that the product should not be installed and that
    only a static library should be built. (After all, it makes no sense to build
    a shared library that won’t be installed.)
  prefs: []
  type: TYPE_NORMAL
- en: check
  prefs: []
  type: TYPE_NORMAL
- en: Indicates products that are to be built only for testing purposes and will thus
    not need to be installed. Products listed in PLVs prefixed with `check` are built
    only if the user enters `make check`.
  prefs: []
  type: TYPE_NORMAL
- en: EXTRA
  prefs: []
  type: TYPE_NORMAL
- en: Used to list programs that are conditionally built. Automake requires that all
    source files be specified statically within a *Makefile.am* file, as opposed to
    being calculated or derived during the build process, so that it can generate
    a *Makefile.in* template that will work for any possible command line. However,
    a project maintainer may elect to allow some products to be built conditionally
    based on configuration options given to the `configure` script. If products are
    listed in variables generated by the `configure` script, they should also be listed
    in a PLV, prefixed with `EXTRA`, within a *Makefile.am* file. This concept is
    illustrated in [Listings 6-5](ch06.xhtml#ch06ex5) and [6-6](ch06.xhtml#ch06ex6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-5: A conditionally built program defined in a shell variable in*
    configure.ac'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-6: Using the `EXTRA` prefix to conditionally define products in*
    Makefile.am'
  prefs: []
  type: TYPE_NORMAL
- en: At ➊ in [Listing 6-5](ch06.xhtml#ch06ex5), `optprog` is appended to an Autoconf
    substitution variable called `optional_programs`. The `EXTRA_PROGRAMS` variable
    at ➋ in [Listing 6-6](ch06.xhtml#ch06ex6) lists `optprog` as a product that may
    or may not be built, based on end-user configuration choices that determine whether
    `$(optional_programs)` at ➌ is empty or contains `optprog`.
  prefs: []
  type: TYPE_NORMAL
- en: While it may appear redundant to specify `optprog` in both *configure.ac* and
    *Makefile.am*, Automake needs the information in `EXTRA_PROGRAMS` because it cannot
    attempt to interpret the possible values of `$(optional_programs)`, as defined
    in *configure.ac*. Hence, adding `optprog` to `EXTRA_PROGRAMS` in this example
    tells Automake to generate rules to build it, even if `$(optional_programs)` doesn’t
    contain `optprog` during a particular build.
  prefs: []
  type: TYPE_NORMAL
- en: Primaries
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*Primaries* are like product classes, and they represent types of products
    that might be generated by a build system. A primary defines the set of steps
    required to build, test, install, and execute a particular class of products.
    For example, programs and libraries are built using different compiler and linker
    commands, Java classes require a virtual machine to execute them, and Python programs
    require an interpreter. Some product classes, such as scripts, data, and headers,
    have no build, test, or execution semantics—only installation semantics.'
  prefs: []
  type: TYPE_NORMAL
- en: The list of supported primaries defines the set of product classes that can
    be built automatically by an Automake build system. Automake build systems can
    still build other product classes, but the maintainer must define the `make` rules
    explicitly within the project’s *Makefile.am* files.
  prefs: []
  type: TYPE_NORMAL
- en: A thorough understanding the Automake primaries is the key to properly using
    Automake. The current complete list of supported primaries is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: PROGRAMS
  prefs: []
  type: TYPE_NORMAL
- en: When the `PROGRAMS` primary is used in a PLV, Automake generates `make` rules
    that use compilers and linkers to build binary executable programs for the listed
    products.
  prefs: []
  type: TYPE_NORMAL
- en: LIBRARIES/LTLIBRARIES
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of the `LIBRARIES` primary causes Automake to generate rules that build
    static archives (libraries) using the system compiler and librarian. The `LTLIBRARIES`
    primary does the same thing, but the generated rules also build Libtool shared
    libraries and execute these tools (as well as the linker) through the `libtool`
    script. (I’ll discuss the Libtool package in detail in [Chapters 7](ch07.xhtml)
    and [8](ch08.xhtml).) Automake restricts the installation locations for the `LIBRARIES`
    and `LTLIBRARIES` primaries: they can only be installed in `$(libdir)` and `$(pkglibdir)`.'
  prefs: []
  type: TYPE_NORMAL
- en: LISP
  prefs: []
  type: TYPE_NORMAL
- en: The `LISP` primary was designed mainly to manage the build for Emacs Lisp programs.
    Hence, it expects to refer to a list of *.el* files. You can find details on the
    use of this primary in Section 10.1 of the Automake manual.
  prefs: []
  type: TYPE_NORMAL
- en: PYTHON
  prefs: []
  type: TYPE_NORMAL
- en: Python is an interpreted language; the `python` interpreter converts a Python
    script, line by line, into Python byte code, executing it as it’s converted, so
    (like shell scripts) Python source files are executable as written. The use of
    the `PYTHON` primary tells Automake to generate rules that precompile Python source
    files (*.py*) into standard (*.pyc*) and optimized (*.pyo*) byte-compiled versions
    using the `py-compile` utility. Because of the normally interpreted nature of
    Python sources, this compilation occurs at install time rather than at build time.
  prefs: []
  type: TYPE_NORMAL
- en: JAVA
  prefs: []
  type: TYPE_NORMAL
- en: Java is a virtual machine platform; the use of the `JAVA` primary tells Automake
    to generate rules that convert Java source files (*.java*) into Java class files
    (*.class*) using the `javac` compiler. While this process is correct, it’s not
    complete. Java programs (of any consequence) generally contain more than one class
    file and are usually packaged as *.jar* or *.war* files, both of which may also
    contain several ancillary text files. The `JAVA` primary is useful, but only just.
    (I’ll discuss using—and extending—the `JAVA` primary in “Building Java Sources
    Using the Autotools” on [page 408](ch15.xhtml#page_408).)
  prefs: []
  type: TYPE_NORMAL
- en: SCRIPTS
  prefs: []
  type: TYPE_NORMAL
- en: '*Script*, in this context, refers to any interpreted text file—whether it’s
    shell, Perl, Python, Tcl/Tk, JavaScript, Ruby, PHP, Icon, Rexx, or some other.
    Automake allows a restricted set of installation locations for the `SCRIPTS` primary,
    including `$(bindir)`, `$(sbindir)`, `$(libexecdir)`, and `$(pkgdatadir)`. While
    Automake doesn’t generate rules to build scripts, it also doesn’t assume that
    a script is a static file in the project. Scripts are often generated by handwritten
    rules in *Makefile.am* files, sometimes by processing an input file with the `sed`
    or `awk` utility. For this reason, scripts are not distributed automatically.
    If you have a static script in your project that you’d like Automake to add to
    your distribution archive, you should prefix the `SCRIPTS` primary with the `dist`
    modifier as discussed in “PLV and PSV Modifiers” on [page 161](ch06.xhtml#page_161).'
  prefs: []
  type: TYPE_NORMAL
- en: DATA
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary data files can be installed using the `DATA` primary in a PLV. Automake
    allows a restricted set of installation locations for the `DATA` primary, including
    `$(datadir)`, `$(sysconfdir)`, `$(sharedstatedir)`, `$(localstatedir``)`, and
    `$(pkgdatadir)`. Data files are not automatically distributed, so if your project
    contains static data files, use the `dist` modifier on the `DATA` primary as discussed
    in “PLV and PSV Modifiers” on [page 161](ch06.xhtml#page_161).
  prefs: []
  type: TYPE_NORMAL
- en: HEADERS
  prefs: []
  type: TYPE_NORMAL
- en: Header files are a form of source file. Were it not for the fact that some header
    files are installed, they could simply be listed with the product sources. Header
    files containing the public interface for installed library products are installed
    into either the `$(includedir)` or a package-specific subdirectory defined by
    `$(pkgincludedir)`, so the most common PLVs for such installed headers are the
    `include_HEADERS` and `pkginclude_HEADERS` variables. Like other source files,
    header files are distributed automatically. If you have a generated header file,
    use the `nodist` modifier with the `HEADERS` primary as discussed in “PLV and
    PSV Modifiers” on [page 161](ch06.xhtml#page_161).
  prefs: []
  type: TYPE_NORMAL
- en: MANS
  prefs: []
  type: TYPE_NORMAL
- en: '*Man pages* are UTF-8 text files containing `troff` markup, which is rendered
    by `man` when viewed by a user. Man pages can be installed using the `man_MANS`
    or `man`*`N`*`_MANS` product list variables, where *`N`* represents a single-digit
    section number between 0 and 9 or the letters *l* (for math library topics) or
    *n* (for Tcl/Tk topics). Files in the `man_MANS` PLV should have a numeric extension
    indicating the man section to which they belong and, therefore, their target directory.
    Files in the `man`*`N`*`_MANS` PLV may be named with either numeric extensions
    or a *.man* extension and will be renamed to the associated numeric extensions
    when they’re installed by `make install`. Project man pages are not distributed
    by default because man pages are often generated, so you should use the `dist`
    modifier as discussed in “PLV and PSV Modifiers” on [page 161](ch06.xhtml#page_161).'
  prefs: []
  type: TYPE_NORMAL
- en: TEXINFOS
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to Linux or Unix documentation, Texinfo^([10](footnote.xhtml#ch06fn10))
    is the GNU project format of choice. The `makeinfo` utility accepts Texinfo source
    files (*.texinfo*, *.txi*, or *.texi*) and renders info files (*.info*) containing
    UTF-8 text annotated with Texinfo markup, which the `info` utility renders into
    formatted text for the user. The most common product list variable for use with
    Texinfo sources is `info_TEXINFOS`. The use of this PLV causes Automake to generate
    rules to build *.info*, *.dvi*, *.ps*, and *.html* documentation files. However,
    only the *.info* files are built with `make all` and installed with `make install`.
    In order to build and install the other types of files, you must specify the `dvi`,
    `ps`, `pdf`, `html`, `install-dvi`, `install-ps`, `install-pdf`, and `install-html`
    targets explicitly on the `make` command line. Since the `makeinfo` utility is
    not installed by default in many Linux distributions, the generated *.info* files
    are automatically added to distribution archives so your end users won’t have
    to go looking for `makeinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Product Source Variables*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The second line in [Listing 6-3](ch06.xhtml#ch06ex3) is an example of an Automake
    *product source variable* (*PSV*). PSVs conform to the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Like PLVs, PSVs are composed of multiple parts: the product name (`jupiter`
    in this case) and the `SOURCES` tag. The value of a PSV is a whitespace-separated
    list of source files from which *`product`* is built. The value of the PSV in
    the second line of [Listing 6-3](ch06.xhtml#ch06ex3) is the list of source files
    used to build the `jupiter` program. Ultimately, Automake adds these files to
    various `make` rule dependency lists and commands in the generated *Makefile.in*
    templates.'
  prefs: []
  type: TYPE_NORMAL
- en: Only characters that are allowed in `make` variables (letters, numbers, the
    at sign, and underscore) are allowed in the `product` tag of a PSV. As a result,
    Automake performs a transformation on product names listed in PLVs to render the
    *`product`* tags used in the associated PSVs. Automake converts illegal characters
    into underscores, as shown in [Listing 6-7](ch06.xhtml#ch06ex7).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-7: Illegal `make` variable characters are converted to underscores
    in `product` tags.*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, Automake converts *libc++.a* in the PLV at ➊ into the PSV `product` tag
    `libc___a` (that’s three underscores) to find the associated PSV at ➋ in the *Makefile.am*
    file. You must know the transformation rules so you can write PSVs that match
    your products.
  prefs: []
  type: TYPE_NORMAL
- en: '*PLV and PSV Modifiers*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `modifier-list` portions of the PLV and PSV templates defined previously
    contain a set of optional modifiers. The following BNF-like rule defines the format
    of the `modifier-list` element of these templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Modifiers change the normal behavior of the variable to which they are prepended.
    The currently defined set of prefix modifiers includes `dist`, `nodist`, `nobase`,
    and `notrans`.
  prefs: []
  type: TYPE_NORMAL
- en: The `dist` modifier indicates a set of files that should be distributed (that
    is, that should be included in the distribution package that’s built when `make
    dist` is executed). For example, assuming that some source files for a product
    should be distributed and some should not, the variables shown in [Listing 6-8](ch06.xhtml#ch06ex8)
    might be defined in the product’s *Makefile.am* file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-8: Using the `dist` and `nodist` modifiers in a* Makefile.am *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Automake normally strips relative path information from the list of header files
    in a `HEADERS` PLV. The `nobase` modifier is used to suppress the removal of path
    information from installed header files that are obtained from subdirectories
    by a *Makefile.am* file. For example, take a look at the PLV definition in [Listing
    6-9](ch06.xhtml#ch06ex9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-9: Using the `nobase` PLV modifier in a* Makefile.am *file*'
  prefs: []
  type: TYPE_NORMAL
- en: In this line we can see that *mylib.h* is in the same directory as *Makefile.am*,
    but *constants.h* is located in a subdirectory called *sys*. Normally, both files
    would be installed into `$(pkgincludedir)` by virtue of the `pkginclude` installation
    location prefix. However, since we’re using the `nobase` modifier, Automake will
    retain the *sys/* portion of the second file’s path for installation, and *constants.h*
    will be installed into `$(pkgincludedir)`*/sys*. This is useful when you want
    the installation (destination) directory structure to be the same as the project
    (source) directory structure as files are copied during installation.
  prefs: []
  type: TYPE_NORMAL
- en: The `notrans` modifier may be used on man page PLVs for man pages whose names
    should not be transformed during installation. (Normally, Automake will generate
    rules to rename the extension on man pages from *.man* to *.N*—where *N* is *0*,
    *1*, . . . , *9*, *l*, *n*—as they’re installed.)
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `EXTRA` prefix as a modifier. When used with a product
    source variable (such as `jupiter_SOURCES`), `EXTRA` specifies extra source files
    that are directly associated with the `jupiter` product, as shown in [Listing
    6-10](ch06.xhtml#ch06ex10).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-10: Using the `EXTRA` prefix with a product `SOURCES` variable*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, *possibly.c* may or may not be compiled, based on some condition defined
    in *configure.ac*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unit Tests: Supporting make check'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.xhtml), we added code to *src/Makefile* that executes the
    `jupiter` program and checks for the proper output string when the user makes
    the `check` target. We now have enough information to add our `check` target test
    back into our new Automake build system. I’ve duplicated the `check` target code
    in [Listing 6-11](ch06.xhtml#ch06ex11) for reference in the following discussion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-11: The `check` target from [Chapter 3](ch03.xhtml)*'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Automake has solid support for unit tests. To add our simple `grep`
    test back into the new Automake-generated build system, we can add a few lines
    to the bottom of *src/Makefile.am*, as shown in [Listing 6-12](ch06.xhtml#ch06ex12).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 6.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-12:* src/Makefile.am: *Additional code required to support the `check`
    target*'
  prefs: []
  type: TYPE_NORMAL
- en: The `check_SCRIPTS` line at ➊ is a PLV that refers to a script generated at
    build time. Since the prefix is `check`, we know that scripts listed in this line
    will only be built when the user enters `make check`. However, we must supply
    a `make` rule for building the script as well as a rule for removing the file
    later, during execution of the `clean` target. We use the `CLEANFILES` variable
    at ➌ to extend the list of files that Automake deletes during `make clean`.
  prefs: []
  type: TYPE_NORMAL
- en: The `TESTS` line at ➋ is the important one in [Listing 6-12](ch06.xhtml#ch06ex12)
    because it indicates which targets are executed when the user makes the `check`
    target. (Since the `check_SCRIPTS` variable contains a complete list of these
    targets, I simply referenced it here, as the `make` variable that it actually
    is.) Note that in this particular case, `check_SCRIPTS` is redundant, because
    Automake generates rules to ensure that all the programs listed in `TESTS` are
    built before the tests are executed. However, `check_*` PLVs become important
    when additional helper scripts or programs must be built before those listed in
    `TESTS` are executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s not necessarily obvious here, but since we added our first test, we need
    to re-execute `autoreconf -i` before running `make check` in order to add a new
    utility script: *test-driver*. You can find places in the Automake documentation
    that indicate clearly that you must do this, but it’s simpler to just let the
    build tell you when something is missing and therefore an execution of `autoreconf
    (-i)` is required. To give you a flavor for this process, let’s try it without
    running `autoreconf` first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s run `autoreconf -i` first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After running `autoreconf -i` (and noting that `test-driver` was installed into
    our project), we can see that `make check` is now successful.
  prefs: []
  type: TYPE_NORMAL
- en: Note that I didn’t have to manually invoke `configure` after running `autoreconf
    -i`. The build system is generally smart enough to know when it should re-execute
    `configure` for you.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing Complexity with Convenience Libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jupiter is fairly trivial as open source software projects go, so in order to
    highlight some more of Automake’s key features, let’s expand it a little. We’ll
    first add a convenience library and then modify `jupiter` to consume this library.
  prefs: []
  type: TYPE_NORMAL
- en: 'A *convenience library* is a static library that’s only used within the containing
    project. Such temporary libraries are generally used when multiple binaries in
    a project need to incorporate the same source code. I’ll move the code in *main.c*
    to a library source file and call the function in the library from `jupiter`’s
    `main` routine. Begin by executing the following commands from the top-level project
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 6.2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now add the highlighted text from [Listings 6-13](ch06.xhtml#ch06ex13) and [6-14](ch06.xhtml#ch06ex14)
    to the *.h* and *.c* files, respectively, in the new *common* directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-13:* common/jupcommon.h: *The initial version of this file*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-14:* common/print.c: *The initial version of this file*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, *print.c* is merely a copy of *main.c*, with a few small modifications
    (highlighted in [Listing 6-14](ch06.xhtml#ch06ex14)). First, I renamed `main`
    to `print_routine`, and then I added the inclusion of the *jupcommon.h* header
    file after the inclusion of *config.h*. The header file provides `print_routine`’s
    prototype to *src/main.c*, where it’s called from `main`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we modify *src/main.c*, as shown in [Listing 6-15](ch06.xhtml#ch06ex15),
    and then add the text in [Listing 6-16](ch06.xhtml#ch06ex16) to *common/Makefile.am*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-15:* src/main.c: *Required modifications to have `main` call into
    the new library*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*It may seem odd to include* config.h *at the top of* src/main.c *since nothing
    in that source file appears to use it. The* GCS *recommends following the standard
    practice of including* config.h *at the top of all source files, before any other
    inclusions, in case something in one of the other included header files makes
    use of definitions in* config.h. *I recommend religiously following this practice*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-16:* common/Makefile.am: *Initial version of this file*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s examine this new *Makefile.am* file. The first line indicates which products
    this file should build and install. The `noinst` prefix indicates that this library
    is designed solely to make using the source code in the *common* directory more
    convenient.
  prefs: []
  type: TYPE_NORMAL
- en: We’re creating a static library called *libjupcommon.a*, also known as an *archive*.
    Archives are like *.tar* files that only contain object files (*.o*). They can’t
    be executed or loaded into a process address space like shared libraries, but
    they can be added to a linker command line like object files. Linkers are smart
    enough to realize that such archives are merely groups of object files.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Linkers add to the binary product every object file specified explicitly on
    the command line, but they only extract from archives those object files that
    are actually referenced in the code being linked. Therefore, if you link to a
    static library containing 97 object files, but you only call functions in two
    of them directly or indirectly, only those two object files are added to your
    program. In contrast, linking to 97 raw object files adds all 97 of those files
    to your program, regardless of whether you use any of their functionality*.'
  prefs: []
  type: TYPE_NORMAL
- en: The second line in [Listing 6-16](ch06.xhtml#ch06ex16) is a product source variable
    that contains the list of source files associated with this library.^([11](footnote.xhtml#ch06fn11))
  prefs: []
  type: TYPE_NORMAL
- en: '*Product Option Variables*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we need to add some additional information to *src/Makefile.am* so that
    the generated *Makefile* can find the new library and header file we added to
    the *common* directory. Let’s add two more lines to the existing *Makefile.am*
    file, as shown in [Listing 6-17](ch06.xhtml#ch06ex17).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-17:* src/Makefile.am: *Adding compiler and linker directives to*
    Makefile.am *files*'
  prefs: []
  type: TYPE_NORMAL
- en: Like the `jupiter_SOURCES` variable, these two new variables are derived from
    the program name. These *product option variables (POVs)* are used to specify
    product-specific options to tools that are used to build products from source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The `jupiter_CPPFLAGS` variable at ➊ adds product-specific C-preprocessor flags
    to the compiler command line for all source files that are compiled for the `jupiter`
    program. The `-I$(top_srcdir)/common` directive tells the C preprocessor to add
    `$(top_srcdir)`*/common* to its list of locations in which to look for header
    file references.^([12](footnote.xhtml#ch06fn12))
  prefs: []
  type: TYPE_NORMAL
- en: The `jupiter_LDADD` variable at ➋ adds libraries to the `jupiter` program’s
    linker command line. The file path *../common/libjupcommon.a* merely adds an object
    to the linker command line so that code in this library can become part of the
    final program.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can also use *`$(top_builddir)`*/ in place of ../ to reference the location
    of the* common *directory in this path. Using *`$(top_builddir)`* has the added
    advantage of making it simpler to move this* Makefile.am *file to another location
    without having to modify it*.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a library to a *`program`*`_LDADD` or *`library`*`_LIBADD` variable is
    only necessary for libraries that are built as part of your own package. If you’re
    linking your program with a library that’s already installed on the user’s system,
    a call to `AC_CHECK_LIB` or `AC_SEARCH_LIBS` in *configure.ac* will cause the
    generated `configure` script to add an appropriate reference to the linker command
    line via the `LIBS` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The set of POVs supported by Automake are derived mostly from a subset of the
    standard user variables listed in [Table 3-2](ch03.xhtml#ch03tab2) on [page 71](ch03.xhtml#page_71).
    You’ll find a complete list of program and library option variables in the *GNU
    Autoconf Manual*, but here are some of the important ones.
  prefs: []
  type: TYPE_NORMAL
- en: product_CPPFLAGS
  prefs: []
  type: TYPE_NORMAL
- en: Use *`product`*`_CPPFLAGS` to pass flags to the C or C++ preprocessor on the
    compiler command line.
  prefs: []
  type: TYPE_NORMAL
- en: product_CFLAGS
  prefs: []
  type: TYPE_NORMAL
- en: Use *`product`*`_CFLAGS` to pass C-compiler flags on the compiler command line.
  prefs: []
  type: TYPE_NORMAL
- en: product_CXXFLAGS
  prefs: []
  type: TYPE_NORMAL
- en: Use *`product`*`_CXXFLAGS` to pass C++-compiler flags on the compiler command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: product_LDFLAGS
  prefs: []
  type: TYPE_NORMAL
- en: Use *`product`*`_LDFLAGS` to pass global and order-independent shared library
    and program linker configuration flags and options to the linker, including `-static`,
    `-version-info`, `-release`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: program_LDADD
  prefs: []
  type: TYPE_NORMAL
- en: Use *`program`*`_LDADD` to add Libtool objects (*.lo*) or libraries (*.la*)
    or non-Libtool objects (*.o*) or archives (*.a*) to the linker command line when
    linking a program.^([13](footnote.xhtml#ch06fn13))
  prefs: []
  type: TYPE_NORMAL
- en: library_LIBADD
  prefs: []
  type: TYPE_NORMAL
- en: Use *`library`*`_LIBADD` to add non-Libtool linker objects and archives to non-Libtool
    archives on the `ar` utility command line. The `ar` utility will incorporate archives
    mentioned on the command line into the product archive, so you can use this variable
    to gather multiple archives together into one.
  prefs: []
  type: TYPE_NORMAL
- en: ltlibrary_LIBADD
  prefs: []
  type: TYPE_NORMAL
- en: Use *`ltlibrary`*`_LIBADD` to add Libtool linker objects (*.lo*) and Libtool
    static or shared libraries (*.la*) to a Libtool static or shared library.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the last three option variables in this list to pass lists of order-dependent
    static and shared library references to the linker. You can also use these option
    variables to pass `-L` and `-l` options. The following are acceptable formats:
    `-L`*`libpath`*, `-l`*`libname`*, `[`*`relpath`*`/]`*`archive`*`.a`, `[`*`relpath`*`/]`*`objfile`*`.$(OBJEXT)`,
    `[`*`relpath`*`/]`*`ltobject`*`.lo` , and `[`*`relpath`*`/]`*`ltarchive`*`.la`.
    (Note that the term *`relpath`* indicates a relative path within the project,
    which can be in terms of either relative directory references, using dots, or
    `$(top_builddir)`.)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Per-Makefile Option Variables*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll often see the Automake variables `AM_CPPFLAGS` and `AM_LDFLAGS` used
    in a *Makefile.am* file. These per-makefile forms of these flags are used when
    the maintainer wants to apply the same set of flags to all products specified
    in the *Makefile.am* file.^([14](footnote.xhtml#ch06fn14)) For example, if you
    need to set a group of preprocessor flags for all products in a *Makefile.am*
    file and then add additional flags for a particular product (`prog1`), you could
    use the statements shown in [Listing 6-18](ch06.xhtml#ch06ex18).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-18: Using both per-product and per-file flags*'
  prefs: []
  type: TYPE_NORMAL
- en: The existence of a per-product variable overrides Automake’s use of the per-makefile
    variable, so you need to reference the per-makefile variable in the per-product
    variable in order to have the per-makefile variable affect that product, as shown
    in [Listing 6-18](ch06.xhtml#ch06ex18) at ➊. In order to allow per-product variables
    to override their per-makefile counterparts, it’s a good idea to reference the
    per-makefile variable first, before adding any product-specific options.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*User variables, such as *`CFLAGS`*, are reserved for the end user and should
    never be set by configuration scripts or makefiles. Automake will always append
    them to the appropriate utility command lines, thus allowing the user to override
    the options specified in the makefile*.'
  prefs: []
  type: TYPE_NORMAL
- en: Building the New Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we need to edit the `SUBDIRS` variable in the top-level *Makefile.am*
    file in order to include the new *common* directory we just added. We also need
    to add the new makefile that was generated in the *common* directory to the list
    of files generated from templates in the `AC_CONFIG_FILES` macro invocation in
    *configure.ac*. These changes are shown in [Listings 6-19](ch06.xhtml#ch06ex19)
    and [6-20](ch06.xhtml#ch06ex20).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-19:* Makefile.am: *Adding the common directory to the `SUBDIRS`
    variable*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-20:* configure.ac: *Adding* common/Makefile *to the `AC_CONFIG_FILES`
    macro*'
  prefs: []
  type: TYPE_NORMAL
- en: This is the largest set of changes we’ve made up to this point, but we’re reorganizing
    the entire application, so it seems reasonable. Let’s give our updated build system
    a try. Add the `-i` option to the `autoreconf` command line so that it will install
    any additional missing files that might be required after these enhancements.
    After so many changes, I like to start with a clean slate, so start with `make
    distclean`, or some form of the `git clean` command if you’re running from a git
    repository work area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Well, it looks like we’re not quite done yet. Since we’ve added a new type of
    entity—static libraries—to our build system, `automake` (via `autoreconf`) tells
    us at ➊ that we need to add a new macro, `AC_PROG_RANLIB`, to the *configure.ac*
    file.^([15](footnote.xhtml#ch06fn15))
  prefs: []
  type: TYPE_NORMAL
- en: Add this macro to *configure.ac*, as shown in [Listing 6-21](ch06.xhtml#ch06ex21).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-21:* configure.ac: *Adding `AC_PROG_RANLIB`*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, enter `autoreconf -i` once more. Adding `-i` ensures that, if the new
    functionality we added to *configure.ac* requires any additional files to be installed,
    `autoreconf` will do so.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: No more complaints; all is well.
  prefs: []
  type: TYPE_NORMAL
- en: What Goes into a Distribution?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automake usually determines automatically what should go into a distribution
    created with `make dist`, because it’s very aware of every file’s role in the
    build process. To this end, Automake wants to be told about every source file
    used to build a product and about every file and product installed. This means,
    of course, that all files must be specified at some point in one or more PLV and
    PSV variables.^([16](footnote.xhtml#ch06fn16))
  prefs: []
  type: TYPE_NORMAL
- en: 'The Automake `EXTRA_DIST` variable contains a space-delimited list of files
    and directories that should be added to the distribution package when the `dist`
    target is made. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You could use the `EXTRA_DIST` variable to add a source directory to the distribution
    package that Automake would not automatically add—for example, a Windows-specific
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this case*, windows *is a directory, not a file. Automake will automatically
    recursively add every file in this directory to the distribution package; this
    may include some files that you really didn’t want there, such as hidden* .svn
    *or* .CVS *status directories. See “Automake -hook and -local Rules” on [page
    389](ch14.xhtml#page_389) for a way around this problem.*'
  prefs: []
  type: TYPE_NORMAL
- en: A WORD ABOUT THE UTILITY SCRIPTS
  prefs: []
  type: TYPE_NORMAL
- en: 'The Autotools have added several files to the root of our project directory
    structure: `compile`, `depcomp`, `install-sh`, and `missing`. Because `configure`
    or the generated *Makefile*s all execute these scripts at various points during
    the build process, the end user will need them; however, we can only get them
    from the Autotools, and we don’t want to require the user to have the Autotools
    installed. For this reason, these scripts are automatically added to the distribution
    archive.'
  prefs: []
  type: TYPE_NORMAL
- en: So, do you check them in to your source code repository or not? The answer is
    debatable, but generally I recommend that you don’t. Any maintainer who will be
    creating a distribution archive should have the Autotools installed and should
    be working from a repository work area. As a result, these maintainers will also
    be running `autoreconf -i` (possibly in conjunction with the `--force` option[*](#ch06sfn1))
    to ensure that they have the most up-to-date Autotools-provided utility scripts.
    If you check them in, it will only make it more probable that they become out-of-date
    as time goes by. It will also cause unnecessary churn in your repository revision
    history as contributors ping-pong back and forth between files generated from
    the different versions of the Autotools they’re using.
  prefs: []
  type: TYPE_NORMAL
- en: I extend this sentiment to the `configure` script as well. Some people argue
    that checking the utility and `configure` scripts into the project repository
    is beneficial, because it ensures that if someone checked out a work area, they
    could build the project from the work area without having the Autotools installed.
    However, my personal philosophy is that developers and maintainers should be expected
    to have these tools installed. Occasionally, an end user will need to build a
    project from a work area, but this should be the exception rather than the typical
    case, and in these exceptional cases, the user should be willing to take on the
    role and requirements of a maintainer.
  prefs: []
  type: TYPE_NORMAL
- en: '[*](#ch06sfn_1) Use the `--force` option with caution; it will also overwrite
    text files such as *INSTALL*, which may have been modified for the project from
    the default text file that ships with the Autotools.'
  prefs: []
  type: TYPE_NORMAL
- en: Maintainer Mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Occasionally, timestamps on distribution source files will be newer than the
    current time setting of a user’s system clock. Regardless of the cause, this inconsistency
    confuses `make`, causing it to think that every source file is out-of-date and
    needs to be rebuilt. As a result, it will re-execute the Autotools in an attempt
    to bring `configure` and the *Makefile.in* templates up-to-date. But as maintainers,
    we don’t really expect our users to have the Autotools installed—or at least not
    the latest versions that we’ve installed on our systems.
  prefs: []
  type: TYPE_NORMAL
- en: This is where Automake’s *maintainer mode* comes in. By default, Automake adds
    rules to makefiles that regenerate template files, configuration scripts, and
    generated sources from maintainer source files such as *Makefile.am* and *configure.ac*,
    as well as Lex and Yacc input files. However, we can use the Automake `AM_MAINTAINER_MODE`
    macro in *configure.ac* to disable the default generation of these maintainer-level
    `make` rules.
  prefs: []
  type: TYPE_NORMAL
- en: For maintainers who want these rules in place to keep their build system properly
    updated after build system changes, the `AM_MAINTAINER_MODE` macro provides a
    `configure` script command line option (`--enable-maintainer-mode`), which tells
    `configure` to generate *Makefile.in* templates that contain rules and commands
    to execute the Autotools as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Maintainers must be aware of the use of `AM_MAINTAINER_MODE` in their projects.
    They will need to use this command line option when running `configure` in order
    to generate full build systems that will properly rebuild Autotools-generated
    files when their sources are modified.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I also recommend mentioning the use of maintainer mode in the project* INSTALL
    *or* README *files so that end users are not surprised when they modify Autotools
    sources without effect.*'
  prefs: []
  type: TYPE_NORMAL
- en: Although Automake’s maintainer mode has its advantages, you should know that
    there are various arguments against using it. Most focus on the idea that `make`
    rules should never be purposely restricted, because doing so generates a build
    system that will always fail under certain circumstances. I will, however, state
    that later versions of the Autotools do a much better job of telling you what’s
    happening when a required tool is missing. In fact, this is exactly what the `missing`
    script is for. Most tool invocations are wrapped in the `missing` script, which
    tells you fairly clearly what’s missing and how to install it when it is missing.
  prefs: []
  type: TYPE_NORMAL
- en: Another important consideration when using this macro is that you’ve now doubled
    the rows in your test matrix, as every build option has two modes—one that assumes
    the Autotools are installed and one that assumes the opposite. If you decide to
    use the macro to disable maintainer mode by default for your end users, keep these
    points in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Cutting Through the Noise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The amount of noise generated by Autotools-based build systems has been one
    of the most controversial topics on the Automake mailing list. One camp appreciates
    quiet builds that just display important information, such as warnings and errors.
    The other side argues that valuable information is often embedded in this so-called
    “noise,” so all of it is important and should be displayed. Occasionally, a new
    Autotools developer will post a question about how to reduce the amount of information
    displayed by `make`. This almost always spawns a heated debate that lasts for
    several days over a few dozen email messages. The old-timers just laugh about
    it and often joke about how “someone has turned on the switch again.”
  prefs: []
  type: TYPE_NORMAL
- en: The truth of the matter is that both sides have valid points. The GNU project
    is all about options, so the Automake maintainers have added the ability to allow
    you to optionally make silent rules available to your users. *Silent rules* in
    Automake makefiles are not really silent; they’re just somewhat less noisy than
    traditional Automake-generated rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of displaying the entire compiler or linker command line, silent rules
    display a short line indicating the tool and the name of the file being processed
    by that tool. Output generated by `make` is still displayed so the user knows
    which directory and target are currently being processed. Here is Jupiter’s build
    output, with silent rules enabled (execute `make clean` first to ensure something
    actually gets built):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the use of silent rules doesn’t make a lot of difference for
    Jupiter—Jupiter’s build system spends a lot of time moving between directories
    and very little time actually building things. But in projects with hundreds of
    source files, you’d see long lists of `CC` *`filename`*`.o` lines, with an occasional
    indication that `make` is changing directories or the linker is building a product—compiler
    warnings tend to jump out at you. For instance, the `ar` warning in the output
    would have flown by unnoticed without silent rules.^([17](footnote.xhtml#ch06fn17))
  prefs: []
  type: TYPE_NORMAL
- en: Silent rules are disabled by default. To enable silent rules by default in Automake-generated
    *Makefile.am* templates, you may call the `AM_SILENT_RULES` macro in *configure.ac*
    with a `yes` argument.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, the user may always set the default verbosity for a build with
    `--enable-silent-rules` or `--disable-silent-rules` on the `configure` command
    line. The build will then either be “silent” or normal based on the configured
    default and on whether the user specifies `V=0` or `V=1` on the `make` command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Neither *`configure`* option is required—the actual invocation of silent rules
    is ultimately controlled by the *`V`* variable in the generated makefile. The*
    configure *option merely sets the default value of *`V`*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'For smaller projects, I find Automake’s silent rules to be less useful than
    simply redirecting `stdout` to */dev/null* on the `make` command line, in this
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As this example shows, warnings and errors are still displayed on `stderr`,
    usually with enough information for you to determine where the problem is located
    (though not in this case). Warning-free builds are truly silent in this case.
    You should use this technique to clean up compiler warnings in your source code
    every so often. Silent rules can help because warnings stand out in the build
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Nonrecursive Automake
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we’ve changed our handwritten *Makefile.in* templates over to Automake
    *Makefile.am* files, let’s take a look at the process of converting this recursive
    build system to a nonrecursive build system. In previous chapters, we saw that
    using `make`’s `include` directive can be helpful in dividing makefiles into areas
    of responsibility relegated to the subdirectories in which they reside. With Automake,
    however, it’s just simpler to put everything in a top-level *Makefile.am* file
    because the content is so short that we can easily comprehend the entire build
    system at a glance. If further division of responsibility is required, a simple
    comment suffices.
  prefs: []
  type: TYPE_NORMAL
- en: The key here, as in our previous incarnations, is to reference the content as
    if `make` were running from the top-level directory (which—again—it is).
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 6-22](ch06.xhtml#ch06ex22) contains the entire contents of the top-level
    *Makefile.am* file—the only makefile we’ll use in this conversion.'
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 6.3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-22:* Makefile.am: *A nonrecursive Automake implementation for Jupiter*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see here, I’ve replaced the `SUBDIRS` variable in the top-level *Makefile.am*
    file with the full contents of the *Makefile.am* files in each of the directories
    referenced by this variable. I then added appropriate relative path information
    to each input object and product reference so that source files are accessed from
    the top-level directory, where they actually reside in their respective subdirectories,
    and so that products end up where they belong—with their source input files (or
    at least in their proper counterpart directories when not building in the source
    tree). I’ve highlighted the changes to each of the subdirectory *Makefile.am*
    files that I pasted into the top-level file.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `common_` or `src_` was prepended to the product source variables
    because these prefixes are literally part of the product names now. Ultimately,
    these names are used to create `make` targets, which are defined as much by their
    location as their name. Usually, the location is the current directory, so the
    directory portions are silently omitted. For our nonrecursive builds, products
    are now generated into locations other than the current directory, so they must
    be stated explicitly. As with any other special characters in the product name,
    the directory-separating slashes become underscores in PSVs.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to add an Automake option and remove the extra *Makefile* references
    from *configure.ac*, as shown in [Listing 6-23](ch06.xhtml#ch06ex23).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 6-23:* configure.ac: *Removing extra makefile references for nonrecursive
    builds*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Automake `subdir-objects` option is necessary to tell Automake that you
    intend to access source files from directories other than those in which they
    reside. It’s also needed to state that you want the objects and other intermediate
    products to be generated into the same directory as the source file (or in proper
    out-of-tree build counterpart directories). This option is not required just for
    nonrecursive builds but for any situation in which you may need to build one or
    more source files outside of their own directories. If you omit this option, the
    build will often still work, but you’ll see two effects: warnings will be generated
    by `autoreconf` (or `automake`) indicating that you should probably use the option,
    and object files will be left lying in the wrong directories. The latter is only
    a problem if you happen to have more than one instance of a source file with the
    same name in different directories, in which case the second object file will
    overwrite the first, which will most probably result in a linker error when it’s
    not able to find the symbols from the now-overwritten first object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can simply delete the *common* and *src* directories’ *Makefile.am*
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we’ve discussed how to instrument a project for Automake using
    a project that had already been instrumented for Autoconf. (Newer projects are
    typically instrumented for both Autoconf and Automake at the same time.)
  prefs: []
  type: TYPE_NORMAL
- en: We covered the use of the `SUBDIRS` variable to tie *Makefile.am* files together,
    as well as the concepts surrounding product list, product source, and product
    option variables. Along with product list variables, I discussed Automake primaries—a
    concept at the very heart of Automake. Finally, I discussed the use of `EXTRA_DIST`
    to add additional files to distribution packages, the `AM_MAINTAINER_MODE` macro
    to ensure that users don’t need to have the Autotools installed, converting to
    a nonrecursive Automake build system, and the use of Automake silent rules.
  prefs: []
  type: TYPE_NORMAL
- en: Through all of this, we replaced our handwritten *Makefile.in* templates with
    short, concise *Makefile.am* files that provide significantly more functionality.
    I hope this exercise has begun to open your eyes to the benefits of using Automake
    rather than handwritten makefiles.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapters 7](ch07.xhtml) and [8](ch08.xhtml), we’ll examine adding Libtool
    to the Jupiter project. In [Chapter 9](ch09.xhtml), we’ll finish up our introduction
    to the Autotools proper by diving into the Autoconf’s portable testing framework—autotest.
    Then, in [Chapters 10](ch10.xhtml) through [13](ch13.xhtml), we’ll take a short
    break from the Autotools to tackle some important sideline topics, but we’ll return
    in [Chapters 14](ch14.xhtml) and [15](ch15.xhtml), where we’ll “Autotool-ize”
    a real-world project as we explore several other important aspects of Automake.
  prefs: []
  type: TYPE_NORMAL
