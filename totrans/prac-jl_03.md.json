["```\njulia> 2^3\n8\n\njulia> 2^0.5\n1.4142135623730951\n\njulia> 2^-1\n0.5\n\njulia> (1 + im)^2\n0 + 2im\n\njulia> (1 + im)^(1 + im)\n0.2739572538301211 + 0.5837007587586147im\n\njulia> 0^-1\nInf\n\njulia> (0//1)^-1\n1//0\n```", "```\njulia> 1/(1//0)\n0//1\n\njulia> 1.0/(1//0)\n0.0\n```", "```\njulia> 1; 2; 5+3\n8\n```", "```\nr = (1; 2; 5+3)\n```", "```\njulia> w = 2\n2\n\njulia> 2w\n4\n\njulia> 2^2w\n16\n\njulia> 2^2*w\n8\n\njulia> 1/2w\n0.25\n\njulia> 1/2*w\n1.0\n```", "```\njulia> begin\n           1\n           2\n           5 + 3\n       end\n8\n\njulia>\n```", "```\njulia> eight = begin\n           1\n           2\n           5 + 3\n       end\n8\n\njulia> eight\n8\n```", "```\njulia> j = 0;\n\njulia> while j < 5\n           println(j^2)\n           j = j + 1\n       end\n0\n1\n4\n9\n16\n```", "```\nif n % 2 === 0\n    \"That number is even.\"\nelseif n % 2 === 1\n    \"That number is odd.\"\nelse\n    \"I only deal with integers.\"\nend\n```", "```\njulia> [1, 2, 3]\n3-element Vector{Int64}:\n 1\n 2\n 3\n```", "```\njulia> a = [4, 5.0, 6]\n3-element Vector{Float64}:\n 4.0\n 5.0\n 6.0\n```", "```\njulia> a = [4, [5.0, 6], 7]\n3-element Vector{Any}:\n 4\n  [5.0, 6.0]\n 7\n```", "```\njulia> a[1]\n4\n\njulia> a[end]\n7\n\njulia> a[2]\n2-element Vector{Float64}:\n 5.0\n 6.0\n\njulia> a[2][2]\n6.0\n```", "```\njulia> collect(1:5)\n5-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 5\njulia> [collect(1:2:10), collect(2.5:-0.5:0)]\n2-element Vector{Vector{Float64}}:\n [1.0, 3.0, 5.0, 7.0, 9.0]\n [2.5, 2.0, 1.5, 1.0, 0.5, 0.0]\n```", "```\njulia> v = collect(0:5:20)\n5-element Vector{Int64}:\n  0\n  5\n 10\n 15\n 20\n\njulia> v[2:4]\n3-element Vector{Int64}:\n  5\n 10\n 15\n\njulia> v[end:-2:1]\n3-element Vector{Int64}:\n 20\n 10\n  0\n```", "```\njulia> m = [5 6\n            7 8]\n2×2 Matrix{Int64}:\n 5  6\n 7  8\n```", "```\njulia> (1 + 1\n          + 1\n       )\n3\n```", "```\njulia> v = [[5, 6], [7, 8]]\n2-element Vector{Vector{Int64}}:\n [5, 6]\n [7, 8]\n```", "```\njulia> v[1]\n2-element Vector{Int64}:\n 5\n 6\n```", "```\njulia> v[1][2]\n6\n```", "```\njulia> v[2][:]\n2-element Vector{Int64}:\n 7\n 8\n```", "```\njulia> m[1, 1]\n5\n```", "```\njulia> m[2, :]\n2-element Vector{Int64}:\n 7\n 8\n```", "```\njulia> m[1, 2, 3]\nERROR: BoundsError: attempt to access 2×2 Matrix{Int64} at index [1, 2, 3]\n```", "```\njulia> m[1]\n5\n\njulia> m[2]\n7\n\njulia> m[3]\n6\n\njulia> m[4]\n8\n```", "```\n   julia> m = [11 12 13 14\n               15 16 17 18\n               19 20 21 22];\n\n➊ julia> m[2, [2, 3]]\n   2-element Vector{Int64}:\n    16\n    17\n\n   julia> m[[1, 2], [3, 4]]\n   2×2 Matrix{Int64}:\n    13  14\n    17  18\n```", "```\nArray[rows, columns, third_dimension, fourth_dimension]\n```", "```\nArray[Array]\n```", "```\njulia> m[[2 3\n          4 5]]\n2×2 Matrix{Int64}:\n 15  19\n 12  16\n\njulia> m[[end 1 9\n          9   1 end]]\n2×3 Matrix{Int64}:\n 22  11  21\n 21  11  22\n```", "```\njulia> m1 = [6 7\n             8 9];\n\njulia> m2 = [6 7; 8 9];\n\njulia> m1 == m2\ntrue\n```", "```\njulia> [[6 7]; [8 9]]\n2×2 Matrix{Int64}:\n 6  7\n 8  9\n```", "```\njulia> [[6 7] [8 9]]\n1×4 Matrix{Int64}:\n 6  7  8  9\n```", "```\njulia> [[6, 7] [8, 9]]\n2×2 Matrix{Int64}:\n 6  8\n 7  9\n```", "```\njulia> [[6, 7]; [8, 9]]\n4-element Vector{Int64}:\n 6\n 7\n 8\n 9\n```", "```\n   julia> tup1 = (5, 6)\n   (5, 6)\n\n   julia> tup2 = 5, 6\n   (5, 6)\n\n   julia> tup1 === tup2\n   true\n\n➊ julia> tup1[1]\n   5\n\n➋ julia> tup1[1] = 9\n   ERROR: MethodError: no method matching [...]\n```", "```\n   julia> 2 ∈ [1, 2, 3]\n   true\n\n   julia> 2 ∉ [1, 2, 3]\n   false\n\n➊ julia> 2 ∈ [1, 2.0, 3]\n   true\n\n➋ julia> [2, 3] ∈ [2, 3, 4]\n   false\n\n➌ julia> [2, 3] ∈ [[2, 3], 4]\n   true\n```", "```\njulia> n = \"François\"\n\"François\"\n\njulia> length(n)\n8\n\njulia> n[end]\n's': ASCII/Unicode U+0073 (category Ll: Letter, lowercase)\n\njulia> n[1]\n'F': ASCII/Unicode U+0046 (category Lu: Letter, uppercase)\n\njulia> n[5]\n'ç': Unicode U+00E7 (category Ll: Letter, lowercase)\n\njulia> n[6]\nERROR: StringIndexError: invalid index [6], valid nearby indices [5]=>'ç', [7]=>'o'\n```", "```\njulia> ls = \"\"\"\n       Line one.\n       Line two \"with a quoted section\"!\n       We're done.\n       \"\"\"\n\"Line one.\\nLine two \\\"with a quoted section\\\"!\\nWe're done.\\n\"\n\njulia> print(ls)\nLine one.\nLine two \"with a quoted section\"!\nWe're done.\n```", "```\njulia> for j in 0:4\n           println(j^2)\n       end\n0\n1\n4\n9\n16\n```", "```\njulia> for q in 8:-2:1\n           println(1/q)\n       end\n0.125\n0.16666666666666666\n0.25\n0.5\n```", "```\njulia> for i ∈ 0:3, j ∈ 4:6\n           println([i, j, i + j])\n       end\n[0, 4, 4]\n[0, 5, 5]\n[0, 6, 6]\n[1, 4, 5]\n[1, 5, 6]\n[1, 6, 7]\n[2, 4, 6]\n[2, 5, 7]\n[2, 6, 8]\n[3, 4, 7]\n[3, 5, 8]\n[3, 6, 9]\n```", "```\njulia> for x in [-19 23 0]\n           println(abs(x))\n       end\n19\n23\n0\n```", "```\njulia> for x in [[-19 23 0]; [-1 22 -17]]\n           println(abs(x))\n       end\n19\n1\n23\n22\n0\n17\n```", "```\njulia> for c ∈ \"François\"\n           print(c * \" • \")\n       end\nF • r • a • n • ç • o • i • s •\n```", "```\njulia> function double(x)\n           2x\n       end\ndouble (generic function with 1 method)\n```", "```\ndouble(x) = 2x\n```", "```\njulia> function length3d(x, y, z)\n           sqrt(x^2 + y^2 + z^2)\n       end\nlength3d (generic function with 1 method)\n\njulia> length3d(1, 1, 1)\n1.7320508075688772\n```", "```\njulia> function length3d(x, y, z)\n           if x < 0 || y < 0 || z < 0\n               return \"I only work with positive coordinates.\"\n           end\n           sqrt(x^2 + y^2 + z^2)\n       end\nlength3d (generic function with 1 method)\n```", "```\njulia> length3d(1, 1, 1)\n1.7320508075688772\n```", "```\njulia> length3d(1, 1, -1)\n\"I only work with positive coordinates.\"\n```", "```\njulia> function tellme(f, x)\n           print(\"The result is \")\n           f(x)\n       end\ntellme (generic function with 1 method)\n```", "```\njulia> double(double(3))\n12\n\njulia> (double ○ double)(3)\n12\n\njulia> 3 |> double |> double\n12\n```", "```\njulia> f(x) = 2x\nf (generic function with 1 method)\n\njulia> f.([1, 2, 3])\n3-element Vector{Int64}:\n 2\n 4\n 6\n```", "```\ns = 0\nfunction glos()\n    s = s + 1\nend\n\nglos()\n```", "```\ns = 0\nfunction glos()\n    print(s)\nend\n\nglos()\n```", "```\ns = 0\nfunction glos()\n    global s = s + 1\n    print(s)\nend\n\nglos()\n```", "```\nfunction outer()\n ➊ s = 0\n    function glos()\n     ➋ s = s + 1\n    end\n    glos()\n    print(s)\nend\n\nouter()\n```", "```\njulia> [1] === [1]\nfalse\n```", "```\n   julia> a = [1]\n   1-element Vector{Int64}:\n    1\n\n   julia> b = a\n   1-element Vector{Int64}:\n    1\n\n➊ julia> b[1] = 7\n    7\n\n➋ julia> a\n   1-element Vector{Int64}:\n    7\n\n   julia> b === a\n   true\n```", "```\njulia> a = 1\n1\n\njulia> b = a\n1\n\njulia> b = 7\n7\n\njulia> a\n1\n```", "```\njulia> s = \"abc\"\n\"abc\"\n\njulia> s[1:2]\n\"ab\"\n\njulia> s[3] = 'Z'\nERROR: MethodError: no method matching setindex!(::String, ::Char, ::Int64)\n```", "```\njulia> function string_decorator(s)\n           decorated = \"\"\n           for char in s\n               decorated = decorated * char * \" • \"\n           end\n           decorated[1:end-5]\n       end\nstring_decorator (generic function with 1 method)\n\njulia> string_decorator(\"Julia\")\n\"J • u • l • i • a\"\n```", "```\njulia> function better_string_decorator(s)\n           a = String[]\n           for char in s\n               push!(a, char * \" • \")\n           end\n           join(a)[1:end-5]\n       end\nbetter_string_decorator (generic function with 1 method)\n\njulia> better_string_decorator(\"PARTY!\")\n\"P • A • R • T • Y • !\"\n```", "```\njulia> split(\"a     b c\")\n3-element Vector{SubString{String}}:\n \"a\"\n \"b\"\n \"c\"\n\njulia> split(\"a||b||c\", \"||\")\n3-element Vector{SubString{String}}:\n \"a\"\n \"b\"\n \"c\"\n```"]