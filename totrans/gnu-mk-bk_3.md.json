["```\nall: foo.o bar.o\n\nfoo.o: foo.c\n→ $(COMPILE.C) -DDEBUG=$(DEBUG) -o $@ $<\n\nbar.o: bar.c\n→ $(COMPILE.C) -o $@ $<\n```", "```\n$ **make**\ng++  -c -DDEBUG= -o foo.o foo.c\ng++  -c -o bar.o bar.c\n```", "```\n$ **make**\nmake: Nothing to be done for `all'.\n```", "```\n$ **make DEBUG=1**\nmake: Nothing to be done for `all'.\n```", "```\n**include signature**\n\nall: foo.o bar.o\n\nfoo.o: foo.c\n→ **$(call do,$$(COMPILE.C) -DDEBUG=$$(DEBUG) -o $$@ $$<)**\n\nbar.o: bar.c\n→ **$(call do,$$(COMPILE.C) -o $$@ $$<)**\n\n**-include foo.o.sig bar.o.sig**\n```", "```\n$ **make**\ng++  -c -DDEBUG= -o foo.o foo.c\ng++  -c -o bar.o bar.c\n$ **make**\nmake: Nothing to be done for `all'.\n```", "```\n$ **make DEBUG=1**\ng++  -c -DDEBUG=1 -o foo.o foo.c\n```", "```\n$ **make DEBUG=1**\nmake: Nothing to be done for `all'.\n$ **make**\ng++  -c -DDEBUG= -o foo.o foo.c\n```", "```\n$ **make CPPFLAGS+=-DFOO=foo**\ng++ -DFOO=foo -c -DDEBUG= -o foo.o foo.c\ng++ -DFOO=foo -c -o bar.o bar.c\n```", "```\n$ **make**\ng++  -c -DDEBUG= -o foo.o foo.c\ng++  -c -o bar.o bar.c\n$ **make SOMEVAR=42**\nmake: Nothing to be done for `all'.\n```", "```\n$(eval @ := foo.o)\n$(eval % := )\n$(eval < := foo.c)\n$(eval ? := foo.o.force)\n$(eval ^ := foo.c foo.o.force)\n$(eval + := foo.c foo.o.force)\n$(eval * := foo)\n\nfoo.o: foo.o.force\n\n$(if $(call sne,$(COMPILE.C) -DDEBUG=$(DEBUG) -o $@ $<,\\\ng++ -c -DDEBUG= -o foo.o foo.c),$(shell touch foo.o.force))\n```", "```\ninclude gmsl\n\nlast_target :=\n\ndump_var = \\$$(eval $1 := $($1))\n\ndefine new_rule\n@echo \"$(call map,dump_var,@ % < ? ^ + *)\" > $S\n@$(if $(wildcard $F),,touch $F)\n@echo $@: $F >> $S\nendef\ndefine do\n$(eval S := $@.sig)$(eval F := $@.force)$(eval C := $(strip $1))\n$(if $(call sne,$@,$(last_target)),$(call new_rule),$(eval last_target := $@))\n@echo \"S(subst \",\\\",$(subst $$,\\$$,$$(if $$(call sne,$(strip $1),$C),$$(shell touch $F))))\" >> $S\n$C\nendef\n```", "```\n@echo $F: Makefile >> $S\n```", "```\n.PHONY: all\nall: foo.o\n\nfoo.o: foo.c foo.h\n```", "```\nto-md5 = $1 $(addsuffix .md5,$1)\n\n.PHONY: all\nall: foo.o\n\nfoo.o: $(call to-md5,foo.c foo.h)\n\n%.md5: FORCE\n→ @$(if $(filter-out $(shell cat $@ 2>/dev/null),$(shell md5sum $*)),md5sum $* > $@)\n\nFORCE:\n```", "```\nfoo.o: foo.c foo.h foo.c.md5 foo.h.md5.\n```", "```\n$ **touch foo.c foo.h**\n$ **ls**\nfoo.c foo.h makefile\n$ **make**\ncc -c -o foo.o foo.c\n$ **ls**\nfoo.c foo.c.md5 foo.h foo.h.md5 foo.o makefile\n```", "```\n$ **cat foo.c.md5**\nd41d8cd98f00b204e9800998ecf8427e foo.c\n```", "```\n$ **make**\nmake: Nothing to be done for `all'.\n$ **touch foo.c**\n$ **make**\ncc  -c -o foo.o foo.c\n$ **make**\nmake: Nothing to be done for `all'.\n$ **touch foo.h**\n$ **make**\ncc -c -o foo.o foo.c\n```", "```\n$ **make**\nmake: Nothing to be done for `all'.\n$ **cat foo.h.md5**\nd41d8cd98f00b204e9800998ecf8427e foo.h\n$ **cat >> foo.h**\n// Add a comment\n$ **touch foo.o**\n$ **make**\ncc  -c -o foo.o foo.c\n$ **cat foo.h.md5**\n65f8deea3518fcb38fd2371287729332 foo.h\n```", "```\n%.md5: FORCE\n→ @$(eval CHECKSUM := $(shell md5sum $*))$(if $(filter-out \\\n$(shell cat $@ 2>/dev/null),$(CHECKSUM)),echo $(CHECKSUM) > $@)\n```", "```\nfoo.o: foo.c\n4 @compile -o $@ $<\n\nfoo.o: myheader.h string.h\n```", "```\nfoo.o: foo.c header.h system.h\n→ @echo Compiling $@ from $<...\n```", "```\n$ **make**\nCompiling foo.o from foo.c...\n```", "```\nfoo.o: foo.c\nfoo.o: header.h system.h\n→ @echo Compiling $@ from $<...\n```", "```\n$ **make**\nCompiling foo.o from header.h...\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nfoo.o: foo.c foo.h common.h header.h\nbar.o: bar.c bar.h common.h header.h ba.h\nbaz.o: baz.c baz.h common.h header.h ba.h\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nSRCS = foo.c bar.c baz.c\n\nDEPENDS = dependencies.d\n.PHONY: depend\ndepend:\n→ @makedepend -f - $(SRCS) > $(DEPENDS)\n\n-include $(DEPENDS)\n```", "```\n# DO NOT DELETE\n\nfoo.o: foo.h header.h common.h\nbar.o: bar.h header.h common.h ba.h\nbaz.o: baz.h header.h common.h ba.h\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nSRCS = foo.c bar.c baz.c\n\n%.d : %.c\n→ @makedepend -f - $< | sed 's,\\($*\\.o\\)[ :]*,\\1 $@ : ,g' > $@\n\n-include $(SRCS:.c=.d)\n```", "```\n# DO NOT DELETE\n\nfoo.o foo.d : foo.h header.h common.h\n```", "```\n$ **make**\nNo rule to make target `header.h', needed by `foo.d'.\n```", "```\n# DO NOT DELETE\n\nfoo.d : $(wildcard foo.h header.h common.h)\nfoo.o : foo.h header.h common.h\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nSRCS = foo.c bar.c baz.c\n\n%.d : %.c\n→ @makedepend -f - $< | sed 's,\\($*\\.o\\)[ :]*\\(.*\\),$@ : $$\\(wildcard \\2\\)\\n\\1 : \\2,g' > $@\n\n-include $(SRCS:.c=.d)\n```", "```\nfoo.d : foo.h common.h\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nSRCS = foo.c bar.c baz.c\n\n%.o : %.c\n→ @makedepend -f - $< | sed 's,\\($*\\.o\\)[ :]*\\(.*\\),$@ : $$\\(wildcard \\2\\)\\n\\1 : \\2,g' > $*.d\n→ @$(COMPILE.c) -o $@ $<\n\n-include $(SRCS:.c=.d)\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nSRCS = foo.c bar.c baz.c\n\n%.o : %.c\n→ @$(COMPILE.c) -MD -o $@ $<\n→ @sed -i 's,\\($*\\.o\\)[ :]*\\(.*\\),$@ : $$\\(wildcard \\2\\)\\n\\1 : \\2,g' $*.d\n\n-include $(SRCS:.c=.d)\n```", "```\n.PHONY: all\nall: foo.o bar.o baz.o\n\nSRCS = foo.c bar.c baz.c\n\n%.o : %.c\n→ @$(COMPILE.c) -MP -o $@ $<\n\n-include $(SRCS:.c=.d)\n```", "```\nfoo.o : foo.h header.h common.h \nfoo.h :\nheader.h :\ncommon.h :\n```", "```\na: b c\n→ @command\n```", "```\n.PHONY: all\nall: a b\n\na b: c d\n→ touch a b\n```", "```\n$ **make**\ntouch a b\ntouch a b\n```", "```\n.PHONY: all\nall: a b\n\na: c d\n→ touch a b\n\nb: c d\n→ touch a b\n```", "```\n%.foo %.bar %.baz:\n→ command\n```", "```\n.PHONY: all\nall: a.foo a.bar a.baz\n\n%.foo %.bar %.baz:\n→ command\n```", "```\n.PHONY: all\nall: a.foo\n\n%.foo %.bar %.baz:\n→ command\n```", "```\n$(OUT)/%.lib $(OUT)/%.dll: $(VERSION_RESOURCE)\n→ link /nologo /dll /fixed:no /incremental:no  \\\n   /map:'$(call to_dos,$(basename $@).map)'    \\\n   /out:'$(call to_dos,$(basename $@).dll)'    \\\n   /implib:'$(call to_dos,$(basename $@).lib)' \\\n        $(LOADLIBES) $(LDLIBS)                 \\\n   /pdb:'$(basename $@).pdb'                   \\\n   /machine:x86                                \\\n   $^\n```", "```\n.PHONY: all\nall: a b\n\na b: .sentinel\n→ @:\n\n.sentinel: c d\n→ touch a b\n→ touch .sentinel\n```", "```\nsp :=\nsp +=\nsentinel = .sentinel.$(subst $(sp),_,$(subst /,_,$1))\natomic = $(eval $1: $(call sentinel,$1) ; @:)$(call sentinel,$1): $2 ; touch $$@\n\n.PHONY: all\nall: a b\n\n$(call atomic,a b,c d)\n→ touch a b\n```", "```\n.PHONY: all\nall: a b\n\na b: .sentinel.a_b ; @:\n\n.sentinel.a_b: c d ; touch $@\n→ touch a b\n```", "```\nsp :=\nsp +=\nsentinel = .sentinel.$(subst $(sp),_,$(subst /,_,$1))\natomic = $(eval $1: $(call sentinel,$1) ; @:)$(call sentinel,$1):  \\\n$2 ; touch $$@ $(foreach t,$1,$(if $(wildcard $t),,$(shell rm -f   \\\n$(call sentinel,$1))))\n\n.PHONY: all\nall: a b\n\n$(call atomic,a b,c d)\n→ touch a b\n```", "```\n/src/\n/src/library/\n/src/executable/\n```", "```\n/src/library/lib1.c\n/src/library/lib2.c\n```", "```\n/src/executable/foo.c\n/src/executable/bar.c\n```", "```\nSUBDIRS = library executable\n\n.PHONY: all\nall:\n→ for dir in $(SUBDIRS); do \\\n→ $(MAKE) -C $$dir;         \\\n→ done\n```", "```\nSUBDIRS = library executable\n\n.PHONY: $(SUBDIRS)\n$(SUBDIRS):\n→ $(MAKE) -C $@\n\n.PHONY: all\nall: $(SUBDIRS)\n\nexecutable: library\n```", "```\nSUBDIRS = library executable\n\ninclude $(addsuffix /makefile,$(SUBDIRS))\n```", "```\n# /src/library/Makefile\n\ninclude root.mak\ninclude top.mak\n\nSRCS := lib1.c lib2.c\nBINARY := lib\nBINARY_EXT := $(_LIBEXT)\ninclude bottom.mak\n```", "```\n# /src/executable/Makefile\n\ninclude root.mak\ninclude top.mak\nSRCS := foo.c foo.c\nBINARY := exec\nBINARY_EXT := $(_EXEEXT)\n\ninclude bottom.mak\n```", "```\n$ **make -I /src**\n```", "```\nsp :=\nsp +=\n_walk = $(if $1,$(wildcard /$(subst $(sp),/,$1)/$2) $(call _walk,$(wordlist 2,$(words $1),x $1),$2))\n_find = $(firstword $(call _walk,$(strip $(subst /, ,$1)),$2))\n_ROOT := $(patsubst %/root.mak,%,$(call _find,$(CURDIR),root.mak))\n\ninclude $(_ROOT)/root.mak\ninclude $(_ROOT)/top.mak\n\nSRCS := lib1.c lib2.c\nBINARY := lib\nBINARY_EXT := $(_LIBEXT)\n\ninclude $(_ROOT)/bottom.mak\n```", "```\n_push = $(eval _save$1 := $(MAKEFILE_LIST))\n_pop = $(eval MAKEFILE_LIST := $(_save$1))\n_INCLUDE = $(call _push,$1)$(eval include $(_ROOT)/$1/Makefile)$(call _pop,$1)\nDEPENDS_ON = $(call _INCLUDE,$1)\nDEPENDS_ON_NO_BUILD = $(eval _NO_RULES := T)$(call _INCLUDE,$1)$(eval _NO_RULES :=)\n```", "```\n_OUTTOP ?= /tmp/out\n\n.PHONY: all\nall:\n\n_MAKEFILES := $(filter %/Makefile,$(MAKEFILE_LIST))\n_INCLUDED_FROM := $(patsubst $(_ROOT)/%,%,$(if $(_MAKEFILES), \\\n$(patsubst %/Makefile,%,$(word $(words $(_MAKEFILES)),$(_MAKEFILES)))))\nifeq ($(_INCLUDED_FROM),)\n_MODULE := $(patsubst $(_ROOT)/%,%,$(CURDIR))\nelse\n_MODULE := $(_INCLUDED_FROM)\nendif\n_MODULE_PATH := $(_ROOT)/$(_MODULE)\n_MODULE_NAME := $(subst /,_,$(_MODULE))\n$(_MODULE_NAME)_OUTPUT := $(_OUTTOP)/$(_MODULE)\n\n_OBJEXT := .o\n_LIBEXT := .a\n_EXEEXT :=\n```", "```\n$(_MODULE_NAME)_OBJS := $(addsuffix $(_OBJEXT),$(addprefix \\\n$($(_MODULE_NAME)_OUTPUT)/,$(basename $(SRCS)))) $(DEPS)\n$(_MODULE_NAME)_BINARY := $($(_MODULE_NAME)_OUTPUT)/$(BINARY)$(BINARY_EXT)\n\nifneq ($(_NO_RULES),T)\nifneq ($($(_MODULE_NAME)_DEFINED),T)\nall: $($(_MODULE_NAME)_BINARY)\n\n.PHONY: $(_MODULE_NAME)\n$(_MODULE_NAME): $($(_MODULE_NAME)_BINARY)\n_IGNORE := $(shell mkdir -p $($(_MODULE_NAME)_OUTPUT))\n\n_CLEAN := clean-$(_MODULE_NAME)\n.PHONY: clean $(_CLEAN)\nclean: $(_CLEAN)\n$(_CLEAN):\n→ rm -rf $($(patsubst clean-%,%,$@)_OUTPUT)\n\n$($(_MODULE_NAME)_OUTPUT)/%.o: $(_MODULE_PATH)/%.c\n→ @$(COMPILE.c) -o '$@' '$<'\n$($(_MODULE_NAME)_OUTPUT)/$(BINARY).a: $($(_MODULE_NAME)_OBJS)\n→ @$(AR) r '$@' $^\n→ @ranlib '$@'\n$($(_MODULE_NAME)_OUTPUT)/$(BINARY)$(_EXEEXT): $($(_MODULE_NAME)_OBJS)\n→ @$(LINK.cpp) $^ -o'$@'\n\n$(_MODULE_NAME)_DEFINED := T\nendif\nendif\n```", "```\nsp :=\nsp +=\n_walk = $(if $1,$(wildcard /$(subst $(sp),/,$1)/$2) $(call _walk,$(wordlist 2,$(words $1),x $1),$2))\n_find = $(firstword $(call _walk,$(strip $(subst /, ,$1)),$2))\n_ROOT := $(patsubst %/root.mak,%,$(call _find,$(CURDIR),root.mak))\n\ninclude $(_ROOT)/root.mak\n\n$(call DEPENDS_ON,library)\n\ninclude $(_ROOT)/top.mak\n\nSRCS := foo.c bar.c\nBINARY := exec\nBINARY_EXT := $(_EXEEXT)\nDEPS := $(library_BINARY)\n\ninclude $(_ROOT)/bottom.mak\n```", "```\n$ **cd /src**\n$ **make -n**\ncc  -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc  -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\ncc  -c -o '/tmp/out/executable/foo.o' '/home/jgc/doc/nonrecursive/executable/foo.c'\ncc  -c -o '/tmp/out/executable/bar.o' '/home/jgc/doc/nonrecursive/executable/bar.c'\ng++ /tmp/out/executable/foo.o /tmp/out/executable/bar.o /tmp/out/library/lib.a -o'/tmp/out/\nexecutable/exec'\n```", "```\n$ **cd /src**\n$ **make -n clean**\nrm -rf /tmp/out/library\nrm -rf /tmp/out/executable\n```", "```\n$ **cd /src**\n$ **make -n clean-library**\nrm -rf /tmp/out/library\n$ **make -n library**\ncc  -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc  -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\n```", "```\n$ **cd /src**\n$ **make -n executable**\ncc -c -o '/tmp/out/executable/foo.o' '/home/jgc/doc/nonrecursive/executable/foo.c'\ncc -c -o '/tmp/out/executable/bar.o' '/home/jgc/doc/nonrecursive/executable/bar.c'\ncc -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\ng++ /tmp/out/executable/foo.o /tmp/out/executable/bar.o /tmp/out/library/lib.a -o'/tmp/out/\nexecutable/exec'\n```", "```\n$ **cd /src/library**\n$ **make -n clean**\nrm -rf /tmp/out/library\n$ **make -n**\ncc  -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc  -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\n```", "```\n$ **cd /src/executable**\n$ **make -n**\ncc  -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc  -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\ncc  -c -o '/tmp/out/executable/foo.o' '/home/jgc/doc/nonrecursive/executable/foo.c'\ncc  -c -o '/tmp/out/executable/bar.o' '/home/jgc/doc/nonrecursive/executable/bar.c'\ng++   /tmp/out/executable/foo.o /tmp/out/executable/bar.o /tmp/out/library/lib.a -o'/tmp/out/\nexecutable/exec'\n```", "```\n/src/\n/src/library/\n/src/library/sublibrary\n/src/executable/\n```", "```\nsp :=\nsp +=\n_walk = $(if $1,$(wildcard /$(subst $(sp),/,$1)/$2) $(call _walk,$(wordlist 2,$(words $1),x $1),$2))\n_find = $(firstword $(call _walk,$(strip $(subst /, ,$1)),$2))\n_ROOT := $(patsubst %/root.mak,%,$(call _find,$(CURDIR),root.mak))\n\ninclude $(_ROOT)/root.mak\ninclude $(_ROOT)/top.mak\n\nSRCS := slib1.c slib2.c\nBINARY := slib\nBINARY_EXT := $(_LIBEXT)\n\ninclude $(_ROOT)/bottom.mak\n```", "```\nsp :=\nsp +=\n_walk = $(if $1,$(wildcard /$(subst $(sp),/,$1)/$2) $(call _walk,$(wordlist 2,$(words $1),x $1),$2))\n_find = $(firstword $(call _walk,$(strip $(subst /, ,$1)),$2))\n_ROOT := $(patsubst %/root.mak,%,$(call _find,$(CURDIR),root.mak))\n\ninclude $(_ROOT)/root.mak\n\n$(call DEPENDS_ON,library/sublibrary)\n\ninclude $(_ROOT)/top.mak\n\nSRCS := lib1.c lib2.c\nBINARY := lib\nBINARY_EXT := $(_LIBEXT)\n\ninclude $(_ROOT)/bottom.mak\n```", "```\n$ **cd /src**\n$ **make -n**\ncc  -c -o '/tmp/out/library/sublibrary/slib1.o' '/home/jgc/doc/nonrecursive/library/sublibrary/\nslib1.c'\ncc  -c -o '/tmp/out/library/sublibrary/slib2.o' '/home/jgc/doc/nonrecursive/library/sublibrary/\nslib2.c'\nar r '/tmp/out/library/sublibrary/slib.a' /tmp/out/library/sublibrary/slib1.o /tmp/out/library/\nsublibrary/slib2.o\nranlib '/tmp/out/library/sublibrary/slib.a'\ncc  -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc  -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\ncc  -c -o '/tmp/out/executable/foo.o' '/home/jgc/doc/nonrecursive/executable/foo.c'\ncc  -c -o '/tmp/out/executable/bar.o' '/home/jgc/doc/nonrecursive/executable/bar.c'\ng++   /tmp/out/executable/foo.o /tmp/out/executable/bar.o /tmp/out/library/lib.a -o'/tmp/out/\nexecutable/exec'\n$ **make -n clean**\nrm -rf /tmp/out/library/sublibrary\nrm -rf /tmp/out/library\nrm -rf /tmp/out/executable\n```", "```\n$ **cd /src**\n$ **make -n clean-library_sublibrary**\nrm -rf /tmp/out/library/sublibrary\n$ **make -n library_sublibrary**\ncc -c -o '/tmp/out/library/sublibrary/slib1.o' '/home/jgc/doc/nonrecursive/library/sublibrary/\nslib1.c'\ncc -c -o '/tmp/out/library/sublibrary/slib2.o' '/home/jgc/doc/nonrecursive/library/sublibrary/\nslib2.c'\nar r '/tmp/out/library/sublibrary/slib.a' /tmp/out/library/sublibrary/slib1.o /tmp/out/library/\nsublibrary/slib2.o\nranlib '/tmp/out/library/sublibrary/slib.a'\n```", "```\n$ **cd /src/executable**\n$ **make -n executable**\ncc  -c -o '/tmp/out/library/sublibrary/slib1.o' '/home/jgc/doc/nonrecursive/library/sublibrary/\nslib1.c'\ncc  -c -o '/tmp/out/library/sublibrary/slib2.o' '/home/jgc/doc/nonrecursive/library/sublibrary/\nslib2.c'\nar r '/tmp/out/library/sublibrary/slib.a' /tmp/out/library/sublibrary/slib1.o /tmp/out/library/\nsublibrary/slib2.o\nranlib '/tmp/out/library/sublibrary/slib.a'\ncc  -c -o '/tmp/out/library/lib1.o' '/home/jgc/doc/nonrecursive/library/lib1.c'\ncc  -c -o '/tmp/out/library/lib2.o' '/home/jgc/doc/nonrecursive/library/lib2.c'\nar r '/tmp/out/library/lib.a' /tmp/out/library/lib1.o /tmp/out/library/lib2.o\nranlib '/tmp/out/library/lib.a'\ncc  -c -o '/tmp/out/executable/foo.o' '/home/jgc/doc/nonrecursive/executable/foo.c'\ncc  -c -o '/tmp/out/executable/bar.o' '/home/jgc/doc/nonrecursive/executable/bar.c'\ng++   /tmp/out/executable/foo.o /tmp/out/executable/bar.o /tmp/out/library/lib.a -o'/tmp/out/\nexecutable/exec'\n```"]