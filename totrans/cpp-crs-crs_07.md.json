["```\n#include <cstdio>\n\nstruct ConsoleLogger {\n  void log_transfer(long from, long to, double amount) { ➊\n    printf(\"%ld -> %ld: %f\\n\", from, to, amount); ➋\n  }\n};\n\nstruct Bank {\n  void make_transfer(long from, long to, double amount) { ➌\n    --snip-- ➍\n    logger.log_transfer(from, to, amount); ➎\n  }\n  ConsoleLogger logger;\n};\n\nint main() {\n  Bank bank;\n  bank.make_transfer(1000, 2000, 49.95);\n  bank.make_transfer(2000, 4000, 20.00);\n}\n--------------------------------------------------------------------------\n1000 -> 2000: 49.950000\n2000 -> 4000: 20.000000\n```", "```\n#include <cstdio>\n#include <stdexcept>\n\nstruct FileLogger {\n  void log_transfer(long from, long to, double amount) { ➊\n    --snip--\n    printf(\"[file] %ld,%ld,%f\\n\", from, to, amount);\n  }\n};\n\nstruct ConsoleLogger {\n  void log_transfer(long from, long to, double amount) {\n    printf(\"[cons] %ld -> %ld: %f\\n\", from, to, amount);\n  }\n};\n\nenum class LoggerType { ➋\n  Console,\n  File\n};\n\nstruct Bank {\n  Bank() : type { LoggerType::Console } { } ➌\n  void set_logger(LoggerType new_type) { ➍\n    type = new_type;\n  }\n\n  void make_transfer(long from, long to, double amount) {\n    --snip--\n    switch(type) { ➎\n    case LoggerType::Console: {\n      consoleLogger.log_transfer(from, to, amount);\n      break;\n    } case LoggerType::File: {\n      fileLogger.log_transfer(from, to, amount);\n      break;\n    } default: {\n throw std::logic_error(\"Unknown Logger type encountered.\");\n    } }\n  }\nprivate:\n  LoggerType type;\n  ConsoleLogger consoleLogger;\n  FileLogger fileLogger;\n};\n\nint main() {\n  Bank bank;\n  bank.make_transfer(1000, 2000, 49.95);\n  bank.make_transfer(2000, 4000, 20.00);\n  bank.set_logger(LoggerType::File); ➏\n  bank.make_transfer(3000, 2000, 75.00);\n}\n--------------------------------------------------------------------------\n[cons] 1000 -> 2000: 49.950000\n[cons] 2000 -> 4000: 20.000000\n[file] 3000,2000,75.000000\n```", "```\n#include <cstdio>\n\nstruct Logger {\n  virtual➊ ~Logger()➋ = default;\n  virtual void log_transfer(long from, long to, double amount) = 0➌;\n};\n\nstruct ConsoleLogger : Logger ➍ {\n  void log_transfer(long from, long to, double amount) override ➎ {\n    printf(\"%ld -> %ld: %f\\n\", from, to, amount);\n  }\n};\n```", "```\nstruct DerivedClass : BaseClass {\n  --snip--\n};\n```", "```\nstruct BaseClass {}; ➊\nstruct DerivedClass : BaseClass {}; ➋\nvoid are_belong_to_us(BaseClass& base) {} ➌\n\nint main() {\n  DerivedClass derived;\n  are_belong_to_us(derived); ➍\n}\n```", "```\nstruct BaseClass {}; ➊\nstruct DerivedClass : BaseClass {}; ➋\nvoid all_about_that(DerivedClass& derived) {} ➌\n\nint main() {\n  BaseClass base;\n  all_about_that(base); // No! Trouble! ➍\n}\n```", "```\n#include <cstdio>\n\nstruct BaseClass {\n  int the_answer() const { return 42; } ➊\n const char* member = \"gold\"; ➋\nprivate:\n  const char* holistic_detective = \"Dirk Gently\"; ➌\n};\n\nstruct DerivedClass : BaseClass ➍ \n  void announce_agency() {\n    // This line doesn't compile:\n    // printf(\"%s's Holistic Detective Agency\\n\", holistic_detective); { ➎\n  }\n};\n\nint main() {\n  DerivedClass x;\n  printf(\"The answer is %d\\n\", x.the_answer()); ➏\n  printf(\"%s member\\n\", x.member); { ➐\n}\n--------------------------------------------------------------------------\nThe answer is 42 ➏\ngold member ➐\n```", "```\n#include <cstdio>\n\nstruct BaseClass {\n  virtual➊ const char* final_message() const {\n    return \"We apologize for the incontinence.\";\n  }\n};\n\nstruct DerivedClass : BaseClass ➋ {\n  const char* final_message() const override ➌ {\n    return \"We apologize for the inconvenience.\";\n  }\n};\n\nint main() {\n  BaseClass base;\n  DerivedClass derived;\n  BaseClass& ref = derived;\n printf(\"BaseClass:    %s\\n\", base.final_message()); ➍\n  printf(\"DerivedClass: %s\\n\", derived.final_message()); ➎\n  printf(\"BaseClass&:   %s\\n\", ref.final_message()); ➏\n}\n--------------------------------------------------------------------------\nBaseClass:    We apologize for the incontinence. ➍\nDerivedClass: We apologize for the inconvenience. ➎\nBaseClass&:   We apologize for the inconvenience. ➏\n```", "```\n#include <cstdio>\n\nstruct BaseClass {\n  virtual const char* final_message() const = 0; ➊\n};\n\nstruct DerivedClass : BaseClass ➋ {\n  const char* final_message() const override ➌ {\n    return \"We apologize for the inconvenience.\";\n  }\n};\n\nint main() {\n  // BaseClass base; // Bang! ➍\n  DerivedClass derived;\n  BaseClass& ref = derived;\n  printf(\"DerivedClass: %s\\n\", derived.final_message()); ➎\n  printf(\"BaseClass&:   %s\\n\", ref.final_message()); ➏\n}\n--------------------------------------------------------------------------\nDerivedClass: We apologize for the inconvenience. ➎\nBaseClass&:   We apologize for the inconvenience. ➏\n```", "```\n#include <cstdio>\n\nstruct BaseClass {};\n\nstruct DerivedClass : BaseClass➊ {\n  DerivedClass() { ➋\n    printf(\"DerivedClass() invoked.\\n\");\n  }\n  ~DerivedClass() { ➌\n    printf(\"~DerivedClass() invoked.\\n\");\n  }\n};\n\nint main() {\n  printf(\"Constructing DerivedClass x.\\n\");\n  BaseClass* x{ new DerivedClass{} }; ➍\n  printf(\"Deleting x as a BaseClass*.\\n\");\n  delete x; ➎\n}\n--------------------------------------------------------------------------\nConstructing DerivedClass x.\nDerivedClass() invoked.\nDeleting x as a BaseClass*.\n```", "```\n#include <cstdio>\n\nstruct BaseClass {\n  virtual ~BaseClass() = default; ➊\n};\n\nstruct DerivedClass : BaseClass {\n  DerivedClass() {\n    printf(\"DerivedClass() invoked.\\n\");\n  }\n  ~DerivedClass() {\n    printf(\"~DerivedClass() invoked.\\n\"); ➋\n  }\n};\n\nint main() {\n  printf(\"Constructing DerivedClass x.\\n\");\n  BaseClass* x{ new DerivedClass{} };\n  printf(\"Deleting x as a BaseClass*.\\n\");\n  delete x; ➌\n}\n--------------------------------------------------------------------------\nConstructing DerivedClass x.\nDerivedClass() invoked.\nDeleting x as a BaseClass*.\n~DerivedClass() invoked. ➋\n```", "```\n#include <cstdio>\n\nstruct Logger {\n  virtual ~Logger() = default; ➊\n  virtual void log_transfer(long from, long to, double amount) = 0; ➋\n};\n\nstruct ConsoleLogger : Logger ➌ {\n  void log_transfer(long from, long to, double amount) override ➍ {\n    printf(\"[cons] %ld -> %ld: %f\\n\", from, to, amount);\n  }\n};\n\nstruct FileLogger : Logger ➎ {\n  void log_transfer(long from, long to, double amount) override ➏ {\n    printf(\"[file] %ld,%ld,%f\\n\", from, to, amount);\n  }\n};\n```", "```\n--snip--\n// Include Listing 5-11\nstruct Bank {\n  Bank(Logger& logger) : logger{ logger }➊ { }\n  void make_transfer(long from, long to, double amount) {\n    --snip--\n    logger.log_transfer(from, to, amount);\n  }\nprivate:\n  Logger& logger;\n};\n\nint main() {\n  ConsoleLogger logger;\n  Bank bank{ logger }; ➋\n  bank.make_transfer(1000, 2000, 49.95);\n  bank.make_transfer(2000, 4000, 20.00);\n}\n--------------------------------------------------------------------------\n[cons] 1000 -> 2000: 49.950000\n[cons] 2000 -> 4000: 20.000000\n```", "```\n--snip--\n// Include Listing 5-11\n\nstruct Bank {\n  void set_logger(Logger* new_logger) {\n    logger = new_logger;\n  }\n  void make_transfer(long from, long to, double amount) {\n    if (logger) logger->log_transfer(from, to, amount);\n  }\nprivate:\n  Logger* logger{};\n};\n\nint main() {\n  ConsoleLogger console_logger;\n  FileLogger file_logger;\n  Bank bank;\n  bank.set_logger(&console_logger); ➊\n  bank.make_transfer(1000, 2000, 49.95); ➋\n  bank.set_logger(&file_logger); ➌\n  bank.make_transfer(2000, 4000, 20.00); ➍\n}\n--------------------------------------------------------------------------\n[cons] 1000 -> 2000: 49.950000 ➋\n[file] 2000,4000,20.000000 ➍\n```", "```\n#include <cstdio>\nstruct Logger {\n  --snip--\n};\n\nstruct Bank {\n  Bank(Logger* logger) : logger{ logger }{} ➊\n  void set_logger(Logger* new_logger) { ➋\n    logger = new_logger;\n  }\n  void make_transfer(long from, long to, double amount) {\n    if (logger) logger->log_transfer(from, to, amount);\n  }\nprivate:\n    Logger* logger;\n};\n```"]