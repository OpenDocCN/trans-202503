- en: '23'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '23'
- en: Hacking Android Apps
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 破解Android应用
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: You’ve spent the entirety of this book thus far learning to hack web applications.
    The majority of bug bounty programs offer bounties on their web apps, so mastering
    web hacking is the easiest way to get started in bug bounties, as it will unlock
    the widest range of targets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你至今已经在整本书中学习了如何破解网页应用程序。大多数漏洞悬赏项目都会提供网页应用程序的赏金，所以精通网页破解是进入漏洞悬赏的最简单方法，因为它将解锁最广泛的目标。
- en: On the other hand, mobile hacking has a few more prerequisite skills and takes
    more time to get started. But because of the higher barrier to entry, fewer hackers
    tend to work on mobile programs. Also, the number of mobile programs is rising
    as companies increasingly launch complex mobile products. Mobile programs can
    sometimes be listed under the Mobile or IoT sections of the company’s main bug
    bounty program. This means that if you learn to hack mobile applications, you’ll
    likely file fewer duplicate reports and find more interesting bugs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，移动破解需要一些更多的前置技能，并且需要更多的时间来入门。但由于进入门槛较高，做移动程序的黑客较少。此外，随着公司越来越多地推出复杂的移动产品，移动程序的数量也在增加。移动程序有时会被列在公司主要漏洞悬赏计划的移动或物联网部分。这意味着，如果你学会了破解移动应用程序，你很可能会提交更少的重复报告，找到更多有趣的漏洞。
- en: Despite the more involved setup, hacking mobile applications is very similar
    to hacking web applications. This chapter introduces the additional skills you
    need to learn before you begin analyzing Android apps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管设置过程更加复杂，但破解移动应用程序与破解网页应用程序非常相似。本章介绍了在开始分析Android应用程序之前，你需要学习的额外技能。
- en: Companies with mobile applications typically have both Android and iOS versions
    of an app. We won’t cover iOS applications, and this chapter is by no means a
    comprehensive guide to hacking Android applications. But, along with the previous
    chapters, it should give you the foundation you need to start exploring the field
    on your own.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有移动应用程序的公司通常会有Android和iOS版本的应用程序。我们不会涉及iOS应用程序，而且本章并非一个全面的Android应用破解指南。但结合前几章的内容，它应该为你提供了开始自主探索该领域的基础。
- en: Setting Up Your Mobile Proxy
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的移动代理
- en: In the same way that you configured your web browser to work with your proxy,
    you’ll need to set up your testing mobile device to work with a proxy. This generally
    involves installing the proxy’s certificate on your device and adjusting your
    proxy’s settings.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与配置你的网页浏览器以与代理一起使用的方式相同，你也需要设置你的测试移动设备使其与代理配合使用。这通常涉及在你的设备上安装代理的证书，并调整代理的设置。
- en: 'If you can afford to do so, acquire another mobile device, or use one of your
    old devices for testing. Mobile testing is dangerous: you might accidentally damage
    your device, and many of the techniques mentioned in this chapter will void the
    device’s warranty. You can also use a mobile emulator (a program that simulates
    a mobile device) for testing.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能承担的话，可以购买一部新的移动设备，或者使用你的一部旧设备进行测试。移动测试是有风险的：你可能会不小心损坏设备，而且本章提到的许多技术会使设备的保修失效。你也可以使用移动模拟器（一个模拟移动设备的程序）进行测试。
- en: First, you’ll need to configure Burp’s proxy to accept connections from your
    mobile device, because by default, Burp’s proxy accepts connections only from
    the machine Burp is running on. Navigate to Burp’s **Proxy**▶**Options** tab.
    In the Proxy Listeners section, click **Add**. In the pop-up window ([Figure 23-1](#figure23-1)),
    enter a port number that is not currently in use and select **All interfaces**
    as the Bind to address option. Click **OK**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要配置Burp的代理以接受来自你的移动设备的连接，因为默认情况下，Burp的代理只接受来自Burp所在机器的连接。进入Burp的**Proxy**▶**Options**选项卡。在Proxy
    Listeners部分，点击**Add**。在弹出的窗口中（[图23-1](#figure23-1)），输入一个当前未被使用的端口号，并选择**All interfaces**作为绑定地址选项。点击**OK**。
- en: '![f23001](image_fi/501546c23/f23001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f23001](image_fi/501546c23/f23001.png)'
- en: 'Figure 23-1: Setting up Burp to accept connections from all devices on the
    Wi-Fi network'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图23-1：设置Burp接受来自Wi-Fi网络中所有设备的连接
- en: Your proxy should now accept connections from any device connected to the same
    Wi-Fi network. As such, I do not recommend doing this on a public Wi-Fi network.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代理应该可以接受来自任何连接到同一Wi-Fi网络的设备的连接。因此，我不建议在公共Wi-Fi网络上进行此操作。
- en: 'Next, you’ll configure your Android device to work with the proxy. These steps
    will vary slightly based on the system you’re using, but the process should be
    some version of choosing **Settings**▶**Network**▶**Wi-Fi**, selecting (usually
    by tapping and holding) the Wi-Fi network you’re currently connected to, and selecting
    **Modify Network**. You should then be able to select a proxy hostname and port.
    Here, you should enter your computer’s IP address and the port number you selected
    earlier. If you’re using a Linux computer, you can find your computer’s IP address
    by running this command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将配置Android设备以使用代理。根据你使用的系统，这些步骤可能会有所不同，但过程应该类似于选择**设置**▶**网络**▶**Wi-Fi**，选择（通常是通过长按）你当前连接的Wi-Fi网络，然后选择**修改网络**。之后，你应该能够选择代理主机名和端口。在这里，你应该输入你计算机的IP地址和你之前选择的端口号。如果你使用的是Linux计算机，你可以通过运行以下命令找到计算机的IP地址：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are using a Mac, you can find your IP with this command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Mac，你可以通过运行以下命令找到你的IP地址：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Your Burp proxy should now be ready to start intercepting traffic from your
    mobile device. The process of setting up a mobile emulator to work with your proxy
    is similar to this process, except that some emulators require that you add proxy
    details from the emulator settings menu instead of the network settings on the
    emulated device itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的Burp代理应该已经准备好开始拦截来自移动设备的流量了。设置移动模拟器与代理配合的过程类似，唯一的区别是有些模拟器需要你从模拟器设置菜单中添加代理信息，而不是从模拟设备本身的网络设置中添加。
- en: If you want to intercept and decode HTTPS traffic from your mobile device as
    well, you’ll need to install Burp’s certificate on your device. You can do this
    by visiting *http://burp/cert* in the browser on your computer that uses Burp
    as a proxy. Save the downloaded certificate, email it to yourself, and download
    it to your mobile device. Next, install the certificate on your device. This process
    will also depend on the specifics of the system running on your device, but it
    should be something like choosing **Settings**▶**Security**▶**Install Certificates
    from Storage**. Click the certificate you just downloaded and select **VPN and
    apps** for the Certificate use option. You’ll now be able to audit HTTPS traffic
    with Burp.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还想拦截并解码来自移动设备的HTTPS流量，你需要在设备上安装Burp的证书。你可以通过在使用Burp作为代理的计算机浏览器中访问*http://burp/cert*来实现。保存下载的证书，发送邮件给自己，并将其下载到你的移动设备上。接下来，在你的设备上安装证书。这个过程也会依赖于设备上运行的系统的具体情况，但一般来说，应该是选择**设置**▶**安全性**▶**从存储中安装证书**。点击你刚刚下载的证书，并为证书使用选项选择**VPN和应用程序**。现在，你就可以使用Burp审计HTTPS流量了。
- en: Bypassing Certificate Pinning
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绕过证书固定
- en: '*Certificate pinning* is a mechanism that limits an application to trusting
    predefined certificates only. Also known as *SSL pinning* or *cert pinning*, it
    provides an additional layer of security against *man-in-the-middle attacks*,
    in which an attacker secretly intercepts, reads, and alters the communications
    between two parties. If you want to intercept and decode the traffic of an application
    that uses certificate pinning, you’ll have to bypass the certificate pinning first,
    or the application won’t trust your proxy’s SSL certificate and you won’t be able
    to intercept HTTPS traffic.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*证书固定*是一种机制，限制应用程序只信任预定义的证书。它也被称为*SSL固定*或*证书固定*，它提供了针对*中间人攻击*的额外安全层，在这种攻击中，攻击者秘密地拦截、读取并篡改双方之间的通信。如果你想要拦截并解码使用证书固定的应用流量，你必须先绕过证书固定，否则该应用将不信任你代理的SSL证书，你将无法拦截HTTPS流量。'
- en: It’s sometimes necessary to bypass certificate pinning to intercept the traffic
    of better-protected apps. If you’ve successfully set up your mobile device to
    work with a proxy but still cannot see the traffic belonging to your target application,
    that app may have implemented certificate pinning.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，绕过证书固定是拦截更高保护级别应用流量所必需的。如果你已经成功设置了你的移动设备以使用代理，但仍然无法看到目标应用的流量，那么该应用可能实现了证书固定。
- en: The process of bypassing cert pinning will depend on how the certificate pinning
    is implemented for each application. For Android applications, you have a few
    options for bypassing the pinning. You can use *Frida*, a tool that allows you
    to inject scripts into the application. You can download Frida from [https://frida.re/docs/installation/](https://frida.re/docs/installation/).
    Then use the Universal Android SSL Pinning Bypass Frida script ([https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/](https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/)).
    Another tool that you could use to automate this process is Objection ([https://github.com/sensepost/objection/](https://github.com/sensepost/objection/)),
    which uses Frida to bypass pinning for Android or iOS. Run the Objection command
    `android sslpinning disable` to bypass pinning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 绕过证书固定的过程将取决于每个应用程序如何实现证书固定。对于 Android 应用程序，你有几种绕过证书固定的方法。你可以使用*Frida*，这是一种允许你将脚本注入到应用程序中的工具。你可以从[https://frida.re/docs/installation/](https://frida.re/docs/installation/)下载Frida。然后使用通用
    Android SSL 证书固定绕过 Frida 脚本([https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/](https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/))。另一个可以用来自动化此过程的工具是
    Objection([https://github.com/sensepost/objection/](https://github.com/sensepost/objection/))，它使用
    Frida 来绕过 Android 或 iOS 的证书固定。运行 Objection 命令 `android sslpinning disable` 以绕过证书固定。
- en: For most applications, you can bypass the certificate pinning by using these
    automated tools. But if the application implements pinning with custom code, you
    might need to manually bypass it. You could overwrite the packaged certificate
    with your custom certificate. Alternately, you could change or disable the application’s
    certificate validation code. The process of executing these techniques is complicated
    and highly dependent on the application that you’re targeting, so I won’t go into
    detail. For more information on these methods, you’ll have to do some independent
    research.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数应用程序，你可以通过使用这些自动化工具绕过证书固定。但如果应用程序通过自定义代码实现了证书固定，你可能需要手动绕过它。你可以用自定义证书覆盖打包的证书。或者，你可以更改或禁用应用程序的证书验证代码。执行这些技术的过程是复杂的，并且高度依赖于你所针对的应用程序，因此我不会详细说明。有关这些方法的更多信息，你需要进行一些独立的研究。
- en: Anatomy of an APK
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APK 的结构
- en: 'Before you attack Android applications, you must first understand what they
    are made of. Android applications are distributed and installed in a file format
    called *Android Package (**APK)*. APKs are like ZIP files that contain everything
    an Android application needs to operate: the application code, the application
    manifest file, and the application’s resources. This section describes the main
    components of an Android APK.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在攻击 Android 应用程序之前，你必须先了解它们是由什么组成的。Android 应用程序以一种名为*Android Package (**APK)*的文件格式进行分发和安装。APKs
    类似于 ZIP 文件，包含了 Android 应用程序运行所需的一切：应用程序代码、应用程序清单文件以及应用程序的资源。本节将描述 Android APK
    的主要组件。
- en: First, the *AndroidManifest.xml* file contains the application’s package name,
    version, components, access rights, and referenced libraries, as well as other
    metadata. It’s a good starting point for exploring the application. From this
    file, you can gain insights into the app’s components and permissions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，*AndroidManifest.xml* 文件包含应用程序的包名、版本、组件、访问权限和引用的库，以及其他元数据。这是探索应用程序的一个良好起点。从这个文件中，你可以获得关于应用程序组件和权限的见解。
- en: 'Understanding the components of your target application will provide you with
    a good overview of how it works. There are four types of app components: Activities
    (declared in `<activity>` tags), Services (declared in `<service>` tags), BroadcastReceivers
    (declared in `<receiver>` tags), and ContentProviders (declared in `<provider>`
    tags).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 理解目标应用程序的组件将为你提供应用程序工作原理的整体概览。应用程序有四种类型的组件：活动（在 `<activity>` 标签中声明）、服务（在 `<service>`
    标签中声明）、广播接收器（在 `<receiver>` 标签中声明）和内容提供者（在 `<provider>` 标签中声明）。
- en: '*Activities* are application components that interact with the user. The windows
    of Android applications you see are made up of Activities. *Services* are long-running
    operations that do not directly interact with the user, such as retrieving or
    sending data in the background. *BroadcastReceivers* allow an app to respond to
    broadcast messages from the Android system and other applications. For instance,
    some applications download large files only when the device is connected to Wi-Fi,
    so they need a way to be notified when the device connects to a Wi-Fi network.
    *ContentProviders* provide a way to share data with other applications.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Activities* 是与用户交互的应用程序组件。你所看到的 Android 应用程序窗口是由 Activities 组成的。*Services*
    是长期运行的操作，不直接与用户交互，例如在后台检索或发送数据。*BroadcastReceivers* 允许应用响应来自 Android 系统和其他应用的广播消息。例如，一些应用程序仅在设备连接到
    Wi-Fi 时才下载大文件，因此它们需要一种在设备连接到 Wi-Fi 网络时接收通知的方式。*ContentProviders* 提供了一种与其他应用共享数据的方法。'
- en: The permissions that the application uses, such as the ability to send text
    messages and the permissions other apps need to interact with it, are also declared
    in this *AndroidManifest.xml* file. This will give you a good sense of what the
    application can do and how it interacts with other applications on the same device.
    For more about what you can find in *AndroidManifest.xml*, visit [https://developer.android.com/guide/topics/manifest/manifest-intro/](https://developer.android.com/guide/topics/manifest/manifest-intro/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用的权限，例如发送短信的权限以及其他应用与其交互所需的权限，也在 *AndroidManifest.xml* 文件中声明。这将帮助你了解应用程序能做什么，以及它如何与同一设备上的其他应用程序互动。有关
    *AndroidManifest.xml* 中的内容，访问 [https://developer.android.com/guide/topics/manifest/manifest-intro/](https://developer.android.com/guide/topics/manifest/manifest-intro/)。
- en: The *classes.dex* file contains the application source code compiled in the
    DEX file format. You can use the various Android hacking tools introduced later
    in this chapter to extract and decompile this source code for analysis. For more
    on conducting source code reviews for vulnerabilities, check out Chapter 22.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*classes.dex* 文件包含以 DEX 文件格式编译的应用程序源代码。你可以使用本章稍后介绍的各种 Android 破解工具来提取和反编译这些源代码进行分析。关于如何进行源代码漏洞审查，查看第22章。'
- en: The *resources.arsc* file contains the application’s precompiled resources,
    such as strings, colors, and styles. The *res* folder contains the application’s
    resources not compiled into *resources.arsc*. In the *res* folder, the *res/values/strings.xml*
    file contains literal strings of the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*resources.arsc* 文件包含应用程序的预编译资源，如字符串、颜色和样式。*res* 文件夹包含未编译到 *resources.arsc*
    中的应用程序资源。在 *res* 文件夹中，*res/values/strings.xml* 文件包含应用程序的字面字符串。'
- en: The *lib* folder contains compiled code that is platform dependent. Each subdirectory
    in *lib* contains the specific source code used for a particular mobile architecture.
    Compiled kernel modules are located here and are often a source of vulnerabilities.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*lib* 文件夹包含与平台相关的编译代码。*lib* 中的每个子目录包含用于特定移动架构的源代码。编译后的内核模块存储在这里，通常是漏洞的来源。'
- en: The *assets* folder contains the application’s assets, such as video, audio,
    and document templates. Finally, the *META-INF* folder contains the *MANIFEST.MF*
    file, which stores metadata about the application. This folder also contains the
    certificate and signature of the APK.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*assets* 文件夹包含应用程序的资源，如视频、音频和文档模板。最后，*META-INF* 文件夹包含 *MANIFEST.MF* 文件，该文件存储关于应用程序的元数据。该文件夹还包含
    APK 的证书和签名。'
- en: Tools to Use
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用的工具
- en: Now that you understand the main components of an Android application, you’ll
    need to know how to process the APK file and extract the Android source code.
    Besides using a web proxy to inspect the traffic to and from your test device,
    you’ll need some tools that are essential to analyzing Android applications. This
    section doesn’t go into the specifics of how to use these tools, but rather when
    and why to use them. The rest you can easily figure out by using each tool’s documentation
    pages.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了 Android 应用程序的主要组成部分，你需要知道如何处理 APK 文件并提取 Android 源代码。除了使用 Web 代理检查与测试设备之间的流量外，你还需要一些分析
    Android 应用程序的必要工具。本节不会详细说明如何使用这些工具，而是说明何时以及为什么使用它们。其余的你可以通过查阅每个工具的文档页面轻松掌握。
- en: Android Debug Bridge
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android 调试桥
- en: The *Android Debug Bridge (**ADB)* is a command line tool that lets your computer
    communicate with a connected Android device. This means you won’t have to email
    application source code and resource files back and forth between your computer
    and your phone if you want to read or modify them on the computer. For example,
    you can use ADB to copy files to and from your device, or to quickly install modified
    versions of the application you’re researching. ADB’s documentation is at [https://developer.android.com/studio/command-line/adb/](https://developer.android.com/studio/command-line/adb/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*Android Debug Bridge（**ADB**）*是一个命令行工具，可以让你的电脑与连接的安卓设备进行通信。这意味着，如果你想在电脑上读取或修改应用程序源代码和资源文件，就不必通过电子邮件来回传输它们。例如，你可以使用ADB将文件从电脑复制到设备，或者快速安装你正在研究的应用程序的修改版本。ADB的文档请见[https://developer.android.com/studio/command-line/adb/](https://developer.android.com/studio/command-line/adb/)。'
- en: To start using ADB, connect your device to your laptop with a USB cable. Then
    turn on *debugging mode* on your device. Whenever you want to use ADB on a device
    connected to your laptop over USB, you must enable USB debugging. This process
    varies based on the mobile device, but should be similar to choosing **Settings**▶**System**▶
    **Developer Options**▶**Debugging**. This will enable you to interact with your
    device from your laptop via ADB. On Android version 4.1 and lower, the developer
    options screen is available by default. In versions of Android 4.2 and later,
    developer options need to be enabled by choosing **Settings**▶**About Phone**
    and then tapping the **Build number** seven times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用ADB，将设备通过USB线连接到你的笔记本电脑。然后在设备上开启*调试模式*。每次你想通过USB使用ADB时，都必须启用USB调试。此过程根据设备的不同而有所不同，但大致上应类似于选择**设置**▶**系统**▶**开发者选项**▶**调试**。这样你就能通过ADB从笔记本与设备互动。在安卓4.1及以下版本中，开发者选项是默认可见的。而在安卓4.2及更高版本中，开发者选项需要通过选择**设置**▶**关于手机**，然后点击**版本号**七次来启用。
- en: 'On your mobile device, you should see a window prompting you to allow the connection
    from your laptop. Make sure that your laptop is connected to the device by running
    this command in your laptop terminal:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的移动设备上，应该会看到一个窗口提示你允许笔记本电脑的连接。确保笔记本电脑通过在笔记本终端中运行以下命令与设备连接：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you can install APKs with this command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用以下命令安装APKs：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also download files from your device to your laptop by running the
    following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过运行以下命令将文件从设备下载到笔记本电脑：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or copy files on your laptop to your mobile device:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者将文件从你的笔记本电脑复制到移动设备：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Android Studio
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android Studio
- en: '*Android Studio* is software used for developing Android applications, and
    you can use it to modify an existing application’s source code. It also includes
    an *emulator* that lets you run applications in a virtual environment if you don’t
    have a physical Android device. You can download and read about Android Studio
    at [https://developer.android.com/studio/](https://developer.android.com/studio/).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*Android Studio*是用于开发安卓应用程序的软件，你可以用它修改现有应用的源代码。它还包括一个*模拟器*，如果你没有实体安卓设备，可以在虚拟环境中运行应用程序。你可以在[https://developer.android.com/studio/](https://developer.android.com/studio/)下载并阅读关于Android
    Studio的相关信息。'
- en: Apktool
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apktool
- en: '*Apktool*, a tool for reverse engineering APK files, is essential for Android
    hacking and will probably be the tool you use most frequently during your analysis.
    It converts APKs into readable source code files and reconstructs an APK from
    these files. The Apktool’s documentation is at [https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*Apktool*，一个用于反向工程APK文件的工具，是安卓黑客必备工具，可能是你在分析过程中使用最频繁的工具。它将APK转换为可读的源代码文件，并从这些文件中重建APK。Apktool的文档请见[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)。'
- en: 'You can use Apktool to get individual files from an APK for source code analysis.
    For example, this command extracts files from an APK called *example.apk*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Apktool从APK中提取单个文件进行源代码分析。例如，以下命令从名为*example.apk*的APK中提取文件：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Sometimes you might want to modify an APK’s source code and see if that changes
    the behavior of the app. You can use Apktool to repackage individual source code
    files after making modifications. This command packages the content of the *example*
    folder into the file *example.apk*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要修改APK的源代码，看看这是否会改变应用程序的行为。在进行修改后，你可以使用Apktool重新打包单个源代码文件。这个命令将*example*文件夹的内容打包成*example.apk*文件：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Frida
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Frida
- en: '*Frida* ([https://frida.re/](https://frida.re/)) is an amazing instrumentation
    toolkit that lets you inject your script into running processes of the application.
    You can use it to inspect functions that are called, analyze the app’s network
    connections, and bypass certificate pinning.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*Frida* ([https://frida.re/](https://frida.re/)) 是一个令人惊叹的工具包，可以让你将脚本注入到正在运行的应用程序进程中。你可以用它来检查被调用的函数，分析应用的网络连接，绕过证书钉扎（certificate
    pinning）。'
- en: Frida uses JavaScript as its language, so you will need to know JavaScript to
    take full advantage of it. However, you can access plenty of premade scripts shared
    online.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Frida 使用 JavaScript 作为其语言，因此你需要了解 JavaScript 才能充分利用它。不过，你可以访问大量在线共享的现成脚本。
- en: Mobile Security Framework
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动安全框架
- en: I also highly recommend the *Mobile Security Framework* ([https://github.com/MobSF/Mobile-Security-Framework-MobSF/](https://github.com/MobSF/Mobile-Security-Framework-MobSF/)),
    or the *MobSF*, for all things mobile app testing. This automated mobile application
    testing framework for Android, iOS, and Windows can do both static and dynamic
    testing. It automates many of the techniques that I talk about in this chapter
    and is a good tool to add to your toolkit once you understand the basics of Android
    hacking.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我还强烈推荐 *Mobile Security Framework* ([https://github.com/MobSF/Mobile-Security-Framework-MobSF/](https://github.com/MobSF/Mobile-Security-Framework-MobSF/))，或者叫
    *MobSF*，用于所有与移动应用测试相关的工作。这个用于 Android、iOS 和 Windows 的自动化移动应用测试框架可以进行静态和动态测试。它自动化了我在本章中提到的许多技术，是你掌握
    Android 黑客基础知识后，可以加入到工具包中的好工具。
- en: Hunting for Vulnerabilities
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漏洞猎杀
- en: Now that your mobile hacking environment is set up, it’s time to start hunting
    for vulnerabilities in the mobile app. Luckily, hacking mobile applications is
    not that different from hacking web applications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的移动黑客环境已经搭建好，是时候开始在移动应用中寻找漏洞了。幸运的是，黑客攻击移动应用和黑客攻击网页应用并没有太大的不同。
- en: To start, extract the application’s package contents and review the code for
    vulnerabilities. Compare authentication and authorization mechanisms for the mobile
    and web apps of the same organization. Developers may trust data coming from the
    mobile app, and this could lead to IDORs or broken authentication if you use a
    mobile endpoint. Mobile apps also tend to have issues with session management,
    such as reusing session tokens, using longer sessions, or using session cookies
    that don’t expire. These issues can be chained with XSS to acquire session cookies
    that allow attackers to take over accounts even after users log out or change
    their passwords. Some applications use custom implementations for encryption or
    hashing. Look for insecure algorithms, weak implementations of known algorithms,
    and hardcoded encryption keys. After reviewing the application’s source code for
    potential vulnerabilities, you can validate your findings by testing dynamically
    on an emulator or a real device.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，提取应用程序的包内容并查看代码中的漏洞。比较同一组织的移动应用和网页应用的身份验证和授权机制。开发者可能会信任来自移动应用的数据，如果你使用了移动端点，这可能会导致
    IDOR（不安全的直接对象引用）或身份验证失效。移动应用通常还会遇到会话管理问题，如重用会话令牌、使用较长的会话时间或使用没有过期的会话 Cookie。这些问题可以与
    XSS 联合使用，以获取会话 Cookie，从而使攻击者在用户退出或更改密码后仍能接管账户。有些应用程序使用自定义的加密或哈希实现。寻找不安全的算法、已知算法的弱实现和硬编码的加密密钥。在审查应用程序源代码中的潜在漏洞后，你可以通过在模拟器或真实设备上动态测试来验证你的发现。
- en: 'Mobile applications are an excellent place to search for additional web vulnerabilities
    not present in their web application equivalent. You can hunt for these with the
    same methodology you used to find web vulnerabilities: using Burp Suite to intercept
    the traffic coming out of the mobile app during sensitive actions. Mobile apps
    often make use of unique endpoints that may not be as well tested as web endpoints
    because fewer hackers hunt on mobile apps. You can find them by looking for endpoints
    that you haven’t seen in the organization’s web applications.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序是寻找额外网页漏洞的绝佳场所，这些漏洞在其对应的网页应用程序中不存在。你可以用相同的方式去寻找这些漏洞，就像你在寻找网页漏洞时使用的那样：利用
    Burp Suite 拦截来自移动应用的敏感操作流量。移动应用常常使用一些独特的端点，这些端点可能没有像网页端点那样经过充分测试，因为较少的黑客会在移动应用上进行攻击。你可以通过寻找那些在该组织网页应用程序中没有出现过的端点来发现它们。
- en: I recommend testing an organization’s web applications first, before you dive
    into its mobile applications, since a mobile application is often a simplified
    version of its web counterpart. Search for IDORs, SQL injections, XSS, and other
    common web vulnerabilities by using the skills you’ve already learned. You can
    also look for common web vulnerabilities by analyzing the source code of the mobile
    application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你先测试组织的 Web 应用程序，再深入其移动应用程序，因为移动应用程序通常是其 Web 版本的简化版。运用你已经学到的技能，搜索 IDOR、SQL
    注入、XSS 以及其他常见的 Web 漏洞。你还可以通过分析移动应用程序的源代码来寻找常见的 Web 漏洞。
- en: In addition to the vulnerabilities that you look for in web applications, search
    for some mobile-specific vulnerabilities. *AndroidManifest.xml* contains basic
    information about the application and its functionalities. This file is a good
    starting point for your analysis. After you’ve unpacked the APK file, read it
    to gain a basic understanding of the application, including its components and
    the permissions it uses. Then you can dive into other files to look for other
    mobile-specific vulnerabilities.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Web 应用程序中你要寻找的漏洞外，还需要寻找一些移动特有的漏洞。*AndroidManifest.xml* 文件包含了关于应用程序及其功能的基本信息。这个文件是分析的一个好起点。解包
    APK 文件后，阅读它以获取对应用程序的基本了解，包括它的组件和所需的权限。然后你可以深入其他文件，寻找其他特定于移动的漏洞。
- en: The source code of mobile applications often contains hardcoded secrets or API
    keys that the application needs to access web services. The *res/values/strings.xml*
    file stores the strings in the application. It’s a good place to look for hardcoded
    secrets, keys, endpoints, and other types of info leaks. You can also search for
    secrets in other files by using `grep` to search for the keywords mentioned in
    Chapter 22.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序的源代码中常常包含硬编码的秘密或 API 密钥，这些密钥是应用程序访问 Web 服务所必需的。*res/values/strings.xml*
    文件存储着应用程序中的字符串。它是查找硬编码的秘密、密钥、端点和其他信息泄露的好地方。你还可以通过使用 `grep` 搜索第 22 章中提到的关键字，在其他文件中查找秘密。
- en: If you find files with the *.db* or *.sqlite* extensions, these are database
    files. Look inside these files to see what information gets shipped along with
    the application. These are also an easy source of potential secrets and sensitive
    information leaks. Look for things like session data, financial information, and
    sensitive information belonging to the user or organization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现扩展名为 *.db* 或 *.sqlite* 的文件，这些是数据库文件。查看这些文件，了解应用程序随附的是什么信息。这些文件也是潜在的秘密和敏感信息泄露的易发来源。请留意诸如会话数据、财务信息，以及属于用户或组织的敏感信息等内容。
- en: Ultimately, looking for mobile vulnerabilities is not that different from hacking
    web applications. Closely examine the interactions between the client and the
    server, and dive into the source code. Keep in mind the special classes of vulnerabilities,
    like hardcoded secrets and the storage of sensitive data in database files, that
    tend to manifest in mobile apps more than in web applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，寻找移动漏洞并不与破解 Web 应用程序有太大不同。仔细检查客户端和服务器之间的交互，并深入研究源代码。记住一些特殊的漏洞类别，比如硬编码的秘密和存储在数据库文件中的敏感数据，这些通常比
    Web 应用程序在移动应用程序中更容易出现。
