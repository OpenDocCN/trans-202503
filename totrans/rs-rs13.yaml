- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: The Rust Ecosystem
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 生态系统
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Programming rarely happens in a vacuum these days—nearly every Rust crate you
    build is likely to take dependencies on *some* code that wasn’t written by you.
    Whether this trend is good, bad, or a little of both is a subject of heavy debate,
    but either way, it’s a reality of today’s developer experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编程如今很少在真空中进行——几乎每一个你构建的 Rust crate 都可能依赖于*某些*不是你编写的代码。无论这种趋势是好是坏，还是两者兼而有之，都是一个备受争议的话题，但无论如何，它已经成为今天开发者体验的一部分。
- en: In this brave new interdependent world, it’s more important than ever to have
    a solid grasp of what libraries and tools are available and to stay up to date
    on the latest and greatest of what the Rust community has to offer. This chapter
    is dedicated to how you can leverage, track, understand, and contribute back to
    the Rust ecosystem. Since this is the final chapter, in the closing section I’ll
    also provide some suggestions of additional resources you can explore to continue
    developing your Rust skills.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个勇敢的新互相依赖的世界里，比以往任何时候都更重要的是要对可用的库和工具有一个扎实的掌握，并保持对 Rust 社区最新和最好的成果的了解。本章将专门讨论如何利用、跟踪、理解并为
    Rust 生态系统做出贡献。由于这是最后一章，在结尾部分，我还将提供一些额外资源的建议，帮助你继续发展你的 Rust 技能。
- en: What’s Out There?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现有的工具
- en: Despite its relative youth, Rust already has an ecosystem large enough that
    it’s hard to keep track of everything that’s available. If you know what you want,
    you may be able to search your way to a set of appropriate crates and then use
    download statistics and superficial vibe-checks on each crate’s repository to
    determine which may make for reasonable dependencies. However, there’s also a
    plethora of tools, crates, and general language features that you might not necessarily
    know to look for that could potentially save you countless hours and difficult
    design decisions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Rust 相对年轻，但它已经有了一个庞大的生态系统，以至于很难跟踪所有可用的资源。如果你知道自己需要什么，你可能能够通过搜索找到一组合适的 crate，并通过下载统计信息和对每个
    crate 仓库的表面检查来确定哪些可能成为合理的依赖项。然而，还有许多工具、crate 和通用的语言特性，可能是你不一定知道要寻找的，但它们有可能为你节省无数小时和复杂的设计决策。
- en: In this section, I’ll go through some of the tools, libraries, and Rust features
    I have found helpful over the years in the hopes that they may come in useful
    for you at some point too!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我将介绍一些多年来我发现有帮助的工具、库和 Rust 特性，希望它们在某些时刻对你也能有所帮助！
- en: Tools
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具
- en: 'First off, here are some Rust tools I find myself using regularly that you
    should add to your toolbelt:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，以下是一些我发现自己经常使用的 Rust 工具，你应该将它们添加到你的工具箱中：
- en: '**`cargo-deny`**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cargo-deny`**'
- en: Provides a way to lint your dependency graph. At the time of writing, you can
    use `cargo-deny` to allow only certain licenses, deny-list crates or specific
    crate versions, detect dependencies with known vulnerabilities or that use Git
    sources, and detect crates that appear multiple times with different versions
    in the dependency graph. By the time you’re reading this, there may be even more
    handy lints in place.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供了一种对你的依赖图进行 lint 检查的方法。在写这篇文章时，你可以使用 `cargo-deny` 仅允许某些许可证，禁止某些 crate 或特定版本，检测已知漏洞的依赖项或使用
    Git 来源的依赖项，并检测在依赖图中以不同版本多次出现的 crate。在你阅读本文时，可能会有更多有用的 lint 检查。
- en: '**`cargo-expand`**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cargo-expand`**'
- en: Expands macros in a given crate and lets you inspect the output, which makes
    it much easier to spot mistakes deep down in macro transcribers or procedural
    macros. `cargo-expand` is an invaluable tool when you’re writing your own macros.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展给定 crate 中的宏，并让你检查输出，这使得发现宏转录器或过程宏中深层次的错误变得更加容易。当你编写自己的宏时，`cargo-expand` 是一款不可或缺的工具。
- en: '**`cargo-hack`**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cargo-hack`**'
- en: Helps you check that your crate works with any combination of features enabled.
    The tool presents an interface similar to that of Cargo itself (like `cargo check`,
    `build`, and `test`) but gives you the ability to run a given command with all
    possible combinations (the *powerset*) of the crate’s features.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 帮助你检查你的 crate 是否与启用的任何功能组合兼容。该工具呈现一个类似于 Cargo 本身的界面（如 `cargo check`、`build`
    和 `test`），但它提供了运行给定命令与 crate 功能的所有可能组合（*幂集*）的能力。
- en: '**`cargo-llvm-lines`**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cargo-llvm-lines`**'
- en: Analyzes the mapping from Rust code to the intermediate representation (IR)
    that’s passed to the part of the Rust compiler that actually generates machine
    code (LLVM), and tells you which bits of Rust code produce the largest IR. This
    is useful because a larger IR means longer compile times, so identifying what
    Rust code generates a bigger IR (due to, for example, monomorphization) can highlight
    opportunities for reducing compile times.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析Rust代码到中间表示（IR）的映射，这些IR会传递给Rust编译器中的部分，用于生成机器代码（LLVM），并告诉你哪些Rust代码生成了最大的IR。这非常有用，因为更大的IR意味着更长的编译时间，因此找出生成更大IR的Rust代码（例如，由于单态化）可以帮助发现缩短编译时间的机会。
- en: '**`cargo-outdated`**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cargo-outdated`**'
- en: Checks whether any of your dependencies, either direct or transitive, have newer
    versions available. Crucially, unlike `cargo update`, it even tells you about
    new major versions, so it’s an essential tool for checking if you’re missing out
    on newer versions due to an outdated major version specifier. Just keep in mind
    that bumping the major version of a dependency may be a breaking change for your
    crate if you expose that dependency’s types in your interface!
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的任何依赖项（无论是直接的还是传递的）是否有新版本可用。关键是，不像`cargo update`，它甚至会告诉你有关新主版本的信息，因此它是检查你是否错过了由于过时的主版本指定而导致的新版本的重要工具。只需记住，提升依赖项的主版本可能会对你的crate产生破坏性影响，特别是如果你在接口中暴露了该依赖项的类型！
- en: '**`cargo-udeps`**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cargo-udeps`**'
- en: Identifies any dependencies listed in your *Cargo.toml* that are never actually
    used. Maybe you used them in the past but they’ve since become redundant, or maybe
    they should be moved to `dev-dependencies`; whatever the case, this tool helps
    you trim down bloat in your dependency closure.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别你在*Cargo.toml*中列出的、实际上从未使用过的任何依赖项。也许你曾经使用过它们，但它们现在已经变得多余，或者它们应该被移动到`dev-dependencies`；无论是哪种情况，这个工具都能帮助你削减依赖闭包中的冗余部分。
- en: While they’re not specifically tools for developing Rust, I highly recommend
    `fd` and `ripgrep` too—they’re excellent improvements over their predecessors
    `find` and `grep` and also happen to be written in Rust themselves. I use both
    every day.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们不是专门用于开发Rust的工具，我也强烈推荐`fd`和`ripgrep`——它们是`find`和`grep`的优秀替代品，而且它们本身也是用Rust编写的。我每天都在使用这两个工具。
- en: Libraries
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 库
- en: 'Next up are some useful but lesser-known crates that I reach for regularly,
    and that I suspect I will continue to depend on for a long time:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些有用但鲜为人知的crate，我经常用它们，并且我猜我会在很长一段时间内继续依赖它们：
- en: '**`bytes`**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**`bytes`**'
- en: Provides an efficient mechanism for passing around subslices of a single piece
    of contiguous memory without having to copy or deal with lifetimes. This is great
    in low-level networking code where you may need multiple views into a single chunk
    of bytes, and copying is a no-no.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供了一种高效的机制，用于在不进行复制或处理生命周期的情况下，传递单个连续内存块的子切片。这在低级网络代码中非常有用，因为你可能需要对一块字节进行多个视图，而复制操作是不可取的。
- en: '**`criterion`**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**`criterion`**'
- en: A statistics-driven benchmarking library that uses math to eliminate noise from
    benchmark measurements and reliably detect changes in performance over time. You
    should almost certainly be using it if you’re including micro-benchmarks in your
    crate.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种基于统计学的基准测试库，它利用数学方法消除基准测量中的噪音，并可靠地检测随时间变化的性能变化。如果你在你的crate中包含了微基准测试，你几乎可以肯定需要使用它。
- en: '**`cxx`**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**`cxx`**'
- en: Provides a safe and ergonomic mechanism for calling C++ code from Rust and Rust
    code from C++. If you’re willing to invest some time into declaring your interfaces
    more thoroughly in advance in exchange for much nicer cross-language compatibility,
    this library is well worth your attention.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供了一个安全且符合人体工程学的机制，用于从Rust调用C++代码，反之亦然。如果你愿意投入一些时间提前更彻底地声明你的接口，以换取更好的跨语言兼容性，那么这个库非常值得关注。
- en: '**`flume`**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**`flume`**'
- en: Implements a multi-producer, multi-consumer channel that is faster, more flexible,
    and simpler than the one included with the Rust standard library. It also supports
    both asynchronous and synchronous operation and so is a great bridge between those
    two worlds.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现了一个多生产者、多消费者的通道，比Rust标准库中包含的更快速、更灵活、更简单。它还支持异步和同步操作，因此它是连接这两个世界的一个很好的桥梁。
- en: '**`hdrhistogram`**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**`hdrhistogram`**'
- en: A Rust port of the High Dynamic Range (HDR) histogram data structure, which
    provides a compact representation of histograms across a wide range of values.
    Anywhere you currently track averages or min/max values, you should most likely
    be using an HDR histogram instead; it can give you much better insight into the
    distribution of your metrics.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个Rust版本的高动态范围（HDR）直方图数据结构，它提供了跨越广泛值范围的直方图的紧凑表示。任何当前跟踪平均值或最小/最大值的地方，你很可能应该改用HDR直方图，它能为你提供更好的指标分布洞察。
- en: '**`heapless`**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**`heapless`**'
- en: Supplies data structures that do not use the heap. Instead, `heapless`’s data
    structures are all backed by static memory, which makes them perfect for embedded
    contexts or other situations in which allocation is undesirable.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供不使用堆的数据结构。`heapless`的数据结构都由静态内存支持，这使得它们非常适合嵌入式环境或其他不希望进行内存分配的场景。
- en: '**`itertools`**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**`itertools`**'
- en: Extends the `Iterator` trait from the standard library with lots of new convenient
    methods for deduplication, grouping, and computing powersets. These extension
    methods can significantly reduce boilerplate in code, such as where you manually
    implement some common algorithm over a sequence of values, like finding the min
    and max at the same time (`Itertools::minmax`), or where you use a common pattern
    like checking that an iterator has exactly one item (`Itertools::exactly_one`).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展了标准库中的`Iterator`特性，提供了许多新的便捷方法用于去重、分组和计算幂集。这些扩展方法可以显著减少代码中的样板代码，例如在序列上手动实现某些常见算法时，如同时查找最小值和最大值（`Itertools::minmax`），或使用像检查迭代器是否恰好包含一个项这样的常见模式（`Itertools::exactly_one`）。
- en: '**`nix`**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**`nix`**'
- en: Provides idiomatic bindings to system calls on Unix-like systems, which allows
    for a much better experience than trying to cobble together the C-compatible FFI
    types yourself when working with something like `libc` directly.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供类Unix系统上的系统调用的惯用绑定，与直接使用像`libc`这样的C兼容FFI类型相比，能带来更好的体验。
- en: '**`pin-project`**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**`pin-project`**'
- en: Provides macros that enforce the pinning safety invariants for annotated types,
    which in turn provide a safe pinning interface to those types. This allows you
    to avoid most of the hassle of getting `Pin` and `Unpin` right for your own types.
    There’s also `pin-project-lite`, which avoids the (currently) somewhat heavy dependency
    on the procedural macro machinery at the cost of slightly worse ergonomics.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供了强制执行引脚安全不变量的宏，适用于注解类型，这反过来为这些类型提供了一个安全的引脚接口。这使你可以避免大部分自己实现`Pin`和`Unpin`时的麻烦。另外还有`pin-project-lite`，它避免了（当前）对过程宏机制的相对沉重依赖，但代价是稍微降低了易用性。
- en: '**`ring`**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**`ring`**'
- en: Takes the good parts from the cryptography library BoringSSL, written in C,
    and brings them to Rust through a fast, simple, and hard-to-misuse interface.
    It’s a great starting point if you need to use cryptography in your crate. You’ve
    already most likely come across this in the `rustls` library, which uses `ring`
    to provide a modern, secure-by-default TLS stack.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从C语言编写的加密库BoringSSL中提取出精华，并通过一个快速、简单且难以滥用的接口将其带入Rust。如果你需要在自己的crate中使用加密，这是一个很好的起点。你可能已经在`rustls`库中遇到过它，该库使用`ring`提供现代、安全默认的TLS栈。
- en: '**`slab`**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**`slab`**'
- en: Implements an efficient data structure to use in place of `HashMap<Token, T>`,
    where `Token` is an opaque type used only to differentiate between entries in
    the map. This kind of pattern comes up a lot when managing resources, where the
    set of current resources must be managed centrally but individual resources must
    also be accessible somehow.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现了一个高效的数据结构，用于替代`HashMap<Token, T>`，其中`Token`是一个仅用于区分映射中的条目的不透明类型。在资源管理中经常使用这种模式，其中当前资源的集合必须集中管理，但单个资源也必须能够以某种方式访问。
- en: '**`static_assertions`**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**`static_assertions`**'
- en: Provides static assertions—that is, assertions that are evaluated at, and thus
    may fail at, compile time. You can use it to assert things like that a type implements
    a given trait (like `Send`) or is of a given size. I highly recommend adding these
    kinds of assertions for code where those guarantees are likely to be important.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供静态断言——也就是说，在编译时进行评估的断言，因此可能会在编译时失败。你可以使用它来断言某个类型实现了给定的特性（例如`Send`）或具有给定的大小。我强烈推荐在那些保证可能非常重要的代码中加入这种类型的断言。
- en: '**`structopt`**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**`structopt`**'
- en: Wraps the well-known argument parsing library `clap` and provides a way to describe
    your application’s command line interface entirely using the Rust type system
    (plus macro annotations). When you parse your application’s arguments, you get
    a value of the type you defined, and you thus get all the type checking benefits,
    like exhaustive matching and IDE auto-complete.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包装了著名的参数解析库 `clap`，并提供了一种方式，使用 Rust 类型系统（加上宏注解）来描述应用程序的命令行接口。当你解析应用程序的参数时，你会得到你定义的类型的值，从而获得所有类型检查的好处，比如穷尽匹配和
    IDE 自动完成。
- en: '**`thiserror`**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**`thiserror`**'
- en: Makes writing custom enumerated error types, like the ones we discussed in Chapter
    4, a joy. It takes care of implementing the recommended traits and following the
    established conventions and leaves you to define just the critical bits that are
    unique to your application.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使得编写自定义枚举错误类型（比如我们在第 4 章讨论的那种）变得轻松愉快。它会处理实现推荐的特性并遵循既定的惯例，而你只需要定义那些对你的应用程序独特且至关重要的部分。
- en: '**`tower`**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**`tower`**'
- en: Effectively takes the function signature `async fn(Request) -> Response` and
    implements an entire ecosystem on top of it. At its core is the `Service` trait,
    which represents a type that can turn a request into a response (something I suspect
    may make its way into the standard library one day). This is a great abstraction
    to build anything that looks like a service on top of.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实质上，它将函数签名 `async fn(Request) -> Response` 进行封装并在其上实现了一个完整的生态系统。其核心是 `Service`
    特性，代表一种类型，可以将请求转换为响应（我怀疑它有一天可能会进入标准库）。这是一个很好的抽象，可以用来构建任何类似服务的东西。
- en: '**`tracing`**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**`tracing`**'
- en: Provides all the plumbing needed to efficiently trace the execution of your
    applications. Crucially, it is agnostic to the types of events you’re tracing
    and what you want to do with those events. This library can be used for logging,
    metrics collection, debugging, profiling, and obviously tracing, all with the
    same machinery and interfaces.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供了高效追踪应用程序执行所需的所有基础设施。至关重要的是，它对你追踪的事件类型以及你想对这些事件做什么保持中立。这个库可以用于日志记录、度量收集、调试、性能分析，当然也包括追踪，所有这些都可以用相同的机制和接口来实现。
- en: Rust Tooling
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rust 工具
- en: The Rust toolchain has a few features up its sleeve that you may not know to
    look for. These are usually for very specific use cases, but if they match yours,
    they can be lifesavers!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 工具链有一些你可能不知道的特性，这些特性通常适用于非常具体的使用场景，但如果它们适合你的需求，它们可以成为救命稻草！
- en: Rustup
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Rustup
- en: 'Rustup, the Rust toolchain installer, does its job so efficiently that it tends
    to fade into the background and get forgotten about. You’ll occasionally use it
    to update your toolchain, set a directory override, or install a component, but
    that’s about it. However, Rustup supports one very handy trick that it’s worthwhile
    to know about: the toolchain override shorthand. You can pass `+toolchain` as
    the first argument to any Rustup-managed binary, and the binary will work as if
    you’d set an override for the given toolchain, run the command, and then reset
    the override back to what it was previously. So, `cargo +nightly miri` will run
    Miri using the nightly toolchain, and `cargo +1.53.0 check` will check if the
    code compiles with Rust 1.53.0\. The latter comes in particularly handy for checking
    that you haven’t broken your minimum supported Rust version contract.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Rustup，Rust 工具链安装器，工作非常高效，以至于它通常会消失在背景中并被遗忘。你偶尔会用它来更新工具链、设置目录覆盖或安装组件，除此之外基本不太使用。然而，Rustup
    支持一个非常实用的小技巧，值得了解：工具链覆盖简写。你可以将 `+toolchain` 作为第一个参数传递给任何由 Rustup 管理的二进制文件，二进制文件会按你设置的工具链覆盖运行该命令，并在运行完后重置覆盖为之前的状态。所以，`cargo
    +nightly miri` 会使用 nightly 工具链运行 Miri，而 `cargo +1.53.0 check` 会检查代码是否能用 Rust 1.53.0
    编译。后者在检查你是否破坏了最低支持的 Rust 版本协议时特别有用。
- en: Rustup also has a neat subcommand, `doc`, that opens a local copy of the Rust
    standard library documentation for the current version of the Rust compiler in
    your browser. This is invaluable if you’re developing on the go without an internet
    connection!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Rustup 还有一个非常方便的子命令 `doc`，它会在浏览器中打开当前 Rust 编译器版本的 Rust 标准库文档本地副本。如果你在没有网络连接的情况下进行开发，这个功能非常有价值！
- en: Cargo
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cargo
- en: 'Cargo also has some handy features that aren’t always easy to discover. The
    first of these is `cargo tree`, a Cargo subcommand built right into Cargo itself
    for inspecting a crate’s dependency graph. This command’s primary purpose is to
    print the dependency graph as a tree. This can be useful on its own, but where
    `cargo tree` really shines is through the `--invert` option: it takes a crate
    identifier and produces an inverted tree showing all the dependency paths from
    the current crate that bring in that dependency. So, for example, `cargo tree
    -i rand` will print all of the ways in which the current crate depends on any
    version of `rand`, including through transitive dependencies. This is invaluable
    if you want to eliminate a dependency, or a particular version of a dependency,
    and wonder why it still keeps being pulled in. You can also pass the `-e features`
    option to include information about why each Cargo feature of the crate in question
    is enabled.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo 还提供了一些不太容易发现的实用功能。其中第一个是 `cargo tree`，这是一个内置于 Cargo 自身的子命令，用于检查 crate
    的依赖关系图。这个命令的主要功能是将依赖关系图以树状结构打印出来。这个功能本身就很有用，但 `cargo tree` 真正的亮点是 `--invert` 选项：它接受一个
    crate 标识符，并生成一个反转的树，显示从当前 crate 开始的所有依赖路径，找到该依赖项。例如，`cargo tree -i rand` 会列出当前
    crate 如何依赖任何版本的 `rand`，包括通过传递依赖的方式。如果你想删除某个依赖项，或者某个依赖项的特定版本，并想知道为什么它仍然被拉入依赖，这个功能非常有用。你还可以使用
    `-e features` 选项，包含有关为什么启用目标 crate 的每个 Cargo 特性的详细信息。
- en: Speaking of Cargo subcommands, it’s really easy to write your own, whether for
    sharing with other people or just for your own local development. When Cargo is
    invoked with a subcommand it doesn’t recognize, it checks whether a program by
    the name `cargo-$subcommand` exists. If it does, Cargo invokes that program and
    passes it any arguments that were passed on the command line—so, `cargo foo bar`
    will invoke `cargo-foo` with the argument `bar`. Cargo will even integrate this
    command with `cargo help` by translating `cargo help foo` into a call to `cargo-foo
    --help`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 说到 Cargo 子命令，写自己的子命令其实非常简单，无论是为了与他人分享，还是仅仅为了本地开发。当 Cargo 被调用时，如果遇到一个它无法识别的子命令，它会检查是否存在一个名为
    `cargo-$subcommand` 的程序。如果存在，Cargo 会调用该程序并传递任何命令行参数——例如，`cargo foo bar` 会调用 `cargo-foo`
    并传递参数 `bar`。Cargo 甚至会将这个命令与 `cargo help` 集成，将 `cargo help foo` 转换为对 `cargo-foo
    --help` 的调用。
- en: 'As you work on more Rust projects, you may notice that Cargo (and Rust more
    generally) isn’t exactly forgiving when it comes to disk space. Each project gets
    its own target directory for its compilation artifacts, and over time you end
    up accumulating several identical copies of compiled artifacts for common dependencies.
    Keeping artifacts for each project separate is a sensible choice, as they aren’t
    necessarily compatible across projects (say, if one project uses different compiler
    flags than another). But in most developer environments, sharing build artifacts
    is entirely reasonable and can save a fair amount of compilation time when switching
    between projects. Luckily, configuring Cargo to share build artifacts is simple:
    just set `[build] target` in your *~/.cargo/config.toml* file to the directory
    you want those shared artifacts to go in, and Cargo will take care of the rest.
    No more target directories in sight! Just make sure you clean out that directory
    every now and again too, and be aware that `cargo clean` will now clean *all*
    of your projects’ build artifacts.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你参与更多 Rust 项目，你可能会注意到 Cargo（以及 Rust 更广泛的情况）在磁盘空间方面并不宽容。每个项目都会有自己的目标目录，用于存放其编译结果，随着时间的推移，你会积累多个相同的已编译文件副本，尤其是对于常见的依赖。为每个项目保持独立的编译产物是一个合理的选择，因为它们在不同项目之间不一定兼容（比如，一个项目使用的编译器标志可能和另一个项目不同）。但是在大多数开发环境中，共享构建产物是完全合理的，并且在不同项目之间切换时，可以节省相当多的编译时间。幸运的是，配置
    Cargo 以共享构建产物非常简单：只需在你的 *~/.cargo/config.toml* 文件中设置 `[build] target` 为你希望共享的构建产物所在的目录，Cargo
    会处理其余的工作。再也不需要目标目录了！只需确保定期清理该目录，并且要知道，`cargo clean` 现在会清除*所有*项目的构建产物。
- en: Finally, if you ever feel like Cargo is taking a suspiciously long time to build
    your crate, you can reach for the currently unstable Cargo `-Ztimings` flag. Running
    Cargo with that flag outputs information about how long it took to process each
    crate, how long build scripts took to run, what crates had to wait for what other
    crates to finish compiling, and tons of other useful metrics. This might highlight
    a particularly slow dependency chain that you can then work to eliminate, or reveal
    a build script that compiles a native dependency from scratch that you can make
    use system libraries instead. If you want to dive even deeper, there’s also `rustc
    -Ztime-passes`, which emits information about where time is spent inside of the
    compiler for each crate—though that information is likely only useful if you’re
    looking to contribute to the compiler itself.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你觉得 Cargo 构建你的 crate 的时间异常长，你可以尝试当前不稳定的 Cargo `-Ztimings`标志。使用该标志运行 Cargo
    会输出关于每个 crate 处理所花时间的信息、构建脚本运行时间、哪些 crate 需要等待其他 crate 编译完成的时间，以及大量其他有用的度量信息。这可能会突出一个特别慢的依赖链，你可以着手消除它，或者揭示出一个构建脚本，它从头开始编译一个本地依赖库，你可以改为使用系统库。如果你想深入挖掘，还可以使用`rustc
    -Ztime-passes`，它会输出关于每个 crate 在编译器内部花费时间的相关信息——不过这些信息可能只有在你打算为编译器本身做贡献时才有用。
- en: rustc
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rustc
- en: The Rust compiler also has some lesser-known features that can prove useful
    to enterprising developers. The first is the currently unstable `-Zprint-type-sizes`
    argument, which prints the sizes of all the types in the current crate. This produces
    a lot of information for all but the tiniest crates but is immensely valuable
    when trying to determine the source of unexpected time spent in calls to `memcpy`
    or to find ways to reduce memory use when allocating lots of objects of a particular
    type. The `-Zprint-type-sizes` argument also displays the computed alignment and
    layout for each type, which may point you to places where turning, say, a `usize`
    into a `u32` could have a significant impact on a type’s in-memory representation.
    After you debug a particular type’s size, alignment, and layout, I recommend adding
    static assertions to make sure that they don’t regress over time. You may also
    be interested in the `variant_size_differences` lint, which issues a warning if
    a crate contains `enum` types whose variants significantly differ in size.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 编译器还有一些不太为人所知的功能，对于有创新精神的开发者来说，这些功能可能非常有用。第一个是当前不稳定的`-Zprint-type-sizes`参数，它打印当前
    crate 中所有类型的大小。对于除最小的 crate 外，这会产生大量的信息，但当你试图确定调用`memcpy`时意外的时间消耗来源，或者寻找减少内存使用的方法，尤其是当分配大量特定类型的对象时，它非常有价值。`-Zprint-type-sizes`参数还会显示每种类型的计算对齐方式和布局，这可能会引导你发现，比如将一个`usize`类型转换为`u32`可能会对类型在内存中的表示产生重大影响。在调试完某个特定类型的大小、对齐和布局后，我建议你添加静态断言，确保它们不会随着时间的推移而发生回归。你也许会对`variant_size_differences`
    lint感兴趣，如果一个 crate 包含大小差异显著的`enum`类型的变体，它会发出警告。
- en: If your profiling samples look weird, with stack frames reordered or entirely
    missing, you could also try `-Cforce-frame-pointers = yes`. Frame pointers provide
    a more reliable way to unwind the stack—which is done a lot during profiling—at
    the cost of an extra register being used for function calls. Even though stack
    unwinding *should* work fine with just regular debug symbols enabled (remember
    to set `debug = true` when using the release profile), that’s not always the case,
    and frame pointers may take care of any issues you do encounter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的性能分析样本看起来很奇怪，堆栈帧被重新排序或完全缺失，你也可以尝试`-Cforce-frame-pointers = yes`。帧指针提供了一种更可靠的方式来展开堆栈——在性能分析中，这个操作会被频繁执行——代价是每次函数调用时会使用一个额外的寄存器。即使堆栈展开*应该*在只启用常规调试符号的情况下正常工作（记得在使用发布配置时设置`debug
    = true`），但这并非总是如此，帧指针可能解决你遇到的任何问题。
- en: The Standard Library
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准库
- en: The Rust standard library is generally considered to be small compared to those
    of other programming languages, but what it lacks in breadth, it makes up for
    in depth; you won’t find a web server implementation or an X.509 certificate parser
    in Rust’s standard library, but you will find more than 40 different methods on
    the `Option` type alongside over 20 trait implementations. For the types it does
    include, Rust does its best to make available any relevant functionality that
    meaningfully improves ergonomics, so you avoid all that verbose boilerplate that
    can so easily arise otherwise. In this section, I’ll present some types, macros,
    functions, and methods from the standard library that you may not have come across
    before, but that can often simplify or improve (or both) your code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 标准库通常被认为比其他编程语言的标准库要小，但它在深度上弥补了广度的不足；你不会在 Rust 的标准库中找到一个 Web 服务器实现或 X.509
    证书解析器，但你会找到超过 40 种与 `Option` 类型相关的方法，以及 20 多个特征实现。对于包含的类型，Rust 尽力提供所有相关功能，以显著改善可用性，避免了那些容易出现的冗长模板代码。在本节中，我将介绍一些你可能之前没有遇到过的标准库类型、宏、函数和方法，它们往往能简化或改进（或两者兼而有之）你的代码。
- en: Macros and Functions
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 宏和函数
- en: Let’s start off with a few free-standing utilities. First up is the `write!`
    macro, which lets you use format strings to write into a file, a network socket,
    or anything else that implements `Write`. You may already be familiar with it—but
    one little-known feature of `write!` is that it works with both `std::io::Write`
    and `std::fmt::Write`, which means you can use it to write formatted text directly
    into a `String`. That is, you can write `use std::fmt::Write; write!(&mut s, "{}+1={}",
    x, x + 1);` to append the formatted text to the `String s`!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从几个独立的实用工具开始。第一个是 `write!` 宏，它允许你使用格式化字符串写入文件、网络套接字或任何其他实现了 `Write` 的对象。你可能已经熟悉它了——但
    `write!` 有一个鲜为人知的特性，那就是它可以同时与 `std::io::Write` 和 `std::fmt::Write` 一起使用，这意味着你可以直接将格式化文本写入
    `String` 中。也就是说，你可以写 `use std::fmt::Write; write!(&mut s, "{}+1={}", x, x + 1);`
    将格式化的文本附加到 `String s` 中！
- en: The `iter::once` function takes any value and produces an iterator that yields
    that value once. This comes in handy when calling functions that take iterators
    if you don’t want to allocate, or when combined with `Iterator::chain` to append
    a single item to an existing iterator.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`iter::once` 函数接受一个值并生成一个迭代器，该迭代器只会返回该值一次。当调用需要迭代器的函数时，如果你不想分配额外的内存，或者与 `Iterator::chain`
    结合使用时，它特别有用，能够将单个元素附加到现有的迭代器上。'
- en: 'We briefly talked about `mem::replace` in Chapter 1, but it’s worth bringing
    up again in case you missed it. This function takes an exclusive reference to
    a `T` and an owned `T`, swaps the two so that the referent is now the owned `T`,
    and returns ownership of the previous referent. This is useful when you need to
    take ownership of a value in a situation where you have only an exclusive reference,
    such as in implementations of `Drop`. See also `mem::take` for when `T: Default`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在第一章简要提到了 `mem::replace`，但值得再提一次，以防你错过了它。这个函数接受对 `T` 的独占引用和一个拥有的 `T`，交换这两者，使得引用对象现在变为拥有的
    `T`，并返回先前引用对象的所有权。当你需要在仅有独占引用的情况下获取一个值的所有权时，这个函数非常有用，比如在 `Drop` 的实现中。对于 `T: Default`，还可以参考
    `mem::take`。'
- en: Types
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型
- en: Next, let’s look at some handy standard library types. The `BufReader` and `BufWriter`
    types are a must for I/O operations that issue many small read or write calls
    to the underlying I/O resource. These types wrap the respective underlying `Read`
    or `Write` and implement `Read` and `Write` themselves, but they additionally
    buffer the operations to the I/O resource such that many small reads do only one
    large read, and many small writes do only one large write. This can significantly
    improve performance as you don’t have to cross the system call barrier into the
    operating system as often.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看一些方便的标准库类型。`BufReader` 和 `BufWriter` 类型是进行 I/O 操作时必不可少的，它们会对底层 I/O
    资源发出许多小的读写请求。这些类型包装了各自底层的 `Read` 或 `Write`，并实现了 `Read` 和 `Write` 接口，但它们额外对操作进行缓冲，使得许多小的读取操作合并为一次大的读取，许多小的写入操作合并为一次大的写入。这可以显著提高性能，因为你不需要频繁地跨越系统调用边界进入操作系统。
- en: The `Cow` type, mentioned in Chapter 3, is useful when you want flexibility
    in what types you hold or need flexibility in what you return. You’ll rarely use
    `Cow` as a function argument (recall that you should let the caller allocate if
    necessary), but it’s invaluable as a return type as it allows you to accurately
    represent the return types of functions that may or may not allocate. It’s also
    a perfect fit for types that can be used as inputs *or* outputs, such as core
    types in RPC-like APIs. Say we have a type `EntityIdentifier` like in [Listing
    13-1](#listing13-1) that is used in an RPC service interface.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cow` 类型，如第3章所述，在你需要对持有的类型或返回的类型有灵活性时非常有用。你很少会将 `Cow` 用作函数参数（回想一下，如果有必要的话，你应该让调用者分配），但作为返回类型时它是无价的，因为它可以精确地表示那些可能会或可能不会分配内存的函数的返回类型。它也非常适合那些既可以作为输入
    *也* 可以作为输出的类型，比如类似 RPC 的 API 中的核心类型。假设我们有一个类型 `EntityIdentifier`，如[示例 13-1](#listing13-1)所示，它用于
    RPC 服务接口中。'
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 13-1: A representation of a combined input/output type that requires
    allocation'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 13-1：一个需要分配的组合输入/输出类型的表示
- en: 'Now imagine two methods: `get_entity` takes an `EntityIdentifier` as an argument,
    and `find_by` returns an `EntityIdentifier` based on some search parameters. The
    `get_entity` method requires only a reference since the identifier will (presumably)
    be serialized before being sent to the server. But for `find_by`, the entity will
    be deserialized from the server response and must therefore be represented as
    an owned value. If we make `get_entity` take `&EntityIdentifier`, it will mean
    callers must still allocate owned `String`s to call `get_entity` even though that’s
    not required by the interface, since it’s required to construct an `EntityIdentifier`
    in the first place! We could instead introduce a separate type for `get_entity`,
    `EntityIdenifierRef`, that holds only `&str` types, but then we’d have two types
    to represent one thing. `Cow` to the rescue! [Listing 13-2](#listing13-2) shows
    an `EntityIdentifier` that instead holds `Cow`s internally.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设有两个方法：`get_entity` 以 `EntityIdentifier` 作为参数，`find_by` 根据一些搜索参数返回一个 `EntityIdentifier`。`get_entity`
    方法只需要一个引用，因为标识符将（假设）在发送到服务器之前被序列化。但对于 `find_by`，实体将从服务器响应中反序列化，因此必须作为拥有的值来表示。如果我们让
    `get_entity` 接受 `&EntityIdentifier`，那就意味着调用者仍然必须分配拥有的 `String` 来调用 `get_entity`，即使接口并不要求这么做，因为它在构造
    `EntityIdentifier` 时是必要的！我们可以为 `get_entity` 引入一个单独的类型 `EntityIdenifierRef`，它只持有
    `&str` 类型，但那样的话我们就得用两种类型来表示同一件事。`Cow` 来拯救我们！[示例 13-2](#listing13-2) 展示了一个 `EntityIdentifier`，它内部持有
    `Cow`。
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 13-2: A representation of a combined input/output type that does not
    require allocation'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 13-2：一个不需要分配的组合输入/输出类型的表示
- en: With this construction, `get_entity` can take any `EntityIdentifier<'_>`, which
    allows the caller to use just references to call the method. And `find_by` can
    return `EntityIdentifier<'static>`, where all the fields are `Cow::Owned`. One
    type shared across both interfaces, with no unnecessary allocation requirements!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种构造，`get_entity` 可以接受任何 `EntityIdentifier<'_>`，这使得调用者仅需使用引用即可调用该方法。而 `find_by`
    可以返回 `EntityIdentifier<'static>`，其中所有字段都是 `Cow::Owned`。两个接口共享同一个类型，无需不必要的分配！
- en: The `std::sync::Once` type is a synchronization primitive that lets you run
    a given piece of code exactly once, at initialization time. This is great for
    initialization that’s part of an FFI where the library on the other side of the
    FFI boundary requires that the initialization is performed only once.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::sync::Once` 类型是一个同步原语，它允许你在初始化时只运行某段代码一次。这对于 FFI 中的初始化非常有用，尤其是当 FFI 边界另一边的库要求初始化只执行一次时。'
- en: The `VecDeque` type is an oft-neglected member of `std::collections` that I
    find myself reaching for surprisingly often—basically, whenever I need a stack
    or a queue. Its interface is similar to that of a `Vec`, and like `Vec` its in-memory
    representation is a single chunk of memory. The difference is that `VecDeque`
    keeps track of both the start and end of the actual data in that single allocation.
    This allows constant-time push and pop from *either* side of the `VecDeque`, meaning
    it can be used as a stack, as a queue, or even both at the same time. The cost
    you pay is that the values are no longer necessarily contiguous in memory (they
    may have wrapped around), which means that `VecDeque<T>` does not implement `AsRef<[T]>`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`VecDeque`类型是`std::collections`中的一个常被忽视的成员，我发现自己经常用到它——基本上，每当我需要栈或队列时。它的接口类似于`Vec`，而且像`Vec`一样，它在内存中的表示是一个单一的内存块。不同之处在于，`VecDeque`同时跟踪数据的开始和结束位置，这使得从`VecDeque`的*任意*一侧执行推入和弹出操作时能够保持常数时间复杂度，这意味着它可以用作栈、队列，甚至同时作为两者。你需要支付的代价是，值在内存中不再一定是连续的（它们可能已经绕回），这意味着`VecDeque<T>`没有实现`AsRef<[T]>`。'
- en: Methods
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方法
- en: Let’s round off with a rapid-fire look at some neat methods. First up is `Arc::make_mut`,
    which takes a `&mut Arc<T>` and gives you a `&mut T`. If the `Arc` is the last
    one in existence, it gives you the `T` that was behind the `Arc`; otherwise, it
    allocates a new `Arc<T>` that holds a clone of the `T`, swaps that in for the
    currently referenced `Arc`, and then gives `&mut` to the `T` in the new singleton
    `Arc`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过快速浏览一些有用的方法来结束这一部分。首先是`Arc::make_mut`，它接受一个`&mut Arc<T>`并返回一个`&mut T`。如果`Arc`是唯一存在的，它会返回`Arc`背后的`T`；否则，它会分配一个新的`Arc<T>`，其中包含`T`的克隆，替换掉当前引用的`Arc`，然后将`&mut`赋给新单例`Arc`中的`T`。
- en: 'The `Clone::clone_from` method is an alternative form of `.clone()` that lets
    you reuse an instance of the type you clone rather than allocate a new one. In
    other words, if you already have an `x: T`, you can do `x.clone_from(y)` rather
    than `x = y.clone()`, and you might save yourself some allocations.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Clone::clone_from`方法是`.clone()`的另一种形式，它允许你重用要克隆的类型实例，而不是分配一个新的实例。换句话说，如果你已经有了一个`x:
    T`，你可以执行`x.clone_from(y)`，而不是`x = y.clone()`，这样可能会节省一些内存分配。'
- en: '`std::fmt::Formatter::debug_*` is by far the easiest way to implement `Debug`
    yourself if `#[derive(Debug)]` won’t work for your use case, such as if you want
    to include only some fields or expose information that isn’t exposed by the ``Debug
    implementations of your type’s fields. When implementing the `fmt` method of `Debug`,
    simply call the appropriate `debug_` method on the `Formatter` that’s passed in
    (`debug_struct` or `debug_map`, for example), call the included methods on the
    resulting type to fill in details about the type (like `field` to add a field
    or `entries` to add a key/value entry), and then call `finish`.``'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::fmt::Formatter::debug_*`是实现`Debug`的最简单方法，特别是当`#[derive(Debug)]`无法满足你的需求时，比如如果你只想包括某些字段或暴露一些`Debug`实现未暴露的字段信息。在实现`Debug`的`fmt`方法时，只需在传入的`Formatter`上调用适当的`debug_`方法（例如`debug_struct`或`debug_map`），然后在返回的类型上调用包含的方法来填写类型的详细信息（如使用`field`添加字段，或使用`entries`添加键/值条目），最后调用`finish`。'
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
