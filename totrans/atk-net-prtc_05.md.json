["```\nC:\\SuperFunkyChat> ChatServer.exe\nChatServer (c) 2017 James Forshaw\nWARNING: Don't use this for a real chat system!!!\nRunning server on port 12345 Global Bind False\n```", "```\nC:\\SuperFunkyChat> ChatClient.exe USERNAME HOSTNAME\nChatClient (c) 2017 James Forshaw\nWARNING: Don't use this for a real chat system!!!\nConnecting to localhost:12345\n```", "```\nConnection from 127.0.0.1:49825\nReceived packet ChatProtocol.HelloProtocolPacket\nHello Packet for User: alice HostName: borax\n```", "```\n# alice - Session\n> Hello There!\n< bob: I've just joined from borax\n< bob: How are you?\n< bob: This is nice isn't it?\n< bob: Woo\n< Server: 'bob' has quit, they said 'I'm going away now!'\n< bob: I've just joined from borax\n< bob: Back again for another round.\n< Server: 'bob' has quit, they said 'Nope!'\n> /quit\n< Server: Don't let the door hit you on the way out!\n```", "```\n# bob - Session 1\n> How are you?\n> This is nice isn't it?\n> /list\n< User List\n< alice - borax\n> /msg alice Woo\n> /quit\n< Server: Don't let the door hit you on the way out!\n```", "```\n# bob - Session 2\n> Back again for another round.\n> /quit Nope!\n< Server: Don't let the door hit you on the way out!\n```", "```\n00000000  42 49 4e 58                                        BINX➊\n00000004  00 00 00 0d                                        ....➋\n00000008  00 00 03 55                                        ...U➌\n0000000C  00                                                 .➍\n0000000D  05 61 6c 69 63 65 04 4f  4e 59 58 00               .alice.O NYX.➎\n00000019  00 00 00 14                                        ....\n0000001D  00 00 06 3f                                        ...?\n00000021  03                                                 .\n00000022  05 61 6c 69 63 65 0c 48  65 6c 6c 6f 20 54 68 65   .alice.H ello The\n00000032  72 65 21                                           re!\n--snip--\n```", "```\n$ xxd bytes_outbound.bin\n00000000: 4249 4e58 0000 000f 0000 0473 0003 626f  BINX.......s..bo\n00000010: 6208 7573 6572 2d62 6f78 0000 0000 1200  b.user-box......\n00000020: 0005 8703 0362 6f62 0c48 6f77 2061 7265  .....bob.How are\n00000030: 2079 6f75 3f00 0000 1c00 0008 e303 0362   you?..........b\n00000040: 6f62 1654 6869 7320 6973 206e 6963 6520  ob.This is nice\n00000050: 6973 6e27 7420 6974 3f00 0000 0100 0000  isn't it?.......\n00000060: 0606 0000 0013 0000 0479 0505 616c 6963  .........y..alic\n00000070: 6500 0000 0303 626f 6203 576f 6f00 0000  e.....bob.Woo...\n00000080: 1500 0006 8d02 1349 276d 2067 6f69 6e67  .......I'm going\n00000090: 2061 7761 7920 6e6f 7721                  away now!\n```", "```\n   from struct import unpack\n   import sys\n   import os\n # Read fixed number of bytes\n➊ def read_bytes(f, l):\n       bytes = f.read(l)\n    ➋ if len(bytes) != l:\n           raise Exception(\"Not enough bytes in stream\")\n       return bytes\n\n   # Unpack a 4-byte network byte order integer\n➌ def read_int(f):\n       return unpack(\"!i\", read_bytes(f, 4))[0]\n\n   # Read a single byte\n➍ def read_byte(f):\n       return ord(read_bytes(f, 1))\n\n   filename = sys.argv[1]\n   file_size = os.path.getsize(filename)\n\n   f = open(filename, \"rb\")\n➎ print(\"Magic: %s\" % read_bytes(f, 4))\n\n   # Keep reading until we run out of file\n➏ while f.tell() < file_size:\n       length = read_int(f)\n       unk1 = read_int(f)\n       unk2 = read_byte(f)\n       data = read_bytes(f, length - 1)\n       print(\"Len: %d, Unk1: %d, Unk2: %d, Data: %s\"\n           % (length, unk1, unk2, data))\n```", "```\n$ python3 read_protocol.py bytes_outbound.bin\nMagic: b'BINX'\nLen: 15, Unk1: 1139, Unk2: 0, Data: b'\\x03bob\\x08user-box\\x00'\nLen: 18, Unk1: 1415, Unk2: 3, Data: b'\\x03bob\\x0cHow are you?'\nLen: 28, Unk1: 2275, Unk2: 3, Data: b\"\\x03bob\\x16This is nice isn't it?\"\nLen: 1, Unk1: 6, Unk2: 6, Data: b''\nLen: 19, Unk1: 1145, Unk2: 5, Data: b'\\x05alice\\x00\\x00\\x00\\x03\\x03bob\\x03Woo'\nLen: 21, Unk1: 1677, Unk2: 2, Data: b\"\\x13I'm going away now!\"\n```", "```\n$ python3 read_protocol.py bytes_inbound.bin\nMagic: b'\\x00\\x00\\x00\\x02'\nLength: 1, Unknown1: 16777216, Unknown2: 0, Data: b''\nTraceback (most recent call last):\n  File \"read_protocol.py\", line 31, in <module>\n    data = read_bytes(f, length - 1)\n  File \"read_protocol.py\", line 9, in read_bytes\n    raise Exception(\"Not enough bytes in stream\")\nException: Not enough bytes in stream\n```", "```\nif read_bytes(f, 4) != b'BINX': f.seek(0)\n```", "```\n$ python3 read_protocol.py bytes_inbound.bin\nLen: 2, Unk1: 1, Unk2: 1, Data: b'\\x00'\nLen: 36, Unk1: 3146, Unk2: 3, Data: b\"\\x03bob\\x1eI've just joined from user-box\"\nLen: 18, Unk1: 1415, Unk2: 3, Data: b'\\x03bob\\x0cHow are you?'\n```", "```\nOUTBOUND: Len: 1, Unk1: 6, Unk2: 6, Data: b''\nINBOUND:  Len: 2, Unk1: 1, Unk2: 1, Data: b'\\x00'\n```", "```\ndef calc_chksum(unk2, data):\n    chksum = unk2\n    for i in range(len(data)):\n        chksum += ord(data[i:i+1])\n    return chksum\n```", "```\nUnk2: 0➊, Data: b'\\x03bob\\x08user-box\\x00'\nUnk2: 3➋, Data: b'\\x03bob\\x0cHow are you?'\nUnk2: 3➌, Data: b\"\\x03bob\\x16This is nice isn't it?\"\n*SNIP*\n```", "```\nwireshark -X lua_script:</path/to/script.lua>\n```", "```\n   -- Declare our chat protocol for dissection\n➊ chat_proto = Proto(\"chat\",\"SuperFunkyChat Protocol\")\n   -- Specify protocol fields\n➋ chat_proto.fields.chksum = ProtoField.uint32(\"chat.chksum\", \"Checksum\",\n                                                base.HEX)\n   chat_proto.fields.command = ProtoField.uint8(\"chat.command\", \"Command\")\n   chat_proto.fields.data = ProtoField.bytes(\"chat.data\", \"Data\")\n\n   -- Dissector function\n   -- buffer: The UDP packet data as a \"Testy Virtual Buffer\"\n   -- pinfo: Packet information\n   -- tree: Root of the UI tree\n➌ function chat_proto.dissector(buffer, pinfo, tree)\n       -- Set the name in the protocol column in the UI\n    ➍ pinfo.cols.protocol = \"CHAT\"\n\n       -- Create sub tree which represents the entire buffer.\n    ➎ local subtree = tree:add(chat_proto, buffer(),\n                                \"SuperFunkyChat Protocol Data\")\n       subtree:add(chat_proto.fields.chksum, buffer(0, 4))\n       subtree:add(chat_proto.fields.command, buffer(4, 1))\n       subtree:add(chat_proto.fields.data, buffer(5))\n   end\n\n   -- Get UDP dissector table and add for port 12345\n➏ udp_table = DissectorTable.get(\"udp.port\")\n   udp_table:add(12345, chat_proto)\n```", "```\nb'\\x03bob\\x0cHow are you?'\nb\"\\x03bob\\x16This is nice isn't it?\"\n```", "```\n   -- Declare our chat protocol for dissection\n   chat_proto = Proto(\"chat\",\"SuperFunkyChat Protocol\")\n   -- Specify protocol fields\n   chat_proto.fields.chksum = ProtoField.uint32(\"chat.chksum\", \"Checksum\",\n                                                base.HEX)\n   chat_proto.fields.command = ProtoField.uint8(\"chat.command\", \"Command\")\n   chat_proto.fields.data = ProtoField.bytes(\"chat.data\", \"Data\")\n\n   -- buffer: A TVB containing packet data\n   -- start: The offset in the TVB to read the string from\n   -- returns The string and the total length used\n➊ function read_string(buffer, start)\n       local len = buffer(start, 1):uint()\n       local str = buffer(start + 1, len):string()\n       return str, (1 + len)\n   end\n\n   -- Dissector function\n   -- buffer: The UDP packet data as a \"Testy Virtual Buffer\"\n   -- pinfo: Packet information\n   -- tree: Root of the UI tree\n   function chat_proto.dissector(buffer, pinfo, tree)\n       -- Set the name in the protocol column in the UI\n       pinfo.cols.protocol = \"CHAT\"\n\n       -- Create sub tree which represents the entire buffer.\n       local subtree = tree:add(chat_proto,\n                                buffer(),\n                                \"SuperFunkyChat Protocol Data\")\n       subtree:add(chat_proto.fields.chksum, buffer(0, 4))\n       subtree:add(chat_proto.fields.command, buffer(4, 1))\n\n       -- Get a TVB for the data component of the packet.\n    ➋ local data = buffer(5):tvb()\n       local datatree = subtree:add(chat_proto.fields.data, data())\n\n       local MESSAGE_CMD = 3\n    ➌ local command = buffer(4, 1):uint()\n       if command == MESSAGE_CMD then\n           local curr_ofs = 0\n           local str, len = read_string(data, curr_ofs)\n        ➍ datatree:add(chat_proto, data(curr_ofs, len), \"Username: \" .. str)\n           curr_ofs = curr_ofs + len\n           str, len = read_string(data, curr_ofs)\n           datatree:add(chat_proto, data(curr_ofs, len), \"Message: \" .. str)\n       end\n   end\n -- Get UDP dissector table and add for port 12345\n   udp_table = DissectorTable.get(\"udp.port\")\n   udp_table:add(12345, chat_proto)\n```", "```\n   using static System.Console;\n   using static CANAPE.Cli.ConsoleUtils;\n\n   var template = new FixedProxyTemplate();\n   // Local port of 4444, destination 127.0.0.1:12345\n➊ template.LocalPort = 4444;\n   template.Host = \"127.0.0.1\";\n   template.Port = 12345;\n\n   var service = template.Create();\n   // Add an event handler to log a packet. Just print to console.\n➋ service.LogPacketEvent += (s,e) => WritePacket(e.Packet);\n   // Print to console when a connection is created or closed.\n➌ service.NewConnectionEvent += (s,e) =>\n            WriteLine(\"New Connection: {0}\", e.Description);\n   service.CloseConnectionEvent += (s,e) =>\n            WriteLine(\"Closed Connection: {0}\", e.Description);\n   service.Start();\n\n   WriteLine(\"Created {0}\", service);\n   WriteLine(\"Press Enter to exit...\");\n   ReadLine();\n   service.Stop();\n```", "```\nChatClient.exe --port 4444 user1 127.0.0.1\n```", "```\n   CANAPE.Cli (c) 2017 James Forshaw, 2014 Context Information Security.\n   Created Listener (TCP 127.0.0.1:4444), Server (Fixed Proxy Server)\n   Press Enter to exit...\n➊ New Connection: 127.0.0.1:50844 <=> 127.0.0.1:12345\n   Tag 'Out'➋ – Network '127.0.0.1:50844 <=> 127.0.0.1:12345'➌\n           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF\n   --------:-------------------------------------------------------------------\n   00000000: 42 49 4E 58 00 00 00 0E 00 00 04 16 00 05 75 73 - BINX..........us\n   00000010: 65 72 31 05 62 6F 72 61 78 00                   - er1.borax.\n\n   Tag 'In'➍ - Network '127.0.0.1:50844 <=> 127.0.0.1:12345'\n           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF\n   --------:-------------------------------------------------------------------\n   00000000: 00 00 00 02 00 00 00 01 01 00                   - ..........\n\n   PM - Tag 'Out' - Network '127.0.0.1:50844 <=> 127.0.0.1:12345'\n           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF\n   --------:-------------------------------------------------------------------\n➎ 00000000: 00 00 00 0D                                    - ....\n\n   Tag 'Out' - Network '127.0.0.1:50844 <=> 127.0.0.1:12345'\n           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF\n   --------:-------------------------------------------------------------------\n   00000000: 00 00 04 11 03 05 75 73 65 72 31 05 68 65 6C 6C - ......user1.hell\n   00000010: 6F                                              - o\n\n   --snip--\n➏ Closed Connection: 127.0.0.1:50844 <=> 127.0.0.1:12345\n```", "```\nusing CANAPE.Net.Layers;\nusing System.IO;\n\nclass Parser : DataParserNetworkLayer\n{\n    ➊ protected override bool NegotiateProtocol(\n           Stream serverStream, Stream clientStream)\n    {\n     ➋ var client = new DataReader(clientStream);\n        var server = new DataWriter(serverStream);\n\n        // Read magic from client and write it to server.\n     ➌ uint magic = client.ReadUInt32();\n        Console.WriteLine(\"Magic: {0:X}\", magic);\n        server.WriteUInt32(magic);\n\n        // Return true to signal negotiation was successful.\n        return true;\n    }\n}\n```", "```\n➊ int CalcChecksum(byte[] data) {\n       int chksum = 0;\n       foreach(byte b in data) {\n           chksum += b;\n       }\n       return chksum;\n   }\n\n➋ DataFrame ReadData(DataReader reader) {\n       int length = reader.ReadInt32();\n       int chksum = reader.ReadInt32();\n       return reader.ReadBytes(length).ToDataFrame();\n   }\n\n➌ void WriteData(DataFrame frame, DataWriter writer) {\n       byte[] data = frame.ToArray();\n       writer.WriteInt32(data.Length);\n       writer.WriteInt32(CalcChecksum(data));\n       writer.WriteBytes(data);\n   }\n\n➍ protected override DataFrame ReadInbound(DataReader reader) {\n       return ReadData(reader);\n   }\n\n   protected override void WriteOutbound(DataFrame frame, DataWriter writer) {\n       WriteData(frame, writer);\n   }\n\n   protected override DataFrame ReadOutbound(DataReader reader) {\n       return ReadData(reader);\n   }\n\n   protected override void WriteInbound(DataFrame frame, DataWriter writer) {\n       WriteData(frame, writer);\n   }\n```", "```\nOUTBOUND XOR   :    00 05 75 73 65 72 32 04 4F 4E 59 58 01     - ..user2.ONYX.\nOUTBOUND NO XOR:    00 05 75 73 65 72 32 04 4F 4E 59 58 00     - ..user2.ONYX.\n\nINBOUND XOR   :     01 E7                                      - ..\nINBOUND NO XOR:     01 00                                      - ..\n```", "```\nprotected override DataFrame ReadOutbound(DataReader reader) {\n  DataFrame frame = ReadData(reader);\n  // Convert frame back to bytes.\n  byte[] data = frame.ToArray();\n  if (data[0] == 0) {\n    Console.WriteLine(\"Disabling XOR Encryption\");\n    data[data.Length - 1] = 0;\n    frame = data.ToDataFrame();\n  }\n  return frame;\n}\n```"]