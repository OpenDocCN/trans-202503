- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Style: Stroke and Markers'
  prefs: []
  type: TYPE_NORMAL
- en: While not very common in artistic drawings, stroked paths—outlines, frames,
    arrows, connectors, and so on—are very common in technical drawings such as plans
    or flowcharts. A sizable share of all SVG style properties control the appearance
    of stroke, so it deserves a chapter of its own.
  prefs: []
  type: TYPE_NORMAL
- en: While stroke in SVG is quite rich and can serve a lot of purposes, you may want
    some features that are not supported or are available only via workarounds. In
    particular, SVG stroke always has *constant width* (it cannot get wider or narrower
    along the path); to emulate variable-width stroke, use the Calligraphic pen ([14.2](c14.xhtml#section14.2))
    or path effects ([Chapter 13](c13.xhtml#ch13)). Also, while stroke can have a
    dash pattern ([9.4](#section9.4)) and markers attached to its nodes ([9.5](#section9.5)),
    you cannot stroke a path with a brush or repeated pattern that would follow the
    bends of the stroke—although, again, this is possible via path effects ([13.3.2](c13.xhtml#section13.3.2)).
    You can always use a standard SVG rectangular pattern ([10.8.1](c10.xhtml#section10.8.1))
    to paint a stroke exactly as you would a fill, but the pattern in this case is
    simply superimposed—it is not distorted to follow the trajectory of the stroke.
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 Stroke Width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most important property of the stroke is its *width*. Like any other length
    in Inkscape, width can be measured in a number of different units. There are currently
    two places in the UI where you can see and change the stroke width of the selected
    objects: the selected style indicator in the status bar (bottom left of the window,
    to the right end of the stroke swatch) and the Stroke style tab of the Fill and
    Stroke dialog ([Figure 9-1](#fig9-1)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokewidth.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: Stroke width in the selected style indicator''s right-click menu
    (left) and the Fill and Stroke dialog (right)'
  prefs: []
  type: TYPE_NORMAL
- en: In the selected style indicator, one way you can change the stroke width is
    by right-clicking directly on the number next to the stroke swatch and choosing
    a value from the menu that pops up. In the same menu, you can choose the unit
    to be used for stroke width; by default it's `px` (SVG pixel).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to editing fill or stroke colors with color gestures ([8.7](c08.xhtml#section8.7)),
    you can also drag off the stroke width value into the canvas to change the stroke
    width of the selection interactively. Dragging above and to the left of the 45-degree
    no-change axis (from the point where you started dragging) makes the stroke in
    selected objects wider (up to 50 times the original width); dragging below and
    to the right makes it narrower (down to zero). For example, if you start with
    a 1 px stroke, dragging up and to the left will give you 50 px, and dragging to
    the right and down will reduce it to zero. This way, you can adjust stroke width
    very quickly without opening any dialogs or menus.
  prefs: []
  type: TYPE_NORMAL
- en: In the Fill and Stroke dialog, there's a regular editable field where you can
    type any value, as well as a unit selector.
  prefs: []
  type: TYPE_NORMAL
- en: When you choose the Hairline option in the units drop-down for the Width value,
    the Width value itself is disabled. The selected objects' strokes will always
    look like they're a constant 1 px wide *regardless of zoom*. The object itself
    will zoom in and out as usual, but its stroke will never appear thinner or thicker.
  prefs: []
  type: TYPE_NORMAL
- en: Outline mode ([3.14](c03.xhtml#section3.14)) shows *all* objects in the document
    as if they had a hairline stroke that remains 1 px wide regardless of zoom. Visible
    Hairlines mode ([3.14](c03.xhtml#section3.14)) allows you to scale the stroke
    up but not down, so it is always *at least* one screen pixel wide no matter how
    far you zoom out. Unlike the Hairline setting in the Fill and Stroke dialog, however,
    these modes are just an Inkscape-specific editing convenience and do not affect
    the SVG code of the document.
  prefs: []
  type: TYPE_NORMAL
- en: 9.1.1 Stroke Width in Multiple Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the selection contains multiple objects with different strokes, the selected
    style indicator *averages* the stroke widths of those objects that have any stroke.
    For example, if one of the two selected objects has 3 px stroke and the other
    has 1 px, the indicator will show 2 (and the tool tip will say that this is an
    averaged value).
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you set any width via the right-click menu or by dragging, the same
    width will be assigned to all selected objects that had any stroke in the first
    place. For example, if one of the objects has 3 px stroke and the other has no
    stroke, it will display 3 as stroke width and Different in the stroke paint swatch,
    but any new width you set will be assigned *only* to the object that had 3 px
    stroke.
  prefs: []
  type: TYPE_NORMAL
- en: The Fill and Stroke dialog behaves differently. When different stroke widths
    are detected in the selection, the stroke width unit switches to the percent unit
    (%) and the displayed value is 100%. If you change it, for example, to 200% and
    press Enter, each stroke width in the selection will get two times wider than
    it was before. All stroke widths that were different will remain different, and
    the displayed value will again be 100%.
  prefs: []
  type: TYPE_NORMAL
- en: In the same dialog, you can just as well switch the unit selector from % to
    any absolute unit and assign the same stroke width to any number of selected objects.
    On the other hand, even if you have a single object selected, you can still switch
    to the percent unit and specify a new width as a percentage of the old.
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 Join
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stroke always follows a path, and a path can have sharp turns, called*cusps*.
    Typically, a cusp is a node ([12.5.5](c12.xhtml#section12.5.5)) where two path
    segments join at an angle, but you don''t need a node to make a cusp: a sharp
    cusp can be created even in the middle of a Bézier curve (see [Figure 12-6](c12.xhtml#fig12-6),
    bottom left).'
  prefs: []
  type: TYPE_NORMAL
- en: The way the stroke behaves at the cusps is determined by the two style properties:*join
    type* and *miter limit*, editable on the Stroke style tab of the Fill and Stroke
    dialog, as shown in [Figure 9-2](#fig9-2). The three possible join types, represented
    by the three toggle buttons, are Round join, Bevel join, and Miter join (default).
  prefs: []
  type: TYPE_NORMAL
- en: Round join
  prefs: []
  type: TYPE_NORMAL
- en: This simulates the effect of tracing the join with a perfectly round pen. The
    outer shape is a smooth circular arc whose center is on the path centerline at
    the cusp point. This option is the most natural for largely curvilinear paths
    where occasional cusps might look out of character if not rounded.
  prefs: []
  type: TYPE_NORMAL
- en: Bevel join
  prefs: []
  type: TYPE_NORMAL
- en: This join is basically the same as a Miter join (see below) but with the miter
    limit set to 0\. This means that for *any* angle, the corner is cut off by a *bevel*—a
    straight line perpendicular to the bisector of the cusp angle.
  prefs: []
  type: TYPE_NORMAL
- en: Miter join
  prefs: []
  type: TYPE_NORMAL
- en: In this join type, the way it looks depends on how sharp the cusp angle is.
    For angles that are not too sharp, the outer outline of the stroke at the cusp
    point is continued by two straight line fragments, tangential to the stroke on
    both sides of the joint, until these straight lines cross. As a result, the joint
    is adorned by a sharp peak, called a *miter*, which becomes longer and sharper
    as the angle at the joint decreases, possibly reaching far beyond the position
    of the cusp node.
  prefs: []
  type: TYPE_NORMAL
- en: This leads to a problem, however. How long can the miter become? Obviously,
    when the angle at the joint becomes zero (which is perfectly legal), the miter
    will be *infinitely* long. To prevent this, the Miter limit control sets the *maximum
    length* of a miter in units of stroke width. For example, with the default miter
    limit of 4, any miter shorter than 4 stroke widths remains sharp-tipped, but as
    soon as you decrease the angle to make the miter longer than that, it will be
    cut—*beveled*—at the distance of 4 stroke widths from the joint.
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokejoin.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: Stroke join controls in the Fill and Stroke dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Stroked text objects are where the artistic effect of different stroke join
    settings is perhaps the most obvious, as [Figure 9-3](#fig9-3) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokejoin-text.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-3: The effect of join settings on stroked text'
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Caps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An open path needs to know how to draw the ends of the stroke. Here, too, there
    are three options, somewhat similar to the three join types: stroke caps can be
    *butt*, *round*, or *square* ([Figure 9-4](#fig9-4)).'
  prefs: []
  type: TYPE_NORMAL
- en: Butt cap
  prefs: []
  type: TYPE_NORMAL
- en: Bluntly cuts the stroke, perpendicular to the stroke direction, right at the
    end node of the path.
  prefs: []
  type: TYPE_NORMAL
- en: Round cap
  prefs: []
  type: TYPE_NORMAL
- en: Adds a semicircular blob that smoothly rounds the end of the stroke.
  prefs: []
  type: TYPE_NORMAL
- en: Square cap
  prefs: []
  type: TYPE_NORMAL
- en: Adds a half-square blob to the end of the stroke.
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokecaps.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-4: Stroke cap options in the Fill and Stroke dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Both round and square caps make an open path longer by its full width, with
    a half-stroke-width cap added to each end. Only with butt caps (which essentially
    means no caps), the path is exactly as long as the distance between its end nodes.
  prefs: []
  type: TYPE_NORMAL
- en: The effect of join and cap options is visible only on wide enough strokes or
    when zoomed in; for strokes that render at just two or three screen pixels, they
    make very little visual difference (except possibly for long miters).
  prefs: []
  type: TYPE_NORMAL
- en: 9.4 Dash Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A stroke does not need to run solidly from end to end of a path. SVG allows
    you to stroke a path with a regular pattern of dashes separated by empty intervals
    of any length. If you know the corresponding CSS syntax, you can even create new
    dash patterns for your own use (use the **Selectors and CSS** dialog, [16.3](c16.xhtml#section16.3)).
    Otherwise, choose one of the many predefined patterns provided by the Fill and
    Stroke dialog, as shown in [Figure 9-5](#fig9-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokedash.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-5: Dash patterns in the Fill and Stroke dialog'
  prefs: []
  type: TYPE_NORMAL
- en: 'All dash patterns are defined in terms of stroke width, which means the pattern
    scales up or down proportionally when you make your stroke wider or narrower.
    Ordered roughly from the most common to the most exotic, the predefined patterns
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Dotted patterns that consist of dots (that is, stroked segments whose length
    is equal to the stroke width) with intervals of 1, 2, 3, 4, 6, and so on up to
    48 stroke widths.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patterns with long dashes (1, 2, 3, and so on up to 24 stroke widths) and single-stroke
    width intervals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patterns with equal dash and interval lengths, from 2 to 24 stroke widths.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Patterns with varying dash and interval widths: 2 and 4, 4 and 2, 2 and 6,
    6 and 2, 2 and 8, 8 and 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patterns where a long dash is followed by a short one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patterns with equal dash and interval lengths that are shorter than the stroke
    width, from 0.5 down to 0.1 stroke widths (for example, a "square" path that is
    as long as it is wide will have five repetitions of the 0.1,0.1 pattern).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contrary to what you might expect, the Custom option does not allow you to edit
    a pattern in a nice visual way—it's just some seemingly random pattern that you
    can still only edit in the CSS editor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pattern offset field next to the dash pattern selector allows you to *shift*
    the chosen pattern along the path by a given distance (again, in units of stroke
    width). For example, if you use a two-dash, two-interval pattern but want your
    path to start with an interval, shift it by 2.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the stroke caps ([9.3](#section9.3)) affect dashes, too. If you set
    a path to use round or square caps, they will be added to both ends of each dash.
    As a result, each dash will become longer by one full stroke width compared to
    its length when using the default butt caps. For example, the 1,1 dash pattern
    with round caps loses all its intervals; the round caps of adjacent dashes, each
    0.5 stroke widths in length, now touch each other, as [Figure 9-6](#fig9-6) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokedash-caps.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-6: The effect of stroke caps on dashes'
  prefs: []
  type: TYPE_NORMAL
- en: As a consequence, to create a pattern of round dots following a path, you need
    to use a dash pattern with *zero-length* dashes and round caps. Inkscape does
    not list such a pattern in the Fill and Stroke dialog, so you will need to create
    it manually. First, assign to your path a pattern with the *interval length* you
    need, and then edit the `stroke-dasharray` property of your path in the Selectors
    and CSS dialog to set its *dash length* (first value) to 0\. Of course, without
    round or square caps, such a pattern will render the path completely invisible
    (which is the reason it is not included in the standard patterns—remember that
    the default caps setting is butt).
  prefs: []
  type: TYPE_NORMAL
- en: One interesting use of dot patterns with very wide intervals (such as 1,48)
    is quickly creating a random scattering of dots. Draw a spiral-like doodle with
    the Pencil tool ([14.1.2](c14.xhtml#section14.1.2)) and assign a 1,48 dash pattern
    to it to turn it into a cloud of seemingly unconnected dots, as shown in [Figure 9-7](#fig9-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokedash-random.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-7: Using a dash array with large intervals to imitate a random scattering
    of dots'
  prefs: []
  type: TYPE_NORMAL
- en: Also, the regularity of dash patterns plays nicely with spirals—a shape that
    is also regular but consists of progressively longer and longer turns ([11.6](c11.xhtml#section11.6)).
    An interplay of the equidistant dashes and gradually devolving paths can produce
    enchanting patterns ([Figure 9-8](#fig9-8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/strokedash-spiral.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-8: Dashed spirals are a form of art.'
  prefs: []
  type: TYPE_NORMAL
- en: 9.5 Markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Markers* are arbitrary objects (or even groups of objects) attached to a path
    and displayed as part of that path at (some of) its nodes ([12.1](c12.xhtml#section12.1)).
    The most common use of markers is for creating arrowheads in diagrams and flowcharts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A path can have three different types of markers: on its start node, intermediate
    (mid) nodes, and the end node. Each copy of the marker is positioned at the node
    and rotated so as to follow the direction of the path at this node. The size of
    markers is proportional to stroke width; simply make your stroke narrower or wider
    to scale all markers on a path.'
  prefs: []
  type: TYPE_NORMAL
- en: The Stroke style tab in the Fill and Stroke dialog contains three drop-down
    lists where you can select start, mid, and end markers for the selected paths
    ([Figure 9-9](#fig9-9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/markers.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-9: Choosing markers for a path'
  prefs: []
  type: TYPE_NORMAL
- en: These three lists show all the same markers (in other words, you can use any
    marker in any position), but the preview thumbnails show them applied to the start,
    mid, and end of a horizontal straight line path, so you can get an idea of how
    the marker will look on the actual path.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at what markers are in Inkscape's stock list.
  prefs: []
  type: TYPE_NORMAL
- en: Arrowheads
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of arrowheads: one is dart-like with two straight lines
    at the back; the other is delta-shaped with a concave circular arc at the back
    of the arrow. Each type of arrowhead comes in three *sizes*: large, medium, and
    small (these are not absolute sizes but relative to the stroke width). Also, each
    size has two *orientations*: start and end.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want your arrowheads to point *outward* from the path, choose
    one with a start orientation as the start marker and one with end orientation
    as the end marker. If you mix this up, your arrowheads will point *inward* from
    the ends of the path. Or you can choose the same end-orientation arrowhead for
    all three positions (start, mid, and end) to have all arrowheads on your path
    point in one direction toward the end of the path. Use **Path ▶ Reverse** from
    the menu to reverse a path if necessary (see [12.1.1](c12.xhtml#section12.1.1)
    for details).
  prefs: []
  type: TYPE_NORMAL
- en: Arrow tails
  prefs: []
  type: TYPE_NORMAL
- en: An arrow tail marker is available only in one size (matching the large arrowheads)
    and one orientation (making sense as an end marker—that is, oriented toward the
    path start).
  prefs: []
  type: TYPE_NORMAL
- en: Distance measurement markers
  prefs: []
  type: TYPE_NORMAL
- en: Distance measurement markers are just arrowheads with added perpendicular straight
    lines at the tips. There are two orientations, one for a start marker and the
    other for an end marker.
  prefs: []
  type: TYPE_NORMAL
- en: Geometric shapes
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a collection of geometric shape markers: round dots, squares, diamonds
    (squares rotated by 45 degrees), equilateral triangles, straight line stops, and
    filled and empty half-circle marks. Most of them have solid black and hollow variants.
    Just as with arrowheads, these markers come in three sizes (large, medium, and
    small); some also have start and end orientations (although for symmetric markers
    such as diamonds, the orientations differ only in the position of the marker relative
    to its node). The start and end variants of triangle markers can be used as just
    another arrowhead shape.'
  prefs: []
  type: TYPE_NORMAL
- en: Misc markers
  prefs: []
  type: TYPE_NORMAL
- en: There are several fancy markers, notably Scissors (assign it to mid markers
    to create a typical "cut-off line") and the "infinite line" ellipsis endings.
  prefs: []
  type: TYPE_NORMAL
- en: If your document already uses some markers of its own, these markers will be
    added to the top of the drop-down marker menus, separated from the stock Inkscape
    markers below. To remove markers from a path, select the topmost empty line in
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: 9.5.1 Mid Markers and Nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Start and end markers are simple in that their position on the path is never
    a surprise (although their orientation may sometimes be, if the end node has a
    very short Bézier handle that has little effect on the shape of the curve but
    may rotate the marker at this node in an unexpected direction). Mid markers are
    more interesting: they are located at the middle nodes ([12.1](c12.xhtml#section12.1))
    of a path, and the positions of these nodes may not be what you need or expect.'
  prefs: []
  type: TYPE_NORMAL
- en: A simple use case is a path consisting of straight line segments (with no Bézier
    curves). On such a path, mid markers will be displayed at the corners. Use markers
    that don't have end or start variants and are thus positioned symmetrically around
    the node—for example, dots or squares ([Figure 9-10](#fig9-10)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/mid-markers.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-10: Mid markers at the path joints'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may want to fill a path evenly with mid markers, similar to the way the
    dash pattern is regularly repeated along the path. This is easy for a straight
    line path where you can add or remove as many mid nodes as needed without affecting
    the straight line shape. In a more complex path, however, some nodes may be necessary
    to give the path its shape, and you cannot move those nodes along the path without
    distorting that shape. You also cannot choose *not* to apply markers to these
    nodes: in SVG, mid markers apply to all mid nodes without exception. As a result,
    it may be impossible to distribute markers along a path perfectly evenly; however,
    the shorter your desired interval between markers and the simpler the path, the
    less noticeable this unevenness can be.'
  prefs: []
  type: TYPE_NORMAL
- en: 'How can you add nodes to a path without changing its shape? A single new node
    can be added in the Node tool ([12.5.3](c12.xhtml#section12.5.3)) by double-clicking
    or Ctrl-Alt-clicking anywhere on the path. For an even distribution of nodes,
    however, another shortcut is more useful: Insert creates a new node in the middle
    of each segment between selected nodes (and adds the new node to the node selection
    so you can keep multiplying nodes by pressing Insert repeatedly).'
  prefs: []
  type: TYPE_NORMAL
- en: For example, selecting both nodes of a two-node path and pressing Insert adds
    one new node in the middle. Now, you have three nodes selected with two segments
    between them, so pressing Insert again adds two more nodes; another Insert adds
    four more nodes, and so on. In this simple case, all nodes will be distributed
    evenly at all times. However, if your path already had some mid nodes, selecting
    all nodes and pressing Insert repeatedly will add nodes more profusely in areas
    that had more nodes to begin with, as shown in [Figure 9-11](#fig9-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/mid-markers-add.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-11: Adding mid nodes by pressing Insert repeatedly (left) and by using
    the Add Nodes extension (right)'
  prefs: []
  type: TYPE_NORMAL
- en: A better approach to creating evenly distributed nodes is the Extensions ▶ Modify
    Path ▶ Add Nodes extension ([13.4.2.1](c13.xhtml#section13.4.2.1)). In it, you
    can specify either the maximum segment length (in `px` units) or the exact number
    of segments you need, and the algorithm will add nodes (without moving or deleting
    any existing nodes) to produce an even node spacing satisfying these constraints.
  prefs: []
  type: TYPE_NORMAL
- en: To delete an individual node in the Node tool, Ctrl-Alt-click it, or select
    it and press Delete ([12.5.3](c12.xhtml#section12.5.3)). A good method for deleting
    multiple nonessential nodes (those that were added only for the sake of markers
    and do not affect theshape of the path) is the Simplify command ([12.3](c12.xhtml#section12.3)).
    Of course,Simplify cannot really *know* which nodes are essential and which are
    not; it tries to guess—and usually performs acceptably, although undesired nodes
    and small shape distortions are likely to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 9.5.2 Coloring Markers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Typically, connector lines in diagrams and flowcharts are black, so the stock
    markers offered by Inkscape are either solid black or black with white filling.
    However, if you have a blue or red connector line, normally you would want the
    arrowhead on that line to be blue or red too. That''s what Inkscape does by default:
    when assigning a marker to a path, it re-colors it to match the color of the path''s
    stroke. When you change the stroke color of a path with markers, its markers get
    updated too.'
  prefs: []
  type: TYPE_NORMAL
- en: This color-matching is not the standard behavior in SVG—it's just what Inkscape
    does to be helpful. Behind the scenes, whenever you change stroke color, Inkscape
    creates a copy of each assigned marker, re-paints it with the new color, and re-assigns
    it back to the path. That's why you will see the different-color copies of the
    markers you have used at the top of the lists in Fill and Stroke (which, as you
    remember, list the document's custom markers first before the standard ones).
    The good news is that if you don't like this behavior, you can disable it in Preferences ▶ Behavior ▶ Markers,
    as shown in [Figure 9-12](#fig9-12).
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/prefs-markers.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-12: Marker behavior preferences'
  prefs: []
  type: TYPE_NORMAL
- en: 'One reason to disable automatic marker coloring is if you want to use a path
    only as an invisible string for a rosary of markers—in other words, you want to
    see the markers but hide the stroke itself. For this, first assign the markers
    to a stroked path and then remove the stroke (for example, by middle-clicking
    the stroke swatch in the selected style indicator,[8.6](c08.xhtml#section8.6)).
    If you had set Update marker color when object color changes to off, this will
    give you what you need: visible markers on an invisible path.'
  prefs: []
  type: TYPE_NORMAL
- en: When markers and their stroke have different colors, one more thing to take
    into account is the order of rendering ([9.6](#section9.6)). By default, stroke
    is painted first, so if it is different from its markers, it will only show through
    from underneath the markers if they are transparent.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1]'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic coloring of markers is a relatively recent Inkscape innovation; before
    it was available, the only way to do this was by Extensions ▶ Modify Path ▶ Color
    Markers. This extension is still available and is sometimes useful because it
    has some additional options. With it, you can not only paint markers to match
    the object but also swap fill and stroke colors, optionally include alpha, or
    just provide your own colors for fill and stroke. (If you want a more complex
    paint job for your markers, see the next section on how to turn a marker into
    a regular editable object and back.)
  prefs: []
  type: TYPE_NORMAL
- en: 9.5.3 Creating New Markers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A marker does not have to be a single object painted with a solid color. It
    can consist of any number of objects, grouped or not, with any paint, opacity,
    or even blur properties—in other words, anything Inkscape can draw can be a marker
    on a path. Applying such complex markers to paths with many added nodes ([9.5.1](#section9.5.1))
    can produce amazing compositions. Let's look at how to create markers out of arbitrary
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, it's as easy as selecting the object or objects and choosingObjects
    to Marker from the Object menu. Selected objects disappear, but in the Stroke
    style tab of Fill and Stroke, you will see your new marker in the top part of
    the list of markers (just before the stock markers). You may need to close and
    reopen the Fill and Stroke dialog to refresh the marker list.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a new marker, Inkscape assumes that the original objects are oriented
    as they should be on a horizontal path that goes from left to right. For example,
    if you have a new arrowhead that you want to use as an end marker, make it point
    horizontally to the right before converting it to a marker.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to standard markers, the user-created marker will scale up and down
    as you change the stroke width. Its initial size (the size of the object that
    you have turned into a marker) will correspond to the stroke width of 1 px.
  prefs: []
  type: TYPE_NORMAL
- en: Each marker has an *anchor point*—the point that will be placed on the node
    to which that marker is attached. When you create a new marker, Inkscape uses
    the transformation fixed point ([6.4](c06.xhtml#section6.4)) of the (first) selected
    object as that anchor point ([Figure 9-13](#fig9-13)). By default, the fixed point
    is in the center of the object's bounding box ([4.3](c04.xhtml#section4.3)), which
    means the newly created marker will be centered around its node. If you move the
    fixed point to one of the corners of the object, the new marker will touch its
    node by that corner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](10/create-marker.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-13: Creating a new marker from a selected object'
  prefs: []
  type: TYPE_NORMAL
- en: Can you do the opposite and convert a path marker to an object (for example,
    to edit it and make it into a marker again)? Yes, although this involves destroying
    the path that the marker was applied to (so you may want to make a copy of the
    path first). Use the Path ▶ Stroke to Path command. It turns the stroke into a
    filled path ([12.1.3](c12.xhtml#section12.1.3)), but also, if the original path
    had markers, it groups the converted path with objects that represent former markers.
    Ungroup, choose one of the former markers, rotate it into the default orientation,
    and edit as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 9.5.4 Advanced Markers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SVG markers have a few other useful options that are not yet available via
    the Inkscape UI. To change them, you need to use the Selectors and CSS dialog
    ([16.3](c16.xhtml#section16.3)) and Inkscape''s XML Editor ([4.10](c04.xhtml#section4.10))
    together. Open them both. Select an object with markers, in Selectors and CSS
    find the marker property you''re interested in (`marker-start`, `marker-mid`,
    or `marker-end`), and click the green arrow at the right end of that line. This
    will scroll the XML Editor to the `svg:marker` element used by your object. Here''s
    what you can change via this element''s attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: By default, markers rotate to orient themselves along the path direction. If
    you want your marker always to have the same orientation regardless of how the
    path goes at this point, remove the `orient="auto"` attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't want the marker to scale up and down when the stroke width is changed,
    add the attribute `markerUnits` with the value`userSpaceOnUse`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.6 Rendering Order [1.1]
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you have seen, a single solid object—not a group—can still have up to three
    distinct components: its fill, its stroke, and its markers. The only unresolved
    question is in which order to render these intrinsic components. Since you cannot
    simply rearrange them (as you would with separate objects in a group), SVG governs
    this with a style property of its own. This property, editable in theStroke style
    tab of Fill and Stroke ([Figure 9-14](#fig9-14)), can have one of the six values
    that represent all possible orderings (bottom to top) of the three components:'
  prefs: []
  type: TYPE_NORMAL
- en: fill, stroke, markers (the default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stroke, fill, markers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fill, markers, stroke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: markers, fill, stroke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stroke, markers, fill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: markers, stroke, fill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](10/render-order.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-14: Rendering order buttons on the Stroke style tab of Fill and Stroke'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever fill is on top of stroke, it goes up to the line of the path on which
    the stroke is centered. Thus, if the fill is opaque ([8.3](c08.xhtml#section8.3)),
    the visible result of putting it on top of the stroke is almost exactly as if
    the stroke were half its width.
  prefs: []
  type: TYPE_NORMAL
