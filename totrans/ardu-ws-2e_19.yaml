- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Real-Time Clocks
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实时钟
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将
- en: Set and retrieve the time and date from a real-time clock module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置并获取实时钟模块的时间和日期
- en: Discover new ways to connect devices to an Arduino
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索将设备连接到 Arduino 的新方法
- en: Create a digital clock
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数字时钟
- en: Build an employee RFID time clock
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个员工 RFID 打卡机
- en: A *real-time clock (RTC)* IC module is a small timekeeping device that opens
    up all sorts of possibilities for Arduino projects. Once set with the current
    time and date, an RTC provides accurate time and date data on request.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*实时钟（RTC）* IC 模块是一个小型的计时设备，为 Arduino 项目提供了各种可能性。一旦设置了当前的时间和日期，RTC 可以在请求时提供准确的时间和日期数据。
- en: You’ll find many different RTC ICs on the market, some more accurate than others.
    In this chapter, we’ll use the Maxim DS3231; it doesn’t require any external circuitry
    other than a backup battery, and it’s incredibly accurate and quite robust in
    module form. The DS3231 is available as a breakout board from various retailers,
    including the version from PMD Way (part number 883422) that is shown in [Figure
    20-1](#figure20-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有许多不同的 RTC IC，有些比其他的更精确。在本章中，我们将使用 Maxim DS3231；它除了备用电池外不需要任何外部电路，而且在模块形式下非常精确且相当稳健。DS3231
    可以作为 breakout 板从各种零售商处购买，包括来自 PMD Way（零件号 883422）的版本，如[图 20-1](#figure20-1)所示。
- en: '![f20001](image_fi/500587c20/f20001.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![f20001](image_fi/500587c20/f20001.png)'
- en: 'Figure 20-1: A real-time clock IC module'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20-1：一个实时钟 IC 模块
- en: Connecting the RTC Module
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接 RTC 模块
- en: 'It’s easy to connect the RTC module to an Arduino, because it uses the I²C
    bus (discussed in Chapter 19). All you need are four wires: GND and VCC go to
    Arduino GND and 5 V, respectively; SDA and SCL go to Arduino A4 and A5, respectively.
    We will not use the other pins in our examples. Due to the module’s design, no
    extra pull-up resistors are required on the I²C bus.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将 RTC 模块连接到 Arduino 很简单，因为它使用 I²C 总线（在第 19 章中讨论过）。你只需要四根电线：GND 和 VCC 分别连接到 Arduino
    的 GND 和 5 V；SDA 和 SCL 分别连接到 Arduino 的 A4 和 A5。我们的示例中不会使用其他引脚。由于模块的设计，I²C 总线上无需额外的上拉电阻。
- en: For convenience, consider mounting the module on a blank ProtoShield so it can
    be integrated easily with other hardware for other projects. And make sure you
    have the backup battery installed, or your time data will be lost when you turn
    off the project!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，可以考虑将模块安装在一个空白的 ProtoShield 上，这样它可以轻松地与其他硬件集成用于其他项目。并确保已安装备用电池，否则当你关闭项目时，时间数据将丢失！
- en: 'Project #57: Adding and Displaying Time and Date with an RTC'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #57：使用 RTC 添加并显示时间和日期'
- en: In this project, you’ll learn how to set the time and date on the RTC and then
    retrieve and display it in the Serial Monitor. Time and date information can be
    useful for various types of projects, such as temperature loggers and alarm clocks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习如何设置 RTC 的时间和日期，然后从串口监视器中检索并显示它们。时间和日期信息对于各种项目都很有用，例如温度记录仪和闹钟。
- en: The Hardware
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你完成这个项目所需的材料：
- en: Arduino and USB cable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: Various connecting wires
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接电线
- en: One CR2032 battery (if not included with the DS3231 module)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗 CR2032 电池（如果 DS3231 模块中未包含）
- en: One Maxim DS3231 RTC module
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Maxim DS3231 RTC 模块
- en: The Sketch
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Connect the module to the Arduino as described earlier in the chapter and then
    enter but *do not upload* the following sketch:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章之前的描述将模块连接到 Arduino，然后输入但*不要上传*以下草图：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Understanding and Running the Sketch
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解并运行草图
- en: This sketch might look complex, but it’s really not so difficult. At 1, we import
    the I²C library and set the bus address of the RTC in the sketch as `0x68`. This
    is the default bus address for the DS3231 and is found in the data sheet. At 2,
    two custom functions convert decimal numbers to binary coded decimal (BCD) values
    and return those values. We perform these conversions because the DS3231 stores
    values in BCD format.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图看起来可能很复杂，但其实并不难。在第 1 行，我们导入 I²C 库并在草图中将 RTC 的总线地址设置为 `0x68`。这是 DS3231 的默认总线地址，可以在数据手册中找到。在第
    2 行，两个自定义函数将十进制数转换为二进制编码十进制（BCD）值并返回这些值。我们进行这些转换，因为 DS3231 存储的是 BCD 格式的值。
- en: 'At 6, we use the function `setDS3231time()` to pass the time and date information
    to the RTC IC like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 6 行，我们使用函数 `setDS3231time()` 将时间和日期信息传递给 RTC IC，代码如下：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use this function, simply insert the required data into the various parameters.
    The `dayOfWeek` parameter is a number between 1 and 7 representing Sunday through
    Saturday, respectively. (The RTC doesn’t have the ability to check whether `dayOfWeek`
    actually matches the date you enter, so take extra care to ensure everything lines
    up.) The information for `year` is only two digits—for example, you’d use `21`
    for the year 2021\. (The 20 is assumed.) You can insert either fixed values (as
    in this sketch) or byte variables that contain the parameters.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此功能，只需将所需数据插入到各个参数中。`dayOfWeek`参数是一个1到7之间的数字，分别代表周日到周六。（RTC无法检查`dayOfWeek`是否与输入的日期匹配，因此需要格外小心，确保一切对齐。）`year`信息仅为两位数字——例如，2021年的年份应使用`21`。（20是默认的。）你可以插入固定值（如本草图中所示）或包含参数的字节变量。
- en: Thus, to set the time in the RTC, we enter the current date and time values
    into the `setDS3231time()` function at 3. Now we can upload the sketch. Having
    done that once, we comment out the function by placing `//` in front of the `setDS3231time()`
    function at 3, and then we re-upload the sketch to ensure that the time isn’t
    reset to the original value every time the sketch starts!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要设置RTC中的时间，我们需要在第3行将当前日期和时间值输入到`setDS3231time()`函数中。现在可以上传草图了。完成一次之后，我们通过在`setDS3231time()`函数前加上`//`来注释掉该函数，然后重新上传草图，确保每次草图启动时时间不会重置为原始值！
- en: Finally, the function `readDS3231time()` at 4 reads the time and date from the
    RTC and inserts the data into byte variables. This data is used at 5 inside the
    function `displayTime()`, which simply retrieves the data and displays it in the
    Serial Monitor by printing the contents of the time variables.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第4行的`readDS3231time()`函数从RTC中读取时间和日期，并将数据插入字节变量中。此数据在第5行的`displayTime()`函数中使用，该函数简单地获取数据并通过打印时间变量的内容在串行监视器中显示。
- en: Once you’ve uploaded your sketch, open the Serial Monitor. The results should
    look similar to those shown in [Figure 20-2](#figure20-2), but they will vary
    to reflect the current time and date when you run the sketch.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传了草图，打开串行监视器。结果应与[图20-2](#figure20-2)中显示的类似，但它们会根据你运行草图时的当前时间和日期有所不同。
- en: '![f20002](image_fi/500587c20/f20002.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f20002](image_fi/500587c20/f20002.png)'
- en: 'Figure 20-2: Results from Project 57'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图20-2：项目57的结果
- en: 'You can use the contents of the sketch for Project 57 as the basis for other
    time-related projects. The functions `decToBcd()`, `bcdToDec()`, `readDS3231time()`,
    and `setDS3231time()` can be inserted and thus reused in future projects. That’s
    one of the benefits of using the Arduino platform: once you write a useful procedure,
    it can often be reused later with little or no modification.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将项目57中的草图内容作为其他时间相关项目的基础。`decToBcd()`、`bcdToDec()`、`readDS3231time()`和`setDS3231time()`等函数可以插入并在未来的项目中重复使用。这就是使用Arduino平台的一个好处：一旦写出一个有用的过程，它通常可以在以后几乎不做修改地重复使用。
- en: 'Project #58: Creating a Simple Digital Clock'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#58：创建一个简单的数字时钟
- en: In this project, we’ll use the functions from Project 57 to display the time
    and date on a standard character LCD, similar to the one used in the GPS receiver
    in Project 43 in Chapter 15.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，我们将使用项目57中的函数将时间和日期显示在标准字符LCD上，类似于第15章项目43中GPS接收器使用的LCD。
- en: The Hardware
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要创建这个项目的硬件：
- en: Arduino and USB cable
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB线
- en: Various connecting wires
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: One breadboard
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: One Proto-ScrewShield or similar product
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Proto-ScrewShield或类似产品
- en: One LCD module or LCD shield
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块LCD模块或LCD遮罩
- en: One real-time clock module (shown earlier in the chapter)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块实时时钟模块（在本章前面展示过）
- en: First, re-create the hardware used in Project 57\. If you connected the RTC
    module with wires into the Arduino, use a Proto-ScrewShield instead to interface
    with the RTC. Then insert your LCD shield on top of the other shields.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重新创建项目57中使用的硬件。如果你是通过接线将RTC模块连接到Arduino的，请改用Proto-ScrewShield与RTC进行连接。然后，将LCD遮罩插入其他遮罩上面。
- en: The Sketch
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter but *do not upload* the following sketch:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输入但*不要上传*以下草图：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Understanding and Running the Sketch
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解和运行草图
- en: The operation of this sketch is similar to that of Project 57, except in this
    case, we’ve altered the function `displayTime()` to send time and date data to
    the LCD instead of to the Serial Monitor, and we’ve added the setup lines required
    for the LCD at 1 and 2. (For a refresher on using the LCD module, see Chapter
    9.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图的操作与项目 57 类似，不同之处在于我们已经修改了 `displayTime()` 函数，使其将时间和日期数据发送到 LCD 上，而不是发送到串口监视器，并且在第
    1 和第 2 步添加了 LCD 所需的设置行。（有关使用 LCD 模块的回顾，请参见第 9 章。）
- en: Don’t forget to upload the sketch first with the time and date data entered
    at 3, and then re-upload the sketch with that code commented out. After uploading
    the sketch, your results should be similar to those shown in [Figure 20-3](#figure20-3).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了先上传带有时间和日期数据的草图（见第 3 步），然后再上传将代码注释掉的草图。上传草图后，您的结果应该与[图 20-3](#figure20-3)所示的类似。
- en: '![f20003](image_fi/500587c20/f20003.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f20003](image_fi/500587c20/f20003.png)'
- en: 'Figure 20-3: Display from Project 58'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20-3：来自项目 58 的显示
- en: Now that you’ve worked through Projects 57 and 58, you should have a sense of
    how to read and write data from and to the RTC IC in your sketches. Next, you’ll
    use what you’ve learned so far to create something really useful.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经完成了项目 57 和 58，应该已经掌握了如何在草图中读取和写入 RTC IC 的数据。接下来，您将利用所学的知识创建一个非常实用的系统。
- en: 'Project #59: Creating an RFID Time-Clock System'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #59：创建一个 RFID 时钟系统'
- en: In this project, we’ll create a time-clock system. You’ll see how Arduino shields
    can work together and how the Proto-ScrewShield helps you introduce electronic
    parts that aren’t mounted on a shield. This system can be used by two people who
    are assigned an RFID card or tag that they’ll swipe over an RFID reader when they
    enter or leave an area (such as the workplace or a home). The time and card details
    will be recorded to a microSD card for later analysis.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一个时钟系统。您将看到 Arduino 扩展板如何协同工作，以及 Proto-ScrewShield 如何帮助您引入没有安装在扩展板上的电子元件。这个系统可以由两个人使用，他们会被分配一个
    RFID 卡或标签，当他们进入或离开某个区域（如工作场所或家庭）时，刷卡通过 RFID 读卡器。时间和卡片详细信息将被记录到 microSD 卡中，供后续分析。
- en: We covered logging data to a microSD card in Chapter 15, reading RFID tags in
    Chapter 18, and connecting to the RTC module earlier in this chapter. Now we’ll
    put the pieces together.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 15 章中介绍了如何将数据记录到 microSD 卡，如何在第 18 章读取 RFID 标签，以及如何在本章前面连接 RTC 模块。现在我们将把这些部分整合在一起。
- en: The Hardware
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这个项目所需的材料：
- en: Arduino and USB cable
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: Various connecting wires
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: One real-time clock module (shown earlier in the chapter)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实时时钟模块（在本章前面已展示）
- en: One LCD module or Freetronics LCD shield
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 LCD 模块或 Freetronics LCD 扩展板
- en: One microSD card shield and card (from Chapter 15)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 microSD 卡扩展板和卡（来自第 15 章）
- en: One Proto-ScrewShield or similar product
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Proto-ScrewShield 或类似产品
- en: One RFID reader module and two tags (from Chapter 18)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 RFID 读卡器模块和两个标签（来自第 18 章）
- en: To assemble the system, start with the Arduino Uno at the bottom and then add
    your Proto-ScrewShield, the microSD card shield atop the ProtoScrewShield, and
    the LCD shield on top of the microSD card shield. Connect the RFID reader as you
    did in Chapter 18 and connect the RTC module as described earlier in this chapter.
    Depending on the exact hardware used, the assembly should look similar to that
    shown in [Figure 20-4](#figure20-4).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要组装系统，首先将 Arduino Uno 放在底部，然后添加 Proto-ScrewShield，接着将 microSD 卡扩展板放在 Proto-ScrewShield
    上，再将 LCD 扩展板放在 microSD 卡扩展板上。像第 18 章中所做的那样连接 RFID 读卡器，并按照本章前面描述的方式连接 RTC 模块。根据所用硬件的具体情况，组装后的外观应类似于[图
    20-4](#figure20-4)所示。
- en: '![f20004](image_fi/500587c20/f20004.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![f20004](image_fi/500587c20/f20004.png)'
- en: 'Figure 20-4: The time clock assembly'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20-4：时钟组件
- en: The Sketch
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: Now enter and upload the following sketch. Remember that when you’re uploading
    sketches to an RFID-connected Arduino, you need to ensure that you remove the
    wire between the RFID reader’s RX and Arduino pin D0, then reconnect it once the
    sketch has been uploaded successfully.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传以下草图。记住，在向连接了 RFID 的 Arduino 上传草图时，您需要确保移除 RFID 读卡器的 RX 引脚与 Arduino D0
    引脚之间的线缆，上传成功后再重新连接。
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Understanding the Sketch
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: In this sketch, the system first waits for an RFID card to be presented to the
    reader. If the RFID card is recognized, then the card owner’s name, the time,
    and the date are appended to a text file stored on the microSD card.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个草图中，系统首先等待一个 RFID 卡呈现给读卡器。如果 RFID 卡被识别，卡主的姓名、时间和日期将被附加到存储在 microSD 卡上的文本文件中。
- en: At 1 are the functions required for the I²C bus and the real-time clock, and
    at 2 is the line required to set up the microSD card shield. At 4, we check and
    report on the status of the microSD card. At 5, the card just read is compared
    against the stored card numbers for two people—in this case, John and Mary. If
    there is a match, the data is written to the microSD card. With some modification,
    you could add more cards to the system simply by adding the cards’ serial numbers
    below the existing numbers at 3 and then adding other comparison functions like
    those at 5.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在1处是I²C总线和实时钟所需的函数，在2处是设置microSD卡扩展板所需的代码。在4处，我们检查并报告microSD卡的状态。在5处，读取的卡片与存储的两个人的卡号进行比较——在这个例子中是John和Mary。如果匹配，数据将被写入microSD卡。通过一些修改，你可以通过在3处现有卡号下方添加卡片的序列号，再添加像5处那样的比较函数，从而将更多的卡片添加到系统中。
- en: When the time comes to review the logged data, copy the file *data.txt* from
    the microSD card. Then view the data with a text editor or import it into a spreadsheet
    for further analysis. The data is laid out so that it’s easy to read, as shown
    in [Figure 20-5](#figure20-5).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要查看记录的数据时，从microSD卡中复制文件*data.txt*。然后使用文本编辑器查看数据，或将其导入到电子表格中进行进一步分析。数据的布局非常易于阅读，如[图20-5](#figure20-5)所示。
- en: '![f20005](image_fi/500587c20/f20005.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![f20005](image_fi/500587c20/f20005.png)'
- en: 'Figure 20-5: Example data generated by Project 59'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图20-5：项目59生成的示例数据
- en: Looking Ahead
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: In this chapter, you learned how to work with time and date data via the RTC
    IC. The RFID system described in Project 59 gives you the framework you need to
    create your own access systems or even track when, for example, your children
    arrive home. In the final two chapters, we’ll create projects that will use the
    Arduino to communicate over the internet and a cellular phone network.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过RTC芯片处理时间和日期数据。项目59中描述的RFID系统为你提供了创建自己的访问控制系统的框架，甚至可以跟踪例如你的孩子们何时到家。在接下来的两章中，我们将创建使用Arduino通过互联网和手机网络进行通信的项目。
