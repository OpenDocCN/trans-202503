- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Real-Time Clocks
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  prefs: []
  type: TYPE_NORMAL
- en: Set and retrieve the time and date from a real-time clock module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover new ways to connect devices to an Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a digital clock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build an employee RFID time clock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *real-time clock (RTC)* IC module is a small timekeeping device that opens
    up all sorts of possibilities for Arduino projects. Once set with the current
    time and date, an RTC provides accurate time and date data on request.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find many different RTC ICs on the market, some more accurate than others.
    In this chapter, we’ll use the Maxim DS3231; it doesn’t require any external circuitry
    other than a backup battery, and it’s incredibly accurate and quite robust in
    module form. The DS3231 is available as a breakout board from various retailers,
    including the version from PMD Way (part number 883422) that is shown in [Figure
    20-1](#figure20-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![f20001](image_fi/500587c20/f20001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20-1: A real-time clock IC module'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the RTC Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s easy to connect the RTC module to an Arduino, because it uses the I²C
    bus (discussed in Chapter 19). All you need are four wires: GND and VCC go to
    Arduino GND and 5 V, respectively; SDA and SCL go to Arduino A4 and A5, respectively.
    We will not use the other pins in our examples. Due to the module’s design, no
    extra pull-up resistors are required on the I²C bus.'
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, consider mounting the module on a blank ProtoShield so it can
    be integrated easily with other hardware for other projects. And make sure you
    have the backup battery installed, or your time data will be lost when you turn
    off the project!
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #57: Adding and Displaying Time and Date with an RTC'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you’ll learn how to set the time and date on the RTC and then
    retrieve and display it in the Serial Monitor. Time and date information can be
    useful for various types of projects, such as temperature loggers and alarm clocks.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what you’ll need to create this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One CR2032 battery (if not included with the DS3231 module)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Maxim DS3231 RTC module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Connect the module to the Arduino as described earlier in the chapter and then
    enter but *do not upload* the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Understanding and Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sketch might look complex, but it’s really not so difficult. At 1, we import
    the I²C library and set the bus address of the RTC in the sketch as `0x68`. This
    is the default bus address for the DS3231 and is found in the data sheet. At 2,
    two custom functions convert decimal numbers to binary coded decimal (BCD) values
    and return those values. We perform these conversions because the DS3231 stores
    values in BCD format.
  prefs: []
  type: TYPE_NORMAL
- en: 'At 6, we use the function `setDS3231time()` to pass the time and date information
    to the RTC IC like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To use this function, simply insert the required data into the various parameters.
    The `dayOfWeek` parameter is a number between 1 and 7 representing Sunday through
    Saturday, respectively. (The RTC doesn’t have the ability to check whether `dayOfWeek`
    actually matches the date you enter, so take extra care to ensure everything lines
    up.) The information for `year` is only two digits—for example, you’d use `21`
    for the year 2021\. (The 20 is assumed.) You can insert either fixed values (as
    in this sketch) or byte variables that contain the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, to set the time in the RTC, we enter the current date and time values
    into the `setDS3231time()` function at 3. Now we can upload the sketch. Having
    done that once, we comment out the function by placing `//` in front of the `setDS3231time()`
    function at 3, and then we re-upload the sketch to ensure that the time isn’t
    reset to the original value every time the sketch starts!
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the function `readDS3231time()` at 4 reads the time and date from the
    RTC and inserts the data into byte variables. This data is used at 5 inside the
    function `displayTime()`, which simply retrieves the data and displays it in the
    Serial Monitor by printing the contents of the time variables.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve uploaded your sketch, open the Serial Monitor. The results should
    look similar to those shown in [Figure 20-2](#figure20-2), but they will vary
    to reflect the current time and date when you run the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '![f20002](image_fi/500587c20/f20002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20-2: Results from Project 57'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the contents of the sketch for Project 57 as the basis for other
    time-related projects. The functions `decToBcd()`, `bcdToDec()`, `readDS3231time()`,
    and `setDS3231time()` can be inserted and thus reused in future projects. That’s
    one of the benefits of using the Arduino platform: once you write a useful procedure,
    it can often be reused later with little or no modification.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #58: Creating a Simple Digital Clock'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we’ll use the functions from Project 57 to display the time
    and date on a standard character LCD, similar to the one used in the GPS receiver
    in Project 43 in Chapter 15.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what you’ll need to create this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Proto-ScrewShield or similar product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One LCD module or LCD shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One real-time clock module (shown earlier in the chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, re-create the hardware used in Project 57\. If you connected the RTC
    module with wires into the Arduino, use a Proto-ScrewShield instead to interface
    with the RTC. Then insert your LCD shield on top of the other shields.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter but *do not upload* the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Understanding and Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The operation of this sketch is similar to that of Project 57, except in this
    case, we’ve altered the function `displayTime()` to send time and date data to
    the LCD instead of to the Serial Monitor, and we’ve added the setup lines required
    for the LCD at 1 and 2. (For a refresher on using the LCD module, see Chapter
    9.)
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to upload the sketch first with the time and date data entered
    at 3, and then re-upload the sketch with that code commented out. After uploading
    the sketch, your results should be similar to those shown in [Figure 20-3](#figure20-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f20003](image_fi/500587c20/f20003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20-3: Display from Project 58'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve worked through Projects 57 and 58, you should have a sense of
    how to read and write data from and to the RTC IC in your sketches. Next, you’ll
    use what you’ve learned so far to create something really useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #59: Creating an RFID Time-Clock System'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we’ll create a time-clock system. You’ll see how Arduino shields
    can work together and how the Proto-ScrewShield helps you introduce electronic
    parts that aren’t mounted on a shield. This system can be used by two people who
    are assigned an RFID card or tag that they’ll swipe over an RFID reader when they
    enter or leave an area (such as the workplace or a home). The time and card details
    will be recorded to a microSD card for later analysis.
  prefs: []
  type: TYPE_NORMAL
- en: We covered logging data to a microSD card in Chapter 15, reading RFID tags in
    Chapter 18, and connecting to the RTC module earlier in this chapter. Now we’ll
    put the pieces together.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what you’ll need to create this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One real-time clock module (shown earlier in the chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One LCD module or Freetronics LCD shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One microSD card shield and card (from Chapter 15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Proto-ScrewShield or similar product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One RFID reader module and two tags (from Chapter 18)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To assemble the system, start with the Arduino Uno at the bottom and then add
    your Proto-ScrewShield, the microSD card shield atop the ProtoScrewShield, and
    the LCD shield on top of the microSD card shield. Connect the RFID reader as you
    did in Chapter 18 and connect the RTC module as described earlier in this chapter.
    Depending on the exact hardware used, the assembly should look similar to that
    shown in [Figure 20-4](#figure20-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f20004](image_fi/500587c20/f20004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20-4: The time clock assembly'
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now enter and upload the following sketch. Remember that when you’re uploading
    sketches to an RFID-connected Arduino, you need to ensure that you remove the
    wire between the RFID reader’s RX and Arduino pin D0, then reconnect it once the
    sketch has been uploaded successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this sketch, the system first waits for an RFID card to be presented to the
    reader. If the RFID card is recognized, then the card owner’s name, the time,
    and the date are appended to a text file stored on the microSD card.
  prefs: []
  type: TYPE_NORMAL
- en: At 1 are the functions required for the I²C bus and the real-time clock, and
    at 2 is the line required to set up the microSD card shield. At 4, we check and
    report on the status of the microSD card. At 5, the card just read is compared
    against the stored card numbers for two people—in this case, John and Mary. If
    there is a match, the data is written to the microSD card. With some modification,
    you could add more cards to the system simply by adding the cards’ serial numbers
    below the existing numbers at 3 and then adding other comparison functions like
    those at 5.
  prefs: []
  type: TYPE_NORMAL
- en: When the time comes to review the logged data, copy the file *data.txt* from
    the microSD card. Then view the data with a text editor or import it into a spreadsheet
    for further analysis. The data is laid out so that it’s easy to read, as shown
    in [Figure 20-5](#figure20-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f20005](image_fi/500587c20/f20005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20-5: Example data generated by Project 59'
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to work with time and date data via the RTC
    IC. The RFID system described in Project 59 gives you the framework you need to
    create your own access systems or even track when, for example, your children
    arrive home. In the final two chapters, we’ll create projects that will use the
    Arduino to communicate over the internet and a cellular phone network.
  prefs: []
  type: TYPE_NORMAL
