- en: '25'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '25'
- en: Lean Code
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 精简代码
- en: Once you’ve written it all, you can’t go back and re-optimize.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一旦你写完了，就无法再回去重新优化。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Bob Lee
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Bob Lee
- en: One of the aspects that defined Android from the very early days was that it
    was incredibly optimized so that it would work on the very limited mobile devices
    of that time. The performance mindset of the team affected everything from the
    APIs (many of which were written in a specific way so as to avoid allocating memory)
    to the coding recommendations given to external developers. It was all about writing
    optimal code because every cycle, every kilobyte, takes away resources or spends
    battery life that is needed elsewhere.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Android从最早期开始的一个特点就是它经过了极其优化，以便能在当时那些极其受限的移动设备上运行。团队的性能思维影响了从API（许多API是以特定方式编写的，以避免分配内存）到给外部开发者的编码建议的一切。这一切都围绕着编写最优代码，因为每一个周期，每一千字节，都消耗着宝贵的资源或电池寿命，这些本可以用在其他地方。
- en: At least part of this performance-first focus can be attributed to the background
    of the early team members. The engineers that had previously worked at Danger
    had made their operating system work on devices that were even more limited than
    Android’s G1\. And engineers from PalmSource were also familiar with mobile constraints
    and realities.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 至少部分性能优先的关注可以归因于早期团队成员的背景。那些曾经在Danger工作的工程师们，他们让操作系统能在比Android的G1更为受限的设备上运行。而来自PalmSource的工程师们也熟悉移动设备的限制和现实。
- en: Bob Lee observed, “They [former PalmSource engineers] would say that one of
    the reasons it failed was that they were just trying to do more than the hardware
    could handle. Once you’ve written it, you can’t go back and optimize. I just think
    they were avoiding that same mistake on Android. This was one of the reasons why
    Dianne [Hackborn] and everyone else were so anal about performance, and micro-optimized
    a lot of stuff. The phones were so slow back then.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Bob Lee观察到，“他们（前PalmSource工程师）曾说，其中一个失败的原因是他们试图做的事情超出了硬件的承受能力。一旦你写完了代码，就不能回头再做优化了。我只是觉得他们在Android上避免了那个错误。这也是为什么黛安（哈克伯恩）和其他人对性能如此严格，一直微优化许多细节的原因。那时候的手机速度是如此慢。”
- en: “I remember everybody—me, Dianne, Dan [Bornstein]—would be in this war room,
    because over the course of a release there’d be all these places where people
    were using too much memory. We didn’t have swap,^([1](#c25-footnote-1)) because
    it didn’t make sense to have swap. Things would run out of memory and crash. It
    was this kind of heroic session in a war room where we’d just go on for days sometimes,
    and you would never know when the end was going to be, just trying to stamp out
    memory problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “我记得大家——我、黛安、丹（[博恩斯坦](#c25-footnote-1)）——都会待在这个战争室里，因为在发布的过程中，总会有很多地方因为使用过多内存而出现问题。我们没有交换分区，因为没有意义去设置交换分区。程序会因为内存不足而崩溃。那是一次次的英雄般的会议，我们有时会持续几天，而你永远不知道什么时候会结束，就是不停地努力解决内存问题。”
- en: “It was all about allocating memory pages. Dianne, or Brian Swetland, had written
    these tools to see dirty pages, and which pages were getting touched. We just
    had to stamp it out. It was a lot of grinding to see which apps were causing the
    problems and try to pinpoint them.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “这一切都与内存页的分配有关。黛安或者布赖恩·斯韦特兰曾写过这些工具，用来查看脏页以及哪些页面被访问过。我们只是必须解决这个问题。我们需要不断查看哪些应用程序引发了问题并尽量定位它们。”
- en: 'Ficus reflected on how his time at Be and Danger impacted his work on Android:
    “A lot of us came from these embedded systems, this philosophy of extreme frugality
    when it comes to CPU cycles or memory. I think that’s an interesting lens to look
    at a lot of the early Android decisions from. I look at a lot of these engineers
    like they were raised during the Depression and they learned to scrape the bottom
    of the pot.”'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ficus回顾他在Be和Danger的经历对他在Android工作时的影响：“我们当中很多人都来自嵌入式系统，拥有对CPU周期或内存极度节俭的哲学。我觉得从这个角度来看早期Android的许多决策是很有趣的。我看待这些工程师，就像他们是在大萧条时期成长的，他们学会了如何从锅底刮食物。”
- en: The mindset of the entire platform team was performance-first. This came from
    a combination of the limited memory on those early devices, along with slower
    CPUs, the lack of GPU rendering (Android didn’t use a GPU for UI graphics until
    the Honeycomb release), and Dalvik’s garbage collector (which took time allocating
    and collecting memory). This attitude continues internally even to this day, even
    though every device is much bigger and faster. Everything the phone does spends
    battery power, so optimizing the platform code is still worthwhile. Recommendations
    for external developers have been relaxed since those early days, but the Android
    APIs and implementation still reflect the original performance constraints.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 整个平台团队的思维方式是性能优先。这源于早期设备的内存有限、CPU速度较慢、没有GPU渲染（直到Honeycomb版本发布，Android才开始使用GPU进行UI图形渲染），以及Dalvik的垃圾回收器（需要时间进行内存分配和回收）等因素的综合影响。即使今天每个设备的性能都更强大、更快速，这种态度在内部依然延续着。手机的每一项操作都会消耗电池电量，因此优化平台代码依然是值得的。从那些早期的日子开始，外部开发者的建议要求已经放宽，但Android的API和实现仍然反映了当初的性能限制。
