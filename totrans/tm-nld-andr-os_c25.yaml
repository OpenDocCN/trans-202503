- en: '25'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lean Code
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve written it all, you can’t go back and re-optimize.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Bob Lee
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One of the aspects that defined Android from the very early days was that it
    was incredibly optimized so that it would work on the very limited mobile devices
    of that time. The performance mindset of the team affected everything from the
    APIs (many of which were written in a specific way so as to avoid allocating memory)
    to the coding recommendations given to external developers. It was all about writing
    optimal code because every cycle, every kilobyte, takes away resources or spends
    battery life that is needed elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: At least part of this performance-first focus can be attributed to the background
    of the early team members. The engineers that had previously worked at Danger
    had made their operating system work on devices that were even more limited than
    Android’s G1\. And engineers from PalmSource were also familiar with mobile constraints
    and realities.
  prefs: []
  type: TYPE_NORMAL
- en: Bob Lee observed, “They [former PalmSource engineers] would say that one of
    the reasons it failed was that they were just trying to do more than the hardware
    could handle. Once you’ve written it, you can’t go back and optimize. I just think
    they were avoiding that same mistake on Android. This was one of the reasons why
    Dianne [Hackborn] and everyone else were so anal about performance, and micro-optimized
    a lot of stuff. The phones were so slow back then.
  prefs: []
  type: TYPE_NORMAL
- en: “I remember everybody—me, Dianne, Dan [Bornstein]—would be in this war room,
    because over the course of a release there’d be all these places where people
    were using too much memory. We didn’t have swap,^([1](#c25-footnote-1)) because
    it didn’t make sense to have swap. Things would run out of memory and crash. It
    was this kind of heroic session in a war room where we’d just go on for days sometimes,
    and you would never know when the end was going to be, just trying to stamp out
    memory problems.
  prefs: []
  type: TYPE_NORMAL
- en: “It was all about allocating memory pages. Dianne, or Brian Swetland, had written
    these tools to see dirty pages, and which pages were getting touched. We just
    had to stamp it out. It was a lot of grinding to see which apps were causing the
    problems and try to pinpoint them.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Ficus reflected on how his time at Be and Danger impacted his work on Android:
    “A lot of us came from these embedded systems, this philosophy of extreme frugality
    when it comes to CPU cycles or memory. I think that’s an interesting lens to look
    at a lot of the early Android decisions from. I look at a lot of these engineers
    like they were raised during the Depression and they learned to scrape the bottom
    of the pot.”'
  prefs: []
  type: TYPE_NORMAL
- en: The mindset of the entire platform team was performance-first. This came from
    a combination of the limited memory on those early devices, along with slower
    CPUs, the lack of GPU rendering (Android didn’t use a GPU for UI graphics until
    the Honeycomb release), and Dalvik’s garbage collector (which took time allocating
    and collecting memory). This attitude continues internally even to this day, even
    though every device is much bigger and faster. Everything the phone does spends
    battery power, so optimizing the platform code is still worthwhile. Recommendations
    for external developers have been relaxed since those early days, but the Android
    APIs and implementation still reflect the original performance constraints.
  prefs: []
  type: TYPE_NORMAL
