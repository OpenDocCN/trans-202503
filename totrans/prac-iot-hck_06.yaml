- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network Assessments
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Assessing the security of services in IoT systems can sometimes be challenging,
    because these systems often use newer protocols supported by very few security
    tools, if any at all. So, it’s important that we learn which tools we *can* use
    and whether we can expand those tools’ capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we start by explaining how to circumvent network segmentation
    and penetrate into an isolated IoT network. Next, we show you how to identify
    IoT devices and fingerprint custom network services using Nmap. Then we attack
    *Message Queuing Telemetry Transport (MQTT)*, a common network IoT protocol. By
    doing so, you’ll learn how to write custom password-authentication cracking modules
    with the help of Ncrack.
  prefs: []
  type: TYPE_NORMAL
- en: Hopping into the IoT Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most organizations try to improve the security of their networks by introducing
    network segmentation and segregation strategies. These strategies separate assets
    with lower security requirements, such as the devices in the guest network, from
    critical components of the organization’s infrastructure, such as the web servers
    located at the datacenter and the voice network for employee phones. The critical
    components might also include an IoT network. For instance, the company might
    use security cameras and access control units, like remotely controlled door locks.
    To segregate the network, the company usually installs perimeter firewalls or
    switches and routers capable of separating the network into different zones.
  prefs: []
  type: TYPE_NORMAL
- en: One common way to segment a network is through *VLANs*, which are logical subsets
    of a larger, shared physical network. Devices must be located in the same VLAN
    to communicate. Any connection to a device that belongs to a different VLAN must
    go through a Layer 3 switch, a device that combines the functionality of a switch
    and a router, or just a router, which can then impose ACLs. The ACLs selectively
    admit or reject inbound packets using advanced rulesets, providing fine-grained
    network traffic control.
  prefs: []
  type: TYPE_NORMAL
- en: But if the company configures these VLANs insecurely or uses insecure protocols,
    an attacker could circumvent the restrictions by performing a VLAN-hopping attack.
    In this section, we walk through this attack to access the organization’s protected
    IoT network.
  prefs: []
  type: TYPE_NORMAL
- en: VLANs and Network Switches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To perform an attack against the VLANs, you need to understand how network switches
    operate. On a switch, each port is either configured as an *access port* or a
    *trunk port* (also called a *tagged* port by some vendors), as shown in [Figure
    4-1](#figure4-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![f04001](Images/f04001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-1: Common network architecture with separated VLANs for guests and
    IoT devices'
  prefs: []
  type: TYPE_NORMAL
- en: When a device, such as an IP camera, is connected to an access port, the network
    assumes that the packets it transfers belong to a certain VLAN. On the other hand,
    when a device is connected to a trunk port, it establishes a VLAN *trunk link*,
    a type of connection that allows the packets of any VLAN to pass through. We mainly
    use trunk links to connect multiple switches and routers.
  prefs: []
  type: TYPE_NORMAL
- en: To identify the traffic in a trunk link that belongs to each VLAN, the switch
    uses an identification method called *VLAN tagging*. It marks packets that traverse
    a trunk link with a tag that corresponds to their access port’s VLAN ID. When
    the packets arrive at the destination switch, the switch removes the tag and uses
    it to transfer the packets to the correct access port. Networks can use one of
    several protocols to perform the VLAN tagging, such as the Inter-Switch Link (ISL),
    the LAN Emulation (LANE), and IEEE 802.1Q and 802.10 (FDDI).
  prefs: []
  type: TYPE_NORMAL
- en: Switch Spoofing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many network switches establish VLAN trunk links dynamically using a Cisco proprietary
    networking protocol called the *Dynamic Trunking Protocol (DTP)*. DTP allows two
    connected switches to create a trunk link and then negotiate the VLAN tagging
    method.
  prefs: []
  type: TYPE_NORMAL
- en: In a *switch spoofing attack*, attackers abuse this protocol by pretending their
    device is a network switch, tricking a legitimate switch into establishing a trunk
    link to it ([Figure 4-2](#figure4-2)). As a result, the attackers can gain access
    to packets originating from any VLAN on the victim switch.
  prefs: []
  type: TYPE_NORMAL
- en: '![f04002](Images/f04002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-2: Switch spoofing attack'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try this attack. We’ll send DTP packets that resemble those from an actual
    switch on the network using the open source tool Yersinia ([https://github.com/tomac/yersinia/](https://github.com/tomac/yersinia/)).
    Yersinia is preinstalled in Kali Linux, but if you are using the latest Kali version,
    you’ll need to first install the `kali-linux-large` metapackage. You can do so
    by issuing the following command in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We generally recommend using the preceding approach instead of manually compiling
    tools, as we have identified issues with the compilation of some of the tools
    in the newest Kali versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can try compiling Yersinia by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To establish the trunk link with the attacker’s device, open Yersinia’s graphic
    user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the interface, click **Launch Attack**. Then, in the **DTP** tab, select
    the **enable trunking** option, as shown in [Figure 4-3](#figure4-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f04003](Images/f04003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-3: The Yersinia DTP tab'
  prefs: []
  type: TYPE_NORMAL
- en: When you select this option, Yersinia should imitate a switch that supports
    the DTP protocol, connect to a victim switch’s port, and repeatedly send the DTP
    packets needed to establish a trunk link with the victim switch. If you want to
    send just one raw DTP packet, select the first option.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve enabled trunking in the DTP tab, you should see data from the available
    VLANs in the 802.1Qtab, as shown in [Figure 4-4](#figure4-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f04004](Images/f04004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-4: The Yersinia 802.1Q tab'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data also includes the available VLAN IDs. To access the VLAN packets,
    first identify your network interface using the `nmcli` command, which is preinstalled
    in Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the attacker’s laptop has the `eth1` network interface. Enter
    the following commands in the Linux terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First, we load the kernel module for the VLAN tagging method using the `modprobe`
    command, which is preinstalled in Kali Linux. Then we create a new interface with
    the desired VLAN ID using the `vconfig` command, followed by the `add` parameter,
    the name of our network interface, and the VLAN identifier. The `vconfig` command
    is preinstalled in Kali Linux, and it’s included in the `vlan` package in other
    Linux distributions. In our case, we’ll specify the VLAN 20 ID used for the IoT
    network in this example and assign it to the network adapter on the attacker’s
    laptop. You can also select an IPv4 address using the `ifconfig` command.
  prefs: []
  type: TYPE_NORMAL
- en: Double Tagging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, an access port sends and receives packets with no VLAN
    tag, because those packets are assumed to belong to a specific VLAN. On the other
    hand, the packets that the trunk port sends and receives should be marked with
    a VLAN tag. This allows packets originating from any access port, even those belonging
    to different VLANs, to pass through. But there are certain exceptions to this,
    depending on the VLAN tagging protocol in use. For example, in the IEEE 802.1Q
    protocol, if a packet arrives at a trunk port and has no VLAN tag, the switch
    will automatically forward this packet to a predefined VLAN called the *native
    VLAN*. Usually, this packet has the VLAN ID 1\.
  prefs: []
  type: TYPE_NORMAL
- en: If the native VLAN’s ID belongs to one of the switch access ports or if an adversary
    has acquired it as part of a switch spoofing attack, the attacker might be able
    to perform a double tagging attack, as shown in [Figure 4-5](#figure4-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f04005](Images/f04005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-5: Double tagging attack'
  prefs: []
  type: TYPE_NORMAL
- en: When a packet that traverses a trunk link arrives on the destination switch’s
    trunk port, the destination port removes its VLAN tag and then uses this tag to
    transfer the packet to the correct custom packets. You could add two VLAN tags
    and trick the switch into removing only the outer one. If it’s the native VLAN
    tag, the switch will transfer the packet with the inner tag to its trunk link,
    toward the second switch. When the packet arrives on the destination switch’s
    trunk port, the switch will use the inner tag to forward the packet to the appropriate
    access port. You can use this method to send packets to a device that you wouldn’t
    otherwise be able to reach, such as an IoT device monitoring server, as shown
    in [Figure 4-5](#figure4-5).
  prefs: []
  type: TYPE_NORMAL
- en: To perform the attack, the outer VLAN tag has to identify the adversary’s own
    VLAN, which must also be the native VLAN of the established trunk link, whereas
    the inner tag must identify the VLAN to which a targeted IoT device belongs. We
    can use the *Scapy*``framework ([https://scapy.net/](https://scapy.net/)), a powerful
    packet manipulation program written in Python, to forge a packet with these two
    VLAN tags. You can install Scapy using Python’s `pip` package manager.``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
