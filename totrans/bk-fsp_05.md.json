["```\nopen System.Runtime.CompilerServices\n\n[<Extension>]\ntype public FSharpFuncUtil =\n  [<Extension>]\n  static member ToFSharpFunc<'a, 'b> (func : System.Func<'a, 'b>) =\n    fun x -> func.Invoke(x)\n\n  [<Extension>]\n  static member ToFSharpFunc<'a> (act : System.Action<'a>) =\n    fun x -> act.Invoke(x)\n```", "```\nlet add a b = a + b\n```", "```\nval add : a:int -> b:int -> int\n```", "```\n> **let add a = fun b -> (+) a b;;**\n\nval add : a:int -> b:int -> int\n```", "```\n> **let addTen = add 10;;**\n\nval addTen : ① (int -> int)\n> **addTen 10;;**\nval it : int = 20\n```", "```\nadd 2 3 |> ignore\n```", "```\nlet fahrenheitToCelsius degreesF = (degreesF - 32.0) * (5.0 / 9.0)\n\nlet marchHighTemps = [ 33.0; 30.0; 33.0; 38.0; 36.0; 31.0; 35.0;\n                       42.0; 53.0; 65.0; 59.0; 42.0; 31.0; 41.0;\n                       49.0; 45.0; 37.0; 42.0; 40.0; 32.0; 33.0;\n                       42.0; 48.0; 36.0; 34.0; 38.0; 41.0; 46.0;\n                       54.0; 57.0; 59.0 ]\n**marchHighTemps**\n**|> List.average**\n**|> fahrenheitToCelsius**\n**|> printfn \"March Average (C): %f\"**\n```", "```\nprintfn \"March Average (F): %f\" <| List.average marchHighTemps\n```", "```\n5.0\n|> System.TimeSpan.FromSeconds\n|> System.Threading.Thread.Sleep\n```", "```\n> **let averageInCelsius = List.average >> fahrenheitToCelsius;;**\n\nval averageInCelsius : (float list -> float)\n```", "```\nprintfn \"March average (C): %f\" <| **averageInCelsius marchHighTemps**\n```", "```\n> **let delay = System.TimeSpan.FromSeconds >> System.Threading.Thread.Sleep;;**\n\nval delay : (float -> unit)\n```", "```\n> **delay 5.0;;**\nval it : unit = ()\n```", "```\nlet **rec** factorial v =\n  match v with | 1L -> 1L\n               | _ -> v * **factorial (v - 1L)**\n```", "```\n5L * (factorial 4L)\n5L * (4L * (factorial 3L))\n5L * (4L * (3L * (factorial 2L)))\n-- *snip* --\n```", "```\n① let factorial v =\n  let ② rec fact c p =\n    match c with | 0L -> p\n                 | _ ->  ③ fact <| c - 1L <| c * p\n  ④ fact v 1L\n```", "```\n**Standard recursion**\n   at FSI_0024.printTrace()\n   at FSI_0028.factorial(Int64 v)\n   at FSI_0028.factorial(Int64 v)\n   at FSI_0028.factorial(Int64 v)\n   at FSI_0028.factorial(Int64 v)\n   at FSI_0028.factorial(Int64 v)\n   at <StartupCode$FSI_0029>.$FSI_0029.main@()\n   -- *snip* --\n\n**Tail recursion**\n   at FSI_0024.printTrace()\n   at FSI_0030.fact@75-8(Int64 c, Int64 p)\n   at <StartupCode$FSI_0031>.$FSI_0031.main@()\n   -- *snip* --\n```", "```\nlet fibonacci n =\n  **let rec f = function**\n              **| 1 -> 1**\n              **| n -> g (n - 1)**\n  **and g = function**\n          **| 1 -> 0**\n          **| n -> g (n - 1) + f (n - 1)**\n  f n + g n\n```", "```\n> **fibonacci 6;;**\nval it : int = 8\n```", "```\n**(fun degreesF -> (degreesF - 32.0) * (5.0 / 9.0))** 212.0\n```", "```\nlet createCounter() =\n  let count = ref 0\n  (fun () -> count := !count + 1\n             !count)\n```", "```\nlet increment = createCounter()\nfor i in [1..10] do printfn \"%i\" (increment())\n```", "```\n> **let point1 = 10.0, 10.0;;**\n\nval point1 : float * float = (10.0, 10.0)\n\n> **let point2 = (20.0, 20.0);;**\n\nval point2 : float * float = (20.0, 20.0)\n```", "```\nlet point : **float * float** = 0.0, 0.0\n```", "```\nlet slope p1 p2 =\n  let x1 = **fst** p1\n  let y1 = **snd** p1\n  let x2 = **fst** p2\n  let y2 = **snd** p2\n  (y1 - y2) / (x1 - x2)\n\nslope (13.0, 8.0) (1.0, 2.0)\n```", "```\nlet slope p1 p2 =\n  let **x1, y1** = p1\n  let **x2, y2** = p2\n  (y1 - y2) / (x1 - x2)\n```", "```\n> let **_, _, z** = (10.0, 10.0, 10.0);;\n\nval z : int = 10\n```", "```\nlet slope **(x1, y1) (x2, y2)** = (y1 - y2) / (x1 - x2)\n```", "```\n> **(1, 2) = (1, 2);;**\nval it : bool = true\n> **(2, 1) = (1, 2);;**\nval it : bool = false\n```", "```\n> **System.String.Format \"hello {0}\" \"Dave\";;**\n\n  System.String.Format \"hello {0}\" \"Dave\";;\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nstdin(3,1): error FS0003: This value is not a function and cannot be applied\n```", "```\n> **System.String.Format (\"hello {0}\", \"Dave\");;**\nval it : string = \"hello Dave\"\n```", "```\n  // C#\n① int v;\n  var r = System.Int32.TryParse(\"10\", **out v**);\n```", "```\n// F#\nlet r, v = System.Int32.TryParse \"10\"\n```", "```\n// C#\nusing System;\nusing System.Diagnostics;\nusing System.Runtime.CompilerServices;\nnamespace <StartupCode$Samples>\n{\n  internal static class $Samples\n  {\n    [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n    internal static readonly Tuple<bool, int> patternInput@3;\n    [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n    internal static readonly int v@3;\n    [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n    internal static readonly bool r@3;\n    [DebuggerBrowsable(DebuggerBrowsableState.Never), DebuggerNonUserCode, CompilerGenerated]\n    internal static int init@;\n  ① static $Samples()\n    {\n      int item = 0;\n      $Samples.patternInput@3 = ② new Tuple<bool, int>(③ int.TryParse(\"10\", out item), item);\n      ④ $Samples.v@3 = Samples.patternInput@3.Item2;\n      ⑤ $Samples.r@3 = Samples.patternInput@3.Item1;\n    }\n  }\n}\n```", "```\n> **type rgbColor = { R : byte; G : byte; B : byte };;**\n\ntype rgbColor =\n  {R: byte;\n   G: byte;\n   B: byte;}\n```", "```\n> **let red = { R = 255uy; G = 0uy; B = 0uy };;**\n\nval red : rgbColor = {R = 255uy;\n                      G = 0uy;\n                      B = 0uy;}\n```", "```\n> **let red = { G = 0uy; B = 0uy; R = 255uy };;**\n\nval red : rgbColor = {R = 255uy;\n                      G = 0uy;\n                      B = 0uy;}\n```", "```\nlet rgbColorToHex (c : rgbColor) =\n  sprintf \"#%02X%02X%02X\" **c.R c.G c.B**\n```", "```\n> **type rgbColor = { R : byte; G : byte; B : byte }**\n**type color = { R : byte; G : byte; B : byte };;**\n\ntype rgbColor =\n  {R: byte;\n   G: byte;\n   B: byte;}\ntype color =\n  {R: byte;\n   G: byte;\n   B: byte;}\n\n> **let red = { R = 255uy; G = 0uy; B = 0uy };;**\n\nval red : ① color = {R = 255uy;\n                     G = 0uy;\n                     B = 0uy;}\n```", "```\n> **let red = {** ① **rgbColor.R = 255uy; G = 0uy; B = 0uy };;**\n\nval red : ② rgbColor = {R = 255uy;\n                        G = 0uy;\n                        B = 0uy;}\n```", "```\n> let red = { R = 255uy; G = 0uy; B = 0uy }\nlet yellow = **{ red with G = 255uy };;**\n\nval red : color = {R = 255uy;\n                   G = 0uy;\n                   B = 0uy;}\nval yellow : color = {R = 255uy;\n                      G = 255uy;\n                      B = 0uy;}\n```", "```\n> **type rgbColor = { mutable R : byte**\n                  **mutable G : byte**\n                  **mutable B : byte };;**\n\ntype rgbColor =\n  {mutable R: byte;\n   mutable G: byte;\n   mutable B: byte;}\n```", "```\nlet myColor = { R = 255uy; G = 255uy; B = 255uy }\nmyColor.G <- 100uy\n```", "```\ntype rgbColor = { R : byte; G : byte; B : byte }\n                **member x.ToHexString() =**\n                  **sprintf \"#%02X%02X%02X\" x.R x.G x.B**\n```", "```\n> **red.ToHexString();;**\nval it : string = \"#FF0000\"\n```", "```\ntype rgbColor = { R : byte; G : byte; B : byte }\n                -- *snip* --\n                **static member Red = { R = 255uy; G = 0uy; B = 0uy }**\n                **static member Green = { R = 0uy; G = 255uy; B = 0uy }**\n                **static member Blue = { R = 0uy; G = 0uy; B = 255uy }**\n```", "```\n> **rgbColor.Red.ToHexString();;**\nval it : string = \"#FF0000\"\n```", "```\nopen System\ntype rgbColor = { R : byte; G : byte; B : byte }\n                -- *snip* --\n                **static member (+) (l : rgbColor, r : rgbColor) =**\n                  **{ R = Math.Min(255uy, l.R + r.R)**\n                   **G = Math.Min(255uy, l.G + r.G)**\n                   **B = Math.Min(255uy, l.B + r.B) }**\n```", "```\n> **let yellow = { R = 255uy; G = 0uy; B = 0uy } +**\n             **{ R = 0uy; G = 255uy; B = 0uy };;**\n\nval yellow : rgbColor = {R = 255uy;\n                         G = 255uy;\n                         B = 0uy;}\n```", "```\ntype Option<'T> =\n| None\n| Some of 'T\n```", "```\nlet showValue (v : _ option) =\n  printfn \"%s\" (match v with\n                | Some x -> x.ToString()\n                | None -> \"None\")\n```", "```\n> **Some 123 |> showValue;;**\n123\nval it : unit = ()\n> **Some \"abc\" |> showValue;;**\nabc\nval it : unit = ()\n> **None |> showValue;;**\nNone\nval it : unit = ()\n```", "```\n> **showValue \"xyz\";;**\n\n  showValue \"xyz\";;\n  ----------^^^^^\n\nstdin(9,11): error FS0001: This expression was expected to have type\n    Option<'a>\nbut here has type\n    string\n```", "```\ntype IShape = interface end\n\ntype Circle(r : float) =\n  interface IShape\n  member x.Radius = r\n\ntype Rectangle(w : float, h : float) =\n  interface IShape\n  member x.Width = w\n  member x.Height = h\n\ntype Triangle(l1 : float, l2 : float, l3 : float) =\n  interface IShape\n  member x.Leg1 = l1\n  member x.Leg2 = l2\n  member x.Leg3 = l3\n```", "```\ntype Shape =\n/// Describes a circle by its radius\n| Circle of float\n/// Describes a rectangle by its width and height\n| Rectangle of ① float * float\n/// Describes a triangle by its three sides\n| Triangle of ② float * float * float\n```", "```\nlet c = Circle(3.0)\nlet r = Rectangle(10.0, 12.0)\nlet t = Triangle(25.0, 20.0, 7.0)\n```", "```\ntype Shape =\n| Circle of Radius : float\n| Rectangle of Width : float * Height : float\n| Triangle of Leg1 : float * Leg2 : float * Leg3 : float\n```", "```\nlet c = Circle(Radius = 3.0)\nlet r = Rectangle(Width = 10.0, Height = 12.0)\nlet t = Triangle(Leg1 = 25.0, Leg2 = 20.0, Leg3 = 7.0)\n```", "```\ntype Markup =\n| ContentElement of string * ① Markup list\n| EmptyElement of string\n| Content of string\n```", "```\nlet movieList =\n  ContentElement(\"html\",\n    [ ContentElement(\"head\", [ ContentElement(\"title\", [ Content \"Guilty Pleasures\" ])])\n      ContentElement(\"body\",\n        [ ContentElement(\"article\",\n            [ ContentElement(\"h1\", [ Content \"Some Guilty Pleasures\" ])\n              ContentElement(\"p\",\n                [ Content \"These are \"\n                  ContentElement(\"strong\", [ Content \"a few\" ])\n                  Content \" of my guilty pleasures\" ])\n              ContentElement(\"ul\",\n                [ ContentElement(\"li\", [ Content \"Crank (2006)\" ])\n                  ContentElement(\"li\", [ Content \"Starship Troopers (1997)\" ])\n                  ContentElement(\"li\", [ Content \"RoboCop (1987)\" ])])])])])\n```", "```\nlet rec toHtml markup =\n  match markup with\n  | ① ContentElement (tag, children) ->\n        use w = new System.IO.StringWriter()\n        children\n          |> Seq.map toHtml\n          |> Seq.iter (fun (s : string) -> w.Write(s))\n        sprintf \"<%s>%s</%s>\" tag (w.ToString()) tag\n  | ② EmptyElement (tag) -> sprintf \"<%s />\" tag\n  | ③ Content (c) -> sprintf \"%s\" c\n```", "```\n<html>\n  <head>\n    <title>Guilty Pleasures</title>\n  </head>\n  <body>\n    <article>\n        <h1>Some Guilty Pleasures</h1>\n        <p>These are <strong>a few</strong> of my guilty pleasures</p>\n        <ul>\n            <li>Crank (2006)</li>\n            <li>Starship Troopers (1997)</li>\n            <li>RoboCop (1987)</li>\n        </ul>\n    </article>\n  </body>\n</html>\n```", "```\n  open System.IO\n\n① type HtmlString = string\n\n  let displayHtml (html ②: HtmlString) =\n    let fn = Path.Combine(Path.GetTempPath(), \"HtmlDemo.htm\")\n    let bytes = System.Text.UTF8Encoding.UTF8.GetBytes html\n    using (new FileStream(fn, FileMode.Create, FileAccess.Write))\n          (fun fs -> fs.Write(bytes, 0, bytes.Length))\n    System.Diagnostics.Process.Start(fn).WaitForExit()\n    File.Delete fn\n```", "```\ntype HtmlString = | HtmlString of string\n```", "```\nlet displayHtml **(HtmlString(html))** =\n  let fn = Path.Combine(Path.GetTempPath(), \"HtmlDemo.htm\")\n  let bytes = System.Text.UTF8Encoding.UTF8.GetBytes html\n  using (new FileStream(fn, FileMode.Create, FileAccess.Write))\n        (fun fs -> fs.Write(bytes, 0, bytes.Length))\n  System.Diagnostics.Process.Start(fn).WaitForExit()\n  File.Delete fn\n```", "```\nHtmlString(movieList |> toHtml) |> displayHtml\n```", "```\nlet rec toHtml markup =\n  match markup with\n  | ContentElement (tag, children) ->\n        use w = new System.IO.StringWriter()\n        children\n          |> Seq.map toHtml\n          |> Seq.iter (fun ① (HtmlString(html)) -> w.Write(html))\n        HtmlString (sprintf \"<%s>%s</%s>\" tag (w.ToString()) tag)\n  | EmptyElement (tag) -> HtmlString (sprintf \"<%s />\" tag)\n  | Content (c) -> HtmlString (sprintf \"%s\" c)\n```", "```\nmovieList |> toHtml |> displayHtml\n```", "```\ntype Markup =\n| ContentElement of string * Markup list\n| EmptyElement of string\n| Content of string\n\nmember x.toHtml() =\n  match x with\n  | ContentElement (tag, children) ->\n        use w = new System.IO.StringWriter()\n        children\n          |> Seq.map (fun m -> m.toHtml())\n          |> Seq.iter (fun (HtmlString(html)) -> w.Write(html))\n        HtmlString (sprintf \"<%s>%s</%s>\" tag (w.ToString()) tag)\n  | EmptyElement (tag) -> HtmlString (sprintf \"<%s />\" tag)\n  | Content (c) -> HtmlString (sprintf \"%s\" c)\n```", "```\nmovieList.toHtml() |> displayHtml\n```", "```\n**> let lazyOperation = lazy (printfn \"evaluating lazy expression\"**\n                          **System.Threading.Thread.Sleep(1000)**\n                          **42);;**\n\nval lazyOperation : Lazy<int> = Value is not created.\n```", "```\n> **lazyOperation.Force() |> printfn \"Result: %i\";;**\nevaluating lazy expression\nResult: 42\nval it : unit = ()\n```", "```\n> **let lazyOperation = lazy (System.Threading.Thread.Sleep(1000); 42)**\n**#time \"on\";;**\n\nval lazyOperation : Lazy<int> = Value is not created.\n\n--> Timing now on\n\n> **lazyOperation.Force() |> printfn \"Result: %i\";;**\nResult: 42\nReal: ① 00:00:01.004, CPU: 00:00:00.000, GC gen0: 0, gen1: 0, gen2: 0\nval it : unit = ()\n> **lazyOperation.Force() |> printfn \"Result: %i\";;**\nResult: 42\nReal: ② 00:00:00.001, CPU: 00:00:00.000, GC gen0: 0, gen1: 0, gen2: 0\nval it : unit = ()\n> **lazyOperation.Force() |> printfn \"Result: %i\";;**\nResult: 42\nReal: ③ 00:00:00.001, CPU: 00:00:00.000, GC gen0: 0, gen1: 0, gen2: 0\nval it : unit = ()\n```"]