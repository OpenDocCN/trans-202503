- en: '![Image](../images/p0001-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Primer: Getting Started**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Before you start building with the Arduino, there are a few things you need
    to know and do. First, let’s take a look at the hardware and software you’ll need
    for this book. Then, you’ll test out the Arduino with a simple LED project and
    get started with a few techniques that will come in handy, like soldering and
    downloading useful code libraries.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HARDWARE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First let’s look at the Arduino Uno board and a few pieces of hardware that
    you’ll use in almost every project.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Arduino Uno**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are numerous types of Arduino boards available, but this book uses only
    the most popular one, the Arduino Uno shown in [Figure 0-1](pref02.xhtml#ch0fig1).
    The Arduino Uno is open source (meaning its designs may be freely copied), so
    as well as the official board, which costs about $25, you will find numerous compatible
    clone boards for around $15.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-1:** The Arduino Uno board'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Arduino controls components you attach to it, like motors or LEDs, by sending
    information to them as *output* (information sent *out* from the Arduino). Data
    that the Arduino reads from a sensor is *input* (information going *in* to the
    Arduino). There are 14 digital input/output pins (pins 0–13) on the Arduino. Each
    can be set to either input or output (see “[Arduino Pin Reference](app03.xhtml#app03)”
    on [page 253](app03.xhtml#page_253) for a full pin reference table).
  prefs: []
  type: TYPE_NORMAL
- en: '**Power**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you connect the Arduino Uno board to your PC to upload a program, it is
    powered from your computer’s USB port. When the Arduino is not linked to your
    PC, you can have it run independently by connecting it to a 9-volt AC adapter
    or 9-volt battery pack with a 2.1 mm jack, with the center pin connected to positive
    power as shown in [Figure 0-2](pref02.xhtml#ch0fig2). Simply insert the jack into
    the power socket of the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-2:** A 9-volt battery pack, which you can plug into the Arduino
    to give it power'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Breadboards**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A breadboard acts as a construction base for electronics prototyping. You’ll
    use a breadboard for all of the projects in this book instead of soldering parts
    together.
  prefs: []
  type: TYPE_NORMAL
- en: The name *breadboard* dates back to when electronics projects were created on
    wooden boards. Hobbyists hammered nails into the wood and wrapped wires around
    them to connect components without having to solder them permanently. Today’s
    breadboards are made of plastic with predrilled holes (called *tie points*) into
    which you insert components or wires, which are held in place by clips underneath.
    The tie points are connected by lengths of conductive material that run beneath
    the board, as shown in [Figure 0-3](pref02.xhtml#ch0fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-3:** Breadboard connections'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Breadboards come in various sizes. To build the projects in this book, you’ll
    ideally need three breadboards: one full-size, typically with 830 holes; one half-size,
    with about 420 holes; and one mini board with 170 holes. The full-size breadboard
    is ideal for projects that use an LCD screen or a lot of components, and the half-size
    and mini boards are best for smaller projects. For the projects in this book,
    I recommend that you buy breadboards that look like the one shown in [Figure 0-3](pref02.xhtml#ch0fig3),
    with red and blue lines and a center break between the holes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s useful to use red wires for connections to 5V and black wires for connections
    to ground (GND). The rest of the wires can be your choice of color.*'
  prefs: []
  type: TYPE_NORMAL
- en: The main board area has 30 columns of tie points that are connected vertically,
    as shown in [Figure 0-3](pref02.xhtml#ch0fig3). You’ll often have to position
    components so they straddle the breadboard’s center break to complete your circuit.
    This break helps to prevent components from short-circuiting, which can derail
    your project and even damage your components. You’ll learn more about this as
    you start to build.
  prefs: []
  type: TYPE_NORMAL
- en: The blue and red lines at the top and bottom are power rails that you use to
    power the components inserted in the main breadboard area (see [Figure 0-4](pref02.xhtml#ch0fig4)).
    The power rails connect all the holes in the rail horizontally; the red lines
    are for positive power and the blue lines for negative power (or *ground*, as
    you’ll often see it called).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-4:** Positive and negative breadboard rails'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Jumper Wires**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll use *jumper wires* to make connections on the breadboard. Jumper wires
    are solid-core wire with a molded plastic holder on each end that makes it easier
    to insert and remove the wires. (You could use your own wire if you have it, but
    make sure to use solid-core wire—stranded wire is not strong enough to push into
    the hole clips.)
  prefs: []
  type: TYPE_NORMAL
- en: When you insert a jumper wire into a breadboard hole, it’s held in place from
    beneath the board by a small spring clip, making an electrical connection in that
    row. You can then place a component in an adjoining hole to help create a circuit,
    as shown in [Figure 0-5](pref02.xhtml#ch0fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-5:** An example breadboard circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because the IDE versions can change fairly quickly,* *I won’t take you through
    installing them, but installation should be straightforward and the instructions
    on the Arduino site are clear. All versions of the IDE and full details of how
    to install for your operating system are available at* [http://www.arduino.cc/](http://www.arduino.cc/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING THE ARDUINO**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make our projects do what we want, we need to write programs that give the
    Arduino instructions. We do so using the Arduino *integrated development environment
    (IDE)*. The Arduino IDE is available to download free from *[http://www.arduino.cc/](http://www.arduino.cc/)*,
    and will run on Microsoft Windows, OS X, and Linux. It enables you to write computer
    programs (a set of step-by-step instructions, known as *sketches* in the Arduino
    world) that you then upload to the Arduino using a USB cable. Your Arduino will
    carry out the instructions based on its interaction with the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: '**The IDE Interface**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you open the Arduino IDE, it should look similar to [Figure 0-6](pref02.xhtml#ch0fig6).
    The IDE screen is divided into a toolbar at the top with buttons for the most
    commonly used functions; the sketch window in the center, where you’ll write or
    view your programs; and the Serial Output window at the bottom. The Serial Output
    window displays communication messages between your PC and the Arduino, and also
    lists any errors if your sketch doesn’t compile properly.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-6:** The Arduino IDE'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Arduino Sketches**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I’ll give you the sketch for each project within the relevant project itself,
    and talk through it there. All of the sketches are available to download from
    *[http://www.nostarch.com/arduinohandbook2/](http://www.nostarch.com/arduinohandbook2/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Like any program, sketches are a very strict set of instructions and very sensitive
    to errors. It’s best to download the sketch and open the file in the IDE, rather
    than try to copy it from the book. To make sure it works correctly, click the
    green check mark at the top of the screen. This is the Verify button, and it checks
    for mistakes and tells you in the Serial Output window whether the sketch has
    compiled correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Libraries**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the Arduino world a *library* is a piece of code that carries out a specific
    function. Rather than enter this same code repeatedly in your sketches wherever
    you need, you can simply add a command that borrows that code from the library.
    This shortcut saves time and makes it easy for you to connect to items such as
    a sensor, display, or module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Arduino IDE includes a number of built-in libraries—such as the LiquidCrystal
    library, which makes it easy to talk to LCD displays—and there are many more available
    online. To create the projects in the book, you’ll need to import the following
    libraries: PololuLedStrip, FastLED, HMC5883L, Keypad, Tone, Adafruit_GFX, Adafruit_SDD1306,
    NewPing, Adafruit Fingerprint Sensor, and Adafruit Motor Shield. You’ll find all
    of the libraries you need in the resources at *[http://www.nostarch.com/arduinohandbook2/](http://www.nostarch.com/arduinohandbook2/)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Libraries**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once you’ve downloaded the libraries, you’ll need to install them. To install
    a library in Arduino version 1.0.5 and higher, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Sketch** ▸ **Include Library** ▸ **Add .ZIP Library**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the ZIP file you downloaded and select it. In older versions of Arduino,
    unzip the library file and put the whole folder and its contents into the *sketchbook/libraries*
    folder on Linux, *My Documents\Arduino\Libraries* on Windows, or *Documents/Arduino/libraries*
    on OS X.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install a library manually, go to the ZIP file containing the library and
    uncompress it. For example, to install a library called *keypad* in a compressed
    file called *keypad.zip*, you would uncompress *keypad.zip*, which expands into
    a folder called *keypad*, which in turn contains files like *keypad.cpp* and *keypad.h*.
    Once the ZIP file is expanded, you would drag the *keypad* folder into the *libraries*
    folder on your operating system: *sketchbook/libraries* in Linux, *My Documents\Arduino\Libraries*
    on Windows, and *Documents/Arduino/libraries* on OS X. Then you’d restart the
    Arduino application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Libraries are listed at the start of a sketch and are easily identified because
    they begin with the command `#include`. Library names are surrounded by `< >`
    and end with `.h`, as in this code to call the Servo library:'
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Servo.h>'
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and install the libraries you’ll need for the projects now to save
    yourself a bit of time later.
  prefs: []
  type: TYPE_NORMAL
- en: '**TESTING YOUR ARDUINO: BLINKING AN LED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s begin our tour with the classic first Arduino project: blinking an LED
    (short for *light-emitting diode*, which is like a little light bulb). Not only
    is this the simplest way to make sure that your Arduino is working correctly,
    but it will also introduce you to a simple sketch. The Arduino can hold only one
    program at a time, so once you upload your sketch to your Arduino, that sketch
    will run every time the Arduino is switched on until you change it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Build**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For this project we’ll use the *Blink* example sketch that comes with the IDE.
    The Blink program turns an LED on for 1 second and then off, repeatedly. The LED
    works only with current flowing in one direction, so its longer wire must connect
    to a positive power connection. LEDs require a *current-limiting resistor* or
    else the bulb may burn out. There is a built-in resistor in pin 13 of the Arduino
    that we’ll use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to set up your test:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert the longer, positive leg of the LED to pin number 13 on the Arduino,
    as shown in [Figure 0-7](pref02.xhtml#ch0fig7). Connect the shorter, negative
    wire to the GND pin next to pin 13.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 0-7:** The *Blink* project setup'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f0-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the Arduino to your computer with the USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Arduino IDE on your computer, then choose **File** ▸ **Examples** ▸
    **Blinking LED** from the drop-down menu. The sketch will appear in the main program
    area of the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ➊// Blinking LED Project - This example code is in the public domain
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➋ int led = 13;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➌ void setup() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➍   pinMode(led, OUTPUT);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➎ void loop() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➏   digitalWrite(led, HIGH);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➐   delay(1000);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➑   digitalWrite(led, LOW);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➒   delay(1000);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ➓ }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the IDE, click the **Verify** button to check that the sketch is working
    correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Upload** button to send the sketch to your Arduino. Running this
    code should make your LED flash on and off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Understanding the Sketch**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here’s what’s happening on each line of the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: ➊ This is a comment. Any line in your program starting with `//` is meant to
    be read by the user only and is ignored by the Arduino, so use this technique
    to enter notes and describe your code (called *commenting* your code). If a comment
    extends beyond one line, start the first line with `/*` and end the comment with
    `*/`. Everything in between will be ignored by the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: ➋ This gives pin 13 the name `led`. Every mention of `led` in the sketch will
    refer to pin 13.
  prefs: []
  type: TYPE_NORMAL
- en: ➌ The code between the curly brackets, `{}`, will run once when the program
    starts. The open curly bracket, `{`, begins the setup code.
  prefs: []
  type: TYPE_NORMAL
- en: ➍ This tells the Arduino that pin 13 is an output pin, indicating that we want
    to send power to the LED from the Arduino. The closing curly bracket, `}`, ends
    the setup code.
  prefs: []
  type: TYPE_NORMAL
- en: ➎ This creates a loop. Everything between the curly brackets, `{}`, after the
    `loop()` statement will run once the Arduino is powered on and then repeat until
    it is powered off.
  prefs: []
  type: TYPE_NORMAL
- en: ➏ This tells the Arduino to set `led` (pin 13) to `HIGH`, which sends power
    to that pin. Think of it as switching the pin on. In this sketch, this turns on
    the LED.
  prefs: []
  type: TYPE_NORMAL
- en: ➐ This tells the Arduino to wait for 1 second. Time on the Arduino is measured
    in milliseconds, so 1 second = 1,000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: ➑ This tells the Arduino to set `led` (pin 13) to `LOW`, which removes power
    and switches off the pin. This turns off the LED.
  prefs: []
  type: TYPE_NORMAL
- en: ➒ Again the Arduino is told to wait for 1 second.
  prefs: []
  type: TYPE_NORMAL
- en: ➓ This closing curly bracket ends the loop. All code after the initial `setup`
    must be enclosed within curly brackets. A missing bracket can easily be overlooked
    and is a common cause of errors that will prevent your sketch from compiling correctly.
    After this curly bracket, the code goes back to the start of the loop at ➎.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve tested your Arduino and understand how a sketch works and how
    to upload it, we’ll take a look at the components you’ll need to carry out all
    of the projects in this book. “[Components](app02.xhtml#app02)” on [page 238](app02.xhtml#page_238)
    has more details about each component, what it looks like, and what it does.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT COMPONENT LIST**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a complete list of the items you’ll need in order to complete the projects
    in this book. The most important part, of course, is the Arduino board itself,
    and all projects use the Arduino Uno R3 version. Only the official boards are
    named Arduino, but you’ll find compatible clone boards from companies like SlicMicro,
    Sainsmart, and Adafruit. (You’ll find a list of official suppliers at *[http://arduino.cc/en/Main/Buy/](http://arduino.cc/en/Main/Buy/)*.)
  prefs: []
  type: TYPE_NORMAL
- en: You can buy each item individually, but I suggest buying an electronics hobby
    starter kit or Arduino kit, which will provide you with several of the items here.
    See the “[Retailer List](app02.xhtml#ch00lev1sec170)” on [page 249](app02.xhtml#page_249)
    for a list of suggested suppliers. Alternatively, each project begins with a list
    of the required parts, so you can flip to a project that interests you and obtain
    just those components if you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: 1 Arduino Uno R3 (or compatible)
  prefs: []
  type: TYPE_NORMAL
- en: 1 9V battery pack with 2.1 mm jack for 6 AA batteries
  prefs: []
  type: TYPE_NORMAL
- en: 1 9V battery snap and battery
  prefs: []
  type: TYPE_NORMAL
- en: '3 breadboards: 1 full-size, 1 half-size, 1 mini'
  prefs: []
  type: TYPE_NORMAL
- en: 50 male-to-male jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: 10 female-to-male jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: Solid-core wire
  prefs: []
  type: TYPE_NORMAL
- en: 9 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: 4 10k-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: 8 1k-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: 40 5 mm LEDs in red, green, yellow, blue (10 of each)
  prefs: []
  type: TYPE_NORMAL
- en: 1 RGB common-cathode LED
  prefs: []
  type: TYPE_NORMAL
- en: 1 RGB LED strip (WS2812B 5V 32-LED strip)
  prefs: []
  type: TYPE_NORMAL
- en: 1 Adafruit NeoPixel ring with 16 RGB LEDs
  prefs: []
  type: TYPE_NORMAL
- en: 1 HMC5883L three-axis sensor
  prefs: []
  type: TYPE_NORMAL
- en: 2 50k-ohm potentiometers
  prefs: []
  type: TYPE_NORMAL
- en: 1 10k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: 8 momentary tactile pushbuttons
  prefs: []
  type: TYPE_NORMAL
- en: 1 seven-segment, single-digit common-cathode LED
  prefs: []
  type: TYPE_NORMAL
- en: 1 piezo sounder
  prefs: []
  type: TYPE_NORMAL
- en: 1 3.5 mm female headphone jack
  prefs: []
  type: TYPE_NORMAL
- en: 1 Tower Pro SG90 9g servomotor
  prefs: []
  type: TYPE_NORMAL
- en: 1 photoresistor (*light-dependent resistor*, or *LDR*)
  prefs: []
  type: TYPE_NORMAL
- en: 1 28BYJ-48 stepper motor with ULN2003 driver module
  prefs: []
  type: TYPE_NORMAL
- en: 1 HC-SR04 ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 3×4 membrane keypad
  prefs: []
  type: TYPE_NORMAL
- en: 1 LM35 temperature sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 12V mini computer cooling fan
  prefs: []
  type: TYPE_NORMAL
- en: 1 5V single-channel relay module
  prefs: []
  type: TYPE_NORMAL
- en: 1 HD44780 16×2 LCD screen
  prefs: []
  type: TYPE_NORMAL
- en: 1 Nokia 5110 LCD screen
  prefs: []
  type: TYPE_NORMAL
- en: 1 serial LCD screen module
  prefs: []
  type: TYPE_NORMAL
- en: 1 OLED monochrome screen (128×64)
  prefs: []
  type: TYPE_NORMAL
- en: 1 8×8 LED Maxim 7219 matrix module
  prefs: []
  type: TYPE_NORMAL
- en: 1 Keyes MQ3 alcohol sensor module
  prefs: []
  type: TYPE_NORMAL
- en: 1 optical fingerprint sensor (ZFM-20 series)
  prefs: []
  type: TYPE_NORMAL
- en: 1 L293d motor shield
  prefs: []
  type: TYPE_NORMAL
- en: 1 robot chassis kit, including two DC motors and wheels, center wheel, base,
    and fittings
  prefs: []
  type: TYPE_NORMAL
- en: 1 Ethernet shield W5100 LAN expansion board
  prefs: []
  type: TYPE_NORMAL
- en: 1 Ethernet cable
  prefs: []
  type: TYPE_NORMAL
- en: 1 WLToys V959-18 Water Jet Pistol
  prefs: []
  type: TYPE_NORMAL
- en: 1 HC-06 Bluetooth module
  prefs: []
  type: TYPE_NORMAL
- en: 1 Ublox NEO-6M GPS module aircraft flight controller and antenna
  prefs: []
  type: TYPE_NORMAL
- en: '**QUICK SOLDERING GUIDE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The majority of the projects in this book do not requiring soldering, but there
    are a few components that may come with their header pins ([Figure 0-8](pref02.xhtml#ch0fig8))
    unattached for ease of transport. Header pins come in strips that can be easily
    snapped to the size needed.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-8:** Header pins'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, the GPS module used in Project 25 doesn’t come with the pins attached,
    so I’ll explain how to solder those in place. A general-purpose, 30-watt soldering
    iron with a fine tip should meet your needs. It is worthwhile to buy a kit that
    includes a soldering iron, stand, and solder ([Figure 0-9](pref02.xhtml#ch0fig9)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-9:** Soldering iron'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plug in your soldering iron and wait at least 5 minutes for it to reach operating
    temperature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To solder, break off a strip of header pins with the number you need. Insert
    them into the module as shown in [Figure 0-10](pref02.xhtml#ch0fig10).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 0-10:** Insert the header pins into the module.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f0-10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now solder the pins in place, starting with the leftmost pin. Hold the heated
    tip of the soldering iron to both the pin and module contact at the same time.
    You only need to hold it there for about 2 seconds. While holding the iron in
    place, add solder to the area; the solder should melt and flow and create a *join*.
    Note that you do not apply solder directly to the iron, only to the joint you
    are soldering. Quickly remove both the iron and solder—more than a couple of seconds
    of contact could damage your components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A good solder joint should look like a shiny cone ([Figure 0-11](pref02.xhtml#ch0fig11)).
    With a little bit of practice, you will be able to solder cleanly in no time at
    all.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 0-11:** Solder joins should look like this.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f0-11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Safety First**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Soldering irons get very, very hot and should be used with extreme care under
    adult supervision. Here are a few safety tips:'
  prefs: []
  type: TYPE_NORMAL
- en: • Be sure to use a stand and never lay a hot soldering iron down on a table.
  prefs: []
  type: TYPE_NORMAL
- en: • Solder in a well-ventilated room. The fumes released from melting solder can
    be harmful.
  prefs: []
  type: TYPE_NORMAL
- en: • Keep flammable materials away from your work area.
  prefs: []
  type: TYPE_NORMAL
- en: • Keep equipment out of reach of children.
  prefs: []
  type: TYPE_NORMAL
- en: • Wear eye protection.
  prefs: []
  type: TYPE_NORMAL
- en: • Wait for a soldering iron to cool down completely before storing it.
  prefs: []
  type: TYPE_NORMAL
