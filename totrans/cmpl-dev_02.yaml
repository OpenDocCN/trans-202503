- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">NODE.JS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Drop-image.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js is an open source runtime environment that executes JavaScript code
    outside a web browser. You could, for example, use it as a scripting language
    to perform all kinds of chores, such as deleting and moving files, logging data
    on the server side, or even creating your own web server (as we’ll do in this
    chapter’s exercise).
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to use Node.js is not really about understanding individual commands
    or packages, because it relies on standard JavaScript and you can refer to the
    documentation for details about its syntax and parameters. Instead, all developers
    should strive to understand the Node.js ecosystem and use it to their advantage.
    This chapter will introduce you to it.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing Node.js</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Begin by checking whether Node.js is already available on your local machine
    by running the <samp class="SANS_TheSansMonoCd_W5Regular_11">node</samp> command
    from your command line. The version flag (<samp class="SANS_TheSansMonoCd_W5Regular_11">-v</samp>)
    should return the current Node.js version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you see an output with a version number, Node.js is installed. If you don’t,
    or if the version is lower than the currently recommended stable release listed
    on [*https://<wbr>nodejs<wbr>.org*](https://nodejs.org), you should install this
    stable version.
  prefs: []
  type: TYPE_NORMAL
- en: To install Node.js locally, go to [*https://<wbr>nodejs<wbr>.org<wbr>/en<wbr>/download*](https://nodejs.org/en/download)
    and select the installer for your operating system. I recommend installing the
    long-term support (LTS) version of Node.js because many Node.js modules require
    this version. Run the installer package for Node.js LTS and npm, then check the
    version number again. It should match the one you’ve just installed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll review the basic commands and features of the Node.js runtime environment.
    If you prefer not to install Node.js, you can run the Node.js command line examples
    and JavaScript code in the online playgrounds at [*https://<wbr>codesandbox<wbr>.io<wbr>/s<wbr>/new*](https://codesandbox.io/s/new)
    and [*https://<wbr>stackblitz<wbr>.com*](https://stackblitz.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Working with npm</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default package manager for Node.js is npm. You can find modules for every
    task there, taken from the online registry at [*https://<wbr>www<wbr>.npmjs<wbr>.com*](https://www.npmjs.com).
    Verify that npm is available on your local machine by running the following on
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If there is no listed version or if the version is lower than the current release,
    install the latest Node.js LTS version, including npm.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that there is no vetting process or quality control on [*https://<wbr>www<wbr>.npmjs<wbr>.com*](https://www.npmjs.com).
    Anyone can publish packages, and the site relies on the community to report any
    that are malicious or broken.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the following shows a list of available commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The most popular alternative to npm is yarn, which also uses the* [https://<wbr>www<wbr>.npmjs<wbr>.com](https://www.npmjs.com)
    *registry and is fully compatible with npm.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The package.json File</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *package.json* file is a key element of each Node.js-based project. While
    the *node_modules* folder contains actual code, the *package.json* file holds
    all the metadata about the project. Found in the project’s root, it must contain
    the project’s name and version; in addition, it can contain optional data, such
    as the project’s description, a license, scripts, and many more details.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the *package.json* file for the web server you’ll create
    in [Exercise 1](#Exe1) on page 13. It should look similar to the one shown in
    [Listing 1-1](chapter1.xhtml#Lis1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-1: The package.json file for the Express.js server project in [Exercise
    1](#Exe1)'
  prefs: []
  type: TYPE_NORMAL
- en: The *package.json* file includes all the information others will need to install
    required modules on their machine and run the application. As a result, you never
    have to ship or store the *node_modules* folder in your code repository, which
    minimizes the repository’s size. Let’s take a detailed look at the *package.json*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Required Fields</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *package.json* file must contain a <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    field and a <samp class="SANS_TheSansMonoCd_W5Regular_11">version</samp> field.
    All other fields are optional. The <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    field contains the package’s name, which must be one lowercase word but can contain
    hyphens and underscores.
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">version</samp> field must
    follow semantic versioning guidelines, which suggest this format: *major.minor.patch*;
    for example, *1.2.3*. We call this *semantic* versioning because each number conveys
    a meaning. A *major* version introduces an incompatible API change. You should
    generally be very careful about switching to another major version, as you won’t
    be able to expect that your application will work flawlessly. A *minor* version
    change adds new functionality in a backward-compatible manner and therefore shouldn’t
    pose problems for your application. A *patch* version applies backward-compatible
    bug fixes, and you should always keep it up to date.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You can read more about semantic versioning and how to define different ranges
    at* [https://<wbr>semver<wbr>.org](https://semver.org)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Dependencies</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most important optional fields specify the dependencies and development
    dependencies. The <samp class="SANS_TheSansMonoCd_W5Regular_11">dependencies</samp>
    field lists all the dependencies needed to run the project, along with their required
    version ranges, following the semantic versioning syntax. By default, npm requires
    only the major version and keeps the minor and patch ranges flexible. This way,
    npm can always initialize your project with the latest compatible version.
  prefs: []
  type: TYPE_NORMAL
- en: These dependencies are part of your bundled application. When you install a
    project on a new machine, all dependencies listed in the *package .json* file
    will be installed and placed in the *node_modules* folder, next to *package.json*.
  prefs: []
  type: TYPE_NORMAL
- en: Your application could require all sorts of dependencies, such as frameworks
    and helper modules. For example, the Food Finder application we’ll build in [Part
    II](part2.xhtml) must contain at least Next.js as a single-page application framework,
    and Mongoose with MongoDB for the database layer.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Development Dependencies</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp> field
    lists all the dependencies necessary to develop the project, along with their
    versions. Again, only the major version is fixed. These are required only to develop,
    and not to run, the application. Hence, they are ignored by the packaging scripts
    and are not part of the deployed application. When you install a project on a
    new machine, all the development dependencies listed in the *package.json* file
    will be installed and placed in the *node_modules* folder next to *package.json*.
    For our Food Finder application, our development dependencies will include TypeScript’s
    type definitions. Other typical entries are testing frameworks, linters, and build
    tools such as webpack and Babel.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The package-lock.json File</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The npm package manager automatically generates the *package-lock.json* file
    for each project. This lock file resolves a problem introduced by the use of semantic
    versioning for dependencies. As mentioned earlier, the npm default is to define
    only the major version and to use the latest minor and patch versions available.
    While this ensures that your application includes the latest bug fixes, it introduces
    a new issue: without an exact version, builds aren’t reproducible. Because there’s
    no quality control in the npm registry, even a patch or minor version update could
    introduce an incompatible API change that should have been a major version change.
    Consequently, a slight deviation between versions could result in a broken build.'
  prefs: []
  type: TYPE_NORMAL
- en: The *package-lock.json* file solves this by tracking the exact version of every
    package and its dependencies. This file is usually quite big, but its entries
    for the web server you’ll create at the end of this chapter will look similar
    to [Listing 1-2](chapter1.xhtml#Lis1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-2: The package-lock.json file for [Exercise 1](#Exe1)'
  prefs: []
  type: TYPE_NORMAL
- en: The lock file contains a reference to the project and lists the information
    from the corresponding *package.json* file. Then it lists all the project’s dependencies;
    for us, the only dependency is Express.js, with a pinned version. (We’ll cover
    Express.js in [Exercise 1](#Exe1).) In addition, the file lists all the dependencies
    for the Express.js version in use, in this case the *accept* and *vary* packages.
    The stored artifact’s SHA hash enables npm to verify the integrity of the resource
    after downloading it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with all modules version-locked, every <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    install</samp> command will create an exact clone of the original setup. Like
    *package.json*, the *package-lock.json* file is part of the code repository.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating a Project</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s cover the most important commands for your day-to-day work, in the order
    in which you would logically use them to create and maintain a project. After
    performing these steps, you’ll have a *package.json* file and a production-ready
    project folder with one installed package, Express.js.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Initializing a New
    Module or Project</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To start a new project, run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">npm
    init</samp>, which initializes a new module. This should trigger an interactive
    guide through which you’ll populate the project’s *package.json* file based on
    your input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: At the beginning of each project, you need to initialize a new Node.js setup
    in an empty folder (created here with <samp class="SANS_TheSansMonoCd_W5Regular_11">mkdir
    sample-express</samp>) using <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    init</samp>. For simplicity, keep the default suggestions here. The assistant
    creates a basic *package.json* file in your project folder. It should look similar
    to [Listing 1-3](chapter1.xhtml#Lis1-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-3: The default package.json file'
  prefs: []
  type: TYPE_NORMAL
- en: When we compare this file with the one shown in [Listing 1-1](chapter1.xhtml#Lis1-1),
    we see that they are fairly similar, except for the dependencies and development
    dependencies. With the *package.json* file ready, we can now install these dependencies
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Installing the Dependencies</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Node.js provides modules for tasks like accessing the filesystem’s input and
    output, using networking protocols (such as DNS, HTTP, TCP, TLS/SSL, and UDP),
    and handling binary data. It also provides cryptography modules, interfaces for
    working with data streams, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><package></samp> downloads and
    places a specific package in the *node_modules* folder, next to your *package.json*
    file, and adds it to the dependencies list in *package.json*. You should use it
    whenever you need to add a new module that is required to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say you want to create a new Express.js-based server. You’ll need to install
    the Express.js package from [*https://<wbr>npmjs<wbr>.com*](https://npmjs.com).
    Here we install a particular version, but to install the latest version, omit
    the version number and use <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install
    express</samp> instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now the *node_modules* folder contains an *express* folder and additional folders
    with its dependencies. Also, Express.js is listed as a dependency in *package.json*,
    as shown in [Listing 1-4](chapter1.xhtml#Lis1-4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-4: The default package.json file with Express.js as a dependency'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve successfully added Express.js as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Installing the Development
    Dependencies</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s say you want to use a package called *karma* for end-to-end testing
    of the server. Instead of being a dependency like Express.js, this package is
    used only during development and is not necessary for running the actual application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases like this, you should run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    install --save-dev</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">package</samp>
    to download this package and add it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp>
    list in the local *package.json* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that, after installing the *karma* package, npm indicates that this version
    has known vulnerabilities. Nonetheless, it is added to the *node_modules* folder
    and listed as a <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependency</samp>
    in *package.json*. We will follow the suggestions to fix the issues in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Auditing the package.json
    File</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'During installation, npm indicated that *karma* has a vulnerability, so let’s
    verify this. The <samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp>
    command inspects the local *package.json* file for any known vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Running the command returns a detailed report about the version and severity
    of each problematic package, as well as a summary of all the issues found in the
    currently installed Node.js modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The npm package manager also indicated that the issues could be fixed automatically
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit fix</samp>. Alas,
    it warns us about breaking changes in the latest *karma* version. To accommodate
    those, we need to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">--force</samp>
    flag. I recommend using <samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp>
    every few months, along with <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    update</samp>, to avoid using outdated dependencies and creating security risks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now we see that the <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp>
    list in *package.json* has the latest *karma* version, and another run of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp> reports that there are
    no more known vulnerabilities in the installed packages.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Cleaning Up the node_modules
    Folder</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm prune</samp> inspects
    the local *package.json* file, compares it to the local *node_modules* folder,
    and removes all unnecessary packages. You should use it during development, after
    adding and removing packages, or when performing general cleanup chores.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check that the audit we just performed didn’t install any unnecessary
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The output looks fine; there are no issues with our packages.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Updating All Packages</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp> updates
    all installed packages to their latest acceptable version. You should use this
    command frequently to avoid outdated dependencies and security risks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, <samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp>
    displays a summary of the updates.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Removing a Dependency</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm uninstall</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">package</samp> removes
    the package and its dependencies from the local *node_modules* folder and *package.json*
    file. You should use this command to delete modules you don’t need anymore. Say
    you decide that end-to-end tests with *karma* are no longer necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The command’s output shows the changes made to the *node_modules* folder. The
    package was removed from *package.json* as well.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Installing a Dependency</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp> downloads
    all dependencies and <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp>
    from the npm repository and places them in the *node_modules* folder. Use this
    command to install an existing project on a new machine. For example, to install
    a copy of the Express.js project in a new folder, you could create a new empty
    folder and copy only the *package.json* and *package-lock.json* files into it.
    Then you could run the <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>
    command inside this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you clone the repository or create a new project from a *package.json*
    file, run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>. As
    with all previous commands, npm shows a status report listing any vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Using npx to Execute
    a Script Only Once</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you installed Node.js, you also installed npx, which stands for *node package
    execute*. This tool enables you to execute any package from the registry without
    installing it beforehand. This is useful when you need to run some code only once.
    For example, you might use a scaffolding script that initializes a project but
    is neither a dependency nor a development dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'The npx tool works by checking whether the executable you’re trying to run
    is available through the <samp class="SANS_TheSansMonoCd_W5Regular_11">$PATH</samp>
    environment variable or local project binaries. If this is not the case, npx installs
    the package to a central cache instead of your local *node_modules* folder. Say
    you want to check your package JSON for syntax errors. For this, you can use the
    *jsonlint* package. As this package is neither required to run the project nor
    part of your development process, you don’t want to install it into your *node_modules*
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This calls *jsonlint* to validate our *package.json* file via npx. First npx
    installs the package into the global cache folder, then runs *jsonlint*. It prints
    the content of our *package.json* file and reports no errors. Check your *node_modules*
    folder; *jsonlint* shouldn’t be installed. Nonetheless, on each subsequent call
    of npx, you’ll find *jsonlint* available.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 1: Build a “Hello World”
    Express.js Server</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Express.js is a free and open source backend framework built on top of Node.js.
    Designed for building web applications and APIs, it is the de facto standard server
    framework for the Node.js ecosystem and is foundational to full-stack web development.
  prefs: []
  type: TYPE_NORMAL
- en: Express.js offers common middleware used by HTTP servers for tasks such as caching,
    content negotiation, cookie handling, handling cross-origin requests, redirecting,
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Next.js uses its own built-in server that borrows heavily from Express.js.
    For the Food Finder application that you’ll build in [Part II](part2.xhtml) of
    this book, Next.js will be the foundation of the middleware you’ll use. As Next.js
    abstracts this middleware for you, you won’t directly interact with the server
    there.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a simple Express.js-based Node.js server to practice your Node.js
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Setting Up</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’ve already created the *sample-express* folder and *package.json* file
    while following along with this chapter, you can skip this setup. Otherwise, create
    and switch to a new folder called *sample-express*. Then, to initialize a new
    Node.js project, run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm init</samp>
    on the command line. The interactive guide should ask you for some details, such
    as the name and version of your application. Accept the defaults for now.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll want to use the Express.js package as the foundation of the server.
    Run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install express@4</samp>
    to install the latest release of the major version 4\. You will see that the *package.json*
    file now contains *express* as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Writing the Server
    Code</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create an *index.js* file in the *sample-express* folder and add the code in
    [Listing 1-5](chapter1.xhtml#Lis1-5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-5: A basic Express.js server'
  prefs: []
  type: TYPE_NORMAL
- en: First we load the *express* package into the file, instantiate the app, and
    define a constant for the port to use. Then we create a route for our server so
    that it will respond to every GET request sent to the */hello* base URL with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp> We use the Express.js
    <samp class="SANS_TheSansMonoCd_W5Regular_11">get</samp> method and pass <samp
    class="SANS_TheSansMonoCd_W5Regular_11">/hello</samp> as the first parameter and
    a callback function as the second parameter. Now, for each GET request sent to
    the */hello* endpoint, the server runs the callback function that sends <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp> as the response to
    the browser. Finally, we use the Express.js <samp class="SANS_TheSansMonoCd_W5Regular_11">listen</samp>
    method to spin up the web server and tell it to listen on port 3000.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the server from your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now visit *http://localhost:3000/hello* in your browser. You should see the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp> message. Congratulations!
    You just wrote your first Node.js web server in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter taught you how to run JavaScript code outside a browser using Node.js
    and its module ecosystem. You learned how to use, add, and remove modules in your
    full-stack application with npm commands, as well as how to read and use the *package.json*
    and *package-lock.json* files. Finally, you peeked into Express.js, the de facto
    standard server for full-stack development, and used it to build a sample Node.js
    server with just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter only scratched the surface of Node.js. If you want to explore its
    full potential, I recommend the Node.js tutorials from W3Schools at [*https://<wbr>www<wbr>.w3schools<wbr>.com<wbr>/nodejs<wbr>/*](https://www.w3schools.com/nodejs/)
    and the free ExpressJS Fundamentals course from [*https://<wbr>www<wbr>.udemy<wbr>.com<wbr>/course<wbr>/expressjs<wbr>-fundamentals<wbr>/*](https://www.udemy.com/course/expressjs-fundamentals/).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will get to know ES.Next, the latest iteration of JavaScript,
    and master the modern features it brings to the table.
  prefs: []
  type: TYPE_NORMAL
