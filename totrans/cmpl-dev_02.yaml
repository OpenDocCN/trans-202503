- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">NODE.JS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Drop-image.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: Node.js is an open source runtime environment that executes JavaScript code
    outside a web browser. You could, for example, use it as a scripting language
    to perform all kinds of chores, such as deleting and moving files, logging data
    on the server side, or even creating your own web server (as we’ll do in this
    chapter’s exercise).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to use Node.js is not really about understanding individual commands
    or packages, because it relies on standard JavaScript and you can refer to the
    documentation for details about its syntax and parameters. Instead, all developers
    should strive to understand the Node.js ecosystem and use it to their advantage.
    This chapter will introduce you to it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing Node.js</samp>
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Begin by checking whether Node.js is already available on your local machine
    by running the <samp class="SANS_TheSansMonoCd_W5Regular_11">node</samp> command
    from your command line. The version flag (<samp class="SANS_TheSansMonoCd_W5Regular_11">-v</samp>)
    should return the current Node.js version:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you see an output with a version number, Node.js is installed. If you don’t,
    or if the version is lower than the currently recommended stable release listed
    on [*https://<wbr>nodejs<wbr>.org*](https://nodejs.org), you should install this
    stable version.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: To install Node.js locally, go to [*https://<wbr>nodejs<wbr>.org<wbr>/en<wbr>/download*](https://nodejs.org/en/download)
    and select the installer for your operating system. I recommend installing the
    long-term support (LTS) version of Node.js because many Node.js modules require
    this version. Run the installer package for Node.js LTS and npm, then check the
    version number again. It should match the one you’ve just installed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll review the basic commands and features of the Node.js runtime environment.
    If you prefer not to install Node.js, you can run the Node.js command line examples
    and JavaScript code in the online playgrounds at [*https://<wbr>codesandbox<wbr>.io<wbr>/s<wbr>/new*](https://codesandbox.io/s/new)
    and [*https://<wbr>stackblitz<wbr>.com*](https://stackblitz.com).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Working with npm</samp>
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default package manager for Node.js is npm. You can find modules for every
    task there, taken from the online registry at [*https://<wbr>www<wbr>.npmjs<wbr>.com*](https://www.npmjs.com).
    Verify that npm is available on your local machine by running the following on
    the command line:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If there is no listed version or if the version is lower than the current release,
    install the latest Node.js LTS version, including npm.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that there is no vetting process or quality control on [*https://<wbr>www<wbr>.npmjs<wbr>.com*](https://www.npmjs.com).
    Anyone can publish packages, and the site relies on the community to report any
    that are malicious or broken.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[*https://<wbr>www<wbr>.npmjs<wbr>.com*](https://www.npmjs.com) 上没有审核过程或质量控制。任何人都可以发布包，网站依赖社区报告任何恶意或损坏的包。
- en: 'Running the following shows a list of available commands:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令会显示可用命令列表：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The most popular alternative to npm is yarn, which also uses the* [https://<wbr>www<wbr>.npmjs<wbr>.com](https://www.npmjs.com)
    *registry and is fully compatible with npm.*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*npm 的最流行替代品是 yarn，它也使用* [https://<wbr>www<wbr>.npmjs<wbr>.com](https://www.npmjs.com)
    *注册表，并且与 npm 完全兼容。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">The package.json File</samp>
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">package.json 文件</samp>
- en: The *package.json* file is a key element of each Node.js-based project. While
    the *node_modules* folder contains actual code, the *package.json* file holds
    all the metadata about the project. Found in the project’s root, it must contain
    the project’s name and version; in addition, it can contain optional data, such
    as the project’s description, a license, scripts, and many more details.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*package.json* 文件是每个基于 Node.js 的项目中的关键元素。虽然 *node_modules* 文件夹包含实际的代码，但 *package.json*
    文件保存了关于项目的所有元数据。它位于项目的根目录，必须包含项目的名称和版本；此外，它还可以包含可选数据，例如项目描述、许可证、脚本以及更多详细信息。'
- en: Let’s take a look at the *package.json* file for the web server you’ll create
    in [Exercise 1](#Exe1) on page 13. It should look similar to the one shown in
    [Listing 1-1](chapter1.xhtml#Lis1-1).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看你将在 [练习 1](#Exe1) 中创建的网页服务器的 *package.json* 文件，位于第 13 页。它应该与 [列表 1-1](chapter1.xhtml#Lis1-1)
    中展示的类似。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 1-1: The package.json file for the Express.js server project in [Exercise
    1](#Exe1)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-1：用于 Express.js 服务器项目的 package.json 文件，见 [练习 1](#Exe1)
- en: The *package.json* file includes all the information others will need to install
    required modules on their machine and run the application. As a result, you never
    have to ship or store the *node_modules* folder in your code repository, which
    minimizes the repository’s size. Let’s take a detailed look at the *package.json*
    file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*package.json* 文件包含其他人需要在他们的机器上安装所需模块并运行应用程序的所有信息。因此，你不需要将 *node_modules* 文件夹包含在代码库中，这可以最小化代码库的大小。我们来详细看看
    *package.json* 文件。'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Required Fields</samp>
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">必填字段</samp>
- en: The *package.json* file must contain a <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    field and a <samp class="SANS_TheSansMonoCd_W5Regular_11">version</samp> field.
    All other fields are optional. The <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    field contains the package’s name, which must be one lowercase word but can contain
    hyphens and underscores.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*package.json* 文件必须包含 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    字段和 <samp class="SANS_TheSansMonoCd_W5Regular_11">version</samp> 字段。所有其他字段都是可选的。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 字段包含包的名称，必须是一个小写字母单词，但可以包含连字符和下划线。'
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">version</samp> field must
    follow semantic versioning guidelines, which suggest this format: *major.minor.patch*;
    for example, *1.2.3*. We call this *semantic* versioning because each number conveys
    a meaning. A *major* version introduces an incompatible API change. You should
    generally be very careful about switching to another major version, as you won’t
    be able to expect that your application will work flawlessly. A *minor* version
    change adds new functionality in a backward-compatible manner and therefore shouldn’t
    pose problems for your application. A *patch* version applies backward-compatible
    bug fixes, and you should always keep it up to date.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">version</samp> 字段必须遵循语义版本控制指南，建议使用以下格式：*major.minor.patch*；例如，*1.2.3*。我们称之为*语义*版本控制，因为每个数字都有特定含义。*major*
    版本引入不兼容的 API 更改。通常，切换到另一个 major 版本时要非常小心，因为你无法预期你的应用程序能完美运行。*minor* 版本更改以向后兼容的方式添加新功能，因此一般不会对你的应用程序造成问题。*patch*
    版本修复向后兼容的 bug，且你应该始终保持它的最新版本。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*You can read more about semantic versioning and how to define different ranges
    at* [https://<wbr>semver<wbr>.org](https://semver.org)*.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以阅读更多关于语义版本控制和如何定义不同版本范围的信息，访问* [https://<wbr>semver<wbr>.org](https://semver.org)*。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Dependencies</samp>
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">依赖关系</samp>
- en: The most important optional fields specify the dependencies and development
    dependencies. The <samp class="SANS_TheSansMonoCd_W5Regular_11">dependencies</samp>
    field lists all the dependencies needed to run the project, along with their required
    version ranges, following the semantic versioning syntax. By default, npm requires
    only the major version and keeps the minor and patch ranges flexible. This way,
    npm can always initialize your project with the latest compatible version.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的可选字段指定了依赖关系和开发依赖关系。<samp class="SANS_TheSansMonoCd_W5Regular_11">dependencies</samp>
    字段列出了运行项目所需的所有依赖项及其所需的版本范围，遵循语义化版本控制语法。默认情况下，npm 只要求指定主版本，并保持次版本和修订版本范围的灵活性。这样，npm
    就能始终使用最新的兼容版本初始化你的项目。
- en: These dependencies are part of your bundled application. When you install a
    project on a new machine, all dependencies listed in the *package .json* file
    will be installed and placed in the *node_modules* folder, next to *package.json*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些依赖项是你打包应用的一部分。当你在新机器上安装一个项目时，*package.json* 文件中列出的所有依赖项将被安装，并放置在 *node_modules*
    文件夹中，紧邻 *package.json* 文件。
- en: Your application could require all sorts of dependencies, such as frameworks
    and helper modules. For example, the Food Finder application we’ll build in [Part
    II](part2.xhtml) must contain at least Next.js as a single-page application framework,
    and Mongoose with MongoDB for the database layer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用可能需要各种依赖项，例如框架和辅助模块。例如，我们将在[第二部分](part2.xhtml)中构建的 Food Finder 应用必须至少包含
    Next.js 作为单页应用框架，以及 Mongoose 和 MongoDB 作为数据库层。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Development Dependencies</samp>
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">开发依赖关系</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp> field
    lists all the dependencies necessary to develop the project, along with their
    versions. Again, only the major version is fixed. These are required only to develop,
    and not to run, the application. Hence, they are ignored by the packaging scripts
    and are not part of the deployed application. When you install a project on a
    new machine, all the development dependencies listed in the *package.json* file
    will be installed and placed in the *node_modules* folder next to *package.json*.
    For our Food Finder application, our development dependencies will include TypeScript’s
    type definitions. Other typical entries are testing frameworks, linters, and build
    tools such as webpack and Babel.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp> 字段列出了开发项目所需的所有依赖项及其版本。再次强调，只有主版本是固定的。这些依赖项仅在开发时需要，并不用于运行应用程序。因此，它们会被打包脚本忽略，并不包含在部署的应用中。当你在新机器上安装项目时，*package.json*
    文件中列出的所有开发依赖项将被安装并放置在 *node_modules* 文件夹中，紧邻 *package.json* 文件。对于我们的 Food Finder
    应用，我们的开发依赖项将包括 TypeScript 的类型定义。其他常见的依赖项包括测试框架、代码检查工具和构建工具，例如 webpack 和 Babel。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The package-lock.json File</samp>
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">package-lock.json 文件</samp>
- en: 'The npm package manager automatically generates the *package-lock.json* file
    for each project. This lock file resolves a problem introduced by the use of semantic
    versioning for dependencies. As mentioned earlier, the npm default is to define
    only the major version and to use the latest minor and patch versions available.
    While this ensures that your application includes the latest bug fixes, it introduces
    a new issue: without an exact version, builds aren’t reproducible. Because there’s
    no quality control in the npm registry, even a patch or minor version update could
    introduce an incompatible API change that should have been a major version change.
    Consequently, a slight deviation between versions could result in a broken build.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: npm 包管理器会为每个项目自动生成 *package-lock.json* 文件。这个锁文件解决了使用语义化版本控制来管理依赖时所引入的问题。如前所述，npm
    默认只定义主版本，并使用最新的次版本和修订版本。虽然这样可以确保应用包含最新的 bug 修复，但它也引入了一个新问题：没有确切的版本时，构建无法复现。由于
    npm 注册表没有质量控制，即使是修订版或次版本更新，也可能引入不兼容的 API 更改，而这种更改本应该是主版本更新。因此，版本之间的轻微偏差可能导致构建失败。
- en: The *package-lock.json* file solves this by tracking the exact version of every
    package and its dependencies. This file is usually quite big, but its entries
    for the web server you’ll create at the end of this chapter will look similar
    to [Listing 1-2](chapter1.xhtml#Lis1-2).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*package-lock.json* 文件通过跟踪每个包及其依赖项的确切版本来解决这个问题。这个文件通常相当大，但它列出的与你将在本章末尾创建的 Web
    服务器相关的条目将类似于 [列表 1-2](chapter1.xhtml#Lis1-2)。'
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 1-2: The package-lock.json file for [Exercise 1](#Exe1)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-2：[练习 1](#Exe1) 的 package-lock.json 文件
- en: The lock file contains a reference to the project and lists the information
    from the corresponding *package.json* file. Then it lists all the project’s dependencies;
    for us, the only dependency is Express.js, with a pinned version. (We’ll cover
    Express.js in [Exercise 1](#Exe1).) In addition, the file lists all the dependencies
    for the Express.js version in use, in this case the *accept* and *vary* packages.
    The stored artifact’s SHA hash enables npm to verify the integrity of the resource
    after downloading it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定文件包含对项目的引用，并列出来自相应 *package.json* 文件的信息。然后，它列出所有项目的依赖项；对我们来说，唯一的依赖项是 Express.js，并且版本是固定的。（我们将在
    [练习 1](#Exe1) 中讲解 Express.js。）此外，该文件列出了正在使用的 Express.js 版本的所有依赖项，在本例中是 *accept*
    和 *vary* 包。存储的工件的 SHA 哈希使得 npm 在下载资源后能够验证其完整性。
- en: Now, with all modules version-locked, every <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    install</samp> command will create an exact clone of the original setup. Like
    *package.json*, the *package-lock.json* file is part of the code repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有模块版本已被锁定，每次运行 `<samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>`
    命令都会创建与原始设置完全相同的克隆。像 *package.json* 一样，*package-lock.json* 文件也是代码仓库的一部分。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating a Project</samp>
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">创建项目</samp>
- en: Let’s cover the most important commands for your day-to-day work, in the order
    in which you would logically use them to create and maintain a project. After
    performing these steps, you’ll have a *package.json* file and a production-ready
    project folder with one installed package, Express.js.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看日常工作中最重要的命令，按照你在创建和维护项目时逻辑上会使用它们的顺序。在执行这些步骤之后，你将拥有一个 *package.json* 文件和一个包含已安装包
    Express.js 的生产就绪项目文件夹。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Initializing a New
    Module or Project</samp>
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">初始化新模块或项目</samp>
- en: 'To start a new project, run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">npm
    init</samp>, which initializes a new module. This should trigger an interactive
    guide through which you’ll populate the project’s *package.json* file based on
    your input:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新项目，运行 `<samp class="SANS_TheSansMonoCd_W7Bold_B_11">npm init</samp>`，它会初始化一个新模块。这将启动一个交互式向导，您可以根据自己的输入填写项目的
    *package.json* 文件：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At the beginning of each project, you need to initialize a new Node.js setup
    in an empty folder (created here with <samp class="SANS_TheSansMonoCd_W5Regular_11">mkdir
    sample-express</samp>) using <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    init</samp>. For simplicity, keep the default suggestions here. The assistant
    creates a basic *package.json* file in your project folder. It should look similar
    to [Listing 1-3](chapter1.xhtml#Lis1-3).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个项目的开始，你需要在一个空文件夹中初始化一个新的 Node.js 设置（这里通过 `<samp class="SANS_TheSansMonoCd_W5Regular_11">mkdir
    sample-express</samp>` 创建）并使用 `<samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    init</samp>`。为了简便起见，在这里保持默认建议。助手将在你的项目文件夹中创建一个基本的 *package.json* 文件。它应该类似于 [列表
    1-3](chapter1.xhtml#Lis1-3)。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 1-3: The default package.json file'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-3：默认的 package.json 文件
- en: When we compare this file with the one shown in [Listing 1-1](chapter1.xhtml#Lis1-1),
    we see that they are fairly similar, except for the dependencies and development
    dependencies. With the *package.json* file ready, we can now install these dependencies
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这个文件与 [列表 1-1](chapter1.xhtml#Lis1-1) 中显示的文件进行比较时，我们可以看到它们非常相似，除了依赖项和开发依赖项不同。准备好
    *package.json* 文件后，我们现在可以使用 `<samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    install</samp>` 安装这些依赖项。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Installing the Dependencies</samp>
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">安装依赖项</samp>
- en: Node.js provides modules for tasks like accessing the filesystem’s input and
    output, using networking protocols (such as DNS, HTTP, TCP, TLS/SSL, and UDP),
    and handling binary data. It also provides cryptography modules, interfaces for
    working with data streams, and much more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><package></samp> downloads and
    places a specific package in the *node_modules* folder, next to your *package.json*
    file, and adds it to the dependencies list in *package.json*. You should use it
    whenever you need to add a new module that is required to run the application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Say you want to create a new Express.js-based server. You’ll need to install
    the Express.js package from [*https://<wbr>npmjs<wbr>.com*](https://npmjs.com).
    Here we install a particular version, but to install the latest version, omit
    the version number and use <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install
    express</samp> instead:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now the *node_modules* folder contains an *express* folder and additional folders
    with its dependencies. Also, Express.js is listed as a dependency in *package.json*,
    as shown in [Listing 1-4](chapter1.xhtml#Lis1-4).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 1-4: The default package.json file with Express.js as a dependency'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: We’ve successfully added Express.js as a dependency.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Installing the Development
    Dependencies</samp>
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s say you want to use a package called *karma* for end-to-end testing
    of the server. Instead of being a dependency like Express.js, this package is
    used only during development and is not necessary for running the actual application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases like this, you should run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    install --save-dev</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">package</samp>
    to download this package and add it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp>
    list in the local *package.json* file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that, after installing the *karma* package, npm indicates that this version
    has known vulnerabilities. Nonetheless, it is added to the *node_modules* folder
    and listed as a <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependency</samp>
    in *package.json*. We will follow the suggestions to fix the issues in a bit.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Auditing the package.json
    File</samp>
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'During installation, npm indicated that *karma* has a vulnerability, so let’s
    verify this. The <samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp>
    command inspects the local *package.json* file for any known vulnerabilities:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running the command returns a detailed report about the version and severity
    of each problematic package, as well as a summary of all the issues found in the
    currently installed Node.js modules.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'The npm package manager also indicated that the issues could be fixed automatically
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit fix</samp>. Alas,
    it warns us about breaking changes in the latest *karma* version. To accommodate
    those, we need to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">--force</samp>
    flag. I recommend using <samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp>
    every few months, along with <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    update</samp>, to avoid using outdated dependencies and creating security risks:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: npm包管理器还表示，问题可以通过<samp class="SANS_TheSansMonoCd_W5Regular_11">npm audit fix</samp>自动修复。可惜的是，它警告我们最新的*karma*版本存在破坏性变更。为了适应这些变化，我们需要使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">--force</samp>标志。我建议每隔几个月使用一次<samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    audit</samp>，并结合使用<samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp>，以避免使用过时的依赖并造成安全风险：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we see that the <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp>
    list in *package.json* has the latest *karma* version, and another run of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp> reports that there are
    no more known vulnerabilities in the installed packages.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到*package.json*中的<sup class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</sup>列表已经包含了最新的*karma*版本，并且再次运行<samp
    class="SANS_TheSansMonoCd_W5Regular_11">npm audit</samp>报告显示已安装的软件包没有已知漏洞。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Cleaning Up the node_modules
    Folder</samp>
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">清理node_modules文件夹</samp>
- en: Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm prune</samp> inspects
    the local *package.json* file, compares it to the local *node_modules* folder,
    and removes all unnecessary packages. You should use it during development, after
    adding and removing packages, or when performing general cleanup chores.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 运行<samp class="SANS_TheSansMonoCd_W5Regular_11">npm prune</samp>会检查本地*package.json*文件，将其与本地*node_modules*文件夹进行比较，并移除所有不必要的包。你应该在开发过程中使用它，尤其是在添加或移除包后，或者进行常规清理工作时。
- en: 'Let’s check that the audit we just performed didn’t install any unnecessary
    packages:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们刚刚执行的审计是否安装了不必要的包：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output looks fine; there are no issues with our packages.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来没问题；我们的包没有问题。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Updating All Packages</samp>
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">更新所有包</samp>
- en: 'Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp> updates
    all installed packages to their latest acceptable version. You should use this
    command frequently to avoid outdated dependencies and security risks:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行<samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp>会将所有已安装的包更新到最新的可接受版本。你应该经常使用此命令，以避免过时的依赖和安全风险：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, <samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp>
    displays a summary of the updates.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，<samp class="SANS_TheSansMonoCd_W5Regular_11">npm update</samp>会显示更新摘要。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Removing a Dependency</samp>
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">移除依赖</samp>
- en: 'Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm uninstall</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">package</samp> removes
    the package and its dependencies from the local *node_modules* folder and *package.json*
    file. You should use this command to delete modules you don’t need anymore. Say
    you decide that end-to-end tests with *karma* are no longer necessary:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行<samp class="SANS_TheSansMonoCd_W5Regular_11">npm uninstall</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">package</samp>会从本地*node_modules*文件夹和*package.json*文件中移除该包及其依赖项。你应该在删除不再需要的模块时使用此命令。比如，你决定不再需要与*karma*的端到端测试：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The command’s output shows the changes made to the *node_modules* folder. The
    package was removed from *package.json* as well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出显示了对*node_modules*文件夹所做的更改。该软件包也已从*package.json*中移除。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Installing a Dependency</samp>
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">安装依赖</samp>
- en: 'Running <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp> downloads
    all dependencies and <samp class="SANS_TheSansMonoCd_W5Regular_11">devDependencies</samp>
    from the npm repository and places them in the *node_modules* folder. Use this
    command to install an existing project on a new machine. For example, to install
    a copy of the Express.js project in a new folder, you could create a new empty
    folder and copy only the *package.json* and *package-lock.json* files into it.
    Then you could run the <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>
    command inside this folder:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Whenever you clone the repository or create a new project from a *package.json*
    file, run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install</samp>. As
    with all previous commands, npm shows a status report listing any vulnerabilities.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Using npx to Execute
    a Script Only Once</samp>
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you installed Node.js, you also installed npx, which stands for *node package
    execute*. This tool enables you to execute any package from the registry without
    installing it beforehand. This is useful when you need to run some code only once.
    For example, you might use a scaffolding script that initializes a project but
    is neither a dependency nor a development dependency.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'The npx tool works by checking whether the executable you’re trying to run
    is available through the <samp class="SANS_TheSansMonoCd_W5Regular_11">$PATH</samp>
    environment variable or local project binaries. If this is not the case, npx installs
    the package to a central cache instead of your local *node_modules* folder. Say
    you want to check your package JSON for syntax errors. For this, you can use the
    *jsonlint* package. As this package is neither required to run the project nor
    part of your development process, you don’t want to install it into your *node_modules*
    folder:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This calls *jsonlint* to validate our *package.json* file via npx. First npx
    installs the package into the global cache folder, then runs *jsonlint*. It prints
    the content of our *package.json* file and reports no errors. Check your *node_modules*
    folder; *jsonlint* shouldn’t be installed. Nonetheless, on each subsequent call
    of npx, you’ll find *jsonlint* available.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 1: Build a “Hello World”
    Express.js Server</samp>'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Express.js is a free and open source backend framework built on top of Node.js.
    Designed for building web applications and APIs, it is the de facto standard server
    framework for the Node.js ecosystem and is foundational to full-stack web development.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Express.js offers common middleware used by HTTP servers for tasks such as caching,
    content negotiation, cookie handling, handling cross-origin requests, redirecting,
    and much more.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Next.js uses its own built-in server that borrows heavily from Express.js.
    For the Food Finder application that you’ll build in [Part II](part2.xhtml) of
    this book, Next.js will be the foundation of the middleware you’ll use. As Next.js
    abstracts this middleware for you, you won’t directly interact with the server
    there.*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*Next.js 使用自己内置的服务器，该服务器大量借鉴了 Express.js。在本书的[第二部分](part2.xhtml)中，你将构建一个“食物查找器”应用程序，Next.js
    将成为你所使用的中间件的基础。由于 Next.js 为你抽象了这个中间件，你将不会直接与服务器进行交互。*'
- en: Let’s build a simple Express.js-based Node.js server to practice your Node.js
    skills.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个基于 Express.js 的简单 Node.js 服务器，以练习你的 Node.js 技能。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Setting Up</samp>
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">设置</samp>
- en: If you’ve already created the *sample-express* folder and *package.json* file
    while following along with this chapter, you can skip this setup. Otherwise, create
    and switch to a new folder called *sample-express*. Then, to initialize a new
    Node.js project, run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm init</samp>
    on the command line. The interactive guide should ask you for some details, such
    as the name and version of your application. Accept the defaults for now.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在跟随本章的过程中已经创建了*sample-express*文件夹和*package.json*文件，那么可以跳过此设置。否则，创建并切换到一个名为*sample-express*的新文件夹。然后，在命令行中运行
    <samp class="SANS_TheSansMonoCd_W5Regular_11">npm init</samp> 来初始化一个新的 Node.js
    项目。交互式向导会要求你提供一些细节，例如应用程序的名称和版本。现在可以接受默认设置。
- en: Next, you’ll want to use the Express.js package as the foundation of the server.
    Run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm install express@4</samp>
    to install the latest release of the major version 4\. You will see that the *package.json*
    file now contains *express* as a dependency.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要使用 Express.js 包作为服务器的基础。运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    install express@4</samp> 来安装主要版本 4 的最新发布版。你会看到*package.json*文件现在将*express*作为依赖项。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Writing the Server
    Code</samp>
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">编写服务器代码</samp>
- en: Create an *index.js* file in the *sample-express* folder and add the code in
    [Listing 1-5](chapter1.xhtml#Lis1-5).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在*sample-express*文件夹中创建一个*index.js*文件，并添加[列表 1-5](chapter1.xhtml#Lis1-5)中的代码。
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 1-5: A basic Express.js server'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-5：一个基本的 Express.js 服务器
- en: First we load the *express* package into the file, instantiate the app, and
    define a constant for the port to use. Then we create a route for our server so
    that it will respond to every GET request sent to the */hello* base URL with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp> We use the Express.js
    <samp class="SANS_TheSansMonoCd_W5Regular_11">get</samp> method and pass <samp
    class="SANS_TheSansMonoCd_W5Regular_11">/hello</samp> as the first parameter and
    a callback function as the second parameter. Now, for each GET request sent to
    the */hello* endpoint, the server runs the callback function that sends <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp> as the response to
    the browser. Finally, we use the Express.js <samp class="SANS_TheSansMonoCd_W5Regular_11">listen</samp>
    method to spin up the web server and tell it to listen on port 3000.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将*express*包加载到文件中，实例化应用程序，并定义一个常量来指定要使用的端口。然后，我们为服务器创建一个路由，使其能够响应每一个发送到*/hello*基本
    URL 的 GET 请求，并返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp>。我们使用
    Express.js 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">get</samp> 方法，并将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">/hello</samp> 作为第一个参数，回调函数作为第二个参数。现在，每次发送到*/hello*端点的
    GET 请求，服务器都会运行回调函数并返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp>
    作为响应。最后，我们使用 Express.js 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">listen</samp>
    方法启动 Web 服务器，并告诉它在 3000 端口监听。
- en: 'Start the server from your command line:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行启动服务器：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now visit *http://localhost:3000/hello* in your browser. You should see the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello World!</samp> message. Congratulations!
    You just wrote your first Node.js web server in JavaScript.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器中访问*http://localhost:3000/hello*。你应该会看到 <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello
    World!</samp> 消息。恭喜你！你刚刚用 JavaScript 写了你的第一个 Node.js Web 服务器。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: This chapter taught you how to run JavaScript code outside a browser using Node.js
    and its module ecosystem. You learned how to use, add, and remove modules in your
    full-stack application with npm commands, as well as how to read and use the *package.json*
    and *package-lock.json* files. Finally, you peeked into Express.js, the de facto
    standard server for full-stack development, and used it to build a sample Node.js
    server with just a few lines of code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本章教会了你如何使用 Node.js 及其模块生态系统在浏览器外运行 JavaScript 代码。你学习了如何在全栈应用中使用、添加和移除模块，掌握了
    npm 命令的使用方法，以及如何读取和使用*package.json*和*package-lock.json*文件。最后，你对 Express.js 进行了初步了解，它是全栈开发的事实标准服务器，并使用它通过几行代码构建了一个示例
    Node.js 服务器。
- en: This chapter only scratched the surface of Node.js. If you want to explore its
    full potential, I recommend the Node.js tutorials from W3Schools at [*https://<wbr>www<wbr>.w3schools<wbr>.com<wbr>/nodejs<wbr>/*](https://www.w3schools.com/nodejs/)
    and the free ExpressJS Fundamentals course from [*https://<wbr>www<wbr>.udemy<wbr>.com<wbr>/course<wbr>/expressjs<wbr>-fundamentals<wbr>/*](https://www.udemy.com/course/expressjs-fundamentals/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅仅触及了 Node.js 的表面。如果你想深入探索它的全部潜力，我推荐 W3Schools 的 Node.js 教程，网址是[*https://<wbr>www<wbr>.w3schools<wbr>.com<wbr>/nodejs<wbr>/*](https://www.w3schools.com/nodejs/)以及
    Udemy 上免费的 ExpressJS 基础课程，网址是[*https://<wbr>www<wbr>.udemy<wbr>.com<wbr>/course<wbr>/expressjs<wbr>-fundamentals<wbr>/*](https://www.udemy.com/course/expressjs-fundamentals/)。
- en: In the next chapter, you will get to know ES.Next, the latest iteration of JavaScript,
    and master the modern features it brings to the table.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将了解 ES.Next，这是 JavaScript 的最新版本，并掌握它为开发带来的现代特性。
