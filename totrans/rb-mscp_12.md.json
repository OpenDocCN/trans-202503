["```\n    typedef struct RVALUE {\n   union {\n     struct {\n          VALUE flags;        /* always 0 for freed obj */\n          struct RVALUE *next;\n        } free;\n     struct RBasic  basic;\n        struct RObject object;\n        struct RClass  klass;\n        struct RFloat  flonum;\n        struct RString string;\n        struct RArray  array;\n        struct RRegexp regexp;\n\n    --*snip*--\n\n        } as;\n    #ifdef GC_DEBUG    const char *file;\n        int   line;\n    #endif} RVALUE;\n```", "```\n10.times do\n  obj = Object.new\nend\n```", "```\n    def display_count\n   data = ObjectSpace.count_objects\n   puts \"Total: #{data[:TOTAL]} Free: #{data[:FREE]} Object: #{data[:T_OBJECT]}\"end\n\n    10.times do\n      obj = Object.new\n   display_count\n    end\n```", "```\nTotal: 17491 Free: 171 Object: 85\nTotal: 17491 Free: 139 Object: 86\nTotal: 17491 Free: 132 Object: 87\nTotal: 17491 Free: 125 Object: 88\nTotal: 17491 Free: 118 Object: 89\nTotal: 17491 Free: 111 Object: 90\nTotal: 17491 Free: 104 Object: 91\nTotal: 17491 Free: 97 Object: 92\nTotal: 17491 Free: 90 Object: 93\nTotal: 17491 Free: 83 Object: 94\n```", "```\n    Total: 17493 Free: 166 Object: 85\n    Total: 17493 Free: 134 Object: 86\n    Total: 17493 Free: 127 Object: 87\n    Total: 17493 Free: 120 Object: 88\n\n    --*snip*--\n\n    Total: 17493 Free: 29 Object: 101\n    Total: 17493 Free: 22 Object: 102\n    Total: 17493 Free: 15 Object: 103\n Total: 17493 Free: 8 Object: 104\n Total: 17493 Free: 246 Object: 104\n    Total: 17493 Free: 239 Object: 105\n    Total: 17493 Free: 232 Object: 106\n    Total: 17493 Free: 225 Object: 107\n```", "```\n    def display_count\n      data = ObjectSpace.count_objects\n      puts \"Total: #{data[:TOTAL]} Free: #{data[:FREE]} Object: #{data[:T_OBJECT]}\"end\n\n    30.times do\n      obj = Object.new\n      display_count\n    end\n\n GC.start\n display_count\n```", "```\n    --*snip*--\n\n    Total: 17491 Free: 26 Object: 101\n    Total: 17491 Free: 19 Object: 102\n    Total: 17491 Free: 12 Object: 103\n Total: 17491 Free: 251 Object: 103\n    Total: 17491 Free: 244 Object: 104\n    Total: 17491 Free: 237 Object: 105\n    Total: 17491 Free: 230 Object: 106\n    Total: 17491 Free: 223 Object: 107\n    Total: 17491 Free: 216 Object: 108\n    Total: 17491 Free: 209 Object: 109\n    Total: 17491 Free: 202 Object: 110\n    Total: 17491 Free: 195 Object: 111\n    Total: 17491 Free: 188 Object: 112\n    Total: 17491 Free: 181 Object: 113\n Total: 17491 Free: 9527 Object: 43\n```", "```\n GC::Profiler.enable\n\n    10000000.times do\n      obj = Object.new\n    end\n\n GC::Profiler.report\n```", "```\n$ **ruby gc-profile.rb**\nGC 1046 invokes.\nInvoke Time(sec)       Use Size(byte)     Total Size(byte)         Total Object      GC Time(ms)\n           0.036               690920               700040                17501         0.694000\n           0.039               695200               700040                17501         0.433999\n           0.041               695200               700040                17501         0.585000\n           0.046               695200               700040                17501         0.577000\n           0.049               695200               700040                17501         0.466000\n           0.051               695200               700040                17501         0.516999\n           0.054               695200               700040                17501         0.419000\n           0.056               695200               700040                17501         0.535000\n           0.059               695200               700040                17501         0.410000\n           0.062               695200               700040                17501         0.426999\n--*snip*--\n```", "```\n    GC::Profiler.enable\n\n arr = []\n10000000.times do\n   arr << Object.new\n    end\n\n    GC.start\n\n    GC::Profiler.report\n```", "```\n    $ **ruby gc-profile-array.rb**\n GC 17 invokes.\n    Invoke Time(sec)       Use Size(byte)     Total Size(byte)         Total Object      GC Time(ms)\n               0.031               690920               700040                17501         0.575000\n               0.034               708480               716320                17908         0.689000\n               0.037              1261680              1269840                31746         1.077000\n               0.043              2254280              2262920                56573         1.994999\n               0.054              4044200              4053720               101343         3.454999\n               0.074              7266080              7277160               181929         5.288000\n               0.108             13058920             13072840               326821         9.417000\n               0.170             23489240             23508320               587708        14.465000\n               0.279             42267080             42311720              1057793        26.015999\n               0.478             76096560             76157840              1903946        45.910000\n```", "```\n10.times do\n  obj = Object.new\nend\n```", "```\n$ **jruby -J-verbose:gc jruby-gc.rb**\n```", "```\n10000000.times do\n  obj = Object.new\nend\n```", "```\n$ **jruby -J-verbose:gc jruby-gc.rb**\n[GC 17024K->1292K(83008K), 0.0072491 secs]\n[GC 18316K->1538K(83008K), 0.0091344 secs]\n[GC 18562K->1349K(83008K), 0.0006953 secs]\n[GC 18373K->1301K(83008K), 0.0006876 secs]\n[GC 18325K->1289K(83008K), 0.0004180 secs]\n[GC 18313K->1285K(83008K), 0.0006950 secs]\n[GC 18309K->1285K(83008K), 0.0006597 secs]\n[GC 18309K->1285K(83008K), 0.0007186 secs]\n[GC 18309K->1285K(83008K), 0.0005617 secs]\n[GC 18309K->1285K(83008K), 0.0006873 secs]\n[GC 18309K->1285K(83008K), 0.0004944 secs]\n[GC 18309K->1285K(83008K), 0.0006644 secs]\n[GC 18309K->1285K(83008K), 0.0006448 secs]\n[GC 18309K->1285K(83008K), 0.0007203 secs]\n```", "```\n arr = []\n    10000000.times do\n   arr << Object.new\n    end\n```", "```\n    $ **jruby -J-verbose:gc jruby-gc.rb**\n [GC 16196K->8571K(**83008K**), 0.0873137 secs]\n    [GC 25595K->20319K(83008K), 0.0480336 secs]\n    [GC 37343K->37342K(83008K), 0.0611792 secs]\n    [GC 37586K(83008K), 0.0029985 secs]\n    [GC 54366K->54365K(83008K), 0.0617091 secs]\n    [GC 65553K->65360K(83008K), 0.0586615 secs]\n    [GC 82384K->82384K(100040K), 0.0479422 secs]\n    [GC 89491K(100040K), 0.0124503 secs]\n    [GC 95890K->95888K(147060K), 0.0795343 secs]\n    [GC 96144K(147060K), 0.0030345 secs]\n    [GC 130683K->130682K(148020K), 0.0941640 secs]\n    [GC 147706K->147704K(165108K), 0.0925857 secs]\n    [GC 150767K->151226K(168564K), 0.0226121 secs]\n [Full GC 151226K->125676K(168564K), 0.5317203 secs]\n    [GC 176397K->176404K(**236472K**), 0.0999831 secs]\n\n    --*snip*--\n```"]