- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mail Sorting
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-I](Images/Alphabet-I.png)n the last few chapters, you’ve been training
    a computer to recognize images. There are lots of useful jobs that computers can
    help us do if they know how to see. One such job, *optical character recognition*
    ***(OCR)*, is when a computer is able to recognize a picture of a letter or number
    after it has seen lots of examples of that character.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A computer trained to do OCR can read the printed words in newspapers and
    books.'
  prefs: []
  type: TYPE_NORMAL
- en: When combined with a text-to-speech system that can read the recognized words
    out loud, OCR is used to help visually impaired people read text that they might
    not be able to see for themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Historians, librarians, and archivists use OCR to study historical books and
    printed documents. ML makes it possible to search through publications going back
    hundreds of years, because OCR can recognize the words.
  prefs: []
  type: TYPE_NORMAL
- en: On our roads, OCR systems recognize letters and numbers on license plates. *Automatic
    number plate recognition* *(ANPR)* is used to keep traffic flowing by enabling
    fast and efficient tolls and to improve road safety by recognizing when a car
    is driving too fast as it passes a checkpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Businesses use OCR to help process forms and documents. If you fill in a form
    or write a check, an ML system will often use OCR to automatically recognize what
    you’ve written.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve traveled abroad, you may have used translation apps. You can point
    a smartphone at a sign or menu in a foreign language and have the phone translate
    that into your own language. OCR is used to recognize the words and letters in
    the picture.
  prefs: []
  type: TYPE_NORMAL
- en: One common use of OCR is to help sort mail, which is what we’ll do in this chapter.
    You’ll train a computer to recognize handwriting and see how OCR can be used to
    quickly sort letters. You’ll create a mail sorting office in Scratch that can
    automatically sort letters by recognizing the postcode written on the envelope
    (see [Figure 6-1](#figure6-1)).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '![f06001](Images/f06001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 6-1:](#figureanchor6-1) Sorting letters by recognizing the postcode'
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, choose three big cities that you want your sorting office to be able
    to recognize letters for.
  prefs: []
  type: TYPE_NORMAL
- en: 'For my screenshots, I chose three cities in the UK: Edinburgh, Oxford, and
    Southampton.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to choose some codes that can be used to identify those cities.
    In the UK, where I live, these are called *postcodes*. (In the United States,
    they’re known as ZIP codes.) To make this project quicker, I used the first couple
    of letters of each postcode.
  prefs: []
  type: TYPE_NORMAL
- en: 'For my project, I used:'
  prefs: []
  type: TYPE_NORMAL
- en: EH as the postcode for Edinburgh addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OX as the postcode for Oxford addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SO as the postcode for Southampton addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re in the United States, instead of the ZIP code, you can use the postal
    abbreviation for the state where your cities are located. For example, you could
    use TX to represent Dallas addresses, or MA to represent Boston addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Choose *three* cities with *three different short codes* to represent them.
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To train the computer to recognize the postcodes you’ve chosen, you’ll draw
    examples of those codes and use them to train an ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new ML project, name it `Sorting office`, and set it to learn to recognize
    images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 6-2](#figure6-2).![f06002](Images/f06002.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-2:](#figureanchor6-2) Train is the first phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add new label**, as shown in [Figure 6-3](#figure6-3). Then enter the
    name of your first city.![f06003](Images/f06003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-3:](#figureanchor6-3) Click **Add new label** to create training
    buckets for your cities.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **draw** at the bottom of your city training bucket, as shown in [Figure
    6-4](#figure6-4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window that opens, draw in the box to write the code you want to train
    the computer to recognize for this city.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you’ve finished writing, click **Add**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06004](Images/f06004.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-4:](#figureanchor6-4) Click **draw** to add new examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat step 4 until you have at least 10 examples of the handwritten code for
    your first city, as shown in [Figure 6-5](#figure6-5).![f06005](Images/f06005.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-5:](#figureanchor6-5) Training examples for recognizing the postcode
    for Edinburgh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat steps 3 through 5 for the next two cities, until you have at least 10
    examples of each city’s postcode, as shown in [Figure 6-6](#figure6-6).![f06006](Images/f06006.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-6:](#figureanchor6-6) Training examples for postcodes for all three
    cities'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Learn & Test**, as shown in [Figure 6-7](#figure6-7).![f06007](Images/f06007.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-7:](#figureanchor6-7) Learn & Test is the second phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Train new machine learning model**, as shown in [Figure 6-8](#figure6-8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The computer will use the examples that you’ve written to learn how to recognize
    the codes for different cities. As all your examples have been drawn with the
    same “pen” and in the same color, the computer will probably work best at recognizing
    codes written like that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The training process may take a few minutes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06008](Images/f06008.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-8:](#figureanchor6-8) Train a new ML model to recognize postcodes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It’s time to test your ML model! In previous projects, you’ve done this by going
    directly to Scratch and seeing how well the computer recognizes and sorts photos
    you’ve downloaded from the internet or taken with a webcam. This time, we’ll test
    our model here first and make sure we’re happy with it before going on to Scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your ML model by clicking **Test by drawing**, as shown in [Figure 6-9](#figure6-9).
    Try writing codes for your cities and see how good the computer is at recognizing
    what you write.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06009](Images/f06009.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-9:](#figureanchor6-9) Testing is an important part of ML projects.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you don’t see the Test by drawing button, your ML model hasn’t finished training
    yet. You may need to wait for another minute or two.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’re not happy with how well your ML model recognizes the postcodes, you
    can go back to the Train phase and add more examples. In general, the more training
    examples you use, the better your ML model will perform. Remember to click **Train
    new machine learning model** again to update your ML model with the new examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Prepare Your Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you’ll test your ML model further by creating a virtual mail sorting office
    in Scratch that uses your OCR system to sort envelopes.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Make**, as shown in [Figure 6-10](#figure6-10).![f06010](Images/f06010.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-10:](#figureanchor6-10) Make is the third phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Scratch 3**, and then click **Open in Scratch 3** to open a new window
    with Scratch. You should see a new section in the Toolbox, as shown in [Figure
    6-11](#figure6-11), containing blocks from your Sorting Office project.![f06011](Images/f06011.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-11:](#figureanchor6-11) Scratch 3 with your ML model blocks'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the top of the Scratch window, click **Project templates**, as shown in [Figure
    6-12](#figure6-12).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This lets you access sample projects and starter code to help save you time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06012](Images/f06012.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-12:](#figureanchor6-12) Click **Project templates** in the top menu.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Sorting Office** template, as shown in [Figure 6-13](#figure6-13).![f06013](Images/f06013.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-13:](#figureanchor6-13) The Sorting Office project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Stage** backdrop, as shown in [Figure 6-14](#figure6-14).![f06014](Images/f06014.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-14:](#figureanchor6-14) Click the **Stage** backdrop for the Sorting
    Office project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Backdrops** tab, as shown in [Figure 6-15](#figure6-15).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Text tool to edit the labels on the mail sacks. Edit all three sacks
    so that their labels match the names of the cities you chose. If you can’t fit
    the city’s whole name, you can just use the postcode.![f06015](Images/f06015.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-15:](#figureanchor6-15) Edit the sack labels to match the cities
    you chose.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **postcode** sprite and then click the **Costumes** tab, as shown
    in [Figure 6-16](#figure6-16).![f06016](Images/f06016.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-16:](#figureanchor6-16) You’ll find the postcode sprite in the sprites
    list.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the Paintbrush tool to write the letters for one of your cities onto the
    canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll get the best results if you match the line style to the training examples
    that you wrote before, so set **Fill** to black and the line width to about **20**,
    as shown in [Figure 6-17](#figure6-17).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06017](Images/f06017.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-17:](#figureanchor6-17) Set the paint tools to match your training
    examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you’ve finished, click the **Paint** button in the *bottom-left* corner
    to add a new costume, as shown in [Figure 6-18](#figure6-18).![f06018](Images/f06018.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-18:](#figureanchor6-18) Click the **Paint** button to add new costumes
    to the postcode sprite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat steps 10 and 11 until you have several costumes in the postcode sprite.
    Draw each city’s code multiple times, as shown in [Figure 6-19](#figure6-19).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don’t worry if you make a mistake while drawing—just click the blue undo arrow
    next to the costume name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06019](Images/f06019.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-19:](#figureanchor6-19) Draw several test costumes in the postcode
    sprite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Code** tab and find the `when Green Flag clicked` script, as shown
    in [Figure 6-20](#figure6-20).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might need to scroll around to find this script. It should be in the top
    left of the Code Area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06020](Images/f06020.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-20:](#figureanchor6-20) Find the `when Green Flag clicked` script
    in the postcode sprite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag the blocks with the names of your cities into the `when Green Flag clicked`
    script, as shown in [Figure 6-21](#figure6-21).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s more than one `when Green Flag clicked` script in the Code Area, so
    scroll around until you find the one that looks like the script in [Figure 6-21](#figure6-21).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It’s important that you match the order with the names that you wrote on the
    mail sacks on the backdrop. The left sack is `destination1`. The middle sack is
    `destination2`. The right sack is `destination3`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f06021](Images/f06021.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 6-21:](#figureanchor6-21) Identify the names of your cities for the
    project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the `recognise postcode` script in the Code Area. It should be immediately
    beneath the `when Green Flag clicked` script from the previous step, still on
    the **postcode** sprite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `recognise image (label)` block into the `recognise postcode` script,
    and then drag the `costume image` block into the `recognise image (label)` block,
    as shown in [Figure 6-22](#figure6-22).![f06022](Images/f06022.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 6-22:](#figureanchor6-22) Script for recognizing the postcode on an
    envelope'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test Your Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s time to try sorting some letters!
  prefs: []
  type: TYPE_NORMAL
- en: Click the Green Flag icon to watch your ML model at work.
  prefs: []
  type: TYPE_NORMAL
- en: The conveyor belt at the top of the screen will begin running, and the letters
    with the postcodes you’ve written will start to scroll by, as shown in [Figure
    6-23](#figure6-23).
  prefs: []
  type: TYPE_NORMAL
- en: '![f06023](Images/f06023.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 6-23:](#figureanchor6-23) A test envelope on the conveyor belt'
  prefs: []
  type: TYPE_NORMAL
- en: The envelope will zoom in while your ML model tries to recognize what you’ve
    written.
  prefs: []
  type: TYPE_NORMAL
- en: Once it has classified your picture, the script will send the envelope to the
    corresponding mail sack, as shown in [Figure 6-24](#figure6-24).
  prefs: []
  type: TYPE_NORMAL
- en: '![f06024](Images/f06024.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 6-24:](#figureanchor6-24) Test results for recognizing a postcode'
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve trained an ML model to recognize handwriting on an envelope, and you’ve
    created a project in Scratch that uses OCR to automatically sort letters!
  prefs: []
  type: TYPE_NORMAL
- en: How could you improve your project?
  prefs: []
  type: TYPE_NORMAL
- en: Try getting someone else to test your project. Can it recognize their handwriting?
    If the model makes a lot of mistakes with their handwriting, ask them to add some
    examples to your training buckets in the Train phase. (Make sure that you train
    a new ML model in the Learn & Test phase so that the computer can learn from both
    of your examples.)
  prefs: []
  type: TYPE_NORMAL
- en: The wider the variety of examples you use to train the computer, the better
    the ML model should be at recognizing different handwriting styles.
  prefs: []
  type: TYPE_NORMAL
- en: What else could you do to improve your project?
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sorting mail is a common use of *optical character recognition***. Large sorting
    offices around the world use OCR systems to recognize and sort letters in a fraction
    of a second. Your project just recognized a postcode, but real-world multiline
    optical character readers can recognize several lines of an address. The basic
    idea is very similar, and it helps make large-scale mail sorting efficient and
    practical.**
  prefs: []
  type: TYPE_NORMAL
- en: '**All of your projects so far have used images, but computers can be trained
    to recognize many different types of data. In the next chapter, you’ll train an
    ML model to recognize text!****'
  prefs: []
  type: TYPE_NORMAL
