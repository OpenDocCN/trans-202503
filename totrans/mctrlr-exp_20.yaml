- en: '**20  MSP430 Paparazzi Attack**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**20 MSP430 攻击方法**'
- en: Early MSP430 families, such as the MSP430F1xx, F2xx, and F4xx, are vulnerable
    to a semi-invasive attack, first publicly documented in Thomas (2014), in which
    a camera flash is used to fake out the fuse check while a JTAG debugger attempts
    to attach in a tight loop.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的MSP430系列，如MSP430F1xx、F2xx和F4xx，容易受到一种半侵入性攻击，这种攻击首次由Thomas（2014）公开记录，在这种攻击中，使用相机闪光灯伪造保险丝检查，而JTAG调试器则在一个紧密的循环中尝试连接。
- en: These chips have two access controls. JTAG is protected by a metal migration
    fuse; this is a thin trace of metal on the die that permanently breaks when too
    much current flows through it. Entirely unrelated to the fuse is a 32-byte password
    that is required to access the serial bootstrap loader (BSL). This password is
    the interrupt vector table (IVT) at the end of memory, and without it, the BSL
    allows little more than erasing all of memory. Because the BSL cannot read the
    protection fuse, you can exploit the chip by first dumping the last 32 bytes of
    flash memory and then presenting them to the bootloader.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些芯片有两个访问控制。JTAG受到金属迁移保险丝的保护；这是一条位于芯片上的薄金属线路，当通过它的电流过大时，会永久断开。与保险丝无关的是一个32字节的密码，它是访问串行引导加载程序（BSL）所必需的。这个密码是位于内存末尾的中断向量表（IVT），没有它，BSL只能进行擦除内存的操作。由于BSL无法读取保护保险丝，你可以通过首先提取闪存的最后32个字节，然后将它们提供给引导加载程序，从而利用该芯片。
- en: The first thing to understand is that all of the transistors within the chip
    are actually phototransistors. If a sufficiently bright light hits one of these
    transistors, it will conduct electricity even if electrically it should be in
    a non-conducting state. CMOS technology gains its power efficiency by balancing
    each conducting transistor against a non-conducting transistor, and a bright camera
    flash throws all of the design constraints out the window. The Raspberry Pi 2
    was famous for this, crashing violently when photographed because of an exposed
    die on the PCB.^([1](footnotes.xhtml#ch20fn1))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要理解的是，芯片中的所有晶体管实际上都是光电晶体管。如果足够强的光照射到这些晶体管之一，它将导电，即使它在电气上应处于非导电状态。CMOS技术通过将每个导电晶体管与非导电晶体管进行平衡来实现其功率效率，而强光照射的闪光灯会将所有设计约束抛诸脑后。树莓派2因其暴力崩溃而闻名，这通常是由于PCB上的裸露芯片在拍照时造成的^[1](footnotes.xhtml#ch20fn1)。
- en: '![Image](../images/f0186-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0186-01.jpg)'
- en: 'Figure 20.1: MSP430F449'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '图20.1: MSP430F449'
- en: The second thing to understand is that the MSP430’s JTAG port is locked by a
    hardware fuse, at least in devices prior to the MSP430F5xx family. When you connect
    a JTAG debugger, it tests the fuse by running a little current into it from the
    TDI pin. If the test is successful, JTAG unlocks and the chip may be read. If
    the test is not successful, a “no harm no foul” policy allows more fuse read attempts
    in all but the very earliest chips.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个要理解的事情是，MSP430的JTAG端口被硬件保险丝锁定，至少在MSP430F5xx系列之前的设备中是这样。当你连接JTAG调试器时，它会通过TDI引脚向保险丝输入小电流来测试保险丝。如果测试成功，JTAG将解锁，芯片可以被读取。如果测试失败，一项“无害无损”的政策允许在所有但最早期的芯片上进行更多的保险丝读取尝试。
- en: To unlock these chips, we’ll first remove the opaque packaging by performing
    a live decapsulation using the red fuming nitric acid (RFNA) drip method. After
    exposing the die, we’ll attach the chip to a GoodFET for JTAG debugging, modifying
    the GoodFET to repeatedly attempt JTAG fuse checks until success. By flashing
    a camera on the exposed die, we’ll then bypass the fuse check and enable debugging
    on a locked chip, allowing the firmware to be freely dumped.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解锁这些芯片，我们将首先通过使用红色烟雾硝酸（RFNA）滴定法进行现场去壳。去除封装后，我们将芯片连接到GoodFET进行JTAG调试，并修改GoodFET，使其反复尝试JTAG保险丝检查，直到成功。通过对裸露的芯片进行拍照，我们将绕过保险丝检查并启用被锁芯片的调试功能，从而可以自由地提取固件。
- en: '**Live Decapsulation with RFNA**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用RFNA进行现场去壳**'
- en: The live decapsulation procedure presented here is conceptually similar to the
    full decapsulation that we covered in [Chapter 18](ch18.xhtml#ch18), but with
    some key differences to keep the bond wires and some of the packaging intact,
    so that the chip still functions despite the die being visible. If you do not
    have a chemistry lab available, and are not crazy enough to build your own, you
    can hire a failure analysis laboratory to perform the procedure for you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍的现场去壳程序在概念上类似于我们在[第18章](ch18.xhtml#ch18)中讲解的完全去壳，但有一些关键的区别，以保持连接线和部分封装完整，使芯片在裸露的情况下仍能正常工作。如果你没有化学实验室可用，也不愿意自己动手制作，你可以雇佣一个故障分析实验室来为你执行这一过程。
- en: Instead of the 65% nitric acid that sometimes dissolves bonding wires, we’ll
    be using red fuming nitric acid (RFNA), which is a minimum of 90% nitric acid
    and a maximum of 2% water. This is strong stuff that reacts violently with nitrile
    gloves and isopropyl alcohol, so be sure to work in a fume hood, with full safety
    gear.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用红烟硝酸（RFNA），而不是65%的硝酸，后者有时会溶解连接线。RFNA至少含有90%的硝酸和最多2%的水。这是非常强烈的化学物质，会与腈纶手套和异丙醇剧烈反应，所以一定要在通风柜中工作，并穿戴全套安全装备。
- en: Begin with your target chip soldered to a carrier PCB, with no other components.
    Heat it to about 100 °C, well beneath the melting point of the solder but hot
    enough for the acid to attack the packaging.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从将目标芯片焊接到载体PCB开始，不要有其他组件。将其加热至约100°C，远低于焊料的熔点，但足够高以使酸液能够侵蚀封装。
- en: '![Image](../images/f0188-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0188-01.jpg)'
- en: 'Figure 20.2: Live Decapsulated MSP430F2418'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.2：去封装后的MSP430F2418
- en: Your goal is to expose the die in the center without spilling acid onto the
    pins or the PCB. At the beginning, the chip’s packaging has a flat surface, so
    any significant amount of acid will spill off. Begin with a little RFNA in a cold
    beaker and use a pipette with a very narrow tip to drip just the smallest possible
    amount of acid onto the dead center of the chip package.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的目标是暴露芯片中央的裸片，而不让酸液溅到引脚或PCB上。一开始，芯片的封装表面是平的，所以任何大量的酸液都会溢出。从一个冷的烧杯中取少量RFNA，并使用带有非常窄尖的移液管，将最小量的酸液滴在芯片封装的正中央。
- en: 'A quick but important note on acid volume: if a droplet forms at the tip of
    the pipette, you’re about to use too much acid. You really want as little acid
    for your first drop as possible. Imagine that you are using the pipette as a fountain
    pen to write on paper.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于酸液量的快速但重要的提示：如果移液管尖端形成了一个水滴，说明你即将使用过多的酸液。你希望第一次滴落的酸液尽可能少。想象一下，你正在用移液管像钢笔一样在纸上书写。
- en: The acid will first appear to soak into the surface of the chip, and then it
    will begin to bubble a little bit. After allowing for a little bubbling to break
    apart packaging material, use a squirt of acetone to clean off the acid and leave
    the remainder of the packaging. Repeating this a few times will give you a sort
    of bowl-shaped cavity within the package, and you can begin to use a little more
    acid to speed up the etching.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 酸液首先会看起来渗透到芯片的表面，然后开始稍微冒泡。在允许一些气泡分解封装材料后，使用一喷丙酮清除酸液，留下剩余的封装。重复这一过程几次，会在封装内形成一个类似碗形的空腔，你可以开始使用更多酸液来加速刻蚀过程。
- en: After each acetone rinse, carefully inspect the package under bright light.
    When you begin to see the bonding wires glinting in the otherwise black packaging,
    you are getting close to the bare die. At this stage you should rinse a little
    sooner, to ensure that the acid doesn’t boil away and leave ugly plastic markings
    that obscure the die.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用丙酮冲洗后，都要在强光下仔细检查封装。当你开始看到连接线在黑色封装中闪光时，说明你已经接近裸片。在这个阶段，你应该更早一点冲洗，以确保酸液不会煮干，留下遮掩裸片的难看塑料痕迹。
- en: If this procedure is successful, you should have a package whose pins and their
    surrounding packaging are intact, while the die and its bonding wires are exposed.
    The die will not be quite so clean as one prepared by the bath methods, but the
    little bit of dirt that remains on the surface won’t interfere with this attack.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个过程成功，你应该得到一个引脚及其周围封装完好无损的封装，同时裸片及其连接线被暴露出来。裸片的清洁程度不如浸泡法处理的裸片干净，但表面残留的少量污垢不会妨碍后续操作。
- en: Be sure to carefully rinse the chip and board with first acetone and then isopropyl
    alcohol and deionized water to prevent any leftover acid from dissolving traces
    on the board or oxidizing the pins. This final cleaning should be the only use
    of isopropyl alcohol in your experiment, because the alcohol violently reacts
    with RFNA, and unintentional lab explosions are generally frowned upon. Similarly,
    water will remove the metal salts that protect bond wires and the frame from HNO[3],
    so you should avoid it until the very last cleaning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要小心地先用丙酮、然后用异丙醇和去离子水冲洗芯片和板子，以防剩余的酸液溶解板上的线路或氧化引脚。这一最终清洗应该是实验中唯一一次使用异丙醇，因为异丙醇会与RFNA剧烈反应，实验室爆炸通常不被欢迎。同样，水会去除金属盐，这些金属盐保护连接线和框架免受HNO[3]的侵蚀，因此你应该避免在最后清洗之前使用水。
- en: '**Fuse Check Sequence**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**熔断器检查序列**'
- en: Now that we’ve opened the packaging on our target chip, the next step is to
    trigger the fault. To do this yourself, you will need a JTAG programmer with source
    code available, such as Good-speed (2009), and also the JTAG specification of
    the MSP430 chips, Texas Instruments (2010).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经打开了目标芯片的封装，接下来的步骤是触发故障。要自行完成此操作，您需要一个可以获取源代码的 JTAG 编程器，如 Good-speed（2009），以及
    MSP430 芯片的 JTAG 规格说明书，德州仪器（2010）。
- en: I suppose we might use a laser with fine pulse control to fire at exactly the
    right spot and exactly the right time.^([2](footnotes.xhtml#ch20fn2)) Thankfully,
    this is unnecessary if we modify our JTAG programmer a little. For this example,
    we’ll be using my open source GoodFET programmer, even though it’s a little out
    of date.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们可以使用激光器，进行精细的脉冲控制，精确地在正确的时间和位置射击。（^([2](footnotes.xhtml#ch20fn2))）感谢科技进步，如果我们稍微修改一下我们的
    JTAG 编程器，这样的设备就不再是必须的。在这个示例中，我们将使用我开源的 GoodFET 编程器，尽管它有点过时。
- en: '[Figure 20.3](ch20.xhtml#ch20fig3) shows the hardware fuse check sequence for
    the MSP430F1xx, F2xx, and F4xx devices. The check is performed by toggling the
    TMS pin at least twice; if the fuse is not blown, two milliamps of current will
    flow into the TDI pin. [Figure 20.4](ch20.xhtml#ch20fig4) is an example implementation
    of the JTAG fuse check sequence in C from my GoodFET project.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20.3](ch20.xhtml#ch20fig3)显示了 MSP430F1xx、F2xx 和 F4xx 设备的硬件保险丝检查序列。该检查通过至少两次切换
    TMS 引脚来完成；如果保险丝未被烧毁，2 毫安的电流将流入 TDI 引脚。[图 20.4](ch20.xhtml#ch20fig4)是我在 GoodFET
    项目中用 C 语言实现的 JTAG 保险丝检查序列示例。'
- en: Devices with the original MSP430 CPU and the CPUX extension have an erratum
    in which they might fail the fuse test when powering up, requiring another power
    cycle before the fuse may be tested again. CPUXv2 devices clear the fuse check
    result as the JTAG TAP is reset, and this might complicate exploitation when you
    are faking the fuse check with a camera flash.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 配备原始 MSP430 CPU 和 CPUX 扩展的设备存在一个错误，可能在上电时未通过保险丝测试，因此需要进行另一次电源循环才能重新测试保险丝。CPUXv2
    设备在重置 JTAG TAP 时会清除保险丝检查结果，这可能会使得当您通过相机闪光模拟保险丝检查时变得更加复杂。
- en: '![Image](../images/f0191-01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0191-01.jpg)'
- en: 'Figure 20.3: MSP430 JTAG Fuse Check Sequence'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.3：MSP430 JTAG 保险丝检查序列
- en: '![Image](../images/f0191-02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0191-02.jpg)'
- en: 'Figure 20.4: MSP430 Fuse Check in Goodspeed (2009)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.4：在 Goodspeed（2009）中的 MSP430 保险丝检查
- en: MSP430F5xx and F6xx devices have done away with the hardware fuse check, instead
    implementing their readout protection with a software mechanism. This chapter’s
    attack is not expected to apply to those devices.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MSP430F5xx 和 F6xx 设备已经取消了硬件保险丝检查，取而代之的是通过软件机制实现读取保护。本章的攻击方法预计不适用于这些设备。
- en: 'Having a functioning target chip with an exposed die, exploitation consists
    of repeatedly attempting a fuse check, then looking to see whether it has been
    accepted, at the same time that camera flashes are applied to the die. The sequence
    from [Figure 20.3](ch20.xhtml#ch20fig3) can be modified in two ways: either the
    sequence can be repeated until the check is successful or the number of cycles
    on the TMS pin can be extended to make more attempts at passing the test.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当目标芯片正常工作且裸芯片暴露时，利用此环境进行攻击包括反复尝试保险丝检查，并观察是否已通过，同时对裸芯片施加相机闪光。可以通过两种方式修改[图 20.3](ch20.xhtml#ch20fig3)中的序列：要么重复序列直到检查成功，要么通过延长
    TMS 引脚上的周期数来增加尝试通过测试的次数。
- en: On the hardware end, the target chip consumes quite a bit of power when a camera
    flash appears over the die. We are not attempting voltage glitching, so the transient
    power consumption should be handled by decoupling capacitors and perhaps also
    a bench power supply.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件方面，当相机闪光照射到裸芯片上时，目标芯片会消耗相当大的功率。我们并不是在进行电压故障攻击，所以瞬态功率消耗应由去耦电容器和可能的台式电源来处理。
- en: When the entire arrangement is in place, roughly one camera flash in four should
    unlock the target and allow a JTAG connection to be established. Be very careful
    in your setup to hold this connection open, never resetting the chip in a way
    that would require a fresh fuse check.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当整个布局完成后，大约每四次相机闪光就应解锁目标并建立 JTAG 连接。请在设置过程中非常小心，以确保保持连接打开，切勿以会要求重新检查保险丝的方式重置芯片。
- en: You should also expect that after a connection is established, the flash memory
    might have read errors from the camera flash for a little while until it settles
    down to the permanently stored values. I resolve this by repeatedly reading all
    flash memory a few times, saving the early reads in case I need them but relying
    on the latter reads for the real program contents. This effect of the memory being
    stunned might also be used to temporarily corrupt the password of the resident
    serial bootstrap loader (BSL) that resides in ROM and ignores the JTAG protection
    fuse.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该预期，在连接建立后，闪存可能会因为相机闪光灯的影响而出现读取错误，直到它稳定下来并存储永久值。我通过反复读取所有闪存几次来解决这个问题，将早期的读取结果保存下来以备不时之需，但依赖后续的读取结果来获取真实的程序内容。内存被暂时“冻结”的效应也可能被用来临时破坏常驻在
    ROM 中并忽略 JTAG 保护保险丝的串行引导加载程序（BSL）的密码。
