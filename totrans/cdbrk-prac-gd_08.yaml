- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Polyalphabetic ciphers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 多字母替换密码
- en: '![](image_fi/502727c08/g08001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08001.png)'
- en: The fourth inscription on *Kryptos*, the sculpture located at CIA headquarters
    in Langley, Virginia, is the most famous unsolved crypto mystery created in the
    last four decades. The other three ciphertexts on this artwork have been solved.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kryptos*雕塑的第四条铭文位于位于弗吉尼亚州兰利的中央情报局总部，是过去四十年中最著名的未解之谜。该艺术品上的另外三条密文已经解开。'
- en: '*Kryptos* and at least two other artworks by the sculptor Jim Sanborn involve
    a kind of encryption called a *polyalphabetic cipher*, meaning a cipher that switches
    between different substitution tables. An overview of *Kryptos* is given in Appendix
    A.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kryptos*和雕塑家吉姆·桑伯恩（Jim Sanborn）创作的至少另外两件艺术作品使用了一种被称为*多字母替换密码*的加密方式，这种加密方法会在不同的替代表之间切换。*Kryptos*的概述请参见附录
    A。'
- en: How a polyalphabetic cipher works
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多字母替换密码的工作原理
- en: To introduce polyalphabetic ciphers, we start with a miniature sculpture (called
    a maquette) that Sanborn made in the late 1980s, before he created the actual
    sculpture ([Figure 8-1](#figure8-1)). This shoebox-sized model looks similar to
    the original but bears a completely different message.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了介绍多字母替换密码，我们从桑伯恩在1980年代末期制作的一件迷你雕塑（称为模型）开始，这件模型是他在创作实际雕塑之前制作的（[图 8-1](#figure8-1)）。这个鞋盒大小的模型与原版相似，但传达了完全不同的信息。
- en: '![](image_fi/502727c08/F08001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/F08001.png)'
- en: 'Figure 8-1: A shoebox-sized maquette of *Kryptos* with a simpler encryption.
    The cipher used is the most common polyalphabetic encryption method: the Vigenère
    cipher*.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-1：一个类似鞋盒大小的*Kryptos*模型，采用了更简单的加密方式。所用的密码是最常见的多字母替换加密方法：维吉尼亚密码*。*
- en: 'For decades, this maquette was unknown to the public; but in 2015, Ed Scheidt,
    Sanborn’s crypto consultant, showed it to participants at a *Kryptos* meeting
    organized by Elonka.^([1](b06.xhtml#c08-endnote-1)) Here’s the encrypted part:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，这个模型对公众来说是未知的；但在2015年，桑伯恩的密码学顾问埃德·谢伊特（Ed Scheidt）在由埃隆卡（Elonka）组织的*Kryptos*会议上向与会者展示了它。这里是加密的部分：
- en: '`TIJVMSRSHVXOMCJVXOENA`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIJVMSRSHVXOMCJVXOENA`'
- en: '`KQUUCLWYXVHZTFGJMKJHG`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`KQUUCLWYXVHZTFGJMKJHG`'
- en: '`DYRPMASMZZNAKCUEURRHJ`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`DYRPMASMZZNAKCUEURRHJ`'
- en: '`KLGEMVFMOKCUEURKSVVMZ`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`KLGEMVFMOKCUEURKSVVMZ`'
- en: '`YYZIUTJJUJCZZITRFHVCT`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`YYZIUTJJUJCZZITRFHVCT`'
- en: '`XNNVBGIXKJNZFXKTBVYYX`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`XNNVBGIXKJNZFXKTBVYYX`'
- en: '`NBZYIAKNVEKPYZIUTJYCA`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`NBZYIAKNVEKPYZIUTJYCA`'
- en: Jew-Lee Lann-Briere and Bill Briere broke the cryptogram a few hours after the
    dinner was over, using only paper and pencil. After publication, Christoph Tenzer
    found the solution as well. It turned out that Sanborn had used the so-called
    Vigenère cipher to encrypt this message.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Jew-Lee Lann-Briere和Bill Briere在晚餐结束后几个小时内，仅用纸和铅笔就破译了这个密码。在发布后，Christoph Tenzer也找到了答案。结果发现桑伯恩使用了所谓的维吉尼亚密码来加密这条消息。
- en: Vigenère cipher
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维吉尼亚密码
- en: The cipher today known as the Vigenère cipher was first described in the sixteenth
    century by Giovan Battista Bellaso (1505–?). Later, in the nineteenth century,
    its invention was misattributed to Bellaso’s contemporary Blaise de Vigenère (1523–1596).
    We’ll explain how this encryption method works using the plaintext of the cryptogram
    on the *Kryptos* maquette (which contains a few spelling errors; the last word
    resulted from a mistake Sanborn made):^([2](b06.xhtml#c08-endnote-2))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 今天被称为维吉尼亚密码的加密方法最早由乔凡尼·巴蒂斯塔·贝拉索（Giovan Battista Bellaso，1505–?）在16世纪描述。后来，在19世纪，这项发明被误归功于贝拉索的同代人布莱兹·德·维吉尼尔（Blaise
    de Vigenère，1523–1596）。我们将通过使用*Kryptos*模型中的密码文本（该文本包含一些拼写错误；最后一个单词是桑伯恩的错误）来解释这种加密方法的工作原理：^([2](b06.xhtml#c08-endnote-2))
- en: '`CODES MAY BE DIVIDED INTU TWO DIFFERENT CLASSES, NAMELY SUBSTITUTIONAL AND
    TRANSPOSITIONAL TYPES, THE TRANSPOSITIONAL BEING THE HARDEST TO DECHPHER WHTHOUT
    TPNQJHFCDZDHIU.`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`CODES MAY BE DIVIDED INTU TWO DIFFERENT CLASSES, NAMELY SUBSTITUTIONAL AND
    TRANSPOSITIONAL TYPES, THE TRANSPOSITIONAL BEING THE HARDEST TO DECHPHER WHTHOUT
    TPNQJHFCDZDHIU.`'
- en: To encrypt this message using the Vigenère cipher, we repeatedly write some
    keyword on the line below our plaintext, assign each letter a number value (e.g.,
    `A` = `0`, `B` = `1`, `C` = `2`, etc.), and then add the letters of the plaintext
    and keyword column-wise. If the result is greater than twenty-five, we subtract
    twenty-six. Each number is then converted back into a letter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用维吉尼亚密码加密此消息，我们在明文下方反复写下一个关键词，为每个字母分配一个数字值（例如，`A` = `0`，`B` = `1`，`C` = `2`，等等），然后将明文和关键词的字母逐列相加。如果结果大于25，我们就减去26。每个数字然后转换回字母。
- en: 'Sanborn reportedly intended to use the keyword `GRU`. However, he started encrypting
    his plaintext with the second letter of his key, effectively changing it to `RUG`.
    For purposes of this demonstration, we’ll consider the keyword to be `RUG`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 据报道，Sanborn原本打算使用关键词`GRU`。然而，他开始使用密钥的第二个字母对明文进行加密，实际上将其更改为`RUG`。为了本演示的目的，我们将关键词视为`RUG`：
- en: '`CODES MAY BE DIVIDED INTU TWO DIFFERENT CLASSES NAMELY SUBSTITUTIONAL . .
    .`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`CODES MAY BE DIVIDED INTO TWO DIFFERENT CLASSES NAMELY SUBSTITUTIONAL . .
    .`'
- en: '`RUGRU GRU GR UGRUGRU GRUG RUG RUGRUGRUG RUGRUGR UGRUGR UGRUGRUGRUGRUG . .
    .`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`RUGRU GRU GR UGRUGRU GRUG RUG RUGRUGRUG RUGRUGR UGRUGR UGRUGRUGRUGRUG . .
    .`'
- en: '`---------------------------------------------------------------------------`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`---------------------------------------------------------------------------`'
- en: '`TIJVM SRS HV XOMCJVX OENA KQU UCLWYXVHZ TFGJMKJ HGDYRP MASMZZNAKCUEUR . .
    .`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIJVM SRS HV XOMCJVX OENA KQU UCLWYXVHZ TFGJMKJ HGDYRP MASMZZNAKCUEUR . .
    .`'
- en: We get the exact ciphertext written on the miniature sculpture. To decrypt the
    ciphertext, we subtract the keyword from the ciphertext.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的密文与微型雕塑上的密文完全一致。为了解密密文，我们从密文中减去关键词。
- en: 'It is easy to see that a Vigenère cipher effectively consists of several Caesar
    ciphers ([Figure 8-2](#figure8-2)). So, with a three-letter keyword (`RUG`), we
    derive the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出，维吉尼亚密码实际上由多个凯撒密码组成（见[图8-2](#figure8-2)）。所以，当使用一个三字母的关键词（`RUG`）时，我们得出如下结果：
- en: The first, fourth, seventh, and tenth letters of the plaintext are encrypted
    with a Caesar cipher and with the key `A` = `R`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明文的第一个、第四个、第七个和第十个字母使用凯撒密码加密，密钥是`A` = `R`。
- en: For letters two, five, and eight, the Caesar substitution `A` = `U` is applied.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第二、第五和第八个字母，应用凯撒替代`A` = `U`。
- en: The third Caesar cipher key is `A` = `G`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个凯撒密码的密钥是`A` = `G`。
- en: Note that Sanborn defined the scheme `A` = `0`, `B` = `1`, `C` = `2`, etc. This
    is the way the Vigenère cipher is usually used today, because computer-savvy people
    tend to start counting at zero. However, before the computer age, almost all Vigenère
    encipherers used the scheme `A` = `1`, `B` = `2`, `C` = `3`, etc.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Sanborn定义了方案`A` = `0`，`B` = `1`，`C` = `2`，依此类推。这是今天维吉尼亚密码常用的方式，因为计算机精通的人倾向于从零开始计数。然而，在计算机时代之前，几乎所有的维吉尼亚加密者都使用方案`A`
    = `1`，`B` = `2`，`C` = `3`，依此类推。
- en: '![](image_fi/502727c08/f08002.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/f08002.png)'
- en: 'Figure 8-2: A Vigenère cipher with a three-letter keyword (here, `RUG`) can
    be regarded as consisting of three Caesar ciphers.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：一个具有三字母关键词（这里是`RUG`）的维吉尼亚密码可以被看作由三个凯撒密码组成。
- en: Today, numerous computer programs and commonly available utilities implement
    the Vigenère cipher.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，许多计算机程序和常见的工具实现了维吉尼亚密码。
- en: Other polyalphabetic ciphers
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他多字母表密码
- en: The Vigenère cipher originated from the insight that a simple substitution cipher
    is easy to break with frequency analysis. An obvious way to prevent this is to
    use several substitution tables instead of one and to switch among them. If we
    have, say, five substitution tables, we can use the first one for the first letter
    of the plaintext, the second one for the second letter, and so on. When we have
    reached the sixth plaintext letter, we return to the first substitution table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 维吉尼亚密码源于一个洞察：简单的替代密码容易通过频率分析破解。防止这种情况的显而易见的方法是使用多个替代表而不是一个，并在它们之间切换。例如，如果我们有五个替代表，我们可以用第一个替代表加密明文的第一个字母，第二个替代表加密第二个字母，依此类推。当我们到达第六个明文字母时，我们就返回第一个替代表。
- en: 'The second row of a substitution table is sometimes referred to as a *cipher
    alphabet*, or simply *alphabet*, in cryptology. Because a simple substitution
    cipher is based on only one substitution table, it is called *monoalphabetic*.
    A cipher that switches between different substitution tables is called *polyalphabetic*.
    The Vigenère cipher is a polyalphabetic cipher, because it uses as many substitution
    tables as there are letters in the keyword. For example, when it uses the keyword
    `RUG` (like on the *Kryptos* maquette), three tables are applied:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码学中，替代表的第二行有时被称为*密码字母表*，或者简化为*字母表*。因为简单的替代密码仅基于一个替代表，所以它被称为*单字母表*。一个在不同的替代表之间切换的密码叫做*多字母表*。维吉尼亚密码是一种多字母表密码，因为它使用的替代表数量等于关键词中的字母数。例如，当使用关键词`RUG`（如在*Kryptos*模型中）时，将应用三个替代表：
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`--------------------------`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------`'
- en: '`RSTUVWXYZABCDEFGHIJKLMNOPQ`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`RSTUVWXYZABCDEFGHIJKLMNOPQ`'
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`--------------------------`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------`'
- en: '`UVWXYZABCDEFGHIJKLMNOPQRST`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`UVWXYZABCDEFGHIJKLMNOPQRST`'
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`--------------------------`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------`'
- en: '`GHIJKLMNOPQRSTUVWXYZABCDEF`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`GHIJKLMNOPQRSTUVWXYZABCDEF`'
- en: 'We can conveniently merge these three tables into one called a Vigenère table:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以方便地将这三张表合并为一个，称为维吉尼亚表：
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`--------------------------`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------`'
- en: '`1 RSTUVWXYZABCDEFGHIJKLMNOPQ`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 RSTUVWXYZABCDEFGHIJKLMNOPQ`'
- en: '`2 UVWXYZABCDEFGHIJKLMNOPQRST`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 UVWXYZABCDEFGHIJKLMNOPQRST`'
- en: '`3 GHIJKLMNOPQRSTUVWXYZABCDEF`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 GHIJKLMNOPQRSTUVWXYZABCDEF`'
- en: This merged table includes three alphabets, represented by the lines numbered
    1, 2, and 3.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这张合并表包含三个字母表，分别由标号为1、2和3的行表示。
- en: Apart from the Vigenère cipher, many other polyalphabetic ciphers are mentioned
    in cryptologic literature. For an overview, check out the website of the American
    Cryptogram Association, which has done a great job of classifying encryption methods.^([3](b06.xhtml#c08-endnote-3))
    In this book, we limit ourselves to those polyalphabetic ciphers we have encountered
    in practice. All of these can be regarded as variants of the Vigenère cipher.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了维吉尼亚密码外，许多其他多表密码也在密码学文献中有所提及。想了解更多，可以查看美国密码协会的网站，该网站在分类加密方法方面做得非常出色。^([3](b06.xhtml#c08-endnote-3))
    在本书中，我们只限于实践中遇到的多表密码。这些都可以看作是维吉尼亚密码的变体。
- en: One-time pad
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次性密码本
- en: The Vigenère cipher becomes more secure the longer the keyword is. For maximum
    security, we could even choose a key that is as long as the message! This can
    be done by using very long text, for instance, a poem or a paragraph from a novel.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 维吉尼亚密码的安全性随着关键词长度的增加而提高。为了最大安全性，我们甚至可以选择一个与消息长度相等的密钥！这可以通过使用非常长的文本来实现，例如，一首诗或一段小说。
- en: 'It is, however, much more common to use a key that has a sequence of random
    letters of the same length as the plaintext, for example, the random string `LAVBF
    HJHWQ UIELS KJFLS JFKSA JHFQI UDAJL KX`. Now, the plaintext `I TRAVEL OVER THE
    SEA AND RIDE THE ROLLING SKY` (taken from the 1975 Fairport Convention song “Rising
    for the Moon”) encrypts as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用一个与明文长度相同的随机字母序列作为密钥要更为常见，例如，随机字符串`LAVBF HJHWQ UIELS KJFLS JFKSA JHFQI
    UDAJL KX`。现在，明文`I TRAVEL OVER THE SEA AND RIDE THE ROLLING SKY`（摘自1975年Fairport
    Convention的歌曲《Rising for the Moon》）的加密结果如下：
- en: '`Plaintext:` `ITRA VELOVE RT HESEAAN DRIDE THER OLLINGS KY`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文：` `ITRA VELOVE RT HESEAAN DRIDE THER OLLINGS KY`'
- en: '`Key: LAVB FHJHWQ UI ELSKJFL SJFKS AJHF QIUDAJL KX`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`密钥：LAVB FHJHWQ UI ELSKJFL SJFKS AJHF QIUDAJL KX`'
- en: '`--------------------------------------------------------------------------`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------------------------------------------------------`'
- en: '`Ciphertext: TTMB ALUVRU LB LPKOJFY VANNW TQLW ETFLNPD UV`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`密文：TTMB ALUVRU LB LPKOJFY VANNW TQLW ETFLNPD UV`'
- en: We call this type of cipher a *one-time pad*. The name comes from early implementations
    of the cipher, when the random-letter sequence was distributed as a pad of paper
    that allowed the top sheet to be torn off and destroyed after use.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称这种类型的密码为*一次性密码本*。这个名字来源于该密码的早期实现，当时随机字母序列被分发为一叠纸，使用完后可以撕下并销毁。
- en: If used properly, meaning the key is random and only used once, then the one-time
    pad is an encryption method that cannot be broken. This is because, with this
    method, any plaintext can be encrypted to every possible ciphertext of the same
    length. Considered the other way, a single ciphertext could be decrypted to any
    possible plaintext of that length, with no way of distinguishing one possible
    plaintext from another.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确使用，意味着密钥是随机的且仅使用一次，那么一次性密码本是一种无法破解的加密方法。因为使用这种方法，任何明文都可以加密为相同长度的所有可能的密文。换句话说，单个密文可以被解密为该长度的任何可能明文，无法区分哪种明文是正确的。
- en: Because of its security, the one-time pad used to be very popular. Militaries
    and diplomatic services heavily used it in the early Cold War era of the 1950s.
    Many spies communicated via one-time pad encryption with their case officers,
    who provided them with a long list of random letters or numbers to use as keys.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其安全性，一次性密码本曾一度非常流行。军队和外交机构在1950年代初期的冷战时期广泛使用它。许多间谍通过一次性密码本加密与他们的接头人通信，接头人提供给他们一长串随机字母或数字作为密钥。
- en: Cipher machines also applied the one-time pad. Most of these devices looked
    like typewriters, and virtually all of them used a binary version of the one-time
    pad scheme that was also known as the Vernam cipher, after Gilbert S. Vernam (1890–1960).
    This means that every character was encoded as a sequence of zeros and ones; the
    key, too, was a series of zeros and ones usually taken from a punched tape. Adding
    the plaintext to the ciphertext meant applying an *exclusive-or operation* (see
    Appendix C).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 密码机也使用了一次性密码本。这些设备大多看起来像打字机，几乎所有设备都使用一种二进制版本的一次性密码本方案，这种方案也被称为维尔南密码（Vernam cipher），以纪念吉尔伯特·S·维尔南（1890–1960）。这意味着每个字符都以一串零和一的序列编码；密钥也通常是从穿孔带中获取的一系列零和一。将明文与密文相加相当于应用*异或操作*（参见附录C）。
- en: 'However, all users of the one-time pad faced a serious problem: they needed
    a huge amount of key material and, as a result, elaborate processes to distribute
    these keys to the users. This is because, by definition, each key can only be
    used once, and a one-time pad’s key is always as long as the message to be encrypted.
    This laborious key handling is the reason the one-time pad began to lose its significance
    when electronics and computer technology emerged in the 1960s and a new generation
    of encryption methods became available.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有使用一次性密码本的用户都面临一个严重问题：他们需要大量的密钥材料，因此需要复杂的过程来分发这些密钥给用户。这是因为，根据定义，每个密钥只能使用一次，而且一次性密码本的密钥长度总是与要加密的消息长度相等。这种繁琐的密钥处理方式是一次性密码本在20世纪60年代电子技术和计算机技术出现后开始失去其重要性的原因，新的加密方法也随之问世。
- en: How to detect a polyalphabetic cipher
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测多表替换密码
- en: 'To detect a Vigenère cipher, we need a frequency analysis and the index of
    coincidence of the ciphertext. [Figure 8-3](#figure8-3) shows the letter frequencies
    of the Vigenère-encrypted text on the *Kryptos* maquette and, for comparison,
    that of a typical English text. Note that the frequency of the most common letter
    is 7.48% in this Vigenère cryptogram, compared to around 11.89% in plain English.
    In general, the frequency distribution of a Vigenère cryptogram is flatter than
    that of a text encrypted in a simple substitution cipher: frequent letters are
    less frequent and rare letters are less rare.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测维吉尼亚密码，我们需要对密文进行频率分析并计算重合指数。[图8-3](#figure8-3)展示了*Kryptos*模型文本的维吉尼亚加密字母频率，并与典型的英文文本进行对比。注意，在这个维吉尼亚密码文本中，最常见字母的频率为7.48%，而在普通英文中约为11.89%。一般来说，维吉尼亚密码的频率分布比简单替换密码加密的文本更加平坦：常见字母变得不那么常见，罕见字母也不再那么稀有。
- en: '![](image_fi/502727c08/f08003.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/f08003.png)'
- en: 'Figure 8-3: The letter frequency diagrams of a Vigenère ciphertext (top) and
    an English plaintext (bottom). As can be seen, the frequency distribution of a
    Vigenère cryptogram is flatter. (Note that the scales are slightly different between
    the two diagrams.)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：维吉尼亚密码文本（上）和英文明文（下）的字母频率图。如图所示，维吉尼亚密码文本的频率分布较为平坦。（注意，两张图的比例稍有不同。）
- en: Remember that the index of coincidence of an English text (i.e., the probability
    that two randomly drawn letters of the cryptogram are the same) is about 6.7%.
    This doesn’t change if the text is encrypted in a simple substitution cipher.
    The index of coincidence of the *Kryptos* maquette text is about 4.3%, which is
    considerably lower. (We can compute this value with the Cipher Tools utilities
    at [https://rumkin.com/tools/cipher/](https://rumkin.com/tools/cipher/) or the
    dCode website at [https://dcode.fr/en](https://dcode.fr/en).) Completely random
    text has an index of coincidence of around 3.8%. In general, the index of coincidence
    of a Vigenère cryptogram lies somewhere between the values of plain language and
    random text. A one-time pad cryptogram is indistinguishable from random text and
    therefore has an index of coincidence of about 3.8%.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，英文文本的重合指数（即随机抽取的两个密码字母相同的概率）大约是6.7%。如果文本使用简单的替换密码加密，这个指数不会发生变化。*Kryptos*
    模型文本的重合指数约为4.3%，明显较低。（我们可以通过[https://rumkin.com/tools/cipher/](https://rumkin.com/tools/cipher/)或[dCode
    网站](https://dcode.fr/en)的密码工具来计算此值。）完全随机的文本重合指数大约是3.8%。一般来说，维吉尼亚密码的重合指数介于普通语言和随机文本之间。一旦使用一次性密码本进行加密，密码文本与随机文本无异，因此其重合指数大约是3.8%。
- en: It is important to note that polyalphabetic ciphers often resemble letter-pair
    substitutions. We will explain in [Chapter 12](c12.xhtml) how to distinguish between
    these two techniques.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，多字母替换密码通常类似于字母对替换。我们将在[第12章](c12.xhtml)中解释如何区分这两种技术。
- en: How to break a polyalphabetic cipher
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何破解多字母替换密码
- en: For centuries, the Vigenère cipher and other polyalphabetic ciphers were widely
    considered unbreakable, deemed “le chiffre indéchiffrable.” Of course, this designation
    was far from justified, since, as early as the seventeenth century, word guessing
    had been described as a method for solving systems of this kind.^([4](b06.xhtml#c08-endnote-4))
    In the nineteenth century, Kasiski’s method (discussed later in this section)
    was developed. Today, there are many approaches to breaking polyalphabetic ciphers,
    most of which work well as long as one is not dealing with a one-time pad. Some
    of these codebreaking methods can be employed manually; others require computer
    support. Like many other encryption algorithms covered in this book, most polyalphabetic
    ciphers can be attacked with the computerized hill-climbing method (see [Chapter
    16](c16.xhtml)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 几个世纪以来，维吉尼亚密码和其他多字母替换密码被广泛认为是无法破解的，被称为“无法破解的密码（le chiffre indéchiffrable）”。当然，这种说法并不成立，因为早在十七世纪，就有人提出通过猜测单词来解决此类密码系统的方法。^([4](b06.xhtml#c08-endnote-4))
    在十九世纪，卡西斯基方法（在本节后续部分讨论）被开发出来。如今，有许多方法可以破解多字母替换密码，其中大多数在不涉及一次性密码本的情况下效果很好。这些破译方法中的一些可以手动使用，另一些则需要计算机支持。与本书中许多其他加密算法一样，大多数多字母替换密码可以通过计算机化的爬山法（见[第16章](c16.xhtml)）进行攻击。
- en: In the following, we will focus on the Vigenère cipher and introduce a number
    of methods to solve it. Most of these can also be transferred to other polyalphabetic
    ciphers and, even if they can be applied manually, have long been implemented
    in computer programs. If you enter “Vigenère solver” in a search engine, you will
    find numerous websites that break Vigenère cryptograms with various methods (sometimes
    not even documenting the method used). In addition, you can, of course, use a
    utility such as CrypTool 2 or dCode for solving a Vigenère cipher with various
    methods.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将重点讨论维吉尼亚密码，并介绍多种破解方法。这些方法中的大多数也可以应用于其他多字母替换密码，即使它们可以手动应用，也早已被实现为计算机程序。如果你在搜索引擎中输入“维吉尼亚密码解码器”，你会找到许多网站，使用各种方法破解维吉尼亚密码（有时甚至没有记录所用的方法）。此外，你当然可以使用像CrypTool
    2或dCode这样的工具，使用不同的方法来破解维吉尼亚密码。
- en: Word guessing
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单词猜测
- en: 'In the 1990s, when Klaus was a computer science student at a German university,
    he was tasked with solving a cryptogram as homework—something he had never done
    before. He knew that the cipher was a Vigenère and that the text and keyword were
    in English. Also, the mapping between letters and numbers was performed according
    to the `A` = `0`, `B` = `1`, `C` = `2` scheme. Here’s an excerpt of the ciphertext:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代，当克劳斯还是德国一所大学的计算机科学学生时，他被布置了一项破解密码的作业——这是他以前从未做过的事情。他知道该密码是维吉尼亚密码，并且文本和关键字是英文。此外，字母与数字的映射按照`A`
    = `0`，`B` = `1`，`C` = `2`的方案进行。以下是密文的一部分：
- en: '`"VMFA CKT ZM, KK ZSSH,", YX QTER, "DCL VYG''P KNB PHS DJCB. MFN ATJ''H QWV
    BL YNCSH FY RAA PZZCWMSAF NBUXDBJWYSCR." FX PFNSU MM FWYJ VZL CRAG GZRSC YESWQVEW
    UQH YVVR HNOH BCLEBG''P RT WK.`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`"VMFA CKT ZM, KK ZSSH,", YX QTER, "DCL VYG''P KNB PHS DJCB. MFN ATJ''H QWV
    BL YNCSH FY RAA PZZCWMSAF NBUXDBJWYSCR." FX PFNSU MM FWYJ VZL CRAG GZRSC YESWQVEW
    UQH YVVR HNOH BCLEBG''P RT WK.`'
- en: '`TPMDIW ZRR GG PVJ ALW YGZ GVIVEAAAR FH YBK.`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`TPMDIW ZRR GG PVJ ALW YGZ GVIVEAAAR FH YBK.`'
- en: '`"B''I UFAV," AC LWWI, "KV''EJ LAS BVF KSLPG KWILR."`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`"B''I UFAV," AC LWWI, "KV''EJ LAS BVF KSLPG KWILR."`'
- en: 'As can be seen, punctuation and spaces are visible. This made it possible,
    as with an Aristocrat cipher, to guess words. For instance, the letter sequences
    `YX QTER` are located between two passages in quotation marks, which probably
    indicate direct speech. Klaus thought that `HE SAID` was a good guess. To check
    this hypothesis, he subtracted the plaintext from the guessed plaintext:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如可以看到，标点符号和空格是可见的。这使得像贵族密码一样，可以通过猜测单词来进行破解。例如，字母序列`YX QTER`位于两个引号内的段落之间，可能表示直接引语。克劳斯认为`HE
    SAID`是一个不错的猜测。为了验证这个假设，他将猜测的明文从密文中减去：
- en: '`YX QTER`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`YX QTER`'
- en: '`HE SAID`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`HE SAID`'
- en: '`-------`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`-------`'
- en: '`RT YTWO`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`RT YTWO`'
- en: 'For a computer science student, the rest of the keyword was not hard to guess:
    it’s `FORTYTWO`, the answer to the ultimate question of life, the universe, and
    everything in Douglas Adams’s bestselling 1979 novel *The Hitchhiker’s Guide to
    the Galaxy* (see [Figure 8-4](#figure8-4)). Decrypting the whole text with this
    keyword revealed that the plaintext had been taken from the novel, as well. Klaus
    had solved the challenge, igniting his lifelong interest in codebreaking.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计算机科学学生来说，其余的密钥并不难猜：它是`FORTYTWO`，这是道格拉斯·亚当斯1979年畅销小说《银河系漫游指南》中的“生命、宇宙以及一切问题的终极答案”（见[图8-4](#figure8-4)）。用这个密钥解密整个文本后，发现明文内容同样来自这本小说。克劳斯解决了这一挑战，激发了他对密码破译的终生兴趣。
- en: '![](image_fi/502727c08/f08004.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/f08004.png)'
- en: 'Figure 8-4: A Vigenère-encrypted passage from Douglas Adams’s famous 1979 novel
    was the first cryptogram ever broken by author Klaus Schmeh. The keyword was `FORTYTWO`.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：道格拉斯·亚当斯（Douglas Adams）1979年著名小说中的一段维吉尼亚密码文本，首次由作者克劳斯·施梅（Klaus Schmeh）破译。密钥是`FORTYTWO`。
- en: Checking for repeating patterns (Kasiski’s method)
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查重复模式（卡西斯基方法）
- en: 'If no punctuation or spaces are given, breaking a Vigenère cipher becomes a
    little more difficult. Nevertheless, a skilled codebreaker can solve a simple
    Vigenère cryptogram in under twenty minutes without computer support. Here is
    a larger encrypted excerpt from the previous example, with punctuation and spaces
    omitted:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有标点符号或空格，破解维吉尼亚密码会变得稍微更困难。然而，一个熟练的密码破译者可以在二十分钟内不借助计算机解决一个简单的维吉尼亚密码。以下是之前例子中更大一段加密文本，省略了标点和空格：
- en: '`KWWMC XJGJQ FGBLH OYSIA CPWGT IKHDM DSMCL LCTJR QMZGE BJTWC`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`KWWMC XJGJQ FGBLH OYSIA CPWGT IKHDM DSMCL LCTJR QMZGE BJTWC`'
- en: '`EMMYW PNUPX JEKKG ICEBH VSWHY TRPWG FRMTL VEBLI GAGLC OWRVG`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`EMMYW PNUPX JEKKG ICEBH VSWHY TRPWG FRMTL VEBLI GAGLC OWRVG`'
- en: '`NTPVR FCIPH OGJFN TQTOH MSPLY RKBQM YNKTJ WSCKA CKSCW RJACP`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`NTPVR FCIPH OGJFN TQTOH MSPLY RKBQM YNKTJ WSCKA CKSCW RJACP`'
- en: '`WGFQR KZHJP FGVWJ BBSKC IFBXO QJBUX BYNCR OETNX ICWSJ ICVET`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`WGFQR KZHJP FGVWJ BBSKC IFBXO QJBUX BYNCR OETNX ICWSJ ICVET`'
- en: '`NQREJ RDSBO JYMKP MKOKT LWOVF PSRYG ZKTFB XBYKF YVVEM VWZHC 5`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`NQREJ RDSBO JYMKP MKOKT LWOVF PSRYG ZKTFB XBYKF YVVEM VWZHC 5`'
- en: '`LGABH QZFZH SLHMJ BFNEA PVTIX AFXZW IBKDL HSWYV VPYLW ZXCRW`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`LGABH QZFZH SLHMJ BFNEA PVTIX AFXZW IBKDL HSWYV VPYLW ZXCRW`'
- en: '`GKAQY ARECE EBJRV LAXJR FBKHD ZABLV ZLIAW BYVFN EAEBY SIOCG`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`GKAQY ARECE EBJRV LAXJR FBKHD ZABLV ZLIAW BYVFN EAEBY SIOCG`'
- en: '`EBLUV GCKWH NCELY GZFFQ ZTJFE LNBXA YWOCO IXZJX ZVNGX XLXOH`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`EBLUV GCKWH NCELY GZFFQ ZTJFE LNBXA YWOCO IXZJX ZVNGX XLXOH`'
- en: '`MOKAC AWRSC UBQVA FSWSE CFKBL CCHGW YVFFR VRXNW XHZVQ TJRYV`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`MOKAC AWRSC UBQVA FSWSE CFKBL CCHGW YVFFR VRXNW XHZVQ TJRYV`'
- en: '`VHLEU JJGKB EXOZJ TKBLF NZUFF LQXNC KVZLK BCVYM RGAXO HWMNX 10`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`VHLEU JJGKB EXOZJ TKBLF NZUFF LQXNC KVZLK BCVYM RGAXO HWMNX 10`'
- en: '`PXWDW CEHSG YSIGK HSMJS XGRUM NPHMS KNKTJ RFDIX BBHSH HZHLY`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`PXWDW CEHSG YSIGK HSMJS XGRUM NPHMS KNKTJ RFDIX BBHSH HZHLY`'
- en: '`KFQWK MJXBI WVRMQ AAKFG SRLHI SFBJT EKAOY KRKPB KFNBW TAMDS`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`KFQWK MJXBI WVRMQ AAKFG SRLHI SFBJT EKAOY KRKPB KFNBW TAMDS`'
- en: '`BOJTL XNJTI JPMKN WJRDT LMKRF MYXUT ODFFK BANHO WZPGC KRCZG`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOJTL XNJTI JPMKN WJRDT LMKRF MYXUT ODFFK BANHO WZPGC KRCZG`'
- en: '`RGBPK FWWVW ZXYOZ GVLMF AHMWE ZFTZU TBVLC KECZG CRUKK BLKZM`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`RGBPK FWWVW ZXYOZ GVLMF AHMWE ZFTZU TBVLC KECZG CRUKK BLKZM`'
- en: '`FAEGO CSPFB YVBOJ MMLAS YVRMY KPVZF UXLMO VTIJX EHPQQ SRKCW 15`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`FAEGO CSPFB YVBOJ MMLAS YVRMY KPVZF UXLMO VTIJX EHPQQ SRKCW 15`'
- en: '`KIYCW MFXSO DPVYM KAHMS UTWPW GTIKV MFACK TZMKK ZSSHY XQTER`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`KIYCW MFXSO DPVYM KAHMS UTWPW GTIKV MFACK TZMKK ZSSHY XQTER`'
- en: '`DCLVY GPKNB PHSDJ CBMFN ATJHQ WVBLY NCSHF YRAAP ZZCWM SAFNB`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`DCLVY GPKNB PHSDJ CBMFN ATJHQ WVBLY NCSHF YRAAP ZZCWM SAFNB`'
- en: '`UXDBJ WYSCR FXPFN SUMMF WYJVZ LCRAG GZRSC YESWQ VEWUQ HYVVR`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`UXDBJ WYSCR FXPFN SUMMF WYJVZ LCRAG GZRSC YESWQ VEWUQ HYVVR`'
- en: '`HNOHB CLEBG PRTWK TPMDI WZRRG GPVJA LWYGZ GVIVE AAARF HYBKB`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`HNOHB CLEBG PRTWK TPMDI WZRRG GPVJA LWYGZ GVIVE AAARF HYBKB`'
- en: '`IUFAV ACLWW IKVEJ LASBV FKSLP GKWIL RBIOK FRBBR KIWSX HGGCH 20`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`IUFAV ACLWW IKVEJ LASBV FKSLP GKWIL RBIOK FRBBR KIWSX HGGCH 20`'
- en: '`TVROC MKOHQ VIRBP GFWUF PINCX GVKEK EDUWE ZFBOT ZFYTR TJRWC`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`TVROC MKOHQ VIRBP GFWUF PINCX GVKEK EDUWE ZFBOT ZFYTR TJRWC`'
- en: '`CEGGC WYFFN LWPVJ HFIMY DWXVV TBMDW XPPIY LOVFG XHRMK PJPLB`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`CEGGC WYFFN LWPVJ HFIMY DWXVV TBMDW XPPIY LOVFG XHRMK PJPLB`'
- en: '`JMWBI WKLEH EBLHF UCUQW QHWBP LPWAS YXYKZ CKWKL YBZOW HYNPP`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`JMWBI WKLEH EBLHF UCUQW QHWBP LPWAS YXYKZ CKWKL YBZOW HYNPP`'
- en: '`DMXWK ZMBJU YCSXZ NEZYA IIPHO GJFJA MHGVN GWBLZ AFFHY BKYKF`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`DMXWK ZMBJU YCSXZ NEZYA IIPHO GJFJA MHGVN GWBLZ AFFHY BKYKF`'
- en: '`FPZMR AABXH FINXZ OSRGN RBPOB OPTET EBBVR MBHUC ZAVTL PDMXW 25`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`FPZMR AABXH FINXZ OSRGN RBPOB OPTET EBBVR MBHUC ZAVTL PDMXW 25`'
- en: '`KZMMP CGSSN GEPVJ GRBBB PGFPP IYLOM TIMXE HPHTP LBJWX MUOJL`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`KZMMP CGSSN GEPVJ GRBBB PGFPP IYLOM TIMXE HPHTP LBJWX MUOJL`'
- en: '`CLXMU OJLCL WFJRV OGVAG BVZVF THZTK JHKXL STDCX RHZFN JVYPH`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLXMU OJLCL WFJRV OGVAG BVZVF THZTK JHKXL STDCX RHZFN JVYPH`'
- en: '`IDTWE MYMKD TWEMZ OAFDT RLRPD WQGKH RAAFU SFIJX ZOXVW KMFLC`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`IDTWE MYMKD TWEMZ OAFDT RLRPD WQGKH RAAFU SFIJX ZOXVW KMFLC`'
- en: '`NBKUR HLCNB KTTXN MKOJM NXKDQ SCBTB JUFHG HGGPQ GSZGE TLCNB`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`NBKUR HLCNB KTTXN MKOJM NXKDQ SCBTB JUFHG HGGPQ GSZGE TLCNB`'
- en: '`KWGKA QYZPB LUAHB SVGYK ACKHV GEBRS SHFPM GZSWK YTRLO CLFVT 30`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`KWGKA QYZPB LUAHB SVGYK ACKHV GEBRS SHFPM GZSWK YTRLO CLFVT 30`'
- en: '`RTXCZ HGHGG POYVR MQHIO SMGXM IHSTT GHGGP PFFVL MDASS HFZCM`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`RTXCZ HGHGG POYVR MQHIO SMGXM IHSTT GHGGP PFFVL MDASS HFZCM`'
- en: '`PVJFV TLWSV FHJLM ZNSFH RUMNP DTWEM ZMDOY GFFYG UDJCG ECHBD`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`PVJFV TLWSV FHJLM ZNSFH RUMNP DTWEM ZMDOY GFFYG UDJCG ECHBD`'
- en: '`TWEMY TNSXC BXCGP CLSKM FXNSY VVRMY PSSKZ LFMDO YDVHN EAKTI`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`TWEMY TNSXC BXCGP CLSKM FXNSY VVRMY PSSKZ LFMDO YDVHN EAKTI`'
- en: '`CWHNO HTBTX YGZTT FREJP KFPCL MUAAF JHYXF XHZYV VRUTJ HJRKH`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`CWHNO HTBTX YGZTT FREJP KFPCL MUAAF JHYXF XHZYV VRUTJ HJRKH`'
- en: '`ZXIFU FFLQX NKFBK XBMKP JOKIM BJHID FBLMZ KFGEM YGUKM SIXGG 35`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZXIFU FFLQX NKFBK XBMKP JOKIM BJHID FBLMZ KFGEM YGUKM SIXGG 35`'
- en: '`LOWHZ VSEWF NHNTQ CQGYO ERAHJ JJBZX LMLCN BKTTX NMQCE ZUTUT`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOWHZ VSEWF NHNTQ CQGYO ERAHJ JJBZX LMLCN BKTTX NMQCE ZUTUT`'
- en: '`WCDIM BJHXO STLWY VJKFN JWDOA SRGGV AZNHK ECVKH YOXXY MLCNB`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`WCDIM BJHXO STLWY VJKFN JWDOA SRGGV AZNHK ECVKH YOXXY MLCNB`'
- en: '`KWUBP VFLVL MOAFY VVWMH NOSRJ ICGZO UZVTQ TJHFA FNLMK TYWDX`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`KWUBP VFLVL MOAFY VVWMH NOSRJ ICGZO UZVTQ TJHFA FNLMK TYWDX`'
- en: '`YMLCN BKXUA EQMKF NJWXS YVVGC TNSXH GNZMK DTWEM BAEGB WWXMY`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`YMLCN BKXUA EQMKF NJWXS YVVGC TNSXH GNZMK DTWEM BAEGB WWXMY`'
- en: '`YCZFJ XUTJH JRTEG FXWSU IHQXO PZHYX UTJHJ RRQCL DSIWU GRDJC 40`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`YCZFJ XUTJH JRTEG FXWSU IHQXO PZHYX UTJHJ RRQCL DSIWU GRDJC 40`'
- en: '`BKYRF XFIXH CBIXZ OCSJA CYHIX VVWFH PZDIE WCKPV JRVKG LEJJU`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`BKYRF XFIXH CBIXZ OCSJA CYHIX VVWFH PZDIE WCKPV JRVKG LEJJU`'
- en: '`IBLLK TYVV`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`IBLLK TYVV`'
- en: 'The trick is to first discover the length of the keyword. Once we know it,
    solving a Vigenère cipher means solving a few Caesar ciphers. A good way to guess
    the keyword length is to look for repeating patterns in a cryptogram, a technique
    referred to as *Kasiski’s method*. For instance, in lines 22 and 26, we find the
    repeating pattern `PPIYLO`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧是首先发现关键词的长度。一旦知道了它，解密一个维吉尼亚密码就变成了解决几个凯撒密码。猜测关键词长度的一个好方法是通过寻找密文中的重复模式，这种技术被称为*卡西斯基方法*。例如，在第22行和第26行中，我们找到了重复的模式`PPIYLO`：
- en: '![](image_fi/502727c08/g08002.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08002.png)'
- en: The distance between the beginnings of the first and the second appearance of
    the pattern is 192 letters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个和第二次出现该模式的起始位置之间的距离是192个字母。
- en: 'In lines 28 and 33, we find another repeating pattern, `DTWEMY`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在第28行和第33行中，我们找到了另一个重复模式`DTWEMY`：
- en: '![](image_fi/502727c08/g08003.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08003.png)'
- en: This time, the number of letters before the repetition begins is 248.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，重复开始之前的字母数是248。
- en: 'In line 28, a third repetition can be found, `DTWEM`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在第28行中，可以找到第三次重复的`DTWEM`：
- en: '![](image_fi/502727c08/g08004.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08004.png)'
- en: Here, the distance is 8.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，距离是8。
- en: 'The distances we have found are 192, 248, and 8\. The greatest common divisor
    of these three numbers is 8\. This means that the key length is probably 8 or
    a divisor of 8\. A keyword length of 8 means that we are dealing with eight Caesar
    ciphers. In the next step, we therefore perform eight frequency counts. We start
    by counting the letters at positions 1, 9, 17, 25, 33, 41, and so on. Here is
    what we get:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现的距离是192、248和8。 这三个数字的最大公约数是8。 这意味着关键词的长度很可能是8或8的约数。一个长度为8的关键词意味着我们正在处理八个凯撒密码。接下来的步骤，我们需要进行八次频率统计。我们从统计位置1、9、17、25、33、41等字母开始。结果如下：
- en: '![](image_fi/502727c08/g08005.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08005.png)'
- en: If we compare this with the frequencies of an ordinary English text (see Appendix
    B), we see that the Caesar cipher used here is a direct one-to-one correlation,
    with `A` = `F`, `B` = `G`, `C` = `H` . . . This means that the first letter of
    the keyword is probably `F`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个与普通英语文本的频率进行比较（见附录B），我们会发现这里使用的凯撒密码是直接的一对一对应关系，`A` = `F`，`B` = `G`，`C`
    = `H` ……这意味着关键词的第一个字母很可能是`F`。
- en: 'Now let’s count the letters at positions 2, 10, 18, and so on:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们统计位置2、10、18等的字母：
- en: '![](image_fi/502727c08/g08006.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08006.png)'
- en: This time, we get `A` = `O`, `B` = `P`, `C` = `Q` . . . The second keyword letter
    therefore is very likely to be `O`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们得到`A` = `O`，`B` = `P`，`C` = `Q`……因此，第二个关键词字母很可能是`O`。
- en: If we repeat this procedure six more times, we get the letters `F`, `O`, `R`,
    `T`, `Y`, `T`, `W`, and `O`. This suggests that the keyword length really is eight.
    If we had received a keyword like `FORTFORT`, we would know that the four-letter
    `FORT` was the actual keyword. Using the keyword `FORTYTWO`, we can easily decrypt
    the ciphertext and retrieve the *Hitchhiker’s Guide to the Galaxy* excerpt.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再重复这个过程六次，得到的字母是`F`、`O`、`R`、`T`、`Y`、`T`、`W`和`O`。这表明关键词的长度确实是8。如果我们得到的关键词是`FORTFORT`，我们就知道四个字母`FORT`是实际的关键词。使用关键词`FORTYTWO`，我们可以轻松解密密文并恢复出《*银河系漫游指南*》的摘录。
- en: Using the index of coincidence
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用一致性指数
- en: Kasiski’s method is usually the best way to determine the Vigenère keyword length
    by hand. If a computer is available, there are better methods. Quite often, the
    index of coincidence can help us determine the number of letters in the keyword.
    A good way to use this value is to assume different keyword lengths (for instance,
    lengths between three and twenty-five) and compute the index of coincidence for
    each case. Assuming an English plaintext, the index of coincidence that is the
    closest to a normal English value of 6.7% is probably correct.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 卡西斯基方法通常是通过手工确定维吉尼亚关键字长度的最佳方法。如果有计算机可用，存在更好的方法。通常，重合指数可以帮助我们确定关键字中的字母数量。一种好的方法是假设不同的关键字长度（例如，长度在3到25之间），并为每个情况计算重合指数。假设是英文明文，重合指数最接近6.7%的值可能是正确的。
- en: 'The dCode website ([https://dcode.fr/en](https://dcode.fr/en)) provides us
    with a tool that performs such a test. Here are the results we get for *The Hitchhiker’s
    Guide to the Galaxy* excerpt:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: dCode网站 ([https://dcode.fr/en](https://dcode.fr/en))为我们提供了一个可以进行此类测试的工具。以下是我们为《银河系漫游指南》摘录得到的结果：
- en: 'Length = 24: index of coincidence = 6.4%'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 24: 重合指数 = 6.4%'
- en: 'Length = 8: index of coincidence = 6.3%'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 8: 重合指数 = 6.3%'
- en: 'Length = 16: index of coincidence = 6.2%'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 16: 重合指数 = 6.2%'
- en: 'Length = 4: index of coincidence = 4.9%'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 4: 重合指数 = 4.9%'
- en: 'Length = 12: index of coincidence = 4.9%'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 12: 重合指数 = 4.9%'
- en: 'Length = 20: index of coincidence = 4.8%'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 20: 重合指数 = 4.8%'
- en: 'Length = 26: index of coincidence = 4.6%'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 26: 重合指数 = 4.6%'
- en: 'Length = 14: index of coincidence = 4.6%'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 14: 重合指数 = 4.6%'
- en: The keyword length of twenty-four renders the highest index of coincidence,
    which is closest to the English 6.7%. Twenty-four is wrong, but we can live with
    this, because it is a multiple of 8\. When we solve twenty-four Caesar ciphers
    in the next step, we will get `FORTYTWOFORTYTWOFORTYTWO` as the keyword. The second
    guess (a keyword length of 8 letters) is the correct one.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 长度为二十四时，重合指数最高，最接近英语的6.7%。二十四是错误的，但我们可以接受，因为它是8的倍数。当我们在下一步解决二十四个凯撒密码时，我们会得到`FORTYTWOFORTYTWOFORTYTWO`作为关键字。第二次猜测（8个字母的关键字长度）是正确的。
- en: Now that we know the keyword length, we can tell the dCode utility to solve
    the cryptogram. By solving a Caesar cipher for each letter of the keyword, dCode
    renders the correct solution. This is shown in [Figure 8-5](#figure8-5).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了关键字的长度，我们可以告诉dCode工具解密密文。通过为每个字母解决凯撒密码，dCode给出正确的解答。这在[图8-5](#figure8-5)中展示。
- en: '![](image_fi/502727c08/f08005.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/f08005.png)'
- en: 'Figure 8-5: The website dCode ([https://dcode.fr/en](https://dcode.fr/en))
    provides tools to solve a Vigenère cipher step-by-step.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-5：网站dCode ([https://dcode.fr/en](https://dcode.fr/en))提供逐步解决维吉尼亚密码的工具。
- en: 'Let’s now try the same with the text on the *Kryptos* maquette. Here is what
    dCode delivers us:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们尝试对*Kryptos*模型上的文本进行相同的操作。以下是dCode为我们提供的结果：
- en: 'Length = 3: index of coincidence = 6.3%'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 3: 重合指数 = 6.3%'
- en: 'Length = 6: index of coincidence = 6.2%'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 6: 重合指数 = 6.2%'
- en: 'Length = 9: index of coincidence = 5.9%'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 9: 重合指数 = 5.9%'
- en: 'Length = 13: index of coincidence = 5.2%'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 13: 重合指数 = 5.2%'
- en: 'Length = 11: index of coincidence = 4.9%'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 11: 重合指数 = 4.9%'
- en: 'Length = 12: index of coincidence = 5.5%'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 12: 重合指数 = 5.5%'
- en: 'Length = 15: index of coincidence = 5.8%'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 15: 重合指数 = 5.8%'
- en: 'Length = 18: index of coincidence = 5.9%'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 18: 重合指数 = 5.9%'
- en: 'Length = 8: index of coincidence = 4.3%'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 8: 重合指数 = 4.3%'
- en: 'Length = 1: index of coincidence = 4.3%'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '长度 = 1: 重合指数 = 4.3%'
- en: As can be seen, the keyword length of three provides the best result. This is
    correct, as the keyword is `RUG`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，长度为3的关键字提供了最佳结果。这是正确的，因为关键字是`RUG`。
- en: William Friedman, who introduced the index of coincidence to codebreaking, developed
    a formula that uses it to compute an estimated keyword length from the ciphertext.
    This formula is known as the *Friedman test*. It requires fewer calculations than
    performing the index-of-coincidence comparisons we just walked through, but it
    is also less accurate, especially if the plaintext language is not known. For
    a detailed treatise on the index-of-coincidence method and the Friedman test,
    we recommend Craig Bauer’s book *Secret History*.^([5](b06.xhtml#c08-endnote-5))
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 威廉·弗里德曼（William Friedman）是将“巧合指数”引入密码破解领域的先驱，他提出了一种利用该指数从密文中估算关键字长度的公式。这个公式被称为*弗里德曼测试*。它比我们刚才演示的巧合指数比较方法需要更少的计算，但也
    less 准确，尤其是当明文语言未知时。关于巧合指数方法和弗里德曼测试的详细讨论，我们推荐克雷格·鲍尔（Craig Bauer）的《*秘密历史*》一书。^([5](b06.xhtml#c08-endnote-5))
- en: Dictionary attacks
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典攻击
- en: Another way to break a Vigenère cipher is the so-called dictionary attack, which
    requires the use of a computer program. A dictionary attack requires a long list
    of words, called a *dictionary*, which is stored in a file. Dictionary files of
    all kinds are available on the internet in great numbers. For example, there are
    files containing the 20,000 most popular words of the English language. Similar
    collections have been created for many other languages, geographical expressions,
    names, abbreviations, and more. In addition, there are programs that create dozens
    of different versions of a given word (for instance, *CALIFORNIA*, *CALIFORNYA*,
    *CALIF*, *CA*, *AINROFILAC* . . .).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种破解维吉尼亚密码的方法是所谓的字典攻击，这需要使用计算机程序。字典攻击需要一个长长的单词列表，称为*字典*，它存储在一个文件中。各种字典文件在互联网上有大量的可用资源。例如，有包含英语中20,000个最常用单词的文件。类似的集合也为其他许多语言、地理名词、名字、缩写等创建了。除此之外，还有一些程序能够为给定单词生成几十种不同的版本（例如，*CALIFORNIA*，*CALIFORNYA*，*CALIF*，*CA*，*AINROFILAC*等）。
- en: A program executing a dictionary attack on the Vigenère cipher takes one word
    after another from such a source, derives different versions of it, and uses each
    one as a possible key to decrypt the ciphertext. Then it checks whether the result
    looks like plain English (or whatever language is used). Methods to distinguish
    meaningful text from gibberish will be introduced in [Chapter 16](c16.xhtml).
    When the test for meaningful language is positive, the deciphering has succeeded;
    otherwise, the next keyword candidate is tested.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 执行字典攻击的程序会逐个从这样的源中取出单词，推导出不同版本的该单词，并将每个版本作为可能的密钥来解密密文。然后，它会检查结果是否看起来像是正常的英文（或使用的任何其他语言）。区分有意义文本和无意义文本的方法将在[第16章](c16.xhtml)中介绍。当有意义的语言测试为正时，解密成功；否则，将测试下一个关键字候选。
- en: While trying to break a Vigenère cipher with a dictionary attack is feasible,^([6](b06.xhtml#c08-endnote-6))
    it is not very common. This is probably because more powerful computer-based attacks
    on the Vigenère cipher are available, such as hill climbing, which is discussed
    in [Chapter 16](c16.xhtml).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过字典攻击破解维吉尼亚密码是可行的，^([6](b06.xhtml#c08-endnote-6)) 但并不常见。这可能是因为有更强大的基于计算机的攻击方法可用于破解维吉尼亚密码，比如爬山法（hill
    climbing），在[第16章](c16.xhtml)中有讨论。
- en: Tobias Schrödel’s method
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 托比亚斯·施罗德尔（Tobias Schrödel）的方法
- en: In 2008, our colleague, the German crypto expert Tobias Schrödel, published
    a hitherto unknown Vigenère cipher-breaking method in *Cryptologia*.^([7](b06.xhtml#c08-endnote-7))
    This attack is based on the elimination of rare letter combinations in both the
    plaintext and the keyword. It requires a computer program (and, in fact, is part
    of CrypTool 1, the forerunner of CrypTool 2). Tobias’s method is particularly
    helpful in cases when the message is not much longer than the keyword (e.g., a
    fifteen-letter plaintext encrypted with a seven-letter keyword). However, the
    keyword must be a real word and not a random-letter sequence—otherwise, eliminating
    rare letter combinations is useless.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年，我们的同事、德国密码学专家托比亚斯·施罗德尔在《*Cryptologia*》上发表了一种迄今未知的维吉尼亚密码破解方法。^([7](b06.xhtml#c08-endnote-7))
    该攻击基于消除明文和关键字中的稀有字母组合。它需要一个计算机程序（实际上是CrypTool 1的一部分，CrypTool 2的前身）。托比亚斯的方法在消息长度不比关键字长太多的情况下特别有效（例如，一个十五个字母的明文用一个七个字母的关键字加密）。然而，关键字必须是一个真实的单词，而不是一个随机字母序列——否则，消除稀有字母组合就没有任何意义。
- en: In his article, Tobias introduces the ciphertext `IZRUOJVREFLFZKSWSE`, which
    was encrypted with a Vigenère cipher. The traditional methods used to attack a
    Vigenère cipher don’t work here. For instance, no words can be guessed, because
    the text contains no spaces. In addition, the cryptogram is short, and there are
    no repetitions that might reveal the keyword length. Even if we know or guess
    the length of the keyword, performing, say, six frequency analyses won’t help,
    because there are too few letters.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的文章中，托比亚斯介绍了密文`IZRUOJVREFLFZKSWSE`，它是用维吉尼亚密码加密的。传统的攻击维吉尼亚密码的方法在这里行不通。例如，无法猜测出任何单词，因为文本中没有空格。此外，密码文本很短，没有可能揭示密钥长度的重复出现。即便我们知道或猜测密钥的长度，进行例如六次频率分析也无济于事，因为字母太少。
- en: However, Tobias’s method can break this cryptogram. By eliminating rare letter
    combinations, it finds that the common trigraphs *BLA* and *HOR* generate `IZR`
    (the first three letters of the ciphertext) when one is encrypted with the other.
    Based on frequency considerations, the method next suggests *BLACK* and *HORSE*
    as extensions of the two trigraphs. It is not clear which word is the keyword
    and which is the plaintext, but further tests reveal that the keyword `HORSE`
    makes sense. When it is used to decrypt the cryptogram, the resulting plaintext
    is `BLACK CHAMBER IS OPEN`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，托比亚斯的方法可以破解这个密码。通过消除稀有的字母组合，它发现常见的三字母组合*BLA*和*HOR*在一个与另一个加密时会生成`IZR`（密文的前三个字母）。基于频率考虑，该方法接着建议*BLACK*和*HORSE*作为这两个三字母组合的扩展。虽然不清楚哪个是密钥词，哪个是明文，但进一步的测试揭示了密钥词`HORSE`更有意义。当用它来解密密码时，得到的明文是`BLACK
    CHAMBER IS OPEN`。
- en: Other Vigenère breaking methods
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他维吉尼亚破解方法
- en: In her 1939 book *Cryptanalysis*, Helen Fouché Gaines described a linguistic
    approach to solving a Vigenère cipher.^([8](b06.xhtml#c08-endnote-8)) It requires
    luck and a lot of trial and error. Richard Hayes described a similar but more
    advanced technique, based on common trigraphs, in 1943.^([9](b06.xhtml#c08-endnote-9))
    Both methods are rarely used today, as more powerful alternatives have emerged
    since the advent of computer technology.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在她1939年的书籍《*密码分析*》中，海伦·福什·盖恩斯描述了一种语言学方法来破解维吉尼亚密码。^([8](b06.xhtml#c08-endnote-8))它需要运气和大量的试验与错误。理查德·海耶斯在1943年描述了一种类似但更先进的技术，基于常见的三字母组合。^([9](b06.xhtml#c08-endnote-9))这两种方法如今已经很少使用，因为随着计算机技术的出现，更强大的替代方法已经问世。
- en: Another method we won’t discuss in this book is Viterbi analysis, which is based
    on hidden Markov models. Interesting articles about this approach have been published
    in the scientific journal *Cryptologia*.^([10](b06.xhtml#c08-endnote-10))^, ^([11](b06.xhtml#c08-endnote-11))
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不讨论的另一种方法是维特比分析，它基于隐马尔可夫模型。关于这种方法的有趣文章已经发表在科学期刊《*Cryptologia*》上。^([10](b06.xhtml#c08-endnote-10))^,
    ^([11](b06.xhtml#c08-endnote-11))
- en: How to break a one-time pad
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何破解一次性密码
- en: As we mentioned, it is impossible to break a one-time pad if the key is a random
    sequence without any regularities and is only used once. However, more often than
    not over the course of history, these requirements have been breached. One of
    the most common mistakes occurred when the same key was used several times.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，如果密钥是完全随机且没有任何规律，并且只使用一次，那么一次性密钥是无法破解的。然而，在历史的长河中，更多时候这些要求被违反了。最常见的错误之一是重复使用相同的密钥。
- en: 'In the following, we explain how a one-time pad can be broken if the same key
    is employed for two messages. To demonstrate this, let’s first encrypt the plaintext
    `WASHINGTON` with the (random) key `KDFYDVKHAP`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将解释如果对两个消息使用相同的密钥，如何破解一次性密码。为了演示这一点，首先让我们用（随机的）密钥`KDFYDVKHAP`加密明文`WASHINGTON`：
- en: '`WASHINGTON`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`WASHINGTON`'
- en: '`KDFYDVKHAP`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`KDFYDVKHAP`'
- en: '`----------`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`----------`'
- en: '`GDXFLIQAOC`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`GDXFLIQAOC`'
- en: 'Next, we encrypt the plaintext `CALIFORNIA` with the same key:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们用相同的密钥加密明文`CALIFORNIA`：
- en: '`CALIFORNIA`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`CALIFORNIA`'
- en: '`KDFYDVKHAP`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`KDFYDVKHAP`'
- en: '`----------`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`----------`'
- en: '`MDQGIJBUIP`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`MDQGIJBUIP`'
- en: 'Now, we decrypt the first plaintext with the second one:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们用第二个密文解密第一个明文：
- en: '`WASHINGTON`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`WASHINGTON`'
- en: '`CALIFORNIA`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`CALIFORNIA`'
- en: '`----------`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`----------`'
- en: '`UAHZDZPGGN`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`UAHZDZPGGN`'
- en: 'If we decrypt the first ciphertext with the second one, we receive the same
    result:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用第二个密文解密第一个密文，我们会得到相同的结果：
- en: '`GDXFLIQAOC`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`GDXFLIQAOC`'
- en: '`MDQGIJBUIP`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`MDQGIJBUIP`'
- en: '`----------`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`----------`'
- en: '`UAHZDZPGGN`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`UAHZDZPGGN`'
- en: 'This means that if a codebreaker knows both ciphertexts (`GDXFLIQAOC` and `MDQGIJBUIP`)
    and that one of the plaintexts is `WASHINGTON`, they can easily derive the second
    plaintext, `CALIFORNIA`. This also works the other way around: if `CALIFORNIA`
    is known, `WASHINGTON` can be derived.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果密码破译者知道两个密文（`GDXFLIQAOC`和`MDQGIJBUIP`），并且其中一个明文是`WASHINGTON`，他们就能轻松推导出第二个明文`CALIFORNIA`。反过来也一样：如果知道`CALIFORNIA`，就可以推导出`WASHINGTON`。
- en: We can easily generalize this approach to longer messages. If a cryptanalyst
    knows two one-time pad ciphertexts encrypted with the same key and has a crib
    in one of the two cryptograms, they can easily derive a part of the other plaintext.
    If the latter part is, say, `E UNITED S`, this can be extended to `THE UNITED
    STATES`, which means that `TH` and `TATES` become new cribs. With this method,
    it may be possible to completely derive both plaintexts.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地将这种方法推广到更长的消息。如果一位密码分析师知道两个用相同密钥加密的一次性密码密文，并且其中一个密码本中有已知的部分，他们就能轻松推导出另一个明文的部分。如果后半部分是，例如，`E
    UNITED S`，这可以扩展为`THE UNITED STATES`，这意味着`TH`和`TATES`变成了新的已知部分。使用这种方法，可能会完全推导出两个明文。
- en: Success stories
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功案例
- en: The Diana Dors message
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 戴安娜·多尔斯的消息
- en: 'English actress Diana Dors (1931–1984) was once considered the British counterpart
    to Marilyn Monroe. In dozens of films, she played a seductive blonde and lived
    a private life worthy of a film diva. Before dying of cancer at age fifty-two,
    she gave her son Mark Dawson an encrypted message, telling him that it described
    the whereabouts of a substantial sum that she had hidden away: £2 million.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 英国女演员戴安娜·多尔斯（1931-1984）曾被认为是英国版的玛丽莲·梦露。在数十部电影中，她饰演了一个诱人的金发女郎，并过着一个堪比电影女神的私人生活。在五十二岁因癌症去世之前，她给她的儿子马克·道森留下了一段加密的信息，告诉他这段信息描述了她藏匿的巨额财富：200万英镑。
- en: 'The headline of the text was encrypted using a pigpen cipher:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 该文本的标题使用猪圈密码进行加密：
- en: '![](image_fi/502727c08/g08007.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08007.png)'
- en: 'After some research, Dawson deciphered this to `LOCATIONS AND NAMES`. It turned
    out that his mother had used the following substitution table:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些研究，Dawson解密出这段文字为`LOCATIONS AND NAMES`。结果发现，他的母亲使用了以下的替代表：
- en: '![](image_fi/502727c08/g08008.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/g08008.png)'
- en: 'The main part of the cryptogram was written in ordinary letters:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 密码的主要部分用普通字母写成：
- en: '`EAWVL XEIMO RZTIC SELKM KMRUQ`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`EAWVL XEIMO RZTIC SELKM KMRUQ`'
- en: '`QPYFC ZAOUA TNEYS QOHVQ YPLYS`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPYFC ZAOUA TNEYS QOHVQ YPLYS`'
- en: '`OEOEW TCEFY ZZEPI NYAUD RZUGM`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`OEOEW TCEFY ZZEPI NYAUD RZUGM`'
- en: '`SSONV JDAER SZNVS QSHRK XPVCC`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`SSONV JDAER SZNVS QSHRK XPVCC`'
- en: '`WUAEJ JTWGC WQRCC NRBKZ VIITF`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`WUAEJ JTWGC WQRCC NRBKZ VIITF`'
- en: '`RZLTS VOAIB NQZOK VANJJ TFAJO`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`RZLTS VOAIB NQZOK VANJJ TFAJO`'
- en: '`GYUEB XZHRY UFSDM ZEBRK GIECJ`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`GYUEB XZHRY UFSDM ZEBRK GIECJ`'
- en: '`QZHFY QBYVU FNEGD EDIXF YZHOM`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`QZHFY QBYVU FNEGD EDIXF YZHOM`'
- en: '`PMNLQ XFHFO UXAEB HZSNO EAUIL`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`PMNLQ XFHFO UXAEB HZSNO EAUIL`'
- en: '`JXIWD KTUDN MCCGC EURDG SRBCW`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`JXIWD KTUDN MCCGC EURDG SRBCW`'
- en: '`GMNKC RLHER HETVP GWOGC WANVJ`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`GMNKC RLHER HETVP GWOGC WANVJ`'
- en: '`NGYTZ RALTM TAYTL UUSKM QIRZH`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`NGYTZ RALTM TAYTL UUSKM QIRZH`'
- en: As Dawson couldn’t decipher this ciphertext, he consulted a team of British
    cryptologists, including Andrew Clark, who succeeded in breaking the cryptogram.
    However, the message’s meaning remained a mystery. A 2004 TV documentary later
    chronicled the team’s work.^([12](b06.xhtml#c08-endnote-12))
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 由于道森无法解密这段密文，他向一组英国密码学家请教，其中包括安德鲁·克拉克，后者成功破解了这段密码。然而，信息的意义仍然是一个谜。2004年一部电视纪录片后来记录了该团队的工作。^([12](b06.xhtml#c08-endnote-12))
- en: To begin with, Clark and his colleagues performed a few statistical analyses
    of the cryptogram. The results proved consistent with a Vigenère cipher, and they
    had no trouble breaking it (probably by first determining the keyword length using
    one of the methods described earlier in this chapter). The keyword turned out
    to be `DMARYFLUCK` (likely derived from Dors’s legal name, Diana Mary Fluck).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，克拉克和他的同事们对密码进行了几项统计分析。结果证明这与维吉尼亚密码一致，他们没有遇到太大困难地破解了它（可能是通过首先确定关键字长度，然后使用本章前面描述的方法）。结果，关键字是`DMARYFLUCK`（可能源自多尔斯的法定名字，戴安娜·玛丽·弗拉克）。
- en: 'Here is how the first line is decrypted:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何解密第一行的方法：
- en: '`Ciphertext: EAWVL XEIMO RZTIC SELKM KMRUQ . . .`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`密文: EAWVL XEIMO RZTIC SELKM KMRUQ . . .`'
- en: '`Key: DMARY FLUCK DMARY FLUCK DMARY . . .`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`密钥: DMARY FLUCK DMARY FLUCK DMARY . . .`'
- en: '`Plaintext:` `BOWEN STOKE ONTRE NTRIC HARDS . . .`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文:` `BOWEN STOKE ONTRE NTRIC HARDS . . .`'
- en: 'The text consisted of a list of surnames, each followed by a city in England
    or Wales:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 该文本由一系列姓氏组成，每个姓氏后面跟着一个英格兰或威尔士的城市：
- en: '`Bowen, Stoke-on-Trent`'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bowen, Stoke-on-Trent`'
- en: '`Richards, Leeds`'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Richards, Leeds`'
- en: '`Woodcock, Winchester`'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Woodcock, Winchester`'
- en: '`Wilson, York`'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Wilson, York`'
- en: '`Downey, Kingston Upon Hull`'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Downey, Kingston Upon Hull`'
- en: '`Grant, Nottingham`'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Grant, Nottingham`'
- en: '`Sebastian, Leicester`'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Sebastian, Leicester`'
- en: '`Leigh, Ipswich`'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Leigh, Ipswich`'
- en: '`Morris, Cardiff`'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Morris, Cardiff`'
- en: '`Mason, Slough`'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Mason, Slough`'
- en: '`Edmundson, Portsmouth`'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Edmundson, Portsmouth`'
- en: '`Padwell, London`'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Padwell, London`'
- en: '`Pyewacket, Brighton`'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Pyewacket, Brighton`'
- en: '`McManus, Sunderland`'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`McManus, Sunderland`'
- en: '`Coyle, Bournemouth`'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Coyle, Bournemouth`'
- en: '`Humphries, Birmingham`'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Humphries, Birmingham`'
- en: '`Dante, Manchester`'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Dante, Manchester`'
- en: '`Bluestone, Liverpool`'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bluestone, Liverpool`'
- en: '`Cooper, Bristol`'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Cooper, Bristol`'
- en: The meaning of this list is not known, and we have no idea whether these names
    refer to real people. Diana Dors’s son never found the millions his mother had
    allegedly left behind, and it is doubtful that this estate really existed. Although
    Dors had done well during her early career, she declared bankruptcy in 1968 and
    from then on supported herself with minor engagements.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表的含义未知，我们不知道这些名字是否指代真实的人。戴安娜·多尔斯的儿子从未找到过母亲 allegedly 留下的数百万英镑，而这个遗产是否真的存在也值得怀疑。尽管多尔斯在早期的职业生涯中做得不错，但她在1968年宣布破产，从那以后，她只能通过一些小的演出谋生。
- en: Kryptos 1 and 2
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kryptos 1 和 2
- en: 'The two panels on the right side of the *Kryptos* sculpture located at CIA
    headquarters show a Vigenère-type table with an alphabet written in the following
    order. The letters of the word `KRYPTOS` are shifted to the beginning:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 位于中央情报局总部的*Kryptos*雕塑右侧的两个面板显示了一个Vigenère类型的表格，字母顺序如下。单词`KRYPTOS`的字母被移到了开头：
- en: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
- en: 'The top-left panel contains the following ciphertext:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 左上方面板包含以下密文：
- en: '`EMUFPHZLRFAXYUSDJKZLDKRNSHGNFIVJ`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`EMUFPHZLRFAXYUSDJKZLDKRNSHGNFIVJ`'
- en: '`YQTQUXQBQVYUVLLTREVJYQTMKYRDMFD`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`YQTQUXQBQVYUVLLTREVJYQTMKYRDMFD`'
- en: '`VFPJUDEEHZWETZYVGWHKKQETGFQJNCE`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`VFPJUDEEHZWETZYVGWHKKQETGFQJNCE`'
- en: '`GGWHKK?DQMCPFQZDQMMIAGPFXHQRLG`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`GGWHKK?DQMCPFQZDQMMIAGPFXHQRLG`'
- en: '`TIMVMZJANQLVKQEDAGDVFRPJUNGEUNA`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIMVMZJANQLVKQEDAGDVFRPJUNGEUNA`'
- en: '`QZGZLECGYUXUEENJTBJLBQCRTBJDFHRR`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`QZGZLECGYUXUEENJTBJLBQCRTBJDFHRR`'
- en: '`YIZETKZEMVDUFKSJHKFWHKUWQLSZFTI`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`YIZETKZEMVDUFKSJHKFWHKUWQLSZFTI`'
- en: '`HHDDDUVH?DWKBFUFPWNTDFIYCUQZERE`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`HHDDDUVH?DWKBFUFPWNTDFIYCUQZERE`'
- en: '`EVLDKFEZMOQQJLTTUGSYQPFEUNLAVIDX`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`EVLDKFEZMOQQJLTTUGSYQPFEUNLAVIDX`'
- en: '`FLGGTEZ?FKZBSFDQVGOGIPUFXHHDRKF`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLGGTEZ?FKZBSFDQVGOGIPUFXHHDRKF`'
- en: '`FHQNTGPUAECNUVPDJMQCLQUMUNEDFQ`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`FHQNTGPUAECNUVPDJMQCLQUMUNEDFQ`'
- en: '`ELZZVRRGKFFVOEEXBDMVPNFQXEZLGRE`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`ELZZVRRGKFFVOEEXBDMVPNFQXEZLGRE`'
- en: '`DNQFMPNZGLFLPMRJQYALMGNUVPDXVKP`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`DNQFMPNZGLFLPMRJQYALMGNUVPDXVKP`'
- en: '`DQUMEBEDMHDAFMJGZNUPLGEWJLLAETG`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`DQUMEBEDMHDAFMJGZNUPLGEWJLLAETG`'
- en: As you can read about in Appendix A, this cryptogram was broken independently
    at least three times by codebreakers who were not aware of each other’s achievements.
    In this section, we provide the approach used by CIA employee David Stein, who
    was the second one to solve it. His work is documented in a paper that is available
    online.^([13](b06.xhtml#c08-endnote-13))
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在附录A中所述，这个密码本至少被三位互不知情的密码破译者独立破解。在本节中，我们提供了中央情报局员工David Stein使用的方法，他是第二个破解此密码的人。他的工作记录在一篇可以在线查阅的论文中。^([13](b06.xhtml#c08-endnote-13))
- en: 'Stein started by performing a frequency analysis. He realized that the encrypted
    message had the appearance of a Vigenère cryptogram. Using Friedman’s method,
    based on the index of coincidence, Stein found out that the most likely keyword
    length was eight. This was confirmed by the repetition of the trigraph `DQM` after
    eight letters in the fourth line (Kasiski’s method):'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦因首先进行了频率分析。他意识到加密信息看起来像是一个Vigenère密码。使用弗里德曼方法（基于一致性指数），斯坦因发现最可能的关键字长度是八个字母。这一点通过第四行（Kasiski方法）中`DQM`三字母组合在八个字母之后的重复得到了验证：
- en: '`D Q M` `C P F Q Z` `D Q M`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`D Q M` `C P F Q Z` `D Q M`'
- en: '`1 2 3 4 5 6 7 8`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 2 3 4 5 6 7 8`'
- en: Stein’s first guess was that the `DQM` trigraph stood for the most common trigraph
    in the English language, `THE`. In another attack on the ciphertext, he did an
    additional frequency analysis. Knowing that a Vigenère cipher with an eight-letter
    keyword is equivalent to eight Caesar encryptions, Stein counted the frequencies
    of every eighth letter. However, neither of these approaches led to a solution.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦因的第一个猜测是，`DQM`三字母组合代表英语中最常见的三字母组合`THE`。在对密文进行的另一次攻击中，他进行了额外的频率分析。知道一个具有八个字母关键字的Vigenère密码等同于八个凯撒加密，斯坦因计算了每第八个字母的频率。然而，这两种方法都没有得到解决方案。
- en: He then guessed that a Vigenère cipher with a permutated alphabet—one starting
    with `KRYPTOS`, as on the other side of the sculpture—had been used. Based on
    this assumption, he tried to solve the eight Caesar ciphers with frequency analysis
    once again. This time, he was on the right track. The Vigenère keyword he found
    was `ABSCISSA`, a word referring to the *x*-coordinate of a point on a graph.
    The `DQM` ciphertext came out to `THE(Y)` and `THE`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 他接着猜测，使用了一个包含排列字母表的维吉尼亚加密法——一个以`KRYPTOS`开头的字母表，正如雕塑另一面所示。基于这一假设，他再次尝试通过频率分析破解八个凯撒密码。这一次，他走在了正确的道路上。他找到的维吉尼亚关键字是`ABSCISSA`，一个指代图表中点的*横坐标*的词。`DQM`的密文解密为`THE(Y)`和`THE`。
- en: 'However, only lines 3 through 13 of the encrypted message produced meaningful
    plaintext, while the first two decrypted to gibberish. Stein guessed that these
    two lines were encrypted with the same method but a different keyword. This conjecture
    proved correct, and Stein determined that the keyword for those lines was `PALIMPSEST`.
    (A *palimpsest* is a manuscript page whose text has been scraped or washed off
    so that it can be reused for another text, in such a way that bits of the older
    message can be seen through the new one.) Here’s the Vigenère table used to encrypt
    lines 1 and 2 (note the keyword `PALIMPSEST` in the first column):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，只有第3行到第13行的加密信息解密出了有意义的明文，而前两行解密出来的则是乱码。Stein猜测这两行使用了相同的加密方法，但关键字不同。这个猜测被证实是正确的，Stein确定这两行的关键字是`PALIMPSEST`。（*palimpsest*是一种手稿页面，其文字被刮掉或冲洗，以便可以重新使用并为另一个文本提供空间，这样可以通过新的文本看到旧文本的部分内容。）以下是用于加密第1行和第2行的维吉尼亚表（请注意第一列的关键字是`PALIMPSEST`）：
- en: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
- en: '`--------------------------`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------`'
- en: '`PTOSABCDEFGHIJLMNQUVWXZKRY`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`PTOSABCDEFGHIJLMNQUVWXZKRY`'
- en: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
- en: '`LMNQUVWXZKRYPTOSABCDEFGHIJ`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`LMNQUVWXZKRYPTOSABCDEFGHIJ`'
- en: '`IJLMNQUVWXZKRYPTOSABCDEFGH`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`IJLMNQUVWXZKRYPTOSABCDEFGH`'
- en: '`MNQUVWXZKRYPTOSABCDEFGHIJL`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`MNQUVWXZKRYPTOSABCDEFGHIJL`'
- en: '`PTOSABCDEFGHIJLMNQUVWXZKRY`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`PTOSABCDEFGHIJLMNQUVWXZKRY`'
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
- en: '`EFGHIJLMNQUVWXZKRYPTOSABCD`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`EFGHIJLMNQUVWXZKRYPTOSABCD`'
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
- en: '`TOSABCDEFGHIJLMNQUVWXZKRYP`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOSABCDEFGHIJLMNQUVWXZKRYP`'
- en: 'The plaintext of the first two lines reads as follows. It includes a misspelled
    word:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行的明文如下。它包含一个拼写错误：
- en: '`BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`在微妙的阴影和光明的缺失之间， lies the nuance of illusion`'
- en: 'For lines 3 through 13, Sanborn used the following Vigenère table based on
    the keyword `ABSCISSA`:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第3行到第13行，Sanborn使用了以下基于关键字`ABSCISSA`的维吉尼亚表：
- en: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
- en: '`--------------------------`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------------`'
- en: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
- en: '`BCDEFGHIJLMNQUVWXZKRYPTOSA`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`BCDEFGHIJLMNQUVWXZKRYPTOSA`'
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
- en: '`CDEFGHIJLMNQUVWXZKRYPTOSAB`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDEFGHIJLMNQUVWXZKRYPTOSAB`'
- en: '`IJLMNQUVWXZKRYPTOSABCDEFGH`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`IJLMNQUVWXZKRYPTOSABCDEFGH`'
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
- en: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
- en: 'Here is the corresponding plaintext result (including another spelling error):'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的明文结果（包括另一个拼写错误）：
- en: '`IT WAS TOTALLY INVISIBLE HOWS THAT POSSIBLE? THEY USED THE EARTHS MAGNETIC
    FIELD X THE INFORMATION WAS GATHERED AND TRANSMITTED UNDERGRUUND TO AN UNKNOWN
    LOCATION X DOES LANGLEY KNOW ABOUT THIS? THEY SHOULD ITS BURIED OUT THERE SOMEWHERE
    X WHO KNOWS THE EXACT LOCATION? ONLY WW THIS WAS HIS LAST MESSAGE X THIRTY EIGHT
    DEGREES FIFTY SEVEN MINUTES SIX POINT FIVE SECONDS NORTH SEVENTY SEVEN DEGREES
    EIGHT MINUTES FORTY FOUR SECONDS WEST ID BY ROWS`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`完全看不见，这怎么可能？他们使用了地球的磁场，信息被收集并传输到地下的一个未知地点，*兰利*知道这件事吗？他们应该知道，它埋在某个地方。谁知道确切的位置？只有WW知道，这是他最后的消息，北纬三十八度五十七分六点五秒，西经七十七度八分四十四秒，ID按行排列`'
- en: In 2006, several years after the solution was made publicly available, Sanborn,
    the creator of *Kryptos*, indicated that the last three words of the plaintext,
    `ID BY ROWS`, were wrong because of a missing `S` in the last line of the ciphertext.
    The intended ending of the plaintext was `X LAYER TWO`. None of the previous solvers
    had noticed this error, as by mere coincidence, the expression `ID BY ROWS` seemed
    to make sense.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，在解密方案公开几年的时候，*Kryptos*的创造者Sanborn指出，明文的最后三个词`ID BY ROWS`是错误的，因为密文的最后一行缺少了一个`S`。明文的原定结尾应为`X
    LAYER TWO`。之前的解密者没有注意到这个错误，因为巧合的是，表达式`ID BY ROWS`似乎是有意义的。
- en: The Cyrillic Projector
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 塞里尔投影仪
- en: 'Sanborn is the creator not only of *Kryptos* but also of several other encrypted
    works. For example, in the 1990s, he created another sculpture bearing an encrypted
    message: the *Cyrillic Projector*. It was first displayed in his gallery shows,
    and then in 1997, it found its way to its current location on the campus of the
    University of North Carolina at Charlotte. The *Cyrillic Projector* consists of
    a large bronze cylinder over two meters high, with hundreds of letters carved
    into it. A bright light in the center of the sculpture shines through the letters,
    projecting their images around the courtyard.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Sanborn不仅是*Kryptos*的创造者，还创作了其他几部加密作品。例如，在1990年代，他创作了另一座雕塑，刻有加密信息：*西里尔投影仪*。它首先在他的画廊展出，然后在1997年搬到了目前的位置——北卡罗来纳大学夏洛特分校的校园。*西里尔投影仪*由一个超过两米高的大铜柱组成，柱身上刻着数百个字母。雕塑中心有一道明亮的光，透过字母投射出它们的影像，覆盖着庭院。
- en: Like in *Kryptos*, the letters on the *Cyrillic Projector* are carved into four
    panels that form the cylinder. The two panels located out of sight in [Figure
    8-6](#figure8-6) display a Vigenère-type tableau in the Russian (Cyrillic) alphabet,
    transposed such that the letters of the word ТЕНЬ (Russian for *shadow*) occur
    at the beginning. It is important to note that the untransposed order of the letters
    in the Cyrillic alphabet varies depending on, among other things, the region where
    it is used. The letter order used for the *Cyrillic Projector* is not the most
    common one.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 和*Kryptos*一样，*西里尔投影仪*上的字母刻在四块面板上，这些面板组成了柱体。位于[图8-6](#figure8-6)中视线之外的两块面板展示了一个维金纳表格（Vigenère-type
    tableau），使用的是俄语（西里尔字母）字母表，并进行了转置，使得单词ТЕНЬ（俄语中的“影子”）位于开头。需要注意的是，西里尔字母的未转置顺序会因地区而有所不同，而*西里尔投影仪*上使用的字母顺序并不是最常见的那种。
- en: '![](image_fi/502727c08/F08006.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c08/F08006.png)'
- en: '[Figure 8-6](#figureanchor8-6): The *Cyrillic Projector*, located on the campus
    of the University of North Carolina at Charlotte, is a sculpture bearing an encrypted
    inscription. The upper-right photograph shows Elonka serving as a screen for the
    projected word `MEDUSA` (the only portion not written in Cyrillic letters).'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-6](#figureanchor8-6)：*西里尔投影仪*位于夏洛特北卡罗来纳大学校园，是一座雕塑，雕刻着加密的铭文。右上方的照片显示了Elonka作为投影词`MEDUSA`的屏幕（唯一一部分不是用西里尔字母书写的）。'
- en: The text on the two other panels (shown in the picture) is an encrypted message.
    It is written in Cyrillic script, too, except for the word `MEDUSA` in the fourteenth
    line. In Cyrillic, one would expect this to be spelled `MEДУЗA`; the use of Latin
    letters instead gives a hint about one of the keys.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这两块面板上的文字（如图所示）是加密信息。它同样使用了西里尔字母，除了第十四行中的单词`MEDUSA`。在西里尔字母中，通常应拼写为`MEДУЗA`；而使用拉丁字母则暗示了其中一个密钥。
- en: 'The ciphertext on the *Cyrillic Projector* is reproduced here:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是*西里尔投影仪*上的密文：
- en: '`ЛTФEЮTФЯЙЯMПXЦФAЧHЩПBБГЖЧCКЬГГЛЗДЭЙП`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЛTФEЮTФЯЙЯMПXЦФAЧHЩПBБГЖЧCКЬГГЛЗДЭЙП`'
- en: '`ЪКXCЙPЭAФHФПЩBПEЦPДФAЩШTКCXCЧЫУXXEЮ`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЪКXCЙPЭAФHФПЩBПEЦPДФAЩШTКCXCЧЫУXXEЮ`'
- en: '`КУMЛEЧЛЫTOБHEЯЖЖИЬHЭЗЩЦPЛЫБПHФOИИAБЬ`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`КУMЛEЧЛЫTOБHEЯЖЖИЬHЭЗЩЦPЛЫБПHФOИИAБЬ`'
- en: '`ПИКЛEУPЫCMЪШЛЛБXMXЛЖШPAЩPЙЛПEOOЙЙBЦ`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`ПИКЛEУPЫCMЪШЛЛБXMXЛЖШPAЩPЙЛПEOOЙЙBЦ`'
- en: '`ИЪЛБXЦPЫЧCКAPCPBЯЭФКЮФPЮMOЯЗOЛOДЭШPЗУ`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`ИЪЛБXЦPЫЧCКAPCPBЯЭФКЮФPЮMOЯЗOЛOДЭШPЗУ`'
- en: '`ДXMAЭXOЙГЙЮФMЩXXCBИИЗXAГЙЯЬПCИБPPШOM`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`ДXMAЭXOЙГЙЮФMЩXXCBИИЗXAГЙЯЬПCИБPPШOM`'
- en: '`КTCУЯГXУЬЛEУPЫCMЪШCППЯЯЦШУШAЦЧПИMШH`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`КTCУЯГXУЬЛEУPЫCMЪШCППЯЯЦШУШAЦЧПИMШH`'
- en: '`PБЧPЯЫMИУPAДФAИЮЙЫЦЯЛOHУФЖOФШXФЖCБ`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`PБЧPЯЫMИУPAДФAИЮЙЫЦЯЛOHУФЖOФШXФЖCБ`'
- en: '`BЪЧДЦCФБMДЭШPЗУДXУPБШTOКЩЪMXПOTOXOЩЧ`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`BЪЧДЦCФБMДЭШPЗУДXУPБШTOКЩЪMXПOTOXOЩЧ`'
- en: '`ЖAЦДЩPAЮГOЙBPБГЮБЗГEЖPЙЛПEOOЙЙBЦHЗПГФ`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЖAЦДЩPAЮГOЙBPБГЮБЗГEЖPЙЛПEOOЙЙBЦHЗПГФ`'
- en: '`ЦЗAИBЯЮФЛЪЦXCЧЫШЬБEOMЩШЖTЭДЙOTTФXПP`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЦЗAИBЯЮФЛЪЦXCЧЫШЬБEOMЩШЖTЭДЙOTTФXПP`'
- en: '`ПЛOДЭЩPЗУДXКПГФOЦБЩЪMMЭКЧEPЛMКЪЦЦЗЩЛ`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`ПЛOДЭЩPЗУДXКПГФOЦБЩЪMMЭКЧEPЛMКЪЦЦЗЩЛ`'
- en: '`ФЦЧЪЩКBHФAECДПTДФПPЯЙКЮHXBЦБЮEИCЧЯЧЦ`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`ФЦЧЪЩКBHФAECДПTДФПPЯЙКЮHXBЦБЮEИCЧЯЧЦ`'
- en: '`XMЖЛCПPЧУЛЭШЖЫИИMEDUSAИHXEЗЛЧЗPЗЙКЛ`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMЖЛCПPЧУЛЭШЖЫИИMEDUSAИHXEЗЛЧЗPЗЙКЛ`'
- en: '`ППEBЛЧCXЦЫOЙBPБУДXCBЪГЖЧCКAPCPBЯЭФPЩФ`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`ППEBЛЧCXЦЫOЙBPБУДXCBЪГЖЧCКAPCPBЯЭФPЩФ`'
- en: '`ЯЦЩПЪЗЫTФOЙЙУCДTЮTBCБPXCПБЩЛШКУBЙЙГЗ`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЯЦЩПЪЗЫTФOЙЙУCДTЮTBCБPXCПБЩЛШКУBЙЙГЗ`'
- en: '`ЙAЧЛЬPЙЭMДЧЧPЬCTHКЙEКДOБЖБЛШИЫЙБЙИДPP`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЙAЧЛЬPЙЭMДЧЧPЬCTHКЙEКДOБЖБЛШИЫЙБЙИДPP`'
- en: '`ЦXOЩЖBЪКБЧКЖHФПШЦЗУЙДЯГAЧЙКУЗФEЦИЯИ`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЦXOЩЖBЪКБЧКЖHФПШЦЗУЙДЯГAЧЙКУЗФEЦИЯИ`'
- en: '`ЙФЭБЛCДTГЗШPЖEДФЩЖЙЯHБOOЬШФПЮКЗЦУДИ`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЙФЭБЛCДTГЗШPЖEДФЩЖЙЯHБOOЬШФПЮКЗЦУДИ`'
- en: '`HXEOXПOЙAXДЭCБЩЙЖЭШBЪOДЩBУCЛMЩГЖШУД`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`HXEOXПOЙAXДЭCБЩЙЖЭШBЪOДЩBУCЛMЩГЖШУД`'
- en: '`ИГЛEШКПУУEЧДЛCУЦЮTЮHXЪПБУПPЬГИУCБЙЙПЮ`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`ИГЛEШКПУУEЧДЛCУЦЮTЮHXЪПБУПPЬГИУCБЙЙПЮ`'
- en: '`ГAФФEШБФБMЙПИMЪЮКЩXXTHФЩШПEЯБЧККЩ`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`ГAФФEШБФБMЙПИMЪЮКЩXXTHФЩШПEЯБЧККЩ`'
- en: '`BЙЩЗЛЮCBЮЙКУКФCЫTЫCBЛCЛЬЗУЦИКЩДPCУPЗ`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`BЙЩЗЛЮCBЮЙКУКФCЫTЫCBЛCЛЬЗУЦИКЩДPCУPЗ`'
- en: '`XPФЙPЭMPXФЛКФAЙЙКУAЛЩГMЙЖШЪЙЬЩКФHФ`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`XPФЙPЭMPXФЛКФAЙЙКУAЛЩГMЙЖШЪЙЬЩКФHФ`'
- en: '`ИДЙPФГКУКAЯЙOУMATЭTЦКBEЖOЙИДЦДКГЩФEЖ`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`ИДЙPФГКУКAЯЙOУMATЭTЦКBEЖOЙИДЦДКГЩФEЖ`'
- en: '`БЮXЛECCЭCHЩЩXПOЬДЖЙЙЗГEИTЙMAШЙЙУMФC`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`БЮXЛECCЭCHЩЩXПOЬДЖЙЙЗГEИTЙMAШЙЙУMФC`'
- en: '`ЫTЫCBCИДCДPБФHУOPУШTБЗПЪДЗЯЫAAЧКУMAЯX`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`ЫTЫCBCИДCДPБФHУOPУШTБЗПЪДЗЯЫAAЧКУMAЯX`'
- en: '`TMЦPИЦЗЩЛЛEУУПФЖTЭДУXPШЙOPБЭЦЙOПЙЛЪЙ`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`TMЦPИЦЗЩЛЛEУУПФЖTЭДУXPШЙOPБЭЦЙOПЙЛЪЙ`'
- en: '`TЧШЙAФHПШФЭMБЩЪЖTПДЛPШБШБЧPЖЫMHЧЗЫ`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`TЧШЙAФHПШФЭMБЩЪЖTПДЛPШБШБЧPЖЫMHЧЗЫ`'
- en: '`TЙЖЪCMЪЧДXКЛHЦПЗXPФЙPЭMPXФMЫБBЪЧБШEФ`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`TЙЖЪCMЪЧДXКЛHЦПЗXPФЙPЭMPXФMЫБBЪЧБШEФ`'
- en: '`БЖTЩBBЪУБЧКЖAЦПЫГШAMИПPЙЪГOЦКЙГPЛЮБУ`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`БЖTЩBBЪУБЧКЖAЦПЫГШAMИПPЙЪГOЦКЙГPЛЮБУ`'
- en: '`CПБЮPPXФTЫXЖTГИЙКAФMTHКЙФФHЦЙЫCЧБШE`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`CПБЮPPXФTЫXЖTГИЙКAФMTHКЙФФHЦЙЫCЧБШE`'
- en: After Sanborn made the sculpture accessible to the public, several years passed
    before anyone seriously tried to break the encryption. In 2003, a group of seventy
    *Kryptos* enthusiasts led by Elonka finally took up the cause. Group member Randall
    Bollig captured multiple photos of the *Cyrillic Projector*. Through weeks of
    painstaking work, three other group members, Elonka, Bill Houck, and Brian Hill,
    each created an independent transcript. They later compared their transcripts
    to generate a fully accurate one. (Imagine the difficulty of transcribing Cyrillic
    letters read from backward images of a cylindrical sculpture!) Elonka then published
    the corrected transcript on her website.^([14](b06.xhtml#c08-endnote-14))
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sanborn 使雕塑对公众开放后，过去了几年，才有人认真尝试破解这段加密。2003年，一群由 Elonka 领导的七十位*Kryptos* 爱好者终于开始着手此事。小组成员
    Randall Bollig 拍摄了 *Cyrillic Projector* 的多张照片。经过数周的艰苦工作，另外三名小组成员，Elonka、Bill Houck
    和 Brian Hill，各自独立地制作了抄本。然后，他们对比了各自的抄本，生成了一个完全准确的版本。（想象一下，从倒影的圆柱形雕塑中读取西里尔字母的难度！）随后，Elonka
    在她的网站上发布了修正后的抄本。^([14](b06.xhtml#c08-endnote-14))
- en: 'Soon after the transcript was published, two hobbyist codebreakers, Frank Corr
    and Mike Bales, independently broke the encryption. Neither announced a full English
    solution, as they didn’t speak Russian, the language of the plaintext, and couldn’t
    translate it. When Elonka learned of their potential success, she located a native
    speaker, Anatoly Kolker. He was a colleague of Elonka’s father, Stanley Dunin,
    at the World Bank. Anatoly confirmed that the solution was written in Russian
    and provided the final English translation. The plaintext proved to be composed
    of two texts from the Cold War. It starts as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在抄本发布后不久，两位业余破译者，Frank Corr 和 Mike Bales，独立地破解了加密。他们没有发布完整的英文解答，因为他们不懂俄语，而原文就是用俄语写的，无法翻译。当
    Elonka 得知他们可能的成功后，她联系了一位俄语母语者，Anatoly Kolker。他是 Elonka 父亲 Stanley Dunin 在世界银行的同事。Anatoly
    确认了解答是用俄语写的，并提供了最终的英文翻译。该明文证明由两篇冷战时期的文本组成，内容如下：
- en: '`B Ы C O Ч A Й Ъ И M И C К У C C T B O M B T A Й H O Й P A З B E Д К E C П
    И T A E . . .`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`B Ы C O Ч A Й Ъ И M И C К У C C T B O M B T A Й H O Й P A З B E Д К E C П
    И T A E . . .`'
- en: The cipher used turned out to be a Vigenère variant with the keyword `MEДУЗA`
    (`MEDUSA`) and the alphabet reordered in the same way as on the tableau, with
    the letters `T`, `E```,`H`, and `Ь` transposed to the beginning.^([15](b06.xhtml#c08-endnote-15))
    To create the Vigenère tableau necessary for encrypting the plaintext, we first
    need the following table:``
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证明使用的加密算法是 Vigenère 加密的一个变种，关键词是 `MEДУЗA`（`MEDUSA`），字母表的排列与表格中的方式相同，字母 `T`、`E`、`，`、`H`
    和 `Ь` 被移到了最前面。^([15](b06.xhtml#c08-endnote-15)) 为了创建用于加密明文的 Vigenère 表格，我们首先需要以下的表格：``
- en: '`` `АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ`    `----------------------------------`    `А
    ТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯ`    `Б ЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТ`    `В
    НЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕ`    `Г ЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕН`    `Д
    АБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬ`    `Е БВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬА`    `Ж
    ВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБ`    `З ГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВ`    `И
    ДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГ`    `Й ЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГД`    `К
    ЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖ`    `Л ИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗ`    `М
    ЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИ`    `Н КЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙ`    `О
    ЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙК`    `П МОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛ`    `Р
    ОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМ`    `С ПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМО`    `Т
    РСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОП`    `У СУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПР`    `Ф
    УФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРС`    `Х ФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУ`    `Ц
    ХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФ`    `Ч ШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХ`    `Ш
    ЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШ`    `Щ ЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦ`    `Ъ
    ЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧ`    `Ы ЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩ`    `Ь
    ЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪ`    `Э ЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫ`    `Ю
    ЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭ`    `Я ЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮ`    As
    can be seen, the Cyrillic alphabet (`А`,`Б`,`В`,`Г` . . .) is used to index the
    rows of the table. To encrypt this message, only the rows `M`,`E`,`Д`,`У`,`З`,
    and `A` are relevant. We arrange them such that they form the word `MEДУЗA`:    `АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ`    `----------------------------------`    `М
    ЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИ`    `Е БВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬА`    `Д
    АБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬ`    `У СУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПР`    `З
    ГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВ`    `А ТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯ`    The
    following lines show how the plaintext is mapped to the ciphertext using the reduced
    table:    `Plaintext:` `BЫCOЧAЙЪИMИ . . .`    `Ciphertext: ЛTФEЮTФЯЙЯM . . .`    We
    will leave the full solution as an exercise for those readers who wish to try,
    Cold War–style, to decipher a message in the Cyrillic alphabet!    ### Thouless’s
    second cryptogram from the crypt    In 1948, British psychologist and parapsychologist
    Robert Thouless (1894–1984) started an unusual experiment.^([16](b06.xhtml#c08-endnote-16))
    He took a short text, encrypted it, and published the ciphertext, keeping the
    plaintext and key secret. His plan was to channel the key from the beyond after
    his death. If somebody received the correct key via this paranormal method, they
    would be able to decipher the cryptogram. This experiment, if successful, would
    prove that there is life after death and that the dead can communicate with the
    living—which would certainly be one of the greatest discoveries in the history
    of science.    As far as we know, Thouless’s experiment did not prove successful—nobody
    ever came up with a correct solution received from the beyond. This is also true
    for a similar message created by Thouless’s fellow parapsychologist T.E. Wood,
    whose cryptogram is covered later in this chapter.    To be on the safe side,
    Thouless even published a second ciphertext in 1948, encrypted in a different
    way. However, his plan was foiled, as just a few weeks later, an unknown codebreaker
    solved his first ciphertext. In response, Thouless created a third cryptogram.
    This means that altogether, he left behind three messages in 1948\. The first
    and third are encrypted with variations of a Playfair cipher and are covered in
    [Chapter 12](c12.xhtml).    The encryption method Thouless used for the second
    message is complicated but has some elements that are similar to the Vigenère
    cipher. It used a phrase or text passage as a key. Here’s an example:    `TO BE
    OR NOT TO BE THAT IS THE QUESTION`    From this phrase, he eliminated words that
    had already appeared in the sequence (in this case, `TO` and `BE`), thus shortening
    the text:    `TO BE OR NOT THAT IS THE QUESTION`    Next, he converted each letter
    to a number (such that `A` = `1`, `B` = `2`, `C` = `3` . . .):    `20.15 2.5 15.18
    14.15.20 20.8.1.20 9.19 20.8.5 17.21.5.19.20.9.15.14`    Lastly, he added the
    numbers in each word. For example, the word `NOT` yielded 14 + 15 + 20 = 49\.
    If the result was larger than 26, he repeatedly subtracted 26 until he could derive
    a value between 1 and 26\. In our example, we thus get the following number sequence
    to be used as the key:    `9 7 7 23 23 2 7 16`    To encrypt a message, he added
    each number to the respective letter of the plaintext. If the result was larger
    than 26, he reduced it by 26 once again. For the plaintext `NEBRASKA`, we get
    the ciphertext `WLIOXURQ`:    `Plaintext:` `N E B R A S K A`    `Key: 9 7 7 23
    23 2 7 16`    `Ciphertext: W L I O X U R Q`    Using this method, Thouless produced
    the following ciphertext for his second message:    `INXPH CJKGM JIRPR FBCVY WYWES
    NOECN SCVHE GYRJQ`    `TEBJM TGXAT TWPNH CNYBC FNXPF LFXRV QWQL`    Thouless described
    the sentence he had used for the key as an “identifiable passage in a printed
    work.” Because the cryptogram consists of seventy-four letters, this passage had
    at least seventy-four words (though it could have had more, as Thouless had removed
    any duplicate words).    Thouless died in 1984, leaving his second and third cryptograms
    still unsolved. The third was broken (through non-psychic means) a decade later
    (see [Chapter 12](c12.xhtml)), while his second cryptogram remained unsolved for
    decades. Then, in August 2019, Klaus received a notice from Richard Bean, a computer
    expert and codebreaker from Brisbane, Australia,^([17](b06.xhtml#c08-endnote-17))
    who claimed to have broken this challenge. Klaus and his readers checked Richard’s
    solution, and it proved correct.    Richard believed that the only way to solve
    the second Thouless challenge was to find the text that had been used as the key.
    Hoping that Thouless had taken this text from a publicly available book, Richard
    decided to start a search at Project Gutenberg, which is the largest digital book
    collection available on the internet. Just about every book Thouless might have
    known about in 1948 is available today in the Gutenberg collection.    Richard
    downloaded 37,000 (!) books from Project Gutenberg. Then, using a computer program,
    he extracted all possible phrases consisting of seventy-four words, not counting
    repetitions, which resulted in a collection of hundreds of millions of key candidates.
    Next, he let his program decrypt Thouless’s ciphertext with every one of the candidate
    phrases and had it check whether the result looked like English. For this test,
    he used hexagraph frequencies (see [Chapter 16](c16.xhtml)).    After several
    days of computation time, Richard’s computer program deemed that the following
    plaintext had the closest resemblance to English text:    `CEVHHZGMKLUCCESSFULEXPERIMENTSOFTNEKKIWTDXDAU`    `GIVESTRVMGEVIDENCEFOROXRVIVAL`    This
    letter sequence didn’t look completely correct, but it was clear that there were
    fragments of recognizable English text within it. When Richard spotted the fragments
    `UCCESSFULEXPERIMENTSOF` and `EVIDENCEFOR`, he realized that he was close to the
    solution. After a few adjustments, the following plaintext appeared:    `A NUMBER
    OF SUCCESSFUL EXPERIMENTS OF THIS KIND WOULD GIVE STRONG EVIDENCE FOR SURVIVAL`    After
    seventy-one years, Thouless’s second challenge was broken! Though, of course,
    not in the way he had intended.    As it turned out, the passage Thouless had
    used as his key came from Project Gutenberg book 41215, *Selected Poems of Francis
    Thompson* (1908). The passage in question consisted of the first seventy-four
    words (not counting doubles) of a poem titled “The Hound of Heaven.” This excerpt
    from the poem is reproduced here, with duplicates crossed out:    I FLED HIM,
    DOWN THE NIGHTS AND DOWN THE DAYS;    I FLED HIM, DOWN THE ARCHES OF THE YEARS;    I
    FLED HIM, DOWN THE LABYRINTHINE WAYS    OF MY OWN MIND; AND IN THE MIST OF TEARS    I
    HID FROM HIM, AND UNDER RUNNING LAUGHTER    UP VISTAED HOPES I SPED;    AND SHOT,
    PRECIPITATED,    ADOWN TITANIC GLOOMS OF CHASMÈD FEARS,    FROM THOSE STRONG FEET
    THAT FOLLOWED, FOLLOWED AFTER.    BUT WITH UNHURRYING CHASE    AND UNPERTURBÈD
    PACE    DELIBERATE SPEED, MAJESTIC INSTANCY,    THEY BEAT—AND A VOICE BEAT    MORE
    INSTANT THAN THE FEET—    ‘ALL THINGS BETRAY THEE, WHO BETRAYEST ME.’    I PLEADED,
    OUTLAW-WISE,    BY MANY A HEARTED CASEMENT, CURTAINED RED,    TRELLISED . . .    Richard
    had even known this poem. Its creator, Francis Thompson (1859–1907), was a well-known
    English poet of the Victorian era. “The Hound of Heaven” was his most famous work.    In
    1995, Jim Gillogly and Larry Harnisch, who solved Thouless’s third message (see
    [Chapter 12](c12.xhtml)), had started a very similar attack on Thouless’s second
    challenge.^([18](b06.xhtml#c08-endnote-18)) They tried several hundred books from
    Project Gutenberg, to no avail. As it turned out, their attempt on the second
    message had simply come too early. The book that contained the passage they were
    looking for, which would have helped them solve the second message, entered the
    Gutenberg collection just seventeen years later, in 2012.    ### The Smithy Code    In
    early 2006, authors Michael Baigent and Richard Leigh filed suit against Random
    House, the publisher of Dan Brown’s bestselling 2003 novel *The Da Vinci Code*.
    They alleged that parts of this bestseller were plagiarized from their 1982 nonfiction
    book *Holy Blood, Holy Grail*. Judge Peter Smith, who presided over the trial,
    ruled against Baigent and Leigh, arguing that, as a novelist, Brown was free to
    use ideas from a nonfictional work in a fictional context.    Incredibly, Smith
    hid his own code in his written judgment! He italicized forty-one letters throughout
    the text, producing the following character sequence:    *smithycodeJaeiextostgpsacgreamqwfkadpmqzv*    After
    “smithy code,” the rest of the characters represent an encrypted message:    `Jaeiextostgpsacgreamqwfkadpmqzvs`    The
    assumption that this line is a cryptogram is supported by the following sentence
    contained in Smith’s text: “The key to solving the conundrum posed by this judgment
    is in reading HBHG and DVC.” HBHG and DVC are abbreviations of the book titles
    involved in the trial, namely, *Holy Blood, Holy Grail* and *The Da Vinci Code*.    Many
    codebreakers all over the world tried to decipher the “Smithy Code” message, and
    Dan Tench, a British lawyer and journalist, was the first one to succeed (after
    a few hints from the judge).^([19](b06.xhtml#c08-endnote-19)) Based on frequency
    analysis, Tench guessed that he was dealing with a Vigenère cipher or a similar
    polyalphabetic encryption system. The repetition of the digraph `MQ` after eight
    letters suggested that Smith had used an eight-letter keyword. (This reasoning
    is an application of Kasiski’s method.)    Following Smith’s hint that the solution
    to the challenge could be found in the two books involved in the lawsuit, Tench
    tried to use Fibonacci numbers as the key. The Fibonacci sequence is a famous
    pattern that starts with 1, 1 and continues with numbers that are the sum of the
    two preceding ones, like this: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, and so forth.
    Fibonacci numbers play a role in both *Holy Blood, Holy Grail* and *The Da Vinci
    Code*, so it seemed plausible that Smith had used them as a key of some sort.    Assuming
    that Smith had applied an eight-character Vigenère keyword, Tench tried the first
    eight Fibonacci numbers: `1`, `1`, `2`, `3`, `5`, `8`, `13`, and `21`. After some
    trial and error, he saw that this keyword delivered meaningful words when added
    to the ciphertext (instead of the usual method of being subtracted from it). In
    addition, each number in the key had to be diminished by one. So, instead of `1`,
    `1`, `2`, `3`, `5`, `8`, `13`, `21`, it started with `0`, `0`, `1`, `2`, `4`,
    `7`, `12`, `20`, and then repeated. There was a further twist: the judge’s key
    combined the fourth and fifth numbers of the modified Fibonacci sequence, which
    became `0`, `0`, `24`, `2`, `4`, `7`, `12`, `20`. Here’s a description of the
    decryption process:    `Ciphertext: J a e i e x t o s t g p s a c`    `Key: 0
    0 24 2 4 7 12 20 0 0 24 2 4 7 12`    `Plaintext:` `J A C K I E F I S T E R W H
    O`    `Ciphertext: g r e a m q w f k a d p m q z v`    `Key: 20 0 0 24 2 4 7 12
    20 0 0 24 2 4 7 12`    `Plaintext:` `A R E Y O U D R E A D N O U G H`    This
    produced the following plaintext:    `JACKIEFISTERWHOAREYOUDREADNOUGH`    The
    text contains two mistakes: the `T` should be an `H`, and a `T` is missing at
    the end. Here’s the correct plaintext:    `JACKIE FISHER WHO ARE YOU DREADNOUGHT`    These
    words refer to Admiral Jackie Fisher (1841–1920), an important figure in British
    naval history, and the battleship HMS *Dreadnought*, which Fisher commissioned
    and planned. Judge Smith was known to be a great admirer of Jackie Fisher, and
    the launch of the first dreadnought-class battleship, whose design was revolutionary
    and made all earlier battleships obsolete, had taken place one hundred years before
    the trial. This cryptogram was his way of commemorating the centennial.    ##
    Challenges    ### The Schooling challenge    In 1896, British statistician and
    journalist John Holt Schooling (1859–1927) published a challenge cipher.^([20](b06.xhtml#c08-endnote-20))
    It consists of a sequence of two-digit numbers. To make things a little easier,
    we will also reveal that each number represents a letter, as shown in the following
    table (note that `J` is missing):    `12345`    `-----`    `1|ABCDE`    `2|FGHIK`    `3|LMNOP`    `4|QRSTU`    `5|VWXYZ`    The
    substitution takes place as follows: `A` = `11`, `B` = `12`, `C` = `13` . . .
    `Y` = `54`, `Z` = `55`. We can then define a Vigenère cipher based on this number
    system. For instance, if we encrypt the plaintext `CODEBREAKING` (`13 34 14 15
    12 42 15 11 25 24 33 22`) with the keyword `ABC` (`11 12 13`), we get:    `13
    34 14 15 12 42 15 11 25 24 33 22`    `11 12 13 11 12 13 11 12 13 11 12 13`    `-----------------------------------`    `24
    46 27 26 24 55 26 23 38 35 45 35`    Here’s a ciphertext Schooling created with
    this method, using the keyword `TYRANT`:    `76 69 57 55 65 59 68 87 77 22 75
    68 87 88 75 43 67 77 58 65 96`    Can you solve this challenge cipher?    ###
    A German radio message from the Second World War    In October 1941, a US Coast
    Guard unit intercepted the following radio message transmitted from Hamburg, Germany,
    to a recipient in Rio de Janeiro, Brazil:^([21](b06.xhtml#c08-endnote-21))    `DDLUX
    CQSFV INNNW FRFZA GQBGI`    `WREKU ZPRIY HJXFS JRUJP TYXRH`    `SABWC GQFYD MIWYP
    VHJBE KMEHJ`    `WGQAI JYNPV USQLJ DHOIV HQXRN`    `HSJRU VJKTY NPPBI SEKKV OIVSC`    `GQBTS
    NUPXS FVHQU WBFFS PTXQT`    `FSXJQ FWJSW UWPTC JIWHH PJHQD`    `HUVFZ DPJBF XFAVH
    URBHQ TLDLU`    `XCQSD ESQXU`    American codebreakers soon discovered that this
    message was encrypted with a Vigenère cipher. The plaintext is in German, and
    the key is not a word but is derived from a mathematical constant. Can you break
    this cryptogram?    ## Unsolved cryptograms    ### Wood’s cryptogram from the
    crypt    Robert Thouless, whose unusual life-after-death experiments were discussed
    in a previous section of this chapter, encouraged others to perform similar attempts
    at communicating after their death. The more people who took encryption keys to
    their grave, he hoped, the higher the probability that somebody would be able
    to channel this information from the beyond. One person who answered this call
    to arms was solicitor T.E. Wood (1887–1972) from Bournemouth, United Kingdom.
    Wood used the same method as Thouless used for his second message for encryption,
    which means that his key is a passage from a text available to the public (such
    as a book chapter). However, he added a twist; his plaintext was written in multiple
    languages, and his key was taken from a non-English work. Wood’s cryptogram is
    reproduced below.    `FVAMI NTKFX XWATB OIZVV X`    Wood’s encrypted message is
    unsolved to date. Apparently, nobody has yet received the key from the beyond!
    ``'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
