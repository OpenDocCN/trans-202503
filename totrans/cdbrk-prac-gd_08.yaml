- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polyalphabetic ciphers
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08001.png)'
  prefs: []
  type: TYPE_IMG
- en: The fourth inscription on *Kryptos*, the sculpture located at CIA headquarters
    in Langley, Virginia, is the most famous unsolved crypto mystery created in the
    last four decades. The other three ciphertexts on this artwork have been solved.
  prefs: []
  type: TYPE_NORMAL
- en: '*Kryptos* and at least two other artworks by the sculptor Jim Sanborn involve
    a kind of encryption called a *polyalphabetic cipher*, meaning a cipher that switches
    between different substitution tables. An overview of *Kryptos* is given in Appendix
    A.'
  prefs: []
  type: TYPE_NORMAL
- en: How a polyalphabetic cipher works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To introduce polyalphabetic ciphers, we start with a miniature sculpture (called
    a maquette) that Sanborn made in the late 1980s, before he created the actual
    sculpture ([Figure 8-1](#figure8-1)). This shoebox-sized model looks similar to
    the original but bears a completely different message.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/F08001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-1: A shoebox-sized maquette of *Kryptos* with a simpler encryption.
    The cipher used is the most common polyalphabetic encryption method: the Vigenère
    cipher*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'For decades, this maquette was unknown to the public; but in 2015, Ed Scheidt,
    Sanborn’s crypto consultant, showed it to participants at a *Kryptos* meeting
    organized by Elonka.^([1](b06.xhtml#c08-endnote-1)) Here’s the encrypted part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TIJVMSRSHVXOMCJVXOENA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KQUUCLWYXVHZTFGJMKJHG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DYRPMASMZZNAKCUEURRHJ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KLGEMVFMOKCUEURKSVVMZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YYZIUTJJUJCZZITRFHVCT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`XNNVBGIXKJNZFXKTBVYYX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NBZYIAKNVEKPYZIUTJYCA`'
  prefs: []
  type: TYPE_NORMAL
- en: Jew-Lee Lann-Briere and Bill Briere broke the cryptogram a few hours after the
    dinner was over, using only paper and pencil. After publication, Christoph Tenzer
    found the solution as well. It turned out that Sanborn had used the so-called
    Vigenère cipher to encrypt this message.
  prefs: []
  type: TYPE_NORMAL
- en: Vigenère cipher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cipher today known as the Vigenère cipher was first described in the sixteenth
    century by Giovan Battista Bellaso (1505–?). Later, in the nineteenth century,
    its invention was misattributed to Bellaso’s contemporary Blaise de Vigenère (1523–1596).
    We’ll explain how this encryption method works using the plaintext of the cryptogram
    on the *Kryptos* maquette (which contains a few spelling errors; the last word
    resulted from a mistake Sanborn made):^([2](b06.xhtml#c08-endnote-2))
  prefs: []
  type: TYPE_NORMAL
- en: '`CODES MAY BE DIVIDED INTU TWO DIFFERENT CLASSES, NAMELY SUBSTITUTIONAL AND
    TRANSPOSITIONAL TYPES, THE TRANSPOSITIONAL BEING THE HARDEST TO DECHPHER WHTHOUT
    TPNQJHFCDZDHIU.`'
  prefs: []
  type: TYPE_NORMAL
- en: To encrypt this message using the Vigenère cipher, we repeatedly write some
    keyword on the line below our plaintext, assign each letter a number value (e.g.,
    `A` = `0`, `B` = `1`, `C` = `2`, etc.), and then add the letters of the plaintext
    and keyword column-wise. If the result is greater than twenty-five, we subtract
    twenty-six. Each number is then converted back into a letter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sanborn reportedly intended to use the keyword `GRU`. However, he started encrypting
    his plaintext with the second letter of his key, effectively changing it to `RUG`.
    For purposes of this demonstration, we’ll consider the keyword to be `RUG`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CODES MAY BE DIVIDED INTU TWO DIFFERENT CLASSES NAMELY SUBSTITUTIONAL . .
    .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RUGRU GRU GR UGRUGRU GRUG RUG RUGRUGRUG RUGRUGR UGRUGR UGRUGRUGRUGRUG . .
    .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`---------------------------------------------------------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TIJVM SRS HV XOMCJVX OENA KQU UCLWYXVHZ TFGJMKJ HGDYRP MASMZZNAKCUEUR . .
    .`'
  prefs: []
  type: TYPE_NORMAL
- en: We get the exact ciphertext written on the miniature sculpture. To decrypt the
    ciphertext, we subtract the keyword from the ciphertext.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is easy to see that a Vigenère cipher effectively consists of several Caesar
    ciphers ([Figure 8-2](#figure8-2)). So, with a three-letter keyword (`RUG`), we
    derive the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The first, fourth, seventh, and tenth letters of the plaintext are encrypted
    with a Caesar cipher and with the key `A` = `R`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For letters two, five, and eight, the Caesar substitution `A` = `U` is applied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third Caesar cipher key is `A` = `G`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that Sanborn defined the scheme `A` = `0`, `B` = `1`, `C` = `2`, etc. This
    is the way the Vigenère cipher is usually used today, because computer-savvy people
    tend to start counting at zero. However, before the computer age, almost all Vigenère
    encipherers used the scheme `A` = `1`, `B` = `2`, `C` = `3`, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/f08002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-2: A Vigenère cipher with a three-letter keyword (here, `RUG`) can
    be regarded as consisting of three Caesar ciphers.'
  prefs: []
  type: TYPE_NORMAL
- en: Today, numerous computer programs and commonly available utilities implement
    the Vigenère cipher.
  prefs: []
  type: TYPE_NORMAL
- en: Other polyalphabetic ciphers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Vigenère cipher originated from the insight that a simple substitution cipher
    is easy to break with frequency analysis. An obvious way to prevent this is to
    use several substitution tables instead of one and to switch among them. If we
    have, say, five substitution tables, we can use the first one for the first letter
    of the plaintext, the second one for the second letter, and so on. When we have
    reached the sixth plaintext letter, we return to the first substitution table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second row of a substitution table is sometimes referred to as a *cipher
    alphabet*, or simply *alphabet*, in cryptology. Because a simple substitution
    cipher is based on only one substitution table, it is called *monoalphabetic*.
    A cipher that switches between different substitution tables is called *polyalphabetic*.
    The Vigenère cipher is a polyalphabetic cipher, because it uses as many substitution
    tables as there are letters in the keyword. For example, when it uses the keyword
    `RUG` (like on the *Kryptos* maquette), three tables are applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RSTUVWXYZABCDEFGHIJKLMNOPQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UVWXYZABCDEFGHIJKLMNOPQRST`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GHIJKLMNOPQRSTUVWXYZABCDEF`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can conveniently merge these three tables into one called a Vigenère table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 RSTUVWXYZABCDEFGHIJKLMNOPQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 UVWXYZABCDEFGHIJKLMNOPQRST`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3 GHIJKLMNOPQRSTUVWXYZABCDEF`'
  prefs: []
  type: TYPE_NORMAL
- en: This merged table includes three alphabets, represented by the lines numbered
    1, 2, and 3.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the Vigenère cipher, many other polyalphabetic ciphers are mentioned
    in cryptologic literature. For an overview, check out the website of the American
    Cryptogram Association, which has done a great job of classifying encryption methods.^([3](b06.xhtml#c08-endnote-3))
    In this book, we limit ourselves to those polyalphabetic ciphers we have encountered
    in practice. All of these can be regarded as variants of the Vigenère cipher.
  prefs: []
  type: TYPE_NORMAL
- en: One-time pad
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Vigenère cipher becomes more secure the longer the keyword is. For maximum
    security, we could even choose a key that is as long as the message! This can
    be done by using very long text, for instance, a poem or a paragraph from a novel.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is, however, much more common to use a key that has a sequence of random
    letters of the same length as the plaintext, for example, the random string `LAVBF
    HJHWQ UIELS KJFLS JFKSA JHFQI UDAJL KX`. Now, the plaintext `I TRAVEL OVER THE
    SEA AND RIDE THE ROLLING SKY` (taken from the 1975 Fairport Convention song “Rising
    for the Moon”) encrypts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Plaintext:` `ITRA VELOVE RT HESEAAN DRIDE THER OLLINGS KY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Key: LAVB FHJHWQ UI ELSKJFL SJFKS AJHF QIUDAJL KX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------------------------------------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ciphertext: TTMB ALUVRU LB LPKOJFY VANNW TQLW ETFLNPD UV`'
  prefs: []
  type: TYPE_NORMAL
- en: We call this type of cipher a *one-time pad*. The name comes from early implementations
    of the cipher, when the random-letter sequence was distributed as a pad of paper
    that allowed the top sheet to be torn off and destroyed after use.
  prefs: []
  type: TYPE_NORMAL
- en: If used properly, meaning the key is random and only used once, then the one-time
    pad is an encryption method that cannot be broken. This is because, with this
    method, any plaintext can be encrypted to every possible ciphertext of the same
    length. Considered the other way, a single ciphertext could be decrypted to any
    possible plaintext of that length, with no way of distinguishing one possible
    plaintext from another.
  prefs: []
  type: TYPE_NORMAL
- en: Because of its security, the one-time pad used to be very popular. Militaries
    and diplomatic services heavily used it in the early Cold War era of the 1950s.
    Many spies communicated via one-time pad encryption with their case officers,
    who provided them with a long list of random letters or numbers to use as keys.
  prefs: []
  type: TYPE_NORMAL
- en: Cipher machines also applied the one-time pad. Most of these devices looked
    like typewriters, and virtually all of them used a binary version of the one-time
    pad scheme that was also known as the Vernam cipher, after Gilbert S. Vernam (1890–1960).
    This means that every character was encoded as a sequence of zeros and ones; the
    key, too, was a series of zeros and ones usually taken from a punched tape. Adding
    the plaintext to the ciphertext meant applying an *exclusive-or operation* (see
    Appendix C).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, all users of the one-time pad faced a serious problem: they needed
    a huge amount of key material and, as a result, elaborate processes to distribute
    these keys to the users. This is because, by definition, each key can only be
    used once, and a one-time pad’s key is always as long as the message to be encrypted.
    This laborious key handling is the reason the one-time pad began to lose its significance
    when electronics and computer technology emerged in the 1960s and a new generation
    of encryption methods became available.'
  prefs: []
  type: TYPE_NORMAL
- en: How to detect a polyalphabetic cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect a Vigenère cipher, we need a frequency analysis and the index of
    coincidence of the ciphertext. [Figure 8-3](#figure8-3) shows the letter frequencies
    of the Vigenère-encrypted text on the *Kryptos* maquette and, for comparison,
    that of a typical English text. Note that the frequency of the most common letter
    is 7.48% in this Vigenère cryptogram, compared to around 11.89% in plain English.
    In general, the frequency distribution of a Vigenère cryptogram is flatter than
    that of a text encrypted in a simple substitution cipher: frequent letters are
    less frequent and rare letters are less rare.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/f08003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-3: The letter frequency diagrams of a Vigenère ciphertext (top) and
    an English plaintext (bottom). As can be seen, the frequency distribution of a
    Vigenère cryptogram is flatter. (Note that the scales are slightly different between
    the two diagrams.)'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the index of coincidence of an English text (i.e., the probability
    that two randomly drawn letters of the cryptogram are the same) is about 6.7%.
    This doesn’t change if the text is encrypted in a simple substitution cipher.
    The index of coincidence of the *Kryptos* maquette text is about 4.3%, which is
    considerably lower. (We can compute this value with the Cipher Tools utilities
    at [https://rumkin.com/tools/cipher/](https://rumkin.com/tools/cipher/) or the
    dCode website at [https://dcode.fr/en](https://dcode.fr/en).) Completely random
    text has an index of coincidence of around 3.8%. In general, the index of coincidence
    of a Vigenère cryptogram lies somewhere between the values of plain language and
    random text. A one-time pad cryptogram is indistinguishable from random text and
    therefore has an index of coincidence of about 3.8%.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that polyalphabetic ciphers often resemble letter-pair
    substitutions. We will explain in [Chapter 12](c12.xhtml) how to distinguish between
    these two techniques.
  prefs: []
  type: TYPE_NORMAL
- en: How to break a polyalphabetic cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For centuries, the Vigenère cipher and other polyalphabetic ciphers were widely
    considered unbreakable, deemed “le chiffre indéchiffrable.” Of course, this designation
    was far from justified, since, as early as the seventeenth century, word guessing
    had been described as a method for solving systems of this kind.^([4](b06.xhtml#c08-endnote-4))
    In the nineteenth century, Kasiski’s method (discussed later in this section)
    was developed. Today, there are many approaches to breaking polyalphabetic ciphers,
    most of which work well as long as one is not dealing with a one-time pad. Some
    of these codebreaking methods can be employed manually; others require computer
    support. Like many other encryption algorithms covered in this book, most polyalphabetic
    ciphers can be attacked with the computerized hill-climbing method (see [Chapter
    16](c16.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: In the following, we will focus on the Vigenère cipher and introduce a number
    of methods to solve it. Most of these can also be transferred to other polyalphabetic
    ciphers and, even if they can be applied manually, have long been implemented
    in computer programs. If you enter “Vigenère solver” in a search engine, you will
    find numerous websites that break Vigenère cryptograms with various methods (sometimes
    not even documenting the method used). In addition, you can, of course, use a
    utility such as CrypTool 2 or dCode for solving a Vigenère cipher with various
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Word guessing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the 1990s, when Klaus was a computer science student at a German university,
    he was tasked with solving a cryptogram as homework—something he had never done
    before. He knew that the cipher was a Vigenère and that the text and keyword were
    in English. Also, the mapping between letters and numbers was performed according
    to the `A` = `0`, `B` = `1`, `C` = `2` scheme. Here’s an excerpt of the ciphertext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"VMFA CKT ZM, KK ZSSH,", YX QTER, "DCL VYG''P KNB PHS DJCB. MFN ATJ''H QWV
    BL YNCSH FY RAA PZZCWMSAF NBUXDBJWYSCR." FX PFNSU MM FWYJ VZL CRAG GZRSC YESWQVEW
    UQH YVVR HNOH BCLEBG''P RT WK.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TPMDIW ZRR GG PVJ ALW YGZ GVIVEAAAR FH YBK.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`"B''I UFAV," AC LWWI, "KV''EJ LAS BVF KSLPG KWILR."`'
  prefs: []
  type: TYPE_NORMAL
- en: 'As can be seen, punctuation and spaces are visible. This made it possible,
    as with an Aristocrat cipher, to guess words. For instance, the letter sequences
    `YX QTER` are located between two passages in quotation marks, which probably
    indicate direct speech. Klaus thought that `HE SAID` was a good guess. To check
    this hypothesis, he subtracted the plaintext from the guessed plaintext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`YX QTER`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HE SAID`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RT YTWO`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a computer science student, the rest of the keyword was not hard to guess:
    it’s `FORTYTWO`, the answer to the ultimate question of life, the universe, and
    everything in Douglas Adams’s bestselling 1979 novel *The Hitchhiker’s Guide to
    the Galaxy* (see [Figure 8-4](#figure8-4)). Decrypting the whole text with this
    keyword revealed that the plaintext had been taken from the novel, as well. Klaus
    had solved the challenge, igniting his lifelong interest in codebreaking.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/f08004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-4: A Vigenère-encrypted passage from Douglas Adams’s famous 1979 novel
    was the first cryptogram ever broken by author Klaus Schmeh. The keyword was `FORTYTWO`.'
  prefs: []
  type: TYPE_NORMAL
- en: Checking for repeating patterns (Kasiski’s method)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If no punctuation or spaces are given, breaking a Vigenère cipher becomes a
    little more difficult. Nevertheless, a skilled codebreaker can solve a simple
    Vigenère cryptogram in under twenty minutes without computer support. Here is
    a larger encrypted excerpt from the previous example, with punctuation and spaces
    omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`KWWMC XJGJQ FGBLH OYSIA CPWGT IKHDM DSMCL LCTJR QMZGE BJTWC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EMMYW PNUPX JEKKG ICEBH VSWHY TRPWG FRMTL VEBLI GAGLC OWRVG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NTPVR FCIPH OGJFN TQTOH MSPLY RKBQM YNKTJ WSCKA CKSCW RJACP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`WGFQR KZHJP FGVWJ BBSKC IFBXO QJBUX BYNCR OETNX ICWSJ ICVET`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NQREJ RDSBO JYMKP MKOKT LWOVF PSRYG ZKTFB XBYKF YVVEM VWZHC 5`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LGABH QZFZH SLHMJ BFNEA PVTIX AFXZW IBKDL HSWYV VPYLW ZXCRW`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GKAQY ARECE EBJRV LAXJR FBKHD ZABLV ZLIAW BYVFN EAEBY SIOCG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EBLUV GCKWH NCELY GZFFQ ZTJFE LNBXA YWOCO IXZJX ZVNGX XLXOH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MOKAC AWRSC UBQVA FSWSE CFKBL CCHGW YVFFR VRXNW XHZVQ TJRYV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VHLEU JJGKB EXOZJ TKBLF NZUFF LQXNC KVZLK BCVYM RGAXO HWMNX 10`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PXWDW CEHSG YSIGK HSMJS XGRUM NPHMS KNKTJ RFDIX BBHSH HZHLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KFQWK MJXBI WVRMQ AAKFG SRLHI SFBJT EKAOY KRKPB KFNBW TAMDS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BOJTL XNJTI JPMKN WJRDT LMKRF MYXUT ODFFK BANHO WZPGC KRCZG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RGBPK FWWVW ZXYOZ GVLMF AHMWE ZFTZU TBVLC KECZG CRUKK BLKZM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FAEGO CSPFB YVBOJ MMLAS YVRMY KPVZF UXLMO VTIJX EHPQQ SRKCW 15`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KIYCW MFXSO DPVYM KAHMS UTWPW GTIKV MFACK TZMKK ZSSHY XQTER`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DCLVY GPKNB PHSDJ CBMFN ATJHQ WVBLY NCSHF YRAAP ZZCWM SAFNB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UXDBJ WYSCR FXPFN SUMMF WYJVZ LCRAG GZRSC YESWQ VEWUQ HYVVR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HNOHB CLEBG PRTWK TPMDI WZRRG GPVJA LWYGZ GVIVE AAARF HYBKB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IUFAV ACLWW IKVEJ LASBV FKSLP GKWIL RBIOK FRBBR KIWSX HGGCH 20`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TVROC MKOHQ VIRBP GFWUF PINCX GVKEK EDUWE ZFBOT ZFYTR TJRWC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CEGGC WYFFN LWPVJ HFIMY DWXVV TBMDW XPPIY LOVFG XHRMK PJPLB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`JMWBI WKLEH EBLHF UCUQW QHWBP LPWAS YXYKZ CKWKL YBZOW HYNPP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DMXWK ZMBJU YCSXZ NEZYA IIPHO GJFJA MHGVN GWBLZ AFFHY BKYKF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FPZMR AABXH FINXZ OSRGN RBPOB OPTET EBBVR MBHUC ZAVTL PDMXW 25`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KZMMP CGSSN GEPVJ GRBBB PGFPP IYLOM TIMXE HPHTP LBJWX MUOJL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CLXMU OJLCL WFJRV OGVAG BVZVF THZTK JHKXL STDCX RHZFN JVYPH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IDTWE MYMKD TWEMZ OAFDT RLRPD WQGKH RAAFU SFIJX ZOXVW KMFLC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NBKUR HLCNB KTTXN MKOJM NXKDQ SCBTB JUFHG HGGPQ GSZGE TLCNB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KWGKA QYZPB LUAHB SVGYK ACKHV GEBRS SHFPM GZSWK YTRLO CLFVT 30`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RTXCZ HGHGG POYVR MQHIO SMGXM IHSTT GHGGP PFFVL MDASS HFZCM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PVJFV TLWSV FHJLM ZNSFH RUMNP DTWEM ZMDOY GFFYG UDJCG ECHBD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TWEMY TNSXC BXCGP CLSKM FXNSY VVRMY PSSKZ LFMDO YDVHN EAKTI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CWHNO HTBTX YGZTT FREJP KFPCL MUAAF JHYXF XHZYV VRUTJ HJRKH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZXIFU FFLQX NKFBK XBMKP JOKIM BJHID FBLMZ KFGEM YGUKM SIXGG 35`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LOWHZ VSEWF NHNTQ CQGYO ERAHJ JJBZX LMLCN BKTTX NMQCE ZUTUT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`WCDIM BJHXO STLWY VJKFN JWDOA SRGGV AZNHK ECVKH YOXXY MLCNB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KWUBP VFLVL MOAFY VVWMH NOSRJ ICGZO UZVTQ TJHFA FNLMK TYWDX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YMLCN BKXUA EQMKF NJWXS YVVGC TNSXH GNZMK DTWEM BAEGB WWXMY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YCZFJ XUTJH JRTEG FXWSU IHQXO PZHYX UTJHJ RRQCL DSIWU GRDJC 40`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BKYRF XFIXH CBIXZ OCSJA CYHIX VVWFH PZDIE WCKPV JRVKG LEJJU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IBLLK TYVV`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The trick is to first discover the length of the keyword. Once we know it,
    solving a Vigenère cipher means solving a few Caesar ciphers. A good way to guess
    the keyword length is to look for repeating patterns in a cryptogram, a technique
    referred to as *Kasiski’s method*. For instance, in lines 22 and 26, we find the
    repeating pattern `PPIYLO`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08002.png)'
  prefs: []
  type: TYPE_IMG
- en: The distance between the beginnings of the first and the second appearance of
    the pattern is 192 letters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In lines 28 and 33, we find another repeating pattern, `DTWEMY`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08003.png)'
  prefs: []
  type: TYPE_IMG
- en: This time, the number of letters before the repetition begins is 248.
  prefs: []
  type: TYPE_NORMAL
- en: 'In line 28, a third repetition can be found, `DTWEM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08004.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, the distance is 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'The distances we have found are 192, 248, and 8\. The greatest common divisor
    of these three numbers is 8\. This means that the key length is probably 8 or
    a divisor of 8\. A keyword length of 8 means that we are dealing with eight Caesar
    ciphers. In the next step, we therefore perform eight frequency counts. We start
    by counting the letters at positions 1, 9, 17, 25, 33, 41, and so on. Here is
    what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08005.png)'
  prefs: []
  type: TYPE_IMG
- en: If we compare this with the frequencies of an ordinary English text (see Appendix
    B), we see that the Caesar cipher used here is a direct one-to-one correlation,
    with `A` = `F`, `B` = `G`, `C` = `H` . . . This means that the first letter of
    the keyword is probably `F`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s count the letters at positions 2, 10, 18, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08006.png)'
  prefs: []
  type: TYPE_IMG
- en: This time, we get `A` = `O`, `B` = `P`, `C` = `Q` . . . The second keyword letter
    therefore is very likely to be `O`.
  prefs: []
  type: TYPE_NORMAL
- en: If we repeat this procedure six more times, we get the letters `F`, `O`, `R`,
    `T`, `Y`, `T`, `W`, and `O`. This suggests that the keyword length really is eight.
    If we had received a keyword like `FORTFORT`, we would know that the four-letter
    `FORT` was the actual keyword. Using the keyword `FORTYTWO`, we can easily decrypt
    the ciphertext and retrieve the *Hitchhiker’s Guide to the Galaxy* excerpt.
  prefs: []
  type: TYPE_NORMAL
- en: Using the index of coincidence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kasiski’s method is usually the best way to determine the Vigenère keyword length
    by hand. If a computer is available, there are better methods. Quite often, the
    index of coincidence can help us determine the number of letters in the keyword.
    A good way to use this value is to assume different keyword lengths (for instance,
    lengths between three and twenty-five) and compute the index of coincidence for
    each case. Assuming an English plaintext, the index of coincidence that is the
    closest to a normal English value of 6.7% is probably correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dCode website ([https://dcode.fr/en](https://dcode.fr/en)) provides us
    with a tool that performs such a test. Here are the results we get for *The Hitchhiker’s
    Guide to the Galaxy* excerpt:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Length = 24: index of coincidence = 6.4%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 8: index of coincidence = 6.3%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 16: index of coincidence = 6.2%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 4: index of coincidence = 4.9%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 12: index of coincidence = 4.9%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 20: index of coincidence = 4.8%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 26: index of coincidence = 4.6%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 14: index of coincidence = 4.6%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The keyword length of twenty-four renders the highest index of coincidence,
    which is closest to the English 6.7%. Twenty-four is wrong, but we can live with
    this, because it is a multiple of 8\. When we solve twenty-four Caesar ciphers
    in the next step, we will get `FORTYTWOFORTYTWOFORTYTWO` as the keyword. The second
    guess (a keyword length of 8 letters) is the correct one.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the keyword length, we can tell the dCode utility to solve
    the cryptogram. By solving a Caesar cipher for each letter of the keyword, dCode
    renders the correct solution. This is shown in [Figure 8-5](#figure8-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/f08005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-5: The website dCode ([https://dcode.fr/en](https://dcode.fr/en))
    provides tools to solve a Vigenère cipher step-by-step.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now try the same with the text on the *Kryptos* maquette. Here is what
    dCode delivers us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Length = 3: index of coincidence = 6.3%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 6: index of coincidence = 6.2%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 9: index of coincidence = 5.9%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 13: index of coincidence = 5.2%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 11: index of coincidence = 4.9%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 12: index of coincidence = 5.5%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 15: index of coincidence = 5.8%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 18: index of coincidence = 5.9%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 8: index of coincidence = 4.3%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Length = 1: index of coincidence = 4.3%'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As can be seen, the keyword length of three provides the best result. This is
    correct, as the keyword is `RUG`.
  prefs: []
  type: TYPE_NORMAL
- en: William Friedman, who introduced the index of coincidence to codebreaking, developed
    a formula that uses it to compute an estimated keyword length from the ciphertext.
    This formula is known as the *Friedman test*. It requires fewer calculations than
    performing the index-of-coincidence comparisons we just walked through, but it
    is also less accurate, especially if the plaintext language is not known. For
    a detailed treatise on the index-of-coincidence method and the Friedman test,
    we recommend Craig Bauer’s book *Secret History*.^([5](b06.xhtml#c08-endnote-5))
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to break a Vigenère cipher is the so-called dictionary attack, which
    requires the use of a computer program. A dictionary attack requires a long list
    of words, called a *dictionary*, which is stored in a file. Dictionary files of
    all kinds are available on the internet in great numbers. For example, there are
    files containing the 20,000 most popular words of the English language. Similar
    collections have been created for many other languages, geographical expressions,
    names, abbreviations, and more. In addition, there are programs that create dozens
    of different versions of a given word (for instance, *CALIFORNIA*, *CALIFORNYA*,
    *CALIF*, *CA*, *AINROFILAC* . . .).
  prefs: []
  type: TYPE_NORMAL
- en: A program executing a dictionary attack on the Vigenère cipher takes one word
    after another from such a source, derives different versions of it, and uses each
    one as a possible key to decrypt the ciphertext. Then it checks whether the result
    looks like plain English (or whatever language is used). Methods to distinguish
    meaningful text from gibberish will be introduced in [Chapter 16](c16.xhtml).
    When the test for meaningful language is positive, the deciphering has succeeded;
    otherwise, the next keyword candidate is tested.
  prefs: []
  type: TYPE_NORMAL
- en: While trying to break a Vigenère cipher with a dictionary attack is feasible,^([6](b06.xhtml#c08-endnote-6))
    it is not very common. This is probably because more powerful computer-based attacks
    on the Vigenère cipher are available, such as hill climbing, which is discussed
    in [Chapter 16](c16.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Tobias Schrödel’s method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 2008, our colleague, the German crypto expert Tobias Schrödel, published
    a hitherto unknown Vigenère cipher-breaking method in *Cryptologia*.^([7](b06.xhtml#c08-endnote-7))
    This attack is based on the elimination of rare letter combinations in both the
    plaintext and the keyword. It requires a computer program (and, in fact, is part
    of CrypTool 1, the forerunner of CrypTool 2). Tobias’s method is particularly
    helpful in cases when the message is not much longer than the keyword (e.g., a
    fifteen-letter plaintext encrypted with a seven-letter keyword). However, the
    keyword must be a real word and not a random-letter sequence—otherwise, eliminating
    rare letter combinations is useless.
  prefs: []
  type: TYPE_NORMAL
- en: In his article, Tobias introduces the ciphertext `IZRUOJVREFLFZKSWSE`, which
    was encrypted with a Vigenère cipher. The traditional methods used to attack a
    Vigenère cipher don’t work here. For instance, no words can be guessed, because
    the text contains no spaces. In addition, the cryptogram is short, and there are
    no repetitions that might reveal the keyword length. Even if we know or guess
    the length of the keyword, performing, say, six frequency analyses won’t help,
    because there are too few letters.
  prefs: []
  type: TYPE_NORMAL
- en: However, Tobias’s method can break this cryptogram. By eliminating rare letter
    combinations, it finds that the common trigraphs *BLA* and *HOR* generate `IZR`
    (the first three letters of the ciphertext) when one is encrypted with the other.
    Based on frequency considerations, the method next suggests *BLACK* and *HORSE*
    as extensions of the two trigraphs. It is not clear which word is the keyword
    and which is the plaintext, but further tests reveal that the keyword `HORSE`
    makes sense. When it is used to decrypt the cryptogram, the resulting plaintext
    is `BLACK CHAMBER IS OPEN`.
  prefs: []
  type: TYPE_NORMAL
- en: Other Vigenère breaking methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In her 1939 book *Cryptanalysis*, Helen Fouché Gaines described a linguistic
    approach to solving a Vigenère cipher.^([8](b06.xhtml#c08-endnote-8)) It requires
    luck and a lot of trial and error. Richard Hayes described a similar but more
    advanced technique, based on common trigraphs, in 1943.^([9](b06.xhtml#c08-endnote-9))
    Both methods are rarely used today, as more powerful alternatives have emerged
    since the advent of computer technology.
  prefs: []
  type: TYPE_NORMAL
- en: Another method we won’t discuss in this book is Viterbi analysis, which is based
    on hidden Markov models. Interesting articles about this approach have been published
    in the scientific journal *Cryptologia*.^([10](b06.xhtml#c08-endnote-10))^, ^([11](b06.xhtml#c08-endnote-11))
  prefs: []
  type: TYPE_NORMAL
- en: How to break a one-time pad
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned, it is impossible to break a one-time pad if the key is a random
    sequence without any regularities and is only used once. However, more often than
    not over the course of history, these requirements have been breached. One of
    the most common mistakes occurred when the same key was used several times.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following, we explain how a one-time pad can be broken if the same key
    is employed for two messages. To demonstrate this, let’s first encrypt the plaintext
    `WASHINGTON` with the (random) key `KDFYDVKHAP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WASHINGTON`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KDFYDVKHAP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`----------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GDXFLIQAOC`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we encrypt the plaintext `CALIFORNIA` with the same key:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CALIFORNIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KDFYDVKHAP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`----------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MDQGIJBUIP`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we decrypt the first plaintext with the second one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WASHINGTON`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CALIFORNIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`----------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UAHZDZPGGN`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we decrypt the first ciphertext with the second one, we receive the same
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GDXFLIQAOC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MDQGIJBUIP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`----------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UAHZDZPGGN`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that if a codebreaker knows both ciphertexts (`GDXFLIQAOC` and `MDQGIJBUIP`)
    and that one of the plaintexts is `WASHINGTON`, they can easily derive the second
    plaintext, `CALIFORNIA`. This also works the other way around: if `CALIFORNIA`
    is known, `WASHINGTON` can be derived.'
  prefs: []
  type: TYPE_NORMAL
- en: We can easily generalize this approach to longer messages. If a cryptanalyst
    knows two one-time pad ciphertexts encrypted with the same key and has a crib
    in one of the two cryptograms, they can easily derive a part of the other plaintext.
    If the latter part is, say, `E UNITED S`, this can be extended to `THE UNITED
    STATES`, which means that `TH` and `TATES` become new cribs. With this method,
    it may be possible to completely derive both plaintexts.
  prefs: []
  type: TYPE_NORMAL
- en: Success stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Diana Dors message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'English actress Diana Dors (1931–1984) was once considered the British counterpart
    to Marilyn Monroe. In dozens of films, she played a seductive blonde and lived
    a private life worthy of a film diva. Before dying of cancer at age fifty-two,
    she gave her son Mark Dawson an encrypted message, telling him that it described
    the whereabouts of a substantial sum that she had hidden away: £2 million.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The headline of the text was encrypted using a pigpen cipher:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After some research, Dawson deciphered this to `LOCATIONS AND NAMES`. It turned
    out that his mother had used the following substitution table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/g08008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The main part of the cryptogram was written in ordinary letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EAWVL XEIMO RZTIC SELKM KMRUQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QPYFC ZAOUA TNEYS QOHVQ YPLYS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OEOEW TCEFY ZZEPI NYAUD RZUGM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SSONV JDAER SZNVS QSHRK XPVCC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`WUAEJ JTWGC WQRCC NRBKZ VIITF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RZLTS VOAIB NQZOK VANJJ TFAJO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GYUEB XZHRY UFSDM ZEBRK GIECJ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QZHFY QBYVU FNEGD EDIXF YZHOM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PMNLQ XFHFO UXAEB HZSNO EAUIL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`JXIWD KTUDN MCCGC EURDG SRBCW`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GMNKC RLHER HETVP GWOGC WANVJ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NGYTZ RALTM TAYTL UUSKM QIRZH`'
  prefs: []
  type: TYPE_NORMAL
- en: As Dawson couldn’t decipher this ciphertext, he consulted a team of British
    cryptologists, including Andrew Clark, who succeeded in breaking the cryptogram.
    However, the message’s meaning remained a mystery. A 2004 TV documentary later
    chronicled the team’s work.^([12](b06.xhtml#c08-endnote-12))
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, Clark and his colleagues performed a few statistical analyses
    of the cryptogram. The results proved consistent with a Vigenère cipher, and they
    had no trouble breaking it (probably by first determining the keyword length using
    one of the methods described earlier in this chapter). The keyword turned out
    to be `DMARYFLUCK` (likely derived from Dors’s legal name, Diana Mary Fluck).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the first line is decrypted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ciphertext: EAWVL XEIMO RZTIC SELKM KMRUQ . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Key: DMARY FLUCK DMARY FLUCK DMARY . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Plaintext:` `BOWEN STOKE ONTRE NTRIC HARDS . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The text consisted of a list of surnames, each followed by a city in England
    or Wales:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Bowen, Stoke-on-Trent`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Richards, Leeds`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Woodcock, Winchester`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Wilson, York`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Downey, Kingston Upon Hull`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Grant, Nottingham`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Sebastian, Leicester`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Leigh, Ipswich`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Morris, Cardiff`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Mason, Slough`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Edmundson, Portsmouth`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Padwell, London`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pyewacket, Brighton`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`McManus, Sunderland`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Coyle, Bournemouth`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Humphries, Birmingham`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dante, Manchester`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Bluestone, Liverpool`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Cooper, Bristol`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The meaning of this list is not known, and we have no idea whether these names
    refer to real people. Diana Dors’s son never found the millions his mother had
    allegedly left behind, and it is doubtful that this estate really existed. Although
    Dors had done well during her early career, she declared bankruptcy in 1968 and
    from then on supported herself with minor engagements.
  prefs: []
  type: TYPE_NORMAL
- en: Kryptos 1 and 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The two panels on the right side of the *Kryptos* sculpture located at CIA
    headquarters show a Vigenère-type table with an alphabet written in the following
    order. The letters of the word `KRYPTOS` are shifted to the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The top-left panel contains the following ciphertext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EMUFPHZLRFAXYUSDJKZLDKRNSHGNFIVJ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YQTQUXQBQVYUVLLTREVJYQTMKYRDMFD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VFPJUDEEHZWETZYVGWHKKQETGFQJNCE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GGWHKK?DQMCPFQZDQMMIAGPFXHQRLG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TIMVMZJANQLVKQEDAGDVFRPJUNGEUNA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QZGZLECGYUXUEENJTBJLBQCRTBJDFHRR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YIZETKZEMVDUFKSJHKFWHKUWQLSZFTI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HHDDDUVH?DWKBFUFPWNTDFIYCUQZERE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EVLDKFEZMOQQJLTTUGSYQPFEUNLAVIDX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FLGGTEZ?FKZBSFDQVGOGIPUFXHHDRKF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FHQNTGPUAECNUVPDJMQCLQUMUNEDFQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ELZZVRRGKFFVOEEXBDMVPNFQXEZLGRE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DNQFMPNZGLFLPMRJQYALMGNUVPDXVKP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DQUMEBEDMHDAFMJGZNUPLGEWJLLAETG`'
  prefs: []
  type: TYPE_NORMAL
- en: As you can read about in Appendix A, this cryptogram was broken independently
    at least three times by codebreakers who were not aware of each other’s achievements.
    In this section, we provide the approach used by CIA employee David Stein, who
    was the second one to solve it. His work is documented in a paper that is available
    online.^([13](b06.xhtml#c08-endnote-13))
  prefs: []
  type: TYPE_NORMAL
- en: 'Stein started by performing a frequency analysis. He realized that the encrypted
    message had the appearance of a Vigenère cryptogram. Using Friedman’s method,
    based on the index of coincidence, Stein found out that the most likely keyword
    length was eight. This was confirmed by the repetition of the trigraph `DQM` after
    eight letters in the fourth line (Kasiski’s method):'
  prefs: []
  type: TYPE_NORMAL
- en: '`D Q M` `C P F Q Z` `D Q M`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 2 3 4 5 6 7 8`'
  prefs: []
  type: TYPE_NORMAL
- en: Stein’s first guess was that the `DQM` trigraph stood for the most common trigraph
    in the English language, `THE`. In another attack on the ciphertext, he did an
    additional frequency analysis. Knowing that a Vigenère cipher with an eight-letter
    keyword is equivalent to eight Caesar encryptions, Stein counted the frequencies
    of every eighth letter. However, neither of these approaches led to a solution.
  prefs: []
  type: TYPE_NORMAL
- en: He then guessed that a Vigenère cipher with a permutated alphabet—one starting
    with `KRYPTOS`, as on the other side of the sculpture—had been used. Based on
    this assumption, he tried to solve the eight Caesar ciphers with frequency analysis
    once again. This time, he was on the right track. The Vigenère keyword he found
    was `ABSCISSA`, a word referring to the *x*-coordinate of a point on a graph.
    The `DQM` ciphertext came out to `THE(Y)` and `THE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, only lines 3 through 13 of the encrypted message produced meaningful
    plaintext, while the first two decrypted to gibberish. Stein guessed that these
    two lines were encrypted with the same method but a different keyword. This conjecture
    proved correct, and Stein determined that the keyword for those lines was `PALIMPSEST`.
    (A *palimpsest* is a manuscript page whose text has been scraped or washed off
    so that it can be reused for another text, in such a way that bits of the older
    message can be seen through the new one.) Here’s the Vigenère table used to encrypt
    lines 1 and 2 (note the keyword `PALIMPSEST` in the first column):'
  prefs: []
  type: TYPE_NORMAL
- en: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PTOSABCDEFGHIJLMNQUVWXZKRY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LMNQUVWXZKRYPTOSABCDEFGHIJ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IJLMNQUVWXZKRYPTOSABCDEFGH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MNQUVWXZKRYPTOSABCDEFGHIJL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PTOSABCDEFGHIJLMNQUVWXZKRY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EFGHIJLMNQUVWXZKRYPTOSABCD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TOSABCDEFGHIJLMNQUVWXZKRYP`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The plaintext of the first two lines reads as follows. It includes a misspelled
    word:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For lines 3 through 13, Sanborn used the following Vigenère table based on
    the keyword `ABSCISSA`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`KRYPTOSABCDEFGHIJLMNQUVWXZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BCDEFGHIJLMNQUVWXZKRYPTOSA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CDEFGHIJLMNQUVWXZKRYPTOSAB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IJLMNQUVWXZKRYPTOSABCDEFGH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SABCDEFGHIJLMNQUVWXZKRYPTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCDEFGHIJLMNQUVWXZKRYPTOS`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the corresponding plaintext result (including another spelling error):'
  prefs: []
  type: TYPE_NORMAL
- en: '`IT WAS TOTALLY INVISIBLE HOWS THAT POSSIBLE? THEY USED THE EARTHS MAGNETIC
    FIELD X THE INFORMATION WAS GATHERED AND TRANSMITTED UNDERGRUUND TO AN UNKNOWN
    LOCATION X DOES LANGLEY KNOW ABOUT THIS? THEY SHOULD ITS BURIED OUT THERE SOMEWHERE
    X WHO KNOWS THE EXACT LOCATION? ONLY WW THIS WAS HIS LAST MESSAGE X THIRTY EIGHT
    DEGREES FIFTY SEVEN MINUTES SIX POINT FIVE SECONDS NORTH SEVENTY SEVEN DEGREES
    EIGHT MINUTES FORTY FOUR SECONDS WEST ID BY ROWS`'
  prefs: []
  type: TYPE_NORMAL
- en: In 2006, several years after the solution was made publicly available, Sanborn,
    the creator of *Kryptos*, indicated that the last three words of the plaintext,
    `ID BY ROWS`, were wrong because of a missing `S` in the last line of the ciphertext.
    The intended ending of the plaintext was `X LAYER TWO`. None of the previous solvers
    had noticed this error, as by mere coincidence, the expression `ID BY ROWS` seemed
    to make sense.
  prefs: []
  type: TYPE_NORMAL
- en: The Cyrillic Projector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sanborn is the creator not only of *Kryptos* but also of several other encrypted
    works. For example, in the 1990s, he created another sculpture bearing an encrypted
    message: the *Cyrillic Projector*. It was first displayed in his gallery shows,
    and then in 1997, it found its way to its current location on the campus of the
    University of North Carolina at Charlotte. The *Cyrillic Projector* consists of
    a large bronze cylinder over two meters high, with hundreds of letters carved
    into it. A bright light in the center of the sculpture shines through the letters,
    projecting their images around the courtyard.'
  prefs: []
  type: TYPE_NORMAL
- en: Like in *Kryptos*, the letters on the *Cyrillic Projector* are carved into four
    panels that form the cylinder. The two panels located out of sight in [Figure
    8-6](#figure8-6) display a Vigenère-type tableau in the Russian (Cyrillic) alphabet,
    transposed such that the letters of the word ТЕНЬ (Russian for *shadow*) occur
    at the beginning. It is important to note that the untransposed order of the letters
    in the Cyrillic alphabet varies depending on, among other things, the region where
    it is used. The letter order used for the *Cyrillic Projector* is not the most
    common one.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c08/F08006.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 8-6](#figureanchor8-6): The *Cyrillic Projector*, located on the campus
    of the University of North Carolina at Charlotte, is a sculpture bearing an encrypted
    inscription. The upper-right photograph shows Elonka serving as a screen for the
    projected word `MEDUSA` (the only portion not written in Cyrillic letters).'
  prefs: []
  type: TYPE_NORMAL
- en: The text on the two other panels (shown in the picture) is an encrypted message.
    It is written in Cyrillic script, too, except for the word `MEDUSA` in the fourteenth
    line. In Cyrillic, one would expect this to be spelled `MEДУЗA`; the use of Latin
    letters instead gives a hint about one of the keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ciphertext on the *Cyrillic Projector* is reproduced here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЛTФEЮTФЯЙЯMПXЦФAЧHЩПBБГЖЧCКЬГГЛЗДЭЙП`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЪКXCЙPЭAФHФПЩBПEЦPДФAЩШTКCXCЧЫУXXEЮ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`КУMЛEЧЛЫTOБHEЯЖЖИЬHЭЗЩЦPЛЫБПHФOИИAБЬ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ПИКЛEУPЫCMЪШЛЛБXMXЛЖШPAЩPЙЛПEOOЙЙBЦ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ИЪЛБXЦPЫЧCКAPCPBЯЭФКЮФPЮMOЯЗOЛOДЭШPЗУ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ДXMAЭXOЙГЙЮФMЩXXCBИИЗXAГЙЯЬПCИБPPШOM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`КTCУЯГXУЬЛEУPЫCMЪШCППЯЯЦШУШAЦЧПИMШH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PБЧPЯЫMИУPAДФAИЮЙЫЦЯЛOHУФЖOФШXФЖCБ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BЪЧДЦCФБMДЭШPЗУДXУPБШTOКЩЪMXПOTOXOЩЧ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЖAЦДЩPAЮГOЙBPБГЮБЗГEЖPЙЛПEOOЙЙBЦHЗПГФ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЦЗAИBЯЮФЛЪЦXCЧЫШЬБEOMЩШЖTЭДЙOTTФXПP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ПЛOДЭЩPЗУДXКПГФOЦБЩЪMMЭКЧEPЛMКЪЦЦЗЩЛ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ФЦЧЪЩКBHФAECДПTДФПPЯЙКЮHXBЦБЮEИCЧЯЧЦ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`XMЖЛCПPЧУЛЭШЖЫИИMEDUSAИHXEЗЛЧЗPЗЙКЛ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ППEBЛЧCXЦЫOЙBPБУДXCBЪГЖЧCКAPCPBЯЭФPЩФ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЯЦЩПЪЗЫTФOЙЙУCДTЮTBCБPXCПБЩЛШКУBЙЙГЗ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЙAЧЛЬPЙЭMДЧЧPЬCTHКЙEКДOБЖБЛШИЫЙБЙИДPP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЦXOЩЖBЪКБЧКЖHФПШЦЗУЙДЯГAЧЙКУЗФEЦИЯИ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЙФЭБЛCДTГЗШPЖEДФЩЖЙЯHБOOЬШФПЮКЗЦУДИ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HXEOXПOЙAXДЭCБЩЙЖЭШBЪOДЩBУCЛMЩГЖШУД`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ИГЛEШКПУУEЧДЛCУЦЮTЮHXЪПБУПPЬГИУCБЙЙПЮ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ГAФФEШБФБMЙПИMЪЮКЩXXTHФЩШПEЯБЧККЩ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BЙЩЗЛЮCBЮЙКУКФCЫTЫCBЛCЛЬЗУЦИКЩДPCУPЗ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`XPФЙPЭMPXФЛКФAЙЙКУAЛЩГMЙЖШЪЙЬЩКФHФ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ИДЙPФГКУКAЯЙOУMATЭTЦКBEЖOЙИДЦДКГЩФEЖ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`БЮXЛECCЭCHЩЩXПOЬДЖЙЙЗГEИTЙMAШЙЙУMФC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ЫTЫCBCИДCДPБФHУOPУШTБЗПЪДЗЯЫAAЧКУMAЯX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TMЦPИЦЗЩЛЛEУУПФЖTЭДУXPШЙOPБЭЦЙOПЙЛЪЙ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TЧШЙAФHПШФЭMБЩЪЖTПДЛPШБШБЧPЖЫMHЧЗЫ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TЙЖЪCMЪЧДXКЛHЦПЗXPФЙPЭMPXФMЫБBЪЧБШEФ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`БЖTЩBBЪУБЧКЖAЦПЫГШAMИПPЙЪГOЦКЙГPЛЮБУ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CПБЮPPXФTЫXЖTГИЙКAФMTHКЙФФHЦЙЫCЧБШE`'
  prefs: []
  type: TYPE_NORMAL
- en: After Sanborn made the sculpture accessible to the public, several years passed
    before anyone seriously tried to break the encryption. In 2003, a group of seventy
    *Kryptos* enthusiasts led by Elonka finally took up the cause. Group member Randall
    Bollig captured multiple photos of the *Cyrillic Projector*. Through weeks of
    painstaking work, three other group members, Elonka, Bill Houck, and Brian Hill,
    each created an independent transcript. They later compared their transcripts
    to generate a fully accurate one. (Imagine the difficulty of transcribing Cyrillic
    letters read from backward images of a cylindrical sculpture!) Elonka then published
    the corrected transcript on her website.^([14](b06.xhtml#c08-endnote-14))
  prefs: []
  type: TYPE_NORMAL
- en: 'Soon after the transcript was published, two hobbyist codebreakers, Frank Corr
    and Mike Bales, independently broke the encryption. Neither announced a full English
    solution, as they didn’t speak Russian, the language of the plaintext, and couldn’t
    translate it. When Elonka learned of their potential success, she located a native
    speaker, Anatoly Kolker. He was a colleague of Elonka’s father, Stanley Dunin,
    at the World Bank. Anatoly confirmed that the solution was written in Russian
    and provided the final English translation. The plaintext proved to be composed
    of two texts from the Cold War. It starts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`B Ы C O Ч A Й Ъ И M И C К У C C T B O M B T A Й H O Й P A З B E Д К E C П
    И T A E . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: The cipher used turned out to be a Vigenère variant with the keyword `MEДУЗA`
    (`MEDUSA`) and the alphabet reordered in the same way as on the tableau, with
    the letters `T`, `E```,`H`, and `Ь` transposed to the beginning.^([15](b06.xhtml#c08-endnote-15))
    To create the Vigenère tableau necessary for encrypting the plaintext, we first
    need the following table:``
  prefs: []
  type: TYPE_NORMAL
- en: '`` `АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ`    `----------------------------------`    `А
    ТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯ`    `Б ЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТ`    `В
    НЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕ`    `Г ЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕН`    `Д
    АБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬ`    `Е БВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬА`    `Ж
    ВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБ`    `З ГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВ`    `И
    ДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГ`    `Й ЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГД`    `К
    ЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖ`    `Л ИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗ`    `М
    ЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИ`    `Н КЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙ`    `О
    ЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙК`    `П МОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛ`    `Р
    ОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМ`    `С ПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМО`    `Т
    РСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОП`    `У СУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПР`    `Ф
    УФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРС`    `Х ФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУ`    `Ц
    ХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФ`    `Ч ШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХ`    `Ш
    ЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШ`    `Щ ЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦ`    `Ъ
    ЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧ`    `Ы ЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩ`    `Ь
    ЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪ`    `Э ЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫ`    `Ю
    ЮЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭ`    `Я ЯТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮ`    As
    can be seen, the Cyrillic alphabet (`А`,`Б`,`В`,`Г` . . .) is used to index the
    rows of the table. To encrypt this message, only the rows `M`,`E`,`Д`,`У`,`З`,
    and `A` are relevant. We arrange them such that they form the word `MEДУЗA`:    `АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ`    `----------------------------------`    `М
    ЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИ`    `Е БВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬА`    `Д
    АБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬ`    `У СУФХШЦЧЩЪЫЭЮЯТЕНЬАБВГДЖЗИЙКЛМОПР`    `З
    ГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯТЕНЬАБВ`    `А ТЕНЬАБВГДЖЗИЙКЛМОПРСУФХШЦЧЩЪЫЭЮЯ`    The
    following lines show how the plaintext is mapped to the ciphertext using the reduced
    table:    `Plaintext:` `BЫCOЧAЙЪИMИ . . .`    `Ciphertext: ЛTФEЮTФЯЙЯM . . .`    We
    will leave the full solution as an exercise for those readers who wish to try,
    Cold War–style, to decipher a message in the Cyrillic alphabet!    ### Thouless’s
    second cryptogram from the crypt    In 1948, British psychologist and parapsychologist
    Robert Thouless (1894–1984) started an unusual experiment.^([16](b06.xhtml#c08-endnote-16))
    He took a short text, encrypted it, and published the ciphertext, keeping the
    plaintext and key secret. His plan was to channel the key from the beyond after
    his death. If somebody received the correct key via this paranormal method, they
    would be able to decipher the cryptogram. This experiment, if successful, would
    prove that there is life after death and that the dead can communicate with the
    living—which would certainly be one of the greatest discoveries in the history
    of science.    As far as we know, Thouless’s experiment did not prove successful—nobody
    ever came up with a correct solution received from the beyond. This is also true
    for a similar message created by Thouless’s fellow parapsychologist T.E. Wood,
    whose cryptogram is covered later in this chapter.    To be on the safe side,
    Thouless even published a second ciphertext in 1948, encrypted in a different
    way. However, his plan was foiled, as just a few weeks later, an unknown codebreaker
    solved his first ciphertext. In response, Thouless created a third cryptogram.
    This means that altogether, he left behind three messages in 1948\. The first
    and third are encrypted with variations of a Playfair cipher and are covered in
    [Chapter 12](c12.xhtml).    The encryption method Thouless used for the second
    message is complicated but has some elements that are similar to the Vigenère
    cipher. It used a phrase or text passage as a key. Here’s an example:    `TO BE
    OR NOT TO BE THAT IS THE QUESTION`    From this phrase, he eliminated words that
    had already appeared in the sequence (in this case, `TO` and `BE`), thus shortening
    the text:    `TO BE OR NOT THAT IS THE QUESTION`    Next, he converted each letter
    to a number (such that `A` = `1`, `B` = `2`, `C` = `3` . . .):    `20.15 2.5 15.18
    14.15.20 20.8.1.20 9.19 20.8.5 17.21.5.19.20.9.15.14`    Lastly, he added the
    numbers in each word. For example, the word `NOT` yielded 14 + 15 + 20 = 49\.
    If the result was larger than 26, he repeatedly subtracted 26 until he could derive
    a value between 1 and 26\. In our example, we thus get the following number sequence
    to be used as the key:    `9 7 7 23 23 2 7 16`    To encrypt a message, he added
    each number to the respective letter of the plaintext. If the result was larger
    than 26, he reduced it by 26 once again. For the plaintext `NEBRASKA`, we get
    the ciphertext `WLIOXURQ`:    `Plaintext:` `N E B R A S K A`    `Key: 9 7 7 23
    23 2 7 16`    `Ciphertext: W L I O X U R Q`    Using this method, Thouless produced
    the following ciphertext for his second message:    `INXPH CJKGM JIRPR FBCVY WYWES
    NOECN SCVHE GYRJQ`    `TEBJM TGXAT TWPNH CNYBC FNXPF LFXRV QWQL`    Thouless described
    the sentence he had used for the key as an “identifiable passage in a printed
    work.” Because the cryptogram consists of seventy-four letters, this passage had
    at least seventy-four words (though it could have had more, as Thouless had removed
    any duplicate words).    Thouless died in 1984, leaving his second and third cryptograms
    still unsolved. The third was broken (through non-psychic means) a decade later
    (see [Chapter 12](c12.xhtml)), while his second cryptogram remained unsolved for
    decades. Then, in August 2019, Klaus received a notice from Richard Bean, a computer
    expert and codebreaker from Brisbane, Australia,^([17](b06.xhtml#c08-endnote-17))
    who claimed to have broken this challenge. Klaus and his readers checked Richard’s
    solution, and it proved correct.    Richard believed that the only way to solve
    the second Thouless challenge was to find the text that had been used as the key.
    Hoping that Thouless had taken this text from a publicly available book, Richard
    decided to start a search at Project Gutenberg, which is the largest digital book
    collection available on the internet. Just about every book Thouless might have
    known about in 1948 is available today in the Gutenberg collection.    Richard
    downloaded 37,000 (!) books from Project Gutenberg. Then, using a computer program,
    he extracted all possible phrases consisting of seventy-four words, not counting
    repetitions, which resulted in a collection of hundreds of millions of key candidates.
    Next, he let his program decrypt Thouless’s ciphertext with every one of the candidate
    phrases and had it check whether the result looked like English. For this test,
    he used hexagraph frequencies (see [Chapter 16](c16.xhtml)).    After several
    days of computation time, Richard’s computer program deemed that the following
    plaintext had the closest resemblance to English text:    `CEVHHZGMKLUCCESSFULEXPERIMENTSOFTNEKKIWTDXDAU`    `GIVESTRVMGEVIDENCEFOROXRVIVAL`    This
    letter sequence didn’t look completely correct, but it was clear that there were
    fragments of recognizable English text within it. When Richard spotted the fragments
    `UCCESSFULEXPERIMENTSOF` and `EVIDENCEFOR`, he realized that he was close to the
    solution. After a few adjustments, the following plaintext appeared:    `A NUMBER
    OF SUCCESSFUL EXPERIMENTS OF THIS KIND WOULD GIVE STRONG EVIDENCE FOR SURVIVAL`    After
    seventy-one years, Thouless’s second challenge was broken! Though, of course,
    not in the way he had intended.    As it turned out, the passage Thouless had
    used as his key came from Project Gutenberg book 41215, *Selected Poems of Francis
    Thompson* (1908). The passage in question consisted of the first seventy-four
    words (not counting doubles) of a poem titled “The Hound of Heaven.” This excerpt
    from the poem is reproduced here, with duplicates crossed out:    I FLED HIM,
    DOWN THE NIGHTS AND DOWN THE DAYS;    I FLED HIM, DOWN THE ARCHES OF THE YEARS;    I
    FLED HIM, DOWN THE LABYRINTHINE WAYS    OF MY OWN MIND; AND IN THE MIST OF TEARS    I
    HID FROM HIM, AND UNDER RUNNING LAUGHTER    UP VISTAED HOPES I SPED;    AND SHOT,
    PRECIPITATED,    ADOWN TITANIC GLOOMS OF CHASMÈD FEARS,    FROM THOSE STRONG FEET
    THAT FOLLOWED, FOLLOWED AFTER.    BUT WITH UNHURRYING CHASE    AND UNPERTURBÈD
    PACE    DELIBERATE SPEED, MAJESTIC INSTANCY,    THEY BEAT—AND A VOICE BEAT    MORE
    INSTANT THAN THE FEET—    ‘ALL THINGS BETRAY THEE, WHO BETRAYEST ME.’    I PLEADED,
    OUTLAW-WISE,    BY MANY A HEARTED CASEMENT, CURTAINED RED,    TRELLISED . . .    Richard
    had even known this poem. Its creator, Francis Thompson (1859–1907), was a well-known
    English poet of the Victorian era. “The Hound of Heaven” was his most famous work.    In
    1995, Jim Gillogly and Larry Harnisch, who solved Thouless’s third message (see
    [Chapter 12](c12.xhtml)), had started a very similar attack on Thouless’s second
    challenge.^([18](b06.xhtml#c08-endnote-18)) They tried several hundred books from
    Project Gutenberg, to no avail. As it turned out, their attempt on the second
    message had simply come too early. The book that contained the passage they were
    looking for, which would have helped them solve the second message, entered the
    Gutenberg collection just seventeen years later, in 2012.    ### The Smithy Code    In
    early 2006, authors Michael Baigent and Richard Leigh filed suit against Random
    House, the publisher of Dan Brown’s bestselling 2003 novel *The Da Vinci Code*.
    They alleged that parts of this bestseller were plagiarized from their 1982 nonfiction
    book *Holy Blood, Holy Grail*. Judge Peter Smith, who presided over the trial,
    ruled against Baigent and Leigh, arguing that, as a novelist, Brown was free to
    use ideas from a nonfictional work in a fictional context.    Incredibly, Smith
    hid his own code in his written judgment! He italicized forty-one letters throughout
    the text, producing the following character sequence:    *smithycodeJaeiextostgpsacgreamqwfkadpmqzv*    After
    “smithy code,” the rest of the characters represent an encrypted message:    `Jaeiextostgpsacgreamqwfkadpmqzvs`    The
    assumption that this line is a cryptogram is supported by the following sentence
    contained in Smith’s text: “The key to solving the conundrum posed by this judgment
    is in reading HBHG and DVC.” HBHG and DVC are abbreviations of the book titles
    involved in the trial, namely, *Holy Blood, Holy Grail* and *The Da Vinci Code*.    Many
    codebreakers all over the world tried to decipher the “Smithy Code” message, and
    Dan Tench, a British lawyer and journalist, was the first one to succeed (after
    a few hints from the judge).^([19](b06.xhtml#c08-endnote-19)) Based on frequency
    analysis, Tench guessed that he was dealing with a Vigenère cipher or a similar
    polyalphabetic encryption system. The repetition of the digraph `MQ` after eight
    letters suggested that Smith had used an eight-letter keyword. (This reasoning
    is an application of Kasiski’s method.)    Following Smith’s hint that the solution
    to the challenge could be found in the two books involved in the lawsuit, Tench
    tried to use Fibonacci numbers as the key. The Fibonacci sequence is a famous
    pattern that starts with 1, 1 and continues with numbers that are the sum of the
    two preceding ones, like this: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, and so forth.
    Fibonacci numbers play a role in both *Holy Blood, Holy Grail* and *The Da Vinci
    Code*, so it seemed plausible that Smith had used them as a key of some sort.    Assuming
    that Smith had applied an eight-character Vigenère keyword, Tench tried the first
    eight Fibonacci numbers: `1`, `1`, `2`, `3`, `5`, `8`, `13`, and `21`. After some
    trial and error, he saw that this keyword delivered meaningful words when added
    to the ciphertext (instead of the usual method of being subtracted from it). In
    addition, each number in the key had to be diminished by one. So, instead of `1`,
    `1`, `2`, `3`, `5`, `8`, `13`, `21`, it started with `0`, `0`, `1`, `2`, `4`,
    `7`, `12`, `20`, and then repeated. There was a further twist: the judge’s key
    combined the fourth and fifth numbers of the modified Fibonacci sequence, which
    became `0`, `0`, `24`, `2`, `4`, `7`, `12`, `20`. Here’s a description of the
    decryption process:    `Ciphertext: J a e i e x t o s t g p s a c`    `Key: 0
    0 24 2 4 7 12 20 0 0 24 2 4 7 12`    `Plaintext:` `J A C K I E F I S T E R W H
    O`    `Ciphertext: g r e a m q w f k a d p m q z v`    `Key: 20 0 0 24 2 4 7 12
    20 0 0 24 2 4 7 12`    `Plaintext:` `A R E Y O U D R E A D N O U G H`    This
    produced the following plaintext:    `JACKIEFISTERWHOAREYOUDREADNOUGH`    The
    text contains two mistakes: the `T` should be an `H`, and a `T` is missing at
    the end. Here’s the correct plaintext:    `JACKIE FISHER WHO ARE YOU DREADNOUGHT`    These
    words refer to Admiral Jackie Fisher (1841–1920), an important figure in British
    naval history, and the battleship HMS *Dreadnought*, which Fisher commissioned
    and planned. Judge Smith was known to be a great admirer of Jackie Fisher, and
    the launch of the first dreadnought-class battleship, whose design was revolutionary
    and made all earlier battleships obsolete, had taken place one hundred years before
    the trial. This cryptogram was his way of commemorating the centennial.    ##
    Challenges    ### The Schooling challenge    In 1896, British statistician and
    journalist John Holt Schooling (1859–1927) published a challenge cipher.^([20](b06.xhtml#c08-endnote-20))
    It consists of a sequence of two-digit numbers. To make things a little easier,
    we will also reveal that each number represents a letter, as shown in the following
    table (note that `J` is missing):    `12345`    `-----`    `1|ABCDE`    `2|FGHIK`    `3|LMNOP`    `4|QRSTU`    `5|VWXYZ`    The
    substitution takes place as follows: `A` = `11`, `B` = `12`, `C` = `13` . . .
    `Y` = `54`, `Z` = `55`. We can then define a Vigenère cipher based on this number
    system. For instance, if we encrypt the plaintext `CODEBREAKING` (`13 34 14 15
    12 42 15 11 25 24 33 22`) with the keyword `ABC` (`11 12 13`), we get:    `13
    34 14 15 12 42 15 11 25 24 33 22`    `11 12 13 11 12 13 11 12 13 11 12 13`    `-----------------------------------`    `24
    46 27 26 24 55 26 23 38 35 45 35`    Here’s a ciphertext Schooling created with
    this method, using the keyword `TYRANT`:    `76 69 57 55 65 59 68 87 77 22 75
    68 87 88 75 43 67 77 58 65 96`    Can you solve this challenge cipher?    ###
    A German radio message from the Second World War    In October 1941, a US Coast
    Guard unit intercepted the following radio message transmitted from Hamburg, Germany,
    to a recipient in Rio de Janeiro, Brazil:^([21](b06.xhtml#c08-endnote-21))    `DDLUX
    CQSFV INNNW FRFZA GQBGI`    `WREKU ZPRIY HJXFS JRUJP TYXRH`    `SABWC GQFYD MIWYP
    VHJBE KMEHJ`    `WGQAI JYNPV USQLJ DHOIV HQXRN`    `HSJRU VJKTY NPPBI SEKKV OIVSC`    `GQBTS
    NUPXS FVHQU WBFFS PTXQT`    `FSXJQ FWJSW UWPTC JIWHH PJHQD`    `HUVFZ DPJBF XFAVH
    URBHQ TLDLU`    `XCQSD ESQXU`    American codebreakers soon discovered that this
    message was encrypted with a Vigenère cipher. The plaintext is in German, and
    the key is not a word but is derived from a mathematical constant. Can you break
    this cryptogram?    ## Unsolved cryptograms    ### Wood’s cryptogram from the
    crypt    Robert Thouless, whose unusual life-after-death experiments were discussed
    in a previous section of this chapter, encouraged others to perform similar attempts
    at communicating after their death. The more people who took encryption keys to
    their grave, he hoped, the higher the probability that somebody would be able
    to channel this information from the beyond. One person who answered this call
    to arms was solicitor T.E. Wood (1887–1972) from Bournemouth, United Kingdom.
    Wood used the same method as Thouless used for his second message for encryption,
    which means that his key is a passage from a text available to the public (such
    as a book chapter). However, he added a twist; his plaintext was written in multiple
    languages, and his key was taken from a non-English work. Wood’s cryptogram is
    reproduced below.    `FVAMI NTKFX XWATB OIZVV X`    Wood’s encrypted message is
    unsolved to date. Apparently, nobody has yet received the key from the beyond!
    ``'
  prefs: []
  type: TYPE_NORMAL
