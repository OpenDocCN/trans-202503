- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Automating and Testing a Host-Based Firewall
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化和测试基于主机的防火墙
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: It would be dangerous for a production server, especially one exposed to the
    internet, to not filter its network traffic. As software or DevOps engineers,
    we open up ports for services like SSH or web servers as a necessary, accepted
    risk. However, that does not mean we should ignore all other traffic destined
    for our host. To minimize risks, we need to filter all other traffic and make
    pragmatic decisions on what gets in and what gets out. Therefore, we use *firewalls*
    to monitor the incoming and outgoing packets on a network or host. Firewalls come
    in two varieties. A *network firewall* is usually an appliance through which all
    traffic flows from one network to another, while a *host-based* *firewall* controls
    the packets coming in and out of a single host.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一台生产服务器，特别是暴露在互联网上的服务器，不过滤其网络流量是很危险的。作为软件或 DevOps 工程师，我们会为像 SSH 或 Web 服务器这样的服务开放端口，这是一种必要的、被接受的风险。然而，这并不意味着我们可以忽略所有其他目的地为我们主机的流量。为了最小化风险，我们需要过滤所有其他流量，并在允许进出的流量上做出务实的决策。因此，我们使用*防火墙*来监控网络或主机上的进出数据包。防火墙有两种类型。*网络防火墙*
    通常是一个设备，所有流量都通过它从一个网络流向另一个网络，而 *基于主机的* *防火墙* 控制进出单一主机的数据包。
- en: In this chapter, you’ll focus on host-based firewalls. You’ll learn how to automate
    a host-based firewall using Ansible, some provided tasks, and a software application
    called Uncomplicated Firewall (UFW). This firewall will block all inbound traffic
    except SSH connections and the Greeting web application you installed in Chapter
    4. By the end of this chapter, you’ll understand how to automate a basic host-based
    firewall and be able to audit log events from the firewall.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将专注于基于主机的防火墙。你将学习如何使用 Ansible、一些提供的任务和一个叫做 Uncomplicated Firewall (UFW)
    的软件应用来自动化配置基于主机的防火墙。这个防火墙将阻止所有传入流量，除了 SSH 连接和你在第 4 章中安装的 Greeting Web 应用。到本章结束时，你将理解如何自动化基本的基于主机的防火墙，并能够审计来自防火墙的日志事件。
- en: Planning the Firewall Rules
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划防火墙规则
- en: Firewall rules need to be very explicit about what traffic to permit and what
    traffic to deny. If you accidentally block a port (or worse, leave one exposed),
    the outcome will be less than desirable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙规则需要非常明确地指定允许哪些流量，拒绝哪些流量。如果你不小心屏蔽了一个端口（或更糟，留下了一个暴露的端口），结果将会非常不理想。
- en: 'You can divide the firewall traffic flow into three default parts, called *chains*.
    Think of a chain as a door through which a packet must pass. Each door leads to
    a specific place when properly routed packets arrive. Here are brief descriptions
    of the functions of the three default chains that you have access to in UFW:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将防火墙的流量分为三个默认部分，称为*链*。可以将链看作是一个门，数据包必须通过这个门。每个门当正确路由的数据包到达时，都会引导到特定的地方。以下是
    UFW 中你可以访问的三个默认链的简要描述：
- en: Input chain Filters packets destined for the host
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入链 过滤目标主机的数据包
- en: Output chain Filters packets originating from the host
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出链 过滤源自主机的数据包
- en: Forward chain Filters packets that are being routed through the host
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转发链 过滤正在通过主机路由的数据包
- en: The firewall rules you’ll create will only be for the input chain, because you’re
    focusing on the inbound traffic to your VM. The forward and output chains are
    beyond the scope of this book, as you are building a simple host-based firewall.
    If you need to block outgoing ports and forward network traffic, visit [https://ubuntu.com/server/docs/security-firewall/](https://ubuntu.com/server/docs/security-firewall/)for
    more details.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建的防火墙规则只会应用于输入链，因为你关注的是传入 VM 的流量。转发链和输出链超出了本书的范围，因为你正在构建一个简单的基于主机的防火墙。如果你需要屏蔽出去的端口并转发网络流量，请访问[https://ubuntu.com/server/docs/security-firewall/](https://ubuntu.com/server/docs/security-firewall/)获取更多详情。
- en: The firewall rules you’ll implement will allow incoming traffic for two known
    ports while rejecting all others. You’ll need to open port `22` for shell access
    (SSH) and Ansible provisioning; plus, you’ll open port `5000` for the web application.
    You’ll also add rate limiting to port `5000`, to protect the web server and host
    from excessive abuse. Finally, you’ll enable the firewall log so you can audit
    the network traffic that comes through the firewall on the VM.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将实现的防火墙规则将允许两种已知端口的传入流量，同时拒绝所有其他流量。你需要为 shell 访问（SSH）和 Ansible 配置开放端口 `22`；此外，还需要为
    Web 应用开放端口 `5000`。你还将对端口 `5000` 添加速率限制，以保护 Web 服务器和主机免受过度滥用。最后，你将启用防火墙日志，以便审计通过防火墙的网络流量。
- en: Automating UFW Rules
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化 UFW 规则
- en: '*Uncomplicated Firewall (UFW)* is a software application that provides a thin
    wrapper around the iptables framework, which is the root of kernel-based packet
    filtering for Unix OSs. To be specific, iptables, Netfilter, connection tracking,
    and network address translation (NAT) make up the packet-filtering framework.
    UFW hides the complexity associated with using iptables. Along with Ansible, it
    makes setting up a host-based firewall simple, easy, and repeatable. Therefore,
    you’ll use Ansible tasks to create rules with UFW.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单防火墙 (UFW)* 是一个软件应用程序，它为 iptables 框架提供了一个简化的封装，iptables 是基于内核的 Unix 操作系统包过滤的根本所在。具体来说，iptables、Netfilter、连接跟踪和网络地址转换
    (NAT) 共同构成了包过滤框架。UFW 隐藏了使用 iptables 时的复杂性。结合 Ansible，它使得基于主机的防火墙设置变得简单、易于操作并且可重复。因此，您将使用
    Ansible 任务来通过 UFW 创建规则。'
- en: 'The Ansible tasks to configure the firewall are located under the *ansible/chapter5/*
    directory. These rules will go into effect once you provision the VM, so let’s
    review them before provisioning. Navigate to the *ansible/chapter5/* directory
    and open the task file named *firewall.yml* in your favorite editor. This file
    has the following five tasks in it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 配置防火墙的 Ansible 任务位于 *ansible/chapter5/* 目录下。只有在配置虚拟机后，这些规则才会生效，因此在配置之前让我们先回顾一下这些规则。请导航到
    *ansible/chapter5/* 目录并用您喜欢的编辑器打开名为 *firewall.yml* 的任务文件。该文件包含以下五个任务：
- en: Turn `Logging` level to low.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Logging` 级别设置为低。
- en: Allow SSH over port `22`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许通过 `22` 端口的 SSH 连接。
- en: Allow all access to port `5000`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许所有访问 `5000` 端口。
- en: Rate limit excessive abuse on port `5000`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制对 `5000` 端口的过度滥用。
- en: Drop all other traffic.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 丢弃所有其他流量。
- en: 'The first task at the top of the file should look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件顶部的第一个任务应该如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This task turns on `logging` for UFW and sets the log level to `low`. The Ansible
    `ufw` module creates rules and policies for the firewall on the VM. You can set
    the `logging` parameter to `off`, `low`, `medium`, `high`, or `full`. The `low`
    log level will log any blocked packets that do not match your default policy and
    any other firewall rules you have added. The `medium` level does everything the
    `low` level does, plus it logs all allowed packets that do not match the default
    policy and all new connections. The `high` log level does everything the `medium`
    does, but it also logs all packets with some rate limiting of the messages. If
    you have a lot of disk space and want to know everything possible about every
    packet on your host, set the log level to `high`. Any setting above `medium` will
    generate a lot of log data and could fill up disks fast on a busy host, so be
    careful with those log settings.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务启用 `logging` 功能来记录 UFW 日志，并将日志级别设置为 `low`。Ansible 的 `ufw` 模块用于在虚拟机上创建防火墙规则和策略。您可以将
    `logging` 参数设置为 `off`、`low`、`medium`、`high` 或 `full`。`low` 日志级别将记录任何未匹配默认策略的被阻止数据包，以及您添加的任何其他防火墙规则。`medium`
    级别会做 `low` 级别做的所有事情，并额外记录所有未匹配默认策略的允许数据包和所有新连接。`high` 日志级别会做 `medium` 级别做的所有事情，但它还会记录所有数据包，并对日志消息进行一定的速率限制。如果您的磁盘空间充足，并且想知道关于主机上的每个数据包的所有信息，可以将日志级别设置为
    `high`。任何高于 `medium` 的设置都会生成大量日志数据，并可能在繁忙的主机上快速填满磁盘，因此请小心使用这些日志设置。
- en: 'Next, let’s look at the second task from the top, which opens port `22` for
    SSH connections. It should look like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下文件顶部的第二个任务，它为 SSH 连接打开 `22` 端口。它应该如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the Ansible `ufw` module creates a `rule` that allows an incoming connection
    from any source IP address, using the TCP transport protocol to port `22` on the
    VM. You can set the `rule` parameter to `deny`, `limit`, or `reject`, depending
    on your use case. For example, if you want to stop a connection on a specific
    port but don’t mind sending a rejection reply to the remote host, you should choose
    `reject`. The rejection reply will tell the remote system that you are up and
    running but not accepting traffic on that port. On the other hand, if you want
    to drop the incoming packet on the floor without any reply to the remote host,
    choose a `deny` rule. This can make it harder for someone scanning your host to
    know if the host is up and running. (I’ll discuss the `limit` rule in detail later.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Ansible 的 `ufw` 模块创建了一个 `rule`，它允许来自任何源 IP 地址的连接，使用 TCP 协议连接到虚拟机的 `22` 端口。根据您的使用场景，您可以将
    `rule` 参数设置为 `deny`、`limit` 或 `reject`。例如，如果您想停止某个端口的连接，但不介意向远程主机发送拒绝回复，您应该选择
    `reject`。拒绝回复将告诉远程系统您已经启用但不接受该端口上的流量。另一方面，如果您想直接丢弃传入的数据包而不向远程主机发送任何回复，则选择 `deny`
    规则。这会使得扫描您的主机的人更难知道主机是否在运行。（稍后我会详细讨论 `limit` 规则。）
- en: 'The next task is the rule to allow remote connections on port `5000` to the
    Greeting web application. It should look like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是允许通过端口`5000`进行远程连接到Greeting Web应用程序的规则。它应该像这样：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This `rule` behaves the same as the previous task, except that it permits port
    `5000` over TCP instead of port `22`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`rule`与之前的任务行为相同，只不过它允许通过TCP连接端口`5000`，而不是端口`22`。
- en: 'The fourth task in the file limits the number of connections to port `5000`
    (Greeting server) over a given time frame. This is useful when you want to automatically
    stop someone from abusing your service, whether they are legitimate or suspicious.
    It should look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的第四个任务限制了在特定时间范围内对端口`5000`（Greeting服务器）的连接数量。这对于你想要自动阻止某人滥用服务非常有用，无论该用户是合法的还是可疑的。它应该像这样：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The default rate-limiting feature for UFW states it will deny any connection
    from a source if that source tries to make more than six connections in a 30-second
    time span. This is helpful if you host a public service like an API or web server.
    You could use the limit to temporarily impede users from obsessively hitting your
    service. Another example where this would be beneficial is to limit brute-force
    attempts over SSH on a *bastion host*, which is a hardened host that system administrators
    use to remotely access a private network. However, be careful with this default
    limit setting, as it may be too restrictive for a production setting. Allowing
    a remote system to connect more than six times in 30 seconds might be normal traffic
    for you. You’ll test the rate-limiting rule later in this chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: UFW的默认速率限制功能规定，如果某个源在30秒内尝试进行超过六次连接，则会拒绝该连接。如果你托管像API或Web服务器这样的公共服务，这个功能非常有用。你可以利用速率限制临时阻止用户频繁访问你的服务。另一个适用的场景是限制SSH上的暴力破解尝试，尤其是在*堡垒主机*上，堡垒主机是系统管理员用来远程访问私有网络的强化主机。然而，使用这个默认的限制设置时要小心，因为它可能对生产环境过于严格。允许远程系统在30秒内连接超过六次，可能对你来说是正常的流量。你将在本章稍后测试速率限制规则。
- en: 'If you want to adjust the default rate limit setting, create a new task using
    the `lineinfile` module (see Chapter 3) to locate and update the line in */etc/ufw/user.rules*
    that looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想调整默认的速率限制设置，使用`lineinfile`模块（参见第3章）创建一个新任务，以定位并更新`/etc/ufw/user.rules`中的那一行，应该像这样：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Change the `hitcount` and `seconds` options to whatever makes sense for your
    environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的环境需要，修改`hitcount`和`seconds`选项。
- en: 'The last task in this file drops all traffic that has not matched any other
    rules up to this point. Remember, Ansible executes the tasks in order. The drop
    rule should look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本文件中的最后一个任务会丢弃所有到目前为止未匹配任何其他规则的流量。记住，Ansible是按顺序执行任务的。丢弃规则应该像这样：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that there is no `rule` parameter here. This task sets the `state` of
    the `ufw` service to be enabled on the VM. It also sets the default `incoming`
    policy to `deny`, which forces you to whitelist all the services that need to
    be exposed. This also protects you if someone accidentally misconfigures a service
    and opens up a port on the host.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里没有`rule`参数。这个任务将VM上`ufw`服务的`state`设置为启用。它还将默认的`incoming`策略设置为`deny`，这强制你将所有需要暴露的服务列入白名单。如果有人不小心配置错误并打开了主机的端口，这也能保护你。
- en: As mentioned previously, Ansible reads tasks from the top down, and UFW rules
    are read in the same order. If the `drop` rule were the first task in the file,
    it would set the policy to drop all traffic and then turn on the firewall. That
    `drop` rule would match all inbound packets and drop them, stopping the search
    of any other rules that possibly could match. Not only would you lose access to
    the VM, but you would also drop the connection made by Ansible over SSH. This
    means the provisioning would fail and potentially leave the machine in a bad state,
    so be sure to keep the order in mind when adding or removing rules.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Ansible按顺序从上到下读取任务，而UFW规则也是按相同顺序读取的。如果`drop`规则是文件中的第一个任务，它将把策略设置为丢弃所有流量，并启用防火墙。那时`drop`规则会匹配所有传入的包并丢弃它们，停止对任何其他可能匹配的规则的搜索。这样，你不仅会失去对虚拟机的访问，还会丢失Ansible通过SSH建立的连接。这意味着配置过程会失败，可能会导致机器处于不正常的状态，因此在添加或删除规则时务必记住顺序。
- en: Provisioning the VM
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置虚拟机
- en: 'To run all the tasks for this chapter, you’ll need to uncomment them in the
    playbook. This is the same process as in the previous chapters and should be familiar
    by now. Open the *ansible/site.yml*file in your editor and locate the task for
    installing the `firewall`. It should look like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章的所有任务，你需要在剧本中取消注释它们。这与之前章节的过程相同，应该已经熟悉了。打开*ansible/site.yml*文件，在编辑器中找到安装`firewall`的任务。它应该看起来像这样：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Remove the `#` symbol to uncomment it. The playbook should now look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 移除`#`符号以取消注释。此时，剧本应该如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The changes to the playbook for Chapter 5 are added on to the changes from Chapter
    4.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章对剧本的更改是在第4章的基础上添加的。
- en: 'Now, it’s time to run the Ansible tasks using Vagrant. Navigate back to the
    *vagrant/* directory where your *Vagrantfile* is located and enter the following
    command to provision the VM:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，到了使用Vagrant运行Ansible任务的时候了。返回到包含*Vagrantfile*的*vagrant/*目录，并输入以下命令来配置虚拟机：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The total task count has increased to `26`, and `6` things on the VM have changed:
    the five new tasks from this chapter and one task that updates the timestamp on
    the empty file from Chapter 2\. Once again, make sure no actions failed before
    you continue.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总任务数量已增加到`26`，虚拟机上有`6`项更改：本章的五个新任务和一个更新第2章空文件时间戳的任务。继续之前，再次确认没有任务失败。
- en: Testing the Firewall
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试防火墙
- en: Next, you’ll want to test that your host-based firewall is enabled, permitting
    the two whitelisted ports, blocking all other ports, and rate-limiting the Greeting
    application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要测试基于主机的防火墙是否已启用，允许两个白名单端口，阻止所有其他端口，并对Greeting应用程序进行速率限制。
- en: First, you’ll need to be able to access the VM from your local host, so grab
    an IP address from your VM. In the *Vagrantfile*, you told Vagrant to create another
    interface and let VirtualBox give it an address from a range using DHCP.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要能够从本地主机访问虚拟机，因此先从虚拟机获取一个IP地址。在*Vagrantfile*中，你告诉Vagrant创建另一个接口，并让VirtualBox通过DHCP从一个范围内分配地址。
- en: 'If you are no longer logged in to the VM, log in as *bender*again and grab
    another 2FA token, if needed. This time, grab the third 2FA token from the top
    of the *ansible/chapter3/google_authenticator* file, which should be `52973407`.
    Once you have it, enter the following command in your terminal to log in as *bender*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不再登录虚拟机，请重新以*bender*身份登录并获取另一个2FA令牌（如果需要）。这次，从*ansible/chapter3/google_authenticator*文件顶部获取第三个2FA令牌，它应该是`52973407`。获得后，在终端中输入以下命令以*bender*身份登录：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, use the `ip` command to grab the IP address from the interface you instructed
    Vagrant and VirtualBox to create. This command is primarily used to list and manipulate
    network routes and devices on a Linux host. From the VM terminal, enter the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`ip`命令从你指示Vagrant和VirtualBox创建的接口中获取IP地址。此命令主要用于列出和操作Linux主机上的网络路由和设备。在虚拟机终端中，输入以下命令：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output above shows that the `ip` command has completed successfully. The
    `-4` flag limits the output to only IPv4 addresses. The `-br` flag prints just
    the basic interface information, like IP address and name, and the ``addr command
    tells `ip` to show the address information for the network interfaces.``
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示`ip`命令已成功完成。`-4`标志将输出限制为仅显示IPv4地址。`-br`标志仅打印基本的接口信息，如IP地址和名称，``addr命令告诉`ip`显示网络接口的地址信息。``
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
