- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Managing Dependencies
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖管理
- en: In March 2016, thousands of JavaScript projects began failing to compile when
    a single package, `left-pad`, disappeared. The `left-pad` was a library with a
    single method that simply left-padded a string to a specific character width.
    Several foundational JavaScript libraries depended on `left-pad`. In turn, many
    projects depended on these libraries. Thanks to the viral nature of transitive
    dependencies, thousands and thousands of open source and commercial codebases
    had a critical dependency on this fairly trivial library. When the package was
    removed from NPM (JavaScript’s Node Package Manager), a lot of programmers had
    a rough day.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年 3 月，当一个名为 `left-pad` 的包消失时，成千上万的 JavaScript 项目开始无法编译。`left-pad` 是一个只有一个方法的库，这个方法只是将字符串填充到指定的字符宽度。几个基础的
    JavaScript 库依赖于 `left-pad`，而这些库又被许多项目依赖。由于传递性依赖的病毒式传播，成千上万的开源和商业代码库在这个相对微不足道的库上有一个关键依赖。当这个包从
    NPM（JavaScript 的节点包管理器）中移除时，许多程序员度过了艰难的一天。
- en: 'Adding a dependency on existing code seems like a simple decision. Don’t repeat
    yourself (DRY) is a commonly taught principle. Why should we all write our own
    `left-pad`? Database drivers, application frameworks, machine learning packages—there
    are many examples of libraries you should not write from scratch. But dependencies
    bring risk: incompatible changes, circular dependencies, version conflicts, and
    lack of control. You must consider these risks and how to mitigate them.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对现有代码的依赖看似是一个简单的决定。不要重复自己（DRY）是一个常见的原则。我们为什么要自己编写 `left-pad` 呢？数据库驱动程序、应用框架、机器学习包——有许多不应该从头开始编写的库。然而，依赖项带来了风险：不兼容的变化、循环依赖、版本冲突和缺乏控制。你必须考虑这些风险以及如何降低它们。
- en: 'In this chapter, we cover the basics of dependency management and talk about
    every engineer’s nightmare: dependency hell.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将讨论依赖管理的基础知识，并谈论每个工程师的噩梦：依赖地狱。
- en: Dependency Management Basics
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖管理基础
- en: Before we can talk about problems and best practices, we must introduce you
    to common dependency and versioning concepts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论问题和最佳实践之前，我们必须向你介绍常见的依赖项和版本管理概念。
- en: A *dependency* is code that your code relies on. The time at which a dependency
    is needed—during compilation, testing, or runtime—is called its *scope*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*依赖项*是你的代码所依赖的代码。依赖项需要的时间——是编译时、测试时还是运行时——被称为它的*范围*。'
- en: 'Dependencies are declared in package management or build files: Java’s Gradle
    or Maven configs, Python’s *setup.py* or *requirements.txt*, and JavaScript’s
    NPM *package.json*. Here is a snippet of a Java project’s *build.gradle* file:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项在包管理或构建文件中声明：Java 的 Gradle 或 Maven 配置，Python 的 *setup.py* 或 *requirements.txt*，以及
    JavaScript 的 NPM *package.json*。以下是一个 Java 项目的 *build.gradle* 文件片段：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The project depends on version 4.3.6 of an HTTP client library and version
    1.7.2 of an SLF4J application programming interface (API) library. Each dependency
    is declared with a `compile` scope, meaning the dependencies are needed to compile
    the code. Each package has a version defined: 4.3.6 for `httpclient` and 1.7.2
    for `slf4j`. Versioned packages are used to control when dependencies change and
    to resolve conflicts when different versions of the same package appear (more
    on this later).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 项目依赖于版本 4.3.6 的 HTTP 客户端库和版本 1.7.2 的 SLF4J 应用程序编程接口（API）库。每个依赖项都声明为 `compile`
    范围，意味着在编译代码时需要这些依赖项。每个包都有一个定义的版本：`httpclient` 为 4.3.6，`slf4j` 为 1.7.2。使用带版本的包来控制依赖项的变化，并在出现不同版本的同一包时解决冲突（稍后会详细说明）。
- en: A good versioning scheme has versions that are
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的版本管理方案应该具有如下版本：
- en: Unique Versions should never be reused. Artifacts get distributed, cached, and
    pulled by automated workflows. Never republish changed code under an existing
    version.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一版本应当永远不被重用。构件会被分发、缓存并通过自动化工作流拉取。绝不要在现有版本下重新发布更改的代码。
- en: Comparable Versions should help humans and tools reason about version precedence.
    *Precedence* is used to resolve conflicts when a build depends on multiple versions
    of the same artifact.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可比版本应该帮助人类和工具推断版本的优先级。*优先级*用于解决当构建依赖于同一构件的多个版本时的冲突。
- en: Informative Versions differentiate between prereleased and released code, associate
    build numbers to artifacts, and set stability and compatibility expectations.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信息化版本区分了预发布和发布的代码，将构建号与构件关联，并设置稳定性和兼容性的期望。
- en: Git hashes or “marketing-related” versions like Android OS’s dessert series
    (Android Cupcake, Android Froyo) or Ubuntu’s alliterative animals (Trusty Tahr,
    Disco Dingo) satisfy the uniqueness property, but they are not comparable or informative.
    Similarly, a monotonically increasing version number (1, 2, 3) is both unique
    and comparable, but not terribly informative.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Git哈希值或类似Android操作系统甜点系列（Android Cupcake、Android Froyo）或Ubuntu的押头动物命名（Trusty
    Tahr、Disco Dingo）等“市场相关”版本满足唯一性属性，但它们不可比且缺乏信息性。同样，单调递增的版本号（1、2、3）既是唯一的也是可比的，但信息量不大。
- en: Semantic Versioning
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语义版本控制
- en: 'The packages in the previous example use a versioning scheme called *semantic
    versioning* *(SemVer)*, one of the most commonly used versioning schemes. The
    official SemVer specification is available at [https://semver.org/](https://semver.org/).
    The spec defines three numbers: the major, minor, and patch version (sometimes
    called the *micro version*). Version numbers are combined into a single MAJOR.MINOR.PATCH
    version number. The `httpclient` version 4.3.6 has a major, minor, and patch of
    4, 3, and 6, respectively.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例中的包使用了一种名为*语义版本控制*（*Semantic Versioning*，简称SemVer）的版本控制方案，这是最常用的版本控制方案之一。官方SemVer规范可以在[https://semver.org/](https://semver.org/)找到。该规范定义了三个数字：主版本号、次版本号和修补版本号（有时称为*微版本*）。版本号以单一的MAJOR.MINOR.PATCH形式组合。`httpclient`版本4.3.6的主版本、次版本和修补版本分别是4、3和6。
- en: Semantic versions are unique, comparable, and informative. Each version number
    is used once and can be compared by going left to right (2.13.7 is before 2.14.1).
    They provide information about compatibility between different versions and can
    optionally encode release candidate or build number information.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 语义版本具有唯一性、可比性和信息性。每个版本号只使用一次，可以通过从左到右进行比较（2.13.7在2.14.1之前）。它们提供了不同版本之间兼容性的信息，并且可以选择性地编码发布候选版本或构建号信息。
- en: 'Major version 0, considered “prerelease,” is intended for fast iteration; no
    compatibility guarantees are made. Developers can change APIs in ways that break
    older code, like adding a new required parameter or deleting a public method.
    Starting with major version 1, a project is expected to guarantee the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 主版本号为0的版本被视为“预发布”版本，旨在快速迭代；不做兼容性保证。开发者可以以破坏旧代码的方式修改API，比如添加一个新的必需参数或删除一个公共方法。从主版本号1开始，项目应保证以下内容：
- en: Patch versions are incremented for backward-compatible bug fixes.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修补版本号在进行向后兼容的错误修复时递增。
- en: Minor versions are incremented for backward-compatible features.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 次版本号在进行向后兼容的新特性添加时递增。
- en: Major versions are incremented for backward-incompatible changes.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主版本号在出现不兼容的变更时递增。
- en: SemVer also defines prerelease versions by appending a `-` character after the
    patch version. Dot-separated alphanumeric sequences are used for prerelease identifiers
    (2.13.7-alpha.2). Prereleases can make breaking changes without bumping the major
    version. Many projects use *release candidate (RC)* builds. Early adopters can
    find bugs in RCs before the official release. RC prerelease versions have incremental
    identifiers, such as 3.0.0-rc.1\. The final RC is then promoted to the release
    version by re-releasing it without an RC suffix. All prereleased versions are
    superseded by the final release (3.0.0 in our example). See Chapter 8 for more
    on release management mechanics.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SemVer还通过在修补版本号后附加`-`字符来定义预发布版本。预发布标识符使用点分隔的字母数字序列（2.13.7-alpha.2）。预发布版本可以在不增加主版本号的情况下进行破坏性更改。许多项目使用*发布候选版本（RC）*构建。早期采用者可以在正式发布之前在RC版本中发现bug。RC预发布版本有递增的标识符，如3.0.0-rc.1。最终的RC版本会通过去除RC后缀重新发布为正式版本。所有预发布版本都将被最终版本所取代（在我们的示例中是3.0.0）。有关发布管理机制的更多内容，请参见第8章。
- en: 'Build numbers are appended after both the version and prerelease metadata:
    2.13.7-alpha.2+1942\. Including a build number helps developers and tools find
    the build logs for any version that was compiled.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建号附加在版本号和预发布元数据后：2.13.7-alpha.2+1942。包括构建号有助于开发者和工具查找任何已编译版本的构建日志。
- en: SemVer’s scheme also allows for *wildcard* version ranges (2.13.*). Since SemVer
    promises compatibility across minor and patch versions, builds should continue
    to work even as updated versions with bug fixes and new features are automatically
    pulled in.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SemVer的方案还允许使用*通配符*版本范围（2.13.*）。由于SemVer承诺在次版本和修补版本之间保持兼容性，即使更新版本带有错误修复和新功能，构建也应继续正常工作。
- en: Transitive Dependencies
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递依赖
- en: 'Package management or build files show a project’s direct dependencies, but
    direct dependencies are only a subset of what build or packaging systems actually
    use. Dependencies usually depend on other libraries, which become *transitive
    dependencies*. A dependency report shows the fully resolved *dependency tree*
    (or *dependency graph*). Most build and packaging systems can produce dependency
    reports. Continuing the previous example, here’s the `gradle dependencies` output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理或构建文件显示的是项目的直接依赖，但直接依赖只是构建或打包系统实际使用的依赖的一部分。依赖通常还依赖于其他库，这些库成为*传递依赖*。依赖报告显示的是完全解析后的*依赖树*（或*依赖图*）。大多数构建和打包系统都可以生成依赖报告。继续之前的示例，以下是`gradle
    dependencies`的输出：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The dependency tree shows the dependencies that the build system is actually
    using when it compiles the project. The report is several layers deep. Dependencies
    of dependencies of dependencies get pulled in, and so on. The `httpclient` library
    pulls in three transitive dependencies: `httpcore`, `commons-logging`, and `commons-codec`.
    The project does not depend directly on these libraries, but through `httpclient`,
    it does.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖树显示了构建系统在编译项目时实际使用的依赖。报告是几层嵌套的。依赖的依赖的依赖等被一层层引入。`httpclient`库引入了三个传递依赖：`httpcore`、`commons-logging`和`commons-codec`。该项目并不直接依赖这些库，但通过`httpclient`，它确实依赖这些库。
- en: Understanding transitive dependencies is a critical part of dependency management.
    Adding a single dependency seems like a small change, but if that library depends
    on 100 others, your code now depends on 101 libraries. Any change in any dependency
    can affect your program. Make sure you know how to get information like the dependency
    tree in our examples so you can debug dependency conflicts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 理解传递依赖是依赖管理的一个关键部分。添加一个依赖看似是一个小变动，但如果该库依赖于100个其他库，那么你的代码现在依赖于101个库。任何依赖项的变化都可能影响你的程序。确保你知道如何获取像我们示例中那样的依赖树信息，这样你才能调试依赖冲突。
- en: Dependency Hell
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖地狱
- en: Ask any software engineer about dependency hell, and you’ll get a tale of woe.
    Conflicting versions of the same library, or an incompatible library upgrade,
    can break builds and cause runtime failures. The most common dependency hell culprits
    are circular dependencies, diamond dependencies, and version conflicts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 向任何一位软件工程师询问“依赖地狱”，你会听到一段痛苦的故事。相同库的版本冲突，或不兼容的库升级，可能会导致构建失败和运行时错误。最常见的依赖地狱罪魁祸首是循环依赖、钻石型依赖和版本冲突。
- en: 'The previous dependency report was simple. A more realistic report will show
    version conflicts, and give you a glimpse of dependency hell:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的依赖报告很简单。一个更现实的报告将显示版本冲突，并让你一窥“依赖地狱”：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This tree shows three direct dependencies: `annotations`, `zookeeper`, and
    `util`. The libraries all depend on other libraries; these are their transitive
    dependencies. Two versions of `slf4j-api` appear in the report. The `util` depends
    on `slf4j-api` version 1.7.21, but `zookeeper` depends on `slf4j-api` version
    1.6.1.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个树状图显示了三个直接依赖：`annotations`、`zookeeper`和`util`。这些库都依赖于其他库，这些就是它们的传递依赖。报告中出现了两个版本的`slf4j-api`。`util`依赖于`slf4j-api`版本1.7.21，而`zookeeper`依赖于`slf4j-api`版本1.6.1。
- en: The dependencies form a *diamond dependency*, illustrated in [Figure 5-1](#figure5-1).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些依赖形成了一个*钻石型依赖*，如[图5-1](#figure5-1)所示。
- en: '![f05001](image_fi/501836c05/f05001.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![f05001](image_fi/501836c05/f05001.png)'
- en: 'Figure 5-1: A diamond dependency'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-1：钻石型依赖
- en: 'A project can’t use two library versions simultaneously, so the build system
    must pick one. In a Gradle dependency report, version choices are shown with annotations
    like so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个项目不能同时使用两个库版本，因此构建系统必须选择一个版本。在Gradle依赖报告中，版本选择会用注解的方式显示，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `1.6.1 -> 1.7.21` means that `slf4j-api` was upgraded to 1.7.21 across the
    whole project to resolve the version conflict. Zookeeper might not work correctly
    with a different version of `slf4j-api`, especially since a related dependency,
    `slf4j-log4j12`, did not get upgraded. The upgrade *should* work, since Zookeeper
    dependency’s major version number remains unchanged (SemVer guarantees backward
    compatibility within the same major version). In reality, compatibility is aspirational.
    Projects often set version numbers without compatibility checks, and even automation
    can’t fully guarantee compatibility. Incompatible changes slip into minor or patch
    releases, wreaking havoc on your codebase.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`1.6.1 -> 1.7.21`意味着整个项目中的`slf4j-api`都被升级到了1.7.21版本，以解决版本冲突。Zookeeper可能无法与不同版本的`slf4j-api`正常工作，尤其是因为相关的依赖`slf4j-log4j12`没有被升级。升级*应该*能成功，因为Zookeeper依赖的主版本号保持不变（SemVer保证在相同主版本下向后兼容）。但实际上，兼容性只是一个理想。项目通常在没有兼容性检查的情况下设置版本号，即使是自动化工具也无法完全保证兼容性。不兼容的变化会悄悄出现在次要版本或修补版本中，给你的代码库带来灾难。'
- en: Even nastier are *circular dependencies* (or *cyclic dependencies*), where a
    library transitively depends on itself (A depends on B, which depends on C, which
    depends on A, shown in [Figure 5-2](#figure5-2)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是*循环依赖*（或*循环依赖关系*），即一个库间接依赖于自身（A依赖B，B依赖C，C依赖A，如[图5-2](#figure5-2)所示）。
- en: '![f05002](image_fi/501836c05/f05002.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![f05002](image_fi/501836c05/f05002.png)'
- en: 'Figure 5-2: A circular dependency'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-2：一个循环依赖
- en: 'Circular dependencies create a chicken and egg problem: upgrading one library
    breaks the other. Utility or helper projects commonly appear in circular dependencies.
    For example, a natural language processing (NLP) library depends on a utility
    library for a string parsing function; unwittingly, another developer adds the
    NLP library as a utility dependency for a word-stemming utility method.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 循环依赖会造成“先有鸡还是先有蛋”的问题：升级一个库会导致另一个库无法工作。实用工具或辅助项目通常会出现循环依赖。例如，一个自然语言处理（NLP）库依赖于一个用于字符串解析的实用库；不经意间，另一位开发者将NLP库作为一个词干提取实用方法的依赖。
- en: Avoiding Dependency Hell
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免依赖地狱
- en: You will absolutely stumble into dependency hell. Dependencies are unavoidable,
    but every new dependency comes with a cost. Ask yourself if a dependency’s value
    outweighs its cost.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你绝对会遇到依赖地狱。依赖是不可避免的，但每一个新的依赖都伴随着成本。问问自己，这个依赖的价值是否超过了它的成本。
- en: Do you really need the functionality?
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你真的需要这些功能吗？
- en: How well maintained is the dependency?
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个依赖有多好维护？
- en: How easy would it be for you to fix the dependency if something went wrong?
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果出了问题，修复这个依赖有多容易？
- en: How mature is the dependency?
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个依赖有多成熟？
- en: How frequently does the dependency introduce backward-incompatible changes?
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个依赖多久会引入不兼容的变化？
- en: How well do you, your team, and your organization understand the dependency?
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你、你的团队和你的组织对这个依赖的了解程度如何？
- en: How easy is it to write the code yourself?
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自己编写这段代码有多容易？
- en: How is the code licensed?
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是如何授权的？
- en: What is the ratio of code you use versus code you don’t use in the dependency?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在这个依赖中使用的代码与未使用的代码比例如何？
- en: When you do decide to add dependencies, use the following best practices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你决定添加依赖时，请遵循以下最佳实践。
- en: Isolate Dependencies
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隔离依赖
- en: You don’t have to leave dependency management to build and package systems.
    Dependent code can also be copied, vendored, or shaded. Copying code into your
    project trades dependency management automation for more isolation (stability).
    You’ll be able to pick and choose exactly what code you use, but you’ll have to
    manage the code copying.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必将依赖管理交给构建和打包系统。依赖代码也可以被复制、包含或遮蔽。将代码复制到你的项目中是以牺牲依赖管理自动化为代价，换取更多的隔离（稳定性）。你将能够精确选择使用的代码，但你必须自己管理代码的复制。
- en: Many developers are raised on the DRY philosophy, which discourages code duplication.
    Be pragmatic; don’t be afraid to copy code if it helps you avoid a big or unstable
    dependency (and the software license allows it).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者是在DRY（Don't Repeat Yourself）哲学的影响下成长起来的，这种哲学提倡避免代码重复。务实一些；如果复制代码能帮助你避免一个庞大或不稳定的依赖（并且软件许可允许），就不要害怕复制代码。
- en: 'Copying code works best on small, stable code fragments. Manually copying entire
    libraries has drawbacks: version history can be lost, and you must recopy code
    every time you update it. *Vendor* code using vendor tools to manage history and
    updates when embedding entire libraries in your codebase. Vendor folders contain
    complete library copies. Tools like git-subtree and `git-vendor` help manage vendor
    folders in your codebase. Some packaging systems, like Go, even have built-in
    support for vendor folders.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 复制代码最适合用于小而稳定的代码片段。手动复制整个库有一些缺点：版本历史可能会丢失，而且每次更新代码时你必须重新复制代码。使用*供应商*工具管理历史记录和更新，以便在将整个库嵌入你的代码库时进行管理。供应商文件夹包含完整的库副本。像git-subtree和`git-vendor`这样的工具有助于管理代码库中的供应商文件夹。一些打包系统（如Go）甚至内建了对供应商文件夹的支持。
- en: 'Dependency *shading* can also isolate dependencies. Shading automatically relocates
    a dependency into a different namespace to avoid conflicts: `some.package.space`
    becomes `shaded.some.package.space`. This is a friendly way to keep libraries
    from forcing their dependencies on applications. Shading comes from the Java ecosystem,
    but the concept applies broadly. Other languages like Rust use similar techniques.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖*着色*也可以隔离依赖。着色会自动将依赖重定向到不同的命名空间，以避免冲突：`some.package.space`变成`shaded.some.package.space`。这是一种友好的方式，可以避免库将其依赖强加给应用程序。着色源自Java生态系统，但这一概念是广泛适用的。像Rust这样的其他语言也使用类似的技术。
- en: Shading is an advanced technique and should be used sparingly. Never expose
    a shaded dependency’s objects in public APIs; doing so means developers will have
    to create objects in the shaded package space (`shaded.some.package.space.Class`).
    Shading is meant to hide a dependency’s existence; creating an object that’s been
    shaded is tricky, and sometimes impossible, for library users. Also, beware that
    shaded dependencies can confuse developers since package names differ in the build
    artifact. We recommend only shading dependencies when you are creating a library
    with widely used dependencies that are likely to create conflicts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 着色是一种高级技术，应谨慎使用。绝不在公共API中暴露已着色依赖的对象；这样做意味着开发者必须在着色的包空间中创建对象（`shaded.some.package.space.Class`）。着色旨在隐藏依赖的存在；为库用户创建已着色的对象既复杂又有时是不可能的。此外，要小心，着色的依赖可能会让开发者混淆，因为构建产物中的包名会有所不同。我们建议仅在创建一个具有广泛使用且可能产生冲突的依赖的库时，才使用着色。
- en: Deliberately Add Dependencies
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有意添加依赖
- en: Explicitly declare as dependencies all libraries you use. Don’t use methods
    and classes from transitive dependencies, even if it seems to work. Libraries
    are free to change their dependencies even in patch-level version bumps. Your
    code will stop working if a transitive dependency that you depend on gets dropped
    during an upgrade.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 显式声明所有使用的库作为依赖。即使看起来可以正常工作，也不要使用传递性依赖中的方法和类。库可以自由更改它们的依赖，即使是在修补级别的版本升级中。如果在升级过程中，依赖的传递性依赖被移除，你的代码将无法工作。
- en: A project that depends only on the `httpclient` library (from the earlier example)
    should not explicitly use classes in `httpcore`, `commons-logging`, and `commons-codec`
    (`httpclient`’s dependencies); if it does, it should declare a direct dependency
    on the libraries.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个只依赖于`httpclient`库（来自前面示例）的项目不应显式使用`httpcore`、`commons-logging`和`commons-codec`中的类（`httpclient`的依赖）；如果使用了这些类，应该直接声明对这些库的依赖。
- en: Don’t rely solely on the IDE for dependency management. Declare your dependencies
    explicitly in build files. IDEs often store dependencies in their own project
    configurations, which build machinery doesn’t look at. Inconsistency between your
    IDE and build files will make code work in the IDE but not when actually building
    your code, or vice versa.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要仅依赖IDE进行依赖管理。在构建文件中显式声明你的依赖。IDE通常将依赖存储在自己的项目配置中，而构建工具并不会查看这些配置。IDE与构建文件之间的不一致会导致代码在IDE中正常工作，但在实际构建代码时却不行，反之亦然。
- en: Pin Versions
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 锁定版本
- en: Explicitly set every dependency’s version number, a practice called *version
    pinning*. Unpinned versions will be decided by the build or package management
    system for you. Leaving your fate to the build system is a bad idea. Your code
    will destabilize when dependency versions change during consecutive builds.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 显式设置每个依赖的版本号，这种做法被称为*版本锁定*。未锁定的版本将由构建系统或包管理系统为你决定。将命运交给构建系统并不是一个好主意。当依赖版本在连续的构建过程中发生变化时，你的代码会不稳定。
- en: 'The following code snippet declares a list of Go library dependencies with
    pinned versions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段声明了一份Go库依赖列表，其中包含了锁定版本：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For contrast, this snippet of Apache Airflow’s dependencies uses three different
    version management strategies:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，以下是 Apache Airflow 依赖项的片段，使用了三种不同的版本管理策略：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `requests-oauthlib` library is explicitly pinned to 1.1.0\. The `Flask-OAuthlib`
    dependency is set to any version greater than or equal to 0.9.1\. And the `oauthlib`
    library is extremely specific: 1.1.2 or newer, but not above 3.0.0, but also not
    2.0.3, 2.0.4, or 2.0.5\. Versions 2.0.3 to 2.0.5 are excluded due to known bugs
    or incompatibilities.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests-oauthlib` 库被明确锁定为 1.1.0。`Flask-OAuthlib` 依赖项被设置为 0.9.1 或更高版本。`oauthlib`
    库则非常具体：要求版本为 1.1.2 或更新，但不超过 3.0.0，也不能是 2.0.3、2.0.4 或 2.0.5。版本 2.0.3 到 2.0.5 被排除，因为存在已知的
    bug 或不兼容问题。'
- en: Bounding the version range is a compromise between an unbounded range and a
    fully pinned version. The dependency resolution system is free to resolve conflicts
    and update dependencies, but exposure to breaking changes is limited. But any
    unpinned versions will pull in more than the latest bug fixes; they’ll pull in
    the latest bugs, behavior, or even incompatible changes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 限定版本范围是一个在无限制范围和完全锁定版本之间的折衷。依赖解析系统可以自由解决冲突并更新依赖项，但暴露破坏性更改的风险是有限的。但任何未锁定的版本将不仅拉取最新的
    bug 修复；它们还会拉取最新的 bug、行为，甚至是不兼容的更改。
- en: 'Even if you pin your direct dependencies, transitive dependencies might still
    have wildcards. Transitive dependency versions can be pinned by generating a complete
    manifest of all resolved dependencies and their versions. Dependency manifests
    go by many names: you freeze requirements in Python, generate *Gemfile.lock*s
    in Ruby, and create *Cargo.lock*s in Rust. Build systems use manifests to produce
    identical results on every execution. Manifests are regenerated explicitly by
    developers when they want to change a version. Committing manifests alongside
    the rest of your code allows you to explicitly track changes to any of the dependencies,
    giving you the opportunity to prevent potential problems.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你锁定了直接依赖项，传递依赖项仍可能使用通配符。通过生成所有已解析依赖项及其版本的完整清单，可以锁定传递依赖项的版本。依赖清单有许多名称：在 Python
    中你会冻结需求，在 Ruby 中生成 *Gemfile.lock*，在 Rust 中创建 *Cargo.lock*。构建系统使用清单来确保每次执行都能产生相同的结果。开发者在需要更改版本时会显式重新生成清单。将清单与代码一起提交，允许你显式跟踪依赖项的更改，从而提供机会防止潜在问题。
- en: Scope Dependencies Narrowly
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 狭窄依赖作用域
- en: 'Dependency scope, discussed earlier, defines when in the build lifecycle a
    dependency is used. Scoping has a hierarchy: compile-time dependencies are used
    during runtime, but runtime dependencies are not used to compile code, only to
    run it. Test dependencies are only pulled in for test execution and are not necessary
    for normal use of the published code.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 之前讨论的依赖作用域，定义了在构建生命周期中的何时使用某个依赖项。作用域有层次结构：编译时依赖项在运行时使用，但运行时依赖项不会用于编译代码，仅用于运行代码。测试依赖项仅在测试执行时拉取，并且对于发布代码的正常使用并不必要。
- en: Use the narrowest possible scope for each dependency. Declaring all dependencies
    with compile-time scoping will work but is bad practice. Narrow scoping will help
    avoid conflicts and reduce runtime binary sizes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个依赖项使用最窄的作用域。声明所有依赖项为编译时作用域虽然可行，但不是最佳实践。狭窄的作用域有助于避免冲突并减少运行时二进制文件的大小。
- en: Protect Yourself from Circular Dependencies
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护自己免受循环依赖的影响
- en: Never introduce circular dependencies. Circular dependencies lead to strange
    build system behavior and deployment ordering problems. Builds will appear to
    work and then fail suddenly, and applications will have elusive and sporadic bugs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要引入循环依赖。循环依赖会导致构建系统行为异常以及部署顺序问题。构建可能看似正常，但突然失败，且应用程序会出现难以捉摸且间歇性的错误。
- en: Protect yourself using build tools. Many build systems have built-in circular
    dependency detectors that will alert you when a cycle is detected. If your build
    system doesn’t protect against circular dependencies, there are usually plug-ins
    that can help.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构建工具来保护自己。许多构建系统内置了循环依赖探测器，能够在检测到循环时提醒你。如果你的构建系统不防止循环依赖，通常会有插件可以帮助你。
- en: Do’s and Don’ts
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应做与不应做
- en: '| **Do’s** | **Don’ts** |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| **应做** | **不应做** |'
- en: '| --- | --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **DO** use semantic versioning.  | **DON’T** use Git hashes as version numbers.  |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **应做** 使用语义化版本控制。  | **不应做** 使用 Git 哈希作为版本号。  |'
- en: '| **DO** pin dependency version ranges.  | **DON’T** add dependencies unless
    the value exceeds the cost.  |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **应做** 锁定依赖项版本范围。  | **不应做** 除非其价值超出成本，否则不添加依赖项。  |'
- en: '| **DO** use dependency report tools for transitive dependencies.  | **DON’T**
    use transitive dependencies directly.  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **请**使用依赖报告工具来检查传递依赖。 | **请不要**直接使用传递依赖。 |'
- en: '| **DO** be skeptical when adding new dependencies.  | **DON’T** introduce
    circular dependencies.  |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **请**在添加新依赖时保持怀疑态度。 | **请不要**引入循环依赖。 |'
- en: '| **DO** scope your dependencies.  |  |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **请**限定你的依赖范围。 |  |'
- en: Level Up
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升技能
- en: The problem of dependency conflicts and incompatible changes is pervasive; the
    general term for it is *dependency hell* (and many ecosystems have their own versions—DLL
    hell, JAR hell, “Any time I have to touch pip”). Though dependency management
    is complex, there are not many books on the subject; ecosystem-specific discussions
    and explanations are plentiful online. For a historical perspective, take a look
    at the Wikipedia article on dependency hell and the references therein.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖冲突和不兼容变化的问题普遍存在，通常称之为*依赖地狱*（许多生态系统有自己版本的地狱——DLL 地狱，JAR 地狱，“每次我必须触碰 pip”）。尽管依赖管理复杂，但关于这个主题的书籍并不多；生态系统特定的讨论和解释在网上非常丰富。要了解历史背景，可以看看维基百科关于依赖地狱的文章及其参考资料。
- en: See [https://semver.org/](https://semver.org/) for a compact and readable spec
    on semantic versioning. Python has a similar scheme, defined at [https://www.python.org/dev/peps/pep-0440/](https://www.python.org/dev/peps/pep-0440/).
    Both of these versioning schemes are in heavy use and worth learning. There are
    many others, and it’s not uncommon to encounter artifacts using different versioning
    schemes within the same project. Following the Pareto principle, we don’t recommend
    you dig into version semantics too deep when you are starting out unless it’s
    an explicit part of your job or you need more information to solve a concrete
    problem. The contents of this chapter should be sufficient for most day-to-day
    activities.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[https://semver.org/](https://semver.org/)了解关于语义版本控制的简明易读的规范。Python也有类似的方案，定义在[https://www.python.org/dev/peps/pep-0440/](https://www.python.org/dev/peps/pep-0440/)中。这两种版本控制方案在使用中非常广泛，值得学习。还有许多其他方案，在同一个项目中遇到使用不同版本控制方案的构件并不罕见。根据帕累托原则，除非这是你工作的一部分，或者你需要更多信息来解决一个具体问题，我们不建议你在刚开始时深入研究版本语义。本章内容应该足以应对大多数日常工作。
- en: Many of the versioning concepts in this chapter apply to both libraries and
    service APIs. We talk more about API versioning in Chapter 11.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的许多版本控制概念适用于库和服务 API。我们将在第11章中更详细地讨论 API 版本控制。
