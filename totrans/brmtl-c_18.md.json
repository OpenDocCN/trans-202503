["```\nfloat f1 = 1/3;\nfloat f2 = 1.0 / 3.0;\n```", "```\nf = 1.0 / 3;    // Bad form\n```", "```\n+1.234e+56\n```", "```\n+3.333e-01    // 1/3 in our notation\n+3.333e-01    // 1/3 in our notation\n+6.666e-01\n```", "```\n+6.667e-01\n```", "```\n+6.667e-01    // 2/3\n-3.333e-01    // 1/3\n-3.333e-01    // 1/3\n+0.001e-01    // Result unnormalized\n+1.000e-04    // Result normalized\n```", "```\nfloat f = 1.0 / 0.0;\n```", "```\nfloat f = -1.0 / 0.0;\n```", "```\n#include <math.h>\nfloat f = sqrt(-1.0);\n```", "```\n+1.0000e-99\n```", "```\n+0.1000e-99   // -99 is the limit on the exponent.\n```", "```\n+0.0001e-99\n```", "```\nFixed point    Implementation\n12.34          1234\n00.01             1\n12.00          1200\n```", "```\n 12.34         1234\n+22.22        +2222\n------        -----\n 34.56         2346\n\n 98.76         9876\n-11.11        -1111\n------         ------\n 87.65         8765 \n```", "```\n 12.00           1200\nx 00.50         x 0050\n                  60000 (Uncorrected)\n ------          ------\nx 06.00            0600 (After 100 correction)\n```", "```\n/**\n * Demonstrate fixed-point numbers.\n */\n#include <stdio.h>\n\n/**\n * Our fixed-point numbers have the form\n * of xxxxx.xx with two digits to the right\n * of the decimal place.\n */\ntypedef long int fixedPoint;            // Fixed-point data type\nstatic const int FIXED_FACTOR = 100;    // Adjustment factor for fixed point\n/**\n * Add two fixed-point numbers.\n *\n * @param f1 First number to add\n * @param f2 Second number to add\n * @returns f1+f2\n */\nstatic inline fixedPoint fixedAdd(const fixedPoint f1, const fixedPoint f2)\n{\n    return (f1+f2);\n}\n/**\n * Subtract two fixed-point numbers.\n *\n * @param f1 First number to subtract\n * @param f2 Second number to subtract\n * @returns f1-f2\n */\nstatic inline fixedPoint fixedSubtract(\n    const fixedPoint f1, \n    const fixedPoint f2)\n{\n    return (f1-f2);\n}\n/**\n * Multiply two fixed-point numbers.\n *\n * @param f1 First number to multiply\n * @param f2 Second number to multiply\n * @returns f1*f2\n */\nstatic inline fixedPoint fixedMultiply(\n    const fixedPoint f1,\n    const fixedPoint f2)\n{\n    return ((f1*f2)/FIXED_FACTOR);\n}\n/**\n * Divide two fixed-point numbers.\n *\n * @param f1 First number to divide\n * @param f2 Second number to divide\n * @returns f1/f2\n */\nstatic inline fixedPoint fixedDivide(\n    const fixedPoint f1,\n    const fixedPoint f2)\n{\n    return ((f1*FIXED_FACTOR) / f2);\n}\n/**\n * Turn a fixed-point number into a floating one (for printing).\n *\n * @param f1 Fixed-point number\n * @returns Floating-point number\n */\nstatic inline double fixedToFloat(const fixedPoint f1)\n{\n    return (((double)f1) / ((double)FIXED_FACTOR));\n}\n/**\n * Turn a floating-point number into a fixed one.\n *\n * @param f1 Floating-point number\n * @returns Fixed-point number\n */\nstatic inline fixedPoint floatToFixed(const double f1)\n{\n    return (f1 * ((double)FIXED_FACTOR));\n}\n\nint main()\n{\n    fixedPoint f1 = floatToFixed(1.2);  // A fixed-point number\n    fixedPoint f2 = floatToFixed(3.4);  // Another fixed-point number\n\n    printf(\"f1 = %.2f\\n\", fixedToFloat(f1));\n    printf(\"f2 = %.2f\\n\", fixedToFloat(f2));\n    printf(\"f1+f2 = %.2f\\n\", fixedToFloat(fixedAdd(f1, f2)));\n    printf(\"f2-f1 = %.2f\\n\", fixedToFloat(fixedSubtract(f2, f1)));\n    printf(\"f1*f2 = %.2f\\n\", fixedToFloat(fixedMultiply(f1, f2)));\n    printf(\"f2/f1 = %.2f\\n\", fixedToFloat(fixedDivide(f1, f2)));\n    return (0);\n}\n```"]