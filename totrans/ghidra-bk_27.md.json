["```\n   int test_even(int v) {\n\n       return (v % 2 == 0);\n\n   }\n\n   int test_multiple_10(int v) {\n\n       return (v % 10 == 0);\n\n   }\n\n   int test_lt_100(int v) {\n\n       return v < 100;\n\n   }\n\n   int test_gte_20(int v) {\n\n       return v >= 20;\n\n   }\n\n➊ void cleanup_and_exit(int rv, char* s) {\n\n       printf(\"Result: %s\\n\", s);\n\n       exit(rv);\n\n   }\n\n   void do_testing() {\n\n       int v;\n\n       srand(time(0));\n\n       v = rand() % 150;\n\n       printf(\"Testing %d\\n\", v);\n\n     ➋ if (!test_even(v)) {\n\n           cleanup_and_exit(-1, \"failed even test\");\n\n       }\n\n       if (test_multiple_10(v)) {\n\n            cleanup_and_exit(-2, \"failed not multiple of 10 test\");\n\n }\n\n       if (!test_lt_100(v)) {\n\n           cleanup_and_exit(-3, \"failed <100 test\");\n\n       }\n\n       if (!test_gte_20(v)) {\n\n           cleanup_and_exit(-4, \"failed > 20 test\");\n\n       }\n\n       // all tests passed so do interesting work here\n\n     ➌ system(\"/bin/sh\");\n\n       cleanup_and_exit(0, \"success!\");\n\n   }\n\n   int main() {\n\n       do_testing();\n\n       return 0;\n\n   }\n```", "```\n001008af  CALL   test_even\n\n001008b4  TEST   EAX,EAX\n\n001008b6  JNZ    LAB_001008c9\n\n001008b8  LEA    RSI,[s_failed_even_test_00100a00]\n\n001008bf  MOV    EDI,0xffffffff\n\n001008c4  CALL   cleanup_and_exit\n```", "```\npublic void patchBytes(Address start, byte[] patch) throws Exception {\n\n    Address end = start.add(patch.length);\n\n  ➊ clearListing(start, end);\n\n    setBytes(start, patch);\n\n}\n```", "```\n;BEFORE:\n\n0804851b  83 45 f4 01   ADD➊  dword ptr [EBP + local_10],0x1\n\n0804851f  83 45 f0 01   ADD    dword ptr [EBP + local_14],0x1\n\n;AFTER\n\n0804851b  66➋ 90       NOP➋\n\n0804851d  f4            ??➋   F4h\n\n0804851e  01            ??     01h\n\n0804851f  83 45 f0 01   ADD    dword ptr [EBP + local_14],0x1\n\n;FIXED:\n\n0804851b  66 90         NOP\n\n0804851d  90            NOP➎\n\n0804851e  90            NOP\n\n0804851f  83 45 f0 01   ADD    dword ptr [EBP + local_14],0x1\n```", "```\n;BEFORE:\n\n08048502 6a 01          PUSH➊ 0x1\n\n08048504 ff 75 f0       PUSH➋ dword ptr [EBP + local_14]\n\n08048507 ff 75 08       PUSH   dword ptr [EBP + param_1]\n\n0804850a e8 51 fe ff ff CALL   read\n\n;AFTER:\n\n08048502 68 00 01 00 00 PUSH➌ 0x100\n\n08048507 ff 75 08       PUSH   dword ptr [EBP + param_1]\n\n0804850a e8 51 fe ff ff CALL   read\n```", "```\n140012df8 ??     00h\n\n140012df9 ??     00h\n\n140012dfa ??     00h\n\n140012dfb ??     00h\n\n140012dfc ??     00h\n\n140012dfd ??     00h\n\n140012dfe ??     00h\n\n140012dff ??     00h\n```", "```\n140012cbd POP    RBP\n\n140012cbe RET➊\n\n140012cbf ??     CCh\n\n140012cc0 ??     00h\n```", "```\n  1400010a0 RET\n\n➊ 1400010a1 ??     CCh\n\n 1400010a2 ??     CCh\n\n  1400010a3 ??     CCh\n\n  1400010a4 ??     CCh\n\n  1400010a5 ??     CCh\n\n  1400010a6 ??     CCh\n\n  1400010a7 ??     CCh\n\n  1400010a8 ??     CCh\n\n  1400010a9 ??     CCh\n\n  1400010aa ??     CCh\n\n  1400010ab ??     CCh\n\n  1400010ac ??     CCh\n\n  1400010ad ??     CCh\n\n  1400010ae ??     CCh\n\n➋ 1400010af ??     CCh\n\n       **************************************************************\n\n       *                   FUNCTION                                 *\n\n       **************************************************************\n```", "```\npublic void run() throws Exception {\n\n    Memory mem = currentProgram.getMemory();\n\n  ➊ java.util.List<FileBytes> fbytes = mem.getAllFileBytes();\n\n    if (fbytes.size() != 1) {\n\n        return;\n\n    }\n\n  ➋ FileBytes fb = fbytes.get(0);\n\n  ➌ File of = askFile(\"Choose output file\", \"Save\");\n\n    FileOutputStream fos = new FileOutputStream(of, false);\n\n    writePatchFile(fb, fos);\n\n    fos.close();\n\n}\n```", "```\npublic void writePatchFile(FileBytes fb, OutputStream os) throws Exception {\n\n    Memory mem = currentProgram.getMemory();\n\n    Iterator<Relocation> relocs;\n\n  ➊ relocs = currentProgram.getRelocationTable().getRelocations();\n\n    HashSet<Long> exclusions = new HashSet<Long>();\n\n    while (relocs.hasNext()) {\n\n        Relocation r = relocs.next();\n\n      ➋ AddressSourceInfo info = mem.getAddressSourceInfo(r.getAddress());\n\n        for (long offset = 0; offset < r.getBytes().length; offset++) {\n\n          ➌ exclusions.add(info.getFileOffset() + offset);\n\n        }\n\n    }\n\n  ➍ saveBytes(fb, os, exclusions);\n\n}\n```", "```\npublic void saveBytes(FileBytes fb, OutputStream os, Set<Long> exclusions)\n\n                      throws Exception {\n\n    long begin = fb.getFileOffset();\n\n    long end = begin + fb.getSize();\n\n  ➊ for (long offset = begin; offset < end; offset++) {\n\n      ➋ int orig = fb.getOriginalByte(offset) & 0xff;\n\n      ➌ int mod = fb.getModifiedByte(offset) & 0xff;\n\n        if (!exclusions.contains(offset) && orig != mod) {\n\n          ➍ os.write(mod);\n\n        }\n\n        else {\n\n          ➎ os.write(orig);\n\n        }\n\n    }\n\n}\n```", "```\nint is_debugger_present() {\n\n    return ptrace(PTRACE_TRACEME, 0, 0, 0) == -1;\n\n}\n\nvoid do_work() {\n\n  ➊ if (is_debugger_present()) {\n\n         printf(\"No debugging allowed - exiting!\\n\\n\");\n\n         exit(-1);\n\n    }\n\n // do interesting things here\n\n    printf(\"Confirmed that there is no debugger, so do\\n\"\n\n           \"interesting things here that we don't want\\n\"\n\n           \"analysts to see!\\n\\n\");\n\n}\n\nint main() {\n\n    do_work();\n\n    return 0;\n\n}\n```", "```\n# ./debug_check_x64\n\n  Confirmed that there is no debugger, so do\n\n  interesting things here that we don't want\n\n  analysts to see!\n```", "```\n# gdb ./debug_check_x64\n\n  Reading symbols from ./debug_check_x64...(no debugging symbols found)...done.\n\n  (gdb) run\n\n  Starting program: /ghidrabook/CH22/debug_check_x64\n\n  No debugging allowed - exiting!\n\n  [Inferior 1 (process 434) exited with code 0377]\n\n  (gdb)\n```", "```\n     undefined do_work()\n\n        undefined  AL:1 <RETURN>\n\n001006f8  PUSH   RBP\n\n001006f9  MOV    RBP,RSP\n\n001006fc  MOV    EAX,0x0\n\n00100701  CALL   is_debugger_present\n\n00100706  TEST   EAX,EAX\n\n00100708  JZ     LAB_00100720\n\n0010070a  LEA    RDI,[s_No_debugging_allowed_-_exiting!_001007d8]\n\n00100711  CALL   puts\n\n00100716  MOV    EDI,0xffffffff\n\n0010071b  CALL   exit\n\n   -- Flow Override: CALL_RETURN (CALL_TERMINATOR)\n\n        LAB_00100720\n\n00100720  LEA    RDI,[s_Confirmed_that_there_is_no_debug_001008\n\n00100727  CALL   puts\n\n0010072c  NOP\n\n0010072d  POP    RBP\n\n0010072e  RET\n```", "```\nvoid do_work(void)\n\n{\n\n  int iVar1;\n\n  iVar1 = is_debugger_present();\n\n  if (iVar1 != 0) {\n\n    puts(\"No debugging allowed - exiting!\\n\");\n\n                    /* WARNING: Subroutine does not return */\n\n    exit(-1);\n\n  }\n\n  puts(\"Confirmed that there is no debugger, so do\\n\"\n\n       \"interesting things here that we don't want\\n\"\n\n       \"analysts to see!\\n\"\n\n      );\n\n  return;\n\n}\n```", "```\nvoid do_work(void)\n\n{\n\n  int iVar1;\n\n  iVar1 = is_debugger_present();\n\n  if (iVar1 == 0) {\n\n    puts(\"No debugging allowed - exiting!\\n\");\n\n                    /* WARNING: Subroutine does not return */\n\n exit(-1);\n\n  }\n\n  puts(\"Confirmed that there is no debugger, so do\\n\"\n\n       \"interesting things here that we don't want\\n\"\n\n       \"analysts to see!\\n\"\n\n      );\n\n  return;\n\n}\n```", "```\n# ./debug_check_x64.patched\n\n  No debugging allowed - exiting!\n\n# gdb ./debug_check_x64.patched\n\n  Reading symbols from ./debug_check_x64.patched...(no debugging symbols found)...done.\n\n  (gdb) run\n\n  Starting program: /ghidrabook/CH22/debug_check_x64.patched\n\n  Confirmed that there is no debugger, so do\n\n  interesting things here that we don't want\n\n  analysts to see!\n\n  [Inferior 1 (process 445) exited normally]\n\n  (gdb)\n```"]