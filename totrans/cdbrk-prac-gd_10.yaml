- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Incomplete columnar transposition ciphers
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/g10001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having covered complete columnar transposition ciphers in the previous chapter,
    we now devote our attention to the more general case: columnar transposition with
    incompletely filled-in rectangles, also known as *incomplete columnar transposition*.
    This method works in almost the same way as the one introduced in [Chapter 9](c09.xhtml),
    the only exception being that the line length is not a divisor of the message
    length.'
  prefs: []
  type: TYPE_NORMAL
- en: How an incomplete columnar transposition cipher works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To explain how an incomplete columnar transposition cipher works, let’s start
    with the following plaintext, which is an original message encrypted and sent
    by the Irish Republican Army, or IRA, in the 1920s (see [Chapter 16](c16.xhtml)
    for background information):'
  prefs: []
  type: TYPE_NORMAL
- en: '`ARGUMENTS FOR SUCH MATCHES HELPED BY FACT OF TOUR BEING PRIVATE ENTERPRISE
    AND FOR PERSONAL GAIN OF PROMOTERS`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To encrypt this note, we first conduct a transposition based on the keyword
    `CMOPENSATION`. The IRA really used this keyword, including the spelling error.
    Note that the last line of the rectangle is not completely filled:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CMOPENSATION`'
  prefs: []
  type: TYPE_NORMAL
- en: '`------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ARGUMENTSFOR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SUCHMATCHESH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ELPEDBYFACTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FTOURBEINGPR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IVATEENTERPR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ISEANDFORPER`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SONALGAINOFP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ROMOTERS`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we sort the columns, as we did in [Chapter 9](c09.xhtml), such that the
    letters of the keyword are in alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ACEIMNNOOPST`'
  prefs: []
  type: TYPE_NORMAL
- en: '`------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TAMFRERGOUNS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CSMEUAHCSHTH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FEDCLBOPTEYA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IFRGTBROPUEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TIERVERAPTNE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OINPSDREEAFR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ISLOOGPNFAAN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SRT OE M OR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now read out the ciphertext column-wise, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TCFITOIS ASEFIISR MMDRENLT FECGRPO RULTVSOO EABBEDGE RHORRRP GCPOAENM OSTPPEF
    UHEUTAAO NTYENFAR SHANERN`'
  prefs: []
  type: TYPE_NORMAL
- en: This is the same encrypted message our colleague Jim Gillogly found in an IRA
    file from the 1920s:^([1](b06.xhtml#c10-endnote-1))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/g10002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Even with a legitimate decryption (by an intended recipient who knows the key),
    this type of cipher system requires more work to decrypt than a complete columnar
    transposition does. The recipient first needs to look at the length of the message
    (here, ninety-two letters) and the length of the keyword (here, twelve letters).
    Ninety-two divided by twelve equals seven, with a remainder of eight. The recipient
    therefore needs a table with twelve columns that contains seven complete rows
    and one incomplete row of eight columns, in addition to a header row that contains
    the keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |   |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 2 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 3 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 4 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 5 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 6 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 7 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 8 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Next, the recipient writes the ciphertext column-wise into the table, starting
    with the `A` column, as `A` is the first letter of the alphabet that appears in
    the keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |  |  |  |  |  |  |  | `T` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 2 |  |  |  |  |  |  |  | `C` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 3 |  |  |  |  |  |  |  | `F` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 4 |  |  |  |  |  |  |  | `I` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 5 |  |  |  |  |  |  |  | `T` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 6 |  |  |  |  |  |  |  | `O` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 7 |  |  |  |  |  |  |  | `I` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 8 |  |  |  |  |  |  |  | `S` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'The next keyword letters, in alphabetical order, are `C`, `E`, and `I`, so
    the recipient proceeds with these (note that the `I` column has only seven cells):'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `A` |  |  |  | `M` |  |  | `T` |  | `F` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `S` |  |  |  | `M` |  |  | `C` |  | `E` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `E` |  |  |  | `D` |  |  | `F` |  | `C` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `F` |  |  |  | `R` |  |  | `I` |  | `G` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `I` |  |  |  | `E` |  |  | `T` |  | `R` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `I` |  |  |  | `N` |  |  | `O` |  | `P` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `S` |  |  |  | `L` |  |  | `I` |  | `O` |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `R` |  |  |  | `T` |  |  | `S` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Then, the recipient fills in the columns below the letters `M`, `N`, `N`, `O`,
    `O`, `P`, `S`, and `T`:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `A` | `R` | `G` | `U` | `M` | `E` | `N` | `T` | `S` | `F` | `O` | `R`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `S` | `U` | `C` | `H` | `M` | `A` | `T` | `C` | `H` | `E` | `S` | `H`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `E` | `L` | `P` | `E` | `D` | `B` | `Y` | `F` | `A` | `C` | `T` | `O`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `F` | `T` | `O` | `U` | `R` | `B` | `E` | `I` | `N` | `G` | `P` | `R`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `I` | `V` | `A` | `T` | `E` | `E` | `N` | `T` | `E` | `R` | `P` | `R`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `I` | `S` | `E` | `A` | `N` | `D` | `F` | `O` | `R` | `P` | `E` | `R`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `S` | `O` | `N` | `A` | `L` | `G` | `A` | `I` | `N` | `O` | `F` | `P`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `R` | `O` | `M` | `O` | `T` | `E` | `R` | `S` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: The recipient can now read the plaintext (`ARGUMENTS FOR SUCH MATCHES` . . .)
    line-wise.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to perform two successive incomplete columnar transpositions,
    in which the result of the first transposition is transposed again. This method,
    called *double columnar transposition*, was frequently used during World War II
    and then in the ensuing Cold War into the 1980s. Considered one of the best manual
    encryption methods, it was especially popular among intelligence operatives in
    the field. It goes without saying that a double columnar transposition should
    be used with two different keywords (preferably with different lengths). Despite
    the recommendation, of course, this best practice was not always followed.
  prefs: []
  type: TYPE_NORMAL
- en: How to detect an incomplete columnar transposition cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As explained in [Chapter 9](c09.xhtml), a transposition cipher is usually straightforward
    to detect. When letters of a message are transposed, neither the language’s index
    of coincidence nor its properties of frequency analysis change. So, if these values
    for a ciphertext resemble a known language—in this case, English—a transposition
    is by far the most likely candidate.
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, how do we determine what kind of transposition cipher was used?
    To keep things reasonably simple, let’s assume that we have ruled out other transposition
    ciphers (discussed in [Chapter 11](c11.xhtml)) and that the only options are complete
    or incomplete columnar transposition. At this point, we should check the length
    of a message. For instance, look at the following IRA message, which was sent
    in the 1920s (see [Chapter 16](c16.xhtml) for details):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/g10003.png)'
  prefs: []
  type: TYPE_IMG
- en: It consists of 119 letters. As 119 is a prime number, this message could not
    have been encrypted with a completely filled-in rectangle (unless the rectangle
    consisted of only one line with a length of 119, which is unlikely). Likewise,
    the following IRA message from the same time period . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/g10004.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . has forty-six letters. The sender might have used a 23 × 2 rectangle,
    but experience has shown that the IRA rarely chose twenty-three-letter keywords.
    In both cases, we are probably dealing with an incomplete columnar transposition.
  prefs: []
  type: TYPE_NORMAL
- en: The situation changes when we encounter a message consisting of, say, eighty
    letters. In this case, a complete columnar transposition is possible but not guaranteed.
    To our regret, we are not aware of any simple method of distinguishing between
    complete and incomplete columnar transpositions if the message length allows for
    both options. All we can do is check whether solutions for a complete columnar
    transposition case work (as we described in [Chapter 9](c09.xhtml)). If not, we
    may be dealing with an incomplete columnar transposition or something else.
  prefs: []
  type: TYPE_NORMAL
- en: How to break an incomplete columnar transposition cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A transposition cipher with an incompletely filled-in rectangle is much more
    difficult to break than one whose rectangle is complete. This is for two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It is much more difficult to guess the line length because it is, by definition,
    not a divisor of the message length.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The technique of multiple anagramming doesn’t work very well here because the
    lengths of the columns vary and are unknown to the codebreaker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Therefore, the best way to attack these transpositions is with computer-assisted
    hill climbing (see [Chapter 16](c16.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to solve an incomplete columnar transposition without computer support,
    there are still ways to do so. For example, we could test different line lengths
    and various blank positions in the short line in order to perform multiple anagramming,
    but this would be extremely laborious. However, we do describe a success story
    involving such a technique for the *Kryptos* K3 message later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A more promising method is to guess words or expressions that appear in the
    plaintext. This strategy requires knowledge of the plaintext and some luck, but
    often, there is no alternative.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we look at another IRA cryptogram from the 1920s, provided to
    us by Tom Mahon and Jim Gillogly (see [Chapter 16](c16.xhtml)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/g10005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s a transcript, omitting the numbers at the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UHTAO EUESI YSOIO OMTOG OSMNY DMHRS OSRAS NOEEO MRYUR TRRRF CNTYR NIRIH IUSNR
    TNENF UMYOA SRREO TOIME IPEFR TIAOT TRHDT AOTNP TOCOA NMB`'
  prefs: []
  type: TYPE_NORMAL
- en: Frequency analysis confirms that we are probably dealing with a transposition
    cipher. This comes as no surprise, as the majority of the IRA messages that our
    colleague Gillogly broke were of this kind. The message contains 113 letters.
    As 113 is a prime number, it cannot be a cryptogram of the completely filled-in
    rectangle type. We therefore assume that we are dealing with an incomplete columnar
    transposition.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things easier, let’s say that we have a crib: the plaintext contains
    the phrase `DESTROY ANY AMMUNITION` (twenty letters). Of course, having knowledge
    of three consecutive plaintext words is a rare case in practice, but without such
    a crib, it would be extremely difficult to break the encryption manually.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that the keyword has fewer than twenty letters, the phrase spreads
    to at least two lines. If the keyword has, say, fifteen letters, it might look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`......DESTROYAN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YAMMUNITION....`'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the letter pairs `D` and `I`, `E` and `T`, `S` and `I`, `T`
    and `O`, and `R` and `N` align from different rows. This means that, if our guess
    is correct, the digraphs `DI`, `ET`, `SI`, `TO`, and `RN` must appear in the ciphertext.
    As we don’t see all of them in practice, we can conclude that our assumed keyword
    length is wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now look for other possibilities in a systematic way. The following table
    lists the letter pairs in the ciphertext that start with one of the first four
    letters of our crib:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Letter** | **Ciphertext digraph starting with this letter** | **Distance
    of digraph letters in the phrase** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `D` | `DM` | 11, 12 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `DT` | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| `E` | `EE` | — |'
  prefs: []
  type: TYPE_TB
- en: '|  | `EI` | 14, 16 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `EF` | — |'
  prefs: []
  type: TYPE_TB
- en: '|  | `EN` | 7, 13, 18 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `EO` | 4 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `ES` | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `EU` | 12 |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | `SI` | 14, 16 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `SM` | 9, 10 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `SN` | 6, 12, 17 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `SO` | 16 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `SR` | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| `T` | `TA` | 4, 7 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `TI` | 1, 12, 14 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `TN` | 3, 5, 11, 16 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `TO` | 2, 15 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `TR` | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `TT` | 13 |'
  prefs: []
  type: TYPE_TB
- en: '|  | `TY` | 3, 6 |'
  prefs: []
  type: TYPE_TB
- en: 'As can be seen, a distance of twelve appears for every letter at least once.
    We can therefore conclude that the keyword we are looking for has twelve letters,
    and we can set up the following (empty) twelve-column transposition table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 2 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 3 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 4 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 5 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 6 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 7 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 8 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 9 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| 10 |  |  |  |  |  |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'The letter pairs with a distance of twelve are `DM`, `EU`, `SN`, and `TI`.
    We get a match if we write the crib into the table as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  prefs: []
  type: TYPE_TB
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'The letter pair `DM` appears only once in the ciphertext and is followed by
    an `H`. The same is true for `EU` (followed by an `E`), `SN` (followed by an `R`),
    `TI` (followed by an `A`), `YO` (followed by an `A`), and `AN` (followed by an
    `M`). The letter pairs `RT` and `OI` appear several times. We can now add a third
    line to our table excerpt:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  prefs: []
  type: TYPE_TB
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `H` | `E` | `R` | `A` | `I/N/R` | `O/M` | `A` | `M` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Now, we try to add further rows to the table, above and below the three lines
    we already have. Of course, we can never be sure that these lines really exist;
    we might have reached the bottom or the top of the table. Let’s try to put a line
    on top of our table fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ? |  | `Y` | `O` | `U` | `R` | `F/N/U` | `S/T` | `M` | `O` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  prefs: []
  type: TYPE_TB
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `H` | `E` | `R` | `A` | `I/N/R` | `O/M` | `A` | `M` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: The new line contains the word `YOUR`. This makes sense, so we can assume that
    the line really exists. Next, take a look at the first and last lines of the sixth
    and seventh columns. Which of the choices (`F/N/U`, `S/T`, `I/N/R`, or `O/M`)
    is correct? `YOURFSMO` in the first line wouldn’t make sense. Because `S` and
    `T` are consonants, it is very likely that `U` (the only vowel among the three
    options) is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us the choice between the combinations `YOURUSMO` (line 1) / `HERAROAM`
    (line 4) and `YOURUTMO` (line 1) / `HERARMAM` (line 4). The latter option is more
    likely, as the words `UTMOST` and `ARMAMENT` can be derived from it. Here’s the
    new version of our table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ? |  | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  prefs: []
  type: TYPE_TB
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Now, we add further lines in a similar manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ? |  | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `N` | `A` | `I` | `F` | `Y` | `O` | `U` |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  prefs: []
  type: TYPE_TB
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ? |  | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'As the string `UHTAO` (in the third column) appears at the beginning of the
    cipher message, we know that there can’t be a row above `OURIO` . . . Now that
    we have reached the top of the table, the rest of it can be derived easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `Y` | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` | `O` | `R` | `T`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `S` | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` | `S` | `F` | `R`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `O` | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` | `R` | `C` | `H`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `I` | `N` | `A` | `I` | `F` | `Y` | `O` | `U` | `C` | `A` | `N` | `D`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `O` | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` | `S` | `T` | `T`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `O` | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` | `O` | `R` | `O`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `T` | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` | `E` | `N` | `T`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | `O` | `R` | `S` | `T` | `O` | `R` | `E` | `S` | `B` | `E` | `I` | `N`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | `G` | `S` | `I` | `N` | `T` |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Here’s the plaintext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`YOURIOREPORT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SSHIPMENTSFR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OMTHEREFORCH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INAIFYOUCAND`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OYOURUTMOSTT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ODESTROYANYA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MMUNITIONORO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`THERARMAMENT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ORSTORESBEIN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GSINT`'
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, we have broken this encryption without reconstructing
    the keyword. (The table’s header row contains only question marks.) Usually, a
    codebreaker is not really interested in obtaining the keyword, so long as they
    can discover the plaintext.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, it is not even possible to recover the keyword with certainty.
    All we know is that the keyword has twelve letters and that, if we sort these
    letters alphabetically, we get a certain transposition. Using a computer program,
    Gillogly searched for English words that have the desired property. The only plausible
    candidate he found was `CHAMPIONSHIP`. It is very likely that this is the keyword
    the IRA used. This provides us with the complete transposition table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **`C`** | **`H`** | **`A`** | **`M`** | **`P`** | **`I`** | **`O`** |
    **`N`** | **`S`** | **`H`** | **`I`** | **`P`** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `Y` | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` | `O` | `R` | `T`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `S` | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` | `S` | `F` | `R`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `O` | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` | `R` | `C` | `H`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `I` | `N` | `A` | `I` | `F` | `Y` | `O` | `U` | `C` | `A` | `N` | `D`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `O` | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` | `S` | `T` | `T`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `O` | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` | `O` | `R` | `O`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `T` | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` | `E` | `N` | `T`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | `O` | `R` | `S` | `T` | `O` | `R` | `E` | `S` | `B` | `E` | `I` | `N`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | `G` | `S` | `I` | `N` | `T` |  |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: Success stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kryptos K3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Earlier chapters discussed portions of the *Kryptos* sculpture (see Appendix
    A). In this section, we focus on the third part of the *Kryptos* message, known
    to its aficionados as K3\. This 336-letter cryptogram was solved by, among others,
    CIA employee David Stein in 1998.^([2](b06.xhtml#c10-endnote-2)) Stein did not
    use a computer for his codebreaking work, instead relying only on pencil-and-paper
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The full ciphertext on *Kryptos* consists of 869 characters, which are all letters
    and a few question marks. Not realizing that *Kryptos* contained more than one
    encrypted message, Stein started, like most codebreakers do, with a frequency
    count. His first successes were to solve K1 and K2 on the upper ciphertext plate
    (see [Chapter 8](c08.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: 'When he set his sights on the section in the lower plate, he noticed a substantial
    difference between it and the ciphertext on the upper plate. Among other things,
    the frequencies of the letters preceding the only question mark on that lower
    plate differed from the frequencies of the letters that followed it. (This question
    mark can be seen in the transcript of the entire *Kryptos* text in Appendix A.)
    The section of text starting at the beginning of the lower plate and ending at
    that question mark are what eventually became known as K3\. It reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ENDYAHROHNLSRHEOCPTEOIBIDYSHNAIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CHTNREYULDSLLSLLNOHSNOSMRWXMNE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TPRNGATIHNRARPESLNNELEBLPIIACAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`WMTWNDITEENRAHCTENEUDRETNHAEOE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TFOLSEDTIWENHAEIOYTEYQHEENCTAYCR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EIFTBRSPAMHHEWENATAMATEGYEERLB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TEEFOASFIOTUETUAEOTOARMAEERTNRTI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BSEDDNIAAHTTMSTEWPIEROAGRIEWFEB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AECTDDHILCEIHSITEGOEAOSDDRYDLORIT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RKLMLEHAGTDHARDPNEOHMGFMFEUHE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ECDMRIPFEIMEHNLSSTTRTVDOHW`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stein determined the following frequencies for K3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/g10006.png)'
  prefs: []
  type: TYPE_IMG
- en: The letters had frequencies similar to normal English, so he assumed that a
    transposition cipher had been used. His first guess was that he was dealing with
    a complete columnar transposition. For instance, a table consisting of sixteen
    columns and twenty-one rows seemed possible, as did six columns and fifty-six
    rows. However, his further examinations did not confirm this hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: Stein next considered an incomplete columnar transposition consisting of, for
    example, a 17 × 20 table with only thirteen letters in the bottom row. As mentioned
    earlier in this chapter, breaking an incomplete columnar transposition by hand
    without a crib is very difficult—and Stein didn’t have a crib. So, he decided
    to do it the hard way and check every table size that seemed plausible. Because
    the cryptogram consisted of 336 letters, there were, in theory, no fewer than
    336 different line lengths to test. Even after removing especially short and long
    lines, at least 200 options remained.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things easier, Stein assumed that the transposition table had four
    lines. This was just a guess, but he had to start somewhere. This limited the
    number of table variants to twenty-eight. For each variant, Stein had to check
    many potential positions of the shorter three-letter (as opposed to four-letter)
    columns. Here is one example, with a line length of eighty-eight:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EAHRCODHITYSSOORNRANPNLPAWNEAEUTETSIHOYEAETPHNMGETOIEEAENBDATEEGEBTIHIOSYRKEGANMMHDPMLTD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NHNHPIYNANULLHSWENTRENEICMDEHNDNOFEWAYQNYIBAEAAYREAOTORERSDAMWRRWADLITEDDILHTREGFEMFESRO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DRLETBSACRLLLSMXTGIASEBIATINCERHEODEETHCCFRMWTTELESTUTMRTENHSPOIFEDCSEADLTMADDOFEEREHSTH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YOSOEI HED NN MP HRL L EWTRT EA LTNIEETR SHEAE BFFUAOATI ITTIA ECHE GORORL
    HPH UCIINTVW`'
  prefs: []
  type: TYPE_NORMAL
- en: To check whether a certain line length and the positions of the three-letter
    columns were correct, Stein tried to reorder the columns until common letter combinations
    such as `EN`, `AS`, `LLY`, and `THE` appeared. In other words, he used multiple
    anagramming based on columns. In the example above, it seems possible that the
    first two columns belong together, as `EA`, `NH`, `DR`, and `YO` are all common
    English digraphs. On the other hand, the last two columns don’t fit, as the letter
    pair `VW` is rarely encountered in an English text, whether in a single word or
    connecting two words (comprising the end of one and the beginning of another).
    It could be an abbreviation for “Volkswagen,” but that term appearing in *Kryptos*
    seems highly unlikely!
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Stein’s method was quite laborious. Not only was it difficult
    to check the plausibility of two columns appearing next to each other based on
    only three or four digraphs, but the columns also changed considerably as soon
    as only a few of the three-letter columns were moved. Nevertheless, Stein could
    rule out the line lengths of eighty-four and eighty-five (the two shortest possible,
    if there are four lines).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, he tested a line length of eighty-six. This left seventy-eight letters
    in the last line. Here’s one of the many setups he likely tried:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EYOSOEIHANULLHSXTGHRLLPCANEAEDNOODEEIQNYIRMWTTEBFOTUTMRTEITTIEIECHEIOSYRKLGANMFEMFESRO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NAHRCODNCRLSLSMMPANPNEIEMDEHNRHELTNOTHCCFSHEAEETAFUAOATIDATERAEBTIITEDDIMETREGEEREHSTH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DHNHPIYAHEDLNNRNRTRENBIWTINCEEATSIHYEETRTPHNMGRESIEEAENBDAMWOGWADLHEADLTLHDDOFUCIINTVW`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RLETBSITYS OOWENIASELA WTRTUTEFEWA YEAEBAEAAYLE OTORERSNHSP RFEDCSGOROR AHPHMHDPMLTD`'
  prefs: []
  type: TYPE_NORMAL
- en: When working through this and numerous other combinations containing eighty-six
    letters in the first three lines and seventy-eight in the last, Stein realized
    that this time, multiple anagramming delivered more promising results. The digraphs
    seemed plausible; however, he couldn’t determine the correct positions of the
    three-letter columns.
  prefs: []
  type: TYPE_NORMAL
- en: After some additional examination, Stein concluded that the empty fields of
    the three-letter columns belonged in the top row, not in the lowest one, meaning
    that the first rather than the last line was incomplete. Then, after countless
    hours of manual multiple anagramming (all done on his own time, not as an employee),
    Stein finally found out that the following combination . . .
  prefs: []
  type: TYPE_NORMAL
- en: '`YOSOEIHANU LHSXTGHRLLP ANEAEDNOODE IQNYIRMWTTEB OTUTMRTEITT EIECHEIOSYR LGANMFEMFESR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EAHRCODNCRLLLSMMPANPNEICMDEHNRHELTNETHCCFSHEAEETFFUAOATIDATEIAEBTIITEDDIKETREGEEREHSTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NHNHPIYAHEDSNNRNRTRENBIETINCEEATSIHOEETRTPHNMGREAIEEAENBDAMWRGWADLHEADLTMHDDOFUCIINTVH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DRLETBSITYSLOOWENIASELAWWTRTUTEFEWAYYEAEBAEAAYLESOTORERSNHSPORFEDCSGORORLAHPHMHDPMLTDW`'
  prefs: []
  type: TYPE_NORMAL
- en: '. . . could be reordered to this meaningful text:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FLICKERBUTPRESENTLYDETAILSOFTHEROOMWITHINEMERGEDFROMTHEMISTXCANYOUSEEANYTHINGQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OLEALITTLEIINSERTEDTHECANDLEANDPEEREDINTHEHOTAIRESCAPINGFROMTHECHAMBERCAUSEDTHEFLAMETO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ASREMOVEDWITHTREMBLINGHANDSIMADEATINYBREACHINTHEUPPERLEFTHANDCORNERANDTHENWIDENINGTHEH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SLOWLYDESPARATLYSLOWLYTHEREMAINSOFPASSAGEDEBRISTHATENCUMBEREDTHELOWERPARTOFTHEDOORWAYW`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In finding the correct arrangement of the columns, Stein was aided by the fact
    that they had been reordered in a regular way. As shown in the following diagram,
    the first column (`END`) was moved to position 79, the second one (`YAHR`) to
    72, the third one (`OHNL`) to 65, the fourth one (`SRHE`) to 58, the fifth one
    (`OCPT`) to 51, and so on. With each step, the number was lowered by seven:'
  prefs: []
  type: TYPE_NORMAL
- en: '`YOSO ... ... DFR``O``MTHEMI``S``TXCANY``O``USEEAN``Y``THINGQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EAHRC ... → ... RES``C``APINGF``R``OMTHEC``H``AMBERC``A``USEDTH``E``FLAMETO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NHNHP ... ... EUP``P``ERLEFT``H``ANDCOR``N``ERANDT``H``ENWIDE``N``INGTHEH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DRLET ... ... THA``T``ENCUMB``E``REDTHE``L``OWERPA``R``TOFTHE``D``OORWAYW`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last deciphering step was to read the four lines in reverse order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SLOWLY DESPARATLY SLOWLY THE REMAINS OF PASSAGE DEBRIS THAT ENCUMBERED THE
    LOWER PART OF THE DOORWAY WAS REMOVED WITH TREMBLING HANDS I MADE A TINY BREACH
    IN THE UPPER LEFT HAND CORNER AND THEN WIDENING THE HOLE A LITTLE I INSERTED THE
    CANDLE AND PEERED IN THE HOT AIR ESCAPING FROM THE CHAMBER CAUSED THE FLAME TO
    FLICKER BUT PRESENTLY DETAILS OF THE ROOM WITHIN EMERGED FROM THE MIST X CAN YOU
    SEE ANYTHING Q`'
  prefs: []
  type: TYPE_NORMAL
- en: This text is a paraphrased excerpt from the diary of Howard Carter, the archaeologist
    who discovered the tomb of the Egyptian pharaoh Tutankhamun on November 26, 1922.
  prefs: []
  type: TYPE_NORMAL
- en: Stein spent hundreds of hours breaking this ciphertext, but his solution still
    required luck, as is the case with the successes of many codebreakers. For example,
    one sequence that he guessed represented the word `THE` turned out to be `THEY`.
    Also, his (quite speculative) assumption that there were four lines in the table
    proved correct. Lastly, the third of twenty-eight possible line lengths he checked
    turned out to be the right one. Sometimes, luck is the companion of the diligent.
  prefs: []
  type: TYPE_NORMAL
- en: Antonio Marzi’s radio messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Antonio Marzi (1924–2007) was a spy and partisan working against the German
    occupying force in Udine, in northern Italy, during World War II.^([3](b06.xhtml#c10-endnote-3))^,
    ^([4](b06.xhtml#c10-endnote-4)) Every day, Marzi radioed an encrypted report about
    the current situation in the city to an outside contact, probably a British intelligence
    officer. Contrary to usual precautions, he didn’t destroy his messages after sending
    them—a dangerous practice, but one that left behind a treasure trove for crypto-historians!
    His collection of reports has been preserved as a 200-page encrypted war journal
    with scores of encrypted entries created between 1944 and 1945 ([Figure 10-1](#figure10-1)).
  prefs: []
  type: TYPE_NORMAL
- en: Decades later, when historians became interested in Marzi’s report, Marzi himself
    could no longer decrypt it. He remembered that he had used a double columnar transposition
    and that he had chosen the keywords from the poem “Un giovinetto pallido e bello”
    by Italian poet Aleardo Aleardi (1812–1878). But whenever he tried to decrypt
    a message in this way, no meaningful text emerged. In 2003, Marzi finally asked
    Italian encryption expert Filippo Sinagra for help. Sinagra could not decipher
    the messages either, so he shared them with other experts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/f10001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-1: During World War II, Italian spy Antonio Marzi sent encrypted
    reports from the city of Udine to an outside contact. Seventy years later, these
    cryptograms were broken by German cryptanalyst Armin Krauß*.*'
  prefs: []
  type: TYPE_NORMAL
- en: In 2011, the crypto puzzle website MysteryTwister published Antonio Marzi’s
    radio messages as an unsolved challenge. For two years, none of this portal’s
    many users came up with a solution. Then, our colleague Armin Krauß (Krauss),
    the top-scoring participant at that time, examined this mystery. He started by
    writing a computer program that attempted decipherment with a double columnar
    transposition. Examining many configuration possibilities, he tried words that
    appeared in Aleardi’s poem as keywords for decipherment, checking all combinations
    of one to five words; however, even after 2.6 million attempts, the program delivered
    nothing but gibberish.
  prefs: []
  type: TYPE_NORMAL
- en: The breakthrough came when Armin guessed that the first and last five-letter
    group of each entry might not belong to the encrypted message but instead provided
    some metainformation (also known as an *indicator*). When Armin omitted these
    two groups, the decryption program suddenly began delivering meaningful words.
    The first phrase he recognized was `SITUAZIONE LOCALE TRANQUILLA` (`LOCAL SITUATION
    QUIET`).
  prefs: []
  type: TYPE_NORMAL
- en: 'At that point, Armin could decrypt all the radio messages, although he kept
    encountering a surprising number of spelling mistakes. After some further investigation,
    he found the reason for this: the metainformation was contained in the fourth
    group instead of the first group. When Armin adjusted his program accordingly
    to omit the fourth and last groups of each message, most of the spelling errors
    vanished.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Armin wanted to know what the metainformation given in the fourth and
    the last group of every message meant. The most obvious explanation was that these
    groups hid the keywords Marzi had chosen from the poem. This guess proved correct;
    we will explain the details of this system later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s encrypt an excerpt of the diary as an example. On April 28, 1945, Marzi
    wrote the message reproduced below. The letters `ZC` at the beginning of the message
    and `SL` at the end are meaningless nulls. Roman numerals are used to encode numbers;
    the word `ALT` serves as a period:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZC NR LXXXIV DEL XXVIII ORE DICIOTTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QUESTA NOTTE FORZE PARTIGIANE DELLA GARIBALDI ET OSOPPO FRIULI CHE HANNO REALIZZATO
    ACCORDO COMANDO UNICO TENTERANNO OCCUPAZIONE UDINE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PREFETTO MEDIAZIONE RESA COMANDO PIAZZA TEDESCO ANCORA ESITANTE ACCETTAZIONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OGGI PATRIOTI TENTATO INVANO PRESA CIVIDALE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TARCENTO ET CISTERNA GIA POSSESSO PATRIOTI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TEDESCHI AVVIANO NORD QUANTI AUTOMEZZI POSSIBILE MA PARE ORMAI SICUR O BLOCCAGGIO
    PATRIOTI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TEDESCHI ORDINATO COPRIFUOCO ORE VENTI PERQUISIZIONI STRADE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FINE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SL`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Number 84 from 28th, 6pm`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Tonight, partisan forces of the Garibaldi and the Osoppo Friuli who have implemented
    single command agreement will try to occupy Udine. Prefect is mediating surrender.
    The German place command still hesitating to accept. Today patriots attempted
    to capture Cividale, but to no avail. Tarcento and Cisterna are already owned
    by the patriots. Germans start north with as many vehicles as possible, but situation
    still seems safe because of the blocking patriots. Germans ordered curfew with
    street patrols after 8pm. End.`'
  prefs: []
  type: TYPE_NORMAL
- en: Marzi always took his keywords from the following excerpt of the poem. Each
    word is marked with a letter of the alphabet, and the letters `R`, `E`, `N`, `A`,
    `T`, and `O` are skipped. *Renato* is a common name in Italian; it means “Reborn.”
  prefs: []
  type: TYPE_NORMAL
- en: '[B]`UN` [C]`GIOVINETTO` [D]`PALLIDO` [F]`BELLO` [G]`COLLA` [H]`CHIOMA` [I]`DORO`
    [J]`COL` [K]`VISO` [L]`GENTIL` [M]`DA` [P]`SVENTURATO` [Q]`TOCCO` [S]`SPONDA`
    [U]`DOPO` [V]`LUNGO` [W]`MESTO` [X]`REMIGAR` [Y]`DELLA` [Z]`FUGA`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The English translation is as follows: “A pale beautiful boy with golden hair
    and the friendly face of the unfortunate man, touched the shore after a long and
    sad rowing of his escape.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Marzi chose the second and twelfth words of the poem to be his keys for that
    day: `GIOVINETTO` and `SVENTURATO`, producing the keyword `GIOVINETTOSVENTURATO`.
    The two letters identifying this keyword in the poem are `C` and `P`, which will
    become important later. Here’s the plaintext written below the keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GIOVINETTOSVENTURATO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZCNRLXXXIVDELXXVIIIO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`REDICIOTTOALTQUESTAN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OTTEFORZEPARTIGIANED`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ELLAGARIBALDIETOSOPP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OFRIULICHEHANNOREALI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZZATOACCORDOCOMANDOU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NICOTENTERANNOOCCUPA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZIONEUDINEALTPREFETT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OMEDIAZIONERESACOMAN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DOPIAZZATEDESCOANCOR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AESITANTEACCETTAZION`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EALTOGGIPATRIOTITENT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATOINVANOPRESACIVIDA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LEALTTARCENTOETCISTE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RNAGIAPOSSESSOPATRIO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TIALTTEDESCHIAVVIANO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NORDQUANTIAUTOMEZZIP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OSSIBILEMAPAREORMAIS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ICUROBLOCCAGGIOPATRI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OTIALTTEDESCHIORDINA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TOCOPRIFUOCOOREVENTI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PERQUISIZIONISTRADEF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INESL`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the columns were sorted such that the letters in the top row were in
    alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AEEGIINNOOORSTTTTUVV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IXLZCLXXNVOIDXIXIVRE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TOTRECIQDONSATTUAEIL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NRTOTFOITPDAAZEGEIER`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ORIELGAELAPSLIBTPOAD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AINOFULNREIEHCHOLRIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DCCZZOAOARUNDCOMOATO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UNNNITEOCRACATEOPCON`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EDTZIEUPOETFAINRTENL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MZEOMIASENNOEIOAACDR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CZSDOAZCPERNDATOOAIE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INEAETATSANZCTETOAIC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EGIEAOGOLATTTIPTNITR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IASATNVAOPAVRNOCDIIE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SAOLETTEAEEINRCTTCLT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RPSRNIAOASOTEOSPIAGS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AEITITTAASOICDEVNVLH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZATNOQUORIPZANTMIEDU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALROSBIESASMPEMOIRIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TLGICOBIUCIAAOCORPRG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ITHOTLTIIEADSEDONRAC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NIOTOPRRCOIECFUETVOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DSIPEUISRIFAOIZTERQN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INL E S`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transcribing the message column-wise, Marzi derived the following intermediate
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ITNOADUEMCIEISRAZATINDXORRICNDZZNGAAPEALLTISLTTINCNTESEISOSITRGHOI ZROEOZNZODAEALRTNOIOTPICETLFZIIMOEATENIOSCTOENLCFGUOTEIATONTITQBOL
    PULXIOALAEUAZAGVTATUIBTRIXQIENOOPSCTOAEOAOEIIRSNDTLRACOEPSLOAAARSU ICREVOPAERRENEAAPESSIACEOIONDPIUATNRNTAEOOPSIAIFISASENCFONZTVITIZM
    ADEADAALHDAAEDCTRNECAPASCOXTZICCTIIATINRODNEOEFIITEBHOENOTEPOCSETM CDUZXUGTOMORAOTTCTPVMOOOETIAEPLOPTAOONDTINIIRNTEVEIORACECAAIICAVER
    PRVRRIEAITONDIITILGLDIRAOQSELRDAONLRECRETSHUAGCON`'
  prefs: []
  type: TYPE_NORMAL
- en: In order to get a double columnar transposition, Marzi now had to repeat the
    previous procedure. Of course, it would have been a good idea to use a different
    keyword at this point, but, perhaps unwisely, Marzi always chose the same expression
    he had used for the first transposition (in this case, `GIOVINETTOSVENTURATO`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the intermediate message written below the keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GIOVINETTOSVENTURATO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ITNOADUEMCIEISRAZATI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NDXORRICNDZZNGAAPEAL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LTISLTTINCNTESEISOSI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TRGHOIZROEOZNZODAEAL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RTNOIOTPICETLFZIIMOE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATENIOSCTOENLCFGUOTE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IATONTITQBOLPULXIOAL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AEUAZAGVTATUIBTRIXQI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ENOOPSCTOAEOAOEIIRSN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DTLRACOEPSLOAAARSUIC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`REVOPAERRENEAAPESSIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CEOIONDPIUATNRNTAEOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PSIAIFISASENCFONZTVI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TIZMADEADAALHDAAEDCT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RNECAPASCOXTZICCTIIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TINRODNEOEFIITEBHOEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OTEPOCSETMCDUZXUGTOM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ORAOTTCTPVMOOOETIAEP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LOPTAOONDTINIIRNTEVE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IORACECAAIICAVERPRVR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RIEAITONDIITILGLDIRA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OQSELRDAONLRECRETSHU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AGCON`'
  prefs: []
  type: TYPE_NORMAL
- en: 'After sorting the columns alphabetically, the table looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AEEGIINNOOORSTTTTUVV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AUIITADSNCEIZIEIMRTA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EINNDRRGXDLPZCNAAAOZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OTELTLTSICISNINESIST`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EZNTROIZGELAOROOADHZ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MTLRTIOFNCEIEPIZOIOT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OSLATIOCEOECECTFTGNN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OIPIANTUTBLIOTQLAXOL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`XGIAEZABUAIITVTTQRAU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RCAENPSOOANIETOESIOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UOADTACALSCILEPAIRRO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SEAREPAAVEASNRRPIEOE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EDNCEONROUOAAPINOTIT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TICPSIFFISIZESAOVNAN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEHTIADDZATEAADACAML`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IAZRNAPIEOATXSCCICCT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ONITIODTNENHFEOEEBRI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TSUOTOCZEMMGCETXOUPD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ACOORTTOAVPIMTPEETOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EOILOAOIPTETINDRVNTN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RCAIOCEVRIRPIAAEVRAC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IOIRIITLEIADINDGRLAT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SDEOQLRCSNUTLAORHEER`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AGN C O`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transcribing this new version column-wise, Marzi next derived the following
    ciphertext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AEOEMOOXRUSETDIOTAERISUITZTSIGCOEDIEANSCOCODINENLLPIAAANCHZIUOIAIE INLTRAIAEDRCPTRTOOLIROATDTRTTAENTEESINITROOIQGARLOIINZPAPOIAAOOTAC
    ILNDRTIOOTASCANFDPDCTOETRSGSZFCUBOAARFDITZOIVLCNXIGNETUOLVOIZENEAP RESCCDCECOBAASEUSAOEMVTIINILILEELINCAOITANMPERAUZPSAIUIIISSAZETHGI
    TPDTIZNOEEOTELNAEAXFCMIIILECIRPCTVTERPSASEETNANAMNNOITQTOPRIADCOTP DADORAEOZFLTEAPNOACEXEREGRTASAOTAQSIIOVCIEOEVVRHAAIDIGXRIRETNACBUT
    NRLEOOSHONOAOROIAMCRPOTAAEOEZTZTNLUOOETNLTIDONCTR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last step, Marzi needed to include identifiers of the keywords he had
    used. As mentioned, `GIOVINETTO` and `SVENTURATO` were identified by the letters
    `C` and `P`. Marzi extended these two characters to the five-letter group `CRPEN`,
    adding the null characters `R`, `E`, and `N`. (Remember that the letters `R`,
    `E`, `N`, `A`, `T`, and `O` didn’t stand for words in the poem and therefore could
    be used as meaningless filler material.) Then, he converted this filler to numbers
    and added 44,739 to this expression. This number was the same for all messages.
    To perform the number-to-letter conversion, he used an alphabet written in the
    following order: `B`, `C`, `D`, `F`, `G`, `H`, `I`, `J`, `K`, `L`, `M`, `P`, `Q`,
    `S`, `U`, `V`, `W`, `X`, `Y`, `Z`, `R`, `E`, `N`, `A`, `T`, `O`. The complete
    operation looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CRPEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`44739`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-----`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTYTH`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, Marzi repeated the procedure, extending `CP` with the null characters
    `A`, `T`, and `O` to build the five-letter block `ATOCP` and then adding 44739:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATOCP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`44739`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-----`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CDIGR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Marzi recorded the message in groups of five, adding the block indicating
    the first keyword (`HTYTH`) at the fourth position and the block indicating the
    second keyword (`CDIGR`) at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AEOEM OOXRU SETDI` `HTYTH` `OTAER ISUIT ZTSIG COEDI EANSC OCODI NENLL PIAAA
    NCHZI UOIAI EINLT RAIAE DRCPT RTOOL IROAT DTRTT AENTE ESINI TROOI QGARL OIINZ
    PAPOI AAOOT ACILN DRTIO OTASC ANFDP DCTOE TRSGS ZFCUB OAARF DITZO IVLCN XIGNE
    TUOLV OIZEN EAPRE SCCDC ECOBA ASEUS AOEMV TIINI LILEE LINCA OITAN MPERA UZPSA
    IUIII SSAZE THGIT PDTIZ NOEEO TELNA EAXFC MIIIL ECIRP CTVTE RPSAS EETNA NAMNN
    OITQT OPRIA DCOTP DADOR AEOZF LTEAP NOACE XEREG RTASA OTAQS IIOVC IEOEV VRHAA
    IDIGX RIRET NACBU TNRLE OOSHO NOAOR OIAMC RPOTA AEOEZ TZTNL UOOET NLTID ONCTR`
    `CDIGR`'
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly the ciphertext radio message Marzi transmitted on April 28,
    1945.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yet another IRA message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 10-2](#figure10-2) shows a message encrypted using an incomplete columnar
    transposition and sent by the IRA in the 1920s.^([5](b06.xhtml#c10-endnote-5))'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c10/f10002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-2: An IRA message encrypted with an incomplete columnar transposition'
  prefs: []
  type: TYPE_NORMAL
- en: You can try to solve it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: The Double Columnar Transposition Reloaded challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We mentioned that double columnar transposition (DCT) is one of the best manual
    ciphers known. In [Chapter 16](c16.xhtml), we will introduce a quite difficult
    DCT challenge that our colleague, the Israeli codebreaker George Lasry, solved
    in 2013 with a hill-climbing algorithm. After this success, Arno Wacker, Bernhard
    Esslinger, and Klaus decided to create a new and even more difficult puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, they created three new challenges, calling them DCT Reloaded 1, 2,
    and 3\. The first puzzle is the easiest and the last is the most difficult. Details
    of these and other DCT challenges are available on the crypto puzzle website MysteryTwister
    ([https://mysterytwister.org](https://mysterytwister.org)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, for example, is DCT Reloaded 2\. Both keywords used in this transposition
    are randomly chosen letter strings with a length of twenty to twenty-seven characters
    each:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NWTDSSHAUIASOOTLDEDNLTHOBENHETCWTHERTPSNTMCTIAYEINNIUIYOPLEIRGHMNU TARFONYMLDSERSAELANNLOSAWALTODOCAHUOTOPAREAEEESPDEYATUENINNCNBDPCO
    FORETSYHAHANTEDERPERCRSGEANNIHYTTEDNGICOIOLABSRONNWLNTALWLVRIBHKTE TECNPSFHACMIGTYODEONMTOIVUAIAEESKKLAROMBAYKOSRNEEHTHSIMSEOUAWLYAWH
    SWWSSWLCIYCEONUPNEESURSBETDALHDAHLIOAAETONNDOELTHHNHHDCOTUIITEAYTE RRHOENKEUCTIRANECYQNACTMBWAPDIAEXEUTIATAJLITEALFISIEATATAEOTNEESME
    UDDADOROEGORPELGPVMETHHSDDRMSNDERMSLEOANENHTCHPHSSEASSEDBHVESNUGON IOLELSUCASELSTEIESYATREEELADIEYOEOKAREEELETCOSDHCSAETSTSFRTSELEITD
    NHBRINSERHRTLNAXYONAMECAIESATAEERIAOTCEENETFARMRTSREAPAYNIRTNITSRA THIWRIPRTDIIRECSWADSOATUTENMVVOAISISONGGWTH`'
  prefs: []
  type: TYPE_NORMAL
- en: There is no doubt that this challenge is an extremely difficult one!
  prefs: []
  type: TYPE_NORMAL
- en: Unsolved cryptograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Catokwacopa ad series
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the most puzzling encrypted newspaper ad series we are aware of was
    published in the London *Evening Standard* in 1875\. Like most of the other newspaper
    ads covered in this book, we found these in Jean Palmer’s 2005 book *The Agony
    Column Codes & Ciphers*.^([6](b06.xhtml#c10-endnote-6)) This particular series
    consists of two ads. The first was printed in the May 8, 1875, issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '`W. Str 53\. Catokwacopa. Olcabrokorlested. Coomemega. Sesipyyocashostikr.
    Rep.—Itedconlec mistrl. —Hfsclam 54, 3 caselcluchozamot. 1\. 6\. 9\. Mopredisco.
    Contoladsemot. Iadfilisat. Qft. Cagap. Balmnopsemsov. Ap. 139.—Hodsam 55, 6\.
    Iopotonrogfimsecharsenr. Tolshr. Itedjolec. Mistrl.—Ding Declon. Ereflodbr.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Twelve days later, on May 20, a similar ad was published in the same newspaper:'
  prefs: []
  type: TYPE_NORMAL
- en: '`W.—Umem 18\. Poayatlgerty. Dpeatcnrftin. Nvtinrdn. Dmlurpinrtrcamur. Etd.—Atndngtnsurs.
    Otenpu.—Eftdorshpxn. 18\. Ndtsfindseseo. Cotegr Tavlysdinlge. Ngtndusdcndo. Edrstneirs.
    Ui, Ndted. Iolapstedtioc. A. P. 138.—Yxn. 18\. 18\. Wtubrfftrstendinhofsvmnr.
    Dily.—Atdwtsurs. Oatvpu.—Y Arati. Rileohmae.—This will be intelligible if read
    in connection with my communication published in this column on the 8th inst.`'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the last sentence of the second ad is unencrypted. If it is correct,
    the first ad could be the key for decrypting the second (or vice versa). The letter
    frequencies are consistent with those of an ordinary English text. This makes
    it likely that we are dealing with a transposition cipher. Our guess is that the
    two ciphertexts need to be mixed somehow (e.g., letter 1 from ad 1, letter 1 from
    ad 2, letter 2 from ad 1, letter 2 from ad 2 . . .). However, so far, nobody has
    found a mixing rule that makes sense. Can a reader do better?
  prefs: []
  type: TYPE_NORMAL
