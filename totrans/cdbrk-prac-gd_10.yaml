- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Incomplete columnar transposition ciphers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不完全列换位密码
- en: '![](image_fi/502727c10/g10001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/g10001.png)'
- en: 'Having covered complete columnar transposition ciphers in the previous chapter,
    we now devote our attention to the more general case: columnar transposition with
    incompletely filled-in rectangles, also known as *incomplete columnar transposition*.
    This method works in almost the same way as the one introduced in [Chapter 9](c09.xhtml),
    the only exception being that the line length is not a divisor of the message
    length.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章我们已经介绍了完全列换位密码，现在我们将关注更一般的情况：不完全填充矩形的列换位密码，也称为*不完全列换位密码*。这种方法的工作原理几乎与[第9章](c09.xhtml)中介绍的相同，唯一的区别是行长度不是消息长度的约数。
- en: How an incomplete columnar transposition cipher works
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不完全列换位密码的工作原理
- en: 'To explain how an incomplete columnar transposition cipher works, let’s start
    with the following plaintext, which is an original message encrypted and sent
    by the Irish Republican Army, or IRA, in the 1920s (see [Chapter 16](c16.xhtml)
    for background information):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释不完全列换位密码是如何工作的，让我们从以下明文开始，这是一条由爱尔兰共和军（IRA）在1920年代加密并发送的原始信息（有关背景信息，请参见[第16章](c16.xhtml)）：
- en: '`ARGUMENTS FOR SUCH MATCHES HELPED BY FACT OF TOUR BEING PRIVATE ENTERPRISE
    AND FOR PERSONAL GAIN OF PROMOTERS`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARGUMENTS FOR SUCH MATCHES HELPED BY FACT OF TOUR BEING PRIVATE ENTERPRISE
    AND FOR PERSONAL GAIN OF PROMOTERS`'
- en: 'To encrypt this note, we first conduct a transposition based on the keyword
    `CMOPENSATION`. The IRA really used this keyword, including the spelling error.
    Note that the last line of the rectangle is not completely filled:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加密这条信息，我们首先根据关键词`CMOPENSATION`进行换位。IRA确实使用了这个关键词，包括拼写错误。请注意，矩形的最后一行没有完全填充：
- en: '`CMOPENSATION`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMOPENSATION`'
- en: '`------------`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`------------`'
- en: '`ARGUMENTSFOR`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARGUMENTSFOR`'
- en: '`SUCHMATCHESH`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`SUCHMATCHESH`'
- en: '`ELPEDBYFACTO`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`ELPEDBYFACTO`'
- en: '`FTOURBEINGPR`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`FTOURBEINGPR`'
- en: '`IVATEENTERPR`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`IVATEENTERPR`'
- en: '`ISEANDFORPER`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`ISEANDFORPER`'
- en: '`SONALGAINOFP`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`SONALGAINOFP`'
- en: '`ROMOTERS`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROMOTERS`'
- en: 'Now we sort the columns, as we did in [Chapter 9](c09.xhtml), such that the
    letters of the keyword are in alphabetical order:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们像在[第9章](c09.xhtml)中一样，对列进行排序，使关键词的字母按字母顺序排列：
- en: '`ACEIMNNOOPST`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`ACEIMNNOOPST`'
- en: '`------------`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`------------`'
- en: '`TAMFRERGOUNS`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`TAMFRERGOUNS`'
- en: '`CSMEUAHCSHTH`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`CSMEUAHCSHTH`'
- en: '`FEDCLBOPTEYA`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`FEDCLBOPTEYA`'
- en: '`IFRGTBROPUEN`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`IFRGTBROPUEN`'
- en: '`TIERVERAPTNE`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIERVERAPTNE`'
- en: '`OINPSDREEAFR`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`OINPSDREEAFR`'
- en: '`ISLOOGPNFAAN`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`ISLOOGPNFAAN`'
- en: '`SRT OE M OR`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`SRT OE M OR`'
- en: 'If we now read out the ciphertext column-wise, we get the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在按列顺序读取密文，就会得到以下内容：
- en: '`TCFITOIS ASEFIISR MMDRENLT FECGRPO RULTVSOO EABBEDGE RHORRRP GCPOAENM OSTPPEF
    UHEUTAAO NTYENFAR SHANERN`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`TCFITOIS ASEFIISR MMDRENLT FECGRPO RULTVSOO EABBEDGE RHORRRP GCPOAENM OSTPPEF
    UHEUTAAO NTYENFAR SHANERN`'
- en: This is the same encrypted message our colleague Jim Gillogly found in an IRA
    file from the 1920s:^([1](b06.xhtml#c10-endnote-1))
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们同事Jim Gillogly在1920年代的IRA档案中找到的同一条加密信息：^([1](b06.xhtml#c10-endnote-1))
- en: '![](image_fi/502727c10/g10002.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/g10002.png)'
- en: 'Even with a legitimate decryption (by an intended recipient who knows the key),
    this type of cipher system requires more work to decrypt than a complete columnar
    transposition does. The recipient first needs to look at the length of the message
    (here, ninety-two letters) and the length of the keyword (here, twelve letters).
    Ninety-two divided by twelve equals seven, with a remainder of eight. The recipient
    therefore needs a table with twelve columns that contains seven complete rows
    and one incomplete row of eight columns, in addition to a header row that contains
    the keyword:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有合法的解密（由知道密钥的接收者执行），这种类型的密码系统解密时需要的工作量也比完全列换位密码要大。接收者首先需要查看消息的长度（这里是九十二个字母）和关键词的长度（这里是十二个字母）。九十二除以十二等于七，余数为八。因此，接收者需要一个包含七行完整数据和一行八列不完全填充数据的十二列表格，并且还需要一行包含关键词的表头：
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 1 |   |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 1 |   |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 2 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 2 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 3 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 3 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 4 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 4 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 5 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 5 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 6 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 6 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 7 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 7 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 8 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 8 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: 'Next, the recipient writes the ciphertext column-wise into the table, starting
    with the `A` column, as `A` is the first letter of the alphabet that appears in
    the keyword:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，接收者按字母顺序将密文逐列填写到表格中，从 `A` 列开始，因为 `A` 是在关键字中出现的第一个字母：
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
- en: '| 1 |  |  |  |  |  |  |  | `T` |  |  |  |  |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 1 |  |  |  |  |  |  |  | `T` |  |  |  |  |'
- en: '| 2 |  |  |  |  |  |  |  | `C` |  |  |  |  |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 2 |  |  |  |  |  |  |  | `C` |  |  |  |  |'
- en: '| 3 |  |  |  |  |  |  |  | `F` |  |  |  |  |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 3 |  |  |  |  |  |  |  | `F` |  |  |  |  |'
- en: '| 4 |  |  |  |  |  |  |  | `I` |  |  |  |  |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 4 |  |  |  |  |  |  |  | `I` |  |  |  |  |'
- en: '| 5 |  |  |  |  |  |  |  | `T` |  |  |  |  |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 5 |  |  |  |  |  |  |  | `T` |  |  |  |  |'
- en: '| 6 |  |  |  |  |  |  |  | `O` |  |  |  |  |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 6 |  |  |  |  |  |  |  | `O` |  |  |  |  |'
- en: '| 7 |  |  |  |  |  |  |  | `I` |  |  |  |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 7 |  |  |  |  |  |  |  | `I` |  |  |  |  |'
- en: '| 8 |  |  |  |  |  |  |  | `S` |  |  |  |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 8 |  |  |  |  |  |  |  | `S` |  |  |  |  |'
- en: 'The next keyword letters, in alphabetical order, are `C`, `E`, and `I`, so
    the recipient proceeds with these (note that the `I` column has only seven cells):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的关键字字母按字母顺序是 `C`、`E` 和 `I`，因此接收者按此顺序继续（注意 `I` 列只有七个单元格）：
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
- en: '| 1 | `A` |  |  |  | `M` |  |  | `T` |  | `F` |  |  |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `A` |  |  |  | `M` |  |  | `T` |  | `F` |  |  |'
- en: '| 2 | `S` |  |  |  | `M` |  |  | `C` |  | `E` |  |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `S` |  |  |  | `M` |  |  | `C` |  | `E` |  |  |'
- en: '| 3 | `E` |  |  |  | `D` |  |  | `F` |  | `C` |  |  |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `E` |  |  |  | `D` |  |  | `F` |  | `C` |  |  |'
- en: '| 4 | `F` |  |  |  | `R` |  |  | `I` |  | `G` |  |  |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `F` |  |  |  | `R` |  |  | `I` |  | `G` |  |  |'
- en: '| 5 | `I` |  |  |  | `E` |  |  | `T` |  | `R` |  |  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `I` |  |  |  | `E` |  |  | `T` |  | `R` |  |  |'
- en: '| 6 | `I` |  |  |  | `N` |  |  | `O` |  | `P` |  |  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `I` |  |  |  | `N` |  |  | `O` |  | `P` |  |  |'
- en: '| 7 | `S` |  |  |  | `L` |  |  | `I` |  | `O` |  |  |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `S` |  |  |  | `L` |  |  | `I` |  | `O` |  |  |'
- en: '| 8 | `R` |  |  |  | `T` |  |  | `S` |  |  |  |  |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `R` |  |  |  | `T` |  |  | `S` |  |  |  |  |'
- en: 'Then, the recipient fills in the columns below the letters `M`, `N`, `N`, `O`,
    `O`, `P`, `S`, and `T`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，接收者将在字母 `M`、`N`、`N`、`O`、`O`、`P`、`S` 和 `T` 下填入列：
- en: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|  | **`C`** | **`M`** | **`O`** | **`P`** | **`E`** | **`N`** | **`S`** |
    **`A`** | **`T`** | **`I`** | **`O`** | **`N`** |'
- en: '| 1 | `A` | `R` | `G` | `U` | `M` | `E` | `N` | `T` | `S` | `F` | `O` | `R`
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `A` | `R` | `G` | `U` | `M` | `E` | `N` | `T` | `S` | `F` | `O` | `R`
    |'
- en: '| 2 | `S` | `U` | `C` | `H` | `M` | `A` | `T` | `C` | `H` | `E` | `S` | `H`
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `S` | `U` | `C` | `H` | `M` | `A` | `T` | `C` | `H` | `E` | `S` | `H`
    |'
- en: '| 3 | `E` | `L` | `P` | `E` | `D` | `B` | `Y` | `F` | `A` | `C` | `T` | `O`
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `E` | `L` | `P` | `E` | `D` | `B` | `Y` | `F` | `A` | `C` | `T` | `O`
    |'
- en: '| 4 | `F` | `T` | `O` | `U` | `R` | `B` | `E` | `I` | `N` | `G` | `P` | `R`
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `F` | `T` | `O` | `U` | `R` | `B` | `E` | `I` | `N` | `G` | `P` | `R`
    |'
- en: '| 5 | `I` | `V` | `A` | `T` | `E` | `E` | `N` | `T` | `E` | `R` | `P` | `R`
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `I` | `V` | `A` | `T` | `E` | `E` | `N` | `T` | `E` | `R` | `P` | `R`
    |'
- en: '| 6 | `I` | `S` | `E` | `A` | `N` | `D` | `F` | `O` | `R` | `P` | `E` | `R`
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `I` | `S` | `E` | `A` | `N` | `D` | `F` | `O` | `R` | `P` | `E` | `R`
    |'
- en: '| 7 | `S` | `O` | `N` | `A` | `L` | `G` | `A` | `I` | `N` | `O` | `F` | `P`
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `S` | `O` | `N` | `A` | `L` | `G` | `A` | `I` | `N` | `O` | `F` | `P`
    |'
- en: '| 8 | `R` | `O` | `M` | `O` | `T` | `E` | `R` | `S` |  |  |  |  |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `R` | `O` | `M` | `O` | `T` | `E` | `R` | `S` |  |  |  |  |'
- en: The recipient can now read the plaintext (`ARGUMENTS FOR SUCH MATCHES` . . .)
    line-wise.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接收者现在可以逐行阅读明文（`ARGUMENTS FOR SUCH MATCHES`。。。）。
- en: It is also possible to perform two successive incomplete columnar transpositions,
    in which the result of the first transposition is transposed again. This method,
    called *double columnar transposition*, was frequently used during World War II
    and then in the ensuing Cold War into the 1980s. Considered one of the best manual
    encryption methods, it was especially popular among intelligence operatives in
    the field. It goes without saying that a double columnar transposition should
    be used with two different keywords (preferably with different lengths). Despite
    the recommendation, of course, this best practice was not always followed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 也有可能进行两次连续的不完全列换位，在第一次换位的结果基础上再次进行换位。这种方法被称为*双重列换位密码*，在第二次世界大战期间以及随后冷战时期的1980年代被广泛使用。被认为是最好的手动加密方法之一，尤其在情报人员中非常受欢迎。不言而喻，双重列换位密码应该使用两个不同的关键词（最好长度不同）。尽管有这样的建议，当然，这一最佳实践并不总是得到遵循。
- en: How to detect an incomplete columnar transposition cipher
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测不完全列换位密码
- en: As explained in [Chapter 9](c09.xhtml), a transposition cipher is usually straightforward
    to detect. When letters of a message are transposed, neither the language’s index
    of coincidence nor its properties of frequency analysis change. So, if these values
    for a ciphertext resemble a known language—in this case, English—a transposition
    is by far the most likely candidate.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第9章](c09.xhtml)所述，换位密码通常很容易检测。当消息中的字母发生换位时，语言的重合指数或频率分析的特性并不会改变。因此，如果这些值对于密文看起来像某种已知语言——在这种情况下是英语——那么换位密码极有可能是最符合的候选项。
- en: 'From there, how do we determine what kind of transposition cipher was used?
    To keep things reasonably simple, let’s assume that we have ruled out other transposition
    ciphers (discussed in [Chapter 11](c11.xhtml)) and that the only options are complete
    or incomplete columnar transposition. At this point, we should check the length
    of a message. For instance, look at the following IRA message, which was sent
    in the 1920s (see [Chapter 16](c16.xhtml) for details):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何确定使用的是哪种换位密码呢？为了简单起见，我们假设已排除其他类型的换位密码（详见[第11章](c11.xhtml)），剩下的选择只有完全列换位或不完全列换位。在这个时候，我们应该检查消息的长度。例如，看看以下这条1920年代发出的IRA消息（详细内容见[第16章](c16.xhtml)）：
- en: '![](image_fi/502727c10/g10003.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/g10003.png)'
- en: It consists of 119 letters. As 119 is a prime number, this message could not
    have been encrypted with a completely filled-in rectangle (unless the rectangle
    consisted of only one line with a length of 119, which is unlikely). Likewise,
    the following IRA message from the same time period . . .
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它由119个字母组成。由于119是一个质数，这条消息不可能用完全填充的矩阵加密（除非矩阵只包含一行，长度为119，这种情况不太可能）。同样，下面这条来自同一时期的IRA消息也...
- en: '![](image_fi/502727c10/g10004.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/g10004.png)'
- en: . . . has forty-six letters. The sender might have used a 23 × 2 rectangle,
    but experience has shown that the IRA rarely chose twenty-three-letter keywords.
    In both cases, we are probably dealing with an incomplete columnar transposition.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: . . . 有四十六个字母。发送者可能使用了一个23 × 2的矩阵，但经验表明，IRA很少选择二十字母的关键词。无论哪种情况，我们都可能在处理不完全列换位密码。
- en: The situation changes when we encounter a message consisting of, say, eighty
    letters. In this case, a complete columnar transposition is possible but not guaranteed.
    To our regret, we are not aware of any simple method of distinguishing between
    complete and incomplete columnar transpositions if the message length allows for
    both options. All we can do is check whether solutions for a complete columnar
    transposition case work (as we described in [Chapter 9](c09.xhtml)). If not, we
    may be dealing with an incomplete columnar transposition or something else.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到一条包含例如八十个字母的消息时，情况发生了变化。在这种情况下，完全列换位是可能的，但并不一定。遗憾的是，如果消息的长度允许两种情况，我们目前还没有发现任何简单的方法来区分完全列换位和不完全列换位密码。我们能做的就是检查是否有完全列换位的解法有效（如我们在[第9章](c09.xhtml)中所描述的）。如果无效，我们可能正在处理不完全列换位密码或其他类型的密码。
- en: How to break an incomplete columnar transposition cipher
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何破解不完全列换位密码
- en: 'A transposition cipher with an incompletely filled-in rectangle is much more
    difficult to break than one whose rectangle is complete. This is for two reasons:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与完全填充矩阵的换位密码相比，带有不完全填充矩阵的换位密码要难破解得多，原因有两个：
- en: It is much more difficult to guess the line length because it is, by definition,
    not a divisor of the message length.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 猜测行长度要困难得多，因为它在定义上不是消息长度的约数。
- en: The technique of multiple anagramming doesn’t work very well here because the
    lengths of the columns vary and are unknown to the codebreaker.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多重字谜法在这里效果不好，因为列的长度变化且对密码破译者是未知的。
- en: Therefore, the best way to attack these transpositions is with computer-assisted
    hill climbing (see [Chapter 16](c16.xhtml)).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，攻击这些换位密码的最佳方法是使用计算机辅助爬山算法（参见[第16章](c16.xhtml)）。
- en: If you want to solve an incomplete columnar transposition without computer support,
    there are still ways to do so. For example, we could test different line lengths
    and various blank positions in the short line in order to perform multiple anagramming,
    but this would be extremely laborious. However, we do describe a success story
    involving such a technique for the *Kryptos* K3 message later in this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在没有计算机支持的情况下解决不完全的列换位密码，还是有一些方法可以做到的。例如，我们可以测试不同的行长度和短行中的各种空格位置，以进行多次字谜解法，但这将非常费力。然而，我们确实会在本章稍后描述一个涉及这种技术的成功案例，用于解密*Kryptos*
    K3消息。
- en: A more promising method is to guess words or expressions that appear in the
    plaintext. This strategy requires knowledge of the plaintext and some luck, but
    often, there is no alternative.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更有前景的方法是猜测出现在明文中的单词或短语。这一策略需要对明文有所了解，并且需要一些运气，但通常情况下，没有其他选择。
- en: 'As an example, we look at another IRA cryptogram from the 1920s, provided to
    us by Tom Mahon and Jim Gillogly (see [Chapter 16](c16.xhtml)):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们看一下1920年代的另一个IRA密码，由Tom Mahon和Jim Gillogly提供（参见[第16章](c16.xhtml)）：
- en: '![](image_fi/502727c10/g10005.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/g10005.png)'
- en: 'Here’s a transcript, omitting the numbers at the beginning:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个摘录，省略了开头的数字：
- en: '`UHTAO EUESI YSOIO OMTOG OSMNY DMHRS OSRAS NOEEO MRYUR TRRRF CNTYR NIRIH IUSNR
    TNENF UMYOA SRREO TOIME IPEFR TIAOT TRHDT AOTNP TOCOA NMB`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`UHTAO EUESI YSOIO OMTOG OSMNY DMHRS OSRAS NOEEO MRYUR TRRRF CNTYR NIRIH IUSNR
    TNENF UMYOA SRREO TOIME IPEFR TIAOT TRHDT AOTNP TOCOA NMB`'
- en: Frequency analysis confirms that we are probably dealing with a transposition
    cipher. This comes as no surprise, as the majority of the IRA messages that our
    colleague Gillogly broke were of this kind. The message contains 113 letters.
    As 113 is a prime number, it cannot be a cryptogram of the completely filled-in
    rectangle type. We therefore assume that we are dealing with an incomplete columnar
    transposition.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 频率分析确认我们可能在处理一个换位密码。这一点不足为奇，因为我们的同事Gillogly破解的绝大多数IRA消息都属于这种类型。该消息包含113个字母。由于113是一个质数，它不能是完全填充矩形类型的密码。因此，我们假设我们正在处理一个不完全的列换位密码。
- en: 'To make things easier, let’s say that we have a crib: the plaintext contains
    the phrase `DESTROY ANY AMMUNITION` (twenty letters). Of course, having knowledge
    of three consecutive plaintext words is a rare case in practice, but without such
    a crib, it would be extremely difficult to break the encryption manually.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题，假设我们有一个密码本：明文包含短语`DESTROY ANY AMMUNITION`（二十个字母）。当然，实际中能够知道连续三个明文单词是一个罕见的情况，但没有这样的密码本，手动破解密码将变得非常困难。
- en: 'Assuming that the keyword has fewer than twenty letters, the phrase spreads
    to at least two lines. If the keyword has, say, fifteen letters, it might look
    like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设密钥少于二十个字母，短语会至少扩展到两行。如果密钥有十五个字母，它可能看起来是这样的：
- en: '`......DESTROYAN`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`......DESTROYAN`'
- en: '`YAMMUNITION....`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`YAMMUNITION....`'
- en: In this example, the letter pairs `D` and `I`, `E` and `T`, `S` and `I`, `T`
    and `O`, and `R` and `N` align from different rows. This means that, if our guess
    is correct, the digraphs `DI`, `ET`, `SI`, `TO`, and `RN` must appear in the ciphertext.
    As we don’t see all of them in practice, we can conclude that our assumed keyword
    length is wrong.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字母对`D`和`I`、`E`和`T`、`S`和`I`、`T`和`O`、`R`和`N`来自不同的行。这意味着，如果我们的猜测是正确的，字母对`DI`、`ET`、`SI`、`TO`和`RN`必须出现在密文中。由于我们在实际密文中没有看到所有这些字母对，我们可以得出结论，我们假定的密钥长度是错误的。
- en: 'Let’s now look for other possibilities in a systematic way. The following table
    lists the letter pairs in the ciphertext that start with one of the first four
    letters of our crib:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们以系统化的方式寻找其他可能性。下表列出了密文中以我们密码本的前四个字母开头的字母对：
- en: '| **Letter** | **Ciphertext digraph starting with this letter** | **Distance
    of digraph letters in the phrase** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **字母** | **以该字母开头的密文字母对** | **字母对在短语中的距离** |'
- en: '| --- | --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `D` | `DM` | 11, 12 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `D` | `DM` | 11, 12 |'
- en: '|  | `DT` | 3 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '|  | `DT` | 3 |'
- en: '| `E` | `EE` | — |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `E` | `EE` | — |'
- en: '|  | `EI` | 14, 16 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '|  | `EI` | 14, 16 |'
- en: '|  | `EF` | — |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '|  | `EF` | — |'
- en: '|  | `EN` | 7, 13, 18 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '|  | `EN` | 7, 13, 18 |'
- en: '|  | `EO` | 4 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '|  | `EO` | 4 |'
- en: '|  | `ES` | 1 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '|  | `ES` | 1 |'
- en: '|  | `EU` | 12 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '|  | `EU` | 12 |'
- en: '| `S` | `SI` | 14, 16 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `S` | `SI` | 14, 16 |'
- en: '|  | `SM` | 9, 10 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '|  | `SM` | 9, 10 |'
- en: '|  | `SN` | 6, 12, 17 |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '|  | `SN` | 6, 12, 17 |'
- en: '|  | `SO` | 16 |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '|  | `SO` | 16 |'
- en: '|  | `SR` | 2 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '|  | `SR` | 2 |'
- en: '| `T` | `TA` | 4, 7 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `T` | `TA` | 4, 7 |'
- en: '|  | `TI` | 1, 12, 14 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '|  | `TI` | 1, 12, 14 |'
- en: '|  | `TN` | 3, 5, 11, 16 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '|  | `TN` | 3, 5, 11, 16 |'
- en: '|  | `TO` | 2, 15 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '|  | `TO` | 2, 15 |'
- en: '|  | `TR` | 1 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '|  | `TR` | 1 |'
- en: '|  | `TT` | 13 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '|  | `TT` | 13 |'
- en: '|  | `TY` | 3, 6 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '|  | `TY` | 3, 6 |'
- en: 'As can be seen, a distance of twelve appears for every letter at least once.
    We can therefore conclude that the keyword we are looking for has twelve letters,
    and we can set up the following (empty) twelve-column transposition table:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，每个字母至少出现过一次间距为十二的情况。因此我们可以得出结论，我们正在寻找的关键词由十二个字母组成，并且我们可以设置以下（空的）十二列换位表：
- en: '|  | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '|  | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? |'
- en: '| 1 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 1 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 2 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 2 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 3 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 3 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 4 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 4 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 5 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 5 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 6 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 6 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 7 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 7 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 8 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 8 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 9 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 9 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| 10 |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 10 |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: 'The letter pairs with a distance of twelve are `DM`, `EU`, `SN`, and `TI`.
    We get a match if we write the crib into the table as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与十二间距的字母对是 `DM`、`EU`、`SN` 和 `TI`。如果我们将密码本按如下方式写入表格，我们就能得到匹配：
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
- en: 'The letter pair `DM` appears only once in the ciphertext and is followed by
    an `H`. The same is true for `EU` (followed by an `E`), `SN` (followed by an `R`),
    `TI` (followed by an `A`), `YO` (followed by an `A`), and `AN` (followed by an
    `M`). The letter pairs `RT` and `OI` appear several times. We can now add a third
    line to our table excerpt:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 字母对 `DM` 仅在密文中出现一次，后面跟着一个 `H`。同样，`EU`（后跟 `E`）、`SN`（后跟 `R`）、`TI`（后跟 `A`）、`YO`（后跟
    `A`）和 `AN`（后跟 `M`）也是如此。字母对 `RT` 和 `OI` 出现多次。现在我们可以在表格片段中添加第三行：
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
- en: '| ? |  | `H` | `E` | `R` | `A` | `I/N/R` | `O/M` | `A` | `M` |  |  |  |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `H` | `E` | `R` | `A` | `I/N/R` | `O/M` | `A` | `M` |  |  |  |'
- en: 'Now, we try to add further rows to the table, above and below the three lines
    we already have. Of course, we can never be sure that these lines really exist;
    we might have reached the bottom or the top of the table. Let’s try to put a line
    on top of our table fragment:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们尝试在已有的三行表格上方和下方添加更多行。当然，我们无法确定这些行是否真的存在；我们可能已经到达了表格的底部或顶部。让我们尝试在表格片段的上方添加一行：
- en: '| ? |  | `Y` | `O` | `U` | `R` | `F/N/U` | `S/T` | `M` | `O` |  |  |  |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `Y` | `O` | `U` | `R` | `F/N/U` | `S/T` | `M` | `O` |  |  |  |'
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
- en: '| ? |  | `H` | `E` | `R` | `A` | `I/N/R` | `O/M` | `A` | `M` |  |  |  |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `H` | `E` | `R` | `A` | `I/N/R` | `O/M` | `A` | `M` |  |  |  |'
- en: The new line contains the word `YOUR`. This makes sense, so we can assume that
    the line really exists. Next, take a look at the first and last lines of the sixth
    and seventh columns. Which of the choices (`F/N/U`, `S/T`, `I/N/R`, or `O/M`)
    is correct? `YOURFSMO` in the first line wouldn’t make sense. Because `S` and
    `T` are consonants, it is very likely that `U` (the only vowel among the three
    options) is correct.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 新的一行包含了单词 `YOUR`。这很有道理，因此我们可以假设这一行确实存在。接下来，看看第六列和第七列的第一行和最后一行。哪个选项（`F/N/U`，`S/T`，`I/N/R`，或
    `O/M`）是正确的？第一行中的 `YOURFSMO` 是没有意义的。因为 `S` 和 `T` 是辅音，所以很可能 `U`（在三个选项中唯一的元音）是正确的。
- en: 'This gives us the choice between the combinations `YOURUSMO` (line 1) / `HERAROAM`
    (line 4) and `YOURUTMO` (line 1) / `HERARMAM` (line 4). The latter option is more
    likely, as the words `UTMOST` and `ARMAMENT` can be derived from it. Here’s the
    new version of our table:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们提供了两个组合的选择：`YOURUSMO`（第1行）/ `HERAROAM`（第4行）和 `YOURUTMO`（第1行）/ `HERARMAM`（第4行）。后者更有可能，因为可以从中推导出单词
    `UTMOST` 和 `ARMAMENT`。以下是我们表格的新版本：
- en: '| ? |  | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` |  |  |  |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` |  |  |  |'
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
- en: '| ? |  | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` |  |  |  |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` |  |  |  |'
- en: 'Now, we add further lines in a similar manner:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们以类似的方式添加更多行：
- en: '| ? |  | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` |  |  |  |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` |  |  |  |'
- en: '| ? |  | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` |  |  |  |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` |  |  |  |'
- en: '| ? |  | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` |  |  |  |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` |  |  |  |'
- en: '| ? |  | `N` | `A` | `I` | `F` | `Y` | `O` | `U` |  |  |  |  |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `N` | `A` | `I` | `F` | `Y` | `O` | `U` |  |  |  |  |'
- en: '| ? |  | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` |  |  |  |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` |  |  |  |'
- en: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A` |'
- en: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| ? | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` |  |  |  |'
- en: '| ? |  | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` |  |  |  |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| ? |  | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` |  |  |  |'
- en: 'As the string `UHTAO` (in the third column) appears at the beginning of the
    cipher message, we know that there can’t be a row above `OURIO` . . . Now that
    we have reached the top of the table, the rest of it can be derived easily:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于字符串 `UHTAO`（位于第三列）出现在密文的开头，我们知道在 `OURIO` 上方不会有行……现在我们已经到达表格的顶部，其余部分可以轻松推导出来：
- en: '|  | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '|  | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 1 | `Y` | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` | `O` | `R` | `T`
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `Y` | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` | `O` | `R` | `T`
    |'
- en: '| 2 | `S` | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` | `S` | `F` | `R`
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `S` | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` | `S` | `F` | `R`
    |'
- en: '| 3 | `O` | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` | `R` | `C` | `H`
    |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `O` | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` | `R` | `C` | `H`
    |'
- en: '| 4 | `I` | `N` | `A` | `I` | `F` | `Y` | `O` | `U` | `C` | `A` | `N` | `D`
    |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `I` | `N` | `A` | `I` | `F` | `Y` | `O` | `U` | `C` | `A` | `N` | `D`
    |'
- en: '| 5 | `O` | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` | `S` | `T` | `T`
    |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `O` | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` | `S` | `T` | `T`
    |'
- en: '| 6 | `O` | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A`
    |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `O` | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A`
    |'
- en: '| 7 | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` | `O` | `R` | `O`
    |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` | `O` | `R` | `O`
    |'
- en: '| 8 | `T` | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` | `E` | `N` | `T`
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `T` | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` | `E` | `N` | `T`
    |'
- en: '| 9 | `O` | `R` | `S` | `T` | `O` | `R` | `E` | `S` | `B` | `E` | `I` | `N`
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 9 | `O` | `R` | `S` | `T` | `O` | `R` | `E` | `S` | `B` | `E` | `I` | `N`
    |'
- en: '| 10 | `G` | `S` | `I` | `N` | `T` |  |  |  |  |  |  |  |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 10 | `G` | `S` | `I` | `N` | `T` |  |  |  |  |  |  |  |'
- en: 'Here’s the plaintext:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是明文：
- en: '`YOURIOREPORT`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`YOURIOREPORT`'
- en: '`SSHIPMENTSFR`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`SSHIPMENTSFR`'
- en: '`OMTHEREFORCH`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`OMTHEREFORCH`'
- en: '`INAIFYOUCAND`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`INAIFYOUCAND`'
- en: '`OYOURUTMOSTT`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`OYOURUTMOSTT`'
- en: '`ODESTROYANYA`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`ODESTROYANYA`'
- en: '`MMUNITIONORO`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`MMUNITIONORO`'
- en: '`THERARMAMENT`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`THERARMAMENT`'
- en: '`ORSTORESBEIN`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORSTORESBEIN`'
- en: '`GSINT`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`GSINT`'
- en: As you may have noticed, we have broken this encryption without reconstructing
    the keyword. (The table’s header row contains only question marks.) Usually, a
    codebreaker is not really interested in obtaining the keyword, so long as they
    can discover the plaintext.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能注意到的，我们已经在不重构关键词的情况下破译了这个加密（表格的标题行仅包含问号）。通常，破译者并不特别关心获取关键词，只要他们能够发现明文。
- en: 'In this case, it is not even possible to recover the keyword with certainty.
    All we know is that the keyword has twelve letters and that, if we sort these
    letters alphabetically, we get a certain transposition. Using a computer program,
    Gillogly searched for English words that have the desired property. The only plausible
    candidate he found was `CHAMPIONSHIP`. It is very likely that this is the keyword
    the IRA used. This provides us with the complete transposition table:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，甚至无法确定地恢复出关键词。我们所知道的是，关键词有十二个字母，并且如果按字母顺序排列这些字母，我们会得到某种置换。使用计算机程序，Gillogly搜索了具有所需特性的英语单词。他找到的唯一合理候选词是`CHAMPIONSHIP`。很可能这就是IRA使用的关键词。这为我们提供了完整的置换表：
- en: '|  | **`C`** | **`H`** | **`A`** | **`M`** | **`P`** | **`I`** | **`O`** |
    **`N`** | **`S`** | **`H`** | **`I`** | **`P`** |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '|  | **`C`** | **`H`** | **`A`** | **`M`** | **`P`** | **`I`** | **`O`** |
    **`N`** | **`S`** | **`H`** | **`I`** | **`P`** |'
- en: '| 1 | `Y` | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` | `O` | `R` | `T`
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `Y` | `O` | `U` | `R` | `I` | `O` | `R` | `E` | `P` | `O` | `R` | `T`
    |'
- en: '| 2 | `S` | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` | `S` | `F` | `R`
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `S` | `S` | `H` | `I` | `P` | `M` | `E` | `N` | `T` | `S` | `F` | `R`
    |'
- en: '| 3 | `O` | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` | `R` | `C` | `H`
    |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `O` | `M` | `T` | `H` | `E` | `R` | `E` | `F` | `O` | `R` | `C` | `H`
    |'
- en: '| 4 | `I` | `N` | `A` | `I` | `F` | `Y` | `O` | `U` | `C` | `A` | `N` | `D`
    |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `I` | `N` | `A` | `I` | `F` | `Y` | `O` | `U` | `C` | `A` | `N` | `D`
    |'
- en: '| 5 | `O` | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` | `S` | `T` | `T`
    |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `O` | `Y` | `O` | `U` | `R` | `U` | `T` | `M` | `O` | `S` | `T` | `T`
    |'
- en: '| 6 | `O` | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A`
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `O` | `D` | `E` | `S` | `T` | `R` | `O` | `Y` | `A` | `N` | `Y` | `A`
    |'
- en: '| 7 | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` | `O` | `R` | `O`
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `M` | `M` | `U` | `N` | `I` | `T` | `I` | `O` | `N` | `O` | `R` | `O`
    |'
- en: '| 8 | `T` | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` | `E` | `N` | `T`
    |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `T` | `H` | `E` | `R` | `A` | `R` | `M` | `A` | `M` | `E` | `N` | `T`
    |'
- en: '| 9 | `O` | `R` | `S` | `T` | `O` | `R` | `E` | `S` | `B` | `E` | `I` | `N`
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 9 | `O` | `R` | `S` | `T` | `O` | `R` | `E` | `S` | `B` | `E` | `I` | `N`
    |'
- en: '| 10 | `G` | `S` | `I` | `N` | `T` |  |  |  |  |  |  |  |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 10 | `G` | `S` | `I` | `N` | `T` |  |  |  |  |  |  |  |'
- en: Success stories
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功的故事
- en: Kryptos K3
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kryptos K3
- en: Earlier chapters discussed portions of the *Kryptos* sculpture (see Appendix
    A). In this section, we focus on the third part of the *Kryptos* message, known
    to its aficionados as K3\. This 336-letter cryptogram was solved by, among others,
    CIA employee David Stein in 1998.^([2](b06.xhtml#c10-endnote-2)) Stein did not
    use a computer for his codebreaking work, instead relying only on pencil-and-paper
    methods.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 早期章节讨论了*Kryptos*雕塑的部分内容（见附录A）。在本节中，我们重点讨论*Kryptos*信息的第三部分，被其爱好者称为K3。这段336个字母的密码被包括CIA员工David
    Stein在内的人于1998年解开了。^([2](b06.xhtml#c10-endnote-2)) Stein并没有使用计算机进行破译工作，而是仅依赖铅笔和纸的方法。
- en: The full ciphertext on *Kryptos* consists of 869 characters, which are all letters
    and a few question marks. Not realizing that *Kryptos* contained more than one
    encrypted message, Stein started, like most codebreakers do, with a frequency
    count. His first successes were to solve K1 and K2 on the upper ciphertext plate
    (see [Chapter 8](c08.xhtml)).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kryptos*上的完整密文由869个字符组成，全部为字母及一些问号。Stein没有意识到*Kryptos*包含多个加密信息，像大多数破译者一样，他首先从频率计数开始。他的第一次成功是解开了上板上的K1和K2（见[第8章](c08.xhtml)）。'
- en: 'When he set his sights on the section in the lower plate, he noticed a substantial
    difference between it and the ciphertext on the upper plate. Among other things,
    the frequencies of the letters preceding the only question mark on that lower
    plate differed from the frequencies of the letters that followed it. (This question
    mark can be seen in the transcript of the entire *Kryptos* text in Appendix A.)
    The section of text starting at the beginning of the lower plate and ending at
    that question mark are what eventually became known as K3\. It reads as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当他将目光投向下板的部分时，他注意到它与上板的密文之间存在明显的差异。其他的不同之处包括，位于下板上唯一一个问号前的字母频率与问号后字母的频率不同。（这个问号可以在附录A中的*Kryptos*文本完整转录中看到。）从下板开始并以该问号结束的这段文本，最终被称为K3。其内容如下：
- en: '`ENDYAHROHNLSRHEOCPTEOIBIDYSHNAIA`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENDYAHROHNLSRHEOCPTEOIBIDYSHNAIA`'
- en: '`CHTNREYULDSLLSLLNOHSNOSMRWXMNE`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHTNREYULDSLLSLLNOHSNOSMRWXMNE`'
- en: '`TPRNGATIHNRARPESLNNELEBLPIIACAE`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`TPRNGATIHNRARPESLNNELEBLPIIACAE`'
- en: '`WMTWNDITEENRAHCTENEUDRETNHAEOE`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`WMTWNDITEENRAHCTENEUDRETNHAEOE`'
- en: '`TFOLSEDTIWENHAEIOYTEYQHEENCTAYCR`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`TFOLSEDTIWENHAEIOYTEYQHEENCTAYCR`'
- en: '`EIFTBRSPAMHHEWENATAMATEGYEERLB`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`EIFTBRSPAMHHEWENATAMATEGYEERLB`'
- en: '`TEEFOASFIOTUETUAEOTOARMAEERTNRTI`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEEFOASFIOTUETUAEOTOARMAEERTNRTI`'
- en: '`BSEDDNIAAHTTMSTEWPIEROAGRIEWFEB`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`BSEDDNIAAHTTMSTEWPIEROAGRIEWFEB`'
- en: '`AECTDDHILCEIHSITEGOEAOSDDRYDLORIT`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`AECTDDHILCEIHSITEGOEAOSDDRYDLORIT`'
- en: '`RKLMLEHAGTDHARDPNEOHMGFMFEUHE`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`RKLMLEHAGTDHARDPNEOHMGFMFEUHE`'
- en: '`ECDMRIPFEIMEHNLSSTTRTVDOHW`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`ECDMRIPFEIMEHNLSSTTRTVDOHW`'
- en: 'Stein determined the following frequencies for K3:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦为K3确定了以下频率：
- en: '![](image_fi/502727c10/g10006.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/g10006.png)'
- en: The letters had frequencies similar to normal English, so he assumed that a
    transposition cipher had been used. His first guess was that he was dealing with
    a complete columnar transposition. For instance, a table consisting of sixteen
    columns and twenty-one rows seemed possible, as did six columns and fifty-six
    rows. However, his further examinations did not confirm this hypothesis.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字母的频率类似于正常的英语，因此他假设使用了置换密码。他的第一个猜测是他处理的是一个完整的列置换。例如，包含十六列和二十一行的表格似乎是可能的，六列和五十六行也有可能。然而，他的进一步检查并未证实这个假设。
- en: Stein next considered an incomplete columnar transposition consisting of, for
    example, a 17 × 20 table with only thirteen letters in the bottom row. As mentioned
    earlier in this chapter, breaking an incomplete columnar transposition by hand
    without a crib is very difficult—and Stein didn’t have a crib. So, he decided
    to do it the hard way and check every table size that seemed plausible. Because
    the cryptogram consisted of 336 letters, there were, in theory, no fewer than
    336 different line lengths to test. Even after removing especially short and long
    lines, at least 200 options remained.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦接下来考虑了一个不完整的列置换，例如一个17 × 20的表格，其中底部一行只有十三个字母。正如本章前面提到的，手动破译一个不完整的列置换没有字典是非常困难的——而斯坦没有字典。因此，他决定通过艰难的方式，检查所有看似可能的表格大小。因为密文由336个字母组成，理论上有不下于336种不同的行长度可以测试。即使去掉了特别短和长的行，仍然至少有200个选项。
- en: 'To make things easier, Stein assumed that the transposition table had four
    lines. This was just a guess, but he had to start somewhere. This limited the
    number of table variants to twenty-eight. For each variant, Stein had to check
    many potential positions of the shorter three-letter (as opposed to four-letter)
    columns. Here is one example, with a line length of eighty-eight:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题，斯坦假设置换表有四行。这只是一个猜测，但他必须从某个地方开始。这将表格变体的数量限制为二十八个。对于每个变体，斯坦必须检查许多可能的短三字母列（与四字母列相比）的位置。以下是一个例子，行长度为八十八：
- en: '`EAHRCODHITYSSOORNRANPNLPAWNEAEUTETSIHOYEAETPHNMGETOIEEAENBDATEEGEBTIHIOSYRKEGANMMHDPMLTD`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`EAHRCODHITYSSOORNRANPNLPAWNEAEUTETSIHOYEAETPHNMGETOIEEAENBDATEEGEBTIHIOSYRKEGANMMHDPMLTD`'
- en: '`NHNHPIYNANULLHSWENTRENEICMDEHNDNOFEWAYQNYIBAEAAYREAOTORERSDAMWRRWADLITEDDILHTREGFEMFESRO`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`NHNHPIYNANULLHSWENTRENEICMDEHNDNOFEWAYQNYIBAEAAYREAOTORERSDAMWRRWADLITEDDILHTREGFEMFESRO`'
- en: '`DRLETBSACRLLLSMXTGIASEBIATINCERHEODEETHCCFRMWTTELESTUTMRTENHSPOIFEDCSEADLTMADDOFEEREHSTH`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`DRLETBSACRLLLSMXTGIASEBIATINCERHEODEETHCCFRMWTTELESTUTMRTENHSPOIFEDCSEADLTMADDOFEEREHSTH`'
- en: '`YOSOEI HED NN MP HRL L EWTRT EA LTNIEETR SHEAE BFFUAOATI ITTIA ECHE GORORL
    HPH UCIINTVW`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`YOSOEI HED NN MP HRL L EWTRT EA LTNIEETR SHEAE BFFUAOATI ITTIA ECHE GORORL
    HPH UCIINTVW`'
- en: To check whether a certain line length and the positions of the three-letter
    columns were correct, Stein tried to reorder the columns until common letter combinations
    such as `EN`, `AS`, `LLY`, and `THE` appeared. In other words, he used multiple
    anagramming based on columns. In the example above, it seems possible that the
    first two columns belong together, as `EA`, `NH`, `DR`, and `YO` are all common
    English digraphs. On the other hand, the last two columns don’t fit, as the letter
    pair `VW` is rarely encountered in an English text, whether in a single word or
    connecting two words (comprising the end of one and the beginning of another).
    It could be an abbreviation for “Volkswagen,” but that term appearing in *Kryptos*
    seems highly unlikely!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查某一行的长度和三字母列的位置是否正确，斯坦尝试重新排列列直到出现常见的字母组合，如`EN`、`AS`、`LLY`和`THE`。换句话说，他使用了基于列的多重字谜解法。在上面的示例中，似乎前两列可能是连在一起的，因为`EA`、`NH`、`DR`和`YO`都是常见的英语双字母组合。另一方面，最后两列不太合适，因为字母对`VW`在英语文本中很少出现，无论是在单个词语中还是在连接两个词语时（一个词的结尾和另一个词的开头）。它可能是“Volkswagen”的缩写，但这个术语出现在*Kryptos*中似乎不太可能！
- en: As you can see, Stein’s method was quite laborious. Not only was it difficult
    to check the plausibility of two columns appearing next to each other based on
    only three or four digraphs, but the columns also changed considerably as soon
    as only a few of the three-letter columns were moved. Nevertheless, Stein could
    rule out the line lengths of eighty-four and eighty-five (the two shortest possible,
    if there are four lines).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，斯坦因的方法相当繁琐。不仅仅是通过三个或四个二字母组合来检查两个相邻列的可信度非常困难，而且当其中几个三字母列被移动时，这些列会发生显著变化。然而，斯坦因还是排除了84和85这两个线长（如果有四行的话，它们是最短的）。
- en: 'Next, he tested a line length of eighty-six. This left seventy-eight letters
    in the last line. Here’s one of the many setups he likely tried:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，他测试了八十六个字母的行长。这样，最后一行剩下了七十八个字母。这是他可能尝试的许多布局之一：
- en: '`EYOSOEIHANULLHSXTGHRLLPCANEAEDNOODEEIQNYIRMWTTEBFOTUTMRTEITTIEIECHEIOSYRKLGANMFEMFESRO`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`EYOSOEIHANULLHSXTGHRLLPCANEAEDNOODEEIQNYIRMWTTEBFOTUTMRTEITTIEIECHEIOSYRKLGANMFEMFESRO`'
- en: '`NAHRCODNCRLSLSMMPANPNEIEMDEHNRHELTNOTHCCFSHEAEETAFUAOATIDATERAEBTIITEDDIMETREGEEREHSTH`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAHRCODNCRLSLSMMPANPNEIEMDEHNRHELTNOTHCCFSHEAEETAFUAOATIDATERAEBTIITEDDIMETREGEEREHSTH`'
- en: '`DHNHPIYAHEDLNNRNRTRENBIWTINCEEATSIHYEETRTPHNMGRESIEEAENBDAMWOGWADLHEADLTLHDDOFUCIINTVW`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`DHNHPIYAHEDLNNRNRTRENBIWTINCEEATSIHYEETRTPHNMGRESIEEAENBDAMWOGWADLHEADLTLHDDOFUCIINTVW`'
- en: '`RLETBSITYS OOWENIASELA WTRTUTEFEWA YEAEBAEAAYLE OTORERSNHSP RFEDCSGOROR AHPHMHDPMLTD`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`RLETBSITYS OOWENIASELA WTRTUTEFEWA YEAEBAEAAYLE OTORERSNHSP RFEDCSGOROR AHPHMHDPMLTD`'
- en: When working through this and numerous other combinations containing eighty-six
    letters in the first three lines and seventy-eight in the last, Stein realized
    that this time, multiple anagramming delivered more promising results. The digraphs
    seemed plausible; however, he couldn’t determine the correct positions of the
    three-letter columns.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理这个以及包含八十六个字母的其它组合时，斯坦因意识到这次多重排列的结果更加有希望。二字母组合看起来很合理；然而，他无法确定三字母列的正确位置。
- en: After some additional examination, Stein concluded that the empty fields of
    the three-letter columns belonged in the top row, not in the lowest one, meaning
    that the first rather than the last line was incomplete. Then, after countless
    hours of manual multiple anagramming (all done on his own time, not as an employee),
    Stein finally found out that the following combination . . .
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些额外的检查后，斯坦因得出结论，三字母列中的空白字段应该位于顶部行，而不是最低行，这意味着第一行而非最后一行是不完整的。接着，经过无数个小时的手动多重排列（全是在他自己的时间里完成的，而不是作为员工时进行的），斯坦因终于找出了以下组合……
- en: '`YOSOEIHANU LHSXTGHRLLP ANEAEDNOODE IQNYIRMWTTEB OTUTMRTEITT EIECHEIOSYR LGANMFEMFESR`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`YOSOEIHANU LHSXTGHRLLP ANEAEDNOODE IQNYIRMWTTEB OTUTMRTEITT EIECHEIOSYR LGANMFEMFESR`'
- en: '`EAHRCODNCRLLLSMMPANPNEICMDEHNRHELTNETHCCFSHEAEETFFUAOATIDATEIAEBTIITEDDIKETREGEEREHSTO`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`EAHRCODNCRLLLSMMPANPNEICMDEHNRHELTNETHCCFSHEAEETFFUAOATIDATEIAEBTIITEDDIKETREGEEREHSTO`'
- en: '`NHNHPIYAHEDSNNRNRTRENBIETINCEEATSIHOEETRTPHNMGREAIEEAENBDAMWRGWADLHEADLTMHDDOFUCIINTVH`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`NHNHPIYAHEDSNNRNRTRENBIETINCEEATSIHOEETRTPHNMGREAIEEAENBDAMWRGWADLHEADLTMHDDOFUCIINTVH`'
- en: '`DRLETBSITYSLOOWENIASELAWWTRTUTEFEWAYYEAEBAEAAYLESOTORERSNHSPORFEDCSGORORLAHPHMHDPMLTDW`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`DRLETBSITYSLOOWENIASELAWWTRTUTEFEWAYYEAEBAEAAYLESOTORERSNHSPORFEDCSGORORLAHPHMHDPMLTDW`'
- en: '. . . could be reordered to this meaningful text:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: ……可以重新排序为以下有意义的文本：
- en: '`FLICKERBUTPRESENTLYDETAILSOFTHEROOMWITHINEMERGEDFROMTHEMISTXCANYOUSEEANYTHINGQ`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLICKERBUTPRESENTLYDETAILSOFTHEROOMWITHINEMERGEDFROMTHEMISTXCANYOUSEEANYTHINGQ`'
- en: '`OLEALITTLEIINSERTEDTHECANDLEANDPEEREDINTHEHOTAIRESCAPINGFROMTHECHAMBERCAUSEDTHEFLAMETO`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`OLEALITTLEIINSERTEDTHECANDLEANDPEEREDINTHEHOTAIRESCAPINGFROMTHECHAMBERCAUSEDTHEFLAMETO`'
- en: '`ASREMOVEDWITHTREMBLINGHANDSIMADEATINYBREACHINTHEUPPERLEFTHANDCORNERANDTHENWIDENINGTHEH`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`ASREMOVEDWITHTREMBLINGHANDSIMADEATINYBREACHINTHEUPPERLEFTHANDCORNERANDTHENWIDENINGTHEH`'
- en: '`SLOWLYDESPARATLYSLOWLYTHEREMAINSOFPASSAGEDEBRISTHATENCUMBEREDTHELOWERPARTOFTHEDOORWAYW`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`SLOWLYDESPARATLYSLOWLYTHEREMAINSOFPASSAGEDEBRISTHATENCUMBEREDTHELOWERPARTOFTHEDOORWAYW`'
- en: 'In finding the correct arrangement of the columns, Stein was aided by the fact
    that they had been reordered in a regular way. As shown in the following diagram,
    the first column (`END`) was moved to position 79, the second one (`YAHR`) to
    72, the third one (`OHNL`) to 65, the fourth one (`SRHE`) to 58, the fifth one
    (`OCPT`) to 51, and so on. With each step, the number was lowered by seven:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找列的正确排列时，斯坦因得到了一个帮助，那就是这些列被以规律的方式重新排列。如下图所示，第一列（`END`）被移到了第79位置，第二列（`YAHR`）移到了第72，第三列（`OHNL`）移到了第65，第四列（`SRHE`）移到了第58，第五列（`OCPT`）移到了第51，以此类推。每一步，数字都降低了7：
- en: '`YOSO ... ... DFR``O``MTHEMI``S``TXCANY``O``USEEAN``Y``THINGQ`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`YOSO ... ... DFR``O``MTHEMI``S``TXCANY``O``USEEAN``Y``THINGQ`'
- en: '`EAHRC ... → ... RES``C``APINGF``R``OMTHEC``H``AMBERC``A``USEDTH``E``FLAMETO`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`EAHRC ... → ... RES``C``APINGF``R``OMTHEC``H``AMBERC``A``USEDTH``E``FLAMETO`'
- en: '`NHNHP ... ... EUP``P``ERLEFT``H``ANDCOR``N``ERANDT``H``ENWIDE``N``INGTHEH`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`NHNHP ... ... EUP``P``ERLEFT``H``ANDCOR``N``ERANDT``H``ENWIDE``N``INGTHEH`'
- en: '`DRLET ... ... THA``T``ENCUMB``E``REDTHE``L``OWERPA``R``TOFTHE``D``OORWAYW`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`DRLET ... ... THA``T``ENCUMB``E``REDTHE``L``OWERPA``R``TOFTHE``D``OORWAYW`'
- en: 'The last deciphering step was to read the four lines in reverse order:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的解密步骤是将四行文字倒序阅读：
- en: '`SLOWLY DESPARATLY SLOWLY THE REMAINS OF PASSAGE DEBRIS THAT ENCUMBERED THE
    LOWER PART OF THE DOORWAY WAS REMOVED WITH TREMBLING HANDS I MADE A TINY BREACH
    IN THE UPPER LEFT HAND CORNER AND THEN WIDENING THE HOLE A LITTLE I INSERTED THE
    CANDLE AND PEERED IN THE HOT AIR ESCAPING FROM THE CHAMBER CAUSED THE FLAME TO
    FLICKER BUT PRESENTLY DETAILS OF THE ROOM WITHIN EMERGED FROM THE MIST X CAN YOU
    SEE ANYTHING Q`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`SLOWLY DESPARATLY SLOWLY THE REMAINS OF PASSAGE DEBRIS THAT ENCUMBERED THE
    LOWER PART OF THE DOORWAY WAS REMOVED WITH TREMBLING HANDS I MADE A TINY BREACH
    IN THE UPPER LEFT HAND CORNER AND THEN WIDENING THE HOLE A LITTLE I INSERTED THE
    CANDLE AND PEERED IN THE HOT AIR ESCAPING FROM THE CHAMBER CAUSED THE FLAME TO
    FLICKER BUT PRESENTLY DETAILS OF THE ROOM WITHIN EMERGED FROM THE MIST X CAN YOU
    SEE ANYTHING Q`'
- en: This text is a paraphrased excerpt from the diary of Howard Carter, the archaeologist
    who discovered the tomb of the Egyptian pharaoh Tutankhamun on November 26, 1922.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这段文字是霍华德·卡特（Howard Carter）的日记摘录，卡特是发现埃及法老图坦卡蒙墓的考古学家，时间是1922年11月26日。
- en: Stein spent hundreds of hours breaking this ciphertext, but his solution still
    required luck, as is the case with the successes of many codebreakers. For example,
    one sequence that he guessed represented the word `THE` turned out to be `THEY`.
    Also, his (quite speculative) assumption that there were four lines in the table
    proved correct. Lastly, the third of twenty-eight possible line lengths he checked
    turned out to be the right one. Sometimes, luck is the companion of the diligent.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦因花了数百小时破解这个密文，但他的解决方案仍然需要运气，这与许多破译者的成功经验一样。例如，他猜测的一组字母代表单词`THE`，最终被证明是`THEY`。此外，他（相当猜测性地）假设表格中有四行，这一假设也得到了验证。最后，他检查的28种可能的行长度中的第三个，恰好是正确的。有时候，运气是勤奋者的伴侣。
- en: Antonio Marzi’s radio messages
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安东尼奥·马尔齐的无线电信息
- en: Antonio Marzi (1924–2007) was a spy and partisan working against the German
    occupying force in Udine, in northern Italy, during World War II.^([3](b06.xhtml#c10-endnote-3))^,
    ^([4](b06.xhtml#c10-endnote-4)) Every day, Marzi radioed an encrypted report about
    the current situation in the city to an outside contact, probably a British intelligence
    officer. Contrary to usual precautions, he didn’t destroy his messages after sending
    them—a dangerous practice, but one that left behind a treasure trove for crypto-historians!
    His collection of reports has been preserved as a 200-page encrypted war journal
    with scores of encrypted entries created between 1944 and 1945 ([Figure 10-1](#figure10-1)).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 安东尼奥·马尔齐（1924–2007）是二战期间在意大利北部乌迪内与德国占领军作斗争的间谍和游击队员。^([3](b06.xhtml#c10-endnote-3))^,
    ^([4](b06.xhtml#c10-endnote-4))^ 每天，马尔齐都会向外部联系人发出一份关于城市当前情况的加密报告，这个人可能是英国情报人员。与通常的防范措施不同，他没有在发送报告后销毁它们——这是一种危险的做法，但也为密码历史学家留下了一笔宝贵的财富！他保存下来的报告集是一本包含200页的加密战时日记，其中包含1944年至1945年间创作的数十条加密条目（[图10-1](#figure10-1)）。
- en: Decades later, when historians became interested in Marzi’s report, Marzi himself
    could no longer decrypt it. He remembered that he had used a double columnar transposition
    and that he had chosen the keywords from the poem “Un giovinetto pallido e bello”
    by Italian poet Aleardo Aleardi (1812–1878). But whenever he tried to decrypt
    a message in this way, no meaningful text emerged. In 2003, Marzi finally asked
    Italian encryption expert Filippo Sinagra for help. Sinagra could not decipher
    the messages either, so he shared them with other experts.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年后，当历史学家开始对马尔齐的报告感兴趣时，马尔齐本人已经无法解密这些报告。他记得自己使用了双列换位密码，并且选择了意大利诗人阿莱亚尔多·阿莱阿尔迪（Aleardo
    Aleardi，1812–1878）所作诗歌《Un giovinetto pallido e bello》中的关键词。但是每当他尝试以这种方式解密消息时，却无法得到任何有意义的文本。2003年，马尔齐最终向意大利加密专家菲利波·西纳格拉（Filippo
    Sinagra）求助。西纳格拉也无法解密这些信息，于是他将其分享给了其他专家。
- en: '![](image_fi/502727c10/f10001.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/f10001.png)'
- en: 'Figure 10-1: During World War II, Italian spy Antonio Marzi sent encrypted
    reports from the city of Udine to an outside contact. Seventy years later, these
    cryptograms were broken by German cryptanalyst Armin Krauß*.*'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1：在第二次世界大战期间，意大利间谍安东尼奥·马尔齐从乌迪内市向外部联系人发送加密报告。七十年后，这些密码被德国密码分析师阿尔敏·克劳斯（Armin
    Krauß）破解。
- en: In 2011, the crypto puzzle website MysteryTwister published Antonio Marzi’s
    radio messages as an unsolved challenge. For two years, none of this portal’s
    many users came up with a solution. Then, our colleague Armin Krauß (Krauss),
    the top-scoring participant at that time, examined this mystery. He started by
    writing a computer program that attempted decipherment with a double columnar
    transposition. Examining many configuration possibilities, he tried words that
    appeared in Aleardi’s poem as keywords for decipherment, checking all combinations
    of one to five words; however, even after 2.6 million attempts, the program delivered
    nothing but gibberish.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 2011年，密码谜题网站 MysteryTwister 将 Antonio Marzi 的无线电消息发布为一个未解的挑战。两年来，该门户网站的许多用户都没有找到解决方案。然后，我们的同事
    Armin Krauß（Krauss），当时的得分最高参与者，研究了这个谜题。他从编写一个尝试用双列换位解码的计算机程序开始。通过检查许多配置可能性，他尝试了
    Aleardi 诗中出现的单词作为解码的关键词，检查了一到五个单词的所有组合；然而，即使经过260万次尝试，程序也只得到了乱码。
- en: The breakthrough came when Armin guessed that the first and last five-letter
    group of each entry might not belong to the encrypted message but instead provided
    some metainformation (also known as an *indicator*). When Armin omitted these
    two groups, the decryption program suddenly began delivering meaningful words.
    The first phrase he recognized was `SITUAZIONE LOCALE TRANQUILLA` (`LOCAL SITUATION
    QUIET`).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 突破出现在 Armin 猜测每条信息的第一组和最后一组五个字母的组合可能不属于加密消息，而是提供了一些元信息（也称为 *指示符*）。当 Armin 忽略这两组时，解密程序突然开始返回有意义的单词。他认出的第一句话是
    `SITUAZIONE LOCALE TRANQUILLA`（`当地情况安静`）。
- en: 'At that point, Armin could decrypt all the radio messages, although he kept
    encountering a surprising number of spelling mistakes. After some further investigation,
    he found the reason for this: the metainformation was contained in the fourth
    group instead of the first group. When Armin adjusted his program accordingly
    to omit the fourth and last groups of each message, most of the spelling errors
    vanished.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 到那时，Armin 已经能够解密所有无线电消息，尽管他不断遇到令人惊讶的拼写错误。在进一步调查后，他发现了这个原因：元信息包含在第四组中，而不是第一组。当
    Armin 相应地调整他的程序，忽略每条消息的第四组和最后一组时，大多数拼写错误消失了。
- en: Finally, Armin wanted to know what the metainformation given in the fourth and
    the last group of every message meant. The most obvious explanation was that these
    groups hid the keywords Marzi had chosen from the poem. This guess proved correct;
    we will explain the details of this system later in this section.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Armin 想知道每条消息的第四组和最后一组中给出的元信息意味着什么。最明显的解释是，这些组隐藏了 Marzi 从诗中选择的关键词。这个猜测被证明是正确的；我们将在本节稍后解释这个系统的细节。
- en: 'Let’s encrypt an excerpt of the diary as an example. On April 28, 1945, Marzi
    wrote the message reproduced below. The letters `ZC` at the beginning of the message
    and `SL` at the end are meaningless nulls. Roman numerals are used to encode numbers;
    the word `ALT` serves as a period:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加密日记中的一段文字作为示例。1945年4月28日，Marzi 写下了下面的消息。消息开头的字母 `ZC` 和结尾的 `SL` 是无意义的空值。罗马数字用来编码数字；单词
    `ALT` 作为句号：
- en: '`ZC NR LXXXIV DEL XXVIII ORE DICIOTTO`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZC NR LXXXIV DEL XXVIII ORE DICIOTTO`'
- en: '`ALT`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALT`'
- en: '`QUESTA NOTTE FORZE PARTIGIANE DELLA GARIBALDI ET OSOPPO FRIULI CHE HANNO REALIZZATO
    ACCORDO COMANDO UNICO TENTERANNO OCCUPAZIONE UDINE`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`QUESTA NOTTE FORZE PARTIGIANE DELLA GARIBALDI ET OSOPPO FRIULI CHE HANNO REALIZZATO
    ACCORDO COMANDO UNICO TENTERANNO OCCUPAZIONE UDINE`'
- en: '`ALT`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALT`'
- en: '`PREFETTO MEDIAZIONE RESA COMANDO PIAZZA TEDESCO ANCORA ESITANTE ACCETTAZIONE`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`PREFETTO MEDIAZIONE RESA COMANDO PIAZZA TEDESCO ANCORA ESITANTE ACCETTAZIONE`'
- en: '`ALT`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALT`'
- en: '`OGGI PATRIOTI TENTATO INVANO PRESA CIVIDALE`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`OGGI PATRIOTI TENTATO INVANO PRESA CIVIDALE`'
- en: '`ALT`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALT`'
- en: '`TARCENTO ET CISTERNA GIA POSSESSO PATRIOTI`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`TARCENTO ET CISTERNA GIA POSSESSO PATRIOTI`'
- en: '`ALT`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALT`'
- en: '`TEDESCHI AVVIANO NORD QUANTI AUTOMEZZI POSSIBILE MA PARE ORMAI SICUR O BLOCCAGGIO
    PATRIOTI`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEDESCHI AVVIANO NORD QUANTI AUTOMEZZI POSSIBILE MA PARE ORMAI SICUR O BLOCCAGGIO
    PATRIOTI`'
- en: '`ALT`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALT`'
- en: '`TEDESCHI ORDINATO COPRIFUOCO ORE VENTI PERQUISIZIONI STRADE`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEDESCHI ORDINATO COPRIFUOCO ORE VENTI PERQUISIZIONI STRADE`'
- en: '`FINE`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`FINE`'
- en: '`SL`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`SL`'
- en: 'Here’s a translation:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个翻译：
- en: '`Number 84 from 28th, 6pm`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`28号 6点 第84号`'
- en: '`Tonight, partisan forces of the Garibaldi and the Osoppo Friuli who have implemented
    single command agreement will try to occupy Udine. Prefect is mediating surrender.
    The German place command still hesitating to accept. Today patriots attempted
    to capture Cividale, but to no avail. Tarcento and Cisterna are already owned
    by the patriots. Germans start north with as many vehicles as possible, but situation
    still seems safe because of the blocking patriots. Germans ordered curfew with
    street patrols after 8pm. End.`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`今晚，加里波第和奥索波弗留利的游击队，在达成单一指挥协议后，将尝试占领乌迪内。省长正在调解投降。德国指挥部仍在犹豫是否接受。今天，爱国者试图占领奇维达莱，但未果。塔尔琴托和奇斯特尔纳已被爱国者控制。德国人带着尽可能多的车辆向北进发，但由于有爱国者阻挡，局势看似安全。德国人下令实施宵禁，并在晚上8点后巡逻街道。结束。`'
- en: Marzi always took his keywords from the following excerpt of the poem. Each
    word is marked with a letter of the alphabet, and the letters `R`, `E`, `N`, `A`,
    `T`, and `O` are skipped. *Renato* is a common name in Italian; it means “Reborn.”
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Marzi 总是从诗歌中的以下摘录中选择他的关键词。每个单词都被字母标记，字母 `R`、`E`、`N`、`A`、`T` 和 `O` 被跳过。*Renato*
    是意大利的常见名字，意味着“重生”。
- en: '[B]`UN` [C]`GIOVINETTO` [D]`PALLIDO` [F]`BELLO` [G]`COLLA` [H]`CHIOMA` [I]`DORO`
    [J]`COL` [K]`VISO` [L]`GENTIL` [M]`DA` [P]`SVENTURATO` [Q]`TOCCO` [S]`SPONDA`
    [U]`DOPO` [V]`LUNGO` [W]`MESTO` [X]`REMIGAR` [Y]`DELLA` [Z]`FUGA`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '[B]`UN` [C]`GIOVINETTO` [D]`PALLIDO` [F]`BELLO` [G]`COLLA` [H]`CHIOMA` [I]`DORO`
    [J]`COL` [K]`VISO` [L]`GENTIL` [M]`DA` [P]`SVENTURATO` [Q]`TOCCO` [S]`SPONDA`
    [U]`DOPO` [V]`LUNGO` [W]`MESTO` [X]`REMIGAR` [Y]`DELLA` [Z]`FUGA`'
- en: 'The English translation is as follows: “A pale beautiful boy with golden hair
    and the friendly face of the unfortunate man, touched the shore after a long and
    sad rowing of his escape.”'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 英文翻译如下：“一个苍白的美丽男孩，金色的头发，带着不幸者的友好面庞，经过长时间悲伤的划船逃脱后，触及了岸边。”
- en: 'Marzi chose the second and twelfth words of the poem to be his keys for that
    day: `GIOVINETTO` and `SVENTURATO`, producing the keyword `GIOVINETTOSVENTURATO`.
    The two letters identifying this keyword in the poem are `C` and `P`, which will
    become important later. Here’s the plaintext written below the keyword:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Marzi 选择了诗歌中的第二个和第十二个词作为当天的密钥：`GIOVINETTO` 和 `SVENTURATO`，生成了关键词 `GIOVINETTOSVENTURATO`。在诗歌中标识这个关键词的两个字母是
    `C` 和 `P`，稍后它们会变得很重要。以下是写在关键词下方的明文：
- en: '`GIOVINETTOSVENTURATO`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`GIOVINETTOSVENTURATO`'
- en: '`--------------------`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------`'
- en: '`ZCNRLXXXIVDELXXVIIIO`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZCNRLXXXIVDELXXVIIIO`'
- en: '`REDICIOTTOALTQUESTAN`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`REDICIOTTOALTQUESTAN`'
- en: '`OTTEFORZEPARTIGIANED`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`OTTEFORZEPARTIGIANED`'
- en: '`ELLAGARIBALDIETOSOPP`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`ELLAGARIBALDIETOSOPP`'
- en: '`OFRIULICHEHANNOREALI`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`OFRIULICHEHANNOREALI`'
- en: '`ZZATOACCORDOCOMANDOU`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZZATOACCORDOCOMANDOU`'
- en: '`NICOTENTERANNOOCCUPA`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`NICOTENTERANNOOCCUPA`'
- en: '`ZIONEUDINEALTPREFETT`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZIONEUDINEALTPREFETT`'
- en: '`OMEDIAZIONERESACOMAN`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`OMEDIAZIONERESACOMAN`'
- en: '`DOPIAZZATEDESCOANCOR`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`DOPIAZZATEDESCOANCOR`'
- en: '`AESITANTEACCETTAZION`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`AESITANTEACCETTAZION`'
- en: '`EALTOGGIPATRIOTITENT`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`EALTOGGIPATRIOTITENT`'
- en: '`ATOINVANOPRESACIVIDA`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATOINVANOPRESACIVIDA`'
- en: '`LEALTTARCENTOETCISTE`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`LEALTTARCENTOETCISTE`'
- en: '`RNAGIAPOSSESSOPATRIO`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`RNAGIAPOSSESSOPATRIO`'
- en: '`TIALTTEDESCHIAVVIANO`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIALTTEDESCHIAVVIANO`'
- en: '`NORDQUANTIAUTOMEZZIP`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`NORDQUANTIAUTOMEZZIP`'
- en: '`OSSIBILEMAPAREORMAIS`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`OSSIBILEMAPAREORMAIS`'
- en: '`ICUROBLOCCAGGIOPATRI`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`ICUROBLOCCAGGIOPATRI`'
- en: '`OTIALTTEDESCHIORDINA`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`OTIALTTEDESCHIORDINA`'
- en: '`TOCOPRIFUOCOOREVENTI`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOCOPRIFUOCOOREVENTI`'
- en: '`PERQUISIZIONISTRADEF`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`PERQUISIZIONISTRADEF`'
- en: '`INESL`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`INESL`'
- en: 'Next, the columns were sorted such that the letters in the top row were in
    alphabetical order:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按字母顺序对列进行排序：
- en: '`AEEGIINNOOORSTTTTUVV`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEEGIINNOOORSTTTTUVV`'
- en: '`--------------------`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------`'
- en: '`IXLZCLXXNVOIDXIXIVRE`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`IXLZCLXXNVOIDXIXIVRE`'
- en: '`TOTRECIQDONSATTUAEIL`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOTRECIQDONSATTUAEIL`'
- en: '`NRTOTFOITPDAAZEGEIER`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`NRTOTFOITPDAAZEGEIER`'
- en: '`ORIELGAELAPSLIBTPOAD`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORIELGAELAPSLIBTPOAD`'
- en: '`AINOFULNREIEHCHOLRIA`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`AINOFULNREIEHCHOLRIA`'
- en: '`DCCZZOAOARUNDCOMOATO`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`DCCZZOAOARUNDCOMOATO`'
- en: '`UNNNITEOCRACATEOPCON`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`UNNNITEOCRACATEOPCON`'
- en: '`EDTZIEUPOETFAINRTENL`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDTZIEUPOETFAINRTENL`'
- en: '`MZEOMIASENNOEIOAACDR`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`MZEOMIASENNOEIOAACDR`'
- en: '`CZSDOAZCPERNDATOOAIE`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`CZSDOAZCPERNDATOOAIE`'
- en: '`INEAETATSANZCTETOAIC`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`INEAETATSANZCTETOAIC`'
- en: '`EGIEAOGOLATTTIPTNITR`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`EGIEAOGOLATTTIPTNITR`'
- en: '`IASATNVAOPAVRNOCDIIE`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`IASATNVAOPAVRNOCDIIE`'
- en: '`SAOLETTEAEEINRCTTCLT`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`SAOLETTEAEEINRCTTCLT`'
- en: '`RPSRNIAOASOTEOSPIAGS`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`RPSRNIAOASOTEOSPIAGS`'
- en: '`AEITITTAASOICDEVNVLH`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEITITTAASOICDEVNVLH`'
- en: '`ZATNOQUORIPZANTMIEDU`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZATNOQUORIPZANTMIEDU`'
- en: '`ALROSBIESASMPEMOIRIA`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALROSBIESASMPEMOIRIA`'
- en: '`TLGICOBIUCIAAOCORPRG`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`TLGICOBIUCIAAOCORPRG`'
- en: '`ITHOTLTIIEADSEDONRAC`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`ITHOTLTIIEADSEDONRAC`'
- en: '`NIOTOPRRCOIECFUETVOO`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`NIOTOPRRCOIECFUETVOO`'
- en: '`DSIPEUISRIFAOIZTERQN`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`DSIPEUISRIFAOIZTERQN`'
- en: '`INL E S`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`INL E S`'
- en: 'Transcribing the message column-wise, Marzi derived the following intermediate
    message:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 通过列式转录信息，Marzi 推导出了以下中间信息：
- en: '`ITNOADUEMCIEISRAZATINDXORRICNDZZNGAAPEALLTISLTTINCNTESEISOSITRGHOI ZROEOZNZODAEALRTNOIOTPICETLFZIIMOEATENIOSCTOENLCFGUOTEIATONTITQBOL
    PULXIOALAEUAZAGVTATUIBTRIXQIENOOPSCTOAEOAOEIIRSNDTLRACOEPSLOAAARSU ICREVOPAERRENEAAPESSIACEOIONDPIUATNRNTAEOOPSIAIFISASENCFONZTVITIZM
    ADEADAALHDAAEDCTRNECAPASCOXTZICCTIIATINRODNEOEFIITEBHOENOTEPOCSETM CDUZXUGTOMORAOTTCTPVMOOOETIAEPLOPTAOONDTINIIRNTEVEIORACECAAIICAVER
    PRVRRIEAITONDIITILGLDIRAOQSELRDAONLRECRETSHUAGCON`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`ITNOADUEMCIEISRAZATINDXORRICNDZZNGAAPEALLTISLTTINCNTESEISOSITRGHOI ZROEOZNZODAEALRTNOIOTPICETLFZIIMOEATENIOSCTOENLCFGUOTEIATONTITQBOL
    PULXIOALAEUAZAGVTATUIBTRIXQIENOOPSCTOAEOAOEIIRSNDTLRACOEPSLOAAARSU ICREVOPAERRENEAAPESSIACEOIONDPIUATNRNTAEOOPSIAIFISASENCFONZTVITIZM
    ADEADAALHDAAEDCTRNECAPASCOXTZICCTIIATINRODNEOEFIITEBHOENOTEPOCSETM CDUZXUGTOMORAOTTCTPVMOOOETIAEPLOPTAOONDTINIIRNTEVEIORACECAAIICAVER
    PRVRRIEAITONDIITILGLDIRAOQSELRDAONLRECRETSHUAGCON`'
- en: In order to get a double columnar transposition, Marzi now had to repeat the
    previous procedure. Of course, it would have been a good idea to use a different
    keyword at this point, but, perhaps unwisely, Marzi always chose the same expression
    he had used for the first transposition (in this case, `GIOVINETTOSVENTURATO`).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为了得到双列换位，Marzi 现在必须重复之前的步骤。当然，此时使用不同的关键词会是个好主意，但可能由于不明智的选择，Marzi 总是选用与第一次换位时相同的表达式（在本例中为
    `GIOVINETTOSVENTURATO`）。
- en: 'Here’s the intermediate message written below the keyword:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是写在关键词下方的中间信息：
- en: '`GIOVINETTOSVENTURATO`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`GIOVINETTOSVENTURATO`'
- en: '`--------------------`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------`'
- en: '`ITNOADUEMCIEISRAZATI`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`ITNOADUEMCIEISRAZATI`'
- en: '`NDXORRICNDZZNGAAPEAL`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDXORRICNDZZNGAAPEAL`'
- en: '`LTISLTTINCNTESEISOSI`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`LTISLTTINCNTESEISOSI`'
- en: '`TRGHOIZROEOZNZODAEAL`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`TRGHOIZROEOZNZODAEAL`'
- en: '`RTNOIOTPICETLFZIIMOE`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`RTNOIOTPICETLFZIIMOE`'
- en: '`ATENIOSCTOENLCFGUOTE`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATENIOSCTOENLCFGUOTE`'
- en: '`IATONTITQBOLPULXIOAL`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`IATONTITQBOLPULXIOAL`'
- en: '`AEUAZAGVTATUIBTRIXQI`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEUAZAGVTATUIBTRIXQI`'
- en: '`ENOOPSCTOAEOAOEIIRSN`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENOOPSCTOAEOAOEIIRSN`'
- en: '`DTLRACOEPSLOAAARSUIC`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`DTLRACOEPSLOAAARSUIC`'
- en: '`REVOPAERRENEAAPESSIA`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`REVOPAERRENEAAPESSIA`'
- en: '`CEOIONDPIUATNRNTAEOO`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`CEOIONDPIUATNRNTAEOO`'
- en: '`PSIAIFISASENCFONZTVI`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`PSIAIFISASENCFONZTVI`'
- en: '`TIZMADEADAALHDAAEDCT`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIZMADEADAALHDAAEDCT`'
- en: '`RNECAPASCOXTZICCTIIA`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`RNECAPASCOXTZICCTIIA`'
- en: '`TINRODNEOEFIITEBHOEN`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`TINRODNEOEFIITEBHOEN`'
- en: '`OTEPOCSETMCDUZXUGTOM`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`OTEPOCSETMCDUZXUGTOM`'
- en: '`ORAOTTCTPVMOOOETIAEP`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORAOTTCTPVMOOOETIAEP`'
- en: '`LOPTAOONDTINIIRNTEVE`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOPTAOONDTINIIRNTEVE`'
- en: '`IORACECAAIICAVERPRVR`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`IORACECAAIICAVERPRVR`'
- en: '`RIEAITONDIITILGLDIRA`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`RIEAITONDIITILGLDIRA`'
- en: '`OQSELRDAONLRECRETSHU`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`OQSELRDAONLRECRETSHU`'
- en: '`AGCON`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`AGCON`'
- en: 'After sorting the columns alphabetically, the table looked like this:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 按字母顺序排列列之后，表格看起来是这样的：
- en: '`AEEGIINNOOORSTTTTUVV`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEEGIINNOOORSTTTTUVV`'
- en: '`--------------------`'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`--------------------`'
- en: '`AUIITADSNCEIZIEIMRTA`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`AUIITADSNCEIZIEIMRTA`'
- en: '`EINNDRRGXDLPZCNAAAOZ`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`EINNDRRGXDLPZCNAAAOZ`'
- en: '`OTELTLTSICISNINESIST`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`OTELTLTSICISNINESIST`'
- en: '`EZNTROIZGELAOROOADHZ`'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`EZNTROIZGELAOROOADHZ`'
- en: '`MTLRTIOFNCEIEPIZOIOT`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`MTLRTIOFNCEIEPIZOIOT`'
- en: '`OSLATIOCEOECECTFTGNN`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`OSLATIOCEOECECTFTGNN`'
- en: '`OIPIANTUTBLIOTQLAXOL`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`OIPIANTUTBLIOTQLAXOL`'
- en: '`XGIAEZABUAIITVTTQRAU`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`XGIAEZABUAIITVTTQRAU`'
- en: '`RCAENPSOOANIETOESIOO`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`RCAENPSOOANIETOESIOO`'
- en: '`UOADTACALSCILEPAIRRO`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`UOADTACALSCILEPAIRRO`'
- en: '`SEAREPAAVEASNRRPIEOE`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`SEAREPAAVEASNRRPIEOE`'
- en: '`EDNCEONROUOAAPINOTIT`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDNCEONROUOAAPINOTIT`'
- en: '`TICPSIFFISIZESAOVNAN`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`TICPSIFFISIZESAOVNAN`'
- en: '`DEHTIADDZATEAADACAML`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEHTIADDZATEAADACAML`'
- en: '`IAZRNAPIEOATXSCCICCT`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`IAZRNAPIEOATXSCCICCT`'
- en: '`ONITIODTNENHFEOEEBRI`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`ONITIODTNENHFEOEEBRI`'
- en: '`TSUOTOCZEMMGCETXOUPD`'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSUOTOCZEMMGCETXOUPD`'
- en: '`ACOORTTOAVPIMTPEETOO`'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`ACOORTTOAVPIMTPEETOO`'
- en: '`EOILOAOIPTETINDRVNTN`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`EOILOAOIPTETINDRVNTN`'
- en: '`RCAIOCEVRIRPIAAEVRAC`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`RCAIOCEVRIRPIAAEVRAC`'
- en: '`IOIRIITLEIADINDGRLAT`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`IOIRIITLEIADINDGRLAT`'
- en: '`SDEOQLRCSNUTLAORHEER`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`SDEOQLRCSNUTLAORHEER`'
- en: '`AGN C O`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`AGN C O`'
- en: 'Transcribing this new version column-wise, Marzi next derived the following
    ciphertext:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个新版本按列逐行转录，Marzi 接着得出了以下密文：
- en: '`AEOEMOOXRUSETDIOTAERISUITZTSIGCOEDIEANSCOCODINENLLPIAAANCHZIUOIAIE INLTRAIAEDRCPTRTOOLIROATDTRTTAENTEESINITROOIQGARLOIINZPAPOIAAOOTAC
    ILNDRTIOOTASCANFDPDCTOETRSGSZFCUBOAARFDITZOIVLCNXIGNETUOLVOIZENEAP RESCCDCECOBAASEUSAOEMVTIINILILEELINCAOITANMPERAUZPSAIUIIISSAZETHGI
    TPDTIZNOEEOTELNAEAXFCMIIILECIRPCTVTERPSASEETNANAMNNOITQTOPRIADCOTP DADORAEOZFLTEAPNOACEXEREGRTASAOTAQSIIOVCIEOEVVRHAAIDIGXRIRETNACBUT
    NRLEOOSHONOAOROIAMCRPOTAAEOEZTZTNLUOOETNLTIDONCTR`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEOEMOOXRUSETDIOTAERISUITZTSIGCOEDIEANSCOCODINENLLPIAAANCHZIUOIAIE INLTRAIAEDRCPTRTOOLIROATDTRTTAENTEESINITROOIQGARLOIINZPAPOIAAOOTAC
    ILNDRTIOOTASCANFDPDCTOETRSGSZFCUBOAARFDITZOIVLCNXIGNETUOLVOIZENEAP RESCCDCECOBAASEUSAOEMVTIINILILEELINCAOITANMPERAUZPSAIUIIISSAZETHGI
    TPDTIZNOEEOTELNAEAXFCMIIILECIRPCTVTERPSASEETNANAMNNOITQTOPRIADCOTP DADORAEOZFLTEAPNOACEXEREGRTASAOTAQSIIOVCIEOEVVRHAAIDIGXRIRETNACBUT
    NRLEOOSHONOAOROIAMCRPOTAAEOEZTZTNLUOOETNLTIDONCTR`'
- en: 'In the last step, Marzi needed to include identifiers of the keywords he had
    used. As mentioned, `GIOVINETTO` and `SVENTURATO` were identified by the letters
    `C` and `P`. Marzi extended these two characters to the five-letter group `CRPEN`,
    adding the null characters `R`, `E`, and `N`. (Remember that the letters `R`,
    `E`, `N`, `A`, `T`, and `O` didn’t stand for words in the poem and therefore could
    be used as meaningless filler material.) Then, he converted this filler to numbers
    and added 44,739 to this expression. This number was the same for all messages.
    To perform the number-to-letter conversion, he used an alphabet written in the
    following order: `B`, `C`, `D`, `F`, `G`, `H`, `I`, `J`, `K`, `L`, `M`, `P`, `Q`,
    `S`, `U`, `V`, `W`, `X`, `Y`, `Z`, `R`, `E`, `N`, `A`, `T`, `O`. The complete
    operation looked like this:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，Marzi需要包含他所使用关键词的标识符。如前所述，`GIOVINETTO`和`SVENTURATO`分别通过字母`C`和`P`来表示。Marzi将这两个字符扩展成五个字母的组`CRPEN`，并加入了空字符`R`、`E`和`N`。（请记住，字母`R`、`E`、`N`、`A`、`T`和`O`在诗歌中并不代表任何词语，因此可以用作无意义的填充物。）然后，他将这些填充物转换为数字，并在此表达式中加上了44,739。这个数字对所有消息都是相同的。为了执行字母到数字的转换，他使用了以下顺序的字母表：`B`、`C`、`D`、`F`、`G`、`H`、`I`、`J`、`K`、`L`、`M`、`P`、`Q`、`S`、`U`、`V`、`W`、`X`、`Y`、`Z`、`R`、`E`、`N`、`A`、`T`、`O`。完整的操作如下：
- en: '`CRPEN`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`CRPEN`'
- en: '`44739`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`44739`'
- en: '`-----`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`-----`'
- en: '`HTYTH`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTYTH`'
- en: 'Next, Marzi repeated the procedure, extending `CP` with the null characters
    `A`, `T`, and `O` to build the five-letter block `ATOCP` and then adding 44739:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Marzi重复了这个过程，将`CP`与空字符`A`、`T`和`O`扩展为五个字母的块`ATOCP`，然后加上44739：
- en: '`ATOCP`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATOCP`'
- en: '`44739`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`44739`'
- en: '`-----`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`-----`'
- en: '`CDIGR`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDIGR`'
- en: 'Finally, Marzi recorded the message in groups of five, adding the block indicating
    the first keyword (`HTYTH`) at the fourth position and the block indicating the
    second keyword (`CDIGR`) at the end:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Marzi将消息分成五个字母一组，添加了表示第一个关键词（`HTYTH`）的块到第四个位置，并在最后加上表示第二个关键词（`CDIGR`）的块：
- en: '`AEOEM OOXRU SETDI` `HTYTH` `OTAER ISUIT ZTSIG COEDI EANSC OCODI NENLL PIAAA
    NCHZI UOIAI EINLT RAIAE DRCPT RTOOL IROAT DTRTT AENTE ESINI TROOI QGARL OIINZ
    PAPOI AAOOT ACILN DRTIO OTASC ANFDP DCTOE TRSGS ZFCUB OAARF DITZO IVLCN XIGNE
    TUOLV OIZEN EAPRE SCCDC ECOBA ASEUS AOEMV TIINI LILEE LINCA OITAN MPERA UZPSA
    IUIII SSAZE THGIT PDTIZ NOEEO TELNA EAXFC MIIIL ECIRP CTVTE RPSAS EETNA NAMNN
    OITQT OPRIA DCOTP DADOR AEOZF LTEAP NOACE XEREG RTASA OTAQS IIOVC IEOEV VRHAA
    IDIGX RIRET NACBU TNRLE OOSHO NOAOR OIAMC RPOTA AEOEZ TZTNL UOOET NLTID ONCTR`
    `CDIGR`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEOEM OOXRU SETDI` `HTYTH` `OTAER ISUIT ZTSIG COEDI EANSC OCODI NENLL PIAAA
    NCHZI UOIAI EINLT RAIAE DRCPT RTOOL IROAT DTRTT AENTE ESINI TROOI QGARL OIINZ
    PAPOI AAOOT ACILN DRTIO OTASC ANFDP DCTOE TRSGS ZFCUB OAARF DITZO IVLCN XIGNE
    TUOLV OIZEN EAPRE SCCDC ECOBA ASEUS AOEMV TIINI LILEE LINCA OITAN MPERA UZPSA
    IUIII SSAZE THGIT PDTIZ NOEEO TELNA EAXFC MIIIL ECIRP CTVTE RPSAS EETNA NAMNN
    OITQT OPRIA DCOTP DADOR AEOZF LTEAP NOACE XEREG RTASA OTAQS IIOVC IEOEV VRHAA
    IDIGX RIRET NACBU TNRLE OOSHO NOAOR OIAMC RPOTA AEOEZ TZTNL UOOET NLTID ONCTR`
    `CDIGR`'
- en: This is exactly the ciphertext radio message Marzi transmitted on April 28,
    1945.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是Marzi在1945年4月28日发送的加密无线电消息。
- en: Challenges
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战
- en: Yet another IRA message
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 又一条IRA消息
- en: '[Figure 10-2](#figure10-2) shows a message encrypted using an incomplete columnar
    transposition and sent by the IRA in the 1920s.^([5](b06.xhtml#c10-endnote-5))'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[图10-2](#figure10-2)展示了一条使用不完全列换位加密并由IRA在1920年代发送的消息。^([5](b06.xhtml#c10-endnote-5))'
- en: '![](image_fi/502727c10/f10002.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c10/f10002.png)'
- en: 'Figure 10-2: An IRA message encrypted with an incomplete columnar transposition'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2：使用不完全列换位加密的IRA消息
- en: You can try to solve it yourself.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试自己解开它。
- en: The Double Columnar Transposition Reloaded challenge
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 双重列换位加密重载挑战
- en: We mentioned that double columnar transposition (DCT) is one of the best manual
    ciphers known. In [Chapter 16](c16.xhtml), we will introduce a quite difficult
    DCT challenge that our colleague, the Israeli codebreaker George Lasry, solved
    in 2013 with a hill-climbing algorithm. After this success, Arno Wacker, Bernhard
    Esslinger, and Klaus decided to create a new and even more difficult puzzle.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到过，双重列换位加密（DCT）是已知最好的手工密码之一。在[第16章](c16.xhtml)中，我们将介绍一个相当困难的DCT挑战，这个挑战是我们同事、以色列破译专家George
    Lasry在2013年通过爬山算法解决的。成功之后，Arno Wacker、Bernhard Esslinger和Klaus决定创建一个全新的、更困难的谜题。
- en: In fact, they created three new challenges, calling them DCT Reloaded 1, 2,
    and 3\. The first puzzle is the easiest and the last is the most difficult. Details
    of these and other DCT challenges are available on the crypto puzzle website MysteryTwister
    ([https://mysterytwister.org](https://mysterytwister.org)).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，他们创建了三个新挑战，命名为DCT Reloaded 1、2和3。第一个谜题是最简单的，而最后一个是最难的。这些和其他DCT挑战的详细信息可以在加密谜题网站MysteryTwister上找到（[https://mysterytwister.org](https://mysterytwister.org)）。
- en: 'Here, for example, is DCT Reloaded 2\. Both keywords used in this transposition
    are randomly chosen letter strings with a length of twenty to twenty-seven characters
    each:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '`NWTDSSHAUIASOOTLDEDNLTHOBENHETCWTHERTPSNTMCTIAYEINNIUIYOPLEIRGHMNU TARFONYMLDSERSAELANNLOSAWALTODOCAHUOTOPAREAEEESPDEYATUENINNCNBDPCO
    FORETSYHAHANTEDERPERCRSGEANNIHYTTEDNGICOIOLABSRONNWLNTALWLVRIBHKTE TECNPSFHACMIGTYODEONMTOIVUAIAEESKKLAROMBAYKOSRNEEHTHSIMSEOUAWLYAWH
    SWWSSWLCIYCEONUPNEESURSBETDALHDAHLIOAAETONNDOELTHHNHHDCOTUIITEAYTE RRHOENKEUCTIRANECYQNACTMBWAPDIAEXEUTIATAJLITEALFISIEATATAEOTNEESME
    UDDADOROEGORPELGPVMETHHSDDRMSNDERMSLEOANENHTCHPHSSEASSEDBHVESNUGON IOLELSUCASELSTEIESYATREEELADIEYOEOKAREEELETCOSDHCSAETSTSFRTSELEITD
    NHBRINSERHRTLNAXYONAMECAIESATAEERIAOTCEENETFARMRTSREAPAYNIRTNITSRA THIWRIPRTDIIRECSWADSOATUTENMVVOAISISONGGWTH`'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: There is no doubt that this challenge is an extremely difficult one!
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Unsolved cryptograms
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Catokwacopa ad series
  id: totrans-419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the most puzzling encrypted newspaper ad series we are aware of was
    published in the London *Evening Standard* in 1875\. Like most of the other newspaper
    ads covered in this book, we found these in Jean Palmer’s 2005 book *The Agony
    Column Codes & Ciphers*.^([6](b06.xhtml#c10-endnote-6)) This particular series
    consists of two ads. The first was printed in the May 8, 1875, issue:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '`W. Str 53\. Catokwacopa. Olcabrokorlested. Coomemega. Sesipyyocashostikr.
    Rep.—Itedconlec mistrl. —Hfsclam 54, 3 caselcluchozamot. 1\. 6\. 9\. Mopredisco.
    Contoladsemot. Iadfilisat. Qft. Cagap. Balmnopsemsov. Ap. 139.—Hodsam 55, 6\.
    Iopotonrogfimsecharsenr. Tolshr. Itedjolec. Mistrl.—Ding Declon. Ereflodbr.`'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: 'Twelve days later, on May 20, a similar ad was published in the same newspaper:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '`W.—Umem 18\. Poayatlgerty. Dpeatcnrftin. Nvtinrdn. Dmlurpinrtrcamur. Etd.—Atndngtnsurs.
    Otenpu.—Eftdorshpxn. 18\. Ndtsfindseseo. Cotegr Tavlysdinlge. Ngtndusdcndo. Edrstneirs.
    Ui, Ndted. Iolapstedtioc. A. P. 138.—Yxn. 18\. 18\. Wtubrfftrstendinhofsvmnr.
    Dily.—Atdwtsurs. Oatvpu.—Y Arati. Rileohmae.—This will be intelligible if read
    in connection with my communication published in this column on the 8th inst.`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Note that the last sentence of the second ad is unencrypted. If it is correct,
    the first ad could be the key for decrypting the second (or vice versa). The letter
    frequencies are consistent with those of an ordinary English text. This makes
    it likely that we are dealing with a transposition cipher. Our guess is that the
    two ciphertexts need to be mixed somehow (e.g., letter 1 from ad 1, letter 1 from
    ad 2, letter 2 from ad 1, letter 2 from ad 2 . . .). However, so far, nobody has
    found a mixing rule that makes sense. Can a reader do better?
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
