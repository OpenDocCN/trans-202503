- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up a Virtual Machine
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Provisioning* (that is, setting up) a virtual machine (VM) is the act of configuring
    a VM for a specific purpose. Such a purpose could be running an application, testing
    software across a different platform, or applying updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up a VM requires two steps: creating and then configuring it. For this
    example, you’ll use Vagrant and Ansible to build and configure a VM. Vagrant automates
    the process of creating the VM, while Ansible configures the VM once it’s running.
    You’ll set up and test your VM locally, on VirtualBox. This process is similar
    to creating and provisioning servers in the cloud. The VM you set up now will
    be the foundation of all the examples in the first section of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Why Use Code to Build Infrastructure?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using code to build and provision infrastructure lets you consistently, quickly,
    and efficiently manage and deploy applications. This allows your infrastructure
    and services to scale. It also can reduce operating costs, decrease time for recovery
    during a disaster, and minimize the chance of configuration errors.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit of treating your infrastructure as code is ease of deployment.
    Applications are built and tested the same way in a delivery pipeline. For example,
    artifacts like Docker images are created and deployed consistently, using the
    same versions of libraries and programs. Treating your infrastructure as code
    allows you to build reusable components, use test frameworks, and apply standard
    software engineering best practices.
  prefs: []
  type: TYPE_NORMAL
- en: There are times when treating your infrastructure as code may be overkill, however.
    For example, if you have only one VM to stand up or a simple Bash script to run,
    it may not be worth the time and effort to create all the infrastructure and CM
    code to accomplish something you can do in five minutes. Use your best judgment
    when deciding on the route to take.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with Vagrant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Vagrant* is a framework that makes it easy to create and manage VMs. It supports
    multiple operating systems (OSs) that can run on multiple platforms. Vagrant uses
    a single configuration file, called a *Vagrantfile*, to describe the virtual environment
    in code. You’ll use this to create your local infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install Vagrant, visit Vagrant’s website at [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html).
    Choose the correct OS and architecture for your host. To complete the installation,
    download the binary and follow the instructions specific to your OS. For example,
    since I am on a Mac, I would choose the macOS 64-bit link to download the latest
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'When your VM comes up, you’ll also need to make sure that it has VirtualBox’s
    guest additions installed on it. (You should have installed VirtualBox when following
    along with this book’s Introduction.) *Guest additions* provide better driver
    support, port forwarding, and host-only networking. They help your VM run faster
    and have more options available. After you have finished installing Vagrant, enter
    the following command in your terminal to install the Vagrant plug-in for guest
    additions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The output above shows a successful installation of the `vbguest` plug-in for
    Vagrant. Your version of the plug-in will most likely be different since new versions
    come out periodically. It is good practice to update this plug-in anytime you
    upgrade Vagrant and VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of a Vagrantfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Vagrantfile describes how to build and provision a VM. It’s best practice
    to use one Vagrantfile per project so you can add the configuration file to your
    project’s version control and share it with your team. The configuration file’s
    syntax is in the Ruby programming language, but you just need to understand a
    few basic principles to get started.
  prefs: []
  type: TYPE_NORMAL
- en: The Vagrantfile provided with this book contains documentation and sensible
    options to save you time. This file is too large to include here, so I’ll discuss
    only the sections I changed from the Vagrant defaults. You’ll start at the top
    of the file and work your way down to the bottom, so feel free to open it and
    follow along. It is located under the *vagrant/* directory in the repository you
    cloned from the Introduction. Later in this chapter, you’ll use this file to create
    your VM.
  prefs: []
  type: TYPE_NORMAL
- en: Operating System
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Vagrant supports many OS base images, called *boxes*, by default. You can search
    the list of boxes that Vagrant supports at [https://app.vagrantup.com/boxes/search/](https://app.vagrantup.com/boxes/search/).
    Once you find the one you want, set it near the top of the Vagrantfile using the
    `vm.box` option, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case, I’ve set the `vm.box` identifier to `ubuntu/focal64`.
  prefs: []
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can configure the VM’s network options for different network scenarios,
    like *static IP* or *Dynamic Host Configuration Protocol (DHCP)*. To do this,
    modify the `vm.network` option near the middle of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For this example, you’ll want the VM to obtain its IP address from a private
    network using DHCP. That way, it’ll be easy to access resources like a web server
    on the VM from your local host.
  prefs: []
  type: TYPE_NORMAL
- en: Providers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A *provider* is a plug-in that knows how to create and manage a VM. Vagrant
    supports multiple providers to manage different types of machines. Each provider
    has common options like CPU, disk, and memory. Vagrant will use the provider’s
    application programming interface (API) or command line options to create the
    VM. You can find a list of supported providers at [https://www.vagrantup.com/docs/providers/](https://www.vagrantup.com/docs/providers/).
    The provider is set near the bottom of the file and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Basic Vagrant Commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you know how a Vagrantfile is laid out, let’s look at some basic Vagrant
    commands. The four you’ll use most often are `vagrant up`, `vagrant destroy`,
    `vagrant status`, and `vagrant ssh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vagrant up` Creates a VM using the Vagrantfile as a guide'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`vagrant destroy` Destroys the running VM'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`vagrant status` Checks the running status of a VM'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`vagrant ssh` Accesses the VM over Secure Shell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of these commands has additional options. To see what they are, enter a
    command and then add the `--help` flag for more information. To learn more about
    Vagrant’s features, visit the documentation at [https://www.vagrantup.com/docs/](https://www.vagrantup.com/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: Once you create the VM by running `vagrant up`, you’ll have a core Linux system
    with all the OS defaults. Next, let’s look at how you can apply your own configuration
    to the system by provisioning it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Ansible* is a CM tool that can orchestrate the provisioning of infrastructure
    like VMs. Ansible uses a *declarative configuration style*, which means it allows
    you to describe what the desired state of infrastructure should look like. This
    is different from an *imperative configuration style*, which requires you to supply
    all the minute details on your desired state of infrastructure. Because of its
    declarative style, Ansible is a great tool for software engineers who are not
    well versed in system administration. Ansible is also open-source software and
    free to use.'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible is written in Python, but you don’t need to understand Python to use
    it. The one dependency you will need to understand is *Yet Another Markup Language
    (YAML)*, which is a data serialization language that Ansible uses to describe
    complex data structures and tasks. It’s easy to pick up simply by looking at some
    basic examples, and I’ll provide a few when I review the Ansible playbook and
    tasks later. Two important things worth noting here are that YAML uses indentation
    to organize elements like Python, and it is also case sensitive. You can read
    more about YAML at [https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html](https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible applies its configuration changes over *Secure Shell (SSH)*, which is
    a secure protocol to communicate with remote hosts. The most common use of SSH
    is to gain access to the command line on a remote host, but users can also deploy
    it to forward network traffic and copy files securely. By using SSH, Ansible can
    provision a single host or a group of hosts over the network.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, you should install Ansible so Vagrant can use it for provisioning. Head
    over to Ansible’s documentation at [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html).
    Locate the documentation for your specific OS and follow the steps to install
    Ansible. For example, I am using macOS, and the preferred way to install Ansible
    on macOS is to use *pip*, which is a Python package manager used to install applications
    and dependencies. I found this information under the Installing Ansible on macOS
    link, which eventually directed me to install Ansible using pip under the Installing
    Ansible with pip link. Since Ansible is written in Python, using pip is an effective
    way to install the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Key Ansible Concepts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you’ve installed Ansible, you’ll need to know these terms and concepts
    to have it up and running quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: Playbook A *playbook* is a collection of ordered tasks or roles that you can
    use to configure hosts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Control node A *control node* is any Unix machine that has Ansible installed
    on it. You will run your playbooks or commands from a control node, and you can
    have as many control nodes as you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inventory An *inventory* is a file that contains a list of hosts or groups of
    hosts that Ansible can communicate with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Module A *module* encapsulates the details of how to perform certain actions
    across operating systems, such as how to install a software package. Ansible comes
    preloaded with many modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Task A *task* is a command or action (such as installing software or adding
    a user) that is executed on the managed host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Role A *role* is a group of tasks and variables that is organized in a standardized
    directory structure, defines a particular purpose for the server, and can be shared
    with other users for a common goal. A typical role could configure a host to be
    a database server. This role would include all the files and instructions necessary
    to install the database application, configure user permissions, and apply seed
    data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ansible Playbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To configure the VM, you’ll use the Ansible playbook I have provided. This file,
    named *site.yml*, is located in the *ansible/* directory you cloned from the Introduction.
    Think of the playbook as an instruction manual on how to assemble a host. Now,
    take a look at the playbook file itself. Navigate to the *ansible/* directory
    and open the *site.yml* file in your editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can break up playbook files into different sections. The first section
    functions as the header, which is a good place to set global variables to use
    throughout the playbook. In the header, you’ll set things like the `name` of the
    play, the `hosts`, the `remote_user`, and the privileged escalation method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These settings are mostly boilerplate, but let’s focus on a few points. Be sure
    to give each play a `name` so it’s easier to find and debug if things go wrong.
    The `name` of the play in the example above is set to `Provision VM`. You could
    have multiple plays in a single playbook, but for this example, you’ll need only
    one. Next, the `hosts` option is set to `all` to match any Vagrant-built VMs because
    Vagrant will autogenerate the Ansible inventory file dynamically. Some operations
    on a host will require elevated privileges, so Ansible allows you to *become*,
    or activate privilege escalation for, a specific user. Since you’re using Ubuntu,
    the default user with escalated privileges is `ubuntu`. You also can set the different
    methods to use for authorization, and you’ll use `sudo` for this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next section is where you’ll list all the tasks for the host. This is where
    the actual work is being done. If you think of the playbook as an instruction
    manual, the *tasks* are just the separate steps in that manual. The `tasks` section
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The built-in Ansible `import_tasks` function is loading tasks from two separate
    files: *pam_pwquality.yml* and *user_and_group.yml*. The `import_tasks` function
    allows you to organize the tasks better and avoid a large, cluttered playbook.
    Each of these files can have one or many individual tasks.I’ll discuss tasks and
    other parts of the playbook in future chapters. For now, note that these tasks
    are commented out with the hash mark (`#`) symbol and will not change anything
    until you uncomment them.'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Ansible Commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ansible application comes with multiple commands, but you’ll mostly use
    these two: `ansible` and `ansible-playbook`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll primarily use the `ansible` command for running ad hoc or one-time commands
    that you execute from the command line. For example, to instruct a group of web
    servers to restart Nginx, you would enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This instructs Ansible to restart Nginx on a group of hosts called *webservers*.
    Note that the mapping for the *webservers* group would be located in the inventory
    file. The Ansible `service` module interacts with the OS to perform the restart.
    The `service` module requires some extra arguments, and they are passed with the
    `-a` flag. In this case, both the name of the `service` (`nginx`) and the fact
    that it should restart are indicated. You need *root* privileges to restart a
    `service`, so you’ll use the `--become` flag to ask for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ansible-playbook` command runs playbooks. In fact, this is the command
    Vagrant will use during the provisioning phase. To instruct `ansible-playbook`
    to execute the *aws-cloudwatch.yml* playbook against a group of hosts called *dockerhosts*,
    you would enter the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `dockerhosts` need to be listed in the inventory file for the command to
    succeed. Note that if you do not provide a subset of hosts with the `-l` flag,
    Ansible will assume you want to run the playbook on all the hosts found in your
    inventory file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Ubuntu VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Up to this point, we’ve been discussing concepts and configuration files. Now,
    let’s put that knowledge to use and stand up and provision some infrastructure.
    To create the Ubuntu VM, make sure you are in the same directory as the Vagrantfile.
    This is because Vagrant needs to reference the configuration file while creating
    the VM. You’ll use the `vagrant up` command to create the VM, but before running
    the command, you should know that it produces a lot of output and may take a few
    minutes. Therefore, I’m focusing on only the relevant parts here. Enter the following
    command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The first section of the output to look at is Vagrant downloading the base
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, Vagrant is downloading the `ubuntu` image, as expected. The image download
    may take a few minutes, depending on your internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Next, Vagrant will configure a public/private key pair to provide SSH access
    to the VM. (We’ll discuss key pairs in more detail in Chapter 3.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Vagrant stores the private key locally on your host (*.vagrant/*) and then adds
    the public key to the *~/.ssh/authorized_keys* file on the VM. Without these keys,
    you would not be able to connect to the VM over SSH.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Vagrant and VirtualBox will mount a shared directory inside the
    VM. This shared directory will give you access to a host directory from within
    the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see that my local host directory *Users/bradleyd/devops_for_the_desperate/*
    is mounted at the *vagrant/* directory inside the VM. Your directory will be different.
    You can use this shared directory for transferring files like source code between
    host and VM. If you don’t need the shared directory, Vagrant provides a configuration
    option to turn it off. See Vagrant’s documentation for further details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the following shows the Ansible `provisioner` output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This shows that the Ansible `provisioner` is run using the `ansible-playbook`
    1 command. Ansible logs each `TASK` 2 and whether anything was changed on the
    host 3. In this case, all the `tasks` are commented out, so nothing was `changed`
    4 on the VM. This output is the first place to look when gauging success or failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s perform a sanity check and see whether the VM is actually running. Enter
    the following command in your terminal to show the VM’s current status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that the status of the VM is `running`. This means you created
    the VM, and it should be accessible over SSH.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your output looks different, make sure there are no errors from the `vagrant
    up` command before continuing. If you need more information, add the `debug` flag
    to the `up` command to make Vagrant increase the output verbosity: `vagrant up
    --debug`. You’ll need to have a successful provision at this point, or it will
    be difficult to follow along with the remaining chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you installed Vagrant and Ansible to create and configure a
    VM. You learned how to configure Vagrant using its Vagrantfile, and you gained
    basic knowledge of how to provision a VM using Ansible playbooks and tasks. Now
    that you understand these basic concepts, you should be able to create and provision
    any type of infrastructure, not just VMs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll use two provided Ansible tasks to create a user
    and group. You’ll need to have a foundation in user and group management when
    configuring a host.
  prefs: []
  type: TYPE_NORMAL
