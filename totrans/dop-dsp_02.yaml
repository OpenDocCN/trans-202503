- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Setting Up a Virtual Machine
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设置虚拟机
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: '*Provisioning* (that is, setting up) a virtual machine (VM) is the act of configuring
    a VM for a specific purpose. Such a purpose could be running an application, testing
    software across a different platform, or applying updates.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*配置*（即设置）虚拟机（VM）是为特定目的配置虚拟机的过程。这个目的可以是运行应用程序、在不同平台上测试软件，或应用更新。'
- en: 'Setting up a VM requires two steps: creating and then configuring it. For this
    example, you’ll use Vagrant and Ansible to build and configure a VM. Vagrant automates
    the process of creating the VM, while Ansible configures the VM once it’s running.
    You’ll set up and test your VM locally, on VirtualBox. This process is similar
    to creating and provisioning servers in the cloud. The VM you set up now will
    be the foundation of all the examples in the first section of this book.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 设置虚拟机需要两个步骤：创建和配置。在这个示例中，您将使用 Vagrant 和 Ansible 来构建和配置虚拟机。Vagrant 自动化了虚拟机的创建过程，而
    Ansible 在虚拟机运行后对其进行配置。您将在本地的 VirtualBox 上设置并测试虚拟机。这个过程类似于在云中创建和配置服务器。您现在设置的虚拟机将是本书第一部分所有示例的基础。
- en: Why Use Code to Build Infrastructure?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用代码来构建基础设施？
- en: Using code to build and provision infrastructure lets you consistently, quickly,
    and efficiently manage and deploy applications. This allows your infrastructure
    and services to scale. It also can reduce operating costs, decrease time for recovery
    during a disaster, and minimize the chance of configuration errors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码来构建和配置基础设施使您能够始终如一、快速且高效地管理和部署应用程序。这使得您的基础设施和服务可以扩展。它还可以降低运营成本，减少灾难恢复时间，并最小化配置错误的机会。
- en: Another benefit of treating your infrastructure as code is ease of deployment.
    Applications are built and tested the same way in a delivery pipeline. For example,
    artifacts like Docker images are created and deployed consistently, using the
    same versions of libraries and programs. Treating your infrastructure as code
    allows you to build reusable components, use test frameworks, and apply standard
    software engineering best practices.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 将基础设施视为代码的另一个好处是易于部署。应用程序在交付流水线中以相同的方式构建和测试。例如，像 Docker 镜像这样的工件会被一致地创建和部署，使用相同版本的库和程序。将基础设施视为代码使您能够构建可重用的组件，使用测试框架，并应用标准的软件工程最佳实践。
- en: There are times when treating your infrastructure as code may be overkill, however.
    For example, if you have only one VM to stand up or a simple Bash script to run,
    it may not be worth the time and effort to create all the infrastructure and CM
    code to accomplish something you can do in five minutes. Use your best judgment
    when deciding on the route to take.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时将基础设施视为代码可能会显得过于复杂。例如，如果您只需要建立一个虚拟机或运行一个简单的 Bash 脚本，可能不值得花费时间和精力来创建所有基础设施和
    CM 代码，以完成一个您可以在五分钟内完成的任务。做决策时请根据具体情况作出最佳判断。
- en: Getting Started with Vagrant
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Vagrant 入门
- en: '*Vagrant* is a framework that makes it easy to create and manage VMs. It supports
    multiple operating systems (OSs) that can run on multiple platforms. Vagrant uses
    a single configuration file, called a *Vagrantfile*, to describe the virtual environment
    in code. You’ll use this to create your local infrastructure.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Vagrant* 是一个框架，使得创建和管理虚拟机变得简单。它支持多种操作系统（OS），可以运行在多个平台上。Vagrant 使用一个名为 *Vagrantfile*
    的配置文件来以代码描述虚拟环境。您将使用这个文件来创建您的本地基础设施。'
- en: Installation
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: To install Vagrant, visit Vagrant’s website at [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html).
    Choose the correct OS and architecture for your host. To complete the installation,
    download the binary and follow the instructions specific to your OS. For example,
    since I am on a Mac, I would choose the macOS 64-bit link to download the latest
    version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Vagrant，请访问 Vagrant 的官方网站 [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)。选择适合您的主机操作系统和架构的版本。完成安装后，下载二进制文件并按照您的操作系统特定的说明进行安装。例如，由于我使用的是
    Mac，所以我会选择 macOS 64 位的链接下载最新版本。
- en: 'When your VM comes up, you’ll also need to make sure that it has VirtualBox’s
    guest additions installed on it. (You should have installed VirtualBox when following
    along with this book’s Introduction.) *Guest additions* provide better driver
    support, port forwarding, and host-only networking. They help your VM run faster
    and have more options available. After you have finished installing Vagrant, enter
    the following command in your terminal to install the Vagrant plug-in for guest
    additions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的虚拟机启动时，你还需要确保它安装了 VirtualBox 的来宾增强功能。（在跟随本书引言的过程中，你应该已经安装了 VirtualBox。）*来宾增强功能*提供更好的驱动支持、端口转发和仅主机网络功能。它们帮助你的虚拟机运行得更快，并提供更多可用选项。安装
    Vagrant 后，在终端输入以下命令来安装 Vagrant 的来宾增强插件：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output above shows a successful installation of the `vbguest` plug-in for
    Vagrant. Your version of the plug-in will most likely be different since new versions
    come out periodically. It is good practice to update this plug-in anytime you
    upgrade Vagrant and VirtualBox.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示了成功安装 Vagrant 的 `vbguest` 插件。你的插件版本很可能会有所不同，因为新版本会定期发布。每次升级 Vagrant 和
    VirtualBox 时，最好更新这个插件。
- en: Anatomy of a Vagrantfile
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vagrantfile 的结构
- en: A Vagrantfile describes how to build and provision a VM. It’s best practice
    to use one Vagrantfile per project so you can add the configuration file to your
    project’s version control and share it with your team. The configuration file’s
    syntax is in the Ruby programming language, but you just need to understand a
    few basic principles to get started.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrantfile 描述了如何构建和配置虚拟机（VM）。最佳实践是每个项目使用一个 Vagrantfile，这样你可以将配置文件添加到项目的版本控制中并与团队共享。配置文件的语法是
    Ruby 编程语言，但你只需要理解一些基本原理即可开始使用。
- en: The Vagrantfile provided with this book contains documentation and sensible
    options to save you time. This file is too large to include here, so I’ll discuss
    only the sections I changed from the Vagrant defaults. You’ll start at the top
    of the file and work your way down to the bottom, so feel free to open it and
    follow along. It is located under the *vagrant/* directory in the repository you
    cloned from the Introduction. Later in this chapter, you’ll use this file to create
    your VM.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供的 Vagrantfile 包含文档和合理的选项，可以为你节省时间。这个文件太大，无法在这里包含，因此我只会讨论我从 Vagrant 默认设置中更改的部分。你将从文件的顶部开始，一直到文件的底部，所以可以随时打开文件并跟着做。该文件位于你从本书引言中克隆的仓库中的
    *vagrant/* 目录下。在本章稍后的部分，你将使用这个文件来创建你的虚拟机。
- en: Operating System
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 操作系统
- en: 'Vagrant supports many OS base images, called *boxes*, by default. You can search
    the list of boxes that Vagrant supports at [https://app.vagrantup.com/boxes/search/](https://app.vagrantup.com/boxes/search/).
    Once you find the one you want, set it near the top of the Vagrantfile using the
    `vm.box` option, as shown below:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 默认支持许多操作系统基础镜像，称为 *boxes*。你可以在 [https://app.vagrantup.com/boxes/search/](https://app.vagrantup.com/boxes/search/)
    查找 Vagrant 支持的 boxes 列表。一旦找到你想要的，使用 `vm.box` 选项将其设置在 Vagrantfile 的顶部，如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, I’ve set the `vm.box` identifier to `ubuntu/focal64`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将 `vm.box` 标识符设置为 `ubuntu/focal64`。
- en: Networking
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络配置
- en: 'You can configure the VM’s network options for different network scenarios,
    like *static IP* or *Dynamic Host Configuration Protocol (DHCP)*. To do this,
    modify the `vm.network` option near the middle of the file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为不同的网络场景配置虚拟机的网络选项，如 *静态 IP* 或 *动态主机配置协议（DHCP）*。为此，请在文件中部修改 `vm.network`
    选项：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For this example, you’ll want the VM to obtain its IP address from a private
    network using DHCP. That way, it’ll be easy to access resources like a web server
    on the VM from your local host.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，你希望虚拟机通过 DHCP 从私有网络获取 IP 地址。这样，你就可以轻松地从本地主机访问虚拟机上的资源，如 Web 服务器。
- en: Providers
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提供者
- en: 'A *provider* is a plug-in that knows how to create and manage a VM. Vagrant
    supports multiple providers to manage different types of machines. Each provider
    has common options like CPU, disk, and memory. Vagrant will use the provider’s
    application programming interface (API) or command line options to create the
    VM. You can find a list of supported providers at [https://www.vagrantup.com/docs/providers/](https://www.vagrantup.com/docs/providers/).
    The provider is set near the bottom of the file and looks like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*提供者*是一个插件，它知道如何创建和管理虚拟机。Vagrant 支持多个提供者来管理不同类型的机器。每个提供者都有类似 CPU、磁盘和内存的常见选项。Vagrant
    将使用提供者的应用编程接口（API）或命令行选项来创建虚拟机。你可以在 [https://www.vagrantup.com/docs/providers/](https://www.vagrantup.com/docs/providers/)
    找到支持的提供者列表。提供者设置在文件的底部，看起来像这样：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Basic Vagrant Commands
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本的 Vagrant 命令
- en: 'Now that you know how a Vagrantfile is laid out, let’s look at some basic Vagrant
    commands. The four you’ll use most often are `vagrant up`, `vagrant destroy`,
    `vagrant status`, and `vagrant ssh`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了 Vagrantfile 的布局，让我们来看看一些基本的 Vagrant 命令。你最常用的四个命令是`vagrant up`、`vagrant
    destroy`、`vagrant status`和`vagrant ssh`：
- en: '`vagrant up` Creates a VM using the Vagrantfile as a guide'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vagrant up` 使用 Vagrantfile 作为指南创建虚拟机'
- en: '`vagrant destroy` Destroys the running VM'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vagrant destroy` 销毁正在运行的虚拟机'
- en: '`vagrant status` Checks the running status of a VM'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vagrant status` 检查虚拟机的运行状态'
- en: '`vagrant ssh` Accesses the VM over Secure Shell'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vagrant ssh` 通过安全外壳（Secure Shell）访问虚拟机'
- en: Each of these commands has additional options. To see what they are, enter a
    command and then add the `--help` flag for more information. To learn more about
    Vagrant’s features, visit the documentation at [https://www.vagrantup.com/docs/](https://www.vagrantup.com/docs/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令都有额外的选项。要查看它们，输入命令后添加`--help`标志以获取更多信息。要了解更多关于 Vagrant 功能的信息，请访问[https://www.vagrantup.com/docs/](https://www.vagrantup.com/docs/)上的文档。
- en: Once you create the VM by running `vagrant up`, you’ll have a core Linux system
    with all the OS defaults. Next, let’s look at how you can apply your own configuration
    to the system by provisioning it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过运行`vagrant up`创建了虚拟机，你将得到一个核心的 Linux 系统，包含所有操作系统的默认设置。接下来，让我们来看一下如何通过配置管理应用你自己的设置。
- en: Getting Started with Ansible
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南：Ansible
- en: '*Ansible* is a CM tool that can orchestrate the provisioning of infrastructure
    like VMs. Ansible uses a *declarative configuration style*, which means it allows
    you to describe what the desired state of infrastructure should look like. This
    is different from an *imperative configuration style*, which requires you to supply
    all the minute details on your desired state of infrastructure. Because of its
    declarative style, Ansible is a great tool for software engineers who are not
    well versed in system administration. Ansible is also open-source software and
    free to use.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ansible* 是一个配置管理（CM）工具，可以协调虚拟机等基础设施的配置。Ansible 使用*声明式配置风格*，这意味着它允许你描述基础设施的期望状态。这与*命令式配置风格*不同，后者要求你提供关于期望状态的所有细节。由于采用声明式风格，Ansible
    是一个非常适合不太懂系统管理的开发人员的工具。Ansible 还是开源软件，并且免费使用。'
- en: Ansible is written in Python, but you don’t need to understand Python to use
    it. The one dependency you will need to understand is *Yet Another Markup Language
    (YAML)*, which is a data serialization language that Ansible uses to describe
    complex data structures and tasks. It’s easy to pick up simply by looking at some
    basic examples, and I’ll provide a few when I review the Ansible playbook and
    tasks later. Two important things worth noting here are that YAML uses indentation
    to organize elements like Python, and it is also case sensitive. You can read
    more about YAML at [https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html](https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是用 Python 编写的，但你不需要理解 Python 就能使用它。你需要理解的唯一依赖项是*Yet Another Markup Language
    (YAML)*，它是一种数据序列化语言，Ansible 用它来描述复杂的数据结构和任务。通过查看一些基本示例，它很容易上手，稍后我在讲解 Ansible 的
    playbook 和任务时会提供一些示例。这里有两个重要的要点需要注意：YAML 使用缩进来组织元素，像 Python 一样，并且它是区分大小写的。你可以在[https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html](https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html)上阅读更多关于
    YAML 的内容。
- en: Ansible applies its configuration changes over *Secure Shell (SSH)*, which is
    a secure protocol to communicate with remote hosts. The most common use of SSH
    is to gain access to the command line on a remote host, but users can also deploy
    it to forward network traffic and copy files securely. By using SSH, Ansible can
    provision a single host or a group of hosts over the network.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 通过*安全外壳（SSH）*应用配置更改，SSH 是一种与远程主机通信的安全协议。SSH 最常见的用途是获得远程主机上的命令行访问权限，但用户也可以使用它转发网络流量并安全地复制文件。通过使用
    SSH，Ansible 可以通过网络对单个主机或一组主机进行配置。
- en: Installation
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: Now, you should install Ansible so Vagrant can use it for provisioning. Head
    over to Ansible’s documentation at [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html).
    Locate the documentation for your specific OS and follow the steps to install
    Ansible. For example, I am using macOS, and the preferred way to install Ansible
    on macOS is to use *pip*, which is a Python package manager used to install applications
    and dependencies. I found this information under the Installing Ansible on macOS
    link, which eventually directed me to install Ansible using pip under the Installing
    Ansible with pip link. Since Ansible is written in Python, using pip is an effective
    way to install the latest version.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该安装 Ansible，以便 Vagrant 可以用它进行配置。访问 Ansible 的文档 [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html)。查找适合你操作系统的文档，并按照步骤安装
    Ansible。例如，我使用的是 macOS，安装 Ansible 的推荐方式是使用 *pip*，这是一个用于安装应用程序和依赖项的 Python 包管理器。我是在安装
    Ansible 的 macOS 链接下找到这些信息的，最终将我引导到通过安装 pip 安装 Ansible 的链接。由于 Ansible 是用 Python
    编写的，使用 pip 是安装最新版本的有效方法。
- en: Key Ansible Concepts
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible 关键概念
- en: 'Now that you’ve installed Ansible, you’ll need to know these terms and concepts
    to have it up and running quickly:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 Ansible，你需要了解这些术语和概念，以便快速让它运行：
- en: Playbook A *playbook* is a collection of ordered tasks or roles that you can
    use to configure hosts.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Playbook A *playbook* 是一系列有序的任务或角色，您可以使用它来配置主机。
- en: Control node A *control node* is any Unix machine that has Ansible installed
    on it. You will run your playbooks or commands from a control node, and you can
    have as many control nodes as you like.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制节点 A *控制节点* 是任何安装了 Ansible 的 Unix 机器。你将从控制节点运行你的 playbook 或命令，并且可以有任意数量的控制节点。
- en: Inventory An *inventory* is a file that contains a list of hosts or groups of
    hosts that Ansible can communicate with.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 库存 A *库存* 是一个文件，包含 Ansible 可以通信的主机或主机组的列表。
- en: Module A *module* encapsulates the details of how to perform certain actions
    across operating systems, such as how to install a software package. Ansible comes
    preloaded with many modules.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块 A *模块* 封装了如何在不同操作系统中执行某些操作的细节，比如如何安装软件包。Ansible 自带了许多模块。
- en: Task A *task* is a command or action (such as installing software or adding
    a user) that is executed on the managed host.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务 A *任务* 是在管理主机上执行的命令或操作（例如安装软件或添加用户）。
- en: Role A *role* is a group of tasks and variables that is organized in a standardized
    directory structure, defines a particular purpose for the server, and can be shared
    with other users for a common goal. A typical role could configure a host to be
    a database server. This role would include all the files and instructions necessary
    to install the database application, configure user permissions, and apply seed
    data.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 角色 A *角色* 是一组任务和变量，组织在一个标准化的目录结构中，定义了服务器的特定用途，并且可以与其他用户共享以达成共同目标。一个典型的角色可能会配置主机为数据库服务器。这个角色将包括安装数据库应用程序、配置用户权限和应用种子数据所需的所有文件和说明。
- en: Ansible Playbook
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible Playbook
- en: To configure the VM, you’ll use the Ansible playbook I have provided. This file,
    named *site.yml*, is located in the *ansible/* directory you cloned from the Introduction.
    Think of the playbook as an instruction manual on how to assemble a host. Now,
    take a look at the playbook file itself. Navigate to the *ansible/* directory
    and open the *site.yml* file in your editor.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置虚拟机，你将使用我提供的 Ansible playbook。这个名为 *site.yml* 的文件位于你从介绍中克隆的 *ansible/* 目录下。把
    playbook 当作一本关于如何组装主机的说明书。现在，看看 playbook 文件本身。导航到 *ansible/* 目录，并在你的编辑器中打开 *site.yml*
    文件。
- en: 'You can break up playbook files into different sections. The first section
    functions as the header, which is a good place to set global variables to use
    throughout the playbook. In the header, you’ll set things like the `name` of the
    play, the `hosts`, the `remote_user`, and the privileged escalation method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 playbook 文件拆分为不同的部分。第一部分充当头部，这里是设置全局变量的好地方，可以在整个 playbook 中使用。在头部，你将设置
    `name`（play 名称）、`hosts`、`remote_user` 和特权升级方法等内容：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These settings are mostly boilerplate, but let’s focus on a few points. Be sure
    to give each play a `name` so it’s easier to find and debug if things go wrong.
    The `name` of the play in the example above is set to `Provision VM`. You could
    have multiple plays in a single playbook, but for this example, you’ll need only
    one. Next, the `hosts` option is set to `all` to match any Vagrant-built VMs because
    Vagrant will autogenerate the Ansible inventory file dynamically. Some operations
    on a host will require elevated privileges, so Ansible allows you to *become*,
    or activate privilege escalation for, a specific user. Since you’re using Ubuntu,
    the default user with escalated privileges is `ubuntu`. You also can set the different
    methods to use for authorization, and you’ll use `sudo` for this example.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置大多是样板代码，但我们先集中讨论一些要点。务必为每个剧本（play）指定一个`name`，这样如果出现问题，能更容易定位和调试。上述示例中的剧本（play）的`name`被设置为`Provision
    VM`。你可以在单个剧本中包含多个剧本，但对于此示例，只需要一个。接下来，`hosts`选项设置为`all`，以匹配任何由 Vagrant 构建的虚拟机，因为
    Vagrant 会动态生成 Ansible 清单文件。一些主机上的操作可能需要提升的权限，因此 Ansible 允许你为特定用户*提升*权限或激活权限提升。由于你使用的是
    Ubuntu，默认的具有提升权限的用户是`ubuntu`。你还可以设置不同的授权方法，在此示例中，你将使用`sudo`。
- en: 'The next section is where you’ll list all the tasks for the host. This is where
    the actual work is being done. If you think of the playbook as an instruction
    manual, the *tasks* are just the separate steps in that manual. The `tasks` section
    looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分是列出主机的所有任务。在这里，实际的工作将被执行。如果你把剧本当作一本说明书，那么*任务*就像说明书中的每个独立步骤。`tasks`部分的格式如下：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The built-in Ansible `import_tasks` function is loading tasks from two separate
    files: *pam_pwquality.yml* and *user_and_group.yml*. The `import_tasks` function
    allows you to organize the tasks better and avoid a large, cluttered playbook.
    Each of these files can have one or many individual tasks.I’ll discuss tasks and
    other parts of the playbook in future chapters. For now, note that these tasks
    are commented out with the hash mark (`#`) symbol and will not change anything
    until you uncomment them.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 Ansible `import_tasks`函数从两个独立的文件中加载任务：*pam_pwquality.yml* 和 *user_and_group.yml*。`import_tasks`函数可以更好地组织任务，避免产生一个庞大杂乱的剧本。这些文件每个可以包含一个或多个独立的任务。我将在未来的章节中讨论任务和剧本的其他部分。现在，请注意，这些任务已经用井号（`#`）符号注释掉，直到取消注释它们之前，它们不会改变任何东西。
- en: Basic Ansible Commands
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本的 Ansible 命令
- en: 'The Ansible application comes with multiple commands, but you’ll mostly use
    these two: `ansible` and `ansible-playbook`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 应用程序带有多个命令，但你通常只会使用这两个命令：`ansible` 和 `ansible-playbook`。
- en: 'You’ll primarily use the `ansible` command for running ad hoc or one-time commands
    that you execute from the command line. For example, to instruct a group of web
    servers to restart Nginx, you would enter the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你主要使用`ansible`命令来运行临时或一次性命令，这些命令通常是从命令行执行的。例如，要指示一组 web 服务器重启 Nginx，你可以输入以下命令：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This instructs Ansible to restart Nginx on a group of hosts called *webservers*.
    Note that the mapping for the *webservers* group would be located in the inventory
    file. The Ansible `service` module interacts with the OS to perform the restart.
    The `service` module requires some extra arguments, and they are passed with the
    `-a` flag. In this case, both the name of the `service` (`nginx`) and the fact
    that it should restart are indicated. You need *root* privileges to restart a
    `service`, so you’ll use the `--become` flag to ask for privilege escalation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这条指令让 Ansible 在一个名为*webservers*的主机组上重启 Nginx。请注意，*webservers*组的映射将在清单文件中找到。Ansible
    的`service`模块与操作系统交互以执行重启操作。`service`模块需要一些额外的参数，这些参数通过`-a`标志传递。在此情况下，既指定了`service`的名称（`nginx`），也指定了它应该重启。你需要*root*权限才能重启`service`，因此你将使用`--become`标志来请求提升权限。
- en: 'The `ansible-playbook` command runs playbooks. In fact, this is the command
    Vagrant will use during the provisioning phase. To instruct `ansible-playbook`
    to execute the *aws-cloudwatch.yml* playbook against a group of hosts called *dockerhosts*,
    you would enter the following command in your terminal:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-playbook`命令用于运行剧本。事实上，这是 Vagrant 在配置阶段使用的命令。为了让`ansible-playbook`命令对名为*dockerhosts*的主机组执行*aws-cloudwatch.yml*剧本，你需要在终端中输入以下命令：'
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `dockerhosts` need to be listed in the inventory file for the command to
    succeed. Note that if you do not provide a subset of hosts with the `-l` flag,
    Ansible will assume you want to run the playbook on all the hosts found in your
    inventory file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`dockerhosts`需要在库存文件中列出，才能使命令成功运行。请注意，如果你没有使用`-l`标志提供主机子集，Ansible会默认认为你希望在库存文件中的所有主机上运行这个playbook。'
- en: Creating an Ubuntu VM
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Ubuntu虚拟机
- en: 'Up to this point, we’ve been discussing concepts and configuration files. Now,
    let’s put that knowledge to use and stand up and provision some infrastructure.
    To create the Ubuntu VM, make sure you are in the same directory as the Vagrantfile.
    This is because Vagrant needs to reference the configuration file while creating
    the VM. You’ll use the `vagrant up` command to create the VM, but before running
    the command, you should know that it produces a lot of output and may take a few
    minutes. Therefore, I’m focusing on only the relevant parts here. Enter the following
    command in your terminal:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在讨论概念和配置文件。现在，让我们将这些知识付诸实践，站起来并配置一些基础设施。要创建Ubuntu虚拟机，请确保你在与Vagrantfile相同的目录中。这是因为Vagrant在创建虚拟机时需要引用配置文件。你将使用`vagrant
    up`命令来创建虚拟机，但在运行命令之前，你应该知道它会产生大量的输出并且可能需要几分钟时间。因此，我在这里只关注相关部分。在终端中输入以下命令：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first section of the output to look at is Vagrant downloading the base
    image:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第一部分是Vagrant下载基础镜像：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, Vagrant is downloading the `ubuntu` image, as expected. The image download
    may take a few minutes, depending on your internet connection.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Vagrant正在下载`ubuntu`镜像，正如预期的那样。镜像的下载可能需要几分钟时间，具体取决于你的网络连接。
- en: Next, Vagrant will configure a public/private key pair to provide SSH access
    to the VM. (We’ll discuss key pairs in more detail in Chapter 3.)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Vagrant将配置一个公钥/私钥对，以提供SSH访问虚拟机的权限。（我们将在第3章详细讨论密钥对。）
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Vagrant stores the private key locally on your host (*.vagrant/*) and then adds
    the public key to the *~/.ssh/authorized_keys* file on the VM. Without these keys,
    you would not be able to connect to the VM over SSH.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant会将私钥保存在本地主机(*.vagrant/*)中，然后将公钥添加到虚拟机的*~/.ssh/authorized_keys*文件中。如果没有这些密钥，你将无法通过SSH连接到虚拟机。
- en: 'By default, Vagrant and VirtualBox will mount a shared directory inside the
    VM. This shared directory will give you access to a host directory from within
    the VM:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Vagrant和VirtualBox会在虚拟机内挂载一个共享目录。这个共享目录将允许你从虚拟机内访问主机的目录：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see that my local host directory *Users/bradleyd/devops_for_the_desperate/*
    is mounted at the *vagrant/* directory inside the VM. Your directory will be different.
    You can use this shared directory for transferring files like source code between
    host and VM. If you don’t need the shared directory, Vagrant provides a configuration
    option to turn it off. See Vagrant’s documentation for further details.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我的本地主机目录*Users/bradleyd/devops_for_the_desperate/*已挂载在虚拟机内部的*vagrant/*目录下。你的目录会有所不同。你可以使用这个共享目录在主机和虚拟机之间传输文件，比如源代码。如果你不需要共享目录，Vagrant提供了一个配置选项来关闭它。详情请参阅Vagrant的文档。
- en: 'Finally, the following shows the Ansible `provisioner` output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是Ansible `provisioner`的输出：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This shows that the Ansible `provisioner` is run using the `ansible-playbook`
    1 command. Ansible logs each `TASK` 2 and whether anything was changed on the
    host 3. In this case, all the `tasks` are commented out, so nothing was `changed`
    4 on the VM. This output is the first place to look when gauging success or failure.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明Ansible `provisioner`正在使用`ansible-playbook` 1命令运行。Ansible会记录每个`TASK` 2及其是否在主机
    3 上有所更改。在这种情况下，所有`tasks`都被注释掉了，因此虚拟机上没有任何`changed` 4。这是判断成功与否时需要查看的第一个输出。
- en: 'Let’s perform a sanity check and see whether the VM is actually running. Enter
    the following command in your terminal to show the VM’s current status:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个简单的检查，看看虚拟机是否实际在运行。在终端中输入以下命令，查看虚拟机的当前状态：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, you can see that the status of the VM is `running`. This means you created
    the VM, and it should be accessible over SSH.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到虚拟机的状态是`running`。这意味着你已经创建了虚拟机，并且它应该可以通过SSH访问。
- en: 'If your output looks different, make sure there are no errors from the `vagrant
    up` command before continuing. If you need more information, add the `debug` flag
    to the `up` command to make Vagrant increase the output verbosity: `vagrant up
    --debug`. You’ll need to have a successful provision at this point, or it will
    be difficult to follow along with the remaining chapters.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的输出与预期不同，请确保在继续之前，`vagrant up` 命令没有错误。如果需要更多信息，请向 `up` 命令添加 `debug` 标志，以增加
    Vagrant 输出的详细程度：`vagrant up --debug`。此时你需要确保已成功完成配置，否则在接下来的章节中会很难跟上。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you installed Vagrant and Ansible to create and configure a
    VM. You learned how to configure Vagrant using its Vagrantfile, and you gained
    basic knowledge of how to provision a VM using Ansible playbooks and tasks. Now
    that you understand these basic concepts, you should be able to create and provision
    any type of infrastructure, not just VMs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你安装了 Vagrant 和 Ansible 来创建和配置虚拟机（VM）。你学习了如何通过 Vagrantfile 配置 Vagrant，并掌握了使用
    Ansible playbooks 和任务来配置虚拟机的基本知识。现在，你已经理解了这些基本概念，应该能够创建并配置任何类型的基础设施，而不仅仅是虚拟机。
- en: In the next chapter, you’ll use two provided Ansible tasks to create a user
    and group. You’ll need to have a foundation in user and group management when
    configuring a host.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用提供的两个 Ansible 任务来创建一个用户和组。在配置主机时，你需要具备用户和组管理的基础知识。
