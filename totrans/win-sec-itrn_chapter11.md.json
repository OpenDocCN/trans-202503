["```\nPS> **$cap_name = Get-WindowsCapability -Online |**\n**Where-Object Name -Match 'Rsat.ActiveDirectory.DS-LDS.Tools'**\nPS> **Add-WindowsCapability -Name $cap_name.Name -Online** \n```", "```\n❶ PS> **$forest = Get-ADForest**\n❷ PS> **$forest.Domains**\nmineral.local\nsales.mineral.local\nengineering.mineral.local\n\n❸ PS> **$forest.GlobalCatalogs**\nPRIMARYDC.mineral.local\nSALESDC.sales.mineral.local\nENGDC.engineers.mineral.local\n\n❹ PS> **Get-ADDomain | Format-List PDCEmulator, DomainSID, DNSRoot, NetBIOSName**\nPDCEmulator : PRIMARYDC.mineral.local\nDomainSID   : S-1-5-21-1195776225-522706947-2538775957\nDNSRoot     : mineral.local\nNetBIOSName : MINERAL\n\n❺ PS> **Get-ADDomainController | Select-Object Name, Domain**\nName      Domain\n----      ------\nPRIMARYDC mineral.local\n\n❻ PS> **Get-ADTrust -Filter * | Select-Object Target, Direction, TrustType**\nTarget                     Direction       TrustType\n------                     ---------       ---------\nengineering.mineral.local  BiDirectional   Uplevel\nsales.mineral.local        BiDirectional   Uplevel \n```", "```\nPS> **Get-ADUser -Filter * | Select-Object SamAccountName, Enabled, SID**\nSamAccountName Enabled SID\n-------------- ------- ---\nAdministrator     True S-1-5-21-1195776225-522706947-2538775957-500\nGuest            False S-1-5-21-1195776225-522706947-2538775957-501\nkrbtgt           False S-1-5-21-1195776225-522706947-2538775957-502\nbob               True S-1-5-21-1195776225-522706947-2538775957-1108\nalice            True S-1-5-21-1195776225-522706947-2538775957-1110 \n```", "```\nPS> **Get-ADGroup -Filter * | Select-Object SamAccountName, SID, GroupScope**\nSamAccountName    SID                                           GroupScope\n--------------    ---                                           ----------\nAdministrators    S-1-5-32-544                                  DomainLocal\nUsers             S-1-5-32-545                                  DomainLocal\nGuests            S-1-5-32-546                                  DomainLocal\n`--snip--`\nEnterprise Admins S-1-5-21-1195776225-522706947-2538775957-519  Universal\nCert Publishers   S-1-5-21-1195776225-522706947-2538775957-517  DomainLocal\nDomain Admins     S-1-5-21-1195776225-522706947-2538775957-512  Global\nDomain Users      S-1-5-21-1195776225-522706947-2538775957-513  Global\n`--snip--` \n```", "```\nPS> **Get-ADGroupMember -Identity Administrators | Select Name, objectClass**\nName              objectClass\n----              -----------\nDomain Admins     group\nEnterprise Admins group\nAdministrator     user\n\nPS> **Get-LocalGroupMember -Name Administrators**\nObjectClass Name                   PrincipalSource\n----------- ----                   ---------------\nGroup       MINERAL\\Domain Admins  ActiveDirectory\nUser        MINERAL\\alice          ActiveDirectory\nUser        GRAPHITE\\admin         Local\nUser        GRAPHITE\\Administrator Local \n```", "```\nPS> **Get-ADComputer -Filter * | Select-Object SamAccountName, Enabled, SID**\nSamAccountName Enabled SID\n-------------- ------- ---\nPRIMARYDC$        True S-1-5-21-1195776225-522706947-2538775957-1000\nGRAPHITE$         True S-1-5-21-1195776225-522706947-2538775957-1104\nCINNABAR$         True S-1-5-21-1195776225-522706947-2538775957-1105\nTOPAZ$            True S-1-5-21-1195776225-522706947-2538775957-1106\nPYRITE$           True S-1-5-21-1195776225-522706947-2538775957-1109\nHEMATITE$         True S-1-5-21-1195776225-522706947-2538775957-1113 \n```", "```\nPS> **Get-LsaPrivateData '$MACHINE.ACC' | Out-HexDump -ShowAll**\n          00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 00 00 00 01 5F 5D 25 70 36 13 17 41 92 57 5F 50  - ...._]%p6..A.W_P\n00000010: 89 EA AA 35 03 00 00 00 00 00 00 00 94 B1 CD 81  - ...5............\n00000020: 98 86 67 2A 31 17 1B E1 2F 5D 78 48 7B ED 0C 95  - ..g*1.../]xH{...\n`--snip--` \n```", "```\nPS> **Get-ADRootDSE | Format-List '*NamingContext'**\nconfigurationNamingContext : CN=Configuration,DC=mineral,DC=local\ndefaultNamingContext       : DC=mineral,DC=local\nrootDomainNamingContext    : DC=mineral,DC=local\nschemaNamingContext        : CN=Schema,CN=Configuration,DC=mineral,DC=local \n```", "```\n❶ PS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\n❷ PS> **Get-ADObject -SearchBase $root_dn -SearchScope OneLevel -Filter * |**\n**Select-Object DistinguishedName, ObjectClass**\nDistinguishedName                                ObjectClass\n-----------------                                -----------\n❸ CN=Builtin,DC=mineral,DC=local                   builtinDomain\nCN=Computers,DC=mineral,DC=local                 container\nOU=Domain Controllers,DC=mineral,DC=local        organizationalUnit\nCN=ForeignSecurityPrincipals,DC=mineral,DC=local container\n`--snip--`\n\n❹ PS> **Get-ADObject -Identity \"CN=Builtin,$root_dn\" | Format-List**\nDistinguishedName : CN=Builtin,DC=mineral,DC=local\nName              : Builtin\nObjectClass       : builtinDomain\nObjectGUID        : 878e2263-2496-4a56-9c6e-7b4db24a6bed\n\n❺ PS> **Get-ADObject -Identity \"CN=Builtin,$root_dn\" -Properties * | Format-List**\nCanonicalName        : mineral.local/Builtin\nCN                   : Builtin\n`--snip--` \n```", "```\nPS> **Get-ADObject -Identity 'CN=Users,DC=sales,DC=mineral,DC=local'**\nGet-ADObject : Cannot find an object with identity: 'CN=Users,DC=sales,\nDC=mineral,DC=local' under: 'DC=mineral,DC=local'. \n```", "```\nPS> **$dn = 'CN=Users,DC=sales,DC=mineral,DC=local****'**\n❶ PS> **$obj_sales = Get-ADObject -Identity $dn -Server SALES -Properties ***\nPS> **$obj_sales.DistinguishedName**\nCN=Users,DC=sales,DC=mineral,DC=local\n\n❷ PS> **$obj_gc = Get-ADObject -Identity $dn -Server :3268 -Properties ***\nPS> **$obj_gc.DistinguishedName**\nCN=Users,DC=sales,DC=mineral,DC=local\n\n❸ PS> **($obj_sales | Get-Member -MemberType Property | Measure-Object).Count**\n28\nPS> **($obj_gc | Get-Member -MemberType Property | Measure-Object).Count**\n25 \n```", "```\n❶ PS> **$schema_dn = (Get-ADRootDSE).schemaNamingContext**\nPS> **Get-ADObject -SearchBase $schema_dn -SearchScope OneLevel -Filter *** **|**\n**Sort-Object Name | Select-Object Name, ObjectClass**\nName                    ObjectClass\n----                    -----------\n❷ account                 classSchema\nAccount-Expires         attributeSchema\nAccount-Name-History    attributeSchema\n`--snip--`\n\n❸ PS> **Get-ADObject -SearchBase $schema_dn -Filter {**\n **ObjectClass -eq \"classSchema\"**\n**} -Properties * | Sort-Object Name |**\n**Format-List Name, {[guid]$_.schemaIDGUID}, mayContain,**\n**mustContain, systemMayContain, systemMustContain, auxiliaryClass,**\n**systemAuxiliaryClass,** **SubClassOf**\nName                  : account\n❹ [guid]$_.schemaIDGUID : 2628a46a-a6ad-4ae0-b854-2b12d9fe6f9e\n❺ mayContain            : {uid, host, ou, o...}\nmustContain           : {}\nsystemMayContain      : {}\nsystemMustContain     : {}\n❻ auxiliaryClass        : {}\nsystemAuxiliaryClass  : {}\n❼ SubClassOf            : top\n`--snip--`\n\n❽ PS> **Get-ADObject -SearchBase $schema_dn -Filter {**\n    **lDAPDisplayName -eq \"uid\"**\n**} -Properties * | Format-List adminDescription, {[guid]$_.schemaIDGUID},**\n**attributeSyntax, oMSyntax, oMObjectClass**\nadminDescription      : A user ID.\n[guid]$_.schemaIDGUID : 0bb0fca0-1e89-429f-901a-1413894d9f59\nattributeSyntax       : 2.5.5.12\noMSyntax              : 64\noMObjectClass         : \n```", "```\nPS> **Get-DsSchemaClass | Sort-Object Name**\nName              SchemaId                             Attributes\n----              --------                             ----------\naccount           2628a46a-a6ad-4ae0-b854-2b12d9fe6f9e 7\naCSPolicy         7f561288-5301-11d1-a9c5-0000f80367c1 17\naCSResourceLimits 2e899b04-2834-11d3-91d4-0000f87a57d4 5\naCSSubnet         7f561289-5301-11d1-a9c5-0000f80367c1 26\n`--snip--` \n```", "```\nPS> **$cls = Get-DsSchemaClass -Name \"account\"**\nPS> **$cls | Format-List**\nName        : account\nCommonName  : account\nDescription : The account object class is used to define entries...\nSchemaId    : 2628a46a-a6ad-4ae0-b854-2b12d9fe6f9e\nSubClassOf  : top\nCategory    : Structural\nAttributes  : {uid, host, ou, o...}\n\n❶ PS> **$cls.Attributes**\nName        Required System\n----        -------- ------\nuid            False  False\nhost           False  False\nou             False  False\no              False  False\nl              False  False\nseeAlso        False  False\ndescription    False  False\n\n❷ PS> **$cls.Attributes | Get-DsSchemaAttribute**\nName        SchemaId                             AttributeType\n----        --------                             -------------\nuid         0bb0fca0-1e89-429f-901a-1413894d9f59 String(Unicode)\nhost        6043df71-fa48-46cf-ab7c-cbd54644b22d String(Unicode)\nou          bf9679f0-0de6-11d0-a285-00aa003049e2 String(Unicode)\no           bf9679ef-0de6-11d0-a285-00aa003049e2 String(Unicode)\nl           bf9679a2-0de6-11d0-a285-00aa003049e2 String(Unicode)\nseeAlso     bf967a31-0de6-11d0-a285-00aa003049e2 Object(DS-DN)\ndescription bf967950-0de6-11d0-a285-00aa003049e2 String(Unicode)\n\n❸ PS> **Get-DsSchemaClass -Parent $cls -Recurse**\nName SchemaId                             Attributes\n---- --------                             ----------\ntop  bf967ab7-0de6-11d0-a285-00aa003049e2 125 \n```", "```\nPS> **(Get-DsSchemaClass top).Attributes |**\n**Where-Object Name -Match nTSecurityDescriptor**\nName                 Required System\n----                 -------- ------\nnTSecurityDescriptor     True   True \n```", "```\nPS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\n❶ PS> **$obj = Get-ADObject -Identity $root_dn -Properties \"nTSecurityDescriptor\"**\nPS> **$obj.nTSecurityDescriptor.Access**\nActiveDirectoryRights : ReadProperty\nInheritanceType       : None\nObjectType            : 00000000-0000-0000-0000-000000000000\nInheritedObjectType   : 00000000-0000-0000-0000-000000000000\nObjectFlags           : None\nAccessControlType     : Allow\nIdentityReference     : Everyone\nIsInherited           : False\nInheritanceFlags      : None\nPropagationFlags      : None\n`--snip--`\n\n❷ PS> **Format-Win32SecurityDescriptor -Name $root_dn -Type Ds**\nPath: DC=mineral,DC=local\nType: DirectoryService\nControl: DaclPresent, DaclAutoInherited\n\n<Owner>\n - Name  : BUILTIN\\Administrators\n - Sid   : S-1-5-32-544\n\n<Group>\n - Name  : BUILTIN\\Administrators\n - Sid   : S-1-5-32-544\n\n<DACL> (Auto Inherited)\n - Type  : AllowedObject\n - Name  : BUILTIN\\Pre-Windows 2000 Compatible Access\n - SID   : S-1-5-32-554\n - Mask  : 0x00000010\n - Access: ReadProp\n - Flags : ContainerInherit, InheritOnly\n - ObjectType: 4c164200-20c0-11d0-a768-00aa006e0529\n - InheritedObjectType: 4828cc14-1437-45bc-9b07-ad6f015e5f28\n`--snip--` \n```", "```\n❶ PS> **$sd = New-NtSecurityDescriptor -Type DirectoryService**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid BuiltinAdministrators**\n**-Access All**\nPS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\n❷ PS> **$obj = New-ADObject -Type \"container\" -Name \"SDDEMO\" -Path $root_dn**\n**-OtherAttributes @{nTSecurityDescriptor=$sd.ToByteArray()} -PassThru**\nPS> **Format-Win32SecurityDescriptor -Name $obj.DistinguishedName -Type Ds**\nPath: cn=SDDEMO,DC=mineral,DC=local\nType: DirectoryService\nControl: DaclPresent, DaclAutoInherited\n\n<Owner>\n - Name  : MINERAL\\Domain Admins\n - Sid   : S-1-5-21-146569114-2614008856-3334332795-512\n\n<Group>\n - Name  : MINERAL\\Domain Admins\n - Sid   : S-1-5-21-146569114-2614008856-3334332795-512\n\n<DACL> (Auto Inherited)\n ❸ - Type  : Allowed\n - Name  : BUILTIN\\Administrators\n - SID   : S-1-5-32-544\n - Mask  : 0x000F01FF\n - Access: Full Access\n - Flags : None\n\n ❹ - Type  : AllowedObject\n - Name  : BUILTIN\\Pre-Windows 2000 Compatible Access\n - SID   : S-1-5-32-554\n - Mask  : 0x00000010\n - Access: ReadProp\n - Flags : ContainerInherit, InheritOnly, Inherited\n - ObjectType: 4c164200-20c0-11d0-a768-00aa006e0529\n - InheritedObjectType: 4828cc14-1437-45bc-9b07-ad6f015e5f28\n`--snip--` \n```", "```\nPS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\n❶ PS> **$cls = Get-DsSchemaClass -Name \"container\"**\n❷ PS> **$parent = Get-Win32SecurityDescriptor $root_dn -Type Ds**\n❸ PS> **$sd = New-NtSecurityDescriptor -Parent $parent -EffectiveToken**\n**-ObjectType $cls.SchemaId -Creator $cls.DefaultSecurityDescriptor**\n**-Type DirectoryService -AutoInherit DaclAutoInherit, SaclAutoInherit**\n**-Container**\nPS> **Format-NtSecurityDescriptor $sd -Summary**\n<Owner> : MINERAL\\alice\n<Group> : MINERAL\\Domain Users\n<DACL> (Auto Inherited)\nMINERAL\\Domain Admins: (Allowed)(None)(Full Access)\nNT AUTHORITY\\SYSTEM: (Allowed)(None)(Full Access)\n`--snip--`\n\n❹ PS> **$std_sd = Edit-NtSecurityDescriptor $sd -Standardize -PassThru**\n❺ PS> **Compare-NtSecurityDescriptor $std_sd $sd -Report**\nWARNING: DACL ACE 1 mismatch.\nWARNING: Left : Type Allowed - Flags None - Mask 00020094 - Sid S-1-5-11\nWARNING: Right: Type Allowed - Flags None - Mask 000F01FF - Sid S-1-5-18\nWARNING: DACL ACE 2 mismatch.\nWARNING: Left : Type Allowed - Flags None - Mask 000F01FF - Sid S-1-5-18\nWARNING: Right: Type Allowed - Flags None - Mask 00020094 - Sid S-1-5-11\nFalse \n```", "```\nPS> **(Get-DsHeuristics).DontStandardizeSDs**\nFalse \n```", "```\nPS> **$dn = \"CN=SomeObject,DC=mineral,DC=local\"**\nPS> **$sd = New-NtSecurityDescriptor \"D:(A;;GA;;;WD)\"**\nPS> **Set-Win32SecurityDescriptor $dn -Type Ds -SecurityDescriptor $sd**\n**-SecurityInformation Dacl** \n```", "```\nPS> **Get-DsSDRightsEffective -DistinguishedName $dn**\nOwner, Group, Dacl \n```", "```\nPS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\nPS> **$user_dn =** **\"CN=Users,$root_dn\"**\n❶ PS> **$curr_sd = Get-Win32SecurityDescriptor \"CN=Users,$root_dn\" -Type Ds**\nPS> **Format-NtSecurityDescriptor $curr_sd -Summary**\n<Owner> : DOMAIN\\Domain Admins\n<Group> : DOMAIN\\Domain Admins\n<DACL> (Auto Inherited)\nNT AUTHORITY\\SYSTEM: (Allowed)(None)(Full Access)\n`--snip--`\n\n❷ PS> **$new_sd = New-NtSecurityDescriptor \"D:(A;;GA;;;WD)\"**\n❸ PS> **Edit-NtSecurityDescriptor -SecurityDescriptor $curr_sd**\n**-NewSecurityDescriptor $new_sd -SecurityInformation Dacl**\n**-Flags DaclAutoInherit, SaclAutoInherit**\n\nPS> **$cls = Get-DsObjectSchemaClass $user_dn**\nPS> **$parent = Get-Win32SecurityDescriptor $root_dn -Type Ds**\n❹ PS> **$sd = New-NtSecurityDescriptor -Parent $parent**\n**-ObjectType $cls.SchemaId -Creator $curr_sd -Container**\n**-Type DirectoryService -AutoInherit DaclAutoInherit, SaclAutoInherit,**\n**AvoidOwnerCheck, AvoidOwnerRestriction, AvoidPrivilegeCheck**\n**-EffectiveToken**\n\n❺ PS> **Edit-NtSecurityDescriptor $sd -Standardize**\nPS> **Format-NtSecurityDescriptor $sd -Summary**\n<Owner> : DOMAIN\\Domain Admins\n<Group> : DOMAIN\\Domain Admins\n<DACL> (Auto Inherited)\nEveryone: (Allowed)(None)(Full Access)\n`--snip--` \n```", "```\nPS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\nPS> **$user_dn = \"CN=Users,$root_dn\"**\nPS> **$cls = Get-DsObjectSchemaClass -DistinguishedName $user_dn**\nPS> **Search-Win32SecurityDescriptor -Name $user_dn -Type Ds**\n**-ObjectType $cls.SchemaId**\nName                Depth User                             Access\n----                ----- ----                             ------\n                    0     NT AUTHORITY\\SYSTEM              GenericAll\n                    0     MINERAL\\Domain Admins            CreateChild|...\n                    0     BUILTIN\\Account Operators        CreateChild|...\n                    0     BUILTIN\\Account Operators        CreateChild|...\n                    0     BUILTIN\\Print Operators          CreateChild|...\n                    0     NT AUTHORITY\\Authenticated Users GenericRead\n                    0     BUILTIN\\Account Operators        CreateChild|...\nDC=mineral,DC=local 1     BUILTIN\\Pre-Windows 2000...      ReadProp\nDC=mineral,DC=local 1     BUILTIN\\Pre-Windows 2000...      ReadProp\nDC=mineral,DC=local 1     BUILTIN\\Pre-Windows 2000...      ReadProp \n```", "```\nPS> **$sd = New-NtSecurityDescriptor -Type DirectoryService -Owner \"SY\"**\n**-Group \"SY\"**\n❶ PS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type Allowed**\n**-Access List**\n❷ PS> **$user = Get-DsSchemaClass -Name \"user\"**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type AllowedObject**\n**-Access CreateChild -ObjectType $user.SchemaId**\nPS> **Format-NtSecurityDescriptor $sd -Summary** **-SecurityInformation Dacl**\n**-ResolveObjectType**\n<DACL>\nEveryone: (Allowed)(None)(List)\nEveryone: (AllowedObject)(None)(CreateChild)(OBJ:User)\n\n❸ PS> **Get-NtGrantedAccess $sd -ObjectType $user**\nCreateChild, List\n\n❹ PS> **$cont = Get-DsSchemaClass -Name \"container\"**\nPS> **Get-NtGrantedAccess $sd -ObjectType $cont**\nList \n```", "```\nPS> **Get-DsSchemaClass \"user\" -Inferior**\nName                          SchemaId                             Attributes\n----                          --------                             ----------\nms-net-ieee-80211-GroupPolicy 1cb81863-b822-4379-9ea2-5ff7bdc6386d 3\nnTFRSSubscriptions            2a132587-9373-11d1-aebc-0000f80367c1 3\nclassStore                    bf967a84-0de6-11d0-a285-00aa003049e2 4\nms-net-ieee-8023-GroupPolicy  99a03a6a-ab19-4446-9350-0cb878ed2d9b 3 \n```", "```\nPS> **(Get-DsHeuristics).DoListObject** \n```", "```\n❶ PS> **$sd = New-NtSecurityDescriptor -Type DirectoryService -Owner \"DA\"**\n**-Group \"DA\"**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type Allowed**\n**-Access ReadProp**\n❷ PS> **$attr = Get-DsSchemaAttribute -Name \"accountExpires\"**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type AllowedObject**\n**-Access WriteProp -ObjectType $attr.SchemaId**\n❸ PS> **Get-NtGrantedAccess $sd -ObjectType $attr**\nReadProp, WriteProp\n\n❹ PS> **$pwd = Get-DsSchemaAttribute -Name \"pwdLastSet\"**\nPS> **Get-NtGrantedAccess $sd -ObjectType $pwd**\nReadProp \n```", "```\n❶ PS> **$user = Get-DsSchemaClass -Name \"user\"**\nPS> **$obj_tree = New-ObjectTypeTree $user**\nPS> **Add-ObjectTypeTree -Tree $obj_tree $attr**\nPS> **Add-ObjectTypeTree -Tree $obj_tree $pwd**\n\n❷ PS> **Get-NtGrantedAccess $sd -ObjectType $obj_tree -ResultList -PassResult |**\n**Format-Table Status, SpecificGrantedAccess, Name**\n        Status SpecificGrantedAccess Name\n        ------ --------------------- ----\nSTATUS_SUCCESS              ReadProp user\nSTATUS_SUCCESS   ReadProp, WriteProp accountExpires\nSTATUS_SUCCESS              ReadProp pwdLastSet\n\n❸ PS> **Get-NtGrantedAccess $sd -ObjectType $obj_tree -ResultList -PassResult**\n**-Access WriteProp | Format-Table Status, SpecificGrantedAccess, Name**\n              Status SpecificGrantedAccess Name\n              ------ --------------------- ----\nSTATUS_ACCESS_DENIED                  None user\n      STATUS_SUCCESS             WriteProp accountExpires\nSTATUS_ACCESS_DENIED                  None pwdLastSet \n```", "```\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type AllowedObject**\n**-Access WriteProp -ObjectType $user.SchemaId**\nPS> **Get-NtGrantedAccess $sd -ObjectType $obj_tree -ResultList -PassResult |**\n**Format-Table Status, SpecificGrantedAccess, Name**\n        Status SpecificGrantedAccess Name\n        ------ --------------------- ----\nSTATUS_SUCCESS   ReadProp, WriteProp user\nSTATUS_SUCCESS   ReadProp, WriteProp accountExpires\nSTATUS_SUCCESS   ReadProp, WriteProp pwdLastSet \n```", "```\nPS> **(Get-DsSchemaClass user -Recurse -IncludeAuxiliary |**\n**Sort-Object SchemaId -Unique |**\n**Select-Object -ExpandProperty Attributes).Count**\n428 \n```", "```\nPS> **$config_dn = (Get-ADRootDSE).configurationNamingContext**\nPS> **$extended_dn = \"CN=Extended-Rights,$config_dn\"**\nPS> **Get-ADObject -SearchBase $extended_dn -SearchScope OneLevel -Filter ***\n**-Properties * | Group-Object {**\n   **Get-NtAccessMask $_.validAccesses -AsSpecificAccess DirectoryService**\n**}**\nCount Name                      Group\n----- ----                      -----\n   60 ControlAccess             {CN=Add-GUID,CN=Extended-Rights,...}\n   15 ReadProp, WriteProp       {CN=DNS-Host-Name-Attributes,...}\n    6 Self                      {CN=DS-Validated-Write-Computer,...} \n```", "```\n❶ PS> **$attr = Get-DsSchemaAttribute -Name \"accountExpires\"**\nPS> **$prop_set = Get-DsExtendedRight -Attribute $attr**\nPS> **$prop_set**\nName                             RightsId\n----                      --------\n❷ User-Account-Restrictions 4c164200-20c0-11d0-a768-00aa006e0529\n\n❸ PS> **$prop_set.AppliesTo  | Select-Object Name**\nName\n----\nmsDS-GroupManagedServiceAccount\ninetOrgPerson\nmsDS-ManagedServiceAccount\ncomputer\nuser\n\n❹ PS> **$user = Get-DsSchemaClass user**\nPS> **Get-DsExtendedRight -SchemaClass $user**\nName                           RightsId\n----                           --------\nAllowed-To-Authenticate        68b1d179-0d15-4d4f-ab71-46152e79a7bc\nEmail-Information              e45795b2-9455-11d1-aebd-0000f80367c1\nGeneral-Information            59ba2f42-79a2-11d0-9020-00c04fc2d3cf\n`--snip--` \n```", "```\n❶ PS> **$sd = New-NtSecurityDescriptor -Type DirectoryService**\n**-Owner \"SY\" -Group \"SY\"**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type AllowedObject**\n**-Access ReadProp -ObjectType $prop_set.RightsId**\n❷ PS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type AllowedObject**\n**-Access WriteProp -ObjectType $attr.SchemaId**\n❸ PS> **$obj_tree = New-ObjectTypeTree -SchemaObject $user**\nPS> **Add-ObjectTypeTree -Tree $obj_tree -SchemaObject $prop_set**\n❹ PS> **Get-NtGrantedAccess $sd -ObjectType $prop_set -ResultList -PassResult |**\n**Format-Table SpecificGrantedAccess, Name**\nSpecificGrantedAccess Name\n--------------------- ----\n             ReadProp user\n             ReadProp User-Account-Restrictions\n  ReadProp, WriteProp accountExpires\n             ReadProp msDS-AllowedToActOnBehalfOfOtherIdentity\n             ReadProp msDS-User-Account-Control-Computed\n             ReadProp msDS-UserPasswordExpiryTimeComputed\n             ReadProp pwdLastSet\n             ReadProp userAccountControl\n             ReadProp userParameters \n```", "```\n❶ PS> **$pwd = Get-DsSchemaAttribute -Name \"pwdLastSet\"**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type DeniedObject**\n**-Access ReadProp -ObjectType $pwd.SchemaId**\n❷ PS> **Edit-NtSecurityDescriptor $sd -CanonicalizeDacl**\nPS> **Get-NtGrantedAccess $sd -ObjectType $obj_tree -ResultList -PassResult |**\n**Format-Table SpecificGrantedAccess, Name**\nSpecificGrantedAccess Name\n--------------------- ----\n               ❸ None user\n                 None User-Account-Restrictions\n  ReadProp, WriteProp accountExpires\n             ReadProp msDS-AllowedToActOnBehalfOfOtherIdentity\n             ReadProp msDS-User-Account-Control-Computed\n             ReadProp msDS-UserPasswordExpiryTimeComputed\n                 None pwdLastSet\n             ReadProp userAccountControl\n             ReadProp userParameters \n```", "```\nPS> **Get-DsExtendedRight | Where-Object {**\n **$_.IsControl -and $_.Name -match \"password\"**\n**} | Select-Object Name, RightsId**\nName                               RightsId\n----                               --------\nUser-Force-Change-Password         00299570-246d-11d0-a768-00aa006e0529\nUnexpire-Password                  ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501\nUpdate-Password-Not-Required-Bit   280f369c-67c7-438e-ae98-1d46f3c6f541\nUser-Change-Password               ab721a53-1e2f-11d0-9819-00aa0040529b \n```", "```\n❶ PS> **$sd = New-NtSecurityDescriptor -Type DirectoryService -Owner \"SY\"** \n**-Group \"SY\"**\nPS> **$right = Get-DsExtendedRight -Name 'User-Change-Password'**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Type AllowedObject**\n**-Access ControlAccess -ObjectType $right.RightsId**\n❷ PS> **$user = Get-DsSchemaClass user**\nPS> **$obj_tree = New-ObjectTypeTree -SchemaObject $user**\nPS> **Add-ObjectTypeTree -Tree $obj_tree -SchemaObject $right**\n❸ PS> **$force = Get-DsExtendedRight -Name 'User-Force-Change-Password'**\nPS> **Add-ObjectTypeTree -Tree $obj_tree -SchemaObject $force**\n❹ PS> **Get-NtGrantedAccess $sd -ObjectType $obj_tree -ResultList -PassResult |**\n**Format-Table Status, SpecificGrantedAccess, Name**\n              Status SpecificGrantedAccess Name\n              ------ --------------------- ----\nSTATUS_ACCESS_DENIED                  None user\n      STATUS_SUCCESS         ControlAccess User-Change-Password\nSTATUS_ACCESS_DENIED                  None User-Force-Change-Password \n```", "```\nPS> **Get-DsExtendedRight | Where-Object IsValidatedWrite**\nName                                     RightsId\n----                                     --------\nValidated-MS-DS-Behavior-Version         d31a8757-2447-4545-8081-3bb610cacbf2\nSelf-Membership                          bf9679c0-0de6-11d0-a285-00aa003049e2\nValidated-MS-DS-Additional-DNS-Host-Name 80863791-dbe9-4eb8-837e-7f0ab55d9ac7\nValidated-SPN                            f3a64788-5306-11d1-a9c5-0000f80367c1\nDS-Validated-Write-Computer              9b026da6-0d3c-465c-8bee-5199d7165cba \n```", "```\nPS> **$computer = Get-ADComputer -Identity $env:COMPUTERNAME**\nPS> **$computer.SID.ToString()**\nS-1-5-21-1195776225-522706947-2538775957-1104\n\nPS> **Get-DsObjectSid -DistinguishedName $computer.DistinguishedName**\nName              Sid\n----              ---\nMINERAL\\GRAPHITE$ S-1-5-21-1195776225-522706947-2538775957-1104 \n```", "```\nPS> **$root_dn = (Get-ADRootDSE).defaultNamingContext**\nPS> **$obj = Get-ADObject $root_dn -Properties 'ms-DS-MachineAccountQuota'**\nPS> **$obj['ms-DS-MachineAccountQuota']**\n10\n\nPS> **Get-ADComputer -Filter * -Properties 'mS-DS-CreatorSID' | ForEach-Object {**\n **$creator = $_['mS-DS-CreatorSID']**\n **if ($creator.Count -gt 0) {**\n **$sid = Get-NtSid -Sddl $creator[0]**\n **Write-Host $_.Name, \" - \", $sid.Name**\n **}**\n**}**\nGRAPHITE - MINERAL\\alice\nTOPAZ - MINERAL\\alice\nPYRITE - MINERAL\\bob \n```", "```\nPS> **$pwd = ConvertTo-SecureString -String \"Passw0rd1!!!\" -AsPlainText -Force**\nPS> **$name = \"DEMOCOMP\"**\nPS> **$dnsname = \"$name.$((Get-ADDomain).DNSRoot)\"**\nPS> **New-ADComputer -Name $name -SAMAccountName \"$name`$\" -DNSHostName $dnsname**\n**-ServicePrincipalNames \"HOST/$name\" -AccountPassword $pwd -Enabled $true** \n```", "```\nPS> **$sam = Connect-SamServer -ServerName PRIMARYDC**\nPS> **$domain = Get-SamDomain -Server $sam -User**\nPS> **$user = New-SamUser -Domain $domain -Name 'DEMOCOMP$' -AccountType** \n**Workstation**\nPS> **$pwd = ConvertTo-SecureString -String \"Passw0rd1!!!\" -AsPlainText -Force**\nPS> **$user.SetPassword($pwd, $false)** \n```", "```\nPS> **$conf_nc = (Get-ADRootDSE).configurationNamingContext**\nPS> **Get-ADObject -SearchBase $conf_nc -SearchScope Subtree -Filter * |**\n**ForEach-Object {**\n **$sd = Get-Win32SecurityDescriptor -Name $_.DistinguishedName -Type Ds**\n **if ($sd.RmControl -eq 1) {**\n **$_.DistinguishedName**\n **}**\n**}** \n```", "```\nPS> **Get-ADClaimType -Filter {DisplayName -eq \"Country\"} |**\n**Format-List ID, ValueType, SourceAttribute, AppliesToClasses**\nID              : ad://ext/country\nValueType        : String\nSourceAttribute  : CN=Text-Country,CN=Schema,CN=Configuration,...\nAppliesToClasses : {CN=User,CN=Schema,CN=Configuration,...} \n```", "```\nPS> **$policy = Get-ADCentralAccessPolicy -Identity \"Secure Room Policy\"**\nPS> **$policy | Format-List PolicyID, Members**\nPolicyID : S-1-17-3260955821-1180564752-550833841-1617862776\nMembers  : {CN=Secure Rule,CN=Central Access Rules,CN=Claims...}\n\nPS> **$policy.Members | ForEach-Object {Get-ADCentralAccessRule -Identity $_} |**\n**Format-List Name, ResourceCondition, CurrentAcl**\nName              : Secure Rule\nResourceCondition : (@RESOURCE.EnableSecure == 1)\nCurrentAcl        : D:(XA;;FA;;;WD;((@USER.ad://ext/clearance... \n```", "```\n❶ PS> **Get-ADOrganizationalUnit -Filter * -Properties gpLink |**\n**Format-List Name, LinkedGroupPolicyObjects**\nName                     : Domain Controllers\nLinkedGroupPolicyObjects : {CN={6AC1786C-016F-11D2-945F-00C04fB984F9},...}\n\n❷ PS> **$policy = Get-ADObject -Filter {**\n **ObjectClass -eq \"groupPolicyContainer\"** \n**} -Properties ***\nPS> **$policy | Format-List displayName, gPCFileSysPath**\ndisplayName: Default Domain Policy\ngPCFileSysPath : \\\\mineral.local\\sysvol\\mineral.local\\Policies\\{31B2F340-...}\n\ndisplayName: Default Domain Controllers Policy\ngPCFileSysPath : \\\\mineral.local\\sysvol\\mineral.local\\Policies\\{6AC1786C-...}\n\ndisplayName: Default Servers Domain Policy\ngPCFileSysPath : \\\\mineral.local\\sysvol\\mineral.local\\Policies\\{6B108F70-...}\n\n❸ PS> **ls $policy[0].gPCFileSysPath**\nDirectory: \\\\mineral.local\\sysvol\\mineral.local\\Policies\\{31B2F340-016D-...}\n\nModeLastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         3/12/2023  12:56 PM                 Adm\nd-----         3/12/2023  1:02 PM                 MACHINE\nd-----          4/6/2023   8:18 PM                 USER\n-a----          4/6/2023   8:24 PM             22  GPT.INI\n\n❹ PS> **$dc_policy = $policy |**\n**Where-Object DisplayName -eq \"Default Domain Controllers Policy\"**\nPS> **$dc_path = $dc_policy.gPCFileSysPath**\nPS> **Get-Content \"$dc_path\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf\" |**\n**Select-String \"SeEnableDelegationPrivilege\", \"SeMachineAccountPrivilege\"**\n❺ SeMachineAccountPrivilege = *S-1-5-11\nSeEnableDelegationPrivilege = *S-1-5-32-544 \n```", "```\n❶ PS> **function Add-Member($Set, $MemberOf) {**\n **foreach($name in $MemberOf) {**\n **if ($Set.Add($name)) {**\n **$group = Get-ADGroup $name -Properties MemberOf**\n **Add-Member $Set $group.MemberOf**\n **}**\n **}**\n**}**\n\n❷ PS> **function Get-UserGroupMembership($User) {**\n **$groups = [System.Collections.Generic.HashSet[string]]::new(**\n **[System.StringComparer]::OrdinalIgnoreCase**\n **)**\n❸ **Add-Member $groups $User.PrimaryGroup**\n **Add-Member $groups $User.MemberOf**\n\n❹ **$auth_users = Get-ADObject -Filter {**\n **ObjectClass -eq \"foreignSecurityPrincipal\" -and Name -eq \"S-1-5-11\"**\n **} -Properties memberOf**\n **Add-Member $groups $auth_users.MemberOf**\n❺ **$groups | ForEach-Object {Get-DsObjectSid $_}**\n**}**\n\nPS> **function Get-AuthContext($username) {**\n  ❻ **$user = Get-ADUser -Identity $username -Properties memberOf, primaryGroup**\n**-ErrorAction Continue**\n **if ($null -eq $user) {**\n **$user = Get-ADComputer -Identity $username -Properties memberOf,**\n**primaryGroup**\n **}**\n **$sids = Get-UserGroupMembership $user**\n\n❼ **$rm = New-AuthZResourceManager**\n❽ **$ctx = New-AuthZContext -ResourceManager $rm -Sid $user.SID.Value**\n**-Flags SkipTokenGroups**\n❾ **Add-AuthZSid $ctx -KnownSid World**\n **Add-AuthZSid $ctx -KnownSid AuthenticatedUsers**\n **Add-AuthZSid $ctx -Sid $sids**\n **$rm.Dispose()**\n **$ctx**\n**}**\n\n❿ PS> **$ctx = Get-AuthContext \"alice\"**\nPS> **$ctx.Groups**\nName                                       Attributes\n----                                       ----------\nEveryone                                   Enabled\nNT AUTHORITY\\Authenticated Users           Enabled\nMINERAL\\Domain Users                       Enabled\nBUILTIN\\Users                              Enabled\nBUILTIN\\Pre-Windows 2000 Compatible Access Enabled \n```", "```\nPS> **function Get-ObjectInformation($Name) {**\n **$schema_class = Get-DsObjectSchemaClass $Name**\n **$sid = Get-DsObjectSid $Name**\n **$all_classes = Get-DsSchemaClass $schema_class.Name -Recurse -IncludeAuxiliary**\n **$attrs = $all_classes.Attributes | Get-DsSchemaAttribute |**\n**Sort Name -Unique**\n **$infs = Get-DsSchemaClass $schema_class.Name -Inferior**\n **$rights = $all_classes | ForEach-Object {Get-DsExtendedRight -SchemaClass $_} |** \n**Sort Name -Unique**\n **[PSCustomObject]@{**\n **Name=$Name**\n **SecurityDescriptor=Get-Win32SecurityDescriptor -Name $Name -Type Ds**\n **SchemaClass=Get-DsObjectSchemaClass $Name**\n **Principal=$sid**\n **Attributes=$attrs**\n **Inferiors=$infs**\n **PropertySets=$rights | Where-Object IsPropertySet**\n **ControlRight=$rights | Where-Object IsControl**\n **ValidatedWrite=$rights | Where-Object IsValidatedWrite**\n **}**\n**}** \n```", "```\nPS> **$dn_root = (Get-ADRootDSE).defaultNamingContext**\nPS> **Get-ObjectInformation $dn_root**\nName               : DC=mineral,DC=local\nSchemaClass        : domainDNS\nPrincipal          : S-1-5-21-146569114-2614008856-3334332795\nAttributes         : {adminDescription, adminDisplayName...}\nInferiors          : {device, samServer, ipNetwork, organizationalUnit...}\nPropertySets       : {Domain-Other-Parameters, Domain-Password}\nControlRight       : {Add-GUID, Change-PDC, Create-Inbound-Forest-Trust...}\nValidatedWrite     :\nSecurityDescriptor : O:BAG:BAD:AI(OA;CIIO;RP;4c164200-20c0-11d0-... \n```", "```\n❶ PS> **function Test-Access($Ctx, $Obj, $ObjTree, $Access) {**\n    **Get-AuthZGrantedAccess -Context $ctx -ObjectType $ObjTree**\n**-SecurityDescriptor $Obj.SecurityDescriptor -Principal $Obj.Principal**\n**-Access $Access | Where-Object IsSuccess**\n**}**\n\nPS> **function Get-PropertyObjTree($Obj) {**\n **$obj_tree = New-ObjectTypeTree $obj.SchemaClass**\n❷ **foreach($prop_set in $Obj.PropertySets) {**\n **Add-ObjectTypeTree $obj_tree $prop_set**\n **}**\n\n❸ **$fake_set = Add-ObjectTypeTree $obj_tree -PassThru**\n**-ObjectType \"771727b1-31b8-4cdf-ae62-4fe39fadf89e\"**\n **foreach($attr in $Obj.Attributes) {**\n **if (-not $attr.IsPropertySet) {**\n **Add-ObjectTypeTree $fake_set $attr**\n **}**\n **}**\n **$obj_tree**\n**}**\n\nPS> **function Get-AccessCheckResult($Ctx, $Name) {**\n **try {**\n❹ **$obj = Get-ObjectInformation $Name**\n **$access = Test-Access $ctx $obj $obj.SchemaClass \"MaximumAllowed\" |**\n **Select-Object -ExpandProperty SpecificGrantedAccess**\n\n❺ **$obj_tree = Get-PropertyObjTree $obj**\n **$write_attr = Test-Access $ctx $obj $obj_tree \"WriteProp\"**\n **$write_sets = $write_attr | Where-Object Level -eq 1 |**\n**Select-Object -ExpandProperty Name**\n **$write_attr = $write_attr | Where-Object Level -eq 2 |**\n**Select-Object -ExpandProperty Name**\n\n❻ **$obj_tree = New-ObjectTypeTree**\n**-ObjectType \"771727b1-31b8-4cdf-ae62-4fe39fadf89e\"**\n **$obj.Inferiors | Add-ObjectTypeTree -Tree $obj_tree**\n\n **$create_child = Test-Access $ctx $obj $obj_tree \"CreateChild\" |**\n**Where-Object Level -eq 1 | Select-Object -ExpandProperty Name**\n **$delete_child = Test-Access $ctx $obj $obj_tree \"DeleteChild\" |**\n**Where-Object Level -eq 1 | Select-Object -ExpandProperty Name**\n\n❼ **$control = if ($obj.ControlRight.Count -gt 0) {**\n **$obj_tree = New-ObjectTypeTree -SchemaObject $obj.SchemaClass**\n **$obj.ControlRight | Add-ObjectTypeTree $obj_tree**\n **Test-Access $ctx $obj $obj_tree \"ControlAccess\" |**\n**Where-Object Level -eq 1 | Select-Object -ExpandProperty Name**\n **}**\n\n❽ **$write_valid = if ($obj.ValidatedWrite.Count -gt 0) {**\n **$obj_tree = New-ObjectTypeTree -SchemaObject $obj.SchemaClass**\n **$obj.ValidatedWrite | Add-ObjectTypeTree $obj_tree**\n **Test-Access $ctx $obj $obj_tree \"Self\" |**\n**Where-Object Level -eq 1 | Select-Object -ExpandProperty Name**\n **}**\n\n❾ **[PSCustomObject]@{**\n **Name=$Obj.Name**\n **Access=$access**\n **WriteAttributes=$write_attr**\n **WritePropertySets=$write_sets**\n **CreateChild=$create_child**\n **DeleteChild=$delete_child**\n **Control=$control**\n **WriteValidated=$write_valid**\n **}**\n **} catch {**\n **Write-Error \"Error testing $Name - $_\"**\n **}**\n**}** \n```", "```\nPS> **$dn = \"CN=GRAPHITE,CN=Computers,DC=mineral,DC=local\"**\nPS> **$ctx = Get-AuthContext 'alice'** ❶\nPS> **Get-AccessCheckResult $ctx $dn** ❷\nName              : CN=GRAPHITE,CN=Computers,DC=mineral,DC=local\nAccess            : List, ReadProp, ListObject, ControlAccess, ReadControl\nWriteAttributes   : {displayName, sAMAccountName, description, accountExpires...}\nWritePropertySets : {User-Account-Restrictions, User-Logon}\nCreateChild       :\nDeleteChild       :\nControl           : {Allowed-To-Authenticate, Receive-As, Send-As,...}\nWriteValidated    : Validated-SPN\n\nPS> **$ctx = Get-AuthContext $dn**\nPS> **Get-AccessCheckResult $ctx $dn** ❸\nName              : CN=GRAPHITE,CN=Computers,DC=mineral,DC=local\nAccess            : CreateChild, DeleteChild, List, ReadProp, ListObject,...\nWriteAttributes   : {streetAddress, homePostalAddress, assistant, info...}\nWritePropertySets : {Personal-Information, Private-Information}\nCreateChild       : {msFVE-RecoveryInformation, ms-net-ieee-80211-...}\nDeleteChild       : {msFVE-RecoveryInformation, ms-net-ieee-80211-...}\nControl           : User-Change-Password\nWriteValidated    : {DS-Validated-Write-Computer, Validated-SPN} \n```", "```\nPS> **Get-AccessibleDsObject -NamingContext Default -Recurse**\nName      ObjectClass   UserName      Modifiable Controllable\n----      -----------   --------      ---------- ------------\ndomain    domainDNS     MINERAL\\alice False      True\nBuiltin   builtinDomain MINERAL\\alice False      False\nComputers container     MINERAL\\alice False      False\n`--snip--` \n```"]