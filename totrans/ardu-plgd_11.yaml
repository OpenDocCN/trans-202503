- en: '**10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: THE CHROMATIC THERMOMETER**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This project was initially created to provide a quick visual indication of local
    temperature. At its simplest, it is a thermometer that displays the temperature
    by turning on a sequence of LEDs of different colors. During development, however,
    the project gained more features, including an LCD readout to supplement the basic
    color readout. And while experimenting, I came across an IC that provides extremely
    accurate measurement without special calibration, which improved the device greatly.
  prefs: []
  type: TYPE_NORMAL
- en: The Chromatic Thermometer includes 10 different colored LEDs, each of which
    lights up when the sensor detects a particular temperature. The original version
    was designed to measure from 68 to 78°F, and each LED represented a 1-degree Fahrenheit
    change in temperature. I subsequently varied that for different applications.
    The finished project shown in [Figure 10-1](ch10.xhtml#ch10fig10-1) can measure
    a wide range of temperatures. It also includes a waterproof probe for measuring
    the temperature in liquids, which is useful for fish tanks, swimming pools, and
    so forth, and can be constructed in a variety of physical configurations. In the
    version that appears in the sketch, the temperature ranges from 76 to 86°F in
    1-degree increments.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: The finished Chromatic Thermometer*'
  prefs: []
  type: TYPE_NORMAL
- en: You could also program an alarm by flashing a lamp at a specific temperature,
    or with a minor hardware addition, you could add an audible alarm. I am sure you
    can think of even more hardware or software modifications to make this thermometer
    a very practical device.
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing a Temperature Sensor**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The key ingredient in any electronic thermometer is the temperature sensor.
    There are many kinds of temperature sensors available to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thermistors* change resistance with temperature and range from inexpensive
    to very pricey, depending on how they are made and tested. *Resistance temperature
    detectors (RTDs)* employ a coil of pure wire, such as silver, platinum, or copper,
    wrapped around a glass core. Combined in a resistance bridge, RTDs can be extremely
    accurate, but they’re somewhat expensive. *Thermocouples* are still an industry-standard
    sensing technology, particularly at higher temperatures (that is, greater than
    500°C). At lower temperatures, thermocouples are being replaced by RTDs because
    of accuracy, precision, consistency, and linearity.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Semiconductor temperature sensors*—that is, dedicated integrated silicon sensor
    circuits—continue to gain popularity because of their accuracy, precision, ruggedness,
    and convenience. In preparing for this project, I looked at virtually all the
    approaches and elected to use a semiconductor sensor, as it provided sufficient
    accuracy with a relatively simple hookup and a modest price.'
  prefs: []
  type: TYPE_NORMAL
- en: With any thermometer, *accuracy* and *precision* are issues. Consider accuracy
    the ability to measure temperature as close to some standard value established
    by the NIST, with some deviation. For this casual definition, precision can be
    referred to as *repeatability*—that is, the ability to read the same temperature
    consistently in the same environment.
  prefs: []
  type: TYPE_NORMAL
- en: The Custom pH Meter in [Chapter 7](ch07.xhtml#ch07) used the temperature of
    boiling water and ice in solution to set boundaries of 100°C and 0°C, respectively,
    to calibrate a thermometer. I checked the Chromatic Thermometer with the same
    approach, but I used the high-accuracy MCP9808 module described here as a standard
    because it was extremely close.
  prefs: []
  type: TYPE_NORMAL
- en: Accuracy and precision are ultimately a system—not necessarily a sensor—issue.
    This project discusses two different sensors with essentially the same accuracy
    and precision. The simplest sensor, an LM35 analog temperature sensor, depends
    on other parts of the system for its accuracy and precision. The second sensor,
    an MCP9808 IC, provides accurate results with or without the associated breakout
    board because it includes the other variable components as an on-chip subsystem.
  prefs: []
  type: TYPE_NORMAL
- en: Both the LM35 and the MCP9808 boast a maximum accuracy of 0.25°C and a precision
    of 0.0625°C. To achieve this kind of accuracy, they use a *silicon band-gap temperature
    sensor*, which takes advantage of the forward voltage of a silicon diode. However,
    in addition to the sensor, the MCP9808 includes its own on-chip ADC, voltage reference,
    and other internal circuitry to assure accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you want to dig deeper on the band-gap sensor technology, there is a wealth
    of information on the web, including background on Bob Widler, who is largely
    credited with discovering the phenomenon*.'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, the LM35 depends on the ADC and voltage reference of the Arduino,
    which, while pretty good, does not match that of the MCP9808’s monolithic system
    and thus can require calibration, as illustrated in “[Sketch for the LM35 System](ch10.xhtml#ch10lev2sec1)”
    on [page 289](ch10.xhtml#page_289). When I built a version with the MCP9808 instead,
    I used an Adafruit breakout board for the chip because it significantly simplified
    assembly—no need to fuss with the MicroSMT package’s tiny leads.
  prefs: []
  type: TYPE_NORMAL
- en: While the MCP9808 does cost more than the LM35D, it’s worked out well. I included
    traces in the project’s PCB shield for the chip itself, if you elect to solder
    it using one of the techniques suggested in “[Using SOICs](ch00.xhtml#ch00lev1sec7)”
    on [page 20](ch00.xhtml#page_20).
  prefs: []
  type: TYPE_NORMAL
- en: '**Required Tools**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Soldering iron and solder (Optional) Electric drill with bits for 1/4 inches
    (used to drill a hole for the jack in order to connect a remote temperature sensor
    or to make a hole for a power adapter)
  prefs: []
  type: TYPE_NORMAL
- en: '**Parts List**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, decide which temperature sensor you want to use: the LM35 or the MCP9808\.
    If you just want to use an LM35, here’s what you’ll need to make a basic Chromatic
    Thermometer:'
  prefs: []
  type: TYPE_NORMAL
- en: One Arduino Nano or clone
  prefs: []
  type: TYPE_NORMAL
- en: One LM35 temperature sensor
  prefs: []
  type: TYPE_NORMAL
- en: 'Ten different colored LEDs (see “[Mod: Try Different LEDs](ch10.xhtml#ch10sd1)”
    on [page 300](ch10.xhtml#page_300))'
  prefs: []
  type: TYPE_NORMAL
- en: Ten ZTX649 transistors Ten 470-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: One 7.5 to 9V wall adapter, or equivalent (or 9V battery)
  prefs: []
  type: TYPE_NORMAL
- en: One plastic enclosure (see “[Construction](ch01.xhtml#ch01lev1sec9)” on [page
    298](ch10.xhtml#page_298)) 28- or 30-gauge hookup wire
  prefs: []
  type: TYPE_NORMAL
- en: One printed circuit board (Use the provided shield template, design your own
    shield, or use any other prototyping board you feel comfortable working with.)
  prefs: []
  type: TYPE_NORMAL
- en: 'I also describe several variations on the Chromatic Thermometer in this chapter.
    Give the project a skim before you go shopping, and if you want to make one of
    the variations, also buy the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan to use the temperature sensor as described in “Design Decision:
    Remote the Temperature Sensor,” get one 3.5 mm stereo jack. For a Chromatic Thermometer
    with a digital readout, also buy one 16×2 I²C LCD.'
  prefs: []
  type: TYPE_NORMAL
- en: For a high-accuracy Chromatic Thermometer, replace the LM35 with either one
    MCP9808 Adafruit Breakout Board or one Microchip MCP9808 IC with a 100 nF capacitor
    and two 10-kilohm resistors.
  prefs: []
  type: TYPE_NORMAL
- en: For the breadboard prototype, make sure you have one large breadboard (as opposed
    to the smaller ones used in much of this book) and at least 30 jumper wires.
  prefs: []
  type: TYPE_NORMAL
- en: '**DESIGN DECISION: REMOTE THE TEMPER ATURE SENSOR**'
  prefs: []
  type: TYPE_NORMAL
- en: If your application takes you in another direction, you can modify the shield
    to *remote the chip*. That is, you can connect long wires directly to the chip
    (you’d need only four wires) and place the chip in a location separate from the
    readout. If you remote the chip, just include a small capacitor (around 100 nF)
    between pins 4 and 8, very close to the chip, as shown in [Figure 10-2](ch10.xhtml#ch10fig10-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: The MCP9808 with wires soldered directly*'
  prefs: []
  type: TYPE_NORMAL
- en: However, remember that I²C stands for *inter-integrated circuit* and is intended
    for chip-to-chip communications. Therefore, the MCP9808 can be moved only a limited
    distance from the Arduino. While some hobbyists online claim success with wires
    as long as 100 cm, the longest that I have been able to do reliably is about 50
    cm. The LM35, on the other hand, can be remoted and made waterproof for longer
    distances with only three wires and without needing miniature hands and the dexterity
    of a watchmaker. (If you can tolerate only two wires, there’s a solution to that;
    check the data sheet for the LM35.)
  prefs: []
  type: TYPE_NORMAL
- en: The MCP9808 could likely be encapsulated as I did with the LM35 in the Custom
    pH Meter from [Chapter 7](ch07.xhtml#ch07), though I have not tried that. Trying
    to insulate the connections from each other and keep the delicate pins of the
    chip from breaking off can be a problem when making a remote sensor with the MCP9808.
  prefs: []
  type: TYPE_NORMAL
- en: This is a design decision to make before you build the final Chromatic Thermometer,
    so I suggest reading through the full chapter to decide before you put the device
    together.
  prefs: []
  type: TYPE_NORMAL
- en: '**Downloads**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sketch for the LM35 version** *LM35Thermo.ino*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sketch for the MCP9808 version** *9808Thermo.ino*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Adafruit_MCP9808*** **library** *[https://www.adafruit.com/product/1782](https://www.adafruit.com/product/1782)*(for
    the MCP9808 temperature sensor only)'
  prefs: []
  type: TYPE_NORMAL
- en: '**PCB pattern for the shield** *Thermo.pcb*'
  prefs: []
  type: TYPE_NORMAL
- en: '**How the Chromatic Thermometer Works**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In operation, the Chromatic Thermometer is quite straightforward. For starters,
    let’s look at the basic configuration using the LM35 sensor.
  prefs: []
  type: TYPE_NORMAL
- en: The sensor generates a voltage of 10mV/°C. For example, at 28°C (around 82°F),
    the chip outputs 0.280V. You can easily check that with your multimeter. To make
    a usable Arduino thermometer, all you have to do is change that voltage to something
    the Arduino can understand and then have the Arduino translate it to something
    you want to see on the LEDs or LCD.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to convert the analog voltage to a digital value so the Arduino
    can work with it. To do that, connect the output of the sensor to one of the Nano’s
    analog inputs. (I tend to use A0, but any analog input can be used. Just don’t
    use analog pins A4 or A5, which are used for the I²C portion of this project.)
    The output voltage of the LM35 is pretty low compared with the 5V the Nano is
    working with, and the ADC divides the 5V of the supply into 1,024 parts (range
    = 0 to 1,023) to determine the analog value of an incoming voltage. If you use
    the LM35 output as is, each degree Celsius change in temperature will change the
    output voltage by 0.010V and therefore change the result of the ADC by 2.046 parts
    (units) out of the 1,024 total.
  prefs: []
  type: TYPE_NORMAL
- en: That works, but small increments of the ADC at the very low end of the reference
    voltage are subject to random amounts of error. There is also significant error
    from rounding, as the Nano’s ADC outputs only whole digits.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the impact of error, you’ll change the reference voltage of the ADC
    from 5V, where each increment in the 1,024 represents 0.004882V, to 1.1V, where
    each increment represents only 0.00107V. A single degree Celsius change will then
    represent only 9.345 of the 1,024 units. Thus, the 0.280V the LM35 outputs at
    28°C will correspond to about 261 of the 1,024 units, rather than only 52.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Schematic**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 10-3](ch10.xhtml#ch10fig10-3) shows the schematic for this project.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: Schematic for the Chromatic Thermometer*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that both the LM35 and the MCP9808 sensors are wired up in this sketch.
    That is not a problem, as you can select which one to use in software by changing
    the code that you upload to the Arduino. You can wire up either one or both. This
    schematic also shows the Chromatic Thermometer with an LCD, though that is optional
    if you just want to read the temperature based on the LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino processor could probably drive the LEDs unaided, but I elected to
    use transistor drivers for each LED. This assures that if you elect to use higher-output
    LEDs—or even incandescent lamps—there will be no problem driving them. The transistors
    used are capable of sinking as much as 1 A.
  prefs: []
  type: TYPE_NORMAL
- en: An 11th LED-transistor-resistor group (Q11) is shown connected to pin D12 on
    the Nano, though the final Chromatic Thermometer uses only 10 LEDs. I show this
    extra pair and even include it in the shield PCB file to give you a built-in customization
    option. You can add another temperature digit, a buzzer alarm, or any other output
    you like.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Breadboard**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As in the other projects in this book, I suggest starting with a breadboard
    to sound out the design and exercise the sketch before committing to the final
    assembly. Because the project uses 10 LEDs and 10 driver transistors, I used a
    large-format breadboard to comfortably fit all the components (see [Figure 10-4](ch10.xhtml#ch10fig10-4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: The Chromatic Thermometer’s completed breadboard*'
  prefs: []
  type: TYPE_NORMAL
- en: The LEDs are along the middle of the breadboard, and one is shown lit. I assembled
    a wire harness for the LCD. The LM35 temperature sensor (left) is on a tether
    and held in heat shrink tubing so it is waterproof.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the steps I used to assemble the breadboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the Arduino Nano toward the top left of the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect VIN (pin 30) of the Nano to where the 9V input from the battery or other
    power source will go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the 5V pin of the Nano to the red positive rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect GND (pin 4) of the Nano to the blue negative rail on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify locations for the 10 driver transistors (Q1 to Q10), and place them
    on the breadboard. I placed them so the beveled edge of the transistor faced right
    when looking from the bottom of the board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the collector of all the transistors to where the 9V input will go (VIN
    of the Nano). See [Figure 10-5](ch10.xhtml#ch10fig10-5) for the pinout of the
    transistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/fig10_5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 10-5: Pinout of the ZTX649 transistor*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect the base of Q1 to D2 (pin 5) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q2 to D3 (pin 6) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q3 to D4 (pin 7) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q4 to D5 (pin 8) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q5 to D6 (pin 9) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q6 to D7 (pin 10) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q7 to D8 (pin 11) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q8 to D9 (pin 12) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q9 to D10 (pin 13) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the base of Q10 to D11 (pin 14) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect each of the emitters for all the transistors Q1 through Q10 to the positive
    lead of each colored LED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the negative lead of the LEDs to an empty location on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one side of the 470-ohm resistors to the negative leads of each LED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other side of the 470-ohm resistors to ground (the blue negative
    rail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 1 (4–20V) of the LM35 to the red positive rail. (See [Figure 10-6](ch10.xhtml#ch10fig10-6)
    for the pinout of the LM35.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/fig10_6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 10-6: Pinout of the LM35 temperature sensor*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect pin 3 (GND) of the LM35 to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the output pin (center) of the LM35 to pin A0 (26) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 24\. Connect power and ground to the respective red positive and blue negative
    rails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you’re all set to go with the most basic configuration. To add the digital
    display:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the power and ground of the LCD’s I²C adapter to the respective red
    positive and blue negative rails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the SDA pin of the LCD’s I²C adapter to A4 (22) on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the SCL pin of the LCD’s I²C adapter to A5 (21) of the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the appropriate software code to the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to play with the high-accuracy temperature sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the LM35 from the circuit (or you can leave it in—it will not affect
    anything).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the high-accuracy sensor in a location where the pins will not be affected
    by anything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the power pins of the I²C connection on the MCP9808 sensor to the blue
    negative rail and 5V—pin 27, or the red positive rail—on the Nano, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the SDA pin of the I²C connection on the MCP9808 sensor to A4 (22) on
    the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the SCL pin of the I²C connection on the MCP9808 sensor to A5 (21) on
    the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the software to the Nano with the high-accuracy sensor version of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you’re all set to go.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This particular breadboard’s positive and negative power rails are not continuous.
    The first 15 are connected, the next 20 are connected, and the last 15 are connected—but
    not to each other. I used jumpers to connect the rails as needed*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Sketches**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two versions of the sketch: one for the LM35 version of this project
    and one for the MCP9808 version. You can pick a sketch to use based on which version
    of the Chromatic Thermometer you’d like to build, but both sketches comprise three
    basic sections.'
  prefs: []
  type: TYPE_NORMAL
- en: After the boilerplate section of loading libraries and preliminary setup, the
    first component of each sketch deals with the temperature sensor itself. The second
    section deals with setting up the temperature and LCD readout (if used). The final
    element of each sketch details the conditions to turn the LEDs on and off to indicate
    the temperature. I have annotated the code with comments where appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '***Sketch for the LM35 System***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here is the sketch for the Chromatic Thermometer with the LM35 sensor, including
    the digital LCD readout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After including libraries, the LM35 sketch defines the number of samples to
    keep track of at ➊. The higher the number, the more the readings will be smoothed,
    but the longer it will take to settle. Using a constant rather than a normal variable
    for the number of samples allows this value to determine the size of the `readings`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: The `setup()` code initializes the LCD, turns on serial communication for debugging,
    initializes the readings array with all zeros (because the sketch hasn’t read
    anything yet), and sets the ADC reference voltage to 1.1V. The `loop()` code stores
    sensor data in the `readings` array and averages the readings to calculate a temperature
    to display. If you have an LCD, the sketch shows the temperature on it, and then
    it checks various temperature ranges with `if` statements to see which LEDs to
    turn on.
  prefs: []
  type: TYPE_NORMAL
- en: The big difference between this sketch and the next is that the LM35 version
    sets up the system to accept the analog voltage from the sensor and direct it
    to an analog input. It also establishes a reference voltage of 1.1V with the `analogReference(INTERNAL)`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: '***Sketch for the MCP9808 System***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The sketch for the version with the high-accuracy MCP9808 chip (or the board
    from Adafruit) uses much of the same code; the conditional statements that turn
    on the LEDs are identical. The only part that differs is how the Arduino gets
    the temperature information from the sensor. Here is the full sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The MCP9808 sketch’s version of the `setup()` code checks to make sure you
    have the MCP9808 temperature sensor plugged in. In the `loop()` section, it calls
    the `readTempC()` function from the *Adafruit_MCP9808* library to fetch the current
    temperature, instead of calling `analogRead()` directly, as the LM35 code does.
    Unlike the LM35 code, this sketch doesn’t need to set up an external voltage reference:
    one advantage of using the MCP9808 is that the chip contains its own internal
    reference. Otherwise, apart from a few differences in variable names, the rest
    of the sketch is the same as the LM35 code.'
  prefs: []
  type: TYPE_NORMAL
- en: '***How the Temperature Readouts Work***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In both sketches, the basic temperature readout comprises a series of 10 different
    colored LEDs with transistors driven in an emitter-follower configuration from
    outputs D2 through D11 on the Nano.
  prefs: []
  type: TYPE_NORMAL
- en: The outputs of the Nano are activated by the sketch, and each output corresponds
    to a conditional statement of the form, “If temperature is between *X* degrees
    and *Y* degrees, turn on an LED. If not, turn off the LED.” The `if` statements
    for these commands are the same in both the LM35 and the MCP9808 high-accuracy
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I first completed the project, I used it in a saltwater fish tank, where
    I wanted to accurately view the temperature at a glance and at a distance. I set
    up the LEDs to blink at unacceptable temperature extremes to get my attention
    so I could take corrective action. The blinking effect required only turning the
    LED off and on with a delay in between. I modified the sketch to read as follows
    for the warning condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This example blinks the display when, and only when, the temperature is between
    78 and 79°F, as indicated in the full sketch. The length of the delay, combined
    with any further delays you might add, determines the blinking rate.
  prefs: []
  type: TYPE_NORMAL
- en: The general readout system and this simple, silent alarm worked extremely well
    together. I could set alarms to make sure that the temperature was above or below
    the threshold temperature.
  prefs: []
  type: TYPE_NORMAL
- en: 'I also thought it might be valuable to have a digital readout, however, for
    two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: I wanted the option to see exactly what the temperature was.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Should the temperature go out of range and the “blink” alarm execute, I wanted
    to see how far from the limit the temperature was.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the digital display was relatively easy, as I used a standard 16×2 LCD
    with I²C interface requiring only four wires. I bought an LCD with a built-in
    I²C adapter this time. It was larger than I had hoped for, but I was unable to
    find a smaller display easily. If you can find one, go for it.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Shield**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The PCB shield for this project was designed with two copper layers rather than
    a single layer. The extra layer makes fabricating the board a little more difficult,
    but it saves a lot of effort in identifying and wiring jumpers. I initially etched
    the board in-house, but I had the finished board produced by Express PCB. The
    plated through-holes on the professionally finished board made assembly a lot
    easier. The layers of the PCB are shown in [Figure 10-7](ch10.xhtml#ch10fig10-7).
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the LED driver transistors are located below the Nano board to save
    on surface area. The only penalty to this is that the Nano sits a little higher
    on the board. You can see the transistors in [Figure 10-8](ch10.xhtml#ch10fig10-8),
    which shows the populated PCB with the Nano board next to it.
  prefs: []
  type: TYPE_NORMAL
- en: The shield also includes provisions for two I²C devices—one at either end of
    the board. Because I thought this board might find its way into many different
    projects, I made it as flexible as possible. The I²C connections make it easy
    to hook up both the high-accuracy Adafruit breakout board as well as a digital
    display. You can either wire them in directly or solder a straight or right-angle
    female header into the board for use with a crimped-connector housing with cable
    (see [Figure 10-9](ch10.xhtml#ch10fig10-9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: The top layer of the PCB shield with silkscreen image. You can
    see the pattern for the MCP9808 in the bottom left*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: Populated shield next to an Arduino Nano. Notice that I used
    full-length female headers for the Nano. Also note the holes and traces for an
    11th LED in the top right*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: The assembled thermometer using the MCP9808 chip soldered directly
    to the shield (lower right). One I²C connector is above and to the right of the
    MCP9808 chip; connections for another I²C connector are at the lower left*.'
  prefs: []
  type: TYPE_NORMAL
- en: The shield includes pads for the MCP9808 chip (installed in [Figure 10-9](ch10.xhtml#ch10fig10-9))
    if you elect to solder the chip directly to the board. If you use the MCP9808
    chip rather than the breakout board without another connection to the I²C interface,
    you will have to provide 10-kilohm pull-up resistors to the SDA and SCL lines.
    These are not included in the shield layout but can easily be added to the I²C
    port connections since they would be unused. In the implementation in [Figure
    10-9](ch10.xhtml#ch10fig10-9), the 10-kilohm resistors are on the LCD adapter
    because there will be an LCD adapter plugged into the I²C port, eliminating the
    need for the pull-up resistors.
  prefs: []
  type: TYPE_NORMAL
- en: While the shield files included for this project provide for direct attachment
    of the LEDs to the PCB, there are many instances where you may want to separate
    the PCB from the LEDs. For example, I made one version where I spaced out high-intensity,
    10 mm LEDs an inch apart on a decorative piece of wood to create a more dramatic
    look. To do something like that, you’d want to solder long wires to the LED leads
    and then solder those to the PCB. The cathodes of all the LEDs can be wired together,
    and only the anodes need be connected to the board individually.
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you haven’t soldered your components to the shield PCB or a prototyping board,
    do so now, and remember to assemble the LEDs with the correct polarity. The final
    configuration of the Chromatic Thermometer depends very much on your final application,
    so I will not go into a lot of specific detail on constructing this project.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to use a remote temperature sensor, you will want a
    jack or another appropriate connector. You may also want to cut a slit in the
    enclosure to accommodate a wire for the sensor, as well as another for a long
    power connection. And if you are going to build the Chromatic Thermometer with
    only the LEDs and no LCD, you would probably mount the electronics inside the
    enclosure differently. Similarly, if you build the high-accuracy version, you
    may need to adjust how you fit your parts into the enclosure. The Chromatic Thermometer
    shown in [Figure 10-10](ch10.xhtml#ch10fig10-10) uses the LM35 sensor with the
    16×2 LCD.
  prefs: []
  type: TYPE_NORMAL
- en: I used a small box I found on Amazon (originally sold to hold baseball cards)
    to enclose the whole thing and mounted the sensor directly to the shield in the
    three holes to accommodate it in the PCB. If you don’t want the LED on the Nano
    to show, you can unsolder it, or simply cover it with a small piece of black electrical
    tape.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you use the 3 mm LEDs or the heftier, high-output 5 mm LEDs, using some
    kind of spacer works well for making sure the LEDs are lined up at the height
    you like. When I mounted the readout LEDs to the shield, I placed a sliver of
    unused PCB material to hold all of the LEDs at a uniform height (see [Figure 10-11](ch10.xhtml#ch10fig10-11)).
    You could use cardboard just as easily, and if you want a different height, just
    use a taller or shorter spacer.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-10: The completed Chromatic Thermometer in an acrylic enclosure,
    monitoring the temperature of medicine in a cooler when traveling. This version
    uses a 9V battery, which is inside the enclosure. I used a display with a backlight,
    but the battery will last a lot longer without the backlight. Turn on/off thresholds
    for LEDs were modified for cold temperature use*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-11: I used a discarded strip of PCB material to hold LEDs at uniform
    height*'
  prefs: []
  type: TYPE_NORMAL
- en: If you use 5 mm LEDs, you may have difficulty fitting them through the holes
    in a standard PCB, as some 5 mm LEDs have wider leads. I expanded the holes with
    a drill to fit the larger LEDs; because there were no connections on the other
    side of the PCB, the plate-through was not needed.
  prefs: []
  type: TYPE_NORMAL
- en: '**MOD: TRY DIFFERENT LEDS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Chromatic Thermometer shown in [Figure 10-8](ch10.xhtml#ch10fig10-8) uses
    3 mm LEDs. I ordered 3 mm LEDs on eBay in 10 different colors, but the leads were
    a little short. Subsequently, I ordered 200 5 mm LEDs in a selection of 10 different
    colors. These also had short leads, but they were brighter and worked well. I
    did have to file the edges of some of the LEDs where there was a little extra
    flashing from the mold so they would fit within the 0.200-inch spacing (a little
    more than 5 mm) on the PCB. However, I could not find enough different-colored
    high-output 5 mm LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: For one experimental version, I used six different-colored high-output 5 mm
    LEDs, repeated the colors at the extremes, and went back to the sketch to create
    blinking patterns to differentiate the similar colors. That version of the Chromatic
    Thermometer worked well, and the high-output LEDs made it quite noticeable.
  prefs: []
  type: TYPE_NORMAL
- en: To attract even more attention, you can use high-output 10 mm LEDs. They will
    not fit on the shield PCB shown here, however, as I only spaced the LEDs out by
    0.200 inches. That spacing allows for most 3 mm and 5 mm LEDs, but not 10 mm ones.
    See [Figure 10-12](ch10.xhtml#ch10fig10-12) for a size comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-12: From left to right, 10 mm, 5 mm, and 3 mm LEDs shown next to
    a metric ruler*'
  prefs: []
  type: TYPE_NORMAL
- en: To use 10 mm LEDs, you will have to mount them elsewhere and connect them to
    the PCB with wires. For inspiration, look at the lightbar for the Watch Winder
    in [Chapter 4](ch04.xhtml#ch04).
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Chromatic Thermometer**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How you place the thermometer in the environment you want to monitor is limited
    only by your imagination. The version I use on my fish tank had no LCD at first,
    so I simply attached a couple of wire hooks to the bare board and hung it from
    the edge of the tank with the LEDs facing out. (I could have mounted the entire
    thing in a small acrylic box, but I had difficulty finding a box with the right
    dimensions.) This configuration worked well.
  prefs: []
  type: TYPE_NORMAL
- en: I eventually replaced that Chromatic Thermometer with a version including an
    LCD that I enclosed in an acrylic box. I’m thinking of modifying it again to use
    high-intensity LEDs that shine through the tank. That should create an interesting
    effect!
  prefs: []
  type: TYPE_NORMAL
