- en: Chapter 12. System and Process Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we look at ways of accessing a variety of system and process
    information. The primary focus of the chapter is a discussion of the `/proc` file
    system. We also describe the *uname()* system call, which is used to retrieve
    various system identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: The `/proc` File System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In older UNIX implementations, there was typically no easy way to introspectively
    analyze (or change) attributes of the kernel, to answer questions such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: How many processes are running on the system and who owns them?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What files does a process have open?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What files are currently locked, and which processes hold the locks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What sockets are being used on the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some older UNIX implementations solved this problem by allowing privileged programs
    to delve into data structures in kernel memory. However, this approach suffered
    various problems. In particular, it required specialized knowledge of the kernel
    data structures, and these structures might change from one kernel version to
    the next, requiring programs that depended on them to be rewritten.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide easier access to kernel information, many modern UNIX implementations
    provide a `/proc` virtual file system. This file system resides under the `/proc`
    directory and contains various files that expose kernel information, allowing
    processes to conveniently read that information, and change it in some cases,
    using normal file I/O system calls. The `/proc` file system is said to be virtual
    because the files and subdirectories that it contains don’t reside on a disk.
    Instead, the kernel creates them “on the fly” as processes access them.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we present an overview of the `/proc` file system. In later
    chapters, we describe specific `/proc` files, as they relate to the topics of
    each chapter. Although many UNIX implementations provide a `/proc` file system,
    SUSv3 doesn’t specify this file system; the details described in this book are
    Linux-specific.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obtaining Information About a Process: `/proc/`*PID*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For each process on the system, the kernel provides a corresponding directory
    named `/proc/`*PID*, where *PID* is the ID of the process. Within this directory
    are various files and subdirectories containing information about that process.
    For example, we can obtain information about the *init* process, which always
    has the process ID 1, by looking at files under the directory `/proc/1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the files in each `/proc/`*PID* directory is one named `status`, which
    provides a range of information about the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above output is taken from kernel 2.6.32\. As indicated by the *since* comments
    accompanying the file output, the format of this file has evolved over time, with
    new fields added (and in a few cases, removed) in various kernel versions. (Aside
    from the Linux 2.6 changes noted above, Linux 2.4 added the *Tgid*, *TracerPid*,
    *FDSize*, and *Threads* fields.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The fact that the contents of this file have changed over time raises a general
    point about the use of `/proc` files: when these files consist of multiple entries,
    we should parse them defensively—in this case, looking for a match on a line containing
    a particular string (e.g., *PPid:*), rather than processing the file by (logical)
    line number.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 12-1](ch12.html#selected_files_in_each_solidus_proc_soli "Table 12-1. Selected
    files in each /proc/PID directory") lists some of the other files found in each
    `/proc/`*PID* directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 12-1. Selected files in each `/proc/`*PID* directory
  prefs: []
  type: TYPE_NORMAL
- en: '| File | Description (process attribute) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cmdline` | Command-line arguments delimited by `\0` |'
  prefs: []
  type: TYPE_TB
- en: '| `cwd` | Symbolic link to current working directory |'
  prefs: []
  type: TYPE_TB
- en: '| `environ` | Environment list *NAME=value* pairs, delimited by `\0` |'
  prefs: []
  type: TYPE_TB
- en: '| `exe` | Symbolic link to file being executed |'
  prefs: []
  type: TYPE_TB
- en: '| `fd` | Directory containing symbolic links to files opened by this process
    |'
  prefs: []
  type: TYPE_TB
- en: '| `maps` | Memory mappings |'
  prefs: []
  type: TYPE_TB
- en: '| `mem` | Process virtual memory (must *lseek()* to valid offset before I/O)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mounts` | Mount points for this process |'
  prefs: []
  type: TYPE_TB
- en: '| `root` | Symbolic link to root directory |'
  prefs: []
  type: TYPE_TB
- en: '| `status` | Various information (e.g., process IDs, credentials, memory usage,
    signals) |'
  prefs: []
  type: TYPE_TB
- en: '| `task` | Contains one subdirectory for each thread in process (Linux 2.6)
    |'
  prefs: []
  type: TYPE_TB
- en: The `/proc/`*PID*`/fd` directory
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `/proc/`*PID*`/fd` directory contains one symbolic link for each file descriptor
    that the process has open. Each of these symbolic links has a name that matches
    the descriptor number; for example, `/proc/1968/1` is a symbolic link to the standard
    output of process 1968\. Refer to [The `/dev/fd` Directory](ch05.html#the_solidus_dev_solidus_fd_directory
    "The /dev/fd Directory") for further information.
  prefs: []
  type: TYPE_NORMAL
- en: As a convenience, any process can access its own `/proc/`*PID* directory using
    the symbolic link `/proc/self`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threads: the `/proc/`*PID*`/task` directory'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Linux 2.4 added the notion of thread groups to properly support the POSIX threading
    model. Since some attributes are distinct for the threads in a thread group, Linux
    2.4 added a `task` subdirectory under the `/proc/`*PID* directory. For each thread
    in this process, the kernel provides a subdirectory named `/proc/`*PID*`/task/`*TID*,
    where *TID* is the thread ID of the thread. (This is the same number as would
    be returned by a call to *gettid()* in the thread.)
  prefs: []
  type: TYPE_NORMAL
- en: Under each `/proc/`*PID*`/task/`*TID* subdirectory is a set of files and directories
    exactly like those that are found under `/proc/`*PID*. Since threads share many
    attributes, much of the information in these files is the same for each of the
    threads in the process. However, where it makes sense, these files show distinct
    information for each thread. For example, in the `/proc/`*PID*`/task/`*TID*`/status`
    files for a thread group, *State*, *Pid*, *SigPnd*, *SigBlk*, *CapInh*, *CapPrm*,
    *CapEff*, and *CapBnd* are some of the fields that may be distinct for each thread.
  prefs: []
  type: TYPE_NORMAL
- en: System Information Under `/proc`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Various files and subdirectories under `/proc` provide access to system-wide
    information. A few of these are shown in [Figure 12-1](ch12.html#selected_files_and_subdirectories_under
    "Figure 12-1. Selected files and subdirectories under /proc").
  prefs: []
  type: TYPE_NORMAL
- en: Many of the files shown in [Figure 12-1](ch12.html#selected_files_and_subdirectories_under
    "Figure 12-1. Selected files and subdirectories under /proc") are described elsewhere
    in this book. [Table 12-2](ch12.html#purpose_of_selected_solidus_proc_subdire
    "Table 12-2. Purpose of selected /proc subdirectories") summarizes the general
    purpose of the `/proc` subdirectories shown in [Figure 12-1](ch12.html#selected_files_and_subdirectories_under
    "Figure 12-1. Selected files and subdirectories under /proc").
  prefs: []
  type: TYPE_NORMAL
- en: Table 12-2. Purpose of selected `/proc` subdirectories
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory | Information exposed by files in this directory |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc` | Various system information |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc/net` | Status information about networking and sockets |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc/sys/fs` | Settings related to file systems |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc/sys/kernel` | Various general kernel settings |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc/sys/net` | Networking and sockets settings |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc/sys/vm` | Memory-management settings |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc/sysvipc` | Information about System V IPC objects |'
  prefs: []
  type: TYPE_TB
- en: Accessing `/proc` Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Files under `/proc` are often accessed using shell scripts (most `/proc` files
    that contain multiple values can be easily parsed with a scripting language such
    as Python or Perl). For example, we can modify and view the contents of a `/proc`
    file using shell commands as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`/proc` files can also be accessed from a program using normal file I/O system
    calls. Some restrictions apply when accessing these files:'
  prefs: []
  type: TYPE_NORMAL
- en: Some `/proc` files are read-only; that is, they exist only to display kernel
    information and can’t be used to modify that information. This applies to most
    files under the `/proc/`*PID* directories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some `/proc` files can be read only by the file owner (or by a privileged process).
    For example, all files under `/proc/`*PID* are owned by the user who owns the
    corresponding process, and on some of these files (e.g., `/proc/`*PID*`/environ`),
    read permission is granted only to the file owner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than the files in the `/proc/`*PID* subdirectories, most files under `/proc`
    are owned by *root*, and the files that are modifiable can be modified only by
    *root*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Selected files and subdirectories under /proc](figs/web/12-1_SYSINFO-procfs.png.jpg)Figure 12-1. Selected
    files and subdirectories under `/proc`'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing files in `/proc/`*PID*
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `/proc/`*PID* directories are volatile. Each of these directories comes
    into existence when a process with the corresponding process ID is created and
    disappears when that process terminates. This means that if we determine that
    a particular `/proc/`*PID* directory exists, then we need to cleanly handle the
    possibility that the process has terminated, and the corresponding `/proc/`*PID*
    directory has been deleted, by the time we try to open a file in that directory.
  prefs: []
  type: TYPE_NORMAL
- en: Example program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Example 12-1](ch12.html#accessing_solidus_proc_solidus_sys_solid "Example 12-1. Accessing
    /proc/sys/kernel/pid_max") demonstrates how to read and modify a `/proc` file.
    This program reads and displays the contents of `/proc/sys/kernel/pid_max`. If
    a command-line argument is supplied, the program updates the file using that value.
    This file (which is new in Linux 2.6) specifies an upper limit for process IDs
    ([Process ID and Parent Process ID](ch06.html#process_id_and_parent_process "Process
    ID and Parent Process ID")). Here is an example of the use of this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Example 12-1. Accessing `/proc/sys/kernel/pid_max`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'System Identification: *uname()*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *uname()* system call returns a range of identifying information about the
    host system on which an application is running, in the structure pointed to by
    *utsbuf*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns 0 on success, or -1 on error
  prefs: []
  type: TYPE_NORMAL
- en: 'The *utsbuf* argument is a pointer to a *utsname* structure, which is defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: SUSv3 specifies *uname()*, but leaves the lengths of the various fields of the
    *utsname* structure undefined, requiring only that the strings be terminated by
    a null byte. On Linux, these fields are each 65 bytes long, including space for
    the terminating null byte. On some UNIX implementations, these fields are shorter;
    on others (e.g., Solaris), they range up to 257 bytes.
  prefs: []
  type: TYPE_NORMAL
- en: The *sysname*, *release*, *version*, and *machine* fields of the *utsname* structure
    are automatically set by the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Linux, three files in the directory `/proc/sys/kernel` provide access to
    the same information as is returned in the *sysname*, *release*, and *version*
    fields of the *utsname* structure. These read-only files are, respectively, `ostype`,
    `osrelease`, and `version`. Another file, `/proc/version`, includes the same information
    as in these files, and also includes information about the kernel compilation
    step (i.e., the name of the user that performed the compilation, the name of host
    on which the compilation was performed, and the *gcc* version used).
  prefs: []
  type: TYPE_NORMAL
- en: The *nodename* field returns the value that was set using the *sethostname()*
    system call (see the manual page for details of this system call). Often, this
    name is something like the hostname prefix from the system’s DNS domain name.
  prefs: []
  type: TYPE_NORMAL
- en: The *domainname* field returns the value that was set using the *setdomainname()*
    system call (see the manual page for details of this system call). This is the
    Network Information Services (NIS) domain name of the host (which is not the same
    thing as the host’s DNS domain name).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *gethostname()* system call, which is the converse of *sethostname()*, retrieves
    the system hostname. The system hostname is also viewable and settable using the
    *hostname(1)* command and the Linux-specific `/proc/hostname` file.
  prefs: []
  type: TYPE_NORMAL
- en: The *getdomainname()* system call, which is the converse of *setdomainname()*,
    retrieves the NIS domain name. The NIS domain name is also viewable and settable
    using the *domainname(1)* command and the Linux-specific `/proc/domainname` file.
  prefs: []
  type: TYPE_NORMAL
- en: The *sethostname()* and *setdomainname()* system calls are rarely used in application
    programs. Normally, the hostname and NIS domain name are established at boot time
    by startup scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program in [Example 12-2](ch12.html#using_uname_open_parenthesis_close_paren
    "Example 12-2. Using uname()") displays the information returned by *uname()*.
    Here’s an example of the output we might see when running this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Example 12-2. Using *uname()*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/proc` file system exposes a range of kernel information to application
    programs. Each `/proc/`*PID* subdirectory contains files and subdirectories that
    provide information about the process whose ID matches *PID*. Various other files
    and directories under `/proc` expose system-wide information that programs can
    read and, in some cases, modify.
  prefs: []
  type: TYPE_NORMAL
- en: The *uname()* system call allows us to discover the UNIX implementation and
    the type of machine on which an application is running.
  prefs: []
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Further information about the `/proc` file system can be found in the *proc(5)*
    manual page, in the kernel source file `Documentation/filesystems/proc.txt`, and
    in various files in the `Documentation/sysctl` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that lists the process ID and command name for all processes
    being run by the user named in the program’s command-line argument. (You may find
    the *userIdFromName()* function from [Example 8-1](ch08.html#functions_to_convert_user_and_group_ids
    "Example 8-1. Functions to convert user and group IDs to and from user and group
    names"), in [Example program](ch08.html#example_program-id5 "Example program"),
    useful.) This can be done by inspecting the *Name:* and *Uid:* lines of all of
    the `/proc/`*PID*`/status` files on the system. Walking through all of the `/proc/`*PID*
    directories on the system requires the use of *readdir(3)*, which is described
    in Section 18.8. Make sure your program correctly handles the possibility that
    a `/proc/`*PID* directory disappears between the time that the program determines
    that the directory exists and the time that it tries to open the corresponding
    `/proc/`*PID*`/status` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that draws a tree showing the hierarchical parent-child relationships
    of all processes on the system, going all the way back to *init*. For each process,
    the program should display the process ID and the command being executed. The
    output of the program should be similar to that produced by *pstree(1)*, although
    it does need not to be as sophisticated. The parent of each process on the system
    can be found by inspecting the *PPid:* line of all of the `/proc/`*PID*`/status`
    files on the system. Be careful to handle the possibility that a process’s parent
    (and thus its `/proc/`*PID* directory) disappears during the scan of all `/proc/`*PID*
    directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that lists all processes that have a particular file pathname
    open. This can be achieved by inspecting the contents of all of the `/proc/`*PID*`/fd/*`
    symbolic links. This will require nested loops employing *readdir(3)* to scan
    all `/proc/`*PID* directories, and then the contents of all `/proc/`*PID/*`fd`
    entries within each `/proc/`*PID* directory. To read the contents of a `/proc/`*PID*`/fd/`*n*
    symbolic link requires the use of *readlink()*, described in Section 18.5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
