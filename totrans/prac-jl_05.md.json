["```\n   julia> using Plots\n\n➊ julia> backends()\n   10-element Vector{Symbol}:\n    :pyplot\n    :unicodeplots\n    :plotly\n    :plotlyjs\n    :gr\n    :pgfplo\n    :pgfplotsx\n    :inspectdr\n    :hdf5\n    :gaston\n\n➋ julia> backend()\n   Plots.GRBackend()\n\n➌ julia> unicodeplots()\n   Plots.UnicodePlotsBackend()\n\n   julia> hdf5()\n   ERROR: ArgumentError: Package HDF5 not found in current path:\n   - Run `import Pkg; Pkg.add(\"HDF5\")` to install the HDF5 package.\n\n➍ (@v1.6) pkg> add HDF5\n      Resolving package versions...\n       Updating `~/.julia/environments/v1.6/Project.toml`\n     [f67ccb44] + HDF5 v0.15.6\n     No Changes to `~/.julia/environments/v1.6/Manifest.toml`\n\n   julia> hdf5()\n   Plots.HDF5Backend()\n\n   julia> backend()\n   Plots.HDF5Backend()\n```", "```\njulia> gr()\nPlots.GRBackend()\n\njulia> plot([0, 3, 1, 4, 1])\n```", "```\njulia> plot([0, 0.13, 0.38, 0.88, 1.88], [0, 3, 1, 4, 1])\n```", "```\njulia> f(x) = sin(1/x)\nf (generic function with 1 method)\n\njulia> x = π/1000:π/1000:π\n0.0031415926535897933:0.0031415926535897933:3.14\n\njulia> plot(x, f.(x))\n```", "```\njulia> x = 0:5π/1000:5π\njulia> plot([x; 5π .+ x], [sin.(x); -exp.(-x .* 0.2) .* sin.(x)])\n```", "```\njulia> plot(sin, -π, π)\n\njulia> plot!(cos)\n\njulia> plot!(f)\n```", "```\njulia> parabola = plot(x -> x^2);\n\njulia> ps = plot(sin, 0, 2π);\n\njulia> plot!(ps, cos);\n\njulia> plot(ps, plot(f), plot(s -> s^3), parabola)\n```", "```\njulia> function ginger(x, y, a)\n           x2 = 1.0 - y + a*abs(x)\n           y2 = x\n           x2, y2\n       end\n```", "```\njulia> x = [20.0]; y = [9.0];\njulia> for i in 1:4000\n        ➊ x2, y2 = ginger(x[end], y[end], 1.76)\n           push!(x, x2)\n           push!(y, y2)\n       end\n```", "```\njulia> g(x, y=2) = x + y\ng (generic function with 2 methods)\n\njulia> g(4)\n6\n\njulia> g(4, 9)\n13\n```", "```\n   julia> p(x; y=2) = x + y\n   p (generic function with 1 method)\n\n➊ julia> p(4)\n   6\n\n   julia> p(4, 5)\n   ERROR: MethodError: no method matching p(::Int64, ::Int64)\n   Closest candidates are:\n     p(::Any; y) at REPL[346]:1\n\n   julia> p(4; y=5)\n   9\n```", "```\njulia> p1 = plot(sin, cos, 0, 2π; title=\"A Circle\", ratio=1,\n                 grid=false, ticks=false, legend=false)\n\njulia> p2 = plot(x -> x^2, -1, 1; title=\"A Parabola\",\n                 gridalpha=0.4, gridstyle=:dot, legend=false)\n\njulia> plot(p1, p2; plot_title=\"Two Shapes\", plot_titlefontsize=20)\n```", "```\njulia> plot()\n\njulia> for n = 1:5\n           plot!(x -> x^n; lw=3, ls=:auto, label=n)\n       end\n\njulia> plot!(; legend=:topleft, legendtitle=\"Exponent\")\n```", "```\njulia> plot()\n\njulia> for n = 1:5\n           xlabel = (0.2 + 0.12n)\n        ➊ ylabel = xlabel^n\n           plot!(x -> x^n; lw=3, ls=:auto,\n                      annotation=(xlabel, ylabel, n),\n                      annotationfontsize=25)\n       end\n\njulia> using LaTeXStrings\n\njulia> plot!(; legend=false, xguide=\"x\", yguide=\"y\", guidefontsize=18,\n        ➋ title=L\"x^n \\textrm{~labeled~by~}n\", titlefontsize=30)\n```", "```\n   julia> sc = scatter(x, y; smooth=true, ms=1, legend=false,\n                       xguide=\"x\", yguide=\"y\", guidefontsize=18)\n\n   julia> pl = plot(x[1:100]; smooth=true, legend=false)\n\n➊ julia> pl = plot!(x[1:100]; lc=:lightgray, legend=false,\n                     xguide=\"iteration\", yguide=\"x\", guidefontsize=18)\n\n   julia> plot(sc, pl, plot_title=\"Gingerbread map with a = 1.6\",\n               plot_titlefontsize=22)\n```", "```\nscatter(x, y; ms=0.1, legend=false)\n\nlens!([-26, -22], [31, 38];\n      inset=(1, bbox(0.1, 0, 0.3, 0.3)),\n   ➊ ticks=false, framestyle=:box, subplot=2,\n      linecolor=:green, linestyle=:dot)\n```", "```\nsurface(x, x, (x, y) -> exp(-(0.05x^2 + y^2)/.1);\n        fillalpha=0.5, camera=(45, 50), c=[Gray(0), Gray(0.8)],\n        xrotation=45, yrotation=-45)\n```", "```\nheatmap(x, x, (x, y) -> exp(-(0.05x^2 + y^2)/.1);\n               c=:grays)\n```", "```\ncontour(x, x, (x, y) -> exp(-(0.05x^2 + y^2)/.1);\n               clabels=true, levels=[0.1, 0.3, 0.5, 0.7, 0.9, 1.0],\n               colorbar=false, framestyle=:box)\n```", "```\ncontour(x, x, (x, y) -> exp(-(0.05x^2 + y^2)/.1);\n               clabels=true, levels=[0.1, 0.3, 0.5, 0.7, 0.9, 1.0],\n               fill=true, c=[Gray(0.4), :white])\n```", "```\njulia> t = 0:2π/100:2π;\n\njulia> xp = sin.(3 .* t);\n\njulia> yp = cos.(3 .* t);\n\njulia> zp = t .* 0.2\n\njulia> plot(xp, yp, zp; lw=3, gridalpha=0.4, camera=(30, 50))\n```", "```\njulia> xc = 0:.3:π;\n\njulia> yc = sin.(xc);\n\njulia> quiver(xc, yc; quiver=(xc .- π/2, yc .- 0.25), lw=3)\n```", "```\nx = []; y = []; z = [];\n\nfor i in 0:20, j in 0:20, k in 0:20\n    push!(x, i/10 - 1)\n    push!(y, j/10 - 1)\n    push!(z, k/10 - 1)\nend\n```", "```\npot(x, y, z) = 1 / sqrt(x^2 + y^2 + z^2)\nscatter(x, y, z;  ms=min.(pot.(x, y, z), 5), ma=0.4, legend=false)\n```", "```\nplot(s[1], s[2], s[3], s[4]; layout=(1, 4))\n```", "```\nplot(s[1], s[2], s[3], s[4];\n     layout=grid(2, 2; widths=(0.2, 0.8), heights=(0.7, 0.3)))\n```", "```\nplot(s[1], s[2], s[3], s[4], s[5], s[6];\n     layout =  @layout [ a a a\n                          a a\n                           a   ] )\n```", "```\nplot(s[1], s[2], s[3], s[4], s[5], s[6];\n     layout =  @layout [ a a a\n                          a{0.68w} a\n                            a{0.5h} ])\n```", "```\nplot(s[1], s[2], s[3], s[4], s[5], s[6];\n     layout=@layout [ grid(2, 2) a{0.3w}\n                            b{0.2h} ])\n```", "```\nplot!(x -> sin(7x); inset=bbox(0.2, 0.2, 0.3, 0.3), subplot=7,\n      background_inside=RGBA(1, 1, 1, 0.3), lw=5, framestyle=:box,\n      legend=false, lc=:black)\n```"]