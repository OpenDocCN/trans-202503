- en: '**7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHISHING AND DEEPFAKES**
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t believe anything you read on the net. Except this. Well, including this,
    I suppose.*'
  prefs: []
  type: TYPE_NORMAL
- en: –Douglas Adams
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hackers use *social engineering* techniques to trick victims into giving them
    access to their systems. Social engineering is the use of technology to psychologically
    influence a person’s behavior. These techniques have been used to steal passwords,
    destabilize governments, and rig elections.
  prefs: []
  type: TYPE_NORMAL
- en: You might be familiar with social engineering attacks that attempt to bait users
    into taking a particular action. These are referred to as *phishing* attacks.
    But savvy computer users can usually identify fake emails quickly and spam filters
    rapidly eliminate fake emails based on content and spelling errors, meaning that
    poorly crafted attacks are easily detected.
  prefs: []
  type: TYPE_NORMAL
- en: Yet with the proper bait, a phishing attack can be very successful. In this
    chapter, we’ll look at three social engineering techniques that allow hackers
    to create fake emails, websites, and videos, and then we’ll combine these techniques
    into a single coordinated attack.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Sophisticated and Sneaky Social Engineering Attack**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here’s an example of an attack you could conduct using the techniques covered
    in this chapter. The attack begins with a hacker sending a fake email from Facebook
    that states the victim has been tagged in a photo. When the victim clicks the
    link in the email, they’re taken to a fake Facebook login screen. After attempting
    to log in, the victim is redirected to the correct Facebook login page and their
    username and password are sent to the hacker. Now the victim will be able to successfully
    log in, likely believing they simply entered the wrong password on their first
    attempt.
  prefs: []
  type: TYPE_NORMAL
- en: Email-based social engineering attacks like this one can also be combined with
    media-based social engineering attacks. For example, a hacker might also create
    a voicemail or video message from a spouse telling a victim to expect a particular
    email or text message. Or they might create a deepfake video of a CEO instructing
    their employees to expect a particular email.
  prefs: []
  type: TYPE_NORMAL
- en: '**Faking Emails**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To understand how attackers can send fake emails, you must first understand
    how email works in general. [Figure 7-1](ch07.xhtml#ch7fig1) shows an overview
    of the email exchange process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: The email exchange process*'
  prefs: []
  type: TYPE_NORMAL
- en: Email relies on a collection of *mail servers*, and each email domain (for example,
    *@virginia.edu*) is associated with one or more mail servers that sort incoming
    messages into their appropriate mailboxes and sends outgoing messages to other
    mail servers. When *[alice@companyX.com](mailto:alice@companyX.com)* wants to
    send an email to *[john@companyY.com](mailto:john@companyY.com)*, she uploads
    her email to her company’s mail server, which then places the email in its outgoing
    queue. Once the email reaches the head of the outgoing queue, the server does
    a DNS lookup to discover the IP address of John’s mail server.
  prefs: []
  type: TYPE_NORMAL
- en: Next, Alice’s mail server sets up a TCP connection with John’s mail server,
    and uses the *simple mail transfer protocol (SMTP)* to send the email to John’s
    mail server. SMTP is a text-based protocol that allows mail servers to exchange
    information. A secure version of the protocol, SMTPS, exchanges messages over
    a TLS connection.
  prefs: []
  type: TYPE_NORMAL
- en: When John’s mail server receives Alice’s email, it places the email in John’s
    mailbox. John then retrieves the email by connecting to his company’s mail server.
  prefs: []
  type: TYPE_NORMAL
- en: '***Performing a DNS Lookup of a Mail Server***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can perform a DNS lookup of someone’s mail server yourself by using the
    `dig` command. For example, let’s discover the IP address and URL of the *[gmail.com](http://gmail.com)*
    mail server. To do this, we use the `mx` flag to display the MX (mail exchanger)
    record, which contains information about the mail server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are multiple mail servers and each server is assigned a priority. The
    mail server with the lowest number ➊ is given the highest priority and is one
    that you should connect to first. So *gmail-smtp-in.l.google.com* is an SMTP server
    that accepts a connection on port 25.
  prefs: []
  type: TYPE_NORMAL
- en: '***Communicating with SMTP***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An SMTP communication reads just like any conversation–with some special codes,
    of course. Let’s take a look at these messages to better understand how the protocol
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s illegal and unethical to hack machines you don’t own (and, of course,
    we’ll want to hack SMTP eventually), so let’s use the SMTP server running on port
    25 of our Metasploitable virtual machine. Ensure that Kali Linux and pfSense are
    running. Next, launch the Metasploitable virtual machine and then log in to it
    using the username **msfadmin** and password **msfadmin**. Run the following command
    to obtain its IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The value after `inet addr:` ➊ is the IP address. Remember, this address may
    be different in your lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `netcat` on the Kali Linux virtual machine to connect to port 25 on that
    IP address by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After the connection is established, the server will respond with a `220` code
    indicating that you’ve successfully connected. Here, you can also see that the
    Metasploitable machine uses an open source Postfix mail server that supports the
    *extended simple mail transfer protocol (ESMTP)*.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve received the `220` message, respond with a `HELO` message. Yeah,
    it’s really “HELO” (not a typo). I’ve marked the client request with the tag *Client:*
    and the server’s response with the tag *Server:* for clarity. These tags are not
    part of the exchange.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the deception begins. In your `HELO` message, you can pretend
    to be anyone you want. Here, we pretend to be a *secret.gov* server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When the server receives our message, it should respond with a `250` message
    confirming receipt. Some mail servers include a fun message like “gmail server
    at your service.” Now you also know the identity of the server to which you’re
    sending the mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the deception deepens: we pretend to be sending mail from `head @secret.gov`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The server responds with a `250 Ok` message. Great. It believes us. Next, we
    send a `RCPT TO:` message indicating our email’s recipient. Let’s say we’re sending
    a message to the `sys` account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If the Metasploitable machine had an associated domain, like *virginia.edu*,
    we would have sent `RCPT TO: <sys@virgina.edu>` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: If this email address is registered with the server, it will respond with a
    `250 Ok` message, as shown here. Otherwise, it would respond with an error code.
  prefs: []
  type: TYPE_NORMAL
- en: You might already be thinking of ways a hacker could exploit this behavior to
    recover a list of emails from the server, but put those thoughts aside for now.
    It’s time to send the body of the email. The `DATA` command indicates to the server
    that we’re ready to upload our email.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The server responds with a `354` message, which indicates that it is ready to
    receive the email. It also includes instructions on how to end your email. In
    this case, you’d end your email with `<CR><LF>.<CR><LF>`, where `<CR>` and `<LF>`
    represent the *carriage return* and *line feed* characters, respectively. These
    are legacy characters from the days when computer keyboards closely resembled
    typewriters. (SMTP was invented in 1982, and is still used by modern mail servers
    like Gmail despite its age.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the email we send:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the spoofed email was correctly received, run the following
    command on your Metasploitable virtual machine to read `sys`’s mailbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a message from `head@secret.gov` with the message body you entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You’ve sent your first fake email.
  prefs: []
  type: TYPE_NORMAL
- en: '***Writing an Email Spoofer***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Executing the SMTP protocol by hand can be tedious, so let’s write a short Python
    program that sends a fake email using the procedure you just learned. On your
    Kali Linux virtual machine, create a new folder on the desktop named *spoofer*.
    Inside the *spoofer* folder, create a Python file named *espoofer.py*, open it
    in an IDE or text editor of your choice and then copy the following code, which
    executes SMTP over a TCP connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We send our first message to the server, pretending to be the mail server associated
    with the from address ➊. Next, we print out the response we received from the
    server ➋. We continue sending data before ending the message ➌ by sending `<CR><LF>.<CR><LF>`.
    Python represents the `<CR>` and `<LF>` characters with `\r` and `\n`. Finally,
    we read in the command line parameters that specify our target mail server and
    headers for our email ➍.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s run the Python program. Open the terminal and navigate to the folder
    containing *espoofer.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the *espoofer.py* program with these arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will send an email from `hacking@virginia.edu` to `sys` with the message
    “Hello from the other side!” in the messages body.
  prefs: []
  type: TYPE_NORMAL
- en: This attack won’t always work; some SMTP servers may implement defensive features,
    such as *domain-based message authentication, reporting, and conformance (DMARC)*,
    which allows the receiving SMTP server to verify that SMTP messages are coming
    from an authorized IP address. Still, there are always other ways to be tricky.
    For example, you could register a domain name that is similar to the domain you’re
    attacking. Tools like URLCrazy allow you to quickly search for domains similar
    to the one you are attacking. To reduce spam, some ISPs have been blocking packets
    on port 25\. So if you want to audit a system outside of your virtual environment,
    you’ll need to route your traffic through a *virtual private network (VPN)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Spoofing SMTPS Emails***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the previous examples, we sent SMTP messages over an unencrypted channel.
    Now let’s look at SMTPS, which sends the SMTP messages over a channel encrypted
    using TLS. Our Metasploitable virtual machine doesn’t support SMTPS, so we’ll
    connect to a Gmail SMTP server that does and send ourselves a fake email.
  prefs: []
  type: TYPE_NORMAL
- en: If your ISP allows, or if you have a VPN, you can use the command `openssl s_client`
    with Google’s SMTP server (*gmail-smtp-in.l.google.com*), which accepts incoming
    SMTP connections from other SMTP servers. After you’re connected, you can manually
    execute the exchange and send yourself a spoofed email.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s write a program that uses SMTPS to interface with mail servers. Some
    servers support only encrypted communication over SMTPS, so it may not always
    be possible to use unencrypted SMTP to spoof. Python’s `smtplib` library encapsulates
    the functionality we discussed earlier in this chapter. We’ll use it to send a
    fake email using SMTPS. Open your preferred text editor, copy the following code,
    and call your program *secureSpoofer.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Instead of manually entering an email message, we’ll read it from a file ➊.
    This will allow us to use email templates, which make the fake emails look more
    realistic. These templates are written in HTML, and you can find them for free
    by searching online for “email phishing templates.” After you’ve loaded the message,
    start a TLS session ➋.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample email template (*template.html*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Make it your own by editing the text ➋, name ➊, and link ➌. Great: you know
    how to send a fake email.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Faking Websites**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The email we’ll send as part of our attack will include a link that directs
    the user to a fake site. To convince users to enter their credentials, we’ll make
    this site a clone of some popular website’s login page, which is surprisingly
    easy to do.
  prefs: []
  type: TYPE_NORMAL
- en: Web pages are made up of HTML and JavaScript files. Every time a browser visits
    a page, it downloads a copy of these HTML and JavaScript files and uses them to
    render the page. When a hacker visits a login page, they also obtain a copy of
    those files, and by hosting these files on their own server, a hacker can display
    a web page that looks identical to the legitimate login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'It gets worse: by modifying their local copy of the page’s HTML or JavaScript
    code, a hacker could configure the page to send the victim’s username and password
    to the hacker instead of the site. Once a user logs in, the fake page could redirect
    them to the real login page, where they’ll be able to reenter their credentials
    and successfully log in. The victim will simply think that their first attempt
    failed, completely unaware that someone has stolen their password.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s clone the Facebook login page. Open Firefox in Kali Linux and go to *[https://www.facebook.com/](https://www.facebook.com/)*.
    Save a copy of the page and associated resources by right-clicking the page and
    then selecting **Save Page As**, as shown in [Figure 7-2](ch07.xhtml#ch7fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: Using Firefox to save a copy of a web page*'
  prefs: []
  type: TYPE_NORMAL
- en: Call the file *index.html* and save it to a desktop folder called *SocialEngineering*.
    The *index.html* page is the first page a browser opens when it accesses any web
    page, so by saving that page as *index.html*, users’ browsers will automatically
    open it when they go to your site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, how could you alter the web page so that it sends the user’s username
    and password back to the hacker? Login pages often rely on an HTML `<form>` tag.
    The following code snippet represents a basic HTML form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `<form>` tags often include an attribute that specifies where to send the
    form’s data. In this example, the data is being sent to *login_service.php*. A
    hacker can send the form data to themselves instead by replacing the URL in the
    `<form>` tag with their own. This will send all the form’s data to the hacker’s
    page. Remember anything you see in your browser can be replicated with HTML, CSS,
    and JavaScript. You may just need to write some extra code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and navigate to the folder that contains your HTML files
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To serve this file from our own Python HTTP server, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ports lower than 1024 can only be opened with root permissions.*'
  prefs: []
  type: TYPE_NORMAL
- en: The Python 3 `https.server` utility is preinstalled on your Kali Linux virtual
    machine. To test your evil site, leave the terminal open and switch to your Ubuntu
    virtual machine. Next, access the fake site by opening Firefox and entering the
    IP address of the Kali Linux virtual machine; for example `192.168.1.103`. If
    you’ve done everything correctly, you should see your fake copy of the Facebook
    login page like the one in [Figure 7-3](ch07.xhtml#ch7fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: Fake Facebook login page hosted on the Kali Linux virtual machine*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely at the URL bar, you’ll notice that the page isn’t encrypted,
    as Facebook would normally be, and that the URL is not *[facebook.com](http://facebook.com)*.
    Not to worry: hackers have deceptive ways of hiding this, too. For example, a
    hacker could register a domain similar to Facebook’s. I checked the GoDaddy domain
    search and found that domains like *fecabeok.com* or *facebvvk.com* were still
    available. A user would need to look carefully at the URL bar to discover that
    they’ve been duped. Would you notice something wrong if you quickly glanced at
    *[https://wwww.fecabeok.com/](https://wwww.fecabeok.com/)*? We call the act of
    using URLs that look like legitimate ones *squatting*. Tools like URLCrazy will
    help you easily identify squatting URLs.'
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to create a fake site. Let’s discuss how to create fake videos.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating Deepfake Videos**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Deepfakes* are counterfeit images, videos, or sounds generated by machine
    learning algorithms. A hacker may encourage public unrest by creating a deepfake
    of a public figure. Or they might attempt to steal usernames and passwords of
    employees by creating a deepfake of a CEO instructing their employees to use a
    malicious site to reset their credentials. A hacker might also create a deepfake
    of a voicemail from a spouse with instructions to meet them somewhere or to do
    something.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll generate a deepfake video of Bob Marley speaking like
    President Obama. We’ll use a machine learning model developed by Aliaksandr Siarohin
    and others in their paper “First Order Motion Model for Image Animation.” The
    model is special because it learns the movements from an input video and uses
    these movements to animate a picture. This makes it more efficient than earlier
    techniques that required users to supply the model with multiple images.
  prefs: []
  type: TYPE_NORMAL
- en: The process has two steps. During the first step, the video is fed to a *key
    point extraction algorithm*, which learns the sparse collection of points needed
    to model facial movement in the input video. This input video is called the *driving
    video*, because it will be used to drive the animation of the picture. [Figure
    7-4](ch07.xhtml#ch7fig4) shows an illustration of the key points extracted from
    a driving video of President Obama speaking.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-4: Learning key points and motion from input video*'
  prefs: []
  type: TYPE_NORMAL
- en: After the key points for each frame are extracted, they’re sent to a machine
    learning algorithm that learns how the points move. This process is called *motion
    detection*.
  prefs: []
  type: TYPE_NORMAL
- en: During the second step, the machine learning algorithm warps the input picture
    and generates the animated video. [Figure 7-5](ch07.xhtml#ch7fig5) shows an overview
    of the generation process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-5: Animating a static image using the learned video*'
  prefs: []
  type: TYPE_NORMAL
- en: Now you’ll generate your own deepfakes. You can view the generated video by
    visiting *[https://youtu.be/8DZHYL0qReA](https://youtu.be/8DZHYL0qReA)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Accessing Google Colab***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Instead of setting up our own machine learning development environment, we’ll
    use Google’s Colab notebooks. Google Colab is a free service that gives you access
    to Google’s computing infrastructure. I’ve modified Károly Zsolnai-Fehér’s open
    source implementation to create a simple Colab notebook that contains all the
    steps you’ll need to generate a deepfake video. You can follow along by opening
    the notebook using this link to the GitHub repository: *[https://github.com/The-Ethical-Hacking-Book/DeepFakeBob](https://github.com/The-Ethical-Hacking-Book/DeepFakeBob)*.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Colab notebook, scroll to the bottom. You should see a video like the
    one in [Figure 7-6](ch07.xhtml#ch7fig6). Press play. If the video plays, you’ve
    correctly configured your workplace.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-6: A screenshot of the final static picture, driving image, and animated
    image.*'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll modify this existing program so that you can generate your own deepfakes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Importing the Machine Learning Models***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Begin by importing the Siarohin et al. repository into your Colab notebook.
    This repository contains code that will load the machine learning models that
    we’ll use. Click the play buttons next to the lines shown below to run these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `!` tells the Colab notebook to run the command as a shell command. Next,
    connect your Google drive folder to Colab. The Colab notebook will read the driving
    video and target photo from the your Google drive, along with the necessary configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Google Drive folder called *DeepFake* and then upload your driving
    video and target image to this folder. The GitHub repository at *[https://github.com/The-Ethical-Hacking-Book/DeepFakeBob](https://github.com/The-Ethical-Hacking-Book/DeepFakeBob)*
    contains an example driving video of President Obama and target picture of Bob
    Marley. Copy these into your *DeepFake* folder along with *vox-adv-cpk.pth.tar*.
    This file contains the *weights* for the models, which are the values associated
    with the connections in an artificial neural network. *Artificial neural networks*
    are computer models that attempt to model the behavior of biological neurons in
    the brain. When a brain learns, it forms new connections between neurons. Similarly,
    an artificial neural network forms new connections when it learns. A weight of
    1 means that a neuron is connected to another and a weight of 0 means they aren’t
    connected. The weights in an artificial neural network can be any value between
    0 and 1, indicating their degree of connectedness.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’ve uploaded the files to the Google Drive folder, switch to the Colab
    notebook and connect your Google Drive by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The Colab notebook will ask you to obtain an authentication code. Click the
    link it provides and copy and paste the authentication code into the box labelled
    Colab. Ensure that you’ve successfully connected your workspace by running the
    following command on the your *DeepFake* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you see all three files listed, you’ve successfully uploaded the files and
    connected your Google Drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, run the following code to import and resize the image and video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We import the the libraries needed to obtain and resize the image ➊. Next, we
    import the source image of Bob Marley and the driving video of President Obama
    ➋. Then, we resize both the source image and driving video to 256 *×* 256 pixels
    ➌. This is the image size that our model expects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s load weights for the key-point detector `(kp\_detector)` and media generator
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Loading the models can take some time. When the process completes, apply these
    models to detect the key points and generate the animation by running the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We import the `make_animation()` function ➊, which applies the key-point detection
    and media generator models. Then, we obtain the predictions ➋, which are the frames
    representing the animated picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll put these frames together to create the deepfake video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve done everything correctly, you should see an HTML video playing your
    generated video. Congratulations! You have created your first deepfake video.
    Now go ahead and share your video on YouTube, and don’t forget to tag this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following exercises are designed to extend your understanding of deepfakes
    and phishing by introducing voice cloning and the *King Phisher* tool. *Voice
    cloning* is a technique that allows a computer to mimic a person’s voice. The
    King Phisher tool allows you to perform phishing attacks at scale.
  prefs: []
  type: TYPE_NORMAL
- en: '***Voice Cloning***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this chapter, we generated a deepfake video. But the video only animated
    the picture; it didn’t generate any sound. Voice cloning techniques use machine
    learning to mimic a person’s voice. A group of researchers at Google have built
    an advanced voice cloner called Tacotron 2\. You can listen to audio samples from
    Tacotron 2 by visiting *[https://google.github.io/tacotron/publications/tacotron2/index.html](https://google.github.io/tacotron/publications/tacotron2/index.html)*.
    The web page also contains human and machine-generated voices side by side. Can
    you tell the difference?
  prefs: []
  type: TYPE_NORMAL
- en: Tacotron 2 requires only five seconds of audio to mimic someone’s voice. Although
    Google hasn’t released its implementation of Tacotron 2, other developers have
    created the system described in Google’s paper introducing the concept. You can
    find a link to one implementation at *[https://github.com/Rayhane-mamah/Tacotron-2](https://github.com/Rayhane-mamah/Tacotron-2)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up this system can be a daunting task. Not to worry: you can always
    try other, more accessible implementations of earlier voice cloning systems, such
    as those at *[https://github.com/CorentinJ/Real-Time-Voice-Cloning](https://github.com/CorentinJ/Real-Time-Voice-Cloning)*.
    Try generating a voice clone of a famous person. And if you don’t feel like coding,
    there are commercial tools like Descript *[https://www.descript.com/](https://www.descript.com/)*
    that allow you to clone your own voice with only a few mouse clicks.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Phishing at Scale***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'King Phisher is a mass phishing tool that comes with Kali Linux. You can use
    this exercise as an opportunity to familiarize yourself with the tool and its
    capabilities. Start the necessary background services by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Then, start the King Phisher application by searching for it in the **Kali Application**
    menu ([Figure 7-7](ch07.xhtml#ch7fig7)). It takes a couple seconds to launch the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch07fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-7: The King Phisher interface*'
  prefs: []
  type: TYPE_NORMAL
- en: After King Phisher has launched, you can log in using your Kali Linux machine’s
    username and password because the server is hosted locally. Now have fun creating
    a new phishing campaign. Remember to act ethically!
  prefs: []
  type: TYPE_NORMAL
- en: '***SMTP Auditing***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another great tool for testing the security of an SMTP server is `swaks`, and
    it comes preinstalled in Kali Linux. You can deliver a test email with a single
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a snippet of the results of running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view all the amazing things that `swaks` can do by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
