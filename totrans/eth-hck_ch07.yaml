- en: '**7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7'
- en: PHISHING AND DEEPFAKES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络钓鱼与深度伪造**
- en: '*Don’t believe anything you read on the net. Except this. Well, including this,
    I suppose.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要相信网络上的任何东西，除了这一条。当然，包括这一条，我想也是。*'
- en: –Douglas Adams
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: – 道格拉斯·亚当斯
- en: '![image](../images/common.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Hackers use *social engineering* techniques to trick victims into giving them
    access to their systems. Social engineering is the use of technology to psychologically
    influence a person’s behavior. These techniques have been used to steal passwords,
    destabilize governments, and rig elections.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客使用*社会工程*技术来诱骗受害者让他们访问自己的系统。社会工程是利用技术在心理上影响一个人行为的手段。这些技术曾被用来窃取密码、破坏政府和操纵选举。
- en: You might be familiar with social engineering attacks that attempt to bait users
    into taking a particular action. These are referred to as *phishing* attacks.
    But savvy computer users can usually identify fake emails quickly and spam filters
    rapidly eliminate fake emails based on content and spelling errors, meaning that
    poorly crafted attacks are easily detected.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉那些试图诱导用户采取特定行动的社会工程攻击，这些攻击被称为*网络钓鱼*攻击。但精明的计算机用户通常能够迅速识别伪造的电子邮件，并且垃圾邮件过滤器会迅速根据内容和拼写错误筛除伪造邮件，这意味着粗糙的攻击很容易被发现。
- en: Yet with the proper bait, a phishing attack can be very successful. In this
    chapter, we’ll look at three social engineering techniques that allow hackers
    to create fake emails, websites, and videos, and then we’ll combine these techniques
    into a single coordinated attack.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在合适的诱饵下，网络钓鱼攻击可以非常成功。在本章中，我们将介绍三种社会工程技术，允许黑客伪造电子邮件、网站和视频，接着我们将把这些技术结合成一个协调一致的攻击。
- en: '**A Sophisticated and Sneaky Social Engineering Attack**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**一种复杂而狡猾的社会工程攻击**'
- en: Here’s an example of an attack you could conduct using the techniques covered
    in this chapter. The attack begins with a hacker sending a fake email from Facebook
    that states the victim has been tagged in a photo. When the victim clicks the
    link in the email, they’re taken to a fake Facebook login screen. After attempting
    to log in, the victim is redirected to the correct Facebook login page and their
    username and password are sent to the hacker. Now the victim will be able to successfully
    log in, likely believing they simply entered the wrong password on their first
    attempt.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，展示了你可以使用本章介绍的技术进行的攻击。攻击从黑客发送一封来自Facebook的伪造邮件开始，声称受害者在一张照片中被标记。当受害者点击邮件中的链接时，他们会被引导到一个假的Facebook登录页面。在尝试登录后，受害者会被重定向到正确的Facebook登录页面，他们的用户名和密码被发送给黑客。现在，受害者将能够成功登录，并可能认为他们只是第一次输入错误的密码。
- en: Email-based social engineering attacks like this one can also be combined with
    media-based social engineering attacks. For example, a hacker might also create
    a voicemail or video message from a spouse telling a victim to expect a particular
    email or text message. Or they might create a deepfake video of a CEO instructing
    their employees to expect a particular email.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基于电子邮件的社会工程攻击可以与基于媒体的社会工程攻击相结合。例如，黑客可能还会制作一条配偶的语音邮件或视频信息，告诉受害者期待一封特定的电子邮件或短信。或者他们可能会制作一段CEO的深度伪造视频，指示员工们期待一封特定的电子邮件。
- en: '**Faking Emails**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**伪造电子邮件**'
- en: To understand how attackers can send fake emails, you must first understand
    how email works in general. [Figure 7-1](ch07.xhtml#ch7fig1) shows an overview
    of the email exchange process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解攻击者如何发送伪造的电子邮件，首先你需要了解电子邮件是如何工作的。[图7-1](ch07.xhtml#ch7fig1)展示了电子邮件交换过程的概览。
- en: '![image](../images/ch07fig01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig01.jpg)'
- en: '*Figure 7-1: The email exchange process*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：电子邮件交换过程*'
- en: Email relies on a collection of *mail servers*, and each email domain (for example,
    *@virginia.edu*) is associated with one or more mail servers that sort incoming
    messages into their appropriate mailboxes and sends outgoing messages to other
    mail servers. When *[alice@companyX.com](mailto:alice@companyX.com)* wants to
    send an email to *[john@companyY.com](mailto:john@companyY.com)*, she uploads
    her email to her company’s mail server, which then places the email in its outgoing
    queue. Once the email reaches the head of the outgoing queue, the server does
    a DNS lookup to discover the IP address of John’s mail server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件依赖于一组*邮件服务器*，每个电子邮件域（例如，*@virginia.edu*）都与一个或多个邮件服务器关联，这些服务器会将传入的消息分类到相应的邮箱中，并将外发邮件发送到其他邮件服务器。当*[alice@companyX.com](mailto:alice@companyX.com)*想要发送邮件给*[john@companyY.com](mailto:john@companyY.com)*时，她将邮件上传到公司邮件服务器，然后将邮件放入外发队列中。一旦邮件排到外发队列的最前面，服务器会进行DNS查询以发现John的邮件服务器的IP地址。
- en: Next, Alice’s mail server sets up a TCP connection with John’s mail server,
    and uses the *simple mail transfer protocol (SMTP)* to send the email to John’s
    mail server. SMTP is a text-based protocol that allows mail servers to exchange
    information. A secure version of the protocol, SMTPS, exchanges messages over
    a TLS connection.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Alice的邮件服务器与John的邮件服务器建立TCP连接，并使用*简单邮件传输协议（SMTP）*将邮件发送到John的邮件服务器。SMTP是一个基于文本的协议，允许邮件服务器交换信息。协议的安全版本SMTPS通过TLS连接交换消息。
- en: When John’s mail server receives Alice’s email, it places the email in John’s
    mailbox. John then retrieves the email by connecting to his company’s mail server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当John的邮件服务器接收到Alice的邮件时，它会将邮件放入John的邮箱。然后，John通过连接到公司的邮件服务器来获取邮件。
- en: '***Performing a DNS Lookup of a Mail Server***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***执行DNS查找邮件服务器***'
- en: 'You can perform a DNS lookup of someone’s mail server yourself by using the
    `dig` command. For example, let’s discover the IP address and URL of the *[gmail.com](http://gmail.com)*
    mail server. To do this, we use the `mx` flag to display the MX (mail exchanger)
    record, which contains information about the mail server:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`dig`命令来自己查找某人的邮件服务器。例如，让我们发现* [gmail.com](http://gmail.com) *邮件服务器的IP地址和URL。为此，我们使用`mx`标志来显示MX（邮件交换器）记录，其中包含有关邮件服务器的信息：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are multiple mail servers and each server is assigned a priority. The
    mail server with the lowest number ➊ is given the highest priority and is one
    that you should connect to first. So *gmail-smtp-in.l.google.com* is an SMTP server
    that accepts a connection on port 25.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个邮件服务器，每个服务器都分配了一个优先级。数字最小的邮件服务器➊优先级最高，你应该首先连接这个服务器。所以，*gmail-smtp-in.l.google.com*是一个接受端口25连接的SMTP服务器。
- en: '***Communicating with SMTP***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***与SMTP通信***'
- en: An SMTP communication reads just like any conversation–with some special codes,
    of course. Let’s take a look at these messages to better understand how the protocol
    works.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP通信就像任何对话一样——当然，有一些特殊的代码。让我们来看看这些消息，以更好地理解协议是如何工作的。
- en: 'It’s illegal and unethical to hack machines you don’t own (and, of course,
    we’ll want to hack SMTP eventually), so let’s use the SMTP server running on port
    25 of our Metasploitable virtual machine. Ensure that Kali Linux and pfSense are
    running. Next, launch the Metasploitable virtual machine and then log in to it
    using the username **msfadmin** and password **msfadmin**. Run the following command
    to obtain its IP address:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客攻击你不拥有的机器是非法且不道德的（当然，我们最终会黑客SMTP），所以我们使用在Metasploitable虚拟机的端口25上运行的SMTP服务器。确保Kali
    Linux和pfSense正在运行。接下来，启动Metasploitable虚拟机并使用用户名**msfadmin**和密码**msfadmin**登录。运行以下命令获取它的IP地址：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The value after `inet addr:` ➊ is the IP address. Remember, this address may
    be different in your lab environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`inet addr:` 后面的值➊是IP地址。请记住，这个地址在你的实验室环境中可能会有所不同。'
- en: 'Use `netcat` on the Kali Linux virtual machine to connect to port 25 on that
    IP address by running the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`netcat`在Kali Linux虚拟机上连接到该IP地址的端口25，运行以下命令：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After the connection is established, the server will respond with a `220` code
    indicating that you’ve successfully connected. Here, you can also see that the
    Metasploitable machine uses an open source Postfix mail server that supports the
    *extended simple mail transfer protocol (ESMTP)*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 连接建立后，服务器将响应一个`220`代码，表示你已成功连接。在这里，你还可以看到Metasploitable机器使用的是一个开源的Postfix邮件服务器，它支持*扩展简单邮件传输协议（ESMTP）*。
- en: Once you’ve received the `220` message, respond with a `HELO` message. Yeah,
    it’s really “HELO” (not a typo). I’ve marked the client request with the tag *Client:*
    and the server’s response with the tag *Server:* for clarity. These tags are not
    part of the exchange.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到`220`消息，使用`HELO`消息进行回应。是的，它真的是“HELO”（不是拼写错误）。我已经将客户端请求标记为*Client:*，将服务器回应标记为*Server:*，以便更清晰。这些标签不是交换过程的一部分。
- en: 'This is where the deception begins. In your `HELO` message, you can pretend
    to be anyone you want. Here, we pretend to be a *secret.gov* server:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是欺骗开始的地方。在你的`HELO`消息中，你可以假装成任何你想要的人。这里，我们假装是一个*secret.gov*的服务器：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When the server receives our message, it should respond with a `250` message
    confirming receipt. Some mail servers include a fun message like “gmail server
    at your service.” Now you also know the identity of the server to which you’re
    sending the mail.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器收到我们的消息时，它应该会回应一个`250`消息，确认已接收。有些邮件服务器还会附带一个有趣的消息，比如“gmail服务器为您服务”。现在，你也知道了你发送邮件的服务器的身份。
- en: 'Now the deception deepens: we pretend to be sending mail from `head @secret.gov`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在欺骗更加深入：我们假装是从`head@secret.gov`发送邮件：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The server responds with a `250 Ok` message. Great. It believes us. Next, we
    send a `RCPT TO:` message indicating our email’s recipient. Let’s say we’re sending
    a message to the `sys` account:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器回应一个`250 Ok`的消息。太好了，它相信我们。接下来，我们发送一个`RCPT TO:`消息，表示邮件的接收者。假设我们是要发送给`sys`账户：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the Metasploitable machine had an associated domain, like *virginia.edu*,
    we would have sent `RCPT TO: <sys@virgina.edu>` instead.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '如果Metasploitable机器有一个相关域名，比如*virginia.edu*，我们本应该发送`RCPT TO: <sys@virginia.edu>`。'
- en: If this email address is registered with the server, it will respond with a
    `250 Ok` message, as shown here. Otherwise, it would respond with an error code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个邮件地址在服务器上有注册，它将以`250 Ok`的消息回应，如下所示。否则，它会回应一个错误代码。
- en: You might already be thinking of ways a hacker could exploit this behavior to
    recover a list of emails from the server, but put those thoughts aside for now.
    It’s time to send the body of the email. The `DATA` command indicates to the server
    that we’re ready to upload our email.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在想，黑客可以利用这种行为从服务器中恢复一份邮件列表，但现在先把这些想法放一边。接下来是发送邮件正文。`DATA`命令通知服务器我们准备好上传邮件了。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The server responds with a `354` message, which indicates that it is ready to
    receive the email. It also includes instructions on how to end your email. In
    this case, you’d end your email with `<CR><LF>.<CR><LF>`, where `<CR>` and `<LF>`
    represent the *carriage return* and *line feed* characters, respectively. These
    are legacy characters from the days when computer keyboards closely resembled
    typewriters. (SMTP was invented in 1982, and is still used by modern mail servers
    like Gmail despite its age.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器回应一个`354`消息，表示它准备接收邮件。它还会提供如何结束邮件的指示。在这种情况下，你可以用`<CR><LF>.<CR><LF>`来结束邮件，其中`<CR>`和`<LF>`分别表示*回车*和*换行*字符。这些是从电脑键盘与打字机相似的年代传下来的传统字符。（SMTP协议发明于1982年，尽管年代久远，现代的邮件服务器如Gmail仍在使用它。）
- en: 'Here’s the email we send:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们发送的邮件：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To verify that the spoofed email was correctly received, run the following
    command on your Metasploitable virtual machine to read `sys`’s mailbox:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证伪造的邮件是否被正确接收，在你的Metasploitable虚拟机上运行以下命令，查看`sys`的邮箱：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see a message from `head@secret.gov` with the message body you entered:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到来自`head@secret.gov`的消息，消息正文是你输入的内容：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Congratulations! You’ve sent your first fake email.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经发送了第一封假邮件。
- en: '***Writing an Email Spoofer***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***编写一个邮件伪造器***'
- en: Executing the SMTP protocol by hand can be tedious, so let’s write a short Python
    program that sends a fake email using the procedure you just learned. On your
    Kali Linux virtual machine, create a new folder on the desktop named *spoofer*.
    Inside the *spoofer* folder, create a Python file named *espoofer.py*, open it
    in an IDE or text editor of your choice and then copy the following code, which
    executes SMTP over a TCP connection.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 手动执行SMTP协议可能会很繁琐，所以让我们编写一个简短的Python程序，利用你刚学到的过程发送一封假邮件。在你的Kali Linux虚拟机上，创建一个名为*spoofer*的新文件夹。然后在*spoofer*文件夹内创建一个名为*espoofer.py*的Python文件，使用你喜欢的IDE或文本编辑器打开它，并复制以下代码，它通过TCP连接执行SMTP协议。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We send our first message to the server, pretending to be the mail server associated
    with the from address ➊. Next, we print out the response we received from the
    server ➋. We continue sending data before ending the message ➌ by sending `<CR><LF>.<CR><LF>`.
    Python represents the `<CR>` and `<LF>` characters with `\r` and `\n`. Finally,
    we read in the command line parameters that specify our target mail server and
    headers for our email ➍.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将第一条消息发送到服务器，伪装成与发件人地址相关联的邮件服务器 ➊。接下来，我们打印出从服务器接收到的响应 ➋。在结束消息之前，我们继续发送数据，通过发送`<CR><LF>.<CR><LF>`来结束消息
    ➌。Python将`<CR>`和`<LF>`字符表示为`\r`和`\n`。最后，我们读取命令行参数，指定目标邮件服务器和电子邮件头部 ➍。
- en: 'Now let’s run the Python program. Open the terminal and navigate to the folder
    containing *espoofer.py*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来运行Python程序。打开终端并导航到包含*espoofer.py*的文件夹：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the *espoofer.py* program with these arguments:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些参数运行*espoofer.py*程序：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will send an email from `hacking@virginia.edu` to `sys` with the message
    “Hello from the other side!” in the messages body.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`hacking@virginia.edu`发送一封电子邮件到`sys`，邮件正文为“Hello from the other side！”。
- en: This attack won’t always work; some SMTP servers may implement defensive features,
    such as *domain-based message authentication, reporting, and conformance (DMARC)*,
    which allows the receiving SMTP server to verify that SMTP messages are coming
    from an authorized IP address. Still, there are always other ways to be tricky.
    For example, you could register a domain name that is similar to the domain you’re
    attacking. Tools like URLCrazy allow you to quickly search for domains similar
    to the one you are attacking. To reduce spam, some ISPs have been blocking packets
    on port 25\. So if you want to audit a system outside of your virtual environment,
    you’ll need to route your traffic through a *virtual private network (VPN)*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击并不总是有效；某些SMTP服务器可能实现了防御性功能，如*基于域的消息认证、报告和一致性（DMARC）*，允许接收SMTP服务器验证SMTP消息是否来自授权的IP地址。不过，总是有其他方法可以耍花招。例如，你可以注册一个与目标域名相似的域名。像URLCrazy这样的工具可以帮助你快速查找与目标域名相似的域名。为了减少垃圾邮件，一些ISP已经开始封锁25端口上的数据包。因此，如果你想审核虚拟环境外的系统，你需要通过*虚拟私人网络（VPN）*来路由你的流量。
- en: '***Spoofing SMTPS Emails***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***伪造SMTPS电子邮件***'
- en: In the previous examples, we sent SMTP messages over an unencrypted channel.
    Now let’s look at SMTPS, which sends the SMTP messages over a channel encrypted
    using TLS. Our Metasploitable virtual machine doesn’t support SMTPS, so we’ll
    connect to a Gmail SMTP server that does and send ourselves a fake email.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们通过未加密的通道发送了SMTP消息。现在让我们来看一下SMTPS，它通过TLS加密的通道发送SMTP消息。我们的Metasploitable虚拟机不支持SMTPS，因此我们将连接到支持SMTPS的Gmail
    SMTP服务器，并向自己发送一封伪造的电子邮件。
- en: If your ISP allows, or if you have a VPN, you can use the command `openssl s_client`
    with Google’s SMTP server (*gmail-smtp-in.l.google.com*), which accepts incoming
    SMTP connections from other SMTP servers. After you’re connected, you can manually
    execute the exchange and send yourself a spoofed email.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的ISP允许，或者你有VPN，可以使用命令`openssl s_client`连接到Google的SMTP服务器（*gmail-smtp-in.l.google.com*），该服务器接受来自其他SMTP服务器的传入SMTP连接。连接后，你可以手动执行交换并发送伪造的电子邮件。
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now let’s write a program that uses SMTPS to interface with mail servers. Some
    servers support only encrypted communication over SMTPS, so it may not always
    be possible to use unencrypted SMTP to spoof. Python’s `smtplib` library encapsulates
    the functionality we discussed earlier in this chapter. We’ll use it to send a
    fake email using SMTPS. Open your preferred text editor, copy the following code,
    and call your program *secureSpoofer.py*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来编写一个程序，使用SMTPS与邮件服务器进行交互。有些服务器仅支持通过SMTPS进行加密通信，因此并非总能使用未加密的SMTP来伪造邮件。Python的`smtplib`库封装了我们在本章之前讨论的功能。我们将使用它通过SMTPS发送伪造的电子邮件。打开你喜欢的文本编辑器，复制以下代码，并将程序命名为*secureSpoofer.py*：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Instead of manually entering an email message, we’ll read it from a file ➊.
    This will allow us to use email templates, which make the fake emails look more
    realistic. These templates are written in HTML, and you can find them for free
    by searching online for “email phishing templates.” After you’ve loaded the message,
    start a TLS session ➋.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从文件中读取邮件内容 ➊，而不是手动输入。这将允许我们使用电子邮件模板，使伪造的电子邮件看起来更真实。这些模板是用HTML编写的，你可以通过在网上搜索“email
    phishing templates”找到它们。加载邮件内容后，启动TLS会话 ➋。
- en: 'Here is a sample email template (*template.html*):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个电子邮件模板示例（*template.html*）：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Make it your own by editing the text ➋, name ➊, and link ➌. Great: you know
    how to send a fake email.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编辑文本 ➋、名称 ➊ 和链接 ➌ 来使其独特。太好了，你知道如何发送一封伪造的电子邮件了。
- en: '**Faking Websites**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**伪造网站**'
- en: The email we’ll send as part of our attack will include a link that directs
    the user to a fake site. To convince users to enter their credentials, we’ll make
    this site a clone of some popular website’s login page, which is surprisingly
    easy to do.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在攻击过程中发送的电子邮件中包含一个链接，该链接会将用户引导到一个伪造的网站。为了说服用户输入他们的凭证，我们会将这个网站做成一些流行网站登录页面的克隆，这其实出奇的简单。
- en: Web pages are made up of HTML and JavaScript files. Every time a browser visits
    a page, it downloads a copy of these HTML and JavaScript files and uses them to
    render the page. When a hacker visits a login page, they also obtain a copy of
    those files, and by hosting these files on their own server, a hacker can display
    a web page that looks identical to the legitimate login page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 网页由 HTML 和 JavaScript 文件组成。每次浏览器访问页面时，它都会下载这些 HTML 和 JavaScript 文件的副本，并使用它们来渲染页面。当黑客访问登录页面时，他们也会获得这些文件的副本，并通过将这些文件托管在自己的服务器上，黑客可以展示一个与真实登录页面完全相同的网页。
- en: 'It gets worse: by modifying their local copy of the page’s HTML or JavaScript
    code, a hacker could configure the page to send the victim’s username and password
    to the hacker instead of the site. Once a user logs in, the fake page could redirect
    them to the real login page, where they’ll be able to reenter their credentials
    and successfully log in. The victim will simply think that their first attempt
    failed, completely unaware that someone has stolen their password.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是：通过修改本地页面的 HTML 或 JavaScript 代码，黑客可以将页面配置为将受害者的用户名和密码发送到黑客那里，而不是发送到原网站。一旦用户登录，伪造的页面可能会将他们重定向到真实的登录页面，用户可以重新输入凭证并成功登录。受害者会以为第一次尝试失败了，完全没有意识到他们的密码已被盗。
- en: Let’s clone the Facebook login page. Open Firefox in Kali Linux and go to *[https://www.facebook.com/](https://www.facebook.com/)*.
    Save a copy of the page and associated resources by right-clicking the page and
    then selecting **Save Page As**, as shown in [Figure 7-2](ch07.xhtml#ch7fig2).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们克隆 Facebook 登录页面。在 Kali Linux 中打开 Firefox，并访问 *[https://www.facebook.com/](https://www.facebook.com/)*。通过右键点击页面并选择
    **保存页面为** 来保存该页面及相关资源，如 [图 7-2](ch07.xhtml#ch7fig2) 所示。
- en: '![image](../images/ch07fig02.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig02.jpg)'
- en: '*Figure 7-2: Using Firefox to save a copy of a web page*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：使用 Firefox 保存网页副本*'
- en: Call the file *index.html* and save it to a desktop folder called *SocialEngineering*.
    The *index.html* page is the first page a browser opens when it accesses any web
    page, so by saving that page as *index.html*, users’ browsers will automatically
    open it when they go to your site.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件命名为 *index.html* 并保存到名为 *SocialEngineering* 的桌面文件夹中。*index.html* 页面是浏览器访问任何网页时首先打开的页面，因此通过将该页面保存为
    *index.html*，用户的浏览器会在他们访问你的网站时自动打开它。
- en: 'Now, how could you alter the web page so that it sends the user’s username
    and password back to the hacker? Login pages often rely on an HTML `<form>` tag.
    The following code snippet represents a basic HTML form:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你如何修改网页，使其将用户的用户名和密码发送回黑客呢？登录页面通常依赖于 HTML 的 `<form>` 标签。下面的代码片段表示一个基本的 HTML
    表单：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `<form>` tags often include an attribute that specifies where to send the
    form’s data. In this example, the data is being sent to *login_service.php*. A
    hacker can send the form data to themselves instead by replacing the URL in the
    `<form>` tag with their own. This will send all the form’s data to the hacker’s
    page. Remember anything you see in your browser can be replicated with HTML, CSS,
    and JavaScript. You may just need to write some extra code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`<form>` 标签通常包含一个属性，指定将表单数据发送到哪里。在此示例中，数据被发送到 *login_service.php*。黑客可以通过将 `<form>`
    标签中的 URL 替换为自己的地址，来将表单数据发送到自己那里。这将把表单的所有数据发送到黑客的页面。记住，浏览器中看到的任何内容都可以通过 HTML、CSS
    和 JavaScript 复制。你可能只需要编写一些额外的代码。'
- en: 'Open the terminal and navigate to the folder that contains your HTML files
    by running the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，并通过运行以下命令导航到包含 HTML 文件的文件夹：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To serve this file from our own Python HTTP server, enter the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过我们自己的 Python HTTP 服务器提供此文件，输入以下命令：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**NOTE**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Ports lower than 1024 can only be opened with root permissions.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*低于 1024 的端口只能通过 root 权限打开。*'
- en: The Python 3 `https.server` utility is preinstalled on your Kali Linux virtual
    machine. To test your evil site, leave the terminal open and switch to your Ubuntu
    virtual machine. Next, access the fake site by opening Firefox and entering the
    IP address of the Kali Linux virtual machine; for example `192.168.1.103`. If
    you’ve done everything correctly, you should see your fake copy of the Facebook
    login page like the one in [Figure 7-3](ch07.xhtml#ch7fig3).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3 的 `https.server` 工具已预装在您的 Kali Linux 虚拟机中。要测试您的恶意网站，请保持终端开启并切换到您的 Ubuntu
    虚拟机。接着，通过打开 Firefox 浏览器并输入 Kali Linux 虚拟机的 IP 地址来访问伪造网站；例如 `192.168.1.103`。如果您操作正确，您应该能看到类似于[图
    7-3](ch07.xhtml#ch7fig3)中的 Facebook 登录页面的伪造副本。
- en: '![image](../images/ch07fig03.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig03.jpg)'
- en: '*Figure 7-3: Fake Facebook login page hosted on the Kali Linux virtual machine*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：Kali Linux 虚拟机上托管的伪造 Facebook 登录页面*'
- en: 'If you look closely at the URL bar, you’ll notice that the page isn’t encrypted,
    as Facebook would normally be, and that the URL is not *[facebook.com](http://facebook.com)*.
    Not to worry: hackers have deceptive ways of hiding this, too. For example, a
    hacker could register a domain similar to Facebook’s. I checked the GoDaddy domain
    search and found that domains like *fecabeok.com* or *facebvvk.com* were still
    available. A user would need to look carefully at the URL bar to discover that
    they’ve been duped. Would you notice something wrong if you quickly glanced at
    *[https://wwww.fecabeok.com/](https://wwww.fecabeok.com/)*? We call the act of
    using URLs that look like legitimate ones *squatting*. Tools like URLCrazy will
    help you easily identify squatting URLs.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细查看网址栏，您会注意到页面没有加密，而 Facebook 通常会加密，而且网址也不是 *[facebook.com](http://facebook.com)*。不用担心：黑客有一些欺骗手段可以隐藏这一点。例如，黑客可以注册一个类似
    Facebook 的域名。我检查了 GoDaddy 域名搜索，发现像 *fecabeok.com* 或 *facebvvk.com* 这样的域名仍然可用。用户需要仔细查看网址栏，才能发现自己被骗了。如果您匆匆一瞥
    *[https://wwww.fecabeok.com/](https://wwww.fecabeok.com/)*，您会注意到有什么问题吗？我们称这种使用看起来像合法网址的行为为*域名抢注*。像
    URLCrazy 这样的工具可以帮助您轻松识别抢注的域名。
- en: Now you know how to create a fake site. Let’s discuss how to create fake videos.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何创建一个伪造网站了。接下来，让我们讨论如何创建伪造视频。
- en: '**Creating Deepfake Videos**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建深度伪造视频**'
- en: '*Deepfakes* are counterfeit images, videos, or sounds generated by machine
    learning algorithms. A hacker may encourage public unrest by creating a deepfake
    of a public figure. Or they might attempt to steal usernames and passwords of
    employees by creating a deepfake of a CEO instructing their employees to use a
    malicious site to reset their credentials. A hacker might also create a deepfake
    of a voicemail from a spouse with instructions to meet them somewhere or to do
    something.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*深度伪造*是通过机器学习算法生成的伪造图像、视频或声音。黑客可能通过创建某个公众人物的深度伪造视频来激起公众的不安。或者，他们可能通过制作CEO指示员工访问恶意网站重置凭证的深度伪造视频，来窃取员工的用户名和密码。黑客还可能制作一个配偶的深度伪造语音信箱，指示与他们在某个地方见面或做某些事情。'
- en: In this section, we’ll generate a deepfake video of Bob Marley speaking like
    President Obama. We’ll use a machine learning model developed by Aliaksandr Siarohin
    and others in their paper “First Order Motion Model for Image Animation.” The
    model is special because it learns the movements from an input video and uses
    these movements to animate a picture. This makes it more efficient than earlier
    techniques that required users to supply the model with multiple images.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将生成一个鲍勃·马利（Bob Marley）像奥巴马总统一样说话的深度伪造视频。我们将使用由 Aliaksandr Siarohin 等人开发的机器学习模型，该模型在他们的论文《用于图像动画的首阶运动模型》中有详细介绍。这个模型的特别之处在于它从输入视频中学习运动，并用这些运动来动画化图像。这使得它比早期需要用户提供多个图像的技术更高效。
- en: The process has two steps. During the first step, the video is fed to a *key
    point extraction algorithm*, which learns the sparse collection of points needed
    to model facial movement in the input video. This input video is called the *driving
    video*, because it will be used to drive the animation of the picture. [Figure
    7-4](ch07.xhtml#ch7fig4) shows an illustration of the key points extracted from
    a driving video of President Obama speaking.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程分为两个步骤。在第一个步骤中，视频被输入到*关键点提取算法*中，算法学习所需的稀疏关键点集合，以便在输入视频中建模面部运动。这个输入视频被称为*驱动视频*，因为它将用于驱动图像的动画。[图
    7-4](ch07.xhtml#ch7fig4)展示了从奥巴马总统的演讲驱动视频中提取的关键点。
- en: '![image](../images/ch07fig04.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig04.jpg)'
- en: '*Figure 7-4: Learning key points and motion from input video*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-4：从输入视频学习关键点和动作*'
- en: After the key points for each frame are extracted, they’re sent to a machine
    learning algorithm that learns how the points move. This process is called *motion
    detection*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取每一帧的关键点后，它们将被发送到一个机器学习算法，该算法学习这些点如何移动。这个过程被称为*运动检测*。
- en: During the second step, the machine learning algorithm warps the input picture
    and generates the animated video. [Figure 7-5](ch07.xhtml#ch7fig5) shows an overview
    of the generation process.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，机器学习算法扭曲输入的图片并生成动画视频。[图 7-5](ch07.xhtml#ch7fig5)展示了生成过程的概览。
- en: '![image](../images/ch07fig05.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig05.jpg)'
- en: '*Figure 7-5: Animating a static image using the learned video*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-5：使用学习到的视频来动画化静态图像*'
- en: Now you’ll generate your own deepfakes. You can view the generated video by
    visiting *[https://youtu.be/8DZHYL0qReA](https://youtu.be/8DZHYL0qReA)*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将生成自己的深度伪造视频。你可以通过访问*[https://youtu.be/8DZHYL0qReA](https://youtu.be/8DZHYL0qReA)*来查看生成的视频。
- en: '***Accessing Google Colab***'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***访问 Google Colab***'
- en: 'Instead of setting up our own machine learning development environment, we’ll
    use Google’s Colab notebooks. Google Colab is a free service that gives you access
    to Google’s computing infrastructure. I’ve modified Károly Zsolnai-Fehér’s open
    source implementation to create a simple Colab notebook that contains all the
    steps you’ll need to generate a deepfake video. You can follow along by opening
    the notebook using this link to the GitHub repository: *[https://github.com/The-Ethical-Hacking-Book/DeepFakeBob](https://github.com/The-Ethical-Hacking-Book/DeepFakeBob)*.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要自己设置机器学习开发环境，而是使用 Google 的 Colab 笔记本。Google Colab 是一个免费服务，提供对 Google 计算基础设施的访问。我已经修改了
    Károly Zsolnai-Fehér 的开源实现，创建了一个简单的 Colab 笔记本，包含生成深度伪造视频所需的所有步骤。你可以通过以下链接访问 GitHub
    仓库来跟随操作：*[https://github.com/The-Ethical-Hacking-Book/DeepFakeBob](https://github.com/The-Ethical-Hacking-Book/DeepFakeBob)*。
- en: In the Colab notebook, scroll to the bottom. You should see a video like the
    one in [Figure 7-6](ch07.xhtml#ch7fig6). Press play. If the video plays, you’ve
    correctly configured your workplace.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Colab 笔记本中，滚动到页面底部。你应该会看到一个类似于[图 7-6](ch07.xhtml#ch7fig6)的视频。点击播放。如果视频能播放，说明你的工作环境已正确配置。
- en: '![image](../images/ch07fig06.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig06.jpg)'
- en: '*Figure 7-6: A screenshot of the final static picture, driving image, and animated
    image.*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-6：最终静态图片、驱动图像和动画图像的屏幕截图。*'
- en: We’ll modify this existing program so that you can generate your own deepfakes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改现有的程序，让你能够生成自己的深度伪造视频。
- en: '***Importing the Machine Learning Models***'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***导入机器学习模型***'
- en: 'Begin by importing the Siarohin et al. repository into your Colab notebook.
    This repository contains code that will load the machine learning models that
    we’ll use. Click the play buttons next to the lines shown below to run these commands:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将 Siarohin 等人的代码库导入到你的 Colab 笔记本中。这个代码库包含了加载我们将使用的机器学习模型的代码。点击下方每行旁边的播放按钮来运行这些命令：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `!` tells the Colab notebook to run the command as a shell command. Next,
    connect your Google drive folder to Colab. The Colab notebook will read the driving
    video and target photo from the your Google drive, along with the necessary configuration
    files.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`!` 告诉 Colab 笔记本以 Shell 命令的形式运行命令。接下来，连接你的 Google 云端硬盘文件夹到 Colab。Colab 笔记本将从你的
    Google 云端硬盘读取驱动视频和目标照片，以及必要的配置文件。'
- en: Create a Google Drive folder called *DeepFake* and then upload your driving
    video and target image to this folder. The GitHub repository at *[https://github.com/The-Ethical-Hacking-Book/DeepFakeBob](https://github.com/The-Ethical-Hacking-Book/DeepFakeBob)*
    contains an example driving video of President Obama and target picture of Bob
    Marley. Copy these into your *DeepFake* folder along with *vox-adv-cpk.pth.tar*.
    This file contains the *weights* for the models, which are the values associated
    with the connections in an artificial neural network. *Artificial neural networks*
    are computer models that attempt to model the behavior of biological neurons in
    the brain. When a brain learns, it forms new connections between neurons. Similarly,
    an artificial neural network forms new connections when it learns. A weight of
    1 means that a neuron is connected to another and a weight of 0 means they aren’t
    connected. The weights in an artificial neural network can be any value between
    0 and 1, indicating their degree of connectedness.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为*DeepFake*的 Google Drive 文件夹，并将你的驾驶视频和目标图像上传到该文件夹。GitHub 仓库 *[https://github.com/The-Ethical-Hacking-Book/DeepFakeBob](https://github.com/The-Ethical-Hacking-Book/DeepFakeBob)*
    包含了奥巴马总统的示例驾驶视频和鲍勃·马利的目标图像。将这些文件连同 *vox-adv-cpk.pth.tar* 一起复制到你的 *DeepFake* 文件夹中。这个文件包含了模型的*权重*，即与人工神经网络中各连接点相关的值。*人工神经网络*是试图模拟大脑中生物神经元行为的计算机模型。当大脑学习时，它会在神经元之间形成新的连接。类似地，人工神经网络在学习时也会形成新的连接。权重为
    1 表示神经元连接到另一个神经元，权重为 0 则表示它们没有连接。人工神经网络中的权重值可以在 0 和 1 之间的任何值，表示它们的连接程度。
- en: 'After you’ve uploaded the files to the Google Drive folder, switch to the Colab
    notebook and connect your Google Drive by running the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上传文件到 Google Drive 文件夹后，切换到 Colab 笔记本，并通过运行以下命令连接你的 Google Drive：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The Colab notebook will ask you to obtain an authentication code. Click the
    link it provides and copy and paste the authentication code into the box labelled
    Colab. Ensure that you’ve successfully connected your workspace by running the
    following command on the your *DeepFake* directory:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Colab 笔记本将要求你获取身份验证代码。点击它提供的链接，并将身份验证代码复制粘贴到标记为 Colab 的框中。确保你已通过在 *DeepFake*
    目录中运行以下命令成功连接工作区：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you see all three files listed, you’ve successfully uploaded the files and
    connected your Google Drive.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到列出所有三个文件，说明你已成功上传文件并连接了 Google Drive。
- en: 'Next, run the following code to import and resize the image and video:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下代码以导入并调整图像和视频的大小：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We import the the libraries needed to obtain and resize the image ➊. Next, we
    import the source image of Bob Marley and the driving video of President Obama
    ➋. Then, we resize both the source image and driving video to 256 *×* 256 pixels
    ➌. This is the image size that our model expects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入获取并调整图像大小所需的库 ➊。接下来，我们导入鲍勃·马利的源图像和奥巴马总统的驾驶视频 ➋。然后，我们将源图像和驾驶视频都调整为 256 *×*
    256 像素 ➌。这是我们的模型期望的图像大小。
- en: 'Let’s load weights for the key-point detector `(kp\_detector)` and media generator
    models:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载关键点检测器 `(kp\_detector)` 和媒体生成器模型的权重：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Loading the models can take some time. When the process completes, apply these
    models to detect the key points and generate the animation by running the following
    code block:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型可能需要一些时间。完成该过程后，运行以下代码块，将这些模型应用于检测关键点并生成动画：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We import the `make_animation()` function ➊, which applies the key-point detection
    and media generator models. Then, we obtain the predictions ➋, which are the frames
    representing the animated picture.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入 `make_animation()` 函数 ➊，该函数应用了关键点检测和媒体生成器模型。然后，我们获取预测结果 ➋，即代表动画图像的帧。
- en: 'Now we’ll put these frames together to create the deepfake video:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把这些帧组合在一起，创建深度伪造视频：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you’ve done everything correctly, you should see an HTML video playing your
    generated video. Congratulations! You have created your first deepfake video.
    Now go ahead and share your video on YouTube, and don’t forget to tag this book.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一切操作正确，应该能看到一个 HTML 视频播放你生成的视频。恭喜！你已经制作了你的第一个深度伪造视频。现在去 YouTube 分享你的视频，别忘了标记本书。
- en: '**Exercises**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**练习**'
- en: The following exercises are designed to extend your understanding of deepfakes
    and phishing by introducing voice cloning and the *King Phisher* tool. *Voice
    cloning* is a technique that allows a computer to mimic a person’s voice. The
    King Phisher tool allows you to perform phishing attacks at scale.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习旨在通过引入语音克隆和 *King Phisher* 工具，扩展你对深度伪造和钓鱼攻击的理解。*语音克隆* 是一种技术，它使计算机能够模仿一个人的声音。King
    Phisher 工具允许你大规模执行钓鱼攻击。
- en: '***Voice Cloning***'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***语音克隆***'
- en: In this chapter, we generated a deepfake video. But the video only animated
    the picture; it didn’t generate any sound. Voice cloning techniques use machine
    learning to mimic a person’s voice. A group of researchers at Google have built
    an advanced voice cloner called Tacotron 2\. You can listen to audio samples from
    Tacotron 2 by visiting *[https://google.github.io/tacotron/publications/tacotron2/index.html](https://google.github.io/tacotron/publications/tacotron2/index.html)*.
    The web page also contains human and machine-generated voices side by side. Can
    you tell the difference?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们生成了一个深度伪造视频。但这个视频只动画化了图片，并没有生成任何声音。语音克隆技术使用机器学习来模仿一个人的声音。Google 的一组研究人员开发了一种先进的语音克隆器，称为
    Tacotron 2。你可以通过访问 *[https://google.github.io/tacotron/publications/tacotron2/index.html](https://google.github.io/tacotron/publications/tacotron2/index.html)*
    来收听 Tacotron 2 的音频样本。该网页还包含了人声和机器生成的声音并排展示。你能分辨出区别吗？
- en: Tacotron 2 requires only five seconds of audio to mimic someone’s voice. Although
    Google hasn’t released its implementation of Tacotron 2, other developers have
    created the system described in Google’s paper introducing the concept. You can
    find a link to one implementation at *[https://github.com/Rayhane-mamah/Tacotron-2](https://github.com/Rayhane-mamah/Tacotron-2)*.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Tacotron 2 只需要五秒钟的音频就能模仿某人的声音。虽然 Google 尚未发布其 Tacotron 2 的实现，但其他开发者已创建了 Google
    在其论文中介绍这一概念时所描述的系统。你可以在 *[https://github.com/Rayhane-mamah/Tacotron-2](https://github.com/Rayhane-mamah/Tacotron-2)*
    找到一个实现的链接。
- en: 'Setting up this system can be a daunting task. Not to worry: you can always
    try other, more accessible implementations of earlier voice cloning systems, such
    as those at *[https://github.com/CorentinJ/Real-Time-Voice-Cloning](https://github.com/CorentinJ/Real-Time-Voice-Cloning)*.
    Try generating a voice clone of a famous person. And if you don’t feel like coding,
    there are commercial tools like Descript *[https://www.descript.com/](https://www.descript.com/)*
    that allow you to clone your own voice with only a few mouse clicks.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 设置这个系统可能是一项艰巨的任务。别担心：你可以随时尝试其他更易于实现的早期语音克隆系统，例如 *[https://github.com/CorentinJ/Real-Time-Voice-Cloning](https://github.com/CorentinJ/Real-Time-Voice-Cloning)*
    上的实现。试着生成一个名人的语音克隆。如果你不想编码，还有像 Descript *[https://www.descript.com/](https://www.descript.com/)*
    这样的商业工具，只需点击几下鼠标，就能克隆你自己的声音。
- en: '***Phishing at Scale***'
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***大规模钓鱼攻击***'
- en: 'King Phisher is a mass phishing tool that comes with Kali Linux. You can use
    this exercise as an opportunity to familiarize yourself with the tool and its
    capabilities. Start the necessary background services by running the following
    commands:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: King Phisher 是一个大规模钓鱼工具，随 Kali Linux 一起提供。你可以利用这个练习来熟悉该工具及其功能。通过运行以下命令启动必要的后台服务：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then, start the King Phisher application by searching for it in the **Kali Application**
    menu ([Figure 7-7](ch07.xhtml#ch7fig7)). It takes a couple seconds to launch the
    application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过在 **Kali 应用菜单** 中搜索启动 King Phisher 应用程序 ([图 7-7](ch07.xhtml#ch7fig7))。启动应用程序需要几秒钟。
- en: '![image](../images/ch07fig07.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch07fig07.jpg)'
- en: '*Figure 7-7: The King Phisher interface*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-7：King Phisher 界面*'
- en: After King Phisher has launched, you can log in using your Kali Linux machine’s
    username and password because the server is hosted locally. Now have fun creating
    a new phishing campaign. Remember to act ethically!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 King Phisher 后，你可以使用 Kali Linux 机器的用户名和密码登录，因为服务器托管在本地。现在，开始创建一个新的钓鱼攻击活动吧。记得要遵循道德规范！
- en: '***SMTP Auditing***'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***SMTP 审计***'
- en: 'Another great tool for testing the security of an SMTP server is `swaks`, and
    it comes preinstalled in Kali Linux. You can deliver a test email with a single
    command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于测试 SMTP 服务器安全性的好工具是 `swaks`，它已预装在 Kali Linux 中。你可以通过一个命令发送测试邮件：
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is a snippet of the results of running the command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是运行命令后的结果片段：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can view all the amazing things that `swaks` can do by running the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令查看 `swaks` 可以做的所有令人惊叹的事情：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
