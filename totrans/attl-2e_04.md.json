["```\nAC_INIT([Jupiter], [1.0])\nAC_OUTPUT\n```", "```\n$ autoreconf\n$\n$ ls -1p\nautom4te.cache/\nconfigure\nconfigure.ac\nMakefile\nsrc/\n$\n```", "```\n$ ./configure\nconfigure: creating ./config.status\n$\n$ ls -1p\nautom4te.cache/\nconfig.log\nconfig.status\nconfigure\nconfigure.ac\nMakefile\nsrc/\n$\n```", "```\nMakefile: Makefile.in config.status\n        ./config.status $@\n```", "```\nMakefile: Makefile.in config.status\n        ./config.status $@\n\nconfig.status: configure\n        ./config.status --recheck\n```", "```\nAC_INIT([Jupiter],[1.0])\nAC_CONFIG_FILES([Makefile src/Makefile])\nAC_OUTPUT\n```", "```\n$ mv Makefile Makefile.in\n$ mv src/Makefile src/Makefile.in\n$\n```", "```\n# Makefile. Generated from Makefile.in by configure.\n--snip--\n```", "```\n# @configure_input@\n\n# Package-specific substitution variables\npackage = @PACKAGE_NAME@\nversion = @PACKAGE_VERSION@\ntarname = @PACKAGE_TARNAME@\ndistdir = $(tarname)-$(version)\n\n# Prefix-specific substitution variables\nprefix = @prefix@\nexec_prefix = @exec_prefix@\nbindir = @bindir@\n\nall clean check install uninstall jupiter:\n        cd src && $(MAKE) $@\n--snip--\n$(distdir): FORCE\n        mkdir -p $(distdir)/src\n        cp configure.ac $(distdir)\n        cp configure $(distdir)\n        cp Makefile.in $(distdir)\n        cp src/Makefile.in src/main.c $(distdir)/src\n\ndistcheck: $(distdir).tar.gz\n        gzip -cd $(distdir).tar.gz | tar xvf -\n        cd $(distdir) && ./configure\n        cd $(distdir) && $(MAKE) all\n        cd $(distdir) && $(MAKE) check\n        cd $(distdir) && $(MAKE) DESTDIR=$${PWD}/_inst install\n        cd $(distdir) && $(MAKE) DESTDIR=$${PWD}/_inst uninstall\n        @remaining=\"`find $${PWD}/$(distdir)/_inst -type f | wc -l`\"; \\\n        if test \"$${remaining}\" -ne 0; then \\\n          echo \"*** $${remaining} file(s) remaining in stage directory!\"; \\\n          exit 1; \\\n        fi\n        cd $(distdir) && $(MAKE) clean\n        rm -rf $(distdir)\n        @echo \"*** Package $(distdir).tar.gz is ready for distribution.\"\n--snip--\nFORCE:\n        rm -f $(distdir).tar.gz\n        rm -rf $(distdir)\n\nMakefile: Makefile.in config.status\n        ./config.status $@\n\nconfig.status: configure\n        ./config.status --recheck\n\n.PHONY: FORCE all clean check dist distcheck install uninstall\n```", "```\n# @configure_input@\n\n# Package-specific substitution variables\npackage = @PACKAGE_NAME@\nversion = @PACKAGE_VERSION@\ntarname = @PACKAGE_TARNAME@\ndistdir = $(tarname)-$(version)\n\n# Prefix-specific substitution variables\nprefix = @prefix@\nexec_prefix = @exec_prefix@\nbindir = @bindir@\n\nCFLAGS = -g -O0\n--snip--\nclean:\n        rm -f jupiter\n Makefile: Makefile.in ../config.status\n        cd .. && ./config.status src/$@\n\n../config.status: ../configure\n        cd .. && ./config.status --recheck\n\n.PHONY: all clean check install uninstall\n```", "```\nVPATH = some/path:some/other/path:yet/another/path\n\nprogram : src/main.c\n        $(CC) ...\n```", "```\n--snip--\n# Prefix-specific substitution variables\nprefix = @prefix@\nexec_prefix = @exec_prefix@\nbindir = @bindir@\n\n# VPATH-specific substitution variables\nsrcdir = @srcdir@\nVPATH = @srcdir@\n--snip--\n$(distdir): FORCE\n        mkdir -p $(distdir)/src\n        cp $(srcdir)/configure.ac $(distdir)\n        cp $(srcdir)/configure $(distdir)\n        cp $(srcdir)/Makefile.in $(distdir)\n        cp $(srcdir)/src/Makefile.in $(srcdir)/src/main.c $(distdir)/src\n--snip--\n```", "```\n--snip--\n# Prefix-specific substitution variables\nprefix = @prefix@\nexec_prefix = @exec_prefix@\nbindir = @bindir@\n\n# VPATH-specific substitution variables\nsrcdir = @srcdir@\nVPATH = @srcdir@\n--snip--\njupiter: main.c\n        $(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(srcdir)/main.c\n--snip--\n```", "```\n$ mkdir build\n$ cd build\n$ ../configure\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\n$\n$ ls -1p\nconfig.log\nconfig.status\nMakefile\nsrc/\n$\n$ ls -1p src\nMakefile\n$\n```", "```\n$ make\ncd src && make all\nmake[1]: Entering directory '.../jupiter/build/src'\ncc -g -O0 -o jupiter ../../src/main.c\nmake[1]: Leaving directory '.../jupiter/build/src'\n$\n$ ls -1p src\njupiter\nMakefile\n$\n```", "```\n   $ cd ..\n   $ git clean -df\n   $ autoscan\n➊ configure.ac: warning: missing AC_CHECK_HEADERS([stdlib.h]) wanted by:\n     src/main.c:2\n   configure.ac: warning: missing AC_PREREQ wanted by: autoscan\n   configure.ac: warning: missing AC_PROG_CC wanted by: src/main.c\n   configure.ac: warning: missing AC_PROG_INSTALL wanted by: Makefile.in:18\n   $\n   $ ls -1p\n   autom4te.cache/\n   autoscan.log\n   configure.ac\n   configure.scan\n   Makefile.in\n   src/\n   $\n```", "```\n$ mv configure.scan configure.ac\n$ cat configure.ac\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.69])\nAC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_HEADERS([config.h])\n\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_INSTALL\n\n# Checks for libraries.\n\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\n\n# Checks for library functions.\nAC_CONFIG_FILES([Makefile\n                 src/Makefile])\nAC_OUTPUT\n$\n```", "```\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.69])\nAC_INIT([Jupiter], [1.0], [jupiter-bugs@example.org])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_HEADERS([config.h])\n--snip--\n```", "```\n   #!/bin/sh\n   autoreconf --install\n➊ automake --add-missing --copy >/dev/null 2>&1\n```", "```\n   $ chmod +x bootstrap.sh\n   $ ./bootstrap.sh\n   $ ls -1p\n   autom4te.cache/\n   bootstrap.sh\n➊ config.h.in\n   configure\n   configure.ac\n➋ install-sh\n   Makefile.in\n   src/\n   $\n```", "```\n--snip--\n$(distdir): FORCE\n        mkdir -p $(distdir)/src\n        cp $(srcdir)/configure.ac $(distdir)\n        cp $(srcdir)/configure $(distdir)\n        cp $(srcdir)/config.h.in $(distdir)\n        cp $(srcdir)/install-sh $(distdir)\n        cp $(srcdir)/Makefile.in $(distdir)\n        cp $(srcdir)/src/Makefile.in $(distdir)/src\n        cp $(srcdir)/src/main.c $(distdir)/src\n--snip--\n```", "```\nAC_PREREQ(version)\n```", "```\nAC_INIT(package, version, [bug-report], [tarname], [url])\n```", "```\nAC_CONFIG_SRCDIR(unique-file-in-source-dir)\n```", "```\nAC_CONFIG_XXXS(tag..., [commands], [init-cmds])\n```", "```\nAC_CONFIG_HEADERS([config.h])\n```", "```\nAC_CONFIG_HEADERS([config.h:config.h.in])\n```", "```\nAC_CONFIG_HEADERS([config.h:cfg0:cfg1:cfg2])\n```", "```\n$ ./config.status config.h\n```", "```\n   $ ./config.status --help\n   `config.status' instantiates files and other configuration actions\n   from templates according to the current configuration.    Unless the files\n   and actions are specified as TAGs, all are instantiated by default.\n➊ Usage: ./config.status [OPTION]... [TAG]...\n\n    -h, --help       print this help, then exit\n    -V, --version    print version number and configuration settings, then exit\n     ➋ --config      print configuration, then exit\n    -q, --quiet, --silent\n                     do not print progress messages\n    -d, --debug      don't remove temporary files\n        --recheck    update config.status by reconfiguring in the same conditions\n     ➌ --file=FILE[:TEMPLATE]\n                     instantiate the configuration file FILE\n        --header=FILE[:TEMPLATE]\n                       instantiate the configuration header FILE\n\n➍ Configuration files:\n   Makefile src/Makefile\n\n➎ Configuration headers:\n   config.h\n\n   Report bugs to <jupiter-bugs@example.org>.\n   $\n```", "```\n$ ./config.status --file=extra:extra.in\n```", "```\n$ ./configure --prefix=$HOME\n```", "```\n$ ./config.status --config\n'--prefix=/home/jcalcote'\n```", "```\nAC_CONFIG_FILES([Makefile\n                 src/Makefile\n                 lib/Makefile\n                 etc/proj.cfg])\n```", "```\nAC_CONFIG_FILES([Makefile:Makefile.in\n                 src/Makefile:src/Makefile.in\n                 lib/Makefile:lib/Makefile.in\n                 etc/proj.cfg:etc/proj.cfg.in])\n```", "```\nAC_INIT([test], [1.0])\nAC_CONFIG_COMMANDS([abc],\n                   [echo \"Testing $mypkgname\"],\n                   [mypkgname=$PACKAGE_NAME])\nAC_OUTPUT\n```", "```\n   $ autoreconf\n➊ $ ./configure\n   configure: creating ./config.status\n   config.status: executing abc commands\n   Testing test\n   $\n➋ $ ./config.status\n   config.status: executing abc commands\n   Testing test\n   $\n➌ $ ./config.status --help\n   'config.status' instantiates files from templates according to the current configuration.\n   Usage: ./config.status [OPTIONS]... [FILE]...\n   --snip--\n   Configuration commands:\n    abc\n\n   Report bugs to <bug-autoconf@gnu.org>.\n   $\n➍ $ ./config.status abc\n   config.status: executing abc commands\n   Testing test\n   $\n```", "```\n/* Define as 1 if you have unistd.h. */\n#undef HAVE_UNISTD_H\n```", "```\nAC_INIT([test], [1.0])\nAC_CONFIG_HEADERS([config.h])\nAC_CHECK_HEADERS([unistd.h foobar.h])\nAC_OUTPUT\n```", "```\n#undef HAVE_UNISTD_H\n#undef HAVE_FOOBAR_H\n```", "```\n   $ autoconf\n   $ ./configure\n   checking for gcc... gcc\n   --snip--\n➊ checking for unistd.h... yes\n   checking for unistd.h... (cached) yes\n   checking foobar.h usability... no\n   checking foobar.h presence... no\n➋ checking for foobar.h... no\n   configure: creating ./config.status\n➌ config.status: creating config.h\n   $\n   $ cat config.h\n   /* config.h.    Generated from config.h.in by configure.    */\n   #define HAVE_UNISTD_H 1\n➍ /* #undef HAVE_FOOBAR_H */\n   $\n```", "```\n#include \"config.h\"\n#if HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#if HAVE_FOOBAR_H\n# include <foobar.h>\n#endif\n```", "```\n   $ rm config.h.in\n   $ autoheader\n   $ autoconf\n   $ ./configure\n   checking for gcc... gcc\n   --snip--\n   checking for unistd.h... yes\n   checking for unistd.h... (cached) yes\n   checking foobar.h usability... no\n   checking foobar.h presence... no\n   checking for foobar.h... no\n   configure: creating ./config.status\n   config.status: creating config.h\n   $\n➊ $ cat config.h\n   /* config.h. Generated from config.h.in by configure.    */\n   /* config.h.in. Generated from configure.ac by autoheader.    */\n   /* Define to 1 if you have the <foobar.h> header file. */\n   /* #undef HAVE_FOOBAR_H */\n   --snip--\n   /* Define to 1 if you have the <unistd.h> header file. */\n   #define HAVE_UNISTD_H 1\n   /* Define to the address where bug reports for this package should be sent. */\n   #define PACKAGE_BUGREPORT \"\"\n   /* Define to the full name of this package. */\n   #define PACKAGE_NAME \"test\"\n   /* Define to the full name and version of this package. */\n   #define PACKAGE_STRING \"test 1.0\"\n   /* Define to the one symbol short name of this package. */\n   #define PACKAGE_TARNAME \"test\"\n   /* Define to the version of this package. */\n   #define PACKAGE_VERSION \"1.0\"\n   /* Define to 1 if you have the ANSI C header files. */\n   #define STDC_HEADERS 1\n   $\n```", "```\nAC_INIT([test], [1.0])\nAC_CONFIG_HEADERS([config.h])\nAC_CHECK_HEADERS([dlfcn.h])\nAC_OUTPUT\n```", "```\n   #include \"config.h\"\n➊ #if HAVE_DLFCN_H\n   # include <dlfcn.h>\n   #else\n   # error Sorry, this code requires dlfcn.h.\n   #endif\n   --snip--\n➋ #if HAVE_DLFCN_H\n       handle = dlopen(\"/usr/lib/libwhatever.so\", RTLD_NOW);\n   #endif\n   --snip--\n```", "```\n--snip--\njupiter: main.c\n        $(CC) $(CPPFLAGS) $(CFLAGS) -I. -I$(srcdir) -I.. -o $@ \\\n          $(srcdir)/main.c\n--snip--\n```"]