- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">TYPESCRIPT
    COMPILER OPTIONS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">类型脚本编译器选项</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/Drop-image.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Drop-image.jpg)'
- en: Pass any of these options to the *tsconfig.json* file’s <samp class="SANS_TheSansMonoCd_W5Regular_11">compilerOptions</samp>
    field to configure TSC’s transpilation of TypeScript code to JavaScript. For more
    information about this process, see [Chapter 3](chapter3.xhtml).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些选项中的任何一个传递给 *tsconfig.json* 文件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">compilerOptions</samp>
    字段，以配置 TSC 将 TypeScript 代码转译为 JavaScript 的过程。有关此过程的更多信息，请参见 [第 3 章](chapter3.xhtml)。
- en: Here we look at the most common options. You can find more information and the
    complete list in the official documentation at [*https://<wbr>www<wbr>.typescriptlang<wbr>.org<wbr>/tsconfig*](https://www.typescriptlang.org/tsconfig).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们介绍了最常见的选项。您可以在官方文档中找到更多信息和完整的选项列表，链接为 [*https://<wbr>www<wbr>.typescriptlang<wbr>.org<wbr>/tsconfig*](https://www.typescriptlang.org/tsconfig)。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">allowJs  </samp>A Boolean that
    specifies whether the project can import JavaScript files.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">allowJs  </samp>一个布尔值，指定项目是否可以导入
    JavaScript 文件。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">baseUrl  </samp>A string that defines
    the root directory to use for resolving module paths. For example, if you set
    it to <samp class="SANS_TheSansMonoCd_W5Regular_11">"./"</samp>, TypeScript will
    resolve file imports from the root directory.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">baseUrl  </samp>一个字符串，用于定义用于解析模块路径的根目录。例如，如果将其设置为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"./"</samp>，TypeScript 将从根目录解析文件导入。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">esModuleInterop  </samp>A Boolean
    that specifies whether TypeScript should import CommonJS, AMD, or UMD modules
    seamlessly or treat them differently from ES.Next modules. In general, this is
    necessary if you use third-party libraries without ES.Next module support.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">esModuleInterop  </samp>一个布尔值，指定
    TypeScript 是否应无缝导入 CommonJS、AMD 或 UMD 模块，或者是否应将它们与 ES.Next 模块区分开来。通常，如果使用不支持 ES.Next
    模块的第三方库，则需要此选项。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">forceConsistentCasingInFileNames  </samp>A
    Boolean that specifies whether file imports are case sensitive. This can be important
    when some developers are working on case-sensitive filesystems and others are
    not, to ensure file-loading behaviors are consistent for everyone.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">forceConsistentCasingInFileNames  </samp>一个布尔值，指定文件导入是否区分大小写。这在一些开发者在区分大小写的文件系统上工作，而其他开发者则不区分时尤其重要，以确保文件加载行为对所有人一致。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">incremental  </samp>A string that
    defines whether the TypeScript compiler should save the last compilation’s project
    graph, use incremental type checks, and perform incremental updates on consecutive
    runs. This can make transpiling faster.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">incremental  </samp>一个字符串，用于定义
    TypeScript 编译器是否应保存上次编译的项目图，使用增量类型检查，并在连续运行时执行增量更新。这可以加速转译过程。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">isolatedModules  </samp>A Boolean
    that specifies whether TypeScript should issue warnings for code not compatible
    with third-party transpilers (such as Babel). The most common cause for those
    warnings is that the code uses files that are not modules; for example, they don’t
    have any <samp class="SANS_TheSansMonoCd_W5Regular_11">import</samp> or <samp
    class="SANS_TheSansMonoCd_W5Regular_11">export</samp> statements. This value doesn’t
    change the behavior of the actual JavaScript; it only warns about code that can’t
    be correctly transpiled.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">isolatedModules  </samp>一个布尔值，指定
    TypeScript 是否应对与第三方转译器（例如 Babel）不兼容的代码发出警告。引发这些警告的最常见原因是代码使用了不是模块的文件；例如，它们没有任何
    <samp class="SANS_TheSansMonoCd_W5Regular_11">import</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">export</samp>
    语句。此值不会改变实际 JavaScript 的行为，它只是警告无法正确转译的代码。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">jsx  </samp>A string that specifies
    how TypeScript handles JSX. It applies only to *.tsx* files and how the TypeScript
    compiler emits them; for example, the default value <samp class="SANS_TheSansMonoCd_W5Regular_11">react</samp>
    transforms and emits the code by using <samp class="SANS_TheSansMonoCd_W5Regular_11">React
    .createElement</samp>, whereas <samp class="SANS_TheSansMonoCd_W5Regular_11">preserver</samp>
    does not transform the code in your component and emits it untouched.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">jsx  </samp> 一个字符串，指定 TypeScript
    如何处理 JSX。它仅适用于 *.tsx* 文件以及 TypeScript 编译器如何输出这些文件。例如，默认值 <samp class="SANS_TheSansMonoCd_W5Regular_11">react</samp>
    会使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">React .createElement</samp>
    转换并输出代码，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">preserver</samp> 则不会转换组件中的代码，直接输出未修改的代码。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">lib  </samp>An array that adds
    missing features through polyfills. In general, *polyfills* are snippets of code
    that add support for features and functions the target environment does not support
    natively. We need to emulate modern JavaScript features when we target less-compliant
    systems, such as older browsers or node versions. The compiler adds the polyfills
    defined in the <samp class="SANS_TheSansMonoCd_W5Regular_11">lib</samp> array
    to the generated code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">lib  </samp> 一个数组，通过 polyfill 添加缺失的特性。一般来说，*polyfill*
    是一些代码片段，用来为目标环境不原生支持的特性和功能提供支持。当我们针对不完全兼容的系统时（如旧版本的浏览器或 Node 版本），需要模拟现代 JavaScript
    特性。编译器将 <samp class="SANS_TheSansMonoCd_W5Regular_11">lib</samp> 数组中定义的 polyfill
    添加到生成的代码中。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">module  </samp>A string that sets
    the module syntax for the transpiled code. For example, if you set it to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">commonjs</samp>, TSC will transpile this
    project to use the legacy CommonJS module syntax with <samp class="SANS_TheSansMonoCd_W5Regular_11">require</samp>
    for importing and <samp class="SANS_TheSansMonoCd_W5Regular_11">module.exports</samp>
    for exporting the code, whereas with <samp class="SANS_TheSansMonoCd_W5Regular_11">ES2015</samp>
    the transpiled code will use the <samp class="SANS_TheSansMonoCd_W5Regular_11">import</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">export</samp> keywords. This
    is independent of the <samp class="SANS_TheSansMonoCd_W5Regular_11">target</samp>
    property, which defines all available language features except the module syntax.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">module  </samp> 一个字符串，设置转译代码的模块语法。例如，如果将其设置为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">commonjs</samp>，TSC 将转译该项目，使用传统的
    CommonJS 模块语法，采用 <samp class="SANS_TheSansMonoCd_W5Regular_11">require</samp>
    来导入，使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">module.exports</samp> 来导出代码，而设置为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ES2015</samp> 时，转译后的代码将使用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">import</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">export</samp>
    关键字。这与 <samp class="SANS_TheSansMonoCd_W5Regular_11">target</samp> 属性无关，后者定义了所有可用的语言特性，模块语法除外。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">moduleResolution  </samp>A string
    that specifies the module resolution strategy. This strategy also defines how
    TSC locates definition files for modules at compile time. Changing the approach
    can resolve fringe problems with the importing and exporting of modules.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">moduleResolution  </samp> 一个字符串，指定模块解析策略。此策略还定义了
    TSC 在编译时如何定位模块的定义文件。改变解析方式可以解决导入和导出模块时的一些边缘问题。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">noEmit  </samp>A Boolean that defines
    whether TSC should produce files or only check the types in the project. Set it
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp> if you want third-party
    tools such as webpack, Babel.js, or Parcel to transpile the code instead of TSC.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">noEmit  </samp> 一个布尔值，定义了 TSC 是否应该生成文件，或者仅检查项目中的类型。如果你希望像
    webpack、Babel.js 或 Parcel 这样的第三方工具来转译代码，而不是 TSC，请将其设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">resolveJsonModule  </samp>A Boolean
    that specifies whether TypeScript imports JSON files. It generates type definitions
    based on the JSON inside the file and validates the types on import. We need to
    manually enable JSON imports as TypeScript can’t import them by default.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">resolveJsonModule  </samp> 一个布尔值，指定
    TypeScript 是否导入 JSON 文件。它会根据文件中的 JSON 生成类型定义，并在导入时验证类型。由于 TypeScript 默认不能导入 JSON
    文件，因此我们需要手动启用 JSON 导入。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">skipLibCheck  </samp>A Boolean
    that defines whether the TypeScript compiler performs type checks on all type
    declaration files. Setting it to <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    decreases compilation time and is your escape hatch for working with untyped third-party
    dependencies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">skipLibCheck  </samp> 一个布尔值，用于定义
    TypeScript 编译器是否对所有类型声明文件进行类型检查。将其设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    可以减少编译时间，并且是处理没有类型声明的第三方依赖项的解决办法。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">target  </samp>A string that specifies
    the language features to which the TypeScript code should be transpiled. For example,
    if you set it to <samp class="SANS_TheSansMonoCd_W5Regular_11">es6</samp>, or
    the equivalent <samp class="SANS_TheSansMonoCd_W5Regular_11">ES2015</samp>, TSC
    will transpile this project to ES2015-compatible JavaScript, which, for example,
    uses <samp class="SANS_TheSansMonoCd_W5Regular_11">let</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">const</samp>.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">target  </samp> 一个字符串，用于指定 TypeScript
    代码应该转译成的语言特性。例如，如果将其设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">es6</samp>，或等同的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ES2015</samp>，TSC 将把该项目转译为与 ES2015
    兼容的 JavaScript，例如使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">let</samp> 和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">const</samp>。
