- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">TYPESCRIPT
    COMPILER OPTIONS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Drop-image.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pass any of these options to the *tsconfig.json* file’s <samp class="SANS_TheSansMonoCd_W5Regular_11">compilerOptions</samp>
    field to configure TSC’s transpilation of TypeScript code to JavaScript. For more
    information about this process, see [Chapter 3](chapter3.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Here we look at the most common options. You can find more information and the
    complete list in the official documentation at [*https://<wbr>www<wbr>.typescriptlang<wbr>.org<wbr>/tsconfig*](https://www.typescriptlang.org/tsconfig).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">allowJs  </samp>A Boolean that
    specifies whether the project can import JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">baseUrl  </samp>A string that defines
    the root directory to use for resolving module paths. For example, if you set
    it to <samp class="SANS_TheSansMonoCd_W5Regular_11">"./"</samp>, TypeScript will
    resolve file imports from the root directory.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">esModuleInterop  </samp>A Boolean
    that specifies whether TypeScript should import CommonJS, AMD, or UMD modules
    seamlessly or treat them differently from ES.Next modules. In general, this is
    necessary if you use third-party libraries without ES.Next module support.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">forceConsistentCasingInFileNames  </samp>A
    Boolean that specifies whether file imports are case sensitive. This can be important
    when some developers are working on case-sensitive filesystems and others are
    not, to ensure file-loading behaviors are consistent for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">incremental  </samp>A string that
    defines whether the TypeScript compiler should save the last compilation’s project
    graph, use incremental type checks, and perform incremental updates on consecutive
    runs. This can make transpiling faster.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">isolatedModules  </samp>A Boolean
    that specifies whether TypeScript should issue warnings for code not compatible
    with third-party transpilers (such as Babel). The most common cause for those
    warnings is that the code uses files that are not modules; for example, they don’t
    have any <samp class="SANS_TheSansMonoCd_W5Regular_11">import</samp> or <samp
    class="SANS_TheSansMonoCd_W5Regular_11">export</samp> statements. This value doesn’t
    change the behavior of the actual JavaScript; it only warns about code that can’t
    be correctly transpiled.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">jsx  </samp>A string that specifies
    how TypeScript handles JSX. It applies only to *.tsx* files and how the TypeScript
    compiler emits them; for example, the default value <samp class="SANS_TheSansMonoCd_W5Regular_11">react</samp>
    transforms and emits the code by using <samp class="SANS_TheSansMonoCd_W5Regular_11">React
    .createElement</samp>, whereas <samp class="SANS_TheSansMonoCd_W5Regular_11">preserver</samp>
    does not transform the code in your component and emits it untouched.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">lib  </samp>An array that adds
    missing features through polyfills. In general, *polyfills* are snippets of code
    that add support for features and functions the target environment does not support
    natively. We need to emulate modern JavaScript features when we target less-compliant
    systems, such as older browsers or node versions. The compiler adds the polyfills
    defined in the <samp class="SANS_TheSansMonoCd_W5Regular_11">lib</samp> array
    to the generated code.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">module  </samp>A string that sets
    the module syntax for the transpiled code. For example, if you set it to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">commonjs</samp>, TSC will transpile this
    project to use the legacy CommonJS module syntax with <samp class="SANS_TheSansMonoCd_W5Regular_11">require</samp>
    for importing and <samp class="SANS_TheSansMonoCd_W5Regular_11">module.exports</samp>
    for exporting the code, whereas with <samp class="SANS_TheSansMonoCd_W5Regular_11">ES2015</samp>
    the transpiled code will use the <samp class="SANS_TheSansMonoCd_W5Regular_11">import</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">export</samp> keywords. This
    is independent of the <samp class="SANS_TheSansMonoCd_W5Regular_11">target</samp>
    property, which defines all available language features except the module syntax.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">moduleResolution  </samp>A string
    that specifies the module resolution strategy. This strategy also defines how
    TSC locates definition files for modules at compile time. Changing the approach
    can resolve fringe problems with the importing and exporting of modules.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">noEmit  </samp>A Boolean that defines
    whether TSC should produce files or only check the types in the project. Set it
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp> if you want third-party
    tools such as webpack, Babel.js, or Parcel to transpile the code instead of TSC.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">resolveJsonModule  </samp>A Boolean
    that specifies whether TypeScript imports JSON files. It generates type definitions
    based on the JSON inside the file and validates the types on import. We need to
    manually enable JSON imports as TypeScript can’t import them by default.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">skipLibCheck  </samp>A Boolean
    that defines whether the TypeScript compiler performs type checks on all type
    declaration files. Setting it to <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    decreases compilation time and is your escape hatch for working with untyped third-party
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">target  </samp>A string that specifies
    the language features to which the TypeScript code should be transpiled. For example,
    if you set it to <samp class="SANS_TheSansMonoCd_W5Regular_11">es6</samp>, or
    the equivalent <samp class="SANS_TheSansMonoCd_W5Regular_11">ES2015</samp>, TSC
    will transpile this project to ES2015-compatible JavaScript, which, for example,
    uses <samp class="SANS_TheSansMonoCd_W5Regular_11">let</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">const</samp>.
  prefs: []
  type: TYPE_NORMAL
