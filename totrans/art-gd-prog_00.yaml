- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Basics of a Programming Language: Processing'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When someone programs a computer, they are really communicating with it. It
    is an imperative and precise communication. Imperative because the computer has
    no choice; it is being told what to do, and it will do exactly that. Precise because
    a computer does not apply any interpretation to what it is being told. Computers
    do not think and so can’t evaluate a command that would amount to “expose the
    patient to a fatal dose of radiation” with any skepticism. So we, as programmers,
    must be careful and precise in what we instruct the machine to do.
  prefs: []
  type: TYPE_NORMAL
- en: When humans communicate with each other, we use a language. Similarly, humans
    use languages to communicate with computers, but these languages are artificial
    (humans invented them for this purpose), terse (there are few if any modifiers—no
    way to express emotions or gradations of any feeling), precise (each item in the
    language means one thing), and written (we do not yet speak to computers in a
    programming language).
  prefs: []
  type: TYPE_NORMAL
- en: The process of programming begins with a problem to be solved, and the first
    step is to state the problem as clearly as possible. Then we analyze the problem
    and determine methods by which it may be solved. Computers can only directly manipulate
    numbers, so it is common for solutions discussed at this stage to be numerical
    or mathematical. A sketch of the solution, perhaps on paper in a human language
    and math, is created. This is then translated into computer language and typed
    into the computer using a keyboard. The resulting text file is called a script,
    source code, or more commonly the computer program. Next, another program called
    a compiler takes the program and converts it into a form that can be executed
    on the computer. Basically, all programs are converted into machine code, which
    consists of numbers, and which the computer can execute.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to learn a language called Processing. It was developed for use
    by artists, but it’s pretty good for lots of things, and it’s good for teaching
    because it makes a lot of things easy and it always has graphical visual output.
    It is much like a lot of other languages in use these days in terms of structure
    (syntax). It is, in fact, the language Java enclosed in some special easy-to-use
    packaging. A Processing program is called a sketch in honor of its artistic origins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use a programming language, you need to understand some basic concepts
    and structures, at least at a basic level. These concepts will be introduced in
    this introduction. The rest of the book will teach you to program by example:
    when you open the book to a random location, the left page will almost always
    outline a problem or Processing language concept, and the right page will almost
    always show code that illustrates that concept, along with a screen image of the
    output from that program. The idea is to introduce only one or two new things
    on any page. The code will execute on a computer running any major operating system,
    once the free Processing language download has been installed. Go to [https://processing.org/download](https://processing.org/download)
    and download the latest stable version for your OS.'
  prefs: []
  type: TYPE_NORMAL
- en: To begin programming, you need to appreciate that a language has a syntax or
    structure, and for computer languages this structure cannot be varied. The computer
    will always be the arbiter of what is correct, and if any program has a syntax
    error or produces erroneous results, it is the program and not the computer that
    is at fault.
  prefs: []
  type: TYPE_NORMAL
- en: Next you need to appreciate that the syntax is arbitrary. It was designed by
    a human with attitudes and biases and new ideas, and while the syntax might be
    ugly or hard to recall, it is what it is. You might not understand parts of it
    at first, but after a while and after reading and executing the first 50 or 60
    sketches in this book, most of it will make sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'A program consists of symbols, and their order matters. Some symbols are special
    characters with a defined meaning. For example, `+` usually means *add*, and `−`
    usually means *subtract*. Some symbols are words, and words defined by the language,
    like `if`, `while`, and `true`, cannot be also defined by a programmer—they mean
    what the language says they mean, and they are called reserved words. Some names
    have a definition given by the system but can be reused by a programmer if needed.
    These are called predefined names or system variables. However, some words can
    be defined by the programmer and are names for things the programmer wants to
    use in the program: variables and functions are examples.'
  prefs: []
  type: TYPE_NORMAL
- en: The Beginning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All sketches have the same basic structure. There is something called `setup()`
    (a predefined name) that gets executed just once, when the program begins. This
    is where we will do initializations, such as defining the size of the output window.
    If we need to read a bunch of images or sounds from files, this is where we might
    do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of `setup()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is something we call a function in Processing (see Sketch 24). It is a
    bunch of code that is enclosed in braces (the `{` and `}`) and is given a name.
    It gets executed (called, we say) when we use the name in code later on. In this
    case the function is named `setup()`, and it is invoked automatically by Processing
    just once, when the program starts executing. The word `void` (a reserved word)
    is not important just now, but it means the function does not return a value.
  prefs: []
  type: TYPE_NORMAL
- en: After `setup()` has finished, a window will open on the screen where the program
    will draw. This is called the sketch window, and its size is one of the things
    initialized within `setup()`.
  prefs: []
  type: TYPE_NORMAL
- en: The Middle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second part of a sketch is another function, one named `draw()`. This function
    is called many times each second (the default is 60 times, but this can be changed),
    and its purpose is to update the drawing being made by the program. Processing
    assumes that the programmer is writing a program to draw a picture of some kind.
  prefs: []
  type: TYPE_NORMAL
- en: Every 1/60 of a second, the Processing system will call the `draw()` function.
    Whatever code appears there will be executed each time, and the idea is that the
    programmer can update the picture being created there as a user watches. For example,
    if a set of images of a moving animal is displayed one at a time, the result will
    be an animated image of the animal. The programmer can draw shapes, display text
    and images, change colors, and move shapes about the screen as the user watches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of `draw` (a predefined name) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Rest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The programmer writes code that is inside either of the functions `setup()`
    and `draw()` or that is executed by those functions. Any part of the program that
    cannot be reached from `setup()` or `draw()` will never be executed (except for
    some of the mouse and keyboard functions).
  prefs: []
  type: TYPE_NORMAL
- en: 'The programmer can name and provide code for other functions, and these can
    be executed by (called from) `draw()` or `setup()`. These functions are usually
    placed after the `draw()` function in the program. For example, if the programmer
    wanted to define a function named `doSomething()`, it might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This would be executed when its name was used in a call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The semicolon is used to end a statement so that Processing knows when the
    programmer thinks a statement ends. It is used to detect errors: if a programmer
    thinks the statement is complete and the Processing compiler does not, the compiler
    issues an error message. The compiler is, after all, always right.'
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The concept of a variable is one that most beginners find difficult. Essentially,
    a variable is a place to put a result, usually a number. In a programming language,
    a variable is represented by a name, and the connection between the name and the
    value is established by a statement in the language called an assignment statement:
    it assigns a value to a variable. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This establishes that the value of a variable named `count` is `0`. How do
    we know that the name `count` is a variable? It must appear in a declaration:
    we “declare” that `count` is a variable, and we specify a type. The type defines
    the set of values that can be assigned to the variable. For a numerical variable,
    common types are `integer` and `float` (a decimal fraction). If `count` is to
    be an integer, then this would be the declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The predefined name `int` means integer, and this declaration states that the
    name `count` will hold an integer. If it were supposed to be a number with a fraction
    (a real or floating-point number) the declaration would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A variable can only be used after it has been declared. It is an error to attempt
    to use a variable that has not been in a declaration, partly because its type
    would not be known.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you can define variables, you can do complex computations. For arithmetic
    the usual operations are possible: `+` (add), `−` (subtract), `*` (multiply),
    and `/` (divide). Both variables and constants can be used in mathematical expressions,
    just as in algebra. The following would be a legal assignment statement (assuming
    that the name `radius` was declared):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It would calculate the circumference of a circle with the given radius.
  prefs: []
  type: TYPE_NORMAL
- en: How to Write a Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Processing is started, either by clicking *processing.exe* or by clicking
    a Processing source file, the integrated development environment (IDE) will open
    a window on the screen. It will look something like [Figure 1](#figure-1), though
    it may look a little different depending on your operating system and the version
    of Processing you use.
  prefs: []
  type: TYPE_NORMAL
- en: '![f00001](Images/f00001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 1](#figureanchor-1): A new window in the Processing integrated development
    environment'
  prefs: []
  type: TYPE_NORMAL
- en: This particular sketch is called *start*, and it resides in a file named *start.pde*
    (*pde* stands for *Processing Development Environment*). The *start.pde* file
    must also be located within a directory named *start*. That’s just the rule.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can start typing code, and it will appear inside the white rectangle
    in the window. This code will execute when the start icon ![i00001](Images/i00001.png)
    is clicked, and running code will halt when the stop icon ![i00002](Images/i00002.png)
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try a simple program: one that draws a circle. First, enter the basic
    empty program just described, as shown in [Figure 2](#figure-2).'
  prefs: []
  type: TYPE_NORMAL
- en: '![f00002](Images/f00002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 2](#figureanchor-2): The basic structure of a Processing program'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can write our code. We wish to draw a circle, and Processing will open
    a drawing window for us. We should specify its size so it’s not too small. In
    `setup()` we can use the predefined `size()` function to specify a sketch window
    with a size of 400 pixels horizontally and 300 pixels vertically.
  prefs: []
  type: TYPE_NORMAL
- en: We want the `draw()` function to draw a circle every time it is called, 60 times
    per second by default. In Processing, a circle is a special case of an ellipse,
    having equal width and height. The `ellipse()` function draws an ellipse with
    its center at specified coordinates (the first two values in the parentheses after
    the function name) and having a width and height specified by the second pair
    of values. These values in parentheses after a function name are called parameters.
    The background color is set by default to a medium grey, and the color that fills
    the circle is white. The circle is outlined by a black line.
  prefs: []
  type: TYPE_NORMAL
- en: The call `ellipse (200, 100, 50, 50)` will draw an ellipse centered at (200,
    100) that is 50 pixels wide and 50 pixels high. Once this code is entered, the
    window will look like [Figure 3](#figure-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f00003](Images/f00003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 3](#figureanchor-3): The code for drawing a circle'
  prefs: []
  type: TYPE_NORMAL
- en: Now click the start icon. A new window opens with our drawing, as shown in [Figure
    4](#figure-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f00004](Images/f00004.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 4](#figureanchor-4): The drawing window'
  prefs: []
  type: TYPE_NORMAL
- en: You have learned a few things. The value 200 in the ellipse is the x or horizontal
    position, and 100 is the y or vertical position. The value 50 is the size of ellipse,
    which in this case is a circle because the horizontal and vertical sizes are the
    same. The circle is filled with a color, in this case white, and it has a black
    line around it.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of this book essentially involves learning by doing. There’s a
    lot of code and relatively little explanation. You can experiment with the code,
    change the parameters, and see what happens. That’s the whole point. You’ll learn
    the syntax by example and by trying things out.
  prefs: []
  type: TYPE_NORMAL
