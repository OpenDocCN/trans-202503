- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![](Images/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'The Basics of a Programming Language: Processing'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程语言基础：Processing
- en: When someone programs a computer, they are really communicating with it. It
    is an imperative and precise communication. Imperative because the computer has
    no choice; it is being told what to do, and it will do exactly that. Precise because
    a computer does not apply any interpretation to what it is being told. Computers
    do not think and so can’t evaluate a command that would amount to “expose the
    patient to a fatal dose of radiation” with any skepticism. So we, as programmers,
    must be careful and precise in what we instruct the machine to do.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人编写计算机程序时，他们实际上是在与计算机沟通。这是一种命令式且精准的沟通。命令式是因为计算机没有选择权；它被告诉该做什么，它就会准确地执行。而精准是因为计算机不会对它被告知的内容进行任何解释。计算机不会思考，因此无法对“给病人暴露于致命剂量的辐射”这种指令产生任何怀疑。所以，我们作为程序员，必须小心且精准地指示计算机做什么。
- en: When humans communicate with each other, we use a language. Similarly, humans
    use languages to communicate with computers, but these languages are artificial
    (humans invented them for this purpose), terse (there are few if any modifiers—no
    way to express emotions or gradations of any feeling), precise (each item in the
    language means one thing), and written (we do not yet speak to computers in a
    programming language).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当人类相互沟通时，我们使用语言。同样地，人类也使用语言与计算机沟通，但这些语言是人工的（人类为此目的发明的）、简洁的（几乎没有修饰词——无法表达情感或任何感觉的细微差别）、精准的（语言中的每个元素都有一个明确的含义）和书面的（我们目前还不能用编程语言与计算机对话）。
- en: The process of programming begins with a problem to be solved, and the first
    step is to state the problem as clearly as possible. Then we analyze the problem
    and determine methods by which it may be solved. Computers can only directly manipulate
    numbers, so it is common for solutions discussed at this stage to be numerical
    or mathematical. A sketch of the solution, perhaps on paper in a human language
    and math, is created. This is then translated into computer language and typed
    into the computer using a keyboard. The resulting text file is called a script,
    source code, or more commonly the computer program. Next, another program called
    a compiler takes the program and converts it into a form that can be executed
    on the computer. Basically, all programs are converted into machine code, which
    consists of numbers, and which the computer can execute.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编程过程始于一个需要解决的问题，第一步是尽可能清晰地表述问题。接着，我们分析问题并确定可以解决问题的方法。计算机只能直接处理数字，因此在这一阶段讨论的解决方案通常是数值或数学的。解决方案的草图，可能是用人类语言和数学表示的，首先被创建出来。然后，这些内容会被翻译成计算机语言并通过键盘输入计算机。生成的文本文件被称为脚本、源代码，或更常见的计算机程序。接下来，另一个程序叫做编译器，它会将程序转换成计算机可以执行的形式。基本上，所有程序都被转换成机器码，它由数字组成，计算机能够执行这些数字。
- en: You are going to learn a language called Processing. It was developed for use
    by artists, but it’s pretty good for lots of things, and it’s good for teaching
    because it makes a lot of things easy and it always has graphical visual output.
    It is much like a lot of other languages in use these days in terms of structure
    (syntax). It is, in fact, the language Java enclosed in some special easy-to-use
    packaging. A Processing program is called a sketch in honor of its artistic origins.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习一种名为Processing的编程语言。它是为艺术家设计的，但它对许多其他用途也很有效，尤其适合教学，因为它让许多事情变得简单，并且始终有图形化的输出。它的结构（语法）与当今许多其他编程语言相似。事实上，它是Java语言的一个特殊易用版本。Processing程序被称为“草图”，以此致敬其艺术起源。
- en: 'In order to use a programming language, you need to understand some basic concepts
    and structures, at least at a basic level. These concepts will be introduced in
    this introduction. The rest of the book will teach you to program by example:
    when you open the book to a random location, the left page will almost always
    outline a problem or Processing language concept, and the right page will almost
    always show code that illustrates that concept, along with a screen image of the
    output from that program. The idea is to introduce only one or two new things
    on any page. The code will execute on a computer running any major operating system,
    once the free Processing language download has been installed. Go to [https://processing.org/download](https://processing.org/download)
    and download the latest stable version for your OS.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用一种编程语言，你需要理解一些基本的概念和结构，至少在基本层面上。这些概念将在本介绍中介绍。本书的其余部分将通过示例教你编程：当你随意翻开书时，左页几乎总是概述一个问题或
    Processing 语言的概念，右页几乎总是显示说明该概念的代码，并附有该程序的输出屏幕图像。目的是在任何一页上只引入一到两个新知识点。代码将在安装了免费的
    Processing 语言下载的计算机上执行，支持任何主流操作系统。访问 [https://processing.org/download](https://processing.org/download)
    下载适用于你操作系统的最新稳定版本。
- en: To begin programming, you need to appreciate that a language has a syntax or
    structure, and for computer languages this structure cannot be varied. The computer
    will always be the arbiter of what is correct, and if any program has a syntax
    error or produces erroneous results, it is the program and not the computer that
    is at fault.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编程，你需要理解语言有语法或结构，对于计算机语言来说，这种结构是不能改变的。计算机将始终决定什么是正确的，如果任何程序存在语法错误或产生错误结果，责任在于程序，而不是计算机。
- en: Next you need to appreciate that the syntax is arbitrary. It was designed by
    a human with attitudes and biases and new ideas, and while the syntax might be
    ugly or hard to recall, it is what it is. You might not understand parts of it
    at first, but after a while and after reading and executing the first 50 or 60
    sketches in this book, most of it will make sense.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要理解语法是任意的。它是由一个具有个人观点、偏见和新想法的人设计的，尽管语法可能看起来很丑或难以记忆，但它就是这样。你可能一开始不理解它的某些部分，但过一段时间，读完并执行本书前50或60个草图后，大部分内容会变得有意义。
- en: 'A program consists of symbols, and their order matters. Some symbols are special
    characters with a defined meaning. For example, `+` usually means *add*, and `−`
    usually means *subtract*. Some symbols are words, and words defined by the language,
    like `if`, `while`, and `true`, cannot be also defined by a programmer—they mean
    what the language says they mean, and they are called reserved words. Some names
    have a definition given by the system but can be reused by a programmer if needed.
    These are called predefined names or system variables. However, some words can
    be defined by the programmer and are names for things the programmer wants to
    use in the program: variables and functions are examples.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 程序由符号组成，这些符号的顺序很重要。有些符号是具有特定含义的特殊字符。例如，`+` 通常表示 *加法*，`−` 通常表示 *减法*。有些符号是单词，且这些单词由语言定义，比如
    `if`、`while` 和 `true`，这些不能被程序员重新定义——它们的含义是语言规定的，它们被称为保留字。有些名字由系统定义，但如果需要，程序员可以重新使用。这些被称为预定义名字或系统变量。然而，某些单词可以由程序员定义，作为程序员想要在程序中使用的事物的名称：变量和函数就是例子。
- en: The Beginning
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: All sketches have the same basic structure. There is something called `setup()`
    (a predefined name) that gets executed just once, when the program begins. This
    is where we will do initializations, such as defining the size of the output window.
    If we need to read a bunch of images or sounds from files, this is where we might
    do it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有草图都有相同的基本结构。这里有一个叫做 `setup()`（预定义名字）的东西，它只会执行一次，在程序开始时。这里是我们进行初始化的地方，比如定义输出窗口的大小。如果我们需要从文件中读取一堆图像或声音，通常会在这里进行。
- en: 'The syntax of `setup()` is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()` 的语法如下：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is something we call a function in Processing (see Sketch 24). It is a
    bunch of code that is enclosed in braces (the `{` and `}`) and is given a name.
    It gets executed (called, we say) when we use the name in code later on. In this
    case the function is named `setup()`, and it is invoked automatically by Processing
    just once, when the program starts executing. The word `void` (a reserved word)
    is not important just now, but it means the function does not return a value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: After `setup()` has finished, a window will open on the screen where the program
    will draw. This is called the sketch window, and its size is one of the things
    initialized within `setup()`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The Middle
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second part of a sketch is another function, one named `draw()`. This function
    is called many times each second (the default is 60 times, but this can be changed),
    and its purpose is to update the drawing being made by the program. Processing
    assumes that the programmer is writing a program to draw a picture of some kind.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Every 1/60 of a second, the Processing system will call the `draw()` function.
    Whatever code appears there will be executed each time, and the idea is that the
    programmer can update the picture being created there as a user watches. For example,
    if a set of images of a moving animal is displayed one at a time, the result will
    be an animated image of the animal. The programmer can draw shapes, display text
    and images, change colors, and move shapes about the screen as the user watches.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of `draw` (a predefined name) is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Rest
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The programmer writes code that is inside either of the functions `setup()`
    and `draw()` or that is executed by those functions. Any part of the program that
    cannot be reached from `setup()` or `draw()` will never be executed (except for
    some of the mouse and keyboard functions).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'The programmer can name and provide code for other functions, and these can
    be executed by (called from) `draw()` or `setup()`. These functions are usually
    placed after the `draw()` function in the program. For example, if the programmer
    wanted to define a function named `doSomething()`, it might look like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This would be executed when its name was used in a call:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The semicolon is used to end a statement so that Processing knows when the
    programmer thinks a statement ends. It is used to detect errors: if a programmer
    thinks the statement is complete and the Processing compiler does not, the compiler
    issues an error message. The compiler is, after all, always right.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The concept of a variable is one that most beginners find difficult. Essentially,
    a variable is a place to put a result, usually a number. In a programming language,
    a variable is represented by a name, and the connection between the name and the
    value is established by a statement in the language called an assignment statement:
    it assigns a value to a variable. Here’s an example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This establishes that the value of a variable named `count` is `0`. How do
    we know that the name `count` is a variable? It must appear in a declaration:
    we “declare” that `count` is a variable, and we specify a type. The type defines
    the set of values that can be assigned to the variable. For a numerical variable,
    common types are `integer` and `float` (a decimal fraction). If `count` is to
    be an integer, then this would be the declaration:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The predefined name `int` means integer, and this declaration states that the
    name `count` will hold an integer. If it were supposed to be a number with a fraction
    (a real or floating-point number) the declaration would be as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A variable can only be used after it has been declared. It is an error to attempt
    to use a variable that has not been in a declaration, partly because its type
    would not be known.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you can define variables, you can do complex computations. For arithmetic
    the usual operations are possible: `+` (add), `−` (subtract), `*` (multiply),
    and `/` (divide). Both variables and constants can be used in mathematical expressions,
    just as in algebra. The following would be a legal assignment statement (assuming
    that the name `radius` was declared):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It would calculate the circumference of a circle with the given radius.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: How to Write a Program
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Processing is started, either by clicking *processing.exe* or by clicking
    a Processing source file, the integrated development environment (IDE) will open
    a window on the screen. It will look something like [Figure 1](#figure-1), though
    it may look a little different depending on your operating system and the version
    of Processing you use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![f00001](Images/f00001.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: '[Figure 1](#figureanchor-1): A new window in the Processing integrated development
    environment'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This particular sketch is called *start*, and it resides in a file named *start.pde*
    (*pde* stands for *Processing Development Environment*). The *start.pde* file
    must also be located within a directory named *start*. That’s just the rule.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Now you can start typing code, and it will appear inside the white rectangle
    in the window. This code will execute when the start icon ![i00001](Images/i00001.png)
    is clicked, and running code will halt when the stop icon ![i00002](Images/i00002.png)
    is clicked.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try a simple program: one that draws a circle. First, enter the basic
    empty program just described, as shown in [Figure 2](#figure-2).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![f00002](Images/f00002.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: '[Figure 2](#figureanchor-2): The basic structure of a Processing program'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Now we can write our code. We wish to draw a circle, and Processing will open
    a drawing window for us. We should specify its size so it’s not too small. In
    `setup()` we can use the predefined `size()` function to specify a sketch window
    with a size of 400 pixels horizontally and 300 pixels vertically.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: We want the `draw()` function to draw a circle every time it is called, 60 times
    per second by default. In Processing, a circle is a special case of an ellipse,
    having equal width and height. The `ellipse()` function draws an ellipse with
    its center at specified coordinates (the first two values in the parentheses after
    the function name) and having a width and height specified by the second pair
    of values. These values in parentheses after a function name are called parameters.
    The background color is set by default to a medium grey, and the color that fills
    the circle is white. The circle is outlined by a black line.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`draw()`函数每次被调用时都能绘制一个圆形，默认情况下每秒调用60次。在Processing中，圆形是椭圆的一种特殊情况，其宽度和高度相等。`ellipse()`函数绘制一个以指定坐标为中心的椭圆（函数名后括号中的前两个值），并根据第二对值设置宽度和高度。括号中函数名后面的这些值称为参数。背景色默认设置为中等灰色，填充圆形的颜色为白色，圆形周围有一条黑色的轮廓线。
- en: The call `ellipse (200, 100, 50, 50)` will draw an ellipse centered at (200,
    100) that is 50 pixels wide and 50 pixels high. Once this code is entered, the
    window will look like [Figure 3](#figure-3).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`ellipse(200, 100, 50, 50)`将绘制一个以(200, 100)为中心、宽高均为50像素的椭圆。一旦输入此代码，窗口将呈现出[图
    3](#figure-3)的样子。
- en: '![f00003](Images/f00003.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![f00003](Images/f00003.png)'
- en: '[Figure 3](#figureanchor-3): The code for drawing a circle'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3](#figureanchor-3)：绘制圆形的代码'
- en: Now click the start icon. A new window opens with our drawing, as shown in [Figure
    4](#figure-4).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击开始图标。一个新窗口会打开，显示我们的绘图，如[图 4](#figure-4)所示。
- en: '![f00004](Images/f00004.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f00004](Images/f00004.png)'
- en: '[Figure 4](#figureanchor-4): The drawing window'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4](#figureanchor-4)：绘图窗口'
- en: You have learned a few things. The value 200 in the ellipse is the x or horizontal
    position, and 100 is the y or vertical position. The value 50 is the size of ellipse,
    which in this case is a circle because the horizontal and vertical sizes are the
    same. The circle is filled with a color, in this case white, and it has a black
    line around it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学到了一些东西。椭圆中的值200是x或水平方向的位置，100是y或垂直方向的位置。值50是椭圆的大小，在这种情况下是一个圆形，因为水平和垂直的大小相同。圆形填充了一种颜色，在此案例中为白色，圆形周围有一条黑色的线。
- en: The remainder of this book essentially involves learning by doing. There’s a
    lot of code and relatively little explanation. You can experiment with the code,
    change the parameters, and see what happens. That’s the whole point. You’ll learn
    the syntax by example and by trying things out.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分基本上涉及通过实践来学习。书中有大量代码，而解释相对较少。你可以尝试运行代码，改变参数，看看会发生什么。这就是整个重点。你将通过示例和实际操作来学习语法。
