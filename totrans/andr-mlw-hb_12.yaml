- en: '**9'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BANKING TROJANS**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Attackers use Android banking trojans (ABTs) to steal money from unsuspecting
    victims by draining their bank accounts or capturing credit card information,
    then using it to make fraudulent purchases. For example, some ABTs harvest a user’s
    credentials by placing a fake window over the user’s banking app. When the user
    enters their credentials into the malicious window, it captures the data, logs
    into the user’s account, and transfers funds to the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Other ABTs monitor for users visiting bank websites. When they try to access
    the legitimate website, the malware redirects them to a fake one that looks identical.
    Once the hapless user enters their credentials, the attacker can use these to
    redirect funds from the victim’s account to theirs. This is often done via transfers
    through a large number of intermediate accounts, to reduce the likelihood of detection.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn about some well-known ABT families and see which
    features machine learning algorithms use to separate ABTs from goodware, as well
    as from other categories of Android malware.
  prefs: []
  type: TYPE_NORMAL
- en: '**Banking Trojan Families**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section introduces you to some important ABT families. Note that the source
    code for several of these applications has been leaked, causing many variants
    to appear. The slight differences between samples make placing individual APKs
    into families more difficult than for other malware categories.
  prefs: []
  type: TYPE_NORMAL
- en: BankBot, a common malware family with many variants dating back to at least
    2014, was distributed via multiple types of apps, including games and apps that
    provided estimates of exchange rates for converting crypto-currencies to hard
    currencies. Though the apps did provide the advertised service, they also included
    BankBot code. This code scanned the infected device, looking for installed banking
    apps for which it had overlay screens. When the victim launched the banking app,
    BankBot placed a user input screen over the real app to harvest banking credentials.
    It also captured incoming text messages and responded to messages requesting two-factor
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Cerberus was first discovered in 2019 by ThreatFabric and described in the blog
    post “Cerberus - A New Banking Trojan from the Underworld.” It primarily targeted
    customers in Italy, Russia, Spain, and other countries in the European Union.
    Like BankBot, Cerberus disguised itself as a legitimate app for currency conversions
    or similar purposes and used overlay screens to capture banking credentials and
    SMS permissions to intercept two-factor authentication messages sent by the bank.
    Recently, developers released Cerberus’s source code on various hacker forums,
    leading to a proliferation of variants as different groups sought to monetize
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The FakeSpy ABT family compromises the phones of its victim by sending them
    text messages about packages that weren’t delivered. Such phishing messages are
    called *smishing*, as the phishing lures are delivered via SMS. The victims click
    a link included in the message, which asks them to download an app that looks
    legitimate but in fact includes the FakeSpy malware. Once the victim’s device
    has been compromised, the malware steals personal information such as their contact
    list and information about their bank and cryptocurrency accounts. FakeSpy was
    first described by Trend Micro in a 2018 blog post, “FakeSpy Targets Japanese
    and Korean-Speaking Users.”
  prefs: []
  type: TYPE_NORMAL
- en: The Marcher family, also known as Marchcaban, has been around since at least
    2013, when F-Secure discovered apps targeting the Spanish bank Banca March. Some
    versions operate by telling the victim that their Flash player needs updating.
    Clicking the link they provide to perform the update downloads the trojan app.
    Marcher also tries to block a number of mobile malware detection products that
    may be installed on the user’s device. Like many of the other ABTs, Marcher uses
    screen overlays to steal user credentials and intercepts incoming two-factor authentication
    requests over SMS to gain access to the user’s account. We’ll use Marcher as an
    example throughout this chapter to illustrate many common ABT behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Medusa is a recent malware family that compromises victims’ devices by sending
    smishing messages encouraging them to install a variety of legitimate-sounding
    apps containing the malware. Medusa is capable of keylogging and intercepting
    messages, as well as audio and video. Like most banking trojans, one of its capabilities
    is reading and responding to two-factor authentication messages from legitimate
    banking apps. ThreatFabric first described it in the 2021 blog post “The Rage
    of Android Banking Trojans.”
  prefs: []
  type: TYPE_NORMAL
- en: Zitmo is an interesting ABT, as it was found on mobile operating systems like
    Symbian, BlackBerry, and Windows Mobile as early as 2011 before coming to Android.
    A mobile version of the well-known Zeus malware for Windows, Zitmo (short for
    *Zeus in the Mobile*) operates in conjunction with a computer already infected
    by Zeus. Zeus sends an SMS to the user’s phone asking them to download an app,
    infecting the device. Then, when the attacker tries to steal money from the user’s
    bank account or make cash transactions, Zitmo forwards the mobile transaction
    authentication number (mTAN) code sent by the bank to the attacker’s phone, which
    can then use the code to authenticate transactions.
  prefs: []
  type: TYPE_NORMAL
- en: One additional ABT worth mentioning is Xbot, which was identified in 2015 when
    it started spreading through apps downloaded from malicious URLs. Once installed
    and run, Xbot followed the playbook of other ABTs by using window overlays and
    reading two-factor authentication text messages from banks. In addition, it could
    encrypt data on the device and make ransom demands to the user.
  prefs: []
  type: TYPE_NORMAL
- en: You might want to investigate other well-known ABT families on your own, including
    Asacub, FakeToken, and Svpeng, all of which have wreaked considerable havoc over
    the years.
  prefs: []
  type: TYPE_NORMAL
- en: '**Banking Trojans vs. Goodware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 9-1](ch09.xhtml#ch9fig1) shows the top 20 features for separating ABTs
    from goodware using the Extra-Trees classifier discussed in [Chapter 7](ch07.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Nine of these features are permission-related, and nine are advanced features
    related to suspicion scores, suspicion ranks, and feature clustering. Just two
    involve specific types of API calls.
  prefs: []
  type: TYPE_NORMAL
- en: '***SMS Permission Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You should immediately see that the SMS-related permissions `SEND_SMS`, `RECEIVE_SMS`,
    `WRITE_SMS`, and `READ_SMS` play a huge role in separating ABTs from goodware.
    [Table 9-1](ch09.xhtml#ch9tab1) shows that virtually every malware family we discussed
    earlier in this chapter requests all of these permissions, with two exceptions:
    BankBot doesn’t request `READ_SMS` and Xbot doesn’t request `WRITE_SMS`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 9-1:** SMS-Related Permissions Requested by Major ABT Families'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Malware** | `**SEND_SMS**` | `**WRITE_SMS**` | `**RECEIVE_SMS**` | `**READ_SMS**`
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| BankBot | Yes | Yes | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Cerberus | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| FakeSpy | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Marcher | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Medusa | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Xbot | Yes | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Zitmo | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'The classifier’s output shows that the percentage of ABTs that request these
    permissions is very high: 70 to 85 percent, compared to less than 5 percent of
    goodware. The reason for this is simple: most banking apps implement two-factor
    authentication via a code sent to the user’s phone, so ABTs need to intercept
    these messages to pass the authentication before attempting any fraudulent action.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/ch09fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-1: Top 20 features that best distinguish ABTs from goodware*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Other Permission Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: ABTs also request many non-SMS permissions. As an example, [Listing 9-1](ch09.xhtml#ch9lis1)
    shows the list of permissions requested by the BankBot malware *com.interactive.crutch*
    (v1, 9b14).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-1: All permissions requested by BankBot*'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that BankBot acquires permissions such as `VIBRATE` and `DISABLE_KEYGUARD`.
    The app uses `VIBRATE` to draw the user’s attention to a fake error message, enticing
    them to grant the app accessibility permissions. This step enables advanced malware
    features that are typically off-limits to regular applications. The `DISABLE_KEYGUARD`
    permission is used to remove the phone’s lock screen to, for example, force a
    user interface event that the malware wants to process.
  prefs: []
  type: TYPE_NORMAL
- en: Over 90 percent of ABTs request `READ_PHONE_STATE`, a permission also common
    in rooting malware, compared to around 30 percent of goodware. ABTs can use this
    permission to capture private data about the victim’s phone, such as its IMEI
    number. As mentioned in [Chapter 7](ch07.xhtml), this type of information is critical
    for mobile payment apps that need to verify the identify of the device sending
    a payment request. With the exception of Cerberus, all ABT families discussed
    earlier in this chapter request this permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another permission popular with rooting malware that is commonly requested
    by ABTs is `SYSTEM_ALERT_WINDOW`: over 60 percent of ABTs request this, compared
    to about 10 percent of goodware. Giving an app this permission lets it display
    pop-up alert windows. This functionality has clear value for an ABT; it enables
    it to show bogus banking app screens on top of real banking apps. Of the seven
    ABTs discussed earlier in this chapter, FakeSpy, Medusa, Xbot and Zitmo request
    this permission, while BankBot, Cerberus, and Marcher do not.'
  prefs: []
  type: TYPE_NORMAL
- en: The `GET_TASKS` permission lets an app identify the running processes on a device.
    As you can see from the classifier’s output, ABTs are far more likely to request
    this permission than goodware; almost 80 percent of ABTs request it, versus around
    15 percent of goodware. Our experience shows that many banking trojans request
    the `GET_TASKS` permission to watch for the launching of legitimate banking apps,
    so they can swoop in and overlay their phishing windows. Android has severely
    restricted this feature for precisely that reason. Of the seven ABT families mentioned
    earlier in this chapter, FakeSpy, Marcher, Medusa, and Xbot request this permission.
  prefs: []
  type: TYPE_NORMAL
- en: A permission that ABTs frequently request but rooting malware doesn’t is the
    `CHANGE_NETWORK_STATE` permission, which enables an app to connect to a Wi-Fi
    network. Over 40 percent of ABTs request this permission, compared to less than
    5 percent of goodware. Of the ABT families mentioned we introduced earlier, Marcher,
    Medusa, Xbot, and Zitmo request this permission. Interestingly, we haven’t witnessed
    other ABTs using this permission to perform malicious tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The `RECEIVE_BOOT_COMPLETED` permission is another one that we discussed in
    the context of rooting malware. It enables the app to see that the device has
    completed its boot process. An ABT may wish to receive this notification so it
    can start up as soon as the device is running to continue monitoring SMS traffic
    or wait for the user to launch a banking app. All seven of the ABT families mentioned
    earlier in this chapter request this permission.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all of the other features useful for separating ABTs from goodware are
    related to advanced features, including suspicion rank and clustering-based features
    of the kind introduced in [Chapter 6](ch06.xhtml), which capture the potential
    maliciousness of an app based on the TSG.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prediction Efficacy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'How effective are classifiers at predicting whether an app is an ABT rather
    than goodware or some other form of malware? The results in [Table 9-2](ch09.xhtml#ch9tab2)
    show our ability to make such predictions when comparing apps to goodware. The
    rows in this table show the types of features used: basic API, static, and dynamic
    features; advanced TSG-based, landmark-based, feature clustering–based, and correlational
    graph–based features; and combinations of these types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 9-2:** Metrics for Evaluating ABTs vs. Goodware'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| API package | XGBoost | 0.9862 | 0.9483 | 0.9161 | 0.9319 | 0.0517 | 0.0293
    |'
  prefs: []
  type: TYPE_TB
- en: '| Static (S) | XGBoost | 0.9792 | 0.9780 | 0.9208 | 0.9485 | 0.0220 | 0.0275
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic (D) | MLP | 0.9215 | 0.9242 | 0.6550 | 0.7667 | 0.0758 | 0.1107 |'
  prefs: []
  type: TYPE_TB
- en: '| S + D | XGBoost | 0.9810 | 0.9819 | 0.9208 | 0.9504 | 0.0181 | 0.0274 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D | XGBoost | 0.9975 | 0.9837 | 0.9642 | 0.9738 | 0.0163 | 0.0126
    |'
  prefs: []
  type: TYPE_TB
- en: '| TSG | XGBoost | 0.9872 | 0.9463 | 0.9142 | 0.9300 | 0.0537 | 0.0300 |'
  prefs: []
  type: TYPE_TB
- en: '| LM | KNN | 0.5864 | 0.2826 | 0.9859 | 0.4393 | 0.7174 | 0.0419 |'
  prefs: []
  type: TYPE_TB
- en: '| FC | RF | 0.9820 | 0.9215 | 0.8633 | 0.8915 | 0.0785 | 0.0473 |'
  prefs: []
  type: TYPE_TB
- en: '| CG | KNN | 0.5101 | 0.2617 | 1.0000 | 0.4148 | 0.7383 | 0.0000 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + TSG | XGBoost | 0.9975 | 0.9827 | 0.9661 | 0.9743 | 0.0173
    | 0.0119 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + LM | XGBoost | 0.9974 | 0.9837 | 0.9651 | 0.9743 | 0.0163 |
    0.0123 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + FC | XGBoost | 0.9975 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + CG | XGBoost | 0.9974 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
  prefs: []
  type: TYPE_TB
- en: '| All features | XGBoost | 0.9973 | 0.9809 | 0.9670 | 0.9739 | 0.0191 | 0.0116
    |'
  prefs: []
  type: TYPE_TB
- en: '| Best late fusion | XGBoost | 0.9982 | 0.9905 | 0.9736 | **0.9819** | 0.0095
    | 0.0093 |'
  prefs: []
  type: TYPE_TB
- en: Machine learning algorithms are able to separate ABTs from goodware at high
    rates, with the best late fusion result producing an F1 score of 0.9819, a precision
    of 0.9905, and a recall of 0.9736\. These are great numbers, suggesting that most
    apps classified as ABTs are indeed ABTs, and that the classifiers have discovered
    most ABTs in the set of apps.
  prefs: []
  type: TYPE_NORMAL
- en: '**Banking Trojans vs. Other Malware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 9-2](ch09.xhtml#ch9fig2) shows the 20 most important features for distinguishing
    ABTs from other forms of malware.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, 14 of the 20 features involve permissions. Thirteen of these features
    represent permissions sought by the app and one feature indicates the number of
    dangerous permissions sought. The remaining six features are advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: '***Permission-Related Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As in the case of separating ABTs from goodware, SMS-related permissions are
    the most important. We see that the percentage of ABTs requesting the `RECEIVE_SMS`
    permission is more than double that of other forms of malware. The same is true
    for `WRITE_SMS` and `READ_SMS`, probably due to the fact that other forms of malware,
    such as ransomware, may not need to watch for and respond to two-factor authentication
    messages sent by banks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/ch09fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-2: Top 20 features that best distinguish ABTs from other malware*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 9-3](ch09.xhtml#ch9tab3) shows four non-SMS-related permissions requested
    more frequently by ABTs than by other forms of malware and indicates which of
    the ABTs discussed earlier in this chapter use them.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 9-3:** Non-SMS-Related Permissions Requested by Major ABT Families'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Permission** | **BankBot** | **Cerberus** | **FakeSpy** | **Marcher** |
    **Medusa** | **Xbot** | **Zitmo** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CALL_PHONE` | Yes | Yes | No | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `WAKE_LOCK` | Yes | No | Yes | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `WRITE_CONTACTS` | No | No | No | No | No | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `READ_CALL_LOGS` | No | No | No | No | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: One key permission, `CALL_PHONE`, enables attackers to make calls from the phone
    without the user even noticing. They could perhaps use this permission to confirm
    a bank transaction. With the exception of FakeSpy, all malware families introduced
    in this chapter request this permission. Xbot uses it to set up call forwarding
    on the infected device, likely to redirect incoming calls from the user’s bank
    to the scammers. Samples of the Medusa family use this permission to call random
    phone numbers as instructed by the malware’s command-and-control server.
  prefs: []
  type: TYPE_NORMAL
- en: Another permission that distinguishes ABTs from other malware is `WAKE_LOCK`,
    which ensures that the phone stays on. The use of this permission among ABTs is
    widespread and often employed to force the device to stay awake during critical
    moments while the malware tries to steal data or money. For example, BankBot keeps
    the device alive while disabling the lock screen and forcing user interface interactions.
    The Marcher family is less subtle; it forces the device to stay awake at all times.
    With the exception of Cerberus, all of the malware families covered in this chapter
    request this permission. Although other forms of malware, like spyware and SMS
    fraud apps, could leverage it, we don’t see it requested as frequently by other
    malware categories.
  prefs: []
  type: TYPE_NORMAL
- en: The `WRITE_CONTACTS` permission, which allows an app to write to the contact
    list, is another one that distinguishes ABTs from other malware. It could be abused
    in many ways; for instance, it could write a new phone number for your bank and
    then call you from that number, making it seem as though the hacker’s number is
    the bank’s. Of the seven malware families we have discussed, only Zitmo requests
    this permission. We haven’t seen it abused in practice.
  prefs: []
  type: TYPE_NORMAL
- en: A final permission that distinguishes ABTs from other malware is `READ_CALL_LOG`.
    This permission enables an app to see who has called a phone, the days of the
    week and times of the day at which those calls were placed, and more. This privilege
    could, in principle, enable fraudsters to impersonate someone who has called the
    victim before. For instance, they could send spoofing texts referencing a real
    conversation the victim had to trick the user into giving them money or information.
    Though none of the malware families discussed earlier in this chapter request
    this permission, our classifiers have found it to be associated with ABTs.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prediction Efficacy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Table 9-4](ch09.xhtml#ch9tab4) shows the ability of machine learning algorithms
    to separate ABTs from other malware.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 9-4:** Metrics for Evaluating ABTs vs. Other Malware'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| API package | GBDT | 0.9099 | 0.8476 | 0.8388 | 0.8432 | 0.1524 | 0.1603
    |'
  prefs: []
  type: TYPE_TB
- en: '| Static (S) | XGBoost | 0.9156 | 0.8513 | 0.8401 | 0.8456 | 0.1487 | 0.1592
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic (D) | MLP | 0.8394 | 0.8100 | 0.6378 | 0.7137 | 0.1900 | 0.3008 |'
  prefs: []
  type: TYPE_TB
- en: '| S + D | XGBoost | 0.9138 | 0.8560 | 0.8391 | 0.8475 | 0.1440 | 0.1591 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D | XGBoost | 0.9447 | 0.8794 | 0.8794 | 0.8794 | 0.1206 | 0.1214
    |'
  prefs: []
  type: TYPE_TB
- en: '| TSG | GBDT | 0.9117 | 0.8476 | 0.8492 | 0.8484 | 0.1524 | 0.1518 |'
  prefs: []
  type: TYPE_TB
- en: '| LM | XGBoost | 0.5451 | 0.5266 | 0.8878 | 0.6611 | 0.4734 | 0.3650 |'
  prefs: []
  type: TYPE_TB
- en: '| FC | XGBoost | 0.8409 | 0.7588 | 0.7681 | 0.7635 | 0.2412 | 0.2363 |'
  prefs: []
  type: TYPE_TB
- en: '| CG | SVM | 0.5045 | 0.5028 | 1.0000 | 0.6692 | 0.4972 | 0.0000 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + TSG | XGBoost | 0.9463 | 0.8807 | 0.8765 | 0.8786 | 0.1193
    | 0.1237 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + LM | XGBoost | 0.9444 | 0.8815 | 0.8831 | 0.8823 | 0.1185 |
    0.1179 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + FC | XGBoost | 0.9451 | 0.8803 | 0.8803 | 0.8803 | 0.1197 |
    0.1205 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + CG | XGBoost | 0.9439 | 0.8789 | 0.8756 | 0.8772 | 0.1211 |
    0.1248 |'
  prefs: []
  type: TYPE_TB
- en: '| All features | XGBoost | 0.9476 | 0.8827 | 0.8794 | 0.8810 | 0.1173 | 0.1210
    |'
  prefs: []
  type: TYPE_TB
- en: '| Best late fusion | XGBoost | 0.9796 | 0.9447 | 0.9576 | **0.9507** | 0.0553
    | 0.0424 |'
  prefs: []
  type: TYPE_TB
- en: 'The best late fusion result in this case produces an F1 score of 0.9507, with
    a precision of 0.9447 and a recall of 0.9576\. While these are excellent numbers,
    they’re slightly lower than those for separating ABTs from goodware. This is to
    be expected: ABTs often have characteristics in common with other malware categories,
    making them harder to separate out. For example, some ABTs, like FakeSpy, steal
    contact lists, a behavior also observed in spyware apps. Others, like Xbot, have
    both ABT behavior and ransomware capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Marcher: A Case Study**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We introduced Marcher earlier in this chapter. By examining the code in this
    app, *com.fasstr* (v1, c219), we can see several of the ABT characteristics we’ve
    discussed so far. [Listing 9-2](ch09.xhtml#ch9lis2) shows the permissions sought
    by the app. Notice that it uses all the ABT permissions we’ve mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-2: All permissions requested by Marcher*'
  prefs: []
  type: TYPE_NORMAL
- en: Besides the very important SMS-related permissions used for intercepting and
    responding to two-factor authentication messages, Marcher has other interesting
    capabilities. It gains persistence on the device with the help of the `RECEIVE_BOOT_COMPLETED`
    permission, which allows it to restart after every phone boot. It can dial arbitrary
    numbers downloaded from its command-and-control server with the `CALL_PHONE` permission,
    and it uses the `VIBRATE` permission to draw the user’s attention to certain dialogs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 9-3](ch09.xhtml#ch9lis3) shows Marcher looking for the presence of
    the Bankwest mobile banking app *au.com.bankwest.mobile*, one of several banking
    apps that Marcher searches for in order to overlay screens.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-3: A code snippet showing Marcher looking for a banking app*'
  prefs: []
  type: TYPE_NORMAL
- en: The specific banking apps to look for are passed down from the command-and-control
    server. The only reason *au.com.bankwest.mobile* appears in the source code is
    that the malware seems to require some special handling for this app compared
    to all other banking apps.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 9-4](ch09.xhtml#ch9lis4) shows the Marcher ABT receiving and processing
    incoming SMS messages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-4: A code snippet showing Marcher creating an SMS message to send*'
  prefs: []
  type: TYPE_NORMAL
- en: To access the incoming SMS messages, the malware uses the same APIs that goodware
    would. It registers a broadcast receiver that is called by the operating system
    every time an SMS arrives on the system. Then, the malware accesses the SMS text
    with the help of the `SmsMessage.createFromPdu` method. The only difficulty is
    that the malware code is somewhat obfuscated. Instead of calling `SmsMessage.createFromPdu`
    directly, the malware uses reflection through `SmsMessage.class.getMethod` and
    minimal string obfuscation, by writing `cre_ateF_romP_du` instead of `createFromPdu`.
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 9-5](ch09.xhtml#ch9lis5), Marcher tries to become the administrator
    of the compromised device so that it can alter settings related to device administration
    at will.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-5: A code snippet showing Marcher trying to become the device admin*'
  prefs: []
  type: TYPE_NORMAL
- en: Again, the malware uses exactly the same APIs that goodware would use for this
    purpose. It launches an activity of type `ADD_DEVICE_ADMIN`, which opens the system
    dialog for granting the app the desired permissions. If the user follows through
    with the instructions in this dialog, the malware will be granted device administrator
    permissions. Its command-and-control server will then have the ability to send
    it commands, and it will even be able to set or reset device passwords and lock
    users out of their own devices.
  prefs: []
  type: TYPE_NORMAL
- en: '**Up Next**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Machine learning methods perform very well at detecting ABTs. In this chapter,
    we’ve observed that virtually all ABTs extensively use the SMS-related permissions.
    Other requested permissions frequently found in ABTs, such as `RECEIVE_BOOT_COMPLETE`,
    should also make an app highly suspect. In addition to permissions, advanced features
    based on suspicion scores, suspicion ranks, and feature clustering are very important
    in distinguishing between ABTs and goodware. These findings suggest that advanced
    features may be harder for an adversary to reverse engineer.
  prefs: []
  type: TYPE_NORMAL
- en: Our next chapter will focus on ransomware apps. We’ll introduce the risks this
    malware category poses to Android users, as well as the techniques it relies on
    to manipulate data access and control on Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  prefs: []
  type: TYPE_NORMAL
