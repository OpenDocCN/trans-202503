- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">8</samp> <samp class="SANS_Dogma_OT_Bold_B_11">TIPS
    AND TRICKS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: There is still so much more to discover within the rich Dash library. In this
    chapter, we’ve put together a few pointers to help you take the next step in your
    Dash journey. These are tips that we have found helpful as we learned Dash and
    started building more advanced applications.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll take a deeper look at the Dash Enterprise App Gallery, where you can discover
    open source code used to build more advanced apps within specific industries.
    You’ll also learn to leverage the Plotly community to help you overcome coding
    bumps along the road. We’ll share some Bootstrap themes and debugging tools that
    will help you embellish your apps and solve bugs. We’ll talk you through navigating
    the dash-labs repository, where cutting-edge Dash features are constantly developed.
    Lastly, this chapter will offer you a set of Dash learning resources to enhance
    your knowledge and make programming with Dash even more fun and exciting.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Enterprise App Gallery</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we’ve mentioned throughout the book, one helpful way to learn about more
    advanced and complex Dash apps is by exploring the Dash Enterprise App Gallery
    ([*https://<wbr>dash<wbr>.gallery<wbr>/Portal*](https://dash.gallery/Portal)).
    Many of these apps are open source, meaning the code is fully available to you
    on GitHub. To find out whether a particular app is open source, click the information
    icon located in the lower-right corner of the app card (pointed to in [Figure
    8-1](chapter8.xhtml#fig8-1)); a modal should open, and if it says something along
    the lines of “Unauthenticated: Anyone can access this app,” it will be open source.
    This information card should also tell you which programming language the app
    uses; a great majority of them are written in Python, as you might expect.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-1: The information
    icon on an app card in the Dash Gallery</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'The gallery is being added to all the time. To find the apps that are most
    relevant to your needs, filter the page by clicking a specific industry at the
    very top of the page. One tip: as you scroll through the apps, think of the layout
    you want for your own current app project. If you find a particular layout interesting,
    access the open source code to see if you can replicate that layout in your app.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Enhancing Your Learning with the Plotly
    Forum</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Plotly forum ([*https://<wbr>community<wbr>.plotly<wbr>.com*](https://community.plotly.com))
    is a community forum for both Plotly and Dash. If you don’t already have an account
    on the Plotly forum, you should open one now. Countless times through your Dash
    development journey, the members of the forum community will help you learn more
    about Dash and the Plotly graphing library, overcome hurdles, and resolve specific
    bugs. Even if you don’t currently have a problem with your code, we recommend
    that you take the time to go onto the forum and read a few threads on a topic
    you’d like to explore. There is so much to learn just by reading about the experiences
    of other users; most importantly, browsing the forum will help you understand
    how to create a topic, provide useful answers, and ask questions in a way that
    will give you actionable answers. You’ll soon see how the forum contributes to
    the growth of the community. [Figure 8-2](chapter8.xhtml#fig8-2) shows the landing
    page of the forum; of course, it will look different every time you visit, so
    it won’t look exactly like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-2: The Plotly forum
    landing page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: On the left of the page you will find the main categories, *Dash* and *Plotly*.
    On the right you’ll find the most recent posts for both categories, regardless
    of the topic.
  prefs: []
  type: TYPE_NORMAL
- en: The community on the forum tends to be very active and helpful. To ensure that
    your own questions are likely to be seen and answered, always use a post title
    appropriate for your question and clearly state the problem you’re facing; also,
    make sure you add the code related to your question. This code is often referred
    to as a *minimal working example*, and it allows potential responders to copy
    your code and test it on their system to see if they can produce the same problem
    or error. Make certain that the code is formatted correctly, using the preformatted
    text symbol <samp class="SANS_TheSansMonoCd_W5Regular_11"></></samp> inside the
    editing toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: As you gain more experience in Dash, take the time to give back to the community
    and help others by answering their questions as well. Finally, we encourage you
    to share apps you create with the community by using *show-and-tell* to tag your
    posts.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">App Theme Explorer</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In [Chapter 5](chapter5.xhtml), you learned how to add Bootstrap themes to
    your app, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: These themes will apply only to Bootstrap components in your app. To fully implement
    a theme into your app, you will need to apply the theme to the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>,
    Dash Core Components, and Plotly figures as well. The *Dash Bootstrap Theme Explorer*
    at [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com),
    shown in [Figure 8-3](chapter8.xhtml#fig8-3), allows you to choose a theme and
    see how it looks on all the components, text, and figures on the page. To view
    the available themes, click **Change Theme** on the left side of the page. A panel
    should slide out with a list of themes. Click one, and take a look at how the
    dropdown and checklist components, title, text, graph, and <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    all change in style and color.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-3: The Dash Bootstrap
    Theme Explorer landing page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Choose a theme that suits your app and follow these four steps to add it to
    all the elements of the app. We’ll implement the <samp class="SANS_TheSansMonoCd_W5Regular_11">VAPOR</samp>
    theme within a sample app as our example; find the full *app.py* file in the *[Chapter-8](chapter8.xhtml)*
    folder of the book’s resources at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash).
  prefs: []
  type: TYPE_NORMAL
- en: '1.  Install the *dash_bootstrap_templates* library and then import both *load_figure_template*
    and *dash_bootstrap_components*. To do this, open your PyCharm terminal and enter:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-templates</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'To import the necessary libraries, type the following in your main app file:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">import dash_bootstrap_components
    as dbc</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">from dash_bootstrap_templates import
    load_figure_template</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '2.  Add the prebuilt Dash Bootstrap stylesheet to your app and select a theme.
    Here we chose <samp class="SANS_TheSansMonoCd_W5Regular_11">VAPOR</samp>. Make
    sure you maintain the uppercase style when replacing the theme where Dash is instantiated:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc_css = "</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates
  prefs: []
  type: TYPE_NORMAL
- en: '@V1.0.4/dbc.min.css"</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[dbc.themes.VAPOR, dbc_css])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">load_figure_template(["vapor"])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '3.  Incorporate the selected theme into the <samp class="SANS_TheSansMonoCd_W5Regular_11">template</samp>
    prop of the bar graph:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.bar(df, x="Fruit", y="Amount",
    color="City", barmode="group",
  prefs: []
  type: TYPE_NORMAL
- en: template="vapor")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '4.  Lastly, add <samp class="SANS_TheSansMonoCd_W5Regular_11">className="dbc"</samp>
    to the outer container of the app, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container([</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">    html.H1("Hello Dash", style={''textAlign'':
    ''center''}),</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    html.P("Type anything here:"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    dcc.Input(className="mb-2"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    dcc.Graph(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       id='example-graph',</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       figure=fig</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    fluid=True,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="dbc"</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: The *app.py* file used in this example should generate the app shown in [Figure
    8-4](chapter8.xhtml#fig8-4) when you execute it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-4: Complete sample
    app</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Debugging a Dash App</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Knowing how to effectively debug your app will save you many hours of trial
    and error when bugs occur. Teaching you the full skill set of debugging is beyond
    the scope of this chapter; however, here we’ve put some material together to help
    you get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python has a few options for free debugger packages. For Dash, we recommend
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> package. To install
    it, go to your terminal and enter:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install ipdb</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example where debugging might be helpful. Find the *debug-demo.py*
    file in the book’s code at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash).
    When you run it on your computer, you should see something like [Figure 8-5](chapter8.xhtml#fig8-5).
    This is supposed to be an app that graphs bill totals over time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-5: The</samp> <samp
    class="SANS_Futura_Std_Book_11">debug-demo.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">app
    once executed</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is pretty frustrating: our app doesn’t throw any errors, but clearly something
    is wrong since the graph is not displaying any data. Let’s debug our app to find
    out where the problem lies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, uncomment the first line of code in *debug-demo.py* to <samp class="SANS_TheSansMonoCd_W5Regular_11">import
    ipdb</samp>. Then activate the debugging feature in the first line of code inside
    the callback function by uncommenting this line:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb.set_trace()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'You can of course debug any section of the app you’d like; in our case, we’ll
    start at the callback function that builds the graph, since the problem is with
    the graph. Lastly, turn off the native Dash debugging mechanism and turn off the
    app’s multithreading so that you don’t break your session with overlapping <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> instances, as is done in *debug-demo.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">debug=False</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">threaded=False</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">,
    port=8004)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Save and run the altered *debug-demo.py* file and click the HTTP link to open
    your app in the browser. Going back to the run tool window, you should see something
    like [Figure 8-6](chapter8.xhtml#fig8-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-6: Debugging activated
    in the PyCharm run window</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If you try to execute <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>
    in the run window, you’ll get an error saying that <samp class="SANS_TheSansMonoCd_W5Regular_11">dff</samp>
    is not defined. That’s because the line of code that creates and defines <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dff</samp> is on line 23, which has not
    been executed yet. To tell the debugger to execute that next line of code, enter
    a lowercase **n** in the run window. Now, if you execute <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>
    again, you should see the first five rows of your DataFrame, as shown in [Figure
    8-7](chapter8.xhtml#fig8-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-7: The DataFrame printed
    in the run window</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, when you next press **n** to execute code line 24 and enter <samp
    class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp> again, you’ll
    see a notification in the run window telling you the DataFrame is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Empty DataFrame</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Columns: [total_bill, tip, sex,
    smoker, day, time, size]</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Index: []</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because line 24 filters the <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp>
    column to only have rows with <samp class="SANS_TheSansMonoCd_W5Regular_11">''Mon''</samp>.
    It appears that zero rows have <samp class="SANS_TheSansMonoCd_W5Regular_11">''Mon''</samp>
    as a value, which is why the DataFrame is empty. To check what unique values are
    present in the <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp> column,
    enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">print(df.day.unique())</samp>
    in the run window. You’ll find only the <samp class="SANS_TheSansMonoCd_W5Regular_11">[''Sun''
    ''Sat'' ''Thur'' ''Fri'']</samp> values within the <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp>
    column. That is why the graph did not plot anything when the app was executed:
    there was no data to plot.'
  prefs: []
  type: TYPE_NORMAL
- en: To fix your app, change <samp class="SANS_TheSansMonoCd_W5Regular_11">'Mon'</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">'Fri'</samp> on line 24 and restart
    the *debug-demo.py* file. (If your app will not restart, change the port number
    at the very end from 8004 to anything else.) Back in the terminal, instead of
    entering **n** for each line of code, you can just enter **c** to continue program
    execution until completion. Because there is no other bug (breakpoint) in the
    app, it successfully executes and should look like [Figure 8-8](chapter8.xhtml#fig8-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-8: The</samp> <samp
    class="SANS_Futura_Std_Book_11">debug-demo.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">app
    executed successfully after debugging</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: For an <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> cheat sheet,
    go to [*https://<wbr>wangchuan<wbr>.github<wbr>.io<wbr>/coding<wbr>/2017<wbr>/07<wbr>/12<wbr>/ipdb<wbr>-cheat<wbr>-sheet<wbr>.xhtml<wbr>*](https://wangchuan.github.io/coding/2017/07/12/ipdb-cheat-sheet.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Happy debugging!
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">dash-labs</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*dash-labs* is a GitHub repository started by Plotly as a work-in-progress
    technical preview of potential future Dash features, found at [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-labs*](https://github.com/plotly/dash-labs).
    Community feedback and active participation are essential to the success of this
    repository because features are built for and with the help of the community.
    Some features from the past couple of years that were developed in dash-labs include
    flexible callback signatures ([*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/flexible<wbr>-callback<wbr>-signatures*](https://dash.plotly.com/flexible-callback-signatures))
    and long callbacks ([*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/long<wbr>-callbacks*](https://dash.plotly.com/long-callbacks)).'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, two active projects in dash-labs include the Multipage
    Apps feature for a quick and seamless way to write multipage apps and the Dashdown
    feature to allow execution of Markdown documents with Dash. To start exploring
    dash-labs, click the ***docs*** folder in the dash-labs repository ([Figure 8-9](chapter8.xhtml#fig8-9))
    and read more about the features that have been developed so far.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure8-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-9: The</samp> <samp
    class="SANS_Futura_Std_Book_11">docs</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">folder
    pertaining to the dash-labs repository</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To try out some of the features yourself, you can <samp class="SANS_TheSansMonoCd_W5Regular_11">git
    clone dash-labs</samp> and run any of the *app.py* or *app_dbc.py* files located
    in the *demos* folder.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Formatting Your Code with Black</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Writing code in a well-formatted manner is not only visually pleasing but also
    crucial for readability. As you develop your skills, the programs you create will
    become bigger and more complex. If those programs are not well formatted, you
    can easily get lost within your own code. Manually formatting your code according
    to the PEP8 format, which is the official Python style guide, is very time-consuming.
    Luckily, we have the Python tool *Black*: a code formatter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see Black in action. Start by installing Black:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install black</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Then download the *pre-black-formatting.py* file from [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    and open it ([Listing 8-1](chapter8.xhtml#List8-1)).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶<samp class="SANS_TheSansMonoCd_W5Regular_11"> ''Fruit'':
    ["Apples", "Oranges", "Bananas", "Apples", "Oranges",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              "Bananas"],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "Amount": [4, 1, 2, 2,
    4, 5],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "City": ["SF", "SF", "SF",
    "Montreal", "Montreal", "Montreal"]</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">})</samp>
  prefs: []
  type: TYPE_NORMAL
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">fig=px.bar(df, x=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Fruit", y="Amount", color="City")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div([</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1("Fruit Analysis App",
    style={'textAlign':'center'}),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸  <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      id='example-graph',</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      figure=fig</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 8-1: The</samp> <samp
    class="SANS_Futura_Std_Book_11">pre-black-formatting.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: There are a few formatting inconsistencies in the code. For example, the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp> key ❶ is surrounded by single
    quotation marks while the <samp class="SANS_TheSansMonoCd_W5Regular_11">Amount</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">City</samp> keys are surrounded
    by double quotation marks. Likewise, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp>
    key values span across two lines of code while the other key values are written
    out on one line of code. Also, in the line that builds the Plotly Express bar
    chart ❷, we can see that there is no space before or after the equal sign (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">fig=px.bar</samp>). Lastly, we see that
    the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component
    is written out across four lines of code ❸, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp>
    component, right above it, is written out on one line of code. There are a few
    more inconsistencies in the code; see if you can spot them before using Black.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Black, open the terminal and move into the directory that holds *pre-black-formatting.py*.
    Once there, enter the command followed by the filename, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">black
    pre-black-formatting.py</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Black will automatically format the file without renaming it. For the purpose
    of this demo, we renamed the file to *post-black-formatting.py*, also located
    in the book’s GitHub repository ([Listing 8-2](chapter8.xhtml#List8-2)).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   {</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "Fruit": ["Apples", "Oranges",
    "Bananas", "Apples", "Oranges", "Bananas"],</samp> ❶'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "Amount": [4, 1, 2, 2,
    4, 5],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "City": ["SF", "SF",
    "SF", "Montreal", "Montreal", "Montreal"],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   }</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     fig = px.bar(df, x=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Fruit", y="Amount", color="City")</samp>
    ❷
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H1("Fruit Analysis
    App", style={"textAlign": "center"}),</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Graph(id="example-graph",
    figure=fig),</samp> ❸
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 8-2: The</samp> <samp
    class="SANS_Futura_Std_Book_11">post-black-formatting.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    formatted with Black</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We see that all single quotation marks have been replaced with double quotation
    marks and the <samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp> key values
    are written out on one line of code instead of two ❶, there’s an equal amount
    of spacing before and after the equal sign ❷, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>
    component is also on one line instead of four ❸. As you can see, the code formatted
    by Black is consistent and a lot easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Follow-up Resources</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The important thing is not to stop questioning; curiosity has its own reason
    for existing.*'
  prefs: []
  type: TYPE_NORMAL
- en: —Albert Einstein
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding that learning never stops, we’ve put together a few resources
    to help you become an expert in Dash:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our very own website dedicated to teaching Dash and sharing updates related
    to this book also offers a suggested list of videos to watch to deepen your knowledge
    of Dash: [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Dash Bootstrap Cheat Sheet site, built by our coauthor Ann Marie Ward,
    offers summaries of the main Bootstrap styling syntax, shortcuts to the documentation
    on all the Dash Bootstrap Components, and links to different sections of the Dash
    docs: [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finxter, a Python educational website with over half a million students monthly
    founded by our coauthor Chris Mayer, is a great place to learn Python and sharpen
    your pandas skillset. Go to [*https://<wbr>app<wbr>.finxter<wbr>.com*](https://app.finxter.com).
    For free access to Chris’s book *Coffee Break Pandas*, see [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/coffee<wbr>-break<wbr>-pandas<wbr>-book<wbr>-page*](https://blog.finxter.com/coffee-break-pandas-book-page).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Charming Data’s YouTube channel and its respective GitHub repository, created
    and maintained by our coauthor Adam Schroeder, are excellent resources for learning
    Dash and staying up-to-date with the most recent Dash developments: [*https://<wbr>www<wbr>.youtube<wbr>.com<wbr>/c<wbr>/CharmingData*](https://www.youtube.com/c/CharmingData)
    and [*https://<wbr>github<wbr>.com<wbr>/Coding<wbr>-with<wbr>-Adam<wbr>/Dash<wbr>-by<wbr>-Plotly<wbr>*](https://github.com/Coding-with-Adam/Dash-by-Plotly).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The comprehensive list of Dash components created and maintained by the community
    will allow you to enrich your app with capabilities and features that will make
    it look more professional: [*https://<wbr>community<wbr>.plotly<wbr>.com<wbr>/t<wbr>/community<wbr>-components<wbr>-index<wbr>/60098<wbr>*](https://community.plotly.com/t/community-components-index/60098).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are a few online courses dedicated to teaching Dash and Plotly.
    Please make sure you read the reviews before deciding which course would work
    for you:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*https://www.datacamp.com/courses/building-dashboards-with-dash-and-plotly*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*https://www.coursera.org/projects/interactive-dashboards-plotly-dash*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*https://www.pluralsight.com/courses/plotly-building-data-visualizations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*https://www.udemy.com/course/interactive-python-dashboards-with-plotly-and-dash*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
