- en: 'We build our computer systems the way we build our cities: over time, without
    a plan, on top of ruins.'
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们建造计算机系统的方式就像我们建造城市的方式：随着时间推移，没有规划，建立在废墟之上。
- en: ''
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Ellen Ullman
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——艾伦·厄尔曼
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: 'In 1975, renowned physicist David L. Goodstein published his book *States of
    Matter* with the following introduction:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 1975年，著名物理学家大卫·L·古德斯坦（David L. Goodstein）出版了他的著作《物质的状态》（*States of Matter*），并在书中写道：
- en: '*Ludwig Boltzmann, who spent much of his life studying statistical mechanics,
    died in 1906, by his own hand. Paul Ehrenfest, carrying on the work, died similarly
    in 1933\. Now it is our turn to study statistical mechanics.*'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*路德维希·玻尔兹曼（Ludwig Boltzmann），他一生大部分时间都在研究统计力学，于1906年自杀。保罗·厄恩费斯特（Paul Ehrenfest），继续这项工作的人，于1933年也以类似的方式去世。现在轮到我们来研究统计力学了。*'
- en: This is a book about how to run legacy modernizations, a topic many software
    engineers regard as slow-moving career suicide, if not the prologue to a literal
    one. This book is for people who work at large organizations with aging technology,
    but it is also a book for people who work at small startups still building their
    technology. Restoring legacy systems to operational excellence is ultimately about
    resuscitating an iterative development process so that the systems are being maintained
    and evolving as time goes on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本关于如何运行遗留系统现代化的书，许多软件工程师认为这是一个缓慢的职业自杀，甚至是字面意义上的开篇。此书适用于在大型组织中工作、处理老化技术的人，但它同样适用于那些在仍在构建自己技术的小型创业公司工作的人。恢复遗留系统的运营卓越，归根结底是为了恢复一个迭代开发过程，使得这些系统随着时间的推移能够得到维护和演进。
- en: Most of the advice in this book can just as easily be used for building new
    technology, but legacy systems hold a special place in my heart. I spent the first
    10 years of my professional career traveling around the world, looking for work
    in applied anthropology while programming computers for fun on the side. I knew
    how to program because my father was a computer programmer, and I grew up in a
    house filled with computers at a time when that was rare.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中的大多数建议同样适用于构建新技术，但遗留系统在我心中占有特殊的地位。我职业生涯的最初十年，我环游世界寻找应用人类学的工作，同时也在空闲时间编程。我会编程，因为我的父亲是一名计算机程序员，我在一个充满计算机的家庭中长大，那时这还很罕见。
- en: I never became the swashbuckling international aid worker I imagined myself
    to be, but I ended up finding my applied anthropology work in legacy modernizations.
    Like pottery sherds, old computer programs are artifacts of human thought. There’s
    so much you can tell about an organization’s past by looking at its code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我从未成为自己想象中的那种勇敢的国际援助工作者，但我最终找到了将应用人类学运用于遗留系统现代化的工作。像陶器碎片一样，旧计算机程序是人类思想的遗物。通过查看代码，你能了解一个组织过去的很多信息。
- en: To understand legacy systems, you have to be able to define how the original
    requirements were determined. You have to excavate an entire thought process and
    figure out what the trade-offs look like now that the options are different.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解遗留系统，你必须能够定义原始需求是如何确定的。你需要挖掘整个思维过程，并弄清楚当选项发生变化时，权衡取舍的情况是什么样的。
- en: Simply being old is not enough to make something legacy. The subtext behind
    the phrase *legacy technology* is that it’s also bad, barely functioning maybe,
    but legacy technology exists only if it is successful. These old programs are
    perhaps less efficient than they were before, but technology that isn’t used doesn’t
    survive decades.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为老旧并不足以让某个事物成为遗留系统。*遗留技术*这一词背后的潜台词是它也是糟糕的，可能几乎不能运行，但遗留技术之所以存在，仅仅因为它是成功的。这些旧程序或许不如以前高效，但没有被使用的技术是不可能存活几十年的。
- en: We are past the point where all technical conversations and knowledge sharing
    can be about building new things. We have too many old things. People from my
    father’s generation wrote a lot of programs, and every year they are shocked by
    how much of their work survives, still running in a production system somewhere.
    My generation has programmed exponentially more, infecting every aspect of life
    with a computer chip and some runtime instructions. We will be similarly shocked
    when those systems are still in place 30, 40, or 50 years from now.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经过了所有技术对话和知识分享仅仅围绕构建新事物的阶段。我们有太多的旧事物了。我父辈那一代写了很多程序，每年他们都会对自己的工作有多少仍然存在、仍在某个生产系统中运行感到震惊。我们这一代编写的程序
    exponentially 更多，感染了生活的方方面面，嵌入了计算机芯片和一些运行指令。我们将会感到同样的震惊，当那些系统在30年、40年或50年后仍然存在时。
- en: Because we don’t talk about modernizing old tech, organizations fall into the
    same traps over and over again. Failure is predictable because so many software
    engineers think the conversations about modernizing legacy technology are not
    relevant to their careers. Some of them are honestly surprised to find out that
    COBOL still runs much of the financial sector, that the majority of the web is
    still written in PHP, or that people are still looking to hire software engineers
    with ActionScript, Flash, and Visual Basic skills.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Failure can be so predictable that after a year or two of doing this work, I
    found that with a little basic information about the technology deployed, I could
    predict a series of problems the organization was facing and how its solutions
    had failed. Occasionally, I would perform this parlor trick for the amusement
    of other engineers and the advancement of my career, including once during a job
    interview at the *New York Times*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: When I left government to go back to the private sector, I discovered that the
    same techniques that had worked for old systems also worked really well with relatively
    new systems. I moved to a six-year-old company and did legacy modernization work.
    Then I moved to a six-month-old company and still did legacy modernization work.
    At one point, exasperated, I complained to my boss, “Why am I running a legacy
    modernization on a three-month-old system?” To which he retorted, “Serves you
    right for not showing up three months ago.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: That being said, there is little downside to maintaining all systems as if they
    are legacy systems. It is easy to build things, but it is difficult to rethink
    them once they are in place. Legacy modernizations are hard not because they are
    technically hard—the problems and the solutions are usually well understood—it’s
    the people side of the modernization effort that is hard. Getting the time and
    resources to actually implement the change, building an appetite for change to
    happen and keeping that momentum, managing the intra-organizational communication
    necessary to move a system that any number of other systems connect to or rely
    upon—those things are hard.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: And yet, as an industry, we do not talk about these challenges. We assume the
    sun, moon, stars, and the board of directors will all magically reconfigure themselves
    around the right technical answer simply because it’s the right technical answer.
    We are horrified to discover that most people do not actually care how healthy
    a piece of technology is as long as it performs the function they need it to with
    a reasonable degree of accuracy in a timeframe that doesn’t exhaust their patience.
    In technology, “good enough” reigns supreme.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'In trying to explain how to approach a legacy modernization, I first go back
    and explore how technology changes over time. Chapters 1 and 2 both explore the
    mechanics of computing trends and best practices: How did we settle on the technology
    that is legacy today, and what can we learn from that process to guide our modernization
    plans?'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'In Chapter 3, I discuss the three broad problems that make organizations feel
    like they need to modernize: technical debt, performance issues, and system stability.
    I give an example of each type of problem on a real (though anonymous) system
    and how the plan to modernize it might come together.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4 discusses why legacy modernization is so hard and fails so often.
    I address the great myth of cross-platform compatibility and the role of abstraction
    in manipulating what we see as easy or hard.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5 talks about the most critical feature of any legacy modernization:
    momentum. How do you get it, and how do you keep it? I outline a whole series
    of conditions—some of them momentum killers, some of them momentum growers.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 deals with coming into a modernization project that has already started
    and how to fix the most common problems that might be stalling it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 provides as thorough of an overview as possible into design thinking
    and how we can use design to direct and ultimately improve the outcomes of technical
    conversations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8 is all about breaking stuff and the value of not being afraid of failure.
    I explore how chaos testing complements legacy modernization and how to work with
    an organization where the suggestion that you should break things on purpose might
    seem like a bridge too far.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 discusses why success is not as obvious or self-evident as you might
    assume and how to define criteria to determine when a project is finished.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Chapter 10 lays out strategies to keep you from ever having to do a
    modernization on the same system again. How do you know if your software is maintainable?
    What can you do if it is not?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The language in this book is deliberate. I use the term *organization* instead
    of *company* or *business*. The vast majority of my work experience in this space
    is with governments and nonprofits, but legacy is everywhere. The organizations
    that need to build and maintain good technology are not exclusively in the private
    sector. The US federal government is one of the single largest producers of technology,
    for example. The conversation about legacy systems crosses from businesses to
    governments to hospitals to nonprofits. For that reason, when I mention the “business”
    side of the organization, I mean that in terms of the mission-focused components
    that engineering is building technology to support. An organization doesn’t have
    to make a profit to have a business side.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, I use the word *system* to refer to a grouping of technologies
    that work together for a common set of tasks. System is a troublesome word in
    technology conversations as it seems you can never find a group of engineers who
    agree where its boundaries are. For my purposes, though, that vagueness is beneficial.
    It allows me to talk about legacy modernizations in general.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我使用*系统*一词来指代一组为完成共同任务而协同工作的技术。系统是一个在技术讨论中颇具争议的词，因为似乎永远找不到一群工程师能达成一致来定义它的边界。不过，就我而言，这种模糊性是有益的。它使我可以更广泛地讨论传统系统的现代化问题。
- en: To describe parts of a system, I frequently use the words *component* or occasionally
    *service*. While many of the techniques in this book are applicable to any type
    of technology, examples and discussions are heavily slanted toward software engineering
    and web-based development in particular. I couldn’t write a book about legacy
    systems without mainframes, data centers, and old operating systems, but most
    of my experience is with upgrading these systems to more internet-friendly options,
    and this book reflects that. I look forward to technologists with other backgrounds
    supplementing the material in this book with essays on whether my advice also
    applies to them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了描述系统的各个部分，我经常使用*组件*或偶尔使用*服务*这个词。虽然本书中的许多技术适用于任何类型的技术，但示例和讨论特别倾向于软件工程和基于网络的开发。我不可能写一本关于传统系统的书而不提到主机、数据中心和旧操作系统，但我的大部分经验是将这些系统升级为更适合互联网的选项，这本书也反映了这一点。我期待着拥有其他背景的技术专家通过文章补充本书的内容，讨论我的建议是否同样适用于他们。
- en: My sincere hope is that as you read this, you find inspiration for your own
    technical projects, regardless of the age of your technology. I’ve tried my best
    to pack as many resources, exercises, and frameworks into this book as possible,
    to be as detailed as possible, and to ground as many assertions with real-world
    stories as I can.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我真诚的希望，在你阅读本书时，无论你的技术多么陈旧，都能找到对自己技术项目的启发。我尽力将尽可能多的资源、练习和框架融入这本书，力求做到尽可能详细，并尽可能通过真实的故事来支撑我的论断。
- en: We are reaching a tipping point with legacy systems. The generation that built
    the oldest of them is gradually dying off, and we are piling more and more layers
    of society on top of these old, largely undocumented and unmaintained computer
    programs. While I don’t believe society is going to crumble at our feet over it,
    there’s a lot of good, interesting work for people willing to jump in.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正迎来传统系统的临界点。构建这些系统的最早一代人正在逐渐离世，而我们在这些陈旧、基本没有文档记录并且无人维护的计算机程序上不断叠加更多社会层面。虽然我不认为社会会因此崩溃，但对于愿意加入其中的人来说，仍有很多有趣且有意义的工作。
