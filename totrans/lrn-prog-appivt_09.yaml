- en: '**APP INVENTOR COMPONENTS AND BUILT-IN BLOCKS**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: App Inventor includes drawers of components you can add to your app as well
    as built-in blocks you’ll use to set its general behaviors. This appendix gives
    a current overview of both. Note that the App Inventor developers add new components
    and update blocks from time to time, and they mention those changes in the Welcome
    splash screen that you see when you log in.
  prefs: []
  type: TYPE_NORMAL
- en: '**APP INVENTOR COMPONENTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The App Inventor Designer window includes a *Palette* pane containing drawers
    of components you can add to your app (see [Figure A-1](app01.xhtml#chAfig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-1: The App Inventor Designer window’s Palette pane showing types
    of components*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Components* are all the visible and non-visible elements you can use in your
    app, including those that set its look and feel and add exciting functionality.
    All components have properties you can set and/or actions you can program.'
  prefs: []
  type: TYPE_NORMAL
- en: '**USER INTERFACE COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The User Interface components, shown in [Figure A-2](app01.xhtml#chAfig2), control
    the elements users see and touch in your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-2: The User Interface components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: These components help users understand what you want them to do and then accomplish
    those tasks. Several User Interface components also allow you to collect the user
    input necessary for your app to work.
  prefs: []
  type: TYPE_NORMAL
- en: Button Displays a button or picture on the screen that can detect the user’s
    click. You often will add text to a `Button` to let users know what will happen
    when they click it.
  prefs: []
  type: TYPE_NORMAL
- en: CheckBox Lets users select one or more options presented.
  prefs: []
  type: TYPE_NORMAL
- en: DatePicker Displays a button for the user to click and select a date. Having
    users input dates with the `DatePicker` ensures the dates are formatted consistently
    when the app receives them, which is easier for the app to process.
  prefs: []
  type: TYPE_NORMAL
- en: Image Shows an image on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Label Displays text on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: ListPicker Shows a button for the user to click to see a list of text items
    to choose from. You can make the list of items searchable.
  prefs: []
  type: TYPE_NORMAL
- en: ListView Displays a list of text items to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Notifier Displays a temporary alert or a message that prompts the user to confirm,
    choose, enter text, or wait before continuing to interact with the app. The `Notifier`
    component is also used to log errors or messages.
  prefs: []
  type: TYPE_NORMAL
- en: PasswordTextBox Prompts users to enter text and other characters that shouldn’t
    be displayed as they’re being typed, like a password. It’s the same as the `TextBox`
    component, except each character the user enters into the box displays as an asterisk
    (*).
  prefs: []
  type: TYPE_NORMAL
- en: Slider Displays a progress bar with a “thumb” the user can drag left or right
    to set its position. A `Slider` allows the user to quickly select a value from
    a range.
  prefs: []
  type: TYPE_NORMAL
- en: Spinner Shows a new screen containing a drop-down list of text items.
  prefs: []
  type: TYPE_NORMAL
- en: Switch Displays a toggle switch on the screen for the user to click.
  prefs: []
  type: TYPE_NORMAL
- en: TextBox Displays a box where the user can enter text, numbers, and other characters.
    The characters the user types into the box will be visible.
  prefs: []
  type: TYPE_NORMAL
- en: TimePicker Displays a button for the user to click and select a time. Having
    users input times with the `TimePicker` ensures the times are formatted consistently
    when the app receives them, which is easier for the app to process.
  prefs: []
  type: TYPE_NORMAL
- en: WebViewer Shows a web page within the app.
  prefs: []
  type: TYPE_NORMAL
- en: '**LAYOUT COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The formatting components available in the Layout drawer, shown in [Figure A-3](app01.xhtml#chAfig3),
    help you arrange visible components (such as those from the User Interface drawer)
    in an orderly and visually appealing way.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-3: The Layout components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: HorizontalArrangement Displays components from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: HorizontalScrollArrangement Displays components side-by-side in a container
    that scrolls from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: TableArrangement Displays components as if they are laid out in a table (that
    is, in rows and columns).
  prefs: []
  type: TYPE_NORMAL
- en: VerticalArrangement Displays components stacked, one below another.
  prefs: []
  type: TYPE_NORMAL
- en: VerticalScrollArrangement Displays components stacked, one below another, in
    a container that scrolls from top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '**MEDIA COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll find the Camera and other components that access a device’s media functions
    in the Media drawer, shown in [Figure A-4](app01.xhtml#chAfig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-4: The Media components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: Camcorder Lets the app record a video using the device’s camcorder.
  prefs: []
  type: TYPE_NORMAL
- en: Camera Allows the app to take a picture using the device’s camera.
  prefs: []
  type: TYPE_NORMAL
- en: ImagePicker Displays a button the user clicks to choose images from the device’s
    image gallery.
  prefs: []
  type: TYPE_NORMAL
- en: Player Plays longer audio files, such as songs, and controls phone vibration.
  prefs: []
  type: TYPE_NORMAL
- en: Sound Plays short sound files, such as sound effects, and also vibrates.
  prefs: []
  type: TYPE_NORMAL
- en: SoundRecorder Lets your app record audio.
  prefs: []
  type: TYPE_NORMAL
- en: SpeechRecognizer Converts speech to text that can be used in an app.
  prefs: []
  type: TYPE_NORMAL
- en: TextToSpeech Lets the app read text aloud.
  prefs: []
  type: TYPE_NORMAL
- en: VideoPlayer Plays videos.
  prefs: []
  type: TYPE_NORMAL
- en: YandexTranslate Enables the app to translate words and sentences between different
    languages using the Yandex.Translate service.
  prefs: []
  type: TYPE_NORMAL
- en: '**DRAWING AND ANIMATION COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Drawing and Animation components, shown in [Figure A-5](app01.xhtml#chAfig5),
    enable users to draw on the screen and let you include moving images in your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-5: The Drawing and Animation components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: Ball A round *sprite* (a small two-dimensional image) that, when placed on a
    `Canvas`, can move, react to touches and drags, and interact with other sprites
    and with the edge of the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: Canvas A two-dimensional, touch-sensitive rectangular panel that allows you
    to draw on the screen or place or move sprites around on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: ImageSprite A sprite that, when placed on a `Canvas`, can move, react to touches
    and drags, and interact with other sprites and with the edge of the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAPS COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create apps that focus on points on a map, use the tools in the Maps components
    drawer, shown in [Figure A-6](app01.xhtml#chAfig6).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-6: The Maps components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: Circle Draws a circle of a given radius around a point on a `Map`.
  prefs: []
  type: TYPE_NORMAL
- en: FeatureCollection Groups one or more `Maps` components together.
  prefs: []
  type: TYPE_NORMAL
- en: LineString Draws a sequence of line segments on a `Map`.
  prefs: []
  type: TYPE_NORMAL
- en: Map A two-dimensional container that displays a map as its background. You must
    first add this component to place any other Maps component on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Marker Places an icon at a point to indicate information on a `Map`.
  prefs: []
  type: TYPE_NORMAL
- en: Polygon Draws an arbitrary shape on a `Map`.
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle Draws a rectangle on a `Map` bounded by north, south, east, and west
    edges.
  prefs: []
  type: TYPE_NORMAL
- en: '**SENSORS COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Sensors components drawer, shown in [Figure A-7](app01.xhtml#chAfig7), offers
    several fun and powerful components like the `Clock` component, which enables
    the timed automatic action necessary for many games to run, and the `LocationSensor`,
    which checks an object’s location from time to time. Note that all Sensors are
    *non-visible components*, meaning when you add them to your app, your users will
    not see them on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-7: The Sensors components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: AccelerometerSensor Detects a device’s shaking and measures its acceleration
    in three dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: BarcodeScanner Reads barcodes, if the device has a barcode scanner app installed.
  prefs: []
  type: TYPE_NORMAL
- en: Clock Uses the device’s internal clock to fire a timer at regularly set intervals
    and perform time calculations, manipulations, and conversions.
  prefs: []
  type: TYPE_NORMAL
- en: GyroscopeSensor Measures angular velocity in three dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: LocationSensor Provides location information, including longitude, latitude,
    altitude (if supported by the device), speed (if supported by the device), and
    address. It also can *geocode*, or convert a given address to latitude and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: NearField Provides *near-field communication* capability with other devices
    (if supported by the device).
  prefs: []
  type: TYPE_NORMAL
- en: OrientationSensor Provides information about the device’s physical orientation
    in three dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Pedometer Attempts to determine if a step has been taken and estimate the distance
    traveled.
  prefs: []
  type: TYPE_NORMAL
- en: ProximitySensor Measures the distance of an object to the device’s view screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**SOCIAL COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Components in the Social drawer, shown in [Figure A-8](app01.xhtml#chAfig8),
    enable your users to get social by communicating with others.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-8: The Social components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: ContactPicker Displays a button the user clicks to choose a contact stored in
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: EmailPicker Includes a searchable text box where a user can begin to enter a
    contact’s name or email address, prompting the device to show a drop-down menu
    of contacts for the user to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneCall Enables the app to make a phone call to a specified number.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneNumberPicker Displays a button the user clicks to choose a contact phone
    number stored in the device.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing Lets the user share files and/or messages between the app and other
    apps installed on the device, such as email and message apps.
  prefs: []
  type: TYPE_NORMAL
- en: Texting Enables the app to send a specified text message to a specified phone
    number.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter Allows users to communicate with Twitter to send and search tweets and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: '**STORAGE COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the Storage drawer, shown in [Figure A-9](app01.xhtml#chAfig9), you’ll find
    components that enable your app to remember information even after it closes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-9: The Storage components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: File Enables the app to store and retrieve files.
  prefs: []
  type: TYPE_NORMAL
- en: FusiontablesControl Lets the app communicate with Google Fusion Tables to share,
    query, and store data into tables.
  prefs: []
  type: TYPE_NORMAL
- en: TinyDB Enables the app to save and retrieve information stored directly on the
    device.
  prefs: []
  type: TYPE_NORMAL
- en: TinyWebDB Allows the app to communicate with a web service to store and retrieve
    information that can be shared with other devices.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTIVITY COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Connectivity components, shown in [Figure A-10](app01.xhtml#chAfig10), enable
    your app to connect to other apps, other devices, and the internet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-10: The Connectivity components drawer*'
  prefs: []
  type: TYPE_NORMAL
- en: ActivityStarter Enables the app to launch an activity, such as another app or
    a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: BluetoothClient Allows the app to connect to another Bluetooth-connected device.
  prefs: []
  type: TYPE_NORMAL
- en: BluetoothServer Allows the app to accept a connection from another Bluetooth-connected
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Web Enables the app to access data from a web service and use it in the app.
  prefs: []
  type: TYPE_NORMAL
- en: '**OTHER COMPONENTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Beneath the Connectivity drawer, you’ll find components you can use to program
    LEGO^® MINDSTORMS^® robots, as well as experimental and extension components that
    evolve and change. Be sure to pay attention to the Welcome splash screen that
    opens when you log in to App Inventor, which displays information about notable
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: '**APP INVENTOR’S BUILT-IN BLOCKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The App Inventor Blocks Editor window includes a Blocks pane containing drawers
    of built-in blocks that add general behaviors to your app (see [Figure A-11](app01.xhtml#chAfig11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-11: Built-in block categories*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Control blocks** Control an app’s flow of action. Some allow an app to compare
    values and test conditions (the `if then` and `if then else` blocks) and repeat
    actions (the `for each number from to`, `for each item in list`, and `while test`
    blocks). Other blocks open and close and pass information between screens and
    transfer text to and from other apps on the device.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logic blocks** Two types of Logic blocks (`true` and `false`) are used to
    set the values of Boolean properties and variables, which have only two possible
    values: true and false. The other blocks are logical or Boolean operators (the
    `not`, `=`, `≠`, `and`, and `or` blocks) used to create Boolean expressions—expressions
    that evaluate as either true or false—to compare values and test conditions. These
    operators are often used with Control blocks to control an app’s flow of action.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Math blocks** Some blocks assign regular and random numerical values. Some
    are arithmetic operators that perform arithmetic, algebra, and trigonometry calculations.
    Other blocks are relational or comparison operators (the `=`, `≠`, `>`, `≥`, `<`,
    and `≤` blocks) that compare values. These operators also are often used with
    Control blocks to control an app’s flow of action.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text blocks** Add, join, count characters, compare, change, and search within
    strings. Strings can contain letters, numbers, spaces, and special characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lists blocks** Create, count items, change, search, select from, copy, search
    within, and otherwise handle lists of items.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Colors blocks** Add color to components and also make and split colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables blocks** Initialize global and local variables and get and set
    values for the variables you create.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Procedures blocks** Create and call procedures.'
  prefs: []
  type: TYPE_NORMAL
