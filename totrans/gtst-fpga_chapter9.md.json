["```\nRAMB18E1 #(\n  // Address Collision Mode: \"PERFORMANCE\" or \"DELAYED_WRITE\"\n  .RDADDR_COLLISION_HWCONFIG(\"DELAYED_WRITE\"),\n  // Collision check: Values (\"ALL\", \"WARNING_ONLY\", \"GENERATE_X_ONLY\" or \"NONE\")\n  .SIM_COLLISION_CHECK(\"ALL\"),\n  // DOA_REG, DOB_REG: Optional output register (0 or 1)\n  .DOA_REG(0),\n  .DOB_REG(0),\n  // INITP_00 to INITP_07: Initial contents of parity memory array\n.INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),\n`--snip--` .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),\n  // INIT_A, INIT_B: Initial values on output ports\n  .INIT_A(18'h00000),\n   .INIT_B(18'h00000),\n  // Initialization File: RAM initialization file\n  .INIT_FILE(\"NONE\"),\n  // RAM Mode: \"SDP\" or \"TDP\"\n  .RAM_MODE(\"TDP\"),\n  // READ_WIDTH_A/B, WRITE_WIDTH_A/B: Read/write width per port\n  .READ_WIDTH_A(0),                    // 0-72\n  .READ_WIDTH_B(0),                    // 0-18\n  .WRITE_WIDTH_A(0),                   // 0-18\n  .WRITE_WIDTH_B(0),                   // 0-72\n  // RSTREG_PRIORITY_A, RSTREG_PRIORITY_B: Reset or enable priority (\"RSTREG\" or \"REGCE\")\n  .RSTREG_PRIORITY_A(\"RSTREG\"),\n  .RSTREG_PRIORITY_B(\"RSTREG\"),\n  // SRVAL_A, SRVAL_B: Set/reset value for output\n  .SRVAL_A(18'h00000),\n  .SRVAL_B(18'h00000),\n  // Simulation Device: Must be set to \"7SERIES\" for simulation behavior\n  .SIM_DEVICE(\"7SERIES\"),\n  // WriteMode: Value on output upon a write (\"WRITE_FIRST\", \"READ_FIRST\", or \"NO_CHANGE\")\n  .WRITE_MODE_A(\"WRITE_FIRST\"),\n  .WRITE_MODE_B(\"WRITE_FIRST\")\n)\nRAMB18E1_inst (\n  // Port A Data: 16-bit (each) output: Port A data\n  .DOADO(DOADO), ❶             // 16-bit output: A port data/LSB data\n  .DOPADOP(DOPADOP),            // 2-bit output: A port parity/LSB parity\n  // Port B Data: 16-bit (each) output: Port B data\n  .DOBDO(DOBDO),                // 16-bit output: B port data/MSB data\n  .DOPBDOP(DOPBDOP),            // 2-bit output: B port parity/MSB parity\n  // Port A Address/Control Signals: 14-bit (each) input: Port A address and control signals\n  // (read port when RAM_MODE=\"SDP\")\n  .ADDRARDADDR(ADDRARDADDR),    // 14-bit input: A port address/Read address\n  .CLKARDCLK(CLKARDCLK),        // 1-bit input: A port clock/Read clock\n`--snip--`\n```", "```\nRAMB18E1_inst : RAMB18E1\ngeneric map (\n  -- Address Collision Mode: \"PERFORMANCE\" or \"DELAYED_WRITE\"\n  RDADDR_COLLISION_HWCONFIG => \"DELAYED_WRITE\",\n  -- Collision check: Values (\"ALL\", \"WARNING_ONLY\", \"GENERATE_X_ONLY\" or \"NONE\")\n  SIM_COLLISION_CHECK => \"ALL\",\n  -- DOA_REG, DOB_REG: Optional output register (0 or 1)\n  DOA_REG => 0,\n  DOB_REG => 0,\n  -- INITP_00 to INITP_07: Initial contents of parity memory array\n  INITP_00 => X\"0000000000000000000000000000000000000000000000000000000000000000\",\n`--snip--`\n  INIT_3F => X\"0000000000000000000000000000000000000000000000000000000000000000\", -- INIT_A, INIT_B: Initial values on output ports\n  INIT_A => X\"00000\",\n  INIT_B => X\"00000\",\n  -- Initialization File: RAM initialization file\n  INIT_FILE => \"NONE\",\n  -- RAM Mode: \"SDP\" or \"TDP\"\n  RAM_MODE => \"TDP\",\n  -- READ_WIDTH_A/B, WRITE_WIDTH_A/B: Read/write width per port\n  READ_WIDTH_A => 0,             -- 0-72\n  READ_WIDTH_B => 0,             -- 0-18\n  WRITE_WIDTH_A => 0,            -- 0-18\n  WRITE_WIDTH_B => 0,            -- 0-72\n  -- RSTREG_PRIORITY_A, RSTREG_PRIORITY_B: Reset or enable priority (\"RSTREG\" or \"REGCE\")\n  RSTREG_PRIORITY_A => \"RSTREG\",\n  RSTREG_PRIORITY_B => \"RSTREG\",\n  -- SRVAL_A, SRVAL_B: Set/reset value for output\n  SRVAL_A => X\"00000\",\n  SRVAL_B => X\"00000\",\n  -- Simulation Device: Must be set to \"7SERIES\" for simulation behavior\n  SIM_DEVICE => \"7SERIES\",\n  -- WriteMode: Value on output upon a write (\"WRITE_FIRST\", \"READ_FIRST\", or \"NO_CHANGE\")\n  WRITE_MODE_A => \"WRITE_FIRST\",\n  WRITE_MODE_B => \"WRITE_FIRST\"\n)\nport map (\n  -- Port A Data: 16-bit (each) output: Port A data\n  DOADO => DOADO, ❶             -- 16-bit output: A port data/LSB data\n  DOPADOP => DOPADOP,            -- 2-bit output: A port parity/LSB parity\n  -- Port B Data: 16-bit (each) output: Port B data\n  DOBDO => DOBDO,                -- 16-bit output: B port data/MSB data\n  DOPBDOP => DOPBDOP,            -- 2-bit output: B port parity/MSB parity\n  -- Port A Address/Control Signals: 14-bit (each) input: Port A address and control signals\n  -- (read port when RAM_MODE=\"SDP\")\n  ADDRARDADDR => ADDRARDADDR,    -- 14-bit input: A port address/Read address\n  CLKARDCLK => CLKARDCLK,        -- 1-bit input: A port clock/Read clock\n`--snip--`\n```", "```\nFDSE #(\n  .INIT(1'b0) // Initial value of register (1'b0 or 1'b1)\n) FDSE_inst (\n  .Q(Q),      // 1-bit data output\n  .C(C),      // 1-bit clock input\n  .CE(CE),    // 1-bit clock enable input\n  .S(S),      // 1-bit synchronous set input\n  .D(D)       // 1-bit data input\n);\n```", "```\nFDSE_inst : FDSE\ngeneric map (\n  INIT => '0') -- Initial value of register ('0' or '1')\nport map (\n  Q => Q,      -- Data output\n  C => C,      -- Clock input\n  CE => CE,    -- Clock enable input\n  S => S,      -- Synchronous set input\n  D => D       -- Data input\n);\n```", "```\n`--snip--`\nNumber of registers:   1204 out of 84255 (1%)\n`--snip--`\nNumber of LUT4s:       1925 out of 83640 (2%)\n`--snip--`\n❶ Number of block RAMs:  3 out of 208 (1%)\n```", "```\ngain_adjusted <= input_signal * 1.6;\n```", "```\n`--snip--`\nNumber of PLLs:   1 out of 4 (25%)\n```"]