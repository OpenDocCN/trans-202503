- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Picking a Bug Bounty Program
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bug bounty programs: are they all the same? Finding the right program to target
    is the first step to becoming a successful bug bounty hunter. Many programs have
    emerged within the past few years, and it’s difficult to figure out which ones
    will provide the best monetary rewards, experience, and learning opportunities.'
  prefs: []
  type: TYPE_NORMAL
- en: A *bug bounty program* is an initiative in which a company invites hackers to
    attack its products and service offerings. But how should you pick a program?
    And how should you prioritize their different metrics, such as the asset types
    involved, whether the program is hosted on a platform, whether it’s public or
    private, the program’s scope, the payout amounts, and response times?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore types of bug bounty programs, analyze the benefits
    and drawbacks of each, and figure out which one you should go for.
  prefs: []
  type: TYPE_NORMAL
- en: The State of the Industry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug bounties are currently one of the most popular ways for organizations to
    receive feedback about security bugs. Large corporations, like PayPal and Facebook,
    as well as government agencies like the US Department of Defense, have all embraced
    the idea. Yet not too long ago, reporting a vulnerability to a company would have
    more likely landed you in jail than gotten you a reward.
  prefs: []
  type: TYPE_NORMAL
- en: In 1995, Netscape launched the first-ever bug bounty program. The company encouraged
    users to report bugs found in its brand-new browser, the Netscape Navigator 2.0,
    introducing the idea of crowdsourced security testing to the internet world. Mozilla
    launched the next corporate bug bounty program nine years later, in 2004, inviting
    users to identify bugs in the Firefox browser.
  prefs: []
  type: TYPE_NORMAL
- en: But it was not until the 2010s that offering bug bounties become a popular practice.
    That year, Google launched its program, and Facebook followed suit in 2011\. These
    two programs kick-started the trend of using bug bounties to augment a corporation’s
    in-house security infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: As bug bounties became a more well-known strategy, bug-bounty-as-a-service *platforms*
    emerged. These platforms help companies set up and operate their programs. For
    example, they provide a place for companies to host their programs, a way to process
    reward payments, and a centralized place to communicate with bug bounty hunters.
  prefs: []
  type: TYPE_NORMAL
- en: The two largest of these platforms, HackerOne and Bugcrowd, both launched in
    2012\. After that, a few more platforms, such as Synack, Cobalt, and Intigriti,
    came to the market. These platforms and managed bug bounty services allow even
    companies with limited resources to run a security program. Today, large corporations,
    small startups, nonprofits, and government agencies alike have adopted bug bounties
    as an additional security measure and a fundamental piece of their security policies.
    You can read more about the history of bug bounty programs at [https://en.wikipedia.org/wiki/Bug_bounty_program](https://en.wikipedia.org/wiki/Bug_bounty_program).
  prefs: []
  type: TYPE_NORMAL
- en: The term *security program* usually refers to information security policies,
    procedures, guidelines, and standards in the larger information security industry.
    In this book, I use *program* or *bug bounty program* to refer to a company’s
    bug bounty operations. Today, tons of programs exist, all with their unique characteristics,
    benefits, and drawbacks. Let’s examine these.
  prefs: []
  type: TYPE_NORMAL
- en: Asset Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the context of a bug bounty program, an *asset* is an application, website,
    or product that you can hack. There are different types of assets, each with its
    own characteristics, requirements, and pros and cons. After considering these
    differences, you should choose a program with assets that play to your strengths,
    based on your skill set, experience level, and preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Social Sites and Applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Anything labeled *social* has a lot of potential for vulnerabilities, because
    these applications tend to be complex and involve a lot of interaction among users,
    and between the user and the server. That’s why the first type of bug bounty program
    we’ll talk about targets social websites and applications. The term *social application*
    refers to any site that allows users to interact with each other. Many programs
    belong to this category: examples include the bug bounty program for HackerOne
    and programs for Facebook, Twitter, GitHub, and LINE.'
  prefs: []
  type: TYPE_NORMAL
- en: Social applications need to manage interactions among users, as well as each
    user’s roles, privileges, and account integrity. They are typically full of potential
    for critical web vulnerabilities such as insecure direct object references (IDORs),
    info leaks, and account takeovers. These vulnerabilities occur when many users
    are on a platform, and when applications mismanage user information; when the
    application does not validate a user’s identity properly, malicious users can
    assume the identity of others.
  prefs: []
  type: TYPE_NORMAL
- en: These complex applications also often provide a lot of user input opportunities.
    If input validation is not performed properly, these applications are prone to
    injection bugs, like SQL injection (SQLi) or cross-site scripting (XSS).
  prefs: []
  type: TYPE_NORMAL
- en: If you are a newcomer to bug bounties, I recommend that you start with social
    sites. The large number of social applications nowadays means that if you target
    social sites, you’ll have many programs to choose from. Also, the complex nature
    of social sites means that you’ll encounter a vast attack surface with which to
    experiment. (An application’s *attack surface* refers to all of the application’s
    different points that an attacker can attempt to exploit.) Finally, the diverse
    range of vulnerabilities that show up on these sites means that you will be able
    to quickly build a deep knowledge of web security.
  prefs: []
  type: TYPE_NORMAL
- en: The skill set you need to hack social programs includes the ability to use a
    proxy, like the Burp Suite proxy introduced in Chapter 4, and knowledge about
    web vulnerabilities such as XSS and IDOR. You can learn more about these in Chapters
    6 and 10. It’s also helpful to have some JavaScript programming skills and knowledge
    about web development. However, these skills aren’t required to succeed as a hacker.
  prefs: []
  type: TYPE_NORMAL
- en: But these programs have a major downside. Because of the popularity of their
    products and the low barrier of entry, they’re often very competitive and have
    many hackers hunting on them. Social media platforms such as Facebook and Twitter
    are some of the most targeted programs.
  prefs: []
  type: TYPE_NORMAL
- en: General Web Applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*General* *web applications* are also a good target for beginners. Here, I
    am referring to any web applications that do not involve user-to-user interaction.
    Instead, users interact with the server to access the application’s features.
    Targets that fall into these categories can include static websites, cloud applications,
    consumer services like banking sites, and web portals of Internet of Things (IoT)
    devices or other connected hardware. Like social sites, they are also quite diverse
    and lend themselves well to a variety of skill levels. Examples include the programs
    for Google, the US Department of Defense, and Credit Karma.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, in my experience, they tend to be a little more difficult to hack
    than social applications, and their attack surface is smaller. If you’re looking
    for account takeovers and info leak vulnerabilities, you won’t have as much luck
    because there aren’t a lot of opportunities for users to interact with others
    and potentially steal their information. The types of bugs that you’ll find in
    these applications are slightly different. You’ll need to look for server-side
    vulnerabilities and vulnerabilities specific to the application’s technology stack.
    You could also look for commonly found network vulnerabilities, like subdomain
    takeovers. This means you’ll have to know about both client-side and server-side
    web vulnerabilities, and you should have the ability to use a proxy. It’s also
    helpful to have some knowledge about web development and programming.
  prefs: []
  type: TYPE_NORMAL
- en: These programs can range in popularity. However, most of them have a low barrier
    of entry, so you can most likely get started hacking right away!
  prefs: []
  type: TYPE_NORMAL
- en: Mobile Applications (Android, iOS, and Windows)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you get the hang of hacking web applications, you may choose to specialize
    in *mobile applications*. Mobile programs are becoming prevalent; after all, most
    web apps have a mobile equivalent nowadays. They include programs for Facebook
    Messenger, the Twitter app, the LINE mobile app, the Yelp app, and the Gmail app.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking mobile applications requires the skill set you’ve built from hacking
    web applications, as well as additional knowledge about the structure of mobile
    apps and programming techniques related to the platform. You should understand
    attacks and analysis strategies like certificate pinning bypass, mobile reverse
    engineering, and cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking mobile applications also requires a little more setup than hacking web
    applications, as you’ll need to own a mobile device that you can experiment on.
    A good mobile testing lab consists of a regular device, a rooted device, and device
    emulators for both Android and iOS. A *rooted* *device* is one for which you have
    admin privileges. It will allow you to experiment more freely, because you can
    bypass the mobile system’s safety constraints. An *emulator* is a virtual simulation
    of mobile environments that you run on your computer. It allows you to run multiple
    device versions and operating systems without owning a device for each setup.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, mobile applications are less popular among bug bounty hunters
    than web applications. However, the higher barrier of entry for mobile programs
    is an advantage for those who do participate. These programs are less competitive,
    making it relatively easy to find bugs.
  prefs: []
  type: TYPE_NORMAL
- en: APIs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Application programming interfaces (**APIs**)* are specifications that define
    how other applications can interact with an organization’s assets, such as to
    retrieve or alter their data. For example, another application might be able to
    retrieve an application’s data via HyperText Transfer Protocol (HTTP) messages
    to a certain endpoint, and the application will return data in the format of Extensible
    Markup Language (XML) or JavaScript Object Notation (JSON) messages.'
  prefs: []
  type: TYPE_NORMAL
- en: Some programs put a heightened focus on API bugs in their bug bounty programs
    if they’re rolling out a new version of their API. A secure API implementation
    is key to preventing data breaches and protecting customer data. Hacking APIs
    requires many of the same skills as hacking web applications, mobile applications,
    and IoT applications. But when testing APIs, you should focus on common API bugs
    like data leaks and injection flaws.
  prefs: []
  type: TYPE_NORMAL
- en: Source Code and Executables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have more advanced programming and reversing skills, you can give *source
    code* and *executable* *programs* a try. These programs encourage hackers to find
    vulnerabilities in an organization’s software by directly providing hackers with
    an open source codebase or the binary executable. Examples include the Internet
    Bug Bounty, the program for the PHP language, and the WordPress program.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking these programs can entail analyzing the source code of open source projects
    for web vulnerabilities and fuzzing binaries for potential exploits. You usually
    have to understand coding and computer science concepts to be successful here.
    You’ll need knowledge of web vulnerabilities, programming skills related to the
    project’s codebase, and code analysis skills. Cryptography, software development,
    and reverse engineering skills are helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Source code programs may sound intimidating, but keep in mind that they’re diverse,
    so you have many to choose from. You don’t have to be a master programmer to hack
    these programs; rather, aim for a solid understanding of the project’s tech stack
    and underlying architecture. Because these programs tend to require more skills,
    they are less competitive, and only a small proportion of hackers will ever attempt
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware and IoT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Last but not least are hardware and IoT programs. These programs ask you to
    hack devices like cars, smart televisions, and thermostats. Examples include the
    bug bounty programs of Tesla and Ford Motor Company.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need highly specific skills to hack these programs: you’ll often have
    to acquire a deep familiarity with the type of device that you’re hacking, in
    addition to understanding common IoT vulnerabilities. You should know about web
    vulnerabilities, programming, code analysis, and reverse engineering. Also, study
    up on IoT concepts and industry standards such as digital signing and asymmetric
    encryption schemes. Finally, cryptography, wireless hacking, and software development
    skills will be helpful too.'
  prefs: []
  type: TYPE_NORMAL
- en: Although some programs will provide you with a free device to hack, that often
    applies to only the select hackers who’ve already established a relationship with
    the company. To begin hacking on these programs, you might need the funds to acquire
    the device on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Since these programs require specialized skills and a device, they tend to be
    the least competitive.
  prefs: []
  type: TYPE_NORMAL
- en: Bug Bounty Platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Companies can host bug bounty programs in two ways: bug bounty platforms and
    independently hosted websites.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bug bounty platforms* are websites through which many companies host their
    programs. Usually, the platform directly awards hackers with reputation points
    and money for their results. Some of the largest bug bounty platforms are HackerOne,
    Bugcrowd, Intigriti, Synack, and Cobalt.'
  prefs: []
  type: TYPE_NORMAL
- en: Bug bounty platforms are an intermediary between hackers and security teams.
    They provide companies with logistical assistance for tasks like payment and communication.
    They also often offer help managing the incoming reports by filtering, deduplicating,
    and triaging bug reports for companies. Finally, these platforms provide a way
    for companies to gauge a hacker’s skill level via hacker statistics and reputation.
    This allows companies that do not wish to be inundated with low-quality reports
    to invite experienced hackers to their private programs. Some of these platforms
    also screen or interview hackers before allowing them to hack on programs.
  prefs: []
  type: TYPE_NORMAL
- en: From the hacker’s perspective, bug bounty platforms provide a centralized place
    to submit reports. They also offer a seamless way to get recognized and paid for
    your findings.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, many organizations host and manage their bug bounty programs
    without the help of platforms. Companies like Google, Facebook, Apple, and Medium
    do this. You can find their bug bounty policy pages by visiting their websites,
    or by searching “*CompanyName* bug bounty program” online.
  prefs: []
  type: TYPE_NORMAL
- en: As a bug bounty hunter, should you hack on a bug bounty platform? Or should
    you go for companies’ independently hosted programs?
  prefs: []
  type: TYPE_NORMAL
- en: The Pros . . .
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The best thing about bug bounty platforms is that they provide a lot of transparency
    into a company’s process, because they post disclosed reports, metrics about the
    programs’ triage rates, payout amounts, and response times. Independently hosted
    programs often lack this type of transparency. In the bug bounty world, *triage*
    refers to the confirmation of vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: You also won’t have to worry about the logistics of emailing security teams,
    following up on reports, and providing payment and tax info every time you submit
    a vulnerability report. Bug bounty programs also often have reputation systems
    that allow you to showcase your experience so you can gain access to invite-only
    bug bounty programs.
  prefs: []
  type: TYPE_NORMAL
- en: Another pro of bug bounty platforms is that they often step in to provide conflict
    resolution and legal protection as a third party. If you submit a report to a
    non-platform program, you have no recourse in the final bounty decision. Ultimately,
    you can’t always expect companies to pay up or resolve reports in the current
    state of the industry, but the hacker-to-hacker feedback system that platforms
    provide is helpful.
  prefs: []
  type: TYPE_NORMAL
- en: . . . and the Cons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: However, some hackers avoid bug bounty platforms because they dislike how those
    platforms deal with reports. Reports submitted to platform-managed bug bounty
    programs often get handled by *triagers*, third-party employees who often aren’t
    familiar with all the security details about a company’s product. Complaints about
    triagers handling reports improperly are common.
  prefs: []
  type: TYPE_NORMAL
- en: Programs on platforms also break the direct connection between hackers and developers.
    With a direct program, you often get to discuss the vulnerability with a company’s
    security engineers, making for a great learning experience.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, public programs on bug bounty platforms are often crowded, because
    the platform gives them extra exposure. On the other hand, many privately hosted
    programs don’t get as much attention from hackers and are thus less competitive.
    And for the many companies that do not contract with bug bounty platforms, you
    have no choice but to go off platforms if you want to participate in their programs.
  prefs: []
  type: TYPE_NORMAL
- en: Scope, Payouts, and Response Times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What other metrics should you consider when picking a program, besides its asset
    types and platform? On each bug bounty program’s page, metrics are often listed
    to help you assess the program. These metrics give insight into how easily you
    might be able to find bugs, how much you might get paid, and how well the program
    operates.
  prefs: []
  type: TYPE_NORMAL
- en: Program Scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, consider the scope. A program’s *scope* on its policy pages specifies
    what and how you are allowed to hack. There are two types of scopes: asset and
    vulnerability. The *asset scope* tells you which subdomain, products, and applications
    you can hack. And the *vulnerability scope* specifies which vulnerabilities the
    company will accept as valid bugs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the company might list the subdomains of its website that are
    in and out of scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-scope assets**'
  prefs: []
  type: TYPE_NORMAL
- en: '*a.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*b.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*c.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*users.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*landing.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Out-of-scope assets**'
  prefs: []
  type: TYPE_NORMAL
- en: '*dev.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*test.example.com*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assets that are listed as in scope are the ones that you are allowed to hack.
    On the other hand, assets that are listed as out of scope are off-limits to bug
    bounty hunters. Be extra careful and abide by the rules! Hacking an out-of-scope
    asset is illegal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The company will also often list the vulnerabilities it considers valid bugs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-scope vulnerabilities**'
  prefs: []
  type: TYPE_NORMAL
- en: All except the ones listed as out of scope
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Out-of-scope vulnerabilities**'
  prefs: []
  type: TYPE_NORMAL
- en: Self-XSS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clickjacking
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Missing HTTP headers and other best practices without direct security impact
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Denial-of-service attacks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use of known-vulnerable libraries, without proof of exploitability
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Results of automated scanners, without proof of exploitability
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The out-of-scope vulnerabilities that you see in this example are typical of
    what you would find in bug bounty programs. Notice that many programs consider
    non-exploitable issues, like violations of best practice, to be out of scope.
  prefs: []
  type: TYPE_NORMAL
- en: Any program with large asset and vulnerability scopes is a good place to start
    for a beginner. The larger the asset scope, the larger the number of target applications
    and web pages you can look at. When a program has a big asset scope, you can often
    find obscure applications that are overlooked by other hackers. This typically
    means less competition when reporting bugs.
  prefs: []
  type: TYPE_NORMAL
- en: The larger the vulnerability scope, the more types of bugs the organization
    is willing to hear reports about. These programs are a lot easier to find bugs
    in, because you have more opportunities, and so can play to your strengths.
  prefs: []
  type: TYPE_NORMAL
- en: Payout Amounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next metric you should consider is the program’s *payout amounts*. There
    are two types of payment programs: *vulnerability disclosure programs* *(VDPs)*
    and *bug bounty programs*.'
  prefs: []
  type: TYPE_NORMAL
- en: VDPs are *reputation-only programs*, meaning they do not pay for findings but
    often offer rewards such as reputation points and swag. They are a great way to
    learn about hacking if making money is not your primary objective. Since they
    don’t pay, they’re less competitive, and so easier to find bugs in. You can use
    them to practice finding common vulnerabilities and communicating with security
    engineers.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, bug bounty programs offer varying amounts of monetary rewards
    for your findings. In general, the more severe the vulnerability, the more the
    report will pay. But different programs have different payout averages for each
    level of severity. You can find a program’s payout information on its bug bounty
    pages, usually listed in a section called the *payout* table. Typically, low-impact
    issues will pay anywhere from $50 to $500 (USD), while critical issues can pay
    upward of $10,000\. However, the bug bounty industry is evolving, and payout amounts
    are increasing for high-impact bugs. For example, Apple now rewards up to $1 million
    for the most severe vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Response Time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, consider the program’s average *response time*. Some companies will
    handle and resolve your reports within a few days, while others take weeks or
    even months to finalize their fixes. Delays often happen because of the security
    team’s internal constraints, like a lack of personnel to handle reports, a delay
    in issuing security patches, and a lack of funds to timely reward researchers.
    Sometimes, delays happen because researchers have sent bad reports without clear
    reproduction steps.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritize programs with fast response times. Waiting for responses from companies
    can be a frustrating experience, and when you first start, you’re going to make
    a lot of mistakes. You might misjudge the severity of a bug, write an unclear
    explanation, or make technical mistakes in the report. Rapid feedback from security
    teams will help you improve, and turn you into a competent hacker faster.
  prefs: []
  type: TYPE_NORMAL
- en: Private Programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most bug bounty platforms distinguish between public and private programs.
  prefs: []
  type: TYPE_NORMAL
- en: '*Public programs* are those that are open to all; anyone can hack and submit
    bugs to these programs, as long as they abide by the laws and the bug bounty program’s
    policies.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, *private programs* are open to only invited hackers. For
    these, companies ask hackers with a certain level of experience and a proven track
    record to attack the company and submit bugs to it. Private programs are a lot
    less competitive than public ones because of the limited number of hackers participating.
    Therefore, it’s much easier to find bugs in them. Private programs also often
    have a much faster response time, because they receive fewer reports on average.
  prefs: []
  type: TYPE_NORMAL
- en: Participating in private programs can be extremely advantageous. But how do
    you get invited to one? [Figure 1-1](#figure1-1) shows a private invitation notification
    on the HackerOne platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![f01001](image_fi/501546c01/f01001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-1: A private invitation notification on the HackerOne platform. When
    you hack on a bug bounty platform, you can often get invites to the private programs
    of different companies.'
  prefs: []
  type: TYPE_NORMAL
- en: Companies send private invites to hackers who have proven their abilities in
    some way, so getting invites to private programs isn’t difficult once you’ve found
    a couple of bugs. Different bug bounty platforms will have different algorithms
    to determine who gets the invites, but here are some tips to help you get there.
  prefs: []
  type: TYPE_NORMAL
- en: First, submit a few bugs to public programs. To get private invites, you often
    need to gain a certain number of reputation points on a platform, and the only
    way to begin earning these is to submit valid bugs to public programs. You should
    also focus on submitting high-impact vulnerabilities. These vulnerabilities will
    often reward you with higher reputation points and help you get private invites
    faster. In each of the chapters in Part II of this book, I make suggestions for
    how you can escalate the issues you discover to craft the highest-impact attacks.
    On some bug bounty platforms, like HackerOne, you can also get private invites
    by completing tutorials or solving Capture the Flag (CTF) challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Next, don’t spam. Submitting nonissues often causes a decrease in reputation
    points. Most bug bounty platforms limit private invites to hackers with points
    above a certain threshold.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, be polite and courteous when communicating with security teams. Being
    rude or abusive to security teams will probably get you banned from the program
    and prevent you from getting private invites from other companies.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the Right Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug bounties are a great way to gain experience in cybersecurity and earn extra
    bucks. But the industry has been getting more competitive. As more people are
    discovering these programs and getting involved in hacking on them, it’s becoming
    increasingly difficult for beginners to get started. That’s why it’s important
    to pick a program that you can succeed in from the very start.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you develop a bug hunter’s intuition, you often have to rely on low-hanging
    fruit and well-known techniques. This means many other hackers will be able to
    find the same bugs, often much faster than you can. It’s therefore a good idea
    to pick a program that more experienced bug hunters pass over to avoid competition.
    You can find these underpopulated programs in two ways: look for unpaid programs
    or go for programs with big scopes.'
  prefs: []
  type: TYPE_NORMAL
- en: Try going for vulnerability disclosure programs first. Unpaid programs are often
    ignored by experienced bug hunters, since they don’t pay monetary rewards. But
    they still earn you points and recognition! And that recognition might be just
    what you need to get an invite to a private, paid program.
  prefs: []
  type: TYPE_NORMAL
- en: Picking a program with a large scope means you’ll be able to look at a larger
    number of target applications and web pages. This dilutes the competition, as
    fewer hackers will report on any single asset or vulnerability type. Go for programs
    with fast response times to prevent frustration and get feedback as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing that you can incorporate into your decision process is the reputation
    of the program. If you can, gather information about a company’s process through
    its disclosed reports and learn from other hackers’ experiences. Does the company
    treat its reporters well? Are they respectful and supportive? Do they help you
    learn? Pick programs that will be supportive while you are still learning, and
    programs that will reward you for the value that you provide.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right program for your skill set is crucial if you want to break
    into the world of bug bounties. This chapter should have helped you sort out the
    various programs that you might be interested in. Happy hacking!
  prefs: []
  type: TYPE_NORMAL
- en: A Quick Comparison of Popular Programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you’ve identified a few programs that you are interested in, you could
    list the properties of each one to compare them. In [Table 1-1](#table1-1), let’s
    compare a few of the popular programs introduced in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1-1: A Comparison of Three Bug Bounty Programs: HackerOne, Facebook,
    and GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Program** | **Asset type** | **In scope** | **Payout amount** | **Response
    time** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| HackerOne | Social site | [https://hackerone.com/](https://hackerone.com/)
    https://api.hackerone.com'
  prefs: []
  type: TYPE_NORMAL
- en: '*.vpn.hackerone.net'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.hackerone.com](https://www.hackerone.com)'
  prefs: []
  type: TYPE_NORMAL
- en: And more assets . . .
  prefs: []
  type: TYPE_NORMAL
- en: Any vulnerability except exclusions are in scope. | $500–$15,000+ | Fast. Average
    time to response is 5 hours. Average time to triage is 15 hours. |
  prefs: []
  type: TYPE_NORMAL
- en: '| Facebook | Social site, nonsocial site, mobile site, IoT, and source code
    | Instagram Internet.org / Free Basics'
  prefs: []
  type: TYPE_NORMAL
- en: Oculus
  prefs: []
  type: TYPE_NORMAL
- en: Workplace
  prefs: []
  type: TYPE_NORMAL
- en: Open source projects by Facebook
  prefs: []
  type: TYPE_NORMAL
- en: WhatsApp
  prefs: []
  type: TYPE_NORMAL
- en: Portal
  prefs: []
  type: TYPE_NORMAL
- en: FBLite
  prefs: []
  type: TYPE_NORMAL
- en: Express Wi-Fi
  prefs: []
  type: TYPE_NORMAL
- en: Any vulnerability except exclusions are in scope. | $500 minimum | Based on
    my experience, pretty fast! |
  prefs: []
  type: TYPE_NORMAL
- en: '| GitHub | Social site | [https://blog.github.com/](https://blog.github.com/)
    [https://community.github.com/](https://community.github.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://resources.github.com/](http://resources.github.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: And more assets . . .
  prefs: []
  type: TYPE_NORMAL
- en: Use of known-vulnerable software.
  prefs: []
  type: TYPE_NORMAL
- en: Clickjacking a static site.
  prefs: []
  type: TYPE_NORMAL
- en: Including HTML in Markdown content.
  prefs: []
  type: TYPE_NORMAL
- en: Leaking email addresses via *.patch* links.
  prefs: []
  type: TYPE_NORMAL
- en: And more issues . . . | $617–$30,000 | Fast. Average time to response is 11
    hours. Average time to triage is 23 hours. |
  prefs: []
  type: TYPE_NORMAL
