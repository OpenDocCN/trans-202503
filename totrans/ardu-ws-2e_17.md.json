["```\n// Listing 18-1\n#include <SoftwareSerial.h>\nSoftwareSerial Serial2(2, 3); \nint data1 = 0;\nvoid setup(){ Serial.begin(9600); Serial2.begin(9600);\n}\nvoid loop() \n{ if (Serial2.available() > 0) { data1 = Serial2.read(); // display incoming number Serial.print(\" \"); Serial.print(data1, DEC); }\n```", "```\n// Project 52 – Creating a Simple RFID Control System\n#include <SoftwareSerial.h>\nSoftwareSerial Serial2(2, 3);\nint data1 = 0;\nint ok = -1;\n// use Listing 18-1 to find your tags' numbers1 int tag1[14] = {*x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*};2 int tag2[14] = {*x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*};\nint newtag[14] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n// used for read comparisons3 boolean comparetag(int aa[14], int bb[14])\n{ boolean ff = false; int fg = 0; for (int cc = 0 ; cc < 14 ; cc++) { if (aa[cc] == bb[cc]) { fg++; } } if (fg == 14) { ff = true; } return ff;\n}4 void checkmytags() // compares each tag against the tag just read\n{ ok = 0;          // This variable supports decision making. // If it is 1, we have a match; 0 is a read but no match, // -1 is no read attempt made. if (comparetag(newtag, tag1) == true) {5     ok++; } if (comparetag(newtag, tag2) == true) {6     ok++; }\n}\nvoid setup(){ Serial.begin(9600); Serial2.begin(9600); Serial2.flush(); // need to flush serial buffer // otherwise first read may not be correct\n}\nvoid loop()\n{ ok = -1; if (Serial2.available() > 0)     // if a read has been attempted { // read the incoming number on serial RX delay(100); // needed to allow time for the data // to come in from the serial buffer7     for (int z = 0 ; z < 14 ; z++) // read the rest of the tag { data1 = Serial2.read(); newtag[z] = data1; } Serial2.flush(); // stops multiple reads // now to match tags up8     checkmytags(); }9   // now do something based on tag type if (ok > 0)        // if we had a match { Serial.println(\"Accepted\"); ok = -1; } else if (ok == 0)  // if we didn't have a match { Serial.println(\"Rejected\"); ok = -1; }\n}\n```", "```\n#include <EEPROM.h>\n```", "```\nEEPROM.write(*a*, *b*);\n```", "```\n*value* = EEPROM.read*(position)*; \n```", "```\n// Listing 18-2\n#include <EEPROM.h>\nint zz;\nvoid setup()\n{ Serial.begin(9600); randomSeed(analogRead(0));\n}\nvoid loop()\n{ Serial.println(\"Writing random numbers...\"); for (int i = 0; i < 1024; i++)  { zz = random(255);1     EEPROM.write(i, zz);  } Serial.println(); for (int a = 0; a < 1024; a++) {2     zz = EEPROM.read(a);  Serial.print(\"EEPROM position: \"); Serial.print(a); Serial.print(\" contains \");3     Serial.println(zz);  delay(25); }\n}\n```", "```\n// Project 53 – Creating an RFID Control with \"Last Action\" Memory\n#include <SoftwareSerial.h>\nSoftwareSerial Serial2(2, 3);\n#include <EEPROM.h>\nint data1 = 0;\nint ok = -1;\nint lockStatus = 0;\n// use Listing 18-1 to find your tags' numbers1 int tag1[14] = { *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*\n};2 int tag2[14] = { *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*, *x*\n};int newtag[14] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n}; // used for read comparisons\n// comparetag compares two arrays and returns true if identical\n// this is good for comparing tags\nboolean comparetag(int aa[14], int bb[14])\n{ boolean ff = false; int fg = 0; for (int cc = 0; cc < 14; cc++) { if (aa[cc] == bb[cc]) { fg++; } } if (fg == 14) { ff = true; } return ff;\n}\nvoid checkmytags()\n// compares each tag against the tag just read\n{ ok = 0; if (comparetag(newtag, tag1) == true) { ok++; } if (comparetag(newtag, tag2) == true) { ok++; }\n}3 void checkLock()\n{ Serial.print(\"System Status after restart \"); lockStatus = EEPROM.read(0); if (lockStatus == 1) { Serial.println(\"- locked\"); digitalWrite(13, HIGH); } if (lockStatus == 0) { Serial.println(\"- unlocked\"); digitalWrite(13, LOW); } if ((lockStatus != 1) && (lockStatus != 0)) { Serial.println(\"EEPROM fault - Replace Arduino hardware\"); }\n}\nvoid setup()\n{ Serial.begin(9600); Serial2.begin(9600); Serial2.flush(); // need to flush serial buffer pinMode(13, OUTPUT);4   checkLock();\n}\nvoid loop()\n{ ok = -1; if (Serial2.available() > 0)   // if a read has been attempted { // read the incoming number on serial RX delay(100); for (int z = 0; z < 14; z++) // read the rest of the tag { data1 = Serial2.read(); newtag[z] = data1; } Serial2.flush();             // prevents multiple reads // now to match tags up checkmytags(); }5   if (ok > 0)                    // if we had a match { lockStatus = EEPROM.read(0); if (lockStatus == 1)         // if locked, unlock it {6       Serial.println(\"Status - unlocked\"); digitalWrite(13, LOW); EEPROM.write(0, 0); } if (lockStatus == 0) {7       Serial.println(\"Status - locked\"); digitalWrite(13, HIGH); EEPROM.write(0, 1); } if ((lockStatus != 1) && (lockStatus != 0)) {8       Serial.println(\"EEPROM fault - Replace Arduino hardware\"); } } else if (ok == 0)              // if we didn't have a match { Serial.println(\"Incorrect tag\"); ok = -1; } delay(500);\n}\n```"]