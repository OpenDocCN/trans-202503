["```\n#include <sys/resource.h>\n\nint `getpriority`(int *which*, id_t *who*);\n```", "```\nint `setpriority`(int *which*, id_t *who*, int *prio*);\n```", "```\n`procpri/t_setpriority.c`\n#include <sys/time.h>\n#include <sys/resource.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    int which, prio;\n    id_t who;\n    if (argc != 4 || strchr(\"pgu\", argv[1][0]) == NULL)\n        usageErr(\"%s {p|g|u} who priority\\n\"\n                \"    set priority of: p=process; g=process group; \"\n                \"u=processes for user\\n\", argv[0]);\n\n    /* Set nice value according to command-line arguments */\n\n    which = (argv[1][0] == 'p') ? PRIO_PROCESS :\n                (argv[1][0] == 'g') ? PRIO_PGRP : PRIO_USER;\n    who = getLong(argv[2], 0, \"who\");\n    prio = getInt(argv[3], 0, \"prio\");\n\n    if (setpriority(which, who, prio) == -1)\n        errExit(\"getpriority\");\n\n    /* Retrieve nice value to check the change */\n\n    errno = 0;                  /* Because successful call may return -1 */\n    prio = getpriority(which, who);\n    if (prio == -1 && errno != 0)\n        errExit(\"getpriority\");\n\n    printf(\"Nice value = %d\\n\", prio);\n\n    exit(EXIT_SUCCESS);\n}\n      `procpri/t_setpriority.c`\n```", "```\n#include <sched.h>\n\nint `sched_get_priority_min`(int *policy*);\nint `sched_get_priority_max`(int *policy*);\n```", "```\n#include <sched.h>\n\nint `sched_setscheduler`(pid_t *pid*, int *policy*,\n const struct sched_param **param*);\n```", "```\nstruct sched_param {\n     int sched_priority;        /* Scheduling priority */\n};\n```", "```\n#include <sched.h>\n\nint `sched_setparam`(pid_t *pid*, const struct sched_param **param*);\n```", "```\n`procpri/sched_set.c`\n#include <sched.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    int j, pol;\n    struct sched_param sp;\n\n    if (argc < 3 || strchr(\"rfo\", argv[1][0]) == NULL)\n        usageErr(\"%s policy priority [pid...]\\n\"\n                \"    policy is 'r' (RR), 'f' (FIFO), \"\n#ifdef SCHED_BATCH              /* Linux-specific */\n                \"'b' (BATCH), \"\n#endif\n#ifdef SCHED_IDLE               /* Linux-specific */\n                \"'i' (IDLE), \"\n#endif\n                \"or 'o' (OTHER)\\n\",\n                argv[0]);\n\n    pol = (argv[1][0] == 'r') ? SCHED_RR :\n                (argv[1][0] == 'f') ? SCHED_FIFO :\n#ifdef SCHED_BATCH\n                (argv[1][0] == 'b') ? SCHED_BATCH :\n#endif\n#ifdef SCHED_IDLE\n                (argv[1][0] == 'i') ? SCHED_IDLE :\n#endif\n                SCHED_OTHER;\n    sp.sched_priority = getInt(argv[2], 0, \"priority\");\n\n    for (j = 3; j < argc; j++)\n        if (sched_setscheduler(getLong(argv[j], 0, \"pid\"), pol, &sp) == -1)\n            errExit(\"sched_setscheduler\");\n\n    exit(EXIT_SUCCESS);\n}\n     `procpri/sched_set.c`\n```", "```\n#include <sched.h>\n\nint `sched_getscheduler`(pid_t *pid*);\n```", "```\nint `sched_getparam`(pid_t *pid*, struct sched_param **param*);\n```", "```\n$ `su`                          *Assume privilege so we can set realtime policies*\nPassword:\n# `sleep 100 &`                 *Create a process*\n[1] 2006\n# `./sched_view 2006`           *View initial policy and priority of*\n *sleep* *process*\n2006: OTHER  0\n# `./sched_set f 25 2006`       *Switch process to*\nSCHED_FIFO *policy, priority 25*\n# `./sched_view 2006`           *Verify change*\n2006: FIFO  25\n```", "```\n`procpri/sched_view.c`\n#include <sched.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    int j, pol;\n    struct sched_param sp;\n\n    for (j = 1; j < argc; j++) {\n        pol = sched_getscheduler(getLong(argv[j], 0, \"pid\"));\n        if (pol == -1)\n            errExit(\"sched_getscheduler\");\n\n        if (sched_getparam(getLong(argv[j], 0, \"pid\"), &sp) == -1)\n            errExit(\"sched_getparam\");\n\n        printf(\"%s: %-5s %2d\\n\", argv[j],\n                (pol == SCHED_OTHER) ? \"OTHER\" :\n                (pol == SCHED_RR) ? \"RR\" :\n                (pol == SCHED_FIFO) ? \"FIFO\" :\n#ifdef SCHED_BATCH              /* Linux-specific */\n                (pol == SCHED_BATCH) ? \"BATCH\" :\n#endif\n#ifdef SCHED_IDLE               /* Linux-specific */\n                (pol == SCHED_IDLE) ? \"IDLE\" :\n#endif\n                \"???\", sp.sched_priority);\n    }\n\n    exit(EXIT_SUCCESS);\n}\n     `procpri/sched_view.c`\n```", "```\n#include <sched.h>\n\nint `sched_yield`(void);\n```", "```\n#include <sched.h>\n\nint `sched_rr_get_interval`(pid_t *pid*, struct timespec **tp*);\n```", "```\nstruct timespec {\n    time_t tv_sec;          /* Seconds */\n    long   tv_nsec;         /* Nanoseconds */\n};\n```", "```\n#define _GNU_SOURCE\n#include <sched.h>\n\nint `sched_setaffinity`(pid_t *pid*, size_t *len*, cpu_set_t **set*);\n```", "```\n#define _GNU_SOURCE\n#include <sched.h>\n\nvoid `CPU_ZERO`(cpu_set_t **set*);\nvoid `CPU_SET`(int *cpu*, cpu_set_t **set*);\nvoid `CPU_CLR`(int *cpu*, cpu_set_t **set*);\n\nint `CPU_ISSET`(int *cpu*, cpu_set_t **set*);\n```", "```\ncpu_set_t set;\n\nCPU_ZERO(&set);\nCPU_SET(1, &set);\nCPU_SET(2, &set);\nCPU_SET(3, &set);\n\nsched_setaffinity(pid, CPU_SETSIZE, &set);\n```", "```\n#define _GNU_SOURCE\n#include <sched.h>\n\nint `sched_getaffinity`(pid_t *pid*, size_t *len*, cpu_set_t **set*);\n```", "```\n    # `./rtsched` ``*`policy priority command arg...`*``\n    ```"]