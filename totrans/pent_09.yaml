- en: Chapter 6. Finding Vulnerabilities
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 章. 查找漏洞
- en: Before we start slinging exploits, we need to do some more research and analysis.
    When identifying vulnerabilities, we actively search for issues that will lead
    to compromise in the exploitation phase. Although some security firms will just
    run an automated exploitation tool and hope for the best, careful study of the
    vulnerabilities by a skilled pentester will garner better results than any tool
    on its own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用漏洞利用工具之前，我们需要做更多的研究和分析。在识别漏洞时，我们积极寻找可能导致在利用阶段发生泄露的问题。尽管一些安全公司会仅仅运行自动化的漏洞利用工具并希望一切顺利，但经过熟练渗透测试人员仔细研究漏洞的结果往往比任何工具本身更为有效。
- en: We’ll examine several vulnerability analysis methods in this chapter, including
    automated scanning, targeted analysis, and manual research.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨几种漏洞分析方法，包括自动化扫描、定向分析和手动研究。
- en: From Nmap Version Scan to Potential Vulnerability
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Nmap 版本扫描到潜在漏洞
- en: Now that we have some information about our target and the attack surface, we
    can develop scenarios to reach our pentest goals. For example, the FTP server
    on port 21 announced itself as Vsftpd 2.3.4\. Vsftpd is short for Very Secure
    FTP.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一些关于目标和攻击面的信息，我们可以制定场景来实现我们的渗透测试目标。例如，端口 21 上的 FTP 服务器自报是 Vsftpd 2.3.4。Vsftpd
    是 Very Secure FTP 的缩写。
- en: We might assume that a product that calls itself *very secure* is asking for
    trouble, and in fact, in July 2011, it came to light that the Vsftpd repository
    had been breached. The Vsftpd binaries had been replaced with a backdoored version
    that could be triggered with a username containing a smiley face `:)`. This opens
    a root shell on port 6200\. Once the issue was discovered, the backdoored binaries
    were removed, and the official Vsftpd 2.3.4 was put back in place. So, though
    the presence of Vsftpd 2.3.4 doesn’t guarantee that our target is vulnerable,
    it is definitely a threat to consider. Pentesting doesn’t get much easier than
    piggybacking on an attacker who already owns a system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会认为，一个自称*非常安全*的产品是在寻求麻烦，事实上，2011 年 7 月，Vsftpd 存储库被发现遭到入侵。Vsftpd 的二进制文件被替换为一个带有后门的版本，可以通过包含笑脸符号
    `:)` 的用户名触发。这个漏洞会在 6200 端口打开一个 root shell。一旦这个问题被发现，带后门的二进制文件被移除，官方的 Vsftpd 2.3.4
    被重新安装。因此，尽管 Vsftpd 2.3.4 的存在并不能保证我们的目标存在漏洞，但它绝对是一个值得考虑的威胁。渗透测试没有比借用一个已经控制系统的攻击者的漏洞利用更简单的事情了。
- en: Nessus
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nessus
- en: Tenable Security’s Nessus is one of the most widely used commercial vulnerability
    scanners, though many vendors provide comparable products. Nessus shares its name
    with a centaur who was slain by the Greek mythological hero, Heracles, and whose
    blood later killed Heracles himself. The Nessus database includes vulnerabilities
    across platforms and protocols, and its scanner performs a series of checks to
    detect known issues. You’ll find entire books and training courses devoted to
    Nessus, and as you become more familiar with the tool, you’ll find what works
    best for you. I’ll provide only a high-level discussion of Nessus here.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Tenable Security 的 Nessus 是最广泛使用的商业漏洞扫描器之一，尽管许多厂商提供了类似的产品。Nessus 与一个被希腊神话英雄赫拉克勒斯（Heracles）所杀的半人马同名，而该半人马的血液后来也杀死了赫拉克勒斯自己。Nessus
    数据库包含跨平台和协议的漏洞，其扫描器通过一系列检查来检测已知的问题。你会发现有关于 Nessus 的整本书籍和培训课程，随着你对这个工具的熟悉，你将找到最适合你的使用方法。在这里，我只会简要介绍
    Nessus。
- en: Nessus is available as a paid professional version that pentesters and in-house
    security teams can use to scan networks for vulnerabilities. You can use the free,
    noncommercial version called Nessus Home to try the exercises in this book. Nessus
    Home is limited to scanning 16 IP addresses. (Nessus isn’t preinstalled on Kali,
    but we covered installing it in [Chapter 1](ch01.xhtml "Chapter 1. Setting Up
    Your Virtual Lab").)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus 提供付费的专业版，渗透测试人员和内部安全团队可以使用该版本扫描网络中的漏洞。你可以使用免费版的 Nessus Home 来尝试本书中的练习。Nessus
    Home 限制扫描 16 个 IP 地址。（Nessus 并未预装在 Kali 中，但我们在[第 1 章](ch01.xhtml "第 1 章. 设置你的虚拟实验室")中介绍了如何安装它。）
- en: Before you can run Nessus you need to start the Nessus daemon. To do so, enter
    the `service` command as shown here to start the Nessus web interface on TCP port
    8834.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Nessus 之前，你需要启动 Nessus 守护进程。为此，请输入 `service` 命令，如下所示，在 TCP 端口 8834 上启动 Nessus
    Web 界面。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now open a web browser, and access Nessus by directing the Iceweasel browser
    to *https://kali:8834*. (If you want to access the Nessus interface from another
    system, such as the host, you must replace *kali* with the IP address of the Kali
    machine.) After a few minutes of initialization, you should see a login screen,
    shown in [Figure 6-1](ch06.xhtml#nessus_web_interface_login_screen "Figure 6-1. The
    Nessus web interface login screen"). Use the login credentials you created in
    [Chapter 1](ch01.xhtml "Chapter 1. Setting Up Your Virtual Lab").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开一个网页浏览器，并通过将 Iceweasel 浏览器定向到 *https://kali:8834* 来访问 Nessus。（如果你想从其他系统（例如主机）访问
    Nessus 界面，你必须将 *kali* 替换为 Kali 机器的 IP 地址。）初始化几分钟后，你应该会看到一个登录界面，如 [图 6-1](ch06.xhtml#nessus_web_interface_login_screen
    "图 6-1. Nessus 网页界面登录界面") 所示。使用你在 [第 1 章](ch01.xhtml "第 1 章. 设置虚拟实验室") 中创建的登录凭据。
- en: Nessus Policies
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nessus 策略
- en: The Nessus web interface has several tabs at the top of the screen, as shown
    in [Figure 6-2](ch06.xhtml#nessus_policies-id00020 "Figure 6-2. Nessus policies").
    Let’s start with the Policies tab. Nessus policies are like configuration files
    that tell Nessus which vulnerability checks, port scanners, and so on to run in
    the vulnerability scan.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus 的网页界面在屏幕顶部有几个标签，如 [图 6-2](ch06.xhtml#nessus_policies-id00020 "图 6-2.
    Nessus 策略") 所示。我们从“策略”标签开始。Nessus 策略类似于配置文件，告诉 Nessus 在漏洞扫描中运行哪些漏洞检查、端口扫描器等。
- en: '![The Nessus web interface login screen](httpatomoreillycomsourcenostarchimages2030322.png.jpg)Figure 6-1. The
    Nessus web interface login screen![Nessus policies](httpatomoreillycomsourcenostarchimages2030324.png.jpg)Figure 6-2. Nessus
    policies'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![Nessus 网页界面登录界面](httpatomoreillycomsourcenostarchimages2030322.png.jpg)图
    6-1. Nessus 网页界面登录界面![Nessus 策略](httpatomoreillycomsourcenostarchimages2030324.png.jpg)图
    6-2. Nessus 策略'
- en: To create a policy, click **New Policy** at the left of the Nessus interface.
    Nessus’s policy wizards will help you create a policy that will be useful for
    your scanning goals, as shown in [Figure 6-3](ch06.xhtml#nessus_policy_wizards
    "Figure 6-3. Nessus policy wizards"). For our simple example, choose **Basic Network
    Scan**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建策略，点击 Nessus 界面左侧的 **新建策略**。Nessus 的策略向导将帮助你创建一个符合扫描目标的策略，如 [图 6-3](ch06.xhtml#nessus_policy_wizards
    "图 6-3. Nessus 策略向导") 所示。对于我们的简单示例，选择 **基础网络扫描**。
- en: '![Nessus policy wizards](httpatomoreillycomsourcenostarchimages2030326.png.jpg)Figure 6-3. Nessus
    policy wizards'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![Nessus 策略向导](httpatomoreillycomsourcenostarchimages2030326.png.jpg)图 6-3.
    Nessus 策略向导'
- en: Now you are prompted for some basic information about the policy, as shown in
    [Figure 6-4](ch06.xhtml#basic_policy_setup "Figure 6-4. Basic policy setup"),
    including a name, a description, and whether other Nessus users can access the
    policy. Once you are done, click **Next**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，系统提示你输入一些关于策略的基本信息，如 [图 6-4](ch06.xhtml#basic_policy_setup "图 6-4. 基础策略设置")
    所示，包括名称、描述以及其他 Nessus 用户是否可以访问该策略。完成后，点击 **下一步**。
- en: '![Basic policy setup](httpatomoreillycomsourcenostarchimages2030328.png.jpg)Figure 6-4. Basic
    policy setup'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![基础策略设置](httpatomoreillycomsourcenostarchimages2030328.png.jpg)图 6-4. 基础策略设置'
- en: Now you are asked if this is an internal or external scan, as shown in [Figure 6-5](ch06.xhtml#internal_or_external_scan
    "Figure 6-5. Internal or external scan"). Choose **Internal** and click **Next**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，系统会询问这是内部扫描还是外部扫描，如 [图 6-5](ch06.xhtml#internal_or_external_scan "图 6-5.
    内部或外部扫描") 所示。选择 **内部** 并点击 **下一步**。
- en: '![Internal or external scan](httpatomoreillycomsourcenostarchimages2030330.png.jpg)Figure 6-5. Internal
    or external scan'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![内部或外部扫描](httpatomoreillycomsourcenostarchimages2030330.png.jpg)图 6-5. 内部或外部扫描'
- en: If you have credentials, Nessus can authenticate with hosts and look for vulnerabilities
    that may not be apparent from a network-facing perspective. This feature is often
    used by internal security teams to test the security posture of their networks.
    You can set these credentials in the next step, as shown in [Figure 6-6](ch06.xhtml#adding_credentials_left_parenthesisoptio
    "Figure 6-6. Adding credentials (optional)"). For now, you can leave this step
    blank and click **Save**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有凭据，Nessus 可以与主机进行身份验证，查找可能不会从网络视角显现的漏洞。此功能通常被内部安全团队用于测试其网络的安全态势。你可以在下一步设置这些凭据，如
    [图 6-6](ch06.xhtml#adding_credentials_left_parenthesisoptio "图 6-6. 添加凭据（可选）")
    所示。现在，你可以跳过此步骤并点击 **保存**。
- en: '![Adding credentials (optional)](httpatomoreillycomsourcenostarchimages2030332.png.jpg)Figure 6-6. Adding
    credentials (optional)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![添加凭据（可选）](httpatomoreillycomsourcenostarchimages2030332.png.jpg)图 6-6. 添加凭据（可选）'
- en: As shown in [Figure 6-7](ch06.xhtml#our_policy_is_addeddot "Figure 6-7. Our
    policy is added."), our new policy is now shown in the Policy tab.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图6-7](ch06.xhtml#our_policy_is_addeddot "图6-7. 我们的策略已添加")所示，我们的新策略现在已显示在策略选项卡中。
- en: '![Our policy is added.](httpatomoreillycomsourcenostarchimages2030334.png.jpg)Figure 6-7. Our
    policy is added.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![我们的策略已添加](httpatomoreillycomsourcenostarchimages2030334.png.jpg)图6-7. 我们的策略已添加。'
- en: Scanning with Nessus
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Nessus进行扫描
- en: Now, let’s switch to the Scans tab and run Nessus against our target machines.
    Click **Scans** ▸ **New Scan**, and fill in the scan information, as shown in
    [Figure 6-8](ch06.xhtml#starting_a_nessus_scan "Figure 6-8. Starting a Nessus
    scan"). Nessus needs to know the name for our scan (Name), which scan policy to
    use (Policy), and which systems to scan (Targets).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们切换到扫描选项卡并对目标机器运行Nessus。点击**扫描** ▸ **新建扫描**，然后填写扫描信息，如[图6-8](ch06.xhtml#starting_a_nessus_scan
    "图6-8. 启动Nessus扫描")所示。Nessus需要知道我们的扫描名称（名称）、使用的扫描策略（策略）以及要扫描的系统（目标）。
- en: '![Starting a Nessus scan](httpatomoreillycomsourcenostarchimages2030336.png.jpg)Figure 6-8. Starting
    a Nessus scan'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![启动Nessus扫描](httpatomoreillycomsourcenostarchimages2030336.png.jpg)图6-8. 启动Nessus扫描'
- en: Nessus runs a series of probes against the target in an attempt to detect or
    rule out as many issues as possible. The running scan is added to the Scans tab
    as shown in [Figure 6-9](ch06.xhtml#running_a_nessus_scan "Figure 6-9. Running
    a Nessus scan").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus对目标执行一系列探测，以试图尽可能多地检测或排除问题。正在运行的扫描会被添加到扫描选项卡中，如[图6-9](ch06.xhtml#running_a_nessus_scan
    "图6-9. 运行Nessus扫描")所示。
- en: '![Running a Nessus scan](httpatomoreillycomsourcenostarchimages2030338.png.jpg)Figure 6-9. Running
    a Nessus scan'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![运行Nessus扫描](httpatomoreillycomsourcenostarchimages2030338.png.jpg)图6-9. 运行Nessus扫描'
- en: Once the scan is finished, click it to view the results, as shown in [Figure 6-10](ch06.xhtml#high-level_overview_of_the_results
    "Figure 6-10. High-level overview of the results").
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，点击它以查看结果，如[图6-10](ch06.xhtml#high-level_overview_of_the_results "图6-10.
    结果的高层概览")所示。
- en: '![High-level overview of the results](httpatomoreillycomsourcenostarchimages2030340.png.jpg)Figure 6-10. High-level
    overview of the results'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![结果的高层概览](httpatomoreillycomsourcenostarchimages2030340.png.jpg)图6-10. 结果的高层概览'
- en: As shown in the figure, Nessus found several critical vulnerabilities on the
    Windows XP and Ubuntu targets. But it found only informational data on the Windows
    7 box.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，Nessus在Windows XP和Ubuntu目标上发现了多个严重漏洞。但在Windows 7主机上仅发现了信息性数据。
- en: To see details of a specific host, click it. Details of the Windows XP vulnerabilities
    are shown in [Figure 6-11](ch06.xhtml#nessus_categorizes_and_describes_its_res
    "Figure 6-11. Nessus categorizes and describes its results.").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看特定主机的详细信息，点击该主机。Windows XP漏洞的详细信息如[图6-11](ch06.xhtml#nessus_categorizes_and_describes_its_res
    "图6-11. Nessus对结果进行分类并描述")所示。
- en: '![Nessus categorizes and describes its results.](httpatomoreillycomsourcenostarchimages2030342.png.jpg)Figure 6-11. Nessus
    categorizes and describes its results.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![Nessus对结果进行分类并描述](httpatomoreillycomsourcenostarchimages2030342.png.jpg)图6-11.
    Nessus对结果进行分类并描述。'
- en: Say what you want about vulnerability scanners, but it’s hard to find a product
    that can tell you as much about a target environment as quickly and with as little
    effort as Nessus. For example, Nessus’s results reveal that our Windows XP target
    is in fact missing the MS08-067 patch discussed in [Chapter 4](ch04.xhtml "Chapter 4. Using
    the Metasploit Framework"). It also seems to be missing other Microsoft patches
    affecting the SMB server.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不管你怎么评价漏洞扫描器，很难找到一个产品，能够像Nessus一样快速且轻松地提供如此多的目标环境信息。例如，Nessus的结果显示，我们的Windows
    XP目标实际上缺少[第4章](ch04.xhtml "第4章. 使用Metasploit框架")中讨论的MS08-067补丁。它似乎还缺少其他影响SMB服务器的Microsoft补丁。
- en: Which vulnerability is the most exploitable? The Nessus output for a particular
    issue will often give you some information about that issue’s potential exploitability.
    For example, clicking the MS08-067 vulnerability in the output ([Figure 6-12](ch06.xhtml#ms08-067_nessus_entry_provides_detailed
    "Figure 6-12. The MS08-067 Nessus entry provides detailed information.")) shows
    exploit code available for this vulnerability in Metasploit as well as other tools
    such as Core Impact and Canvas.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个漏洞是最易被利用的？Nessus针对某个特定问题的输出通常会提供一些关于该问题潜在可利用性的相关信息。例如，点击输出中的MS08-067漏洞（[图6-12](ch06.xhtml#ms08-067_nessus_entry_provides_detailed
    "图6-12. MS08-067 Nessus条目提供了详细信息")）会显示Metasploit以及其他工具（如Core Impact和Canvas）中可用于此漏洞的攻击代码。
- en: '![The MS08-067 Nessus entry provides detailed information.](httpatomoreillycomsourcenostarchimages2030344.png.jpg)Figure 6-12. The
    MS08-067 Nessus entry provides detailed information.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![MS08-067 Nessus 条目提供详细信息。](httpatomoreillycomsourcenostarchimages2030344.png.jpg)图
    6-12. MS08-067 Nessus 条目提供详细信息。'
- en: A Note About Nessus Rankings
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于 Nessus 排名的说明
- en: Nessus ranks vulnerabilities based on the Common Vulnerability Scoring System
    (CVSS), version 2, from the National Institute of Standards and Technology (NIST).
    Ranking is calculated based on the impact to the system if the issue is exploited.
    Though the higher the vulnerability ranking, the more serious Nessus thinks the
    vulnerability issue is, the actual risk of a vulnerability depends on the environment.
    For example, Nessus ranks anonymous FTP access as a medium-risk vulnerability.
    When restricted to nonsensitive files, however, anonymous FTP access can have
    a low to nonexistent risk. On the other hand, it isn’t unheard of for companies
    to leave copies of their proprietary source code lying around on a publicly available
    FTP server. If on an external pentesting engagement you can access the client’s
    biggest asset by logging in as *anonymous* on an FTP server, it’s safe to assume
    that any interested attacker can do the same, and this warrants an immediate call
    to your client contact. Tools are not capable of making this sort of distinction.
    For that you need a pentester.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus 根据美国国家标准与技术研究院（NIST）的通用漏洞评分系统（CVSS）版本 2 对漏洞进行排名。排名是根据系统在漏洞被利用时可能产生的影响来计算的。虽然漏洞的排名越高，Nessus
    认为漏洞问题越严重，但漏洞的实际风险取决于环境。例如，Nessus 将匿名 FTP 访问评为中等风险漏洞。然而，当只限于非敏感文件时，匿名 FTP 访问的风险可能低到几乎没有。另一方面，企业将其专有源代码副本随意放在一个公开的
    FTP 服务器上的情况并不罕见。如果在外部渗透测试任务中，你可以通过以 *anonymous* 身份登录 FTP 服务器访问到客户的最大资产，那么可以安全地假设任何感兴趣的攻击者也可以做到这一点，这就需要立即联系你的客户。工具无法做出这种区分，做这种区分需要的是渗透测试人员。
- en: Why Use Vulnerability Scanners?
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用漏洞扫描器？
- en: Though some penetration testing courses leave out vulnerability scanning altogether
    and argue that a skilled pentester can find everything a scanner can, scanners
    are still valuable tools, especially because many pentests are performed within
    a shorter time window than anyone might like. But if one of the goals of your
    assessment is to avoid detection, you might think twice about using a loud vulnerability
    scanner.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些渗透测试课程完全忽略了漏洞扫描，并认为一个熟练的渗透测试人员可以发现扫描仪能发现的所有问题，但扫描仪仍然是有价值的工具，尤其是在很多渗透测试是在比任何人想象的时间更短的窗口期内完成的。不过，如果你评估的目标之一是避免被检测到，你可能需要三思而后行，避免使用过于显眼的漏洞扫描器。
- en: Though Nessus did not find every issue in our environment, its use, combined
    with the results of our information-gathering phase, has given us a solid starting
    point for exploitation. Even those pentesters who think that a pentester should
    replace a scanner during an engagement can benefit from knowing how to use scanning
    tools. Though in an ideal world, every company would perform regular, no-holds-barred
    pentests, in reality, there is plenty of vulnerability scanning work to go around.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Nessus 并没有发现我们环境中的所有问题，但它的使用与我们信息收集阶段的结果结合，为我们提供了一个坚实的漏洞利用起点。即便是那些认为渗透测试人员应该在任务中替代扫描仪的渗透测试人员，也能从学会如何使用扫描工具中受益。虽然在理想的世界里，每个公司都会定期进行无所不用其极的渗透测试，但现实中，仍有大量的漏洞扫描工作可以进行。
- en: Exporting Nessus Results
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出 Nessus 扫描结果
- en: Once a Nessus scan finishes, you can export its findings from the Export button
    at the top of the scan details screen, as shown in [Figure 6-13](ch06.xhtml#exporting_nessus_scan_results
    "Figure 6-13. Exporting Nessus scan results").
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Nessus 扫描完成，你可以通过扫描详情页面顶部的导出按钮导出扫描结果，如[图 6-13](ch06.xhtml#exporting_nessus_scan_results
    "图 6-13. 导出 Nessus 扫描结果")所示。
- en: '![Exporting Nessus scan results](httpatomoreillycomsourcenostarchimages2030346.png.jpg)Figure 6-13. Exporting
    Nessus scan results'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![导出 Nessus 扫描结果](httpatomoreillycomsourcenostarchimages2030346.png.jpg)图 6-13.
    导出 Nessus 扫描结果'
- en: Nessus can output results into PDF, HTML, XML, CSV, and other formats. You may
    want to hand off the raw results to your client for a vulnerability scanning engagement,
    but you should never export scanner results, slap your company letterhead on them,
    and call them pentest results. Much more analysis is involved in a penetration
    test than a vulnerability scan. You should always verify results from automated
    scanners and combine them with manual analysis to get a more complete picture
    of the vulnerabilities in the environment.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus可以将结果输出为PDF、HTML、XML、CSV等格式。你可能希望将原始结果交给客户用于漏洞扫描任务，但绝不应导出扫描器结果，随便加上公司信头，然后称其为渗透测试结果。渗透测试涉及比漏洞扫描更多的分析。你应该始终验证自动扫描器的结果，并结合手动分析，以获得更完整的环境漏洞图像。
- en: Now for a look at some other methods of vulnerability analysis.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看看一些其他的漏洞分析方法。
- en: Researching Vulnerabilities
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞研究
- en: If the Nessus summary page doesn’t give you enough information about a vulnerability,
    try a good old-fashioned Google search. Additionally, try searching *[http://www.securityfocus.com/](http://www.securityfocus.com/)*,
    *[http://www.packetstormsecurity.org/](http://www.packetstormsecurity.org/)*,
    *[http://www.exploit-db.org/](http://www.exploit-db.org/)*, and *[http://www.cve.mitre.org/](http://www.cve.mitre.org/)*.
    For -example, you can search for vulnerabilities using the Common Vulnerabilities
    and Exposures (CVE) system, Microsoft patch number, and so on within a specific
    site using a Google query such as “ms08-067 site:securityfocus.com”. The MS08-067
    vulnerability received a lot of attention, so you’ll find no shortage of good
    information. (We looked at the details of this particular issue in [Chapter 4](ch04.xhtml
    "Chapter 4. Using the Metasploit Framework").)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Nessus的总结页面没有给你提供足够的漏洞信息，可以尝试使用传统的Google搜索。此外，可以尝试搜索*[http://www.securityfocus.com/](http://www.securityfocus.com/)*、*[http://www.packetstormsecurity.org/](http://www.packetstormsecurity.org/)*、*[http://www.exploit-db.org/](http://www.exploit-db.org/)*和*[http://www.cve.mitre.org/](http://www.cve.mitre.org/)*。例如，你可以通过Google查询如“ms08-067
    site:securityfocus.com”来在特定网站上搜索漏洞信息，使用CVE系统、微软补丁编号等。MS08-067漏洞曾引起广泛关注，因此你会找到大量有用的信息。（我们在[第4章](ch04.xhtml
    "第4章：使用Metasploit框架")中详细探讨了这个特定问题。）
- en: Depending on your subject vulnerability, you may be able to find proof-of-concept
    exploit code online as well. We’ll look at working with public code in [Chapter 19](ch19.xhtml
    "Chapter 19. Fuzzing, Porting Exploits, and Metasploit Modules"), but be warned
    that unlike the community-vetted exploits in a project such as Metasploit, not
    all code on the Internet does what it claims. The payload in a public exploit
    may destroy the target machine, or it may join your machine to the exploit author’s
    secret botnet. Be vigilant when working with public exploits, and carefully vet
    them before running them against a production network. (You may also be able to
    find in-depth information about some vulnerabilities posted by the researchers
    who originally found the issue.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的漏洞类型，你也许能够在线找到概念验证的利用代码。我们将在[第19章](ch19.xhtml "第19章：模糊测试、移植漏洞和Metasploit模块")中探讨如何使用公共代码，但请注意，与Metasploit这类经过社区审核的漏洞利用不同，互联网上的所有代码都不一定能按其声明的功能运行。公共漏洞利用中的有效载荷可能会破坏目标机器，或者可能将你的机器加入到漏洞利用作者的秘密僵尸网络。在使用公共漏洞利用时要保持警惕，运行前要仔细审查，确保不会影响生产环境的网络。（你也可能会找到一些由最初发现漏洞的研究人员发布的深入信息。）
- en: The Nmap Scripting Engine
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nmap脚本引擎
- en: Now for another tool that provides vulnerability scanning. Just as Metasploit
    evolved from an exploitation framework into a fully fledged penetration-testing
    suite with hundreds of modules, Nmap has similarly evolved beyond its original
    goal of port scanning. The Nmap Scripting Engine (NSE) lets you run publicly available
    scripts and write your own.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在介绍另一种提供漏洞扫描的工具。就像Metasploit从一个漏洞利用框架发展成一个拥有数百个模块的完整渗透测试套件一样，Nmap也从最初的端口扫描工具发展而来。Nmap脚本引擎（NSE）允许你运行公开可用的脚本，并编写自己的脚本。
- en: You’ll find the scripts packaged with the NSE in Kali at */usr/share/nmap/scripts*.
    The available scripts fall into several categories, including information gathering,
    active vulnerability assessment, searches for signs of previous compromises, and
    so on. [Example 6-1](ch06.xhtml#nmap_scripts_list "Example 6-1. Nmap scripts list")
    shows NSE scripts available in your default Kali installation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在 Kali 中找到随 NSE 打包的脚本，路径是 */usr/share/nmap/scripts*。这些可用脚本分为几个类别，包括信息收集、主动漏洞评估、搜索先前攻击迹象等。[示例
    6-1](ch06.xhtml#nmap_scripts_list "示例 6-1. Nmap 脚本列表") 显示了你在默认 Kali 安装中可用的 NSE
    脚本。
- en: Example 6-1. Nmap scripts list
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-1. Nmap 脚本列表
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To get more information about a particular script or category of scripts, enter
    the `--script-help` flag in Nmap. For example, to see all scripts in the *default*
    category enter **`nmap --script-help default`**, as shown in [Example 6-2](ch06.xhtml#nmap_default_scripts_help
    "Example 6-2. Nmap default scripts help"). Many factors contribute to whether
    a script is included in the default category, including its reliability and whether
    the script is safe and unlikely to harm the target.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关特定脚本或脚本类别的更多信息，可以在 Nmap 中输入 `--script-help` 参数。例如，要查看 *default* 类别中的所有脚本，可以输入
    **`nmap --script-help default`**，如 [示例 6-2](ch06.xhtml#nmap_default_scripts_help
    "示例 6-2. Nmap 默认脚本帮助") 所示。是否将某个脚本包含在默认类别中，取决于多个因素，包括其可靠性、脚本是否安全并且不太可能对目标造成损害。
- en: Example 6-2. Nmap default scripts help
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-2. Nmap 默认脚本帮助
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you use the `-sC` flag to tell Nmap to run a script scan in addition to port
    scanning, it will run all the scripts in the *default* category, as shown in [Example 6-3](ch06.xhtml#nmap_default_scripts_output
    "Example 6-3. Nmap default scripts output").
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `-sC` 参数告诉 Nmap 除了端口扫描外还运行脚本扫描，它会运行 *default* 类别中的所有脚本，如 [示例 6-3](ch06.xhtml#nmap_default_scripts_output
    "示例 6-3. Nmap 默认脚本输出") 所示。
- en: Example 6-3. Nmap default scripts output
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-3. Nmap 默认脚本输出
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the Nmap Scripting Engine found a good deal of interesting information.
    For example, we see that the SMTP server on port 25 of the Windows XP target allows
    the use of the `VRFY` ❶ command, which allows us to see if a username exists on
    the mail server. If we have a valid username, use of this command will make credential-guessing
    attacks much more likely to succeed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Nmap 脚本引擎发现了许多有趣的信息。例如，我们看到 Windows XP 目标的端口 25 上的 SMTP 服务器允许使用 `VRFY`
    ❶ 命令，这使我们能够查看邮件服务器上是否存在某个用户名。如果我们有有效的用户名，使用该命令将使凭证猜测攻击更有可能成功。
- en: We can also see that the web server on port 80 appears to be an XAMPP 1.7.2
    install ❷. As of this writing, the current stable version of XAMPP for Windows
    is 1.8.3\. At the very least, the version we found is out of date, and it may
    also be subject to security issues.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到，端口 80 上的 Web 服务器似乎是 XAMPP 1.7.2 版本 ❷。截至本文写作时，Windows 平台上 XAMPP 的当前稳定版本是
    1.8.3\。至少，我们发现的版本已经过时，可能还存在安全问题。
- en: In addition to showing us potential vulnerabilities, NSE also allows us to rule
    out some services. For example, we can see that the MySQL server on port 3306
    does not allow us to connect because our IP address is not authorized ❸. We may
    want to return to this port during post exploitation if we are able to compromise
    other hosts in the environment, but for now we can rule out MySQL vulnerabilities
    on this host.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了向我们展示潜在的漏洞，NSE 还允许我们排除一些服务。例如，我们可以看到，端口 3306 上的 MySQL 服务器不允许我们连接，因为我们的 IP
    地址未被授权❸。如果我们能够攻击环境中的其他主机，可能会想在后期利用时再次访问该端口，但现在我们可以排除该主机上的 MySQL 漏洞。
- en: Running a Single NSE Script
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行单个 NSE 脚本
- en: Before we move on, let’s look at another example of using an NSE script, this
    time one that is not part of the default set. From our basic use of Nmap in the
    previous chapter, we know that our Linux target is running Network File System
    (NFS). NFS allows client computers to access local files over the network, but
    in your pentesting career, you may find that setting up NFS securely is easier
    said than done. Many users don’t think about the security consequences of giving
    remote users access to their files. What’s the worst that can happen, right? Who
    cares if I share my home directory with my coworkers?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们看一个使用 NSE 脚本的另一个例子，这次使用的是非默认脚本。从上一章我们对 Nmap 的基本使用中知道，我们的 Linux 目标正在运行网络文件系统（NFS）。NFS
    允许客户端计算机通过网络访问本地文件，但在渗透测试过程中，你可能会发现安全地配置 NFS 比说起来容易做起来难。许多用户并没有考虑到让远程用户访问文件的安全后果。最糟糕的情况是什么呢？我与同事共享我的主目录又有什么关系呢？
- en: The NSE script *nfs-ls.nse* will connect to NFS and audit shares. We can see
    more information about an individual script with the `--script-help` command,
    as shown in [Example 6-4](ch06.xhtml#nmap_nfs-ls_script_details "Example 6-4. Nmap
    NFS-LS script details").
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: NSE 脚本*nfs-ls.nse*会连接到 NFS 并审计共享。我们可以通过`--script-help`命令查看单个脚本的更多信息，如[示例 6-4](ch06.xhtml#nmap_nfs-ls_script_details
    "示例 6-4. Nmap NFS-LS 脚本详细信息")所示。
- en: Example 6-4. Nmap NFS-LS script details
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-4. Nmap NFS-LS 脚本详细信息
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This script mounts the remote shares, audits their permissions, and lists the
    files included in the share. To run a script against our Linux target, we call
    it using the `--script` option and the script name, as shown in [Example 6-5](ch06.xhtml#nmap_nfs-ls_scripts_output
    "Example 6-5. Nmap NFS-LS scripts output").
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本挂载远程共享，审计其权限，并列出共享中的文件。要对我们的 Linux 目标运行脚本，我们可以使用`--script`选项和脚本名称，如[示例 6-5](ch06.xhtml#nmap_nfs-ls_scripts_output
    "示例 6-5. Nmap NFS-LS 脚本输出")所示。
- en: Example 6-5. Nmap NFS-LS scripts output
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-5. Nmap NFS-LS 脚本输出
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, the NSE script found the NFS share */export/georgia* ❶ on our
    Linux target. Of particular interest is the *.ssh* directory ❷, which may include
    sensitive information such as SSH keys and (if public key authentication is allowed
    on the SSH server) a list of authorized keys.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，NSE 脚本找到了我们的 Linux 目标上的 NFS 共享*/export/georgia* ❶。特别值得关注的是*.ssh* 目录 ❷，它可能包含敏感信息，如
    SSH 密钥，以及（如果允许 SSH 服务器上的公钥认证）授权密钥列表。
- en: When you run into an access-control mistake like this, one common pen-test trick
    is to use the mistake and the write permission to add a new SSH key to the *authorized_keys*
    list (in this case, ours). If that attempt succeeds, suddenly the seemingly minor
    issue of being able to edit a user’s documents turns into the ability to log in
    to the remote system and execute commands.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到这种访问控制错误时，一个常见的渗透测试技巧是利用这个错误和写权限，向*authorized_keys* 列表中添加一个新的 SSH 密钥（在这种情况下是我们的密钥）。如果尝试成功，原本看似无关紧要的编辑用户文档问题，突然变成了能够登录远程系统并执行命令的能力。
- en: Before we move on, let’s ensure that public key SSH authentication is enabled
    on our Linux target, allowing the attack we envisioned above to work successfully.
    Key-based login is considered the strongest form of SSH authentication and is
    recommended for security. A quick SSH attempt to our Linux target shows that public
    key authentication is allowed here ❶ (see [Example 6-6](ch06.xhtml#ssh_authentication_methods
    "Example 6-6. SSH authentication methods")).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们确认在我们的 Linux 目标上启用了公钥 SSH 认证，这样我们设想的攻击才能成功。基于密钥的登录被认为是最强的 SSH 认证形式，并且建议用于安全性。通过快速
    SSH 尝试连接我们的 Linux 目标，可以看到这里允许公钥认证 ❶（参见[示例 6-6](ch06.xhtml#ssh_authentication_methods
    "示例 6-6. SSH 认证方法")）。
- en: Example 6-6. SSH authentication methods
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-6. SSH 认证方法
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some NSE scripts may crash services or harm the target system, and an entire
    category is dedicated to denial of service. For example, the script *smb-check-vulns*
    will check for the MS08-067 vulnerability and other SMB vulnerabilities. Its help
    information notes that this script is likely dangerous and shouldn’t be run on
    production systems unless you are prepared for the server to go down.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 NSE 脚本可能会导致服务崩溃或损害目标系统，其中一个完整的类别专门用于拒绝服务攻击。例如，脚本*smb-check-vulns*会检查 MS08-067
    漏洞和其他 SMB 漏洞。它的帮助信息指出，这个脚本可能是危险的，不应在生产系统上运行，除非你准备好让服务器崩溃。
- en: Metasploit Scanner Modules
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metasploit 扫描器模块
- en: Metasploit, which we used in [Chapter 4](ch04.xhtml "Chapter 4. Using the Metasploit
    Framework"), also can conduct vulnerability scanning via numerous auxiliary modules.
    Unlike exploits, these modules will not give us control of the target machine,
    but they will help us identify vulnerabilities for later exploitation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](ch04.xhtml "第4章. 使用 Metasploit 框架")中使用的 Metasploit 也可以通过多个辅助模块进行漏洞扫描。与漏洞利用不同，这些模块不会让我们控制目标机器，但它们会帮助我们识别漏洞，以便后续的利用。
- en: One such Metasploit module looks for FTP services that provide anonymous access.
    Although it may be easy enough to attempt to log in manually to individual FTP
    servers, Metasploit auxiliary modules let us scan many hosts at once, which will
    save time when you’re testing a large environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个 Metasploit 模块寻找提供匿名访问的 FTP 服务。虽然手动尝试登录到单个 FTP 服务器可能足够简单，但 Metasploit 辅助模块可以让我们一次扫描多个主机，这样在测试大型环境时可以节省时间。
- en: To choose a particular module, we `use` the module, then we define our targets
    with `set`, and then scan with the `exploit` command, as shown in [Example 6-7](ch06.xhtml#metasploit_anonymous_ftp_scanner_module
    "Example 6-7. Metasploit anonymous FTP scanner module"). This syntax should be
    familiar from [Chapter 4](ch04.xhtml "Chapter 4. Using the Metasploit Framework").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择特定的模块，我们使用`use`命令来加载模块，然后通过`set`命令定义目标，最后通过`exploit`命令进行扫描，如[示例 6-7](ch06.xhtml#metasploit_anonymous_ftp_scanner_module
    "示例 6-7. Metasploit 匿名FTP扫描模块")所示。这个语法应该和[第4章](ch04.xhtml "第4章. 使用Metasploit框架")中的内容类似。
- en: Example 6-7. Metasploit anonymous FTP scanner module
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-7. Metasploit 匿名FTP扫描模块
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At ❶, we find that both the Windows XP and Linux targets have anonymous FTP
    enabled. We know this may or may not be a serious issue, based on the files that
    are available to the anonymous user in the FTP folder. I’ve been on engagements
    where company trade secrets were sitting on an Internet-facing FTP server. On
    the other hand, I’ve also been on engagements where the use of anonymous FTP was
    justified from a business perspective, and no sensitive files were present. It
    is up to a pentester to fill in the information an automated scanner lacks as
    to the severity of an issue in a particular environment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在❶时，我们发现Windows XP和Linux目标都启用了匿名FTP。我们知道这可能是一个严重问题，也可能不是，具体取决于匿名用户在FTP文件夹中可以访问的文件。我曾参与过一些项目，其中公司的商业机密就暴露在一个面向互联网的FTP服务器上。另一方面，我也参与过一些项目，其中从商业角度看，使用匿名FTP是合理的，并且没有敏感文件存在。作为渗透测试人员，需要填补自动化扫描工具在特定环境中缺乏的有关问题严重性的信息。
- en: Metasploit Exploit Check Functions
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metasploit漏洞利用检查函数
- en: Some Metasploit exploits include a `check` function that connects to a target
    to see if it is vulnerable, rather than attempting to exploit a vulnerability.
    We can use this command as a kind of ad hoc vulnerability scan, as shown in [Example 6-8](ch06.xhtml#ms08-067_check_function
    "Example 6-8. MS08-067 check function"). (There’s no need to specify a payload
    when running `check` because no exploitation will take place.)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Metasploit漏洞利用模块包括一个`check`函数，它会连接到目标服务器检查其是否存在漏洞，而不是直接尝试利用漏洞。我们可以将这个命令当作一种临时的漏洞扫描工具，如[示例
    6-8](ch06.xhtml#ms08-067_check_function "示例 6-8. MS08-067 检查函数")所示。（运行`check`时无需指定有效载荷，因为不会进行漏洞利用。）
- en: Example 6-8. MS08-067 check function
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-8. MS08-067 检查函数
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we run the vulnerability `check` ❶, Metasploit tells us that our Windows
    XP target is vulnerable to the MS08-067 vulnerability ❷, as expected.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行漏洞`check` ❶时，Metasploit会告诉我们我们的Windows XP目标存在MS08-067漏洞 ❷，正如预期的那样。
- en: Unfortunately, not all Metasploit modules have `check` functions. (If you try
    running `check` on a module that doesn’t support it, Metasploit will tell you.)
    For example, based on the results of our Nmap version scan in the previous chapter,
    the Windows XP target mail server appears to be out of date and subject to security
    issues. SLMail version 5.5.0.4433 has a known exploitable issue—CVE-2003-0264—so
    we can find it easily with a quick search in Msfconsole for *cve:2003-0264*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并不是所有Metasploit模块都有`check`函数。（如果你尝试在不支持的模块上运行`check`，Metasploit会告知你。）例如，根据我们在上一章中进行的Nmap版本扫描结果，Windows
    XP目标邮件服务器似乎过时，并且可能存在安全问题。SLMail版本5.5.0.4433有一个已知的可利用漏洞——CVE-2003-0264——因此我们可以通过在Msfconsole中搜索*cve:2003-0264*来轻松找到它。
- en: Once in the context of the module, we can test out `check`, as shown in [Example 6-9](ch06.xhtml#slmail_module_has_no_check_functiondot
    "Example 6-9. The SLMail module has no check function.").
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入模块上下文，我们就可以测试`check`命令，如[示例 6-9](ch06.xhtml#slmail_module_has_no_check_functiondot
    "示例 6-9. SLMail模块没有检查函数")所示。
- en: Example 6-9. The SLMail module has no check function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-9. SLMail模块没有检查函数。
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As it turns out, this exploit module does not implement the `check` function,
    so we don’t have solid assurance that a service is vulnerable. Although our SLMail
    POP3 server appears to be vulnerable based on its banner version number, we can’t
    get confirmation from Metasploit. In cases like these, we may not be able to know
    for sure if a vulnerability exists short of running an exploit.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，这个漏洞利用模块没有实现`check`函数，因此我们无法得到服务是否存在漏洞的确凿保证。虽然根据其横幅版本号，我们的SLMail POP3服务器看起来可能存在漏洞，但我们无法从Metasploit获得确认。在这种情况下，我们可能无法确定漏洞是否存在，除非运行一个漏洞利用程序。
- en: Web Application Scanning
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web应用程序扫描
- en: Although a client’s custom-built apps may have security problems, your target
    may also deploy prebuilt web applications such as payroll apps, webmail, and so
    on, which can be vulnerable to the same issues. If we can find an instance of
    known vulnerable software, we may be able to exploit it to get a foothold in a
    remote system.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管客户的定制应用程序可能存在安全问题，但您的目标系统也可能部署了预构建的 web 应用程序，如工资单应用、网页邮件等，这些应用也可能存在相同的安全问题。如果我们能够找到已知的易受攻击软件实例，可能能够利用它在远程系统中获得立足点。
- en: Web application issues are particularly interesting on many external penetration
    tests where your attack surface may be limited to little more than web servers.
    For example, as you can see in [Figure 6-14](ch06.xhtml#default_apache_page "Figure 6-14. Default
    Apache page"), browsing to the default web page of the web server on our Linux
    target reveals a default Apache install page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多外部渗透测试中，web 应用程序问题尤其值得关注，因为您的攻击面可能仅限于 web 服务器。例如，正如您在 [图 6-14](ch06.xhtml#default_apache_page
    "图 6-14. 默认 Apache 页面") 中看到的，访问我们 Linux 目标的 web 服务器的默认网页会显示一个默认的 Apache 安装页面。
- en: '![Default Apache page](httpatomoreillycomsourcenostarchimages2030348.png.jpg)Figure 6-14. Default
    Apache page'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![默认 Apache 页面](httpatomoreillycomsourcenostarchimages2030348.png.jpg)图 6-14.
    默认 Apache 页面'
- en: Unless we can find a vulnerability in the underlying web server software, we’ll
    have a hard time exploiting a simple page that reads “It works!” Before we write
    this service off, though, let’s use a web scanner to look for additional pages
    that we might not see otherwise.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们能在底层 web 服务器软件中找到漏洞，否则很难利用一个简单的页面，它只显示“它工作了！”不过，在我们放弃这个服务之前，让我们使用 web 扫描器查找其他可能我们无法看到的页面。
- en: Nikto
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nikto
- en: 'Nikto is a web application vulnerability scanner built into Kali that’s like
    Nessus for web apps: It looks for issues such as dangerous files, outdated versions,
    and misconfigurations. To run Nikto against our Linux target, we tell it which
    host to scan with the `-h` flag, as shown in [Example 6-10](ch06.xhtml#running_nikto
    "Example 6-10. Running Nikto").'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto 是 Kali 中内置的 web 应用程序漏洞扫描器，类似于 Nessus 但专门针对 web 应用：它查找诸如危险文件、过时版本和配置错误等问题。为了在我们的
    Linux 目标上运行 Nikto，我们使用 `-h` 标志指定扫描的主机，如 [示例 6-10](ch06.xhtml#running_nikto "示例
    6-10. 运行 Nikto") 所示。
- en: Example 6-10. Running Nikto
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-10. 运行 Nikto
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Manually browsing to the default installation path for every application with
    known vulnerabilities would be a daunting task, but fortunately, Nikto seeks out
    URLs that may not be apparent. One particularly interesting finding here is a
    vulnerable installation of the TikiWiki software ❶ on the server. Sure enough,
    if we browse to the TikiWiki directory at *[http://192.168.20.11/tikiwiki/](http://192.168.20.11/tikiwiki/)*,
    we find the CMS software. Nikto thinks that this install is subject to a code
    execution vulnerability, and further analysis of Open Sourced Vulnerability Database
    (OSVDB) entry 40478 reveals that this issue has a Metasploit exploit that we can
    use during exploitation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 手动浏览每个已知漏洞应用程序的默认安装路径将是一个艰巨的任务，但幸运的是，Nikto 会寻找那些可能不显而易见的 URL。这里有一个特别有趣的发现，那就是服务器上存在一个易受攻击的
    TikiWiki 软件安装 ❶。果然，如果我们访问 *[http://192.168.20.11/tikiwiki/](http://192.168.20.11/tikiwiki/)*，就能找到该
    CMS 软件。Nikto 认为这个安装存在代码执行漏洞，进一步分析开放源码漏洞数据库（OSVDB）条目 40478 显示，这个问题有一个 Metasploit
    漏洞，可以在利用过程中使用。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: OSVDB (*[http://osvdb.com/](http://osvdb.com/)*) is a vulnerability repository
    specifically for open source software such as TikiWiki, with detailed information
    on a wide variety of products. Use it to search for additional information about
    possible issues you find.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: OSVDB (*[http://osvdb.com/](http://osvdb.com/)*) 是一个专门针对开源软件（如 TikiWiki）的漏洞库，提供了各种产品的详细信息。可以使用它来搜索关于您发现的潜在问题的更多信息。
- en: Attacking XAMPP
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 攻击 XAMPP
- en: Browsing to our Windows XP web server, we see at *http://192.168.20.10/* that
    the default web page announces itself as XAMPP 1.7.2.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们浏览到 Windows XP web 服务器时，看到在 *http://192.168.20.10/* 的默认网页上显示其自称为 XAMPP 1.7.2。
- en: By default, XAMPP installations include phpMyAdmin, a database administration
    web application. Ideally, phpMyAdmin would not be available over the network,
    or at least it should require credentials to access it. But on this version of
    XAMPP, the phpMyAdmin install at *[http://192.168.20.10/phpmyadmin/](http://192.168.20.10/phpmyadmin/)*
    is available and open. Even worse, phpMyAdmin gives us root access on the same
    MySQL server that NSE told us we are unable to connect to. Using phpMyAdmin (as
    shown in [Figure 6-15](ch06.xhtml#open_phpmyadmin_console_complains_quite "Figure 6-15. The
    open phpMyAdmin console complains quite loudly about the poor configuration.")),
    we can bypass this restriction and perform MySQL queries on the server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，XAMPP 安装包包含了 phpMyAdmin，这是一个数据库管理网页应用程序。理想情况下，phpMyAdmin 不应该通过网络公开，或者至少应该要求凭证才能访问它。但在这个版本的
    XAMPP 中，位于 *[http://192.168.20.10/phpmyadmin/](http://192.168.20.10/phpmyadmin/)*
    的 phpMyAdmin 安装是开放且可用的。更糟糕的是，phpMyAdmin 允许我们在同一台 MySQL 服务器上获得 root 访问权限，而 NSE
    提示我们无法连接到该服务器。通过使用 phpMyAdmin（如 [图 6-15](ch06.xhtml#open_phpmyadmin_console_complains_quite
    "图 6-15. 打开的 phpMyAdmin 控制台因配置问题大声抱怨。") 所示），我们可以绕过这一限制，并在服务器上执行 MySQL 查询。
- en: '![The open phpMyAdmin console complains quite loudly about the poor configuration.](httpatomoreillycomsourcenostarchimages2030350.png.jpg)Figure 6-15. The
    open phpMyAdmin console complains quite loudly about the poor configuration.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![打开的 phpMyAdmin 控制台因配置问题大声抱怨。](httpatomoreillycomsourcenostarchimages2030350.png.jpg)图
    6-15. 打开的 phpMyAdmin 控制台因配置问题大声抱怨。'
- en: Default Credentials
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认凭证
- en: In addition to its inclusion of phpMyAdmin, a Google search tells us that XAMPP
    1.7.3 and earlier come with Web Distributed Authoring and Versioning (WebDAV)
    software, which is used to manage files on a web server over HTTP. XAMPP’s WebDAV
    installation comes with the default username and password *wampp:xampp*. If these
    values aren’t changed, anyone with access to WebDAV can log in, deface the website,
    and even possibly upload scripts that will allow attackers to get a foothold on
    the system through the web server. And, as you can see in [Figure 6-16](ch06.xhtml#webdav_install
    "Figure 6-16. WebDAV install"), WebDAV is indeed present on this server.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了包含 phpMyAdmin，Google 搜索还告诉我们，XAMPP 1.7.3 及更早版本包含了 Web 分布式创作和版本控制（WebDAV）软件，用于通过
    HTTP 管理网页服务器上的文件。XAMPP 的 WebDAV 安装使用默认的用户名和密码 *wampp:xampp*。如果这些值没有被更改，任何可以访问
    WebDAV 的人都可以登录，篡改网站，甚至可能上传脚本，允许攻击者通过网页服务器获取系统的立足点。正如你在 [图 6-16](ch06.xhtml#webdav_install
    "图 6-16. WebDAV 安装") 中看到的，WebDAV 确实出现在这台服务器上。
- en: '![WebDAV install](httpatomoreillycomsourcenostarchimages2030352.png.jpg)Figure 6-16. WebDAV
    install'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![WebDAV 安装](httpatomoreillycomsourcenostarchimages2030352.png.jpg)图 6-16.
    WebDAV 安装'
- en: We can use the tool Cadaver to interact with WebDAV servers. In [Example 6-11](ch06.xhtml#using_cadaver
    "Example 6-11. Using Cadaver"), we use Cadaver to try to connect to the WebDAV
    server at *http://192.168.20.10* and test the default credential set.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用工具 Cadaver 与 WebDAV 服务器交互。在 [示例 6-11](ch06.xhtml#using_cadaver "示例 6-11.
    使用 Cadaver") 中，我们使用 Cadaver 尝试连接到 *http://192.168.20.10* 上的 WebDAV 服务器，并测试默认凭证集。
- en: Example 6-11. Using Cadaver
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-11. 使用 Cadaver
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Cadaver login is successful ❶. Our Windows XP target uses the default credentials
    for WebDAV, which we will be able to exploit. Now that we have access to WebDAV,
    we can upload files to the web server.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Cadaver 登录成功 ❶。我们的 Windows XP 目标使用了 WebDAV 的默认凭证，我们将能够利用这一点。现在我们已经获得了 WebDAV
    的访问权限，我们可以向网页服务器上传文件。
- en: Manual Analysis
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动分析
- en: Sometimes, no solution will work nearly as well as manual vulnerability analysis
    to see if a service will lead to a compromise, and there’s no better way to improve
    than practice. In the sections that follow we’ll explore some promising leads
    from our port and vulnerability scanning.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，没有什么解决方案能比手动漏洞分析更有效，去看一个服务是否会导致系统被攻破，而且没有比实践更好的提高方式。接下来的章节中，我们将探索一些通过端口和漏洞扫描获得的有前景的线索。
- en: Exploring a Strange Port
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索一个奇怪的端口
- en: One port that has failed to come up in our automated scans is 3232 on our Windows
    target. If you try scanning this port with an Nmap version scan (as we did at
    the end of [Chapter 5](ch05.xhtml "Chapter 5. Information Gathering")), you’ll
    notice that it crashes. This behavior suggests that the listening program is designed
    to listen for a particular input and that it has difficulty processing anything
    else.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的自动扫描中，有一个端口没有被检测到，那就是我们 Windows 目标机器上的 3232 端口。如果你尝试使用 Nmap 版本扫描来扫描这个端口（如我们在
    [第 5 章](ch05.xhtml "第 5 章. 信息收集") 末尾所做的那样），你会注意到它会崩溃。这种行为表明，监听程序是为了接收特定的输入而设计的，并且它在处理其他内容时遇到了困难。
- en: This sort of behavior is interesting to pentesters, because programs that crash
    when handling malformed input aren’t validating input properly. Recall from [Chapter 5](ch05.xhtml
    "Chapter 5. Information Gathering") that in the process of crashing the program,
    the output led us to believe that the software is a web server. Connecting to
    the port with a browser, as shown in [Figure 6-17](ch06.xhtml#web_server_on_port_3232
    "Figure 6-17. Web server on port 3232"), confirms this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为对渗透测试人员很有趣，因为在处理格式错误的输入时崩溃的程序未能正确验证输入。回想一下[第5章](ch05.xhtml "第5章。信息收集")中，我们在程序崩溃的过程中，输出让我们认为该软件是一个Web服务器。使用浏览器连接到该端口，如[图6-17](ch06.xhtml#web_server_on_port_3232
    "图6-17。端口3232上的Web服务器")所示，可以确认这一点。
- en: '![Web server on port 3232](httpatomoreillycomsourcenostarchimages2030354.png.jpg)Figure 6-17. Web
    server on port 3232'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![端口3232上的Web服务器](httpatomoreillycomsourcenostarchimages2030354.png.jpg)图6-17。端口3232上的Web服务器'
- en: The web page served doesn’t tell us much, but from here we can connect to the
    port manually using Netcat. We know this is a web server, so we will talk to it
    as such. We know we can browse to the default web page, so we can enter **`GET
    / HTTP/1.1`** to ask the web server for the default page (see [Example 6-12](ch06.xhtml#connecting_to_a_port_with_netcat
    "Example 6-12. Connecting to a port with Netcat")).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的网页没有告诉我们太多信息，但我们可以从这里手动使用Netcat连接到该端口。我们知道这是一个Web服务器，因此我们将以Web服务器的方式与之通信。我们知道可以浏览到默认网页，因此我们可以输入**`GET
    / HTTP/1.1`**请求Web服务器提供默认页面（见[示例6-12](ch06.xhtml#connecting_to_a_port_with_netcat
    "示例6-12。使用Netcat连接到端口")）。
- en: Example 6-12. Connecting to a port with Netcat
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 示例6-12。使用Netcat连接到端口
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The server announces itself as Zervit 0.4 ❶. It doesn’t look good for the software
    because the first autocomplete entry in a search for Zervit 0.4 on Google is “Zervit
    0.4 exploit.” This web server software is subject to multiple security issues,
    including a buffer overflow and a local file inclusion vulnerability, which allows
    us to serve other files on the system. This service is so sensitive that it may
    be best to avoid buffer overflow attacks, because one false move will crash it.
    The local file inclusion, on the other hand, looks promising. We know the server
    can process HTTP `GET` requests. For example, we can download Windows XP’s *boot.ini*
    file by moving back five directories to the C drive using `GET`, as shown in [Example 6-13](ch06.xhtml#local_file_inclusion_in_zervit_0dot4
    "Example 6-13. Local file inclusion in Zervit 0.4").
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将自己标识为Zervit 0.4 ❶。对于这款软件来说情况不妙，因为在Google上搜索Zervit 0.4时，第一个自动补全的条目是“Zervit
    0.4 exploit”（Zervit 0.4 漏洞）。这款Web服务器软件存在多个安全问题，包括缓冲区溢出和本地文件包含漏洞，这使我们能够提供系统上的其他文件。由于这个服务非常敏感，最好避免进行缓冲区溢出攻击，因为一个错误的操作可能会导致它崩溃。另一方面，本地文件包含漏洞看起来很有前景。我们知道服务器可以处理HTTP
    `GET`请求。例如，我们可以通过`GET`命令回退五个目录到C盘来下载Windows XP的*boot.ini*文件，如[示例6-13](ch06.xhtml#local_file_inclusion_in_zervit_0dot4
    "示例6-13。Zervit 0.4中的本地文件包含")所示。
- en: Example 6-13. Local file inclusion in Zervit 0.4
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 示例6-13。Zervit 0.4中的本地文件包含
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We’re able to pull down *boot.ini*, a config file that tells Windows which operating
    system options to display at boot time. We’ll use this local file inclusion to
    pull down additional sensitive files in [Chapter 8](ch08.xhtml "Chapter 8. Exploitation").
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够下载*boot.ini*，这是一个配置文件，告诉Windows在启动时显示哪些操作系统选项。我们将在[第8章](ch08.xhtml "第8章。利用")中使用这个本地文件包含漏洞下载更多敏感文件。
- en: Finding Valid Usernames
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找有效用户名
- en: We can drastically increase our chances of a successful password attack if we
    know valid usernames for services. (We’ll explore this in more detail in [Chapter 9](ch09.xhtml
    "Chapter 9. Password Attacks").) One way to find valid usernames for mail servers
    is to use the `VRFY SMTP` command, if it is available. As the name implies, `VRFY`
    verifies if a user exists. NSE found the `VRFY` verb is enabled on the Windows
    XP target in the previous chapter. Connect to TCP port 25 using Netcat, and use
    `VRFY` to check for usernames, as shown in [Example 6-14](ch06.xhtml#using_the_smtp_vrfy_command
    "Example 6-14. Using the SMTP VRFY command").
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道服务的有效用户名，成功进行密码攻击的机会可以大大增加。（我们将在[第9章](ch09.xhtml "第9章。密码攻击")中详细探讨这一点。）一种找到邮件服务器有效用户名的方法是使用`VRFY
    SMTP`命令，如果该命令可用的话。顾名思义，`VRFY`用于验证用户是否存在。NSE在上一章中发现`VRFY`动词在Windows XP目标机器上是启用的。使用Netcat连接到TCP端口25，并使用`VRFY`检查用户名，如[示例6-14](ch06.xhtml#using_the_smtp_vrfy_command
    "示例6-14。使用SMTP VRFY命令")所示。
- en: Example 6-14. Using the `SMTP VRFY` command
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 示例6-14。使用`SMTP VRFY`命令
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using `VRFY` we see that *georgia* is a valid username, but there is no user
    called *john*. We will look at using valid usernames to try to guess passwords
    in [Chapter 9](ch09.xhtml "Chapter 9. Password Attacks").
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`VRFY`我们发现*georgia*是一个有效的用户名，但没有名为*john*的用户。我们将在[第9章](ch09.xhtml "第9章 密码攻击")中讨论如何使用有效的用户名尝试猜测密码。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have touched on various methods to find exploitable vulnerabilities
    on our targets. Using a variety of tools and techniques, we were able to find
    myriad ways to go after our targets, including our trusty MS08-067 exploit against
    our Windows XP SMB server and a local file inclusion vulnerability on the Zervit
    0.4 web server that will allow us to download system files. Using `VRFY`, we found
    a valid username that we can use in password-guessing attacks on the mail server.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了多种方法来发现我们目标上的可利用漏洞。通过使用多种工具和技术，我们能够找到多种攻击我们目标的方式，包括我们常用的 MS08-067
    漏洞攻击 Windows XP SMB 服务器，以及 Zervit 0.4 Web 服务器上的本地文件包含漏洞，允许我们下载系统文件。使用`VRFY`，我们发现了一个有效的用户名，可以用于对邮件服务器进行密码猜测攻击。
- en: We learned that the SLMail server may have a vulnerability in the POP3 service
    based on its reported version number (though we were not able to find out for
    sure), and we found an open phpMyAdmin install on the web server that gives us
    root access to the underlying database, as well as an XAMPP install with default
    credentials for WebDAV that will allow us to upload files to the web server. On
    the Linux target, we found an NFS share with write access that allows us to write
    to a user’s *.ssh* directory, and we discovered a not-readily-apparent TikiWiki
    install on the web server that appears to contain a code execution vulnerability.
    The Vsftpd 2.3.4 FTP server may have a hidden backdoor due to a compromise of
    the Vsftpd repositories.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，SLMail 服务器的 POP3 服务可能存在漏洞，基于其报告的版本号（尽管我们无法确定这一点），此外，我们在 Web 服务器上发现了一个开放的
    phpMyAdmin 安装，给我们提供了对底层数据库的 root 访问权限，还发现了一个默认凭据的 XAMPP 安装，这使得我们可以将文件上传到 Web 服务器。在
    Linux 目标上，我们发现了一个具有写权限的 NFS 共享，使我们能够写入用户的*.ssh*目录，同时还发现了一个不太显眼的 TikiWiki 安装，它似乎包含一个代码执行漏洞。Vsftpd
    2.3.4 FTP 服务器可能由于 Vsftpd 存储库的被攻破，存在一个隐藏的后门。
- en: At this point in the book we can see that our Windows XP and Linux target machines
    suffer from a lot of issues. The lack of attack surface on our Windows 7 target
    makes it seem pretty safe, but as we will see a bit later, that solid exterior
    hides a few holes underneath. Before we move on to exploiting these vulnerabilities,
    the next chapter will look at capturing traffic to gain sensitive information
    such as login credentials.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们可以看到我们的 Windows XP 和 Linux 目标机器存在许多问题。我们的 Windows 7 目标缺乏攻击面，看起来相当安全，但正如我们稍后将看到的，那坚固的外壳下隐藏着一些漏洞。在我们开始利用这些漏洞之前，下一章将讨论如何捕获流量以获取敏感信息，如登录凭据。
