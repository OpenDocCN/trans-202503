- en: Chapter 6. Finding Vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start slinging exploits, we need to do some more research and analysis.
    When identifying vulnerabilities, we actively search for issues that will lead
    to compromise in the exploitation phase. Although some security firms will just
    run an automated exploitation tool and hope for the best, careful study of the
    vulnerabilities by a skilled pentester will garner better results than any tool
    on its own.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll examine several vulnerability analysis methods in this chapter, including
    automated scanning, targeted analysis, and manual research.
  prefs: []
  type: TYPE_NORMAL
- en: From Nmap Version Scan to Potential Vulnerability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have some information about our target and the attack surface, we
    can develop scenarios to reach our pentest goals. For example, the FTP server
    on port 21 announced itself as Vsftpd 2.3.4\. Vsftpd is short for Very Secure
    FTP.
  prefs: []
  type: TYPE_NORMAL
- en: We might assume that a product that calls itself *very secure* is asking for
    trouble, and in fact, in July 2011, it came to light that the Vsftpd repository
    had been breached. The Vsftpd binaries had been replaced with a backdoored version
    that could be triggered with a username containing a smiley face `:)`. This opens
    a root shell on port 6200\. Once the issue was discovered, the backdoored binaries
    were removed, and the official Vsftpd 2.3.4 was put back in place. So, though
    the presence of Vsftpd 2.3.4 doesn’t guarantee that our target is vulnerable,
    it is definitely a threat to consider. Pentesting doesn’t get much easier than
    piggybacking on an attacker who already owns a system.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tenable Security’s Nessus is one of the most widely used commercial vulnerability
    scanners, though many vendors provide comparable products. Nessus shares its name
    with a centaur who was slain by the Greek mythological hero, Heracles, and whose
    blood later killed Heracles himself. The Nessus database includes vulnerabilities
    across platforms and protocols, and its scanner performs a series of checks to
    detect known issues. You’ll find entire books and training courses devoted to
    Nessus, and as you become more familiar with the tool, you’ll find what works
    best for you. I’ll provide only a high-level discussion of Nessus here.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus is available as a paid professional version that pentesters and in-house
    security teams can use to scan networks for vulnerabilities. You can use the free,
    noncommercial version called Nessus Home to try the exercises in this book. Nessus
    Home is limited to scanning 16 IP addresses. (Nessus isn’t preinstalled on Kali,
    but we covered installing it in [Chapter 1](ch01.xhtml "Chapter 1. Setting Up
    Your Virtual Lab").)
  prefs: []
  type: TYPE_NORMAL
- en: Before you can run Nessus you need to start the Nessus daemon. To do so, enter
    the `service` command as shown here to start the Nessus web interface on TCP port
    8834.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now open a web browser, and access Nessus by directing the Iceweasel browser
    to *https://kali:8834*. (If you want to access the Nessus interface from another
    system, such as the host, you must replace *kali* with the IP address of the Kali
    machine.) After a few minutes of initialization, you should see a login screen,
    shown in [Figure 6-1](ch06.xhtml#nessus_web_interface_login_screen "Figure 6-1. The
    Nessus web interface login screen"). Use the login credentials you created in
    [Chapter 1](ch01.xhtml "Chapter 1. Setting Up Your Virtual Lab").
  prefs: []
  type: TYPE_NORMAL
- en: Nessus Policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Nessus web interface has several tabs at the top of the screen, as shown
    in [Figure 6-2](ch06.xhtml#nessus_policies-id00020 "Figure 6-2. Nessus policies").
    Let’s start with the Policies tab. Nessus policies are like configuration files
    that tell Nessus which vulnerability checks, port scanners, and so on to run in
    the vulnerability scan.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Nessus web interface login screen](httpatomoreillycomsourcenostarchimages2030322.png.jpg)Figure 6-1. The
    Nessus web interface login screen![Nessus policies](httpatomoreillycomsourcenostarchimages2030324.png.jpg)Figure 6-2. Nessus
    policies'
  prefs: []
  type: TYPE_NORMAL
- en: To create a policy, click **New Policy** at the left of the Nessus interface.
    Nessus’s policy wizards will help you create a policy that will be useful for
    your scanning goals, as shown in [Figure 6-3](ch06.xhtml#nessus_policy_wizards
    "Figure 6-3. Nessus policy wizards"). For our simple example, choose **Basic Network
    Scan**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Nessus policy wizards](httpatomoreillycomsourcenostarchimages2030326.png.jpg)Figure 6-3. Nessus
    policy wizards'
  prefs: []
  type: TYPE_NORMAL
- en: Now you are prompted for some basic information about the policy, as shown in
    [Figure 6-4](ch06.xhtml#basic_policy_setup "Figure 6-4. Basic policy setup"),
    including a name, a description, and whether other Nessus users can access the
    policy. Once you are done, click **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic policy setup](httpatomoreillycomsourcenostarchimages2030328.png.jpg)Figure 6-4. Basic
    policy setup'
  prefs: []
  type: TYPE_NORMAL
- en: Now you are asked if this is an internal or external scan, as shown in [Figure 6-5](ch06.xhtml#internal_or_external_scan
    "Figure 6-5. Internal or external scan"). Choose **Internal** and click **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internal or external scan](httpatomoreillycomsourcenostarchimages2030330.png.jpg)Figure 6-5. Internal
    or external scan'
  prefs: []
  type: TYPE_NORMAL
- en: If you have credentials, Nessus can authenticate with hosts and look for vulnerabilities
    that may not be apparent from a network-facing perspective. This feature is often
    used by internal security teams to test the security posture of their networks.
    You can set these credentials in the next step, as shown in [Figure 6-6](ch06.xhtml#adding_credentials_left_parenthesisoptio
    "Figure 6-6. Adding credentials (optional)"). For now, you can leave this step
    blank and click **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding credentials (optional)](httpatomoreillycomsourcenostarchimages2030332.png.jpg)Figure 6-6. Adding
    credentials (optional)'
  prefs: []
  type: TYPE_IMG
- en: As shown in [Figure 6-7](ch06.xhtml#our_policy_is_addeddot "Figure 6-7. Our
    policy is added."), our new policy is now shown in the Policy tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Our policy is added.](httpatomoreillycomsourcenostarchimages2030334.png.jpg)Figure 6-7. Our
    policy is added.'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with Nessus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let’s switch to the Scans tab and run Nessus against our target machines.
    Click **Scans** ▸ **New Scan**, and fill in the scan information, as shown in
    [Figure 6-8](ch06.xhtml#starting_a_nessus_scan "Figure 6-8. Starting a Nessus
    scan"). Nessus needs to know the name for our scan (Name), which scan policy to
    use (Policy), and which systems to scan (Targets).
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting a Nessus scan](httpatomoreillycomsourcenostarchimages2030336.png.jpg)Figure 6-8. Starting
    a Nessus scan'
  prefs: []
  type: TYPE_NORMAL
- en: Nessus runs a series of probes against the target in an attempt to detect or
    rule out as many issues as possible. The running scan is added to the Scans tab
    as shown in [Figure 6-9](ch06.xhtml#running_a_nessus_scan "Figure 6-9. Running
    a Nessus scan").
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a Nessus scan](httpatomoreillycomsourcenostarchimages2030338.png.jpg)Figure 6-9. Running
    a Nessus scan'
  prefs: []
  type: TYPE_NORMAL
- en: Once the scan is finished, click it to view the results, as shown in [Figure 6-10](ch06.xhtml#high-level_overview_of_the_results
    "Figure 6-10. High-level overview of the results").
  prefs: []
  type: TYPE_NORMAL
- en: '![High-level overview of the results](httpatomoreillycomsourcenostarchimages2030340.png.jpg)Figure 6-10. High-level
    overview of the results'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the figure, Nessus found several critical vulnerabilities on the
    Windows XP and Ubuntu targets. But it found only informational data on the Windows
    7 box.
  prefs: []
  type: TYPE_NORMAL
- en: To see details of a specific host, click it. Details of the Windows XP vulnerabilities
    are shown in [Figure 6-11](ch06.xhtml#nessus_categorizes_and_describes_its_res
    "Figure 6-11. Nessus categorizes and describes its results.").
  prefs: []
  type: TYPE_NORMAL
- en: '![Nessus categorizes and describes its results.](httpatomoreillycomsourcenostarchimages2030342.png.jpg)Figure 6-11. Nessus
    categorizes and describes its results.'
  prefs: []
  type: TYPE_NORMAL
- en: Say what you want about vulnerability scanners, but it’s hard to find a product
    that can tell you as much about a target environment as quickly and with as little
    effort as Nessus. For example, Nessus’s results reveal that our Windows XP target
    is in fact missing the MS08-067 patch discussed in [Chapter 4](ch04.xhtml "Chapter 4. Using
    the Metasploit Framework"). It also seems to be missing other Microsoft patches
    affecting the SMB server.
  prefs: []
  type: TYPE_NORMAL
- en: Which vulnerability is the most exploitable? The Nessus output for a particular
    issue will often give you some information about that issue’s potential exploitability.
    For example, clicking the MS08-067 vulnerability in the output ([Figure 6-12](ch06.xhtml#ms08-067_nessus_entry_provides_detailed
    "Figure 6-12. The MS08-067 Nessus entry provides detailed information.")) shows
    exploit code available for this vulnerability in Metasploit as well as other tools
    such as Core Impact and Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![The MS08-067 Nessus entry provides detailed information.](httpatomoreillycomsourcenostarchimages2030344.png.jpg)Figure 6-12. The
    MS08-067 Nessus entry provides detailed information.'
  prefs: []
  type: TYPE_NORMAL
- en: A Note About Nessus Rankings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nessus ranks vulnerabilities based on the Common Vulnerability Scoring System
    (CVSS), version 2, from the National Institute of Standards and Technology (NIST).
    Ranking is calculated based on the impact to the system if the issue is exploited.
    Though the higher the vulnerability ranking, the more serious Nessus thinks the
    vulnerability issue is, the actual risk of a vulnerability depends on the environment.
    For example, Nessus ranks anonymous FTP access as a medium-risk vulnerability.
    When restricted to nonsensitive files, however, anonymous FTP access can have
    a low to nonexistent risk. On the other hand, it isn’t unheard of for companies
    to leave copies of their proprietary source code lying around on a publicly available
    FTP server. If on an external pentesting engagement you can access the client’s
    biggest asset by logging in as *anonymous* on an FTP server, it’s safe to assume
    that any interested attacker can do the same, and this warrants an immediate call
    to your client contact. Tools are not capable of making this sort of distinction.
    For that you need a pentester.
  prefs: []
  type: TYPE_NORMAL
- en: Why Use Vulnerability Scanners?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Though some penetration testing courses leave out vulnerability scanning altogether
    and argue that a skilled pentester can find everything a scanner can, scanners
    are still valuable tools, especially because many pentests are performed within
    a shorter time window than anyone might like. But if one of the goals of your
    assessment is to avoid detection, you might think twice about using a loud vulnerability
    scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Though Nessus did not find every issue in our environment, its use, combined
    with the results of our information-gathering phase, has given us a solid starting
    point for exploitation. Even those pentesters who think that a pentester should
    replace a scanner during an engagement can benefit from knowing how to use scanning
    tools. Though in an ideal world, every company would perform regular, no-holds-barred
    pentests, in reality, there is plenty of vulnerability scanning work to go around.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting Nessus Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once a Nessus scan finishes, you can export its findings from the Export button
    at the top of the scan details screen, as shown in [Figure 6-13](ch06.xhtml#exporting_nessus_scan_results
    "Figure 6-13. Exporting Nessus scan results").
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting Nessus scan results](httpatomoreillycomsourcenostarchimages2030346.png.jpg)Figure 6-13. Exporting
    Nessus scan results'
  prefs: []
  type: TYPE_NORMAL
- en: Nessus can output results into PDF, HTML, XML, CSV, and other formats. You may
    want to hand off the raw results to your client for a vulnerability scanning engagement,
    but you should never export scanner results, slap your company letterhead on them,
    and call them pentest results. Much more analysis is involved in a penetration
    test than a vulnerability scan. You should always verify results from automated
    scanners and combine them with manual analysis to get a more complete picture
    of the vulnerabilities in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now for a look at some other methods of vulnerability analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Researching Vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the Nessus summary page doesn’t give you enough information about a vulnerability,
    try a good old-fashioned Google search. Additionally, try searching *[http://www.securityfocus.com/](http://www.securityfocus.com/)*,
    *[http://www.packetstormsecurity.org/](http://www.packetstormsecurity.org/)*,
    *[http://www.exploit-db.org/](http://www.exploit-db.org/)*, and *[http://www.cve.mitre.org/](http://www.cve.mitre.org/)*.
    For -example, you can search for vulnerabilities using the Common Vulnerabilities
    and Exposures (CVE) system, Microsoft patch number, and so on within a specific
    site using a Google query such as “ms08-067 site:securityfocus.com”. The MS08-067
    vulnerability received a lot of attention, so you’ll find no shortage of good
    information. (We looked at the details of this particular issue in [Chapter 4](ch04.xhtml
    "Chapter 4. Using the Metasploit Framework").)
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your subject vulnerability, you may be able to find proof-of-concept
    exploit code online as well. We’ll look at working with public code in [Chapter 19](ch19.xhtml
    "Chapter 19. Fuzzing, Porting Exploits, and Metasploit Modules"), but be warned
    that unlike the community-vetted exploits in a project such as Metasploit, not
    all code on the Internet does what it claims. The payload in a public exploit
    may destroy the target machine, or it may join your machine to the exploit author’s
    secret botnet. Be vigilant when working with public exploits, and carefully vet
    them before running them against a production network. (You may also be able to
    find in-depth information about some vulnerabilities posted by the researchers
    who originally found the issue.)
  prefs: []
  type: TYPE_NORMAL
- en: The Nmap Scripting Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now for another tool that provides vulnerability scanning. Just as Metasploit
    evolved from an exploitation framework into a fully fledged penetration-testing
    suite with hundreds of modules, Nmap has similarly evolved beyond its original
    goal of port scanning. The Nmap Scripting Engine (NSE) lets you run publicly available
    scripts and write your own.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find the scripts packaged with the NSE in Kali at */usr/share/nmap/scripts*.
    The available scripts fall into several categories, including information gathering,
    active vulnerability assessment, searches for signs of previous compromises, and
    so on. [Example 6-1](ch06.xhtml#nmap_scripts_list "Example 6-1. Nmap scripts list")
    shows NSE scripts available in your default Kali installation.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1. Nmap scripts list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To get more information about a particular script or category of scripts, enter
    the `--script-help` flag in Nmap. For example, to see all scripts in the *default*
    category enter **`nmap --script-help default`**, as shown in [Example 6-2](ch06.xhtml#nmap_default_scripts_help
    "Example 6-2. Nmap default scripts help"). Many factors contribute to whether
    a script is included in the default category, including its reliability and whether
    the script is safe and unlikely to harm the target.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-2. Nmap default scripts help
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you use the `-sC` flag to tell Nmap to run a script scan in addition to port
    scanning, it will run all the scripts in the *default* category, as shown in [Example 6-3](ch06.xhtml#nmap_default_scripts_output
    "Example 6-3. Nmap default scripts output").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-3. Nmap default scripts output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the Nmap Scripting Engine found a good deal of interesting information.
    For example, we see that the SMTP server on port 25 of the Windows XP target allows
    the use of the `VRFY` ❶ command, which allows us to see if a username exists on
    the mail server. If we have a valid username, use of this command will make credential-guessing
    attacks much more likely to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that the web server on port 80 appears to be an XAMPP 1.7.2
    install ❷. As of this writing, the current stable version of XAMPP for Windows
    is 1.8.3\. At the very least, the version we found is out of date, and it may
    also be subject to security issues.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to showing us potential vulnerabilities, NSE also allows us to rule
    out some services. For example, we can see that the MySQL server on port 3306
    does not allow us to connect because our IP address is not authorized ❸. We may
    want to return to this port during post exploitation if we are able to compromise
    other hosts in the environment, but for now we can rule out MySQL vulnerabilities
    on this host.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Single NSE Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we move on, let’s look at another example of using an NSE script, this
    time one that is not part of the default set. From our basic use of Nmap in the
    previous chapter, we know that our Linux target is running Network File System
    (NFS). NFS allows client computers to access local files over the network, but
    in your pentesting career, you may find that setting up NFS securely is easier
    said than done. Many users don’t think about the security consequences of giving
    remote users access to their files. What’s the worst that can happen, right? Who
    cares if I share my home directory with my coworkers?
  prefs: []
  type: TYPE_NORMAL
- en: The NSE script *nfs-ls.nse* will connect to NFS and audit shares. We can see
    more information about an individual script with the `--script-help` command,
    as shown in [Example 6-4](ch06.xhtml#nmap_nfs-ls_script_details "Example 6-4. Nmap
    NFS-LS script details").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-4. Nmap NFS-LS script details
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This script mounts the remote shares, audits their permissions, and lists the
    files included in the share. To run a script against our Linux target, we call
    it using the `--script` option and the script name, as shown in [Example 6-5](ch06.xhtml#nmap_nfs-ls_scripts_output
    "Example 6-5. Nmap NFS-LS scripts output").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-5. Nmap NFS-LS scripts output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the NSE script found the NFS share */export/georgia* ❶ on our
    Linux target. Of particular interest is the *.ssh* directory ❷, which may include
    sensitive information such as SSH keys and (if public key authentication is allowed
    on the SSH server) a list of authorized keys.
  prefs: []
  type: TYPE_NORMAL
- en: When you run into an access-control mistake like this, one common pen-test trick
    is to use the mistake and the write permission to add a new SSH key to the *authorized_keys*
    list (in this case, ours). If that attempt succeeds, suddenly the seemingly minor
    issue of being able to edit a user’s documents turns into the ability to log in
    to the remote system and execute commands.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on, let’s ensure that public key SSH authentication is enabled
    on our Linux target, allowing the attack we envisioned above to work successfully.
    Key-based login is considered the strongest form of SSH authentication and is
    recommended for security. A quick SSH attempt to our Linux target shows that public
    key authentication is allowed here ❶ (see [Example 6-6](ch06.xhtml#ssh_authentication_methods
    "Example 6-6. SSH authentication methods")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-6. SSH authentication methods
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some NSE scripts may crash services or harm the target system, and an entire
    category is dedicated to denial of service. For example, the script *smb-check-vulns*
    will check for the MS08-067 vulnerability and other SMB vulnerabilities. Its help
    information notes that this script is likely dangerous and shouldn’t be run on
    production systems unless you are prepared for the server to go down.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Scanner Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit, which we used in [Chapter 4](ch04.xhtml "Chapter 4. Using the Metasploit
    Framework"), also can conduct vulnerability scanning via numerous auxiliary modules.
    Unlike exploits, these modules will not give us control of the target machine,
    but they will help us identify vulnerabilities for later exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: One such Metasploit module looks for FTP services that provide anonymous access.
    Although it may be easy enough to attempt to log in manually to individual FTP
    servers, Metasploit auxiliary modules let us scan many hosts at once, which will
    save time when you’re testing a large environment.
  prefs: []
  type: TYPE_NORMAL
- en: To choose a particular module, we `use` the module, then we define our targets
    with `set`, and then scan with the `exploit` command, as shown in [Example 6-7](ch06.xhtml#metasploit_anonymous_ftp_scanner_module
    "Example 6-7. Metasploit anonymous FTP scanner module"). This syntax should be
    familiar from [Chapter 4](ch04.xhtml "Chapter 4. Using the Metasploit Framework").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-7. Metasploit anonymous FTP scanner module
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: At ❶, we find that both the Windows XP and Linux targets have anonymous FTP
    enabled. We know this may or may not be a serious issue, based on the files that
    are available to the anonymous user in the FTP folder. I’ve been on engagements
    where company trade secrets were sitting on an Internet-facing FTP server. On
    the other hand, I’ve also been on engagements where the use of anonymous FTP was
    justified from a business perspective, and no sensitive files were present. It
    is up to a pentester to fill in the information an automated scanner lacks as
    to the severity of an issue in a particular environment.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Exploit Check Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some Metasploit exploits include a `check` function that connects to a target
    to see if it is vulnerable, rather than attempting to exploit a vulnerability.
    We can use this command as a kind of ad hoc vulnerability scan, as shown in [Example 6-8](ch06.xhtml#ms08-067_check_function
    "Example 6-8. MS08-067 check function"). (There’s no need to specify a payload
    when running `check` because no exploitation will take place.)
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-8. MS08-067 check function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When we run the vulnerability `check` ❶, Metasploit tells us that our Windows
    XP target is vulnerable to the MS08-067 vulnerability ❷, as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, not all Metasploit modules have `check` functions. (If you try
    running `check` on a module that doesn’t support it, Metasploit will tell you.)
    For example, based on the results of our Nmap version scan in the previous chapter,
    the Windows XP target mail server appears to be out of date and subject to security
    issues. SLMail version 5.5.0.4433 has a known exploitable issue—CVE-2003-0264—so
    we can find it easily with a quick search in Msfconsole for *cve:2003-0264*.
  prefs: []
  type: TYPE_NORMAL
- en: Once in the context of the module, we can test out `check`, as shown in [Example 6-9](ch06.xhtml#slmail_module_has_no_check_functiondot
    "Example 6-9. The SLMail module has no check function.").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-9. The SLMail module has no check function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As it turns out, this exploit module does not implement the `check` function,
    so we don’t have solid assurance that a service is vulnerable. Although our SLMail
    POP3 server appears to be vulnerable based on its banner version number, we can’t
    get confirmation from Metasploit. In cases like these, we may not be able to know
    for sure if a vulnerability exists short of running an exploit.
  prefs: []
  type: TYPE_NORMAL
- en: Web Application Scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although a client’s custom-built apps may have security problems, your target
    may also deploy prebuilt web applications such as payroll apps, webmail, and so
    on, which can be vulnerable to the same issues. If we can find an instance of
    known vulnerable software, we may be able to exploit it to get a foothold in a
    remote system.
  prefs: []
  type: TYPE_NORMAL
- en: Web application issues are particularly interesting on many external penetration
    tests where your attack surface may be limited to little more than web servers.
    For example, as you can see in [Figure 6-14](ch06.xhtml#default_apache_page "Figure 6-14. Default
    Apache page"), browsing to the default web page of the web server on our Linux
    target reveals a default Apache install page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Default Apache page](httpatomoreillycomsourcenostarchimages2030348.png.jpg)Figure 6-14. Default
    Apache page'
  prefs: []
  type: TYPE_NORMAL
- en: Unless we can find a vulnerability in the underlying web server software, we’ll
    have a hard time exploiting a simple page that reads “It works!” Before we write
    this service off, though, let’s use a web scanner to look for additional pages
    that we might not see otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nikto is a web application vulnerability scanner built into Kali that’s like
    Nessus for web apps: It looks for issues such as dangerous files, outdated versions,
    and misconfigurations. To run Nikto against our Linux target, we tell it which
    host to scan with the `-h` flag, as shown in [Example 6-10](ch06.xhtml#running_nikto
    "Example 6-10. Running Nikto").'
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-10. Running Nikto
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Manually browsing to the default installation path for every application with
    known vulnerabilities would be a daunting task, but fortunately, Nikto seeks out
    URLs that may not be apparent. One particularly interesting finding here is a
    vulnerable installation of the TikiWiki software ❶ on the server. Sure enough,
    if we browse to the TikiWiki directory at *[http://192.168.20.11/tikiwiki/](http://192.168.20.11/tikiwiki/)*,
    we find the CMS software. Nikto thinks that this install is subject to a code
    execution vulnerability, and further analysis of Open Sourced Vulnerability Database
    (OSVDB) entry 40478 reveals that this issue has a Metasploit exploit that we can
    use during exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OSVDB (*[http://osvdb.com/](http://osvdb.com/)*) is a vulnerability repository
    specifically for open source software such as TikiWiki, with detailed information
    on a wide variety of products. Use it to search for additional information about
    possible issues you find.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking XAMPP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Browsing to our Windows XP web server, we see at *http://192.168.20.10/* that
    the default web page announces itself as XAMPP 1.7.2.
  prefs: []
  type: TYPE_NORMAL
- en: By default, XAMPP installations include phpMyAdmin, a database administration
    web application. Ideally, phpMyAdmin would not be available over the network,
    or at least it should require credentials to access it. But on this version of
    XAMPP, the phpMyAdmin install at *[http://192.168.20.10/phpmyadmin/](http://192.168.20.10/phpmyadmin/)*
    is available and open. Even worse, phpMyAdmin gives us root access on the same
    MySQL server that NSE told us we are unable to connect to. Using phpMyAdmin (as
    shown in [Figure 6-15](ch06.xhtml#open_phpmyadmin_console_complains_quite "Figure 6-15. The
    open phpMyAdmin console complains quite loudly about the poor configuration.")),
    we can bypass this restriction and perform MySQL queries on the server.
  prefs: []
  type: TYPE_NORMAL
- en: '![The open phpMyAdmin console complains quite loudly about the poor configuration.](httpatomoreillycomsourcenostarchimages2030350.png.jpg)Figure 6-15. The
    open phpMyAdmin console complains quite loudly about the poor configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: Default Credentials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to its inclusion of phpMyAdmin, a Google search tells us that XAMPP
    1.7.3 and earlier come with Web Distributed Authoring and Versioning (WebDAV)
    software, which is used to manage files on a web server over HTTP. XAMPP’s WebDAV
    installation comes with the default username and password *wampp:xampp*. If these
    values aren’t changed, anyone with access to WebDAV can log in, deface the website,
    and even possibly upload scripts that will allow attackers to get a foothold on
    the system through the web server. And, as you can see in [Figure 6-16](ch06.xhtml#webdav_install
    "Figure 6-16. WebDAV install"), WebDAV is indeed present on this server.
  prefs: []
  type: TYPE_NORMAL
- en: '![WebDAV install](httpatomoreillycomsourcenostarchimages2030352.png.jpg)Figure 6-16. WebDAV
    install'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the tool Cadaver to interact with WebDAV servers. In [Example 6-11](ch06.xhtml#using_cadaver
    "Example 6-11. Using Cadaver"), we use Cadaver to try to connect to the WebDAV
    server at *http://192.168.20.10* and test the default credential set.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-11. Using Cadaver
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Cadaver login is successful ❶. Our Windows XP target uses the default credentials
    for WebDAV, which we will be able to exploit. Now that we have access to WebDAV,
    we can upload files to the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Manual Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, no solution will work nearly as well as manual vulnerability analysis
    to see if a service will lead to a compromise, and there’s no better way to improve
    than practice. In the sections that follow we’ll explore some promising leads
    from our port and vulnerability scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring a Strange Port
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One port that has failed to come up in our automated scans is 3232 on our Windows
    target. If you try scanning this port with an Nmap version scan (as we did at
    the end of [Chapter 5](ch05.xhtml "Chapter 5. Information Gathering")), you’ll
    notice that it crashes. This behavior suggests that the listening program is designed
    to listen for a particular input and that it has difficulty processing anything
    else.
  prefs: []
  type: TYPE_NORMAL
- en: This sort of behavior is interesting to pentesters, because programs that crash
    when handling malformed input aren’t validating input properly. Recall from [Chapter 5](ch05.xhtml
    "Chapter 5. Information Gathering") that in the process of crashing the program,
    the output led us to believe that the software is a web server. Connecting to
    the port with a browser, as shown in [Figure 6-17](ch06.xhtml#web_server_on_port_3232
    "Figure 6-17. Web server on port 3232"), confirms this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Web server on port 3232](httpatomoreillycomsourcenostarchimages2030354.png.jpg)Figure 6-17. Web
    server on port 3232'
  prefs: []
  type: TYPE_NORMAL
- en: The web page served doesn’t tell us much, but from here we can connect to the
    port manually using Netcat. We know this is a web server, so we will talk to it
    as such. We know we can browse to the default web page, so we can enter **`GET
    / HTTP/1.1`** to ask the web server for the default page (see [Example 6-12](ch06.xhtml#connecting_to_a_port_with_netcat
    "Example 6-12. Connecting to a port with Netcat")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-12. Connecting to a port with Netcat
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The server announces itself as Zervit 0.4 ❶. It doesn’t look good for the software
    because the first autocomplete entry in a search for Zervit 0.4 on Google is “Zervit
    0.4 exploit.” This web server software is subject to multiple security issues,
    including a buffer overflow and a local file inclusion vulnerability, which allows
    us to serve other files on the system. This service is so sensitive that it may
    be best to avoid buffer overflow attacks, because one false move will crash it.
    The local file inclusion, on the other hand, looks promising. We know the server
    can process HTTP `GET` requests. For example, we can download Windows XP’s *boot.ini*
    file by moving back five directories to the C drive using `GET`, as shown in [Example 6-13](ch06.xhtml#local_file_inclusion_in_zervit_0dot4
    "Example 6-13. Local file inclusion in Zervit 0.4").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-13. Local file inclusion in Zervit 0.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We’re able to pull down *boot.ini*, a config file that tells Windows which operating
    system options to display at boot time. We’ll use this local file inclusion to
    pull down additional sensitive files in [Chapter 8](ch08.xhtml "Chapter 8. Exploitation").
  prefs: []
  type: TYPE_NORMAL
- en: Finding Valid Usernames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can drastically increase our chances of a successful password attack if we
    know valid usernames for services. (We’ll explore this in more detail in [Chapter 9](ch09.xhtml
    "Chapter 9. Password Attacks").) One way to find valid usernames for mail servers
    is to use the `VRFY SMTP` command, if it is available. As the name implies, `VRFY`
    verifies if a user exists. NSE found the `VRFY` verb is enabled on the Windows
    XP target in the previous chapter. Connect to TCP port 25 using Netcat, and use
    `VRFY` to check for usernames, as shown in [Example 6-14](ch06.xhtml#using_the_smtp_vrfy_command
    "Example 6-14. Using the SMTP VRFY command").
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-14. Using the `SMTP VRFY` command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using `VRFY` we see that *georgia* is a valid username, but there is no user
    called *john*. We will look at using valid usernames to try to guess passwords
    in [Chapter 9](ch09.xhtml "Chapter 9. Password Attacks").
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have touched on various methods to find exploitable vulnerabilities
    on our targets. Using a variety of tools and techniques, we were able to find
    myriad ways to go after our targets, including our trusty MS08-067 exploit against
    our Windows XP SMB server and a local file inclusion vulnerability on the Zervit
    0.4 web server that will allow us to download system files. Using `VRFY`, we found
    a valid username that we can use in password-guessing attacks on the mail server.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that the SLMail server may have a vulnerability in the POP3 service
    based on its reported version number (though we were not able to find out for
    sure), and we found an open phpMyAdmin install on the web server that gives us
    root access to the underlying database, as well as an XAMPP install with default
    credentials for WebDAV that will allow us to upload files to the web server. On
    the Linux target, we found an NFS share with write access that allows us to write
    to a user’s *.ssh* directory, and we discovered a not-readily-apparent TikiWiki
    install on the web server that appears to contain a code execution vulnerability.
    The Vsftpd 2.3.4 FTP server may have a hidden backdoor due to a compromise of
    the Vsftpd repositories.
  prefs: []
  type: TYPE_NORMAL
- en: At this point in the book we can see that our Windows XP and Linux target machines
    suffer from a lot of issues. The lack of attack surface on our Windows 7 target
    makes it seem pretty safe, but as we will see a bit later, that solid exterior
    hides a few holes underneath. Before we move on to exploiting these vulnerabilities,
    the next chapter will look at capturing traffic to gain sensitive information
    such as login credentials.
  prefs: []
  type: TYPE_NORMAL
