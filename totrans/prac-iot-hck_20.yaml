- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Hacking the Smart Home
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客攻击智能家居
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Common devices found in almost any modern home, such as TVs, refrigerators,
    coffee machines, HVAC systems, and even fitness equipment are now connected to
    each other and are capable of offering more services to users than ever before.
    You can set your desired home temperature while you’re driving, receive a notification
    when your washing machine has finished a load, turn on the lights and open window
    blinds automatically when you arrive home, or even have your TV stream a show
    directly to your phone.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎在任何现代家庭中常见的设备，如电视、冰箱、咖啡机、空调系统，甚至健身设备，现在都可以互相连接，并能够为用户提供比以往更多的服务。你可以在开车时设置理想的家居温度，收到洗衣机完成洗涤任务的通知，或者在回家时自动开灯和打开窗帘，甚至可以让电视直接将节目流式传输到手机上。
- en: At the same time, more and more businesses are equipped with similar devices,
    not just in meeting rooms, kitchens, or lounges. Many offices use IoT devices
    as part of critical systems, such as office alarms, security cameras, and door
    locks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，越来越多的企业也配备了类似的设备，不仅仅是在会议室、厨房或休息室。许多办公室将物联网设备作为关键系统的一部分，如办公室报警器、安全摄像头和门锁。
- en: In this chapter, we perform three separate attacks to show how hackers can tamper
    with popular IoT devices used in modern smart homes and businesses. These demonstrations
    build on techniques we discussed throughout the book, so they should animate some
    of what you learned in earlier chapters. First, we show you how to gain physical
    entry to a building by cloning a smart lock card and disabling an alarm system.
    Next, we retrieve and stream footage from an IP security camera. Then we describe
    an attack to gain control of a smart treadmill and cause potentially life-threatening
    injuries.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将进行三种不同的攻击，展示黑客如何篡改现代智能家居和企业中常用的物联网设备。这些演示建立在全书中讨论的技术之上，因此它们应该能够帮助你更好地理解前面章节的内容。首先，我们展示如何通过克隆智能锁卡和禁用报警系统获得进入建筑物的权限。接着，我们提取并播放
    IP 安全摄像头的录像。然后，我们描述一种攻击，目的是控制智能跑步机并造成可能致命的伤害。
- en: Gaining Physical Entry to a Building
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获得物理进入建筑物的权限
- en: Smart home security systems are undoubtedly a potential target for adversaries
    who want to gain access to a victim’s premises. Modern security systems are usually
    equipped with a touch keypad, a number of wireless door and window access sensors,
    motion radars, and an alarm base station with cellular and battery backup. The
    *base station*, which is the core of the whole system, handles all the identified
    security events. It’s internet connected and able to deliver emails and push notifications
    to the user’s mobile device. In addition, it’s often highly integrated with smart
    home assistants, such as Google Home and Amazon Echo. Many of these systems even
    support expansion kits that include face-tracking cameras with facial recognition
    capabilities, RFID-enabled smart door locks, smoke detectors, carbon monoxide
    detectors, and water leak sensors.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 智能家居安全系统无疑是那些试图进入受害者住所的对手潜在目标。现代安全系统通常配备触摸键盘、多个无线门窗传感器、运动雷达以及具有蜂窝网络和电池备份的报警基站。*基站*是整个系统的核心，处理所有识别到的安全事件。它通过互联网连接，能够向用户的移动设备发送电子邮件和推送通知。此外，它通常与智能家居助手高度集成，如
    Google Home 和 Amazon Echo。许多系统甚至支持扩展套件，包括面部追踪摄像头（具有人脸识别功能）、支持 RFID 的智能门锁、烟雾探测器、一氧化碳探测器和水漏传感器。
- en: In this section, we’ll use techniques introduced in Chapter 10 to identify the
    RFID card used to unlock the apartment door’s smart lock, retrieve the key that
    protects the card, and clone the card to gain access to the apartment. Then we’ll
    identify the frequency that the wireless alarm system is using and try to interfere
    with its communication channels.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用第 10 章介绍的技术，识别用于解锁公寓门智能锁的 RFID 卡，提取保护该卡的密钥，并克隆该卡以获得进入公寓的权限。接着，我们将识别无线报警系统使用的频率，并尝试干扰其通信频道。
- en: Cloning a Keylock System’s RFID Tag
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆钥匙锁系统的 RFID 标签
- en: To gain physical access to a smart home, you first have to circumvent the smart
    door lock. These systems are mounted on the inside of existing door locks and
    come with an integrated 125 kHz/13.56 MHz proximity reader that allows users to
    pair key fobs and RFID cards. They can automatically unlock the door when you
    come home and securely lock it again when you leave.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得智能家居的物理访问权限，首先必须绕过智能门锁。这些系统安装在现有门锁的内部，并配有集成的125 kHz/13.56 MHz接近读卡器，允许用户配对钥匙扣和RFID卡。当你回家时，它们可以自动解锁门，并在你离开时安全地再次锁上门。
- en: In this section, we’ll use a Proxmark3 device, introduced in Chapter 10, to
    clone a victim’s RFID card and unlock their apartment door. You can find instructions
    on how to install and configure the Proxmark3 device in that chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Proxmark3设备（在第10章中介绍）来克隆受害者的RFID卡并解锁他们的公寓门。你可以在该章节中找到如何安装和配置Proxmark3设备的说明。
- en: In this scenario, let’s imagine we can get close to the victim’s RFID card.
    We need to be near the wallet in which the victim stores the RFID card for only
    a few seconds.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，假设我们能够接近受害者的RFID卡。我们只需要在受害者存放RFID卡的钱包旁停留几秒钟。
- en: Identifying the Kind of RFID Card Used
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 识别使用的RFID卡类型
- en: First, we must identify the type of RFID card the door lock is using by scanning
    the victim’s card using Proxmark3’s `hf` search command.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须通过使用Proxmark3的`hf`搜索命令扫描受害者的卡片来识别门锁使用的RFID卡类型。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Proxmark3 tool detects the existence of a MIFARE Classic 1KB card 1. The
    output also tests for a number of known card weaknesses that might allow us to
    interfere with the RFID card. Notably, we see that its *pseudorandom number generator**(PRNG)*
    is marked as weak 2. The PRNG implements the RFID card’s authentication control
    and protects the data exchange between the RFID card and the RFID reader.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmark3工具检测到存在MIFARE Classic 1KB卡片1。输出还测试了多个已知的卡片弱点，这些弱点可能允许我们干扰RFID卡。特别地，我们看到它的*伪随机数生成器（PRNG）*被标记为薄弱2。PRNG实现了RFID卡的身份验证控制，并保护RFID卡与RFID读卡器之间的数据交换。
- en: Performing a Darkside Attack to Retrieve a Sector Key
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 执行Darkside攻击以获取扇区密钥
- en: We can leverage one of the detected weaknesses to identify the sector keys for
    this card. If we uncover the sector keys, we can entirely clone the data, and
    because the card contains all the information necessary for the door lock to identify
    the house owner, cloning the card allows adversaries to impersonate the victim.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用检测到的弱点之一来识别此卡的扇区密钥。如果我们揭示了扇区密钥，就能完全克隆数据，而且由于该卡包含门锁识别房主所需的所有信息，克隆卡片使得攻击者能够冒充受害者。
- en: As mentioned in Chapter 10, a card’s memory is divided into sectors, and to
    read the data of one sector, the card reader has to first authenticate using the
    corresponding sector key. The easiest attack that requires no previous knowledge
    regarding the card data is the Darkside attack. The *Darkside attack* uses a combination
    of a flaw in the card’s PRNG, a weak validation control, and a number of the card’s
    error responses to extract parts of a sector’s key. The PRNG provides weak random
    numbers; additionally, each time the card is powered up, the PRNG is reset to
    the initial state. As a result, if attackers pay close attention to timing, they
    can either predict the random number generated by the PRNG or even produce the
    desired random number at will.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如第10章所述，卡片的存储被划分为多个扇区，为了读取一个扇区的数据，卡片读卡器必须首先使用对应的扇区密钥进行身份验证。最简单的攻击方法是Darkside攻击，它不需要对卡片数据有任何先前了解。*Darkside攻击*利用了卡片的伪随机数生成器（PRNG）中的一个缺陷、一个薄弱的验证控制和卡片错误响应的一些组合来提取扇区密钥的部分内容。PRNG提供了弱随机数；此外，每次卡片通电时，PRNG都会重置为初始状态。因此，如果攻击者注意时序，他们可以预测PRNG生成的随机数，甚至可以随意生成所需的随机数。
- en: 'You can perform the Darkside attack by providing the `hf mf mifare` command
    in the Proxmark3 interactive shell:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在Proxmark3交互式终端中输入`hf mf mifare`命令来执行Darkside攻击：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should be able to recover the key for one sector in 1 to 25 seconds. The
    key we recovered is one of the default keys for this type of RFID card 1.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在1到25秒内恢复一个扇区的密钥。我们恢复的密钥是该类型RFID卡的默认密钥之一1。
- en: Performing a Nested Authentication Attack to Retrieve the Remaining Sector Keys
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 执行嵌套认证攻击以获取剩余的扇区密钥
- en: Once you know at least one sector key, you can perform a faster attack called
    nested authentication to retrieve the rest of the sector keys, which you need
    to clone the data in the rest of the sectors. A *nested authentication* attack
    allows you to authenticate to one sector and hence establish an encrypted communication
    with the card. A subsequent authentication request by the adversary for another
    sector will force the authentication algorithm to execute again. (We went over
    the details of this authentication algorithm in Chapter 10.) But this time, the
    card will generate and send a challenge, which an attacker can predict as a result
    of the PRNG vulnerability. The challenge will be encrypted with the corresponding
    sector’s key. Then a number of bits will be added to this value to reach a certain
    parity. If you know the predictable challenge with its parity bits and its encrypted
    form, you can infer parts of the sector’s key.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦知道至少一个扇区密钥，就可以执行一个更快的攻击，称为嵌套认证，以获取其余的扇区密钥，这些密钥是克隆其余扇区数据所需的。*嵌套认证*攻击允许您对一个扇区进行认证，从而与卡片建立加密通信。随后，攻击者对另一个扇区的认证请求将迫使认证算法再次执行。（我们在第10章中详细讲解了这一认证算法的细节。）但这一次，卡片将生成并发送一个挑战，攻击者可以根据PRNG漏洞预测这个挑战。该挑战将使用相应扇区的密钥进行加密。然后，系统会向该值添加一些位以达到特定的奇偶校验。如果您知道带有奇偶校验位的可预测挑战及其加密形式，就可以推断出扇区密钥的部分内容。
- en: 'You can perform this attack using the `hf mf nested` command, followed by a
    number of parameters:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`hf mf nested`命令执行此攻击，后面跟着若干参数：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first parameter specifies the card memory (because it’s 1KB, we use the
    value `1`); the second parameter specifies the sector number for which the key
    is known; the third parameter defines the key type of the known key (either `A`
    or `B` in a MIFARE card); the fourth parameter is the previously extracted key;
    and the `t` parameter asks to transfer the keys into the Proxmark3 memory. When
    the execution finishes, you should see a matrix with the two key types for each
    sector.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数指定卡片内存（因为它是1KB，我们使用值`1`）；第二个参数指定已知密钥的扇区号；第三个参数定义已知密钥的类型（MIFARE卡中的`A`或`B`）；第四个参数是先前提取的密钥；`t`参数要求将密钥传输到Proxmark3内存中。执行完成后，您应该会看到一个矩阵，显示每个扇区的两种密钥类型。
- en: Loading the Tag into Memory
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将标签加载到内存
- en: 'Now it’s possible to load the tag into the Proxmark3 emulator’s memory using
    the `hf mf ecfill` command. The `A` parameter specifies, again, that the tool
    should use the authentication key type `A (0x60)`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用`hf mf ecfill`命令将标签加载到Proxmark3仿真器的内存中。`A`参数再次指定工具应使用认证密钥类型`A (0x60)`：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Testing the Cloned Card
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试克隆卡
- en: Next, you can approach the door lock and emulate the cloned tag by reading and
    writing the contents stored in the Proxmark3 memory using the `hf mf sim` command.
    There’s no need to write the contents to a new card, because Proxmark3 can mimic
    the RFID card.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以接近门锁，并通过使用`hf mf sim`命令读取和写入Proxmark3内存中存储的内容来模拟克隆的标签。无需将内容写入新卡，因为Proxmark3可以模拟RFID卡。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that not all MIFARE Classic cards are vulnerable to these two attacks.
    For attacks against other types of RFID cards and fobs, see the techniques discussed
    in Chapter 10\. For simpler key fobs that don’t enforce an authentication algorithm,
    you can also use cheap key fob duplicators, such as Keysy from TINYLABS. Explore
    the supported key fob models on its website at [https://tinylabs.io/keysy/keysy-compatibility/](https://tinylabs.io/keysy/keysy-compatibility/)*.*
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有MIFARE Classic卡都容易受到这两种攻击的影响。有关针对其他类型RFID卡和钥匙扣的攻击，请参见第10章中讨论的技术。对于不强制实施认证算法的简单钥匙扣，您也可以使用便宜的钥匙扣复制器，例如TINYLABS的Keysy。可以在其网站[https://tinylabs.io/keysy/keysy-compatibility/](https://tinylabs.io/keysy/keysy-compatibility/)上查看支持的钥匙扣型号。
- en: Jamming the Wireless Alarm
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 干扰无线报警
- en: The Darkside attack allowed you to easily gain entry to the victim’s premises.
    But the apartment might also be equipped with an alarm system that can detect
    a security breach and activate a fairly loud warning through its embedded siren.
    Also, it can rapidly inform the victims about the breach by sending a notification
    to their mobile phones. Even if you’ve circumvented the door lock, opening the
    door will cause a wireless door access sensor to trigger this alarm system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Darkside攻击使你能够轻松进入受害者的住所。但公寓可能也配有能够检测到安全漏洞并通过其内置警报器发出响亮警告的报警系统。此外，它还可以通过将通知发送到受害者的手机，快速通知他们安全漏洞。即使你已经绕过了门锁，打开门也会导致无线门禁传感器触发此报警系统。
- en: One way to overcome this challenge is to disrupt the communication channel between
    the wireless sensors and the alarm system base station. You can do this by jamming
    the radio signals that the sensors transmit to the alarm’s base. To perform a
    *jamming attack*, you’ll have to transmit radio signals in the same frequency
    that the sensors use, and as a result, decrease the communication channel’s *signal-to-noise
    ratio**(SNR)*. The SNR is a ratio of the power of the meaningful signal that reaches
    the base station from the sensors to the power of the background noise also reaching
    the base station. A decreased SNR ratio blocks the base station from hearing communications
    from the door access sensor.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 克服这一挑战的一种方法是干扰无线传感器与报警系统基站之间的通信通道。你可以通过干扰传感器向报警基站发送的无线信号来做到这一点。进行*干扰攻击*时，你必须在传感器使用的相同频率上发送无线信号，从而降低通信通道的*信噪比**(SNR)*。SNR是指从传感器到达基站的有意义信号的功率与同时到达基站的背景噪声的功率之间的比值。降低的SNR会阻止基站接收门禁传感器的通信。
- en: Monitoring the Alarm System’s Frequency
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 监控报警系统的频率
- en: In this section, we’ll set up a *software defined radio**(SDR)* using a low-cost
    RTL-SDR DVB-T dongle ([Figure 15-1](#figure15-1)). We’ll use it to listen to the
    frequency coming from the alarm so we can transmit signals of the same frequency
    later.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用低成本的RTL-SDR DVB-T加密狗([图15-1](#figure15-1))来设置一个*软件定义无线电**(SDR)*。我们将使用它监听来自警报的频率，以便稍后可以传输相同频率的信号。
- en: '![f15001](Images/f15001.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![f15001](Images/f15001.png)'
- en: 'Figure 15-1: A cheap RTL-SDR DVB-T dongle and an alarm system with a wireless
    door access sensor'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-1：廉价的RTL-SDR DVB-T加密狗和配有无线门禁传感器的报警系统
- en: 'To replicate this experiment, you can use most DVB-T dongles equipped with
    a *Realtek RTL2832U* chipset. The driver for the RTL2832U is preinstalled in Kali
    Linux. Enter the following command to verify that your system detects the DVB-T
    dongle:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制此实验，你可以使用大多数配备*Realtek RTL2832U*芯片组的DVB-T加密狗。RTL2832U的驱动程序已预安装在Kali Linux中。输入以下命令以验证系统是否检测到DVB-T加密狗：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To convert the radio spectrum into a digital stream that we can analyze, we
    need to download and execute the CubicSDR binary ([https://github.com/cjcliffe/CubicSDR/releases/](https://github.com/cjcliffe/CubicSDR/releases/)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将无线电频谱转换成我们可以分析的数字流，我们需要下载并执行CubicSDR二进制文件([https://github.com/cjcliffe/CubicSDR/releases/](https://github.com/cjcliffe/CubicSDR/releases/))。
- en: 'Most wireless alarm systems use one of the few unlicensed frequency bands,
    such as the 433 MHz band. Let’s start by monitoring the frequency at 433 MHz when
    the victim opens or closes a door that is equipped with a wireless access sensor.
    To do this, use the `chmod` utility, which is preinstalled in Linux platforms,
    followed by the `+x` parameter to make the binary executable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数无线报警系统使用几个无许可证的频段之一，如433 MHz频段。我们从监控433 MHz频率开始，当受害者打开或关闭一个配有无线门禁传感器的门时。为此，请使用Linux平台上预安装的`chmod`工具，后跟`+x`参数，使二进制文件可执行：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the binary using the following command; the CubicSDR interface should appear:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行二进制文件；CubicSDR界面应会出现：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The application should list the detected devices that you can use. Select the
    RTL2932U device and click **Start**, as shown in[Figure 15-2](#figure15-2).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应列出你可以使用的已检测设备。选择RTL2932U设备并点击**开始**，如[图15-2](#figure15-2)所示。
- en: '![f15002](Images/f15002.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![f15002](Images/f15002.png)'
- en: 'Figure 15-2: CubicSDR device selection'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-2：CubicSDR设备选择
- en: To select a frequency, move the mouse pointer over the value listed in the**Set
    Center Frequency** boxand press the spacebar. Then enter the value **433MHz**,
    as shown in [Figure 15-3](#figure15-3).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择频率，将鼠标指针移动到**设置中心频率**框中列出的值上，然后按空格键。接着输入值**433MHz**，如[图15-3](#figure15-3)所示。
- en: '![f15003](Images/f15003.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f15003](Images/f15003.png)'
- en: 'Figure 15-3: CubicSDR Frequency selection'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-3：CubicSDR频率选择
- en: You can view the frequency in CubicSDR, as shown in [Figure 15-4](#figure15-4).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在CubicSDR中查看频率，如[图15-4](#figure15-4)所示。
- en: '![f15004](Images/f15004.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![f15004](Images/f15004.png)'
- en: 'Figure 15-4: The CubicSDR listening at 433 MHz'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-4：CubicSDR监听433 MHz
- en: Every time the victim opens or closes the door, you should see a little green
    peak in the diagram. Stronger peaks will appear in yellow or red, indicating the
    exact frequency that the sensor is transmitting.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每次受害者开关门时，你应该在图表中看到一个小的绿色峰值。更强的峰值将以黄色或红色显示，表示传感器正在传输的准确频率。
- en: Transmitting a Signal at the Same Frequency Using the Raspberry Pi
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi在相同频率下发送信号
- en: Using the open source *Rpitx* software, you can transform a Raspberry Pi into
    a simple radio transmitter that can handle frequencies from 5 kHz to 1,500 MHz.
    The Raspberry Pi is a low-cost, single-board computer that is useful for many
    projects. Any Raspberry Pi model running a lite Raspbian operating system installation,
    except for the Raspberry Pi B, can currently support Rpitx.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开源的*Rpitx*软件，你可以将Raspberry Pi转变为一个简单的无线电发射器，可以处理从5 kHz到1,500 MHz的频率。Raspberry
    Pi是一款低成本的单板计算机，适用于许多项目。任何运行轻量版Raspbian操作系统安装的Raspberry Pi型号（除了Raspberry Pi B）目前都可以支持Rpitx。
- en: To install and run Rpitx, first connect a wire to the exposed GPIO 4 pin on
    the Raspberry Pi, as shown in [Figure 15-5](#figure15-5). You can use any commercial
    or custom wire for this purpose.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装并运行Rpitx，首先将一根线连接到Raspberry Pi的暴露GPIO 4引脚，如[图15-5](#figure15-5)所示。你可以使用任何商业或自定义的电线来实现这一点。
- en: '![f15005](Images/f15005.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![f15005](Images/f15005.png)'
- en: 'Figure 15-5: The Raspberry Pi GPIO 4 pin'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-5：Raspberry Pi GPIO 4引脚
- en: 'Use the `git` command to download the app from the remote repository. Then
    navigate to its folder and run the *install.sh* script:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`git`命令从远程仓库下载应用程序。然后导航到其文件夹并运行*install.sh*脚本：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now reboot the device. To start the transmission, use the `rpitx` command.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重启设备。要开始传输，使用`rpitx`命令。
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `-m` parameter defines the transmission mode. In this case, we set it to
    `VFO` to transmit a constant frequency. The `-f` parameter defines the frequency
    to output on the Raspberry Pi’s GPIO 4 pin in kilohertz.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`-m`参数定义传输模式。在此情况下，我们将其设置为`VFO`，以传输恒定频率。`-f`参数定义要在Raspberry Pi的GPIO 4引脚上输出的频率（单位：千赫）。'
- en: If you connect the Raspberry Pi to a monitor, you can use the Rpitx graphic
    user interface to tune the transmitter further, as shown in [Figure 15-6](#figure15-6).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将Raspberry Pi连接到显示器，你可以使用Rpitx图形用户界面进一步调节发射器，如[图15-6](#figure15-6)所示。
- en: '![f15006](Images/f15006.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f15006](Images/f15006.png)'
- en: 'Figure 15-6: Rpitx GUI transmitter options'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-6：Rpitx GUI发射器选项
- en: We can verify that the signal is transmitted at the correct frequency by making
    a new capture using the RTL-SDR DVB-T dongle. Now you can open the door without
    triggering the alarm.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用RTL-SDR DVB-T接收器进行新的捕获，验证信号是否以正确的频率传输。现在你可以开门而不会触发报警。
- en: If you’re using Rpitx version 2 or later, you could also record a signal directly
    from the RTL-SDR DVB-T dongle and replay it at the same frequency through the
    provided graphic user interface. In this case, you wouldn’t need to use CubicSDR.
    We leave this as an exercise for you to complete. You could try this feature against
    alarm systems that offer a remote controller for activating or deactivating the
    alarm.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Rpitx版本2或更高版本，你还可以直接从RTL-SDR DVB-T接收器录制信号，并通过提供的图形用户界面在相同频率下重放它。在这种情况下，你无需使用CubicSDR。我们将这个作为练习留给你完成。你可以尝试这个功能，针对那些提供遥控器来激活或停用报警的报警系统。
- en: It’s possible that more expensive, highly sophisticated alarm systems will detect
    the noise in the wireless frequency and attempt to notify the user about this
    event. To avoid this, you could attempt to jam the alarm system base station’s
    Wi-Fi connectivity by performing a deauthentication attack, as discussed in Chapter
    12\. Refer to that chapter for more information about using the Aircrack-ng suite.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 更昂贵、高度复杂的报警系统可能会检测到无线频率中的噪声，并试图通知用户此事件。为避免这种情况，你可以尝试通过执行去认证攻击来干扰报警系统基站的Wi-Fi连接，如第12章所讨论的。有关使用Aircrack-ng套件的更多信息，请参阅该章节。
- en: Playing Back an IP Camera Stream
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放IP摄像头流
- en: Suppose you’re an attacker who has somehow gained access to a network that includes
    IP cameras. Now, what could constitute an impactful attack that has significant
    privacy implications and that you could conduct without even touching the cameras?
    Playing back the camera video stream, of course. Even if the cameras have no vulnerabilities
    (highly unlikely!), an attacker who gains a man-in-the-middle position on the
    network could capture traffic from any potential insecure communication channels.
    The bad (or good, depending on your perspective) news is that many current cameras
    still use unencrypted network protocols to stream their video. Capturing the network
    traffic is one thing, but being able to demonstrate to stakeholders that it’s
    possible to play back the video from that dump is another.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个攻击者，已经通过某种方式访问了一个包含 IP 摄像头的网络。那么，什么样的攻击可能会对隐私产生重大影响，并且你甚至无需触及摄像头就能实施呢？当然是回放摄像头的视频流。即使摄像头没有漏洞（这非常不可能！），一个在网络中获得中间人位置的攻击者仍然可以从任何潜在的不安全通信通道捕获流量。坏消息（或好消息，取决于你的视角）是，许多当前的摄像头仍然使用未加密的网络协议来流式传输视频。捕获网络流量是一回事，但能够向利益相关者证明从该转储中回放视频是可能的，又是另一回事。
- en: You can easily achieve the man-in-the-middle position using techniques like
    ARP cache poisoning or DHCP spoofing (first introduced in Chapter 3) if the network
    has no segmentation. In the camera video stream example, we assume that this has
    already been achieved and that you’ve captured a network camera’s *pcap* file
    streaming through the Real Time Streaming Protocol (RTSP), the Real-time Transport
    Protocol (RTP), and the RTP Control Protocol (RTCP), which are discussed in the
    next section.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网络没有分段，你可以使用像 ARP 缓存中毒或 DHCP 欺骗（在第 3 章首次介绍）等技术轻松实现中间人攻击位置。在摄像头视频流的例子中，我们假设已经达成了这个位置，并且你已经捕获了通过实时流媒体协议（RTSP）、实时传输协议（RTP）和
    RTP 控制协议（RTCP）流动的网络摄像头的 *pcap* 文件，这些将在接下来的章节中讨论。
- en: Understanding Streaming Protocols
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解流媒体协议
- en: 'The RTSP, RTP, and RTCP protocols usually work in conjunction with one another.
    Without delving too much into their inner workings, here is a quick primer on
    each:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: RTSP、RTP 和 RTCP 协议通常是相互配合工作的。虽然我们不深入探讨它们的内部工作原理，下面是每个协议的简要介绍：
- en: RTSP Is a client-server protocol that acts as a network remote control for multimedia
    servers with live feeds and stored clips as data sources. You can imagine RTSP
    as the protocol overlord that can send VHS-style multimedia playback commands,
    such as play, pause, and record. RTSP usually runs over TCP.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RTSP 是一个客户端-服务器协议，充当带有实时视频源和存储片段的多媒体服务器的网络遥控器。你可以把 RTSP 想象成可以发送类似 VHS 风格的多媒体播放命令的协议统治者，例如播放、暂停和录制。RTSP
    通常通过 TCP 运行。
- en: RTP Performs the transmission of the media data. RTP runs over UDP and works
    in concert with RTCP.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RTP 执行媒体数据的传输。RTP 运行在 UDP 上，并与 RTCP 协同工作。
- en: 'RTCP Periodically sends out-of-band reports that announce statistics (for example,
    the number of packets sent and lost and the jitter) to the RTP participants. Although
    RTP is typically sent on an even-numbered UDP port, RTCP is sent over the next
    highest odd-number UDP port: you can spot this in the Wireshark dump in [Figure
    15-7](#figure15-7).'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RTCP 定期发送带外报告，向 RTP 参与者通告统计信息（例如，发送和丢失的数据包数以及抖动）。尽管 RTP 通常通过偶数的 UDP 端口发送，RTCP
    会通过下一个最高的奇数 UDP 端口发送：你可以在 Wireshark 转储中看到这一点，如[图 15-7](#figure15-7)所示。
- en: Analyzing IP Camera Network Traffic
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析 IP 摄像头网络流量
- en: In our setup, the IP camera has the IP address 192.168.4.180 and the client
    that is intended to receive the video stream has the IP address 192.168.5.246\.
    The client could be the user’s browser or a video player, such as VLC media player.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设置中，IP 摄像头的 IP 地址是 192.168.4.180，旨在接收视频流的客户端的 IP 地址是 192.168.5.246。客户端可以是用户的浏览器或视频播放器，如
    VLC 媒体播放器。
- en: As a man-in-the-middle positioned attacker, we’ve captured the conversation
    that [Figure 15-7](#figure15-7) shows in Wireshark.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个中间人攻击者，我们在 Wireshark 中捕获了[图 15-7](#figure15-7)所示的对话。
- en: '![f15007](Images/f15007.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![f15007](Images/f15007.png)'
- en: 'Figure 15-7: Wireshark output of a typical multimedia session established through
    RTSP and RTP'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-7：通过 RTSP 和 RTP 建立的典型多媒体会话的 Wireshark 输出
- en: The traffic is a typical multimedia RTSP/RTP session between a client and an
    IP camera. The client starts by sending an `RTSP OPTIONS` request 1 to the camera.
    This request asks the server about the request types it will accept. The accepted
    types are then contained in the server’s `RTSP REPLY`2.``In this case, they’re
    `DESCRIBE`*,* `SETUP`*,* `TEARDOWN`*,* `PLAY`*,* `SET_PARAMETER`*,* `GET_PARAMETER`*,*
    and `PAUSE` (some readers might find these familiar from the VHS days), as shown
    in [Figure 15-8](#figure15-8).``
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该流量是客户端与IP摄像头之间的典型多媒体RTSP/RTP会话。客户端首先通过发送`RTSP OPTIONS`请求1到摄像头。此请求询问服务器它将接受哪些请求类型。接受的类型随后包含在服务器的`RTSP
    REPLY`2中。``在此案例中，它们是`DESCRIBE`*、* `SETUP`*、* `TEARDOWN`*、* `PLAY`*、* `SET_PARAMETER`*、*
    `GET_PARAMETER`*和`PAUSE`（某些读者可能会发现这些术语与VHS时代很相似），如[图15-8](#figure15-8)所示。``
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
