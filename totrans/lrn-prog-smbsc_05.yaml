- en: '**5**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5**'
- en: '**DRAWING SHAPES WITH TURTLE GRAPHICS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**用海龟图形绘制形状**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: In [Chapter 3](ch03.html#ch03) you learned how to draw pictures using code,
    but in Small Basic you can program a friendly turtle to draw pictures for you!
    In this chapter, you’ll explore the `Turtle` object. You’ll also learn how to
    use a `For` loop to repeat lines of code a set number of times to draw beautiful
    designs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](ch03.html#ch03)中，你学会了如何使用代码绘制图形，但在 Small Basic 中，你可以编程让一只友好的海龟为你绘画！在本章中，你将探索
    `Turtle` 对象。你还将学习如何使用 `For` 循环重复多次代码行来绘制美丽的设计。
- en: '**Meet the Turtle**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**认识海龟**'
- en: 'Enter this statement in the Small Basic Editor:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Small Basic 编辑器中输入以下语句：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now click **Run**. Presto! A turtle should appear in the center of the graphics
    window ([Figure 5-1](ch05.html#ch5fig1)), waiting for your commands.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击 **运行**。瞧！海龟应该出现在图形窗口的中央（[图 5-1](ch05.html#ch5fig1)），等待你的指令。
- en: '![image](graphics/f05-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-01.jpg)'
- en: '*Figure 5-1: Hello, turtle!*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：你好，海龟！*'
- en: You might wonder how useful this slow creature can be, but don’t underestimate
    its powers. Once upon a time a turtle won a race against the fastest hare on Earth!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，这个缓慢的生物能有多大用处，但不要低估它的能力。曾几何时，一只海龟赢得了与地球上最快的兔子的比赛！
- en: Small Basic’s turtle uses the `GraphicsWindow` object’s pen to draw lines. It
    always carries this pen (perhaps it’s hidden in its shell next to the turtle wax),
    and you can decide if the pen is up or down! When the pen is down, the turtle
    draws as it moves. When the pen is up, the turtle moves without leaving a trace.
    You can command the turtle to put down or lift up its pen by using the `PenDown()`
    and `PenUp()` methods (see [Figure 5-2](ch05.html#ch5fig2)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic 的海龟使用 `GraphicsWindow` 对象的笔来绘制线条。它总是带着这支笔（也许它藏在它的壳里，旁边是海龟蜡），你可以决定笔是上还是下！当笔在下时，海龟在移动时会画出轨迹；当笔在上时，海龟移动时不会留下痕迹。你可以使用
    `PenDown()` 和 `PenUp()` 方法命令海龟放下或抬起它的笔（参见[图 5-2](ch05.html#ch5fig2)）。
- en: '![image](graphics/f05-02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-02.jpg)'
- en: '*Figure 5-2: Illustrating the* `PenUp()` *and* `PenDown()` *methods*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2：演示* `PenUp()` *和* `PenDown()` *方法*'
- en: The default pen state is down, so the turtle’s ready to draw from the day it’s
    born. Now let’s explore what it can do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的笔状态是下，海龟从出生那天起就准备好绘画了。现在让我们探索它能做什么。
- en: '**Moving the Turtle**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**移动海龟**'
- en: You can enter commands to tell your turtle what to do. Just like Ash Ketchum
    commands Pikachu, you’ll command your turtle. First, let’s use the `Turtle` object
    to tell the turtle to move!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以输入命令告诉海龟该做什么。就像小智指挥比卡丘一样，你也可以指挥你的海龟。首先，让我们使用 `Turtle` 对象来告诉海龟移动！
- en: Give it a push by entering these lines in the Editor. Then click **Run**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中输入这些代码行来推动它。然后点击 **运行**。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Go, turtle, go! The `Move()` method in this example commands the turtle to move
    forward 100 pixels.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 去吧，海龟，去吧！这个例子中的 `Move()` 方法命令海龟向前移动 100 像素。
- en: 'Now let’s look at the two different ways of moving your turtle: absolute motion
    and relative motion.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看移动海龟的两种不同方式：绝对运动和相对运动。
- en: '***Absolute Motion***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***绝对运动***'
- en: With *absolute motion*, you tell your turtle to go to a point on the graphics
    window. No matter where the turtle is, it moves to the exact point you choose.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*绝对运动*，你告诉海龟去图形窗口中的某个点。无论海龟在哪里，它都会移动到你选择的准确位置。
- en: One way to move the turtle to a particular point on the graphics window is to
    change its `X` and `Y` properties. To see how, run the program shown in [Listing
    5-1](ch05.html#ch5ex1).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将海龟移动到图形窗口中的某个特定位置的一种方法是改变它的 `X` 和 `Y` 属性。要查看如何实现，请运行[清单 5-1](ch05.html#ch5ex1)中的程序。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 5-1: Setting the turtle’s position*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-1：设置海龟的位置*'
- en: The `Show()` method (line 2) causes the turtle to appear near the center of
    the graphics window (320, 240). The `Delay()` method on line 3 makes the program
    sleep for 1,000 milliseconds (which is 1 second), so you can see the turtle’s
    initial position. Line 4 sets the turtle’s `X` position to 100, and line 5 sets
    the turtle’s `Y` position to 140\. After running lines 4 and 5, the turtle will
    appear at point (100, 140) on the graphics window, as illustrated in [Figure 5-3](ch05.html#ch5fig3).
    Note that the turtle moved to the new location without leaving any trace; it’s
    like the turtle got picked up and placed at (100, 140).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Show()`方法（第 2 行）使海龟出现在图形窗口的中心附近（320, 240）。第 3 行的`Delay()`方法使程序暂停 1,000 毫秒（即
    1 秒），这样你可以看到海龟的初始位置。第 4 行将海龟的`X`位置设置为 100，第 5 行将海龟的`Y`位置设置为 140。运行第 4 和第 5 行后，海龟将出现在图形窗口的
    (100, 140) 位置，如[图 5-3](ch05.html#ch5fig3)所示。注意，海龟在移动到新位置时没有留下任何痕迹；就像海龟被捡起并放置到
    (100, 140) 一样。'
- en: '![image](graphics/f05-03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-03.jpg)'
- en: '*Figure 5-3: Moving the turtle by setting its* `X` *and* `Y` *properties*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-3：通过设置海龟的`X`和`Y`属性来移动海龟*'
- en: Another way to move the turtle to an absolute position on the graphics window
    is to use the `MoveTo()` method. This method takes the x- and y-coordinates of
    the desired position as arguments. Run the program in [Listing 5-2](ch05.html#ch5ex2)
    to see what this method does.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将海龟移动到图形窗口中绝对位置的方法是使用`MoveTo()`方法。此方法将目标位置的 x 和 y 坐标作为参数。运行[示例 5-2](ch05.html#ch5ex2)中的程序，查看该方法的效果。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 5-2: Moving the turtle using absolute motion*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 5-2：使用绝对运动移动海龟*'
- en: You can see the output of this program in [Figure 5-4](ch05.html#ch5fig4). Again,
    the turtle starts at (320, 240) pointing north (line 2), and the program sleeps
    for 1 second so you can watch the turtle in action (line 3). After 1 second, the
    turtle turns toward (100, 140) before it starts its slow journey toward that point.
    This time, the turtle draws a line while moving (because the turtle’s pen is down
    by default). If you add `Turtle.PenUp()` anywhere before calling `MoveTo()`, the
    turtle moves to (100, 140) without leaving any trace.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 5-4](ch05.html#ch5fig4)中看到此程序的输出。再次强调，海龟从 (320, 240) 开始，朝北（第 2 行），程序暂停
    1 秒以便你观察海龟的动作（第 3 行）。1 秒后，海龟转向 (100, 140)，然后开始缓慢地朝该点移动。这一次，海龟在移动时会留下轨迹（因为海龟的笔默认是放下的）。如果你在调用`MoveTo()`之前的任何地方添加`Turtle.PenUp()`，海龟将移动到
    (100, 140) 而不留下任何痕迹。
- en: '![image](graphics/f05-04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-04.jpg)'
- en: '*Figure 5-4: Using* `MoveTo()` *to set the turtle’s absolute position*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-4：使用`MoveTo()`设置海龟的绝对位置*'
- en: Note that when it stops moving, the turtle stays pointed in the direction it
    turned to. It doesn’t reset to face north again. Compare this figure to [Figure
    5-3](ch05.html#ch5fig3), where the turtle remains pointing north, like it’s been
    picked up and moved to the new position.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当它停止移动时，海龟保持朝向它转向的方向。它不会重新设置为朝北。比较此图与[图 5-3](ch05.html#ch5fig3)，在图 5-3 中海龟仍然朝北，就像它被捡起并移动到新位置一样。
- en: 'Let’s say you want your turtle to face north after it completes its journey.
    Add the following statement at the end of [Listing 5-2](ch05.html#ch5ex2):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望海龟在完成它的旅程后面朝北方。在[示例 5-2](ch05.html#ch5ex2)的末尾添加以下语句：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the turtle reaches point (100, 140), it’ll turn in place to point north.
    Try it out! See [Figure 5-5](ch05.html#ch5fig5) to understand the relationship
    between the `Angle` property and the direction in which the turtle’s facing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当海龟到达 (100, 140) 时，它将原地转向朝北。试试看！参见[图 5-5](ch05.html#ch5fig5)，了解`Angle`属性与海龟朝向之间的关系。
- en: '![image](graphics/f05-05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-05.jpg)'
- en: '*Figure 5-5: For the turtle, 0 is north, 90 is east, 180 is south, and 270
    is west.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-5：对于海龟，0 表示北方，90 表示东方，180 表示南方，270 表示西方。*'
- en: As you can see in [Figure 5-5](ch05.html#ch5fig5), when you set your turtle’s
    `Angle` to 0 or 360, it faces north. You can set the turtle’s `Angle` to 45, to
    make it face northeast; 90, to make it face east; 135 (southeast); 180 (south);
    225 (southwest); 270 (west); 315 (northwest); and 360 (back to north again). Of
    course, you can set the turtle’s `Angle` to any number you want. Experiment by
    setting the `Angle` property of the `Turtle` object to different numbers to see
    which directions the turtle will face. Don’t forget to try negative numbers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[图 5-5](ch05.html#ch5fig5)中看到的，当你将海龟的`Angle`设置为0或360时，它面朝北方。你可以将海龟的`Angle`设置为45，使其面朝东北；90，面朝东；135（东南）；180（南）；225（西南）；270（西）；315（西北）；以及360（再次朝北）。当然，你也可以将海龟的`Angle`设置为任何你想要的数字。通过将`Turtle`对象的`Angle`属性设置为不同的数字，尝试看看海龟会朝向哪些方向。别忘了尝试负数。
- en: '***Relative Motion***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***相对运动***'
- en: With *relative motion* you tell the turtle how far to move from its current
    position; that is, you tell it how far to move *relative to* its current position.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*相对运动*时，你告诉海龟从当前位置移动多远；也就是说，你告诉它相对于当前位置移动多远。
- en: Let’s practice by making the turtle hit an imaginary target. [Listing 5-3](ch05.html#ch5ex3)
    shows one way to program the turtle to hit the target.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习一下，让海龟击中一个假想的目标。[清单 5-3](ch05.html#ch5ex3)展示了编程海龟击中目标的一种方法。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 5-3: Moving the turtle using relative motion*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-3：使用相对运动移动海龟*'
- en: The output is illustrated in [Figure 5-6](ch05.html#ch5fig6). Line 3 moves the
    turtle up 150 pixels, line 4 turns the turtle to the right, and line 5 moves the
    turtle forward 100 pixels.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如[图 5-6](ch05.html#ch5fig6)所示。第3行将海龟向上移动150像素，第4行将海龟右转，第5行让海龟前进100像素。
- en: '![image](graphics/f05-06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-06.jpg)'
- en: '*Figure 5-6: Moving the turtle using relative motion commands*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-6：使用相对运动命令移动海龟*'
- en: Relative motion differs from absolute motion because we told the turtle to move
    a certain distance instead of telling it to go to a set of coordinates.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相对运动与绝对运动的区别在于，我们告诉海龟移动一定的距离，而不是告诉它去一个特定的坐标。
- en: When you pass a negative number to `Move()`, your turtle will move backward.
    You can also use the `Turn()` method to command your turtle to turn in place by
    any angle you desire. Enter the code shown in [Listing 5-4](ch05.html#ch5ex4)
    to play around with these options, and run the program to see the results in action.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向`Move()`传递一个负数时，海龟会向后移动。你也可以使用`Turn()`方法命令海龟在原地按你想要的角度转动。输入[清单 5-4](ch05.html#ch5ex4)中的代码来尝试这些选项，然后运行程序看看实际效果。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 5-4: Turning the turtle using relative motion*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-4：使用相对运动转动海龟*'
- en: Line 3 turns the turtle to the right by 45 degrees. Line 4 moves the turtle
    forward 100 pixels (see the left image in [Figure 5-7](ch05.html#ch5fig7)). The
    –90 in line 5 turns the turtle to the left by 90 degrees. Line 6 moves the turtle
    backward 100 pixels (see the right image in [Figure 5-7](ch05.html#ch5fig7)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第3行将海龟右转45度。第4行让海龟前进100像素（见[图 5-7](ch05.html#ch5fig7)左图）。第5行的–90将海龟左转90度。第6行让海龟后退100像素（见[图
    5-7](ch05.html#ch5fig7)右图）。
- en: '![image](graphics/f05-07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-07.jpg)'
- en: '*Figure 5-7: Illustrating the turtle’s* `Move()` *and* `Turn()` *methods*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-7：说明海龟的* `Move()` *和* `Turn()` *方法*'
- en: '***Coloring Your Steps***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为你的步骤上色***'
- en: You can set your turtle’s pen size and color using `GraphicsWindow`’s `PenWidth`
    and `PenColor` properties. For example, the following code makes your turtle draw
    with a red pen that’s 5 pixels wide.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`GraphicsWindow`的`PenWidth`和`PenColor`属性来设置海龟的画笔大小和颜色。例如，以下代码让海龟用一个宽度为5像素的红色画笔绘制。
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add this code before commanding your turtle to move, and then observe what happens.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令海龟移动之前，先添加这段代码，然后观察会发生什么。
- en: '***Controlling Your Speed***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***控制你的速度***'
- en: The `Turtle` object has one more property that you need to know. The `Speed`
    property sets how fast the turtle moves. The possible `Speed` values are 1 to
    10\. Follow along with [Listing 5-5](ch05.html#ch5ex5) to watch your turtle race
    around your screen.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Turtle`对象还有一个你需要知道的属性。`Speed`属性设置海龟的移动速度。`Speed`的值范围是1到10。跟着[清单 5-5](ch05.html#ch5ex5)来看看海龟如何在屏幕上飞速移动。'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 5-5: Setting the turtle’s speed*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-5：设置海龟的速度*'
- en: Line 3 sets the turtle’s speed to 2\. The turtle slowly moves 100 pixels (line
    4) and then gets faster in line 5\. You can already see the speed increase as
    the turtle turns right (line 6) and darts forward 100 pixels (line 7). Then you
    set the turtle to a speed of 9 (line 8). The turtle quickly turns right (line
    9) and sprints forward another 100 pixels (line 10). If you don’t want to watch
    the turtle move slowly while drawing, set the `Speed` property to 10 at the start
    of your program. The turtle will move so fast that you’ll barely see it. It’s
    superturtle!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第3行将乌龟的速度设置为2。乌龟缓慢地移动100像素（第4行），然后在第5行加速。你可以看到乌龟转向右侧（第6行）并快速前进100像素（第7行）。接下来，你将乌龟的速度设置为9（第8行）。乌龟快速向右转（第9行），并冲刺前进另100像素（第10行）。如果你不想在绘制时看到乌龟慢慢移动，可以在程序开始时将
    `Speed` 属性设置为10。乌龟将以非常快的速度移动，你几乎看不见它。它是超级乌龟！
- en: '**TRY IT OUT 5-1**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试一试 5-1**'
- en: Write a program that makes your turtle draw this star ([Figure 5-8](ch05.html#ch5fig8)).
    The coordinates of each point are included.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，让你的乌龟画出这个星形图案（[图5-8](ch05.html#ch5fig8)）。每个点的坐标已包含在内。
- en: '![image](graphics/f05-08.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-08.jpg)'
- en: '*Figure 5-8: A star pattern*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-8：一个星形图案*'
- en: '**Introducing the For Loop**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 For 循环**'
- en: 'As you start writing longer programs, you’ll need to repeat some statements.
    For example, let’s make the turtle draw a square: enter the code shown in [Listing
    5-6](ch05.html#ch5ex6).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始编写更长的程序时，你需要重复某些语句。例如，让我们让乌龟画一个正方形：输入[列表 5-6](ch05.html#ch5ex6)中显示的代码。
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 5-6: Making the turtle draw a square*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-6：让乌龟画一个正方形*'
- en: The turtle starts facing upward. This code tells the turtle to move 60 pixels
    up to draw one side of the square, turn 90 degrees to the right, move 60 pixels
    to draw another side, turn 90 degrees to face downward, move 60 pixels to draw
    a third side, turn 90 degrees to face left, and move 60 pixels to complete the
    square. Finally, the turtle turns 90 degrees one last time so it’s facing upward
    like it was at the beginning. Check out the result in [Figure 5-9](ch05.html#ch5fig9).
    Does your screen look the same?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 乌龟开始时面朝上方。此代码指示乌龟向上移动60像素，绘制正方形的一条边，然后向右转90度，移动60像素绘制另一条边，再向下转90度，移动60像素绘制第三条边，向左转90度，再移动60像素完成正方形。最后，乌龟再向右转90度，恢复最初的上方向。查看[图5-9](ch05.html#ch5fig9)中的结果。你的屏幕看起来一样吗？
- en: '![image](graphics/f05-09.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-09.jpg)'
- en: '*Figure 5-9: Drawing a square using move and turn commands*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-9：使用移动和转向命令绘制正方形*'
- en: You repeated the `Move(60)` and `TurnRight()` methods four times. The computer
    doesn’t mind repeating these tasks, but it’s boring for you to type all that code.
    Wouldn’t it be great if you could make the turtle draw this square using an easier
    approach?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `Move(60)` 和 `TurnRight()` 方法重复了四次。计算机不介意重复这些任务，但你输入这些代码时会觉得很无聊。如果你能用更简单的方法让乌龟绘制这个正方形，那该多好啊？
- en: Well, you can! You can make the turtle draw the same square as in [Listing 5-6](ch05.html#ch5ex6),
    just by using a few lines of code. Use a `For` loop, like the one in [Listing
    5-7](ch05.html#ch5ex7).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当然可以！你可以让乌龟画出与[列表5-6](ch05.html#ch5ex6)中相同的正方形，只需使用几行代码。使用一个 `For` 循环，就像[列表5-7](ch05.html#ch5ex7)中所示。
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 5-7: Making the turtle draw a square using a* `For` *loop*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-7：使用 `For` 循环让乌龟画正方形*'
- en: The `For` loop runs `Turtle.Move(60)` and `Turtle.TurnRight()` four times. You
    use a `For` loop when you know how many times you want to repeat some code (for
    more on `For` loops, see [Chapter 13](ch13.html#ch13)). In this example, your
    program starts the loop, runs the two lines of code, and then goes back to the
    start of the loop to run it again. It runs four times and then exits the loop.
    Try it out!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`For` 循环运行 `Turtle.Move(60)` 和 `Turtle.TurnRight()` 四次。你会在知道重复执行某些代码的次数时使用
    `For` 循环（有关 `For` 循环的更多内容，参见[第13章](ch13.html#ch13)）。在这个例子中，程序启动循环，运行两行代码，然后返回到循环的起始位置，再次运行。这会运行四次，然后退出循环。试试看吧！'
- en: 'In this short program, you’re using three new Small Basic keywords: `For`,
    `To`, and `EndFor`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的程序中，你将使用三个新的 Small Basic 关键字：`For`、`To` 和 `EndFor`。
- en: '**NOTE**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The keywords (*`For`, `To`, *and* `EndFor`*) don’t have to be capitalized
    the way you see them in [Listing 5-7](ch05.html#ch5ex7), and the statements in
    the* `For` *loop don’t have to be indented, but those are the default formats.
    The Editor indents the statements inside the* `For` *loop as you type to make
    your code easier to read.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*关键字（*`For`*、`To`*和*`EndFor`*）不需要像在[Listing 5-7](ch05.html#ch5ex7)中那样大写，`For`*循环中的语句也不需要缩进，但这些是默认格式。编辑器会在你输入时自动缩进`For`*循环中的语句，使代码更易读。*'
- en: '[Figure 5-10](ch05.html#ch5fig10) shows what’s going on.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 5-10](ch05.html#ch5fig10)展示了发生了什么。'
- en: '![image](graphics/f05-10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-10.jpg)'
- en: '*Figure 5-10: The parts of the* `For` *loop*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 5-10: `For`* 循环的各部分'
- en: 'To repeat lines of code, you simply put the statement(s) you want to repeat
    between the `For` and `EndFor` keywords. If you want to repeat these statements
    four times, write this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要重复代码行，只需将你想要重复的语句放在`For`和`EndFor`关键字之间。如果你想重复这些语句四次，可以这样写：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The variable `I` is the *counter*. It keeps track of how many times the loop
    has been run and how many times it has left to go. Each time your program runs
    the loop, it adds one to the counter.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`I`是*计数器*。它跟踪循环执行了多少次，还剩多少次每次程序运行时，它会将计数器加一。
- en: 'Remember the `For` loop the next time you get in trouble at school! If your
    teacher catches you chewing gum and asks you to write *I won’t chew gum in class
    again* 100 times, Small Basic is there to rescue you! Write this instead:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下次在学校遇到麻烦时记得使用`For`循环！如果老师抓到你在嚼口香糖，要求你写*我以后不在课堂上嚼口香糖* 100次，Small Basic可以来救你！这时你可以这样写：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Try it out. No, not chewing gum in class; try out the program!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看吧。不是在课堂上嚼口香糖；是试试这个程序！
- en: '**NOTE**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Programmers usually use one-letter variables to name the loop’s counter (such
    as* I, J, *or* K*), but any other name works too. It doesn’t matter if you use
    upper- or lowercase letters—Small Basic would treat* I *and* i *as the same variable.*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*程序员通常使用一个字母的变量名来命名循环计数器（比如*I、J*或*K*），但其他任何名字也可以。如果你使用大写或小写字母也没关系——Small Basic会将*I*和*i*视为同一个变量。*'
- en: '**TRY IT OUT 5-2**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 5-2**'
- en: Predict the output of the following program. Then run the program to check your
    answer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 预测以下程序的输出。然后运行程序来检查你的答案。
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Drawing Regular Polygons**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绘制规则多边形**'
- en: You can easily change the square-drawing program ([Listing 5-7](ch05.html#ch5ex7))
    to draw other polygons. (Don’t be so square!) A *polygon* is just a simple closed
    figure. For some examples, look at the three polygons in [Figure 5-11](ch05.html#ch5fig11).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地修改绘制正方形的程序（[Listing 5-7](ch05.html#ch5ex7)）来绘制其他多边形。（别那么“死板”！）*多边形*只是一个简单的闭合图形。关于一些例子，看看[Figure
    5-11](ch05.html#ch5fig11)中的三个多边形。
- en: '![image](graphics/f05-11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-11.jpg)'
- en: '*Figure 5-11: The exterior angles of three polygons*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 5-11: 三个多边形的外角*'
- en: You use a general pattern to draw these shapes. To create the square in [Figure
    5-11](ch05.html#ch5fig11), you draw four sides with a 90-degree turn angle after
    each side (that is, 360 degrees divided by 4). For the pentagon (the middle polygon),
    you draw five sides with a 72-degree turn angle after each side (360 divided by
    5). For the hexagon (the polygon on the right), you draw six sides with a 60-degree
    turn after each side (360 divided by 6). Do you see the pattern? The angle is
    360 degrees divided by the number of sides. With this in mind, you can create
    the polygon-drawing program in [Listing 5-8](ch05.html#ch5ex8).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用一种通用的模式来绘制这些形状。要在[Figure 5-11](ch05.html#ch5fig11)中绘制正方形，你需要画四条边，每画一条边后转90度（即360度除以4）。对于五边形（中间的多边形），你需要画五条边，每画一条边后转72度（360度除以5）。对于六边形（右侧的多边形），你需要画六条边，每画一条边后转60度（360度除以6）。你看出规律了吗？角度是360度除以边的数量。有了这个规律，你可以在[Listing
    5-8](ch05.html#ch5ex8)中创建绘制多边形的程序。
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 5-8: Drawing a regular polygon*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 5-8: 绘制规则多边形*'
- en: To draw a different polygon, replace the whole number in the `numSides` variable
    on line 2 with another number. [Figure 5-12](ch05.html#ch5fig12) shows eight polygons
    (all with the same side length) you can draw with this program. Try it out!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制不同的多边形，只需将第2行中`numSides`变量的整数值替换为其他数字。[Figure 5-12](ch05.html#ch5fig12)展示了你可以用这个程序绘制的八个多边形（它们的边长相同）。试试看吧！
- en: '![image](graphics/f05-12.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-12.jpg)'
- en: '*Figure 5-12: The output of* Polygon.sb *using different values for* `numSides`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 5-12: 使用不同`numSides`值时* Polygon.sb *的输出*'
- en: What happens when you use a large number for the value of `numSides`? The polygon
    begins to look more like a circle! Set `numSides` to 36, change `Move(60)` on
    line 5 to `Move(20)`, and see what happens.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为`numSides`设置一个较大的数值时，会发生什么？多边形开始看起来像一个圆形！将`numSides`设置为36，将第5行的`Move(60)`改为`Move(20)`，然后看看会发生什么。
- en: '***A Star Is Born***'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***星星诞生了***'
- en: With the knowledge you now have about the angles of different shapes, what do
    you think happens when you turn the turtle by multiples of 72 degrees (which is
    the angle you used to draw a pentagon), such as 2 *×* 72 = 144 degrees or 3 *×*
    72 = 216 degrees? Run the program shown in [Listing 5-9](ch05.html#ch5ex9) to
    find out.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你现在对不同形状角度的了解，当你将海龟按72度的倍数旋转时（这是你用来绘制五边形的角度），比如2 *×* 72 = 144度或3 *×* 72 =
    216度，会发生什么？运行[清单 5-9](ch05.html#ch5ex9)中显示的程序，看看结果。
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 5-9: Drawing a pentagon star*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-9：绘制五角星*'
- en: If the turn angle is 144 instead of 72, the output is a star instead of a pentagon.
    Look at [Figure 5-13](ch05.html#ch5fig13) to see how this works.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果转角是144而不是72，输出的将是一个星形，而不是五边形。查看[图 5-13](ch05.html#ch5fig13)看看是如何实现的。
- en: '![image](graphics/f05-13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-13.jpg)'
- en: '*Figure 5-13: Illustrating the output of* PentaStar.sb'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-13：展示* PentaStar.sb *的输出结果*'
- en: '**NOTE**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’d like to hide the turtle after creating your masterpiece, call* `Turtle.Hide()`
    *at the end of your program.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想在创建完作品后隐藏海龟，可以在程序的最后调用* `Turtle.Hide()` *。*'
- en: Try experimenting with different polygons and turn angles to discover the various
    stars you can create. [Figure 5-14](ch05.html#ch5fig14) shows three examples to
    help you get started.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过不同的多边形和转角进行实验，发现你可以创造出哪些不同的星形。[图 5-14](ch05.html#ch5fig14)展示了三个示例，帮助你开始实验。
- en: '![image](graphics/f05-14.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-14.jpg)'
- en: '*Figure 5-14: Drawing different stars by using [Listing 5-9](ch05.html#ch5ex9)*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-14：通过使用[清单 5-9](ch05.html#ch5ex9)绘制不同的星形*'
- en: '**TRY IT OUT 5-3**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试 5-3**'
- en: 'Write a program that directs the turtle to draw the pentagon in [Figure 5-15](ch05.html#ch5fig15).
    (Hint: use the `Angle` property to set the turtle’s initial direction.)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，让海龟绘制[图 5-15](ch05.html#ch5fig15)中的五边形。（提示：使用`Angle`属性来设置海龟的初始方向。）
- en: '![image](graphics/f05-15.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-15.jpg)'
- en: '*Figure 5-15: A pentagon*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-15：五边形*'
- en: '***Creating Polygon Art Using Nested Loops***'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用嵌套循环创建多边形艺术***'
- en: You can create beautiful shapes using polygons and stars. In this section, we’ll
    draw a pattern created by rotating a square 12 times (see [Figure 5-16](ch05.html#ch5fig16)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多边形和星形创造出美丽的图案。在本节中，我们将通过将正方形旋转12次来绘制一个图案（见[图 5-16](ch05.html#ch5fig16)）。
- en: '![image](graphics/f05-16.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-16.jpg)'
- en: '*Figure 5-16: The output of* RotatedPolygon.sb'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-16：旋转多边形的输出* RotatedPolygon.sb'
- en: To make this art, you’ll use a *nested loop*, which is when you place one loop
    inside another loop. Each time the outer loop runs, it also runs the inner loop.
    [Listing 5-10](ch05.html#ch5ex10) shows you how to use a nested loop to create
    the pretty drawing in [Figure 5-16](ch05.html#ch5fig16).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作这幅艺术作品，你将使用*嵌套循环*，即将一个循环放在另一个循环内部。每次外部循环运行时，它也会运行内部循环。[清单 5-10](ch05.html#ch5ex10)展示了如何使用嵌套循环创建[图
    5-16](ch05.html#ch5fig16)中的漂亮图案。
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 5-10: Drawing a pattern of rotated polygons*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-10：绘制旋转多边形的图案*'
- en: This program has two loops, one nested inside the other. The outer loop (line
    5) uses a loop counter named `I` and repeats 12 times to draw 12 squares. During
    each round of this loop, the program performs two tasks. First, it draws a square
    using another `For` loop with a loop counter named `J` (line 7). Then, in line
    12, it turns the turtle a little (360° ÷ 12 = 30° in this case) before it repeats
    the loop on line 5 to draw the next square. So fancy!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序有两个循环，一个嵌套在另一个里面。外部循环（第5行）使用名为`I`的循环计数器，并重复12次绘制12个正方形。在每一轮外部循环中，程序执行两个任务。首先，它使用另一个名为`J`的循环计数器（第7行）绘制一个正方形。然后，在第12行，它会让海龟稍微转动一下（在这种情况下，360°
    ÷ 12 = 30°），然后再次执行第5行的循环，绘制下一个正方形。真是太炫了！
- en: When you use nested loops, make sure you use different names for the loop counters.
    In [Listing 5-10](ch05.html#ch5ex10), we used the `I` variable for the outer loop
    and the `J` variable for the inner loop.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌套循环时，确保为循环计数器使用不同的名称。在[清单 5-10](ch05.html#ch5ex10)中，我们为外部循环使用了`I`变量，为内部循环使用了`J`变量。
- en: Change the `numSides` and `repeatCount` variables to experiment with different
    polygons and rotation counts. [Figure 5-17](ch05.html#ch5fig17) shows some shapes
    you can create by rotating a hexagon. Try changing the pen color and width to
    add fancy touches to your creations. The possibilities are endless!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`numSides`和`repeatCount`变量，尝试不同的多边形和旋转次数。[图5-17](ch05.html#ch5fig17)展示了你可以通过旋转六边形创建的一些形状。尝试更改笔的颜色和宽度，为你的作品增添一些别致的元素。可能性是无穷无尽的！
- en: '![image](graphics/f05-17.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-17.jpg)'
- en: '*Figure 5-17: Patterns created by rotating a hexagon*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-17：通过旋转六边形创建的图案*'
- en: '**TRY IT OUT 5-4**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 5-4**'
- en: Predict the output of the following program. Try to imagine the result of the
    code before you run it. Then run the code to check your answer.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 预测以下程序的输出。在运行代码之前，尽量想象代码的结果。然后运行代码，检查你的答案。
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '***Endless Graphics***'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***无尽的图形***'
- en: In [Listing 5-10](ch05.html#ch5ex10) you created patterns by rotating a single
    polygon. You can also create patterns using two or more polygons of different
    sizes. To keep the code simple, let’s draw two polygons of different sizes and
    rotate them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单5-10](ch05.html#ch5ex10)中，你通过旋转单个多边形创建了图案。你也可以使用两个或更多不同大小的多边形来创建图案。为了简化代码，我们将绘制两个不同大小的多边形并旋转它们。
- en: Run the program shown in [Listing 5-11](ch05.html#ch5ex11) to see what patterns
    you can make.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行[清单5-11](ch05.html#ch5ex11)中显示的程序，看看你能创建什么图案。
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 5-11: Rotating two similar polygons*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单5-11：旋转两个相似的多边形*'
- en: '[Figure 5-18](ch05.html#ch5fig18) shows the output of this program. This program
    rotates two hexagons (the first has a side length of 30, and the second has a
    side length of 40) eight times. The outer loop in line 8 repeats up to the number
    in `repeatCount`. Each time the program loops, the code performs three actions:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[图5-18](ch05.html#ch5fig18)展示了这个程序的输出。该程序旋转了两个六边形（第一个边长为30，第二个边长为40）八次。第8行的外循环会根据`repeatCount`中的数字重复执行。每次程序循环时，代码会执行三个动作：'
- en: Draw the first polygon using the side length in `sideLen1` (lines 9–12).
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sideLen1`中的边长绘制第一个多边形（第9-12行）。
- en: Draw the second polygon using the side length in `sideLen2` (lines 14–17).
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sideLen2`中的边长绘制第二个多边形（第14-17行）。
- en: Turn the turtle to get ready for the next round of the loop (line 20).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将海龟转向，准备下一轮循环（第20行）。
- en: '![image](graphics/f05-18.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-18.jpg)'
- en: '*Figure 5-18: The output of* PolygonArt.sb'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-18：* PolygonArt.sb 的输出'
- en: Now try using the `repeatCount` values in [Figure 5-19](ch05.html#ch5fig19)
    to create lots of different patterns. Try setting `sideLen1 = 40` and `sideLen2
    = 60`!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用[图5-19](ch05.html#ch5fig19)中的`repeatCount`值，创建许多不同的图案。尝试将`sideLen1 = 40`和`sideLen2
    = 60`！
- en: '![image](graphics/f05-19.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-19.jpg)'
- en: '*Figure 5-19: Some of the patterns you can create by experimenting with* PolygonArt.sb'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-19：你可以通过实验* PolygonArt.sb 创建的一些图案'
- en: Experiment with this program to see what other shapes you can discover!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这个程序，看看你还能发现什么其他形状！
- en: '**TRY IT OUT 5-5**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 5-5**'
- en: Change [Listing 5-11](ch05.html#ch5ex11) to draw three polygons (instead of
    two) of different sizes, and then rotate them. Save your discoveries for your
    next art gallery. (Or, if you don’t want to become a millionaire, go to *[http://tiny.cc/turtlepatterns/](http://tiny.cc/turtlepatterns/)*
    and share them with the world!)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 修改[清单5-11](ch05.html#ch5ex11)，绘制三个不同大小的多边形（而不是两个），然后旋转它们。将你的发现保存到下一个艺术画廊中。（或者，如果你不想成为百万富翁，可以访问*[http://tiny.cc/turtlepatterns/](http://tiny.cc/turtlepatterns/)*并与全世界分享！）
- en: '**Programming Challenges**'
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到问题，可以查看*[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*，获取解决方案、更多资源以及教师和学生的复习问题。
- en: 'This code draws a circle:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段代码绘制了一个圆：
- en: '[PRE19]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Write a program to have the turtle repeat this code 12 times to create the
    pattern shown here:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编写一个程序，让海龟重复这段代码12次，创建如下图案：
- en: '![image](graphics/f0071-01.jpg)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0071-01.jpg)'
- en: 'Write a program to draw a flowerpot like this one:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制像这样的花盆：
- en: '![image](graphics/f0071-02.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0071-02.jpg)'
- en: 'Re-create the following code and experiment with it:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新创建以下代码并进行实验：
- en: '[PRE20]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Change the `Move()` distance after rotating each circle to discover new patterns!
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改`Move()`的距离，在旋转每个圆之后发现新图案！
- en: '![image](graphics/f0071-03.jpg)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0071-03.jpg)'
