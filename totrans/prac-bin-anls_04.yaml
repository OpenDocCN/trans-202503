- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3'
- en: 'THE PE FORMAT: A BRIEF INTRODUCTION'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PE 格式：简要介绍
- en: 'Now that you know all about the ELF format, let’s take a brief look at another
    popular binary format: the Portable Executable (PE) format. Because PE is the
    main binary format used on Windows, being familiar with PE is useful for analyzing
    the Windows binaries common in malware analysis.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了 ELF 格式，让我们简要看看另一个流行的二进制格式：可移植执行格式（PE 格式）。因为 PE 是 Windows 上主要使用的二进制格式，所以熟悉
    PE 对于分析常见的 Windows 二进制文件，尤其是在恶意软件分析中，十分有用。
- en: PE is a modified version of the Common Object File Format (COFF), which was
    also used on Unix-based systems before being replaced by ELF. For this historic
    reason, PE is sometimes also referred to as PE/COFF. Confusingly, the 64-bit version
    of PE is called PE32+. Because PE32+ has only minor differences compared to the
    original PE format, I’ll simply refer to it as “PE.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PE 是通用对象文件格式（COFF）的一个修改版本，COFF 在被 ELF 替代之前也曾在基于 Unix 的系统中使用。由于这个历史原因，PE 有时也被称为
    PE/COFF。令人困惑的是，64 位版本的 PE 被称为 PE32+。由于 PE32+ 与原始 PE 格式只有很小的差异，我将简单地称其为“PE”。
- en: In the following overview of the PE format, I’ll highlight its main differences
    from ELF in case you want to work on the Windows platform. I won’t go into quite
    as much detail as I did with ELF since PE isn’t the main focus in this book. That
    said, PE (along with most other binary formats) shares many similarities with
    ELF. Now that you’re up to speed on ELF, you’ll notice it’s much easier to learn
    about new binary formats!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的 PE 格式概述中，我将重点介绍它与 ELF 的主要区别，以防你需要在 Windows 平台上工作。与我在 ELF 中所做的详细介绍相比，我不会对
    PE 进行过多的细节说明，因为 PE 不是本书的主要焦点。话虽如此，PE（以及大多数其他二进制格式）与 ELF 共享许多相似之处。既然你已经了解了 ELF，你会发现学习新的二进制格式变得更容易了！
- en: I’ll center the discussion around [Figure 3-1](ch03.xhtml#ch03fig1). The data
    structures shown in the figure are defined in *WinNT.h*, which is included in
    the Microsoft Windows Software Developer Kit.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我将围绕[图 3-1](ch03.xhtml#ch03fig1)展开讨论。图中显示的数据结构定义在 *WinNT.h* 中，该文件包含在微软 Windows
    软件开发工具包中。
- en: 3.1 The MS-DOS Header and MS-DOS Stub
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1 MS-DOS 头部和 MS-DOS 存根
- en: Looking at [Figure 3-1](ch03.xhtml#ch03fig1), you’ll see a lot of similarities
    to the ELF format, as well as a few crucial differences. One of the main differences
    is the presence of an MS-DOS header. That’s right, MS-DOS, the old Microsoft operating
    system from 1981! What’s Microsoft’s excuse for including this in a supposedly
    modern binary format? As you may have guessed, the reason is backward compatibility.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下[图 3-1](ch03.xhtml#ch03fig1)，你会看到它与 ELF 格式有很多相似之处，也有一些关键的不同之处。其中一个主要的区别是存在
    MS-DOS 头部。没错，就是 MS-DOS，那个 1981 年的老微软操作系统！微软为何要在一个 supposedly 现代的二进制格式中包含这个东西呢？正如你可能猜到的，原因是为了向后兼容。
- en: When PE was introduced, there was a transitional period when users used both
    old-fashioned MS-DOS binaries and the newer PE binaries. To make the transition
    less confusing, every PE file starts with an MS-DOS header so that it can also
    be interpreted as an MS-DOS binary, at least in a limited sense. The main function
    of the MS-DOS header is to describe how to load and execute an *MS-DOS stub*,
    which comes right after the MSDOS header. This stub is usually just a small MS-DOS
    program, which is run instead of the main program when the user executes a PE
    binary in MSDOS. The MS-DOS stub program typically prints a string like “This
    program cannot be run in DOS mode” and then exits. However, in principle, it can
    be a full-fledged MS-DOS version of the program!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PE 被引入时，曾有一个过渡期，用户同时使用旧式的 MS-DOS 二进制文件和较新的 PE 二进制文件。为了让过渡不那么混乱，每个 PE 文件都以
    MS-DOS 头部开始，这样它也可以被当作 MS-DOS 二进制文件解释，至少在某种程度上是如此。MS-DOS 头部的主要功能是描述如何加载和执行紧跟其后的
    *MS-DOS 存根*。这个存根通常只是一个小型的 MS-DOS 程序，当用户在 MSDOS 中执行 PE 二进制文件时，它会替代主程序运行。MS-DOS
    存根程序通常会打印出类似“该程序无法在 DOS 模式下运行”的字符串，然后退出。然而，原则上，它也可以是该程序的完整 MS-DOS 版本！
- en: The MS-DOS header starts with a magic value, which consists of the ASCII characters
    “MZ.”^([1](footnote.xhtml#ch03fn_1)) For this reason, it’s also sometimes referred
    to as an *MZ header*. For the purposes of this chapter, the only other important
    field in the MS-DOS header is the last field, called `e_lfanew`. This field contains
    the file offset at which the *real* PE binary begins. Thus, when a PE-aware program
    loader opens the binary, it can read the MS-DOS header and then skip past it and
    the MS-DOS stub to go right to the start of the PE headers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MS-DOS 头部以一个魔数值开始，由 ASCII 字符“MZ”组成。^([1](footnote.xhtml#ch03fn_1)) 因此，它有时也被称为
    *MZ 头部*。对于本章的目的，MS-DOS 头部中唯一其他重要的字段是最后一个字段，叫做 `e_lfanew`。该字段包含了 PE 二进制文件开始的文件偏移量。因此，当一个支持
    PE 的程序加载器打开二进制文件时，它可以读取 MS-DOS 头部，然后跳过它和 MS-DOS 存根，直接跳到 PE 头部的开始位置。
- en: 3.2 The PE Signature, File Header, and Optional Header
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2 PE 签名、文件头和可选头
- en: 'You can consider the PE headers analogous to ELF’s executable header, except
    that in PE, the “executable header” is split into three parts: a 32-bit signature,
    a *PE file header*, and a *PE optional header*. If you take a look in *WinNT.h*,
    you can see that there’s a `struct` called `IMAGE_NT_HEADERS64`, which encompasses
    all three of these parts. You could say that `struct IMAGE_NT_HEADERS64` as a
    whole is PE’s version of the executable header. However, in practice, the signature,
    file header, and optional header are considered separate entities.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 PE 头部类比为 ELF 的可执行文件头，只是 PE 中的“可执行文件头”被拆分为三个部分：一个 32 位签名，一个 *PE 文件头*，和一个
    *PE 可选头*。如果你查看 *WinNT.h*，你会看到有一个名为 `IMAGE_NT_HEADERS64` 的 `struct`，它包含了这三个部分。可以说，`struct
    IMAGE_NT_HEADERS64` 整体上就是 PE 版本的可执行文件头。然而，在实际使用中，签名、文件头和可选头被视为独立的实体。
- en: '![image](Images/f059-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f059-01.jpg)'
- en: '*Figure 3-1: A PE32+ binary at a glance*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：PE32+ 二进制文件一览*'
- en: In the next few sections, I’ll discuss each of these header components. To see
    all the header elements in action, let’s look at *hello.exe*, a PE version of
    the `compilation_example` program from [Chapter 1](ch01.xhtml#ch01). [Listing
    3-1](ch03.xhtml#ch03list1) shows a dump of the most important header elements
    and the `DataDirectory` of *hello.exe*. I’ll explain what the `DataDirectory`
    is in a moment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个章节中，我将讨论这些头部组件的每个部分。为了查看所有头部元素的实际应用，我们来看一下 *hello.exe*，这是第 [1 章](ch01.xhtml#ch01)
    中 `compilation_example` 程序的 PE 版本。[清单 3-1](ch03.xhtml#ch03list1) 显示了 *hello.exe*
    中最重要的头部元素和 `DataDirectory` 的转储。我稍后会解释 `DataDirectory` 是什么。
- en: '*Listing 3-1: Example dump of PE headers and* DataDirectory'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-1：PE 头部和* DataDirectory 的示例转储'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*3.2.1 The PE Signature*'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*3.2.1 PE 签名*'
- en: The PE signature is simply a string containing the ASCII characters “PE,” followed
    by two `NULL` characters. It’s analogous to the magic bytes in the `e_ident` field
    in ELF’s executable header.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PE 签名只是一个包含 ASCII 字符“PE”的字符串，后面跟着两个 `NULL` 字符。它类似于 ELF 可执行文件头中的 `e_ident` 字段中的魔法字节。
- en: '*3.2.2 The PE File Header*'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*3.2.2 PE 文件头*'
- en: The file header describes general properties of the file. The most important
    fields are `Machine`, `NumberOfSections`, `SizeOfOptionalHeader`, and `Characteristics`.
    The two fields describing the symbol table are deprecated, and PE files should
    no longer make use of embedded symbols and debugging information. Instead, these
    symbols are optionally emitted as part of a separate debugging file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 文件头描述了文件的基本属性。最重要的字段有 `Machine`、`NumberOfSections`、`SizeOfOptionalHeader` 和
    `Characteristics`。描述符号表的两个字段已经废弃，PE 文件不再使用嵌入的符号和调试信息。相反，这些符号会作为单独的调试文件的一部分进行选择性地输出。
- en: As in ELF’s `e_machine`, the `Machine` field describes the architecture of the
    machine for which the PE file is intended. In this case, this is x86-64 (defined
    as the constant `0x8664`) ➊. The `NumberOfSections` field is simply the number
    of entries in the section header table, and `SizeOfOptionalHeader` is the size
    in bytes of the optional header that follows the file header. The `Characteristics`
    field contains flags describing things such as the endianness of the binary, whether
    it’s a DLL, and whether it has been stripped. As shown in the `objdump` output,
    the example binary contains `Characteristics` flags that mark it as a large-address-aware
    executable file ➋.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与ELF的`e_machine`类似，`Machine`字段描述了PE文件所针对的机器架构。在这种情况下，它是x86-64（定义为常量`0x8664`）➊。`NumberOfSections`字段仅表示区段头表中的条目数量，`SizeOfOptionalHeader`表示可选头的字节大小，该可选头位于文件头之后。`Characteristics`字段包含描述诸如二进制文件字节序、是否为DLL、以及是否被剥离等内容的标志。如`objdump`的输出所示，示例二进制文件包含`Characteristics`标志，标识它为一个大地址感知的可执行文件➋。
- en: '*3.2.3 The PE Optional Header*'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*3.2.3 PE可选头*'
- en: Despite what the name suggests, the PE optional header is not really optional
    for executables (though it may be missing in object files). In fact, you’ll likely
    find the PE optional header in any PE executable you’ll encounter. It contains
    lots of fields, and I’ll go over the most important ones here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名称上看起来是可选的，PE可选头对于可执行文件而言实际上并非完全可选（尽管它可能在目标文件中缺失）。事实上，你可能会在任何遇到的PE可执行文件中发现PE可选头。它包含许多字段，下面我将讲解其中最重要的几个。
- en: First, there’s a 16-bit magic value, which is set to `0x020b` for 64-bit PE
    files ➌. There are also several fields describing the major and minor version
    numbers of the linker that was used to create the binary, as well as the minimal
    operating system version needed to run the binary. The `ImageBase` field ➏ describes
    the address at which to load the binary (PE binaries are designed to be loaded
    at a specific virtual address). Other pointer fields contain *relative virtual
    addresses (RVAs)*, which are intended to be added to the base address to derive
    a virtual address. For instance, the `BaseOfCode` field ➎ specifies the base address
    of the code sections as an RVA. Thus, you can find the base virtual address of
    the code sections by computing `ImageBase+BaseOfCode`. As you may have guessed,
    the `AddressOfEntryPoint` field ➍ contains the entry point address of the binary,
    also specified as an RVA.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一个16位的魔法值，对于64位PE文件，它被设置为`0x020b`➌。还有几个字段描述了用来创建二进制文件的链接器的主版本号和次版本号，以及运行该二进制文件所需的最小操作系统版本。`ImageBase`字段➏描述了加载二进制文件时的地址（PE二进制文件设计为加载到特定的虚拟地址）。其他指针字段包含*相对虚拟地址（RVA）*，这些地址旨在与基址相加以推导出虚拟地址。例如，`BaseOfCode`字段➎指定了代码区段的基地址作为RVA。因此，你可以通过计算`ImageBase+BaseOfCode`来找到代码区段的基虚拟地址。如你所猜测的那样，`AddressOfEntryPoint`字段➍包含了二进制文件的入口点地址，也以RVA形式指定。
- en: Probably the least self-explanatory field in the optional header is the `DataDirectory`
    array ➐. The `DataDirectory` contains entries of a `struct` type called `IMAGE_DATA_DIRECTORY`,
    which contains an RVA and a size. Every entry in the array describes the starting
    RVA and size of an important portion of the binary; the precise interpretation
    of the entry depends on its index in the array. The most important entries are
    the one at index 0, which describes the base RVA and size of the *export directory*
    (basically a table of exported functions); the entry at index 1, which describes
    the *import directory* (a table of imported functions); and the entry at index
    5, which describes the relocation table. I’ll talk more about the export and import
    tables when I discuss PE sections. The `DataDirectory` essentially serves as a
    shortcut for the loader, allowing it to quickly look up particular portions of
    data without having to iterate through the section header table.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在可选头中，可能最不直观的字段是`DataDirectory`数组➐。`DataDirectory`包含类型为`IMAGE_DATA_DIRECTORY`的`struct`条目，该结构包含一个RVA和一个大小。数组中的每个条目描述了二进制文件中某个重要部分的起始RVA和大小；该条目的具体解释取决于它在数组中的索引。最重要的条目是索引为0的，它描述了*导出目录*的基RVA和大小（基本上是一个导出函数的表）；索引为1的条目描述了*导入目录*（一个导入函数的表）；索引为5的条目描述了重定位表。当我讨论PE区段时，我会进一步讲解导出和导入表。`DataDirectory`基本上为加载器提供了一种快捷方式，使它能够快速查找特定的数据部分，而无需遍历区段头表。
- en: 3.3 The Section Header Table
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3 区段头表
- en: In most ways, the PE section header table is analogous to ELF’s section header
    table. It’s an array of `IMAGE_SECTION_HEADER` structures, each of which describes
    a single section, denoting its size in the file and in memory (`SizeOfRawData`
    and `VirtualSize`), its file offset and virtual address (`PointerToRawData` and
    `VirtualAddress`), relocation information, and any flags (`Characteristics`).
    Among other things, the flags describe whether the section is executable, readable,
    writable, or some combination of these. Instead of referring to a string table
    as the ELF section headers do, PE section headers specify the section name using
    a simple character array field, aptly called `Name`. Because the array is only
    8 bytes long, PE section names are limited to 8 characters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数方面，PE 节头表与 ELF 的节头表类似。它是一个 `IMAGE_SECTION_HEADER` 结构体的数组，每个结构体描述一个节，标明其在文件和内存中的大小（`SizeOfRawData`
    和 `VirtualSize`）、文件偏移和虚拟地址（`PointerToRawData` 和 `VirtualAddress`）、重定位信息以及任何标志（`Characteristics`）。其中一些标志描述节是否可执行、可读、可写，或这些特性的组合。与
    ELF 节头表引用字符串表不同，PE 节头表使用一个简单的字符数组字段（恰当地命名为 `Name`）来指定节的名称。由于该数组只有 8 字节长，PE 节名称的长度限制为
    8 个字符。
- en: Unlike ELF, the PE format does not explicitly distinguish between sections and
    segments. The closest thing PE files have to ELF’s execution view is the `DataDirectory`,
    which provides the loader with a shortcut to certain portions of the binary needed
    for setting up the execution. Other than that, there is no separate program header
    table; the section header table is used for both linking and loading.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ELF 不同，PE 格式没有明确区分节和段。PE 文件最接近 ELF 执行视图的部分是 `DataDirectory`，它为加载程序提供了快速访问二进制文件中设置执行所需的某些部分的捷径。除此之外，没有单独的程序头表；节头表既用于链接也用于加载。
- en: 3.4 Sections
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4 节
- en: Many of the sections in PE files are directly comparable to ELF sections, often
    even having (almost) the same name. [Listing 3-2](ch03.xhtml#ch03list2) shows
    an overview of the sections in *hello.exe*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: PE 文件中的许多部分可以直接与 ELF 部分进行比较，通常甚至有（几乎）相同的名称。[列表 3-2](ch03.xhtml#ch03list2) 展示了
    *hello.exe* 中各部分的概述。
- en: '*Listing 3-2: Overview of sections in example PE binary*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-2：示例 PE 二进制文件中各部分的概述*'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see in [Listing 3-2](ch03.xhtml#ch03list2), there’s a `.text` section
    containing code, an .rdata section containing read-only data (roughly equivalent
    to `.rodata` in ELF), and a `.data` section containing readable/writable data.
    Usually there’s also a `.bss` section for zero-initialized data, though it’s missing
    in this simple example binary. There’s also a `.reloc` section, which contains
    relocation information. One important thing to note is that PE compilers like
    Visual Studio sometimes place read-only data in the `.text` section (mixed in
    with the code) instead of in `.rdata`. This can be problematic during disassembly,
    because it makes it possible to accidentally interpret constant data as instructions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [列表 3-2](ch03.xhtml#ch03list2) 中所示，`.text` 部分包含代码，`.rdata` 部分包含只读数据（大致相当于
    ELF 中的 `.rodata`），而 `.data` 部分包含可读/可写数据。通常还会有一个 `.bss` 部分用于零初始化数据，尽管在这个简单的示例二进制文件中它缺失了。还有一个
    `.reloc` 部分，包含重定位信息。一个需要注意的重要点是，像 Visual Studio 这样的 PE 编译器有时会将只读数据放在 `.text` 部分（与代码混合在一起），而不是放在
    `.rdata` 中。这在反汇编时可能会导致问题，因为它可能会误将常量数据解释为指令。
- en: '*3.4.1 The .edata and .idata Sections*'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*3.4.1 .edata 和 .idata 部分*'
- en: The most important PE sections that have no direct equivalent in ELF are `.edata`
    and `.idata`, which contain tables of exported and imported functions, respectively.
    The export directory and import directory entries in the `DataDirectory` array
    refer to these sections. The `.idata` section specifies which symbols (functions
    and data) the binary imports from shared libraries, or DLLs in Windows terminology.
    The `.edata` section lists the symbols and their addresses that the binary exports.
    Thus, to resolve references to external symbols, the loader needs to match up
    the required imports with the export table of the DLL that provides the required
    symbols.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PE 文件中，最重要的部分是 `.edata` 和 `.idata`，它们在 ELF 中没有直接对应的部分，分别包含导出和导入函数的表格。`DataDirectory`
    数组中的导出目录和导入目录条目指向这些部分。`.idata` 部分指定了二进制文件从共享库或 Windows 中的 DLL 导入的符号（函数和数据）。`.edata`
    部分列出了二进制文件导出的符号及其地址。因此，为了解析外部符号的引用，加载程序需要将所需的导入与提供所需符号的 DLL 的导出表进行匹配。
- en: In practice, you may find that there are no separate `.idata` and .edata sections.
    In fact, they’re not present in the example binary in [Listing 3-2](ch03.xhtml#ch03list2)
    either! When these sections aren’t present, they’re usually merged into `.rdata`,
    but their contents and workings remain the same.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可能会发现没有单独的`.idata`和.edata部分。事实上，它们在[清单3-2](ch03.xhtml#ch03list2)中的示例二进制文件中也不存在！当这些部分不存在时，通常会将它们合并到`.rdata`中，但它们的内容和作用仍然保持不变。
- en: When the loader resolves dependencies, it writes the resolved addresses into
    the *Import Address Table (IAT)*. Similar to the Global Offset Table in ELF, the
    IAT is simply a table of resolved pointers with one slot per pointer. The IAT
    is also part of the `.idata` section, and it initially contains pointers to the
    names or identifying numbers of the symbols to be imported. The dynamic loader
    then replaces these pointers with pointers to the actual imported functions or
    variables. A call to a library function is then implemented as a call to a *thunk*
    for that function, which is nothing more than an indirect jump through the IAT
    slot for the function. [Listing 3-3](ch03.xhtml#ch03list3) shows what thunks look
    like in practice.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载器解析依赖关系时，它会将解析后的地址写入*导入地址表（IAT）*中。类似于ELF中的全局偏移表，IAT只是一个已解析指针的表格，每个指针占一个槽位。IAT也是`.idata`部分的一部分，最初包含指向要导入的符号名称或标识号的指针。动态加载器随后将这些指针替换为指向实际导入函数或变量的指针。对库函数的调用实际上是对该函数的*thunk*的调用，thunk不过是通过IAT槽位进行的间接跳转。[清单3-3](ch03.xhtml#ch03list3)展示了thunk在实践中的样子。
- en: '*Listing 3-3: Example PE thunks*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单3-3：PE thunk示例*'
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’ll often see thunks grouped together as in [Listing 3-3](ch03.xhtml#ch03list3).
    Note that the target addresses for the jumps ➊ through ➎ are all stored in the
    import directory, contained in the `.rdata` section, which starts at address `0x140002000`.
    These are jump slots in the IAT.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你会经常看到thunks被分组在一起，如[清单3-3](ch03.xhtml#ch03list3)所示。请注意，跳转的目标地址从➊到➎都存储在导入目录中，位于`.rdata`部分，该部分从地址`0x140002000`开始。这些是IAT中的跳转槽位。
- en: '*3.4.2 Padding in PE Code Sections*'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*3.4.2 PE代码段中的填充*'
- en: Incidentally, when disassembling PE files, you may notice that there are lots
    of `int3` instructions. Visual Studio emits these instructions as padding (instead
    of the `nop` instructions used by `gcc`) to align functions and blocks of code
    in memory such that they can be accessed efficiently.^([2](footnote.xhtml#ch03fn_2))
    The `int3` instruction is normally used by debuggers to set breakpoints; it causes
    the program to trap to the debugger or to crash if no debugger is present. This
    is okay for padding code since padding instructions are not intended to be executed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，在反汇编PE文件时，你可能会注意到有很多`int3`指令。Visual Studio将这些指令作为填充指令（而不是`gcc`使用的`nop`指令）以对齐内存中的函数和代码块，使其能够高效访问。^([2](footnote.xhtml#ch03fn_2))
    `int3`指令通常由调试器用于设置断点；它会导致程序陷入调试器，或者如果没有调试器的话，则导致程序崩溃。由于填充指令并不打算被执行，所以这对于填充代码来说是没问题的。
- en: 3.5 Summary
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.5 小结
- en: 'If you’ve made it through both [Chapter 2](ch02.xhtml#ch02) and this chapter,
    I applaud your perseverance. After reading this chapter, you should now be aware
    of the main similarities and differences between ELF and PE. This will help you
    if you are interested in analyzing binaries on the Windows platform. In the next
    chapter, you’ll get your hands dirty and start building your first real binary
    analysis tool: a binary loading library that can load up ELF and PE binaries for
    analysis.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成了[第2章](ch02.xhtml#ch02)和本章的内容，我为你的坚持点赞。阅读完本章后，你应该已经了解了ELF和PE之间的主要相似点和不同点。如果你对在Windows平台上分析二进制文件感兴趣，这将对你有所帮助。在下一章，你将动手开始构建第一个真正的二进制分析工具：一个可以加载ELF和PE二进制文件进行分析的二进制加载库。
- en: Exercises
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 习题
- en: 1\. Manual Header Inspection
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 手动头部检查
- en: Just as you did for ELF binaries in [Chapter 2](ch02.xhtml#ch02), use a hex
    viewer like `xxd` to view the bytes in a PE binary. You can use the same command
    as before, `xxd` *program.exe* `| head -n 30`, where *program.exe* is your PE
    binary. Can you identify the bytes representing the PE header and make sense of
    all of the header fields?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第2章](ch02.xhtml#ch02)中分析ELF二进制文件时一样，使用像`xxd`这样的十六进制查看器查看PE二进制文件中的字节。你可以使用之前相同的命令，`xxd`
    *program.exe* `| head -n 30`，其中*program.exe*是你的PE二进制文件。你能识别表示PE头部的字节并理解所有头部字段的含义吗？
- en: 2\. Disk Representation vs. Memory Representation
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 磁盘表示与内存表示
- en: Use `readelf` to view the contents of a PE binary. Then make an illustration
    of the binary’s on-disk representation versus its representation in memory. What
    are the major differences?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`readelf`查看PE二进制文件的内容。然后绘制该二进制文件在磁盘上的表示与其在内存中的表示之间的对比图。它们之间有什么主要区别？
- en: 3\. PE vs. ELF
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. PE与ELF
- en: Use `objdump` to disassemble an ELF and a PE binary. Do the binaries use different
    kinds of code and data constructs? Can you identify some code or data patterns
    that are typical for the ELF compiler and the PE compiler you’re using, respectively?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`objdump`反汇编一个ELF和一个PE二进制文件。二进制文件使用不同类型的代码和数据结构吗？你能分别识别出适用于ELF编译器和PE编译器的一些典型代码或数据模式吗？
