["```\n{-# OPTIONS -Wall #-}\n\nmodule MagneticField where\n\nimport SimpleVec ( Vec(..), R\n                 , (^-^), (*^), (^/), (<.>), (><)\n                 , magnitude, kHat, zComp )\nimport CoordinateSystems\n    ( VectorField\n    , rVF, displacement, addVectorFields, cart, vfGrad )\nimport Geometry ( Curve(..), Surface(..), Volume(..) )\nimport ElectricField\n    ( curveSample, surfaceSample, volumeSample\n    , vectorSurfaceIntegral, vectorVolumeIntegral, mu0 )\nimport Current\n    ( Current, CurrentDistribution(..)\n    , wireSolenoid, wireToroid, crossedLineIntegral, circularCurrentLoop )\n```", "```\nbFieldFromLineCurrent\n    :: Current      -- current (in Amps)\n    -> Curve\n    -> VectorField  -- magnetic field (in Tesla)\nbFieldFromLineCurrent i c r\n    = let coeff = -mu0 * i / (4 * pi)  -- SI units\n          integrand r' = d ^/ magnitude d ** 3\n              where d = displacement r' r\n      in coeff *^ crossedLineIntegral (curveSample 1000) integrand c\n```", "```\nbField :: CurrentDistribution -> VectorField\nbField (LineCurrent    i  c) = bFieldFromLineCurrent    i  c\nbField (SurfaceCurrent kC s) = bFieldFromSurfaceCurrent kC s\nbField (VolumeCurrent  j  v) = bFieldFromVolumeCurrent  j  v\nbField (MultipleCurrents cds) = addVectorFields $ map bField cds\n```", "```\ncircleB :: VectorField  -- magnetic field\ncircleB = bField $ circularCurrentLoop 0.25 10\n```", "```\nbFieldPicLoop :: IO ()\nbFieldPicLoop\n    = vfGrad (**0.2) (\\(y,z) -> cart 0 y z) (\\v -> (yComp v, zComp v))\n      \"bFieldPicLoop.png\" 20 circleB\n```", "```\nbFieldIdealDipole :: Vec          -- magnetic dipole moment\n                  -> VectorField  -- magnetic field\nbFieldIdealDipole m r\n    = let coeff = mu0 / (4 * pi)    -- SI units\n          rMag = magnitude (rVF r)\n          rUnit = rVF r ^/ rMag\n      in coeff *^ (1 / rMag**3) *^ (3 *^ (m <.> rUnit) *^ rUnit ^-^ m)\n```", "```\nbFieldPicIdealDipole :: IO ()\nbFieldPicIdealDipole\n    = vfGrad (**0.2) (\\(y,z) -> cart 0 y z) (\\v -> (yComp v, zComp v))\n      \"bFieldPicIdealDipole.png\" 20 (bFieldIdealDipole kHat)\n```", "```\nPrelude> :l MagneticField\n[ 1 of 14] Compiling Newton2          ( Newton2.hs, interpreted )\n[ 2 of 14] Compiling Mechanics1D      ( Mechanics1D.hs, interpreted ) [ 3 of 14] Compiling SimpleVec        ( SimpleVec.hs, interpreted )\n[ 4 of 14] Compiling Mechanics3D      ( Mechanics3D.hs, interpreted )\n[ 5 of 14] Compiling MultipleObjects  ( MultipleObjects.hs, interpreted )\n[ 6 of 14] Compiling MOExamples       ( MOExamples.hs, interpreted )\n[ 7 of 14] Compiling Electricity      ( Electricity.hs, interpreted )\n[ 8 of 14] Compiling CoordinateSystems ( CoordinateSystems.hs, interpreted )\n[ 9 of 14] Compiling Geometry         ( Geometry.hs, interpreted )\n[10 of 14] Compiling Integrals        ( Integrals.lhs, interpreted )\n[11 of 14] Compiling Charge           ( Charge.hs, interpreted )\n[12 of 14] Compiling ElectricField    ( ElectricField.hs, interpreted )\n[13 of 14] Compiling Current          ( Current.hs, interpreted )\n[14 of 14] Compiling MagneticField    ( MagneticField.hs, interpreted )\nOk, 14 modules loaded.\n*MagneticField> bField (wireSolenoid 0.01 0.1 100 10) (cart 0 0 0)\nvec 1.3405110355080298e-18 (-9.787828127867364e-7) 1.2326629789010703e-3\n*MagneticField> bField (wireSolenoid 0.01 0.1 1000 10) (cart 0 0 0)\nvec 9.429923508719186e-17 7.58448310225564e-6 1.2767867386980748e-2\n```", "```\nbFieldPicSolenoid10 :: IO ()\nbFieldPicSolenoid10 = vfGrad (**0.2) (\\(y,z) -> cart 0 (0.02*y) (0.02*z))\n                     (\\v -> (yComp v, zComp v)) \"bFieldPicSolenoid10.png\" 20\n                     (bField $ wireSolenoid 0.01 0.1 100 10)\n\nbFieldPicSolenoid100 :: IO ()\nbFieldPicSolenoid100 = vfGrad (**0.2) (\\(y,z) -> cart 0 (0.02*y) (0.02*z))\n                     (\\v -> (yComp v, zComp v)) \"bFieldPicSolenoid100.png\" 20\n                     (bField $ wireSolenoid 0.01 0.1 1000 10)\n```", "```\nbFieldWireToroid :: VectorField\nbFieldWireToroid = bField (wireToroid 0.3 1 50 10)\n```", "```\nbFieldPicWireToroid :: IO ()\nbFieldPicWireToroid\n    = vfGrad (**0.2) (\\(x,y) -> cart (1.5*x) (1.5*y) 0)\n      (\\v -> (xComp v, yComp v)) \"bFieldPicWireToroid.png\" 20 bFieldWireToroid\n```", "```\nbFieldFromSurfaceCurrent\n    :: VectorField  -- surface current density\n    -> Surface      -- surface across which current flows\n    -> VectorField  -- magnetic field (in T)\nbFieldFromSurfaceCurrent kCurrent s r\n    = let coeff = mu0 / (4 * pi)  -- SI units\n          integrand r' = (kCurrent r' >< d) ^/ magnitude d ** 3\n              where d = displacement r' r\n      in coeff *^ vectorSurfaceIntegral (surfaceSample 200) integrand s\n```", "```\nbFieldFromVolumeCurrent\n    :: VectorField  -- volume current density\n    -> Volume       -- volume throughout which current flows\n    -> VectorField  -- magnetic field (in T)\nbFieldFromVolumeCurrent j vol r\n    = let coeff = mu0 / (4 * pi)  -- SI units\n          integrand r' = (j r' >< d) ^/ magnitude d ** 3\n              where d = displacement r' r\n      in coeff *^ vectorVolumeIntegral (volumeSample 50) integrand vol\n```", "```\nbField :: CurrentDistribution -> VectorField\n```", "```\nmagneticFluxFromField :: VectorField -> Surface -> R\nmagneticFluxFromField = undefined\n```", "```\nmagneticFluxFromCurrent :: CurrentDistribution -> Surface -> R\nmagneticFluxFromCurrent = undefined\n```", "```\nvisLoop :: IO ()\nvisLoop = undefined\n```", "```\nbFieldPicSolenoid1000 :: IO ()\nbFieldPicSolenoid1000\n    = vfGrad (**0.2) (\\(y,z) -> cart 0 (0.02*y) (0.02*z))\n             (\\v -> (yComp v, zComp v)) \"bFieldPicSolenoid1000.png\" 20\n             (bField $ wireSolenoid 0.01 0.1 10000 10)\n```"]