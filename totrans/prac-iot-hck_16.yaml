- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: 'Medium Range Radio: Hacking Wi-Fi'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 中程无线电：破解Wi-Fi
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Medium-range radio technologies can connect devices across a range of up to
    100 meters (approximately 328 feet). In this chapter, we focus on Wi-Fi, the most
    popular technology in IoT devices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 中程无线电技术可以连接设备，覆盖范围可达100米（大约328英尺）。在本章中，我们重点介绍Wi-Fi，这是物联网设备中最流行的技术。
- en: We explain how Wi-Fi works and then describe some of the most important attacks
    against it. Using a variety of tools, we perform disassociation and association
    attacks. We also abuse Wi-Fi Direct and walk through some popular ways of breaking
    WPA2 encryption.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解释Wi-Fi的工作原理，并描述一些针对Wi-Fi的最重要攻击。通过使用各种工具，我们执行去关联和关联攻击。我们还会滥用Wi-Fi Direct，并介绍一些破解WPA2加密的常见方法。
- en: How Wi-Fi Works
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wi-Fi的工作原理
- en: Other medium-range radio technologies, such as Thread, Zigbee, and Z-Wave, were
    designed for low-rate applications with a maximum of 250Kbps, but Wi-Fi was created
    for high-rate data transfers. Wi-Fi also has a higher power consumption than the
    other technologies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其他中程无线电技术，如Thread、Zigbee和Z-Wave，设计用于低速率应用，最大速度为250Kbps，但Wi-Fi是为高速数据传输而创建的。与其他技术相比，Wi-Fi的功耗也更高。
- en: Wi-Fi connections involve an *access point (AP)*, the networking device that
    allows Wi-Fi devices to connect to a network, and a client that can connect to
    the AP. When a client successfully connects to an AP and data moves freely between
    them, we say the client is *associated* with the AP. We often use the term *station*
    (*STA*) to refer to any device that is capable of using the Wi-Fi protocol.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi连接涉及一个*接入点（AP）*，这是允许Wi-Fi设备连接到网络的网络设备，以及可以连接到AP的客户端。当客户端成功连接到AP并且数据在它们之间自由流动时，我们说客户端与AP*关联*。我们常用*站点（STA）*一词来指代任何能够使用Wi-Fi协议的设备。
- en: A Wi-Fi network can operate in either open or secure mode. In *open mode*, the
    AP won’t require authentication and will accept any client that attempts to connect.
    In *secure mode*, some form of authentication needs to take place before a client
    is connected to the AP. Some networks might also choose to be *hidden*; in that
    case, the network won’t broadcast its ESSID. An *ESSID* is the name of the network,
    such as “Guest” or “Free-WiFi.” A *BSSID* is the network’s MAC address.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi网络可以在开放模式或安全模式下运行。在*开放模式*下，AP不需要认证，任何试图连接的客户端都会被接受。在*安全模式*下，客户端连接到AP之前，必须进行某种形式的认证。某些网络还可以选择*隐藏*；在这种情况下，网络不会广播其ESSID。*ESSID*是网络的名称，例如“Guest”或“Free-WiFi”。*BSSID*是网络的MAC地址。
- en: Wi-Fi connections share data using *802.11*, a set of protocols that implement
    Wi-Fi communications. More than 15 different protocols are in the 802.11 spectrum,
    and they’re labeled with letters. You might already be familiar with 802.11 a/b/g/n/ac,
    because you might have used any or all of them in the last 20 years. The protocols
    support different modulations and work on different frequencies and physical layers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi连接使用*802.11*协议组进行数据共享，这是一组实现Wi-Fi通信的协议。802.11频谱中有15种不同的协议，它们通过字母进行标记。你可能已经熟悉802.11
    a/b/g/n/ac，因为在过去的20年里，你可能已经使用过其中的某些或全部协议。这些协议支持不同的调制方式，并在不同的频率和物理层上工作。
- en: 'In 802.11, data is transferred via three major types of frames: data, control,
    and management. For the purpose of this chapter, we’ll work only with management
    frames. A *management frame* manages the network; for example, it’s used while
    searching for a network, authenticating clients, and even associating clients
    with APs.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在802.11中，数据通过三种主要的帧类型传输：数据帧、控制帧和管理帧。本章的目的是只处理管理帧。*管理帧*用于管理网络；例如，它在搜索网络、认证客户端，甚至将客户端与接入点（AP）关联时都会使用。
- en: Hardware for Wi-Fi Security Assessments
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wi-Fi安全评估的硬件
- en: Typically, a Wi-Fi security assessment includes attacks against APs and wireless
    stations. When it comes to testing IoT networks, both kinds of attacks are critical,
    because more and more devices are either capable of connecting to a Wi-Fi network
    or serving as APs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Wi-Fi安全评估包括对接入点（AP）和无线站点的攻击。在测试物联网（IoT）网络时，这两种攻击都至关重要，因为越来越多的设备不仅能够连接到Wi-Fi网络，还可以作为接入点（AP）提供服务。
- en: When targeting IoT devices in a wireless assessment, you’ll need a wireless
    card that supports AP monitor mode and is capable of packet injection. *Monitor
    mode* lets your device monitor all traffic it receives from the wireless network.
    *Packet injection capabilities* allow your card to spoof packets to appear as
    if they originate from a different source. For the purpose of this chapter, we
    used an Alfa Atheros AWUS036NHA network card.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在针对物联网设备进行无线评估时，您需要一张支持AP监控模式并具备数据包注入功能的无线网卡。*监控模式*让您的设备能够监控从无线网络接收到的所有流量。*数据包注入功能*允许您的网卡伪造数据包，使其看起来像是来自不同的源。为了本章的目的，我们使用了一张Alfa
    Atheros AWUS036NHA网卡。
- en: In addition, you might need a configurable AP to test the various Wi-Fi settings.
    We used a portable TP-Link AP, but literally any AP would do. Unless the attacks
    are part of a red teaming engagement, the AP’s transmission power or the type
    of antenna you use aren’t important.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可能还需要一个可配置的AP来测试各种Wi-Fi设置。我们使用了一个便携式TP-Link AP，但实际上任何AP都可以。除非攻击是红队演习的一部分，否则AP的传输功率或您使用的天线类型并不重要。
- en: Wi-Fi Attacks Against Wireless Clients
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对无线客户端的Wi-Fi攻击
- en: Attacks against wireless clients usually exploit the fact that 802.11 management
    frames aren’t cryptographically protected, leaving the packets exposed to eavesdropping,
    modification, or replay. You could accomplish all of these attacks through association
    attacks, which let the attacker become a man in the middle. Attackers can also
    perform deauthentication and denial-of-service attacks, which disrupt the victim’s
    Wi-Fi connectivity to their AP.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 针对无线客户端的攻击通常利用802.11管理帧没有加密保护的事实，从而使数据包暴露于窃听、修改或重放。您可以通过关联攻击来完成所有这些攻击，关联攻击让攻击者成为中间人。攻击者还可以执行去认证和拒绝服务攻击，这会干扰受害者与AP的Wi-Fi连接。
- en: Deauthentication and Denial-of-Service Attacks
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 去认证和拒绝服务攻击
- en: Management frames in 802.11 can’t stop an attacker from spoofing a device’s
    MAC address. As a result, an attacker can forge spoofed *Deauthenticate* or *Disassociate
    frames*. These are management frames normally sent to terminate a client’s connection
    to the AP. For example, they’re sent if the client connects to another AP or simply
    disconnects from the original network. If forged, an attacker can use these frames
    to disrupt existing associations to specific clients.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 802.11中的管理帧无法阻止攻击者伪造设备的MAC地址。因此，攻击者可以伪造*去认证*或*断开关联帧*。这些是通常用于终止客户端与AP连接的管理帧。例如，当客户端连接到另一个AP或只是从原始网络断开时，会发送这些帧。如果伪造，攻击者可以利用这些帧中断与特定客户端的现有关联。
- en: Alternatively, instead of making the client disassociate from the AP, the attacker
    could flood the AP with authentication requests. These, in turn, cause a denial-of-service
    attack by keeping legitimate clients from connecting to the AP.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，攻击者可以通过向AP发送大量认证请求，来代替使客户端断开与AP的关联。这些请求会导致拒绝服务攻击，阻止合法客户端连接到AP。
- en: Both attacks are known denial-of-service attacks mitigated in *802.11w*, a standard
    that hasn’t yet propagated in the IoT world. In this section, we’ll perform a
    deauthentication attack that disconnects all wireless clients from an AP.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种攻击是已知的拒绝服务攻击，在*802.11w*中得到了缓解，但该标准在物联网领域尚未普及。在本节中，我们将执行一种去认证攻击，断开所有无线客户端与AP的连接。
- en: 'Start by installing the Aircrack-ng suite if you’re not using Kali, where it’s
    preinstalled. *Aircrack-ng* contains Wi-Fi assessment tools. Ensure your network
    card with packet injection capabilities is plugged in. Then use the `iwconfig`
    utility to identify the interface name belonging to the wireless card connected
    to your system:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用Kali（其预装了Aircrack-ng套件），请先安装Aircrack-ng套件。*Aircrack-ng*包含Wi-Fi评估工具。确保插入支持数据包注入功能的网卡。然后使用`iwconfig`工具识别连接到您系统的无线网卡的接口名称：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output indicates that the wireless interface is `wlan0` 1.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示无线接口是`wlan0` 1。
- en: 'Because some processes in the system can interfere with the tools in the Aircrack-ng
    suite, use the Airmon-ng tool to check and automatically kill these processes.
    To do this, first disable the wireless interface using `ifconfig`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于系统中的某些进程可能会干扰Aircrack-ng工具包的使用，因此请使用Airmon-ng工具来检查并自动终止这些进程。为此，首先使用`ifconfig`禁用无线接口：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now set the wireless card to monitor mode using Airmon-ng:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用Airmon-ng将无线网卡设置为监控模式：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This tool creates a new interface, named `wlan0mon`, which you can use to run
    a basic sniffing session with Airodump-ng. The following command identifies the
    AP’s BSSID (its MAC address) and the channel on which it’s transmitting:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具创建了一个名为`wlan0mon`的新接口，你可以使用它运行一个基本的嗅探会话，使用Airodump-ng。以下命令识别AP的BSSID（其MAC地址）和其传输的频道：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Currently, the BSSID is `82:16:F9:6E:FB:56` and the channel is `6`. We pass
    this data to Airodump-ng to identify clients connected to the AP:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，BSSID是`82:16:F9:6E:FB:56`，频道是`6`。我们将此数据传递给Airodump-ng以识别连接到AP的客户端：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Based on this output, we identify one client connected to the AP. The client
    has the BSSID 50:82:D5:DE:6F:45 (the MAC address of their wireless network interface).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此输出，我们识别出一个连接到AP的客户端。该客户端的BSSID是50:82:D5:DE:6F:45（他们无线网络接口的MAC地址）。
- en: 'You could now send a number of disassociation packets to the client to force
    the client to lose internet connectivity. To perform the attack, we use Aireplay-ng:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以向客户端发送多个断开连接数据包，迫使客户端失去互联网连接。为了执行此攻击，我们使用Aireplay-ng：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `--deauth` parameter specifies the disassociation attack and the number
    of disassociation packets that will be sent. Selecting `0` means the packets will
    be sent continuously. The `-a` parameter specifies the AP’s BSSID, and the `-c`
    parameter specifies the targeted devices. The next listing shows the command’s
    output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`--deauth`参数指定了断开连接攻击和将要发送的断开连接数据包数量。选择`0`表示数据包将被持续发送。`-a`参数指定AP的BSSID，`-c`参数指定目标设备。下一个列表显示了命令的输出：'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output shows the disassociation packets sent to the target. The attack succeeds
    when the target device becomes unavailable. When you check that device, you should
    see that it’s no longer connected to any network.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示发送到目标的断开连接数据包。当目标设备变得不可用时，攻击成功。检查该设备时，你会发现它不再连接任何网络。
- en: You can perform denial-of-service attacks against Wi-Fi in other ways, too.
    *Radio jamming,* another common method, interferes with wireless communications
    using any wireless protocol. In this attack, an attacker relies on a Software
    Defined Radio device or cheap, off-the-shelf Wi-Fi dongles to transmit radio signals
    and make a wireless channel unusable for other devices. We’ll show such an attack
    in Chapter 15\.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过其他方式对Wi-Fi进行拒绝服务攻击。*无线电干扰*，另一种常见方法，通过任何无线协议干扰无线通信。在这种攻击中，攻击者依赖于软件定义无线电设备或便宜的现成Wi-Fi加密狗，发送无线电信号，使无线频道无法供其他设备使用。我们将在第15章展示这种攻击。
- en: Alternatively, you could perform *selective jamming*, a sophisticated version
    of a radio jamming attack in which the attacker jams only specific packets of
    high importance.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以执行*选择性干扰*，这是一种复杂的无线电干扰攻击版本，其中攻击者只干扰特定的高重要性数据包。
- en: It’s worth noting that for certain chipsets, deauthentication attacks can also
    downgrade the encryption keys used for communication between the AP and the client.
    Recent research by the antivirus company ESET identified this vulnerability, which
    is known as Kr00k (CVE-2019-15126). When present, the deauthenticated Wi-Fi chipset
    uses an all-zero encryption key upon reassociation, which allows attackers to
    decrypt packets transmitted by the vulnerable device.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，对于某些芯片组，去认证攻击还可能降低AP和客户端之间通信所使用的加密密钥的安全性。最近，杀毒公司ESET的研究发现了这一漏洞，称为Kr00k（CVE-2019-15126）。在此漏洞存在时，去认证的Wi-Fi芯片组在重新关联时会使用全零的加密密钥，这使得攻击者能够解密受影响设备传输的数据包。
- en: Wi-Fi Association Attacks
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wi-Fi关联攻击
- en: An *association attack* tricks a wireless station into connecting to an attacker-controlled
    AP. If the target station is already connected to some other network, the attacker
    usually starts by implementing one of the deauthentication techniques we just
    explained. Once the victims no longer have a connection, the attacker can lure
    them into the rogue network by abusing different features of their network manager.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*关联攻击*使无线站点被欺骗连接到攻击者控制的AP。如果目标站点已经连接到其他网络，攻击者通常会通过实施我们刚才解释的其中一种去认证技术来开始。一旦受害者失去连接，攻击者就可以通过滥用其网络管理器的不同功能将其引诱到恶意网络中。'
- en: In this section, we outline the most popular association attacks and then demonstrate
    a Known Beacons attack.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了最常见的关联攻击，并展示了已知信标攻击。
- en: The Evil Twin Attack
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 邪恶双胞胎攻击
- en: The most common association attack is the *Evil Twin*, which tricks a client
    into connecting with a fake AP by making it believe it’s connecting to a known,
    legitimate one.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的关联攻击是*邪恶双胞胎*攻击，它通过让客户端相信自己正在连接一个已知的合法AP，欺骗客户端连接到一个假AP。
- en: We can create a fake AP using a network adapter with monitoring and packet injection
    capabilities. With that network card, we’d set up the AP and configure its channel,
    ESSID, and BSSID, making sure to copy the ESSID and encryption type the legitimate
    network uses. Then we’d send a stronger signal than the legitimate AP’s signal.
    You can enhance your signal with various techniques, most reliably by being physically
    closer to your target than the legitimate AP or by using a stronger antenna.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用具有监控和数据包注入功能的网络适配器创建一个假AP。使用该网卡，我们将设置AP并配置其频道、ESSID和BSSID，同时确保复制合法网络使用的ESSID和加密类型。然后，我们会发送比合法AP信号更强的信号。你可以通过各种技术增强你的信号，最可靠的方法是比合法AP更靠近目标，或使用更强的天线。
- en: The KARMA Attack
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: KARMA攻击
- en: '*KARMA* attacks connect users to insecure networks by taking advantage of clients
    configured to discover wireless networks automatically. When configured in this
    way, the client issues a direct probe request asking for specific APs, then it
    connects to the one it finds without authenticating it. A *probe request* is a
    management frame that initiates the association process. Given this configuration,
    the attacker could simply confirm any of the client’s requests and connect it
    to a rogue AP.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*KARMA*攻击通过利用配置为自动发现无线网络的客户端，将用户连接到不安全的网络。当配置为此方式时，客户端会发出一个直接的探测请求，询问特定的AP，然后连接到它找到的AP，而不进行身份验证。*探测请求*是一种管理帧，用于启动关联过程。在这种配置下，攻击者可以简单地确认客户端的任何请求并将其连接到一个恶意AP。'
- en: For a KARMA attack to work, the devices you’re targeting must meet three requirements.
    The target network must be of type Open, the client must have the AutoConnect
    flag enabled, and the client must broadcast its preferred network list. The *preferred
    network list* is a list of networks to which the client has previously connected
    and now trusts. A client with the AutoConnect flag enabled will connect to an
    AP automatically, as long as the AP sends it an ESSID already listed in the client’s
    preferred network list.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要使KARMA攻击生效，你的目标设备必须满足三个条件。目标网络必须是开放类型的，客户端必须启用自动连接标志，并且客户端必须广播其首选网络列表。*首选网络列表*是客户端曾连接并信任的网络列表。启用自动连接标志的客户端会自动连接到AP，只要该AP发送的ESSID已经出现在客户端的首选网络列表中。
- en: Most modern operating systems aren’t vulnerable to KARMA attacks, because they
    don’t send their preferred network lists, but you might sometimes encounter a
    vulnerable system in older IoT devices or printers. If a device has ever connected
    to an open and hidden network, it’s definitely vulnerable to a KARMA attack. The
    reason is that the only way to connect to open hidden networks is to send a direct
    probe to them, in which case all the requirements for KARMA attacks are met.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代操作系统不会受到KARMA攻击的影响，因为它们不发送首选网络列表，但你有时可能会遇到旧款物联网设备或打印机中的易受攻击系统。如果设备曾经连接过开放的隐蔽网络，它肯定容易受到KARMA攻击。原因是，连接到开放的隐蔽网络的唯一方法是向其发送直接探测请求，在这种情况下，KARMA攻击的所有要求都得到了满足。
- en: Performing a Known Beacons Attack
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 执行已知信标攻击
- en: Since the discovery of the KARMA attack, most operating systems stopped directly
    probing APs; instead, they only use *passive reconnaissance*, in which the device
    listens for a known ESSID from a network. This type of behavior completely eliminates
    all occurrences of KARMA attacks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 自从KARMA攻击被发现以来，大多数操作系统停止了直接探测AP；取而代之的是，它们仅使用*被动侦察*，即设备监听网络中的已知ESSID。这种行为完全消除了所有KARMA攻击的发生。
- en: A *Known Beacons attack* bypasses this security feature by taking advantage
    of the fact that many operating systems enable the AutoConnectflag by default.
    Because APs frequently have very common names, an attacker can often guess the
    ESSID of an open network in a device’s preferred network list. Then it tricks
    that device into automatically connecting to an attacker-controlled AP.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*已知信标攻击*通过利用许多操作系统默认启用自动连接标志的事实来绕过这一安全功能。由于AP通常具有非常常见的名称，攻击者通常可以猜测设备首选网络列表中开放网络的ESSID。然后，它诱使该设备自动连接到攻击者控制的AP。'
- en: 'In a more sophisticated version of the attack, the adversary could use a dictionary
    of common ESSIDs, such as Guest, FREE Wi-Fi, and so on, that the victim has likely
    connected to in the past. This is a lot like trying to gain unauthorized access
    to a service account by just brute forcing the username when no password is required:
    a quite simple, yet effective attack.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在更复杂的攻击版本中，攻击者可以使用一个包含常见 ESSID（如 Guest、FREE Wi-Fi 等）的字典，这些 ESSID 受害者过去很可能连接过。这就像尝试通过暴力破解用户名来未经授权访问服务账户时一样：一种非常简单却有效的攻击方式。
- en: '[Figure 12-1](#figure12-1) illustrates a Known Beacons attack.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-1](#figure12-1) 演示了已知信标攻击。'
- en: '![f12001](Images/f12001.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![f12001](Images/f12001.png)'
- en: 'Figure 12-1: A Known Beacons attack'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-1：已知信标攻击
- en: The attacker’s AP begins by issuing multiple *beacon frames,* a type of management
    frame that contains all the network information. It’s broadcasted periodically
    to announce the presence of the network. If the victim has this network’s information
    in its preferred network list (because the victim has connected to that network
    in the past) and if the attacker and the victim APs are of the Open type, the
    victim will issue a probe request and connect to it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者的 AP 开始通过发射多个 *信标帧*，这是一种包含所有网络信息的管理帧。它会定期广播，以宣布网络的存在。如果受害者的设备将此网络信息保存在其首选网络列表中（因为受害者曾经连接过该网络），并且攻击者和受害者的
    AP 都是开放型的，那么受害者会发出探测请求并连接到该网络。
- en: Before walking through this attack, we need to set up our devices. Some devices
    might allow you to change the AutoConnect flag. The location of this setting differs
    from device to device, but it’s usually in the Wi-Fi preferences, as shown in
    [Figure 12-2](#figure12-2), under a setting like “Auto reconnect.” Make sure it’s
    turned on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此攻击之前，我们需要设置设备。某些设备可能允许你更改 AutoConnect 标志。此设置的位置因设备而异，但通常在 Wi-Fi 设置中，如 [图
    12-2](#figure12-2) 所示，设置项通常为“自动重连”。确保此选项已启用。
- en: '![f12002](Images/f12002.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![f12002](Images/f12002.png)'
- en: 'Figure 12-2: Wi-Fi preferences with the AutoConnect toggle'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-2：带有 AutoConnect 切换按钮的 Wi-Fi 设置
- en: Next, set up an open AP with the name `my_essid.` We did this using a portable
    TP-Link AP, but you can use any device you’d like. Once you’ve set it up, connect
    your victim device to the `my_essid` network. Then install *Wifiphisher* ([https://github.com/wifiphisher/wifiphisher/](https://github.com/wifiphisher/wifiphisher/)),
    a rogue AP framework frequently used for network assessments.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，设置一个开放式 AP，名称为 `my_essid`。我们使用便携式 TP-Link AP 来实现，但你可以使用任何你喜欢的设备。设置完成后，将受害设备连接到
    `my_essid` 网络。然后安装 *Wifiphisher*（[https://github.com/wifiphisher/wifiphisher/](https://github.com/wifiphisher/wifiphisher/)），一个常用于网络评估的伪造
    AP 框架。
- en: 'To install Wifiphisher, use the following commands:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Wifiphisher，请使用以下命令：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Wifiphisher needs to target a specific network to start attacking that network’s
    clients. We create a test network, also called `my_essid`, to avoid affecting
    outside clients when we don’t have authorization to do so:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Wifiphisher 需要针对特定网络发起攻击，以便攻击该网络的客户端。我们创建了一个测试网络，也叫做 `my_essid`，以避免在未授权的情况下影响外部客户端：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We start Wifiphisher in the Known Beacons mode by adding the `–kB` argument
    1. You don’t have to provide a wordlist for the attack because Wifiphisher has
    one built in. The wordlist contains common ESSIDs that the victim might have connected
    to in the past. Once you run the command, WifiPhisher’s interface should open,
    as shown in [Figure 12-3](#figure12-3).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过添加 `–kB` 参数 1 在已知信标模式下启动 Wifiphisher。你无需提供攻击所需的词库，因为 Wifiphisher 已内置一个。该词库包含受害者过去可能连接过的常见
    ESSID。运行命令后，WifiPhisher 的界面应打开，如 [图 12-3](#figure12-3) 所示。
- en: '![f12003](Images/f12003.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f12003](Images/f12003.png)'
- en: 'Figure 12-3: Wifiphisher’s panel showing the victim device connecting to our
    network'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-3：Wifiphisher 面板显示受害设备连接到我们的网络
- en: Wifiphisher’s panel displays the number of connected victim devices. Currently,
    our test device is the only target device connected.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Wifiphisher 的面板显示了已连接的受害设备数量。目前，我们的测试设备是唯一连接的目标设备。
- en: Look at the preferred network list of the device you’re targeting in this example.
    For instance, [Figure 12-4](#figure12-4) shows the preferred network list screen
    on a Samsung Galaxy S8+ device. Notice that it has two networks saved. The first
    one, `FreeAirportWiFi`, uses an easily guessable name.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看你在本示例中所针对设备的首选网络列表。例如，[图 12-4](#figure12-4) 显示了三星 Galaxy S8+ 设备的首选网络列表屏幕。注意，它保存了两个网络，第一个是
    `FreeAirportWiFi`，使用了一个容易猜测的名称。
- en: '![f12004](Images/f12004.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![f12004](Images/f12004.png)'
- en: 'Figure 12-4: The victim device’s preferred network list screen'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-4：受害设备的首选网络列表屏幕
- en: Sure enough, once we’ve executed the attack, the device should disassociate
    from its currently connected network and connect to our malicious, fake network
    ([Figure 12-5](#figure12-5)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，一旦我们执行了攻击，设备应该会从当前连接的网络中断开，并连接到我们的恶意假网络（[图12-5](#figure12-5)）。
- en: '![f12005](Images/f12005.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![f12005](Images/f12005.png)'
- en: 'Figure 12-5: The victim device connects to a fake network as a result of the
    Known Beacons attack.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-5：受害设备因已知信标攻击而连接到假网络。
- en: From this point on, the attacker can work as a man in the middle, monitoring
    the victim’s traffic or even tampering with it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从此时起，攻击者可以充当中间人，监控受害者的流量，甚至篡改它。
- en: Wi-Fi Direct
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wi-Fi Direct
- en: Wi-Fi Direct is a Wi-Fi standard that allows devices to connect to each other
    without a wireless AP. In a traditional architecture, all devices connect to one
    AP to communicate with one another. In Wi-Fi Direct, one of the two devices acts
    as the AP instead. We call this device the *group owner*. For Wi-Fi Direct to
    work, only the group owner must comply with the Wi-Fi Direct standard.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi Direct是一种Wi-Fi标准，允许设备在没有无线AP的情况下相互连接。在传统架构中，所有设备都连接到一个AP以相互通信。而在Wi-Fi
    Direct中，两个设备中的一个充当AP。我们称这个设备为*群组所有者*。为了使Wi-Fi Direct正常工作，只有群组所有者需要遵循Wi-Fi Direct标准。
- en: You can find Wi-Fi Direct in devices like printers, TVs, gaming consoles, audio
    systems, and streaming devices. Many IoT devices that support Wi-Fi Direct are
    simultaneously connected to a standard Wi-Fi network. For example, a home printer
    might be able to accept photos directly from your smartphone via Wi-Fi Direct,
    but it’s also probably connected to a local network.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在打印机、电视、游戏主机、音响系统和流媒体设备等设备中找到Wi-Fi Direct。许多支持Wi-Fi Direct的物联网设备也同时连接到标准Wi-Fi网络。例如，一台家庭打印机可能能够通过Wi-Fi
    Direct直接接收来自智能手机的照片，但它也很可能连接到本地网络。
- en: In this section, we’ll review how Wi-Fi Direct works, what its main modes of
    operation are, and which techniques you can use to exploit its security features.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Wi-Fi Direct是如何工作的，它的主要操作模式是什么，以及你可以使用哪些技术来利用其安全功能。
- en: How Wi-Fi Direct Works
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Wi-Fi Direct的工作原理
- en: '[Figure 12-6](#figure12-6) shows how devices establish a connection using Wi-Fi
    Direct.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[图12-6](#figure12-6)展示了设备如何使用Wi-Fi Direct建立连接。'
- en: '![f12006](Images/f12006.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![f12006](Images/f12006.png)'
- en: 'Figure 12-6: Main phases of device connection in Wi-Fi Direct'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-6：Wi-Fi Direct中设备连接的主要阶段
- en: In the Device Discovery phase, a device sends a broadcast message to all nearby
    devices, requesting their MAC addresses. At this stage, there is no group owner,
    so any device can initiate this step. Next, in the Service Discovery phase, the
    device receives the MAC addresses and proceeds with a unicast service request
    to each device asking for more information about their services. This allows it
    to decide whether it wants to connect to each device. After the Service Discovery
    phase, the two devices decide which will be the group owner and which will be
    the client.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备发现阶段，设备向所有附近的设备发送广播消息，请求它们的MAC地址。在这个阶段，尚未有群组所有者，所以任何设备都可以发起此步骤。接下来，在服务发现阶段，设备接收MAC地址，并向每个设备发送单播服务请求，询问它们的服务信息。这使设备能够决定是否连接到每个设备。服务发现阶段后，两个设备会决定哪个是群组所有者，哪个是客户端。
- en: 'In the final phase, Wi-Fi Direct relies on Wi-Fi Protected Setup (WPS) to securely
    connect the devices. *WPS* is a protocol originally created to allow less tech-savvy
    home users to easily add new devices on the network. WPS has multiple configuration
    methods: Push-Button Configuration (PBC), PIN entry, and Near-Field Communication
    (NFC). In *PBC*, the group owner has a physical button, which, if pressed, starts
    broadcasting for 120 seconds. In that time, the clients can connect to the group
    owner using their own software or hardware button. This makes it possible for
    a confused user to press a button on a victim device, such as a TV, and grant
    access to a foreign and potentially malicious device, such as the attacker’s smartphone.
    In *PIN entry* mode, the group owner has a specific PIN code, which, if entered
    by a client, automatically connects the two devices. In *NFC* mode, just tapping
    the two devices is enough to connect them to the network.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后阶段，Wi-Fi Direct依赖Wi-Fi Protected Setup（WPS）来安全地连接设备。*WPS*是最初为让技术水平较低的家庭用户轻松添加新设备到网络中而创建的协议。WPS有多种配置方式：推按钮配置（PBC）、PIN输入和近场通信（NFC）。在*PBC*模式下，组主机有一个物理按钮，按下该按钮后，会广播120秒。在这段时间内，客户端可以使用自己的软件或硬件按钮连接到组主机。这使得一个困惑的用户可能按下受害设备（如电视）上的按钮，并将访问权限授予一个外部的潜在恶意设备（如攻击者的智能手机）。在*PIN输入*模式下，组主机有一个特定的PIN码，如果客户端输入该PIN码，两个设备会自动连接。在*NFC*模式下，只需轻触两个设备就能将它们连接到网络。
- en: PIN Brute Forcing Using Reaver
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Reaver进行PIN暴力破解
- en: Attackers can brute force the code in the PIN entry configuration. This attack
    can resemble a one-click phishing attack, and you can use it with any device that
    supports Wi-Fi Direct with PIN entry.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以暴力破解PIN输入配置中的代码。这种攻击类似于一次点击的钓鱼攻击，你可以在任何支持Wi-Fi Direct PIN输入的设备上使用它。
- en: This attack takes advantage of a weakness in the eight-digit WPS PIN code; because
    of this issue, the protocol discloses information about the PIN’s first four digits,
    and the last digit works as a checksum, which makes brute forcing the WPS AP easy.
    Note that some devices include brute-force protections, which usually block MAC
    addresses that repeatedly try to attack. In that case, the complexity of this
    attack increases, because you’d have to rotate MAC addresses while testing PINs.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击利用了八位数WPS PIN码中的一个漏洞；由于这个问题，协议泄露了PIN码前四位的信息，而最后一位作为校验和，这使得暴力破解WPS AP变得容易。请注意，某些设备包含暴力破解保护，通常会阻止那些反复尝试攻击的MAC地址。在这种情况下，这种攻击的复杂性增加了，因为你必须在测试PIN码时旋转MAC地址。
- en: Currently, you’ll rarely find APs with WPS PIN mode enabled, because off-the-shelf
    tools exist to brute force their pins. One such tool, Reaver, is preinstalled
    in Kali Linux. In this example, we’ll use Reaver to brute force WPS PIN entry.
    Even though this AP enforces a brute-force protection through rate limiting, we
    should be able to recover the PIN given enough time. (*Rate limiting* restricts
    how many requests an AP will accept from a client within a predefined timeframe.)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你很少会发现启用WPS PIN模式的AP，因为现成的工具可以暴力破解它们的PIN码。一个这样的工具是Reaver，它已经预装在Kali Linux中。在这个例子中，我们将使用Reaver来暴力破解WPS
    PIN码。尽管这个AP通过速率限制实施了暴力破解保护，但只要有足够的时间，我们应该能够恢复PIN码。（*速率限制*限制了AP在预定时间内从客户端接受的请求次数。）
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, Reaver 1 targets our test network and starts brute forcing its
    PIN. Next, we encounter rate limiting 2, which severely delays our efforts, because
    Reaver automatically pauses before making another attempt. Finally, we recover
    the WPS PIN 3.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Reaver 1针对我们的测试网络并开始暴力破解其PIN码。接下来，我们遇到了速率限制2，这严重延迟了我们的进展，因为Reaver会在进行下一次尝试前自动暂停。最后，我们成功恢复了WPS
    PIN码3。
- en: EvilDirect Hijacking Attacks
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: EvilDirect劫持攻击
- en: The EvilDirect attack works a lot like the Evil Twin attack described earlier
    in this chapter, except it targets devices using Wi-Fi Direct. This association
    attack takes place during the PBC connection process. During this process, the
    client issues a request to connect to the group owner and then waits for its acceptance.
    An attacking group owner with the same MAC address and ESSID, operating on the
    same channel, could intercept the request and lure the victim client to associate
    with it instead.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: EvilDirect攻击的工作原理与本章前面描述的Evil Twin攻击非常相似，不同之处在于它针对使用Wi-Fi Direct的设备。这种关联攻击发生在PBC连接过程中。在这个过程中，客户端发出连接到组主机的请求，并等待其接受。一个具有相同MAC地址和ESSID、在同一信道上运行的攻击者组主机，可以拦截请求，并诱使受害者客户端与它建立连接。
- en: Before you can attempt this attack, you’ll have to impersonate the legitimate
    group owner. Use Wifiphisher to identify the target Wi-Fi Direct network. Extract
    the group owner’s channel, ESSID, and MAC address, and then create a new group
    owner, using the extracted data to configure it. Connect the victim to your fake
    network by having a better signal than the original group owner, as described
    earlier.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在你尝试此攻击之前，你必须伪装成合法的群组所有者。使用Wifiphisher识别目标Wi-Fi Direct网络。提取群组所有者的频道、ESSID和MAC地址，然后创建一个新的群组所有者，使用提取的数据进行配置。通过提供比原始群组所有者更强的信号，将受害者连接到你的伪造网络，如前所述。
- en: 'Next, kill all processes that interfere with Airmon-ng, as we did earlier in
    this chapter:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，终止所有干扰Airmon-ng的进程，正如我们在本章前面所做的那样：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then put your wireless interface in monitor mode using iwconfig:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用iwconfig将你的无线接口设置为监视模式：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `iwconfig`command 1 lets you identify the name of your wireless adapter.
    Ours is named `wlan0` 2. Once you have that name, use the command `airmon-ng start
    wlan0`3 to safely put it in monitor mode.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`iwconfig`命令1可以让你识别无线适配器的名称。我们的适配器名称是`wlan0` 2。拿到名称后，使用命令`airmon-ng start wlan0`3将其安全地设置为监视模式。'
- en: Next, run Airbase-ng, a multipurpose tool in the Aircrack-ng suite aimed at
    attacking Wi-Fi clients. As command line arguments, provide the channel (`-c`),
    ESSID (`-e`), BSSID (`-a`), and the monitoring interface, which in our case is
    `mon0`. We extracted this information in the previous step.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行Airbase-ng，这是Aircrack-ng套件中的一个多功能工具，旨在攻击Wi-Fi客户端。作为命令行参数，提供频道（`-c`）、ESSID（`-e`）、BSSID（`-a`）和监视接口，在我们的例子中是`mon0`。我们在前一步提取了这些信息。
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output indicates that the attack worked 1; our target client is now associated
    to the malicious AP.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表明攻击成功了1；我们的目标客户端现在已经连接到恶意AP。
- en: '[Figure 12-7](#figure12-7) proves that our attack succeeded. We managed to
    connect the victim phone to our fake BRAVIA TV by impersonating the original TV’s
    Wi-Fi Direct network, DIRECT-5x-BRAVIA.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[图12-7](#figure12-7)证明我们的攻击成功了。我们通过伪装成原始电视的Wi-Fi Direct网络DIRECT-5x-BRAVIA，将受害者的手机连接到我们伪造的BRAVIA电视。'
- en: '![f12007](Images/f12007.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![f12007](Images/f12007.png)'
- en: 'Figure 12-7: Victim device connected to a fake AP through an EvilDirect attack'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-7：受害设备通过EvilDirect攻击连接到假AP
- en: In a real-world example, we’d also want to have a DHCP server configured to
    forward all packets to their destinations. That way, we wouldn’t disrupt the victim’s
    communication, providing a seamless experience to the victim.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个真实的例子中，我们还需要配置一个DHCP服务器，将所有数据包转发到其目的地。这样一来，我们就不会中断受害者的通信，提供一个无缝的体验给受害者。
- en: Wi-Fi Attacks Against APs
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对AP的Wi-Fi攻击
- en: It’s not uncommon in the IoT world for IoT devices to act as APs. This often
    occurs when a device creates an open AP for its setup process (for example, Amazon
    Alexa and Google Chromecast do this). Modern mobile devices can also serve as
    APs to share their Wi-Fi connectivity with other users, and smart cars feature
    built-in Wi-Fi hotspots enhanced by a 4G LTE connection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在IoT领域，IoT设备作为AP并不罕见。这通常发生在设备为设置过程创建开放AP时（例如，亚马逊Alexa和谷歌Chromecast会这样做）。现代移动设备也可以充当AP，将它们的Wi-Fi连接分享给其他用户，智能汽车也具备内建的Wi-Fi热点，并通过4G
    LTE连接增强信号。
- en: Hacking an AP usually means breaking its encryption. In this section, we’ll
    explore attacks against WPA and WPA2, two protocols used to secure wireless computer
    networks. WPA is an upgraded version of *WEP*, a highly insecure protocol you
    might still encounter in certain older IoT devices. WEP generates an Initialization
    Vector (IV) with a rather small length—just 24 bits— which is created using *RC4*,
    a deprecated and insecure cryptographic function. In turn, WPA2 is an upgraded
    version of WPA that introduced an Advanced Encryption Standard (AES)–based encryption
    mode.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击AP通常意味着破解它的加密。在本节中，我们将探讨针对WPA和WPA2的攻击，这两种协议用于保护无线计算机网络。WPA是WEP的升级版，WEP是一个非常不安全的协议，你可能在某些旧款IoT设备中仍会遇到。WEP生成一个初始化向量（IV），其长度相当小——仅24位——这个向量是通过*RC4*生成的，RC4是一种已经过时且不安全的加密函数。WPA2则是WPA的升级版本，采用了基于高级加密标准（AES）的加密模式。
- en: Let’s discuss WPA/WPA2 Personal and Enterprise networks and identify key attacks
    against them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论WPA/WPA2个人和企业网络，并识别针对它们的关键攻击。
- en: Cracking WPA/WPA2
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 破解WPA/WPA2
- en: You can crack a WPA/WPA2 network in two ways. The first targets networks that
    use preshared keys. The second targets the *Pairwise Master Key Identifier (PMKID)*
    field found in networks that enable roaming with the 802.11r standard. While roaming,
    a client can connect to different APs belonging to the same network without having
    to reauthenticate to each one. Although the PMKID attack has greater success rate,
    it doesn’t affect all the WPA/WPA2 networks, because the PMKID field is optional.
    The preshared key attack is a brute-force attack, which has a lower success rate.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两种方式破解 WPA/WPA2 网络。第一种方式是针对使用预共享密钥的网络。第二种方式是针对启用了 802.11r 标准的网络中的 *对称主密钥标识符（PMKID）*
    字段。在漫游过程中，客户端可以连接到属于同一网络的不同 AP，而无需重新认证。尽管 PMKID 攻击的成功率更高，但并不是所有 WPA/WPA2 网络都会受到影响，因为
    PMKID 字段是可选的。预共享密钥攻击是一种暴力破解攻击，成功率较低。
- en: Preshared Key Attacks
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预共享密钥攻击
- en: WEP, WPA, and WPA2 all rely on secret keys that the two devices must share,
    ideally over a secure channel, before they can communicate. In all three protocols,
    APs use the same preshared key with all their clients.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: WEP、WPA 和 WPA2 都依赖于设备之间必须共享的密钥，理想情况下应通过安全通道进行共享，然后才能开始通信。在这三种协议中，AP 会使用与所有客户端相同的预共享密钥。
- en: To steal this key, we need to capture a complete four-way handshake. The *WPA/WPA2
    four-way handshake* is a communication sequence that lets the AP and wireless
    client prove to each other that they both know the preshared key without ever
    disclosing it over the air. By capturing the four-way handshake, an attacker can
    mount an offline brute-force attack and expose the key.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了窃取这个密钥，我们需要捕获完整的四次握手。*WPA/WPA2 四次握手* 是一种通信序列，允许 AP 和无线客户端相互证明它们都知道预共享密钥，而无需通过无线电信号泄露该密钥。通过捕获四次握手，攻击者可以进行离线暴力破解并揭露密钥。
- en: Also known as an *Extensible Authentication Protocol (EAP)* over LAN (EAPOL)
    handshake, the four-way handshake that WPA2 uses ([Figure 12-8](#figure12-8))
    involves the generation of multiple keys based on the preshared one.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 也被称为 *扩展认证协议（EAP）* 过 LAN（EAPOL）握手，WPA2 使用的四次握手（[图 12-8](#figure12-8)）涉及基于预共享密钥生成多个密钥。
- en: '![f12008](Images/f12008.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![f12008](Images/f12008.png)'
- en: 'Figure 12-8: WPA2 four-way handshake'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-8：WPA2 四次握手
- en: First, the client uses the preshared key, called the Pairwise-Master Key (PMK),
    to generate a second key, called the Pairwise Transient Key (PTK), using both
    devices’ MAC addresses and a nonce from both parties. This requires the AP to
    send the client its nonce, called the A-nonce. (The client already knows its own
    MAC address, and it receives the AP’s once the two devices begin communicating,
    so the devices don’t need to send those again.)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，客户端使用预共享密钥，称为对称主密钥（PMK），通过两个设备的 MAC 地址和来自双方的 nonce 生成第二个密钥，称为对称临时密钥（PTK）。这要求
    AP 向客户端发送其 nonce，称为 A-nonce。（客户端已经知道自己的 MAC 地址，并且在两个设备开始通信后会收到 AP 的 MAC 地址，因此设备不需要再次发送这些信息。）
- en: 'Once the client has generated the PTK, it sends the AP two items: its own nonce,
    called the S-nonce, and a hash of the PTK, called a *Message Integrity Code (MIC)*.
    The AP then generates the PTK on its own and verifies the MIC it received. If
    the MIC is valid, the AP issues a third key, called the *Group Temporal Key (GTK)*,
    which is used to decrypt and broadcast traffic to all clients. The AP sends the
    GTK’s MIC and the full value of GTK. The client validates these and responds with
    an acknowledgment (ACK).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户端生成了 PTK，它会向 AP 发送两个项目：它自己的 nonce，称为 S-nonce，以及 PTK 的哈希值，称为 *消息完整性代码（MIC）*。然后，AP
    自行生成 PTK 并验证它收到的 MIC。如果 MIC 是有效的，AP 会发出第三个密钥，称为 *组临时密钥（GTK）*，该密钥用于解密并向所有客户端广播流量。AP
    发送 GTK 的 MIC 和 GTK 的完整值。客户端验证这些并以确认（ACK）回应。
- en: The devices send all these messages as EAPOL frames, a type of frame that the
    802.1X protocol uses.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 设备将所有这些消息作为 EAPOL 帧发送，这是一种 802.1X 协议使用的帧类型。
- en: Let’s attempt to crack a WPA2 network. To get the PMK, we need to extract the
    A-nonce, S-nonce, both MAC addresses, and the PTK’s MIC. Once we have these values,
    we can perform an offline brute-force attack to crack the password.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试破解一个 WPA2 网络。为了获取 PMK，我们需要提取 A-nonce、S-nonce、两个 MAC 地址以及 PTK 的 MIC。一旦获得这些值，我们可以进行离线暴力破解以破解密码。
- en: In this example, we’ve set up an AP operating in WPA2 preshared key mode and
    then connected a smartphone to that AP. You could replace the client with a laptop,
    smartphone, IP camera, or other device. We’ll use Aircrack-ng to demonstrate the
    attack.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们设置了一个在 WPA2 预共享密钥模式下运行的 AP，并将智能手机连接到该 AP。你可以将客户端替换为笔记本电脑、智能手机、IP 摄像头或其他设备。我们将使用
    Aircrack-ng 来演示攻击。
- en: First, put your wireless interface in monitor mode and extract the AP’s BSSID.
    Refer to “Deauthentication and Denial-of-Service Attacks” on page 289 for complete
    instructions on how to do this. In our case, we learned the AP’s operation channel
    is 1 and its BSSID is `0C:0C:0C:0C:0C:0C`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将无线接口设置为监控模式，并提取 AP 的 BSSID。有关如何执行此操作的完整说明，请参见第 289 页的《去认证和拒绝服务攻击》。在我们的例子中，我们得知
    AP 的操作频道是 1，BSSID 是 `0C:0C:0C:0C:0C:0C`。
- en: Continue monitoring passively, which will require some time, because we’ll have
    to wait until a client connects to the AP. You could accelerate this process by
    sending deauthentication packets to an already connected client. By default, a
    deauthenticated client will try to reconnect to their AP, initiating the four-way
    handshake again.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 继续被动监控，这需要一些时间，因为我们必须等到有客户端连接到 AP。你可以通过向已经连接的客户端发送去认证数据包来加速这个过程。默认情况下，去认证的客户端会尝试重新连接到
    AP，重新发起四次握手。
- en: Once a client has connected, use Airodump-ng`to start capturing frames sent
    to the target network:`
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户端连接，使用 Airodump-ng`开始捕获发送到目标网络的帧：`
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
