["```\n{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Sample Next.js - OpenAPI 3.x\",\n        \"description\": \"The example APIs from our Next.js application\",\n        \"version\": \"1.0.0\"\n    },\n    \"servers\": [\n        {\"url\": \"https://www.usemodernfullstack.dev/api/\"},\n        {\"url\": \"http://localhost:3000/api/\"}\n    ],\n    \"paths\": {\n        \"/v1/weather/{zipcode}\": {\n            \"get\": {\n                \"summary\": \"Get weather by zip code\",\n                \"parameters\": [\n                    {\n                        \"name\": \"zipcode\",\n                        \"in\": \"path\",\n                        \"description\": \"The zip code for the location as string.\",\n                        \"required\": true,\n                        \"schema\": {\n                          \"type\": \"string\",\n                          \"example\": 96815\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/weatherDetailType\"\n                                }\n                              }\n                        }\n                    }\n                }\n            }\n          }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"weatherDetailType\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"zipcode\": {\n                        \"type\": \"string\",\n                        \"example\": 96815\n                    },\n                    \"weather\": {\n                        \"type\": \"string\",\n                        \"example\": \"sunny\"\n                    },\n                    \"temp\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 35\n                    }\n                }\n            }\n        }\n    }\n} \n```", "```\n$ **curl -i** **`url`**\n```", "```\n$ **curl -i \\**\n    **-X GET \\**\n    **-H \"Accept: application/json\" \\**\n    **-H \"Authorization: Bearer 83dedad0728baaef3ad3f50bd05ed030\" \\**\n    **https://www.usemodernfullstack.dev/api/v2/weather/96815** \n```", "```\nHTTP/2 200\ncontent-type: application/json ; charset=utf-8\naccess-control-allow-origin: *\n\n{\"weather\":\"sunny\",\"tempC\":\"25\",\"tempF\":\"77\",\"friends\":[\"96814\",\"96826\"]} \n```", "```\n$ **curl -i \\**\n    **-X PUT \\**\n    **-H \"Accept: application/json\" \\**\n    **-H \"Authorization: Bearer 83dedad0728baaef3ad3f50bd05ed030\" \\**\n    **-H \"Content-Type: application/json\" \\**\n    **-d \"{\\\"weather\\\":\\\"sunny\\\",\\\"tempC\\\":\\\"20\\\",\\\"tempF\\\":\\\"68\\\",**\n        **\\\"friends\\\":\\\"['96815','96826']\\\"}\" \\**\n    **https://www.usemodernfullstack.dev/api/v2/weather/96815** \n```", "```\nHTTP/2 200\ncontent-type: application/json ; charset=utf-8\naccess-control-allow-origin: *\n{\"status\":\"ok\"} \n```", "```\nexport const typeDefs = gql`\n\n    type LocationWeatherType {\n        zip: String!\n        weather: String!\n        tempC: String!\n        tempF: String!\n        friends: [String]!\n    }\n\n    input LocationWeatherInput {\n        zip: String!\n        weather: String\n        tempC: String\n        tempF: String\n        friends: [String]\n    }\n\n    type Query {\n        weather(zip: String): [LocationWeatherType]!\n    }\n\n    type Mutation {\n        weather(data: LocationWeatherInput): [LocationWeatherType]!\n    }\n`; \n```", "```\nexport const typeDefs = gql`\n\n    **type FriendsType {**\n **zip: String!**\n **weather: String!**\n    **}**\n\n    type LocationWeatherType {\n        zip: String!\n        weather: String!\n        tempC: String!\n        tempF: String!\n        friends: [**FriendsType**]!\n    }\n\n    type Query {\n        weather(zip: String): [LocationWeatherType]!\n    }\n`; \n```", "```\nquery GetWeatherWithFriends {\n    weather(zip: \"96815\") {\n        weather\n        friends {\n            weather\n        }\n    }\n} \n```", "```\nexport const resolvers = {\n    Query: {\n        weather: async (_: any, param: WeatherInterface) => {\n            return [\n                {\n                    zip: param.zip,\n                    weather: \"sunny\",\n                    tempC: \"25C\",\n                    tempF: \"70F\",\n                    friends: []\n                }\n            ];\n        },\n    },\n    Mutation: {\n        weather: async (_: any, param: {data: WeatherInterface}) => {\n            return [\n                {\n                    zip: param.data.zip,\n                    weather: \"sunny\",\n                    tempC: \"25C\",\n                    tempF: \"70F\",\n                    friends: []\n                }\n            ];\n        }\n    },\n}; \n```", "```\nquery Weather {\n    weather(zip: \"96815\") {\n        tempC\n    }\n} \n```", "```\n$ **curl -i \\**\n **-X POST \\**\n **-H \"Accept: application/json\" \\**\n **-H \"Authorization: Bearer 83dedad0728baaef3ad3f50bd05ed030\" \\**\n **-H \"Content-Type: application/json\" \\**\n **-d '{\"query\":\"\\nquery Weather  {\\n  weather(zip: \\\"96815\\\") {\\n    tempC  \\n  }\\n}\"}' \\**\n **https://www.usemodernfullstack.dev/api/graphql** \n```", "```\nHTTP/2 200\ncontent-type: application/json ; charset=utf-8\naccess-control-allow-origin: *\n\n{\"data\":{\"weather\":[{\"tempC\":\"25C\"}]}} \n```", "```\nquery Weather {\n    weather(zip: \"96815\") {\n        tempC\n        friends {\n            tempC\n        }\n    }\n} \n```", "```\n$ **curl -i \\**\n **-X POST \\**\n **-H \"Accept: application/json\" \\**\n **-H \"Authorization: Bearer 83dedad0728baaef3ad3f50bd05ed030\" \\**\n **-H \"Content-Type: application/json\" \\**\n **-d '{\"query\":\"query Weather  {\\n  weather(zip: \\\"96815\\\")**\n **{\\n    tempC\\n    friends {\\n      tempC\\n    }\\n  }\\n}\"}' \\**\n **https://www.usemodernfullstack.dev/api/graphql** \n```", "```\nHTTP/2 200\ncontent-type: application/json ; charset=utf-8\naccess-control-allow-origin: *\n\n{\"data\":{\"weather\":[{\"tempC\":\"25C\",\"friends\":\n[{\"tempC\":\"20C\"},{\"tempC\":\"30C\"}]}]}} \n```", "```\n$ **npm install @apollo/server @as-integrations/next graphql graphql-tag**\n```", "```\nimport gql from \"graphql-tag\";\n```", "```\nexport const db = [\n    {\n        zip: \"96815\",\n        weather: \"sunny\",\n        tempC: \"25C\",\n        tempF: \"70F\",\n        friends: [\"96814\", \"96826\"]\n    },\n    {\n        zip: \"96826\",\n        weather: \"sunny\",\n        tempC: \"30C\",\n        tempF: \"86F\",\n        friends: [\"96814\", \"96814\"]\n    },\n    {\n        zip: \"96814\",\n        weather: \"sunny\",\n        tempC: \"20C\",\n        tempF: \"68F\",\n        friends: [\"96815\", \"96826\"]\n    }\n]; \n```", "```\nimport {db} from \"./data\";\n\ndeclare interface WeatherInterface {\n    zip: string;\n    weather: string;\n    tempC: string;\n    tempF: string;\n    friends: string[];\n}\n\nexport const resolvers = {\n    Query: {\n        weather: async (_: any, param: WeatherInterface) => {\n            return [db.find((item) => item.zip === param.zip)];\n        }\n    },\n    Mutation: {\n        weather: async (_: any, param: {data: WeatherInterface}) => {\n            return [db.find((item) => item.zip === param.data.zip)];\n        }\n    }\n}; \n```", "```\nimport {ApolloServer} from \"@apollo/server\";\nimport {startServerAndCreateNextHandler} from \"@as-integrations/next\";\nimport {resolvers} from \"../../graphql/resolvers\";\nimport {typeDefs} from \"../../graphql/schema\";\nimport {NextApiHandler, NextApiRequest, NextApiResponse} from \"next\";\n\n//@ts-ignore\nconst server = new ApolloServer({\n    resolvers,\n    typeDefs\n});\n\nconst handler = startServerAndCreateNextHandler(server);\n\nconst allowCors =\n    (fn: NextApiHandler) => async (req: NextApiRequest, res: NextApiResponse) => {\n        res.setHeader(\"Allow\", \"POST\");\n res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Methods\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\n        if (req.method === \"OPTIONS\") {\n            res.status(200).end();\n        }\n        return await fn(req, res);\n    };\n\nexport default allowCors(handler); \n```"]