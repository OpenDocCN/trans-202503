["```\n**class Player {**\n❶ **constructor(startX, startY) {**\n **this.x = startX;**\n **this.y = startY;**\n **}**\n\n❷ **move(dx, dy) {**\n **this.x +=** **dx;**\n **this.y += dy;**\n **}**\n**}** \n```", "```\n**let player1 = new Player(0, 0);**\n```", "```\n**player1.x;**\n0\n**player1.y;**\n0\n**player1.move(3, 4);**\n**player1.x;**\n3\n**player1.y;**\n4 \n```", "```\n**class Actor {**\n **constructor(startX, startY) {**\n **this.x = startX;**\n **this.y = startY;**\n **}**\n\n **move(dx, dy) {**\n **this.x += dx;**\n **this.y += dy;**\n **}**\n\n **distanceTo(otherActor) {**\n **let dx = otherActor.x - this.x;**\n **let dy = otherActor.y - this.y;**\n **return Math.hypot(dx, dy);**\n **}**\n**}** \n```", "```\n**class Player extends Actor {**\n **constructor(startX, startY) {**\n **super(startX, startY);**\n  ❶ **this.hp = 100;**\n **}**\n**}** \n```", "```\n**class Enemy extends Actor {**\n **attack(player) {**\n **if (this.distanceTo(player) < 4) {**\n **player.hp -= 10;**\n **return true;**\n **} else {**\n **return false;**\n **}**\n **}**\n**}** \n```", "```\n**let player = new Player(1, 2);**\n**let enemy = new Enemy(3, 4);**\n**player.hp;**\n100\n**enemy.distanceTo(player);**\n2.8284271247461903\n**enemy.attack(player);**\ntrue\n**player.hp;**\n90\n**player.move(5, 5);**\n**enemy.attack(player);**\nfalse\n**player.hp;**\n90 \n```", "```\n**player instanceof Player;**\ntrue\n**player instanceof Actor;**\ntrue\n**player instanceof Enemy;**\nfalse \n```", "```\n**function Cat(name) {**\n **this.name = name;**\n**}**\n**Cat.prototype.sayHello = function () {**\n **console.log(`Miaow! My name is** **${this.name}.`);**\n**};** \n```", "```\n**let kiki =** **new Cat(\"Kiki\");**\n**kiki.sayHello();**\nMiaow! My name is Kiki.\nundefined \n```", "```\n**kiki;**\nCat {name: 'Kiki'}\n  name: \"Kiki\"\n  [[Prototype]]: Object \n```", "```\n`Cat {name: 'Kiki'}`\n  name: \"Kiki\"\n  [[Prototype]]: Object\nsayHello: f ()\nconstructor: f Cat(name)\n ❶ [[Prototype]]: Object \n```", "```\n**class Dog {**\n **constructor(name) {**\n **this.name = name;**\n **}**\n\n **sayHello() {**\n **console.log(`Woof! My name is** **${this.name}.`);**\n **}**\n**}** \n```", "```\n**let felix = new Dog(\"Felix\");**\n**felix;**\nDog {name: 'Felix'}\n  name: \"Felix\"\n  [[Prototype]]: Object\nconstructor: class Dog\nsayHello: f sayHello()\n[[Prototype]]: Object\n**kiki;**\nCat {name: 'Kiki'}\n  name: \"Kiki\"\n  [[Prototype]]: Object\nsayHello: f ()\nconstructor: f Cat(name)\n[[Prototype]]: Object \n```", "```\n**kiki.__proto__;**\n`{sayHello: f, constructor: f}` \n```", "```\n`Cat {name: 'Kiki'}`\n  name: \"Kiki\"\n  [[Prototype]]: Object\nsayHello: f ()\nconstructor: f Cat(name)\n[[Prototype]]: Object\n❶constructor: f Object()\nhasOwnProperty: f hasOwnProperty()\nisPrototypeOf: f isPrototypeOf()\npropertyIsEnumerable: f propertyIsEnumerable()\ntoLocaleString: f toLocaleString()\ntoString: f toString()\n`--snip--` \n```", "```\n**let person = {name: \"Nick\", age: 39};**\n**person;**\n{name: 'Nick', age: 39}\n  age: 39\n  name: \"Nick\"\n  [[Prototype]]: Object\nconstructor: f Object()\nhasOwnProperty: f hasOwnProperty()\nisPrototypeOf: f isPrototypeOf()\npropertyIsEnumerable: f propertyIsEnumerable()\ntoLocaleString: f toLocaleString()\ntoString: f toString()\n`--snip--` \n```", "```\n**kiki.name;** \n'Kiki'\n**kiki.sayHello();** \nMiaow! My name is Kiki.\nundefined\n**kiki.hasOwnProperty(\"name\");** \ntrue\n**kiki.madeUpMethodName();** \nUncaught TypeError: kiki.madeUpMethodName is not a function\nat <anonymous>:1:6 \n```", "```\n**let moona = new Cat(\"Moona\");**\n**moona.sayHello = function () {**\n **console.log(`HELLO!!! I'M** **${this.name.toUpperCase()}!`);**\n**};**\n**moona.sayHello();**\n❶ HELLO!!! I'M MOONA!\n**kiki.sayHello();**\n❷ Miaow! My name is Kiki. \n```"]