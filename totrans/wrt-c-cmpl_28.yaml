- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">INDEX</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Symbols</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> (addition) operator.
    *See* [addition operator](#ind-45)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">+=</samp> (addition assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp> (address) operator. *See*
    [address operator](#ind-49)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">&&</samp> (AND) operator. *See*
    [AND operator](#ind-63)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> (assignment) operator.
    *See* [assignment expressions](#ind5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp> (bitwise AND) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">&=</samp> (bitwise AND assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">~</samp> (bitwise complement)
    operator. *See* [bitwise complement operator](#ind-101)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp> (bitwise OR) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|=</samp> (bitwise OR assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">?:</samp> (conditional) operator,
    [121–124](chapter6.xhtml#pg_121). *See also* [conditional expressions](#ind10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp> (decrement) operator,
    [31–32](chapter2.xhtml#pg_31), [33](chapter2.xhtml#pg_33), [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> (dereference) operator.
    *See* [dereference operator](#ind-199)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp> (division) operator.
    *See* [division operator](#ind-204)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">/=</samp> (division assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> (equal to) operator.
    *See* [equal to operator](#ind-227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">></samp> (greater than) operator.
    *See* [greater than operator](#ind-282)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp> (greater than or equal
    to) operator. *See* [greater than or equal to operator](#ind-283)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">++</samp> (increment) operator,
    [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"><<</samp> (left shift) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"><<=</samp> (left shift assignment)
    operator, [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp> (less than) operator.
    *See* [less than operator](#ind-345)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"><=</samp> (less than or equal
    to) operator. *See* [less than or equal to operator](#ind-346)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> (multiplication) operator.
    *See* [multiplication operator](#ind-397)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">*=</samp> (multiplication assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-</samp> (negation) operator.
    *See* [negation operator](#ind-401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">!</samp> (NOT) operator. *See*
    [NOT operator](#ind-409)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">!=</samp> (not equal to) operator.
    *See* [not equal to operator](#ind-410)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">||</samp> (OR) operator. *See*
    [OR operator](#ind-442)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp> (remainder) operator.
    *See* [remainder operator](#ind-477)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">%=</samp> (remainder assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">>></samp> (right shift) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">>>=</samp> (right shift assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.</samp> (structure member) operator.
    *See* [structure member operator](#ind-543)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-></samp> (structure pointer)
    operator. *See* [structure pointer operator](#ind-544)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp> (subscript) operator.
    *See* [subscript operator](#ind-550)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-</samp> (subtraction) operator.
    *See* [subtraction operator](#ind-552)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-=</samp> (subtraction assignment)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">^</samp> (XOR) operator, [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">^=</samp> (XOR assignment) operator,
    [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ABI (application binary interface), [184](chapter9.xhtml#pg_184). *See also*
    [System V x64 ABI](#ind32)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abstract declarators, [361–363](chapter14.xhtml#pg_361)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abstract array declarators, [395–396](chapter15.xhtml#pg_395)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abstract syntax tree (AST), [4](chapter1.xhtml#pg_4), [10–14](chapter1.xhtml#pg_10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding loop labels, [150](chapter8.xhtml#pg_150)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding type information, [252–253](chapter11.xhtml#pg_252)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST typing problem, [253](chapter11.xhtml#pg_253)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [21–22](chapter1.xhtml#pg_21)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly, [18](chapter1.xhtml#pg_18), [40](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant representations in, [248](chapter11.xhtml#pg_248), [276](chapter12.xhtml#pg_276),
    [306](chapter13.xhtml#pg_306)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure determines order of evaluation, [49](chapter3.xhtml#pg_49)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY, [36–37](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_edge</samp> function, [579–580](chapter19.xhtml#pg_579)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">add</samp> instruction, [60](chapter3.xhtml#pg_60),
    [62–63](chapter3.xhtml#pg_62)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [66](chapter3.xhtml#pg_66), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [64](chapter3.xhtml#pg_64), [268](chapter11.xhtml#pg_268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: addition (<samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>) operator,
    [47–50](chapter3.xhtml#pg_47)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [60](chapter3.xhtml#pg_60), [62–63](chapter3.xhtml#pg_62)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [315](chapter13.xhtml#pg_315)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [50–55](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer addition, [387–390](chapter15.xhtml#pg_387)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [406–408](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [400](chapter15.xhtml#pg_400), [472](chapter17.xhtml#pg_472)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: addition assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">+=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">add_pseudoregisters</samp>, [632](chapter20.xhtml#pg_632),
    [633](chapter20.xhtml#pg_633), [637](chapter20.xhtml#pg_637)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">AddPtr</samp> instruction, [406–408](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [414–415](chapter15.xhtml#pg_414)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: omitting, [517](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member access with, [514–517](chapter18.xhtml#pg_514)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: address (<samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp>) operator, [349](chapter14.xhtml#pg_349),
    [353](chapter14.xhtml#pg_353)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [376](chapter14.xhtml#pg_376)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constraints on, [364](chapter14.xhtml#pg_364), [474](chapter17.xhtml#pg_474)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [354–355](chapter14.xhtml#pg_354)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [370–372](chapter14.xhtml#pg_370), [374](chapter14.xhtml#pg_374),
    [514](chapter18.xhtml#pg_514), [516–517](chapter18.xhtml#pg_516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [364–365](chapter14.xhtml#pg_364)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: address-taken analysis, [600–601](chapter19.xhtml#pg_600)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">AddrOf</samp> expressions, [354](chapter14.xhtml#pg_354).
    *See also* [address operator](#ind-49)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array decay implemented with, [398–399](chapter15.xhtml#pg_398), [409–410](chapter15.xhtml#pg_409),
    [441](chapter16.xhtml#pg_441)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">addsd</samp> instruction, [311–312](chapter13.xhtml#pg_311)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Advanced Compiler Design and Implementation* (Muchnick), [669](chapter20.xhtml#pg_669)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aggregate types, [384](chapter15.xhtml#pg_384)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aho, Alfred V., [611](chapter19.xhtml#pg_611), [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alias analysis, [601](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aliased variables, [599–602](chapter19.xhtml#pg_599), [609](chapter19.xhtml#pg_609),
    [637](chapter20.xhtml#pg_637)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.align</samp> directive, [221](chapter10.xhtml#pg_221),
    [238–239](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">aligned_alloc</samp> function,
    [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: allocated storage duration, [213](chapter10.xhtml#pg_213), [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">AllocateStack</samp> instruction,
    [40](chapter2.xhtml#pg_40), [42](chapter2.xhtml#pg_42), [44](chapter2.xhtml#pg_44),
    [268](chapter11.xhtml#pg_268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AMD64\. *See* [x64 instruction set](#ind41)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AND (<samp class="SANS_TheSansMonoCd_W5Regular_11">&&</samp>) operator, [71–77](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: short-circuiting, [72](chapter4.xhtml#pg_72)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–77](chapter4.xhtml#pg_75), [259](chapter11.xhtml#pg_259)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [255](chapter11.xhtml#pg_255), [470](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">and</samp> instruction, [323–325](chapter13.xhtml#pg_323),
    [337](chapter13.xhtml#pg_337), [341](chapter13.xhtml#pg_341)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appel, Andrew, [22](chapter1.xhtml#pg_22), [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Silicon, [xxxv](introduction.xhtml#pg_xxxv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application binary interface (ABI), [184](chapter9.xhtml#pg_184). *See also*
    [System V x64 ABI](#ind32)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operations. *See also names of individual operators*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [60–63](chapter3.xhtml#pg_60)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [296](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [311–312](chapter13.xhtml#pg_311), [315–316](chapter13.xhtml#pg_315),
    [327–328](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding behavior, [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence value, [50](chapter3.xhtml#pg_50), [55](chapter3.xhtml#pg_55)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic types, [347](chapter14.xhtml#pg_347), [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: usual arithmetic conversions, [254](chapter11.xhtml#pg_254), [279–280](chapter12.xhtml#pg_279),
    [308](chapter13.xhtml#pg_308), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARM, [xxvii](introduction.xhtml#pg_xxvii), [672](next_steps.xhtml#pg_672)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array declarators, [357–358](chapter14.xhtml#pg_357)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abstract, [361–362](chapter14.xhtml#pg_361), [395–396](chapter15.xhtml#pg_395)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [394–396](chapter15.xhtml#pg_394)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays, [384–399](chapter15.xhtml#pg_384)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alignment of, [415](chapter15.xhtml#pg_415)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly type of, [413](chapter15.xhtml#pg_413)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decay, [386–387](chapter15.xhtml#pg_386)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declaring, [384–385](chapter15.xhtml#pg_384). *See also* [array declarators](#ind2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: element comparison, [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: element type, [384](chapter15.xhtml#pg_384)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complete, [471–473](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function declarations, array types in, [390–391](chapter15.xhtml#pg_390)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implicit conversion to pointers. *See* [array-to-pointer decay](#ind3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializers, [385](chapter15.xhtml#pg_385). *See also* [compound initializers](#ind9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals as, [425–426](chapter16.xhtml#pg_425), [437–438](chapter16.xhtml#pg_437),
    [440–441](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: memory layout, [385–386](chapter15.xhtml#pg_385)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multidimensional, [384–385](chapter15.xhtml#pg_384), [386–389](chapter15.xhtml#pg_386),
    [393](chapter15.xhtml#pg_393)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subscripting, [408–410](chapter15.xhtml#pg_408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [398–399](chapter15.xhtml#pg_398), [402–405](chapter15.xhtml#pg_402),
    [471](chapter17.xhtml#pg_471), [472–473](chapter17.xhtml#pg_472)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variable-length, [391](chapter15.xhtml#pg_391)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array-to-pointer decay, [386–387](chapter15.xhtml#pg_386)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implemented with <samp class="SANS_TheSansMonoCd_W5Regular_11">AddrOf</samp>,
    [398–399](chapter15.xhtml#pg_398), [409–410](chapter15.xhtml#pg_409), [441](chapter16.xhtml#pg_441)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">sizeof</samp> operands not subject
    to, [462](chapter17.xhtml#pg_462)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Arrow</samp> expression, [495](chapter18.xhtml#pg_495).
    *See also* [structure pointer operator](#ind-544)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASCII, [10](chapter1.xhtml#pg_10), [204](chapter9.xhtml#pg_204), [426–427](chapter16.xhtml#pg_426),
    [449–450](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: values of escape sequences, [429](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.ascii</samp> directive, [426–427](chapter16.xhtml#pg_426),
    [449–450](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.asciz</samp> directive, [426–427](chapter16.xhtml#pg_426),
    [449–450](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASDL (Zephyr Abstract Syntax Description Language), [13–14](chapter1.xhtml#pg_13),
    [22](chapter1.xhtml#pg_22), [171](chapter9.xhtml#pg_171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field names, [14](chapter1.xhtml#pg_14)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: product types, [171](chapter9.xhtml#pg_171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sum types, [171](chapter9.xhtml#pg_171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembler directives, [5](chapter1.xhtml#pg_5). *See also entries for individual
    directives*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assemblers, [xxviii](introduction.xhtml#pg_xxviii), [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU assembler (GAS), [268](chapter11.xhtml#pg_268), [338](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invoking, [7](chapter1.xhtml#pg_7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLVM assembler, [268](chapter11.xhtml#pg_268), [338](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly code, [xxvii](introduction.xhtml#pg_xxvii), [4–7](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic in, [60–63](chapter3.xhtml#pg_60)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [311–312](chapter13.xhtml#pg_311), [315–316](chapter13.xhtml#pg_315),
    [327–328](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AT&T vs. Intel syntax, [6](chapter1.xhtml#pg_6), [244](chapter11.xhtml#pg_244),
    [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise complement in, [26–27](chapter2.xhtml#pg_26), [40–41](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comments in, [20](chapter1.xhtml#pg_20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons in, [78–81](chapter4.xhtml#pg_78), [82–83](chapter4.xhtml#pg_82),
    [85–86](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [283–285](chapter12.xhtml#pg_283), [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging, [675–697](appendix-A.xhtml#pg_675)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with GDB, [677–687](appendix-A.xhtml#pg_677)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with LLDB, [687–698](appendix-A.xhtml#pg_687)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: division in, [60–63](chapter3.xhtml#pg_60)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [286](chapter12.xhtml#pg_286), [288](chapter12.xhtml#pg_288)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [310–336](chapter13.xhtml#pg_310)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function calls in, [161](chapter9.xhtml#pg_161), [184–199](chapter9.xhtml#pg_184),
    [312–315](chapter13.xhtml#pg_312), [519–528](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jumps in, [83–87](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage in, [168–169](chapter9.xhtml#pg_168), [220–223](chapter10.xhtml#pg_220)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: long integers in, [244–246](chapter11.xhtml#pg_244), [261–264](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: negation in, [26–27](chapter2.xhtml#pg_26), [40–41](chapter2.xhtml#pg_40), [315–316](chapter13.xhtml#pg_315),
    [327–328](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storage duration in, [220–223](chapter10.xhtml#pg_220)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strings in, [426–429](chapter16.xhtml#pg_426), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions in, [244–245](chapter11.xhtml#pg_244), [317–324](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317–324](chapter13.xhtml#pg_317), [328–329](chapter13.xhtml#pg_328),
    [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sign extension, [244–245](chapter11.xhtml#pg_244), [263](chapter11.xhtml#pg_263),
    [444](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: truncation, [245](chapter11.xhtml#pg_245), [263](chapter11.xhtml#pg_263), [444](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero extension, [286–288](chapter12.xhtml#pg_286), [443–444](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly generation, [4](chapter1.xhtml#pg_4), [17–19](chapter1.xhtml#pg_17)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compiler passes in, [39](chapter2.xhtml#pg_39)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference tables, [700–701](appendix-B.xhtml#pg_700), [704–711](appendix-B.xhtml#pg_704)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly instructions, [5–6](chapter1.xhtml#pg_5), [17–18](chapter1.xhtml#pg_17).
    *See also names of individual instructions*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly AST, [18](chapter1.xhtml#pg_18)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming SIMD Extension, [310–312](chapter13.xhtml#pg_310)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: suffixes, [6](chapter1.xhtml#pg_6), [269](chapter11.xhtml#pg_269), [311](chapter13.xhtml#pg_311),
    [427](chapter16.xhtml#pg_427), [443–444](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly types, [261–262](chapter11.xhtml#pg_261), [265–266](chapter11.xhtml#pg_265)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Byte</samp>, [443](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ByteArray</samp>, [413](chapter15.xhtml#pg_413)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Double</samp>, [324](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of eightbytes, [536–537](chapter18.xhtml#pg_536)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Longword</samp>, [261](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Quadword</samp>, [261](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: suffixes for, [269–271](chapter11.xhtml#pg_269), [340–341](chapter13.xhtml#pg_340),
    [443](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignment expressions, [94–95](chapter5.xhtml#pg_94)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [97–98](chapter5.xhtml#pg_97)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: operator, [97](chapter5.xhtml#pg_97), [101](chapter5.xhtml#pg_101)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence value, [103](chapter5.xhtml#pg_103)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [100–103](chapter5.xhtml#pg_100)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [107](chapter5.xhtml#pg_107)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [110](chapter5.xhtml#pg_110), [371–374](chapter14.xhtml#pg_371),
    [516](chapter18.xhtml#pg_516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [256](chapter11.xhtml#pg_256), [368](chapter14.xhtml#pg_368),
    [399](chapter15.xhtml#pg_399)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validating lvalues in, [107](chapter5.xhtml#pg_107), [399](chapter15.xhtml#pg_399)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: associativity, [50–51](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST. *See* [abstract syntax tree](#ind1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AT&T syntax, [6](chapter1.xhtml#pg_6), [244](chapter11.xhtml#pg_244), [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automatic storage duration, [212–213](chapter10.xhtml#pg_212), [217](chapter10.xhtml#pg_217)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays with, initializing, [440](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automatic variables, [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [229–230](chapter10.xhtml#pg_229)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [233](chapter10.xhtml#pg_233), [257](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AVX instruction set extension, [318](chapter13.xhtml#pg_318)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">B</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: backend symbol table, [266–267](chapter11.xhtml#pg_266)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete types in, [530](chapter18.xhtml#pg_530), [546](chapter18.xhtml#pg_546)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: register usage tracked in, [621–622](chapter20.xhtml#pg_621), [635](chapter20.xhtml#pg_635),
    [637](chapter20.xhtml#pg_637), [647](chapter20.xhtml#pg_647)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: return value passing information tracked in, [546](chapter18.xhtml#pg_546),
    [550](chapter18.xhtml#pg_550)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: top-level constants in, [327](chapter13.xhtml#pg_327), [339](chapter13.xhtml#pg_339),
    [446](chapter16.xhtml#pg_446)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: backward analysis, [584](chapter19.xhtml#pg_584), [604](chapter19.xhtml#pg_604)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterative algorithm, [607–608](chapter19.xhtml#pg_607)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.balign</samp> directive, [238–289](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ballman, Aaron, [475](chapter17.xhtml#pg_475)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: base pointer, [29](chapter2.xhtml#pg_29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic blocks, [576–578](chapter19.xhtml#pg_576)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [578–579](chapter19.xhtml#pg_578)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: empty, [583](chapter19.xhtml#pg_583)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unreachable, [581–582](chapter19.xhtml#pg_581)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic source character set, [430](chapter16.xhtml#pg_430)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic type, [356](chapter14.xhtml#pg_356)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bendersky, Eli, [21](chapter1.xhtml#pg_21), [68](chapter3.xhtml#pg_68), [222](chapter10.xhtml#pg_222),
    [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: binary expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [48](chapter3.xhtml#pg_48)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: formal grammar, [51](chapter3.xhtml#pg_51), [52](chapter3.xhtml#pg_52)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [50–55](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with precedence climbing, [51–55](chapter3.xhtml#pg_51)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with recursive descent, [50–51](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: operands, unsequenced, [58–59](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: binary fractions, [297](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: binary operators. *See* [binary expressions *and names of individual operators*](#ind-96)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise AND (<samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp>) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise AND assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">&=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise complement (<samp class="SANS_TheSansMonoCd_W5Regular_11">~</samp>)
    operator, [26](chapter2.xhtml#pg_26)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [26–27](chapter2.xhtml#pg_26), [40–41](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [33–34](chapter2.xhtml#pg_33)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [36–37](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: token for, [31–32](chapter2.xhtml#pg_31)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254](chapter11.xhtml#pg_254), [308](chapter13.xhtml#pg_308),
    [369](chapter14.xhtml#pg_369), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise OR (<samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise OR assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">|=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: blocks, [132](chapter7.xhtml#pg_132), [135](chapter7.xhtml#pg_135)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound statements as, [132](chapter7.xhtml#pg_132)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [136](chapter7.xhtml#pg_136)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [136–139](chapter7.xhtml#pg_136)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: block scope declarations, [208–217](chapter10.xhtml#pg_208). *See also* [scopes](#ind27)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invalid, [220](chapter10.xhtml#pg_220)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving identifiers in, [228–229](chapter10.xhtml#pg_228)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [232–233](chapter10.xhtml#pg_232)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Borgwardt, Michael, [343](chapter13.xhtml#pg_343)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: break labels, [155–158](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">break</samp> statements, [146–148](chapter8.xhtml#pg_146)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotating, [150](chapter8.xhtml#pg_150), [151](chapter8.xhtml#pg_151), [152–154](chapter8.xhtml#pg_152)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [149–150](chapter8.xhtml#pg_149)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [155–156](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Briggs, Preston, [669](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Briggs test, [656–659](chapter20.xhtml#pg_656), [666–667](chapter20.xhtml#pg_666)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [669–670](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: limits of, [661–663](chapter20.xhtml#pg_661)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.bss</samp> directive, [222](chapter10.xhtml#pg_222)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BSS section, [222](chapter10.xhtml#pg_222)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> suffix, [427](chapter16.xhtml#pg_427),
    [443](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">build_graph</samp> function, [631–632](chapter20.xhtml#pg_631)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.byte</samp> directive, [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">C</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: caller-saved and callee-saved registers, [185](chapter9.xhtml#pg_185), [648–649](chapter20.xhtml#pg_648)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: callee-saved registers in assembly AST, [620–621](chapter20.xhtml#pg_620)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in graph coloring algorithm, [645–646](chapter20.xhtml#pg_645)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: saving and restoring, [187](chapter9.xhtml#pg_187), [193–194](chapter9.xhtml#pg_193),
    [196–197](chapter9.xhtml#pg_196), [648–649](chapter20.xhtml#pg_648)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tracking callee-saved register usage, [646–647](chapter20.xhtml#pg_646)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: calling convention, [161](chapter9.xhtml#pg_161), [184](chapter9.xhtml#pg_184).
    *See also* [System V x64 calling convention](#ind33)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp> instruction, [186](chapter9.xhtml#pg_186),
    [189–190](chapter9.xhtml#pg_189)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [201–202](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating, [198–199](chapter9.xhtml#pg_198)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">calloc</samp> function, [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">case</samp> statements, [159](chapter8.xhtml#pg_159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Cast</samp> expression, [248](chapter11.xhtml#pg_248)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implicit type conversions represented by, [255](chapter11.xhtml#pg_255)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cast expressions. *See also* [type conversions](#ind37)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [247–249](chapter11.xhtml#pg_247), [464–466](chapter17.xhtml#pg_464)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer types as operands, [351–352](chapter14.xhtml#pg_351)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [259–260](chapter11.xhtml#pg_259), [281–283](chapter12.xhtml#pg_281),
    [309–310](chapter13.xhtml#pg_309), [375](chapter14.xhtml#pg_375), [440](chapter16.xhtml#pg_440),
    [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369),
    [402](chapter15.xhtml#pg_402), [471](chapter17.xhtml#pg_471), [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, [459](chapter17.xhtml#pg_459),
    [471](chapter17.xhtml#pg_471), [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">cdq</samp> instruction, [61–63](chapter3.xhtml#pg_61),
    [262](chapter11.xhtml#pg_262)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [66](chapter3.xhtml#pg_66), [269](chapter11.xhtml#pg_269)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaitin, Gregory, [669](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaitin-Briggs algorithm, [669–670](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: character constants, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lexing, [429–431](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [433](chapter16.xhtml#pg_433)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type of, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UTF–8, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: character types, [423–424](chapter16.xhtml#pg_423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly type, [443](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">char</samp>, [423–424](chapter16.xhtml#pg_423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer promotions, [424](chapter16.xhtml#pg_424), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">signed char</samp>, [423–424](chapter16.xhtml#pg_423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: specifiers, parsing, [433](chapter16.xhtml#pg_433)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializers for, [436](chapter16.xhtml#pg_436)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [443–445](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [440](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned char</samp>, [423–424](chapter16.xhtml#pg_423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wide, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">char</samp> keyword, [429](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">char</samp> type, [423–424](chapter16.xhtml#pg_423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: signedness, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializer for, [436–438](chapter16.xhtml#pg_436)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chu, Andy, [68](chapter3.xhtml#pg_68)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ciechanowski, Bartosz, [345](chapter13.xhtml#pg_345)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clang, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv), [4–5](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point support, [296–297](chapter13.xhtml#pg_296), [317–318](chapter13.xhtml#pg_317),
    [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [xxxiv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invoking with <samp class="SANS_TheSansMonoCd_W5Regular_11">gcc</samp> command,
    [xxxv](introduction.xhtml#pg_xxxv), [4](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: language extensions, [395](chapter15.xhtml#pg_395), [401](chapter15.xhtml#pg_401),
    [471](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System V ABI violation, [444–445](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, treatment of, [474–475](chapter17.xhtml#pg_474)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">classify_parameters</samp> function,
    [329–330](chapter13.xhtml#pg_329), [534–536](chapter18.xhtml#pg_534)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">classify_return_value</samp> function,
    [532–533](chapter18.xhtml#pg_532), [537–538](chapter18.xhtml#pg_537)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">classify_structure</samp> function,
    [533–534](chapter18.xhtml#pg_533)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">cmp</samp> instruction, [79–80](chapter4.xhtml#pg_79),
    [85–86](chapter4.xhtml#pg_85), [262](chapter11.xhtml#pg_262)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [90](chapter4.xhtml#pg_90), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [88](chapter4.xhtml#pg_88), [268](chapter11.xhtml#pg_268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">coalesce</samp> function, [665–666](chapter20.xhtml#pg_665)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in build-coalesce loop, [663](chapter20.xhtml#pg_663)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code emission, [4](chapter1.xhtml#pg_4), [19–20](chapter1.xhtml#pg_19). *See
    also entries for individual instructions and language constructs*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point constants, [338–339](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function names, [201](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function prologue and epilogue, [43–44](chapter2.xhtml#pg_43)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instruction size suffixes, [269–271](chapter11.xhtml#pg_269), [340–341](chapter13.xhtml#pg_340),
    [443](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local labels, [89](chapter4.xhtml#pg_89), [339](chapter13.xhtml#pg_339), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: non-executable stack note, [19](chapter1.xhtml#pg_19)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@PLT</samp> suffix, [201–202](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part I, [702–704](appendix-B.xhtml#pg_702)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part II, [711–715](appendix-B.xhtml#pg_711)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part III, [716–724](appendix-B.xhtml#pg_716)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: register aliases, [88](chapter4.xhtml#pg_88), [90](chapter4.xhtml#pg_90), [203](chapter9.xhtml#pg_203)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals, [449–450](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">color_graph</samp> function, [644–646](chapter20.xhtml#pg_644)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">comisd</samp> instruction, [317](chapter13.xhtml#pg_317),
    [324](chapter13.xhtml#pg_324), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [341](chapter13.xhtml#pg_341)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: common real type, [254–255](chapter11.xhtml#pg_254), [279–280](chapter12.xhtml#pg_279),
    [308](chapter13.xhtml#pg_308), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons, [78–83](chapter4.xhtml#pg_78). *See also* [pointer comparisons](#ind21);
    [relational operators](#ind25)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [283–286](chapter12.xhtml#pg_283)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compiler, [xxvii](introduction.xhtml#pg_xxvii)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stages, [3–4](chapter1.xhtml#pg_3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compiler driver, [xxviii](introduction.xhtml#pg_xxviii), [7–8](chapter1.xhtml#pg_7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: command line options, [8](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-c</samp>, [169–170](chapter9.xhtml#pg_169)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--codegen</samp>, [8](chapter1.xhtml#pg_8),
    [43](chapter2.xhtml#pg_43)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--eliminate-dead-stores</samp>,
    [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--eliminate-unreachable-code</samp>,
    [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--fold-constants</samp>, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-l</samp>, [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--lex</samp>, [8](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--optimize</samp>, [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--parse</samp>, [8](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--propagate-copies</samp>, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">-S</samp>, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--tacky</samp>, [38](chapter2.xhtml#pg_38)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--validate</samp>, [109](chapter5.xhtml#pg_109)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating assembly files, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating object files, [169](chapter9.xhtml#pg_169)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linking shared libraries, [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiler Explorer (Godbolt), [xxxvi](introduction.xhtml#pg_xxxvi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Compilers: Principles, Techniques, and Tools*, 2nd edition (Aho et al.), [611](chapter19.xhtml#pg_611),
    [670](chapter20.xhtml#pg_670)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complete types, [461–462](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: required, [471–473](chapter17.xhtml#pg_471), [477–478](chapter17.xhtml#pg_477),
    [488](chapter18.xhtml#pg_488), [491](chapter18.xhtml#pg_491)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure types, [486–487](chapter18.xhtml#pg_486)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound assignment operators, [113–114](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound initializers, [385](chapter15.xhtml#pg_385)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [413](chapter15.xhtml#pg_413), [418–419](chapter15.xhtml#pg_418)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [393](chapter15.xhtml#pg_393)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: not implemented, [391–392](chapter15.xhtml#pg_391)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [396](chapter15.xhtml#pg_396)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static, [404–405](chapter15.xhtml#pg_404), [509–511](chapter18.xhtml#pg_509)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for structures, [492](chapter18.xhtml#pg_492)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [406](chapter15.xhtml#pg_406), [410–411](chapter15.xhtml#pg_410),
    [517–518](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [403–405](chapter15.xhtml#pg_403), [509–511](chapter18.xhtml#pg_509)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound literals, [391](chapter15.xhtml#pg_391)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound statements, [131](chapter7.xhtml#pg_131)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as blocks, [132](chapter7.xhtml#pg_132)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [135–136](chapter7.xhtml#pg_135)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [136–139](chapter7.xhtml#pg_136)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scope determined by, [131–134](chapter7.xhtml#pg_131)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [140](chapter7.xhtml#pg_140)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: concrete syntax tree, [14](chapter1.xhtml#pg_14)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional (<samp class="SANS_TheSansMonoCd_W5Regular_11">?:</samp>) operator,
    [121–124](chapter6.xhtml#pg_121)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions, [117](chapter6.xhtml#pg_117)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: delimiter tokens, [118](chapter6.xhtml#pg_118)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [121–125](chapter6.xhtml#pg_121)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [125–126](chapter6.xhtml#pg_125)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [127](chapter6.xhtml#pg_127), [479–480](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [256](chapter11.xhtml#pg_256), [368](chapter14.xhtml#pg_368),
    [467](chapter17.xhtml#pg_467), [470](chapter17.xhtml#pg_470), [476](chapter17.xhtml#pg_476),
    [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> operands, [459](chapter17.xhtml#pg_459),
    [476](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional jump instructions. *See* [jump instructions (assembly)](#ind15);
    [jump instructions (TACKY)](#ind16)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional set instructions, [82–83](chapter4.xhtml#pg_82)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [88–90](chapter4.xhtml#pg_88)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating, [85–86](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">SetCC</samp>, [85–86](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: condition codes, [85–86](chapter4.xhtml#pg_85), [285](chapter12.xhtml#pg_285),
    [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: suffixes for, [90](chapter4.xhtml#pg_90), [291](chapter12.xhtml#pg_291)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">conservative_coalesceable</samp>
    function, [666–667](chapter20.xhtml#pg_666)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conservative coalescing, [653](chapter20.xhtml#pg_653), [656](chapter20.xhtml#pg_656),
    [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant folding, [561](chapter19.xhtml#pg_561), [573–576](chapter19.xhtml#pg_573)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combining with other optimizations, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant propagation, [563](chapter19.xhtml#pg_563)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant strings, [425–426](chapter16.xhtml#pg_425)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [428](chapter16.xhtml#pg_428), [446](chapter16.xhtml#pg_446)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [449–451](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [437–439](chapter16.xhtml#pg_437), [441](chapter16.xhtml#pg_441)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [441–442](chapter16.xhtml#pg_441)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [436](chapter16.xhtml#pg_436), [437–439](chapter16.xhtml#pg_437)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant tokens, [8–10](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: character, [429–431](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [302–303](chapter13.xhtml#pg_302)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding, [300](chapter13.xhtml#pg_300)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: long integer, [247](chapter11.xhtml#pg_247)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regular expressions, [304](chapter13.xhtml#pg_304)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned integer, [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned long integer, [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: continue labels, [155–158](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp> statements, [146–150](chapter8.xhtml#pg_146)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotating, [150](chapter8.xhtml#pg_150), [151](chapter8.xhtml#pg_151), [152–154](chapter8.xhtml#pg_152)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [149–150](chapter8.xhtml#pg_149)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [155–156](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control-flow graphs, [570](chapter19.xhtml#pg_570), [576–581](chapter19.xhtml#pg_576)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control-flow protection, [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: controlling expression, [118–119](chapter6.xhtml#pg_118)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loops, [144–145](chapter8.xhtml#pg_144)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [352](chapter14.xhtml#pg_352), [470](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control structures, [117](chapter6.xhtml#pg_117)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversion ranks, [279](chapter12.xhtml#pg_279)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">convert_by_assignment</samp> function,
    [368](chapter14.xhtml#pg_368), [469](chapter17.xhtml#pg_469), [504–505](chapter18.xhtml#pg_504)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">convert_function_call</samp> function,
    [197–199](chapter9.xhtml#pg_197), [263](chapter11.xhtml#pg_263), [331–333](chapter13.xhtml#pg_331),
    [538–541](chapter18.xhtml#pg_538)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">convert_unop</samp> function,
    [37–38](chapter2.xhtml#pg_37)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">convert_val</samp> function, [198](chapter9.xhtml#pg_198)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cooper, Keith, [669–670](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">copy_bytes_from_reg</samp> function,
    [543–544](chapter18.xhtml#pg_543)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">copy_bytes_to_reg</samp> function,
    [541–543](chapter18.xhtml#pg_541)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">CopyFromOffset</samp> instruction,
    [512–513](chapter18.xhtml#pg_512)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [532](chapter18.xhtml#pg_532), [548](chapter18.xhtml#pg_548)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member access with, [513–514](chapter18.xhtml#pg_513), [516](chapter18.xhtml#pg_516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Copy</samp> instruction, [75–77](chapter4.xhtml#pg_75),
    [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [86](chapter4.xhtml#pg_86)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with non-scalar operands, [531](chapter18.xhtml#pg_531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions with, [282](chapter12.xhtml#pg_282), [574](chapter19.xhtml#pg_574)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copy propagation, [563–564](chapter19.xhtml#pg_563), [585–602](chapter19.xhtml#pg_585).
    *See also* [reaching copies analysis](#ind23)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combining with other optimizations, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Part II TACKY programs, [599–602](chapter19.xhtml#pg_599)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rewriting instructions, [598–599](chapter19.xhtml#pg_598), [602](chapter19.xhtml#pg_602)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">CopyToOffset</samp> instruction,
    [406–407](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [414](chapter15.xhtml#pg_414)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with non-scalar operands, [531–532](chapter18.xhtml#pg_531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializing aggregate objects with, [410–411](chapter15.xhtml#pg_410), [440–441](chapter16.xhtml#pg_440),
    [517–518](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member access with, [514](chapter18.xhtml#pg_514), [516](chapter18.xhtml#pg_516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cordes, Peter, [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">cqo</samp> instruction, [269](chapter11.xhtml#pg_269)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C standard, [xxxvi](introduction.xhtml#pg_xxxvi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp> (address) operator applied
    to dereferenced pointer, [353](chapter14.xhtml#pg_353)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array decay, [386–387](chapter15.xhtml#pg_386)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic source character set, [430](chapter16.xhtml#pg_430)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C17, [xxxvi–xxxvii](introduction.xhtml#pg_xxxvi), [164](chapter9.xhtml#pg_164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C23 standard, [xxxvi–xxxvii](introduction.xhtml#pg_xxxvi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: checked integer arithmetic, [82](chapter4.xhtml#pg_82)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decimal floating-point types, [300](chapter13.xhtml#pg_300)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: empty initializers, [519](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: empty parameter lists, [164](chapter9.xhtml#pg_164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">memset_explicit</samp>, [565](chapter19.xhtml#pg_565)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: old-style function definitions removed, [164](chapter9.xhtml#pg_164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">u8</samp> character constants,
    [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarators, [358](chapter14.xhtml#pg_358)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: escape sequences, [429](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: evaluation order, [59](chapter3.xhtml#pg_59)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: short-circuiting operators, [72](chapter4.xhtml#pg_72)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point types, [296](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops, missing controlling
    expression in, [158](chapter8.xhtml#pg_158)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implementation-defined behavior, [245](chapter11.xhtml#pg_245)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete types, [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage, [167–168](chapter9.xhtml#pg_167), [210–212](chapter10.xhtml#pg_210)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lvalues, [348](chapter14.xhtml#pg_348)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: observable behavior, [560](chapter19.xhtml#pg_560)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: preprocessing tokens, [303](chapter13.xhtml#pg_303)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statements, missing,
    [111–112](chapter5.xhtml#pg_111)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storage duration, [212](chapter10.xhtml#pg_212)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strict aliasing rules, [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member declarations, [488–489](chapter18.xhtml#pg_488)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary lifetimes, [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions, [244](chapter11.xhtml#pg_244), [274](chapter12.xhtml#pg_274)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types of integer constants, [278](chapter12.xhtml#pg_278)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type specifiers, [278](chapter12.xhtml#pg_278)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined behavior, [80](chapter4.xhtml#pg_80), [91](chapter4.xhtml#pg_91),
    [107](chapter5.xhtml#pg_107), [112](chapter5.xhtml#pg_112)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned wraparound, [285](chapter12.xhtml#pg_285)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: usual arithmetic conversions, [254](chapter11.xhtml#pg_254), [279–280](chapter12.xhtml#pg_279)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, [458](chapter17.xhtml#pg_458),
    [473–475](chapter17.xhtml#pg_473)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.cstring</samp> directive, [428](chapter16.xhtml#pg_428),
    [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cuoq, Pascal, [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">cvtsi2sd</samp> instruction, [320–321](chapter13.xhtml#pg_320),
    [324](chapter13.xhtml#pg_324), [329](chapter13.xhtml#pg_329)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in character type conversions, [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">cvttsd2si</samp> instruction,
    [317–318](chapter13.xhtml#pg_317), [324](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in character type conversions, [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">D</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dangling else ambiguity, [120–121](chapter6.xhtml#pg_120)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data-flow analysis, [563](chapter19.xhtml#pg_563), [584–585](chapter19.xhtml#pg_584)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: liveness analysis, [604–609](chapter19.xhtml#pg_604)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of assembly programs, [633–636](chapter20.xhtml#pg_633)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reaching copies analysis, [589–598](chapter19.xhtml#pg_589)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Data</samp> operand, [236–238](chapter10.xhtml#pg_236)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for constants, [326](chapter13.xhtml#pg_326), [339](chapter13.xhtml#pg_339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: offset, [529](chapter18.xhtml#pg_529), [550](chapter18.xhtml#pg_550), [551](chapter18.xhtml#pg_551)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data section, [221](chapter10.xhtml#pg_221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dawson, Bruce, [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dead store elimination, [564–565](chapter19.xhtml#pg_564), [603–609](chapter19.xhtml#pg_603)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combining with other optimizations, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: liveness analysis, [604–609](chapter19.xhtml#pg_604)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterative algorithm, [607–608](chapter19.xhtml#pg_607)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: meet operator, [606–607](chapter19.xhtml#pg_606)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transfer function, [605–606](chapter19.xhtml#pg_605)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Part II TACKY programs, [608–609](chapter19.xhtml#pg_608)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: security impact, [566](chapter19.xhtml#pg_566)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">DeallocateStack</samp> instruction,
    [194–195](chapter9.xhtml#pg_194), [198–199](chapter9.xhtml#pg_198), [202](chapter9.xhtml#pg_202),
    [264](chapter11.xhtml#pg_264)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debuggers, [xxxiv](introduction.xhtml#pg_xxxiv), [675–698](appendix-A.xhtml#pg_675)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GDB (GNU debugger), [xxxiv–xxxv](introduction.xhtml#pg_xxxiv), [677–687](appendix-A.xhtml#pg_677)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLDB (LLVM debugger), [xxxv](introduction.xhtml#pg_xxxv), [687–698](appendix-A.xhtml#pg_687)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarations, [94](chapter5.xhtml#pg_94), [162–163](chapter9.xhtml#pg_162),
    [208–220](chapter10.xhtml#pg_208). *See also* [function declarations](#ind13);
    [variable declarations](#ind38)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vs. definitions, [214–216](chapter10.xhtml#pg_214)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hidden, [133](chapter7.xhtml#pg_133)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage, [166–168](chapter9.xhtml#pg_166), [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scope, [131–134](chapter7.xhtml#pg_131), [208–209](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vs. statements, [98–99](chapter5.xhtml#pg_98)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure type, [486–491](chapter18.xhtml#pg_486)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarators, [356–361](chapter14.xhtml#pg_356)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abstract, [361–363](chapter14.xhtml#pg_361), [395–396](chapter15.xhtml#pg_395)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array, [357–358](chapter14.xhtml#pg_357), [394–396](chapter15.xhtml#pg_394)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in C standard, [358](chapter14.xhtml#pg_358)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function, [357](chapter14.xhtml#pg_357)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [358–361](chapter14.xhtml#pg_358), [362–363](chapter14.xhtml#pg_362),
    [394–396](chapter15.xhtml#pg_394)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer, [356](chapter14.xhtml#pg_356), [361](chapter14.xhtml#pg_361)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decrement (<samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp>) operator,
    [31–32](chapter2.xhtml#pg_31), [33](chapter2.xhtml#pg_33), [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">default</samp> statements, [159](chapter8.xhtml#pg_159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: degree, [638](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: degree < *k* rule, [638](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dereference (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>) operator,
    [349–350](chapter14.xhtml#pg_349)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp> operator applied to result,
    [353](chapter14.xhtml#pg_353)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [354–355](chapter14.xhtml#pg_354)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointers to <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> as operands,
    [473–475](chapter17.xhtml#pg_473)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [371–374](chapter14.xhtml#pg_371)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [364–365](chapter14.xhtml#pg_364)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">DereferencedPointer</samp> construct,
    [372–374](chapter14.xhtml#pg_372), [408](chapter15.xhtml#pg_408), [410](chapter15.xhtml#pg_410),
    [515–517](chapter18.xhtml#pg_515)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: derived types, [354](chapter14.xhtml#pg_354)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: disjoint-set data structures, [663–664](chapter20.xhtml#pg_663)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">div</samp> instruction, [286](chapter12.xhtml#pg_286),
    [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [290](chapter12.xhtml#pg_290)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: division (<samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>) operator,
    [47–48](chapter3.xhtml#pg_47)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [60–63](chapter3.xhtml#pg_60)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [315](chapter13.xhtml#pg_315), [327](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [286](chapter12.xhtml#pg_286), [288](chapter12.xhtml#pg_288)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [50–55](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: division assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">/=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">divsd</samp> instruction, [315](chapter13.xhtml#pg_315)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">DivDouble</samp>, [324–325](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp> statements, [144](chapter8.xhtml#pg_144),
    [148–151](chapter8.xhtml#pg_148), [152–155](chapter8.xhtml#pg_152), [156](chapter8.xhtml#pg_156)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dot</samp> operator, [495](chapter18.xhtml#pg_495).
    *See also* [structure member operator](#ind-385)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.double</samp> directive, [312](chapter13.xhtml#pg_312),
    [338–339](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: double extended precision floating-point format, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: double-precision floating-point format, [297–299](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: double rounding error, [306](chapter13.xhtml#pg_306)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversion with, [320–323](chapter13.xhtml#pg_320)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">DoubleToInt</samp> instruction,
    [309–310](chapter13.xhtml#pg_309)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [317–318](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">DoubleToUInt</samp> instruction,
    [309–310](chapter13.xhtml#pg_309)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [318–320](chapter13.xhtml#pg_318)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp> type, [295–301](chapter13.xhtml#pg_295).
    *See also* [floating-point constants](#ind11); [floating-point operations](#ind12)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alignment, [336](chapter13.xhtml#pg_336)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly type, [324](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversions. *See* [conversions to and from <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>
    *under* integer types; <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>
    *under* type conversions](#ind1a)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in function calls, [312–315](chapter13.xhtml#pg_312), [329–333](chapter13.xhtml#pg_329)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: representation, [297–299](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precision, [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding, [299–301](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: size, [336](chapter13.xhtml#pg_336)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: specifier, [302](chapter13.xhtml#pg_302), [305](chapter13.xhtml#pg_305), [306–307](chapter13.xhtml#pg_306)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializers for, [308–309](chapter13.xhtml#pg_308), [340](chapter13.xhtml#pg_340)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [308–309](chapter13.xhtml#pg_308)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drysdale, David, [21](chapter1.xhtml#pg_21)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D’Silva, Vijay, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic linkers, [202](chapter9.xhtml#pg_202)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">E</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAX register, [5–6](chapter1.xhtml#pg_5), [40–41](chapter2.xhtml#pg_40), [60–62](chapter3.xhtml#pg_60),
    [185](chapter9.xhtml#pg_185), [193](chapter9.xhtml#pg_193), [525](chapter18.xhtml#pg_525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EBNF. *See* [Extended Backus-Naur Form notation](#ind-234)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EDX register, [60–64](chapter3.xhtml#pg_60), [185](chapter9.xhtml#pg_185), [525](chapter18.xhtml#pg_525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: effective type, [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Elements of Computing Systems*, *The* (Nisan and Schocken), [45](chapter2.xhtml#pg_45)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ELF (Executable and Linkable Format), [201](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp> clause, [118–121](chapter6.xhtml#pg_118),
    [126–127](chapter6.xhtml#pg_126)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dangling else ambiguity, [120–121](chapter6.xhtml#pg_120)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Engineering a Compiler*, 2nd edition (Cooper and Torczon), [669–670](chapter20.xhtml#pg_669)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>) operator,
    [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [366–367](chapter14.xhtml#pg_366),
    [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: escape sequences, [429–431](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [449–450](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executable and Linkable Format (ELF), [201](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: executable stacks, [19](chapter1.xhtml#pg_19)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [22](chapter1.xhtml#pg_22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">expect</samp> function, [16](chapter1.xhtml#pg_16)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expressions, [14](chapter1.xhtml#pg_14)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converting to TACKY, [38](chapter2.xhtml#pg_38)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: full, [374](chapter14.xhtml#pg_374)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lvalue vs. non-lvalue, [348](chapter14.xhtml#pg_348)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [34](chapter2.xhtml#pg_34). *See also* [precedence climbing](#ind22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [107](chapter5.xhtml#pg_107)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [251–256](chapter11.xhtml#pg_251)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: result types, [251](chapter11.xhtml#pg_251)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: void, [459–460](chapter17.xhtml#pg_459)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expression statements, [95](chapter5.xhtml#pg_95), [98](chapter5.xhtml#pg_98),
    [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended Backus-Naur Form (EBNF) notation, [15](chapter1.xhtml#pg_15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional sequences, [101](chapter5.xhtml#pg_101)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repeated sequences, [100](chapter5.xhtml#pg_100)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: at least once, [225](chapter10.xhtml#pg_225)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: external linkage, [167–168](chapter9.xhtml#pg_167), [209–211](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: external variables, [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving, [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">extern</samp> specifier, [207](chapter10.xhtml#pg_207),
    [208](chapter10.xhtml#pg_208), [210–212](chapter10.xhtml#pg_210), [213](chapter10.xhtml#pg_213),
    [214–217](chapter10.xhtml#pg_214)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on declarations with incomplete types, [474](chapter17.xhtml#pg_474), [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in identifier resolution, [228–229](chapter10.xhtml#pg_228)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [225–226](chapter10.xhtml#pg_225)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the type checker, [230–233](chapter10.xhtml#pg_230)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: extra credit features, [xxxii–xxxiii](introduction.xhtml#pg_xxxii)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise operators, [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">case</samp> statements, [159](chapter8.xhtml#pg_159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound assignment operators, [113–114](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decrement (<samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp>) operator,
    [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">default</samp> statements, [159](chapter8.xhtml#pg_159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">goto</samp> statements, [128](chapter6.xhtml#pg_128)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: increment (<samp class="SANS_TheSansMonoCd_W5Regular_11">++</samp>) operator,
    [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: labeled statements, [128](chapter6.xhtml#pg_128)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NaN, [342–343](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">switch</samp> statements, [159](chapter8.xhtml#pg_159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: union types, [552–553](chapter18.xhtml#pg_552)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">F</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fetch-execute cycle, [84](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file scope, [207–208](chapter10.xhtml#pg_207)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file scope variable declarations, [208–217](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving identifiers in, [227–228](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [231–232](chapter10.xhtml#pg_231)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finley, Thomas, [45](chapter2.xhtml#pg_45)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [311–312](chapter13.xhtml#pg_311)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [338–339](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating, [324–327](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local labels, [312](chapter13.xhtml#pg_312), [326–327](chapter13.xhtml#pg_326),
    [339](chapter13.xhtml#pg_339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST representation, [305–306](chapter13.xhtml#pg_305)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hexadecimal, [302](chapter13.xhtml#pg_302), [338–339](chapter13.xhtml#pg_338),
    [345](chapter13.xhtml#pg_345)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lexing, [302–304](chapter13.xhtml#pg_302)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding decimal constants to, [300](chapter13.xhtml#pg_300), [306](chapter13.xhtml#pg_306)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point formats, [296–299](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decimal, [300](chapter13.xhtml#pg_300)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: double extended precision, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: double-precision, [297–298](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IEEE 754, [296–299](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: single-precision, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Floating-Point Guide (website), [343](chapter13.xhtml#pg_343)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point instructions. *See* [Streaming SIMD Extension instructions](#ind-539)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operations, [296](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [311–312](chapter13.xhtml#pg_311), [315–316](chapter13.xhtml#pg_315),
    [327–328](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding behavior, [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with NaN, [299](chapter13.xhtml#pg_299), [317](chapter13.xhtml#pg_317), [342](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with negative zero, [298](chapter13.xhtml#pg_298), [317](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Streaming SIMD Extension instructions, [310–312](chapter13.xhtml#pg_310)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [317–324](chapter13.xhtml#pg_317), [328–329](chapter13.xhtml#pg_328),
    [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding behavior, [300–301](chapter13.xhtml#pg_300)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [309–310](chapter13.xhtml#pg_309), [440](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point registers. *See* [XMM registers](#ind43)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly type, [324](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in function calls, [312–315](chapter13.xhtml#pg_312), [329–333](chapter13.xhtml#pg_329)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: representation, [297–299](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gaps between, [300–301](chapter13.xhtml#pg_300), [322](chapter13.xhtml#pg_322),
    [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: normalized floating-point numbers, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precision, [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: special values, [298–299](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: infinity, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NaN, [299](chapter13.xhtml#pg_299), [342–343](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: negative zero, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subnormal numbers, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">float</samp> type, [295](chapter13.xhtml#pg_295),
    [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fog, Agner, [553–554](chapter18.xhtml#pg_553)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: formal grammar, [14–15](chapter1.xhtml#pg_14)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ambiguity, [50](chapter3.xhtml#pg_50), [120](chapter6.xhtml#pg_120)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for binary expressions, [51](chapter3.xhtml#pg_51), [52](chapter3.xhtml#pg_52)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: left recursion, [50](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for unary expressions, [33](chapter2.xhtml#pg_33), [397](chapter15.xhtml#pg_397),
    [465](chapter17.xhtml#pg_465)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> statements, [144–145](chapter8.xhtml#pg_144),
    [148–151](chapter8.xhtml#pg_148), [152](chapter8.xhtml#pg_152), [154](chapter8.xhtml#pg_154),
    [157–158](chapter8.xhtml#pg_157)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: headers, restrictions on, [172](chapter9.xhtml#pg_172), [220](chapter10.xhtml#pg_220)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: missing controlling expression in, [158](chapter8.xhtml#pg_158)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: forward data-flow analysis, [584](chapter19.xhtml#pg_584)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">free</samp> function, [460–461](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friedl, Steve, [358](chapter14.xhtml#pg_358)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: frontend symbol table, [266](chapter11.xhtml#pg_266). *See also* [symbol table
    internal to compiler](#ind31)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: full expressions, [374](chapter14.xhtml#pg_374)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">FunCall</samp> instruction, [182–183](chapter9.xhtml#pg_182)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for. *See* [in assembly *under* function calls](#ind2a)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in liveness analysis, [605–606](chapter19.xhtml#pg_605)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional destination, [479](chapter17.xhtml#pg_479), [482](chapter17.xhtml#pg_482)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in reaching copies analysis, [591–592](chapter19.xhtml#pg_591), [601–602](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function calls, [165](chapter9.xhtml#pg_165)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arguments, [165](chapter9.xhtml#pg_165)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [161](chapter9.xhtml#pg_161), [184–194](chapter9.xhtml#pg_184),
    [197–199](chapter9.xhtml#pg_197)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with floating-point values, [312–315](chapter13.xhtml#pg_312), [329–333](chapter13.xhtml#pg_329)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with quadword arguments, [263](chapter11.xhtml#pg_263)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with structures, [519–528](chapter18.xhtml#pg_519), [532–544](chapter18.xhtml#pg_532)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> return type,
    [482](chapter17.xhtml#pg_482)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [171](chapter9.xhtml#pg_171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [172–173](chapter9.xhtml#pg_172)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving identifiers in, [175–176](chapter9.xhtml#pg_175)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [182–183](chapter9.xhtml#pg_182), [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [179](chapter9.xhtml#pg_179), [181–182](chapter9.xhtml#pg_181),
    [256](chapter11.xhtml#pg_256)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function declarations, [162–163](chapter9.xhtml#pg_162)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array types in, [390–391](chapter15.xhtml#pg_390)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [171](chapter9.xhtml#pg_171), [224](chapter10.xhtml#pg_224),
    [247–248](chapter11.xhtml#pg_247)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in identifier resolution, [174](chapter9.xhtml#pg_174), [176–178](chapter9.xhtml#pg_176)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete types in, [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage, [166–169](chapter9.xhtml#pg_166), [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [172–173](chapter9.xhtml#pg_172), [226–227](chapter10.xhtml#pg_226)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [179–181](chapter9.xhtml#pg_179), [230–231](chapter10.xhtml#pg_230),
    [257](chapter11.xhtml#pg_257), [402–403](chapter15.xhtml#pg_402)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> parameters, [466](chapter17.xhtml#pg_466)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function definitions, [162–163](chapter9.xhtml#pg_162)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [195](chapter9.xhtml#pg_195)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: accessing function parameters, [195–197](chapter9.xhtml#pg_195)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: allocating stack space, [200](chapter9.xhtml#pg_200)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converting to TACKY, [110–111](chapter5.xhtml#pg_110), [182–183](chapter9.xhtml#pg_182)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nested, [163](chapter9.xhtml#pg_163)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: old-style, [164](chapter9.xhtml#pg_164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function pointers, [164](chapter9.xhtml#pg_164), [359–361](chapter14.xhtml#pg_359),
    [364](chapter14.xhtml#pg_364)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function prologue and epilogue, [26–27](chapter2.xhtml#pg_26), [29–31](chapter2.xhtml#pg_29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [43–44](chapter2.xhtml#pg_43)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functions, [161–169](chapter9.xhtml#pg_161)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arguments, [165](chapter9.xhtml#pg_165)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: calling convention, [161](chapter9.xhtml#pg_161), [184–194](chapter9.xhtml#pg_184),
    [312–315](chapter13.xhtml#pg_312), [519–528](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarators, [357](chapter14.xhtml#pg_357)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameters, [162–163](chapter9.xhtml#pg_162), [165](chapter9.xhtml#pg_165),
    [177](chapter9.xhtml#pg_177)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types, [178–179](chapter9.xhtml#pg_178), [247–248](chapter11.xhtml#pg_247)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variadic, [191](chapter9.xhtml#pg_191)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> return types,
    [458](chapter17.xhtml#pg_458), [469–470](chapter17.xhtml#pg_469), [479](chapter17.xhtml#pg_479),
    [482](chapter17.xhtml#pg_482)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">G</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GAS (GNU assembler), [268](chapter11.xhtml#pg_268), [338](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GCC, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv), [4–5](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point support, [296–297](chapter13.xhtml#pg_296), [317–318](chapter13.xhtml#pg_317),
    [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implementation-defined type conversion in, [245](chapter11.xhtml#pg_245)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: language extensions, [395](chapter15.xhtml#pg_395), [401](chapter15.xhtml#pg_401),
    [471](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: narrow arguments, treatment of, [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimizations, [27](chapter2.xhtml#pg_27), [558–559](chapter19.xhtml#pg_558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UndefinedBehaviorSanitizer, [672](next_steps.xhtml#pg_672)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, treatment of, [474–475](chapter17.xhtml#pg_474)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">gcc</samp> command, [4–5](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invoking Clang with, [xxxv](introduction.xhtml#pg_xxxv), [4](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GDB (GNU debugger)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging assembly code, [677–687](appendix-A.xhtml#pg_677)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: general-purpose registers, [311](chapter13.xhtml#pg_311)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: George, Lal, [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: George test, [659–663](chapter20.xhtml#pg_659)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: limits of, [661–663](chapter20.xhtml#pg_661)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAddress</samp> instruction,
    [370–372](chapter14.xhtml#pg_370), [374](chapter14.xhtml#pg_374)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alias analysis and, [599–601](chapter19.xhtml#pg_599)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [376](chapter14.xhtml#pg_376)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_common_pointer_type</samp>
    function, [366–368](chapter14.xhtml#pg_366), [468](chapter17.xhtml#pg_468)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">get_common_type</samp> function,
    [254–255](chapter11.xhtml#pg_254), [280](chapter12.xhtml#pg_280), [308](chapter13.xhtml#pg_308),
    [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ghuloum, Abdulaziz, [xxvi](introduction.xhtml#pg_xxvi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gibbons, Phillip, [611](chapter19.xhtml#pg_611), [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global offset table (GOT), [223](chapter10.xhtml#pg_223)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global symbol, [5](chapter1.xhtml#pg_5), [168–169](chapter9.xhtml#pg_168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.globl</samp> directive, [5](chapter1.xhtml#pg_5),
    [20](chapter1.xhtml#pg_20), [168–169](chapter9.xhtml#pg_168), [221](chapter10.xhtml#pg_221),
    [238](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU assembler (GAS), [268](chapter11.xhtml#pg_268), [338](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goldberg, David, [343](chapter13.xhtml#pg_343)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">goto</samp> statements, [128](chapter6.xhtml#pg_128)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: graph coloring, [622–646](chapter20.xhtml#pg_622)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: algorithm, [638–646](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: degree < *k* rule, [638](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimistic coloring, [669](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spilling registers, [627–630](chapter20.xhtml#pg_627), [642–644](chapter20.xhtml#pg_642),
    [646](chapter20.xhtml#pg_646)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: greater than (<samp class="SANS_TheSansMonoCd_W5Regular_11">></samp>) operator,
    [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [401](chapter15.xhtml#pg_401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: greater than or equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp>)
    operator, [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [401](chapter15.xhtml#pg_401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">H</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hailperin, Max, [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Hello, World!” program, [204](chapter9.xhtml#pg_204), [451–453](chapter16.xhtml#pg_451)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hexadecimal floating-point constant, [302](chapter13.xhtml#pg_302), [338–339](chapter13.xhtml#pg_338),
    [345](chapter13.xhtml#pg_345)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hilfinger, Paul, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyde, Randall, [199](chapter9.xhtml#pg_199)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">I</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifier resolution, [174–178](chapter9.xhtml#pg_174), [227–229](chapter10.xhtml#pg_227),
    [364](chapter14.xhtml#pg_364). *See also* [variable resolution](#ind39)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: renamed from variable resolution, [174](chapter9.xhtml#pg_174)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure tags, [498–500](chapter18.xhtml#pg_498)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifiers, [8](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: autogenerated, [37–38](chapter2.xhtml#pg_37), [105–106](chapter5.xhtml#pg_105)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lexing, [8–10](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage of, [167–169](chapter9.xhtml#pg_167), [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scope of, [131–134](chapter7.xhtml#pg_131), [208–209](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure tags, [486–488](chapter18.xhtml#pg_486), [489–490](chapter18.xhtml#pg_489)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [179–181](chapter9.xhtml#pg_179), [229–233](chapter10.xhtml#pg_229),
    [257–258](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type of, [178–179](chapter9.xhtml#pg_178)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">idiv</samp> instruction, [60–65](chapter3.xhtml#pg_60),
    [262](chapter11.xhtml#pg_262)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [66](chapter3.xhtml#pg_66), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IEEE 754 standard, [296–299](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [343–344](chapter13.xhtml#pg_343)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: double-precision format, [297–299](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point formats, [296–299](chapter13.xhtml#pg_296)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding modes, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements, [117–121](chapter6.xhtml#pg_117)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [118–119](chapter6.xhtml#pg_118)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [118–121](chapter6.xhtml#pg_118)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dangling else ambiguity, [120–121](chapter6.xhtml#pg_120)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [125–126](chapter6.xhtml#pg_125)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [126–127](chapter6.xhtml#pg_126)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: immediate values, [18](chapter1.xhtml#pg_18), [268](chapter11.xhtml#pg_268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as function arguments, [198–199](chapter9.xhtml#pg_198)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: size inferred, [266](chapter11.xhtml#pg_266)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Imm</samp> operand, [18–20](chapter1.xhtml#pg_18)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implementation-defined behavior, [245–246](chapter11.xhtml#pg_245)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">char</samp> signedness, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ptrdiff_t</samp>, [400](chapter15.xhtml#pg_400)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding behavior, [307](chapter13.xhtml#pg_307)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">size_t</samp>, [460](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: source character set, [430](chapter16.xhtml#pg_430)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions, [245](chapter11.xhtml#pg_245), [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">imul</samp> instruction, [60](chapter3.xhtml#pg_60),
    [62–63](chapter3.xhtml#pg_62)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [66](chapter3.xhtml#pg_66), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [64–65](chapter3.xhtml#pg_64), [268](chapter11.xhtml#pg_268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete types, [461–462](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in backend symbol table, [530](chapter18.xhtml#pg_530), [546](chapter18.xhtml#pg_546)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in function declarations, [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointers to, [461–462](chapter17.xhtml#pg_461), [471–472](chapter17.xhtml#pg_471),
    [473](chapter17.xhtml#pg_473), [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure types, [486–487](chapter18.xhtml#pg_486), [505–506](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [471–473](chapter17.xhtml#pg_471), [505–506](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: increment (<samp class="SANS_TheSansMonoCd_W5Regular_11">++</samp>) operator,
    [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: indeterminately sequenced evaluations, [58–59](chapter3.xhtml#pg_58), [82](chapter4.xhtml#pg_82)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: indexed addressing, [412](chapter15.xhtml#pg_412)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Indexed</samp> operand, [412–415](chapter15.xhtml#pg_412)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [419](chapter15.xhtml#pg_419)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializers, [94](chapter5.xhtml#pg_94). *See also* [compound initializers](#ind9);
    [static initializers](#ind29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array, [385](chapter15.xhtml#pg_385), [425](chapter16.xhtml#pg_425), [440](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals as, [425–426](chapter16.xhtml#pg_425), [437–438](chapter16.xhtml#pg_437),
    [440–441](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invalid, [220](chapter10.xhtml#pg_220)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving identifiers in, [105–106](chapter5.xhtml#pg_105)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure type, [492](chapter18.xhtml#pg_492)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [110](chapter5.xhtml#pg_110), [440–441](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using variables in their own, [106–107](chapter5.xhtml#pg_106)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instruction fix-up pass, [42–43](chapter2.xhtml#pg_42)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scratch registers, [42](chapter2.xhtml#pg_42), [64–65](chapter3.xhtml#pg_64),
    [325](chapter13.xhtml#pg_325), [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instruction pointer (IP), [84](chapter4.xhtml#pg_84). *See also* [RIP register](#ind26)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instruction register, [84](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: INTEGER class, [519](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer constants, [6](chapter1.xhtml#pg_6), [8](chapter1.xhtml#pg_8). *See
    also* [character constants](#ind7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [250–251](chapter11.xhtml#pg_250), [278](chapter12.xhtml#pg_278)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regular expressions for, [304](chapter13.xhtml#pg_304)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: representation in the abstract syntax tree, [248](chapter11.xhtml#pg_248), [276](chapter12.xhtml#pg_276)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tokens for, [8](chapter1.xhtml#pg_8), [247](chapter11.xhtml#pg_247), [275](chapter12.xhtml#pg_275),
    [304](chapter13.xhtml#pg_304)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer overflow, [78–82](chapter4.xhtml#pg_78)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer promotions, [424](chapter16.xhtml#pg_424), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: common real type, [254–255](chapter11.xhtml#pg_254), [279–280](chapter12.xhtml#pg_279)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversions between, [244–245](chapter11.xhtml#pg_244), [274–275](chapter12.xhtml#pg_274),
    [279–280](chapter12.xhtml#pg_279)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [244–245](chapter11.xhtml#pg_244), [263](chapter11.xhtml#pg_263),
    [286–288](chapter12.xhtml#pg_286), [443–444](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversion rank, [279](chapter12.xhtml#pg_279)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [259–260](chapter11.xhtml#pg_259), [281–283](chapter12.xhtml#pg_281)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversions to and from <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [317–324](chapter13.xhtml#pg_317), [328–329](chapter13.xhtml#pg_328),
    [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding behavior, [300–301](chapter13.xhtml#pg_300)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [309–310](chapter13.xhtml#pg_309), [440](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing specifiers, [249–250](chapter11.xhtml#pg_249), [277–278](chapter12.xhtml#pg_277)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intel 64 Software Developer’s Manual, [xxxvi](introduction.xhtml#pg_xxxvi),
    [344](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intel syntax, [6](chapter1.xhtml#pg_6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interactive devices, [560](chapter19.xhtml#pg_560)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: intermediate representations (IRs), [35–36](chapter2.xhtml#pg_35)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control-flow graphs, [570](chapter19.xhtml#pg_570), [576–581](chapter19.xhtml#pg_576)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internal linkage, [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interprocedural optimizations, [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: intraprocedural optimizations, [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">IntToDouble</samp> instruction,
    [309–310](chapter13.xhtml#pg_309)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [320](chapter13.xhtml#pg_320)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp> type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alignment of, [246](chapter11.xhtml#pg_246)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: size of, [244](chapter11.xhtml#pg_244)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializer for, [257](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP (instruction pointer), [84](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterated register coalescing, [663](chapter20.xhtml#pg_663)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterative algorithms, [585](chapter19.xhtml#pg_585)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copy propagation, [593–599](chapter19.xhtml#pg_593)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dead store elimination, [607–608](chapter19.xhtml#pg_607)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">J</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">je</samp> instruction, [84–85](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">JmpCC</samp> instruction, [85–86](chapter4.xhtml#pg_85),
    [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">jmp</samp> instruction, [83–84](chapter4.xhtml#pg_83),
    [85](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp> instruction, [85](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jones, Joel, [21](chapter1.xhtml#pg_21)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">JumpIfNotZero</samp> instruction,
    [75–76](chapter4.xhtml#pg_75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">JumpIfZero</samp> instruction,
    [75–76](chapter4.xhtml#pg_75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Jump</samp> instruction, [75–76](chapter4.xhtml#pg_75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jump instructions (assembly), [83–85](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly generation, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional, [84–85](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">je</samp>, [84–85](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">jmp</samp>, [83–84](chapter4.xhtml#pg_83),
    [85](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">JmpCC</samp>, [85–86](chapter4.xhtml#pg_85),
    [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp>, [85](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unconditional jump instructions, [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jump instructions (TACKY), [75–77](chapter4.xhtml#pg_75), [126–127](chapter6.xhtml#pg_126),
    [155–158](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly, converting to, [86–87](chapter4.xhtml#pg_86), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional, [75–76](chapter4.xhtml#pg_75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant folding, [561](chapter19.xhtml#pg_561), [573–576](chapter19.xhtml#pg_573)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: removing useless, [582–583](chapter19.xhtml#pg_582)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unconditional jump instructions, [75–76](chapter4.xhtml#pg_75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">K</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*k*-colorable graphs, [622](chapter20.xhtml#pg_622), [624–625](chapter20.xhtml#pg_624),
    [627](chapter20.xhtml#pg_627)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kell, Stephen, [474](chapter17.xhtml#pg_474)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: keywords, [9–10](chapter1.xhtml#pg_9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: killed copy, [587](chapter19.xhtml#pg_587)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: killed variable, [603](chapter19.xhtml#pg_603)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Korn, Jeff, [22](chapter1.xhtml#pg_22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">L</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: labeled statements, [128](chapter6.xhtml#pg_128)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: labels (assembly), [5](chapter1.xhtml#pg_5), [83–87](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [88–89](chapter4.xhtml#pg_88)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local, [89](chapter4.xhtml#pg_89), [326–327](chapter13.xhtml#pg_326), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for static variables, [221–222](chapter10.xhtml#pg_221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: labels (TACKY), [75–77](chapter4.xhtml#pg_75), [86](chapter4.xhtml#pg_86), [126–127](chapter6.xhtml#pg_126),
    [155–158](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: avoiding naming conflicts, [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: removing useless, [582–583](chapter19.xhtml#pg_582)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy binding, [202](chapter9.xhtml#pg_202)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp> (load effective address)
    instruction, [376–379](chapter14.xhtml#pg_376)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: left-associative operations, [50](chapter3.xhtml#pg_50), [53](chapter3.xhtml#pg_53)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: left shift (<samp class="SANS_TheSansMonoCd_W5Regular_11"><<</samp>) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: left shift assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11"><<</samp>)
    operator, [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: less than (<samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp>) operator,
    [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [401](chapter15.xhtml#pg_401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: less than or equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11"><=</samp>)
    operator, [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [401](chapter15.xhtml#pg_401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Levien, Raph, [91](chapter4.xhtml#pg_91)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lexer, [4](chapter1.xhtml#pg_4), [8–10](chapter1.xhtml#pg_8). *See also* [tokens](#ind35)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lifetime of an object, [212–213](chapter10.xhtml#pg_212), [461](chapter17.xhtml#pg_461),
    [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linemarkers, [7](chapter1.xhtml#pg_7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage, [166–168](chapter9.xhtml#pg_166), [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [168–169](chapter9.xhtml#pg_168), [220–221](chapter10.xhtml#pg_220)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conflicting, [176](chapter9.xhtml#pg_176), [217–219](chapter10.xhtml#pg_217),
    [228–229](chapter10.xhtml#pg_228), [230–232](chapter10.xhtml#pg_230)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: external, [167–168](chapter9.xhtml#pg_167), [209–211](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifier resolution and, [175–177](chapter9.xhtml#pg_175), [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internal, [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking and, [229–233](chapter10.xhtml#pg_229)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkers, [xxviii](introduction.xhtml#pg_xxviii), [5–6](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [21](chapter1.xhtml#pg_21)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic, [202](chapter9.xhtml#pg_202)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and identifier linkage, [168–169](chapter9.xhtml#pg_168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invoking, [7](chapter1.xhtml#pg_7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relocation, [6](chapter1.xhtml#pg_6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and shared libraries, [202](chapter9.xhtml#pg_202), [301](chapter13.xhtml#pg_301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbol resolution, [6](chapter1.xhtml#pg_6), [174](chapter9.xhtml#pg_174)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbols, [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbol table, [5](chapter1.xhtml#pg_5), [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.literal8</samp> directive, [312](chapter13.xhtml#pg_312)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.literal16</samp> directive, [312](chapter13.xhtml#pg_312)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: little-endian, [86](chapter4.xhtml#pg_86)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: liveness analysis, [584](chapter19.xhtml#pg_584)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of assembly programs, [633–636](chapter20.xhtml#pg_633)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: meet operator, [633–634](chapter20.xhtml#pg_633)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transfer function, [634–636](chapter20.xhtml#pg_634)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for dead store elimination, [604–609](chapter19.xhtml#pg_604)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterative algorithm, [607–608](chapter19.xhtml#pg_607)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: meet operator, [606–607](chapter19.xhtml#pg_606)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transfer function, [605–606](chapter19.xhtml#pg_605)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: live ranges, [625–626](chapter20.xhtml#pg_625)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux, [xxxiv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.align</samp> directive on, [221](chapter10.xhtml#pg_221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local label prefix, [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: procedure linkage table (PLT), [201](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: read-only data section, [339](chapter13.xhtml#pg_339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setup instructions, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLDB, [xxxv](introduction.xhtml#pg_xxxv), [687–698](appendix-A.xhtml#pg_687)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLVM compiler framework, [36](chapter2.xhtml#pg_36), [599](chapter19.xhtml#pg_599)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembler, [268](chapter11.xhtml#pg_268), [338](chapter13.xhtml#pg_338)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clang, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv), [4](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copy propagation, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: intermediate representation, [599](chapter19.xhtml#pg_599)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLDB, [xxxv](introduction.xhtml#pg_xxxv), [687–698](appendix-A.xhtml#pg_687)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: load effective address (<samp class="SANS_TheSansMonoCd_W5Regular_11">lea</samp>)
    instruction, [376–379](chapter14.xhtml#pg_376)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Load</samp> instruction, [370–371](chapter14.xhtml#pg_370),
    [374–375](chapter14.xhtml#pg_374)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [376](chapter14.xhtml#pg_376), [531](chapter18.xhtml#pg_531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local labels, [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for assembly constants, [312](chapter13.xhtml#pg_312), [326–327](chapter13.xhtml#pg_326),
    [339](chapter13.xhtml#pg_339), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local variables, [93–95](chapter5.xhtml#pg_93). *See also* [variable declarations](#ind38)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignment, [94–95](chapter5.xhtml#pg_94), [107](chapter5.xhtml#pg_107), [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarations, [94](chapter5.xhtml#pg_94), [98](chapter5.xhtml#pg_98), [105–106](chapter5.xhtml#pg_105),
    [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializers, [94](chapter5.xhtml#pg_94), [106–107](chapter5.xhtml#pg_106),
    [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage, [167–168](chapter9.xhtml#pg_167), [209](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving, [104–108](chapter5.xhtml#pg_104), [136–139](chapter7.xhtml#pg_136),
    [178](chapter9.xhtml#pg_178), [228–229](chapter10.xhtml#pg_228)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on the stack, [29](chapter2.xhtml#pg_29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storage duration, [214](chapter10.xhtml#pg_214)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined behavior, [96](chapter5.xhtml#pg_96)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: logical operators, [71](chapter4.xhtml#pg_71). *See also names of individual
    operators*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [73–75](chapter4.xhtml#pg_73)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence values, [74](chapter4.xhtml#pg_74)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: short-circuiting, [72](chapter4.xhtml#pg_72)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–77](chapter4.xhtml#pg_75), [259](chapter11.xhtml#pg_259)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tokens for, [72](chapter4.xhtml#pg_72)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [255](chapter11.xhtml#pg_255), [369](chapter14.xhtml#pg_369),
    [470](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.long</samp> directive, [221](chapter10.xhtml#pg_221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">long double</samp> type, [295](chapter13.xhtml#pg_295),
    [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: long integers, [243](chapter11.xhtml#pg_243). *See also* [<samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp>
    type](#ind18)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [244–246](chapter11.xhtml#pg_244), [261–264](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly type, [261](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned long</samp> type, [273–281](chapter12.xhtml#pg_273)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp> keyword, [247](chapter11.xhtml#pg_247)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp> type, [243](chapter11.xhtml#pg_243)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alignment, [246](chapter11.xhtml#pg_246)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constants of, [247–248](chapter11.xhtml#pg_247), [250–251](chapter11.xhtml#pg_250),
    [254](chapter11.xhtml#pg_254)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversions, [244–245](chapter11.xhtml#pg_244), [274–275](chapter12.xhtml#pg_274)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: size, [244](chapter11.xhtml#pg_244)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializer, [257–258](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Longword</samp> assembly type,
    [261–262](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: longwords, [6](chapter1.xhtml#pg_6), [244](chapter11.xhtml#pg_244), [267](chapter11.xhtml#pg_267),
    [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">l</samp> suffix, [60](chapter3.xhtml#pg_60)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loops, [144–148](chapter8.xhtml#pg_144)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: analysis, [638](chapter20.xhtml#pg_638), [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp>, [144–146](chapter8.xhtml#pg_144),
    [148–151](chapter8.xhtml#pg_148), [154](chapter8.xhtml#pg_154), [156](chapter8.xhtml#pg_156)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: effect on spill cost, [638](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enclosing loops, [146](chapter8.xhtml#pg_146), [151](chapter8.xhtml#pg_151),
    [153](chapter8.xhtml#pg_153)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>, [144–145](chapter8.xhtml#pg_144),
    [148–151](chapter8.xhtml#pg_148), [152](chapter8.xhtml#pg_152), [154](chapter8.xhtml#pg_154),
    [157–158](chapter8.xhtml#pg_157)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: labeling, [150](chapter8.xhtml#pg_150), [152–155](chapter8.xhtml#pg_152)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving variables in, [151–152](chapter8.xhtml#pg_151)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [155–158](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">while</samp>, [144](chapter8.xhtml#pg_144),
    [148–150](chapter8.xhtml#pg_148), [151–155](chapter8.xhtml#pg_151), [157](chapter8.xhtml#pg_157)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.L</samp> prefix, [89](chapter4.xhtml#pg_89).
    *See also* [local labels](#ind17)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lvalues, [95](chapter5.xhtml#pg_95), [348](chapter14.xhtml#pg_348), [349–350](chapter14.xhtml#pg_349)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversion, [348](chapter14.xhtml#pg_348), [350](chapter14.xhtml#pg_350)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals, [425](chapter16.xhtml#pg_425), [436](chapter16.xhtml#pg_436)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure members, [491](chapter18.xhtml#pg_491), [507–508](chapter18.xhtml#pg_507)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [371–374](chapter14.xhtml#pg_371), [515–517](chapter18.xhtml#pg_515)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validating, [107](chapter5.xhtml#pg_107), [364](chapter14.xhtml#pg_364), [365](chapter14.xhtml#pg_365),
    [399](chapter15.xhtml#pg_399), [436](chapter16.xhtml#pg_436), [507–508](chapter18.xhtml#pg_507)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, [474–475](chapter17.xhtml#pg_474)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">M</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: machine-dependent optimizations, [558](chapter19.xhtml#pg_558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: machine-independent optimizations, [557–558](chapter19.xhtml#pg_557)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant folding, [561](chapter19.xhtml#pg_561), [573–576](chapter19.xhtml#pg_573)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copy propagation, [563–564](chapter19.xhtml#pg_563), [585–602](chapter19.xhtml#pg_585)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dead store elimination, [564–565](chapter19.xhtml#pg_564), [603–609](chapter19.xhtml#pg_603)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unreachable code elimination, [561–562](chapter19.xhtml#pg_561), [581–584](chapter19.xhtml#pg_581)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: machine instruction, [5–6](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mach-O file format, [201](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS, [xxxiv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local label prefix, [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: platform-specific directives, [221](chapter10.xhtml#pg_221), [238–239](chapter10.xhtml#pg_238),
    [312](chapter13.xhtml#pg_312), [339](chapter13.xhtml#pg_339), [428](chapter16.xhtml#pg_428),
    [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: prefix for user-defined names, [19](chapter1.xhtml#pg_19), [201](chapter9.xhtml#pg_201),
    [238](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setup instructions, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp> function, [4](chapter1.xhtml#pg_4),
    [6](chapter1.xhtml#pg_6), [169](chapter9.xhtml#pg_169)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_tacky_variable</samp> function,
    [261](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">make_temporary</samp> function,
    [37–38](chapter2.xhtml#pg_37)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">malloc</samp> function, [460](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mantissa, [297](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: meet operator, [585](chapter19.xhtml#pg_585)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: liveness analysis, [606–607](chapter19.xhtml#pg_606)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of assembly programs, [633–634](chapter20.xhtml#pg_633)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reaching copies analysis, [592–593](chapter19.xhtml#pg_592)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: member access operators. *See* [structure member operator](#ind-543); [structure
    pointer operator](#ind-544)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MEMORY class, [519](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: memory management functions, [457–458](chapter17.xhtml#pg_457), [460–461](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">aligned_alloc</samp>, [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">calloc</samp>, [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">free</samp>, [460–461](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">malloc</samp>, [460](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">realloc</samp>, [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Memory</samp> operands, [375–379](chapter14.xhtml#pg_375)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">mov</samp> instruction, [5–6](chapter1.xhtml#pg_5),
    [18](chapter1.xhtml#pg_18), [261–262](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [20](chapter1.xhtml#pg_20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [42](chapter2.xhtml#pg_42), [268](chapter11.xhtml#pg_268), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">movsd</samp> instruction, [311–312](chapter13.xhtml#pg_311)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">movsx</samp> instruction, [244–245](chapter11.xhtml#pg_244),
    [261](chapter11.xhtml#pg_261), [263](chapter11.xhtml#pg_263), [444](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [269](chapter11.xhtml#pg_269), [450–451](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [267](chapter11.xhtml#pg_267)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sign extension with, [263](chapter11.xhtml#pg_263)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">MovZeroExtend</samp> instruction,
    [287–289](chapter12.xhtml#pg_287), [443–444](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in conversions to <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>,
    [329](chapter13.xhtml#pg_329), [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [450–451](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [290](chapter12.xhtml#pg_290), [449](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">movz</samp> instruction, [443](chapter16.xhtml#pg_443),
    [449](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Muchnick, Steven, [669](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">mulsd</samp> instruction, [315](chapter13.xhtml#pg_315)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [341–342](chapter13.xhtml#pg_341)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multidimensional arrays, [384–385](chapter15.xhtml#pg_384), [386–389](chapter15.xhtml#pg_386),
    [393](chapter15.xhtml#pg_393)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multiplication (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>) operator,
    [47–48](chapter3.xhtml#pg_47)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [60](chapter3.xhtml#pg_60), [62–63](chapter3.xhtml#pg_62)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [315](chapter13.xhtml#pg_315), [327](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [50–55](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multiplication assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">*=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Myers, Joseph, [218](chapter10.xhtml#pg_218)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">N</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NaNs (not-a-number), [299](chapter13.xhtml#pg_299), [342–343](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparing, [299](chapter13.xhtml#pg_299), [317](chapter13.xhtml#pg_317), [342](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: extra credit, [342](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: quiet, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: signaling, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: negation (<samp class="SANS_TheSansMonoCd_W5Regular_11">-</samp>) operator,
    [26](chapter2.xhtml#pg_26)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [26–27](chapter2.xhtml#pg_26), [40–41](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [315–316](chapter13.xhtml#pg_315), [327–328](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [33–34](chapter2.xhtml#pg_33)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [36–38](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: token for, [31–32](chapter2.xhtml#pg_31)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369),
    [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: negative infinity, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: negative zero, [298](chapter13.xhtml#pg_298), [317](chapter13.xhtml#pg_317),
    [326](chapter13.xhtml#pg_326), [340](chapter13.xhtml#pg_340)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">neg</samp> instruction, [26–27](chapter2.xhtml#pg_26),
    [40–41](chapter2.xhtml#pg_40), [44](chapter2.xhtml#pg_44)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [44](chapter2.xhtml#pg_44), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nested function definitions, [163](chapter9.xhtml#pg_163)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nisan, Noam, [45](chapter2.xhtml#pg_45)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: non-scalar types, [470–471](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: non-terminal symbols, [15](chapter1.xhtml#pg_15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NOT (<samp class="SANS_TheSansMonoCd_W5Regular_11">!</samp>) operator, [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [86](chapter4.xhtml#pg_86), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369),
    [470](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: not equal to (<samp class="SANS_TheSansMonoCd_W5Regular_11">!=</samp>) operator,
    [71–74](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75), [77](chapter4.xhtml#pg_77)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [366–367](chapter14.xhtml#pg_366)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">not</samp> instruction, [26–27](chapter2.xhtml#pg_26),
    [40–41](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [44](chapter2.xhtml#pg_44), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: null pointers, [351–352](chapter14.xhtml#pg_351)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons, [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constants, [351](chapter14.xhtml#pg_351), [366–368](chapter14.xhtml#pg_366),
    [401](chapter15.xhtml#pg_401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as static initializers, [369](chapter14.xhtml#pg_369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: null statements, [98](chapter5.xhtml#pg_98), [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">O</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: object code, [xxviii](introduction.xhtml#pg_xxviii)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: object files, [xxviii](introduction.xhtml#pg_xxviii), [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating, [169–170](chapter9.xhtml#pg_169)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sections of, [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BSS, [222](chapter10.xhtml#pg_222), [340](chapter13.xhtml#pg_340), [418](chapter15.xhtml#pg_418)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data, [221–222](chapter10.xhtml#pg_221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: read-only data, [311–312](chapter13.xhtml#pg_311), [339](chapter13.xhtml#pg_339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text, [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: objects, [348](chapter14.xhtml#pg_348)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lifetime of, [212–213](chapter10.xhtml#pg_212), [461](chapter17.xhtml#pg_461),
    [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: observable behavior, [558–560](chapter19.xhtml#pg_558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OF. *See* [overflow flag](#ind20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimistic coloring, [669](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimization pipeline, [570–573](chapter19.xhtml#pg_570), [600–601](chapter19.xhtml#pg_600)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimizations. *See also* machine-independent optimizations *and entries for
    individual optimizations*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant folding, [561](chapter19.xhtml#pg_561), [573–576](chapter19.xhtml#pg_573)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copy propagation, [563–564](chapter19.xhtml#pg_563), [585–602](chapter19.xhtml#pg_585)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dead store elimination, [564–565](chapter19.xhtml#pg_564), [603–609](chapter19.xhtml#pg_603)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interprocedural, [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: intraprocedural, [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: machine-dependent, [558](chapter19.xhtml#pg_558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: safety of, [558](chapter19.xhtml#pg_558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: security impact, [564–565](chapter19.xhtml#pg_564)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unreachable code elimination, [561–562](chapter19.xhtml#pg_561), [581–584](chapter19.xhtml#pg_581)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">optimize</samp> function, [570–573](chapter19.xhtml#pg_570),
    [601](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: termination, [572–573](chapter19.xhtml#pg_572)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OR (<samp class="SANS_TheSansMonoCd_W5Regular_11">||</samp>) operator, [71–77](chapter4.xhtml#pg_71)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: short-circuiting, [72](chapter4.xhtml#pg_72)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–77](chapter4.xhtml#pg_75), [259](chapter11.xhtml#pg_259)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [255](chapter11.xhtml#pg_255), [470](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp> instruction, [323–325](chapter13.xhtml#pg_323),
    [337](chapter13.xhtml#pg_337), [341](chapter13.xhtml#pg_341)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overflow, [78–82](chapter4.xhtml#pg_78)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overflow flag (OF), [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: not applicable, [284–285](chapter12.xhtml#pg_284), [317](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">P</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: packed operands, [310](chapter13.xhtml#pg_310), [316](chapter13.xhtml#pg_316)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameter-passing registers, [185](chapter9.xhtml#pg_185), [312](chapter13.xhtml#pg_312)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameters, [162–163](chapter9.xhtml#pg_162), [165](chapter9.xhtml#pg_165),
    [177](chapter9.xhtml#pg_177), [195–197](chapter9.xhtml#pg_195)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parity flag (PF), [342](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">parse_exp</samp> function, [16](chapter1.xhtml#pg_16),
    [34](chapter2.xhtml#pg_34), [51–57](chapter3.xhtml#pg_51), [101–102](chapter5.xhtml#pg_101),
    [124](chapter6.xhtml#pg_124)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parser generators, [11](chapter1.xhtml#pg_11)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsers, [4](chapter1.xhtml#pg_4), [10–17](chapter1.xhtml#pg_10). *See also*
    [recursive descent parsing](#ind24)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handwritten, [11](chapter1.xhtml#pg_11)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence climbing, [51–57](chapter3.xhtml#pg_51)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: predictive, [16](chapter1.xhtml#pg_16)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">parse_type</samp> function, [249–250](chapter11.xhtml#pg_249),
    [277](chapter12.xhtml#pg_277), [307](chapter13.xhtml#pg_307), [433](chapter16.xhtml#pg_433),
    [466](chapter17.xhtml#pg_466)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pattern matching, [xxxiii–xxxiv](introduction.xhtml#pg_xxxiii)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payer, Mathias, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PF (parity flag), [342](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: phase ordering problem, [573](chapter19.xhtml#pg_573)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PlainOperand</samp> construct,
    [372–374](chapter14.xhtml#pg_372)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PLT (procedure linkage table), [201–202](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer analysis, [601](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer arithmetic, [387–390](chapter15.xhtml#pg_387)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: addition, [387–390](chapter15.xhtml#pg_387)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [414–415](chapter15.xhtml#pg_414)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relationship to subscript operator, [387–389](chapter15.xhtml#pg_387)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subtraction, [388–390](chapter15.xhtml#pg_388)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [406–408](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [400–401](chapter15.xhtml#pg_400), [472](chapter17.xhtml#pg_472)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined behavior, [388](chapter15.xhtml#pg_388), [390](chapter15.xhtml#pg_390)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer comparisons, [352–353](chapter14.xhtml#pg_352), [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [377](chapter14.xhtml#pg_377), [415](chapter15.xhtml#pg_415)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [366–367](chapter14.xhtml#pg_366), [401](chapter15.xhtml#pg_401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [375](chapter14.xhtml#pg_375), [408](chapter15.xhtml#pg_408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointers, [347](chapter14.xhtml#pg_347), [349–353](chapter14.xhtml#pg_349).
    *See also* [null pointers](#ind19)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversions to and from, [351–352](chapter14.xhtml#pg_351), [460](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointers to <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, [467–469](chapter17.xhtml#pg_467)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [375](chapter14.xhtml#pg_375)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [367–369](chapter14.xhtml#pg_367), [467–469](chapter17.xhtml#pg_467)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarators, [356](chapter14.xhtml#pg_356), [361](chapter14.xhtml#pg_361)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dereferencing, [349–350](chapter14.xhtml#pg_349)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to incomplete types, [461–462](chapter17.xhtml#pg_461), [471–472](chapter17.xhtml#pg_471),
    [473](chapter17.xhtml#pg_473), [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: operations on, [349–353](chapter14.xhtml#pg_349)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PointerInit</samp>, [437](chapter16.xhtml#pg_437),
    [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: referenced types, [354](chapter14.xhtml#pg_354)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializers for, [369–370](chapter14.xhtml#pg_369), [428–429](chapter16.xhtml#pg_428),
    [437](chapter16.xhtml#pg_437), [438–439](chapter16.xhtml#pg_438)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [364–370](chapter14.xhtml#pg_364), [400–402](chapter15.xhtml#pg_400),
    [467–469](chapter17.xhtml#pg_467), [471–472](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [354](chapter14.xhtml#pg_354)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [356–364](chapter14.xhtml#pg_356)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">pop</samp> instruction, [27–28](chapter2.xhtml#pg_27),
    [30–31](chapter2.xhtml#pg_30), [620–621](chapter20.xhtml#pg_620), [648](chapter20.xhtml#pg_648)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [44](chapter2.xhtml#pg_44), [649](chapter20.xhtml#pg_649)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: positive infinity, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postfix operators, [113](chapter5.xhtml#pg_113), [396–397](chapter15.xhtml#pg_396),
    [498](chapter18.xhtml#pg_498)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postorder traversals, [49](chapter3.xhtml#pg_49)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence climbing, [47](chapter3.xhtml#pg_47), [51–57](chapter3.xhtml#pg_51)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [68](chapter3.xhtml#pg_68)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combined with recursive descent parsing, [52–53](chapter3.xhtml#pg_52)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: example of, [55–57](chapter3.xhtml#pg_55)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pseudocode for, [54](chapter3.xhtml#pg_54)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with assignment operator, [102](chapter5.xhtml#pg_102)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with conditional operator, [124](chapter6.xhtml#pg_124)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right-associative operators, [101–102](chapter5.xhtml#pg_101)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operators, [55](chapter3.xhtml#pg_55)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignment operator, [103](chapter5.xhtml#pg_103)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional operator, [123](chapter6.xhtml#pg_123)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: logical operators, [74](chapter4.xhtml#pg_74)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relational operators, [74](chapter4.xhtml#pg_74)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precoloring register interference graphs, [625](chapter20.xhtml#pg_625)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: predictive parsers, [16](chapter1.xhtml#pg_16)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: prefix operators, [113](chapter5.xhtml#pg_113), [396](chapter15.xhtml#pg_396)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: preprocessor, [xxviii](introduction.xhtml#pg_xxviii), [7](chapter1.xhtml#pg_7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pretty-printer, [17](chapter1.xhtml#pg_17)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: procedure linkage table (PLT), [201–202](chapter9.xhtml#pg_201)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: production rule, [15](chapter1.xhtml#pg_15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PseudoMem</samp> operand, [412–414](chapter15.xhtml#pg_412)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing, [417–418](chapter15.xhtml#pg_417)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Pseudo</samp> operand, [40–42](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pseudoregisters, [40–41](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing, [42](chapter2.xhtml#pg_42), [237](chapter10.xhtml#pg_237), [267](chapter11.xhtml#pg_267)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">push</samp> instruction, [27–30](chapter2.xhtml#pg_27),
    [194–195](chapter9.xhtml#pg_194)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [43](chapter2.xhtml#pg_43), [203](chapter9.xhtml#pg_203)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [378–379](chapter14.xhtml#pg_378)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: passing arguments with, [188–189](chapter9.xhtml#pg_188), [198–199](chapter9.xhtml#pg_198),
    [263](chapter11.xhtml#pg_263), [332](chapter13.xhtml#pg_332)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">putchar</samp> function, [204](chapter9.xhtml#pg_204)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">puts</samp> function, [451–453](chapter16.xhtml#pg_451)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python, [xxxiv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Q</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.quad</samp> directive, [246](chapter11.xhtml#pg_246),
    [270](chapter11.xhtml#pg_270), [428](chapter16.xhtml#pg_428), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Quadword</samp> assembly type,
    [261–262](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: quadwords, [6](chapter1.xhtml#pg_6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arguments, [263](chapter11.xhtml#pg_263)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instructions, [244](chapter11.xhtml#pg_244), [261–262](chapter11.xhtml#pg_261)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: suffix, [6](chapter1.xhtml#pg_6), [269](chapter11.xhtml#pg_269)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pseudoregisters, [267](chapter11.xhtml#pg_267)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static, [246](chapter11.xhtml#pg_246)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">R</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RAX register, [5–6](chapter1.xhtml#pg_5), [40–41](chapter2.xhtml#pg_40), [60–62](chapter3.xhtml#pg_60),
    [185](chapter9.xhtml#pg_185), [193](chapter9.xhtml#pg_193), [525](chapter18.xhtml#pg_525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RBP register, [29–30](chapter2.xhtml#pg_29), [375](chapter14.xhtml#pg_375)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RDX register, [60–64](chapter3.xhtml#pg_60), [185](chapter9.xhtml#pg_185), [525](chapter18.xhtml#pg_525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reaching copies, [589](chapter19.xhtml#pg_589)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reaching copies analysis, [584](chapter19.xhtml#pg_584), [589–599](chapter19.xhtml#pg_589)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterative algorithm, [593–599](chapter19.xhtml#pg_593)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: meet operator, [592–593](chapter19.xhtml#pg_592)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transfer function, [589–592](chapter19.xhtml#pg_589), [601–602](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: read-only data section, [311–312](chapter13.xhtml#pg_311), [339](chapter13.xhtml#pg_339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">realloc</samp> function, [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: recursive descent parsing, [15–17](chapter1.xhtml#pg_15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with backtracking, [17](chapter1.xhtml#pg_17)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of binary operations, [50–51](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combined with precedence climbing, [52–53](chapter3.xhtml#pg_52)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dangling else ambiguity handled, [120–121](chapter6.xhtml#pg_120)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of declarators, [359](chapter14.xhtml#pg_359)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence and associativity, issues with, [50–51](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regan, Rick, [344–345](chapter13.xhtml#pg_344)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regehr, John, [91](chapter4.xhtml#pg_91)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: register allocation, [613–619](chapter20.xhtml#pg_613). *See also* [spilling](#ind28)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [669–670](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: graph coloring, [622–646](chapter20.xhtml#pg_622)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: algorithm, [638–646](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: degree < *k* rule, [638](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling multiple types, [631](chapter20.xhtml#pg_631), [637](chapter20.xhtml#pg_637)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: register coalescing, [618–619](chapter20.xhtml#pg_618), [651–668](chapter20.xhtml#pg_651)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterated, [663](chapter20.xhtml#pg_663)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: top-level algorithm, [630](chapter20.xhtml#pg_630)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: register coalescing, [614](chapter20.xhtml#pg_614), [618–619](chapter20.xhtml#pg_618),
    [651–653](chapter20.xhtml#pg_651), [663–667](chapter20.xhtml#pg_663)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conservative coalescing, [653](chapter20.xhtml#pg_653), [656](chapter20.xhtml#pg_656),
    [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Briggs test, [657–659](chapter20.xhtml#pg_657), [661–663](chapter20.xhtml#pg_661),
    [666–667](chapter20.xhtml#pg_666), [669–670](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: George test, [659–663](chapter20.xhtml#pg_659), [666–667](chapter20.xhtml#pg_666),
    [670](chapter20.xhtml#pg_670)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterated, [663](chapter20.xhtml#pg_663)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: updating the graph while, [653–656](chapter20.xhtml#pg_653), [663](chapter20.xhtml#pg_663),
    [666](chapter20.xhtml#pg_666)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: register interference graphs, [622–626](chapter20.xhtml#pg_622)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building, [631–637](chapter20.xhtml#pg_631)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: coloring, [622–625](chapter20.xhtml#pg_622), [638–646](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precoloring, [625](chapter20.xhtml#pg_625)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: detecting interference, [623–624](chapter20.xhtml#pg_623), [626–627](chapter20.xhtml#pg_626)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: updating, [653–656](chapter20.xhtml#pg_653), [666](chapter20.xhtml#pg_666)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: registers, [5–6](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aliases, [40](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly AST definition, [18](chapter1.xhtml#pg_18), [40](chapter2.xhtml#pg_40),
    [62](chapter3.xhtml#pg_62), [620–621](chapter20.xhtml#pg_620)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameter-passing registers, [195](chapter9.xhtml#pg_195)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RBP register, [375](chapter14.xhtml#pg_375)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSP register, [264](chapter11.xhtml#pg_264)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMM registers, [325](chapter13.xhtml#pg_325)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: caller-saved and callee-saved, [185](chapter9.xhtml#pg_185), [620–621](chapter20.xhtml#pg_620),
    [645–646](chapter20.xhtml#pg_645), [648–649](chapter20.xhtml#pg_648)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: general-purpose, [311](chapter13.xhtml#pg_311)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instruction, [84](chapter4.xhtml#pg_84)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameter-passing, [185](chapter9.xhtml#pg_185), [195](chapter9.xhtml#pg_195),
    [312](chapter13.xhtml#pg_312)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMM, [311–312](chapter13.xhtml#pg_311), [316](chapter13.xhtml#pg_316), [325](chapter13.xhtml#pg_325)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Reg</samp> operand, [40](chapter2.xhtml#pg_40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relational operators, [71](chapter4.xhtml#pg_71). *See also names of individual
    operators*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [85–88](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317](chapter13.xhtml#pg_317), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [285](chapter12.xhtml#pg_285), [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [73–75](chapter4.xhtml#pg_73)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence values, [74](chapter4.xhtml#pg_74)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer operands, [352](chapter14.xhtml#pg_352), [389–390](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [75–76](chapter4.xhtml#pg_75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tokens for, [72](chapter4.xhtml#pg_72)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [366–367](chapter14.xhtml#pg_366),
    [401](chapter15.xhtml#pg_401), [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: remainder (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>) operator,
    [47–48](chapter3.xhtml#pg_47)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [60–63](chapter3.xhtml#pg_60)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned, [288](chapter12.xhtml#pg_288)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [50–55](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254), [308](chapter13.xhtml#pg_308),
    [369](chapter14.xhtml#pg_369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: remainder assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">%=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing pseudoregisters, [42](chapter2.xhtml#pg_42)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with different types, [267](chapter11.xhtml#pg_267)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">PseudoMem</samp> operands, [417–418](chapter15.xhtml#pg_417)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with static storage duration, [237](chapter10.xhtml#pg_237)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ret</samp> instruction, [6](chapter1.xhtml#pg_6),
    [18](chapter1.xhtml#pg_18)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [20](chapter1.xhtml#pg_20), [44](chapter2.xhtml#pg_44)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statements, [4](chapter1.xhtml#pg_4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [18](chapter1.xhtml#pg_18), [333](chapter13.xhtml#pg_333), [482](chapter17.xhtml#pg_482),
    [545–546](chapter18.xhtml#pg_545)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [13–14](chapter1.xhtml#pg_13)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: missing, [111–113](chapter5.xhtml#pg_111), [458](chapter17.xhtml#pg_458)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [14–17](chapter1.xhtml#pg_14)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: without return values, [458](chapter17.xhtml#pg_458), [469–470](chapter17.xhtml#pg_469),
    [479](chapter17.xhtml#pg_479), [482](chapter17.xhtml#pg_482)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [36–38](chapter2.xhtml#pg_36), [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [256–257](chapter11.xhtml#pg_256), [469–470](chapter17.xhtml#pg_469)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: return values, [4–6](chapter1.xhtml#pg_4), [14](chapter1.xhtml#pg_14)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: absent, [458](chapter17.xhtml#pg_458), [469–470](chapter17.xhtml#pg_469), [479](chapter17.xhtml#pg_479),
    [482](chapter17.xhtml#pg_482)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: classifying, [537–538](chapter18.xhtml#pg_537). *See also* [<samp class="SANS_TheSansMonoCd_W5Regular_11">classify
    _return_value</samp> function](#ind-132)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of floating-point type, [312–313](chapter13.xhtml#pg_312), [333](chapter13.xhtml#pg_333)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of structure type, [525–528](chapter18.xhtml#pg_525), [537–541](chapter18.xhtml#pg_537),
    [545–546](chapter18.xhtml#pg_545)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">rewrite_coalesced</samp> function,
    [667–668](chapter20.xhtml#pg_667)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RFLAGS register, [78](chapter4.xhtml#pg_78)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right-associative operators, [50](chapter3.xhtml#pg_50), [101–102](chapter5.xhtml#pg_101),
    [123–124](chapter6.xhtml#pg_123)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right shift (<samp class="SANS_TheSansMonoCd_W5Regular_11">>></samp>) operator,
    [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right shift assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">>>=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RIP register, [83–84](chapter4.xhtml#pg_83), [189–190](chapter9.xhtml#pg_189),
    [222](chapter10.xhtml#pg_222)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RIP-relative addressing, [222](chapter10.xhtml#pg_222), [223](chapter10.xhtml#pg_223),
    [311](chapter13.xhtml#pg_311), [376](chapter14.xhtml#pg_376), [529](chapter18.xhtml#pg_529)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Data</samp> operand, [236–238](chapter10.xhtml#pg_236)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ritchie, Dennis, [390](chapter15.xhtml#pg_390)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.rodata</samp> directive, [311–312](chapter13.xhtml#pg_311),
    [339](chapter13.xhtml#pg_339), [428](chapter16.xhtml#pg_428), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rosetta [2](chapter1.xhtml#pg_2), [xxxv](introduction.xhtml#pg_xxxv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding modes, [299](chapter13.xhtml#pg_299), [320](chapter13.xhtml#pg_320)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: round-to-nearest, ties-to-even, [299](chapter13.xhtml#pg_299), [321](chapter13.xhtml#pg_321),
    [575](chapter19.xhtml#pg_575)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding to odd, [322–324](chapter13.xhtml#pg_322)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSP register, [27–30](chapter2.xhtml#pg_27), [43–44](chapter2.xhtml#pg_43),
    [185](chapter9.xhtml#pg_185), [264](chapter11.xhtml#pg_264)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">S</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: safety of optimizations, [558](chapter19.xhtml#pg_558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scalar types, [384](chapter15.xhtml#pg_384), [470–471](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schocken, Shimon, [45](chapter2.xhtml#pg_45)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scopes, [131–134](chapter7.xhtml#pg_131), [208–209](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: block scope, [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound statements determine, [131–134](chapter7.xhtml#pg_131)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file scope, [207–208](chapter10.xhtml#pg_207)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vs. storage duration, [213](chapter10.xhtml#pg_213)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.section .rodata</samp> directive,
    [311–312](chapter13.xhtml#pg_311)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: semantic analysis, [93](chapter5.xhtml#pg_93), [103–104](chapter5.xhtml#pg_103)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifier resolution (aka variable resolution), [104–109](chapter5.xhtml#pg_104),
    [174–178](chapter9.xhtml#pg_174), [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loop labeling, [150](chapter8.xhtml#pg_150), [152–155](chapter8.xhtml#pg_152)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [178–182](chapter9.xhtml#pg_178), [251–258](chapter11.xhtml#pg_251)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serra, Christopher, [22](chapter1.xhtml#pg_22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">SetCC</samp> instruction, [85–87](chapter4.xhtml#pg_85)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [89–90](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">set_up_parameters</samp> function,
    [544–545](chapter18.xhtml#pg_544)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SF (sign flag), [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shift left (<samp class="SANS_TheSansMonoCd_W5Regular_11">shl</samp>) instruction,
    [529–530](chapter18.xhtml#pg_529), [541–543](chapter18.xhtml#pg_541), [551](chapter18.xhtml#pg_551)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shift right (<samp class="SANS_TheSansMonoCd_W5Regular_11">shr</samp>) instruction,
    [320–321](chapter13.xhtml#pg_320), [323–325](chapter13.xhtml#pg_323), [529](chapter18.xhtml#pg_529)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: two-operand form, [529](chapter18.xhtml#pg_529), [543](chapter18.xhtml#pg_543),
    [551](chapter18.xhtml#pg_551)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: short-circuiting operators, [72](chapter4.xhtml#pg_72), [76–77](chapter4.xhtml#pg_76)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">signed char</samp> type, [423–424](chapter16.xhtml#pg_423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: signed integers, [243](chapter11.xhtml#pg_243)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overflow, [78–82](chapter4.xhtml#pg_78)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: representation, [26](chapter2.xhtml#pg_26), [61](chapter3.xhtml#pg_61), [244](chapter11.xhtml#pg_244)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions, [244–246](chapter11.xhtml#pg_244), [274–275](chapter12.xhtml#pg_274)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">signed</samp> keyword, [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">SignExtend</samp> instruction,
    [259–260](chapter11.xhtml#pg_259), [263](chapter11.xhtml#pg_263), [282–283](chapter12.xhtml#pg_282)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sign extension, [61](chapter3.xhtml#pg_61), [244–245](chapter11.xhtml#pg_244),
    [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [263](chapter11.xhtml#pg_263), [444](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [259–260](chapter11.xhtml#pg_259), [282–283](chapter12.xhtml#pg_282)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sign flag (SF), [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: significant degree, [638](chapter20.xhtml#pg_638)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: single-precision format, [299](chapter13.xhtml#pg_299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">sizeof</samp> operator, [458](chapter17.xhtml#pg_458),
    [462–466](chapter17.xhtml#pg_462), [471](chapter17.xhtml#pg_471), [477–478](chapter17.xhtml#pg_477),
    [480–481](chapter17.xhtml#pg_480)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Song, Dawn, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: source character set, [430](chapter16.xhtml#pg_430)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: source file, [xxviii](introduction.xhtml#pg_xxviii), [7–8](chapter1.xhtml#pg_7),
    [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: special characters, [429](chapter16.xhtml#pg_429), [450](chapter16.xhtml#pg_450)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: special sequences (EBNF), [15](chapter1.xhtml#pg_15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spilling, [616](chapter20.xhtml#pg_616), [627–630](chapter20.xhtml#pg_627),
    [642–644](chapter20.xhtml#pg_642), [646](chapter20.xhtml#pg_646)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: candidates for, [642](chapter20.xhtml#pg_642)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spill code, [616](chapter20.xhtml#pg_616), [620](chapter20.xhtml#pg_620)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spill cost, [630–631](chapter20.xhtml#pg_630), [638](chapter20.xhtml#pg_638),
    [642](chapter20.xhtml#pg_642), [644–645](chapter20.xhtml#pg_644)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSA (static single assignment) form, [672](next_steps.xhtml#pg_672)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSE. *See* [Streaming SIMD Extension instructions](#ind-539)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSE class, [519](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stack, [19](chapter1.xhtml#pg_19), [27–31](chapter2.xhtml#pg_27)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alignment, [185](chapter9.xhtml#pg_185), [197–198](chapter9.xhtml#pg_197), [648–649](chapter20.xhtml#pg_648)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: executable, [19](chapter1.xhtml#pg_19)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [22](chapter1.xhtml#pg_22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: frames, [29–31](chapter2.xhtml#pg_29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: allocating, [42](chapter2.xhtml#pg_42), [197–199](chapter9.xhtml#pg_197), [200–201](chapter9.xhtml#pg_200)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer, [27](chapter2.xhtml#pg_27)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stack frames, [29–31](chapter2.xhtml#pg_29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Stack</samp> operand, [40](chapter2.xhtml#pg_40),
    [42](chapter2.xhtml#pg_42), [44](chapter2.xhtml#pg_44)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replaced with <samp class="SANS_TheSansMonoCd_W5Regular_11">Memory</samp> operand,
    [375](chapter14.xhtml#pg_375)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">StaticConstant</samp> construct
    (assembly), [324](chapter13.xhtml#pg_324), [326](chapter13.xhtml#pg_326), [336](chapter13.xhtml#pg_336),
    [446](chapter16.xhtml#pg_446)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [340](chapter13.xhtml#pg_340)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">StaticConstant</samp> construct
    (TACKY), [442](chapter16.xhtml#pg_442), [446](chapter16.xhtml#pg_446)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializers, [213–214](chapter10.xhtml#pg_213). *See also* [<samp class="SANS_TheSansMonoCd_W5Regular_11">ZeroInit</samp>
    construct](#ind44)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [221–222](chapter10.xhtml#pg_221), [238–239](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for characters, [436](chapter16.xhtml#pg_436)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound, [404–405](chapter15.xhtml#pg_404)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [418–419](chapter15.xhtml#pg_418)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for structures, [509–511](chapter18.xhtml#pg_509)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp> type, [308–309](chapter13.xhtml#pg_308),
    [340](chapter13.xhtml#pg_340)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for long integers, [246](chapter11.xhtml#pg_246), [257–258](chapter11.xhtml#pg_257),
    [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for pointers, [369–370](chapter14.xhtml#pg_369), [428–429](chapter16.xhtml#pg_428),
    [437](chapter16.xhtml#pg_437), [438–439](chapter16.xhtml#pg_438)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: null pointers as, [369](chapter14.xhtml#pg_369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strings as, [437–439](chapter16.xhtml#pg_437)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [257](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [257–258](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for unsigned integers, [280–281](chapter12.xhtml#pg_280)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static single assignment (SSA) form, [672](next_steps.xhtml#pg_672)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">static</samp> specifier, [208](chapter10.xhtml#pg_208),
    [209–211](chapter10.xhtml#pg_209), [213](chapter10.xhtml#pg_213), [216–217](chapter10.xhtml#pg_216),
    [230–233](chapter10.xhtml#pg_230)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static storage duration, [213–214](chapter10.xhtml#pg_213). *See also* [static
    variables](#ind30)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing pseudoregisters with, [237](chapter10.xhtml#pg_237)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">StaticVariable</samp> construct
    (assembly), [235–236](chapter10.xhtml#pg_235), [263–264](chapter11.xhtml#pg_263),
    [413](chapter15.xhtml#pg_413)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [238–239](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">StaticVariable</samp> construct
    (TACKY), [234–235](chapter10.xhtml#pg_234), [258–259](chapter11.xhtml#pg_258),
    [406](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static variables, [213–214](chapter10.xhtml#pg_213)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [221–222](chapter10.xhtml#pg_221), [235–239](chapter10.xhtml#pg_235),
    [246](chapter11.xhtml#pg_246)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializing, [213–214](chapter10.xhtml#pg_213). *See also* [static initializers](#ind29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [234–235](chapter10.xhtml#pg_234)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [229–230](chapter10.xhtml#pg_229), [231–233](chapter10.xhtml#pg_231)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: status flags, [78–80](chapter4.xhtml#pg_78)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: carry, [284–285](chapter12.xhtml#pg_284), [317](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overflow, [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parity, [342](chapter13.xhtml#pg_342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sign, [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero, [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sterbenz lemma, [319](chapter13.xhtml#pg_319)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storage-class specifiers, [207–208](chapter10.xhtml#pg_207), [223](chapter10.xhtml#pg_223)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: effects, [209–217](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [225–226](chapter10.xhtml#pg_225)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storage duration, [207](chapter10.xhtml#pg_207), [212–213](chapter10.xhtml#pg_212)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: allocated, [213](chapter10.xhtml#pg_213), [461](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [221–222](chapter10.xhtml#pg_221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automatic, [212–213](chapter10.xhtml#pg_212), [217](chapter10.xhtml#pg_217)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vs. scope, [213](chapter10.xhtml#pg_213)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static, [213–214](chapter10.xhtml#pg_213), [237](chapter10.xhtml#pg_237)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [229–230](chapter10.xhtml#pg_229)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thread, [213](chapter10.xhtml#pg_213)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> instruction, [370–374](chapter14.xhtml#pg_370)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and liveness analysis, [609](chapter19.xhtml#pg_609)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and reaching copies analysis, [599–600](chapter19.xhtml#pg_599), [601–602](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming SIMD Extension (SSE) instructions, [310–312](chapter13.xhtml#pg_310)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic, [315–316](chapter13.xhtml#pg_315)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons, [317](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions, [317](chapter13.xhtml#pg_317), [320](chapter13.xhtml#pg_320)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strict aliasing rules, [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals, [425–426](chapter16.xhtml#pg_425)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as array initializers, [425](chapter16.xhtml#pg_425), [426](chapter16.xhtml#pg_426)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [440–441](chapter16.xhtml#pg_440)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [437–438](chapter16.xhtml#pg_437)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [426–429](chapter16.xhtml#pg_426)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [324](chapter13.xhtml#pg_324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [449–450](chapter16.xhtml#pg_449)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: designating constant strings, [425–426](chapter16.xhtml#pg_425)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [441–442](chapter16.xhtml#pg_441)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [436](chapter16.xhtml#pg_436), [438–439](chapter16.xhtml#pg_438)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lexing, [429–431](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lvalues, [425](chapter16.xhtml#pg_425), [436](chapter16.xhtml#pg_436)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [433](chapter16.xhtml#pg_433)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">struct</samp> keyword, [494](chapter18.xhtml#pg_494)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member (<samp class="SANS_TheSansMonoCd_W5Regular_11">.</samp>) operator,
    [491](chapter18.xhtml#pg_491), [495](chapter18.xhtml#pg_495)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [497–498](chapter18.xhtml#pg_497)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [513–517](chapter18.xhtml#pg_513)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: token for, [494](chapter18.xhtml#pg_494)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [506–508](chapter18.xhtml#pg_506)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure pointer (<samp class="SANS_TheSansMonoCd_W5Regular_11">-></samp>)
    operator, [491](chapter18.xhtml#pg_491), [495](chapter18.xhtml#pg_495)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [497–498](chapter18.xhtml#pg_497)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [514–515](chapter18.xhtml#pg_514), [517](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: token for, [494](chapter18.xhtml#pg_494)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [506–507](chapter18.xhtml#pg_506)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure tags, [486–488](chapter18.xhtml#pg_486), [489–490](chapter18.xhtml#pg_489)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving, [498–500](chapter18.xhtml#pg_498)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: classifying, [519–522](chapter18.xhtml#pg_519), [533–534](chapter18.xhtml#pg_533)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complete, [486–487](chapter18.xhtml#pg_486), [503](chapter18.xhtml#pg_503)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copying, [531–532](chapter18.xhtml#pg_531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarations, [486–491](chapter18.xhtml#pg_486)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: definitions, [486](chapter18.xhtml#pg_486)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the type table, [501–502](chapter18.xhtml#pg_501)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validating, [501](chapter18.xhtml#pg_501)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in function calls, [519–528](chapter18.xhtml#pg_519), [532–546](chapter18.xhtml#pg_532)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete, [486–487](chapter18.xhtml#pg_486), [490](chapter18.xhtml#pg_490),
    [503](chapter18.xhtml#pg_503), [505–506](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializers, [492](chapter18.xhtml#pg_492)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [517–518](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [509–511](chapter18.xhtml#pg_509)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: layout in memory, [492–494](chapter18.xhtml#pg_492)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: not implemented, [490–491](chapter18.xhtml#pg_490)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: operations on, [491–492](chapter18.xhtml#pg_491). *See also* [structure member
    operator](#ind-543); [structure point operator](#ind-544)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: padding, [493](chapter18.xhtml#pg_493), [510–511](chapter18.xhtml#pg_510), [518–519](chapter18.xhtml#pg_518)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: return values of, [525–528](chapter18.xhtml#pg_525), [545–546](chapter18.xhtml#pg_545)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: specifiers, [498](chapter18.xhtml#pg_498)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tags, [486–488](chapter18.xhtml#pg_486), [489–490](chapter18.xhtml#pg_489)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving, [498–500](chapter18.xhtml#pg_498)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [500–511](chapter18.xhtml#pg_500)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">sub</samp> instruction, [29–30](chapter2.xhtml#pg_29),
    [60](chapter3.xhtml#pg_60), [62–63](chapter3.xhtml#pg_62)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [66](chapter3.xhtml#pg_66), [270](chapter11.xhtml#pg_270)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [64](chapter3.xhtml#pg_64), [268](chapter11.xhtml#pg_268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subnormal numbers, [298](chapter13.xhtml#pg_298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">SubObject</samp> construct, [515–517](chapter18.xhtml#pg_515)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subscript (<samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp>) operator,
    [389](chapter15.xhtml#pg_389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [393](chapter15.xhtml#pg_393)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generation, [408](chapter15.xhtml#pg_408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [396–397](chapter15.xhtml#pg_396)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [408–410](chapter15.xhtml#pg_408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [399](chapter15.xhtml#pg_399), [401–402](chapter15.xhtml#pg_401),
    [471–472](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">subsd</samp> instruction, [315](chapter13.xhtml#pg_315)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subtraction (<samp class="SANS_TheSansMonoCd_W5Regular_11">-</samp>) operator,
    [47–48](chapter3.xhtml#pg_47)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [60](chapter3.xhtml#pg_60), [62–63](chapter3.xhtml#pg_62)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [315](chapter13.xhtml#pg_315), [327](chapter13.xhtml#pg_327)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [50–55](chapter3.xhtml#pg_50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer subtraction, [388–390](chapter15.xhtml#pg_388)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [406–408](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [400–401](chapter15.xhtml#pg_400), [472](chapter17.xhtml#pg_472)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254–255](chapter11.xhtml#pg_254)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subtraction assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">-=</samp>)
    operator, [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">switch</samp> statements, [159](chapter8.xhtml#pg_159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbols (assembly), [5](chapter1.xhtml#pg_5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global vs. local, [168–169](chapter9.xhtml#pg_168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbol tables, [5](chapter1.xhtml#pg_5), [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbol table internal to compiler, [174–175](chapter9.xhtml#pg_174), [179–181](chapter9.xhtml#pg_179).
    *See also* [backend symbol table](#ind6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating TACKY top-level definitions from, [234–235](chapter10.xhtml#pg_234),
    [442](chapter16.xhtml#pg_442)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifier attributes in, [229–233](chapter10.xhtml#pg_229), [257–258](chapter11.xhtml#pg_257),
    [438](chapter16.xhtml#pg_438)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: renamed to frontend symbol table, [266](chapter11.xhtml#pg_266)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary variables in, [260–261](chapter11.xhtml#pg_260)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tentative definitions in, [229–230](chapter10.xhtml#pg_229), [235](chapter10.xhtml#pg_235)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symbol tables in object files, [5](chapter1.xhtml#pg_5), [89](chapter4.xhtml#pg_89)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System V x64 ABI, [xxxvi](introduction.xhtml#pg_xxxvi), [184](chapter9.xhtml#pg_184).
    *See also* [System V x64 calling convention](#ind33)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays, alignment of, [415](chapter15.xhtml#pg_415)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">char</samp>, signedness of, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clang violation of, [444–445](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point format, [296](chapter13.xhtml#pg_296), [297](chapter13.xhtml#pg_297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alignment of, [246](chapter11.xhtml#pg_246)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: size of, [244](chapter11.xhtml#pg_244)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">size_t</samp>, definition of,
    [460](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structures, size and alignment of, [493](chapter18.xhtml#pg_493)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System V x64 calling convention, [184–194](chapter9.xhtml#pg_184)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [344](chapter13.xhtml#pg_344), [553–554](chapter18.xhtml#pg_553)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: classifying values, [519](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point values in, [312–315](chapter13.xhtml#pg_312)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: narrow arguments in, [444–445](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structures in, [519–528](chapter18.xhtml#pg_519)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">T</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TAC (three-address code), [35–36](chapter2.xhtml#pg_35)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY, [36–38](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Constant</samp> operands, [36](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generation, [37–38](chapter2.xhtml#pg_37)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: address (<samp class="SANS_TheSansMonoCd_W5Regular_11">&</samp>) operator, [370–372](chapter14.xhtml#pg_370),
    [374](chapter14.xhtml#pg_374), [514](chapter18.xhtml#pg_514), [516–517](chapter18.xhtml#pg_516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignment expressions, [110](chapter5.xhtml#pg_110), [371–374](chapter14.xhtml#pg_371),
    [516](chapter18.xhtml#pg_516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: binary expressions, [58](chapter3.xhtml#pg_58)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">break</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp>
    statements, [155–156](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cast expressions, [259–260](chapter11.xhtml#pg_259), [281–283](chapter12.xhtml#pg_281),
    [309–310](chapter13.xhtml#pg_309), [375](chapter14.xhtml#pg_375), [440](chapter16.xhtml#pg_440),
    [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound initializers, [406](chapter15.xhtml#pg_406), [410–411](chapter15.xhtml#pg_410),
    [517–518](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound statements, [140](chapter7.xhtml#pg_140)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions, [127](chapter6.xhtml#pg_127), [479–480](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dereference (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>) operator,
    [371–374](chapter14.xhtml#pg_371)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function calls, [182–183](chapter9.xhtml#pg_182), [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function definitions, [182–183](chapter9.xhtml#pg_182)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements, [126–127](chapter6.xhtml#pg_126)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loops, [155–158](chapter8.xhtml#pg_155)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer arithmetic, [406–408](chapter15.xhtml#pg_406)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statements, [36–38](chapter2.xhtml#pg_36),
    [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: short-circuiting operators, [76–77](chapter4.xhtml#pg_76)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">sizeof</samp> operator, [480–481](chapter17.xhtml#pg_480)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static variables, [234–235](chapter10.xhtml#pg_234)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member access operators, [513–517](chapter18.xhtml#pg_513)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subscript (<samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp>) operator,
    [408](chapter15.xhtml#pg_408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unary expressions, [37–38](chapter2.xhtml#pg_37)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instructions, [42–43](chapter2.xhtml#pg_42)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lvalue conversion in, [371–374](chapter14.xhtml#pg_371), [515–517](chapter18.xhtml#pg_515)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary variables, [36–38](chapter2.xhtml#pg_36), [260–261](chapter11.xhtml#pg_260)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: top-level constants, [442](chapter16.xhtml#pg_442)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Var</samp> operands, [36](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taylor, Ian Lance, [21](chapter1.xhtml#pg_21), [22](chapter1.xhtml#pg_22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary lifetimes, [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary variables, [36–38](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: naming, [38](chapter2.xhtml#pg_38)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on the stack, [29](chapter2.xhtml#pg_29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [260–261](chapter11.xhtml#pg_260)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tentative definitions, [215–216](chapter10.xhtml#pg_215)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converting to TACKY, [235](chapter10.xhtml#pg_235)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in the symbol table, [229–230](chapter10.xhtml#pg_229), [235](chapter10.xhtml#pg_235),
    [411](chapter15.xhtml#pg_411)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [231–232](chapter10.xhtml#pg_231)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined behavior, [219–220](chapter10.xhtml#pg_219)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: terminal symbols, [15](chapter1.xhtml#pg_15)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ternary operators, [121](chapter6.xhtml#pg_121). *See also* [conditional expressions](#ind10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.text</samp> directive, [238](chapter10.xhtml#pg_238)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text section, [5](chapter1.xhtml#pg_5), [283](chapter12.xhtml#pg_283)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thread storage duration, [213](chapter10.xhtml#pg_213)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: three-address code (TAC), [35–36](chapter2.xhtml#pg_35). *See also* [TACKY](#ind34)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tokens, [3](chapter1.xhtml#pg_3), [8–10](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constants, [8–10](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: character, [429](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [302–304](chapter13.xhtml#pg_302)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer, [8](chapter1.xhtml#pg_8), [247](chapter11.xhtml#pg_247), [275](chapter12.xhtml#pg_275),
    [304](chapter13.xhtml#pg_304)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifiers, [8–10](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals, [429](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Torczon, Linda, [669–670](chapter20.xhtml#pg_669)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transfer functions, [584–585](chapter19.xhtml#pg_584)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: liveness analysis, [605–606](chapter19.xhtml#pg_605)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for assembly code, [634–636](chapter20.xhtml#pg_634)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Part II types, [608–609](chapter19.xhtml#pg_608)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reaching copies analysis, [589–592](chapter19.xhtml#pg_589)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Part II types, [601–602](chapter19.xhtml#pg_601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: translation units, [167](chapter9.xhtml#pg_167), [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Truncate</samp> instruction, [259–260](chapter11.xhtml#pg_259),
    [263](chapter11.xhtml#pg_263), [282](chapter12.xhtml#pg_282)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: two’s complement, [26](chapter2.xhtml#pg_26), [45](chapter2.xhtml#pg_45), [78](chapter4.xhtml#pg_78),
    [274](chapter12.xhtml#pg_274)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [178–182](chapter9.xhtml#pg_178), [251–258](chapter11.xhtml#pg_251)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays, [398–399](chapter15.xhtml#pg_398), [402–405](chapter15.xhtml#pg_402),
    [471](chapter17.xhtml#pg_471), [472–473](chapter17.xhtml#pg_472)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compound initializers, [403–405](chapter15.xhtml#pg_403), [509–511](chapter18.xhtml#pg_509)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarations, [179–181](chapter9.xhtml#pg_179), [230–233](chapter10.xhtml#pg_230),
    [257–258](chapter11.xhtml#pg_257), [402–403](chapter15.xhtml#pg_402)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>, [308–309](chapter13.xhtml#pg_308)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expressions, [253–256](chapter11.xhtml#pg_253)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operators, [254–255](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369),
    [435](chapter16.xhtml#pg_435), [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignment, [256](chapter11.xhtml#pg_256), [368](chapter14.xhtml#pg_368), [399](chapter15.xhtml#pg_399)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitwise complement (<samp class="SANS_TheSansMonoCd_W5Regular_11">~</samp>)
    operator, [308](chapter13.xhtml#pg_308), [369](chapter14.xhtml#pg_369), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cast, [254](chapter11.xhtml#pg_254), [369](chapter14.xhtml#pg_369), [402](chapter15.xhtml#pg_402),
    [471](chapter17.xhtml#pg_471), [505](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional, [256](chapter11.xhtml#pg_256), [368](chapter14.xhtml#pg_368), [467](chapter17.xhtml#pg_467),
    [470](chapter17.xhtml#pg_470), [476](chapter17.xhtml#pg_476), [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: logical operators, [254–255](chapter11.xhtml#pg_254), [470](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer arithmetic, [400–401](chapter15.xhtml#pg_400), [472](chapter17.xhtml#pg_472)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relational operators, [254–255](chapter11.xhtml#pg_254), [366–367](chapter14.xhtml#pg_366),
    [401](chapter15.xhtml#pg_401), [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: remainder (<samp class="SANS_TheSansMonoCd_W5Regular_11">%</samp>) operator,
    [254–255](chapter11.xhtml#pg_254), [308](chapter13.xhtml#pg_308), [369](chapter14.xhtml#pg_369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">sizeof</samp> operator, [477–478](chapter17.xhtml#pg_477)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure member access operators, [506–507](chapter18.xhtml#pg_506)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">subscript</samp> (<samp class="SANS_TheSansMonoCd_W5Regular_11">[]</samp>)
    operator<samp class="SANS_TheSansMonoCd_W5Regular_11">, [399](chapter15.xhtml#pg_399),
    [401–402](chapter15.xhtml#pg_401)</samp>, [471–472](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file scope variable declarations, [231–232](chapter10.xhtml#pg_231)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function calls, [179](chapter9.xhtml#pg_179), [181–182](chapter9.xhtml#pg_181),
    [256](chapter11.xhtml#pg_256)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete types, [471–473](chapter17.xhtml#pg_471), [505–506](chapter18.xhtml#pg_505)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointers, [364–370](chapter14.xhtml#pg_364), [400–402](chapter15.xhtml#pg_400),
    [467–469](chapter17.xhtml#pg_467), [471–472](chapter17.xhtml#pg_471)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statements, [256–257](chapter11.xhtml#pg_256),
    [469–470](chapter17.xhtml#pg_469)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string literals, [436–439](chapter16.xhtml#pg_436)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structure types, [500–511](chapter18.xhtml#pg_500)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type errors, [174](chapter9.xhtml#pg_174)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [244–245](chapter11.xhtml#pg_244), [317–324](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [317–324](chapter13.xhtml#pg_317), [328–329](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sign extension, [244–245](chapter11.xhtml#pg_244), [444](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: truncation, [245](chapter11.xhtml#pg_245), [263](chapter11.xhtml#pg_263), [444](chapter16.xhtml#pg_444)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero extension, [286–288](chapter12.xhtml#pg_286), [443–444](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: character, [443–445](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>, [317–324](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to and from character types, [445](chapter16.xhtml#pg_445)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rounding behavior, [300–301](chapter13.xhtml#pg_300)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined, [308](chapter13.xhtml#pg_308), [371](chapter14.xhtml#pg_371)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implementation-defined, [245](chapter11.xhtml#pg_245), [352](chapter14.xhtml#pg_352)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implicit, [254–255](chapter11.xhtml#pg_254), [279](chapter12.xhtml#pg_279),
    [351](chapter14.xhtml#pg_351), [467–469](chapter17.xhtml#pg_467)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as if by assignment, [368](chapter14.xhtml#pg_368), [468–469](chapter17.xhtml#pg_468),
    [504–505](chapter18.xhtml#pg_504)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Cast</samp> expression representing,
    [255](chapter11.xhtml#pg_255)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: usual arithmetic conversions, [254–255](chapter11.xhtml#pg_254), [279–280](chapter12.xhtml#pg_279),
    [308](chapter13.xhtml#pg_308), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer, [244–245](chapter11.xhtml#pg_244), [274–275](chapter12.xhtml#pg_274)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer, [351–352](chapter14.xhtml#pg_351), [460](chapter17.xhtml#pg_460)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [259–260](chapter11.xhtml#pg_259), [281–283](chapter12.xhtml#pg_281),
    [309–310](chapter13.xhtml#pg_309)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Copy</samp>, [259–260](chapter11.xhtml#pg_259)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to and from <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>, [309–310](chapter13.xhtml#pg_309)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">SignExtend</samp>, [259–260](chapter11.xhtml#pg_259)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Truncate</samp>, [259–260](chapter11.xhtml#pg_259)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ZeroExtend</samp>, [281–283](chapter12.xhtml#pg_281)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">typedef</samp> declarations, [108–109](chapter5.xhtml#pg_108)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type errors, [174](chapter9.xhtml#pg_174). *See also* [type checking](#ind36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type names, [361–363](chapter14.xhtml#pg_361), [462](chapter17.xhtml#pg_462),
    [465–466](chapter17.xhtml#pg_465)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types, [178–179](chapter9.xhtml#pg_178). *See also* [character types](#ind8);
    [integer types](#ind14); [<samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>
    type](#ind40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aggregate, [384](chapter15.xhtml#pg_384)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic, [347](chapter14.xhtml#pg_347), [476–477](chapter17.xhtml#pg_476)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array, [384–392](chapter15.xhtml#pg_384)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: derived, [354](chapter14.xhtml#pg_354)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on <samp class="SANS_TheSansMonoCd_W5Regular_11">exp</samp> nodes, [252–253](chapter11.xhtml#pg_252)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point, [295–299](chapter13.xhtml#pg_295)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function, [178–179](chapter9.xhtml#pg_178), [247–248](chapter11.xhtml#pg_247)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incomplete, [461–462](chapter17.xhtml#pg_461)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: non-scalar, [470–471](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer, [347](chapter14.xhtml#pg_347), [349–353](chapter14.xhtml#pg_349)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scalar, [384](chapter15.xhtml#pg_384), [470–471](chapter17.xhtml#pg_470)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type specifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">char</samp>, [429](chapter16.xhtml#pg_429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: character, [433](chapter16.xhtml#pg_433)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">double</samp>, [302](chapter13.xhtml#pg_302),
    [306–307](chapter13.xhtml#pg_306)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">int</samp>, [8](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer, [249–250](chapter11.xhtml#pg_249), [277–278](chapter12.xhtml#pg_277)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">long</samp>, [247](chapter11.xhtml#pg_247)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">signed</samp>, [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structures, [498](chapter18.xhtml#pg_498)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned</samp>, [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp>, [8](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type table, [500–502](chapter18.xhtml#pg_500), [503–504](chapter18.xhtml#pg_503),
    [506–507](chapter18.xhtml#pg_506), [509–511](chapter18.xhtml#pg_509), [515](chapter18.xhtml#pg_515),
    [517–518](chapter18.xhtml#pg_517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">U</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">UIntToDouble</samp> instruction,
    [309–310](chapter13.xhtml#pg_309)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly for, [320–324](chapter13.xhtml#pg_320)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ullman, Jeffrey, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unary expressions, [25–27](chapter2.xhtml#pg_25), [31–38](chapter2.xhtml#pg_31)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [33](chapter2.xhtml#pg_33)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [33–34](chapter2.xhtml#pg_33)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: formal grammar, [33](chapter2.xhtml#pg_33), [397](chapter15.xhtml#pg_397), [465](chapter17.xhtml#pg_465)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TACKY for, [36–38](chapter2.xhtml#pg_36)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [254](chapter11.xhtml#pg_254)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unary operators. *See* [unary expressions *and names of individual operators*](#ind-96)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unconditional jump instructions. *See* [jump instructions (assembly)](#ind15);
    [jump instructions (TACKY)](#ind16)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undeclared variables, [104](chapter5.xhtml#pg_104), [107](chapter5.xhtml#pg_107),
    [134](chapter7.xhtml#pg_134)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined behavior, [80–82](chapter4.xhtml#pg_80)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: additional resources, [91](chapter4.xhtml#pg_91)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conflicting linkage, [218–219](chapter10.xhtml#pg_218)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling safely, [672](next_steps.xhtml#pg_672)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integer overflow, [80–82](chapter4.xhtml#pg_80)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: missing <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statement,
    [111–112](chapter5.xhtml#pg_111)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modifying objects, [425–426](chapter16.xhtml#pg_425), [508](chapter18.xhtml#pg_508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: out-of-range type conversions, [308](chapter13.xhtml#pg_308), [317](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer arithmetic, [388](chapter15.xhtml#pg_388), [390](chapter15.xhtml#pg_390)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer dereferences, [351–352](chapter14.xhtml#pg_351)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tentative definitions, [219–220](chapter10.xhtml#pg_219)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variable accesses, [96](chapter5.xhtml#pg_96), [106–107](chapter5.xhtml#pg_106)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UndefinedBehaviorSanitizer, [672](next_steps.xhtml#pg_672)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: union types, [552–553](chapter18.xhtml#pg_552)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: universal character names, [10](chapter1.xhtml#pg_10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unreachable code elimination, [561–562](chapter19.xhtml#pg_561), [581–584](chapter19.xhtml#pg_581)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combining with other optimizations, [569](chapter19.xhtml#pg_569)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsequenced evaluations, [58–59](chapter3.xhtml#pg_58), [82](chapter4.xhtml#pg_82)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned char</samp> type, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned integers, [273–289](chapter12.xhtml#pg_273)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in assembly, [283–289](chapter12.xhtml#pg_283)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembly type, [287](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned comparisons, [283–285](chapter12.xhtml#pg_283), [287–288](chapter12.xhtml#pg_287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unsigned division, [286](chapter12.xhtml#pg_286), [288](chapter12.xhtml#pg_288)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constants, [275–278](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regular expression for, [304](chapter13.xhtml#pg_304)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static initializers for, [280–281](chapter12.xhtml#pg_280)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type conversions, [274–275](chapter12.xhtml#pg_274), [279–280](chapter12.xhtml#pg_279),
    [282–283](chapter12.xhtml#pg_282)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned int</samp> type, [273–281](chapter12.xhtml#pg_273)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned long</samp> type, [273–281](chapter12.xhtml#pg_273)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wraparound, [79](chapter4.xhtml#pg_79), [285–286](chapter12.xhtml#pg_285), [575](chapter19.xhtml#pg_575)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">unsigned</samp> keyword, [275](chapter12.xhtml#pg_275)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: usual arithmetic conversions, [254–255](chapter11.xhtml#pg_254), [279–280](chapter12.xhtml#pg_279),
    [308](chapter13.xhtml#pg_308), [435](chapter16.xhtml#pg_435)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">V</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: values, [348](chapter14.xhtml#pg_348)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variable declarations, [94–95](chapter5.xhtml#pg_94), [208–220](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of array type, [384–385](chapter15.xhtml#pg_384)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AST definition, [98](chapter5.xhtml#pg_98), [171](chapter9.xhtml#pg_171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkage, [209–212](chapter10.xhtml#pg_209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing, [100–101](chapter5.xhtml#pg_100), [224–227](chapter10.xhtml#pg_224)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving identifiers in, [105–106](chapter5.xhtml#pg_105), [138–139](chapter7.xhtml#pg_138),
    [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scopes, [131–134](chapter7.xhtml#pg_131), [208–209](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: block scope, [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file scope, [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storage duration, [212–214](chapter10.xhtml#pg_212)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [179–180](chapter9.xhtml#pg_179), [231–233](chapter10.xhtml#pg_231),
    [257–258](chapter11.xhtml#pg_257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variable resolution, [104–108](chapter5.xhtml#pg_104), [136–139](chapter7.xhtml#pg_136),
    [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions, [125–126](chapter6.xhtml#pg_125)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements, [125–126](chapter6.xhtml#pg_125)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loops, [151–152](chapter8.xhtml#pg_151)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multiple scopes, [136–139](chapter7.xhtml#pg_136)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: renamed identifier resolution, [174](chapter9.xhtml#pg_174)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, [93–97](chapter5.xhtml#pg_93), [208–222](chapter10.xhtml#pg_208).
    *See also* [static variables](#ind30)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aliased, [599–602](chapter19.xhtml#pg_599), [609](chapter19.xhtml#pg_609), [637](chapter20.xhtml#pg_637)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automatic, [208](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: external, [208](chapter10.xhtml#pg_208), [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: live, [603](chapter19.xhtml#pg_603)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: local, [93–95](chapter5.xhtml#pg_93)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving, [104–107](chapter5.xhtml#pg_104), [227–229](chapter10.xhtml#pg_227)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scopes, [131–134](chapter7.xhtml#pg_131), [208–209](chapter10.xhtml#pg_208)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in TACKY, [36–38](chapter2.xhtml#pg_36), [110](chapter5.xhtml#pg_110)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary, [36–38](chapter2.xhtml#pg_36), [260–261](chapter11.xhtml#pg_260)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type checking, [181](chapter9.xhtml#pg_181), [253](chapter11.xhtml#pg_253)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variable resolution, [107](chapter5.xhtml#pg_107)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variadic functions, [191](chapter9.xhtml#pg_191)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: void expressions, [459](chapter17.xhtml#pg_459)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> keyword, [8–9](chapter1.xhtml#pg_8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">as parameter list, [162](chapter9.xhtml#pg_162),
    [459](chapter17.xhtml#pg_459), [466–467](chapter17.xhtml#pg_466)</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">void</samp> type, [458–460](chapter17.xhtml#pg_458)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: casts to, [459](chapter17.xhtml#pg_459), [471](chapter17.xhtml#pg_471), [479](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions with, [459](chapter17.xhtml#pg_459), [476](chapter17.xhtml#pg_476),
    [479–480](chapter17.xhtml#pg_479)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in C standard, [458](chapter17.xhtml#pg_458), [474–475](chapter17.xhtml#pg_474)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functions returning, [458](chapter17.xhtml#pg_458), [469–470](chapter17.xhtml#pg_469),
    [479](chapter17.xhtml#pg_479), [482](chapter17.xhtml#pg_482)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointers to, [460–461](chapter17.xhtml#pg_460), [475](chapter17.xhtml#pg_475)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conversions to and from, [467–469](chapter17.xhtml#pg_467)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: restrictions on, [473–476](chapter17.xhtml#pg_473)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when valid, [473–475](chapter17.xhtml#pg_473)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: volatile objects, [560](chapter19.xhtml#pg_560)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">W</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wang, Daniel, [22](chapter1.xhtml#pg_22)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">while</samp> statements, [144](chapter8.xhtml#pg_144),
    [148–150](chapter8.xhtml#pg_148), [151–155](chapter8.xhtml#pg_151), [157](chapter8.xhtml#pg_157)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: whitespace, [9–10](chapter1.xhtml#pg_9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wide character types, [424](chapter16.xhtml#pg_424)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Subsystem for Linux (WSL), [xxxiv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">w</samp> suffix, [28](chapter2.xhtml#pg_28)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">X</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x64 instruction set, [xxvii](introduction.xhtml#pg_xxvii). *See also* assembly
    code *and names of individual instructions*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AT&T vs. Intel syntax, [6](chapter1.xhtml#pg_6), [244](chapter11.xhtml#pg_244),
    [570](chapter19.xhtml#pg_570)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: documentation, [xxxvi](introduction.xhtml#pg_xxxvi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming SIMD Extension instructions, [310–312](chapter13.xhtml#pg_310)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x64 processor, [xxxiv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: little-endian, [86](chapter4.xhtml#pg_86)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: memory address size, [28](chapter2.xhtml#pg_28)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86-64\. *See* [x64 instruction set](#ind41); [x64 processor](#ind42)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode, [xxxiv–xxxv](introduction.xhtml#pg_xxxiv)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMM registers, [311–312](chapter13.xhtml#pg_311), [325](chapter13.xhtml#pg_325)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: allocating, [631](chapter20.xhtml#pg_631)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building register interference graph, [637](chapter20.xhtml#pg_637)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in function calls, [312–315](chapter13.xhtml#pg_312), [329–333](chapter13.xhtml#pg_329),
    [519](chapter18.xhtml#pg_519), [532–541](chapter18.xhtml#pg_532), [545–546](chapter18.xhtml#pg_545)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zeroing, [316](chapter13.xhtml#pg_316)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XOR (<samp class="SANS_TheSansMonoCd_W5Regular_11">^</samp>) operator, [67](chapter3.xhtml#pg_67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XOR assignment (<samp class="SANS_TheSansMonoCd_W5Regular_11">^=</samp>) operator,
    [113](chapter5.xhtml#pg_113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">xorpd</samp> instruction, [316](chapter13.xhtml#pg_316),
    [324–325](chapter13.xhtml#pg_324), [328](chapter13.xhtml#pg_328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [341](chapter13.xhtml#pg_341)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixing up, [337](chapter13.xhtml#pg_337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Y</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yang, Edward, [253](chapter11.xhtml#pg_253)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yang, Zhaomo, [611](chapter19.xhtml#pg_611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Z</samp>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zephyr Abstract Syntax Description Language. *See* [ASDL](#ind4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.zero</samp> directive, [222](chapter10.xhtml#pg_222)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ZeroExtend</samp> instruction,
    [281–283](chapter12.xhtml#pg_281), [288](chapter12.xhtml#pg_288)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero extension, [274](chapter12.xhtml#pg_274), [281–282](chapter12.xhtml#pg_281),
    [286–288](chapter12.xhtml#pg_286), [443–444](chapter16.xhtml#pg_443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero flag (ZF), [78–80](chapter4.xhtml#pg_78), [83](chapter4.xhtml#pg_83)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">comisd</samp>, set by, [317](chapter13.xhtml#pg_317)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in unsigned comparisons, [284–285](chapter12.xhtml#pg_284)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ZeroInit</samp> construct, [405](chapter15.xhtml#pg_405)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: emitting, [418–419](chapter15.xhtml#pg_418)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializing padding, [510–511](chapter18.xhtml#pg_510)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializing scalar variables, [405](chapter15.xhtml#pg_405)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializing tentatively defined arrays, [411](chapter15.xhtml#pg_411)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A flow chart shows the steps of the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The process begins with C source code (text).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The preprocessor turns the source code into preprocessed source code (text).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The compiler turns the preprocessed source code into assembly code (text).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. The assembler turns the assembly code into an object file (binary).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. The linker turns the object file and two other object files (binary) into
    an executable (also binary).
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](introduction.xhtml#fig-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Assembly generation turns the abstract syntax tree into assembly.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter1.xhtml#fig-pg2)'
  prefs: []
  type: TYPE_NORMAL
- en: A tree diagram shows the AST.
  prefs: []
  type: TYPE_NORMAL
- en: · The root node is "If(condition, then).”
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node’s "condition" child is "Binary(operator, left, right).”
  prefs: []
  type: TYPE_NORMAL
- en: ○ The "left" child is "Var(a).”
  prefs: []
  type: TYPE_NORMAL
- en: ○ The "operator" child is "LessThan.”
  prefs: []
  type: TYPE_NORMAL
- en: ○ The "right" child is "Var(b).”
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node’s "then" child is "Return(exp).”
  prefs: []
  type: TYPE_NORMAL
- en: ○ The "exp" child is "Binary(operator, left, right).”
  prefs: []
  type: TYPE_NORMAL
- en: ■ The "left" child is "Constant(2).”
  prefs: []
  type: TYPE_NORMAL
- en: ■ The "operator" child is "Add.”
  prefs: []
  type: TYPE_NORMAL
- en: ■ The "right" child is "Constant(2).”
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter1.xhtml#fig1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A tree diagram shows the AST. Each node has one child.
  prefs: []
  type: TYPE_NORMAL
- en: · The root node is "Program(function_definition).”
  prefs: []
  type: TYPE_NORMAL
- en: ● The "function_definition" child is "Function(main, body).”
  prefs: []
  type: TYPE_NORMAL
- en: ■ The "body" child is "Return(exp).”
  prefs: []
  type: TYPE_NORMAL
- en: ● The "exp" child is "Constant(2).”
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter1.xhtml#fig1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. TACKY Generation (a new stage) turns the abstract syntax tree into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Assembly generation turns TACKY into assembly. It has three steps (all
    new):'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter2.xhtml#fig-pg24)'
  prefs: []
  type: TYPE_NORMAL
- en: The diagram shows the system state before and after the push instruction.
  prefs: []
  type: TYPE_NORMAL
- en: '· Before push, the stack has the following contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● "a" at address 0x7ffeea685918
  prefs: []
  type: TYPE_NORMAL
- en: ● "b" at address 0x7ffeea685920
  prefs: []
  type: TYPE_NORMAL
- en: ● "c" at address 0x7ffeea685928
  prefs: []
  type: TYPE_NORMAL
- en: RSP holds the address 0x7ffeea685918 and points to "a".
  prefs: []
  type: TYPE_NORMAL
- en: '· After push, the stack has the following contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● 3 at address 0x7ffeea685910
  prefs: []
  type: TYPE_NORMAL
- en: ● "a" at address 0x7ffeea685918
  prefs: []
  type: TYPE_NORMAL
- en: ● "b" at address 0x7ffeea685920
  prefs: []
  type: TYPE_NORMAL
- en: ● "c" at address 0x7ffeea685928
  prefs: []
  type: TYPE_NORMAL
- en: RSP holds the address 0x7ffeea685910 and points to 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter2.xhtml#fig2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Four diagrams show the system state at the beginning of the function and after
    each instruction in the function prologue.
  prefs: []
  type: TYPE_NORMAL
- en: · At the beginning of the function, the caller stack frame starts at the top
    of the stack, at address 0x7ffeea685918, and extends to address 0x7ffeea685960\.
    RSP holds address 0x7ffeea685918 and points to the top of the caller stack frame.
    RBP holds address 0x7ffeea685960 and points to the bottom of the caller stack
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: '· After pushq %rbp, the stack holds the following values, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● value 0x7ffeea685960 at address 0x7ffeea685910
  prefs: []
  type: TYPE_NORMAL
- en: ● The caller stack frame, which starts at address 0x7ffeea685918 and extends
    to address 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: RSP holds address 0x7ffeea685910 and points to the value at the top of the stack.
    RBP holds address 0x7ffeea685960 and points to the bottom of the caller stack
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: '· After movq %rsp, %rbp, the stack has the following contents, from top to
    bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● value 0x7ffeea685960 at address 0x7ffeea685910
  prefs: []
  type: TYPE_NORMAL
- en: ● The caller stack frame, which starts at address 0x7ffeea685918 and extends
    to address 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: RSP and RBP both hold address 0x7ffeea685910 and point to the value at the top
    of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: '· After subq $24, %rsp, the stack has the following contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● 24 bytes of unused memory starting at address 0x7ffeea6858f8
  prefs: []
  type: TYPE_NORMAL
- en: ● value 0x7ffeea685960 at address 0x7ffeea685910
  prefs: []
  type: TYPE_NORMAL
- en: ● The caller stack frame, which starts at address 0x7ffeea685918 and extends
    to address 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: RSP holds address 0x7ffeea6858f8 and points to the start of the unused memory.
  prefs: []
  type: TYPE_NORMAL
- en: RBP holds address 0x7ffeea685910 and points to the value just below the unused
    memory, 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter2.xhtml#fig2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Three diagrams show the system state at the beginning of the function and after
    each instruction in the function prologue.
  prefs: []
  type: TYPE_NORMAL
- en: '· At the start of the epilogue, the stack has the following contents, from
    top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● 24 bytes containing local variables, starting at address 0x7ffeea6858f8.
  prefs: []
  type: TYPE_NORMAL
- en: ● value 0x7ffeea685960 at address 0x7ffeea685910
  prefs: []
  type: TYPE_NORMAL
- en: ● The caller stack frame, which starts at address 0x7ffeea685918 and extends
    to address 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: RSP holds address 0x7ffeea6858f8 and points to the start of the memory holding
    local variables.
  prefs: []
  type: TYPE_NORMAL
- en: RBP holds address 0x7ffeea685910 and points to the value just below the local
    variables, 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: '· After movq %rbp, %rsp, the stack has the following contents, from top to
    bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● value 0x7ffeea685960 at address 0x7ffeea685910
  prefs: []
  type: TYPE_NORMAL
- en: ● The caller stack frame, which starts at address 0x7ffeea685918 and extends
    to address 0x7ffeea685960.
  prefs: []
  type: TYPE_NORMAL
- en: RSP and RBP both hold address 0x7ffeea685910 and point to the value 0x7ffeea685960
    at the top of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: · After popq %rbp, the caller stack frame starts at the top of the stack, at
    address 0x7ffeea685918, and extends to address 0x7ffeea685960\. RSP holds address
    0x7ffeea685918 and points to the top of the caller stack frame stack. RBP holds
    address 0x7ffeea685960 and points to the bottom of the caller stack frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter2.xhtml#fig2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: ● The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: ● The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: ● TACKY Generation turns the abstract syntax tree into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '● Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: ● Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: ● Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: ● Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: ● Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter3.xhtml#fig-pg46)'
  prefs: []
  type: TYPE_NORMAL
- en: A tree diagram shows the AST.
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node is +. It has two children.
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node’s first child is 1.
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node’s second child is *. It has two children.
  prefs: []
  type: TYPE_NORMAL
- en: ● The first child is 2.
  prefs: []
  type: TYPE_NORMAL
- en: ● The second child is 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter3.xhtml#fig3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A tree diagram shows the AST.
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node is *. It has two children.
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node’s first child is +. It has two children.
  prefs: []
  type: TYPE_NORMAL
- en: ● The first child is 1.
  prefs: []
  type: TYPE_NORMAL
- en: ● The second child is 2.
  prefs: []
  type: TYPE_NORMAL
- en: ● The root node’s second child is 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter3.xhtml#fig3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. TACKY Generation turns the abstract syntax tree into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter4.xhtml#fig-pg70)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler, including one new stage.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis (a new stage) turns the AST into a transformed AST. It
    has one step:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Variable resolution
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter5.xhtml#fig-pg92)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has one step:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Variable resolution
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter6.xhtml#fig-pg116)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has one step:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Variable resolution
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter7.xhtml#fig-pg130)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler, including one new step in the
    semantic analysis stage.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Variable resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Loop Labeling (a new step)
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter8.xhtml#fig-pg142)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler, including one new step in the
    semantic analysis stage.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking (a new step)
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter9.xhtml#fig-pg160)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side. The value
    on top of the stack is the saved base address of the prior stack frame. The prior
    stack frame is immediately below this value.'
  prefs: []
  type: TYPE_NORMAL
- en: RSP and RBP point to the saved base address on top of the stack. RDI holds the
    value 15\. RSI, RDX, RCX, R8, R9, and RAX are uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000160 is stored at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The prior stack frame extends from address 0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 15 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. RIP holds the address 0x10000000
    and points to the first instruction, “pushq %rdi”. Instructions and their address
    are given in the following table.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side, as in Figure
    9-1\. Four new items have been pushed onto the stack. These are, from top to bottom:
    the value 7, the value 8, padding, and the value 15\. These are followed by the
    saved base address of the prior stack frame, then the prior stack frame, as before.'
  prefs: []
  type: TYPE_NORMAL
- en: RSP now points to the value 7 on top of the stack. RBP points to the saved base
    address of the prior stack frame, as before. RDI, RSI, RDX, RCX, R8, and R9 hold
    values 1 through 6, and RAX is uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 7 at address 0x70000000000f0
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 8
  prefs: []
  type: TYPE_NORMAL
- en: ○ Padding
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 15
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000160 at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The prior stack frame, which extends from address 0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x70000000000f0 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. RIP holds the address 0x1000000a
    and points to the eleventh instruction, “call fun”. Instructions and their address
    are given in the following table.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side, as in Figure
    9-2\. One new value has been pushed onto the stack: 0x1000000b, the address of
    the assembly instruction just after the call instruction. RSP points to this new
    value. The remaining registers and stack contents are unchanged from Figure 9-2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x1000000b at address 0x70000000000e8
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 7 at address 0x70000000000f0
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 8
  prefs: []
  type: TYPE_NORMAL
- en: ○ Padding
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 15
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000160 at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The prior stack frame, which extends from address 0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x70000000000e8 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. These instructions are grayed
    out in this diagram.'
  prefs: []
  type: TYPE_NORMAL
- en: The assembly instructions for fun, from Listing 9-26, are stored in memory starting
    at address 0x10000100\. RIP holds the address 0x10000100 and points to the first
    instruction in fun, “pushq %rbp”.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions to call fun and their addresses are given in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: Instructions in the “fun” function and their addresses are given in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000100 | pushq %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000101 | movq %rsp, %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000102 | movl %edi, %eax |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000103 | addl 24(%rbp), %eax |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000104 | movq %rbp, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000105 | popq %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000106 | ret |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side, as in Figure
    9-3\. One new value has been pushed onto the stack: 0x7000000000110, the previous
    value of RBP. RSP and RBP both point to this new value. The remaining registers
    and stack contents are unchanged from Figure 9-3.'
  prefs: []
  type: TYPE_NORMAL
- en: The stack is shaded with three different background colors to indicate different
    regions. The contents of the stack are listed from top to bottom, organized by
    region.
  prefs: []
  type: TYPE_NORMAL
- en: '○ The white region includes one item: value 0x7000000000110 at address 0x70000000000e0'
  prefs: []
  type: TYPE_NORMAL
- en: '○ The light gray region includes six items:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ Value 0x1000000b at address 0x70000000000e8
  prefs: []
  type: TYPE_NORMAL
- en: ■ Value 7 at address 0x70000000000f0
  prefs: []
  type: TYPE_NORMAL
- en: ■ Value 8
  prefs: []
  type: TYPE_NORMAL
- en: ■ Padding
  prefs: []
  type: TYPE_NORMAL
- en: ■ Value 15
  prefs: []
  type: TYPE_NORMAL
- en: ■ Value 0x7000000000160 at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The dark gray region is the prior stack frame, which extends from address
    0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x70000000000e0 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x70000000000e0 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | uninitialized |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. These instructions are grayed
    out in this diagram.'
  prefs: []
  type: TYPE_NORMAL
- en: The assembly instructions for fun, from Listing 9-26, are stored in memory starting
    at address 0x10000100\. RIP holds the address 0x10000102 and points to the third
    instruction in fun, “movl %edi, %eax”.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions to call fun and their addresses are given in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: Instructions in the “fun” function and their addresses are given in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000100 | pushq %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000101 | movq %rsp, %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000102 | movl %edi, %eax |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000103 | addl 24(%rbp), %eax |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000104 | movq %rbp, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000105 | popq %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000106 | ret |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side, as in Figure
    9-4\. The saved value of RBP, 0x7000000000110, has been popped off the top of
    the stack. The stack contents are otherwise unchanged from Figure 9-4.'
  prefs: []
  type: TYPE_NORMAL
- en: RSP points to the value 0x1000000b, the return address, which is currently on
    top of the stack. RBP points to the saved base address of the prior stack frame,
    which is the sixth item from the top of the stack. RAX holds the value 9\. The
    other registers are unchanged from Figure 9-4.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x1000000b at address 0x70000000000e8
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 7 at address 0x70000000000f0
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 8
  prefs: []
  type: TYPE_NORMAL
- en: ○ Padding
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 15
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000160 at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The prior stack frame, which extends from address 0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x70000000000e8 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | 9 |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. These instructions are grayed
    out in this diagram.'
  prefs: []
  type: TYPE_NORMAL
- en: The assembly instructions for fun, from Listing 9-26, are stored in memory starting
    at address 0x10000100\. RIP holds the address 0x10000106 and points to the seventh
    and final instruction in fun, “ret”.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions to call fun and their addresses are given in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: Instructions in the “fun” function and their addresses are given in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000100 | pushq %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000101 | movq %rsp, %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000102 | movl %edi, %eax |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000103 | addl 24(%rbp), %eax |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000104 | movq %rbp, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000105 | popq %rbp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000106 | ret |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-5)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side, as in Figure
    9-5\. The return address, 0x1000000b, has been popped off the top of the stack.
    The stack contents are otherwise unchanged from Figure 9-5.'
  prefs: []
  type: TYPE_NORMAL
- en: RSP points to the top of the stack, which is now the value 7\. The other registers
    are unchanged from Figure 9-5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 7 at address 0x70000000000f0
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 8
  prefs: []
  type: TYPE_NORMAL
- en: ○ Padding
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 15
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000160 at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The prior stack frame, which extends from address 0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x70000000000f0 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | 9 |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. These instructions are no longer
    grayed out. RIP holds the address 0x1000000b and points to the twelfth instruction,
    “addq $24, %rsp”.'
  prefs: []
  type: TYPE_NORMAL
- en: Instructions to call fun and their addresses are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-6)'
  prefs: []
  type: TYPE_NORMAL
- en: '● Left column: The registers and the stack are shown side by side, as in Figure
    9-6\. Four values have been removed from the top of the stack. The saved base
    address of the prior stack frame is now on top of the stack, and the prior stack
    frame is immediately below this value.'
  prefs: []
  type: TYPE_NORMAL
- en: RSP and RBP point to the saved base address on top of the stack. RDI holds the
    value 15\. RAX holds the value 9 and the remaining registers hold the values 2
    through 6, as in Figure 9-6.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000160 at address 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: ○ The prior stack frame, which extends from address 0x7000000000118 to 0x7000000000160
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the registers are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Register | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RSP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RBP | 0x7000000000110 |'
  prefs: []
  type: TYPE_TB
- en: '| RDI | 15 |'
  prefs: []
  type: TYPE_TB
- en: '| RSI | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| RDX | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| RCX | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| R8 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| R9 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| RAX | 9 |'
  prefs: []
  type: TYPE_TB
- en: '● Right column: the assembly instructions to call fun, from Listing 9-27, are
    stored in memory starting at address 0x10000000\. RIP holds the address 0x1000000d
    and points to the unspecified instruction just after “popq %rdi”.'
  prefs: []
  type: TYPE_NORMAL
- en: Instructions to call fun and their addresses are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruction Addresses | Instructions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000000 | pushq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000001 | subq $8, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000002 | movl $1, %edi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000003 | movl $2, %esi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000004 | movl $3, %edx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000005 | movl $4, %ecx |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000006 | movl $5, %r8d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000007 | movl $6, %r9d |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000008 | pushq $8 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10000009 | pushq $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000a | call fun |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000b | addq $24, %rsp |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000c | popq %rdi |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1000000d | ... |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter9.xhtml#fig9-7)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter10.xhtml#fig-pg206)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter11.xhtml#fig-pg242)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter12.xhtml#fig-pg272)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig-pg294)'
  prefs: []
  type: TYPE_NORMAL
- en: A diagram shows the three fields in the double-precision format.
  prefs: []
  type: TYPE_NORMAL
- en: ● The fraction is 52 bits, bits 0 through 51.
  prefs: []
  type: TYPE_NORMAL
- en: ● The exponent is 11 bits, bits 62 through 52.
  prefs: []
  type: TYPE_NORMAL
- en: ● The sign is 1 bit, bit 63.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The diagram shows the contents of the general-purpose and floating-point registers.
    Here their contents are presented in two lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'General-purpose registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '● RDI: i1'
  prefs: []
  type: TYPE_NORMAL
- en: '● RSI: i2'
  prefs: []
  type: TYPE_NORMAL
- en: '● RDX: i3'
  prefs: []
  type: TYPE_NORMAL
- en: '● RCX: i4'
  prefs: []
  type: TYPE_NORMAL
- en: '● R8: i5'
  prefs: []
  type: TYPE_NORMAL
- en: '● R9: unused'
  prefs: []
  type: TYPE_NORMAL
- en: 'Floating-point registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM0: d1'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM1: d2'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM2: d3'
  prefs: []
  type: TYPE_NORMAL
- en: ● XMM3 through XMM7 are unused.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The diagram shows the contents of the general-purpose registers, the floating-point
    registers, and the stack. Here their contents are presented in three lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'General-purpose registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '● RDI: i1'
  prefs: []
  type: TYPE_NORMAL
- en: '● RSI: i2'
  prefs: []
  type: TYPE_NORMAL
- en: '● RDX: i3'
  prefs: []
  type: TYPE_NORMAL
- en: '● RCX: i4'
  prefs: []
  type: TYPE_NORMAL
- en: '● R8: i5'
  prefs: []
  type: TYPE_NORMAL
- en: '● R9: i6'
  prefs: []
  type: TYPE_NORMAL
- en: 'Floating-point registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM0: d1'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM1: d2'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM2: d3'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM3: d4'
  prefs: []
  type: TYPE_NORMAL
- en: ● XMM4 through XMM7 are unused.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● i7
  prefs: []
  type: TYPE_NORMAL
- en: ● i8
  prefs: []
  type: TYPE_NORMAL
- en: ● Caller stack frame
  prefs: []
  type: TYPE_NORMAL
- en: RSP points to i7 at the top of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The diagram shows the contents of the general-purpose registers, the floating-point
    registers, and the stack. Here their contents are presented in three lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'General-purpose registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '● RDI: i1'
  prefs: []
  type: TYPE_NORMAL
- en: '● RSI: i2'
  prefs: []
  type: TYPE_NORMAL
- en: '● RDX: i3'
  prefs: []
  type: TYPE_NORMAL
- en: '● RCX: i4'
  prefs: []
  type: TYPE_NORMAL
- en: '● R8: i5'
  prefs: []
  type: TYPE_NORMAL
- en: '● R9: i6'
  prefs: []
  type: TYPE_NORMAL
- en: 'Floating-point registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM0: d1'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM1: d2'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM2: d3'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM3: d4'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM4: d5'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM5: d6'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM6: d7'
  prefs: []
  type: TYPE_NORMAL
- en: '● XMM7: d8'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● d9
  prefs: []
  type: TYPE_NORMAL
- en: ● d10
  prefs: []
  type: TYPE_NORMAL
- en: ● i7
  prefs: []
  type: TYPE_NORMAL
- en: ● d11
  prefs: []
  type: TYPE_NORMAL
- en: ● i8
  prefs: []
  type: TYPE_NORMAL
- en: ● i9
  prefs: []
  type: TYPE_NORMAL
- en: ● Caller stack frame
  prefs: []
  type: TYPE_NORMAL
- en: RSP points to d9 at the top of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig13-4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A number line illustrates the correct and incorrect rounding of 4,611,686,018,427,388,416.5
    to the nearest double. The number line includes four markings:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. 4,611,686,018,427,387,904.0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. 4,611,686,018,427,388,416
  prefs: []
  type: TYPE_NORMAL
- en: 3\. 4,611,686,018,427,388,416.5
  prefs: []
  type: TYPE_NORMAL
- en: 4\. 4,611,686,018,427,388,928.0.
  prefs: []
  type: TYPE_NORMAL
- en: A dotted arrow goes from 4,611,686,018,427,388,416.5, the original value, up
    to 4,611,686,018,427,388,928.0.
  prefs: []
  type: TYPE_NORMAL
- en: A solid arrow goes from 4,611,686,018,427,388,416.5 down to 4,611,686,018,427,388,416,
    and a second solid arrow goes from there down to 4,611,686,018,427,387,904.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig13-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Four number lines show different cases of rounding to odd. Each number line
    starts at 4,611,686,018,427,387,904.0 and ends at 4,611,686,018,427,388,928.0\.
    Each number line has labels at increments of 0.5 from 4,611,686,018,427,388,414.5
    to 4,611,686,018,427,388,417.
  prefs: []
  type: TYPE_NORMAL
- en: ● In the first case, we round from 4,611,686,018,427,388,416.5 up to 4,611,686,018,427,388,417,
    then from there up to 4,611,686,018,427,388,928.0.
  prefs: []
  type: TYPE_NORMAL
- en: ● In the second case, we round only once, from 4,611,686,018,427,388,416 down
    to 4,611,686,018,427,387,904.0.
  prefs: []
  type: TYPE_NORMAL
- en: ● In the third case, we round from 4,611,686,018,427,388,415.5 down to 4,611,686,018,427,388,415,
    then from there down to 4,611,686,018,427,387,904.0.
  prefs: []
  type: TYPE_NORMAL
- en: ● In the fourth case, we round from 4,611,686,018,427,388,414.5 up to 4,611,686,018,427,388,415,
    then from there down to 4,611,686,018,427,387,904.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter13.xhtml#fig13-6)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudoregisters
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter14.xhtml#fig-pg346)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● Value 0 at address 0x7ffeee67b938 (variable x)
  prefs: []
  type: TYPE_NORMAL
- en: ● Value 0x7ffeee67b938 at address 0x7ffeee67b940 (variable ptr)
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter14.xhtml#fig14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● Value 4 at address 0x7ffeee67b938 (variable x)
  prefs: []
  type: TYPE_NORMAL
- en: ● Value 0x7ffeee67b938 at address 0x7ffeee67b940 (variable ptr)
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter14.xhtml#fig14-2)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudo-operands
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter15.xhtml#fig-pg382)'
  prefs: []
  type: TYPE_NORMAL
- en: The contents of memory are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Memory Address | Memory Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0x10 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x14 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x18 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x1c | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x20 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 0x24 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter15.xhtml#fig15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudo-operands
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter16.xhtml#fig-pg422)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudo-operands
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter17.xhtml#fig-pg456)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Assembly generation turns TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudo-operands
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig-pg484)'
  prefs: []
  type: TYPE_NORMAL
- en: The positions of the members and padding in the structure are given as a list.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 0 through 3 contain member1.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 4 through 7 contain padding.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 8 through 15 contain member2.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 16 through 18 contain array. Byte 16 contains array element 0, byte
    17 contains array element 1, and byte 18 contains array element 2.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 19 through 23 contain padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig18-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Bytes 0 through 7 are the first eightbyte. Bytes 8 through 11 are the second
    eightbyte. The positions of the members and padding in the structure are given
    as a list.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 0 through 3 contain i.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 4 through 11 contain arr. Byte 4 contains element 0 of arr, byte 5 contains
    element 1 of arr, and so on, up to byte 11, which contains element 7 of arr.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig18-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Bytes 0 through 7 are the first eightbyte. Bytes 8 through 11 are the second
    eightbyte. The positions of the members and padding in the structure are given
    as a list.
  prefs: []
  type: TYPE_NORMAL
- en: ● Byte 0 contains ch1.
  prefs: []
  type: TYPE_NORMAL
- en: ● Bytes 1 through 3 contain padding.
  prefs: []
  type: TYPE_NORMAL
- en: '● Bytes 4 through 11 contain nested. Within nested:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Bytes 4 through 7 contain i.
  prefs: []
  type: TYPE_NORMAL
- en: ○ Byte 8 contains ch2.
  prefs: []
  type: TYPE_NORMAL
- en: ○ Bytes 9 through 11 contain padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig18-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Four diagrams show the contents of the stack at different points in the function
    call from Listing 18-46\. In these diagrams, the stack is shaded with different
    background colors to indicate three regions. First, the caller’s stack frame from
    before the function call. Second: values the caller pushes onto the stack during
    the function call. Third: the callee’s stack frame. In each diagram, the contents
    of the stack are listed from top to bottom, organized by region (not every region
    is present in every diagram).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The four diagrams are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '● Before parameter passing, the stack has the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ Caller’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ A local variable at address −16(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ Another local variable at address −8(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ The old value of RBP at address 0(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '● After the first pushq instruction, the stack has the following contents,
    from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ Pushed during call:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ arg.b at address −24(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '○ Caller’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ A local variable at address −16(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ Another local variable at address −8(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ The old value of RBP at address 0(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '● After the second pushq instruction, the stack has the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ Pushed during call:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ arg.a at address −32(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ arg.b at address −24(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '○ Caller’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ A local variable at address −16(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ Another local variable at address −8(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ The old value of RBP at address 0(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '● After the callee prologue, RBP points to the top of the stack. Note that
    this changes the addresses of existing items relative to RBP, even though their
    absolute addresses are the same. The stack has the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ Callee’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ caller RBP at address 0(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '○ Pushed during call:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ return address at 8(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ arg.a at address 16(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: ■ arg.b at address 24(%rbp)
  prefs: []
  type: TYPE_NORMAL
- en: '○ Caller’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ■ A local variable
  prefs: []
  type: TYPE_NORMAL
- en: ■ Another local variable
  prefs: []
  type: TYPE_NORMAL
- en: ■ The old value of RBP
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig18-4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the stack are listed from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● 8 bytes of padding
  prefs: []
  type: TYPE_NORMAL
- en: ● 24 bytes (or 3 eight-byte stack slots) of uninitialized memory, reserved for
    caller_result.
  prefs: []
  type: TYPE_NORMAL
- en: ● The previous RBP
  prefs: []
  type: TYPE_NORMAL
- en: ● The prior stack frame
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the registers are summarized in the text below this figure.
    The following list describes them in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: ● RSP holds the address 0x70000000000f0 and points to the padding on top of
    the stack.
  prefs: []
  type: TYPE_NORMAL
- en: ● RDI holds the address 0x70000000000f8 and points to the start of the memory
    reserved for caller_result
  prefs: []
  type: TYPE_NORMAL
- en: ● RBP holds the address 0x7000000000110 and points to the previous RBP
  prefs: []
  type: TYPE_NORMAL
- en: ● RSI holds the value 10.
  prefs: []
  type: TYPE_NORMAL
- en: ● The remaining registers (RDX, RCX, R8, R9, and RAX) are uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig18-5)'
  prefs: []
  type: TYPE_NORMAL
- en: The stack is shaded with different background colors to indicate different stack
    frames.
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the stack are listed from top to bottom, organized by stack
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: '● Callee’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ 8 bytes of padding
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 1
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 10
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0x7000000000110
  prefs: []
  type: TYPE_NORMAL
- en: The part of the callee’s stack frame holding values 0, 1, and 10 is labeled
    callee_result.
  prefs: []
  type: TYPE_NORMAL
- en: '● Caller’s stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ Return address
  prefs: []
  type: TYPE_NORMAL
- en: ○ 8 bytes of padding
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 0
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 1
  prefs: []
  type: TYPE_NORMAL
- en: ○ Value 10
  prefs: []
  type: TYPE_NORMAL
- en: ○ Previous RBP
  prefs: []
  type: TYPE_NORMAL
- en: The part of the caller’s stack frame holding values 0, 1, and 10 is labeled
    caller_result.
  prefs: []
  type: TYPE_NORMAL
- en: ● Prior stack frame, with no individual items shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the registers are given in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● RSP holds the address 0x70000000000c0 and points to the padding at the top
    of the stack
  prefs: []
  type: TYPE_NORMAL
- en: ● RBP holds the address 0x70000000000e0 and points to the value x7000000000110
    at the bottom of the callee’s stack frame
  prefs: []
  type: TYPE_NORMAL
- en: ● RAX holds the value 0x70000000000f8 and points to the value 0 in the caller’s
    stack frame, which is the first value in caller_result.
  prefs: []
  type: TYPE_NORMAL
- en: ● RDI also holds the value 0x70000000000f8 and points to the value 0 in the
    caller’s stack frame.
  prefs: []
  type: TYPE_NORMAL
- en: ● RSI holds the value 10.
  prefs: []
  type: TYPE_NORMAL
- en: ● The remaining registers (RDX, RCX, R8, R9, and RAX) are uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter18.xhtml#fig18-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Five diagrams show the contents of RDI at each step. Here each diagram is depicted
    as a table, where one cell contains one byte. Table headers indicate which register
    aliases contain each byte. Bytes are listed left to right from most to least significant.
  prefs: []
  type: TYPE_NORMAL
- en: ● After movb x+2(%rip), %dil
  prefs: []
  type: TYPE_NORMAL
- en: '| RDI | RDI and EDI | RDI, EDI, and DIL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00 | 00 | 00 | 00 | 00 | 00 | 00 | 03 |'
  prefs: []
  type: TYPE_TB
- en: ● After shlq $8, %rdi
  prefs: []
  type: TYPE_NORMAL
- en: '| RDI | RDI and EDI | RDI, EDI, and DIL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00 | 00 | 00 | 00 | 00 | 00 | 03 | 00 |'
  prefs: []
  type: TYPE_TB
- en: ● After movb x+1(%rip), %dil
  prefs: []
  type: TYPE_NORMAL
- en: '| RDI | RDI and EDI | RDI, EDI, and DIL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00 | 00 | 00 | 00 | 00 | 00 | 03 | 02 |'
  prefs: []
  type: TYPE_TB
- en: ● After shlq $8, %rdi
  prefs: []
  type: TYPE_NORMAL
- en: '| RDI | RDI and EDI | RDI, EDI, and DIL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00 | 00 | 00 | 00 | 00 | 03 | 02 | 00 |'
  prefs: []
  type: TYPE_TB
- en: ● After movb x (%rip), %dil
  prefs: []
  type: TYPE_NORMAL
- en: '| RDI | RDI and EDI | RDI, EDI, and DIL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00 | 00 | 00 | 00 | 00 | 03 | 02 | 01 |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter18.xhtml#fig18-7)'
  prefs: []
  type: TYPE_NORMAL
- en: The contents of memory are given in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Memory Address | Memory Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| -4(%rbp) | 0x01 |'
  prefs: []
  type: TYPE_TB
- en: '| -3(%rbp) | 0x02 |'
  prefs: []
  type: TYPE_TB
- en: '| -2(%rbp) | 0x03 |'
  prefs: []
  type: TYPE_TB
- en: '| -1(%rbp) | 0x00 |'
  prefs: []
  type: TYPE_TB
- en: '[Return to text](chapter18.xhtml#fig18-8)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler, including a new optimization
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Optimization (a new stage) turns TACKY into optimized TACKY. It has four
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Constant Folding
  prefs: []
  type: TYPE_NORMAL
- en: b. Unreachable Code Elimination
  prefs: []
  type: TYPE_NORMAL
- en: c. Copy Propagation
  prefs: []
  type: TYPE_NORMAL
- en: d. Dead Store Elimination
  prefs: []
  type: TYPE_NORMAL
- en: An arrow leads from each step to the next. Another arrow leads from dead store
    elimination back to constant folding.
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Assembly generation turns optimized TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Replacing Pseudo-operands
  prefs: []
  type: TYPE_NORMAL
- en: c. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig-pg556)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. Basic blocks
    are labeled B0, B1, and so on. We give each node’s contents, then list its outgoing
    edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: 'LoopStart:'
  prefs: []
  type: TYPE_NORMAL
- en: input = get_input()
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(input, ProcessIt)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: Return (-1)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'ProcessIt:'
  prefs: []
  type: TYPE_NORMAL
- en: done = process_input(input)
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(done, LoopStart)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: ● B3
  prefs: []
  type: TYPE_NORMAL
- en: 5\. B3
  prefs: []
  type: TYPE_NORMAL
- en: Return(0)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 6\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: ● ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B0
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: x = 5
  prefs: []
  type: TYPE_NORMAL
- en: Jump(Target)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B2
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: x = my_function()
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B2
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 'Target:'
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: x = foo()
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(arg, End)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'End:'
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(arg, End)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: do_something()
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'End:'
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 6\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(arg, A)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: y = 20
  prefs: []
  type: TYPE_NORMAL
- en: x = y
  prefs: []
  type: TYPE_NORMAL
- en: Jump(End)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● BL2>B3
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'A:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 100
  prefs: []
  type: TYPE_NORMAL
- en: x = y
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B3
  prefs: []
  type: TYPE_NORMAL
- en: 5\. B3
  prefs: []
  type: TYPE_NORMAL
- en: 'End:'
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 6\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: y = foo()
  prefs: []
  type: TYPE_NORMAL
- en: x = y
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(arg, End)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: y = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'End:'
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: y = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: 'Loop:'
  prefs: []
  type: TYPE_NORMAL
- en: x = process(y)
  prefs: []
  type: TYPE_NORMAL
- en: y = 4
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(x, Loop)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then its annotation, and then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: empty set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: y = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: { y = 3 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: 'Loop:'
  prefs: []
  type: TYPE_NORMAL
- en: x = process(y)
  prefs: []
  type: TYPE_NORMAL
- en: y = 4
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(x, Loop)
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: { y = 3, y = 4 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: { y = 3, y = 4 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No annotation. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-8)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then its annotation, and then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: empty set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: y = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: { y = 3 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: 'Loop:'
  prefs: []
  type: TYPE_NORMAL
- en: x = process(y)
  prefs: []
  type: TYPE_NORMAL
- en: y = 4
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(x, Loop)
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: { y = 4 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotation: { y = 4 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No annotation. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-9)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: x = 10
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(arg, A)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: Return(0)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'A:'
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-10)'
  prefs: []
  type: TYPE_NORMAL
- en: Here the nodes in the control-flow graph are presented as a list. We give each
    node’s contents, then list its outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. ENTRY
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B0
  prefs: []
  type: TYPE_NORMAL
- en: 2\. B0
  prefs: []
  type: TYPE_NORMAL
- en: x = 10
  prefs: []
  type: TYPE_NORMAL
- en: JumpIfNotZero(arg, A)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B1
  prefs: []
  type: TYPE_NORMAL
- en: ● B2
  prefs: []
  type: TYPE_NORMAL
- en: 3\. B1
  prefs: []
  type: TYPE_NORMAL
- en: x = f()
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 4\. B2
  prefs: []
  type: TYPE_NORMAL
- en: 'A:'
  prefs: []
  type: TYPE_NORMAL
- en: x = g()
  prefs: []
  type: TYPE_NORMAL
- en: Return(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'Edge list:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EXIT
  prefs: []
  type: TYPE_NORMAL
- en: 5\. EXIT. No outgoing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter19.xhtml#fig19-11)'
  prefs: []
  type: TYPE_NORMAL
- en: A flow chart shows the stages of the compiler, including one new step in the
    assembly generation stage.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The lexer turns program.c into a token list.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The parser turns the token list into an abstract syntax tree.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Semantic analysis turns the AST into a transformed AST. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Identifier resolution
  prefs: []
  type: TYPE_NORMAL
- en: b. Type checking
  prefs: []
  type: TYPE_NORMAL
- en: c. Loop Labeling
  prefs: []
  type: TYPE_NORMAL
- en: 4\. TACKY Generation turns the transformed AST into TACKY.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Optimization turns TACKY into optimized TACKY. It has four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Constant Folding
  prefs: []
  type: TYPE_NORMAL
- en: b. Unreachable Code Elimination
  prefs: []
  type: TYPE_NORMAL
- en: c. Copy Propagation
  prefs: []
  type: TYPE_NORMAL
- en: d. Dead Store Elimination
  prefs: []
  type: TYPE_NORMAL
- en: An arrow leads from each step to the next. Another arrow leads from dead store
    elimination back to constant folding.
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Assembly generation turns optimized TACKY into assembly. It has three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Converting TACKY to Assembly
  prefs: []
  type: TYPE_NORMAL
- en: b. Register allocation (a new step)
  prefs: []
  type: TYPE_NORMAL
- en: c. Replacing Pseudo-operands
  prefs: []
  type: TYPE_NORMAL
- en: d. Instruction Fix-Up
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Code emission writes assembly to program.s.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig-pg612)'
  prefs: []
  type: TYPE_NORMAL
- en: An undirected graph with five nodes labeled A through E. Each one is colored
    black, white, or gray. C is in the center. A, B, D, and E are arranged around
    C. A on top, B to the left, D to the right, E on the bottom. The nodes around
    C are connected to form a diamond shape. All four are also connected to C. C is
    black. A and E are white. B and D are gray.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is also presented here as a list of nodes. Each node’s neighbors and
    their colors are listed beneath it.
  prefs: []
  type: TYPE_NORMAL
- en: '● A, white, top. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '● B, gray, left. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, white
  prefs: []
  type: TYPE_NORMAL
- en: '● C, black, center. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, white
  prefs: []
  type: TYPE_NORMAL
- en: '● D, gray, right. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, white
  prefs: []
  type: TYPE_NORMAL
- en: '● E, white, bottom. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with seven nodes. Four hard registers: EDI, ESI, EAX, and
    EDX. Three pseudoregisters: a, b, and tmp.'
  prefs: []
  type: TYPE_NORMAL
- en: All nodes except tmp are arranged in a circle. a and b are on the right side
    of the circle. tmp is to the right of b. The text after the figure summarizes
    the edges.
  prefs: []
  type: TYPE_NORMAL
- en: Here the graph is presented as a list of nodes. Each node’s neighbors are listed
    beneath it.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ b
  prefs: []
  type: TYPE_NORMAL
- en: '● EDX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ b
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ b
  prefs: []
  type: TYPE_NORMAL
- en: '● b. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp
  prefs: []
  type: TYPE_NORMAL
- en: '● tmp. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ b
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Three diagrams. Each shows the graph from Figure 20-2 with nodes colored. The
    colors are black, white, gray, and striped. For each graph, we summarize the nodes’
    colors, then list each node, its color, and its neighbors’ colors.
  prefs: []
  type: TYPE_NORMAL
- en: ● First graph. EDI and b are striped. ESI is black. EAX and tmp are white. EDX
    and a are gray.
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● a, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● b, striped
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDX, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● b, striped
  prefs: []
  type: TYPE_NORMAL
- en: '○ a, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● b, striped
  prefs: []
  type: TYPE_NORMAL
- en: '○ b, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● a, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● b, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● Second graph. EDI is black. ESI and b are gray. EAX, a, and tmp are striped.
    EDX is white.
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● a, striped
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● b, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDX, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, black
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● b, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ a, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● b, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ b, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, white
  prefs: []
  type: TYPE_NORMAL
- en: ● a, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp, striped
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● b, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● Third graph. EDI and a are gray. ESI and b are white. EAX is striped. EDX
    and tmp are black.
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, black
  prefs: []
  type: TYPE_NORMAL
- en: ● a, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, black
  prefs: []
  type: TYPE_NORMAL
- en: ● b, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDX, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● b, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ a, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI, white
  prefs: []
  type: TYPE_NORMAL
- en: ● b, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ b, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ● EDX, black
  prefs: []
  type: TYPE_NORMAL
- en: ● a, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● b, white
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with seven nodes. The four hard registers: EDI, ESI, EAX,
    and EDX. The three pseudoregisters: arg1, arg2, and tmp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The nodes are in four rows. Top row: EDI and ESI. Second row: EAX and EDX.
    Third row: arg1 and arg2\. Bottom row: tmp.'
  prefs: []
  type: TYPE_NORMAL
- en: All four hard registers are neighbors. EAX and EDX both neighbor all three pseudoregisters.
    All three pseudoregisters are neighbors. arg1 also neighbors ESI.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is also presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp
  prefs: []
  type: TYPE_NORMAL
- en: '● EDX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp
  prefs: []
  type: TYPE_NORMAL
- en: ● arg1
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp
  prefs: []
  type: TYPE_NORMAL
- en: ● arg2
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The graph from Figure 20-4 with tmp removed. Each remaining node has a color.
    EDI and arg1 are white. ESI and arg2 are gray. EAX is black. EDX is striped.
  prefs: []
  type: TYPE_NORMAL
- en: All four hard registers are neighbors. EAX and EDX both neighbor arg1 and arg2\.
    arg1 and arg2 are neighbors. arg1 also neighbors ESI.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is also presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX, striped
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1, white
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2, gray
  prefs: []
  type: TYPE_NORMAL
- en: '● EDX, striped. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● arg1, white
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg2, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● arg2, gray
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX, black
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDX, striped
  prefs: []
  type: TYPE_NORMAL
- en: ○ arg1, white
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-5)'
  prefs: []
  type: TYPE_NORMAL
- en: The graph has twelve nodes arranged in a circle, one for each register. Each
    register interferes with the other 11.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-6)'
  prefs: []
  type: TYPE_NORMAL
- en: The graph has eight nodes labeled A through H. They are arranged in order in
    three rows. The first row contains A and B, the second contains C, D, and E, and
    the third contains F, G, and H.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● A. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: '● B. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: '● C. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: '● D. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: '● E. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: '● F. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: '● G. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ H
  prefs: []
  type: TYPE_NORMAL
- en: '● H. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-7)'
  prefs: []
  type: TYPE_NORMAL
- en: All nodes and edges in the graph are in the same position as Figure 20-7\. Pruned
    nodes are circles with dashed borders. Edges where either endpoint has been pruned
    are dashed lines. Remaining nodes are circles with solid borders. Remaining edges
    are solid lines.
  prefs: []
  type: TYPE_NORMAL
- en: A, D, E, and G remain in the graph. In the remaining graph, A, D, and E are
    all neighbors. D and E also neighbor G.
  prefs: []
  type: TYPE_NORMAL
- en: The complete graph, including pruned nodes, is presented as a list.
  prefs: []
  type: TYPE_NORMAL
- en: '● A, remaining. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● D, remaining. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● E, remaining. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● G, remaining. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ H, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '● H, pruned. Neighbor:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, remaining
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● H
  prefs: []
  type: TYPE_NORMAL
- en: ● F
  prefs: []
  type: TYPE_NORMAL
- en: ● C
  prefs: []
  type: TYPE_NORMAL
- en: ● B
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-8)'
  prefs: []
  type: TYPE_NORMAL
- en: All nodes and edges in the graph are in the same position as Figure 20-7\. Pruned
    nodes have dashed borders. Edges where either endpoint has been pruned are dashed
    lines. Remaining nodes have solid borders. Remaining edges are solid lines.
  prefs: []
  type: TYPE_NORMAL
- en: D and E remain in the graph. They are neighbors.
  prefs: []
  type: TYPE_NORMAL
- en: The complete graph, including pruned nodes, is presented as a list.
  prefs: []
  type: TYPE_NORMAL
- en: '● A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: '● D, remaining. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '● E, remaining. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '● F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '● G, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ E, remaining
  prefs: []
  type: TYPE_NORMAL
- en: ○ F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ○ H, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '● H, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G
  prefs: []
  type: TYPE_NORMAL
- en: ● A
  prefs: []
  type: TYPE_NORMAL
- en: ● H
  prefs: []
  type: TYPE_NORMAL
- en: ● F
  prefs: []
  type: TYPE_NORMAL
- en: ● C
  prefs: []
  type: TYPE_NORMAL
- en: ● B
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-9)'
  prefs: []
  type: TYPE_NORMAL
- en: All nodes and edges in the graph are in the same position as Figure 20-7\. All
    nodes have dashed borders and all edges are dashed lines, indicating that they
    have been pruned from the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ● E
  prefs: []
  type: TYPE_NORMAL
- en: ● D
  prefs: []
  type: TYPE_NORMAL
- en: ● G
  prefs: []
  type: TYPE_NORMAL
- en: ● A
  prefs: []
  type: TYPE_NORMAL
- en: ● H
  prefs: []
  type: TYPE_NORMAL
- en: ● F
  prefs: []
  type: TYPE_NORMAL
- en: ● C
  prefs: []
  type: TYPE_NORMAL
- en: ● B
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-10)'
  prefs: []
  type: TYPE_NORMAL
- en: Nine diagrams are shown. Each shows the graph and the stack. In each diagram,
    all nodes and edges in the graph are in the same position as Figure 20-7\. Pruned
    nodes have dashed borders. Edges where either endpoint has been pruned are dashed
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes that have been put back are colored white, black, or gray, and have solid
    borders. Edges whose endpoints have both been put back are solid lines. For each
    diagram, we give a summary. Then we describe the full graph, including pruned
    nodes. Then we describe the stack.
  prefs: []
  type: TYPE_NORMAL
- en: ● First diagram. The graph is identical to Figure 20-10\. All nodes have been
    pruned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ H
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ● Second diagram. E is popped off the stack. E is the only node in the graph.
    It is white.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● H, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ H
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: '● Third diagram. D is popped off the stack. The graph has two nodes: D is gray
    and E is white. They are neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● H, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, pruned
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ G
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ H
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: '● Fourth diagram. G is popped off the stack. The graph has three nodes: G is
    black, D is gray, and E is white. They are all neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● H, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ H
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ● Fifth diagram. A is popped off the stack and added to the graph. A is black.
    It neighbors D, gray, and E, white. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● H, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ H
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ● Sixth diagram. H is popped off the stack and added to the graph. H is white.
    It neighbors G, black. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● H, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ● Seventh diagram. F is popped off the stack and added to the graph. It is white.
    Its neighbors are D, gray, and G, black. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: ● H, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ● Eighth diagram. C is popped off the stack and added to the graph. It is white.
    Its neighbors are A, black, and D, gray. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: ● H, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ● Ninth diagram. B is popped off the stack and added to the graph. It is gray.
    Its neighbors are A, black, and E, white. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● C, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, black
  prefs: []
  type: TYPE_NORMAL
- en: ● B, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ G, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● D, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● E, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: ● H, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ H, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● G, black
  prefs: []
  type: TYPE_NORMAL
- en: The stack is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-11)'
  prefs: []
  type: TYPE_NORMAL
- en: An undirected graph with six nodes labeled A through F. A, B, D, and E are arranged
    around C.
  prefs: []
  type: TYPE_NORMAL
- en: A on top, B to the left, D to the right, E on the bottom. F is below E. The
    four nodes around C are connected to form a diamond shape. All four are also connected
    to C. F is connected to B, D, and E.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a list of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '● A. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: '● B. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: '● C. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: '● D. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: '● E. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: '● F. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-12)'
  prefs: []
  type: TYPE_NORMAL
- en: Six diagrams are shown. Each shows the graph and the stack. In each diagram,
    all nodes and edges in the graph are in the same position as Figure 20-12.
  prefs: []
  type: TYPE_NORMAL
- en: Pruned nodes have dashed borders. Edges where either endpoint has been pruned
    are dashed lines. Nodes that have been put back are colored white, black, or gray,
    and have solid borders. Edges whose endpoints have both been put back are solid
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: For each diagram, we give a summary. Then we describe the full graph, including
    pruned nodes. Then we describe the stack.
  prefs: []
  type: TYPE_NORMAL
- en: ● First diagram. All nodes have dashed borders and all edges are dashed lines,
    indicating that they have been pruned from the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Second diagram. F is popped off the stack. It is the only node in the graph.
    It is white.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: '● Third diagram. E is popped off the stack. The graph has two nodes: E, gray,
    and F, white. They are neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: '● Fourth diagram. D is popped off the stack. The graph has three nodes: D,
    black, E, gray, and F, white. They are all neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Fifth diagram. B is popped off the stack and added to the graph. It is black.
    It neighbors E, gray, and F, white. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Sixth diagram. A is popped off the stack and added to the graph. It is white.
    It neighbors B, black, and D, black. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, white
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● F, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-13)'
  prefs: []
  type: TYPE_NORMAL
- en: Seven diagrams are shown. Each shows the graph and the stack. In each graph,
    all nodes and edges are in the same position as in Figure 20-12.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes that have been put back are colored white, black, or gray. Pruned and
    colored nodes are depicted the same way as in Figure 20-13.
  prefs: []
  type: TYPE_NORMAL
- en: For each diagram, we give a summary. Then we describe the full graph, including
    pruned nodes. Then we describe the stack.
  prefs: []
  type: TYPE_NORMAL
- en: ● First diagram. All nodes have dashed borders and all edges are dashed lines,
    indicating that they have been pruned from the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ D
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Second diagram. D is popped off the stack. It is the only node in the graph.
    It is white.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, pruned
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ E
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: '● Third diagram. E is popped off the stack. The graph has two nodes: E, gray,
    and D, white. They are neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, pruned
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ F
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: '● Fourth diagram. F is popped off the stack. The graph has three nodes: F,
    black, E, gray, and D, white. They are all neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ B
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Fifth diagram. B is popped off the stack and added to the graph. It is white.
    It neighbors E, gray, and F, black. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ A
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Sixth diagram. A is popped off the stack and added to the graph. It is gray.
    It neighbors B, white, and D, white. No other changes from the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, pruned. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, pruned
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack contents, from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ C
  prefs: []
  type: TYPE_NORMAL
- en: ● Seventh diagram. C is popped off the stack and added to the graph. It is black.
    It neighbors A (gray), B (white), D (white), and E (gray). No other changes from
    the previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full graph, as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ A, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: '○ B, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● C, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ C, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: '○ D, white. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● A, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● C, black
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ E, gray. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● C, black
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● F, black
  prefs: []
  type: TYPE_NORMAL
- en: '○ F, black. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● B, white
  prefs: []
  type: TYPE_NORMAL
- en: ● D, white
  prefs: []
  type: TYPE_NORMAL
- en: ● E, gray
  prefs: []
  type: TYPE_NORMAL
- en: The stack is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-14)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with four nodes: EDI, EAX, tmp, and arg. EDI neighbors
    EAX. EAX also neighbors tmp. tmp also neighbors arg.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-15)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with three nodes: EDI, EAX, and tmp. All three nodes are
    neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-16)'
  prefs: []
  type: TYPE_NORMAL
- en: Two diagrams show the interference graph before and after coalescing.
  prefs: []
  type: TYPE_NORMAL
- en: '● Original interference graph. An undirected graph with seven nodes. Three
    hard registers: EDI, ESI, and EAX. Four pseudoregisters: tmp1, tmp2, tmp3, and
    tmp4.'
  prefs: []
  type: TYPE_NORMAL
- en: On the left, EDI, ESI, and EAX are arranged in a triangle. To their right, tmp1,
    tmp2, tmp3, and tmp4 are arranged in a square. All three hard registers are neighbors.
    EDI also neighbors tmp1\. tmp1 also neighbors tmp2\. tmp2 also neighbors tmp3\.
    tmp3 also neighbors tmp4.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a list of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp1
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp1\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp2
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp2\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp1
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp3
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp3\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp2
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp4
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp4\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp3
  prefs: []
  type: TYPE_NORMAL
- en: ● After coalescing tmp2 into EAX. The previous graph with three changes. First,
    tmp2 was removed. Second, an edge was added from tmp1 to EAX. Third, an edge was
    added from tmp3 to EAX.
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph is presented as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp1
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp1
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp3
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp1\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp3\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp4
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp4\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp3
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-17)'
  prefs: []
  type: TYPE_NORMAL
- en: Two diagrams show the interference graph before and after coalescing.
  prefs: []
  type: TYPE_NORMAL
- en: '● Original interference graph. An undirected graph with five nodes. Three hard
    registers: EDI, ESI, and EAX. Two pseudoregisters: tmp1 and tmp2\. On the left,
    EDI, ESI, and EAX are arranged in a triangle. They are all neighbors. On the right,
    tmp1 is above tmp2\. They are neighbors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a list of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp1\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp2
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp2\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp1
  prefs: []
  type: TYPE_NORMAL
- en: ● After coalescing tmp1 into EDI. The previous graph with two changes. First,
    tmp1 was removed. Second, an edge was added from tmp2 to EDI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph is presented as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '○ EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: ● tmp2
  prefs: []
  type: TYPE_NORMAL
- en: '○ ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● EAX
  prefs: []
  type: TYPE_NORMAL
- en: '○ EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: ● ESI
  prefs: []
  type: TYPE_NORMAL
- en: '○ tmp2\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ● EDI
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-18)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with seven nodes. Three hard registers: EDI, ESI, EAX.
    Four pseudoregisters: a, x, y, and z.'
  prefs: []
  type: TYPE_NORMAL
- en: EAX, ESI, and EDI are arranged in a triangle. To their right, x, y and z are
    arranged in a triangle. a is at the top of the diagram.
  prefs: []
  type: TYPE_NORMAL
- en: All three hard registers are neighbors. z neighbors x and y. y also neighbors
    EDI. x, ESI, and a are all neighbors.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a list of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: '● x. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● y. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● z. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-19)'
  prefs: []
  type: TYPE_NORMAL
- en: The graph in Figure 20-19 with three changes. First, x has been removed. Second,
    an edge has been added from a to y. Third, an edge has been added from ESI to
    y.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● y. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● z. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-20)'
  prefs: []
  type: TYPE_NORMAL
- en: The graph is presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: '● x. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● y. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● z. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-21)'
  prefs: []
  type: TYPE_NORMAL
- en: The graph from Figure 20-21 with three changes. First, x has been removed. Second,
    an edge has been added from a to y. Third, an edge has been added from ESI to
    y.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● y. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● z. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-22)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with five nodes. Three hard registers: EDI, ESI, and EAX.
    Two pseudoregisters: tmp1 and tmp2\. EDI, ESI, EAX, and tmp1 are all neighbors.
    tmp2 neighbors ESI and EAX.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a list of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp1
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp1
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp2
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp1
  prefs: []
  type: TYPE_NORMAL
- en: ○ tmp2
  prefs: []
  type: TYPE_NORMAL
- en: '● tmp1\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: '● tmp2\. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig20-23)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph with ten nodes. Three hard registers: EDI, ESI, EAX. Seven
    pseudoregisters: a, b, c, d, x, y, and z.'
  prefs: []
  type: TYPE_NORMAL
- en: EAX, ESI, and EDI are arranged in a triangle. To their right, x, y, and z are
    arranged in a triangle. At the top of the diagram, a is surrounded by b, c, and
    d.
  prefs: []
  type: TYPE_NORMAL
- en: All three hard registers are neighbors. z neighbors x and y. y also neighbors
    EDI. x, ESI, and a are all neighbors. a also neighbors b, c, and d.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a list of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ b
  prefs: []
  type: TYPE_NORMAL
- en: ○ c
  prefs: []
  type: TYPE_NORMAL
- en: ○ d
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: '● b. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● c. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● d. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● x. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● y. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● z. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ x
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig-pg662-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The previous graph with three changes. First, x has been removed. Second, an
    edge has been added from a to y. Third, an edge has been added from ESI to y.
  prefs: []
  type: TYPE_NORMAL
- en: The graph is presented as a list of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '● EDI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● ESI. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ EAX
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● EAX. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: '● a. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ b
  prefs: []
  type: TYPE_NORMAL
- en: ○ c
  prefs: []
  type: TYPE_NORMAL
- en: ○ d
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '● b. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● c. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● d. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: '● y. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ EDI
  prefs: []
  type: TYPE_NORMAL
- en: ○ ESI
  prefs: []
  type: TYPE_NORMAL
- en: ○ a
  prefs: []
  type: TYPE_NORMAL
- en: ○ z
  prefs: []
  type: TYPE_NORMAL
- en: '● z. Neighbors:'
  prefs: []
  type: TYPE_NORMAL
- en: ○ y
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](chapter20.xhtml#fig-pg662-2)'
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of a terminal. The top window shows the message “Register Values
    Unavailable.” The middle window displays the first ten instructions from Listing
    A-1 and their memory addresses. The bottom window shows the “layout reg” command
    that was just entered.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](appendix-A.xhtml#figA-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of a terminal. The top window shows the values of the eight-byte
    general-purpose registers and a few other registers, displayed in decimal and
    hexadecimal. The middle window displays the first ten instructions from Listing
    A-1 and their memory addresses. The third instruction, “sub $0x10, %rsp”, is highlighted.
    The bottom window shows the previous two commands and their output.
  prefs: []
  type: TYPE_NORMAL
- en: '[Return to text](appendix-A.xhtml#figA-2)'
  prefs: []
  type: TYPE_NORMAL
