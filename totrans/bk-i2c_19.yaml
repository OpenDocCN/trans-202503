- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MCP4725 Digital-to-Analog Converter
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 14 described an ADC, the ADS1*x*15\. This chapter describes the converse
    function: the DAC. Although DACs appear less frequently in systems than ADCs,
    understanding how to program them is still essential. This chapter describes the
    MCP4725 DAC used in software examples throughout this book, filling in several
    details that were unnecessary for coding examples up to this point.'
  prefs: []
  type: TYPE_NORMAL
- en: The MCP4725 DAC is a common device for which both Adafruit and SparkFun produce
    breakout boards. It is a single 12-bit converter, translating integers in the
    range of 0 to 4095 to a voltage between 0 V and Vdd, the power supply pin on the
    DAC.
  prefs: []
  type: TYPE_NORMAL
- en: This DAC works with a power supply ranging from 2.7 V to 5.5 V. That means that
    its output will also be in this range. With a 3.3-V power supply, this corresponds
    to 0.81 mV per unit; with a 5-V power supply, this is 1.22 mV per unit.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to produce some other voltage range, you can always take the output
    from this DAC and feed it into an opamp circuit, as in [Figure 15-1](#figure15-1).
    That circuit will translate the output from the DAC to any voltage in the range
    ±10 V (adjustable).
  prefs: []
  type: TYPE_NORMAL
- en: Since the majority of this book has used the MCP4725 in its example code, I’ll
    spare you the redundancy of providing new demonstrations here. Check out Listings
    8-2 or 8-3 in Chapter 8 to review some earlier examples.
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 MCP4275 Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MCP4725 supports a single address pin allowing you to select one of two
    addresses. Internally, the MCP4725 actually supports 3 address bits; however,
    2 of those bits are hard-coded during manufacturing. You can order up to four
    different parts with base address 0x60, 0x62, 0x64, or 0x66\. The address pin
    on the MCP4725 allows further differentiation between addresses 0x60 and 0x61,
    0x62 and 0x63, 0x64 and 0x65, and 0x66 and 0x67.
  prefs: []
  type: TYPE_NORMAL
- en: The MCP4725 includes an on-board, 14-bit EEPROM from which it loads a power-down
    mode and initial output setting on power-up/reset. This allows you to force the
    DAC output to a particular voltage on startup. To see why the default shouldn’t
    just be 0 V, imagine you’re driving an opamp circuit like that in [Figure 15-1](#figure15-1)
    (copied from Figure 14-1) calibrated to produce an output of −10 V to +10 V based
    on an input of 0 V to 5 V. This means the DAC would have to output +2.5 V to yield
    0 V on the opamp circuit’s output, which would be the appropriate power-up reset
    voltage. Of course, another purpose for the EEPROM is to allow a system to restore
    the DAC voltage to the last power-down value—so, for example, it would disable
    DAC outputs on startup.
  prefs: []
  type: TYPE_NORMAL
- en: The MCP4725 is capable of running at standard speed (100 kHz), fast speed (400
    kHz), or high speed (up to 3.4 MHz). If your CPU or SBC supports high-speed operation,
    this will allow you to update waveforms at nearly 200 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MCP4725 is easy to program, which is why this book has used it in most
    of the generic examples. There are three basic command formats:'
  prefs: []
  type: TYPE_NORMAL
- en: A Fast Write command with three bus transactions (extensible)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Write command with four bus transactions (extensible)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Read command with six bus transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](image_fi/502468c15/f15001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-1: Opamp circuit providing span (gain) and zero (offset) capabilities'
  prefs: []
  type: TYPE_NORMAL
- en: Write commands, as usual, begin with a start condition and an I²C address byte
    with the LO bit containing 0\. The byte following the address contains a command
    in the HO 2 or 3 bits (see [Figure 15-2](#figure15-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c15/f15002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-2: First 2 bytes of a Write command'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 15-1](#table15-1) lists the commands to which the MCP4725 responds.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 15-1: MCP4725 Commands'
  prefs: []
  type: TYPE_NORMAL
- en: '| **C[2] C[1] C[0]** | **Command** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00x^([*](#c15-footnote-001)) | Fast Write command |'
  prefs: []
  type: TYPE_TB
- en: '| 010 | Write DAC register |'
  prefs: []
  type: TYPE_TB
- en: '| 011 | Write DAC and EEPROM |'
  prefs: []
  type: TYPE_TB
- en: '| 1xx | Reserved for future use |'
  prefs: []
  type: TYPE_TB
- en: '| ^([*](#c15-footnoteref-001))x/xx = don’t care |'
  prefs: []
  type: TYPE_TB
- en: If C[2] and C[1] in [Table 15-1](#table15-1) are both 0 (the Fast Write command),
    then C[0] is used as one of the power-down bits. I’ll explain this further in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: There is only one Read command. Sending an address byte with the LO bit containing
    1 invokes the Read command (see section 15.5, “The Read Command,” later in this
    chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 15.2 The Fast Write Command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since writing a value to the DAC register is the most common operation on the
    MCP4725, the IC supports a command that lets you write a new DAC value with as
    few as three I²C bus transactions (see [Figure 15-3](#figure15-3)). The second
    byte of the transaction contains three pieces of information: the command (0b00)
    in the HO 2 bits, a power-down select code in bits 4 and 5 (see section 15.4,
    “Power-Down Modes,” later in this chapter), and the HO 4 bits of the 12-bit DAC
    value. The third byte contains the LO 8 bits of the DAC value.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in [Figure 15-3](#figure15-3), the DAC value is an unsigned 12-bit
    binary number. 0xFFF produces the largest voltage from the DAC (Vdd), and 0x000
    produces 0 V.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c15/f15003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-3: Fast Write command format'
  prefs: []
  type: TYPE_NORMAL
- en: As [Figure 15-3](#figure15-3) shows, you can send a sequence of commands to
    the DAC register with the Fast Write command. You can specify an arbitrary number
    of pairs of 16-bit values between the first three transactions and the stop condition
    (though many libraries limit the number of bytes you can write at a time to the
    I²C bus; the Arduino libraries, for example, limit this to about 32 bytes). This
    allows you to create a faster waveform by writing two words per voltage change
    rather than three words, though there might be an occasional blip when you’re
    forced to send a new start condition along with a new address byte.
  prefs: []
  type: TYPE_NORMAL
- en: 15.3 The Write Command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard MCP4725 Write command has two forms: write DAC register (a long
    form of the Fast Write command, with C[2]C[1]C[0] = 0b010) and write DAC register
    and EEPROM (C[2]C[1]C[0] = 0b011). This form requires a minimum of 4 bytes to
    do its job, one more than the Fast Write command (see [Figure 15-4](#figure15-4)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c15/f15004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-4: Write command format'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the most part, you wouldn’t use the standard Write command to write data
    to the DAC register, as it’s always quicker to do so with the Fast Write command.
    The only argument for using this command to write DAC data is that the data format
    is different: it conveniently places the data in the HO 12 bits of the 2 bytes,
    which is compatible with the 12-bit ADS1015 ADC, for example. However, given the
    extra cost of an I²C bus transaction, it’s far more efficient to shift the data
    into the correct location for the Fast Write operation.'
  prefs: []
  type: TYPE_NORMAL
- en: The main reason for this command (arguably the only reason) is that you can
    use it to program the EEPROM data on the MCP4725\. This allows you to set the
    power-on/reset voltage when the system first comes up. The EEPROM holds 12 data
    bits plus 2 power-down mode bits.
  prefs: []
  type: TYPE_NORMAL
- en: Note that it takes around 50 msec to program the EEPROM. During this time, the
    MCP4725 will ignore any new Write commands. You can determine when the EEPROM
    write operation is complete by polling the busy bit in the status register (see
    section 15.5, “The Read Command”).
  prefs: []
  type: TYPE_NORMAL
- en: The EEPROM has a life of about one million write cycles. While this is probably
    more than the average designer will need, constantly writing to the EEPROM will
    wear it out. In general, write to the EEPROM only during explicit initialization
    or when powering off your system. If you do the latter, the DAC will come up at
    the last output voltage when power comes back on.
  prefs: []
  type: TYPE_NORMAL
- en: 15.4 Power-Down Modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The P[1] and P[0] bits allow you to place the MCP4725 in a special power-down
    mode or normal mode. [Table 15-2](#table15-2) shows what these bits accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 15-2: Power-Down Bits'
  prefs: []
  type: TYPE_NORMAL
- en: '| **P[1]P[0]** | **DAC output** | **Pull-down resistor** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 00 | Enabled | None |'
  prefs: []
  type: TYPE_TB
- en: '| 01 | Off | 1 kΩ |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Off | 100 kΩ |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | Off | 500 kΩ |'
  prefs: []
  type: TYPE_TB
- en: During normal operation, when you’re expecting the DAC to produce an output
    voltage, you’d program these 2 bits with 0b00\. If you’re not using the DAC output,
    you can program these bits with 0b01, 0b10, or 0b11; in all three cases, this
    disconnects the DAC output from the V[out] pin on the IC and breakout board. These
    power-down values also connect a pull-down resistor to the V[out] pin so that
    it outputs 0 V to the outside world rather than floating, which often generates
    noise. The amount of pull-down to use varies based on the circuitry that follows
    the DAC. Generally, the lower the resistance, the more noise immunity you will
    have, though lower resistances can create impedance problems too. The correct
    choice depends on your circuit design.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, power-down modes exist to reduce power consumption in
    very low-power environments. If you are not concerned about power usage, leave
    the device in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 15.5 The Read Command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A DAC is intrinsically an output-only device, so reading DACs isn’t common.
    You’ll read data from the MCP4725 in just four cases:'
  prefs: []
  type: TYPE_NORMAL
- en: To determine the last value you (or some other thread) wrote to the DAC register
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To determine the last value written to the MCP4725’s EEPROM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To determine when the MCP4725 has finished its power-on/reset cycle so you can
    start sending Write commands to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To read the status of the busy bit to determine when the MCP4725 is done writing
    data to the EEPROM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As shown in [Figure 15-5](#figure15-5), the Read command begins with the usual
    start condition and an address byte whose LO bit contains a 1\. After the controller
    places this command on the bus, the MCP4725 responds with a sequence of 5 bytes.
    The first byte is a status byte describing the system state and power-down settings.
    The next 2 bytes contain the current DAC register data (appearing in the HO 12
    bits of these 2 bytes). The last 2 bytes contain the EEPROM data (power-down bits
    and power-on/reset DAC register value). You can see that the DAC register data
    appears in different locations in the second and third, and fourth and fifth bytes
    received.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c15/f15005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-5: Read command format'
  prefs: []
  type: TYPE_NORMAL
- en: The HO bit of the settings byte is the RDY (BUSY) bit. This bit is 0 while the
    MCP4725 is busy writing data to the EEPROM. The DAC will not accept a Write command
    while this bit is low. After writing data to the EEPROM, you should continuously
    loop, testing this bit until it comes back with a 1.
  prefs: []
  type: TYPE_NORMAL
- en: Bit 6 of the current settings is the power-on reset bit. This bit will contain
    a 0 while the system is busy resetting, either from power on or from a general
    call reset function. Don’t execute any Write commands during the reset operation.
  prefs: []
  type: TYPE_NORMAL
- en: Bits 1 and 2 of the current settings byte provide the current power-down settings.
    This is different from those same 2 bits in the EEPROM register data bytes, which
    specify what the power-down bits will be initialized with during a power-on/reset
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: 15.6 Chapter Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter described the use of the MCP4725 digital-to-analog converter. Of
    course, this should be familiar to you by now, as it has been the I²C peripheral
    of choice for most of the examples in this book.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter began by filling in details on the MCP4725 that haven’t been present
    in the examples throughout the book. It provided an overview of the device and
    then described the Fast Write and standard Write commands as well as writing to
    the on-board EEPROM. Then it discussed the power-down modes. Finally, this chapter
    discussed the Read command, used to read the contents of the on-chip EEPROM and
    the current DAC settings and to test the DAC busy bit.
  prefs: []
  type: TYPE_NORMAL
