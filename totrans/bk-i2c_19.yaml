- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: The MCP4725 Digital-to-Analog Converter
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725 数字到模拟转换器
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'Chapter 14 described an ADC, the ADS1*x*15\. This chapter describes the converse
    function: the DAC. Although DACs appear less frequently in systems than ADCs,
    understanding how to program them is still essential. This chapter describes the
    MCP4725 DAC used in software examples throughout this book, filling in several
    details that were unnecessary for coding examples up to this point.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第14章介绍了一个ADC，ADS1*x*15。本章描述了相反的功能：DAC。虽然DAC在系统中的出现频率比ADC低，但理解如何编程DAC仍然至关重要。本章描述了本书中所有软件示例中使用的MCP4725
    DAC，并补充了此前编码示例中未涉及的几个细节。
- en: The MCP4725 DAC is a common device for which both Adafruit and SparkFun produce
    breakout boards. It is a single 12-bit converter, translating integers in the
    range of 0 to 4095 to a voltage between 0 V and Vdd, the power supply pin on the
    DAC.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725 DAC是一种常见的设备，Adafruit和SparkFun都生产其扩展板。它是一个单一的12位转换器，将0到4095范围内的整数转换为0
    V到Vdd之间的电压，Vdd是DAC的电源引脚。
- en: This DAC works with a power supply ranging from 2.7 V to 5.5 V. That means that
    its output will also be in this range. With a 3.3-V power supply, this corresponds
    to 0.81 mV per unit; with a 5-V power supply, this is 1.22 mV per unit.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该DAC工作在2.7 V至5.5 V的电源范围内。这意味着其输出电压也将在该范围内。使用3.3 V电源时，这对应于每个单位0.81 mV；使用5 V电源时，这对应于每个单位1.22
    mV。
- en: If you need to produce some other voltage range, you can always take the output
    from this DAC and feed it into an opamp circuit, as in [Figure 15-1](#figure15-1).
    That circuit will translate the output from the DAC to any voltage in the range
    ±10 V (adjustable).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要生成其他电压范围，可以将该DAC的输出信号输入到一个运算放大器电路中，正如[图15-1](#figure15-1)所示。该电路将DAC的输出转换为范围在±10
    V之间的任意电压（可调）。
- en: Since the majority of this book has used the MCP4725 in its example code, I’ll
    spare you the redundancy of providing new demonstrations here. Check out Listings
    8-2 or 8-3 in Chapter 8 to review some earlier examples.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的大部分内容都使用了MCP4725作为示例代码，因此我将省略在此提供新示例的冗余内容。可以查看第8章中的清单8-2或8-3，以回顾之前的一些示例。
- en: 15.1 MCP4275 Overview
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.1 MCP4275概述
- en: The MCP4725 supports a single address pin allowing you to select one of two
    addresses. Internally, the MCP4725 actually supports 3 address bits; however,
    2 of those bits are hard-coded during manufacturing. You can order up to four
    different parts with base address 0x60, 0x62, 0x64, or 0x66\. The address pin
    on the MCP4725 allows further differentiation between addresses 0x60 and 0x61,
    0x62 and 0x63, 0x64 and 0x65, and 0x66 and 0x67.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725支持单一地址引脚，允许你选择两个地址中的一个。在内部，MCP4725实际上支持3个地址位；然而，其中两个地址位在制造过程中是硬编码的。你可以订购最多四个不同的部件，基本地址分别为0x60、0x62、0x64或0x66。MCP4725上的地址引脚可以进一步区分地址0x60和0x61，0x62和0x63，0x64和0x65，以及0x66和0x67。
- en: The MCP4725 includes an on-board, 14-bit EEPROM from which it loads a power-down
    mode and initial output setting on power-up/reset. This allows you to force the
    DAC output to a particular voltage on startup. To see why the default shouldn’t
    just be 0 V, imagine you’re driving an opamp circuit like that in [Figure 15-1](#figure15-1)
    (copied from Figure 14-1) calibrated to produce an output of −10 V to +10 V based
    on an input of 0 V to 5 V. This means the DAC would have to output +2.5 V to yield
    0 V on the opamp circuit’s output, which would be the appropriate power-up reset
    voltage. Of course, another purpose for the EEPROM is to allow a system to restore
    the DAC voltage to the last power-down value—so, for example, it would disable
    DAC outputs on startup.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725包括一个板载14位EEPROM，它在上电/复位时加载电源关闭模式和初始输出设置。这允许你在启动时将DAC输出强制为特定电压。为了理解为何默认值不应该是0
    V，想象你正在驱动一个如[图15-1](#figure15-1)（从图14-1复制）的运算放大器电路，经过校准后能够基于输入0 V到5 V产生从−10 V到+10
    V的输出。这意味着DAC需要输出+2.5 V，以便在运算放大器电路的输出端产生0 V，这将是适当的上电复位电压。当然，EEPROM的另一个用途是允许系统在启动时恢复DAC电压到上次断电时的值——例如，它可以在启动时禁用DAC输出。
- en: The MCP4725 is capable of running at standard speed (100 kHz), fast speed (400
    kHz), or high speed (up to 3.4 MHz). If your CPU or SBC supports high-speed operation,
    this will allow you to update waveforms at nearly 200 kHz.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725能够在标准速度（100 kHz）、快速速度（400 kHz）或高速（最高可达3.4 MHz）下运行。如果你的CPU或SBC支持高速操作，这将允许你以接近200
    kHz的速度更新波形。
- en: 'The MCP4725 is easy to program, which is why this book has used it in most
    of the generic examples. There are three basic command formats:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725易于编程，这也是本书在大多数通用示例中使用它的原因。它有三种基本的命令格式：
- en: A Fast Write command with three bus transactions (extensible)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有三个总线事务的快速写入命令（可扩展）
- en: A Write command with four bus transactions (extensible)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有四个总线事务的写入命令（可扩展）
- en: A Read command with six bus transactions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有六个总线事务的读取命令
- en: '![](image_fi/502468c15/f15001.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c15/f15001.png)'
- en: 'Figure 15-1: Opamp circuit providing span (gain) and zero (offset) capabilities'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-1：提供跨度（增益）和零点（偏移）功能的运算放大器电路
- en: Write commands, as usual, begin with a start condition and an I²C address byte
    with the LO bit containing 0\. The byte following the address contains a command
    in the HO 2 or 3 bits (see [Figure 15-2](#figure15-2)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 写入命令通常以起始条件和I²C地址字节开始，LO位包含0。地址字节之后的字节包含命令，HO的2或3位（见[图15-2](#figure15-2)）。
- en: '![](image_fi/502468c15/f15002.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c15/f15002.png)'
- en: 'Figure 15-2: First 2 bytes of a Write command'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-2：写入命令的前两个字节
- en: '[Table 15-1](#table15-1) lists the commands to which the MCP4725 responds.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[表15-1](#table15-1)列出了MCP4725响应的命令。'
- en: 'Table 15-1: MCP4725 Commands'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 表15-1：MCP4725命令
- en: '| **C[2] C[1] C[0]** | **Command** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **C[2] C[1] C[0]** | **命令** |'
- en: '| --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 00x^([*](#c15-footnote-001)) | Fast Write command |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 00x^([*](#c15-footnote-001)) | 快速写入命令 |'
- en: '| 010 | Write DAC register |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 010 | 写入DAC寄存器 |'
- en: '| 011 | Write DAC and EEPROM |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 011 | 写入DAC和EEPROM |'
- en: '| 1xx | Reserved for future use |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1xx | 预留用于未来使用 |'
- en: '| ^([*](#c15-footnoteref-001))x/xx = don’t care |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| ^([*](#c15-footnoteref-001))x/xx = 无关 |'
- en: If C[2] and C[1] in [Table 15-1](#table15-1) are both 0 (the Fast Write command),
    then C[0] is used as one of the power-down bits. I’ll explain this further in
    the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[表15-1](#table15-1)中的C[2]和C[1]都为0（即快速写入命令），则C[0]用作其中一个关机位。我将在下一节中进一步解释。
- en: There is only one Read command. Sending an address byte with the LO bit containing
    1 invokes the Read command (see section 15.5, “The Read Command,” later in this
    chapter).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个读取命令。发送一个地址字节，其中LO位为1，即可调用读取命令（请参见本章后面15.5节“读取命令”）。
- en: 15.2 The Fast Write Command
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.2 快速写入命令
- en: 'Since writing a value to the DAC register is the most common operation on the
    MCP4725, the IC supports a command that lets you write a new DAC value with as
    few as three I²C bus transactions (see [Figure 15-3](#figure15-3)). The second
    byte of the transaction contains three pieces of information: the command (0b00)
    in the HO 2 bits, a power-down select code in bits 4 and 5 (see section 15.4,
    “Power-Down Modes,” later in this chapter), and the HO 4 bits of the 12-bit DAC
    value. The third byte contains the LO 8 bits of the DAC value.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于向DAC寄存器写入值是MCP4725上最常见的操作，因此该IC支持一个命令，使您能够使用最少的三个I²C总线事务来写入新的DAC值（见[图15-3](#figure15-3)）。事务的第二个字节包含三条信息：命令（0b00）在HO的2位，电源关机选择码在第4和第5位（请参见本章后面15.4节“关机模式”），以及12位DAC值的HO
    4位。第三个字节包含DAC值的LO 8位。
- en: As you can see in [Figure 15-3](#figure15-3), the DAC value is an unsigned 12-bit
    binary number. 0xFFF produces the largest voltage from the DAC (Vdd), and 0x000
    produces 0 V.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图15-3](#figure15-3)所示，DAC值是一个无符号的12位二进制数。0xFFF产生DAC的最大电压（Vdd），而0x000产生0 V。
- en: '![](image_fi/502468c15/f15003.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c15/f15003.png)'
- en: 'Figure 15-3: Fast Write command format'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-3：快速写入命令格式
- en: As [Figure 15-3](#figure15-3) shows, you can send a sequence of commands to
    the DAC register with the Fast Write command. You can specify an arbitrary number
    of pairs of 16-bit values between the first three transactions and the stop condition
    (though many libraries limit the number of bytes you can write at a time to the
    I²C bus; the Arduino libraries, for example, limit this to about 32 bytes). This
    allows you to create a faster waveform by writing two words per voltage change
    rather than three words, though there might be an occasional blip when you’re
    forced to send a new start condition along with a new address byte.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图15-3](#figure15-3)所示，您可以使用快速写入命令向DAC寄存器发送一系列命令。您可以在前三个事务和停止条件之间指定任意数量的16位值对（尽管许多库限制了每次可以写入到I²C总线的字节数；例如，Arduino库将此限制为大约32个字节）。这使得您能够通过每次电压变化写入两个字而不是三个字，从而创建更快的波形，尽管当您不得不发送新的起始条件和新的地址字节时，可能会偶尔出现短暂的波动。
- en: 15.3 The Write Command
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.3 写入命令
- en: 'The standard MCP4725 Write command has two forms: write DAC register (a long
    form of the Fast Write command, with C[2]C[1]C[0] = 0b010) and write DAC register
    and EEPROM (C[2]C[1]C[0] = 0b011). This form requires a minimum of 4 bytes to
    do its job, one more than the Fast Write command (see [Figure 15-4](#figure15-4)).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 MCP4725 写入命令有两种形式：写入 DAC 寄存器（Fast Write 命令的长格式，C[2]C[1]C[0] = 0b010）和写入
    DAC 寄存器与 EEPROM（C[2]C[1]C[0] = 0b011）。这种形式需要至少 4 字节来执行其功能，比 Fast Write 命令多 1 字节（参见[图
    15-4](#figure15-4)）。
- en: '![](image_fi/502468c15/f15004.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c15/f15004.png)'
- en: 'Figure 15-4: Write command format'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15-4：写入命令格式
- en: 'For the most part, you wouldn’t use the standard Write command to write data
    to the DAC register, as it’s always quicker to do so with the Fast Write command.
    The only argument for using this command to write DAC data is that the data format
    is different: it conveniently places the data in the HO 12 bits of the 2 bytes,
    which is compatible with the 12-bit ADS1015 ADC, for example. However, given the
    extra cost of an I²C bus transaction, it’s far more efficient to shift the data
    into the correct location for the Fast Write operation.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，你不会使用标准的写入命令将数据写入 DAC 寄存器，因为使用 Fast Write 命令总是更快。唯一支持使用该命令写入 DAC 数据的理由是数据格式不同：它方便地将数据放置在
    2 字节的高 12 位中，这与 12 位的 ADS1015 ADC 兼容。例如，然而，考虑到 I²C 总线事务的额外成本，最好将数据移动到 Fast Write
    操作的正确位置。
- en: The main reason for this command (arguably the only reason) is that you can
    use it to program the EEPROM data on the MCP4725\. This allows you to set the
    power-on/reset voltage when the system first comes up. The EEPROM holds 12 data
    bits plus 2 power-down mode bits.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的主要原因（可以说是唯一的理由）是你可以用它来编程 MCP4725 的 EEPROM 数据。这使你能够设置系统上电/复位时的电压。EEPROM
    保存 12 位数据加上 2 个关机模式位。
- en: Note that it takes around 50 msec to program the EEPROM. During this time, the
    MCP4725 will ignore any new Write commands. You can determine when the EEPROM
    write operation is complete by polling the busy bit in the status register (see
    section 15.5, “The Read Command”).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，编程 EEPROM 大约需要 50 毫秒。在此期间，MCP4725 会忽略任何新的写入命令。你可以通过轮询状态寄存器中的忙碌位来确定 EEPROM
    写操作何时完成（见第 15.5 节，“读取命令”）。
- en: The EEPROM has a life of about one million write cycles. While this is probably
    more than the average designer will need, constantly writing to the EEPROM will
    wear it out. In general, write to the EEPROM only during explicit initialization
    or when powering off your system. If you do the latter, the DAC will come up at
    the last output voltage when power comes back on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: EEPROM 的寿命大约是 100 万次写入周期。虽然这通常超过了普通设计师的需求，但频繁写入 EEPROM 会导致其损耗。一般来说，只有在显式初始化时或系统关机时才写入
    EEPROM。如果你选择后者，DAC 在电源恢复时将以上次的输出电压启动。
- en: 15.4 Power-Down Modes
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.4 关机模式
- en: The P[1] and P[0] bits allow you to place the MCP4725 in a special power-down
    mode or normal mode. [Table 15-2](#table15-2) shows what these bits accomplish.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: P[1] 和 P[0] 位允许你将 MCP4725 设置为特殊的关机模式或正常模式。[表 15-2](#table15-2) 显示了这些位的功能。
- en: 'Table 15-2: Power-Down Bits'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15-2：关机位
- en: '| **P[1]P[0]** | **DAC output** | **Pull-down resistor** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **P[1]P[0]** | **DAC 输出** | **下拉电阻** |'
- en: '| --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 00 | Enabled | None |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 00 | 已启用 | 无 |'
- en: '| 01 | Off | 1 kΩ |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 01 | 关闭 | 1 kΩ |'
- en: '| 10 | Off | 100 kΩ |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 关闭 | 100 kΩ |'
- en: '| 11 | Off | 500 kΩ |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 关闭 | 500 kΩ |'
- en: During normal operation, when you’re expecting the DAC to produce an output
    voltage, you’d program these 2 bits with 0b00\. If you’re not using the DAC output,
    you can program these bits with 0b01, 0b10, or 0b11; in all three cases, this
    disconnects the DAC output from the V[out] pin on the IC and breakout board. These
    power-down values also connect a pull-down resistor to the V[out] pin so that
    it outputs 0 V to the outside world rather than floating, which often generates
    noise. The amount of pull-down to use varies based on the circuitry that follows
    the DAC. Generally, the lower the resistance, the more noise immunity you will
    have, though lower resistances can create impedance problems too. The correct
    choice depends on your circuit design.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常操作过程中，当你期望 DAC 输出电压时，应该将这 2 位设置为 0b00。如果不使用 DAC 输出，则可以将这些位设置为 0b01、0b10 或
    0b11；在这三种情况下，都会断开 DAC 输出与 IC 和分立板上的 V[out] 引脚连接。这些关机值还会将一个下拉电阻连接到 V[out] 引脚，以便输出
    0 V，而不是漂浮，这通常会产生噪声。使用的下拉电阻值取决于跟随 DAC 的电路。通常，电阻越小，抗噪声能力越强，但较低的电阻也可能会造成阻抗问题。正确的选择取决于你的电路设计。
- en: As the name suggests, power-down modes exist to reduce power consumption in
    very low-power environments. If you are not concerned about power usage, leave
    the device in normal mode.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，断电模式旨在减少在低功耗环境下的电力消耗。如果你不担心功耗，可以将设备保持在正常模式。
- en: 15.5 The Read Command
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.5 读取命令
- en: 'A DAC is intrinsically an output-only device, so reading DACs isn’t common.
    You’ll read data from the MCP4725 in just four cases:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数模转换器（DAC）本质上是一个只输出的设备，因此读取DAC并不常见。你会在以下四种情况下从MCP4725读取数据：
- en: To determine the last value you (or some other thread) wrote to the DAC register
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定你（或其他线程）最后一次写入DAC寄存器的值。
- en: To determine the last value written to the MCP4725’s EEPROM
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定最后一次写入MCP4725 EEPROM的值。
- en: To determine when the MCP4725 has finished its power-on/reset cycle so you can
    start sending Write commands to it
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定MCP4725何时完成其上电/复位周期，以便开始向其发送写入命令。
- en: To read the status of the busy bit to determine when the MCP4725 is done writing
    data to the EEPROM
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取忙碌位的状态，以确定MCP4725何时完成向EEPROM写入数据。
- en: As shown in [Figure 15-5](#figure15-5), the Read command begins with the usual
    start condition and an address byte whose LO bit contains a 1\. After the controller
    places this command on the bus, the MCP4725 responds with a sequence of 5 bytes.
    The first byte is a status byte describing the system state and power-down settings.
    The next 2 bytes contain the current DAC register data (appearing in the HO 12
    bits of these 2 bytes). The last 2 bytes contain the EEPROM data (power-down bits
    and power-on/reset DAC register value). You can see that the DAC register data
    appears in different locations in the second and third, and fourth and fifth bytes
    received.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图15-5](#figure15-5)所示，读取命令以通常的启动条件开始，并且地址字节的低位（LO bit）包含1。在控制器将此命令放置到总线上之后，MCP4725将以5字节的数据序列响应。第一个字节是一个状态字节，描述系统状态和断电设置。接下来的2个字节包含当前的DAC寄存器数据（出现在这2个字节的高12位）。最后2个字节包含EEPROM数据（断电位和上电/复位后的DAC寄存器值）。可以看到，DAC寄存器数据出现在接收到的第二、第三字节和第四、第五字节的不同位置。
- en: '![](image_fi/502468c15/f15005.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c15/f15005.png)'
- en: 'Figure 15-5: Read command format'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-5：读取命令格式
- en: The HO bit of the settings byte is the RDY (BUSY) bit. This bit is 0 while the
    MCP4725 is busy writing data to the EEPROM. The DAC will not accept a Write command
    while this bit is low. After writing data to the EEPROM, you should continuously
    loop, testing this bit until it comes back with a 1.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设置字节的高位（HO bit）是RDY（BUSY）位。这个位在MCP4725正在忙于向EEPROM写入数据时为0。当此位为低时，DAC不会接受写入命令。在向EEPROM写入数据之后，你应该持续循环，测试此位，直到它返回1。
- en: Bit 6 of the current settings is the power-on reset bit. This bit will contain
    a 0 while the system is busy resetting, either from power on or from a general
    call reset function. Don’t execute any Write commands during the reset operation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当前设置字节的第6位是上电复位位。在系统忙于复位时，无论是上电还是通过总线调用复位功能，该位将为0。在复位操作期间不要执行任何写入命令。
- en: Bits 1 and 2 of the current settings byte provide the current power-down settings.
    This is different from those same 2 bits in the EEPROM register data bytes, which
    specify what the power-down bits will be initialized with during a power-on/reset
    operation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当前设置字节的第1位和第2位提供当前的断电设置。这与EEPROM寄存器数据字节中的同2位不同，后者指定在上电/复位操作期间，断电位将被初始化为何值。
- en: 15.6 Chapter Summary
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.6 本章总结
- en: This chapter described the use of the MCP4725 digital-to-analog converter. Of
    course, this should be familiar to you by now, as it has been the I²C peripheral
    of choice for most of the examples in this book.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了MCP4725数模转换器的使用。当然，到现在你应该已经非常熟悉它，因为它已成为本书中大多数例子的I²C外设。
- en: This chapter began by filling in details on the MCP4725 that haven’t been present
    in the examples throughout the book. It provided an overview of the device and
    then described the Fast Write and standard Write commands as well as writing to
    the on-board EEPROM. Then it discussed the power-down modes. Finally, this chapter
    discussed the Read command, used to read the contents of the on-chip EEPROM and
    the current DAC settings and to test the DAC busy bit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先填补了书中例子中未涉及的MCP4725的细节。它提供了设备的概述，然后描述了快速写入和标准写入命令，以及如何向板载EEPROM写入数据。接着，讨论了断电模式。最后，本章讨论了读取命令，用于读取芯片上EEPROM的内容、当前DAC设置，并测试DAC忙碌位。
