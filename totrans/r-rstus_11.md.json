["```\n---\ntitle: \"COVID Website\"\ndescription: |\n  Welcome to the website. I hope you enjoy it!\nsite: distill::distill_website\n--- \n```", "```\nname: \"covid-website\"\ntitle: \"COVID Website\"\ndescription: |\n  COVID Website\noutput_dir: \"docs\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.xhtml\n    - text: \"About\"\n      href: about.xhtml\noutput: distill::distill_article \n```", "```\n/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above --*/\n  --heading-font:    sans-serif;\n  --mono-font:       monospace;\n  --body-font:       sans-serif;\n  --navbar-font:     sans-serif;  /* websites + blogs only */\n}\n\n/*-- ARTICLE METADATA --*/\nd-byline {\n  --heading-size:    0.6rem;\n  --heading-color:   rgba(0, 0, 0, 0.5);\n  --body-size:       0.8rem;\n  --body-color:      rgba(0, 0, 0, 0.8);\n}\n\n/*-- ARTICLE TABLE OF CONTENTS --*/\n.d-contents {\n  --heading-size:    18px;\n  --contents-size:   13px;\n}\n\n/*-- ARTICLE APPENDIX --*/\nd-appendix {\n  --heading-size:    15px;\n  --heading-color:   rgba(0, 0, 0, 0.65);\n  --text-size:       0.8em;\n  --text-color:      rgba(0, 0, 0, 0.5);\n}\n\n/*-- WEBSITE HEADER + FOOTER --*/\n/* These properties only apply to Distill sites and blogs  */\n\n.distill-site-header {\n  --title-size:       18px;\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #0F2E3D;\n}\n\n.distill-site-footer {\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #0F2E3D;\n}\n\n/*-- Additional custom styles --*/\n/* Add any additional CSS rules below                      */ \n```", "```\n.distill-site-header {\n  --title-size:       **28px;**\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        **20px;**\n --hover-color:      white;\n  --bkgd-color:       **#6cabdd;**\n} \n```", "```\nname: \"covid-website\"\ntitle: \"COVID Website\"\ndescription: |\n  COVID Website\n**theme: theme.css**\noutput_dir: \"docs\"\nnavbar:\n`--snip--` \n```", "```\n---\ntitle: \"COVID Website\"\ndescription: \"Information about COVID rates in the United States over time\"\nsite: distill::distill_website\n---\n\n```", "```\n\n```", "``` \n```", "```\n```", "```\n# COVID Death Rates as of `r last_day` ❷ \n```", "```\n```", "``` \n```", "```\nWe can see this same death rate data for all states on a map.\n\n```", "``` \n```", "```\n# COVID Death Rates Over Time\n\nThe following chart shows COVID death rates from the start of COVID in early\n2020 until `r last_day`.\n\n```", "``` \n```", "```\n```", "```\n\nThis makes the map wider and taller and, as a result, much easier to read.\n\n#### Making the Content Interactive\n\nThe content you’ve added to the website so far is all static; it has none of the interactivity typically seen in websites, which often use JavaScript to respond to user behavior. If you’re not proficient with HTML and JavaScript, you can use R packages like distill, plotly, and DT, which wrap JavaScript libraries, to add interactive elements like the graphics and maps Matt Herman uses on his Westchester County COVID website. [Figure 9-5](chapter9.xhtml#fig9-5), for example, shows a tooltip that allows the user to see results for any single day.\n\n![](../images/fig9-5.jpg)\n\nFigure 9-5: An interactive tooltip showing new COVID cases by day\n\nUsing the DT package, Herman also makes interactive tables that allow the user to scroll through the data and sort the values by clicking any variable in the header, as shown in [Figure 9-6](chapter9.xhtml#fig9-6).\n\n![](../images/fig9-6.jpg)\n\nFigure 9-6: An interactive table made with the DT package\n\nNext, you’ll add some interactivity to your COVID website, beginning with your table.\n\n##### Adding Pagination to a Table with reactable\n\nRemember how you included only four states in the table to keep it from getting too long? By creating an interactive table, you can avoid this limitation. The reactable package is a great option for interactive tables. First, install it with install.packages(\"reactable\"). Then, swap out the gt package code you used to make your static table with the reactable() function to show all states:\n\n```", "```\n\nThe reactable package shows 10 rows by default and adds pagination, as shown in [Figure 9-7](chapter9.xhtml#fig9-7).\n\n![](../images/fig9-7.jpg)\n\nFigure 9-7: An interactive table built with reactable\n\nThe reactable() function also enables sorting by default. Although you used the arrange() function in your code to sort the data by state name, users can click the “Death rate” column to sort values using that variable instead.\n\n##### Creating a Hovering Tooltip with plotly\n\nNow you’ll add some interactivity to the website’s chart using the plotly package. First, install plotly with install.packages(\"plotly\"). Then, create a plot with ggplot and save it as an object. Pass the object to the ggplotly() function, which turns it into an interactive plot, and run the following code to apply plotly to the chart of COVID death rates over time:\n\n```", "```\n\nThis is identical to the chart code shown earlier in this chapter, except that now you’re saving your chart as an object called covid_chart and then running ggplotly(covid_chart). This code produces an interactive chart that shows the data for a particular day when a user mouses over it. But the tooltip that pops up, shown in [Figure 9-8](chapter9.xhtml#fig9-8), is cluttered and overwhelming because the ggplotly() function shows all data by default.\n\n![](../images/fig9-8.jpg)\n\nFigure 9-8: The plotly default produces a messy tooltip.\n\nTo make the tooltip more informative, create a single variable containing the data you want to display and tell ggplotly() to use it:\n\n```", "```\n\nThis code begins by creating a date_nice_format variable that produces dates in the more readable format January 1, 2023, instead of 2023-01-01 ❶. This value is then combined with the state and death rate variables, and the result is saved as tooltip_text ❷. Next, the code adds a new aesthetic property in the ggplot() function ❸. This property doesn’t do anything until it’s passed to ggplotly()❹.\n\n[Figure 9-9](chapter9.xhtml#fig9-9) shows what the new tooltip looks like: it displays the name of the state, a nicely formatted date, and that day’s death rate.\n\n![](../images/fig9-9.jpg)\n\nFigure 9-9: Easy-to-read interactive tooltips on the COVID-19 death rate chart\n\nAdding interactivity is a great way to take advantage of the website medium. Users who might feel overwhelmed looking at the static chart can explore the interactive version, mousing over areas to see a summary of the results on any single day.\n\n### Hosting the Website\n\nNow that you’ve made a website, you need a way to share it. There are various ways to do this, ranging from simple to quite complex. The easiest solution is to compress the files in your *docs* folder (or whatever folder you put your rendered website in) and email your ZIP file to your recipients. They can unzip it and open the HTML files in their browser. This works fine if you know you won’t want to make changes to your website’s data or styles. But, as [Chapter 5](chapter5.xhtml) discussed, most projects aren’t really one-time events.\n\n#### Cloud Hosting\n\nA better approach is to put your entire *docs* folder in a place where others can see it. This could be an internal network, Dropbox, Google Drive, Box, or something similar. Hosting the files in the cloud this way is simple to implement and allows you to control who can see your website.\n\nYou can even automate the process of copying your *docs* folder to various online file-sharing sites using R packages: the rdrop2 package works with Dropbox, googledrive works with Google Drive, and boxr works with Box. For example, code like the following would automatically upload the project to Dropbox:\n\n```"]