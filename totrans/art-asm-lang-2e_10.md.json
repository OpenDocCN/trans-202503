["```\nFor MOVS:\n     movsb();\n     movsw();\n     movsd();\n\nFor CMPS:\n     cmpsb();\n     cmpsw();\n     cmpsd();\n\nFor SCAS:\n     scasb();\n     scasw();\n     scasd();\n\nFor STOS:\n     stosb();\n     stosw();\n     stosd();\n\nFor LODS:\n     lodsb();\n     lodsw();\n     lodsd();\n```", "```\nFor MOVS:\n     rep.movsb();\n     rep.movsw();\n     rep.movsd();\n\nFor CMPS:\n     repe.cmpsb();     // Note: repz is a synonym for repe.\n     repe.cmpsw();\n     repe.cmpsd();\n\n     repne.cmpsb();    // Note: repnz is a synonym for repne.\n     repne.cmpsw();\n     repne.cmpsd();\n\nFor SCAS:\n     repe.scasb();     // Note: repz is a synonym for repe.\n     repe.scasw();\n     repe.scasd();\n\n     repne.scasb();    // Note: repnz is a synonym for repne.\n     repne.scasw();\n     repne.scasd();\n\nFor STOS:\n     rep.stosb();\n     rep.stosw();\n     rep.stosd();\n```", "```\nprocedure Str2; @nodisplay;\nbegin Str2;\n\n          std();\n     << Do some string operations. >>\n          .\n          .\n          .\nend Str2;\n          .\n          .\n          .\n          cld();\n     << Do some operations. >>\n          Str2();\n     << Do some string operations requiring D=0\\. >>\n```", "```\nprocedure Str2; @nodisplay;\nbegin Str2;\n\n          std();\n     << Do some string operations. >>\n          .\n          .\n          .\n\nend Str2;\n          .\n          .\n          .\n          cld();\n     << Do some operations. >>\n          Str2();\n          cld();\n     << Do some string operations requiring D=0\\. >>\n```", "```\nprocedure Str2; @nodisplay;\nbegin Str2;\n\n          pushfd();\n          std();\n     << Do some string operations. >>\n          .\n          .\n          .\n          popfd();\nend Str2;\n          .\n\n          .\n          cld();\n     << Do some operations. >>\n          Str2();\n     << Do some string operations requiring D=0\\. >>\n```", "```\nmovsb()\n     movsw()\n     movsd()\n     rep.movsb()\n     rep.movsw()\n     rep.movsd()\n```", "```\nCharArray1: byte[ 384 ];\n     CharArray2: byte[ 384 ];\n          .\n          .\n          .\n          cld();\n          lea( esi, CharArray1 );\n          lea( edi, CharArray2 );\n          mov( 384, ecx );\n          rep.movsb();\n```", "```\nWordArray1: word[ 384 ];\n     WordArray2: word[ 384 ];\n          .\n          .\n          .\n          cld();\n          lea( esi, WordArray1 );\n          lea( edi, WordArray2 );\n          mov( 384, ecx );\n          rep.movsw();\n```", "```\nCharArray1: byte[ 384 ];\n     CharArray2: byte[ 384 ];\n          .\n          .\n          .\n          cld();\n          lea( esi, CharArray1[383] );\n          lea( edi, CharArray2[383] );\n          mov( 384, ecx );\n          rep.movsb();\n```", "```\nCharArray1: byte;\n     CharArray2: byte[ 384 ];\n          .\n          .\n          .\n          cld();\n          lea( esi, CharArray1 );\n          lea( edi, CharArray2 );\n          mov( 384, ecx );\n          rep.movsb();\n```", "```\nlea( esi, Source );\n     lea( edi, Destination );\n     mov( 1024, ecx );    // Copy 1024 dwords = 4096 bytes.\n     rep.movsd();\n     movsw();             // Copy bytes 4097 and 4098.\n     movsb();             // Copy the last byte.\n```", "```\nlea( esi, Source );\n     lea( edi, Dest );\n     mov( Length, ecx );\n     shr( 2, ecx );     // Divide by 4.\n     if( @nz ) then     // Only execute movsd if 4 or more bytes.\n\n          rep.movsd();  // Copy the dwords.\n\n     endif;\n     mov( Length, ecx );\n     and( %11, ecx );   // Compute (Length mod 4).\n     if( @nz ) then     // Only execute movsb if #bytes/4 <> 0.\n\n          rep.movsb();  // Copy the remaining 1, 2, or 3 bytes.\n\n     endif;\n```", "```\ncmpsb();\n     cmpsw();\n     cmpsd();\n\n     repe.cmpsb();\n     repe.cmpsw();\n     repe.cmpsd();\n\n     repne.cmpsb();\n     repne.cmpsw();\n     repne.cmpsd();\n```", "```\n\"String1\"\n\"String1\"\n```", "```\ncld();\n     mov( AdrsString1, esi );\n     mov( AdrsString2, edi );\n     mov( 7, ecx );\n     repe.cmpsb();\n```", "```\nmov( AdrsStr1, esi );\n     mov( AdrsStr2, edi );\n     mov( LengthSrc, ecx );\n     if( ecx > LengthDest ) then  // Put the length of the\n                                  // shorter string in ecx.\n          mov( LengthDest, ecx );\n\n     endif;\n     repe.cmpsb();\n     if( @z ) then                // If equal to the length of the\n                                  // shorter string, cmp lengths.\n          mov( LengthSrc, ecx );\n          cmp( ecx, LengthDest );\n\n     endif;\n```", "```\nstd();\n     lea( esi, SourceInteger[28] );\n     lea( edi, DestInteger[28] );\n     mov( 8, ecx );\n     rep.cmpsd();\n```", "```\nscasb()\n     scasw()\n     scasd()\n\n     repe.scasb()\n     repe.scasw()\n     repe.scasd()\n\n     repne.scasb()\n     repne.scasw()\n     repne.scasd()\n```", "```\ncld();\n     lea( edi, DestArray );\n     mov( 64, ecx );          // 64 double words = 256 bytes.\n     xor( eax, eax );         // Zero out eax.\n     rep.stosd();\n```", "```\nstosb();\n     stosw();\n     stosd();\n\n     rep.stosb();\n     rep.stosw();\n     rep.stosd();\n```", "```\nlodsb();\n     lodsw();\n     lodsd();\n\n     rep.lodsb();\n     rep.lodsw();\n     rep.lodsd();\n```", "```\nmov( StringAddress, esi );  // Load string address into esi.\n     mov( esi, edi );            // Also point edi here.\n     mov( (type str.strRec [esi]).length, ecx );\n\n     repeat\n\n          lodsb();               // Get the next character in the string.\n          if( al in 'A'..'Z' ) then\n\n               or( $20, al );    // Convert uppercase to lowercase.\n\n          endif;\n          stosb();               // Store converted char into string.\n          dec( ecx );\n\n     until( @z );                // Zero flag is set when ecx is 0.\n```"]